// Copyright 2013 The gl-rs developers. For a full listing of the authors,
// refer to the AUTHORS file at the top-level directory of this distribution.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#[link(name = "gl",
       author = "Brendan Zabarauskas",
       url = "https://github.com/bjz/gl-rs",
       vers = "0.1")];
#[comment = "An OpenGL function loader."];
#[license = "ASL2"];
#[crate_type = "lib"];

use std::libc::*;
use self::types::*;

mod types {
    use std::libc::*;
    
    // Common types from OpenGL 1.1
    pub type GLenum = c_uint;
    pub type GLboolean = c_uchar;
    pub type GLbitfield = c_uint;
    pub type GLvoid = c_void;
    pub type GLbyte = c_char;
    pub type GLshort = c_short;
    pub type GLint = c_int;
    pub type GLclampx = c_int;
    pub type GLubyte = c_uchar;
    pub type GLushort = c_ushort;
    pub type GLuint = c_uint;
    pub type GLsizei = c_int;
    pub type GLfloat = c_float;
    pub type GLclampf = c_float;
    pub type GLdouble = c_double;
    pub type GLclampd = c_double;
    pub type GLeglImageOES = *c_void;
    pub type GLchar = c_char;
    pub type GLcharARB = c_char;
    
    #[cfg(target_os = "macos")]
    pub type GLhandleARB = *c_void;
    #[cfg(not(target_os = "macos"))]
    pub type GLhandleARB = c_uint;
    
    pub type GLhalfARB = c_ushort;
    pub type GLhalf = c_ushort;
    
    // Must be 32 bits
    pub type GLfixed = GLint;
    
    pub type GLintptr = ptrdiff_t;
    pub type GLsizeiptr = ptrdiff_t;
    pub type GLint64 = i64;
    pub type GLuint64 = u64;
    pub type GLintptrARB = ptrdiff_t;
    pub type GLsizeiptrARB = ptrdiff_t;
    pub type GLint64EXT = i64;
    pub type GLuint64EXT = u64;
    
    pub struct __GLsync;
    pub type GLsync = *__GLsync;
    
    // compatible with OpenCL cl_context
    pub struct _cl_context;
    pub struct _cl_event;
    
    pub type GLDEBUGPROC = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLDEBUGPROCARB = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLDEBUGPROCKHR = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    
    // Vendor extension types
    pub type GLDEBUGPROCAMD = extern "C" fn(id: GLuint, category: GLenum, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLhalfNV = c_ushort;
    pub type GLvdpauSurfaceNV = GLintptr;
}

pub static CURRENT_BIT: GLenum = 0x00000001;
pub static POINT_BIT: GLenum = 0x00000002;
pub static LINE_BIT: GLenum = 0x00000004;
pub static POLYGON_BIT: GLenum = 0x00000008;
pub static POLYGON_STIPPLE_BIT: GLenum = 0x00000010;
pub static PIXEL_MODE_BIT: GLenum = 0x00000020;
pub static LIGHTING_BIT: GLenum = 0x00000040;
pub static FOG_BIT: GLenum = 0x00000080;
pub static DEPTH_BUFFER_BIT: GLenum = 0x00000100;
pub static ACCUM_BUFFER_BIT: GLenum = 0x00000200;
pub static STENCIL_BUFFER_BIT: GLenum = 0x00000400;
pub static VIEWPORT_BIT: GLenum = 0x00000800;
pub static TRANSFORM_BIT: GLenum = 0x00001000;
pub static ENABLE_BIT: GLenum = 0x00002000;
pub static COLOR_BUFFER_BIT: GLenum = 0x00004000;
pub static HINT_BIT: GLenum = 0x00008000;
pub static EVAL_BIT: GLenum = 0x00010000;
pub static LIST_BIT: GLenum = 0x00020000;
pub static TEXTURE_BIT: GLenum = 0x00040000;
pub static SCISSOR_BIT: GLenum = 0x00080000;
pub static MULTISAMPLE_BIT: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_ARB: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_EXT: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_3DFX: GLenum = 0x20000000;
pub static ALL_ATTRIB_BITS: GLenum = 0xFFFFFFFF;
pub static COVERAGE_BUFFER_BIT_NV: GLenum = 0x00008000;
pub static CLIENT_PIXEL_STORE_BIT: GLenum = 0x00000001;
pub static CLIENT_VERTEX_ARRAY_BIT: GLenum = 0x00000002;
pub static CLIENT_ALL_ATTRIB_BITS: GLenum = 0xFFFFFFFF;
pub static CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: GLenum = 0x00000001;
pub static CONTEXT_FLAG_DEBUG_BIT: GLenum = 0x00000002;
pub static CONTEXT_FLAG_DEBUG_BIT_KHR: GLenum = 0x00000002;
pub static CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: GLenum = 0x00000004;
pub static CONTEXT_CORE_PROFILE_BIT: GLenum = 0x00000001;
pub static CONTEXT_COMPATIBILITY_PROFILE_BIT: GLenum = 0x00000002;
pub static MAP_READ_BIT: GLenum = 0x0001;
pub static MAP_READ_BIT_EXT: GLenum = 0x0001;
pub static MAP_WRITE_BIT: GLenum = 0x0002;
pub static MAP_WRITE_BIT_EXT: GLenum = 0x0002;
pub static MAP_INVALIDATE_RANGE_BIT: GLenum = 0x0004;
pub static MAP_INVALIDATE_RANGE_BIT_EXT: GLenum = 0x0004;
pub static MAP_INVALIDATE_BUFFER_BIT: GLenum = 0x0008;
pub static MAP_INVALIDATE_BUFFER_BIT_EXT: GLenum = 0x0008;
pub static MAP_FLUSH_EXPLICIT_BIT: GLenum = 0x0010;
pub static MAP_FLUSH_EXPLICIT_BIT_EXT: GLenum = 0x0010;
pub static MAP_UNSYNCHRONIZED_BIT: GLenum = 0x0020;
pub static MAP_UNSYNCHRONIZED_BIT_EXT: GLenum = 0x0020;
pub static MAP_PERSISTENT_BIT: GLenum = 0x0040;
pub static MAP_COHERENT_BIT: GLenum = 0x0080;
pub static DYNAMIC_STORAGE_BIT: GLenum = 0x0100;
pub static CLIENT_STORAGE_BIT: GLenum = 0x0200;
pub static VERTEX_ATTRIB_ARRAY_BARRIER_BIT: GLenum = 0x00000001;
pub static VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT: GLenum = 0x00000001;
pub static ELEMENT_ARRAY_BARRIER_BIT: GLenum = 0x00000002;
pub static ELEMENT_ARRAY_BARRIER_BIT_EXT: GLenum = 0x00000002;
pub static UNIFORM_BARRIER_BIT: GLenum = 0x00000004;
pub static UNIFORM_BARRIER_BIT_EXT: GLenum = 0x00000004;
pub static TEXTURE_FETCH_BARRIER_BIT: GLenum = 0x00000008;
pub static TEXTURE_FETCH_BARRIER_BIT_EXT: GLenum = 0x00000008;
pub static SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: GLenum = 0x00000010;
pub static SHADER_IMAGE_ACCESS_BARRIER_BIT: GLenum = 0x00000020;
pub static SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT: GLenum = 0x00000020;
pub static COMMAND_BARRIER_BIT: GLenum = 0x00000040;
pub static COMMAND_BARRIER_BIT_EXT: GLenum = 0x00000040;
pub static PIXEL_BUFFER_BARRIER_BIT: GLenum = 0x00000080;
pub static PIXEL_BUFFER_BARRIER_BIT_EXT: GLenum = 0x00000080;
pub static TEXTURE_UPDATE_BARRIER_BIT: GLenum = 0x00000100;
pub static TEXTURE_UPDATE_BARRIER_BIT_EXT: GLenum = 0x00000100;
pub static BUFFER_UPDATE_BARRIER_BIT: GLenum = 0x00000200;
pub static BUFFER_UPDATE_BARRIER_BIT_EXT: GLenum = 0x00000200;
pub static FRAMEBUFFER_BARRIER_BIT: GLenum = 0x00000400;
pub static FRAMEBUFFER_BARRIER_BIT_EXT: GLenum = 0x00000400;
pub static TRANSFORM_FEEDBACK_BARRIER_BIT: GLenum = 0x00000800;
pub static TRANSFORM_FEEDBACK_BARRIER_BIT_EXT: GLenum = 0x00000800;
pub static ATOMIC_COUNTER_BARRIER_BIT: GLenum = 0x00001000;
pub static ATOMIC_COUNTER_BARRIER_BIT_EXT: GLenum = 0x00001000;
pub static SHADER_STORAGE_BARRIER_BIT: GLenum = 0x00002000;
pub static CLIENT_MAPPED_BUFFER_BARRIER_BIT: GLenum = 0x00004000;
pub static QUERY_BUFFER_BARRIER_BIT: GLenum = 0x00008000;
pub static ALL_BARRIER_BITS: GLenum = 0xFFFFFFFF;
pub static ALL_BARRIER_BITS_EXT: GLenum = 0xFFFFFFFF;
pub static SYNC_FLUSH_COMMANDS_BIT: GLenum = 0x00000001;
pub static SYNC_FLUSH_COMMANDS_BIT_APPLE: GLenum = 0x00000001;
pub static VERTEX_SHADER_BIT: GLenum = 0x00000001;
pub static VERTEX_SHADER_BIT_EXT: GLenum = 0x00000001;
pub static FRAGMENT_SHADER_BIT: GLenum = 0x00000002;
pub static FRAGMENT_SHADER_BIT_EXT: GLenum = 0x00000002;
pub static GEOMETRY_SHADER_BIT: GLenum = 0x00000004;
pub static TESS_CONTROL_SHADER_BIT: GLenum = 0x00000008;
pub static TESS_EVALUATION_SHADER_BIT: GLenum = 0x00000010;
pub static COMPUTE_SHADER_BIT: GLenum = 0x00000020;
pub static ALL_SHADER_BITS: GLenum = 0xFFFFFFFF;
pub static ALL_SHADER_BITS_EXT: GLenum = 0xFFFFFFFF;
pub static TEXTURE_STORAGE_SPARSE_BIT_AMD: GLenum = 0x00000001;
pub static RED_BIT_ATI: GLenum = 0x00000001;
pub static GREEN_BIT_ATI: GLenum = 0x00000002;
pub static BLUE_BIT_ATI: GLenum = 0x00000004;
pub static _2X_BIT_ATI: GLenum = 0x00000001;
pub static _4X_BIT_ATI: GLenum = 0x00000002;
pub static _8X_BIT_ATI: GLenum = 0x00000004;
pub static HALF_BIT_ATI: GLenum = 0x00000008;
pub static QUARTER_BIT_ATI: GLenum = 0x00000010;
pub static EIGHTH_BIT_ATI: GLenum = 0x00000020;
pub static SATURATE_BIT_ATI: GLenum = 0x00000040;
pub static COMP_BIT_ATI: GLenum = 0x00000002;
pub static NEGATE_BIT_ATI: GLenum = 0x00000004;
pub static BIAS_BIT_ATI: GLenum = 0x00000008;
pub static TRACE_OPERATIONS_BIT_MESA: GLenum = 0x0001;
pub static TRACE_PRIMITIVES_BIT_MESA: GLenum = 0x0002;
pub static TRACE_ARRAYS_BIT_MESA: GLenum = 0x0004;
pub static TRACE_TEXTURES_BIT_MESA: GLenum = 0x0008;
pub static TRACE_PIXELS_BIT_MESA: GLenum = 0x0010;
pub static TRACE_ERRORS_BIT_MESA: GLenum = 0x0020;
pub static TRACE_ALL_BITS_MESA: GLenum = 0xFFFF;
pub static BOLD_BIT_NV: GLenum = 0x01;
pub static ITALIC_BIT_NV: GLenum = 0x02;
pub static GLYPH_WIDTH_BIT_NV: GLenum = 0x01;
pub static GLYPH_HEIGHT_BIT_NV: GLenum = 0x02;
pub static GLYPH_HORIZONTAL_BEARING_X_BIT_NV: GLenum = 0x04;
pub static GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: GLenum = 0x08;
pub static GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: GLenum = 0x10;
pub static GLYPH_VERTICAL_BEARING_X_BIT_NV: GLenum = 0x20;
pub static GLYPH_VERTICAL_BEARING_Y_BIT_NV: GLenum = 0x40;
pub static GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: GLenum = 0x80;
pub static GLYPH_HAS_KERNING_BIT_NV: GLenum = 0x100;
pub static FONT_X_MIN_BOUNDS_BIT_NV: GLenum = 0x00010000;
pub static FONT_Y_MIN_BOUNDS_BIT_NV: GLenum = 0x00020000;
pub static FONT_X_MAX_BOUNDS_BIT_NV: GLenum = 0x00040000;
pub static FONT_Y_MAX_BOUNDS_BIT_NV: GLenum = 0x00080000;
pub static FONT_UNITS_PER_EM_BIT_NV: GLenum = 0x00100000;
pub static FONT_ASCENDER_BIT_NV: GLenum = 0x00200000;
pub static FONT_DESCENDER_BIT_NV: GLenum = 0x00400000;
pub static FONT_HEIGHT_BIT_NV: GLenum = 0x00800000;
pub static FONT_MAX_ADVANCE_WIDTH_BIT_NV: GLenum = 0x01000000;
pub static FONT_MAX_ADVANCE_HEIGHT_BIT_NV: GLenum = 0x02000000;
pub static FONT_UNDERLINE_POSITION_BIT_NV: GLenum = 0x04000000;
pub static FONT_UNDERLINE_THICKNESS_BIT_NV: GLenum = 0x08000000;
pub static FONT_HAS_KERNING_BIT_NV: GLenum = 0x10000000;
pub static VERTEX23_BIT_PGI: GLenum = 0x00000004;
pub static VERTEX4_BIT_PGI: GLenum = 0x00000008;
pub static COLOR3_BIT_PGI: GLenum = 0x00010000;
pub static COLOR4_BIT_PGI: GLenum = 0x00020000;
pub static EDGEFLAG_BIT_PGI: GLenum = 0x00040000;
pub static INDEX_BIT_PGI: GLenum = 0x00080000;
pub static MAT_AMBIENT_BIT_PGI: GLenum = 0x00100000;
pub static MAT_AMBIENT_AND_DIFFUSE_BIT_PGI: GLenum = 0x00200000;
pub static MAT_DIFFUSE_BIT_PGI: GLenum = 0x00400000;
pub static MAT_EMISSION_BIT_PGI: GLenum = 0x00800000;
pub static MAT_COLOR_INDEXES_BIT_PGI: GLenum = 0x01000000;
pub static MAT_SHININESS_BIT_PGI: GLenum = 0x02000000;
pub static MAT_SPECULAR_BIT_PGI: GLenum = 0x04000000;
pub static NORMAL_BIT_PGI: GLenum = 0x08000000;
pub static TEXCOORD1_BIT_PGI: GLenum = 0x10000000;
pub static TEXCOORD2_BIT_PGI: GLenum = 0x20000000;
pub static TEXCOORD3_BIT_PGI: GLenum = 0x40000000;
pub static TEXCOORD4_BIT_PGI: GLenum = 0x80000000;
pub static COLOR_BUFFER_BIT0_QCOM: GLenum = 0x00000001;
pub static COLOR_BUFFER_BIT1_QCOM: GLenum = 0x00000002;
pub static COLOR_BUFFER_BIT2_QCOM: GLenum = 0x00000004;
pub static COLOR_BUFFER_BIT3_QCOM: GLenum = 0x00000008;
pub static COLOR_BUFFER_BIT4_QCOM: GLenum = 0x00000010;
pub static COLOR_BUFFER_BIT5_QCOM: GLenum = 0x00000020;
pub static COLOR_BUFFER_BIT6_QCOM: GLenum = 0x00000040;
pub static COLOR_BUFFER_BIT7_QCOM: GLenum = 0x00000080;
pub static DEPTH_BUFFER_BIT0_QCOM: GLenum = 0x00000100;
pub static DEPTH_BUFFER_BIT1_QCOM: GLenum = 0x00000200;
pub static DEPTH_BUFFER_BIT2_QCOM: GLenum = 0x00000400;
pub static DEPTH_BUFFER_BIT3_QCOM: GLenum = 0x00000800;
pub static DEPTH_BUFFER_BIT4_QCOM: GLenum = 0x00001000;
pub static DEPTH_BUFFER_BIT5_QCOM: GLenum = 0x00002000;
pub static DEPTH_BUFFER_BIT6_QCOM: GLenum = 0x00004000;
pub static DEPTH_BUFFER_BIT7_QCOM: GLenum = 0x00008000;
pub static STENCIL_BUFFER_BIT0_QCOM: GLenum = 0x00010000;
pub static STENCIL_BUFFER_BIT1_QCOM: GLenum = 0x00020000;
pub static STENCIL_BUFFER_BIT2_QCOM: GLenum = 0x00040000;
pub static STENCIL_BUFFER_BIT3_QCOM: GLenum = 0x00080000;
pub static STENCIL_BUFFER_BIT4_QCOM: GLenum = 0x00100000;
pub static STENCIL_BUFFER_BIT5_QCOM: GLenum = 0x00200000;
pub static STENCIL_BUFFER_BIT6_QCOM: GLenum = 0x00400000;
pub static STENCIL_BUFFER_BIT7_QCOM: GLenum = 0x00800000;
pub static MULTISAMPLE_BUFFER_BIT0_QCOM: GLenum = 0x01000000;
pub static MULTISAMPLE_BUFFER_BIT1_QCOM: GLenum = 0x02000000;
pub static MULTISAMPLE_BUFFER_BIT2_QCOM: GLenum = 0x04000000;
pub static MULTISAMPLE_BUFFER_BIT3_QCOM: GLenum = 0x08000000;
pub static MULTISAMPLE_BUFFER_BIT4_QCOM: GLenum = 0x10000000;
pub static MULTISAMPLE_BUFFER_BIT5_QCOM: GLenum = 0x20000000;
pub static MULTISAMPLE_BUFFER_BIT6_QCOM: GLenum = 0x40000000;
pub static MULTISAMPLE_BUFFER_BIT7_QCOM: GLenum = 0x80000000;
pub static TEXTURE_DEFORMATION_BIT_SGIX: GLenum = 0x00000001;
pub static GEOMETRY_DEFORMATION_BIT_SGIX: GLenum = 0x00000002;
pub static RESTART_SUN: GLenum = 0x0001;
pub static REPLACE_MIDDLE_SUN: GLenum = 0x0002;
pub static REPLACE_OLDEST_SUN: GLenum = 0x0003;
pub static LAYOUT_DEFAULT_INTEL: GLenum = 0;
pub static LAYOUT_LINEAR_INTEL: GLenum = 1;
pub static LAYOUT_LINEAR_CPU_CACHED_INTEL: GLenum = 2;
pub static NEXT_BUFFER_NV: GLenum = -2;
pub static SKIP_COMPONENTS4_NV: GLenum = -3;
pub static SKIP_COMPONENTS3_NV: GLenum = -4;
pub static SKIP_COMPONENTS2_NV: GLenum = -5;
pub static SKIP_COMPONENTS1_NV: GLenum = -6;
pub static CLOSE_PATH_NV: GLenum = 0x00;
pub static MOVE_TO_NV: GLenum = 0x02;
pub static RELATIVE_MOVE_TO_NV: GLenum = 0x03;
pub static LINE_TO_NV: GLenum = 0x04;
pub static RELATIVE_LINE_TO_NV: GLenum = 0x05;
pub static HORIZONTAL_LINE_TO_NV: GLenum = 0x06;
pub static RELATIVE_HORIZONTAL_LINE_TO_NV: GLenum = 0x07;
pub static VERTICAL_LINE_TO_NV: GLenum = 0x08;
pub static RELATIVE_VERTICAL_LINE_TO_NV: GLenum = 0x09;
pub static QUADRATIC_CURVE_TO_NV: GLenum = 0x0A;
pub static RELATIVE_QUADRATIC_CURVE_TO_NV: GLenum = 0x0B;
pub static CUBIC_CURVE_TO_NV: GLenum = 0x0C;
pub static RELATIVE_CUBIC_CURVE_TO_NV: GLenum = 0x0D;
pub static SMOOTH_QUADRATIC_CURVE_TO_NV: GLenum = 0x0E;
pub static RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: GLenum = 0x0F;
pub static SMOOTH_CUBIC_CURVE_TO_NV: GLenum = 0x10;
pub static RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: GLenum = 0x11;
pub static SMALL_CCW_ARC_TO_NV: GLenum = 0x12;
pub static RELATIVE_SMALL_CCW_ARC_TO_NV: GLenum = 0x13;
pub static SMALL_CW_ARC_TO_NV: GLenum = 0x14;
pub static RELATIVE_SMALL_CW_ARC_TO_NV: GLenum = 0x15;
pub static LARGE_CCW_ARC_TO_NV: GLenum = 0x16;
pub static RELATIVE_LARGE_CCW_ARC_TO_NV: GLenum = 0x17;
pub static LARGE_CW_ARC_TO_NV: GLenum = 0x18;
pub static RELATIVE_LARGE_CW_ARC_TO_NV: GLenum = 0x19;
pub static RESTART_PATH_NV: GLenum = 0xF0;
pub static DUP_FIRST_CUBIC_CURVE_TO_NV: GLenum = 0xF2;
pub static DUP_LAST_CUBIC_CURVE_TO_NV: GLenum = 0xF4;
pub static RECT_NV: GLenum = 0xF6;
pub static CIRCULAR_CCW_ARC_TO_NV: GLenum = 0xF8;
pub static CIRCULAR_CW_ARC_TO_NV: GLenum = 0xFA;
pub static CIRCULAR_TANGENT_ARC_TO_NV: GLenum = 0xFC;
pub static ARC_TO_NV: GLenum = 0xFE;
pub static RELATIVE_ARC_TO_NV: GLenum = 0xFF;
pub static FALSE: GLenum = 0;
pub static NO_ERROR: GLenum = 0;
pub static ZERO: GLenum = 0;
pub static NONE: GLenum = 0;
pub static TRUE: GLenum = 1;
pub static ONE: GLenum = 1;
pub static INVALID_INDEX: GLenum = 0xFFFFFFFF;
pub static TIMEOUT_IGNORED: GLenum = 0xFFFFFFFFFFFFFFFF;
pub static TIMEOUT_IGNORED_APPLE: GLenum = 0xFFFFFFFFFFFFFFFF;
pub static VERSION_ES_CL_1_0: GLenum = 1;
pub static VERSION_ES_CM_1_1: GLenum = 1;
pub static VERSION_ES_CL_1_1: GLenum = 1;
pub static POINTS: GLenum = 0x0000;
pub static LINES: GLenum = 0x0001;
pub static LINE_LOOP: GLenum = 0x0002;
pub static LINE_STRIP: GLenum = 0x0003;
pub static TRIANGLES: GLenum = 0x0004;
pub static TRIANGLE_STRIP: GLenum = 0x0005;
pub static TRIANGLE_FAN: GLenum = 0x0006;
pub static QUADS: GLenum = 0x0007;
pub static QUAD_STRIP: GLenum = 0x0008;
pub static POLYGON: GLenum = 0x0009;
pub static LINES_ADJACENCY: GLenum = 0x000A;
pub static LINES_ADJACENCY_ARB: GLenum = 0x000A;
pub static LINES_ADJACENCY_EXT: GLenum = 0x000A;
pub static LINE_STRIP_ADJACENCY: GLenum = 0x000B;
pub static LINE_STRIP_ADJACENCY_ARB: GLenum = 0x000B;
pub static LINE_STRIP_ADJACENCY_EXT: GLenum = 0x000B;
pub static TRIANGLES_ADJACENCY: GLenum = 0x000C;
pub static TRIANGLES_ADJACENCY_ARB: GLenum = 0x000C;
pub static TRIANGLES_ADJACENCY_EXT: GLenum = 0x000C;
pub static TRIANGLE_STRIP_ADJACENCY: GLenum = 0x000D;
pub static TRIANGLE_STRIP_ADJACENCY_ARB: GLenum = 0x000D;
pub static TRIANGLE_STRIP_ADJACENCY_EXT: GLenum = 0x000D;
pub static PATCHES: GLenum = 0x000E;
pub static ACCUM: GLenum = 0x0100;
pub static LOAD: GLenum = 0x0101;
pub static RETURN: GLenum = 0x0102;
pub static MULT: GLenum = 0x0103;
pub static ADD: GLenum = 0x0104;
pub static NEVER: GLenum = 0x0200;
pub static LESS: GLenum = 0x0201;
pub static EQUAL: GLenum = 0x0202;
pub static LEQUAL: GLenum = 0x0203;
pub static GREATER: GLenum = 0x0204;
pub static NOTEQUAL: GLenum = 0x0205;
pub static GEQUAL: GLenum = 0x0206;
pub static ALWAYS: GLenum = 0x0207;
pub static SRC_COLOR: GLenum = 0x0300;
pub static ONE_MINUS_SRC_COLOR: GLenum = 0x0301;
pub static SRC_ALPHA: GLenum = 0x0302;
pub static ONE_MINUS_SRC_ALPHA: GLenum = 0x0303;
pub static DST_ALPHA: GLenum = 0x0304;
pub static ONE_MINUS_DST_ALPHA: GLenum = 0x0305;
pub static DST_COLOR: GLenum = 0x0306;
pub static ONE_MINUS_DST_COLOR: GLenum = 0x0307;
pub static SRC_ALPHA_SATURATE: GLenum = 0x0308;
pub static FRONT_LEFT: GLenum = 0x0400;
pub static FRONT_RIGHT: GLenum = 0x0401;
pub static BACK_LEFT: GLenum = 0x0402;
pub static BACK_RIGHT: GLenum = 0x0403;
pub static FRONT: GLenum = 0x0404;
pub static BACK: GLenum = 0x0405;
pub static LEFT: GLenum = 0x0406;
pub static RIGHT: GLenum = 0x0407;
pub static FRONT_AND_BACK: GLenum = 0x0408;
pub static AUX0: GLenum = 0x0409;
pub static AUX1: GLenum = 0x040A;
pub static AUX2: GLenum = 0x040B;
pub static AUX3: GLenum = 0x040C;
pub static INVALID_ENUM: GLenum = 0x0500;
pub static INVALID_VALUE: GLenum = 0x0501;
pub static INVALID_OPERATION: GLenum = 0x0502;
pub static STACK_OVERFLOW: GLenum = 0x0503;
pub static STACK_OVERFLOW_KHR: GLenum = 0x0503;
pub static STACK_UNDERFLOW: GLenum = 0x0504;
pub static STACK_UNDERFLOW_KHR: GLenum = 0x0504;
pub static OUT_OF_MEMORY: GLenum = 0x0505;
pub static INVALID_FRAMEBUFFER_OPERATION: GLenum = 0x0506;
pub static INVALID_FRAMEBUFFER_OPERATION_EXT: GLenum = 0x0506;
pub static INVALID_FRAMEBUFFER_OPERATION_OES: GLenum = 0x0506;
pub static _2D: GLenum = 0x0600;
pub static _3D: GLenum = 0x0601;
pub static _3D_COLOR: GLenum = 0x0602;
pub static _3D_COLOR_TEXTURE: GLenum = 0x0603;
pub static _4D_COLOR_TEXTURE: GLenum = 0x0604;
pub static PASS_THROUGH_TOKEN: GLenum = 0x0700;
pub static POINT_TOKEN: GLenum = 0x0701;
pub static LINE_TOKEN: GLenum = 0x0702;
pub static POLYGON_TOKEN: GLenum = 0x0703;
pub static BITMAP_TOKEN: GLenum = 0x0704;
pub static DRAW_PIXEL_TOKEN: GLenum = 0x0705;
pub static COPY_PIXEL_TOKEN: GLenum = 0x0706;
pub static LINE_RESET_TOKEN: GLenum = 0x0707;
pub static EXP: GLenum = 0x0800;
pub static EXP2: GLenum = 0x0801;
pub static CW: GLenum = 0x0900;
pub static CCW: GLenum = 0x0901;
pub static COEFF: GLenum = 0x0A00;
pub static ORDER: GLenum = 0x0A01;
pub static DOMAIN: GLenum = 0x0A02;
pub static CURRENT_COLOR: GLenum = 0x0B00;
pub static CURRENT_INDEX: GLenum = 0x0B01;
pub static CURRENT_NORMAL: GLenum = 0x0B02;
pub static CURRENT_TEXTURE_COORDS: GLenum = 0x0B03;
pub static CURRENT_RASTER_COLOR: GLenum = 0x0B04;
pub static CURRENT_RASTER_INDEX: GLenum = 0x0B05;
pub static CURRENT_RASTER_TEXTURE_COORDS: GLenum = 0x0B06;
pub static CURRENT_RASTER_POSITION: GLenum = 0x0B07;
pub static CURRENT_RASTER_POSITION_VALID: GLenum = 0x0B08;
pub static CURRENT_RASTER_DISTANCE: GLenum = 0x0B09;
pub static POINT_SMOOTH: GLenum = 0x0B10;
pub static POINT_SIZE: GLenum = 0x0B11;
pub static POINT_SIZE_RANGE: GLenum = 0x0B12;
pub static SMOOTH_POINT_SIZE_RANGE: GLenum = 0x0B12;
pub static POINT_SIZE_GRANULARITY: GLenum = 0x0B13;
pub static SMOOTH_POINT_SIZE_GRANULARITY: GLenum = 0x0B13;
pub static LINE_SMOOTH: GLenum = 0x0B20;
pub static LINE_WIDTH: GLenum = 0x0B21;
pub static LINE_WIDTH_RANGE: GLenum = 0x0B22;
pub static SMOOTH_LINE_WIDTH_RANGE: GLenum = 0x0B22;
pub static LINE_WIDTH_GRANULARITY: GLenum = 0x0B23;
pub static SMOOTH_LINE_WIDTH_GRANULARITY: GLenum = 0x0B23;
pub static LINE_STIPPLE: GLenum = 0x0B24;
pub static LINE_STIPPLE_PATTERN: GLenum = 0x0B25;
pub static LINE_STIPPLE_REPEAT: GLenum = 0x0B26;
pub static LIST_MODE: GLenum = 0x0B30;
pub static MAX_LIST_NESTING: GLenum = 0x0B31;
pub static LIST_BASE: GLenum = 0x0B32;
pub static LIST_INDEX: GLenum = 0x0B33;
pub static POLYGON_MODE: GLenum = 0x0B40;
pub static POLYGON_SMOOTH: GLenum = 0x0B41;
pub static POLYGON_STIPPLE: GLenum = 0x0B42;
pub static EDGE_FLAG: GLenum = 0x0B43;
pub static CULL_FACE: GLenum = 0x0B44;
pub static CULL_FACE_MODE: GLenum = 0x0B45;
pub static FRONT_FACE: GLenum = 0x0B46;
pub static LIGHTING: GLenum = 0x0B50;
pub static LIGHT_MODEL_LOCAL_VIEWER: GLenum = 0x0B51;
pub static LIGHT_MODEL_TWO_SIDE: GLenum = 0x0B52;
pub static LIGHT_MODEL_AMBIENT: GLenum = 0x0B53;
pub static SHADE_MODEL: GLenum = 0x0B54;
pub static COLOR_MATERIAL_FACE: GLenum = 0x0B55;
pub static COLOR_MATERIAL_PARAMETER: GLenum = 0x0B56;
pub static COLOR_MATERIAL: GLenum = 0x0B57;
pub static FOG: GLenum = 0x0B60;
pub static FOG_INDEX: GLenum = 0x0B61;
pub static FOG_DENSITY: GLenum = 0x0B62;
pub static FOG_START: GLenum = 0x0B63;
pub static FOG_END: GLenum = 0x0B64;
pub static FOG_MODE: GLenum = 0x0B65;
pub static FOG_COLOR: GLenum = 0x0B66;
pub static DEPTH_RANGE: GLenum = 0x0B70;
pub static DEPTH_TEST: GLenum = 0x0B71;
pub static DEPTH_WRITEMASK: GLenum = 0x0B72;
pub static DEPTH_CLEAR_VALUE: GLenum = 0x0B73;
pub static DEPTH_FUNC: GLenum = 0x0B74;
pub static ACCUM_CLEAR_VALUE: GLenum = 0x0B80;
pub static STENCIL_TEST: GLenum = 0x0B90;
pub static STENCIL_CLEAR_VALUE: GLenum = 0x0B91;
pub static STENCIL_FUNC: GLenum = 0x0B92;
pub static STENCIL_VALUE_MASK: GLenum = 0x0B93;
pub static STENCIL_FAIL: GLenum = 0x0B94;
pub static STENCIL_PASS_DEPTH_FAIL: GLenum = 0x0B95;
pub static STENCIL_PASS_DEPTH_PASS: GLenum = 0x0B96;
pub static STENCIL_REF: GLenum = 0x0B97;
pub static STENCIL_WRITEMASK: GLenum = 0x0B98;
pub static MATRIX_MODE: GLenum = 0x0BA0;
pub static NORMALIZE: GLenum = 0x0BA1;
pub static VIEWPORT: GLenum = 0x0BA2;
pub static MODELVIEW_STACK_DEPTH: GLenum = 0x0BA3;
pub static MODELVIEW0_STACK_DEPTH_EXT: GLenum = 0x0BA3;
pub static PROJECTION_STACK_DEPTH: GLenum = 0x0BA4;
pub static TEXTURE_STACK_DEPTH: GLenum = 0x0BA5;
pub static MODELVIEW_MATRIX: GLenum = 0x0BA6;
pub static MODELVIEW0_MATRIX_EXT: GLenum = 0x0BA6;
pub static PROJECTION_MATRIX: GLenum = 0x0BA7;
pub static TEXTURE_MATRIX: GLenum = 0x0BA8;
pub static ATTRIB_STACK_DEPTH: GLenum = 0x0BB0;
pub static CLIENT_ATTRIB_STACK_DEPTH: GLenum = 0x0BB1;
pub static ALPHA_TEST: GLenum = 0x0BC0;
pub static ALPHA_TEST_QCOM: GLenum = 0x0BC0;
pub static ALPHA_TEST_FUNC: GLenum = 0x0BC1;
pub static ALPHA_TEST_FUNC_QCOM: GLenum = 0x0BC1;
pub static ALPHA_TEST_REF: GLenum = 0x0BC2;
pub static ALPHA_TEST_REF_QCOM: GLenum = 0x0BC2;
pub static DITHER: GLenum = 0x0BD0;
pub static BLEND_DST: GLenum = 0x0BE0;
pub static BLEND_SRC: GLenum = 0x0BE1;
pub static BLEND: GLenum = 0x0BE2;
pub static LOGIC_OP_MODE: GLenum = 0x0BF0;
pub static INDEX_LOGIC_OP: GLenum = 0x0BF1;
pub static LOGIC_OP: GLenum = 0x0BF1;
pub static COLOR_LOGIC_OP: GLenum = 0x0BF2;
pub static AUX_BUFFERS: GLenum = 0x0C00;
pub static DRAW_BUFFER: GLenum = 0x0C01;
pub static DRAW_BUFFER_EXT: GLenum = 0x0C01;
pub static READ_BUFFER: GLenum = 0x0C02;
pub static READ_BUFFER_EXT: GLenum = 0x0C02;
pub static READ_BUFFER_NV: GLenum = 0x0C02;
pub static SCISSOR_BOX: GLenum = 0x0C10;
pub static SCISSOR_TEST: GLenum = 0x0C11;
pub static INDEX_CLEAR_VALUE: GLenum = 0x0C20;
pub static INDEX_WRITEMASK: GLenum = 0x0C21;
pub static COLOR_CLEAR_VALUE: GLenum = 0x0C22;
pub static COLOR_WRITEMASK: GLenum = 0x0C23;
pub static INDEX_MODE: GLenum = 0x0C30;
pub static RGBA_MODE: GLenum = 0x0C31;
pub static DOUBLEBUFFER: GLenum = 0x0C32;
pub static STEREO: GLenum = 0x0C33;
pub static RENDER_MODE: GLenum = 0x0C40;
pub static PERSPECTIVE_CORRECTION_HINT: GLenum = 0x0C50;
pub static POINT_SMOOTH_HINT: GLenum = 0x0C51;
pub static LINE_SMOOTH_HINT: GLenum = 0x0C52;
pub static POLYGON_SMOOTH_HINT: GLenum = 0x0C53;
pub static FOG_HINT: GLenum = 0x0C54;
pub static TEXTURE_GEN_S: GLenum = 0x0C60;
pub static TEXTURE_GEN_T: GLenum = 0x0C61;
pub static TEXTURE_GEN_R: GLenum = 0x0C62;
pub static TEXTURE_GEN_Q: GLenum = 0x0C63;
pub static PIXEL_MAP_I_TO_I: GLenum = 0x0C70;
pub static PIXEL_MAP_S_TO_S: GLenum = 0x0C71;
pub static PIXEL_MAP_I_TO_R: GLenum = 0x0C72;
pub static PIXEL_MAP_I_TO_G: GLenum = 0x0C73;
pub static PIXEL_MAP_I_TO_B: GLenum = 0x0C74;
pub static PIXEL_MAP_I_TO_A: GLenum = 0x0C75;
pub static PIXEL_MAP_R_TO_R: GLenum = 0x0C76;
pub static PIXEL_MAP_G_TO_G: GLenum = 0x0C77;
pub static PIXEL_MAP_B_TO_B: GLenum = 0x0C78;
pub static PIXEL_MAP_A_TO_A: GLenum = 0x0C79;
pub static PIXEL_MAP_I_TO_I_SIZE: GLenum = 0x0CB0;
pub static PIXEL_MAP_S_TO_S_SIZE: GLenum = 0x0CB1;
pub static PIXEL_MAP_I_TO_R_SIZE: GLenum = 0x0CB2;
pub static PIXEL_MAP_I_TO_G_SIZE: GLenum = 0x0CB3;
pub static PIXEL_MAP_I_TO_B_SIZE: GLenum = 0x0CB4;
pub static PIXEL_MAP_I_TO_A_SIZE: GLenum = 0x0CB5;
pub static PIXEL_MAP_R_TO_R_SIZE: GLenum = 0x0CB6;
pub static PIXEL_MAP_G_TO_G_SIZE: GLenum = 0x0CB7;
pub static PIXEL_MAP_B_TO_B_SIZE: GLenum = 0x0CB8;
pub static PIXEL_MAP_A_TO_A_SIZE: GLenum = 0x0CB9;
pub static UNPACK_SWAP_BYTES: GLenum = 0x0CF0;
pub static UNPACK_LSB_FIRST: GLenum = 0x0CF1;
pub static UNPACK_ROW_LENGTH: GLenum = 0x0CF2;
pub static UNPACK_ROW_LENGTH_EXT: GLenum = 0x0CF2;
pub static UNPACK_SKIP_ROWS: GLenum = 0x0CF3;
pub static UNPACK_SKIP_ROWS_EXT: GLenum = 0x0CF3;
pub static UNPACK_SKIP_PIXELS: GLenum = 0x0CF4;
pub static UNPACK_SKIP_PIXELS_EXT: GLenum = 0x0CF4;
pub static UNPACK_ALIGNMENT: GLenum = 0x0CF5;
pub static PACK_SWAP_BYTES: GLenum = 0x0D00;
pub static PACK_LSB_FIRST: GLenum = 0x0D01;
pub static PACK_ROW_LENGTH: GLenum = 0x0D02;
pub static PACK_SKIP_ROWS: GLenum = 0x0D03;
pub static PACK_SKIP_PIXELS: GLenum = 0x0D04;
pub static PACK_ALIGNMENT: GLenum = 0x0D05;
pub static MAP_COLOR: GLenum = 0x0D10;
pub static MAP_STENCIL: GLenum = 0x0D11;
pub static INDEX_SHIFT: GLenum = 0x0D12;
pub static INDEX_OFFSET: GLenum = 0x0D13;
pub static RED_SCALE: GLenum = 0x0D14;
pub static RED_BIAS: GLenum = 0x0D15;
pub static ZOOM_X: GLenum = 0x0D16;
pub static ZOOM_Y: GLenum = 0x0D17;
pub static GREEN_SCALE: GLenum = 0x0D18;
pub static GREEN_BIAS: GLenum = 0x0D19;
pub static BLUE_SCALE: GLenum = 0x0D1A;
pub static BLUE_BIAS: GLenum = 0x0D1B;
pub static ALPHA_SCALE: GLenum = 0x0D1C;
pub static ALPHA_BIAS: GLenum = 0x0D1D;
pub static DEPTH_SCALE: GLenum = 0x0D1E;
pub static DEPTH_BIAS: GLenum = 0x0D1F;
pub static MAX_EVAL_ORDER: GLenum = 0x0D30;
pub static MAX_LIGHTS: GLenum = 0x0D31;
pub static MAX_CLIP_PLANES: GLenum = 0x0D32;
pub static MAX_CLIP_DISTANCES: GLenum = 0x0D32;
pub static MAX_TEXTURE_SIZE: GLenum = 0x0D33;
pub static MAX_PIXEL_MAP_TABLE: GLenum = 0x0D34;
pub static MAX_ATTRIB_STACK_DEPTH: GLenum = 0x0D35;
pub static MAX_MODELVIEW_STACK_DEPTH: GLenum = 0x0D36;
pub static MAX_NAME_STACK_DEPTH: GLenum = 0x0D37;
pub static MAX_PROJECTION_STACK_DEPTH: GLenum = 0x0D38;
pub static MAX_TEXTURE_STACK_DEPTH: GLenum = 0x0D39;
pub static MAX_VIEWPORT_DIMS: GLenum = 0x0D3A;
pub static MAX_CLIENT_ATTRIB_STACK_DEPTH: GLenum = 0x0D3B;
pub static SUBPIXEL_BITS: GLenum = 0x0D50;
pub static INDEX_BITS: GLenum = 0x0D51;
pub static RED_BITS: GLenum = 0x0D52;
pub static GREEN_BITS: GLenum = 0x0D53;
pub static BLUE_BITS: GLenum = 0x0D54;
pub static ALPHA_BITS: GLenum = 0x0D55;
pub static DEPTH_BITS: GLenum = 0x0D56;
pub static STENCIL_BITS: GLenum = 0x0D57;
pub static ACCUM_RED_BITS: GLenum = 0x0D58;
pub static ACCUM_GREEN_BITS: GLenum = 0x0D59;
pub static ACCUM_BLUE_BITS: GLenum = 0x0D5A;
pub static ACCUM_ALPHA_BITS: GLenum = 0x0D5B;
pub static NAME_STACK_DEPTH: GLenum = 0x0D70;
pub static AUTO_NORMAL: GLenum = 0x0D80;
pub static MAP1_COLOR_4: GLenum = 0x0D90;
pub static MAP1_INDEX: GLenum = 0x0D91;
pub static MAP1_NORMAL: GLenum = 0x0D92;
pub static MAP1_TEXTURE_COORD_1: GLenum = 0x0D93;
pub static MAP1_TEXTURE_COORD_2: GLenum = 0x0D94;
pub static MAP1_TEXTURE_COORD_3: GLenum = 0x0D95;
pub static MAP1_TEXTURE_COORD_4: GLenum = 0x0D96;
pub static MAP1_VERTEX_3: GLenum = 0x0D97;
pub static MAP1_VERTEX_4: GLenum = 0x0D98;
pub static MAP2_COLOR_4: GLenum = 0x0DB0;
pub static MAP2_INDEX: GLenum = 0x0DB1;
pub static MAP2_NORMAL: GLenum = 0x0DB2;
pub static MAP2_TEXTURE_COORD_1: GLenum = 0x0DB3;
pub static MAP2_TEXTURE_COORD_2: GLenum = 0x0DB4;
pub static MAP2_TEXTURE_COORD_3: GLenum = 0x0DB5;
pub static MAP2_TEXTURE_COORD_4: GLenum = 0x0DB6;
pub static MAP2_VERTEX_3: GLenum = 0x0DB7;
pub static MAP2_VERTEX_4: GLenum = 0x0DB8;
pub static MAP1_GRID_DOMAIN: GLenum = 0x0DD0;
pub static MAP1_GRID_SEGMENTS: GLenum = 0x0DD1;
pub static MAP2_GRID_DOMAIN: GLenum = 0x0DD2;
pub static MAP2_GRID_SEGMENTS: GLenum = 0x0DD3;
pub static TEXTURE_1D: GLenum = 0x0DE0;
pub static TEXTURE_2D: GLenum = 0x0DE1;
pub static FEEDBACK_BUFFER_POINTER: GLenum = 0x0DF0;
pub static FEEDBACK_BUFFER_SIZE: GLenum = 0x0DF1;
pub static FEEDBACK_BUFFER_TYPE: GLenum = 0x0DF2;
pub static SELECTION_BUFFER_POINTER: GLenum = 0x0DF3;
pub static SELECTION_BUFFER_SIZE: GLenum = 0x0DF4;
pub static TEXTURE_WIDTH: GLenum = 0x1000;
pub static TEXTURE_HEIGHT: GLenum = 0x1001;
pub static TEXTURE_INTERNAL_FORMAT: GLenum = 0x1003;
pub static TEXTURE_COMPONENTS: GLenum = 0x1003;
pub static TEXTURE_BORDER_COLOR: GLenum = 0x1004;
pub static TEXTURE_BORDER_COLOR_NV: GLenum = 0x1004;
pub static TEXTURE_BORDER: GLenum = 0x1005;
pub static DONT_CARE: GLenum = 0x1100;
pub static FASTEST: GLenum = 0x1101;
pub static NICEST: GLenum = 0x1102;
pub static AMBIENT: GLenum = 0x1200;
pub static DIFFUSE: GLenum = 0x1201;
pub static SPECULAR: GLenum = 0x1202;
pub static POSITION: GLenum = 0x1203;
pub static SPOT_DIRECTION: GLenum = 0x1204;
pub static SPOT_EXPONENT: GLenum = 0x1205;
pub static SPOT_CUTOFF: GLenum = 0x1206;
pub static CONSTANT_ATTENUATION: GLenum = 0x1207;
pub static LINEAR_ATTENUATION: GLenum = 0x1208;
pub static QUADRATIC_ATTENUATION: GLenum = 0x1209;
pub static COMPILE: GLenum = 0x1300;
pub static COMPILE_AND_EXECUTE: GLenum = 0x1301;
pub static BYTE: GLenum = 0x1400;
pub static UNSIGNED_BYTE: GLenum = 0x1401;
pub static SHORT: GLenum = 0x1402;
pub static UNSIGNED_SHORT: GLenum = 0x1403;
pub static INT: GLenum = 0x1404;
pub static UNSIGNED_INT: GLenum = 0x1405;
pub static FLOAT: GLenum = 0x1406;
pub static _2_BYTES: GLenum = 0x1407;
pub static _3_BYTES: GLenum = 0x1408;
pub static _4_BYTES: GLenum = 0x1409;
pub static DOUBLE: GLenum = 0x140A;
pub static DOUBLE_EXT: GLenum = 0x140A;
pub static HALF_FLOAT: GLenum = 0x140B;
pub static HALF_FLOAT_ARB: GLenum = 0x140B;
pub static HALF_FLOAT_NV: GLenum = 0x140B;
pub static HALF_APPLE: GLenum = 0x140B;
pub static FIXED: GLenum = 0x140C;
pub static FIXED_OES: GLenum = 0x140C;
pub static INT64_NV: GLenum = 0x140E;
pub static UNSIGNED_INT64_ARB: GLenum = 0x140F;
pub static UNSIGNED_INT64_NV: GLenum = 0x140F;
pub static CLEAR: GLenum = 0x1500;
pub static AND: GLenum = 0x1501;
pub static AND_REVERSE: GLenum = 0x1502;
pub static COPY: GLenum = 0x1503;
pub static AND_INVERTED: GLenum = 0x1504;
pub static NOOP: GLenum = 0x1505;
pub static XOR: GLenum = 0x1506;
pub static OR: GLenum = 0x1507;
pub static NOR: GLenum = 0x1508;
pub static EQUIV: GLenum = 0x1509;
pub static INVERT: GLenum = 0x150A;
pub static OR_REVERSE: GLenum = 0x150B;
pub static COPY_INVERTED: GLenum = 0x150C;
pub static OR_INVERTED: GLenum = 0x150D;
pub static NAND: GLenum = 0x150E;
pub static SET: GLenum = 0x150F;
pub static EMISSION: GLenum = 0x1600;
pub static SHININESS: GLenum = 0x1601;
pub static AMBIENT_AND_DIFFUSE: GLenum = 0x1602;
pub static COLOR_INDEXES: GLenum = 0x1603;
pub static MODELVIEW: GLenum = 0x1700;
pub static MODELVIEW0_ARB: GLenum = 0x1700;
pub static MODELVIEW0_EXT: GLenum = 0x1700;
pub static PROJECTION: GLenum = 0x1701;
pub static TEXTURE: GLenum = 0x1702;
pub static COLOR: GLenum = 0x1800;
pub static COLOR_EXT: GLenum = 0x1800;
pub static DEPTH: GLenum = 0x1801;
pub static DEPTH_EXT: GLenum = 0x1801;
pub static STENCIL: GLenum = 0x1802;
pub static STENCIL_EXT: GLenum = 0x1802;
pub static COLOR_INDEX: GLenum = 0x1900;
pub static STENCIL_INDEX: GLenum = 0x1901;
pub static DEPTH_COMPONENT: GLenum = 0x1902;
pub static RED: GLenum = 0x1903;
pub static RED_EXT: GLenum = 0x1903;
pub static GREEN: GLenum = 0x1904;
pub static BLUE: GLenum = 0x1905;
pub static ALPHA: GLenum = 0x1906;
pub static RGB: GLenum = 0x1907;
pub static RGBA: GLenum = 0x1908;
pub static LUMINANCE: GLenum = 0x1909;
pub static LUMINANCE_ALPHA: GLenum = 0x190A;
pub static BITMAP: GLenum = 0x1A00;
pub static POINT: GLenum = 0x1B00;
pub static LINE: GLenum = 0x1B01;
pub static FILL: GLenum = 0x1B02;
pub static RENDER: GLenum = 0x1C00;
pub static FEEDBACK: GLenum = 0x1C01;
pub static SELECT: GLenum = 0x1C02;
pub static FLAT: GLenum = 0x1D00;
pub static SMOOTH: GLenum = 0x1D01;
pub static KEEP: GLenum = 0x1E00;
pub static REPLACE: GLenum = 0x1E01;
pub static INCR: GLenum = 0x1E02;
pub static DECR: GLenum = 0x1E03;
pub static VENDOR: GLenum = 0x1F00;
pub static RENDERER: GLenum = 0x1F01;
pub static VERSION: GLenum = 0x1F02;
pub static EXTENSIONS: GLenum = 0x1F03;
pub static S: GLenum = 0x2000;
pub static T: GLenum = 0x2001;
pub static R: GLenum = 0x2002;
pub static Q: GLenum = 0x2003;
pub static MODULATE: GLenum = 0x2100;
pub static DECAL: GLenum = 0x2101;
pub static TEXTURE_ENV_MODE: GLenum = 0x2200;
pub static TEXTURE_ENV_COLOR: GLenum = 0x2201;
pub static TEXTURE_ENV: GLenum = 0x2300;
pub static EYE_LINEAR: GLenum = 0x2400;
pub static OBJECT_LINEAR: GLenum = 0x2401;
pub static SPHERE_MAP: GLenum = 0x2402;
pub static TEXTURE_GEN_MODE: GLenum = 0x2500;
pub static OBJECT_PLANE: GLenum = 0x2501;
pub static EYE_PLANE: GLenum = 0x2502;
pub static NEAREST: GLenum = 0x2600;
pub static LINEAR: GLenum = 0x2601;
pub static NEAREST_MIPMAP_NEAREST: GLenum = 0x2700;
pub static LINEAR_MIPMAP_NEAREST: GLenum = 0x2701;
pub static NEAREST_MIPMAP_LINEAR: GLenum = 0x2702;
pub static LINEAR_MIPMAP_LINEAR: GLenum = 0x2703;
pub static TEXTURE_MAG_FILTER: GLenum = 0x2800;
pub static TEXTURE_MIN_FILTER: GLenum = 0x2801;
pub static TEXTURE_WRAP_S: GLenum = 0x2802;
pub static TEXTURE_WRAP_T: GLenum = 0x2803;
pub static CLAMP: GLenum = 0x2900;
pub static REPEAT: GLenum = 0x2901;
pub static POLYGON_OFFSET_UNITS: GLenum = 0x2A00;
pub static POLYGON_OFFSET_POINT: GLenum = 0x2A01;
pub static POLYGON_OFFSET_LINE: GLenum = 0x2A02;
pub static R3_G3_B2: GLenum = 0x2A10;
pub static V2F: GLenum = 0x2A20;
pub static V3F: GLenum = 0x2A21;
pub static C4UB_V2F: GLenum = 0x2A22;
pub static C4UB_V3F: GLenum = 0x2A23;
pub static C3F_V3F: GLenum = 0x2A24;
pub static N3F_V3F: GLenum = 0x2A25;
pub static C4F_N3F_V3F: GLenum = 0x2A26;
pub static T2F_V3F: GLenum = 0x2A27;
pub static T4F_V4F: GLenum = 0x2A28;
pub static T2F_C4UB_V3F: GLenum = 0x2A29;
pub static T2F_C3F_V3F: GLenum = 0x2A2A;
pub static T2F_N3F_V3F: GLenum = 0x2A2B;
pub static T2F_C4F_N3F_V3F: GLenum = 0x2A2C;
pub static T4F_C4F_N3F_V4F: GLenum = 0x2A2D;
pub static CLIP_PLANE0: GLenum = 0x3000;
pub static CLIP_DISTANCE0: GLenum = 0x3000;
pub static CLIP_PLANE1: GLenum = 0x3001;
pub static CLIP_DISTANCE1: GLenum = 0x3001;
pub static CLIP_PLANE2: GLenum = 0x3002;
pub static CLIP_DISTANCE2: GLenum = 0x3002;
pub static CLIP_PLANE3: GLenum = 0x3003;
pub static CLIP_DISTANCE3: GLenum = 0x3003;
pub static CLIP_PLANE4: GLenum = 0x3004;
pub static CLIP_DISTANCE4: GLenum = 0x3004;
pub static CLIP_PLANE5: GLenum = 0x3005;
pub static CLIP_DISTANCE5: GLenum = 0x3005;
pub static CLIP_DISTANCE6: GLenum = 0x3006;
pub static CLIP_DISTANCE7: GLenum = 0x3007;
pub static LIGHT0: GLenum = 0x4000;
pub static LIGHT1: GLenum = 0x4001;
pub static LIGHT2: GLenum = 0x4002;
pub static LIGHT3: GLenum = 0x4003;
pub static LIGHT4: GLenum = 0x4004;
pub static LIGHT5: GLenum = 0x4005;
pub static LIGHT6: GLenum = 0x4006;
pub static LIGHT7: GLenum = 0x4007;
pub static ABGR_EXT: GLenum = 0x8000;
pub static CONSTANT_COLOR: GLenum = 0x8001;
pub static CONSTANT_COLOR_EXT: GLenum = 0x8001;
pub static ONE_MINUS_CONSTANT_COLOR: GLenum = 0x8002;
pub static ONE_MINUS_CONSTANT_COLOR_EXT: GLenum = 0x8002;
pub static CONSTANT_ALPHA: GLenum = 0x8003;
pub static CONSTANT_ALPHA_EXT: GLenum = 0x8003;
pub static ONE_MINUS_CONSTANT_ALPHA: GLenum = 0x8004;
pub static ONE_MINUS_CONSTANT_ALPHA_EXT: GLenum = 0x8004;
pub static BLEND_COLOR: GLenum = 0x8005;
pub static BLEND_COLOR_EXT: GLenum = 0x8005;
pub static FUNC_ADD: GLenum = 0x8006;
pub static FUNC_ADD_EXT: GLenum = 0x8006;
pub static FUNC_ADD_OES: GLenum = 0x8006;
pub static MIN: GLenum = 0x8007;
pub static MIN_EXT: GLenum = 0x8007;
pub static MAX: GLenum = 0x8008;
pub static MAX_EXT: GLenum = 0x8008;
pub static BLEND_EQUATION: GLenum = 0x8009;
pub static BLEND_EQUATION_EXT: GLenum = 0x8009;
pub static BLEND_EQUATION_OES: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB_EXT: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB_OES: GLenum = 0x8009;
pub static FUNC_SUBTRACT: GLenum = 0x800A;
pub static FUNC_SUBTRACT_EXT: GLenum = 0x800A;
pub static FUNC_SUBTRACT_OES: GLenum = 0x800A;
pub static FUNC_REVERSE_SUBTRACT: GLenum = 0x800B;
pub static FUNC_REVERSE_SUBTRACT_EXT: GLenum = 0x800B;
pub static FUNC_REVERSE_SUBTRACT_OES: GLenum = 0x800B;
pub static CMYK_EXT: GLenum = 0x800C;
pub static CMYKA_EXT: GLenum = 0x800D;
pub static PACK_CMYK_HINT_EXT: GLenum = 0x800E;
pub static UNPACK_CMYK_HINT_EXT: GLenum = 0x800F;
pub static CONVOLUTION_1D: GLenum = 0x8010;
pub static CONVOLUTION_1D_EXT: GLenum = 0x8010;
pub static CONVOLUTION_2D: GLenum = 0x8011;
pub static CONVOLUTION_2D_EXT: GLenum = 0x8011;
pub static SEPARABLE_2D: GLenum = 0x8012;
pub static SEPARABLE_2D_EXT: GLenum = 0x8012;
pub static CONVOLUTION_BORDER_MODE: GLenum = 0x8013;
pub static CONVOLUTION_BORDER_MODE_EXT: GLenum = 0x8013;
pub static CONVOLUTION_FILTER_SCALE: GLenum = 0x8014;
pub static CONVOLUTION_FILTER_SCALE_EXT: GLenum = 0x8014;
pub static CONVOLUTION_FILTER_BIAS: GLenum = 0x8015;
pub static CONVOLUTION_FILTER_BIAS_EXT: GLenum = 0x8015;
pub static REDUCE: GLenum = 0x8016;
pub static REDUCE_EXT: GLenum = 0x8016;
pub static CONVOLUTION_FORMAT: GLenum = 0x8017;
pub static CONVOLUTION_FORMAT_EXT: GLenum = 0x8017;
pub static CONVOLUTION_WIDTH: GLenum = 0x8018;
pub static CONVOLUTION_WIDTH_EXT: GLenum = 0x8018;
pub static CONVOLUTION_HEIGHT: GLenum = 0x8019;
pub static CONVOLUTION_HEIGHT_EXT: GLenum = 0x8019;
pub static MAX_CONVOLUTION_WIDTH: GLenum = 0x801A;
pub static MAX_CONVOLUTION_WIDTH_EXT: GLenum = 0x801A;
pub static MAX_CONVOLUTION_HEIGHT: GLenum = 0x801B;
pub static MAX_CONVOLUTION_HEIGHT_EXT: GLenum = 0x801B;
pub static POST_CONVOLUTION_RED_SCALE: GLenum = 0x801C;
pub static POST_CONVOLUTION_RED_SCALE_EXT: GLenum = 0x801C;
pub static POST_CONVOLUTION_GREEN_SCALE: GLenum = 0x801D;
pub static POST_CONVOLUTION_GREEN_SCALE_EXT: GLenum = 0x801D;
pub static POST_CONVOLUTION_BLUE_SCALE: GLenum = 0x801E;
pub static POST_CONVOLUTION_BLUE_SCALE_EXT: GLenum = 0x801E;
pub static POST_CONVOLUTION_ALPHA_SCALE: GLenum = 0x801F;
pub static POST_CONVOLUTION_ALPHA_SCALE_EXT: GLenum = 0x801F;
pub static POST_CONVOLUTION_RED_BIAS: GLenum = 0x8020;
pub static POST_CONVOLUTION_RED_BIAS_EXT: GLenum = 0x8020;
pub static POST_CONVOLUTION_GREEN_BIAS: GLenum = 0x8021;
pub static POST_CONVOLUTION_GREEN_BIAS_EXT: GLenum = 0x8021;
pub static POST_CONVOLUTION_BLUE_BIAS: GLenum = 0x8022;
pub static POST_CONVOLUTION_BLUE_BIAS_EXT: GLenum = 0x8022;
pub static POST_CONVOLUTION_ALPHA_BIAS: GLenum = 0x8023;
pub static POST_CONVOLUTION_ALPHA_BIAS_EXT: GLenum = 0x8023;
pub static HISTOGRAM: GLenum = 0x8024;
pub static HISTOGRAM_EXT: GLenum = 0x8024;
pub static PROXY_HISTOGRAM: GLenum = 0x8025;
pub static PROXY_HISTOGRAM_EXT: GLenum = 0x8025;
pub static HISTOGRAM_WIDTH: GLenum = 0x8026;
pub static HISTOGRAM_WIDTH_EXT: GLenum = 0x8026;
pub static HISTOGRAM_FORMAT: GLenum = 0x8027;
pub static HISTOGRAM_FORMAT_EXT: GLenum = 0x8027;
pub static HISTOGRAM_RED_SIZE: GLenum = 0x8028;
pub static HISTOGRAM_RED_SIZE_EXT: GLenum = 0x8028;
pub static HISTOGRAM_GREEN_SIZE: GLenum = 0x8029;
pub static HISTOGRAM_GREEN_SIZE_EXT: GLenum = 0x8029;
pub static HISTOGRAM_BLUE_SIZE: GLenum = 0x802A;
pub static HISTOGRAM_BLUE_SIZE_EXT: GLenum = 0x802A;
pub static HISTOGRAM_ALPHA_SIZE: GLenum = 0x802B;
pub static HISTOGRAM_ALPHA_SIZE_EXT: GLenum = 0x802B;
pub static HISTOGRAM_LUMINANCE_SIZE: GLenum = 0x802C;
pub static HISTOGRAM_LUMINANCE_SIZE_EXT: GLenum = 0x802C;
pub static HISTOGRAM_SINK: GLenum = 0x802D;
pub static HISTOGRAM_SINK_EXT: GLenum = 0x802D;
pub static MINMAX: GLenum = 0x802E;
pub static MINMAX_EXT: GLenum = 0x802E;
pub static MINMAX_FORMAT: GLenum = 0x802F;
pub static MINMAX_FORMAT_EXT: GLenum = 0x802F;
pub static MINMAX_SINK: GLenum = 0x8030;
pub static MINMAX_SINK_EXT: GLenum = 0x8030;
pub static TABLE_TOO_LARGE_EXT: GLenum = 0x8031;
pub static TABLE_TOO_LARGE: GLenum = 0x8031;
pub static UNSIGNED_BYTE_3_3_2: GLenum = 0x8032;
pub static UNSIGNED_BYTE_3_3_2_EXT: GLenum = 0x8032;
pub static UNSIGNED_SHORT_4_4_4_4: GLenum = 0x8033;
pub static UNSIGNED_SHORT_4_4_4_4_EXT: GLenum = 0x8033;
pub static UNSIGNED_SHORT_5_5_5_1: GLenum = 0x8034;
pub static UNSIGNED_SHORT_5_5_5_1_EXT: GLenum = 0x8034;
pub static UNSIGNED_INT_8_8_8_8: GLenum = 0x8035;
pub static UNSIGNED_INT_8_8_8_8_EXT: GLenum = 0x8035;
pub static UNSIGNED_INT_10_10_10_2: GLenum = 0x8036;
pub static UNSIGNED_INT_10_10_10_2_EXT: GLenum = 0x8036;
pub static POLYGON_OFFSET_EXT: GLenum = 0x8037;
pub static POLYGON_OFFSET_FILL: GLenum = 0x8037;
pub static POLYGON_OFFSET_FACTOR: GLenum = 0x8038;
pub static POLYGON_OFFSET_FACTOR_EXT: GLenum = 0x8038;
pub static POLYGON_OFFSET_BIAS_EXT: GLenum = 0x8039;
pub static RESCALE_NORMAL: GLenum = 0x803A;
pub static RESCALE_NORMAL_EXT: GLenum = 0x803A;
pub static ALPHA4: GLenum = 0x803B;
pub static ALPHA4_EXT: GLenum = 0x803B;
pub static ALPHA8: GLenum = 0x803C;
pub static ALPHA8_EXT: GLenum = 0x803C;
pub static ALPHA12: GLenum = 0x803D;
pub static ALPHA12_EXT: GLenum = 0x803D;
pub static ALPHA16: GLenum = 0x803E;
pub static ALPHA16_EXT: GLenum = 0x803E;
pub static LUMINANCE4: GLenum = 0x803F;
pub static LUMINANCE4_EXT: GLenum = 0x803F;
pub static LUMINANCE8: GLenum = 0x8040;
pub static LUMINANCE8_EXT: GLenum = 0x8040;
pub static LUMINANCE12: GLenum = 0x8041;
pub static LUMINANCE12_EXT: GLenum = 0x8041;
pub static LUMINANCE16: GLenum = 0x8042;
pub static LUMINANCE16_EXT: GLenum = 0x8042;
pub static LUMINANCE4_ALPHA4: GLenum = 0x8043;
pub static LUMINANCE4_ALPHA4_EXT: GLenum = 0x8043;
pub static LUMINANCE6_ALPHA2: GLenum = 0x8044;
pub static LUMINANCE6_ALPHA2_EXT: GLenum = 0x8044;
pub static LUMINANCE8_ALPHA8: GLenum = 0x8045;
pub static LUMINANCE8_ALPHA8_EXT: GLenum = 0x8045;
pub static LUMINANCE12_ALPHA4: GLenum = 0x8046;
pub static LUMINANCE12_ALPHA4_EXT: GLenum = 0x8046;
pub static LUMINANCE12_ALPHA12: GLenum = 0x8047;
pub static LUMINANCE12_ALPHA12_EXT: GLenum = 0x8047;
pub static LUMINANCE16_ALPHA16: GLenum = 0x8048;
pub static LUMINANCE16_ALPHA16_EXT: GLenum = 0x8048;
pub static INTENSITY: GLenum = 0x8049;
pub static INTENSITY_EXT: GLenum = 0x8049;
pub static INTENSITY4: GLenum = 0x804A;
pub static INTENSITY4_EXT: GLenum = 0x804A;
pub static INTENSITY8: GLenum = 0x804B;
pub static INTENSITY8_EXT: GLenum = 0x804B;
pub static INTENSITY12: GLenum = 0x804C;
pub static INTENSITY12_EXT: GLenum = 0x804C;
pub static INTENSITY16: GLenum = 0x804D;
pub static INTENSITY16_EXT: GLenum = 0x804D;
pub static RGB2_EXT: GLenum = 0x804E;
pub static RGB4: GLenum = 0x804F;
pub static RGB4_EXT: GLenum = 0x804F;
pub static RGB5: GLenum = 0x8050;
pub static RGB5_EXT: GLenum = 0x8050;
pub static RGB8: GLenum = 0x8051;
pub static RGB8_EXT: GLenum = 0x8051;
pub static RGB10: GLenum = 0x8052;
pub static RGB10_EXT: GLenum = 0x8052;
pub static RGB12: GLenum = 0x8053;
pub static RGB12_EXT: GLenum = 0x8053;
pub static RGB16: GLenum = 0x8054;
pub static RGB16_EXT: GLenum = 0x8054;
pub static RGBA2: GLenum = 0x8055;
pub static RGBA2_EXT: GLenum = 0x8055;
pub static RGBA4: GLenum = 0x8056;
pub static RGBA4_EXT: GLenum = 0x8056;
pub static RGBA4_OES: GLenum = 0x8056;
pub static RGB5_A1: GLenum = 0x8057;
pub static RGB5_A1_EXT: GLenum = 0x8057;
pub static RGB5_A1_OES: GLenum = 0x8057;
pub static RGBA8: GLenum = 0x8058;
pub static RGBA8_EXT: GLenum = 0x8058;
pub static RGBA8_OES: GLenum = 0x8058;
pub static RGB10_A2: GLenum = 0x8059;
pub static RGB10_A2_EXT: GLenum = 0x8059;
pub static RGBA12: GLenum = 0x805A;
pub static RGBA12_EXT: GLenum = 0x805A;
pub static RGBA16: GLenum = 0x805B;
pub static RGBA16_EXT: GLenum = 0x805B;
pub static TEXTURE_RED_SIZE: GLenum = 0x805C;
pub static TEXTURE_RED_SIZE_EXT: GLenum = 0x805C;
pub static TEXTURE_GREEN_SIZE: GLenum = 0x805D;
pub static TEXTURE_GREEN_SIZE_EXT: GLenum = 0x805D;
pub static TEXTURE_BLUE_SIZE: GLenum = 0x805E;
pub static TEXTURE_BLUE_SIZE_EXT: GLenum = 0x805E;
pub static TEXTURE_ALPHA_SIZE: GLenum = 0x805F;
pub static TEXTURE_ALPHA_SIZE_EXT: GLenum = 0x805F;
pub static TEXTURE_LUMINANCE_SIZE: GLenum = 0x8060;
pub static TEXTURE_LUMINANCE_SIZE_EXT: GLenum = 0x8060;
pub static TEXTURE_INTENSITY_SIZE: GLenum = 0x8061;
pub static TEXTURE_INTENSITY_SIZE_EXT: GLenum = 0x8061;
pub static REPLACE_EXT: GLenum = 0x8062;
pub static PROXY_TEXTURE_1D: GLenum = 0x8063;
pub static PROXY_TEXTURE_1D_EXT: GLenum = 0x8063;
pub static PROXY_TEXTURE_2D: GLenum = 0x8064;
pub static PROXY_TEXTURE_2D_EXT: GLenum = 0x8064;
pub static TEXTURE_TOO_LARGE_EXT: GLenum = 0x8065;
pub static TEXTURE_PRIORITY: GLenum = 0x8066;
pub static TEXTURE_PRIORITY_EXT: GLenum = 0x8066;
pub static TEXTURE_RESIDENT: GLenum = 0x8067;
pub static TEXTURE_RESIDENT_EXT: GLenum = 0x8067;
pub static TEXTURE_1D_BINDING_EXT: GLenum = 0x8068;
pub static TEXTURE_BINDING_1D: GLenum = 0x8068;
pub static TEXTURE_2D_BINDING_EXT: GLenum = 0x8069;
pub static TEXTURE_BINDING_2D: GLenum = 0x8069;
pub static TEXTURE_3D_BINDING_EXT: GLenum = 0x806A;
pub static TEXTURE_3D_BINDING_OES: GLenum = 0x806A;
pub static TEXTURE_BINDING_3D: GLenum = 0x806A;
pub static PACK_SKIP_IMAGES: GLenum = 0x806B;
pub static PACK_SKIP_IMAGES_EXT: GLenum = 0x806B;
pub static PACK_IMAGE_HEIGHT: GLenum = 0x806C;
pub static PACK_IMAGE_HEIGHT_EXT: GLenum = 0x806C;
pub static UNPACK_SKIP_IMAGES: GLenum = 0x806D;
pub static UNPACK_SKIP_IMAGES_EXT: GLenum = 0x806D;
pub static UNPACK_IMAGE_HEIGHT: GLenum = 0x806E;
pub static UNPACK_IMAGE_HEIGHT_EXT: GLenum = 0x806E;
pub static TEXTURE_3D: GLenum = 0x806F;
pub static TEXTURE_3D_EXT: GLenum = 0x806F;
pub static TEXTURE_3D_OES: GLenum = 0x806F;
pub static PROXY_TEXTURE_3D: GLenum = 0x8070;
pub static PROXY_TEXTURE_3D_EXT: GLenum = 0x8070;
pub static TEXTURE_DEPTH: GLenum = 0x8071;
pub static TEXTURE_DEPTH_EXT: GLenum = 0x8071;
pub static TEXTURE_WRAP_R: GLenum = 0x8072;
pub static TEXTURE_WRAP_R_EXT: GLenum = 0x8072;
pub static TEXTURE_WRAP_R_OES: GLenum = 0x8072;
pub static MAX_3D_TEXTURE_SIZE: GLenum = 0x8073;
pub static MAX_3D_TEXTURE_SIZE_EXT: GLenum = 0x8073;
pub static MAX_3D_TEXTURE_SIZE_OES: GLenum = 0x8073;
pub static VERTEX_ARRAY: GLenum = 0x8074;
pub static VERTEX_ARRAY_EXT: GLenum = 0x8074;
pub static NORMAL_ARRAY: GLenum = 0x8075;
pub static NORMAL_ARRAY_EXT: GLenum = 0x8075;
pub static COLOR_ARRAY: GLenum = 0x8076;
pub static COLOR_ARRAY_EXT: GLenum = 0x8076;
pub static INDEX_ARRAY: GLenum = 0x8077;
pub static INDEX_ARRAY_EXT: GLenum = 0x8077;
pub static TEXTURE_COORD_ARRAY: GLenum = 0x8078;
pub static TEXTURE_COORD_ARRAY_EXT: GLenum = 0x8078;
pub static EDGE_FLAG_ARRAY: GLenum = 0x8079;
pub static EDGE_FLAG_ARRAY_EXT: GLenum = 0x8079;
pub static VERTEX_ARRAY_SIZE: GLenum = 0x807A;
pub static VERTEX_ARRAY_SIZE_EXT: GLenum = 0x807A;
pub static VERTEX_ARRAY_TYPE: GLenum = 0x807B;
pub static VERTEX_ARRAY_TYPE_EXT: GLenum = 0x807B;
pub static VERTEX_ARRAY_STRIDE: GLenum = 0x807C;
pub static VERTEX_ARRAY_STRIDE_EXT: GLenum = 0x807C;
pub static VERTEX_ARRAY_COUNT_EXT: GLenum = 0x807D;
pub static NORMAL_ARRAY_TYPE: GLenum = 0x807E;
pub static NORMAL_ARRAY_TYPE_EXT: GLenum = 0x807E;
pub static NORMAL_ARRAY_STRIDE: GLenum = 0x807F;
pub static NORMAL_ARRAY_STRIDE_EXT: GLenum = 0x807F;
pub static NORMAL_ARRAY_COUNT_EXT: GLenum = 0x8080;
pub static COLOR_ARRAY_SIZE: GLenum = 0x8081;
pub static COLOR_ARRAY_SIZE_EXT: GLenum = 0x8081;
pub static COLOR_ARRAY_TYPE: GLenum = 0x8082;
pub static COLOR_ARRAY_TYPE_EXT: GLenum = 0x8082;
pub static COLOR_ARRAY_STRIDE: GLenum = 0x8083;
pub static COLOR_ARRAY_STRIDE_EXT: GLenum = 0x8083;
pub static COLOR_ARRAY_COUNT_EXT: GLenum = 0x8084;
pub static INDEX_ARRAY_TYPE: GLenum = 0x8085;
pub static INDEX_ARRAY_TYPE_EXT: GLenum = 0x8085;
pub static INDEX_ARRAY_STRIDE: GLenum = 0x8086;
pub static INDEX_ARRAY_STRIDE_EXT: GLenum = 0x8086;
pub static INDEX_ARRAY_COUNT_EXT: GLenum = 0x8087;
pub static TEXTURE_COORD_ARRAY_SIZE: GLenum = 0x8088;
pub static TEXTURE_COORD_ARRAY_SIZE_EXT: GLenum = 0x8088;
pub static TEXTURE_COORD_ARRAY_TYPE: GLenum = 0x8089;
pub static TEXTURE_COORD_ARRAY_TYPE_EXT: GLenum = 0x8089;
pub static TEXTURE_COORD_ARRAY_STRIDE: GLenum = 0x808A;
pub static TEXTURE_COORD_ARRAY_STRIDE_EXT: GLenum = 0x808A;
pub static TEXTURE_COORD_ARRAY_COUNT_EXT: GLenum = 0x808B;
pub static EDGE_FLAG_ARRAY_STRIDE: GLenum = 0x808C;
pub static EDGE_FLAG_ARRAY_STRIDE_EXT: GLenum = 0x808C;
pub static EDGE_FLAG_ARRAY_COUNT_EXT: GLenum = 0x808D;
pub static VERTEX_ARRAY_POINTER: GLenum = 0x808E;
pub static VERTEX_ARRAY_POINTER_EXT: GLenum = 0x808E;
pub static NORMAL_ARRAY_POINTER: GLenum = 0x808F;
pub static NORMAL_ARRAY_POINTER_EXT: GLenum = 0x808F;
pub static COLOR_ARRAY_POINTER: GLenum = 0x8090;
pub static COLOR_ARRAY_POINTER_EXT: GLenum = 0x8090;
pub static INDEX_ARRAY_POINTER: GLenum = 0x8091;
pub static INDEX_ARRAY_POINTER_EXT: GLenum = 0x8091;
pub static TEXTURE_COORD_ARRAY_POINTER: GLenum = 0x8092;
pub static TEXTURE_COORD_ARRAY_POINTER_EXT: GLenum = 0x8092;
pub static EDGE_FLAG_ARRAY_POINTER: GLenum = 0x8093;
pub static EDGE_FLAG_ARRAY_POINTER_EXT: GLenum = 0x8093;
pub static INTERLACE_SGIX: GLenum = 0x8094;
pub static DETAIL_TEXTURE_2D_SGIS: GLenum = 0x8095;
pub static DETAIL_TEXTURE_2D_BINDING_SGIS: GLenum = 0x8096;
pub static LINEAR_DETAIL_SGIS: GLenum = 0x8097;
pub static LINEAR_DETAIL_ALPHA_SGIS: GLenum = 0x8098;
pub static LINEAR_DETAIL_COLOR_SGIS: GLenum = 0x8099;
pub static DETAIL_TEXTURE_LEVEL_SGIS: GLenum = 0x809A;
pub static DETAIL_TEXTURE_MODE_SGIS: GLenum = 0x809B;
pub static DETAIL_TEXTURE_FUNC_POINTS_SGIS: GLenum = 0x809C;
pub static MULTISAMPLE: GLenum = 0x809D;
pub static MULTISAMPLE_ARB: GLenum = 0x809D;
pub static MULTISAMPLE_EXT: GLenum = 0x809D;
pub static MULTISAMPLE_SGIS: GLenum = 0x809D;
pub static SAMPLE_ALPHA_TO_COVERAGE: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_COVERAGE_ARB: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_MASK_EXT: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_MASK_SGIS: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_ONE: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_ARB: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_EXT: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_SGIS: GLenum = 0x809F;
pub static SAMPLE_COVERAGE: GLenum = 0x80A0;
pub static SAMPLE_COVERAGE_ARB: GLenum = 0x80A0;
pub static SAMPLE_MASK_EXT: GLenum = 0x80A0;
pub static SAMPLE_MASK_SGIS: GLenum = 0x80A0;
pub static _1PASS_EXT: GLenum = 0x80A1;
pub static _1PASS_SGIS: GLenum = 0x80A1;
pub static _2PASS_0_EXT: GLenum = 0x80A2;
pub static _2PASS_0_SGIS: GLenum = 0x80A2;
pub static _2PASS_1_EXT: GLenum = 0x80A3;
pub static _2PASS_1_SGIS: GLenum = 0x80A3;
pub static _4PASS_0_EXT: GLenum = 0x80A4;
pub static _4PASS_0_SGIS: GLenum = 0x80A4;
pub static _4PASS_1_EXT: GLenum = 0x80A5;
pub static _4PASS_1_SGIS: GLenum = 0x80A5;
pub static _4PASS_2_EXT: GLenum = 0x80A6;
pub static _4PASS_2_SGIS: GLenum = 0x80A6;
pub static _4PASS_3_EXT: GLenum = 0x80A7;
pub static _4PASS_3_SGIS: GLenum = 0x80A7;
pub static SAMPLE_BUFFERS: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_ARB: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_EXT: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_SGIS: GLenum = 0x80A8;
pub static SAMPLES: GLenum = 0x80A9;
pub static SAMPLES_ARB: GLenum = 0x80A9;
pub static SAMPLES_EXT: GLenum = 0x80A9;
pub static SAMPLES_SGIS: GLenum = 0x80A9;
pub static SAMPLE_COVERAGE_VALUE: GLenum = 0x80AA;
pub static SAMPLE_COVERAGE_VALUE_ARB: GLenum = 0x80AA;
pub static SAMPLE_MASK_VALUE_EXT: GLenum = 0x80AA;
pub static SAMPLE_MASK_VALUE_SGIS: GLenum = 0x80AA;
pub static SAMPLE_COVERAGE_INVERT: GLenum = 0x80AB;
pub static SAMPLE_COVERAGE_INVERT_ARB: GLenum = 0x80AB;
pub static SAMPLE_MASK_INVERT_EXT: GLenum = 0x80AB;
pub static SAMPLE_MASK_INVERT_SGIS: GLenum = 0x80AB;
pub static SAMPLE_PATTERN_EXT: GLenum = 0x80AC;
pub static SAMPLE_PATTERN_SGIS: GLenum = 0x80AC;
pub static LINEAR_SHARPEN_SGIS: GLenum = 0x80AD;
pub static LINEAR_SHARPEN_ALPHA_SGIS: GLenum = 0x80AE;
pub static LINEAR_SHARPEN_COLOR_SGIS: GLenum = 0x80AF;
pub static SHARPEN_TEXTURE_FUNC_POINTS_SGIS: GLenum = 0x80B0;
pub static COLOR_MATRIX: GLenum = 0x80B1;
pub static COLOR_MATRIX_SGI: GLenum = 0x80B1;
pub static COLOR_MATRIX_STACK_DEPTH: GLenum = 0x80B2;
pub static COLOR_MATRIX_STACK_DEPTH_SGI: GLenum = 0x80B2;
pub static MAX_COLOR_MATRIX_STACK_DEPTH: GLenum = 0x80B3;
pub static MAX_COLOR_MATRIX_STACK_DEPTH_SGI: GLenum = 0x80B3;
pub static POST_COLOR_MATRIX_RED_SCALE: GLenum = 0x80B4;
pub static POST_COLOR_MATRIX_RED_SCALE_SGI: GLenum = 0x80B4;
pub static POST_COLOR_MATRIX_GREEN_SCALE: GLenum = 0x80B5;
pub static POST_COLOR_MATRIX_GREEN_SCALE_SGI: GLenum = 0x80B5;
pub static POST_COLOR_MATRIX_BLUE_SCALE: GLenum = 0x80B6;
pub static POST_COLOR_MATRIX_BLUE_SCALE_SGI: GLenum = 0x80B6;
pub static POST_COLOR_MATRIX_ALPHA_SCALE: GLenum = 0x80B7;
pub static POST_COLOR_MATRIX_ALPHA_SCALE_SGI: GLenum = 0x80B7;
pub static POST_COLOR_MATRIX_RED_BIAS: GLenum = 0x80B8;
pub static POST_COLOR_MATRIX_RED_BIAS_SGI: GLenum = 0x80B8;
pub static POST_COLOR_MATRIX_GREEN_BIAS: GLenum = 0x80B9;
pub static POST_COLOR_MATRIX_GREEN_BIAS_SGI: GLenum = 0x80B9;
pub static POST_COLOR_MATRIX_BLUE_BIAS: GLenum = 0x80BA;
pub static POST_COLOR_MATRIX_BLUE_BIAS_SGI: GLenum = 0x80BA;
pub static POST_COLOR_MATRIX_ALPHA_BIAS: GLenum = 0x80BB;
pub static POST_COLOR_MATRIX_ALPHA_BIAS_SGI: GLenum = 0x80BB;
pub static TEXTURE_COLOR_TABLE_SGI: GLenum = 0x80BC;
pub static PROXY_TEXTURE_COLOR_TABLE_SGI: GLenum = 0x80BD;
pub static TEXTURE_ENV_BIAS_SGIX: GLenum = 0x80BE;
pub static SHADOW_AMBIENT_SGIX: GLenum = 0x80BF;
pub static TEXTURE_COMPARE_FAIL_VALUE_ARB: GLenum = 0x80BF;
pub static BLEND_DST_RGB: GLenum = 0x80C8;
pub static BLEND_DST_RGB_EXT: GLenum = 0x80C8;
pub static BLEND_DST_RGB_OES: GLenum = 0x80C8;
pub static BLEND_SRC_RGB: GLenum = 0x80C9;
pub static BLEND_SRC_RGB_EXT: GLenum = 0x80C9;
pub static BLEND_SRC_RGB_OES: GLenum = 0x80C9;
pub static BLEND_DST_ALPHA: GLenum = 0x80CA;
pub static BLEND_DST_ALPHA_EXT: GLenum = 0x80CA;
pub static BLEND_DST_ALPHA_OES: GLenum = 0x80CA;
pub static BLEND_SRC_ALPHA: GLenum = 0x80CB;
pub static BLEND_SRC_ALPHA_EXT: GLenum = 0x80CB;
pub static BLEND_SRC_ALPHA_OES: GLenum = 0x80CB;
pub static _422_EXT: GLenum = 0x80CC;
pub static _422_REV_EXT: GLenum = 0x80CD;
pub static _422_AVERAGE_EXT: GLenum = 0x80CE;
pub static _422_REV_AVERAGE_EXT: GLenum = 0x80CF;
pub static COLOR_TABLE: GLenum = 0x80D0;
pub static COLOR_TABLE_SGI: GLenum = 0x80D0;
pub static POST_CONVOLUTION_COLOR_TABLE: GLenum = 0x80D1;
pub static POST_CONVOLUTION_COLOR_TABLE_SGI: GLenum = 0x80D1;
pub static POST_COLOR_MATRIX_COLOR_TABLE: GLenum = 0x80D2;
pub static POST_COLOR_MATRIX_COLOR_TABLE_SGI: GLenum = 0x80D2;
pub static PROXY_COLOR_TABLE: GLenum = 0x80D3;
pub static PROXY_COLOR_TABLE_SGI: GLenum = 0x80D3;
pub static PROXY_POST_CONVOLUTION_COLOR_TABLE: GLenum = 0x80D4;
pub static PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI: GLenum = 0x80D4;
pub static PROXY_POST_COLOR_MATRIX_COLOR_TABLE: GLenum = 0x80D5;
pub static PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI: GLenum = 0x80D5;
pub static COLOR_TABLE_SCALE: GLenum = 0x80D6;
pub static COLOR_TABLE_SCALE_SGI: GLenum = 0x80D6;
pub static COLOR_TABLE_BIAS: GLenum = 0x80D7;
pub static COLOR_TABLE_BIAS_SGI: GLenum = 0x80D7;
pub static COLOR_TABLE_FORMAT: GLenum = 0x80D8;
pub static COLOR_TABLE_FORMAT_SGI: GLenum = 0x80D8;
pub static COLOR_TABLE_WIDTH: GLenum = 0x80D9;
pub static COLOR_TABLE_WIDTH_SGI: GLenum = 0x80D9;
pub static COLOR_TABLE_RED_SIZE: GLenum = 0x80DA;
pub static COLOR_TABLE_RED_SIZE_SGI: GLenum = 0x80DA;
pub static COLOR_TABLE_GREEN_SIZE: GLenum = 0x80DB;
pub static COLOR_TABLE_GREEN_SIZE_SGI: GLenum = 0x80DB;
pub static COLOR_TABLE_BLUE_SIZE: GLenum = 0x80DC;
pub static COLOR_TABLE_BLUE_SIZE_SGI: GLenum = 0x80DC;
pub static COLOR_TABLE_ALPHA_SIZE: GLenum = 0x80DD;
pub static COLOR_TABLE_ALPHA_SIZE_SGI: GLenum = 0x80DD;
pub static COLOR_TABLE_LUMINANCE_SIZE: GLenum = 0x80DE;
pub static COLOR_TABLE_LUMINANCE_SIZE_SGI: GLenum = 0x80DE;
pub static COLOR_TABLE_INTENSITY_SIZE: GLenum = 0x80DF;
pub static COLOR_TABLE_INTENSITY_SIZE_SGI: GLenum = 0x80DF;
pub static BGR: GLenum = 0x80E0;
pub static BGR_EXT: GLenum = 0x80E0;
pub static BGRA: GLenum = 0x80E1;
pub static BGRA_EXT: GLenum = 0x80E1;
pub static COLOR_INDEX1_EXT: GLenum = 0x80E2;
pub static COLOR_INDEX2_EXT: GLenum = 0x80E3;
pub static COLOR_INDEX4_EXT: GLenum = 0x80E4;
pub static COLOR_INDEX8_EXT: GLenum = 0x80E5;
pub static COLOR_INDEX12_EXT: GLenum = 0x80E6;
pub static COLOR_INDEX16_EXT: GLenum = 0x80E7;
pub static MAX_ELEMENTS_VERTICES: GLenum = 0x80E8;
pub static MAX_ELEMENTS_VERTICES_EXT: GLenum = 0x80E8;
pub static MAX_ELEMENTS_INDICES: GLenum = 0x80E9;
pub static MAX_ELEMENTS_INDICES_EXT: GLenum = 0x80E9;
pub static PHONG_WIN: GLenum = 0x80EA;
pub static PHONG_HINT_WIN: GLenum = 0x80EB;
pub static FOG_SPECULAR_TEXTURE_WIN: GLenum = 0x80EC;
pub static TEXTURE_INDEX_SIZE_EXT: GLenum = 0x80ED;
pub static PARAMETER_BUFFER_ARB: GLenum = 0x80EE;
pub static PARAMETER_BUFFER_BINDING_ARB: GLenum = 0x80EF;
pub static CLIP_VOLUME_CLIPPING_HINT_EXT: GLenum = 0x80F0;
pub static DUAL_ALPHA4_SGIS: GLenum = 0x8110;
pub static DUAL_ALPHA8_SGIS: GLenum = 0x8111;
pub static DUAL_ALPHA12_SGIS: GLenum = 0x8112;
pub static DUAL_ALPHA16_SGIS: GLenum = 0x8113;
pub static DUAL_LUMINANCE4_SGIS: GLenum = 0x8114;
pub static DUAL_LUMINANCE8_SGIS: GLenum = 0x8115;
pub static DUAL_LUMINANCE12_SGIS: GLenum = 0x8116;
pub static DUAL_LUMINANCE16_SGIS: GLenum = 0x8117;
pub static DUAL_INTENSITY4_SGIS: GLenum = 0x8118;
pub static DUAL_INTENSITY8_SGIS: GLenum = 0x8119;
pub static DUAL_INTENSITY12_SGIS: GLenum = 0x811A;
pub static DUAL_INTENSITY16_SGIS: GLenum = 0x811B;
pub static DUAL_LUMINANCE_ALPHA4_SGIS: GLenum = 0x811C;
pub static DUAL_LUMINANCE_ALPHA8_SGIS: GLenum = 0x811D;
pub static QUAD_ALPHA4_SGIS: GLenum = 0x811E;
pub static QUAD_ALPHA8_SGIS: GLenum = 0x811F;
pub static QUAD_LUMINANCE4_SGIS: GLenum = 0x8120;
pub static QUAD_LUMINANCE8_SGIS: GLenum = 0x8121;
pub static QUAD_INTENSITY4_SGIS: GLenum = 0x8122;
pub static QUAD_INTENSITY8_SGIS: GLenum = 0x8123;
pub static DUAL_TEXTURE_SELECT_SGIS: GLenum = 0x8124;
pub static QUAD_TEXTURE_SELECT_SGIS: GLenum = 0x8125;
pub static POINT_SIZE_MIN: GLenum = 0x8126;
pub static POINT_SIZE_MIN_ARB: GLenum = 0x8126;
pub static POINT_SIZE_MIN_EXT: GLenum = 0x8126;
pub static POINT_SIZE_MIN_SGIS: GLenum = 0x8126;
pub static POINT_SIZE_MAX: GLenum = 0x8127;
pub static POINT_SIZE_MAX_ARB: GLenum = 0x8127;
pub static POINT_SIZE_MAX_EXT: GLenum = 0x8127;
pub static POINT_SIZE_MAX_SGIS: GLenum = 0x8127;
pub static POINT_FADE_THRESHOLD_SIZE: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_ARB: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_EXT: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_SGIS: GLenum = 0x8128;
pub static DISTANCE_ATTENUATION_EXT: GLenum = 0x8129;
pub static DISTANCE_ATTENUATION_SGIS: GLenum = 0x8129;
pub static POINT_DISTANCE_ATTENUATION: GLenum = 0x8129;
pub static POINT_DISTANCE_ATTENUATION_ARB: GLenum = 0x8129;
pub static FOG_FUNC_SGIS: GLenum = 0x812A;
pub static FOG_FUNC_POINTS_SGIS: GLenum = 0x812B;
pub static MAX_FOG_FUNC_POINTS_SGIS: GLenum = 0x812C;
pub static CLAMP_TO_BORDER: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_ARB: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_NV: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_SGIS: GLenum = 0x812D;
pub static TEXTURE_MULTI_BUFFER_HINT_SGIX: GLenum = 0x812E;
pub static CLAMP_TO_EDGE: GLenum = 0x812F;
pub static CLAMP_TO_EDGE_SGIS: GLenum = 0x812F;
pub static PACK_SKIP_VOLUMES_SGIS: GLenum = 0x8130;
pub static PACK_IMAGE_DEPTH_SGIS: GLenum = 0x8131;
pub static UNPACK_SKIP_VOLUMES_SGIS: GLenum = 0x8132;
pub static UNPACK_IMAGE_DEPTH_SGIS: GLenum = 0x8133;
pub static TEXTURE_4D_SGIS: GLenum = 0x8134;
pub static PROXY_TEXTURE_4D_SGIS: GLenum = 0x8135;
pub static TEXTURE_4DSIZE_SGIS: GLenum = 0x8136;
pub static TEXTURE_WRAP_Q_SGIS: GLenum = 0x8137;
pub static MAX_4D_TEXTURE_SIZE_SGIS: GLenum = 0x8138;
pub static PIXEL_TEX_GEN_SGIX: GLenum = 0x8139;
pub static TEXTURE_MIN_LOD: GLenum = 0x813A;
pub static TEXTURE_MIN_LOD_SGIS: GLenum = 0x813A;
pub static TEXTURE_MAX_LOD: GLenum = 0x813B;
pub static TEXTURE_MAX_LOD_SGIS: GLenum = 0x813B;
pub static TEXTURE_BASE_LEVEL: GLenum = 0x813C;
pub static TEXTURE_BASE_LEVEL_SGIS: GLenum = 0x813C;
pub static TEXTURE_MAX_LEVEL: GLenum = 0x813D;
pub static TEXTURE_MAX_LEVEL_SGIS: GLenum = 0x813D;
pub static PIXEL_TILE_BEST_ALIGNMENT_SGIX: GLenum = 0x813E;
pub static PIXEL_TILE_CACHE_INCREMENT_SGIX: GLenum = 0x813F;
pub static PIXEL_TILE_WIDTH_SGIX: GLenum = 0x8140;
pub static PIXEL_TILE_HEIGHT_SGIX: GLenum = 0x8141;
pub static PIXEL_TILE_GRID_WIDTH_SGIX: GLenum = 0x8142;
pub static PIXEL_TILE_GRID_HEIGHT_SGIX: GLenum = 0x8143;
pub static PIXEL_TILE_GRID_DEPTH_SGIX: GLenum = 0x8144;
pub static PIXEL_TILE_CACHE_SIZE_SGIX: GLenum = 0x8145;
pub static FILTER4_SGIS: GLenum = 0x8146;
pub static TEXTURE_FILTER4_SIZE_SGIS: GLenum = 0x8147;
pub static SPRITE_SGIX: GLenum = 0x8148;
pub static SPRITE_MODE_SGIX: GLenum = 0x8149;
pub static SPRITE_AXIS_SGIX: GLenum = 0x814A;
pub static SPRITE_TRANSLATION_SGIX: GLenum = 0x814B;
pub static SPRITE_AXIAL_SGIX: GLenum = 0x814C;
pub static SPRITE_OBJECT_ALIGNED_SGIX: GLenum = 0x814D;
pub static SPRITE_EYE_ALIGNED_SGIX: GLenum = 0x814E;
pub static TEXTURE_4D_BINDING_SGIS: GLenum = 0x814F;
pub static IGNORE_BORDER_HP: GLenum = 0x8150;
pub static CONSTANT_BORDER: GLenum = 0x8151;
pub static CONSTANT_BORDER_HP: GLenum = 0x8151;
pub static REPLICATE_BORDER: GLenum = 0x8153;
pub static REPLICATE_BORDER_HP: GLenum = 0x8153;
pub static CONVOLUTION_BORDER_COLOR: GLenum = 0x8154;
pub static CONVOLUTION_BORDER_COLOR_HP: GLenum = 0x8154;
pub static IMAGE_SCALE_X_HP: GLenum = 0x8155;
pub static IMAGE_SCALE_Y_HP: GLenum = 0x8156;
pub static IMAGE_TRANSLATE_X_HP: GLenum = 0x8157;
pub static IMAGE_TRANSLATE_Y_HP: GLenum = 0x8158;
pub static IMAGE_ROTATE_ANGLE_HP: GLenum = 0x8159;
pub static IMAGE_ROTATE_ORIGIN_X_HP: GLenum = 0x815A;
pub static IMAGE_ROTATE_ORIGIN_Y_HP: GLenum = 0x815B;
pub static IMAGE_MAG_FILTER_HP: GLenum = 0x815C;
pub static IMAGE_MIN_FILTER_HP: GLenum = 0x815D;
pub static IMAGE_CUBIC_WEIGHT_HP: GLenum = 0x815E;
pub static CUBIC_HP: GLenum = 0x815F;
pub static AVERAGE_HP: GLenum = 0x8160;
pub static IMAGE_TRANSFORM_2D_HP: GLenum = 0x8161;
pub static POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: GLenum = 0x8162;
pub static PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: GLenum = 0x8163;
pub static OCCLUSION_TEST_HP: GLenum = 0x8165;
pub static OCCLUSION_TEST_RESULT_HP: GLenum = 0x8166;
pub static TEXTURE_LIGHTING_MODE_HP: GLenum = 0x8167;
pub static TEXTURE_POST_SPECULAR_HP: GLenum = 0x8168;
pub static TEXTURE_PRE_SPECULAR_HP: GLenum = 0x8169;
pub static LINEAR_CLIPMAP_LINEAR_SGIX: GLenum = 0x8170;
pub static TEXTURE_CLIPMAP_CENTER_SGIX: GLenum = 0x8171;
pub static TEXTURE_CLIPMAP_FRAME_SGIX: GLenum = 0x8172;
pub static TEXTURE_CLIPMAP_OFFSET_SGIX: GLenum = 0x8173;
pub static TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: GLenum = 0x8174;
pub static TEXTURE_CLIPMAP_LOD_OFFSET_SGIX: GLenum = 0x8175;
pub static TEXTURE_CLIPMAP_DEPTH_SGIX: GLenum = 0x8176;
pub static MAX_CLIPMAP_DEPTH_SGIX: GLenum = 0x8177;
pub static MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: GLenum = 0x8178;
pub static POST_TEXTURE_FILTER_BIAS_SGIX: GLenum = 0x8179;
pub static POST_TEXTURE_FILTER_SCALE_SGIX: GLenum = 0x817A;
pub static POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: GLenum = 0x817B;
pub static POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: GLenum = 0x817C;
pub static REFERENCE_PLANE_SGIX: GLenum = 0x817D;
pub static REFERENCE_PLANE_EQUATION_SGIX: GLenum = 0x817E;
pub static IR_INSTRUMENT1_SGIX: GLenum = 0x817F;
pub static INSTRUMENT_BUFFER_POINTER_SGIX: GLenum = 0x8180;
pub static INSTRUMENT_MEASUREMENTS_SGIX: GLenum = 0x8181;
pub static LIST_PRIORITY_SGIX: GLenum = 0x8182;
pub static CALLIGRAPHIC_FRAGMENT_SGIX: GLenum = 0x8183;
pub static PIXEL_TEX_GEN_Q_CEILING_SGIX: GLenum = 0x8184;
pub static PIXEL_TEX_GEN_Q_ROUND_SGIX: GLenum = 0x8185;
pub static PIXEL_TEX_GEN_Q_FLOOR_SGIX: GLenum = 0x8186;
pub static PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX: GLenum = 0x8187;
pub static PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX: GLenum = 0x8188;
pub static PIXEL_TEX_GEN_ALPHA_LS_SGIX: GLenum = 0x8189;
pub static PIXEL_TEX_GEN_ALPHA_MS_SGIX: GLenum = 0x818A;
pub static FRAMEZOOM_SGIX: GLenum = 0x818B;
pub static FRAMEZOOM_FACTOR_SGIX: GLenum = 0x818C;
pub static MAX_FRAMEZOOM_FACTOR_SGIX: GLenum = 0x818D;
pub static TEXTURE_LOD_BIAS_S_SGIX: GLenum = 0x818E;
pub static TEXTURE_LOD_BIAS_T_SGIX: GLenum = 0x818F;
pub static TEXTURE_LOD_BIAS_R_SGIX: GLenum = 0x8190;
pub static GENERATE_MIPMAP: GLenum = 0x8191;
pub static GENERATE_MIPMAP_SGIS: GLenum = 0x8191;
pub static GENERATE_MIPMAP_HINT: GLenum = 0x8192;
pub static GENERATE_MIPMAP_HINT_SGIS: GLenum = 0x8192;
pub static GEOMETRY_DEFORMATION_SGIX: GLenum = 0x8194;
pub static TEXTURE_DEFORMATION_SGIX: GLenum = 0x8195;
pub static DEFORMATIONS_MASK_SGIX: GLenum = 0x8196;
pub static MAX_DEFORMATION_ORDER_SGIX: GLenum = 0x8197;
pub static FOG_OFFSET_SGIX: GLenum = 0x8198;
pub static FOG_OFFSET_VALUE_SGIX: GLenum = 0x8199;
pub static TEXTURE_COMPARE_SGIX: GLenum = 0x819A;
pub static TEXTURE_COMPARE_OPERATOR_SGIX: GLenum = 0x819B;
pub static TEXTURE_LEQUAL_R_SGIX: GLenum = 0x819C;
pub static TEXTURE_GEQUAL_R_SGIX: GLenum = 0x819D;
pub static DEPTH_COMPONENT16: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_ARB: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_OES: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_SGIX: GLenum = 0x81A5;
pub static DEPTH_COMPONENT24: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_ARB: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_OES: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_SGIX: GLenum = 0x81A6;
pub static DEPTH_COMPONENT32: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_ARB: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_OES: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_SGIX: GLenum = 0x81A7;
pub static ARRAY_ELEMENT_LOCK_FIRST_EXT: GLenum = 0x81A8;
pub static ARRAY_ELEMENT_LOCK_COUNT_EXT: GLenum = 0x81A9;
pub static CULL_VERTEX_EXT: GLenum = 0x81AA;
pub static CULL_VERTEX_EYE_POSITION_EXT: GLenum = 0x81AB;
pub static CULL_VERTEX_OBJECT_POSITION_EXT: GLenum = 0x81AC;
pub static IUI_V2F_EXT: GLenum = 0x81AD;
pub static IUI_V3F_EXT: GLenum = 0x81AE;
pub static IUI_N3F_V2F_EXT: GLenum = 0x81AF;
pub static IUI_N3F_V3F_EXT: GLenum = 0x81B0;
pub static T2F_IUI_V2F_EXT: GLenum = 0x81B1;
pub static T2F_IUI_V3F_EXT: GLenum = 0x81B2;
pub static T2F_IUI_N3F_V2F_EXT: GLenum = 0x81B3;
pub static T2F_IUI_N3F_V3F_EXT: GLenum = 0x81B4;
pub static INDEX_TEST_EXT: GLenum = 0x81B5;
pub static INDEX_TEST_FUNC_EXT: GLenum = 0x81B6;
pub static INDEX_TEST_REF_EXT: GLenum = 0x81B7;
pub static INDEX_MATERIAL_EXT: GLenum = 0x81B8;
pub static INDEX_MATERIAL_PARAMETER_EXT: GLenum = 0x81B9;
pub static INDEX_MATERIAL_FACE_EXT: GLenum = 0x81BA;
pub static YCRCB_422_SGIX: GLenum = 0x81BB;
pub static YCRCB_444_SGIX: GLenum = 0x81BC;
pub static WRAP_BORDER_SUN: GLenum = 0x81D4;
pub static UNPACK_CONSTANT_DATA_SUNX: GLenum = 0x81D5;
pub static TEXTURE_CONSTANT_DATA_SUNX: GLenum = 0x81D6;
pub static TRIANGLE_LIST_SUN: GLenum = 0x81D7;
pub static REPLACEMENT_CODE_SUN: GLenum = 0x81D8;
pub static GLOBAL_ALPHA_SUN: GLenum = 0x81D9;
pub static GLOBAL_ALPHA_FACTOR_SUN: GLenum = 0x81DA;
pub static TEXTURE_COLOR_WRITEMASK_SGIS: GLenum = 0x81EF;
pub static EYE_DISTANCE_TO_POINT_SGIS: GLenum = 0x81F0;
pub static OBJECT_DISTANCE_TO_POINT_SGIS: GLenum = 0x81F1;
pub static EYE_DISTANCE_TO_LINE_SGIS: GLenum = 0x81F2;
pub static OBJECT_DISTANCE_TO_LINE_SGIS: GLenum = 0x81F3;
pub static EYE_POINT_SGIS: GLenum = 0x81F4;
pub static OBJECT_POINT_SGIS: GLenum = 0x81F5;
pub static EYE_LINE_SGIS: GLenum = 0x81F6;
pub static OBJECT_LINE_SGIS: GLenum = 0x81F7;
pub static LIGHT_MODEL_COLOR_CONTROL: GLenum = 0x81F8;
pub static LIGHT_MODEL_COLOR_CONTROL_EXT: GLenum = 0x81F8;
pub static SINGLE_COLOR: GLenum = 0x81F9;
pub static SINGLE_COLOR_EXT: GLenum = 0x81F9;
pub static SEPARATE_SPECULAR_COLOR: GLenum = 0x81FA;
pub static SEPARATE_SPECULAR_COLOR_EXT: GLenum = 0x81FA;
pub static SHARED_TEXTURE_PALETTE_EXT: GLenum = 0x81FB;
pub static TEXT_FRAGMENT_SHADER_ATI: GLenum = 0x8200;
pub static FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum = 0x8210;
pub static FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum = 0x8211;
pub static FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum = 0x8211;
pub static FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum = 0x8212;
pub static FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum = 0x8213;
pub static FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum = 0x8214;
pub static FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum = 0x8215;
pub static FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum = 0x8216;
pub static FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum = 0x8217;
pub static FRAMEBUFFER_DEFAULT: GLenum = 0x8218;
pub static FRAMEBUFFER_UNDEFINED: GLenum = 0x8219;
pub static FRAMEBUFFER_UNDEFINED_OES: GLenum = 0x8219;
pub static DEPTH_STENCIL_ATTACHMENT: GLenum = 0x821A;
pub static MAJOR_VERSION: GLenum = 0x821B;
pub static MINOR_VERSION: GLenum = 0x821C;
pub static NUM_EXTENSIONS: GLenum = 0x821D;
pub static CONTEXT_FLAGS: GLenum = 0x821E;
pub static BUFFER_IMMUTABLE_STORAGE: GLenum = 0x821F;
pub static BUFFER_STORAGE_FLAGS: GLenum = 0x8220;
pub static INDEX: GLenum = 0x8222;
pub static COMPRESSED_RED: GLenum = 0x8225;
pub static COMPRESSED_RG: GLenum = 0x8226;
pub static RG: GLenum = 0x8227;
pub static RG_EXT: GLenum = 0x8227;
pub static RG_INTEGER: GLenum = 0x8228;
pub static R8: GLenum = 0x8229;
pub static R8_EXT: GLenum = 0x8229;
pub static R16: GLenum = 0x822A;
pub static RG8: GLenum = 0x822B;
pub static RG8_EXT: GLenum = 0x822B;
pub static RG16: GLenum = 0x822C;
pub static R16F: GLenum = 0x822D;
pub static R16F_EXT: GLenum = 0x822D;
pub static R32F: GLenum = 0x822E;
pub static RG16F: GLenum = 0x822F;
pub static RG16F_EXT: GLenum = 0x822F;
pub static RG32F: GLenum = 0x8230;
pub static R8I: GLenum = 0x8231;
pub static R8UI: GLenum = 0x8232;
pub static R16I: GLenum = 0x8233;
pub static R16UI: GLenum = 0x8234;
pub static R32I: GLenum = 0x8235;
pub static R32UI: GLenum = 0x8236;
pub static RG8I: GLenum = 0x8237;
pub static RG8UI: GLenum = 0x8238;
pub static RG16I: GLenum = 0x8239;
pub static RG16UI: GLenum = 0x823A;
pub static RG32I: GLenum = 0x823B;
pub static RG32UI: GLenum = 0x823C;
pub static SYNC_CL_EVENT_ARB: GLenum = 0x8240;
pub static SYNC_CL_EVENT_COMPLETE_ARB: GLenum = 0x8241;
pub static DEBUG_OUTPUT_SYNCHRONOUS: GLenum = 0x8242;
pub static DEBUG_OUTPUT_SYNCHRONOUS_ARB: GLenum = 0x8242;
pub static DEBUG_OUTPUT_SYNCHRONOUS_KHR: GLenum = 0x8242;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: GLenum = 0x8243;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: GLenum = 0x8243;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR: GLenum = 0x8243;
pub static DEBUG_CALLBACK_FUNCTION: GLenum = 0x8244;
pub static DEBUG_CALLBACK_FUNCTION_ARB: GLenum = 0x8244;
pub static DEBUG_CALLBACK_FUNCTION_KHR: GLenum = 0x8244;
pub static DEBUG_CALLBACK_USER_PARAM: GLenum = 0x8245;
pub static DEBUG_CALLBACK_USER_PARAM_ARB: GLenum = 0x8245;
pub static DEBUG_CALLBACK_USER_PARAM_KHR: GLenum = 0x8245;
pub static DEBUG_SOURCE_API: GLenum = 0x8246;
pub static DEBUG_SOURCE_API_ARB: GLenum = 0x8246;
pub static DEBUG_SOURCE_API_KHR: GLenum = 0x8246;
pub static DEBUG_SOURCE_WINDOW_SYSTEM: GLenum = 0x8247;
pub static DEBUG_SOURCE_WINDOW_SYSTEM_ARB: GLenum = 0x8247;
pub static DEBUG_SOURCE_WINDOW_SYSTEM_KHR: GLenum = 0x8247;
pub static DEBUG_SOURCE_SHADER_COMPILER: GLenum = 0x8248;
pub static DEBUG_SOURCE_SHADER_COMPILER_ARB: GLenum = 0x8248;
pub static DEBUG_SOURCE_SHADER_COMPILER_KHR: GLenum = 0x8248;
pub static DEBUG_SOURCE_THIRD_PARTY: GLenum = 0x8249;
pub static DEBUG_SOURCE_THIRD_PARTY_ARB: GLenum = 0x8249;
pub static DEBUG_SOURCE_THIRD_PARTY_KHR: GLenum = 0x8249;
pub static DEBUG_SOURCE_APPLICATION: GLenum = 0x824A;
pub static DEBUG_SOURCE_APPLICATION_ARB: GLenum = 0x824A;
pub static DEBUG_SOURCE_APPLICATION_KHR: GLenum = 0x824A;
pub static DEBUG_SOURCE_OTHER: GLenum = 0x824B;
pub static DEBUG_SOURCE_OTHER_ARB: GLenum = 0x824B;
pub static DEBUG_SOURCE_OTHER_KHR: GLenum = 0x824B;
pub static DEBUG_TYPE_ERROR: GLenum = 0x824C;
pub static DEBUG_TYPE_ERROR_ARB: GLenum = 0x824C;
pub static DEBUG_TYPE_ERROR_KHR: GLenum = 0x824C;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR: GLenum = 0x824D;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: GLenum = 0x824D;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR: GLenum = 0x824D;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR: GLenum = 0x824E;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: GLenum = 0x824E;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR: GLenum = 0x824E;
pub static DEBUG_TYPE_PORTABILITY: GLenum = 0x824F;
pub static DEBUG_TYPE_PORTABILITY_ARB: GLenum = 0x824F;
pub static DEBUG_TYPE_PORTABILITY_KHR: GLenum = 0x824F;
pub static DEBUG_TYPE_PERFORMANCE: GLenum = 0x8250;
pub static DEBUG_TYPE_PERFORMANCE_ARB: GLenum = 0x8250;
pub static DEBUG_TYPE_PERFORMANCE_KHR: GLenum = 0x8250;
pub static DEBUG_TYPE_OTHER: GLenum = 0x8251;
pub static DEBUG_TYPE_OTHER_ARB: GLenum = 0x8251;
pub static DEBUG_TYPE_OTHER_KHR: GLenum = 0x8251;
pub static LOSE_CONTEXT_ON_RESET_ARB: GLenum = 0x8252;
pub static GUILTY_CONTEXT_RESET_ARB: GLenum = 0x8253;
pub static INNOCENT_CONTEXT_RESET_ARB: GLenum = 0x8254;
pub static UNKNOWN_CONTEXT_RESET_ARB: GLenum = 0x8255;
pub static RESET_NOTIFICATION_STRATEGY_ARB: GLenum = 0x8256;
pub static PROGRAM_BINARY_RETRIEVABLE_HINT: GLenum = 0x8257;
pub static PROGRAM_SEPARABLE: GLenum = 0x8258;
pub static PROGRAM_SEPARABLE_EXT: GLenum = 0x8258;
pub static ACTIVE_PROGRAM: GLenum = 0x8259;
pub static ACTIVE_PROGRAM_EXT: GLenum = 0x8259;
pub static PROGRAM_PIPELINE_BINDING: GLenum = 0x825A;
pub static PROGRAM_PIPELINE_BINDING_EXT: GLenum = 0x825A;
pub static MAX_VIEWPORTS: GLenum = 0x825B;
pub static VIEWPORT_SUBPIXEL_BITS: GLenum = 0x825C;
pub static VIEWPORT_BOUNDS_RANGE: GLenum = 0x825D;
pub static LAYER_PROVOKING_VERTEX: GLenum = 0x825E;
pub static VIEWPORT_INDEX_PROVOKING_VERTEX: GLenum = 0x825F;
pub static UNDEFINED_VERTEX: GLenum = 0x8260;
pub static NO_RESET_NOTIFICATION_ARB: GLenum = 0x8261;
pub static MAX_COMPUTE_SHARED_MEMORY_SIZE: GLenum = 0x8262;
pub static MAX_COMPUTE_UNIFORM_COMPONENTS: GLenum = 0x8263;
pub static MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: GLenum = 0x8264;
pub static MAX_COMPUTE_ATOMIC_COUNTERS: GLenum = 0x8265;
pub static MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: GLenum = 0x8266;
pub static COMPUTE_LOCAL_WORK_SIZE: GLenum = 0x8267;
pub static DEBUG_TYPE_MARKER: GLenum = 0x8268;
pub static DEBUG_TYPE_MARKER_KHR: GLenum = 0x8268;
pub static DEBUG_TYPE_PUSH_GROUP: GLenum = 0x8269;
pub static DEBUG_TYPE_PUSH_GROUP_KHR: GLenum = 0x8269;
pub static DEBUG_TYPE_POP_GROUP: GLenum = 0x826A;
pub static DEBUG_TYPE_POP_GROUP_KHR: GLenum = 0x826A;
pub static DEBUG_SEVERITY_NOTIFICATION: GLenum = 0x826B;
pub static DEBUG_SEVERITY_NOTIFICATION_KHR: GLenum = 0x826B;
pub static MAX_DEBUG_GROUP_STACK_DEPTH: GLenum = 0x826C;
pub static MAX_DEBUG_GROUP_STACK_DEPTH_KHR: GLenum = 0x826C;
pub static DEBUG_GROUP_STACK_DEPTH: GLenum = 0x826D;
pub static DEBUG_GROUP_STACK_DEPTH_KHR: GLenum = 0x826D;
pub static MAX_UNIFORM_LOCATIONS: GLenum = 0x826E;
pub static INTERNALFORMAT_SUPPORTED: GLenum = 0x826F;
pub static INTERNALFORMAT_PREFERRED: GLenum = 0x8270;
pub static INTERNALFORMAT_RED_SIZE: GLenum = 0x8271;
pub static INTERNALFORMAT_GREEN_SIZE: GLenum = 0x8272;
pub static INTERNALFORMAT_BLUE_SIZE: GLenum = 0x8273;
pub static INTERNALFORMAT_ALPHA_SIZE: GLenum = 0x8274;
pub static INTERNALFORMAT_DEPTH_SIZE: GLenum = 0x8275;
pub static INTERNALFORMAT_STENCIL_SIZE: GLenum = 0x8276;
pub static INTERNALFORMAT_SHARED_SIZE: GLenum = 0x8277;
pub static INTERNALFORMAT_RED_TYPE: GLenum = 0x8278;
pub static INTERNALFORMAT_GREEN_TYPE: GLenum = 0x8279;
pub static INTERNALFORMAT_BLUE_TYPE: GLenum = 0x827A;
pub static INTERNALFORMAT_ALPHA_TYPE: GLenum = 0x827B;
pub static INTERNALFORMAT_DEPTH_TYPE: GLenum = 0x827C;
pub static INTERNALFORMAT_STENCIL_TYPE: GLenum = 0x827D;
pub static MAX_WIDTH: GLenum = 0x827E;
pub static MAX_HEIGHT: GLenum = 0x827F;
pub static MAX_DEPTH: GLenum = 0x8280;
pub static MAX_LAYERS: GLenum = 0x8281;
pub static MAX_COMBINED_DIMENSIONS: GLenum = 0x8282;
pub static COLOR_COMPONENTS: GLenum = 0x8283;
pub static DEPTH_COMPONENTS: GLenum = 0x8284;
pub static STENCIL_COMPONENTS: GLenum = 0x8285;
pub static COLOR_RENDERABLE: GLenum = 0x8286;
pub static DEPTH_RENDERABLE: GLenum = 0x8287;
pub static STENCIL_RENDERABLE: GLenum = 0x8288;
pub static FRAMEBUFFER_RENDERABLE: GLenum = 0x8289;
pub static FRAMEBUFFER_RENDERABLE_LAYERED: GLenum = 0x828A;
pub static FRAMEBUFFER_BLEND: GLenum = 0x828B;
pub static READ_PIXELS: GLenum = 0x828C;
pub static READ_PIXELS_FORMAT: GLenum = 0x828D;
pub static READ_PIXELS_TYPE: GLenum = 0x828E;
pub static TEXTURE_IMAGE_FORMAT: GLenum = 0x828F;
pub static TEXTURE_IMAGE_TYPE: GLenum = 0x8290;
pub static GET_TEXTURE_IMAGE_FORMAT: GLenum = 0x8291;
pub static GET_TEXTURE_IMAGE_TYPE: GLenum = 0x8292;
pub static MIPMAP: GLenum = 0x8293;
pub static MANUAL_GENERATE_MIPMAP: GLenum = 0x8294;
pub static AUTO_GENERATE_MIPMAP: GLenum = 0x8295;
pub static COLOR_ENCODING: GLenum = 0x8296;
pub static SRGB_READ: GLenum = 0x8297;
pub static SRGB_WRITE: GLenum = 0x8298;
pub static SRGB_DECODE_ARB: GLenum = 0x8299;
pub static FILTER: GLenum = 0x829A;
pub static VERTEX_TEXTURE: GLenum = 0x829B;
pub static TESS_CONTROL_TEXTURE: GLenum = 0x829C;
pub static TESS_EVALUATION_TEXTURE: GLenum = 0x829D;
pub static GEOMETRY_TEXTURE: GLenum = 0x829E;
pub static FRAGMENT_TEXTURE: GLenum = 0x829F;
pub static COMPUTE_TEXTURE: GLenum = 0x82A0;
pub static TEXTURE_SHADOW: GLenum = 0x82A1;
pub static TEXTURE_GATHER: GLenum = 0x82A2;
pub static TEXTURE_GATHER_SHADOW: GLenum = 0x82A3;
pub static SHADER_IMAGE_LOAD: GLenum = 0x82A4;
pub static SHADER_IMAGE_STORE: GLenum = 0x82A5;
pub static SHADER_IMAGE_ATOMIC: GLenum = 0x82A6;
pub static IMAGE_TEXEL_SIZE: GLenum = 0x82A7;
pub static IMAGE_COMPATIBILITY_CLASS: GLenum = 0x82A8;
pub static IMAGE_PIXEL_FORMAT: GLenum = 0x82A9;
pub static IMAGE_PIXEL_TYPE: GLenum = 0x82AA;
pub static SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: GLenum = 0x82AC;
pub static SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: GLenum = 0x82AD;
pub static SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: GLenum = 0x82AE;
pub static SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: GLenum = 0x82AF;
pub static TEXTURE_COMPRESSED_BLOCK_WIDTH: GLenum = 0x82B1;
pub static TEXTURE_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x82B2;
pub static TEXTURE_COMPRESSED_BLOCK_SIZE: GLenum = 0x82B3;
pub static CLEAR_BUFFER: GLenum = 0x82B4;
pub static TEXTURE_VIEW: GLenum = 0x82B5;
pub static VIEW_COMPATIBILITY_CLASS: GLenum = 0x82B6;
pub static FULL_SUPPORT: GLenum = 0x82B7;
pub static CAVEAT_SUPPORT: GLenum = 0x82B8;
pub static IMAGE_CLASS_4_X_32: GLenum = 0x82B9;
pub static IMAGE_CLASS_2_X_32: GLenum = 0x82BA;
pub static IMAGE_CLASS_1_X_32: GLenum = 0x82BB;
pub static IMAGE_CLASS_4_X_16: GLenum = 0x82BC;
pub static IMAGE_CLASS_2_X_16: GLenum = 0x82BD;
pub static IMAGE_CLASS_1_X_16: GLenum = 0x82BE;
pub static IMAGE_CLASS_4_X_8: GLenum = 0x82BF;
pub static IMAGE_CLASS_2_X_8: GLenum = 0x82C0;
pub static IMAGE_CLASS_1_X_8: GLenum = 0x82C1;
pub static IMAGE_CLASS_11_11_10: GLenum = 0x82C2;
pub static IMAGE_CLASS_10_10_10_2: GLenum = 0x82C3;
pub static VIEW_CLASS_128_BITS: GLenum = 0x82C4;
pub static VIEW_CLASS_96_BITS: GLenum = 0x82C5;
pub static VIEW_CLASS_64_BITS: GLenum = 0x82C6;
pub static VIEW_CLASS_48_BITS: GLenum = 0x82C7;
pub static VIEW_CLASS_32_BITS: GLenum = 0x82C8;
pub static VIEW_CLASS_24_BITS: GLenum = 0x82C9;
pub static VIEW_CLASS_16_BITS: GLenum = 0x82CA;
pub static VIEW_CLASS_8_BITS: GLenum = 0x82CB;
pub static VIEW_CLASS_S3TC_DXT1_RGB: GLenum = 0x82CC;
pub static VIEW_CLASS_S3TC_DXT1_RGBA: GLenum = 0x82CD;
pub static VIEW_CLASS_S3TC_DXT3_RGBA: GLenum = 0x82CE;
pub static VIEW_CLASS_S3TC_DXT5_RGBA: GLenum = 0x82CF;
pub static VIEW_CLASS_RGTC1_RED: GLenum = 0x82D0;
pub static VIEW_CLASS_RGTC2_RG: GLenum = 0x82D1;
pub static VIEW_CLASS_BPTC_UNORM: GLenum = 0x82D2;
pub static VIEW_CLASS_BPTC_FLOAT: GLenum = 0x82D3;
pub static VERTEX_ATTRIB_BINDING: GLenum = 0x82D4;
pub static VERTEX_ATTRIB_RELATIVE_OFFSET: GLenum = 0x82D5;
pub static VERTEX_BINDING_DIVISOR: GLenum = 0x82D6;
pub static VERTEX_BINDING_OFFSET: GLenum = 0x82D7;
pub static VERTEX_BINDING_STRIDE: GLenum = 0x82D8;
pub static MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: GLenum = 0x82D9;
pub static MAX_VERTEX_ATTRIB_BINDINGS: GLenum = 0x82DA;
pub static TEXTURE_VIEW_MIN_LEVEL: GLenum = 0x82DB;
pub static TEXTURE_VIEW_NUM_LEVELS: GLenum = 0x82DC;
pub static TEXTURE_VIEW_MIN_LAYER: GLenum = 0x82DD;
pub static TEXTURE_VIEW_NUM_LAYERS: GLenum = 0x82DE;
pub static TEXTURE_IMMUTABLE_LEVELS: GLenum = 0x82DF;
pub static BUFFER: GLenum = 0x82E0;
pub static BUFFER_KHR: GLenum = 0x82E0;
pub static SHADER: GLenum = 0x82E1;
pub static SHADER_KHR: GLenum = 0x82E1;
pub static PROGRAM: GLenum = 0x82E2;
pub static PROGRAM_KHR: GLenum = 0x82E2;
pub static QUERY: GLenum = 0x82E3;
pub static QUERY_KHR: GLenum = 0x82E3;
pub static PROGRAM_PIPELINE: GLenum = 0x82E4;
pub static MAX_VERTEX_ATTRIB_STRIDE: GLenum = 0x82E5;
pub static SAMPLER: GLenum = 0x82E6;
pub static SAMPLER_KHR: GLenum = 0x82E6;
pub static DISPLAY_LIST: GLenum = 0x82E7;
pub static MAX_LABEL_LENGTH: GLenum = 0x82E8;
pub static MAX_LABEL_LENGTH_KHR: GLenum = 0x82E8;
pub static NUM_SHADING_LANGUAGE_VERSIONS: GLenum = 0x82E9;
pub static DEPTH_PASS_INSTRUMENT_SGIX: GLenum = 0x8310;
pub static DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX: GLenum = 0x8311;
pub static DEPTH_PASS_INSTRUMENT_MAX_SGIX: GLenum = 0x8312;
pub static FRAGMENTS_INSTRUMENT_SGIX: GLenum = 0x8313;
pub static FRAGMENTS_INSTRUMENT_COUNTERS_SGIX: GLenum = 0x8314;
pub static FRAGMENTS_INSTRUMENT_MAX_SGIX: GLenum = 0x8315;
pub static CONVOLUTION_HINT_SGIX: GLenum = 0x8316;
pub static YCRCB_SGIX: GLenum = 0x8318;
pub static YCRCBA_SGIX: GLenum = 0x8319;
pub static UNPACK_COMPRESSED_SIZE_SGIX: GLenum = 0x831A;
pub static PACK_MAX_COMPRESSED_SIZE_SGIX: GLenum = 0x831B;
pub static PACK_COMPRESSED_SIZE_SGIX: GLenum = 0x831C;
pub static SLIM8U_SGIX: GLenum = 0x831D;
pub static SLIM10U_SGIX: GLenum = 0x831E;
pub static SLIM12S_SGIX: GLenum = 0x831F;
pub static ALPHA_MIN_SGIX: GLenum = 0x8320;
pub static ALPHA_MAX_SGIX: GLenum = 0x8321;
pub static SCALEBIAS_HINT_SGIX: GLenum = 0x8322;
pub static ASYNC_MARKER_SGIX: GLenum = 0x8329;
pub static PIXEL_TEX_GEN_MODE_SGIX: GLenum = 0x832B;
pub static ASYNC_HISTOGRAM_SGIX: GLenum = 0x832C;
pub static MAX_ASYNC_HISTOGRAM_SGIX: GLenum = 0x832D;
pub static PIXEL_TRANSFORM_2D_EXT: GLenum = 0x8330;
pub static PIXEL_MAG_FILTER_EXT: GLenum = 0x8331;
pub static PIXEL_MIN_FILTER_EXT: GLenum = 0x8332;
pub static PIXEL_CUBIC_WEIGHT_EXT: GLenum = 0x8333;
pub static CUBIC_EXT: GLenum = 0x8334;
pub static AVERAGE_EXT: GLenum = 0x8335;
pub static PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: GLenum = 0x8336;
pub static MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: GLenum = 0x8337;
pub static PIXEL_TRANSFORM_2D_MATRIX_EXT: GLenum = 0x8338;
pub static FRAGMENT_MATERIAL_EXT: GLenum = 0x8349;
pub static FRAGMENT_NORMAL_EXT: GLenum = 0x834A;
pub static FRAGMENT_COLOR_EXT: GLenum = 0x834C;
pub static ATTENUATION_EXT: GLenum = 0x834D;
pub static SHADOW_ATTENUATION_EXT: GLenum = 0x834E;
pub static TEXTURE_APPLICATION_MODE_EXT: GLenum = 0x834F;
pub static TEXTURE_LIGHT_EXT: GLenum = 0x8350;
pub static TEXTURE_MATERIAL_FACE_EXT: GLenum = 0x8351;
pub static TEXTURE_MATERIAL_PARAMETER_EXT: GLenum = 0x8352;
pub static PIXEL_TEXTURE_SGIS: GLenum = 0x8353;
pub static PIXEL_FRAGMENT_RGB_SOURCE_SGIS: GLenum = 0x8354;
pub static PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: GLenum = 0x8355;
pub static PIXEL_GROUP_COLOR_SGIS: GLenum = 0x8356;
pub static LINE_QUALITY_HINT_SGIX: GLenum = 0x835B;
pub static ASYNC_TEX_IMAGE_SGIX: GLenum = 0x835C;
pub static ASYNC_DRAW_PIXELS_SGIX: GLenum = 0x835D;
pub static ASYNC_READ_PIXELS_SGIX: GLenum = 0x835E;
pub static MAX_ASYNC_TEX_IMAGE_SGIX: GLenum = 0x835F;
pub static MAX_ASYNC_DRAW_PIXELS_SGIX: GLenum = 0x8360;
pub static MAX_ASYNC_READ_PIXELS_SGIX: GLenum = 0x8361;
pub static UNSIGNED_BYTE_2_3_3_REV: GLenum = 0x8362;
pub static UNSIGNED_BYTE_2_3_3_REV_EXT: GLenum = 0x8362;
pub static UNSIGNED_SHORT_5_6_5: GLenum = 0x8363;
pub static UNSIGNED_SHORT_5_6_5_EXT: GLenum = 0x8363;
pub static UNSIGNED_SHORT_5_6_5_REV: GLenum = 0x8364;
pub static UNSIGNED_SHORT_5_6_5_REV_EXT: GLenum = 0x8364;
pub static UNSIGNED_SHORT_4_4_4_4_REV: GLenum = 0x8365;
pub static UNSIGNED_SHORT_4_4_4_4_REV_EXT: GLenum = 0x8365;
pub static UNSIGNED_SHORT_1_5_5_5_REV: GLenum = 0x8366;
pub static UNSIGNED_SHORT_1_5_5_5_REV_EXT: GLenum = 0x8366;
pub static UNSIGNED_INT_8_8_8_8_REV: GLenum = 0x8367;
pub static UNSIGNED_INT_8_8_8_8_REV_EXT: GLenum = 0x8367;
pub static UNSIGNED_INT_2_10_10_10_REV: GLenum = 0x8368;
pub static UNSIGNED_INT_2_10_10_10_REV_EXT: GLenum = 0x8368;
pub static TEXTURE_MAX_CLAMP_S_SGIX: GLenum = 0x8369;
pub static TEXTURE_MAX_CLAMP_T_SGIX: GLenum = 0x836A;
pub static TEXTURE_MAX_CLAMP_R_SGIX: GLenum = 0x836B;
pub static MIRRORED_REPEAT: GLenum = 0x8370;
pub static MIRRORED_REPEAT_ARB: GLenum = 0x8370;
pub static MIRRORED_REPEAT_IBM: GLenum = 0x8370;
pub static MIRRORED_REPEAT_OES: GLenum = 0x8370;
pub static RGB_S3TC: GLenum = 0x83A0;
pub static RGB4_S3TC: GLenum = 0x83A1;
pub static RGBA_S3TC: GLenum = 0x83A2;
pub static RGBA4_S3TC: GLenum = 0x83A3;
pub static RGBA_DXT5_S3TC: GLenum = 0x83A4;
pub static RGBA4_DXT5_S3TC: GLenum = 0x83A5;
pub static VERTEX_PRECLIP_SGIX: GLenum = 0x83EE;
pub static VERTEX_PRECLIP_HINT_SGIX: GLenum = 0x83EF;
pub static COMPRESSED_RGB_S3TC_DXT1_EXT: GLenum = 0x83F0;
pub static COMPRESSED_RGBA_S3TC_DXT1_EXT: GLenum = 0x83F1;
pub static COMPRESSED_RGBA_S3TC_DXT3_ANGLE: GLenum = 0x83F2;
pub static COMPRESSED_RGBA_S3TC_DXT3_EXT: GLenum = 0x83F2;
pub static COMPRESSED_RGBA_S3TC_DXT5_ANGLE: GLenum = 0x83F3;
pub static COMPRESSED_RGBA_S3TC_DXT5_EXT: GLenum = 0x83F3;
pub static PARALLEL_ARRAYS_INTEL: GLenum = 0x83F4;
pub static VERTEX_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F5;
pub static NORMAL_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F6;
pub static COLOR_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F7;
pub static TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F8;
pub static TEXTURE_MEMORY_LAYOUT_INTEL: GLenum = 0x83FF;
pub static FRAGMENT_LIGHTING_SGIX: GLenum = 0x8400;
pub static FRAGMENT_COLOR_MATERIAL_SGIX: GLenum = 0x8401;
pub static FRAGMENT_COLOR_MATERIAL_FACE_SGIX: GLenum = 0x8402;
pub static FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: GLenum = 0x8403;
pub static MAX_FRAGMENT_LIGHTS_SGIX: GLenum = 0x8404;
pub static MAX_ACTIVE_LIGHTS_SGIX: GLenum = 0x8405;
pub static CURRENT_RASTER_NORMAL_SGIX: GLenum = 0x8406;
pub static LIGHT_ENV_MODE_SGIX: GLenum = 0x8407;
pub static FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: GLenum = 0x8408;
pub static FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: GLenum = 0x8409;
pub static FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: GLenum = 0x840A;
pub static FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: GLenum = 0x840B;
pub static FRAGMENT_LIGHT0_SGIX: GLenum = 0x840C;
pub static FRAGMENT_LIGHT1_SGIX: GLenum = 0x840D;
pub static FRAGMENT_LIGHT2_SGIX: GLenum = 0x840E;
pub static FRAGMENT_LIGHT3_SGIX: GLenum = 0x840F;
pub static FRAGMENT_LIGHT4_SGIX: GLenum = 0x8410;
pub static FRAGMENT_LIGHT5_SGIX: GLenum = 0x8411;
pub static FRAGMENT_LIGHT6_SGIX: GLenum = 0x8412;
pub static FRAGMENT_LIGHT7_SGIX: GLenum = 0x8413;
pub static PACK_RESAMPLE_SGIX: GLenum = 0x842C;
pub static UNPACK_RESAMPLE_SGIX: GLenum = 0x842D;
pub static RESAMPLE_REPLICATE_SGIX: GLenum = 0x842E;
pub static RESAMPLE_ZERO_FILL_SGIX: GLenum = 0x842F;
pub static RESAMPLE_DECIMATE_SGIX: GLenum = 0x8430;
pub static TANGENT_ARRAY_EXT: GLenum = 0x8439;
pub static BINORMAL_ARRAY_EXT: GLenum = 0x843A;
pub static CURRENT_TANGENT_EXT: GLenum = 0x843B;
pub static CURRENT_BINORMAL_EXT: GLenum = 0x843C;
pub static TANGENT_ARRAY_TYPE_EXT: GLenum = 0x843E;
pub static TANGENT_ARRAY_STRIDE_EXT: GLenum = 0x843F;
pub static BINORMAL_ARRAY_TYPE_EXT: GLenum = 0x8440;
pub static BINORMAL_ARRAY_STRIDE_EXT: GLenum = 0x8441;
pub static TANGENT_ARRAY_POINTER_EXT: GLenum = 0x8442;
pub static BINORMAL_ARRAY_POINTER_EXT: GLenum = 0x8443;
pub static MAP1_TANGENT_EXT: GLenum = 0x8444;
pub static MAP2_TANGENT_EXT: GLenum = 0x8445;
pub static MAP1_BINORMAL_EXT: GLenum = 0x8446;
pub static MAP2_BINORMAL_EXT: GLenum = 0x8447;
pub static NEAREST_CLIPMAP_NEAREST_SGIX: GLenum = 0x844D;
pub static NEAREST_CLIPMAP_LINEAR_SGIX: GLenum = 0x844E;
pub static LINEAR_CLIPMAP_NEAREST_SGIX: GLenum = 0x844F;
pub static FOG_COORDINATE_SOURCE: GLenum = 0x8450;
pub static FOG_COORDINATE_SOURCE_EXT: GLenum = 0x8450;
pub static FOG_COORD_SRC: GLenum = 0x8450;
pub static FOG_COORDINATE: GLenum = 0x8451;
pub static FOG_COORD: GLenum = 0x8451;
pub static FOG_COORDINATE_EXT: GLenum = 0x8451;
pub static FRAGMENT_DEPTH: GLenum = 0x8452;
pub static FRAGMENT_DEPTH_EXT: GLenum = 0x8452;
pub static CURRENT_FOG_COORDINATE: GLenum = 0x8453;
pub static CURRENT_FOG_COORD: GLenum = 0x8453;
pub static CURRENT_FOG_COORDINATE_EXT: GLenum = 0x8453;
pub static FOG_COORDINATE_ARRAY_TYPE: GLenum = 0x8454;
pub static FOG_COORDINATE_ARRAY_TYPE_EXT: GLenum = 0x8454;
pub static FOG_COORD_ARRAY_TYPE: GLenum = 0x8454;
pub static FOG_COORDINATE_ARRAY_STRIDE: GLenum = 0x8455;
pub static FOG_COORDINATE_ARRAY_STRIDE_EXT: GLenum = 0x8455;
pub static FOG_COORD_ARRAY_STRIDE: GLenum = 0x8455;
pub static FOG_COORDINATE_ARRAY_POINTER: GLenum = 0x8456;
pub static FOG_COORDINATE_ARRAY_POINTER_EXT: GLenum = 0x8456;
pub static FOG_COORD_ARRAY_POINTER: GLenum = 0x8456;
pub static FOG_COORDINATE_ARRAY: GLenum = 0x8457;
pub static FOG_COORDINATE_ARRAY_EXT: GLenum = 0x8457;
pub static FOG_COORD_ARRAY: GLenum = 0x8457;
pub static COLOR_SUM: GLenum = 0x8458;
pub static COLOR_SUM_ARB: GLenum = 0x8458;
pub static COLOR_SUM_EXT: GLenum = 0x8458;
pub static CURRENT_SECONDARY_COLOR: GLenum = 0x8459;
pub static CURRENT_SECONDARY_COLOR_EXT: GLenum = 0x8459;
pub static SECONDARY_COLOR_ARRAY_SIZE: GLenum = 0x845A;
pub static SECONDARY_COLOR_ARRAY_SIZE_EXT: GLenum = 0x845A;
pub static SECONDARY_COLOR_ARRAY_TYPE: GLenum = 0x845B;
pub static SECONDARY_COLOR_ARRAY_TYPE_EXT: GLenum = 0x845B;
pub static SECONDARY_COLOR_ARRAY_STRIDE: GLenum = 0x845C;
pub static SECONDARY_COLOR_ARRAY_STRIDE_EXT: GLenum = 0x845C;
pub static SECONDARY_COLOR_ARRAY_POINTER: GLenum = 0x845D;
pub static SECONDARY_COLOR_ARRAY_POINTER_EXT: GLenum = 0x845D;
pub static SECONDARY_COLOR_ARRAY: GLenum = 0x845E;
pub static SECONDARY_COLOR_ARRAY_EXT: GLenum = 0x845E;
pub static CURRENT_RASTER_SECONDARY_COLOR: GLenum = 0x845F;
pub static ALIASED_POINT_SIZE_RANGE: GLenum = 0x846D;
pub static ALIASED_LINE_WIDTH_RANGE: GLenum = 0x846E;
pub static SCREEN_COORDINATES_REND: GLenum = 0x8490;
pub static INVERTED_SCREEN_W_REND: GLenum = 0x8491;
pub static TEXTURE0: GLenum = 0x84C0;
pub static TEXTURE0_ARB: GLenum = 0x84C0;
pub static TEXTURE1: GLenum = 0x84C1;
pub static TEXTURE1_ARB: GLenum = 0x84C1;
pub static TEXTURE2: GLenum = 0x84C2;
pub static TEXTURE2_ARB: GLenum = 0x84C2;
pub static TEXTURE3: GLenum = 0x84C3;
pub static TEXTURE3_ARB: GLenum = 0x84C3;
pub static TEXTURE4: GLenum = 0x84C4;
pub static TEXTURE4_ARB: GLenum = 0x84C4;
pub static TEXTURE5: GLenum = 0x84C5;
pub static TEXTURE5_ARB: GLenum = 0x84C5;
pub static TEXTURE6: GLenum = 0x84C6;
pub static TEXTURE6_ARB: GLenum = 0x84C6;
pub static TEXTURE7: GLenum = 0x84C7;
pub static TEXTURE7_ARB: GLenum = 0x84C7;
pub static TEXTURE8: GLenum = 0x84C8;
pub static TEXTURE8_ARB: GLenum = 0x84C8;
pub static TEXTURE9: GLenum = 0x84C9;
pub static TEXTURE9_ARB: GLenum = 0x84C9;
pub static TEXTURE10: GLenum = 0x84CA;
pub static TEXTURE10_ARB: GLenum = 0x84CA;
pub static TEXTURE11: GLenum = 0x84CB;
pub static TEXTURE11_ARB: GLenum = 0x84CB;
pub static TEXTURE12: GLenum = 0x84CC;
pub static TEXTURE12_ARB: GLenum = 0x84CC;
pub static TEXTURE13: GLenum = 0x84CD;
pub static TEXTURE13_ARB: GLenum = 0x84CD;
pub static TEXTURE14: GLenum = 0x84CE;
pub static TEXTURE14_ARB: GLenum = 0x84CE;
pub static TEXTURE15: GLenum = 0x84CF;
pub static TEXTURE15_ARB: GLenum = 0x84CF;
pub static TEXTURE16: GLenum = 0x84D0;
pub static TEXTURE16_ARB: GLenum = 0x84D0;
pub static TEXTURE17: GLenum = 0x84D1;
pub static TEXTURE17_ARB: GLenum = 0x84D1;
pub static TEXTURE18: GLenum = 0x84D2;
pub static TEXTURE18_ARB: GLenum = 0x84D2;
pub static TEXTURE19: GLenum = 0x84D3;
pub static TEXTURE19_ARB: GLenum = 0x84D3;
pub static TEXTURE20: GLenum = 0x84D4;
pub static TEXTURE20_ARB: GLenum = 0x84D4;
pub static TEXTURE21: GLenum = 0x84D5;
pub static TEXTURE21_ARB: GLenum = 0x84D5;
pub static TEXTURE22: GLenum = 0x84D6;
pub static TEXTURE22_ARB: GLenum = 0x84D6;
pub static TEXTURE23: GLenum = 0x84D7;
pub static TEXTURE23_ARB: GLenum = 0x84D7;
pub static TEXTURE24: GLenum = 0x84D8;
pub static TEXTURE24_ARB: GLenum = 0x84D8;
pub static TEXTURE25: GLenum = 0x84D9;
pub static TEXTURE25_ARB: GLenum = 0x84D9;
pub static TEXTURE26: GLenum = 0x84DA;
pub static TEXTURE26_ARB: GLenum = 0x84DA;
pub static TEXTURE27: GLenum = 0x84DB;
pub static TEXTURE27_ARB: GLenum = 0x84DB;
pub static TEXTURE28: GLenum = 0x84DC;
pub static TEXTURE28_ARB: GLenum = 0x84DC;
pub static TEXTURE29: GLenum = 0x84DD;
pub static TEXTURE29_ARB: GLenum = 0x84DD;
pub static TEXTURE30: GLenum = 0x84DE;
pub static TEXTURE30_ARB: GLenum = 0x84DE;
pub static TEXTURE31: GLenum = 0x84DF;
pub static TEXTURE31_ARB: GLenum = 0x84DF;
pub static ACTIVE_TEXTURE: GLenum = 0x84E0;
pub static ACTIVE_TEXTURE_ARB: GLenum = 0x84E0;
pub static CLIENT_ACTIVE_TEXTURE: GLenum = 0x84E1;
pub static CLIENT_ACTIVE_TEXTURE_ARB: GLenum = 0x84E1;
pub static MAX_TEXTURE_UNITS: GLenum = 0x84E2;
pub static MAX_TEXTURE_UNITS_ARB: GLenum = 0x84E2;
pub static TRANSPOSE_MODELVIEW_MATRIX: GLenum = 0x84E3;
pub static TRANSPOSE_MODELVIEW_MATRIX_ARB: GLenum = 0x84E3;
pub static TRANSPOSE_PROJECTION_MATRIX: GLenum = 0x84E4;
pub static TRANSPOSE_PROJECTION_MATRIX_ARB: GLenum = 0x84E4;
pub static TRANSPOSE_TEXTURE_MATRIX: GLenum = 0x84E5;
pub static TRANSPOSE_TEXTURE_MATRIX_ARB: GLenum = 0x84E5;
pub static TRANSPOSE_COLOR_MATRIX: GLenum = 0x84E6;
pub static TRANSPOSE_COLOR_MATRIX_ARB: GLenum = 0x84E6;
pub static SUBTRACT: GLenum = 0x84E7;
pub static SUBTRACT_ARB: GLenum = 0x84E7;
pub static MAX_RENDERBUFFER_SIZE: GLenum = 0x84E8;
pub static MAX_RENDERBUFFER_SIZE_EXT: GLenum = 0x84E8;
pub static MAX_RENDERBUFFER_SIZE_OES: GLenum = 0x84E8;
pub static COMPRESSED_ALPHA: GLenum = 0x84E9;
pub static COMPRESSED_ALPHA_ARB: GLenum = 0x84E9;
pub static COMPRESSED_LUMINANCE: GLenum = 0x84EA;
pub static COMPRESSED_LUMINANCE_ARB: GLenum = 0x84EA;
pub static COMPRESSED_LUMINANCE_ALPHA: GLenum = 0x84EB;
pub static COMPRESSED_LUMINANCE_ALPHA_ARB: GLenum = 0x84EB;
pub static COMPRESSED_INTENSITY: GLenum = 0x84EC;
pub static COMPRESSED_INTENSITY_ARB: GLenum = 0x84EC;
pub static COMPRESSED_RGB: GLenum = 0x84ED;
pub static COMPRESSED_RGB_ARB: GLenum = 0x84ED;
pub static COMPRESSED_RGBA: GLenum = 0x84EE;
pub static COMPRESSED_RGBA_ARB: GLenum = 0x84EE;
pub static TEXTURE_COMPRESSION_HINT: GLenum = 0x84EF;
pub static TEXTURE_COMPRESSION_HINT_ARB: GLenum = 0x84EF;
pub static UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x84F0;
pub static UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x84F1;
pub static ALL_COMPLETED_NV: GLenum = 0x84F2;
pub static FENCE_STATUS_NV: GLenum = 0x84F3;
pub static FENCE_CONDITION_NV: GLenum = 0x84F4;
pub static TEXTURE_RECTANGLE: GLenum = 0x84F5;
pub static TEXTURE_RECTANGLE_ARB: GLenum = 0x84F5;
pub static TEXTURE_RECTANGLE_NV: GLenum = 0x84F5;
pub static TEXTURE_BINDING_RECTANGLE: GLenum = 0x84F6;
pub static TEXTURE_BINDING_RECTANGLE_ARB: GLenum = 0x84F6;
pub static TEXTURE_BINDING_RECTANGLE_NV: GLenum = 0x84F6;
pub static PROXY_TEXTURE_RECTANGLE: GLenum = 0x84F7;
pub static PROXY_TEXTURE_RECTANGLE_ARB: GLenum = 0x84F7;
pub static PROXY_TEXTURE_RECTANGLE_NV: GLenum = 0x84F7;
pub static MAX_RECTANGLE_TEXTURE_SIZE: GLenum = 0x84F8;
pub static MAX_RECTANGLE_TEXTURE_SIZE_ARB: GLenum = 0x84F8;
pub static MAX_RECTANGLE_TEXTURE_SIZE_NV: GLenum = 0x84F8;
pub static DEPTH_STENCIL: GLenum = 0x84F9;
pub static DEPTH_STENCIL_EXT: GLenum = 0x84F9;
pub static DEPTH_STENCIL_NV: GLenum = 0x84F9;
pub static DEPTH_STENCIL_OES: GLenum = 0x84F9;
pub static UNSIGNED_INT_24_8: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_EXT: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_NV: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_OES: GLenum = 0x84FA;
pub static MAX_TEXTURE_LOD_BIAS: GLenum = 0x84FD;
pub static MAX_TEXTURE_LOD_BIAS_EXT: GLenum = 0x84FD;
pub static TEXTURE_MAX_ANISOTROPY_EXT: GLenum = 0x84FE;
pub static MAX_TEXTURE_MAX_ANISOTROPY_EXT: GLenum = 0x84FF;
pub static TEXTURE_FILTER_CONTROL: GLenum = 0x8500;
pub static TEXTURE_FILTER_CONTROL_EXT: GLenum = 0x8500;
pub static TEXTURE_LOD_BIAS: GLenum = 0x8501;
pub static TEXTURE_LOD_BIAS_EXT: GLenum = 0x8501;
pub static MODELVIEW1_STACK_DEPTH_EXT: GLenum = 0x8502;
pub static COMBINE4_NV: GLenum = 0x8503;
pub static MAX_SHININESS_NV: GLenum = 0x8504;
pub static MAX_SPOT_EXPONENT_NV: GLenum = 0x8505;
pub static MODELVIEW1_MATRIX_EXT: GLenum = 0x8506;
pub static INCR_WRAP: GLenum = 0x8507;
pub static INCR_WRAP_EXT: GLenum = 0x8507;
pub static INCR_WRAP_OES: GLenum = 0x8507;
pub static DECR_WRAP: GLenum = 0x8508;
pub static DECR_WRAP_EXT: GLenum = 0x8508;
pub static DECR_WRAP_OES: GLenum = 0x8508;
pub static VERTEX_WEIGHTING_EXT: GLenum = 0x8509;
pub static MODELVIEW1_ARB: GLenum = 0x850A;
pub static MODELVIEW1_EXT: GLenum = 0x850A;
pub static CURRENT_VERTEX_WEIGHT_EXT: GLenum = 0x850B;
pub static VERTEX_WEIGHT_ARRAY_EXT: GLenum = 0x850C;
pub static VERTEX_WEIGHT_ARRAY_SIZE_EXT: GLenum = 0x850D;
pub static VERTEX_WEIGHT_ARRAY_TYPE_EXT: GLenum = 0x850E;
pub static VERTEX_WEIGHT_ARRAY_STRIDE_EXT: GLenum = 0x850F;
pub static VERTEX_WEIGHT_ARRAY_POINTER_EXT: GLenum = 0x8510;
pub static NORMAL_MAP: GLenum = 0x8511;
pub static NORMAL_MAP_ARB: GLenum = 0x8511;
pub static NORMAL_MAP_EXT: GLenum = 0x8511;
pub static NORMAL_MAP_NV: GLenum = 0x8511;
pub static NORMAL_MAP_OES: GLenum = 0x8511;
pub static REFLECTION_MAP: GLenum = 0x8512;
pub static REFLECTION_MAP_ARB: GLenum = 0x8512;
pub static REFLECTION_MAP_EXT: GLenum = 0x8512;
pub static REFLECTION_MAP_NV: GLenum = 0x8512;
pub static REFLECTION_MAP_OES: GLenum = 0x8512;
pub static TEXTURE_CUBE_MAP: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_ARB: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_EXT: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_OES: GLenum = 0x8513;
pub static TEXTURE_BINDING_CUBE_MAP: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_ARB: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_EXT: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_OES: GLenum = 0x8514;
pub static TEXTURE_CUBE_MAP_POSITIVE_X: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_ARB: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_EXT: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_OES: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_EXT: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_OES: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_EXT: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_OES: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_OES: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_EXT: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_OES: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_OES: GLenum = 0x851A;
pub static PROXY_TEXTURE_CUBE_MAP: GLenum = 0x851B;
pub static PROXY_TEXTURE_CUBE_MAP_ARB: GLenum = 0x851B;
pub static PROXY_TEXTURE_CUBE_MAP_EXT: GLenum = 0x851B;
pub static MAX_CUBE_MAP_TEXTURE_SIZE: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_ARB: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_EXT: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_OES: GLenum = 0x851C;
pub static VERTEX_ARRAY_RANGE_APPLE: GLenum = 0x851D;
pub static VERTEX_ARRAY_RANGE_NV: GLenum = 0x851D;
pub static VERTEX_ARRAY_RANGE_LENGTH_APPLE: GLenum = 0x851E;
pub static VERTEX_ARRAY_RANGE_LENGTH_NV: GLenum = 0x851E;
pub static VERTEX_ARRAY_RANGE_VALID_NV: GLenum = 0x851F;
pub static VERTEX_ARRAY_STORAGE_HINT_APPLE: GLenum = 0x851F;
pub static MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: GLenum = 0x8520;
pub static VERTEX_ARRAY_RANGE_POINTER_APPLE: GLenum = 0x8521;
pub static VERTEX_ARRAY_RANGE_POINTER_NV: GLenum = 0x8521;
pub static REGISTER_COMBINERS_NV: GLenum = 0x8522;
pub static VARIABLE_A_NV: GLenum = 0x8523;
pub static VARIABLE_B_NV: GLenum = 0x8524;
pub static VARIABLE_C_NV: GLenum = 0x8525;
pub static VARIABLE_D_NV: GLenum = 0x8526;
pub static VARIABLE_E_NV: GLenum = 0x8527;
pub static VARIABLE_F_NV: GLenum = 0x8528;
pub static VARIABLE_G_NV: GLenum = 0x8529;
pub static CONSTANT_COLOR0_NV: GLenum = 0x852A;
pub static CONSTANT_COLOR1_NV: GLenum = 0x852B;
pub static PRIMARY_COLOR_NV: GLenum = 0x852C;
pub static SECONDARY_COLOR_NV: GLenum = 0x852D;
pub static SPARE0_NV: GLenum = 0x852E;
pub static SPARE1_NV: GLenum = 0x852F;
pub static DISCARD_NV: GLenum = 0x8530;
pub static E_TIMES_F_NV: GLenum = 0x8531;
pub static SPARE0_PLUS_SECONDARY_COLOR_NV: GLenum = 0x8532;
pub static VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: GLenum = 0x8533;
pub static MULTISAMPLE_FILTER_HINT_NV: GLenum = 0x8534;
pub static PER_STAGE_CONSTANTS_NV: GLenum = 0x8535;
pub static UNSIGNED_IDENTITY_NV: GLenum = 0x8536;
pub static UNSIGNED_INVERT_NV: GLenum = 0x8537;
pub static EXPAND_NORMAL_NV: GLenum = 0x8538;
pub static EXPAND_NEGATE_NV: GLenum = 0x8539;
pub static HALF_BIAS_NORMAL_NV: GLenum = 0x853A;
pub static HALF_BIAS_NEGATE_NV: GLenum = 0x853B;
pub static SIGNED_IDENTITY_NV: GLenum = 0x853C;
pub static SIGNED_NEGATE_NV: GLenum = 0x853D;
pub static SCALE_BY_TWO_NV: GLenum = 0x853E;
pub static SCALE_BY_FOUR_NV: GLenum = 0x853F;
pub static SCALE_BY_ONE_HALF_NV: GLenum = 0x8540;
pub static BIAS_BY_NEGATIVE_ONE_HALF_NV: GLenum = 0x8541;
pub static COMBINER_INPUT_NV: GLenum = 0x8542;
pub static COMBINER_MAPPING_NV: GLenum = 0x8543;
pub static COMBINER_COMPONENT_USAGE_NV: GLenum = 0x8544;
pub static COMBINER_AB_DOT_PRODUCT_NV: GLenum = 0x8545;
pub static COMBINER_CD_DOT_PRODUCT_NV: GLenum = 0x8546;
pub static COMBINER_MUX_SUM_NV: GLenum = 0x8547;
pub static COMBINER_SCALE_NV: GLenum = 0x8548;
pub static COMBINER_BIAS_NV: GLenum = 0x8549;
pub static COMBINER_AB_OUTPUT_NV: GLenum = 0x854A;
pub static COMBINER_CD_OUTPUT_NV: GLenum = 0x854B;
pub static COMBINER_SUM_OUTPUT_NV: GLenum = 0x854C;
pub static MAX_GENERAL_COMBINERS_NV: GLenum = 0x854D;
pub static NUM_GENERAL_COMBINERS_NV: GLenum = 0x854E;
pub static COLOR_SUM_CLAMP_NV: GLenum = 0x854F;
pub static COMBINER0_NV: GLenum = 0x8550;
pub static COMBINER1_NV: GLenum = 0x8551;
pub static COMBINER2_NV: GLenum = 0x8552;
pub static COMBINER3_NV: GLenum = 0x8553;
pub static COMBINER4_NV: GLenum = 0x8554;
pub static COMBINER5_NV: GLenum = 0x8555;
pub static COMBINER6_NV: GLenum = 0x8556;
pub static COMBINER7_NV: GLenum = 0x8557;
pub static PRIMITIVE_RESTART_NV: GLenum = 0x8558;
pub static PRIMITIVE_RESTART_INDEX_NV: GLenum = 0x8559;
pub static FOG_DISTANCE_MODE_NV: GLenum = 0x855A;
pub static EYE_RADIAL_NV: GLenum = 0x855B;
pub static EYE_PLANE_ABSOLUTE_NV: GLenum = 0x855C;
pub static EMBOSS_LIGHT_NV: GLenum = 0x855D;
pub static EMBOSS_CONSTANT_NV: GLenum = 0x855E;
pub static EMBOSS_MAP_NV: GLenum = 0x855F;
pub static RED_MIN_CLAMP_INGR: GLenum = 0x8560;
pub static GREEN_MIN_CLAMP_INGR: GLenum = 0x8561;
pub static BLUE_MIN_CLAMP_INGR: GLenum = 0x8562;
pub static ALPHA_MIN_CLAMP_INGR: GLenum = 0x8563;
pub static RED_MAX_CLAMP_INGR: GLenum = 0x8564;
pub static GREEN_MAX_CLAMP_INGR: GLenum = 0x8565;
pub static BLUE_MAX_CLAMP_INGR: GLenum = 0x8566;
pub static ALPHA_MAX_CLAMP_INGR: GLenum = 0x8567;
pub static INTERLACE_READ_INGR: GLenum = 0x8568;
pub static COMBINE: GLenum = 0x8570;
pub static COMBINE_ARB: GLenum = 0x8570;
pub static COMBINE_EXT: GLenum = 0x8570;
pub static COMBINE_RGB: GLenum = 0x8571;
pub static COMBINE_RGB_ARB: GLenum = 0x8571;
pub static COMBINE_RGB_EXT: GLenum = 0x8571;
pub static COMBINE_ALPHA: GLenum = 0x8572;
pub static COMBINE_ALPHA_ARB: GLenum = 0x8572;
pub static COMBINE_ALPHA_EXT: GLenum = 0x8572;
pub static RGB_SCALE: GLenum = 0x8573;
pub static RGB_SCALE_ARB: GLenum = 0x8573;
pub static RGB_SCALE_EXT: GLenum = 0x8573;
pub static ADD_SIGNED: GLenum = 0x8574;
pub static ADD_SIGNED_ARB: GLenum = 0x8574;
pub static ADD_SIGNED_EXT: GLenum = 0x8574;
pub static INTERPOLATE: GLenum = 0x8575;
pub static INTERPOLATE_ARB: GLenum = 0x8575;
pub static INTERPOLATE_EXT: GLenum = 0x8575;
pub static CONSTANT: GLenum = 0x8576;
pub static CONSTANT_ARB: GLenum = 0x8576;
pub static CONSTANT_EXT: GLenum = 0x8576;
pub static PRIMARY_COLOR: GLenum = 0x8577;
pub static PRIMARY_COLOR_ARB: GLenum = 0x8577;
pub static PRIMARY_COLOR_EXT: GLenum = 0x8577;
pub static PREVIOUS: GLenum = 0x8578;
pub static PREVIOUS_ARB: GLenum = 0x8578;
pub static PREVIOUS_EXT: GLenum = 0x8578;
pub static SOURCE0_RGB: GLenum = 0x8580;
pub static SOURCE0_RGB_ARB: GLenum = 0x8580;
pub static SOURCE0_RGB_EXT: GLenum = 0x8580;
pub static SRC0_RGB: GLenum = 0x8580;
pub static SOURCE1_RGB: GLenum = 0x8581;
pub static SOURCE1_RGB_ARB: GLenum = 0x8581;
pub static SOURCE1_RGB_EXT: GLenum = 0x8581;
pub static SRC1_RGB: GLenum = 0x8581;
pub static SOURCE2_RGB: GLenum = 0x8582;
pub static SOURCE2_RGB_ARB: GLenum = 0x8582;
pub static SOURCE2_RGB_EXT: GLenum = 0x8582;
pub static SRC2_RGB: GLenum = 0x8582;
pub static SOURCE3_RGB_NV: GLenum = 0x8583;
pub static SOURCE0_ALPHA: GLenum = 0x8588;
pub static SOURCE0_ALPHA_ARB: GLenum = 0x8588;
pub static SOURCE0_ALPHA_EXT: GLenum = 0x8588;
pub static SRC0_ALPHA: GLenum = 0x8588;
pub static SOURCE1_ALPHA: GLenum = 0x8589;
pub static SOURCE1_ALPHA_ARB: GLenum = 0x8589;
pub static SOURCE1_ALPHA_EXT: GLenum = 0x8589;
pub static SRC1_ALPHA: GLenum = 0x8589;
pub static SOURCE2_ALPHA: GLenum = 0x858A;
pub static SOURCE2_ALPHA_ARB: GLenum = 0x858A;
pub static SOURCE2_ALPHA_EXT: GLenum = 0x858A;
pub static SRC2_ALPHA: GLenum = 0x858A;
pub static SOURCE3_ALPHA_NV: GLenum = 0x858B;
pub static OPERAND0_RGB: GLenum = 0x8590;
pub static OPERAND0_RGB_ARB: GLenum = 0x8590;
pub static OPERAND0_RGB_EXT: GLenum = 0x8590;
pub static OPERAND1_RGB: GLenum = 0x8591;
pub static OPERAND1_RGB_ARB: GLenum = 0x8591;
pub static OPERAND1_RGB_EXT: GLenum = 0x8591;
pub static OPERAND2_RGB: GLenum = 0x8592;
pub static OPERAND2_RGB_ARB: GLenum = 0x8592;
pub static OPERAND2_RGB_EXT: GLenum = 0x8592;
pub static OPERAND3_RGB_NV: GLenum = 0x8593;
pub static OPERAND0_ALPHA: GLenum = 0x8598;
pub static OPERAND0_ALPHA_ARB: GLenum = 0x8598;
pub static OPERAND0_ALPHA_EXT: GLenum = 0x8598;
pub static OPERAND1_ALPHA: GLenum = 0x8599;
pub static OPERAND1_ALPHA_ARB: GLenum = 0x8599;
pub static OPERAND1_ALPHA_EXT: GLenum = 0x8599;
pub static OPERAND2_ALPHA: GLenum = 0x859A;
pub static OPERAND2_ALPHA_ARB: GLenum = 0x859A;
pub static OPERAND2_ALPHA_EXT: GLenum = 0x859A;
pub static OPERAND3_ALPHA_NV: GLenum = 0x859B;
pub static PACK_SUBSAMPLE_RATE_SGIX: GLenum = 0x85A0;
pub static UNPACK_SUBSAMPLE_RATE_SGIX: GLenum = 0x85A1;
pub static PIXEL_SUBSAMPLE_4444_SGIX: GLenum = 0x85A2;
pub static PIXEL_SUBSAMPLE_2424_SGIX: GLenum = 0x85A3;
pub static PIXEL_SUBSAMPLE_4242_SGIX: GLenum = 0x85A4;
pub static PERTURB_EXT: GLenum = 0x85AE;
pub static TEXTURE_NORMAL_EXT: GLenum = 0x85AF;
pub static LIGHT_MODEL_SPECULAR_VECTOR_APPLE: GLenum = 0x85B0;
pub static TRANSFORM_HINT_APPLE: GLenum = 0x85B1;
pub static UNPACK_CLIENT_STORAGE_APPLE: GLenum = 0x85B2;
pub static BUFFER_OBJECT_APPLE: GLenum = 0x85B3;
pub static STORAGE_CLIENT_APPLE: GLenum = 0x85B4;
pub static VERTEX_ARRAY_BINDING: GLenum = 0x85B5;
pub static VERTEX_ARRAY_BINDING_APPLE: GLenum = 0x85B5;
pub static TEXTURE_RANGE_LENGTH_APPLE: GLenum = 0x85B7;
pub static TEXTURE_RANGE_POINTER_APPLE: GLenum = 0x85B8;
pub static YCBCR_422_APPLE: GLenum = 0x85B9;
pub static UNSIGNED_SHORT_8_8_APPLE: GLenum = 0x85BA;
pub static UNSIGNED_SHORT_8_8_MESA: GLenum = 0x85BA;
pub static UNSIGNED_SHORT_8_8_REV_APPLE: GLenum = 0x85BB;
pub static UNSIGNED_SHORT_8_8_REV_MESA: GLenum = 0x85BB;
pub static TEXTURE_STORAGE_HINT_APPLE: GLenum = 0x85BC;
pub static STORAGE_PRIVATE_APPLE: GLenum = 0x85BD;
pub static STORAGE_CACHED_APPLE: GLenum = 0x85BE;
pub static STORAGE_SHARED_APPLE: GLenum = 0x85BF;
pub static REPLACEMENT_CODE_ARRAY_SUN: GLenum = 0x85C0;
pub static REPLACEMENT_CODE_ARRAY_TYPE_SUN: GLenum = 0x85C1;
pub static REPLACEMENT_CODE_ARRAY_STRIDE_SUN: GLenum = 0x85C2;
pub static REPLACEMENT_CODE_ARRAY_POINTER_SUN: GLenum = 0x85C3;
pub static R1UI_V3F_SUN: GLenum = 0x85C4;
pub static R1UI_C4UB_V3F_SUN: GLenum = 0x85C5;
pub static R1UI_C3F_V3F_SUN: GLenum = 0x85C6;
pub static R1UI_N3F_V3F_SUN: GLenum = 0x85C7;
pub static R1UI_C4F_N3F_V3F_SUN: GLenum = 0x85C8;
pub static R1UI_T2F_V3F_SUN: GLenum = 0x85C9;
pub static R1UI_T2F_N3F_V3F_SUN: GLenum = 0x85CA;
pub static R1UI_T2F_C4F_N3F_V3F_SUN: GLenum = 0x85CB;
pub static SLICE_ACCUM_SUN: GLenum = 0x85CC;
pub static QUAD_MESH_SUN: GLenum = 0x8614;
pub static TRIANGLE_MESH_SUN: GLenum = 0x8615;
pub static VERTEX_PROGRAM_ARB: GLenum = 0x8620;
pub static VERTEX_PROGRAM_NV: GLenum = 0x8620;
pub static VERTEX_STATE_PROGRAM_NV: GLenum = 0x8621;
pub static VERTEX_ATTRIB_ARRAY_ENABLED: GLenum = 0x8622;
pub static VERTEX_ATTRIB_ARRAY_ENABLED_ARB: GLenum = 0x8622;
pub static ATTRIB_ARRAY_SIZE_NV: GLenum = 0x8623;
pub static VERTEX_ATTRIB_ARRAY_SIZE: GLenum = 0x8623;
pub static VERTEX_ATTRIB_ARRAY_SIZE_ARB: GLenum = 0x8623;
pub static ATTRIB_ARRAY_STRIDE_NV: GLenum = 0x8624;
pub static VERTEX_ATTRIB_ARRAY_STRIDE: GLenum = 0x8624;
pub static VERTEX_ATTRIB_ARRAY_STRIDE_ARB: GLenum = 0x8624;
pub static ATTRIB_ARRAY_TYPE_NV: GLenum = 0x8625;
pub static VERTEX_ATTRIB_ARRAY_TYPE: GLenum = 0x8625;
pub static VERTEX_ATTRIB_ARRAY_TYPE_ARB: GLenum = 0x8625;
pub static CURRENT_ATTRIB_NV: GLenum = 0x8626;
pub static CURRENT_VERTEX_ATTRIB: GLenum = 0x8626;
pub static CURRENT_VERTEX_ATTRIB_ARB: GLenum = 0x8626;
pub static PROGRAM_LENGTH_ARB: GLenum = 0x8627;
pub static PROGRAM_LENGTH_NV: GLenum = 0x8627;
pub static PROGRAM_STRING_ARB: GLenum = 0x8628;
pub static PROGRAM_STRING_NV: GLenum = 0x8628;
pub static MODELVIEW_PROJECTION_NV: GLenum = 0x8629;
pub static IDENTITY_NV: GLenum = 0x862A;
pub static INVERSE_NV: GLenum = 0x862B;
pub static TRANSPOSE_NV: GLenum = 0x862C;
pub static INVERSE_TRANSPOSE_NV: GLenum = 0x862D;
pub static MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: GLenum = 0x862E;
pub static MAX_TRACK_MATRIX_STACK_DEPTH_NV: GLenum = 0x862E;
pub static MAX_PROGRAM_MATRICES_ARB: GLenum = 0x862F;
pub static MAX_TRACK_MATRICES_NV: GLenum = 0x862F;
pub static MATRIX0_NV: GLenum = 0x8630;
pub static MATRIX1_NV: GLenum = 0x8631;
pub static MATRIX2_NV: GLenum = 0x8632;
pub static MATRIX3_NV: GLenum = 0x8633;
pub static MATRIX4_NV: GLenum = 0x8634;
pub static MATRIX5_NV: GLenum = 0x8635;
pub static MATRIX6_NV: GLenum = 0x8636;
pub static MATRIX7_NV: GLenum = 0x8637;
pub static CURRENT_MATRIX_STACK_DEPTH_ARB: GLenum = 0x8640;
pub static CURRENT_MATRIX_STACK_DEPTH_NV: GLenum = 0x8640;
pub static CURRENT_MATRIX_ARB: GLenum = 0x8641;
pub static CURRENT_MATRIX_NV: GLenum = 0x8641;
pub static VERTEX_PROGRAM_POINT_SIZE: GLenum = 0x8642;
pub static VERTEX_PROGRAM_POINT_SIZE_ARB: GLenum = 0x8642;
pub static VERTEX_PROGRAM_POINT_SIZE_NV: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE_ARB: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE_EXT: GLenum = 0x8642;
pub static VERTEX_PROGRAM_TWO_SIDE: GLenum = 0x8643;
pub static VERTEX_PROGRAM_TWO_SIDE_ARB: GLenum = 0x8643;
pub static VERTEX_PROGRAM_TWO_SIDE_NV: GLenum = 0x8643;
pub static PROGRAM_PARAMETER_NV: GLenum = 0x8644;
pub static ATTRIB_ARRAY_POINTER_NV: GLenum = 0x8645;
pub static VERTEX_ATTRIB_ARRAY_POINTER: GLenum = 0x8645;
pub static VERTEX_ATTRIB_ARRAY_POINTER_ARB: GLenum = 0x8645;
pub static PROGRAM_TARGET_NV: GLenum = 0x8646;
pub static PROGRAM_RESIDENT_NV: GLenum = 0x8647;
pub static TRACK_MATRIX_NV: GLenum = 0x8648;
pub static TRACK_MATRIX_TRANSFORM_NV: GLenum = 0x8649;
pub static VERTEX_PROGRAM_BINDING_NV: GLenum = 0x864A;
pub static PROGRAM_ERROR_POSITION_ARB: GLenum = 0x864B;
pub static PROGRAM_ERROR_POSITION_NV: GLenum = 0x864B;
pub static OFFSET_TEXTURE_RECTANGLE_NV: GLenum = 0x864C;
pub static OFFSET_TEXTURE_RECTANGLE_SCALE_NV: GLenum = 0x864D;
pub static DOT_PRODUCT_TEXTURE_RECTANGLE_NV: GLenum = 0x864E;
pub static DEPTH_CLAMP: GLenum = 0x864F;
pub static DEPTH_CLAMP_NV: GLenum = 0x864F;
pub static VERTEX_ATTRIB_ARRAY0_NV: GLenum = 0x8650;
pub static VERTEX_ATTRIB_ARRAY1_NV: GLenum = 0x8651;
pub static VERTEX_ATTRIB_ARRAY2_NV: GLenum = 0x8652;
pub static VERTEX_ATTRIB_ARRAY3_NV: GLenum = 0x8653;
pub static VERTEX_ATTRIB_ARRAY4_NV: GLenum = 0x8654;
pub static VERTEX_ATTRIB_ARRAY5_NV: GLenum = 0x8655;
pub static VERTEX_ATTRIB_ARRAY6_NV: GLenum = 0x8656;
pub static VERTEX_ATTRIB_ARRAY7_NV: GLenum = 0x8657;
pub static VERTEX_ATTRIB_ARRAY8_NV: GLenum = 0x8658;
pub static VERTEX_ATTRIB_ARRAY9_NV: GLenum = 0x8659;
pub static VERTEX_ATTRIB_ARRAY10_NV: GLenum = 0x865A;
pub static VERTEX_ATTRIB_ARRAY11_NV: GLenum = 0x865B;
pub static VERTEX_ATTRIB_ARRAY12_NV: GLenum = 0x865C;
pub static VERTEX_ATTRIB_ARRAY13_NV: GLenum = 0x865D;
pub static VERTEX_ATTRIB_ARRAY14_NV: GLenum = 0x865E;
pub static VERTEX_ATTRIB_ARRAY15_NV: GLenum = 0x865F;
pub static MAP1_VERTEX_ATTRIB0_4_NV: GLenum = 0x8660;
pub static MAP1_VERTEX_ATTRIB1_4_NV: GLenum = 0x8661;
pub static MAP1_VERTEX_ATTRIB2_4_NV: GLenum = 0x8662;
pub static MAP1_VERTEX_ATTRIB3_4_NV: GLenum = 0x8663;
pub static MAP1_VERTEX_ATTRIB4_4_NV: GLenum = 0x8664;
pub static MAP1_VERTEX_ATTRIB5_4_NV: GLenum = 0x8665;
pub static MAP1_VERTEX_ATTRIB6_4_NV: GLenum = 0x8666;
pub static MAP1_VERTEX_ATTRIB7_4_NV: GLenum = 0x8667;
pub static MAP1_VERTEX_ATTRIB8_4_NV: GLenum = 0x8668;
pub static MAP1_VERTEX_ATTRIB9_4_NV: GLenum = 0x8669;
pub static MAP1_VERTEX_ATTRIB10_4_NV: GLenum = 0x866A;
pub static MAP1_VERTEX_ATTRIB11_4_NV: GLenum = 0x866B;
pub static MAP1_VERTEX_ATTRIB12_4_NV: GLenum = 0x866C;
pub static MAP1_VERTEX_ATTRIB13_4_NV: GLenum = 0x866D;
pub static MAP1_VERTEX_ATTRIB14_4_NV: GLenum = 0x866E;
pub static MAP1_VERTEX_ATTRIB15_4_NV: GLenum = 0x866F;
pub static MAP2_VERTEX_ATTRIB0_4_NV: GLenum = 0x8670;
pub static MAP2_VERTEX_ATTRIB1_4_NV: GLenum = 0x8671;
pub static MAP2_VERTEX_ATTRIB2_4_NV: GLenum = 0x8672;
pub static MAP2_VERTEX_ATTRIB3_4_NV: GLenum = 0x8673;
pub static MAP2_VERTEX_ATTRIB4_4_NV: GLenum = 0x8674;
pub static MAP2_VERTEX_ATTRIB5_4_NV: GLenum = 0x8675;
pub static MAP2_VERTEX_ATTRIB6_4_NV: GLenum = 0x8676;
pub static MAP2_VERTEX_ATTRIB7_4_NV: GLenum = 0x8677;
pub static PROGRAM_BINDING_ARB: GLenum = 0x8677;
pub static MAP2_VERTEX_ATTRIB8_4_NV: GLenum = 0x8678;
pub static MAP2_VERTEX_ATTRIB9_4_NV: GLenum = 0x8679;
pub static MAP2_VERTEX_ATTRIB10_4_NV: GLenum = 0x867A;
pub static MAP2_VERTEX_ATTRIB11_4_NV: GLenum = 0x867B;
pub static MAP2_VERTEX_ATTRIB12_4_NV: GLenum = 0x867C;
pub static MAP2_VERTEX_ATTRIB13_4_NV: GLenum = 0x867D;
pub static MAP2_VERTEX_ATTRIB14_4_NV: GLenum = 0x867E;
pub static MAP2_VERTEX_ATTRIB15_4_NV: GLenum = 0x867F;
pub static TEXTURE_COMPRESSED_IMAGE_SIZE: GLenum = 0x86A0;
pub static TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: GLenum = 0x86A0;
pub static TEXTURE_COMPRESSED: GLenum = 0x86A1;
pub static TEXTURE_COMPRESSED_ARB: GLenum = 0x86A1;
pub static NUM_COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A2;
pub static NUM_COMPRESSED_TEXTURE_FORMATS_ARB: GLenum = 0x86A2;
pub static COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A3;
pub static COMPRESSED_TEXTURE_FORMATS_ARB: GLenum = 0x86A3;
pub static MAX_VERTEX_UNITS_ARB: GLenum = 0x86A4;
pub static MAX_VERTEX_UNITS_OES: GLenum = 0x86A4;
pub static ACTIVE_VERTEX_UNITS_ARB: GLenum = 0x86A5;
pub static WEIGHT_SUM_UNITY_ARB: GLenum = 0x86A6;
pub static VERTEX_BLEND_ARB: GLenum = 0x86A7;
pub static CURRENT_WEIGHT_ARB: GLenum = 0x86A8;
pub static WEIGHT_ARRAY_TYPE_ARB: GLenum = 0x86A9;
pub static WEIGHT_ARRAY_TYPE_OES: GLenum = 0x86A9;
pub static WEIGHT_ARRAY_STRIDE_ARB: GLenum = 0x86AA;
pub static WEIGHT_ARRAY_STRIDE_OES: GLenum = 0x86AA;
pub static WEIGHT_ARRAY_SIZE_ARB: GLenum = 0x86AB;
pub static WEIGHT_ARRAY_SIZE_OES: GLenum = 0x86AB;
pub static WEIGHT_ARRAY_POINTER_ARB: GLenum = 0x86AC;
pub static WEIGHT_ARRAY_POINTER_OES: GLenum = 0x86AC;
pub static WEIGHT_ARRAY_ARB: GLenum = 0x86AD;
pub static WEIGHT_ARRAY_OES: GLenum = 0x86AD;
pub static DOT3_RGB: GLenum = 0x86AE;
pub static DOT3_RGB_ARB: GLenum = 0x86AE;
pub static DOT3_RGBA: GLenum = 0x86AF;
pub static DOT3_RGBA_ARB: GLenum = 0x86AF;
pub static DOT3_RGBA_IMG: GLenum = 0x86AF;
pub static COMPRESSED_RGB_FXT1_3DFX: GLenum = 0x86B0;
pub static COMPRESSED_RGBA_FXT1_3DFX: GLenum = 0x86B1;
pub static MULTISAMPLE_3DFX: GLenum = 0x86B2;
pub static SAMPLE_BUFFERS_3DFX: GLenum = 0x86B3;
pub static SAMPLES_3DFX: GLenum = 0x86B4;
pub static EVAL_2D_NV: GLenum = 0x86C0;
pub static EVAL_TRIANGULAR_2D_NV: GLenum = 0x86C1;
pub static MAP_TESSELLATION_NV: GLenum = 0x86C2;
pub static MAP_ATTRIB_U_ORDER_NV: GLenum = 0x86C3;
pub static MAP_ATTRIB_V_ORDER_NV: GLenum = 0x86C4;
pub static EVAL_FRACTIONAL_TESSELLATION_NV: GLenum = 0x86C5;
pub static EVAL_VERTEX_ATTRIB0_NV: GLenum = 0x86C6;
pub static EVAL_VERTEX_ATTRIB1_NV: GLenum = 0x86C7;
pub static EVAL_VERTEX_ATTRIB2_NV: GLenum = 0x86C8;
pub static EVAL_VERTEX_ATTRIB3_NV: GLenum = 0x86C9;
pub static EVAL_VERTEX_ATTRIB4_NV: GLenum = 0x86CA;
pub static EVAL_VERTEX_ATTRIB5_NV: GLenum = 0x86CB;
pub static EVAL_VERTEX_ATTRIB6_NV: GLenum = 0x86CC;
pub static EVAL_VERTEX_ATTRIB7_NV: GLenum = 0x86CD;
pub static EVAL_VERTEX_ATTRIB8_NV: GLenum = 0x86CE;
pub static EVAL_VERTEX_ATTRIB9_NV: GLenum = 0x86CF;
pub static EVAL_VERTEX_ATTRIB10_NV: GLenum = 0x86D0;
pub static EVAL_VERTEX_ATTRIB11_NV: GLenum = 0x86D1;
pub static EVAL_VERTEX_ATTRIB12_NV: GLenum = 0x86D2;
pub static EVAL_VERTEX_ATTRIB13_NV: GLenum = 0x86D3;
pub static EVAL_VERTEX_ATTRIB14_NV: GLenum = 0x86D4;
pub static EVAL_VERTEX_ATTRIB15_NV: GLenum = 0x86D5;
pub static MAX_MAP_TESSELLATION_NV: GLenum = 0x86D6;
pub static MAX_RATIONAL_EVAL_ORDER_NV: GLenum = 0x86D7;
pub static MAX_PROGRAM_PATCH_ATTRIBS_NV: GLenum = 0x86D8;
pub static RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: GLenum = 0x86D9;
pub static UNSIGNED_INT_S8_S8_8_8_NV: GLenum = 0x86DA;
pub static UNSIGNED_INT_8_8_S8_S8_REV_NV: GLenum = 0x86DB;
pub static DSDT_MAG_INTENSITY_NV: GLenum = 0x86DC;
pub static SHADER_CONSISTENT_NV: GLenum = 0x86DD;
pub static TEXTURE_SHADER_NV: GLenum = 0x86DE;
pub static SHADER_OPERATION_NV: GLenum = 0x86DF;
pub static CULL_MODES_NV: GLenum = 0x86E0;
pub static OFFSET_TEXTURE_MATRIX_NV: GLenum = 0x86E1;
pub static OFFSET_TEXTURE_2D_MATRIX_NV: GLenum = 0x86E1;
pub static OFFSET_TEXTURE_SCALE_NV: GLenum = 0x86E2;
pub static OFFSET_TEXTURE_2D_SCALE_NV: GLenum = 0x86E2;
pub static OFFSET_TEXTURE_BIAS_NV: GLenum = 0x86E3;
pub static OFFSET_TEXTURE_2D_BIAS_NV: GLenum = 0x86E3;
pub static PREVIOUS_TEXTURE_INPUT_NV: GLenum = 0x86E4;
pub static CONST_EYE_NV: GLenum = 0x86E5;
pub static PASS_THROUGH_NV: GLenum = 0x86E6;
pub static CULL_FRAGMENT_NV: GLenum = 0x86E7;
pub static OFFSET_TEXTURE_2D_NV: GLenum = 0x86E8;
pub static DEPENDENT_AR_TEXTURE_2D_NV: GLenum = 0x86E9;
pub static DEPENDENT_GB_TEXTURE_2D_NV: GLenum = 0x86EA;
pub static SURFACE_STATE_NV: GLenum = 0x86EB;
pub static DOT_PRODUCT_NV: GLenum = 0x86EC;
pub static DOT_PRODUCT_DEPTH_REPLACE_NV: GLenum = 0x86ED;
pub static DOT_PRODUCT_TEXTURE_2D_NV: GLenum = 0x86EE;
pub static DOT_PRODUCT_TEXTURE_3D_NV: GLenum = 0x86EF;
pub static DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: GLenum = 0x86F0;
pub static DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: GLenum = 0x86F1;
pub static DOT_PRODUCT_REFLECT_CUBE_MAP_NV: GLenum = 0x86F2;
pub static DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: GLenum = 0x86F3;
pub static HILO_NV: GLenum = 0x86F4;
pub static DSDT_NV: GLenum = 0x86F5;
pub static DSDT_MAG_NV: GLenum = 0x86F6;
pub static DSDT_MAG_VIB_NV: GLenum = 0x86F7;
pub static HILO16_NV: GLenum = 0x86F8;
pub static SIGNED_HILO_NV: GLenum = 0x86F9;
pub static SIGNED_HILO16_NV: GLenum = 0x86FA;
pub static SIGNED_RGBA_NV: GLenum = 0x86FB;
pub static SIGNED_RGBA8_NV: GLenum = 0x86FC;
pub static SURFACE_REGISTERED_NV: GLenum = 0x86FD;
pub static SIGNED_RGB_NV: GLenum = 0x86FE;
pub static SIGNED_RGB8_NV: GLenum = 0x86FF;
pub static SURFACE_MAPPED_NV: GLenum = 0x8700;
pub static SIGNED_LUMINANCE_NV: GLenum = 0x8701;
pub static SIGNED_LUMINANCE8_NV: GLenum = 0x8702;
pub static SIGNED_LUMINANCE_ALPHA_NV: GLenum = 0x8703;
pub static SIGNED_LUMINANCE8_ALPHA8_NV: GLenum = 0x8704;
pub static SIGNED_ALPHA_NV: GLenum = 0x8705;
pub static SIGNED_ALPHA8_NV: GLenum = 0x8706;
pub static SIGNED_INTENSITY_NV: GLenum = 0x8707;
pub static SIGNED_INTENSITY8_NV: GLenum = 0x8708;
pub static DSDT8_NV: GLenum = 0x8709;
pub static DSDT8_MAG8_NV: GLenum = 0x870A;
pub static DSDT8_MAG8_INTENSITY8_NV: GLenum = 0x870B;
pub static SIGNED_RGB_UNSIGNED_ALPHA_NV: GLenum = 0x870C;
pub static SIGNED_RGB8_UNSIGNED_ALPHA8_NV: GLenum = 0x870D;
pub static HI_SCALE_NV: GLenum = 0x870E;
pub static LO_SCALE_NV: GLenum = 0x870F;
pub static DS_SCALE_NV: GLenum = 0x8710;
pub static DT_SCALE_NV: GLenum = 0x8711;
pub static MAGNITUDE_SCALE_NV: GLenum = 0x8712;
pub static VIBRANCE_SCALE_NV: GLenum = 0x8713;
pub static HI_BIAS_NV: GLenum = 0x8714;
pub static LO_BIAS_NV: GLenum = 0x8715;
pub static DS_BIAS_NV: GLenum = 0x8716;
pub static DT_BIAS_NV: GLenum = 0x8717;
pub static MAGNITUDE_BIAS_NV: GLenum = 0x8718;
pub static VIBRANCE_BIAS_NV: GLenum = 0x8719;
pub static TEXTURE_BORDER_VALUES_NV: GLenum = 0x871A;
pub static TEXTURE_HI_SIZE_NV: GLenum = 0x871B;
pub static TEXTURE_LO_SIZE_NV: GLenum = 0x871C;
pub static TEXTURE_DS_SIZE_NV: GLenum = 0x871D;
pub static TEXTURE_DT_SIZE_NV: GLenum = 0x871E;
pub static TEXTURE_MAG_SIZE_NV: GLenum = 0x871F;
pub static MODELVIEW2_ARB: GLenum = 0x8722;
pub static MODELVIEW3_ARB: GLenum = 0x8723;
pub static MODELVIEW4_ARB: GLenum = 0x8724;
pub static MODELVIEW5_ARB: GLenum = 0x8725;
pub static MODELVIEW6_ARB: GLenum = 0x8726;
pub static MODELVIEW7_ARB: GLenum = 0x8727;
pub static MODELVIEW8_ARB: GLenum = 0x8728;
pub static MODELVIEW9_ARB: GLenum = 0x8729;
pub static MODELVIEW10_ARB: GLenum = 0x872A;
pub static MODELVIEW11_ARB: GLenum = 0x872B;
pub static MODELVIEW12_ARB: GLenum = 0x872C;
pub static MODELVIEW13_ARB: GLenum = 0x872D;
pub static MODELVIEW14_ARB: GLenum = 0x872E;
pub static MODELVIEW15_ARB: GLenum = 0x872F;
pub static MODELVIEW16_ARB: GLenum = 0x8730;
pub static MODELVIEW17_ARB: GLenum = 0x8731;
pub static MODELVIEW18_ARB: GLenum = 0x8732;
pub static MODELVIEW19_ARB: GLenum = 0x8733;
pub static MODELVIEW20_ARB: GLenum = 0x8734;
pub static MODELVIEW21_ARB: GLenum = 0x8735;
pub static MODELVIEW22_ARB: GLenum = 0x8736;
pub static MODELVIEW23_ARB: GLenum = 0x8737;
pub static MODELVIEW24_ARB: GLenum = 0x8738;
pub static MODELVIEW25_ARB: GLenum = 0x8739;
pub static MODELVIEW26_ARB: GLenum = 0x873A;
pub static MODELVIEW27_ARB: GLenum = 0x873B;
pub static MODELVIEW28_ARB: GLenum = 0x873C;
pub static MODELVIEW29_ARB: GLenum = 0x873D;
pub static MODELVIEW30_ARB: GLenum = 0x873E;
pub static MODELVIEW31_ARB: GLenum = 0x873F;
pub static DOT3_RGB_EXT: GLenum = 0x8740;
pub static Z400_BINARY_AMD: GLenum = 0x8740;
pub static DOT3_RGBA_EXT: GLenum = 0x8741;
pub static PROGRAM_BINARY_LENGTH_OES: GLenum = 0x8741;
pub static PROGRAM_BINARY_LENGTH: GLenum = 0x8741;
pub static MIRROR_CLAMP_ATI: GLenum = 0x8742;
pub static MIRROR_CLAMP_EXT: GLenum = 0x8742;
pub static MIRROR_CLAMP_TO_EDGE: GLenum = 0x8743;
pub static MIRROR_CLAMP_TO_EDGE_ATI: GLenum = 0x8743;
pub static MIRROR_CLAMP_TO_EDGE_EXT: GLenum = 0x8743;
pub static MODULATE_ADD_ATI: GLenum = 0x8744;
pub static MODULATE_SIGNED_ADD_ATI: GLenum = 0x8745;
pub static MODULATE_SUBTRACT_ATI: GLenum = 0x8746;
pub static SET_AMD: GLenum = 0x874A;
pub static REPLACE_VALUE_AMD: GLenum = 0x874B;
pub static STENCIL_OP_VALUE_AMD: GLenum = 0x874C;
pub static STENCIL_BACK_OP_VALUE_AMD: GLenum = 0x874D;
pub static VERTEX_ATTRIB_ARRAY_LONG: GLenum = 0x874E;
pub static DEPTH_STENCIL_MESA: GLenum = 0x8750;
pub static UNSIGNED_INT_24_8_MESA: GLenum = 0x8751;
pub static UNSIGNED_INT_8_24_REV_MESA: GLenum = 0x8752;
pub static UNSIGNED_SHORT_15_1_MESA: GLenum = 0x8753;
pub static UNSIGNED_SHORT_1_15_REV_MESA: GLenum = 0x8754;
pub static TRACE_MASK_MESA: GLenum = 0x8755;
pub static TRACE_NAME_MESA: GLenum = 0x8756;
pub static YCBCR_MESA: GLenum = 0x8757;
pub static PACK_INVERT_MESA: GLenum = 0x8758;
pub static DEBUG_OBJECT_MESA: GLenum = 0x8759;
pub static TEXTURE_1D_STACK_MESAX: GLenum = 0x8759;
pub static DEBUG_PRINT_MESA: GLenum = 0x875A;
pub static TEXTURE_2D_STACK_MESAX: GLenum = 0x875A;
pub static DEBUG_ASSERT_MESA: GLenum = 0x875B;
pub static PROXY_TEXTURE_1D_STACK_MESAX: GLenum = 0x875B;
pub static PROXY_TEXTURE_2D_STACK_MESAX: GLenum = 0x875C;
pub static TEXTURE_1D_STACK_BINDING_MESAX: GLenum = 0x875D;
pub static TEXTURE_2D_STACK_BINDING_MESAX: GLenum = 0x875E;
pub static STATIC_ATI: GLenum = 0x8760;
pub static DYNAMIC_ATI: GLenum = 0x8761;
pub static PRESERVE_ATI: GLenum = 0x8762;
pub static DISCARD_ATI: GLenum = 0x8763;
pub static BUFFER_SIZE: GLenum = 0x8764;
pub static BUFFER_SIZE_ARB: GLenum = 0x8764;
pub static OBJECT_BUFFER_SIZE_ATI: GLenum = 0x8764;
pub static BUFFER_USAGE: GLenum = 0x8765;
pub static BUFFER_USAGE_ARB: GLenum = 0x8765;
pub static OBJECT_BUFFER_USAGE_ATI: GLenum = 0x8765;
pub static ARRAY_OBJECT_BUFFER_ATI: GLenum = 0x8766;
pub static ARRAY_OBJECT_OFFSET_ATI: GLenum = 0x8767;
pub static ELEMENT_ARRAY_ATI: GLenum = 0x8768;
pub static ELEMENT_ARRAY_TYPE_ATI: GLenum = 0x8769;
pub static ELEMENT_ARRAY_POINTER_ATI: GLenum = 0x876A;
pub static MAX_VERTEX_STREAMS_ATI: GLenum = 0x876B;
pub static VERTEX_STREAM0_ATI: GLenum = 0x876C;
pub static VERTEX_STREAM1_ATI: GLenum = 0x876D;
pub static VERTEX_STREAM2_ATI: GLenum = 0x876E;
pub static VERTEX_STREAM3_ATI: GLenum = 0x876F;
pub static VERTEX_STREAM4_ATI: GLenum = 0x8770;
pub static VERTEX_STREAM5_ATI: GLenum = 0x8771;
pub static VERTEX_STREAM6_ATI: GLenum = 0x8772;
pub static VERTEX_STREAM7_ATI: GLenum = 0x8773;
pub static VERTEX_SOURCE_ATI: GLenum = 0x8774;
pub static BUMP_ROT_MATRIX_ATI: GLenum = 0x8775;
pub static BUMP_ROT_MATRIX_SIZE_ATI: GLenum = 0x8776;
pub static BUMP_NUM_TEX_UNITS_ATI: GLenum = 0x8777;
pub static BUMP_TEX_UNITS_ATI: GLenum = 0x8778;
pub static DUDV_ATI: GLenum = 0x8779;
pub static DU8DV8_ATI: GLenum = 0x877A;
pub static BUMP_ENVMAP_ATI: GLenum = 0x877B;
pub static BUMP_TARGET_ATI: GLenum = 0x877C;
pub static VERTEX_SHADER_EXT: GLenum = 0x8780;
pub static VERTEX_SHADER_BINDING_EXT: GLenum = 0x8781;
pub static OP_INDEX_EXT: GLenum = 0x8782;
pub static OP_NEGATE_EXT: GLenum = 0x8783;
pub static OP_DOT3_EXT: GLenum = 0x8784;
pub static OP_DOT4_EXT: GLenum = 0x8785;
pub static OP_MUL_EXT: GLenum = 0x8786;
pub static OP_ADD_EXT: GLenum = 0x8787;
pub static OP_MADD_EXT: GLenum = 0x8788;
pub static OP_FRAC_EXT: GLenum = 0x8789;
pub static OP_MAX_EXT: GLenum = 0x878A;
pub static OP_MIN_EXT: GLenum = 0x878B;
pub static OP_SET_GE_EXT: GLenum = 0x878C;
pub static OP_SET_LT_EXT: GLenum = 0x878D;
pub static OP_CLAMP_EXT: GLenum = 0x878E;
pub static OP_FLOOR_EXT: GLenum = 0x878F;
pub static OP_ROUND_EXT: GLenum = 0x8790;
pub static OP_EXP_BASE_2_EXT: GLenum = 0x8791;
pub static OP_LOG_BASE_2_EXT: GLenum = 0x8792;
pub static OP_POWER_EXT: GLenum = 0x8793;
pub static OP_RECIP_EXT: GLenum = 0x8794;
pub static OP_RECIP_SQRT_EXT: GLenum = 0x8795;
pub static OP_SUB_EXT: GLenum = 0x8796;
pub static OP_CROSS_PRODUCT_EXT: GLenum = 0x8797;
pub static OP_MULTIPLY_MATRIX_EXT: GLenum = 0x8798;
pub static OP_MOV_EXT: GLenum = 0x8799;
pub static OUTPUT_VERTEX_EXT: GLenum = 0x879A;
pub static OUTPUT_COLOR0_EXT: GLenum = 0x879B;
pub static OUTPUT_COLOR1_EXT: GLenum = 0x879C;
pub static OUTPUT_TEXTURE_COORD0_EXT: GLenum = 0x879D;
pub static OUTPUT_TEXTURE_COORD1_EXT: GLenum = 0x879E;
pub static OUTPUT_TEXTURE_COORD2_EXT: GLenum = 0x879F;
pub static OUTPUT_TEXTURE_COORD3_EXT: GLenum = 0x87A0;
pub static OUTPUT_TEXTURE_COORD4_EXT: GLenum = 0x87A1;
pub static OUTPUT_TEXTURE_COORD5_EXT: GLenum = 0x87A2;
pub static OUTPUT_TEXTURE_COORD6_EXT: GLenum = 0x87A3;
pub static OUTPUT_TEXTURE_COORD7_EXT: GLenum = 0x87A4;
pub static OUTPUT_TEXTURE_COORD8_EXT: GLenum = 0x87A5;
pub static OUTPUT_TEXTURE_COORD9_EXT: GLenum = 0x87A6;
pub static OUTPUT_TEXTURE_COORD10_EXT: GLenum = 0x87A7;
pub static OUTPUT_TEXTURE_COORD11_EXT: GLenum = 0x87A8;
pub static OUTPUT_TEXTURE_COORD12_EXT: GLenum = 0x87A9;
pub static OUTPUT_TEXTURE_COORD13_EXT: GLenum = 0x87AA;
pub static OUTPUT_TEXTURE_COORD14_EXT: GLenum = 0x87AB;
pub static OUTPUT_TEXTURE_COORD15_EXT: GLenum = 0x87AC;
pub static OUTPUT_TEXTURE_COORD16_EXT: GLenum = 0x87AD;
pub static OUTPUT_TEXTURE_COORD17_EXT: GLenum = 0x87AE;
pub static OUTPUT_TEXTURE_COORD18_EXT: GLenum = 0x87AF;
pub static OUTPUT_TEXTURE_COORD19_EXT: GLenum = 0x87B0;
pub static OUTPUT_TEXTURE_COORD20_EXT: GLenum = 0x87B1;
pub static OUTPUT_TEXTURE_COORD21_EXT: GLenum = 0x87B2;
pub static OUTPUT_TEXTURE_COORD22_EXT: GLenum = 0x87B3;
pub static OUTPUT_TEXTURE_COORD23_EXT: GLenum = 0x87B4;
pub static OUTPUT_TEXTURE_COORD24_EXT: GLenum = 0x87B5;
pub static OUTPUT_TEXTURE_COORD25_EXT: GLenum = 0x87B6;
pub static OUTPUT_TEXTURE_COORD26_EXT: GLenum = 0x87B7;
pub static OUTPUT_TEXTURE_COORD27_EXT: GLenum = 0x87B8;
pub static OUTPUT_TEXTURE_COORD28_EXT: GLenum = 0x87B9;
pub static OUTPUT_TEXTURE_COORD29_EXT: GLenum = 0x87BA;
pub static OUTPUT_TEXTURE_COORD30_EXT: GLenum = 0x87BB;
pub static OUTPUT_TEXTURE_COORD31_EXT: GLenum = 0x87BC;
pub static OUTPUT_FOG_EXT: GLenum = 0x87BD;
pub static SCALAR_EXT: GLenum = 0x87BE;
pub static VECTOR_EXT: GLenum = 0x87BF;
pub static MATRIX_EXT: GLenum = 0x87C0;
pub static VARIANT_EXT: GLenum = 0x87C1;
pub static INVARIANT_EXT: GLenum = 0x87C2;
pub static LOCAL_CONSTANT_EXT: GLenum = 0x87C3;
pub static LOCAL_EXT: GLenum = 0x87C4;
pub static MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87C5;
pub static MAX_VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87C6;
pub static MAX_VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87C7;
pub static MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87C8;
pub static MAX_VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87C9;
pub static MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87CA;
pub static MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87CB;
pub static MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87CC;
pub static MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87CD;
pub static MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87CE;
pub static VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87CF;
pub static VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87D0;
pub static VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87D1;
pub static VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87D2;
pub static VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87D3;
pub static VERTEX_SHADER_OPTIMIZED_EXT: GLenum = 0x87D4;
pub static X_EXT: GLenum = 0x87D5;
pub static Y_EXT: GLenum = 0x87D6;
pub static Z_EXT: GLenum = 0x87D7;
pub static W_EXT: GLenum = 0x87D8;
pub static NEGATIVE_X_EXT: GLenum = 0x87D9;
pub static NEGATIVE_Y_EXT: GLenum = 0x87DA;
pub static NEGATIVE_Z_EXT: GLenum = 0x87DB;
pub static NEGATIVE_W_EXT: GLenum = 0x87DC;
pub static ZERO_EXT: GLenum = 0x87DD;
pub static ONE_EXT: GLenum = 0x87DE;
pub static NEGATIVE_ONE_EXT: GLenum = 0x87DF;
pub static NORMALIZED_RANGE_EXT: GLenum = 0x87E0;
pub static FULL_RANGE_EXT: GLenum = 0x87E1;
pub static CURRENT_VERTEX_EXT: GLenum = 0x87E2;
pub static MVP_MATRIX_EXT: GLenum = 0x87E3;
pub static VARIANT_VALUE_EXT: GLenum = 0x87E4;
pub static VARIANT_DATATYPE_EXT: GLenum = 0x87E5;
pub static VARIANT_ARRAY_STRIDE_EXT: GLenum = 0x87E6;
pub static VARIANT_ARRAY_TYPE_EXT: GLenum = 0x87E7;
pub static VARIANT_ARRAY_EXT: GLenum = 0x87E8;
pub static VARIANT_ARRAY_POINTER_EXT: GLenum = 0x87E9;
pub static INVARIANT_VALUE_EXT: GLenum = 0x87EA;
pub static INVARIANT_DATATYPE_EXT: GLenum = 0x87EB;
pub static LOCAL_CONSTANT_VALUE_EXT: GLenum = 0x87EC;
pub static LOCAL_CONSTANT_DATATYPE_EXT: GLenum = 0x87ED;
pub static ATC_RGBA_INTERPOLATED_ALPHA_AMD: GLenum = 0x87EE;
pub static PN_TRIANGLES_ATI: GLenum = 0x87F0;
pub static MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: GLenum = 0x87F1;
pub static PN_TRIANGLES_POINT_MODE_ATI: GLenum = 0x87F2;
pub static PN_TRIANGLES_NORMAL_MODE_ATI: GLenum = 0x87F3;
pub static PN_TRIANGLES_TESSELATION_LEVEL_ATI: GLenum = 0x87F4;
pub static PN_TRIANGLES_POINT_MODE_LINEAR_ATI: GLenum = 0x87F5;
pub static PN_TRIANGLES_POINT_MODE_CUBIC_ATI: GLenum = 0x87F6;
pub static PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: GLenum = 0x87F7;
pub static PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: GLenum = 0x87F8;
pub static _3DC_X_AMD: GLenum = 0x87F9;
pub static _3DC_XY_AMD: GLenum = 0x87FA;
pub static VBO_FREE_MEMORY_ATI: GLenum = 0x87FB;
pub static TEXTURE_FREE_MEMORY_ATI: GLenum = 0x87FC;
pub static RENDERBUFFER_FREE_MEMORY_ATI: GLenum = 0x87FD;
pub static NUM_PROGRAM_BINARY_FORMATS: GLenum = 0x87FE;
pub static NUM_PROGRAM_BINARY_FORMATS_OES: GLenum = 0x87FE;
pub static PROGRAM_BINARY_FORMATS: GLenum = 0x87FF;
pub static PROGRAM_BINARY_FORMATS_OES: GLenum = 0x87FF;
pub static STENCIL_BACK_FUNC: GLenum = 0x8800;
pub static STENCIL_BACK_FUNC_ATI: GLenum = 0x8800;
pub static STENCIL_BACK_FAIL: GLenum = 0x8801;
pub static STENCIL_BACK_FAIL_ATI: GLenum = 0x8801;
pub static STENCIL_BACK_PASS_DEPTH_FAIL: GLenum = 0x8802;
pub static STENCIL_BACK_PASS_DEPTH_FAIL_ATI: GLenum = 0x8802;
pub static STENCIL_BACK_PASS_DEPTH_PASS: GLenum = 0x8803;
pub static STENCIL_BACK_PASS_DEPTH_PASS_ATI: GLenum = 0x8803;
pub static FRAGMENT_PROGRAM_ARB: GLenum = 0x8804;
pub static PROGRAM_ALU_INSTRUCTIONS_ARB: GLenum = 0x8805;
pub static PROGRAM_TEX_INSTRUCTIONS_ARB: GLenum = 0x8806;
pub static PROGRAM_TEX_INDIRECTIONS_ARB: GLenum = 0x8807;
pub static PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: GLenum = 0x8808;
pub static PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: GLenum = 0x8809;
pub static PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: GLenum = 0x880A;
pub static MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: GLenum = 0x880B;
pub static MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: GLenum = 0x880C;
pub static MAX_PROGRAM_TEX_INDIRECTIONS_ARB: GLenum = 0x880D;
pub static MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: GLenum = 0x880E;
pub static MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: GLenum = 0x880F;
pub static MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: GLenum = 0x8810;
pub static RGBA32F: GLenum = 0x8814;
pub static RGBA32F_ARB: GLenum = 0x8814;
pub static RGBA_FLOAT32_APPLE: GLenum = 0x8814;
pub static RGBA_FLOAT32_ATI: GLenum = 0x8814;
pub static RGB32F: GLenum = 0x8815;
pub static RGB32F_ARB: GLenum = 0x8815;
pub static RGB_FLOAT32_APPLE: GLenum = 0x8815;
pub static RGB_FLOAT32_ATI: GLenum = 0x8815;
pub static ALPHA32F_ARB: GLenum = 0x8816;
pub static ALPHA_FLOAT32_APPLE: GLenum = 0x8816;
pub static ALPHA_FLOAT32_ATI: GLenum = 0x8816;
pub static INTENSITY32F_ARB: GLenum = 0x8817;
pub static INTENSITY_FLOAT32_APPLE: GLenum = 0x8817;
pub static INTENSITY_FLOAT32_ATI: GLenum = 0x8817;
pub static LUMINANCE32F_ARB: GLenum = 0x8818;
pub static LUMINANCE_FLOAT32_APPLE: GLenum = 0x8818;
pub static LUMINANCE_FLOAT32_ATI: GLenum = 0x8818;
pub static LUMINANCE_ALPHA32F_ARB: GLenum = 0x8819;
pub static LUMINANCE_ALPHA_FLOAT32_APPLE: GLenum = 0x8819;
pub static LUMINANCE_ALPHA_FLOAT32_ATI: GLenum = 0x8819;
pub static RGBA16F: GLenum = 0x881A;
pub static RGBA16F_ARB: GLenum = 0x881A;
pub static RGBA16F_EXT: GLenum = 0x881A;
pub static RGBA_FLOAT16_APPLE: GLenum = 0x881A;
pub static RGBA_FLOAT16_ATI: GLenum = 0x881A;
pub static RGB16F: GLenum = 0x881B;
pub static RGB16F_ARB: GLenum = 0x881B;
pub static RGB16F_EXT: GLenum = 0x881B;
pub static RGB_FLOAT16_APPLE: GLenum = 0x881B;
pub static RGB_FLOAT16_ATI: GLenum = 0x881B;
pub static ALPHA16F_ARB: GLenum = 0x881C;
pub static ALPHA_FLOAT16_APPLE: GLenum = 0x881C;
pub static ALPHA_FLOAT16_ATI: GLenum = 0x881C;
pub static INTENSITY16F_ARB: GLenum = 0x881D;
pub static INTENSITY_FLOAT16_APPLE: GLenum = 0x881D;
pub static INTENSITY_FLOAT16_ATI: GLenum = 0x881D;
pub static LUMINANCE16F_ARB: GLenum = 0x881E;
pub static LUMINANCE_FLOAT16_APPLE: GLenum = 0x881E;
pub static LUMINANCE_FLOAT16_ATI: GLenum = 0x881E;
pub static LUMINANCE_ALPHA16F_ARB: GLenum = 0x881F;
pub static LUMINANCE_ALPHA_FLOAT16_APPLE: GLenum = 0x881F;
pub static LUMINANCE_ALPHA_FLOAT16_ATI: GLenum = 0x881F;
pub static RGBA_FLOAT_MODE_ARB: GLenum = 0x8820;
pub static RGBA_FLOAT_MODE_ATI: GLenum = 0x8820;
pub static WRITEONLY_RENDERING_QCOM: GLenum = 0x8823;
pub static MAX_DRAW_BUFFERS: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_ARB: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_ATI: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_EXT: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_NV: GLenum = 0x8824;
pub static DRAW_BUFFER0: GLenum = 0x8825;
pub static DRAW_BUFFER0_ARB: GLenum = 0x8825;
pub static DRAW_BUFFER0_ATI: GLenum = 0x8825;
pub static DRAW_BUFFER0_EXT: GLenum = 0x8825;
pub static DRAW_BUFFER0_NV: GLenum = 0x8825;
pub static DRAW_BUFFER1: GLenum = 0x8826;
pub static DRAW_BUFFER1_ARB: GLenum = 0x8826;
pub static DRAW_BUFFER1_ATI: GLenum = 0x8826;
pub static DRAW_BUFFER1_EXT: GLenum = 0x8826;
pub static DRAW_BUFFER1_NV: GLenum = 0x8826;
pub static DRAW_BUFFER2: GLenum = 0x8827;
pub static DRAW_BUFFER2_ARB: GLenum = 0x8827;
pub static DRAW_BUFFER2_ATI: GLenum = 0x8827;
pub static DRAW_BUFFER2_EXT: GLenum = 0x8827;
pub static DRAW_BUFFER2_NV: GLenum = 0x8827;
pub static DRAW_BUFFER3: GLenum = 0x8828;
pub static DRAW_BUFFER3_ARB: GLenum = 0x8828;
pub static DRAW_BUFFER3_ATI: GLenum = 0x8828;
pub static DRAW_BUFFER3_EXT: GLenum = 0x8828;
pub static DRAW_BUFFER3_NV: GLenum = 0x8828;
pub static DRAW_BUFFER4: GLenum = 0x8829;
pub static DRAW_BUFFER4_ARB: GLenum = 0x8829;
pub static DRAW_BUFFER4_ATI: GLenum = 0x8829;
pub static DRAW_BUFFER4_EXT: GLenum = 0x8829;
pub static DRAW_BUFFER4_NV: GLenum = 0x8829;
pub static DRAW_BUFFER5: GLenum = 0x882A;
pub static DRAW_BUFFER5_ARB: GLenum = 0x882A;
pub static DRAW_BUFFER5_ATI: GLenum = 0x882A;
pub static DRAW_BUFFER5_EXT: GLenum = 0x882A;
pub static DRAW_BUFFER5_NV: GLenum = 0x882A;
pub static DRAW_BUFFER6: GLenum = 0x882B;
pub static DRAW_BUFFER6_ARB: GLenum = 0x882B;
pub static DRAW_BUFFER6_ATI: GLenum = 0x882B;
pub static DRAW_BUFFER6_EXT: GLenum = 0x882B;
pub static DRAW_BUFFER6_NV: GLenum = 0x882B;
pub static DRAW_BUFFER7: GLenum = 0x882C;
pub static DRAW_BUFFER7_ARB: GLenum = 0x882C;
pub static DRAW_BUFFER7_ATI: GLenum = 0x882C;
pub static DRAW_BUFFER7_EXT: GLenum = 0x882C;
pub static DRAW_BUFFER7_NV: GLenum = 0x882C;
pub static DRAW_BUFFER8: GLenum = 0x882D;
pub static DRAW_BUFFER8_ARB: GLenum = 0x882D;
pub static DRAW_BUFFER8_ATI: GLenum = 0x882D;
pub static DRAW_BUFFER8_EXT: GLenum = 0x882D;
pub static DRAW_BUFFER8_NV: GLenum = 0x882D;
pub static DRAW_BUFFER9: GLenum = 0x882E;
pub static DRAW_BUFFER9_ARB: GLenum = 0x882E;
pub static DRAW_BUFFER9_ATI: GLenum = 0x882E;
pub static DRAW_BUFFER9_EXT: GLenum = 0x882E;
pub static DRAW_BUFFER9_NV: GLenum = 0x882E;
pub static DRAW_BUFFER10: GLenum = 0x882F;
pub static DRAW_BUFFER10_ARB: GLenum = 0x882F;
pub static DRAW_BUFFER10_ATI: GLenum = 0x882F;
pub static DRAW_BUFFER10_EXT: GLenum = 0x882F;
pub static DRAW_BUFFER10_NV: GLenum = 0x882F;
pub static DRAW_BUFFER11: GLenum = 0x8830;
pub static DRAW_BUFFER11_ARB: GLenum = 0x8830;
pub static DRAW_BUFFER11_ATI: GLenum = 0x8830;
pub static DRAW_BUFFER11_EXT: GLenum = 0x8830;
pub static DRAW_BUFFER11_NV: GLenum = 0x8830;
pub static DRAW_BUFFER12: GLenum = 0x8831;
pub static DRAW_BUFFER12_ARB: GLenum = 0x8831;
pub static DRAW_BUFFER12_ATI: GLenum = 0x8831;
pub static DRAW_BUFFER12_EXT: GLenum = 0x8831;
pub static DRAW_BUFFER12_NV: GLenum = 0x8831;
pub static DRAW_BUFFER13: GLenum = 0x8832;
pub static DRAW_BUFFER13_ARB: GLenum = 0x8832;
pub static DRAW_BUFFER13_ATI: GLenum = 0x8832;
pub static DRAW_BUFFER13_EXT: GLenum = 0x8832;
pub static DRAW_BUFFER13_NV: GLenum = 0x8832;
pub static DRAW_BUFFER14: GLenum = 0x8833;
pub static DRAW_BUFFER14_ARB: GLenum = 0x8833;
pub static DRAW_BUFFER14_ATI: GLenum = 0x8833;
pub static DRAW_BUFFER14_EXT: GLenum = 0x8833;
pub static DRAW_BUFFER14_NV: GLenum = 0x8833;
pub static DRAW_BUFFER15: GLenum = 0x8834;
pub static DRAW_BUFFER15_ARB: GLenum = 0x8834;
pub static DRAW_BUFFER15_ATI: GLenum = 0x8834;
pub static DRAW_BUFFER15_EXT: GLenum = 0x8834;
pub static DRAW_BUFFER15_NV: GLenum = 0x8834;
pub static COLOR_CLEAR_UNCLAMPED_VALUE_ATI: GLenum = 0x8835;
pub static BLEND_EQUATION_ALPHA: GLenum = 0x883D;
pub static BLEND_EQUATION_ALPHA_EXT: GLenum = 0x883D;
pub static BLEND_EQUATION_ALPHA_OES: GLenum = 0x883D;
pub static SUBSAMPLE_DISTANCE_AMD: GLenum = 0x883F;
pub static MATRIX_PALETTE_ARB: GLenum = 0x8840;
pub static MATRIX_PALETTE_OES: GLenum = 0x8840;
pub static MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: GLenum = 0x8841;
pub static MAX_PALETTE_MATRICES_ARB: GLenum = 0x8842;
pub static MAX_PALETTE_MATRICES_OES: GLenum = 0x8842;
pub static CURRENT_PALETTE_MATRIX_ARB: GLenum = 0x8843;
pub static CURRENT_PALETTE_MATRIX_OES: GLenum = 0x8843;
pub static MATRIX_INDEX_ARRAY_ARB: GLenum = 0x8844;
pub static MATRIX_INDEX_ARRAY_OES: GLenum = 0x8844;
pub static CURRENT_MATRIX_INDEX_ARB: GLenum = 0x8845;
pub static MATRIX_INDEX_ARRAY_SIZE_ARB: GLenum = 0x8846;
pub static MATRIX_INDEX_ARRAY_SIZE_OES: GLenum = 0x8846;
pub static MATRIX_INDEX_ARRAY_TYPE_ARB: GLenum = 0x8847;
pub static MATRIX_INDEX_ARRAY_TYPE_OES: GLenum = 0x8847;
pub static MATRIX_INDEX_ARRAY_STRIDE_ARB: GLenum = 0x8848;
pub static MATRIX_INDEX_ARRAY_STRIDE_OES: GLenum = 0x8848;
pub static MATRIX_INDEX_ARRAY_POINTER_ARB: GLenum = 0x8849;
pub static MATRIX_INDEX_ARRAY_POINTER_OES: GLenum = 0x8849;
pub static TEXTURE_DEPTH_SIZE: GLenum = 0x884A;
pub static TEXTURE_DEPTH_SIZE_ARB: GLenum = 0x884A;
pub static DEPTH_TEXTURE_MODE: GLenum = 0x884B;
pub static DEPTH_TEXTURE_MODE_ARB: GLenum = 0x884B;
pub static TEXTURE_COMPARE_MODE: GLenum = 0x884C;
pub static TEXTURE_COMPARE_MODE_ARB: GLenum = 0x884C;
pub static TEXTURE_COMPARE_MODE_EXT: GLenum = 0x884C;
pub static TEXTURE_COMPARE_FUNC: GLenum = 0x884D;
pub static TEXTURE_COMPARE_FUNC_ARB: GLenum = 0x884D;
pub static TEXTURE_COMPARE_FUNC_EXT: GLenum = 0x884D;
pub static COMPARE_R_TO_TEXTURE: GLenum = 0x884E;
pub static COMPARE_R_TO_TEXTURE_ARB: GLenum = 0x884E;
pub static COMPARE_REF_DEPTH_TO_TEXTURE_EXT: GLenum = 0x884E;
pub static COMPARE_REF_TO_TEXTURE: GLenum = 0x884E;
pub static COMPARE_REF_TO_TEXTURE_EXT: GLenum = 0x884E;
pub static TEXTURE_CUBE_MAP_SEAMLESS: GLenum = 0x884F;
pub static OFFSET_PROJECTIVE_TEXTURE_2D_NV: GLenum = 0x8850;
pub static OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV: GLenum = 0x8851;
pub static OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV: GLenum = 0x8852;
pub static OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV: GLenum = 0x8853;
pub static OFFSET_HILO_TEXTURE_2D_NV: GLenum = 0x8854;
pub static OFFSET_HILO_TEXTURE_RECTANGLE_NV: GLenum = 0x8855;
pub static OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV: GLenum = 0x8856;
pub static OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV: GLenum = 0x8857;
pub static DEPENDENT_HILO_TEXTURE_2D_NV: GLenum = 0x8858;
pub static DEPENDENT_RGB_TEXTURE_3D_NV: GLenum = 0x8859;
pub static DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV: GLenum = 0x885A;
pub static DOT_PRODUCT_PASS_THROUGH_NV: GLenum = 0x885B;
pub static DOT_PRODUCT_TEXTURE_1D_NV: GLenum = 0x885C;
pub static DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV: GLenum = 0x885D;
pub static HILO8_NV: GLenum = 0x885E;
pub static SIGNED_HILO8_NV: GLenum = 0x885F;
pub static FORCE_BLUE_TO_ONE_NV: GLenum = 0x8860;
pub static POINT_SPRITE: GLenum = 0x8861;
pub static POINT_SPRITE_ARB: GLenum = 0x8861;
pub static POINT_SPRITE_NV: GLenum = 0x8861;
pub static POINT_SPRITE_OES: GLenum = 0x8861;
pub static COORD_REPLACE: GLenum = 0x8862;
pub static COORD_REPLACE_ARB: GLenum = 0x8862;
pub static COORD_REPLACE_NV: GLenum = 0x8862;
pub static COORD_REPLACE_OES: GLenum = 0x8862;
pub static POINT_SPRITE_R_MODE_NV: GLenum = 0x8863;
pub static PIXEL_COUNTER_BITS_NV: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS_ARB: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS_EXT: GLenum = 0x8864;
pub static CURRENT_OCCLUSION_QUERY_ID_NV: GLenum = 0x8865;
pub static CURRENT_QUERY: GLenum = 0x8865;
pub static CURRENT_QUERY_ARB: GLenum = 0x8865;
pub static CURRENT_QUERY_EXT: GLenum = 0x8865;
pub static PIXEL_COUNT_NV: GLenum = 0x8866;
pub static QUERY_RESULT: GLenum = 0x8866;
pub static QUERY_RESULT_ARB: GLenum = 0x8866;
pub static QUERY_RESULT_EXT: GLenum = 0x8866;
pub static PIXEL_COUNT_AVAILABLE_NV: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE_ARB: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE_EXT: GLenum = 0x8867;
pub static MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: GLenum = 0x8868;
pub static MAX_VERTEX_ATTRIBS: GLenum = 0x8869;
pub static MAX_VERTEX_ATTRIBS_ARB: GLenum = 0x8869;
pub static VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum = 0x886A;
pub static VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: GLenum = 0x886A;
pub static MAX_TESS_CONTROL_INPUT_COMPONENTS: GLenum = 0x886C;
pub static MAX_TESS_EVALUATION_INPUT_COMPONENTS: GLenum = 0x886D;
pub static DEPTH_STENCIL_TO_RGBA_NV: GLenum = 0x886E;
pub static DEPTH_STENCIL_TO_BGRA_NV: GLenum = 0x886F;
pub static FRAGMENT_PROGRAM_NV: GLenum = 0x8870;
pub static MAX_TEXTURE_COORDS: GLenum = 0x8871;
pub static MAX_TEXTURE_COORDS_ARB: GLenum = 0x8871;
pub static MAX_TEXTURE_COORDS_NV: GLenum = 0x8871;
pub static MAX_TEXTURE_IMAGE_UNITS: GLenum = 0x8872;
pub static MAX_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8872;
pub static MAX_TEXTURE_IMAGE_UNITS_NV: GLenum = 0x8872;
pub static FRAGMENT_PROGRAM_BINDING_NV: GLenum = 0x8873;
pub static PROGRAM_ERROR_STRING_ARB: GLenum = 0x8874;
pub static PROGRAM_ERROR_STRING_NV: GLenum = 0x8874;
pub static PROGRAM_FORMAT_ASCII_ARB: GLenum = 0x8875;
pub static PROGRAM_FORMAT_ARB: GLenum = 0x8876;
pub static WRITE_PIXEL_DATA_RANGE_NV: GLenum = 0x8878;
pub static READ_PIXEL_DATA_RANGE_NV: GLenum = 0x8879;
pub static WRITE_PIXEL_DATA_RANGE_LENGTH_NV: GLenum = 0x887A;
pub static READ_PIXEL_DATA_RANGE_LENGTH_NV: GLenum = 0x887B;
pub static WRITE_PIXEL_DATA_RANGE_POINTER_NV: GLenum = 0x887C;
pub static READ_PIXEL_DATA_RANGE_POINTER_NV: GLenum = 0x887D;
pub static GEOMETRY_SHADER_INVOCATIONS: GLenum = 0x887F;
pub static FLOAT_R_NV: GLenum = 0x8880;
pub static FLOAT_RG_NV: GLenum = 0x8881;
pub static FLOAT_RGB_NV: GLenum = 0x8882;
pub static FLOAT_RGBA_NV: GLenum = 0x8883;
pub static FLOAT_R16_NV: GLenum = 0x8884;
pub static FLOAT_R32_NV: GLenum = 0x8885;
pub static FLOAT_RG16_NV: GLenum = 0x8886;
pub static FLOAT_RG32_NV: GLenum = 0x8887;
pub static FLOAT_RGB16_NV: GLenum = 0x8888;
pub static FLOAT_RGB32_NV: GLenum = 0x8889;
pub static FLOAT_RGBA16_NV: GLenum = 0x888A;
pub static FLOAT_RGBA32_NV: GLenum = 0x888B;
pub static TEXTURE_FLOAT_COMPONENTS_NV: GLenum = 0x888C;
pub static FLOAT_CLEAR_COLOR_VALUE_NV: GLenum = 0x888D;
pub static FLOAT_RGBA_MODE_NV: GLenum = 0x888E;
pub static TEXTURE_UNSIGNED_REMAP_MODE_NV: GLenum = 0x888F;
pub static DEPTH_BOUNDS_TEST_EXT: GLenum = 0x8890;
pub static DEPTH_BOUNDS_EXT: GLenum = 0x8891;
pub static ARRAY_BUFFER: GLenum = 0x8892;
pub static ARRAY_BUFFER_ARB: GLenum = 0x8892;
pub static ELEMENT_ARRAY_BUFFER: GLenum = 0x8893;
pub static ELEMENT_ARRAY_BUFFER_ARB: GLenum = 0x8893;
pub static ARRAY_BUFFER_BINDING: GLenum = 0x8894;
pub static ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8894;
pub static ELEMENT_ARRAY_BUFFER_BINDING: GLenum = 0x8895;
pub static ELEMENT_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8895;
pub static VERTEX_ARRAY_BUFFER_BINDING: GLenum = 0x8896;
pub static VERTEX_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8896;
pub static NORMAL_ARRAY_BUFFER_BINDING: GLenum = 0x8897;
pub static NORMAL_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8897;
pub static COLOR_ARRAY_BUFFER_BINDING: GLenum = 0x8898;
pub static COLOR_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8898;
pub static INDEX_ARRAY_BUFFER_BINDING: GLenum = 0x8899;
pub static INDEX_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8899;
pub static TEXTURE_COORD_ARRAY_BUFFER_BINDING: GLenum = 0x889A;
pub static TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889A;
pub static EDGE_FLAG_ARRAY_BUFFER_BINDING: GLenum = 0x889B;
pub static EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889B;
pub static SECONDARY_COLOR_ARRAY_BUFFER_BINDING: GLenum = 0x889C;
pub static SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889C;
pub static FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889D;
pub static FOG_COORDINATE_ARRAY_BUFFER_BINDING: GLenum = 0x889D;
pub static FOG_COORD_ARRAY_BUFFER_BINDING: GLenum = 0x889D;
pub static WEIGHT_ARRAY_BUFFER_BINDING: GLenum = 0x889E;
pub static WEIGHT_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889E;
pub static WEIGHT_ARRAY_BUFFER_BINDING_OES: GLenum = 0x889E;
pub static VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = 0x889F;
pub static VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889F;
pub static PROGRAM_INSTRUCTIONS_ARB: GLenum = 0x88A0;
pub static MAX_PROGRAM_INSTRUCTIONS_ARB: GLenum = 0x88A1;
pub static PROGRAM_NATIVE_INSTRUCTIONS_ARB: GLenum = 0x88A2;
pub static MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: GLenum = 0x88A3;
pub static PROGRAM_TEMPORARIES_ARB: GLenum = 0x88A4;
pub static MAX_PROGRAM_TEMPORARIES_ARB: GLenum = 0x88A5;
pub static PROGRAM_NATIVE_TEMPORARIES_ARB: GLenum = 0x88A6;
pub static MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: GLenum = 0x88A7;
pub static PROGRAM_PARAMETERS_ARB: GLenum = 0x88A8;
pub static MAX_PROGRAM_PARAMETERS_ARB: GLenum = 0x88A9;
pub static PROGRAM_NATIVE_PARAMETERS_ARB: GLenum = 0x88AA;
pub static MAX_PROGRAM_NATIVE_PARAMETERS_ARB: GLenum = 0x88AB;
pub static PROGRAM_ATTRIBS_ARB: GLenum = 0x88AC;
pub static MAX_PROGRAM_ATTRIBS_ARB: GLenum = 0x88AD;
pub static PROGRAM_NATIVE_ATTRIBS_ARB: GLenum = 0x88AE;
pub static MAX_PROGRAM_NATIVE_ATTRIBS_ARB: GLenum = 0x88AF;
pub static PROGRAM_ADDRESS_REGISTERS_ARB: GLenum = 0x88B0;
pub static MAX_PROGRAM_ADDRESS_REGISTERS_ARB: GLenum = 0x88B1;
pub static PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: GLenum = 0x88B2;
pub static MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: GLenum = 0x88B3;
pub static MAX_PROGRAM_LOCAL_PARAMETERS_ARB: GLenum = 0x88B4;
pub static MAX_PROGRAM_ENV_PARAMETERS_ARB: GLenum = 0x88B5;
pub static PROGRAM_UNDER_NATIVE_LIMITS_ARB: GLenum = 0x88B6;
pub static TRANSPOSE_CURRENT_MATRIX_ARB: GLenum = 0x88B7;
pub static READ_ONLY: GLenum = 0x88B8;
pub static READ_ONLY_ARB: GLenum = 0x88B8;
pub static WRITE_ONLY: GLenum = 0x88B9;
pub static WRITE_ONLY_ARB: GLenum = 0x88B9;
pub static WRITE_ONLY_OES: GLenum = 0x88B9;
pub static READ_WRITE: GLenum = 0x88BA;
pub static READ_WRITE_ARB: GLenum = 0x88BA;
pub static BUFFER_ACCESS: GLenum = 0x88BB;
pub static BUFFER_ACCESS_ARB: GLenum = 0x88BB;
pub static BUFFER_ACCESS_OES: GLenum = 0x88BB;
pub static BUFFER_MAPPED: GLenum = 0x88BC;
pub static BUFFER_MAPPED_ARB: GLenum = 0x88BC;
pub static BUFFER_MAPPED_OES: GLenum = 0x88BC;
pub static BUFFER_MAP_POINTER: GLenum = 0x88BD;
pub static BUFFER_MAP_POINTER_ARB: GLenum = 0x88BD;
pub static BUFFER_MAP_POINTER_OES: GLenum = 0x88BD;
pub static WRITE_DISCARD_NV: GLenum = 0x88BE;
pub static TIME_ELAPSED: GLenum = 0x88BF;
pub static TIME_ELAPSED_EXT: GLenum = 0x88BF;
pub static MATRIX0_ARB: GLenum = 0x88C0;
pub static MATRIX1_ARB: GLenum = 0x88C1;
pub static MATRIX2_ARB: GLenum = 0x88C2;
pub static MATRIX3_ARB: GLenum = 0x88C3;
pub static MATRIX4_ARB: GLenum = 0x88C4;
pub static MATRIX5_ARB: GLenum = 0x88C5;
pub static MATRIX6_ARB: GLenum = 0x88C6;
pub static MATRIX7_ARB: GLenum = 0x88C7;
pub static MATRIX8_ARB: GLenum = 0x88C8;
pub static MATRIX9_ARB: GLenum = 0x88C9;
pub static MATRIX10_ARB: GLenum = 0x88CA;
pub static MATRIX11_ARB: GLenum = 0x88CB;
pub static MATRIX12_ARB: GLenum = 0x88CC;
pub static MATRIX13_ARB: GLenum = 0x88CD;
pub static MATRIX14_ARB: GLenum = 0x88CE;
pub static MATRIX15_ARB: GLenum = 0x88CF;
pub static MATRIX16_ARB: GLenum = 0x88D0;
pub static MATRIX17_ARB: GLenum = 0x88D1;
pub static MATRIX18_ARB: GLenum = 0x88D2;
pub static MATRIX19_ARB: GLenum = 0x88D3;
pub static MATRIX20_ARB: GLenum = 0x88D4;
pub static MATRIX21_ARB: GLenum = 0x88D5;
pub static MATRIX22_ARB: GLenum = 0x88D6;
pub static MATRIX23_ARB: GLenum = 0x88D7;
pub static MATRIX24_ARB: GLenum = 0x88D8;
pub static MATRIX25_ARB: GLenum = 0x88D9;
pub static MATRIX26_ARB: GLenum = 0x88DA;
pub static MATRIX27_ARB: GLenum = 0x88DB;
pub static MATRIX28_ARB: GLenum = 0x88DC;
pub static MATRIX29_ARB: GLenum = 0x88DD;
pub static MATRIX30_ARB: GLenum = 0x88DE;
pub static MATRIX31_ARB: GLenum = 0x88DF;
pub static STREAM_DRAW: GLenum = 0x88E0;
pub static STREAM_DRAW_ARB: GLenum = 0x88E0;
pub static STREAM_READ: GLenum = 0x88E1;
pub static STREAM_READ_ARB: GLenum = 0x88E1;
pub static STREAM_COPY: GLenum = 0x88E2;
pub static STREAM_COPY_ARB: GLenum = 0x88E2;
pub static STATIC_DRAW: GLenum = 0x88E4;
pub static STATIC_DRAW_ARB: GLenum = 0x88E4;
pub static STATIC_READ: GLenum = 0x88E5;
pub static STATIC_READ_ARB: GLenum = 0x88E5;
pub static STATIC_COPY: GLenum = 0x88E6;
pub static STATIC_COPY_ARB: GLenum = 0x88E6;
pub static DYNAMIC_DRAW: GLenum = 0x88E8;
pub static DYNAMIC_DRAW_ARB: GLenum = 0x88E8;
pub static DYNAMIC_READ: GLenum = 0x88E9;
pub static DYNAMIC_READ_ARB: GLenum = 0x88E9;
pub static DYNAMIC_COPY: GLenum = 0x88EA;
pub static DYNAMIC_COPY_ARB: GLenum = 0x88EA;
pub static PIXEL_PACK_BUFFER: GLenum = 0x88EB;
pub static PIXEL_PACK_BUFFER_ARB: GLenum = 0x88EB;
pub static PIXEL_PACK_BUFFER_EXT: GLenum = 0x88EB;
pub static PIXEL_UNPACK_BUFFER: GLenum = 0x88EC;
pub static PIXEL_UNPACK_BUFFER_ARB: GLenum = 0x88EC;
pub static PIXEL_UNPACK_BUFFER_EXT: GLenum = 0x88EC;
pub static PIXEL_PACK_BUFFER_BINDING: GLenum = 0x88ED;
pub static PIXEL_PACK_BUFFER_BINDING_ARB: GLenum = 0x88ED;
pub static PIXEL_PACK_BUFFER_BINDING_EXT: GLenum = 0x88ED;
pub static ETC1_SRGB8_NV: GLenum = 0x88EE;
pub static PIXEL_UNPACK_BUFFER_BINDING: GLenum = 0x88EF;
pub static PIXEL_UNPACK_BUFFER_BINDING_ARB: GLenum = 0x88EF;
pub static PIXEL_UNPACK_BUFFER_BINDING_EXT: GLenum = 0x88EF;
pub static DEPTH24_STENCIL8: GLenum = 0x88F0;
pub static DEPTH24_STENCIL8_EXT: GLenum = 0x88F0;
pub static DEPTH24_STENCIL8_OES: GLenum = 0x88F0;
pub static TEXTURE_STENCIL_SIZE: GLenum = 0x88F1;
pub static TEXTURE_STENCIL_SIZE_EXT: GLenum = 0x88F1;
pub static STENCIL_TAG_BITS_EXT: GLenum = 0x88F2;
pub static STENCIL_CLEAR_TAG_VALUE_EXT: GLenum = 0x88F3;
pub static MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: GLenum = 0x88F4;
pub static MAX_PROGRAM_CALL_DEPTH_NV: GLenum = 0x88F5;
pub static MAX_PROGRAM_IF_DEPTH_NV: GLenum = 0x88F6;
pub static MAX_PROGRAM_LOOP_DEPTH_NV: GLenum = 0x88F7;
pub static MAX_PROGRAM_LOOP_COUNT_NV: GLenum = 0x88F8;
pub static SRC1_COLOR: GLenum = 0x88F9;
pub static ONE_MINUS_SRC1_COLOR: GLenum = 0x88FA;
pub static ONE_MINUS_SRC1_ALPHA: GLenum = 0x88FB;
pub static MAX_DUAL_SOURCE_DRAW_BUFFERS: GLenum = 0x88FC;
pub static VERTEX_ATTRIB_ARRAY_INTEGER: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_INTEGER_EXT: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_INTEGER_NV: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_NV: GLenum = 0x88FE;
pub static MAX_ARRAY_TEXTURE_LAYERS: GLenum = 0x88FF;
pub static MAX_ARRAY_TEXTURE_LAYERS_EXT: GLenum = 0x88FF;
pub static MIN_PROGRAM_TEXEL_OFFSET: GLenum = 0x8904;
pub static MIN_PROGRAM_TEXEL_OFFSET_EXT: GLenum = 0x8904;
pub static MIN_PROGRAM_TEXEL_OFFSET_NV: GLenum = 0x8904;
pub static MAX_PROGRAM_TEXEL_OFFSET: GLenum = 0x8905;
pub static MAX_PROGRAM_TEXEL_OFFSET_EXT: GLenum = 0x8905;
pub static MAX_PROGRAM_TEXEL_OFFSET_NV: GLenum = 0x8905;
pub static PROGRAM_ATTRIB_COMPONENTS_NV: GLenum = 0x8906;
pub static PROGRAM_RESULT_COMPONENTS_NV: GLenum = 0x8907;
pub static MAX_PROGRAM_ATTRIB_COMPONENTS_NV: GLenum = 0x8908;
pub static MAX_PROGRAM_RESULT_COMPONENTS_NV: GLenum = 0x8909;
pub static STENCIL_TEST_TWO_SIDE_EXT: GLenum = 0x8910;
pub static ACTIVE_STENCIL_FACE_EXT: GLenum = 0x8911;
pub static MIRROR_CLAMP_TO_BORDER_EXT: GLenum = 0x8912;
pub static SAMPLES_PASSED: GLenum = 0x8914;
pub static SAMPLES_PASSED_ARB: GLenum = 0x8914;
pub static GEOMETRY_VERTICES_OUT: GLenum = 0x8916;
pub static GEOMETRY_INPUT_TYPE: GLenum = 0x8917;
pub static GEOMETRY_OUTPUT_TYPE: GLenum = 0x8918;
pub static SAMPLER_BINDING: GLenum = 0x8919;
pub static CLAMP_VERTEX_COLOR: GLenum = 0x891A;
pub static CLAMP_VERTEX_COLOR_ARB: GLenum = 0x891A;
pub static CLAMP_FRAGMENT_COLOR: GLenum = 0x891B;
pub static CLAMP_FRAGMENT_COLOR_ARB: GLenum = 0x891B;
pub static CLAMP_READ_COLOR: GLenum = 0x891C;
pub static CLAMP_READ_COLOR_ARB: GLenum = 0x891C;
pub static FIXED_ONLY: GLenum = 0x891D;
pub static FIXED_ONLY_ARB: GLenum = 0x891D;
pub static TESS_CONTROL_PROGRAM_NV: GLenum = 0x891E;
pub static TESS_EVALUATION_PROGRAM_NV: GLenum = 0x891F;
pub static FRAGMENT_SHADER_ATI: GLenum = 0x8920;
pub static REG_0_ATI: GLenum = 0x8921;
pub static REG_1_ATI: GLenum = 0x8922;
pub static REG_2_ATI: GLenum = 0x8923;
pub static REG_3_ATI: GLenum = 0x8924;
pub static REG_4_ATI: GLenum = 0x8925;
pub static REG_5_ATI: GLenum = 0x8926;
pub static REG_6_ATI: GLenum = 0x8927;
pub static REG_7_ATI: GLenum = 0x8928;
pub static REG_8_ATI: GLenum = 0x8929;
pub static REG_9_ATI: GLenum = 0x892A;
pub static REG_10_ATI: GLenum = 0x892B;
pub static REG_11_ATI: GLenum = 0x892C;
pub static REG_12_ATI: GLenum = 0x892D;
pub static REG_13_ATI: GLenum = 0x892E;
pub static REG_14_ATI: GLenum = 0x892F;
pub static REG_15_ATI: GLenum = 0x8930;
pub static REG_16_ATI: GLenum = 0x8931;
pub static REG_17_ATI: GLenum = 0x8932;
pub static REG_18_ATI: GLenum = 0x8933;
pub static REG_19_ATI: GLenum = 0x8934;
pub static REG_20_ATI: GLenum = 0x8935;
pub static REG_21_ATI: GLenum = 0x8936;
pub static REG_22_ATI: GLenum = 0x8937;
pub static REG_23_ATI: GLenum = 0x8938;
pub static REG_24_ATI: GLenum = 0x8939;
pub static REG_25_ATI: GLenum = 0x893A;
pub static REG_26_ATI: GLenum = 0x893B;
pub static REG_27_ATI: GLenum = 0x893C;
pub static REG_28_ATI: GLenum = 0x893D;
pub static REG_29_ATI: GLenum = 0x893E;
pub static REG_30_ATI: GLenum = 0x893F;
pub static REG_31_ATI: GLenum = 0x8940;
pub static CON_0_ATI: GLenum = 0x8941;
pub static CON_1_ATI: GLenum = 0x8942;
pub static CON_2_ATI: GLenum = 0x8943;
pub static CON_3_ATI: GLenum = 0x8944;
pub static CON_4_ATI: GLenum = 0x8945;
pub static CON_5_ATI: GLenum = 0x8946;
pub static CON_6_ATI: GLenum = 0x8947;
pub static CON_7_ATI: GLenum = 0x8948;
pub static CON_8_ATI: GLenum = 0x8949;
pub static CON_9_ATI: GLenum = 0x894A;
pub static CON_10_ATI: GLenum = 0x894B;
pub static CON_11_ATI: GLenum = 0x894C;
pub static CON_12_ATI: GLenum = 0x894D;
pub static CON_13_ATI: GLenum = 0x894E;
pub static CON_14_ATI: GLenum = 0x894F;
pub static CON_15_ATI: GLenum = 0x8950;
pub static CON_16_ATI: GLenum = 0x8951;
pub static CON_17_ATI: GLenum = 0x8952;
pub static CON_18_ATI: GLenum = 0x8953;
pub static CON_19_ATI: GLenum = 0x8954;
pub static CON_20_ATI: GLenum = 0x8955;
pub static CON_21_ATI: GLenum = 0x8956;
pub static CON_22_ATI: GLenum = 0x8957;
pub static CON_23_ATI: GLenum = 0x8958;
pub static CON_24_ATI: GLenum = 0x8959;
pub static CON_25_ATI: GLenum = 0x895A;
pub static CON_26_ATI: GLenum = 0x895B;
pub static CON_27_ATI: GLenum = 0x895C;
pub static CON_28_ATI: GLenum = 0x895D;
pub static CON_29_ATI: GLenum = 0x895E;
pub static CON_30_ATI: GLenum = 0x895F;
pub static CON_31_ATI: GLenum = 0x8960;
pub static MOV_ATI: GLenum = 0x8961;
pub static ADD_ATI: GLenum = 0x8963;
pub static MUL_ATI: GLenum = 0x8964;
pub static SUB_ATI: GLenum = 0x8965;
pub static DOT3_ATI: GLenum = 0x8966;
pub static DOT4_ATI: GLenum = 0x8967;
pub static MAD_ATI: GLenum = 0x8968;
pub static LERP_ATI: GLenum = 0x8969;
pub static CND_ATI: GLenum = 0x896A;
pub static CND0_ATI: GLenum = 0x896B;
pub static DOT2_ADD_ATI: GLenum = 0x896C;
pub static SECONDARY_INTERPOLATOR_ATI: GLenum = 0x896D;
pub static NUM_FRAGMENT_REGISTERS_ATI: GLenum = 0x896E;
pub static NUM_FRAGMENT_CONSTANTS_ATI: GLenum = 0x896F;
pub static NUM_PASSES_ATI: GLenum = 0x8970;
pub static NUM_INSTRUCTIONS_PER_PASS_ATI: GLenum = 0x8971;
pub static NUM_INSTRUCTIONS_TOTAL_ATI: GLenum = 0x8972;
pub static NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: GLenum = 0x8973;
pub static NUM_LOOPBACK_COMPONENTS_ATI: GLenum = 0x8974;
pub static COLOR_ALPHA_PAIRING_ATI: GLenum = 0x8975;
pub static SWIZZLE_STR_ATI: GLenum = 0x8976;
pub static SWIZZLE_STQ_ATI: GLenum = 0x8977;
pub static SWIZZLE_STR_DR_ATI: GLenum = 0x8978;
pub static SWIZZLE_STQ_DQ_ATI: GLenum = 0x8979;
pub static SWIZZLE_STRQ_ATI: GLenum = 0x897A;
pub static SWIZZLE_STRQ_DQ_ATI: GLenum = 0x897B;
pub static INTERLACE_OML: GLenum = 0x8980;
pub static INTERLACE_READ_OML: GLenum = 0x8981;
pub static FORMAT_SUBSAMPLE_24_24_OML: GLenum = 0x8982;
pub static FORMAT_SUBSAMPLE_244_244_OML: GLenum = 0x8983;
pub static PACK_RESAMPLE_OML: GLenum = 0x8984;
pub static UNPACK_RESAMPLE_OML: GLenum = 0x8985;
pub static RESAMPLE_REPLICATE_OML: GLenum = 0x8986;
pub static RESAMPLE_ZERO_FILL_OML: GLenum = 0x8987;
pub static RESAMPLE_AVERAGE_OML: GLenum = 0x8988;
pub static RESAMPLE_DECIMATE_OML: GLenum = 0x8989;
pub static POINT_SIZE_ARRAY_TYPE_OES: GLenum = 0x898A;
pub static POINT_SIZE_ARRAY_STRIDE_OES: GLenum = 0x898B;
pub static POINT_SIZE_ARRAY_POINTER_OES: GLenum = 0x898C;
pub static MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898D;
pub static PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898E;
pub static TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898F;
pub static VERTEX_ATTRIB_MAP1_APPLE: GLenum = 0x8A00;
pub static VERTEX_ATTRIB_MAP2_APPLE: GLenum = 0x8A01;
pub static VERTEX_ATTRIB_MAP1_SIZE_APPLE: GLenum = 0x8A02;
pub static VERTEX_ATTRIB_MAP1_COEFF_APPLE: GLenum = 0x8A03;
pub static VERTEX_ATTRIB_MAP1_ORDER_APPLE: GLenum = 0x8A04;
pub static VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: GLenum = 0x8A05;
pub static VERTEX_ATTRIB_MAP2_SIZE_APPLE: GLenum = 0x8A06;
pub static VERTEX_ATTRIB_MAP2_COEFF_APPLE: GLenum = 0x8A07;
pub static VERTEX_ATTRIB_MAP2_ORDER_APPLE: GLenum = 0x8A08;
pub static VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: GLenum = 0x8A09;
pub static DRAW_PIXELS_APPLE: GLenum = 0x8A0A;
pub static FENCE_APPLE: GLenum = 0x8A0B;
pub static ELEMENT_ARRAY_APPLE: GLenum = 0x8A0C;
pub static ELEMENT_ARRAY_TYPE_APPLE: GLenum = 0x8A0D;
pub static ELEMENT_ARRAY_POINTER_APPLE: GLenum = 0x8A0E;
pub static COLOR_FLOAT_APPLE: GLenum = 0x8A0F;
pub static UNIFORM_BUFFER: GLenum = 0x8A11;
pub static BUFFER_SERIALIZED_MODIFY_APPLE: GLenum = 0x8A12;
pub static BUFFER_FLUSHING_UNMAP_APPLE: GLenum = 0x8A13;
pub static AUX_DEPTH_STENCIL_APPLE: GLenum = 0x8A14;
pub static PACK_ROW_BYTES_APPLE: GLenum = 0x8A15;
pub static UNPACK_ROW_BYTES_APPLE: GLenum = 0x8A16;
pub static RELEASED_APPLE: GLenum = 0x8A19;
pub static VOLATILE_APPLE: GLenum = 0x8A1A;
pub static RETAINED_APPLE: GLenum = 0x8A1B;
pub static UNDEFINED_APPLE: GLenum = 0x8A1C;
pub static PURGEABLE_APPLE: GLenum = 0x8A1D;
pub static RGB_422_APPLE: GLenum = 0x8A1F;
pub static UNIFORM_BUFFER_BINDING: GLenum = 0x8A28;
pub static UNIFORM_BUFFER_START: GLenum = 0x8A29;
pub static UNIFORM_BUFFER_SIZE: GLenum = 0x8A2A;
pub static MAX_VERTEX_UNIFORM_BLOCKS: GLenum = 0x8A2B;
pub static MAX_GEOMETRY_UNIFORM_BLOCKS: GLenum = 0x8A2C;
pub static MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum = 0x8A2D;
pub static MAX_COMBINED_UNIFORM_BLOCKS: GLenum = 0x8A2E;
pub static MAX_UNIFORM_BUFFER_BINDINGS: GLenum = 0x8A2F;
pub static MAX_UNIFORM_BLOCK_SIZE: GLenum = 0x8A30;
pub static MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8A31;
pub static MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: GLenum = 0x8A32;
pub static MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8A33;
pub static UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x8A34;
pub static ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: GLenum = 0x8A35;
pub static ACTIVE_UNIFORM_BLOCKS: GLenum = 0x8A36;
pub static UNIFORM_TYPE: GLenum = 0x8A37;
pub static UNIFORM_SIZE: GLenum = 0x8A38;
pub static UNIFORM_NAME_LENGTH: GLenum = 0x8A39;
pub static UNIFORM_BLOCK_INDEX: GLenum = 0x8A3A;
pub static UNIFORM_OFFSET: GLenum = 0x8A3B;
pub static UNIFORM_ARRAY_STRIDE: GLenum = 0x8A3C;
pub static UNIFORM_MATRIX_STRIDE: GLenum = 0x8A3D;
pub static UNIFORM_IS_ROW_MAJOR: GLenum = 0x8A3E;
pub static UNIFORM_BLOCK_BINDING: GLenum = 0x8A3F;
pub static UNIFORM_BLOCK_DATA_SIZE: GLenum = 0x8A40;
pub static UNIFORM_BLOCK_NAME_LENGTH: GLenum = 0x8A41;
pub static UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum = 0x8A42;
pub static UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum = 0x8A43;
pub static UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x8A44;
pub static UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x8A45;
pub static UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x8A46;
pub static TEXTURE_SRGB_DECODE_EXT: GLenum = 0x8A48;
pub static DECODE_EXT: GLenum = 0x8A49;
pub static SKIP_DECODE_EXT: GLenum = 0x8A4A;
pub static PROGRAM_PIPELINE_OBJECT_EXT: GLenum = 0x8A4F;
pub static FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: GLenum = 0x8A52;
pub static SYNC_OBJECT_APPLE: GLenum = 0x8A53;
pub static FRAGMENT_SHADER: GLenum = 0x8B30;
pub static FRAGMENT_SHADER_ARB: GLenum = 0x8B30;
pub static VERTEX_SHADER: GLenum = 0x8B31;
pub static VERTEX_SHADER_ARB: GLenum = 0x8B31;
pub static PROGRAM_OBJECT_ARB: GLenum = 0x8B40;
pub static PROGRAM_OBJECT_EXT: GLenum = 0x8B40;
pub static SHADER_OBJECT_ARB: GLenum = 0x8B48;
pub static SHADER_OBJECT_EXT: GLenum = 0x8B48;
pub static MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8B49;
pub static MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: GLenum = 0x8B49;
pub static MAX_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8B4A;
pub static MAX_VERTEX_UNIFORM_COMPONENTS_ARB: GLenum = 0x8B4A;
pub static MAX_VARYING_FLOATS: GLenum = 0x8B4B;
pub static MAX_VARYING_COMPONENTS: GLenum = 0x8B4B;
pub static MAX_VARYING_COMPONENTS_EXT: GLenum = 0x8B4B;
pub static MAX_VARYING_FLOATS_ARB: GLenum = 0x8B4B;
pub static MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4C;
pub static MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8B4C;
pub static MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4D;
pub static MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8B4D;
pub static OBJECT_TYPE_ARB: GLenum = 0x8B4E;
pub static SHADER_TYPE: GLenum = 0x8B4F;
pub static OBJECT_SUBTYPE_ARB: GLenum = 0x8B4F;
pub static FLOAT_VEC2: GLenum = 0x8B50;
pub static FLOAT_VEC2_ARB: GLenum = 0x8B50;
pub static FLOAT_VEC3: GLenum = 0x8B51;
pub static FLOAT_VEC3_ARB: GLenum = 0x8B51;
pub static FLOAT_VEC4: GLenum = 0x8B52;
pub static FLOAT_VEC4_ARB: GLenum = 0x8B52;
pub static INT_VEC2: GLenum = 0x8B53;
pub static INT_VEC2_ARB: GLenum = 0x8B53;
pub static INT_VEC3: GLenum = 0x8B54;
pub static INT_VEC3_ARB: GLenum = 0x8B54;
pub static INT_VEC4: GLenum = 0x8B55;
pub static INT_VEC4_ARB: GLenum = 0x8B55;
pub static BOOL: GLenum = 0x8B56;
pub static BOOL_ARB: GLenum = 0x8B56;
pub static BOOL_VEC2: GLenum = 0x8B57;
pub static BOOL_VEC2_ARB: GLenum = 0x8B57;
pub static BOOL_VEC3: GLenum = 0x8B58;
pub static BOOL_VEC3_ARB: GLenum = 0x8B58;
pub static BOOL_VEC4: GLenum = 0x8B59;
pub static BOOL_VEC4_ARB: GLenum = 0x8B59;
pub static FLOAT_MAT2: GLenum = 0x8B5A;
pub static FLOAT_MAT2_ARB: GLenum = 0x8B5A;
pub static FLOAT_MAT3: GLenum = 0x8B5B;
pub static FLOAT_MAT3_ARB: GLenum = 0x8B5B;
pub static FLOAT_MAT4: GLenum = 0x8B5C;
pub static FLOAT_MAT4_ARB: GLenum = 0x8B5C;
pub static SAMPLER_1D: GLenum = 0x8B5D;
pub static SAMPLER_1D_ARB: GLenum = 0x8B5D;
pub static SAMPLER_2D: GLenum = 0x8B5E;
pub static SAMPLER_2D_ARB: GLenum = 0x8B5E;
pub static SAMPLER_3D: GLenum = 0x8B5F;
pub static SAMPLER_3D_ARB: GLenum = 0x8B5F;
pub static SAMPLER_3D_OES: GLenum = 0x8B5F;
pub static SAMPLER_CUBE: GLenum = 0x8B60;
pub static SAMPLER_CUBE_ARB: GLenum = 0x8B60;
pub static SAMPLER_1D_SHADOW: GLenum = 0x8B61;
pub static SAMPLER_1D_SHADOW_ARB: GLenum = 0x8B61;
pub static SAMPLER_2D_SHADOW: GLenum = 0x8B62;
pub static SAMPLER_2D_SHADOW_ARB: GLenum = 0x8B62;
pub static SAMPLER_2D_SHADOW_EXT: GLenum = 0x8B62;
pub static SAMPLER_2D_RECT: GLenum = 0x8B63;
pub static SAMPLER_2D_RECT_ARB: GLenum = 0x8B63;
pub static SAMPLER_2D_RECT_SHADOW: GLenum = 0x8B64;
pub static SAMPLER_2D_RECT_SHADOW_ARB: GLenum = 0x8B64;
pub static FLOAT_MAT2x3: GLenum = 0x8B65;
pub static FLOAT_MAT2x4: GLenum = 0x8B66;
pub static FLOAT_MAT3x2: GLenum = 0x8B67;
pub static FLOAT_MAT3x4: GLenum = 0x8B68;
pub static FLOAT_MAT4x2: GLenum = 0x8B69;
pub static FLOAT_MAT4x3: GLenum = 0x8B6A;
pub static DELETE_STATUS: GLenum = 0x8B80;
pub static OBJECT_DELETE_STATUS_ARB: GLenum = 0x8B80;
pub static COMPILE_STATUS: GLenum = 0x8B81;
pub static OBJECT_COMPILE_STATUS_ARB: GLenum = 0x8B81;
pub static LINK_STATUS: GLenum = 0x8B82;
pub static OBJECT_LINK_STATUS_ARB: GLenum = 0x8B82;
pub static VALIDATE_STATUS: GLenum = 0x8B83;
pub static OBJECT_VALIDATE_STATUS_ARB: GLenum = 0x8B83;
pub static INFO_LOG_LENGTH: GLenum = 0x8B84;
pub static OBJECT_INFO_LOG_LENGTH_ARB: GLenum = 0x8B84;
pub static ATTACHED_SHADERS: GLenum = 0x8B85;
pub static OBJECT_ATTACHED_OBJECTS_ARB: GLenum = 0x8B85;
pub static ACTIVE_UNIFORMS: GLenum = 0x8B86;
pub static OBJECT_ACTIVE_UNIFORMS_ARB: GLenum = 0x8B86;
pub static ACTIVE_UNIFORM_MAX_LENGTH: GLenum = 0x8B87;
pub static OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: GLenum = 0x8B87;
pub static SHADER_SOURCE_LENGTH: GLenum = 0x8B88;
pub static OBJECT_SHADER_SOURCE_LENGTH_ARB: GLenum = 0x8B88;
pub static ACTIVE_ATTRIBUTES: GLenum = 0x8B89;
pub static OBJECT_ACTIVE_ATTRIBUTES_ARB: GLenum = 0x8B89;
pub static ACTIVE_ATTRIBUTE_MAX_LENGTH: GLenum = 0x8B8A;
pub static OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: GLenum = 0x8B8A;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum = 0x8B8B;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: GLenum = 0x8B8B;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GLenum = 0x8B8B;
pub static SHADING_LANGUAGE_VERSION: GLenum = 0x8B8C;
pub static SHADING_LANGUAGE_VERSION_ARB: GLenum = 0x8B8C;
pub static CURRENT_PROGRAM: GLenum = 0x8B8D;
pub static PALETTE4_RGB8_OES: GLenum = 0x8B90;
pub static PALETTE4_RGBA8_OES: GLenum = 0x8B91;
pub static PALETTE4_R5_G6_B5_OES: GLenum = 0x8B92;
pub static PALETTE4_RGBA4_OES: GLenum = 0x8B93;
pub static PALETTE4_RGB5_A1_OES: GLenum = 0x8B94;
pub static PALETTE8_RGB8_OES: GLenum = 0x8B95;
pub static PALETTE8_RGBA8_OES: GLenum = 0x8B96;
pub static PALETTE8_R5_G6_B5_OES: GLenum = 0x8B97;
pub static PALETTE8_RGBA4_OES: GLenum = 0x8B98;
pub static PALETTE8_RGB5_A1_OES: GLenum = 0x8B99;
pub static IMPLEMENTATION_COLOR_READ_TYPE: GLenum = 0x8B9A;
pub static IMPLEMENTATION_COLOR_READ_TYPE_OES: GLenum = 0x8B9A;
pub static IMPLEMENTATION_COLOR_READ_FORMAT: GLenum = 0x8B9B;
pub static IMPLEMENTATION_COLOR_READ_FORMAT_OES: GLenum = 0x8B9B;
pub static POINT_SIZE_ARRAY_OES: GLenum = 0x8B9C;
pub static TEXTURE_CROP_RECT_OES: GLenum = 0x8B9D;
pub static MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES: GLenum = 0x8B9E;
pub static POINT_SIZE_ARRAY_BUFFER_BINDING_OES: GLenum = 0x8B9F;
pub static FRAGMENT_PROGRAM_POSITION_MESA: GLenum = 0x8BB0;
pub static FRAGMENT_PROGRAM_CALLBACK_MESA: GLenum = 0x8BB1;
pub static FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA: GLenum = 0x8BB2;
pub static FRAGMENT_PROGRAM_CALLBACK_DATA_MESA: GLenum = 0x8BB3;
pub static VERTEX_PROGRAM_CALLBACK_MESA: GLenum = 0x8BB4;
pub static VERTEX_PROGRAM_POSITION_MESA: GLenum = 0x8BB4;
pub static VERTEX_PROGRAM_CALLBACK_FUNC_MESA: GLenum = 0x8BB6;
pub static VERTEX_PROGRAM_CALLBACK_DATA_MESA: GLenum = 0x8BB7;
pub static COUNTER_TYPE_AMD: GLenum = 0x8BC0;
pub static COUNTER_RANGE_AMD: GLenum = 0x8BC1;
pub static UNSIGNED_INT64_AMD: GLenum = 0x8BC2;
pub static PERCENTAGE_AMD: GLenum = 0x8BC3;
pub static PERFMON_RESULT_AVAILABLE_AMD: GLenum = 0x8BC4;
pub static PERFMON_RESULT_SIZE_AMD: GLenum = 0x8BC5;
pub static PERFMON_RESULT_AMD: GLenum = 0x8BC6;
pub static TEXTURE_WIDTH_QCOM: GLenum = 0x8BD2;
pub static TEXTURE_HEIGHT_QCOM: GLenum = 0x8BD3;
pub static TEXTURE_DEPTH_QCOM: GLenum = 0x8BD4;
pub static TEXTURE_INTERNAL_FORMAT_QCOM: GLenum = 0x8BD5;
pub static TEXTURE_FORMAT_QCOM: GLenum = 0x8BD6;
pub static TEXTURE_TYPE_QCOM: GLenum = 0x8BD7;
pub static TEXTURE_IMAGE_VALID_QCOM: GLenum = 0x8BD8;
pub static TEXTURE_NUM_LEVELS_QCOM: GLenum = 0x8BD9;
pub static TEXTURE_TARGET_QCOM: GLenum = 0x8BDA;
pub static TEXTURE_OBJECT_VALID_QCOM: GLenum = 0x8BDB;
pub static STATE_RESTORE: GLenum = 0x8BDC;
pub static COMPRESSED_RGB_PVRTC_4BPPV1_IMG: GLenum = 0x8C00;
pub static COMPRESSED_RGB_PVRTC_2BPPV1_IMG: GLenum = 0x8C01;
pub static COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: GLenum = 0x8C02;
pub static COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: GLenum = 0x8C03;
pub static MODULATE_COLOR_IMG: GLenum = 0x8C04;
pub static RECIP_ADD_SIGNED_ALPHA_IMG: GLenum = 0x8C05;
pub static TEXTURE_ALPHA_MODULATE_IMG: GLenum = 0x8C06;
pub static FACTOR_ALPHA_MODULATE_IMG: GLenum = 0x8C07;
pub static FRAGMENT_ALPHA_MODULATE_IMG: GLenum = 0x8C08;
pub static ADD_BLEND_IMG: GLenum = 0x8C09;
pub static SGX_BINARY_IMG: GLenum = 0x8C0A;
pub static TEXTURE_RED_TYPE: GLenum = 0x8C10;
pub static TEXTURE_RED_TYPE_ARB: GLenum = 0x8C10;
pub static TEXTURE_GREEN_TYPE: GLenum = 0x8C11;
pub static TEXTURE_GREEN_TYPE_ARB: GLenum = 0x8C11;
pub static TEXTURE_BLUE_TYPE: GLenum = 0x8C12;
pub static TEXTURE_BLUE_TYPE_ARB: GLenum = 0x8C12;
pub static TEXTURE_ALPHA_TYPE: GLenum = 0x8C13;
pub static TEXTURE_ALPHA_TYPE_ARB: GLenum = 0x8C13;
pub static TEXTURE_LUMINANCE_TYPE: GLenum = 0x8C14;
pub static TEXTURE_LUMINANCE_TYPE_ARB: GLenum = 0x8C14;
pub static TEXTURE_INTENSITY_TYPE: GLenum = 0x8C15;
pub static TEXTURE_INTENSITY_TYPE_ARB: GLenum = 0x8C15;
pub static TEXTURE_DEPTH_TYPE: GLenum = 0x8C16;
pub static TEXTURE_DEPTH_TYPE_ARB: GLenum = 0x8C16;
pub static UNSIGNED_NORMALIZED: GLenum = 0x8C17;
pub static UNSIGNED_NORMALIZED_ARB: GLenum = 0x8C17;
pub static UNSIGNED_NORMALIZED_EXT: GLenum = 0x8C17;
pub static TEXTURE_1D_ARRAY: GLenum = 0x8C18;
pub static TEXTURE_1D_ARRAY_EXT: GLenum = 0x8C18;
pub static PROXY_TEXTURE_1D_ARRAY: GLenum = 0x8C19;
pub static PROXY_TEXTURE_1D_ARRAY_EXT: GLenum = 0x8C19;
pub static TEXTURE_2D_ARRAY: GLenum = 0x8C1A;
pub static TEXTURE_2D_ARRAY_EXT: GLenum = 0x8C1A;
pub static PROXY_TEXTURE_2D_ARRAY: GLenum = 0x8C1B;
pub static PROXY_TEXTURE_2D_ARRAY_EXT: GLenum = 0x8C1B;
pub static TEXTURE_BINDING_1D_ARRAY: GLenum = 0x8C1C;
pub static TEXTURE_BINDING_1D_ARRAY_EXT: GLenum = 0x8C1C;
pub static TEXTURE_BINDING_2D_ARRAY: GLenum = 0x8C1D;
pub static TEXTURE_BINDING_2D_ARRAY_EXT: GLenum = 0x8C1D;
pub static GEOMETRY_PROGRAM_NV: GLenum = 0x8C26;
pub static MAX_PROGRAM_OUTPUT_VERTICES_NV: GLenum = 0x8C27;
pub static MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: GLenum = 0x8C28;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: GLenum = 0x8C29;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8C29;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: GLenum = 0x8C29;
pub static TEXTURE_BUFFER: GLenum = 0x8C2A;
pub static TEXTURE_BUFFER_ARB: GLenum = 0x8C2A;
pub static TEXTURE_BUFFER_EXT: GLenum = 0x8C2A;
pub static MAX_TEXTURE_BUFFER_SIZE: GLenum = 0x8C2B;
pub static MAX_TEXTURE_BUFFER_SIZE_ARB: GLenum = 0x8C2B;
pub static MAX_TEXTURE_BUFFER_SIZE_EXT: GLenum = 0x8C2B;
pub static TEXTURE_BINDING_BUFFER: GLenum = 0x8C2C;
pub static TEXTURE_BINDING_BUFFER_ARB: GLenum = 0x8C2C;
pub static TEXTURE_BINDING_BUFFER_EXT: GLenum = 0x8C2C;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_FORMAT_ARB: GLenum = 0x8C2E;
pub static TEXTURE_BUFFER_FORMAT_EXT: GLenum = 0x8C2E;
pub static ANY_SAMPLES_PASSED: GLenum = 0x8C2F;
pub static ANY_SAMPLES_PASSED_EXT: GLenum = 0x8C2F;
pub static SAMPLE_SHADING: GLenum = 0x8C36;
pub static SAMPLE_SHADING_ARB: GLenum = 0x8C36;
pub static MIN_SAMPLE_SHADING_VALUE: GLenum = 0x8C37;
pub static MIN_SAMPLE_SHADING_VALUE_ARB: GLenum = 0x8C37;
pub static R11F_G11F_B10F: GLenum = 0x8C3A;
pub static R11F_G11F_B10F_EXT: GLenum = 0x8C3A;
pub static UNSIGNED_INT_10F_11F_11F_REV: GLenum = 0x8C3B;
pub static UNSIGNED_INT_10F_11F_11F_REV_EXT: GLenum = 0x8C3B;
pub static RGBA_SIGNED_COMPONENTS_EXT: GLenum = 0x8C3C;
pub static RGB9_E5: GLenum = 0x8C3D;
pub static RGB9_E5_EXT: GLenum = 0x8C3D;
pub static UNSIGNED_INT_5_9_9_9_REV: GLenum = 0x8C3E;
pub static UNSIGNED_INT_5_9_9_9_REV_EXT: GLenum = 0x8C3E;
pub static TEXTURE_SHARED_SIZE: GLenum = 0x8C3F;
pub static TEXTURE_SHARED_SIZE_EXT: GLenum = 0x8C3F;
pub static SRGB: GLenum = 0x8C40;
pub static SRGB_EXT: GLenum = 0x8C40;
pub static SRGB8: GLenum = 0x8C41;
pub static SRGB8_EXT: GLenum = 0x8C41;
pub static SRGB8_NV: GLenum = 0x8C41;
pub static SRGB_ALPHA: GLenum = 0x8C42;
pub static SRGB_ALPHA_EXT: GLenum = 0x8C42;
pub static SRGB8_ALPHA8: GLenum = 0x8C43;
pub static SRGB8_ALPHA8_EXT: GLenum = 0x8C43;
pub static SLUMINANCE_ALPHA: GLenum = 0x8C44;
pub static SLUMINANCE_ALPHA_EXT: GLenum = 0x8C44;
pub static SLUMINANCE_ALPHA_NV: GLenum = 0x8C44;
pub static SLUMINANCE8_ALPHA8: GLenum = 0x8C45;
pub static SLUMINANCE8_ALPHA8_EXT: GLenum = 0x8C45;
pub static SLUMINANCE8_ALPHA8_NV: GLenum = 0x8C45;
pub static SLUMINANCE: GLenum = 0x8C46;
pub static SLUMINANCE_EXT: GLenum = 0x8C46;
pub static SLUMINANCE_NV: GLenum = 0x8C46;
pub static SLUMINANCE8: GLenum = 0x8C47;
pub static SLUMINANCE8_EXT: GLenum = 0x8C47;
pub static SLUMINANCE8_NV: GLenum = 0x8C47;
pub static COMPRESSED_SRGB: GLenum = 0x8C48;
pub static COMPRESSED_SRGB_EXT: GLenum = 0x8C48;
pub static COMPRESSED_SRGB_ALPHA: GLenum = 0x8C49;
pub static COMPRESSED_SRGB_ALPHA_EXT: GLenum = 0x8C49;
pub static COMPRESSED_SLUMINANCE: GLenum = 0x8C4A;
pub static COMPRESSED_SLUMINANCE_EXT: GLenum = 0x8C4A;
pub static COMPRESSED_SLUMINANCE_ALPHA: GLenum = 0x8C4B;
pub static COMPRESSED_SLUMINANCE_ALPHA_EXT: GLenum = 0x8C4B;
pub static COMPRESSED_SRGB_S3TC_DXT1_EXT: GLenum = 0x8C4C;
pub static COMPRESSED_SRGB_S3TC_DXT1_NV: GLenum = 0x8C4C;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GLenum = 0x8C4D;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV: GLenum = 0x8C4D;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GLenum = 0x8C4E;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV: GLenum = 0x8C4E;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GLenum = 0x8C4F;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV: GLenum = 0x8C4F;
pub static COMPRESSED_LUMINANCE_LATC1_EXT: GLenum = 0x8C70;
pub static COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT: GLenum = 0x8C71;
pub static COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT: GLenum = 0x8C72;
pub static COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT: GLenum = 0x8C73;
pub static TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8C74;
pub static TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8C75;
pub static TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: GLenum = 0x8C76;
pub static TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: GLenum = 0x8C76;
pub static BACK_PRIMARY_COLOR_NV: GLenum = 0x8C77;
pub static BACK_SECONDARY_COLOR_NV: GLenum = 0x8C78;
pub static TEXTURE_COORD_NV: GLenum = 0x8C79;
pub static CLIP_DISTANCE_NV: GLenum = 0x8C7A;
pub static VERTEX_ID_NV: GLenum = 0x8C7B;
pub static PRIMITIVE_ID_NV: GLenum = 0x8C7C;
pub static GENERIC_ATTRIB_NV: GLenum = 0x8C7D;
pub static TRANSFORM_FEEDBACK_ATTRIBS_NV: GLenum = 0x8C7E;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum = 0x8C7F;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: GLenum = 0x8C7F;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE_NV: GLenum = 0x8C7F;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum = 0x8C80;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: GLenum = 0x8C80;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: GLenum = 0x8C80;
pub static ACTIVE_VARYINGS_NV: GLenum = 0x8C81;
pub static ACTIVE_VARYING_MAX_LENGTH_NV: GLenum = 0x8C82;
pub static TRANSFORM_FEEDBACK_VARYINGS: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_VARYINGS_EXT: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_VARYINGS_NV: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_BUFFER_START: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_START_EXT: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_START_NV: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_RECORD_NV: GLenum = 0x8C86;
pub static PRIMITIVES_GENERATED: GLenum = 0x8C87;
pub static PRIMITIVES_GENERATED_EXT: GLenum = 0x8C87;
pub static PRIMITIVES_GENERATED_NV: GLenum = 0x8C87;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum = 0x8C88;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: GLenum = 0x8C88;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: GLenum = 0x8C88;
pub static RASTERIZER_DISCARD: GLenum = 0x8C89;
pub static RASTERIZER_DISCARD_EXT: GLenum = 0x8C89;
pub static RASTERIZER_DISCARD_NV: GLenum = 0x8C89;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum = 0x8C8B;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: GLenum = 0x8C8B;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: GLenum = 0x8C8B;
pub static INTERLEAVED_ATTRIBS: GLenum = 0x8C8C;
pub static INTERLEAVED_ATTRIBS_EXT: GLenum = 0x8C8C;
pub static INTERLEAVED_ATTRIBS_NV: GLenum = 0x8C8C;
pub static SEPARATE_ATTRIBS: GLenum = 0x8C8D;
pub static SEPARATE_ATTRIBS_EXT: GLenum = 0x8C8D;
pub static SEPARATE_ATTRIBS_NV: GLenum = 0x8C8D;
pub static TRANSFORM_FEEDBACK_BUFFER: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_EXT: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_NV: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum = 0x8C8F;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: GLenum = 0x8C8F;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: GLenum = 0x8C8F;
pub static ATC_RGB_AMD: GLenum = 0x8C92;
pub static ATC_RGBA_EXPLICIT_ALPHA_AMD: GLenum = 0x8C93;
pub static POINT_SPRITE_COORD_ORIGIN: GLenum = 0x8CA0;
pub static LOWER_LEFT: GLenum = 0x8CA1;
pub static UPPER_LEFT: GLenum = 0x8CA2;
pub static STENCIL_BACK_REF: GLenum = 0x8CA3;
pub static STENCIL_BACK_VALUE_MASK: GLenum = 0x8CA4;
pub static STENCIL_BACK_WRITEMASK: GLenum = 0x8CA5;
pub static DRAW_FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_NV: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_OES: GLenum = 0x8CA6;
pub static RENDERBUFFER_BINDING: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_ANGLE: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_EXT: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_OES: GLenum = 0x8CA7;
pub static READ_FRAMEBUFFER: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_ANGLE: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_EXT: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_NV: GLenum = 0x8CA8;
pub static DRAW_FRAMEBUFFER: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_ANGLE: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_EXT: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_NV: GLenum = 0x8CA9;
pub static READ_FRAMEBUFFER_BINDING: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_NV: GLenum = 0x8CAA;
pub static RENDERBUFFER_COVERAGE_SAMPLES_NV: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_ANGLE: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_EXT: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_NV: GLenum = 0x8CAB;
pub static DEPTH_COMPONENT32F: GLenum = 0x8CAC;
pub static DEPTH32F_STENCIL8: GLenum = 0x8CAD;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: GLenum = 0x8CD4;
pub static FRAMEBUFFER_COMPLETE: GLenum = 0x8CD5;
pub static FRAMEBUFFER_COMPLETE_EXT: GLenum = 0x8CD5;
pub static FRAMEBUFFER_COMPLETE_OES: GLenum = 0x8CD5;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: GLenum = 0x8CDA;
pub static FRAMEBUFFER_INCOMPLETE_FORMATS_OES: GLenum = 0x8CDA;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER: GLenum = 0x8CDC;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: GLenum = 0x8CDC;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES: GLenum = 0x8CDC;
pub static FRAMEBUFFER_UNSUPPORTED: GLenum = 0x8CDD;
pub static FRAMEBUFFER_UNSUPPORTED_EXT: GLenum = 0x8CDD;
pub static FRAMEBUFFER_UNSUPPORTED_OES: GLenum = 0x8CDD;
pub static MAX_COLOR_ATTACHMENTS: GLenum = 0x8CDF;
pub static MAX_COLOR_ATTACHMENTS_EXT: GLenum = 0x8CDF;
pub static MAX_COLOR_ATTACHMENTS_NV: GLenum = 0x8CDF;
pub static COLOR_ATTACHMENT0: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_EXT: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_NV: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_OES: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT1: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT1_EXT: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT1_NV: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT2: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT2_EXT: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT2_NV: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT3: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT3_EXT: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT3_NV: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT4: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT4_EXT: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT4_NV: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT5: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT5_EXT: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT5_NV: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT6: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT6_EXT: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT6_NV: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT7: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT7_EXT: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT7_NV: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT8: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT8_EXT: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT8_NV: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT9: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT9_EXT: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT9_NV: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT10: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT10_EXT: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT10_NV: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT11: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT11_EXT: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT11_NV: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT12: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT12_EXT: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT12_NV: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT13: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT13_EXT: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT13_NV: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT14: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT14_EXT: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT14_NV: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT15: GLenum = 0x8CEF;
pub static COLOR_ATTACHMENT15_EXT: GLenum = 0x8CEF;
pub static COLOR_ATTACHMENT15_NV: GLenum = 0x8CEF;
pub static DEPTH_ATTACHMENT: GLenum = 0x8D00;
pub static DEPTH_ATTACHMENT_EXT: GLenum = 0x8D00;
pub static DEPTH_ATTACHMENT_OES: GLenum = 0x8D00;
pub static STENCIL_ATTACHMENT: GLenum = 0x8D20;
pub static STENCIL_ATTACHMENT_EXT: GLenum = 0x8D20;
pub static STENCIL_ATTACHMENT_OES: GLenum = 0x8D20;
pub static FRAMEBUFFER: GLenum = 0x8D40;
pub static FRAMEBUFFER_EXT: GLenum = 0x8D40;
pub static FRAMEBUFFER_OES: GLenum = 0x8D40;
pub static RENDERBUFFER: GLenum = 0x8D41;
pub static RENDERBUFFER_EXT: GLenum = 0x8D41;
pub static RENDERBUFFER_OES: GLenum = 0x8D41;
pub static RENDERBUFFER_WIDTH: GLenum = 0x8D42;
pub static RENDERBUFFER_WIDTH_EXT: GLenum = 0x8D42;
pub static RENDERBUFFER_WIDTH_OES: GLenum = 0x8D42;
pub static RENDERBUFFER_HEIGHT: GLenum = 0x8D43;
pub static RENDERBUFFER_HEIGHT_EXT: GLenum = 0x8D43;
pub static RENDERBUFFER_HEIGHT_OES: GLenum = 0x8D43;
pub static RENDERBUFFER_INTERNAL_FORMAT: GLenum = 0x8D44;
pub static RENDERBUFFER_INTERNAL_FORMAT_EXT: GLenum = 0x8D44;
pub static RENDERBUFFER_INTERNAL_FORMAT_OES: GLenum = 0x8D44;
pub static STENCIL_INDEX1: GLenum = 0x8D46;
pub static STENCIL_INDEX1_EXT: GLenum = 0x8D46;
pub static STENCIL_INDEX1_OES: GLenum = 0x8D46;
pub static STENCIL_INDEX4: GLenum = 0x8D47;
pub static STENCIL_INDEX4_EXT: GLenum = 0x8D47;
pub static STENCIL_INDEX4_OES: GLenum = 0x8D47;
pub static STENCIL_INDEX8: GLenum = 0x8D48;
pub static STENCIL_INDEX8_EXT: GLenum = 0x8D48;
pub static STENCIL_INDEX8_OES: GLenum = 0x8D48;
pub static STENCIL_INDEX16: GLenum = 0x8D49;
pub static STENCIL_INDEX16_EXT: GLenum = 0x8D49;
pub static RENDERBUFFER_RED_SIZE: GLenum = 0x8D50;
pub static RENDERBUFFER_RED_SIZE_EXT: GLenum = 0x8D50;
pub static RENDERBUFFER_RED_SIZE_OES: GLenum = 0x8D50;
pub static RENDERBUFFER_GREEN_SIZE: GLenum = 0x8D51;
pub static RENDERBUFFER_GREEN_SIZE_EXT: GLenum = 0x8D51;
pub static RENDERBUFFER_GREEN_SIZE_OES: GLenum = 0x8D51;
pub static RENDERBUFFER_BLUE_SIZE: GLenum = 0x8D52;
pub static RENDERBUFFER_BLUE_SIZE_EXT: GLenum = 0x8D52;
pub static RENDERBUFFER_BLUE_SIZE_OES: GLenum = 0x8D52;
pub static RENDERBUFFER_ALPHA_SIZE: GLenum = 0x8D53;
pub static RENDERBUFFER_ALPHA_SIZE_EXT: GLenum = 0x8D53;
pub static RENDERBUFFER_ALPHA_SIZE_OES: GLenum = 0x8D53;
pub static RENDERBUFFER_DEPTH_SIZE: GLenum = 0x8D54;
pub static RENDERBUFFER_DEPTH_SIZE_EXT: GLenum = 0x8D54;
pub static RENDERBUFFER_DEPTH_SIZE_OES: GLenum = 0x8D54;
pub static RENDERBUFFER_STENCIL_SIZE: GLenum = 0x8D55;
pub static RENDERBUFFER_STENCIL_SIZE_EXT: GLenum = 0x8D55;
pub static RENDERBUFFER_STENCIL_SIZE_OES: GLenum = 0x8D55;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV: GLenum = 0x8D56;
pub static MAX_SAMPLES: GLenum = 0x8D57;
pub static MAX_SAMPLES_ANGLE: GLenum = 0x8D57;
pub static MAX_SAMPLES_EXT: GLenum = 0x8D57;
pub static MAX_SAMPLES_NV: GLenum = 0x8D57;
pub static TEXTURE_GEN_STR_OES: GLenum = 0x8D60;
pub static HALF_FLOAT_OES: GLenum = 0x8D61;
pub static RGB565_OES: GLenum = 0x8D62;
pub static RGB565: GLenum = 0x8D62;
pub static ETC1_RGB8_OES: GLenum = 0x8D64;
pub static TEXTURE_EXTERNAL_OES: GLenum = 0x8D65;
pub static SAMPLER_EXTERNAL_OES: GLenum = 0x8D66;
pub static TEXTURE_BINDING_EXTERNAL_OES: GLenum = 0x8D67;
pub static REQUIRED_TEXTURE_IMAGE_UNITS_OES: GLenum = 0x8D68;
pub static PRIMITIVE_RESTART_FIXED_INDEX: GLenum = 0x8D69;
pub static ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum = 0x8D6A;
pub static ANY_SAMPLES_PASSED_CONSERVATIVE_EXT: GLenum = 0x8D6A;
pub static MAX_ELEMENT_INDEX: GLenum = 0x8D6B;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT: GLenum = 0x8D6C;
pub static RGBA32UI: GLenum = 0x8D70;
pub static RGBA32UI_EXT: GLenum = 0x8D70;
pub static RGB32UI: GLenum = 0x8D71;
pub static RGB32UI_EXT: GLenum = 0x8D71;
pub static ALPHA32UI_EXT: GLenum = 0x8D72;
pub static INTENSITY32UI_EXT: GLenum = 0x8D73;
pub static LUMINANCE32UI_EXT: GLenum = 0x8D74;
pub static LUMINANCE_ALPHA32UI_EXT: GLenum = 0x8D75;
pub static RGBA16UI: GLenum = 0x8D76;
pub static RGBA16UI_EXT: GLenum = 0x8D76;
pub static RGB16UI: GLenum = 0x8D77;
pub static RGB16UI_EXT: GLenum = 0x8D77;
pub static ALPHA16UI_EXT: GLenum = 0x8D78;
pub static INTENSITY16UI_EXT: GLenum = 0x8D79;
pub static LUMINANCE16UI_EXT: GLenum = 0x8D7A;
pub static LUMINANCE_ALPHA16UI_EXT: GLenum = 0x8D7B;
pub static RGBA8UI: GLenum = 0x8D7C;
pub static RGBA8UI_EXT: GLenum = 0x8D7C;
pub static RGB8UI: GLenum = 0x8D7D;
pub static RGB8UI_EXT: GLenum = 0x8D7D;
pub static ALPHA8UI_EXT: GLenum = 0x8D7E;
pub static INTENSITY8UI_EXT: GLenum = 0x8D7F;
pub static LUMINANCE8UI_EXT: GLenum = 0x8D80;
pub static LUMINANCE_ALPHA8UI_EXT: GLenum = 0x8D81;
pub static RGBA32I: GLenum = 0x8D82;
pub static RGBA32I_EXT: GLenum = 0x8D82;
pub static RGB32I: GLenum = 0x8D83;
pub static RGB32I_EXT: GLenum = 0x8D83;
pub static ALPHA32I_EXT: GLenum = 0x8D84;
pub static INTENSITY32I_EXT: GLenum = 0x8D85;
pub static LUMINANCE32I_EXT: GLenum = 0x8D86;
pub static LUMINANCE_ALPHA32I_EXT: GLenum = 0x8D87;
pub static RGBA16I: GLenum = 0x8D88;
pub static RGBA16I_EXT: GLenum = 0x8D88;
pub static RGB16I: GLenum = 0x8D89;
pub static RGB16I_EXT: GLenum = 0x8D89;
pub static ALPHA16I_EXT: GLenum = 0x8D8A;
pub static INTENSITY16I_EXT: GLenum = 0x8D8B;
pub static LUMINANCE16I_EXT: GLenum = 0x8D8C;
pub static LUMINANCE_ALPHA16I_EXT: GLenum = 0x8D8D;
pub static RGBA8I: GLenum = 0x8D8E;
pub static RGBA8I_EXT: GLenum = 0x8D8E;
pub static RGB8I: GLenum = 0x8D8F;
pub static RGB8I_EXT: GLenum = 0x8D8F;
pub static ALPHA8I_EXT: GLenum = 0x8D90;
pub static INTENSITY8I_EXT: GLenum = 0x8D91;
pub static LUMINANCE8I_EXT: GLenum = 0x8D92;
pub static LUMINANCE_ALPHA8I_EXT: GLenum = 0x8D93;
pub static RED_INTEGER: GLenum = 0x8D94;
pub static RED_INTEGER_EXT: GLenum = 0x8D94;
pub static GREEN_INTEGER: GLenum = 0x8D95;
pub static GREEN_INTEGER_EXT: GLenum = 0x8D95;
pub static BLUE_INTEGER: GLenum = 0x8D96;
pub static BLUE_INTEGER_EXT: GLenum = 0x8D96;
pub static ALPHA_INTEGER: GLenum = 0x8D97;
pub static ALPHA_INTEGER_EXT: GLenum = 0x8D97;
pub static RGB_INTEGER: GLenum = 0x8D98;
pub static RGB_INTEGER_EXT: GLenum = 0x8D98;
pub static RGBA_INTEGER: GLenum = 0x8D99;
pub static RGBA_INTEGER_EXT: GLenum = 0x8D99;
pub static BGR_INTEGER: GLenum = 0x8D9A;
pub static BGR_INTEGER_EXT: GLenum = 0x8D9A;
pub static BGRA_INTEGER: GLenum = 0x8D9B;
pub static BGRA_INTEGER_EXT: GLenum = 0x8D9B;
pub static LUMINANCE_INTEGER_EXT: GLenum = 0x8D9C;
pub static LUMINANCE_ALPHA_INTEGER_EXT: GLenum = 0x8D9D;
pub static RGBA_INTEGER_MODE_EXT: GLenum = 0x8D9E;
pub static INT_2_10_10_10_REV: GLenum = 0x8D9F;
pub static MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV: GLenum = 0x8DA0;
pub static MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV: GLenum = 0x8DA1;
pub static VERTEX_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA2;
pub static GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA3;
pub static FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA4;
pub static MAX_PROGRAM_GENERIC_ATTRIBS_NV: GLenum = 0x8DA5;
pub static MAX_PROGRAM_GENERIC_RESULTS_NV: GLenum = 0x8DA6;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED: GLenum = 0x8DA7;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: GLenum = 0x8DA7;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: GLenum = 0x8DA7;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: GLenum = 0x8DA9;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: GLenum = 0x8DA9;
pub static LAYER_NV: GLenum = 0x8DAA;
pub static DEPTH_COMPONENT32F_NV: GLenum = 0x8DAB;
pub static DEPTH32F_STENCIL8_NV: GLenum = 0x8DAC;
pub static FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum = 0x8DAD;
pub static FLOAT_32_UNSIGNED_INT_24_8_REV_NV: GLenum = 0x8DAD;
pub static SHADER_INCLUDE_ARB: GLenum = 0x8DAE;
pub static DEPTH_BUFFER_FLOAT_MODE_NV: GLenum = 0x8DAF;
pub static FRAMEBUFFER_SRGB: GLenum = 0x8DB9;
pub static FRAMEBUFFER_SRGB_EXT: GLenum = 0x8DB9;
pub static FRAMEBUFFER_SRGB_CAPABLE_EXT: GLenum = 0x8DBA;
pub static COMPRESSED_RED_RGTC1: GLenum = 0x8DBB;
pub static COMPRESSED_RED_RGTC1_EXT: GLenum = 0x8DBB;
pub static COMPRESSED_SIGNED_RED_RGTC1: GLenum = 0x8DBC;
pub static COMPRESSED_SIGNED_RED_RGTC1_EXT: GLenum = 0x8DBC;
pub static COMPRESSED_RED_GREEN_RGTC2_EXT: GLenum = 0x8DBD;
pub static COMPRESSED_RG_RGTC2: GLenum = 0x8DBD;
pub static COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: GLenum = 0x8DBE;
pub static COMPRESSED_SIGNED_RG_RGTC2: GLenum = 0x8DBE;
pub static SAMPLER_1D_ARRAY: GLenum = 0x8DC0;
pub static SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DC0;
pub static SAMPLER_2D_ARRAY: GLenum = 0x8DC1;
pub static SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DC1;
pub static SAMPLER_BUFFER: GLenum = 0x8DC2;
pub static SAMPLER_BUFFER_EXT: GLenum = 0x8DC2;
pub static SAMPLER_1D_ARRAY_SHADOW: GLenum = 0x8DC3;
pub static SAMPLER_1D_ARRAY_SHADOW_EXT: GLenum = 0x8DC3;
pub static SAMPLER_2D_ARRAY_SHADOW: GLenum = 0x8DC4;
pub static SAMPLER_2D_ARRAY_SHADOW_EXT: GLenum = 0x8DC4;
pub static SAMPLER_2D_ARRAY_SHADOW_NV: GLenum = 0x8DC4;
pub static SAMPLER_CUBE_SHADOW: GLenum = 0x8DC5;
pub static SAMPLER_CUBE_SHADOW_EXT: GLenum = 0x8DC5;
pub static SAMPLER_CUBE_SHADOW_NV: GLenum = 0x8DC5;
pub static UNSIGNED_INT_VEC2: GLenum = 0x8DC6;
pub static UNSIGNED_INT_VEC2_EXT: GLenum = 0x8DC6;
pub static UNSIGNED_INT_VEC3: GLenum = 0x8DC7;
pub static UNSIGNED_INT_VEC3_EXT: GLenum = 0x8DC7;
pub static UNSIGNED_INT_VEC4: GLenum = 0x8DC8;
pub static UNSIGNED_INT_VEC4_EXT: GLenum = 0x8DC8;
pub static INT_SAMPLER_1D: GLenum = 0x8DC9;
pub static INT_SAMPLER_1D_EXT: GLenum = 0x8DC9;
pub static INT_SAMPLER_2D: GLenum = 0x8DCA;
pub static INT_SAMPLER_2D_EXT: GLenum = 0x8DCA;
pub static INT_SAMPLER_3D: GLenum = 0x8DCB;
pub static INT_SAMPLER_3D_EXT: GLenum = 0x8DCB;
pub static INT_SAMPLER_CUBE: GLenum = 0x8DCC;
pub static INT_SAMPLER_CUBE_EXT: GLenum = 0x8DCC;
pub static INT_SAMPLER_2D_RECT: GLenum = 0x8DCD;
pub static INT_SAMPLER_2D_RECT_EXT: GLenum = 0x8DCD;
pub static INT_SAMPLER_1D_ARRAY: GLenum = 0x8DCE;
pub static INT_SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DCE;
pub static INT_SAMPLER_2D_ARRAY: GLenum = 0x8DCF;
pub static INT_SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DCF;
pub static INT_SAMPLER_BUFFER: GLenum = 0x8DD0;
pub static INT_SAMPLER_BUFFER_EXT: GLenum = 0x8DD0;
pub static UNSIGNED_INT_SAMPLER_1D: GLenum = 0x8DD1;
pub static UNSIGNED_INT_SAMPLER_1D_EXT: GLenum = 0x8DD1;
pub static UNSIGNED_INT_SAMPLER_2D: GLenum = 0x8DD2;
pub static UNSIGNED_INT_SAMPLER_2D_EXT: GLenum = 0x8DD2;
pub static UNSIGNED_INT_SAMPLER_3D: GLenum = 0x8DD3;
pub static UNSIGNED_INT_SAMPLER_3D_EXT: GLenum = 0x8DD3;
pub static UNSIGNED_INT_SAMPLER_CUBE: GLenum = 0x8DD4;
pub static UNSIGNED_INT_SAMPLER_CUBE_EXT: GLenum = 0x8DD4;
pub static UNSIGNED_INT_SAMPLER_2D_RECT: GLenum = 0x8DD5;
pub static UNSIGNED_INT_SAMPLER_2D_RECT_EXT: GLenum = 0x8DD5;
pub static UNSIGNED_INT_SAMPLER_1D_ARRAY: GLenum = 0x8DD6;
pub static UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DD6;
pub static UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum = 0x8DD7;
pub static UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DD7;
pub static UNSIGNED_INT_SAMPLER_BUFFER: GLenum = 0x8DD8;
pub static UNSIGNED_INT_SAMPLER_BUFFER_EXT: GLenum = 0x8DD8;
pub static GEOMETRY_SHADER: GLenum = 0x8DD9;
pub static GEOMETRY_SHADER_ARB: GLenum = 0x8DD9;
pub static GEOMETRY_SHADER_EXT: GLenum = 0x8DD9;
pub static GEOMETRY_VERTICES_OUT_ARB: GLenum = 0x8DDA;
pub static GEOMETRY_VERTICES_OUT_EXT: GLenum = 0x8DDA;
pub static GEOMETRY_INPUT_TYPE_ARB: GLenum = 0x8DDB;
pub static GEOMETRY_INPUT_TYPE_EXT: GLenum = 0x8DDB;
pub static GEOMETRY_OUTPUT_TYPE_ARB: GLenum = 0x8DDC;
pub static GEOMETRY_OUTPUT_TYPE_EXT: GLenum = 0x8DDC;
pub static MAX_GEOMETRY_VARYING_COMPONENTS_ARB: GLenum = 0x8DDD;
pub static MAX_GEOMETRY_VARYING_COMPONENTS_EXT: GLenum = 0x8DDD;
pub static MAX_VERTEX_VARYING_COMPONENTS_ARB: GLenum = 0x8DDE;
pub static MAX_VERTEX_VARYING_COMPONENTS_EXT: GLenum = 0x8DDE;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_OUTPUT_VERTICES: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_OUTPUT_VERTICES_ARB: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_OUTPUT_VERTICES_EXT: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: GLenum = 0x8DE1;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: GLenum = 0x8DE1;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: GLenum = 0x8DE1;
pub static MAX_VERTEX_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE2;
pub static MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE3;
pub static MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE4;
pub static ACTIVE_SUBROUTINES: GLenum = 0x8DE5;
pub static ACTIVE_SUBROUTINE_UNIFORMS: GLenum = 0x8DE6;
pub static MAX_SUBROUTINES: GLenum = 0x8DE7;
pub static MAX_SUBROUTINE_UNIFORM_LOCATIONS: GLenum = 0x8DE8;
pub static NAMED_STRING_LENGTH_ARB: GLenum = 0x8DE9;
pub static NAMED_STRING_TYPE_ARB: GLenum = 0x8DEA;
pub static MAX_BINDABLE_UNIFORM_SIZE_EXT: GLenum = 0x8DED;
pub static UNIFORM_BUFFER_EXT: GLenum = 0x8DEE;
pub static UNIFORM_BUFFER_BINDING_EXT: GLenum = 0x8DEF;
pub static LOW_FLOAT: GLenum = 0x8DF0;
pub static MEDIUM_FLOAT: GLenum = 0x8DF1;
pub static HIGH_FLOAT: GLenum = 0x8DF2;
pub static LOW_INT: GLenum = 0x8DF3;
pub static MEDIUM_INT: GLenum = 0x8DF4;
pub static HIGH_INT: GLenum = 0x8DF5;
pub static UNSIGNED_INT_10_10_10_2_OES: GLenum = 0x8DF6;
pub static INT_10_10_10_2_OES: GLenum = 0x8DF7;
pub static SHADER_BINARY_FORMATS: GLenum = 0x8DF8;
pub static NUM_SHADER_BINARY_FORMATS: GLenum = 0x8DF9;
pub static SHADER_COMPILER: GLenum = 0x8DFA;
pub static MAX_VERTEX_UNIFORM_VECTORS: GLenum = 0x8DFB;
pub static MAX_VARYING_VECTORS: GLenum = 0x8DFC;
pub static MAX_FRAGMENT_UNIFORM_VECTORS: GLenum = 0x8DFD;
pub static RENDERBUFFER_COLOR_SAMPLES_NV: GLenum = 0x8E10;
pub static MAX_MULTISAMPLE_COVERAGE_MODES_NV: GLenum = 0x8E11;
pub static MULTISAMPLE_COVERAGE_MODES_NV: GLenum = 0x8E12;
pub static QUERY_WAIT: GLenum = 0x8E13;
pub static QUERY_WAIT_NV: GLenum = 0x8E13;
pub static QUERY_NO_WAIT: GLenum = 0x8E14;
pub static QUERY_NO_WAIT_NV: GLenum = 0x8E14;
pub static QUERY_BY_REGION_WAIT: GLenum = 0x8E15;
pub static QUERY_BY_REGION_WAIT_NV: GLenum = 0x8E15;
pub static QUERY_BY_REGION_NO_WAIT: GLenum = 0x8E16;
pub static QUERY_BY_REGION_NO_WAIT_NV: GLenum = 0x8E16;
pub static MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: GLenum = 0x8E1E;
pub static MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: GLenum = 0x8E1F;
pub static COLOR_SAMPLES_NV: GLenum = 0x8E20;
pub static TRANSFORM_FEEDBACK: GLenum = 0x8E22;
pub static TRANSFORM_FEEDBACK_NV: GLenum = 0x8E22;
pub static TRANSFORM_FEEDBACK_BUFFER_PAUSED: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_PAUSED: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_BUFFER_ACTIVE: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_ACTIVE: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_BINDING: GLenum = 0x8E25;
pub static TRANSFORM_FEEDBACK_BINDING_NV: GLenum = 0x8E25;
pub static FRAME_NV: GLenum = 0x8E26;
pub static FIELDS_NV: GLenum = 0x8E27;
pub static CURRENT_TIME_NV: GLenum = 0x8E28;
pub static TIMESTAMP: GLenum = 0x8E28;
pub static TIMESTAMP_EXT: GLenum = 0x8E28;
pub static NUM_FILL_STREAMS_NV: GLenum = 0x8E29;
pub static PRESENT_TIME_NV: GLenum = 0x8E2A;
pub static PRESENT_DURATION_NV: GLenum = 0x8E2B;
pub static DEPTH_COMPONENT16_NONLINEAR_NV: GLenum = 0x8E2C;
pub static PROGRAM_MATRIX_EXT: GLenum = 0x8E2D;
pub static TRANSPOSE_PROGRAM_MATRIX_EXT: GLenum = 0x8E2E;
pub static PROGRAM_MATRIX_STACK_DEPTH_EXT: GLenum = 0x8E2F;
pub static TEXTURE_SWIZZLE_R: GLenum = 0x8E42;
pub static TEXTURE_SWIZZLE_R_EXT: GLenum = 0x8E42;
pub static TEXTURE_SWIZZLE_G: GLenum = 0x8E43;
pub static TEXTURE_SWIZZLE_G_EXT: GLenum = 0x8E43;
pub static TEXTURE_SWIZZLE_B: GLenum = 0x8E44;
pub static TEXTURE_SWIZZLE_B_EXT: GLenum = 0x8E44;
pub static TEXTURE_SWIZZLE_A: GLenum = 0x8E45;
pub static TEXTURE_SWIZZLE_A_EXT: GLenum = 0x8E45;
pub static TEXTURE_SWIZZLE_RGBA: GLenum = 0x8E46;
pub static TEXTURE_SWIZZLE_RGBA_EXT: GLenum = 0x8E46;
pub static ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: GLenum = 0x8E47;
pub static ACTIVE_SUBROUTINE_MAX_LENGTH: GLenum = 0x8E48;
pub static ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: GLenum = 0x8E49;
pub static NUM_COMPATIBLE_SUBROUTINES: GLenum = 0x8E4A;
pub static COMPATIBLE_SUBROUTINES: GLenum = 0x8E4B;
pub static QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: GLenum = 0x8E4C;
pub static QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: GLenum = 0x8E4C;
pub static FIRST_VERTEX_CONVENTION: GLenum = 0x8E4D;
pub static FIRST_VERTEX_CONVENTION_EXT: GLenum = 0x8E4D;
pub static LAST_VERTEX_CONVENTION: GLenum = 0x8E4E;
pub static LAST_VERTEX_CONVENTION_EXT: GLenum = 0x8E4E;
pub static PROVOKING_VERTEX: GLenum = 0x8E4F;
pub static PROVOKING_VERTEX_EXT: GLenum = 0x8E4F;
pub static SAMPLE_POSITION: GLenum = 0x8E50;
pub static SAMPLE_POSITION_NV: GLenum = 0x8E50;
pub static SAMPLE_MASK: GLenum = 0x8E51;
pub static SAMPLE_MASK_NV: GLenum = 0x8E51;
pub static SAMPLE_MASK_VALUE: GLenum = 0x8E52;
pub static SAMPLE_MASK_VALUE_NV: GLenum = 0x8E52;
pub static TEXTURE_BINDING_RENDERBUFFER_NV: GLenum = 0x8E53;
pub static TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: GLenum = 0x8E54;
pub static TEXTURE_RENDERBUFFER_NV: GLenum = 0x8E55;
pub static SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E56;
pub static INT_SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E57;
pub static UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E58;
pub static MAX_SAMPLE_MASK_WORDS: GLenum = 0x8E59;
pub static MAX_SAMPLE_MASK_WORDS_NV: GLenum = 0x8E59;
pub static MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV: GLenum = 0x8E5A;
pub static MAX_GEOMETRY_SHADER_INVOCATIONS: GLenum = 0x8E5A;
pub static MIN_FRAGMENT_INTERPOLATION_OFFSET: GLenum = 0x8E5B;
pub static MIN_FRAGMENT_INTERPOLATION_OFFSET_NV: GLenum = 0x8E5B;
pub static MAX_FRAGMENT_INTERPOLATION_OFFSET: GLenum = 0x8E5C;
pub static MAX_FRAGMENT_INTERPOLATION_OFFSET_NV: GLenum = 0x8E5C;
pub static FRAGMENT_INTERPOLATION_OFFSET_BITS: GLenum = 0x8E5D;
pub static FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV: GLenum = 0x8E5D;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET: GLenum = 0x8E5E;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: GLenum = 0x8E5E;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV: GLenum = 0x8E5E;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET: GLenum = 0x8E5F;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: GLenum = 0x8E5F;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV: GLenum = 0x8E5F;
pub static MAX_TRANSFORM_FEEDBACK_BUFFERS: GLenum = 0x8E70;
pub static MAX_VERTEX_STREAMS: GLenum = 0x8E71;
pub static PATCH_VERTICES: GLenum = 0x8E72;
pub static PATCH_DEFAULT_INNER_LEVEL: GLenum = 0x8E73;
pub static PATCH_DEFAULT_OUTER_LEVEL: GLenum = 0x8E74;
pub static TESS_CONTROL_OUTPUT_VERTICES: GLenum = 0x8E75;
pub static TESS_GEN_MODE: GLenum = 0x8E76;
pub static TESS_GEN_SPACING: GLenum = 0x8E77;
pub static TESS_GEN_VERTEX_ORDER: GLenum = 0x8E78;
pub static TESS_GEN_POINT_MODE: GLenum = 0x8E79;
pub static ISOLINES: GLenum = 0x8E7A;
pub static FRACTIONAL_ODD: GLenum = 0x8E7B;
pub static FRACTIONAL_EVEN: GLenum = 0x8E7C;
pub static MAX_PATCH_VERTICES: GLenum = 0x8E7D;
pub static MAX_TESS_GEN_LEVEL: GLenum = 0x8E7E;
pub static MAX_TESS_CONTROL_UNIFORM_COMPONENTS: GLenum = 0x8E7F;
pub static MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: GLenum = 0x8E80;
pub static MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: GLenum = 0x8E81;
pub static MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: GLenum = 0x8E82;
pub static MAX_TESS_CONTROL_OUTPUT_COMPONENTS: GLenum = 0x8E83;
pub static MAX_TESS_PATCH_COMPONENTS: GLenum = 0x8E84;
pub static MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: GLenum = 0x8E85;
pub static MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: GLenum = 0x8E86;
pub static TESS_EVALUATION_SHADER: GLenum = 0x8E87;
pub static TESS_CONTROL_SHADER: GLenum = 0x8E88;
pub static MAX_TESS_CONTROL_UNIFORM_BLOCKS: GLenum = 0x8E89;
pub static MAX_TESS_EVALUATION_UNIFORM_BLOCKS: GLenum = 0x8E8A;
pub static COMPRESSED_RGBA_BPTC_UNORM_ARB: GLenum = 0x8E8C;
pub static COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: GLenum = 0x8E8D;
pub static COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: GLenum = 0x8E8E;
pub static COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: GLenum = 0x8E8F;
pub static COVERAGE_COMPONENT_NV: GLenum = 0x8ED0;
pub static COVERAGE_COMPONENT4_NV: GLenum = 0x8ED1;
pub static COVERAGE_ATTACHMENT_NV: GLenum = 0x8ED2;
pub static COVERAGE_BUFFERS_NV: GLenum = 0x8ED3;
pub static COVERAGE_SAMPLES_NV: GLenum = 0x8ED4;
pub static COVERAGE_ALL_FRAGMENTS_NV: GLenum = 0x8ED5;
pub static COVERAGE_EDGE_FRAGMENTS_NV: GLenum = 0x8ED6;
pub static COVERAGE_AUTOMATIC_NV: GLenum = 0x8ED7;
pub static BUFFER_GPU_ADDRESS_NV: GLenum = 0x8F1D;
pub static VERTEX_ATTRIB_ARRAY_UNIFIED_NV: GLenum = 0x8F1E;
pub static ELEMENT_ARRAY_UNIFIED_NV: GLenum = 0x8F1F;
pub static VERTEX_ATTRIB_ARRAY_ADDRESS_NV: GLenum = 0x8F20;
pub static VERTEX_ARRAY_ADDRESS_NV: GLenum = 0x8F21;
pub static NORMAL_ARRAY_ADDRESS_NV: GLenum = 0x8F22;
pub static COLOR_ARRAY_ADDRESS_NV: GLenum = 0x8F23;
pub static INDEX_ARRAY_ADDRESS_NV: GLenum = 0x8F24;
pub static TEXTURE_COORD_ARRAY_ADDRESS_NV: GLenum = 0x8F25;
pub static EDGE_FLAG_ARRAY_ADDRESS_NV: GLenum = 0x8F26;
pub static SECONDARY_COLOR_ARRAY_ADDRESS_NV: GLenum = 0x8F27;
pub static FOG_COORD_ARRAY_ADDRESS_NV: GLenum = 0x8F28;
pub static ELEMENT_ARRAY_ADDRESS_NV: GLenum = 0x8F29;
pub static VERTEX_ATTRIB_ARRAY_LENGTH_NV: GLenum = 0x8F2A;
pub static VERTEX_ARRAY_LENGTH_NV: GLenum = 0x8F2B;
pub static NORMAL_ARRAY_LENGTH_NV: GLenum = 0x8F2C;
pub static COLOR_ARRAY_LENGTH_NV: GLenum = 0x8F2D;
pub static INDEX_ARRAY_LENGTH_NV: GLenum = 0x8F2E;
pub static TEXTURE_COORD_ARRAY_LENGTH_NV: GLenum = 0x8F2F;
pub static EDGE_FLAG_ARRAY_LENGTH_NV: GLenum = 0x8F30;
pub static SECONDARY_COLOR_ARRAY_LENGTH_NV: GLenum = 0x8F31;
pub static FOG_COORD_ARRAY_LENGTH_NV: GLenum = 0x8F32;
pub static ELEMENT_ARRAY_LENGTH_NV: GLenum = 0x8F33;
pub static GPU_ADDRESS_NV: GLenum = 0x8F34;
pub static MAX_SHADER_BUFFER_ADDRESS_NV: GLenum = 0x8F35;
pub static COPY_READ_BUFFER: GLenum = 0x8F36;
pub static COPY_READ_BUFFER_BINDING: GLenum = 0x8F36;
pub static COPY_WRITE_BUFFER: GLenum = 0x8F37;
pub static COPY_WRITE_BUFFER_BINDING: GLenum = 0x8F37;
pub static MAX_IMAGE_UNITS: GLenum = 0x8F38;
pub static MAX_IMAGE_UNITS_EXT: GLenum = 0x8F38;
pub static MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: GLenum = 0x8F39;
pub static MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT: GLenum = 0x8F39;
pub static MAX_COMBINED_SHADER_OUTPUT_RESOURCES: GLenum = 0x8F39;
pub static IMAGE_BINDING_NAME: GLenum = 0x8F3A;
pub static IMAGE_BINDING_NAME_EXT: GLenum = 0x8F3A;
pub static IMAGE_BINDING_LEVEL: GLenum = 0x8F3B;
pub static IMAGE_BINDING_LEVEL_EXT: GLenum = 0x8F3B;
pub static IMAGE_BINDING_LAYERED: GLenum = 0x8F3C;
pub static IMAGE_BINDING_LAYERED_EXT: GLenum = 0x8F3C;
pub static IMAGE_BINDING_LAYER: GLenum = 0x8F3D;
pub static IMAGE_BINDING_LAYER_EXT: GLenum = 0x8F3D;
pub static IMAGE_BINDING_ACCESS: GLenum = 0x8F3E;
pub static IMAGE_BINDING_ACCESS_EXT: GLenum = 0x8F3E;
pub static DRAW_INDIRECT_BUFFER: GLenum = 0x8F3F;
pub static DRAW_INDIRECT_UNIFIED_NV: GLenum = 0x8F40;
pub static DRAW_INDIRECT_ADDRESS_NV: GLenum = 0x8F41;
pub static DRAW_INDIRECT_LENGTH_NV: GLenum = 0x8F42;
pub static DRAW_INDIRECT_BUFFER_BINDING: GLenum = 0x8F43;
pub static MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV: GLenum = 0x8F44;
pub static MAX_PROGRAM_SUBROUTINE_NUM_NV: GLenum = 0x8F45;
pub static DOUBLE_MAT2: GLenum = 0x8F46;
pub static DOUBLE_MAT2_EXT: GLenum = 0x8F46;
pub static DOUBLE_MAT3: GLenum = 0x8F47;
pub static DOUBLE_MAT3_EXT: GLenum = 0x8F47;
pub static DOUBLE_MAT4: GLenum = 0x8F48;
pub static DOUBLE_MAT4_EXT: GLenum = 0x8F48;
pub static DOUBLE_MAT2x3: GLenum = 0x8F49;
pub static DOUBLE_MAT2x3_EXT: GLenum = 0x8F49;
pub static DOUBLE_MAT2x4: GLenum = 0x8F4A;
pub static DOUBLE_MAT2x4_EXT: GLenum = 0x8F4A;
pub static DOUBLE_MAT3x2: GLenum = 0x8F4B;
pub static DOUBLE_MAT3x2_EXT: GLenum = 0x8F4B;
pub static DOUBLE_MAT3x4: GLenum = 0x8F4C;
pub static DOUBLE_MAT3x4_EXT: GLenum = 0x8F4C;
pub static DOUBLE_MAT4x2: GLenum = 0x8F4D;
pub static DOUBLE_MAT4x2_EXT: GLenum = 0x8F4D;
pub static DOUBLE_MAT4x3: GLenum = 0x8F4E;
pub static DOUBLE_MAT4x3_EXT: GLenum = 0x8F4E;
pub static MALI_SHADER_BINARY_ARM: GLenum = 0x8F60;
pub static MALI_PROGRAM_BINARY_ARM: GLenum = 0x8F61;
pub static RED_SNORM: GLenum = 0x8F90;
pub static RG_SNORM: GLenum = 0x8F91;
pub static RGB_SNORM: GLenum = 0x8F92;
pub static RGBA_SNORM: GLenum = 0x8F93;
pub static R8_SNORM: GLenum = 0x8F94;
pub static RG8_SNORM: GLenum = 0x8F95;
pub static RGB8_SNORM: GLenum = 0x8F96;
pub static RGBA8_SNORM: GLenum = 0x8F97;
pub static R16_SNORM: GLenum = 0x8F98;
pub static RG16_SNORM: GLenum = 0x8F99;
pub static RGB16_SNORM: GLenum = 0x8F9A;
pub static RGBA16_SNORM: GLenum = 0x8F9B;
pub static SIGNED_NORMALIZED: GLenum = 0x8F9C;
pub static PRIMITIVE_RESTART: GLenum = 0x8F9D;
pub static PRIMITIVE_RESTART_INDEX: GLenum = 0x8F9E;
pub static MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: GLenum = 0x8F9F;
pub static PERFMON_GLOBAL_MODE_QCOM: GLenum = 0x8FA0;
pub static BINNING_CONTROL_HINT_QCOM: GLenum = 0x8FB0;
pub static CPU_OPTIMIZED_QCOM: GLenum = 0x8FB1;
pub static GPU_OPTIMIZED_QCOM: GLenum = 0x8FB2;
pub static RENDER_DIRECT_TO_FRAMEBUFFER_QCOM: GLenum = 0x8FB3;
pub static GPU_DISJOINT_EXT: GLenum = 0x8FBB;
pub static SHADER_BINARY_VIV: GLenum = 0x8FC4;
pub static INT8_NV: GLenum = 0x8FE0;
pub static INT8_VEC2_NV: GLenum = 0x8FE1;
pub static INT8_VEC3_NV: GLenum = 0x8FE2;
pub static INT8_VEC4_NV: GLenum = 0x8FE3;
pub static INT16_NV: GLenum = 0x8FE4;
pub static INT16_VEC2_NV: GLenum = 0x8FE5;
pub static INT16_VEC3_NV: GLenum = 0x8FE6;
pub static INT16_VEC4_NV: GLenum = 0x8FE7;
pub static INT64_VEC2_NV: GLenum = 0x8FE9;
pub static INT64_VEC3_NV: GLenum = 0x8FEA;
pub static INT64_VEC4_NV: GLenum = 0x8FEB;
pub static UNSIGNED_INT8_NV: GLenum = 0x8FEC;
pub static UNSIGNED_INT8_VEC2_NV: GLenum = 0x8FED;
pub static UNSIGNED_INT8_VEC3_NV: GLenum = 0x8FEE;
pub static UNSIGNED_INT8_VEC4_NV: GLenum = 0x8FEF;
pub static UNSIGNED_INT16_NV: GLenum = 0x8FF0;
pub static UNSIGNED_INT16_VEC2_NV: GLenum = 0x8FF1;
pub static UNSIGNED_INT16_VEC3_NV: GLenum = 0x8FF2;
pub static UNSIGNED_INT16_VEC4_NV: GLenum = 0x8FF3;
pub static UNSIGNED_INT64_VEC2_NV: GLenum = 0x8FF5;
pub static UNSIGNED_INT64_VEC3_NV: GLenum = 0x8FF6;
pub static UNSIGNED_INT64_VEC4_NV: GLenum = 0x8FF7;
pub static FLOAT16_NV: GLenum = 0x8FF8;
pub static FLOAT16_VEC2_NV: GLenum = 0x8FF9;
pub static FLOAT16_VEC3_NV: GLenum = 0x8FFA;
pub static FLOAT16_VEC4_NV: GLenum = 0x8FFB;
pub static DOUBLE_VEC2: GLenum = 0x8FFC;
pub static DOUBLE_VEC2_EXT: GLenum = 0x8FFC;
pub static DOUBLE_VEC3: GLenum = 0x8FFD;
pub static DOUBLE_VEC3_EXT: GLenum = 0x8FFD;
pub static DOUBLE_VEC4: GLenum = 0x8FFE;
pub static DOUBLE_VEC4_EXT: GLenum = 0x8FFE;
pub static SAMPLER_BUFFER_AMD: GLenum = 0x9001;
pub static INT_SAMPLER_BUFFER_AMD: GLenum = 0x9002;
pub static UNSIGNED_INT_SAMPLER_BUFFER_AMD: GLenum = 0x9003;
pub static TESSELLATION_MODE_AMD: GLenum = 0x9004;
pub static TESSELLATION_FACTOR_AMD: GLenum = 0x9005;
pub static DISCRETE_AMD: GLenum = 0x9006;
pub static CONTINUOUS_AMD: GLenum = 0x9007;
pub static TEXTURE_CUBE_MAP_ARRAY: GLenum = 0x9009;
pub static TEXTURE_CUBE_MAP_ARRAY_ARB: GLenum = 0x9009;
pub static TEXTURE_BINDING_CUBE_MAP_ARRAY: GLenum = 0x900A;
pub static TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: GLenum = 0x900A;
pub static PROXY_TEXTURE_CUBE_MAP_ARRAY: GLenum = 0x900B;
pub static PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: GLenum = 0x900B;
pub static SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900C;
pub static SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900C;
pub static SAMPLER_CUBE_MAP_ARRAY_SHADOW: GLenum = 0x900D;
pub static SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: GLenum = 0x900D;
pub static INT_SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900E;
pub static INT_SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900E;
pub static UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900F;
pub static UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900F;
pub static ALPHA_SNORM: GLenum = 0x9010;
pub static LUMINANCE_SNORM: GLenum = 0x9011;
pub static LUMINANCE_ALPHA_SNORM: GLenum = 0x9012;
pub static INTENSITY_SNORM: GLenum = 0x9013;
pub static ALPHA8_SNORM: GLenum = 0x9014;
pub static LUMINANCE8_SNORM: GLenum = 0x9015;
pub static LUMINANCE8_ALPHA8_SNORM: GLenum = 0x9016;
pub static INTENSITY8_SNORM: GLenum = 0x9017;
pub static ALPHA16_SNORM: GLenum = 0x9018;
pub static LUMINANCE16_SNORM: GLenum = 0x9019;
pub static LUMINANCE16_ALPHA16_SNORM: GLenum = 0x901A;
pub static INTENSITY16_SNORM: GLenum = 0x901B;
pub static FACTOR_MIN_AMD: GLenum = 0x901C;
pub static FACTOR_MAX_AMD: GLenum = 0x901D;
pub static DEPTH_CLAMP_NEAR_AMD: GLenum = 0x901E;
pub static DEPTH_CLAMP_FAR_AMD: GLenum = 0x901F;
pub static VIDEO_BUFFER_NV: GLenum = 0x9020;
pub static VIDEO_BUFFER_BINDING_NV: GLenum = 0x9021;
pub static FIELD_UPPER_NV: GLenum = 0x9022;
pub static FIELD_LOWER_NV: GLenum = 0x9023;
pub static NUM_VIDEO_CAPTURE_STREAMS_NV: GLenum = 0x9024;
pub static NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV: GLenum = 0x9025;
pub static VIDEO_CAPTURE_TO_422_SUPPORTED_NV: GLenum = 0x9026;
pub static LAST_VIDEO_CAPTURE_STATUS_NV: GLenum = 0x9027;
pub static VIDEO_BUFFER_PITCH_NV: GLenum = 0x9028;
pub static VIDEO_COLOR_CONVERSION_MATRIX_NV: GLenum = 0x9029;
pub static VIDEO_COLOR_CONVERSION_MAX_NV: GLenum = 0x902A;
pub static VIDEO_COLOR_CONVERSION_MIN_NV: GLenum = 0x902B;
pub static VIDEO_COLOR_CONVERSION_OFFSET_NV: GLenum = 0x902C;
pub static VIDEO_BUFFER_INTERNAL_FORMAT_NV: GLenum = 0x902D;
pub static PARTIAL_SUCCESS_NV: GLenum = 0x902E;
pub static SUCCESS_NV: GLenum = 0x902F;
pub static FAILURE_NV: GLenum = 0x9030;
pub static YCBYCR8_422_NV: GLenum = 0x9031;
pub static YCBAYCR8A_4224_NV: GLenum = 0x9032;
pub static Z6Y10Z6CB10Z6Y10Z6CR10_422_NV: GLenum = 0x9033;
pub static Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV: GLenum = 0x9034;
pub static Z4Y12Z4CB12Z4Y12Z4CR12_422_NV: GLenum = 0x9035;
pub static Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV: GLenum = 0x9036;
pub static Z4Y12Z4CB12Z4CR12_444_NV: GLenum = 0x9037;
pub static VIDEO_CAPTURE_FRAME_WIDTH_NV: GLenum = 0x9038;
pub static VIDEO_CAPTURE_FRAME_HEIGHT_NV: GLenum = 0x9039;
pub static VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV: GLenum = 0x903A;
pub static VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV: GLenum = 0x903B;
pub static VIDEO_CAPTURE_SURFACE_ORIGIN_NV: GLenum = 0x903C;
pub static TEXTURE_COVERAGE_SAMPLES_NV: GLenum = 0x9045;
pub static TEXTURE_COLOR_SAMPLES_NV: GLenum = 0x9046;
pub static IMAGE_1D: GLenum = 0x904C;
pub static IMAGE_1D_EXT: GLenum = 0x904C;
pub static IMAGE_2D: GLenum = 0x904D;
pub static IMAGE_2D_EXT: GLenum = 0x904D;
pub static IMAGE_3D: GLenum = 0x904E;
pub static IMAGE_3D_EXT: GLenum = 0x904E;
pub static IMAGE_2D_RECT: GLenum = 0x904F;
pub static IMAGE_2D_RECT_EXT: GLenum = 0x904F;
pub static IMAGE_CUBE: GLenum = 0x9050;
pub static IMAGE_CUBE_EXT: GLenum = 0x9050;
pub static IMAGE_BUFFER: GLenum = 0x9051;
pub static IMAGE_BUFFER_EXT: GLenum = 0x9051;
pub static IMAGE_1D_ARRAY: GLenum = 0x9052;
pub static IMAGE_1D_ARRAY_EXT: GLenum = 0x9052;
pub static IMAGE_2D_ARRAY: GLenum = 0x9053;
pub static IMAGE_2D_ARRAY_EXT: GLenum = 0x9053;
pub static IMAGE_CUBE_MAP_ARRAY: GLenum = 0x9054;
pub static IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x9054;
pub static IMAGE_2D_MULTISAMPLE: GLenum = 0x9055;
pub static IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x9055;
pub static IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9056;
pub static IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x9056;
pub static INT_IMAGE_1D: GLenum = 0x9057;
pub static INT_IMAGE_1D_EXT: GLenum = 0x9057;
pub static INT_IMAGE_2D: GLenum = 0x9058;
pub static INT_IMAGE_2D_EXT: GLenum = 0x9058;
pub static INT_IMAGE_3D: GLenum = 0x9059;
pub static INT_IMAGE_3D_EXT: GLenum = 0x9059;
pub static INT_IMAGE_2D_RECT: GLenum = 0x905A;
pub static INT_IMAGE_2D_RECT_EXT: GLenum = 0x905A;
pub static INT_IMAGE_CUBE: GLenum = 0x905B;
pub static INT_IMAGE_CUBE_EXT: GLenum = 0x905B;
pub static INT_IMAGE_BUFFER: GLenum = 0x905C;
pub static INT_IMAGE_BUFFER_EXT: GLenum = 0x905C;
pub static INT_IMAGE_1D_ARRAY: GLenum = 0x905D;
pub static INT_IMAGE_1D_ARRAY_EXT: GLenum = 0x905D;
pub static INT_IMAGE_2D_ARRAY: GLenum = 0x905E;
pub static INT_IMAGE_2D_ARRAY_EXT: GLenum = 0x905E;
pub static INT_IMAGE_CUBE_MAP_ARRAY: GLenum = 0x905F;
pub static INT_IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x905F;
pub static INT_IMAGE_2D_MULTISAMPLE: GLenum = 0x9060;
pub static INT_IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x9060;
pub static INT_IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9061;
pub static INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x9061;
pub static UNSIGNED_INT_IMAGE_1D: GLenum = 0x9062;
pub static UNSIGNED_INT_IMAGE_1D_EXT: GLenum = 0x9062;
pub static UNSIGNED_INT_IMAGE_2D: GLenum = 0x9063;
pub static UNSIGNED_INT_IMAGE_2D_EXT: GLenum = 0x9063;
pub static UNSIGNED_INT_IMAGE_3D: GLenum = 0x9064;
pub static UNSIGNED_INT_IMAGE_3D_EXT: GLenum = 0x9064;
pub static UNSIGNED_INT_IMAGE_2D_RECT: GLenum = 0x9065;
pub static UNSIGNED_INT_IMAGE_2D_RECT_EXT: GLenum = 0x9065;
pub static UNSIGNED_INT_IMAGE_CUBE: GLenum = 0x9066;
pub static UNSIGNED_INT_IMAGE_CUBE_EXT: GLenum = 0x9066;
pub static UNSIGNED_INT_IMAGE_BUFFER: GLenum = 0x9067;
pub static UNSIGNED_INT_IMAGE_BUFFER_EXT: GLenum = 0x9067;
pub static UNSIGNED_INT_IMAGE_1D_ARRAY: GLenum = 0x9068;
pub static UNSIGNED_INT_IMAGE_1D_ARRAY_EXT: GLenum = 0x9068;
pub static UNSIGNED_INT_IMAGE_2D_ARRAY: GLenum = 0x9069;
pub static UNSIGNED_INT_IMAGE_2D_ARRAY_EXT: GLenum = 0x9069;
pub static UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: GLenum = 0x906A;
pub static UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x906A;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: GLenum = 0x906B;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x906B;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x906C;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x906C;
pub static MAX_IMAGE_SAMPLES: GLenum = 0x906D;
pub static MAX_IMAGE_SAMPLES_EXT: GLenum = 0x906D;
pub static IMAGE_BINDING_FORMAT: GLenum = 0x906E;
pub static IMAGE_BINDING_FORMAT_EXT: GLenum = 0x906E;
pub static RGB10_A2UI: GLenum = 0x906F;
pub static PATH_FORMAT_SVG_NV: GLenum = 0x9070;
pub static PATH_FORMAT_PS_NV: GLenum = 0x9071;
pub static STANDARD_FONT_NAME_NV: GLenum = 0x9072;
pub static SYSTEM_FONT_NAME_NV: GLenum = 0x9073;
pub static FILE_NAME_NV: GLenum = 0x9074;
pub static PATH_STROKE_WIDTH_NV: GLenum = 0x9075;
pub static PATH_END_CAPS_NV: GLenum = 0x9076;
pub static PATH_INITIAL_END_CAP_NV: GLenum = 0x9077;
pub static PATH_TERMINAL_END_CAP_NV: GLenum = 0x9078;
pub static PATH_JOIN_STYLE_NV: GLenum = 0x9079;
pub static PATH_MITER_LIMIT_NV: GLenum = 0x907A;
pub static PATH_DASH_CAPS_NV: GLenum = 0x907B;
pub static PATH_INITIAL_DASH_CAP_NV: GLenum = 0x907C;
pub static PATH_TERMINAL_DASH_CAP_NV: GLenum = 0x907D;
pub static PATH_DASH_OFFSET_NV: GLenum = 0x907E;
pub static PATH_CLIENT_LENGTH_NV: GLenum = 0x907F;
pub static PATH_FILL_MODE_NV: GLenum = 0x9080;
pub static PATH_FILL_MASK_NV: GLenum = 0x9081;
pub static PATH_FILL_COVER_MODE_NV: GLenum = 0x9082;
pub static PATH_STROKE_COVER_MODE_NV: GLenum = 0x9083;
pub static PATH_STROKE_MASK_NV: GLenum = 0x9084;
pub static COUNT_UP_NV: GLenum = 0x9088;
pub static COUNT_DOWN_NV: GLenum = 0x9089;
pub static PATH_OBJECT_BOUNDING_BOX_NV: GLenum = 0x908A;
pub static CONVEX_HULL_NV: GLenum = 0x908B;
pub static BOUNDING_BOX_NV: GLenum = 0x908D;
pub static TRANSLATE_X_NV: GLenum = 0x908E;
pub static TRANSLATE_Y_NV: GLenum = 0x908F;
pub static TRANSLATE_2D_NV: GLenum = 0x9090;
pub static TRANSLATE_3D_NV: GLenum = 0x9091;
pub static AFFINE_2D_NV: GLenum = 0x9092;
pub static AFFINE_3D_NV: GLenum = 0x9094;
pub static TRANSPOSE_AFFINE_2D_NV: GLenum = 0x9096;
pub static TRANSPOSE_AFFINE_3D_NV: GLenum = 0x9098;
pub static UTF8_NV: GLenum = 0x909A;
pub static UTF16_NV: GLenum = 0x909B;
pub static BOUNDING_BOX_OF_BOUNDING_BOXES_NV: GLenum = 0x909C;
pub static PATH_COMMAND_COUNT_NV: GLenum = 0x909D;
pub static PATH_COORD_COUNT_NV: GLenum = 0x909E;
pub static PATH_DASH_ARRAY_COUNT_NV: GLenum = 0x909F;
pub static PATH_COMPUTED_LENGTH_NV: GLenum = 0x90A0;
pub static PATH_FILL_BOUNDING_BOX_NV: GLenum = 0x90A1;
pub static PATH_STROKE_BOUNDING_BOX_NV: GLenum = 0x90A2;
pub static SQUARE_NV: GLenum = 0x90A3;
pub static ROUND_NV: GLenum = 0x90A4;
pub static TRIANGULAR_NV: GLenum = 0x90A5;
pub static BEVEL_NV: GLenum = 0x90A6;
pub static MITER_REVERT_NV: GLenum = 0x90A7;
pub static MITER_TRUNCATE_NV: GLenum = 0x90A8;
pub static SKIP_MISSING_GLYPH_NV: GLenum = 0x90A9;
pub static USE_MISSING_GLYPH_NV: GLenum = 0x90AA;
pub static PATH_ERROR_POSITION_NV: GLenum = 0x90AB;
pub static PATH_FOG_GEN_MODE_NV: GLenum = 0x90AC;
pub static ACCUM_ADJACENT_PAIRS_NV: GLenum = 0x90AD;
pub static ADJACENT_PAIRS_NV: GLenum = 0x90AE;
pub static FIRST_TO_REST_NV: GLenum = 0x90AF;
pub static PATH_GEN_MODE_NV: GLenum = 0x90B0;
pub static PATH_GEN_COEFF_NV: GLenum = 0x90B1;
pub static PATH_GEN_COLOR_FORMAT_NV: GLenum = 0x90B2;
pub static PATH_GEN_COMPONENTS_NV: GLenum = 0x90B3;
pub static PATH_DASH_OFFSET_RESET_NV: GLenum = 0x90B4;
pub static MOVE_TO_RESETS_NV: GLenum = 0x90B5;
pub static MOVE_TO_CONTINUES_NV: GLenum = 0x90B6;
pub static PATH_STENCIL_FUNC_NV: GLenum = 0x90B7;
pub static PATH_STENCIL_REF_NV: GLenum = 0x90B8;
pub static PATH_STENCIL_VALUE_MASK_NV: GLenum = 0x90B9;
pub static SCALED_RESOLVE_FASTEST_EXT: GLenum = 0x90BA;
pub static SCALED_RESOLVE_NICEST_EXT: GLenum = 0x90BB;
pub static MIN_MAP_BUFFER_ALIGNMENT: GLenum = 0x90BC;
pub static PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: GLenum = 0x90BD;
pub static PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: GLenum = 0x90BE;
pub static PATH_COVER_DEPTH_FUNC_NV: GLenum = 0x90BF;
pub static IMAGE_FORMAT_COMPATIBILITY_TYPE: GLenum = 0x90C7;
pub static IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: GLenum = 0x90C8;
pub static IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: GLenum = 0x90C9;
pub static MAX_VERTEX_IMAGE_UNIFORMS: GLenum = 0x90CA;
pub static MAX_TESS_CONTROL_IMAGE_UNIFORMS: GLenum = 0x90CB;
pub static MAX_TESS_EVALUATION_IMAGE_UNIFORMS: GLenum = 0x90CC;
pub static MAX_GEOMETRY_IMAGE_UNIFORMS: GLenum = 0x90CD;
pub static MAX_FRAGMENT_IMAGE_UNIFORMS: GLenum = 0x90CE;
pub static MAX_COMBINED_IMAGE_UNIFORMS: GLenum = 0x90CF;
pub static MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV: GLenum = 0x90D0;
pub static MAX_DEEP_3D_TEXTURE_DEPTH_NV: GLenum = 0x90D1;
pub static SHADER_STORAGE_BUFFER: GLenum = 0x90D2;
pub static SHADER_STORAGE_BUFFER_BINDING: GLenum = 0x90D3;
pub static SHADER_STORAGE_BUFFER_START: GLenum = 0x90D4;
pub static SHADER_STORAGE_BUFFER_SIZE: GLenum = 0x90D5;
pub static MAX_VERTEX_SHADER_STORAGE_BLOCKS: GLenum = 0x90D6;
pub static MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: GLenum = 0x90D7;
pub static MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: GLenum = 0x90D8;
pub static MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: GLenum = 0x90D9;
pub static MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: GLenum = 0x90DA;
pub static MAX_COMPUTE_SHADER_STORAGE_BLOCKS: GLenum = 0x90DB;
pub static MAX_COMBINED_SHADER_STORAGE_BLOCKS: GLenum = 0x90DC;
pub static MAX_SHADER_STORAGE_BUFFER_BINDINGS: GLenum = 0x90DD;
pub static MAX_SHADER_STORAGE_BLOCK_SIZE: GLenum = 0x90DE;
pub static SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x90DF;
pub static SYNC_X11_FENCE_EXT: GLenum = 0x90E1;
pub static DEPTH_STENCIL_TEXTURE_MODE: GLenum = 0x90EA;
pub static MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: GLenum = 0x90EB;
pub static MAX_COMPUTE_LOCAL_INVOCATIONS: GLenum = 0x90EB;
pub static UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x90EC;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x90ED;
pub static DISPATCH_INDIRECT_BUFFER: GLenum = 0x90EE;
pub static DISPATCH_INDIRECT_BUFFER_BINDING: GLenum = 0x90EF;
pub static COLOR_ATTACHMENT_EXT: GLenum = 0x90F0;
pub static MULTIVIEW_EXT: GLenum = 0x90F1;
pub static MAX_MULTIVIEW_BUFFERS_EXT: GLenum = 0x90F2;
pub static COMPUTE_PROGRAM_NV: GLenum = 0x90FB;
pub static COMPUTE_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x90FC;
pub static TEXTURE_2D_MULTISAMPLE: GLenum = 0x9100;
pub static PROXY_TEXTURE_2D_MULTISAMPLE: GLenum = 0x9101;
pub static TEXTURE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9102;
pub static PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9103;
pub static TEXTURE_BINDING_2D_MULTISAMPLE: GLenum = 0x9104;
pub static TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: GLenum = 0x9105;
pub static TEXTURE_SAMPLES: GLenum = 0x9106;
pub static TEXTURE_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9107;
pub static SAMPLER_2D_MULTISAMPLE: GLenum = 0x9108;
pub static INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x9109;
pub static UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x910A;
pub static SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910B;
pub static INT_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910C;
pub static UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910D;
pub static MAX_COLOR_TEXTURE_SAMPLES: GLenum = 0x910E;
pub static MAX_DEPTH_TEXTURE_SAMPLES: GLenum = 0x910F;
pub static MAX_INTEGER_SAMPLES: GLenum = 0x9110;
pub static MAX_SERVER_WAIT_TIMEOUT: GLenum = 0x9111;
pub static MAX_SERVER_WAIT_TIMEOUT_APPLE: GLenum = 0x9111;
pub static OBJECT_TYPE: GLenum = 0x9112;
pub static OBJECT_TYPE_APPLE: GLenum = 0x9112;
pub static SYNC_CONDITION: GLenum = 0x9113;
pub static SYNC_CONDITION_APPLE: GLenum = 0x9113;
pub static SYNC_STATUS: GLenum = 0x9114;
pub static SYNC_STATUS_APPLE: GLenum = 0x9114;
pub static SYNC_FLAGS: GLenum = 0x9115;
pub static SYNC_FLAGS_APPLE: GLenum = 0x9115;
pub static SYNC_FENCE: GLenum = 0x9116;
pub static SYNC_FENCE_APPLE: GLenum = 0x9116;
pub static SYNC_GPU_COMMANDS_COMPLETE: GLenum = 0x9117;
pub static SYNC_GPU_COMMANDS_COMPLETE_APPLE: GLenum = 0x9117;
pub static UNSIGNALED: GLenum = 0x9118;
pub static UNSIGNALED_APPLE: GLenum = 0x9118;
pub static SIGNALED: GLenum = 0x9119;
pub static SIGNALED_APPLE: GLenum = 0x9119;
pub static ALREADY_SIGNALED: GLenum = 0x911A;
pub static ALREADY_SIGNALED_APPLE: GLenum = 0x911A;
pub static TIMEOUT_EXPIRED: GLenum = 0x911B;
pub static TIMEOUT_EXPIRED_APPLE: GLenum = 0x911B;
pub static CONDITION_SATISFIED: GLenum = 0x911C;
pub static CONDITION_SATISFIED_APPLE: GLenum = 0x911C;
pub static WAIT_FAILED: GLenum = 0x911D;
pub static WAIT_FAILED_APPLE: GLenum = 0x911D;
pub static BUFFER_ACCESS_FLAGS: GLenum = 0x911F;
pub static BUFFER_MAP_LENGTH: GLenum = 0x9120;
pub static BUFFER_MAP_OFFSET: GLenum = 0x9121;
pub static MAX_VERTEX_OUTPUT_COMPONENTS: GLenum = 0x9122;
pub static MAX_GEOMETRY_INPUT_COMPONENTS: GLenum = 0x9123;
pub static MAX_GEOMETRY_OUTPUT_COMPONENTS: GLenum = 0x9124;
pub static MAX_FRAGMENT_INPUT_COMPONENTS: GLenum = 0x9125;
pub static CONTEXT_PROFILE_MASK: GLenum = 0x9126;
pub static UNPACK_COMPRESSED_BLOCK_WIDTH: GLenum = 0x9127;
pub static UNPACK_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x9128;
pub static UNPACK_COMPRESSED_BLOCK_DEPTH: GLenum = 0x9129;
pub static UNPACK_COMPRESSED_BLOCK_SIZE: GLenum = 0x912A;
pub static PACK_COMPRESSED_BLOCK_WIDTH: GLenum = 0x912B;
pub static PACK_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x912C;
pub static PACK_COMPRESSED_BLOCK_DEPTH: GLenum = 0x912D;
pub static PACK_COMPRESSED_BLOCK_SIZE: GLenum = 0x912E;
pub static TEXTURE_IMMUTABLE_FORMAT: GLenum = 0x912F;
pub static SGX_PROGRAM_BINARY_IMG: GLenum = 0x9130;
pub static RENDERBUFFER_SAMPLES_IMG: GLenum = 0x9133;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG: GLenum = 0x9134;
pub static MAX_SAMPLES_IMG: GLenum = 0x9135;
pub static TEXTURE_SAMPLES_IMG: GLenum = 0x9136;
pub static COMPRESSED_RGBA_PVRTC_2BPPV2_IMG: GLenum = 0x9137;
pub static COMPRESSED_RGBA_PVRTC_4BPPV2_IMG: GLenum = 0x9138;
pub static MAX_DEBUG_MESSAGE_LENGTH: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_AMD: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_ARB: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_KHR: GLenum = 0x9143;
pub static MAX_DEBUG_LOGGED_MESSAGES: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_AMD: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_ARB: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_KHR: GLenum = 0x9144;
pub static DEBUG_LOGGED_MESSAGES: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_AMD: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_ARB: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_KHR: GLenum = 0x9145;
pub static DEBUG_SEVERITY_HIGH: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_AMD: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_ARB: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_KHR: GLenum = 0x9146;
pub static DEBUG_SEVERITY_MEDIUM: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_AMD: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_ARB: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_KHR: GLenum = 0x9147;
pub static DEBUG_SEVERITY_LOW: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_AMD: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_ARB: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_KHR: GLenum = 0x9148;
pub static DEBUG_CATEGORY_API_ERROR_AMD: GLenum = 0x9149;
pub static DEBUG_CATEGORY_WINDOW_SYSTEM_AMD: GLenum = 0x914A;
pub static DEBUG_CATEGORY_DEPRECATION_AMD: GLenum = 0x914B;
pub static DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD: GLenum = 0x914C;
pub static DEBUG_CATEGORY_PERFORMANCE_AMD: GLenum = 0x914D;
pub static DEBUG_CATEGORY_SHADER_COMPILER_AMD: GLenum = 0x914E;
pub static DEBUG_CATEGORY_APPLICATION_AMD: GLenum = 0x914F;
pub static DEBUG_CATEGORY_OTHER_AMD: GLenum = 0x9150;
pub static BUFFER_OBJECT_EXT: GLenum = 0x9151;
pub static DATA_BUFFER_AMD: GLenum = 0x9151;
pub static PERFORMANCE_MONITOR_AMD: GLenum = 0x9152;
pub static QUERY_OBJECT_AMD: GLenum = 0x9153;
pub static QUERY_OBJECT_EXT: GLenum = 0x9153;
pub static VERTEX_ARRAY_OBJECT_AMD: GLenum = 0x9154;
pub static VERTEX_ARRAY_OBJECT_EXT: GLenum = 0x9154;
pub static SAMPLER_OBJECT_AMD: GLenum = 0x9155;
pub static EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD: GLenum = 0x9160;
pub static QUERY_BUFFER: GLenum = 0x9192;
pub static QUERY_BUFFER_AMD: GLenum = 0x9192;
pub static QUERY_BUFFER_BINDING: GLenum = 0x9193;
pub static QUERY_BUFFER_BINDING_AMD: GLenum = 0x9193;
pub static QUERY_RESULT_NO_WAIT: GLenum = 0x9194;
pub static QUERY_RESULT_NO_WAIT_AMD: GLenum = 0x9194;
pub static VIRTUAL_PAGE_SIZE_X_ARB: GLenum = 0x9195;
pub static VIRTUAL_PAGE_SIZE_X_AMD: GLenum = 0x9195;
pub static VIRTUAL_PAGE_SIZE_Y_ARB: GLenum = 0x9196;
pub static VIRTUAL_PAGE_SIZE_Y_AMD: GLenum = 0x9196;
pub static VIRTUAL_PAGE_SIZE_Z_ARB: GLenum = 0x9197;
pub static VIRTUAL_PAGE_SIZE_Z_AMD: GLenum = 0x9197;
pub static MAX_SPARSE_TEXTURE_SIZE_ARB: GLenum = 0x9198;
pub static MAX_SPARSE_TEXTURE_SIZE_AMD: GLenum = 0x9198;
pub static MAX_SPARSE_3D_TEXTURE_SIZE_ARB: GLenum = 0x9199;
pub static MAX_SPARSE_3D_TEXTURE_SIZE_AMD: GLenum = 0x9199;
pub static MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: GLenum = 0x919A;
pub static MAX_SPARSE_ARRAY_TEXTURE_LAYERS: GLenum = 0x919A;
pub static MIN_SPARSE_LEVEL_ARB: GLenum = 0x919B;
pub static MIN_SPARSE_LEVEL_AMD: GLenum = 0x919B;
pub static MIN_LOD_WARNING_AMD: GLenum = 0x919C;
pub static TEXTURE_BUFFER_OFFSET: GLenum = 0x919D;
pub static TEXTURE_BUFFER_SIZE: GLenum = 0x919E;
pub static TEXTURE_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x919F;
pub static VERTEX_ELEMENT_SWIZZLE_AMD: GLenum = 0x91A4;
pub static VERTEX_ID_SWIZZLE_AMD: GLenum = 0x91A5;
pub static TEXTURE_SPARSE_ARB: GLenum = 0x91A6;
pub static VIRTUAL_PAGE_SIZE_INDEX_ARB: GLenum = 0x91A7;
pub static NUM_VIRTUAL_PAGE_SIZES_ARB: GLenum = 0x91A8;
pub static SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: GLenum = 0x91A9;
pub static COMPUTE_SHADER: GLenum = 0x91B9;
pub static MAX_COMPUTE_UNIFORM_BLOCKS: GLenum = 0x91BB;
pub static MAX_COMPUTE_TEXTURE_IMAGE_UNITS: GLenum = 0x91BC;
pub static MAX_COMPUTE_IMAGE_UNIFORMS: GLenum = 0x91BD;
pub static MAX_COMPUTE_WORK_GROUP_COUNT: GLenum = 0x91BE;
pub static MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: GLenum = 0x91BF;
pub static MAX_COMPUTE_WORK_GROUP_SIZE: GLenum = 0x91BF;
pub static UNPACK_FLIP_Y_WEBGL: GLenum = 0x9240;
pub static UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum = 0x9241;
pub static CONTEXT_LOST_WEBGL: GLenum = 0x9242;
pub static UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum = 0x9243;
pub static BROWSER_DEFAULT_WEBGL: GLenum = 0x9244;
pub static SHADER_BINARY_DMP: GLenum = 0x9250;
pub static GCCSO_SHADER_BINARY_FJ: GLenum = 0x9260;
pub static COMPRESSED_R11_EAC: GLenum = 0x9270;
pub static COMPRESSED_R11_EAC_OES: GLenum = 0x9270;
pub static COMPRESSED_SIGNED_R11_EAC: GLenum = 0x9271;
pub static COMPRESSED_SIGNED_R11_EAC_OES: GLenum = 0x9271;
pub static COMPRESSED_RG11_EAC: GLenum = 0x9272;
pub static COMPRESSED_RG11_EAC_OES: GLenum = 0x9272;
pub static COMPRESSED_SIGNED_RG11_EAC: GLenum = 0x9273;
pub static COMPRESSED_SIGNED_RG11_EAC_OES: GLenum = 0x9273;
pub static COMPRESSED_RGB8_ETC2: GLenum = 0x9274;
pub static COMPRESSED_RGB8_ETC2_OES: GLenum = 0x9274;
pub static COMPRESSED_SRGB8_ETC2: GLenum = 0x9275;
pub static COMPRESSED_SRGB8_ETC2_OES: GLenum = 0x9275;
pub static COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = 0x9276;
pub static COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES: GLenum = 0x9276;
pub static COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = 0x9277;
pub static COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES: GLenum = 0x9277;
pub static COMPRESSED_RGBA8_ETC2_EAC: GLenum = 0x9278;
pub static COMPRESSED_RGBA8_ETC2_EAC_OES: GLenum = 0x9278;
pub static COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GLenum = 0x9279;
pub static COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES: GLenum = 0x9279;
pub static BLEND_PREMULTIPLIED_SRC_NV: GLenum = 0x9280;
pub static BLEND_OVERLAP_NV: GLenum = 0x9281;
pub static UNCORRELATED_NV: GLenum = 0x9282;
pub static DISJOINT_NV: GLenum = 0x9283;
pub static CONJOINT_NV: GLenum = 0x9284;
pub static BLEND_ADVANCED_COHERENT_NV: GLenum = 0x9285;
pub static SRC_NV: GLenum = 0x9286;
pub static DST_NV: GLenum = 0x9287;
pub static SRC_OVER_NV: GLenum = 0x9288;
pub static DST_OVER_NV: GLenum = 0x9289;
pub static SRC_IN_NV: GLenum = 0x928A;
pub static DST_IN_NV: GLenum = 0x928B;
pub static SRC_OUT_NV: GLenum = 0x928C;
pub static DST_OUT_NV: GLenum = 0x928D;
pub static SRC_ATOP_NV: GLenum = 0x928E;
pub static DST_ATOP_NV: GLenum = 0x928F;
pub static PLUS_NV: GLenum = 0x9291;
pub static PLUS_DARKER_NV: GLenum = 0x9292;
pub static MULTIPLY_NV: GLenum = 0x9294;
pub static SCREEN_NV: GLenum = 0x9295;
pub static OVERLAY_NV: GLenum = 0x9296;
pub static DARKEN_NV: GLenum = 0x9297;
pub static LIGHTEN_NV: GLenum = 0x9298;
pub static COLORDODGE_NV: GLenum = 0x9299;
pub static COLORBURN_NV: GLenum = 0x929A;
pub static HARDLIGHT_NV: GLenum = 0x929B;
pub static SOFTLIGHT_NV: GLenum = 0x929C;
pub static DIFFERENCE_NV: GLenum = 0x929E;
pub static MINUS_NV: GLenum = 0x929F;
pub static EXCLUSION_NV: GLenum = 0x92A0;
pub static CONTRAST_NV: GLenum = 0x92A1;
pub static INVERT_RGB_NV: GLenum = 0x92A3;
pub static LINEARDODGE_NV: GLenum = 0x92A4;
pub static LINEARBURN_NV: GLenum = 0x92A5;
pub static VIVIDLIGHT_NV: GLenum = 0x92A6;
pub static LINEARLIGHT_NV: GLenum = 0x92A7;
pub static PINLIGHT_NV: GLenum = 0x92A8;
pub static HARDMIX_NV: GLenum = 0x92A9;
pub static HSL_HUE_NV: GLenum = 0x92AD;
pub static HSL_SATURATION_NV: GLenum = 0x92AE;
pub static HSL_COLOR_NV: GLenum = 0x92AF;
pub static HSL_LUMINOSITY_NV: GLenum = 0x92B0;
pub static PLUS_CLAMPED_NV: GLenum = 0x92B1;
pub static PLUS_CLAMPED_ALPHA_NV: GLenum = 0x92B2;
pub static MINUS_CLAMPED_NV: GLenum = 0x92B3;
pub static INVERT_OVG_NV: GLenum = 0x92B4;
pub static ATOMIC_COUNTER_BUFFER: GLenum = 0x92C0;
pub static ATOMIC_COUNTER_BUFFER_BINDING: GLenum = 0x92C1;
pub static ATOMIC_COUNTER_BUFFER_START: GLenum = 0x92C2;
pub static ATOMIC_COUNTER_BUFFER_SIZE: GLenum = 0x92C3;
pub static ATOMIC_COUNTER_BUFFER_DATA_SIZE: GLenum = 0x92C4;
pub static ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: GLenum = 0x92C5;
pub static ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: GLenum = 0x92C6;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x92C7;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x92C8;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x92C9;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x92CA;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x92CB;
pub static MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CC;
pub static MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CD;
pub static MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CE;
pub static MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CF;
pub static MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D0;
pub static MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D1;
pub static MAX_VERTEX_ATOMIC_COUNTERS: GLenum = 0x92D2;
pub static MAX_TESS_CONTROL_ATOMIC_COUNTERS: GLenum = 0x92D3;
pub static MAX_TESS_EVALUATION_ATOMIC_COUNTERS: GLenum = 0x92D4;
pub static MAX_GEOMETRY_ATOMIC_COUNTERS: GLenum = 0x92D5;
pub static MAX_FRAGMENT_ATOMIC_COUNTERS: GLenum = 0x92D6;
pub static MAX_COMBINED_ATOMIC_COUNTERS: GLenum = 0x92D7;
pub static MAX_ATOMIC_COUNTER_BUFFER_SIZE: GLenum = 0x92D8;
pub static ACTIVE_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D9;
pub static UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: GLenum = 0x92DA;
pub static UNSIGNED_INT_ATOMIC_COUNTER: GLenum = 0x92DB;
pub static MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: GLenum = 0x92DC;
pub static DEBUG_OUTPUT: GLenum = 0x92E0;
pub static DEBUG_OUTPUT_KHR: GLenum = 0x92E0;
pub static UNIFORM: GLenum = 0x92E1;
pub static UNIFORM_BLOCK: GLenum = 0x92E2;
pub static PROGRAM_INPUT: GLenum = 0x92E3;
pub static PROGRAM_OUTPUT: GLenum = 0x92E4;
pub static BUFFER_VARIABLE: GLenum = 0x92E5;
pub static SHADER_STORAGE_BLOCK: GLenum = 0x92E6;
pub static IS_PER_PATCH: GLenum = 0x92E7;
pub static VERTEX_SUBROUTINE: GLenum = 0x92E8;
pub static TESS_CONTROL_SUBROUTINE: GLenum = 0x92E9;
pub static TESS_EVALUATION_SUBROUTINE: GLenum = 0x92EA;
pub static GEOMETRY_SUBROUTINE: GLenum = 0x92EB;
pub static FRAGMENT_SUBROUTINE: GLenum = 0x92EC;
pub static COMPUTE_SUBROUTINE: GLenum = 0x92ED;
pub static VERTEX_SUBROUTINE_UNIFORM: GLenum = 0x92EE;
pub static TESS_CONTROL_SUBROUTINE_UNIFORM: GLenum = 0x92EF;
pub static TESS_EVALUATION_SUBROUTINE_UNIFORM: GLenum = 0x92F0;
pub static GEOMETRY_SUBROUTINE_UNIFORM: GLenum = 0x92F1;
pub static FRAGMENT_SUBROUTINE_UNIFORM: GLenum = 0x92F2;
pub static COMPUTE_SUBROUTINE_UNIFORM: GLenum = 0x92F3;
pub static TRANSFORM_FEEDBACK_VARYING: GLenum = 0x92F4;
pub static ACTIVE_RESOURCES: GLenum = 0x92F5;
pub static MAX_NAME_LENGTH: GLenum = 0x92F6;
pub static MAX_NUM_ACTIVE_VARIABLES: GLenum = 0x92F7;
pub static MAX_NUM_COMPATIBLE_SUBROUTINES: GLenum = 0x92F8;
pub static NAME_LENGTH: GLenum = 0x92F9;
pub static TYPE: GLenum = 0x92FA;
pub static ARRAY_SIZE: GLenum = 0x92FB;
pub static OFFSET: GLenum = 0x92FC;
pub static BLOCK_INDEX: GLenum = 0x92FD;
pub static ARRAY_STRIDE: GLenum = 0x92FE;
pub static MATRIX_STRIDE: GLenum = 0x92FF;
pub static IS_ROW_MAJOR: GLenum = 0x9300;
pub static ATOMIC_COUNTER_BUFFER_INDEX: GLenum = 0x9301;
pub static BUFFER_BINDING: GLenum = 0x9302;
pub static BUFFER_DATA_SIZE: GLenum = 0x9303;
pub static NUM_ACTIVE_VARIABLES: GLenum = 0x9304;
pub static ACTIVE_VARIABLES: GLenum = 0x9305;
pub static REFERENCED_BY_VERTEX_SHADER: GLenum = 0x9306;
pub static REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x9307;
pub static REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x9308;
pub static REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x9309;
pub static REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x930A;
pub static REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x930B;
pub static TOP_LEVEL_ARRAY_SIZE: GLenum = 0x930C;
pub static TOP_LEVEL_ARRAY_STRIDE: GLenum = 0x930D;
pub static LOCATION: GLenum = 0x930E;
pub static LOCATION_INDEX: GLenum = 0x930F;
pub static FRAMEBUFFER_DEFAULT_WIDTH: GLenum = 0x9310;
pub static FRAMEBUFFER_DEFAULT_HEIGHT: GLenum = 0x9311;
pub static FRAMEBUFFER_DEFAULT_LAYERS: GLenum = 0x9312;
pub static FRAMEBUFFER_DEFAULT_SAMPLES: GLenum = 0x9313;
pub static FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9314;
pub static MAX_FRAMEBUFFER_WIDTH: GLenum = 0x9315;
pub static MAX_FRAMEBUFFER_HEIGHT: GLenum = 0x9316;
pub static MAX_FRAMEBUFFER_LAYERS: GLenum = 0x9317;
pub static MAX_FRAMEBUFFER_SAMPLES: GLenum = 0x9318;
pub static MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: GLenum = 0x9344;
pub static MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: GLenum = 0x9345;
pub static LOCATION_COMPONENT: GLenum = 0x934A;
pub static TRANSFORM_FEEDBACK_BUFFER_INDEX: GLenum = 0x934B;
pub static TRANSFORM_FEEDBACK_BUFFER_STRIDE: GLenum = 0x934C;
pub static CLEAR_TEXTURE: GLenum = 0x9365;
pub static NUM_SAMPLE_COUNTS: GLenum = 0x9380;
pub static TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE: GLenum = 0x93A0;
pub static TEXTURE_USAGE_ANGLE: GLenum = 0x93A2;
pub static FRAMEBUFFER_ATTACHMENT_ANGLE: GLenum = 0x93A3;
pub static PACK_REVERSE_ROW_ORDER_ANGLE: GLenum = 0x93A4;
pub static PROGRAM_BINARY_ANGLE: GLenum = 0x93A6;
pub static COMPRESSED_RGBA_ASTC_4x4_KHR: GLenum = 0x93B0;
pub static COMPRESSED_RGBA_ASTC_5x4_KHR: GLenum = 0x93B1;
pub static COMPRESSED_RGBA_ASTC_5x5_KHR: GLenum = 0x93B2;
pub static COMPRESSED_RGBA_ASTC_6x5_KHR: GLenum = 0x93B3;
pub static COMPRESSED_RGBA_ASTC_6x6_KHR: GLenum = 0x93B4;
pub static COMPRESSED_RGBA_ASTC_8x5_KHR: GLenum = 0x93B5;
pub static COMPRESSED_RGBA_ASTC_8x6_KHR: GLenum = 0x93B6;
pub static COMPRESSED_RGBA_ASTC_8x8_KHR: GLenum = 0x93B7;
pub static COMPRESSED_RGBA_ASTC_10x5_KHR: GLenum = 0x93B8;
pub static COMPRESSED_RGBA_ASTC_10x6_KHR: GLenum = 0x93B9;
pub static COMPRESSED_RGBA_ASTC_10x8_KHR: GLenum = 0x93BA;
pub static COMPRESSED_RGBA_ASTC_10x10_KHR: GLenum = 0x93BB;
pub static COMPRESSED_RGBA_ASTC_12x10_KHR: GLenum = 0x93BC;
pub static COMPRESSED_RGBA_ASTC_12x12_KHR: GLenum = 0x93BD;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GLenum = 0x93D0;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GLenum = 0x93D1;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GLenum = 0x93D2;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GLenum = 0x93D3;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GLenum = 0x93D4;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GLenum = 0x93D5;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GLenum = 0x93D6;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GLenum = 0x93D7;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GLenum = 0x93D8;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GLenum = 0x93D9;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: GLenum = 0x93DA;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GLenum = 0x93DB;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GLenum = 0x93DC;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GLenum = 0x93DD;
pub static RASTER_POSITION_UNCLIPPED_IBM: GLenum = 0x19262;
pub static CULL_VERTEX_IBM: GLenum = 103050;
pub static ALL_STATIC_DATA_IBM: GLenum = 103060;
pub static STATIC_VERTEX_ARRAY_IBM: GLenum = 103061;
pub static VERTEX_ARRAY_LIST_IBM: GLenum = 103070;
pub static NORMAL_ARRAY_LIST_IBM: GLenum = 103071;
pub static COLOR_ARRAY_LIST_IBM: GLenum = 103072;
pub static INDEX_ARRAY_LIST_IBM: GLenum = 103073;
pub static TEXTURE_COORD_ARRAY_LIST_IBM: GLenum = 103074;
pub static EDGE_FLAG_ARRAY_LIST_IBM: GLenum = 103075;
pub static FOG_COORDINATE_ARRAY_LIST_IBM: GLenum = 103076;
pub static SECONDARY_COLOR_ARRAY_LIST_IBM: GLenum = 103077;
pub static VERTEX_ARRAY_LIST_STRIDE_IBM: GLenum = 103080;
pub static NORMAL_ARRAY_LIST_STRIDE_IBM: GLenum = 103081;
pub static COLOR_ARRAY_LIST_STRIDE_IBM: GLenum = 103082;
pub static INDEX_ARRAY_LIST_STRIDE_IBM: GLenum = 103083;
pub static TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM: GLenum = 103084;
pub static EDGE_FLAG_ARRAY_LIST_STRIDE_IBM: GLenum = 103085;
pub static FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM: GLenum = 103086;
pub static SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM: GLenum = 103087;
pub static PREFER_DOUBLEBUFFER_HINT_PGI: GLenum = 0x1A1F8;
pub static CONSERVE_MEMORY_HINT_PGI: GLenum = 0x1A1FD;
pub static RECLAIM_MEMORY_HINT_PGI: GLenum = 0x1A1FE;
pub static NATIVE_GRAPHICS_HANDLE_PGI: GLenum = 0x1A202;
pub static NATIVE_GRAPHICS_BEGIN_HINT_PGI: GLenum = 0x1A203;
pub static NATIVE_GRAPHICS_END_HINT_PGI: GLenum = 0x1A204;
pub static ALWAYS_FAST_HINT_PGI: GLenum = 0x1A20C;
pub static ALWAYS_SOFT_HINT_PGI: GLenum = 0x1A20D;
pub static ALLOW_DRAW_OBJ_HINT_PGI: GLenum = 0x1A20E;
pub static ALLOW_DRAW_WIN_HINT_PGI: GLenum = 0x1A20F;
pub static ALLOW_DRAW_FRG_HINT_PGI: GLenum = 0x1A210;
pub static ALLOW_DRAW_MEM_HINT_PGI: GLenum = 0x1A211;
pub static STRICT_DEPTHFUNC_HINT_PGI: GLenum = 0x1A216;
pub static STRICT_LIGHTING_HINT_PGI: GLenum = 0x1A217;
pub static STRICT_SCISSOR_HINT_PGI: GLenum = 0x1A218;
pub static FULL_STIPPLE_HINT_PGI: GLenum = 0x1A219;
pub static CLIP_NEAR_HINT_PGI: GLenum = 0x1A220;
pub static CLIP_FAR_HINT_PGI: GLenum = 0x1A221;
pub static WIDE_LINE_HINT_PGI: GLenum = 0x1A222;
pub static BACK_NORMALS_HINT_PGI: GLenum = 0x1A223;
pub static VERTEX_DATA_HINT_PGI: GLenum = 0x1A22A;
pub static VERTEX_CONSISTENT_HINT_PGI: GLenum = 0x1A22B;
pub static MATERIAL_SIDE_HINT_PGI: GLenum = 0x1A22C;
pub static MAX_VERTEX_HINT_PGI: GLenum = 0x1A22D;
pub static MAX_CLIP_PLANES_IMG: GLenum = 0x0D32;
pub static TEXTURE_GEN_MODE_OES: GLenum = 0x2500;
pub static CLIP_PLANE0_IMG: GLenum = 0x3000;
pub static CLIP_PLANE1_IMG: GLenum = 0x3001;
pub static CLIP_PLANE2_IMG: GLenum = 0x3002;
pub static CLIP_PLANE3_IMG: GLenum = 0x3003;
pub static CLIP_PLANE4_IMG: GLenum = 0x3004;
pub static CLIP_PLANE5_IMG: GLenum = 0x3005;
pub static ALPHA8_OES: GLenum = 0x803C;
pub static LUMINANCE8_OES: GLenum = 0x8040;
pub static LUMINANCE4_ALPHA4_OES: GLenum = 0x8043;
pub static LUMINANCE8_ALPHA8_OES: GLenum = 0x8045;
pub static RGB8_OES: GLenum = 0x8051;
pub static TEXTURE_BINDING_3D_OES: GLenum = 0x806A;
pub static BGRA_IMG: GLenum = 0x80E1;
pub static TEXTURE_MAX_LEVEL_APPLE: GLenum = 0x813D;
pub static FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: GLenum = 0x8210;
pub static R32F_EXT: GLenum = 0x822E;
pub static RG32F_EXT: GLenum = 0x8230;
pub static LOSE_CONTEXT_ON_RESET_EXT: GLenum = 0x8252;
pub static GUILTY_CONTEXT_RESET_EXT: GLenum = 0x8253;
pub static INNOCENT_CONTEXT_RESET_EXT: GLenum = 0x8254;
pub static UNKNOWN_CONTEXT_RESET_EXT: GLenum = 0x8255;
pub static RESET_NOTIFICATION_STRATEGY_EXT: GLenum = 0x8256;
pub static NO_RESET_NOTIFICATION_EXT: GLenum = 0x8261;
pub static UNSIGNED_SHORT_4_4_4_4_REV_IMG: GLenum = 0x8365;
pub static VERTEX_ARRAY_BINDING_OES: GLenum = 0x85B5;
pub static RGBA32F_EXT: GLenum = 0x8814;
pub static RGB32F_EXT: GLenum = 0x8815;
pub static ALPHA32F_EXT: GLenum = 0x8816;
pub static LUMINANCE32F_EXT: GLenum = 0x8818;
pub static LUMINANCE_ALPHA32F_EXT: GLenum = 0x8819;
pub static ALPHA16F_EXT: GLenum = 0x881C;
pub static LUMINANCE16F_EXT: GLenum = 0x881E;
pub static LUMINANCE_ALPHA16F_EXT: GLenum = 0x881F;
pub static DRAW_FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_APPLE: GLenum = 0x8CA6;
pub static READ_FRAMEBUFFER_APPLE: GLenum = 0x8CA8;
pub static DRAW_FRAMEBUFFER_APPLE: GLenum = 0x8CA9;
pub static READ_FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_APPLE: GLenum = 0x8CAA;
pub static RENDERBUFFER_SAMPLES_APPLE: GLenum = 0x8CAB;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE: GLenum = 0x8D56;
pub static MAX_SAMPLES_APPLE: GLenum = 0x8D57;
pub static CONTEXT_ROBUST_ACCESS_EXT: GLenum = 0x90F3;
pub static TEXTURE_IMMUTABLE_FORMAT_EXT: GLenum = 0x912F;
pub static BGRA8_EXT: GLenum = 0x93A1;

#[inline] pub fn Accum(op: GLenum, value: GLfloat) -> c_void { unsafe { (storage::Accum.f)(op, value) } }
#[inline] pub fn AccumxOES(op: GLenum, value: GLfixed) -> c_void { unsafe { (storage::AccumxOES.f)(op, value) } }
#[inline] pub fn ActiveProgramEXT(program: GLuint) -> c_void { unsafe { (storage::ActiveProgramEXT.f)(program) } }
#[inline] pub fn ActiveShaderProgram(pipeline: GLuint, program: GLuint) -> c_void { unsafe { (storage::ActiveShaderProgram.f)(pipeline, program) } }
#[inline] pub fn ActiveShaderProgramEXT(pipeline: GLuint, program: GLuint) -> c_void { unsafe { (storage::ActiveShaderProgramEXT.f)(pipeline, program) } }
#[inline] pub fn ActiveStencilFaceEXT(face: GLenum) -> c_void { unsafe { (storage::ActiveStencilFaceEXT.f)(face) } }
#[inline] pub fn ActiveTexture(texture: GLenum) -> c_void { unsafe { (storage::ActiveTexture.f)(texture) } }
#[inline] pub fn ActiveTextureARB(texture: GLenum) -> c_void { unsafe { (storage::ActiveTextureARB.f)(texture) } }
#[inline] pub fn ActiveVaryingNV(program: GLuint, name: *GLchar) -> c_void { unsafe { (storage::ActiveVaryingNV.f)(program, name) } }
#[inline] pub fn AlphaFragmentOp1ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void { unsafe { (storage::AlphaFragmentOp1ATI.f)(op, dst, dstMod, arg1, arg1Rep, arg1Mod) } }
#[inline] pub fn AlphaFragmentOp2ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void { unsafe { (storage::AlphaFragmentOp2ATI.f)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) } }
#[inline] pub fn AlphaFragmentOp3ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void { unsafe { (storage::AlphaFragmentOp3ATI.f)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) } }
#[inline] pub fn AlphaFunc(func: GLenum, ref_: GLfloat) -> c_void { unsafe { (storage::AlphaFunc.f)(func, ref_) } }
#[inline] pub fn AlphaFuncQCOM(func: GLenum, ref_: GLclampf) -> c_void { unsafe { (storage::AlphaFuncQCOM.f)(func, ref_) } }
#[inline] pub fn AlphaFuncx(func: GLenum, ref_: GLfixed) -> c_void { unsafe { (storage::AlphaFuncx.f)(func, ref_) } }
#[inline] pub fn AlphaFuncxOES(func: GLenum, ref_: GLfixed) -> c_void { unsafe { (storage::AlphaFuncxOES.f)(func, ref_) } }
#[inline] pub fn ApplyTextureEXT(mode: GLenum) -> c_void { unsafe { (storage::ApplyTextureEXT.f)(mode) } }
#[inline] pub fn AreProgramsResidentNV(n: GLsizei, programs: *GLuint, residences: *GLboolean) -> GLboolean { unsafe { (storage::AreProgramsResidentNV.f)(n, programs, residences) } }
#[inline] pub fn AreTexturesResident(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean { unsafe { (storage::AreTexturesResident.f)(n, textures, residences) } }
#[inline] pub fn AreTexturesResidentEXT(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean { unsafe { (storage::AreTexturesResidentEXT.f)(n, textures, residences) } }
#[inline] pub fn ArrayElement(i: GLint) -> c_void { unsafe { (storage::ArrayElement.f)(i) } }
#[inline] pub fn ArrayElementEXT(i: GLint) -> c_void { unsafe { (storage::ArrayElementEXT.f)(i) } }
#[inline] pub fn ArrayObjectATI(array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { (storage::ArrayObjectATI.f)(array, size, type_, stride, buffer, offset) } }
#[inline] pub fn AsyncMarkerSGIX(marker: GLuint) -> c_void { unsafe { (storage::AsyncMarkerSGIX.f)(marker) } }
#[inline] pub fn AttachObjectARB(containerObj: GLhandleARB, obj: GLhandleARB) -> c_void { unsafe { (storage::AttachObjectARB.f)(containerObj, obj) } }
#[inline] pub fn AttachShader(program: GLuint, shader: GLuint) -> c_void { unsafe { (storage::AttachShader.f)(program, shader) } }
#[inline] pub fn Begin(mode: GLenum) -> c_void { unsafe { (storage::Begin.f)(mode) } }
#[inline] pub fn BeginConditionalRender(id: GLuint, mode: GLenum) -> c_void { unsafe { (storage::BeginConditionalRender.f)(id, mode) } }
#[inline] pub fn BeginConditionalRenderNV(id: GLuint, mode: GLenum) -> c_void { unsafe { (storage::BeginConditionalRenderNV.f)(id, mode) } }
#[inline] pub fn BeginConditionalRenderNVX(id: GLuint) -> c_void { unsafe { (storage::BeginConditionalRenderNVX.f)(id) } }
#[inline] pub unsafe fn BeginFragmentShaderATI() -> c_void { (storage::BeginFragmentShaderATI.f)() }
#[inline] pub fn BeginOcclusionQueryNV(id: GLuint) -> c_void { unsafe { (storage::BeginOcclusionQueryNV.f)(id) } }
#[inline] pub fn BeginPerfMonitorAMD(monitor: GLuint) -> c_void { unsafe { (storage::BeginPerfMonitorAMD.f)(monitor) } }
#[inline] pub fn BeginQuery(target: GLenum, id: GLuint) -> c_void { unsafe { (storage::BeginQuery.f)(target, id) } }
#[inline] pub fn BeginQueryARB(target: GLenum, id: GLuint) -> c_void { unsafe { (storage::BeginQueryARB.f)(target, id) } }
#[inline] pub fn BeginQueryEXT(target: GLenum, id: GLuint) -> c_void { unsafe { (storage::BeginQueryEXT.f)(target, id) } }
#[inline] pub fn BeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint) -> c_void { unsafe { (storage::BeginQueryIndexed.f)(target, index, id) } }
#[inline] pub fn BeginTransformFeedback(primitiveMode: GLenum) -> c_void { unsafe { (storage::BeginTransformFeedback.f)(primitiveMode) } }
#[inline] pub fn BeginTransformFeedbackEXT(primitiveMode: GLenum) -> c_void { unsafe { (storage::BeginTransformFeedbackEXT.f)(primitiveMode) } }
#[inline] pub fn BeginTransformFeedbackNV(primitiveMode: GLenum) -> c_void { unsafe { (storage::BeginTransformFeedbackNV.f)(primitiveMode) } }
#[inline] pub unsafe fn BeginVertexShaderEXT() -> c_void { (storage::BeginVertexShaderEXT.f)() }
#[inline] pub fn BeginVideoCaptureNV(video_capture_slot: GLuint) -> c_void { unsafe { (storage::BeginVideoCaptureNV.f)(video_capture_slot) } }
#[inline] pub fn BindAttribLocation(program: GLuint, index: GLuint, name: *GLchar) -> c_void { unsafe { (storage::BindAttribLocation.f)(program, index, name) } }
#[inline] pub fn BindAttribLocationARB(programObj: GLhandleARB, index: GLuint, name: *GLcharARB) -> c_void { unsafe { (storage::BindAttribLocationARB.f)(programObj, index, name) } }
#[inline] pub fn BindBuffer(target: GLenum, buffer: GLuint) -> c_void { unsafe { (storage::BindBuffer.f)(target, buffer) } }
#[inline] pub fn BindBufferARB(target: GLenum, buffer: GLuint) -> c_void { unsafe { (storage::BindBufferARB.f)(target, buffer) } }
#[inline] pub fn BindBufferBase(target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { (storage::BindBufferBase.f)(target, index, buffer) } }
#[inline] pub fn BindBufferBaseEXT(target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { (storage::BindBufferBaseEXT.f)(target, index, buffer) } }
#[inline] pub fn BindBufferBaseNV(target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { (storage::BindBufferBaseNV.f)(target, index, buffer) } }
#[inline] pub fn BindBufferOffsetEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void { unsafe { (storage::BindBufferOffsetEXT.f)(target, index, buffer, offset) } }
#[inline] pub fn BindBufferOffsetNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void { unsafe { (storage::BindBufferOffsetNV.f)(target, index, buffer, offset) } }
#[inline] pub fn BindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (storage::BindBufferRange.f)(target, index, buffer, offset, size) } }
#[inline] pub fn BindBufferRangeEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (storage::BindBufferRangeEXT.f)(target, index, buffer, offset, size) } }
#[inline] pub fn BindBufferRangeNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (storage::BindBufferRangeNV.f)(target, index, buffer, offset, size) } }
#[inline] pub fn BindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) -> c_void { unsafe { (storage::BindBuffersBase.f)(target, first, count, buffers) } }
#[inline] pub fn BindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) -> c_void { unsafe { (storage::BindBuffersRange.f)(target, first, count, buffers, offsets, sizes) } }
#[inline] pub fn BindFragDataLocation(program: GLuint, color: GLuint, name: *GLchar) -> c_void { unsafe { (storage::BindFragDataLocation.f)(program, color, name) } }
#[inline] pub fn BindFragDataLocationEXT(program: GLuint, color: GLuint, name: *GLchar) -> c_void { unsafe { (storage::BindFragDataLocationEXT.f)(program, color, name) } }
#[inline] pub fn BindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) -> c_void { unsafe { (storage::BindFragDataLocationIndexed.f)(program, colorNumber, index, name) } }
#[inline] pub fn BindFragmentShaderATI(id: GLuint) -> c_void { unsafe { (storage::BindFragmentShaderATI.f)(id) } }
#[inline] pub fn BindFramebuffer(target: GLenum, framebuffer: GLuint) -> c_void { unsafe { (storage::BindFramebuffer.f)(target, framebuffer) } }
#[inline] pub fn BindFramebufferEXT(target: GLenum, framebuffer: GLuint) -> c_void { unsafe { (storage::BindFramebufferEXT.f)(target, framebuffer) } }
#[inline] pub fn BindFramebufferOES(target: GLenum, framebuffer: GLuint) -> c_void { unsafe { (storage::BindFramebufferOES.f)(target, framebuffer) } }
#[inline] pub fn BindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> c_void { unsafe { (storage::BindImageTexture.f)(unit, texture, level, layered, layer, access, format) } }
#[inline] pub fn BindImageTextureEXT(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) -> c_void { unsafe { (storage::BindImageTextureEXT.f)(index, texture, level, layered, layer, access, format) } }
#[inline] pub fn BindImageTextures(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void { unsafe { (storage::BindImageTextures.f)(first, count, textures) } }
#[inline] pub fn BindLightParameterEXT(light: GLenum, value: GLenum) -> GLuint { unsafe { (storage::BindLightParameterEXT.f)(light, value) } }
#[inline] pub fn BindMaterialParameterEXT(face: GLenum, value: GLenum) -> GLuint { unsafe { (storage::BindMaterialParameterEXT.f)(face, value) } }
#[inline] pub fn BindMultiTextureEXT(texunit: GLenum, target: GLenum, texture: GLuint) -> c_void { unsafe { (storage::BindMultiTextureEXT.f)(texunit, target, texture) } }
#[inline] pub fn BindParameterEXT(value: GLenum) -> GLuint { unsafe { (storage::BindParameterEXT.f)(value) } }
#[inline] pub fn BindProgramARB(target: GLenum, program: GLuint) -> c_void { unsafe { (storage::BindProgramARB.f)(target, program) } }
#[inline] pub fn BindProgramNV(target: GLenum, id: GLuint) -> c_void { unsafe { (storage::BindProgramNV.f)(target, id) } }
#[inline] pub fn BindProgramPipeline(pipeline: GLuint) -> c_void { unsafe { (storage::BindProgramPipeline.f)(pipeline) } }
#[inline] pub fn BindProgramPipelineEXT(pipeline: GLuint) -> c_void { unsafe { (storage::BindProgramPipelineEXT.f)(pipeline) } }
#[inline] pub fn BindRenderbuffer(target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::BindRenderbuffer.f)(target, renderbuffer) } }
#[inline] pub fn BindRenderbufferEXT(target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::BindRenderbufferEXT.f)(target, renderbuffer) } }
#[inline] pub fn BindRenderbufferOES(target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::BindRenderbufferOES.f)(target, renderbuffer) } }
#[inline] pub fn BindSampler(unit: GLuint, sampler: GLuint) -> c_void { unsafe { (storage::BindSampler.f)(unit, sampler) } }
#[inline] pub fn BindSamplers(first: GLuint, count: GLsizei, samplers: *GLuint) -> c_void { unsafe { (storage::BindSamplers.f)(first, count, samplers) } }
#[inline] pub fn BindTexGenParameterEXT(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint { unsafe { (storage::BindTexGenParameterEXT.f)(unit, coord, value) } }
#[inline] pub fn BindTexture(target: GLenum, texture: GLuint) -> c_void { unsafe { (storage::BindTexture.f)(target, texture) } }
#[inline] pub fn BindTextureEXT(target: GLenum, texture: GLuint) -> c_void { unsafe { (storage::BindTextureEXT.f)(target, texture) } }
#[inline] pub fn BindTextureUnitParameterEXT(unit: GLenum, value: GLenum) -> GLuint { unsafe { (storage::BindTextureUnitParameterEXT.f)(unit, value) } }
#[inline] pub fn BindTextures(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void { unsafe { (storage::BindTextures.f)(first, count, textures) } }
#[inline] pub fn BindTransformFeedback(target: GLenum, id: GLuint) -> c_void { unsafe { (storage::BindTransformFeedback.f)(target, id) } }
#[inline] pub fn BindTransformFeedbackNV(target: GLenum, id: GLuint) -> c_void { unsafe { (storage::BindTransformFeedbackNV.f)(target, id) } }
#[inline] pub fn BindVertexArray(array: GLuint) -> c_void { unsafe { (storage::BindVertexArray.f)(array) } }
#[inline] pub fn BindVertexArrayAPPLE(array: GLuint) -> c_void { unsafe { (storage::BindVertexArrayAPPLE.f)(array) } }
#[inline] pub fn BindVertexArrayOES(array: GLuint) -> c_void { unsafe { (storage::BindVertexArrayOES.f)(array) } }
#[inline] pub fn BindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void { unsafe { (storage::BindVertexBuffer.f)(bindingindex, buffer, offset, stride) } }
#[inline] pub fn BindVertexBuffers(first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) -> c_void { unsafe { (storage::BindVertexBuffers.f)(first, count, buffers, offsets, strides) } }
#[inline] pub fn BindVertexShaderEXT(id: GLuint) -> c_void { unsafe { (storage::BindVertexShaderEXT.f)(id) } }
#[inline] pub fn BindVideoCaptureStreamBufferNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) -> c_void { unsafe { (storage::BindVideoCaptureStreamBufferNV.f)(video_capture_slot, stream, frame_region, offset) } }
#[inline] pub fn BindVideoCaptureStreamTextureNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) -> c_void { unsafe { (storage::BindVideoCaptureStreamTextureNV.f)(video_capture_slot, stream, frame_region, target, texture) } }
#[inline] pub fn Binormal3bEXT(bx: GLbyte, by: GLbyte, bz: GLbyte) -> c_void { unsafe { (storage::Binormal3bEXT.f)(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3bvEXT(v: *GLbyte) -> c_void { (storage::Binormal3bvEXT.f)(v) }
#[inline] pub fn Binormal3dEXT(bx: GLdouble, by: GLdouble, bz: GLdouble) -> c_void { unsafe { (storage::Binormal3dEXT.f)(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3dvEXT(v: *GLdouble) -> c_void { (storage::Binormal3dvEXT.f)(v) }
#[inline] pub fn Binormal3fEXT(bx: GLfloat, by: GLfloat, bz: GLfloat) -> c_void { unsafe { (storage::Binormal3fEXT.f)(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3fvEXT(v: *GLfloat) -> c_void { (storage::Binormal3fvEXT.f)(v) }
#[inline] pub fn Binormal3iEXT(bx: GLint, by: GLint, bz: GLint) -> c_void { unsafe { (storage::Binormal3iEXT.f)(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3ivEXT(v: *GLint) -> c_void { (storage::Binormal3ivEXT.f)(v) }
#[inline] pub fn Binormal3sEXT(bx: GLshort, by: GLshort, bz: GLshort) -> c_void { unsafe { (storage::Binormal3sEXT.f)(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3svEXT(v: *GLshort) -> c_void { (storage::Binormal3svEXT.f)(v) }
#[inline] pub fn BinormalPointerEXT(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::BinormalPointerEXT.f)(type_, stride, pointer) } }
#[inline] pub fn Bitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) -> c_void { unsafe { (storage::Bitmap.f)(width, height, xorig, yorig, xmove, ymove, bitmap) } }
#[inline] pub fn BitmapxOES(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *GLubyte) -> c_void { unsafe { (storage::BitmapxOES.f)(width, height, xorig, yorig, xmove, ymove, bitmap) } }
#[inline] pub fn BlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (storage::BlendColor.f)(red, green, blue, alpha) } }
#[inline] pub fn BlendColorEXT(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (storage::BlendColorEXT.f)(red, green, blue, alpha) } }
#[inline] pub fn BlendColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (storage::BlendColorxOES.f)(red, green, blue, alpha) } }
#[inline] pub fn BlendEquation(mode: GLenum) -> c_void { unsafe { (storage::BlendEquation.f)(mode) } }
#[inline] pub fn BlendEquationEXT(mode: GLenum) -> c_void { unsafe { (storage::BlendEquationEXT.f)(mode) } }
#[inline] pub fn BlendEquationIndexedAMD(buf: GLuint, mode: GLenum) -> c_void { unsafe { (storage::BlendEquationIndexedAMD.f)(buf, mode) } }
#[inline] pub fn BlendEquationOES(mode: GLenum) -> c_void { unsafe { (storage::BlendEquationOES.f)(mode) } }
#[inline] pub fn BlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (storage::BlendEquationSeparate.f)(modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparateEXT(modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (storage::BlendEquationSeparateEXT.f)(modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparateIndexedAMD(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (storage::BlendEquationSeparateIndexedAMD.f)(buf, modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparateOES(modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (storage::BlendEquationSeparateOES.f)(modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (storage::BlendEquationSeparatei.f)(buf, modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparateiARB(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (storage::BlendEquationSeparateiARB.f)(buf, modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationi(buf: GLuint, mode: GLenum) -> c_void { unsafe { (storage::BlendEquationi.f)(buf, mode) } }
#[inline] pub fn BlendEquationiARB(buf: GLuint, mode: GLenum) -> c_void { unsafe { (storage::BlendEquationiARB.f)(buf, mode) } }
#[inline] pub fn BlendFunc(sfactor: GLenum, dfactor: GLenum) -> c_void { unsafe { (storage::BlendFunc.f)(sfactor, dfactor) } }
#[inline] pub fn BlendFuncIndexedAMD(buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { (storage::BlendFuncIndexedAMD.f)(buf, src, dst) } }
#[inline] pub fn BlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { (storage::BlendFuncSeparate.f)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
#[inline] pub fn BlendFuncSeparateEXT(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { (storage::BlendFuncSeparateEXT.f)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
#[inline] pub fn BlendFuncSeparateINGR(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { (storage::BlendFuncSeparateINGR.f)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
#[inline] pub fn BlendFuncSeparateIndexedAMD(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { (storage::BlendFuncSeparateIndexedAMD.f)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
#[inline] pub fn BlendFuncSeparateOES(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { (storage::BlendFuncSeparateOES.f)(srcRGB, dstRGB, srcAlpha, dstAlpha) } }
#[inline] pub fn BlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { (storage::BlendFuncSeparatei.f)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
#[inline] pub fn BlendFuncSeparateiARB(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { (storage::BlendFuncSeparateiARB.f)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
#[inline] pub fn BlendFunci(buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { (storage::BlendFunci.f)(buf, src, dst) } }
#[inline] pub fn BlendFunciARB(buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { (storage::BlendFunciARB.f)(buf, src, dst) } }
#[inline] pub fn BlendParameteriNV(pname: GLenum, value: GLint) -> c_void { unsafe { (storage::BlendParameteriNV.f)(pname, value) } }
#[inline] pub unsafe fn BlendBarrierNV() -> c_void { (storage::BlendBarrierNV.f)() }
#[inline] pub fn BlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { (storage::BlitFramebuffer.f)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
#[inline] pub fn BlitFramebufferANGLE(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { (storage::BlitFramebufferANGLE.f)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
#[inline] pub fn BlitFramebufferEXT(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { (storage::BlitFramebufferEXT.f)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
#[inline] pub fn BlitFramebufferNV(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { (storage::BlitFramebufferNV.f)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
#[inline] pub fn BufferAddressRangeNV(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) -> c_void { unsafe { (storage::BufferAddressRangeNV.f)(pname, index, address, length) } }
#[inline] pub fn BufferData(target: GLenum, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void { unsafe { (storage::BufferData.f)(target, size, data, usage) } }
#[inline] pub fn BufferDataARB(target: GLenum, size: GLsizeiptrARB, data: *GLvoid, usage: GLenum) -> c_void { unsafe { (storage::BufferDataARB.f)(target, size, data, usage) } }
#[inline] pub fn BufferParameteriAPPLE(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::BufferParameteriAPPLE.f)(target, pname, param) } }
#[inline] pub fn BufferStorage(target: GLenum, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void { unsafe { (storage::BufferStorage.f)(target, size, data, flags) } }
#[inline] pub fn BufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { unsafe { (storage::BufferSubData.f)(target, offset, size, data) } }
#[inline] pub fn BufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void { unsafe { (storage::BufferSubDataARB.f)(target, offset, size, data) } }
#[inline] pub fn CallList(list: GLuint) -> c_void { unsafe { (storage::CallList.f)(list) } }
#[inline] pub fn CallLists(n: GLsizei, type_: GLenum, lists: *GLvoid) -> c_void { unsafe { (storage::CallLists.f)(n, type_, lists) } }
#[inline] pub fn CheckFramebufferStatus(target: GLenum) -> GLenum { unsafe { (storage::CheckFramebufferStatus.f)(target) } }
#[inline] pub fn CheckFramebufferStatusEXT(target: GLenum) -> GLenum { unsafe { (storage::CheckFramebufferStatusEXT.f)(target) } }
#[inline] pub fn CheckFramebufferStatusOES(target: GLenum) -> GLenum { unsafe { (storage::CheckFramebufferStatusOES.f)(target) } }
#[inline] pub fn CheckNamedFramebufferStatusEXT(framebuffer: GLuint, target: GLenum) -> GLenum { unsafe { (storage::CheckNamedFramebufferStatusEXT.f)(framebuffer, target) } }
#[inline] pub fn ClampColor(target: GLenum, clamp: GLenum) -> c_void { unsafe { (storage::ClampColor.f)(target, clamp) } }
#[inline] pub fn ClampColorARB(target: GLenum, clamp: GLenum) -> c_void { unsafe { (storage::ClampColorARB.f)(target, clamp) } }
#[inline] pub fn Clear(mask: GLbitfield) -> c_void { unsafe { (storage::Clear.f)(mask) } }
#[inline] pub fn ClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (storage::ClearAccum.f)(red, green, blue, alpha) } }
#[inline] pub fn ClearAccumxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (storage::ClearAccumxOES.f)(red, green, blue, alpha) } }
#[inline] pub fn ClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { (storage::ClearBufferData.f)(target, internalformat, format, type_, data) } }
#[inline] pub fn ClearBufferSubData(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { (storage::ClearBufferSubData.f)(target, internalformat, offset, size, format, type_, data) } }
#[inline] pub fn ClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> c_void { unsafe { (storage::ClearBufferfi.f)(buffer, drawbuffer, depth, stencil) } }
#[inline] pub fn ClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> c_void { unsafe { (storage::ClearBufferfv.f)(buffer, drawbuffer, value) } }
#[inline] pub fn ClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: *GLint) -> c_void { unsafe { (storage::ClearBufferiv.f)(buffer, drawbuffer, value) } }
#[inline] pub fn ClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> c_void { unsafe { (storage::ClearBufferuiv.f)(buffer, drawbuffer, value) } }
#[inline] pub fn ClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (storage::ClearColor.f)(red, green, blue, alpha) } }
#[inline] pub fn ClearColorIiEXT(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void { unsafe { (storage::ClearColorIiEXT.f)(red, green, blue, alpha) } }
#[inline] pub fn ClearColorIuiEXT(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void { unsafe { (storage::ClearColorIuiEXT.f)(red, green, blue, alpha) } }
#[inline] pub fn ClearColorx(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (storage::ClearColorx.f)(red, green, blue, alpha) } }
#[inline] pub fn ClearColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (storage::ClearColorxOES.f)(red, green, blue, alpha) } }
#[inline] pub fn ClearDepth(depth: GLdouble) -> c_void { unsafe { (storage::ClearDepth.f)(depth) } }
#[inline] pub fn ClearDepthdNV(depth: GLdouble) -> c_void { unsafe { (storage::ClearDepthdNV.f)(depth) } }
#[inline] pub fn ClearDepthf(d: GLfloat) -> c_void { unsafe { (storage::ClearDepthf.f)(d) } }
#[inline] pub fn ClearDepthfOES(depth: GLclampf) -> c_void { unsafe { (storage::ClearDepthfOES.f)(depth) } }
#[inline] pub fn ClearDepthx(depth: GLfixed) -> c_void { unsafe { (storage::ClearDepthx.f)(depth) } }
#[inline] pub fn ClearDepthxOES(depth: GLfixed) -> c_void { unsafe { (storage::ClearDepthxOES.f)(depth) } }
#[inline] pub fn ClearIndex(c: GLfloat) -> c_void { unsafe { (storage::ClearIndex.f)(c) } }
#[inline] pub fn ClearNamedBufferDataEXT(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { (storage::ClearNamedBufferDataEXT.f)(buffer, internalformat, format, type_, data) } }
#[inline] pub fn ClearNamedBufferSubDataEXT(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, offset: GLsizeiptr, size: GLsizeiptr, data: *c_void) -> c_void { unsafe { (storage::ClearNamedBufferSubDataEXT.f)(buffer, internalformat, format, type_, offset, size, data) } }
#[inline] pub fn ClearStencil(s: GLint) -> c_void { unsafe { (storage::ClearStencil.f)(s) } }
#[inline] pub fn ClearTexImage(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { (storage::ClearTexImage.f)(texture, level, format, type_, data) } }
#[inline] pub fn ClearTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { (storage::ClearTexSubImage.f)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, data) } }
#[inline] pub fn ClientActiveTexture(texture: GLenum) -> c_void { unsafe { (storage::ClientActiveTexture.f)(texture) } }
#[inline] pub fn ClientActiveTextureARB(texture: GLenum) -> c_void { unsafe { (storage::ClientActiveTextureARB.f)(texture) } }
#[inline] pub fn ClientActiveVertexStreamATI(stream: GLenum) -> c_void { unsafe { (storage::ClientActiveVertexStreamATI.f)(stream) } }
#[inline] pub fn ClientAttribDefaultEXT(mask: GLbitfield) -> c_void { unsafe { (storage::ClientAttribDefaultEXT.f)(mask) } }
#[inline] pub fn ClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum { unsafe { (storage::ClientWaitSync.f)(sync, flags, timeout) } }
#[inline] pub fn ClientWaitSyncAPPLE(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum { unsafe { (storage::ClientWaitSyncAPPLE.f)(sync, flags, timeout) } }
#[inline] pub fn ClipControlARB(origin: GLenum, depth: GLenum) -> c_void { unsafe { (storage::ClipControlARB.f)(origin, depth) } }
#[inline] pub fn ClipPlane(plane: GLenum, equation: *GLdouble) -> c_void { unsafe { (storage::ClipPlane.f)(plane, equation) } }
#[inline] pub fn ClipPlanef(p: GLenum, eqn: *GLfloat) -> c_void { unsafe { (storage::ClipPlanef.f)(p, eqn) } }
#[inline] pub fn ClipPlanefIMG(p: GLenum, eqn: *GLfloat) -> c_void { unsafe { (storage::ClipPlanefIMG.f)(p, eqn) } }
#[inline] pub fn ClipPlanefOES(plane: GLenum, equation: *GLfloat) -> c_void { unsafe { (storage::ClipPlanefOES.f)(plane, equation) } }
#[inline] pub fn ClipPlanex(plane: GLenum, equation: *GLfixed) -> c_void { unsafe { (storage::ClipPlanex.f)(plane, equation) } }
#[inline] pub fn ClipPlanexIMG(p: GLenum, eqn: *GLfixed) -> c_void { unsafe { (storage::ClipPlanexIMG.f)(p, eqn) } }
#[inline] pub fn ClipPlanexOES(plane: GLenum, equation: *GLfixed) -> c_void { unsafe { (storage::ClipPlanexOES.f)(plane, equation) } }
#[inline] pub fn Color3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { (storage::Color3b.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3bv(v: *GLbyte) -> c_void { (storage::Color3bv.f)(v) }
#[inline] pub fn Color3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { (storage::Color3d.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3dv(v: *GLdouble) -> c_void { (storage::Color3dv.f)(v) }
#[inline] pub fn Color3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { (storage::Color3f.f)(red, green, blue) } }
#[inline] pub fn Color3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::Color3fVertex3fSUN.f)(r, g, b, x, y, z) } }
#[inline] pub unsafe fn Color3fVertex3fvSUN(c: *GLfloat, v: *GLfloat) -> c_void { (storage::Color3fVertex3fvSUN.f)(c, v) }
#[inline] pub unsafe fn Color3fv(v: *GLfloat) -> c_void { (storage::Color3fv.f)(v) }
#[inline] pub fn Color3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void { unsafe { (storage::Color3hNV.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3hvNV(v: *GLhalfNV) -> c_void { (storage::Color3hvNV.f)(v) }
#[inline] pub fn Color3i(red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { (storage::Color3i.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3iv(v: *GLint) -> c_void { (storage::Color3iv.f)(v) }
#[inline] pub fn Color3s(red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { (storage::Color3s.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3sv(v: *GLshort) -> c_void { (storage::Color3sv.f)(v) }
#[inline] pub fn Color3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { (storage::Color3ub.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3ubv(v: *GLubyte) -> c_void { (storage::Color3ubv.f)(v) }
#[inline] pub fn Color3ui(red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { (storage::Color3ui.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3uiv(v: *GLuint) -> c_void { (storage::Color3uiv.f)(v) }
#[inline] pub fn Color3us(red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { (storage::Color3us.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3usv(v: *GLushort) -> c_void { (storage::Color3usv.f)(v) }
#[inline] pub fn Color3xOES(red: GLfixed, green: GLfixed, blue: GLfixed) -> c_void { unsafe { (storage::Color3xOES.f)(red, green, blue) } }
#[inline] pub unsafe fn Color3xvOES(components: *GLfixed) -> c_void { (storage::Color3xvOES.f)(components) }
#[inline] pub fn Color4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> c_void { unsafe { (storage::Color4b.f)(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4bv(v: *GLbyte) -> c_void { (storage::Color4bv.f)(v) }
#[inline] pub fn Color4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> c_void { unsafe { (storage::Color4d.f)(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4dv(v: *GLdouble) -> c_void { (storage::Color4dv.f)(v) }
#[inline] pub fn Color4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (storage::Color4f.f)(red, green, blue, alpha) } }
#[inline] pub fn Color4fNormal3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::Color4fNormal3fVertex3fSUN.f)(r, g, b, a, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn Color4fNormal3fVertex3fvSUN(c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (storage::Color4fNormal3fVertex3fvSUN.f)(c, n, v) }
#[inline] pub unsafe fn Color4fv(v: *GLfloat) -> c_void { (storage::Color4fv.f)(v) }
#[inline] pub fn Color4hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) -> c_void { unsafe { (storage::Color4hNV.f)(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4hvNV(v: *GLhalfNV) -> c_void { (storage::Color4hvNV.f)(v) }
#[inline] pub fn Color4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void { unsafe { (storage::Color4i.f)(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4iv(v: *GLint) -> c_void { (storage::Color4iv.f)(v) }
#[inline] pub fn Color4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> c_void { unsafe { (storage::Color4s.f)(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4sv(v: *GLshort) -> c_void { (storage::Color4sv.f)(v) }
#[inline] pub fn Color4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> c_void { unsafe { (storage::Color4ub.f)(red, green, blue, alpha) } }
#[inline] pub fn Color4ubVertex2fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::Color4ubVertex2fSUN.f)(r, g, b, a, x, y) } }
#[inline] pub unsafe fn Color4ubVertex2fvSUN(c: *GLubyte, v: *GLfloat) -> c_void { (storage::Color4ubVertex2fvSUN.f)(c, v) }
#[inline] pub fn Color4ubVertex3fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::Color4ubVertex3fSUN.f)(r, g, b, a, x, y, z) } }
#[inline] pub unsafe fn Color4ubVertex3fvSUN(c: *GLubyte, v: *GLfloat) -> c_void { (storage::Color4ubVertex3fvSUN.f)(c, v) }
#[inline] pub unsafe fn Color4ubv(v: *GLubyte) -> c_void { (storage::Color4ubv.f)(v) }
#[inline] pub fn Color4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void { unsafe { (storage::Color4ui.f)(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4uiv(v: *GLuint) -> c_void { (storage::Color4uiv.f)(v) }
#[inline] pub fn Color4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> c_void { unsafe { (storage::Color4us.f)(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4usv(v: *GLushort) -> c_void { (storage::Color4usv.f)(v) }
#[inline] pub fn Color4x(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (storage::Color4x.f)(red, green, blue, alpha) } }
#[inline] pub fn Color4xOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (storage::Color4xOES.f)(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4xvOES(components: *GLfixed) -> c_void { (storage::Color4xvOES.f)(components) }
#[inline] pub fn ColorFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::ColorFormatNV.f)(size, type_, stride) } }
#[inline] pub fn ColorFragmentOp1ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void { unsafe { (storage::ColorFragmentOp1ATI.f)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) } }
#[inline] pub fn ColorFragmentOp2ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void { unsafe { (storage::ColorFragmentOp2ATI.f)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) } }
#[inline] pub fn ColorFragmentOp3ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void { unsafe { (storage::ColorFragmentOp3ATI.f)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) } }
#[inline] pub fn ColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void { unsafe { (storage::ColorMask.f)(red, green, blue, alpha) } }
#[inline] pub fn ColorMaskIndexedEXT(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void { unsafe { (storage::ColorMaskIndexedEXT.f)(index, r, g, b, a) } }
#[inline] pub fn ColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void { unsafe { (storage::ColorMaski.f)(index, r, g, b, a) } }
#[inline] pub fn ColorMaterial(face: GLenum, mode: GLenum) -> c_void { unsafe { (storage::ColorMaterial.f)(face, mode) } }
#[inline] pub fn ColorP3ui(type_: GLenum, color: GLuint) -> c_void { unsafe { (storage::ColorP3ui.f)(type_, color) } }
#[inline] pub fn ColorP3uiv(type_: GLenum, color: *GLuint) -> c_void { unsafe { (storage::ColorP3uiv.f)(type_, color) } }
#[inline] pub fn ColorP4ui(type_: GLenum, color: GLuint) -> c_void { unsafe { (storage::ColorP4ui.f)(type_, color) } }
#[inline] pub fn ColorP4uiv(type_: GLenum, color: *GLuint) -> c_void { unsafe { (storage::ColorP4uiv.f)(type_, color) } }
#[inline] pub fn ColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::ColorPointer.f)(size, type_, stride, pointer) } }
#[inline] pub fn ColorPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::ColorPointerEXT.f)(size, type_, stride, count, pointer) } }
#[inline] pub fn ColorPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { (storage::ColorPointerListIBM.f)(size, type_, stride, pointer, ptrstride) } }
#[inline] pub fn ColorPointervINTEL(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { unsafe { (storage::ColorPointervINTEL.f)(size, type_, pointer) } }
#[inline] pub fn ColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { unsafe { (storage::ColorSubTable.f)(target, start, count, format, type_, data) } }
#[inline] pub fn ColorSubTableEXT(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { unsafe { (storage::ColorSubTableEXT.f)(target, start, count, format, type_, data) } }
#[inline] pub fn ColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { (storage::ColorTable.f)(target, internalformat, width, format, type_, table) } }
#[inline] pub fn ColorTableEXT(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { (storage::ColorTableEXT.f)(target, internalFormat, width, format, type_, table) } }
#[inline] pub fn ColorTableParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::ColorTableParameterfv.f)(target, pname, params) } }
#[inline] pub fn ColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::ColorTableParameterfvSGI.f)(target, pname, params) } }
#[inline] pub fn ColorTableParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::ColorTableParameteriv.f)(target, pname, params) } }
#[inline] pub fn ColorTableParameterivSGI(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::ColorTableParameterivSGI.f)(target, pname, params) } }
#[inline] pub fn ColorTableSGI(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { (storage::ColorTableSGI.f)(target, internalformat, width, format, type_, table) } }
#[inline] pub fn CombinerInputNV(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void { unsafe { (storage::CombinerInputNV.f)(stage, portion, variable, input, mapping, componentUsage) } }
#[inline] pub fn CombinerOutputNV(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) -> c_void { unsafe { (storage::CombinerOutputNV.f)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) } }
#[inline] pub fn CombinerParameterfNV(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::CombinerParameterfNV.f)(pname, param) } }
#[inline] pub fn CombinerParameterfvNV(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::CombinerParameterfvNV.f)(pname, params) } }
#[inline] pub fn CombinerParameteriNV(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::CombinerParameteriNV.f)(pname, param) } }
#[inline] pub fn CombinerParameterivNV(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::CombinerParameterivNV.f)(pname, params) } }
#[inline] pub fn CombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::CombinerStageParameterfvNV.f)(stage, pname, params) } }
#[inline] pub fn CompileShader(shader: GLuint) -> c_void { unsafe { (storage::CompileShader.f)(shader) } }
#[inline] pub fn CompileShaderARB(shaderObj: GLhandleARB) -> c_void { unsafe { (storage::CompileShaderARB.f)(shaderObj) } }
#[inline] pub fn CompileShaderIncludeARB(shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) -> c_void { unsafe { (storage::CompileShaderIncludeARB.f)(shader, count, path, length) } }
#[inline] pub fn CompressedMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedMultiTexImage1DEXT.f)(texunit, target, level, internalformat, width, border, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedMultiTexImage2DEXT.f)(texunit, target, level, internalformat, width, height, border, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedMultiTexImage3DEXT.f)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedMultiTexSubImage1DEXT.f)(texunit, target, level, xoffset, width, format, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedMultiTexSubImage2DEXT.f)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedMultiTexSubImage3DEXT.f)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) } }
#[inline] pub fn CompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexImage1D.f)(target, level, internalformat, width, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage1DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexImage1DARB.f)(target, level, internalformat, width, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexImage2D.f)(target, level, internalformat, width, height, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage2DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexImage2DARB.f)(target, level, internalformat, width, height, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexImage3D.f)(target, level, internalformat, width, height, depth, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage3DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexImage3DARB.f)(target, level, internalformat, width, height, depth, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage3DOES(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexImage3DOES.f)(target, level, internalformat, width, height, depth, border, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexSubImage1D.f)(target, level, xoffset, width, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage1DARB(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexSubImage1DARB.f)(target, level, xoffset, width, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexSubImage2D.f)(target, level, xoffset, yoffset, width, height, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage2DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexSubImage2DARB.f)(target, level, xoffset, yoffset, width, height, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexSubImage3D.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage3DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexSubImage3DARB.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::CompressedTexSubImage3DOES.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) } }
#[inline] pub fn CompressedTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedTextureImage1DEXT.f)(texture, target, level, internalformat, width, border, imageSize, bits) } }
#[inline] pub fn CompressedTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedTextureImage2DEXT.f)(texture, target, level, internalformat, width, height, border, imageSize, bits) } }
#[inline] pub fn CompressedTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedTextureImage3DEXT.f)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) } }
#[inline] pub fn CompressedTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedTextureSubImage1DEXT.f)(texture, target, level, xoffset, width, format, imageSize, bits) } }
#[inline] pub fn CompressedTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedTextureSubImage2DEXT.f)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) } }
#[inline] pub fn CompressedTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { (storage::CompressedTextureSubImage3DEXT.f)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) } }
#[inline] pub fn ConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { (storage::ConvolutionFilter1D.f)(target, internalformat, width, format, type_, image) } }
#[inline] pub fn ConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { (storage::ConvolutionFilter1DEXT.f)(target, internalformat, width, format, type_, image) } }
#[inline] pub fn ConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { (storage::ConvolutionFilter2D.f)(target, internalformat, width, height, format, type_, image) } }
#[inline] pub fn ConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { (storage::ConvolutionFilter2DEXT.f)(target, internalformat, width, height, format, type_, image) } }
#[inline] pub fn ConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) -> c_void { unsafe { (storage::ConvolutionParameterf.f)(target, pname, params) } }
#[inline] pub fn ConvolutionParameterfEXT(target: GLenum, pname: GLenum, params: GLfloat) -> c_void { unsafe { (storage::ConvolutionParameterfEXT.f)(target, pname, params) } }
#[inline] pub fn ConvolutionParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::ConvolutionParameterfv.f)(target, pname, params) } }
#[inline] pub fn ConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::ConvolutionParameterfvEXT.f)(target, pname, params) } }
#[inline] pub fn ConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) -> c_void { unsafe { (storage::ConvolutionParameteri.f)(target, pname, params) } }
#[inline] pub fn ConvolutionParameteriEXT(target: GLenum, pname: GLenum, params: GLint) -> c_void { unsafe { (storage::ConvolutionParameteriEXT.f)(target, pname, params) } }
#[inline] pub fn ConvolutionParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::ConvolutionParameteriv.f)(target, pname, params) } }
#[inline] pub fn ConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::ConvolutionParameterivEXT.f)(target, pname, params) } }
#[inline] pub fn ConvolutionParameterxOES(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::ConvolutionParameterxOES.f)(target, pname, param) } }
#[inline] pub fn ConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::ConvolutionParameterxvOES.f)(target, pname, params) } }
#[inline] pub fn CopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (storage::CopyBufferSubData.f)(readTarget, writeTarget, readOffset, writeOffset, size) } }
#[inline] pub fn CopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyColorSubTable.f)(target, start, x, y, width) } }
#[inline] pub fn CopyColorSubTableEXT(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyColorSubTableEXT.f)(target, start, x, y, width) } }
#[inline] pub fn CopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyColorTable.f)(target, internalformat, x, y, width) } }
#[inline] pub fn CopyColorTableSGI(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyColorTableSGI.f)(target, internalformat, x, y, width) } }
#[inline] pub fn CopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyConvolutionFilter1D.f)(target, internalformat, x, y, width) } }
#[inline] pub fn CopyConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyConvolutionFilter1DEXT.f)(target, internalformat, x, y, width) } }
#[inline] pub fn CopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyConvolutionFilter2D.f)(target, internalformat, x, y, width, height) } }
#[inline] pub fn CopyConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyConvolutionFilter2DEXT.f)(target, internalformat, x, y, width, height) } }
#[inline] pub fn CopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> c_void { unsafe { (storage::CopyImageSubData.f)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) } }
#[inline] pub fn CopyImageSubDataNV(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (storage::CopyImageSubDataNV.f)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) } }
#[inline] pub fn CopyMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { (storage::CopyMultiTexImage1DEXT.f)(texunit, target, level, internalformat, x, y, width, border) } }
#[inline] pub fn CopyMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { (storage::CopyMultiTexImage2DEXT.f)(texunit, target, level, internalformat, x, y, width, height, border) } }
#[inline] pub fn CopyMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyMultiTexSubImage1DEXT.f)(texunit, target, level, xoffset, x, y, width) } }
#[inline] pub fn CopyMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyMultiTexSubImage2DEXT.f)(texunit, target, level, xoffset, yoffset, x, y, width, height) } }
#[inline] pub fn CopyMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyMultiTexSubImage3DEXT.f)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CopyPathNV(resultPath: GLuint, srcPath: GLuint) -> c_void { unsafe { (storage::CopyPathNV.f)(resultPath, srcPath) } }
#[inline] pub fn CopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum) -> c_void { unsafe { (storage::CopyPixels.f)(x, y, width, height, type_) } }
#[inline] pub fn CopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { (storage::CopyTexImage1D.f)(target, level, internalformat, x, y, width, border) } }
#[inline] pub fn CopyTexImage1DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { (storage::CopyTexImage1DEXT.f)(target, level, internalformat, x, y, width, border) } }
#[inline] pub fn CopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { (storage::CopyTexImage2D.f)(target, level, internalformat, x, y, width, height, border) } }
#[inline] pub fn CopyTexImage2DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { (storage::CopyTexImage2DEXT.f)(target, level, internalformat, x, y, width, height, border) } }
#[inline] pub fn CopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyTexSubImage1D.f)(target, level, xoffset, x, y, width) } }
#[inline] pub fn CopyTexSubImage1DEXT(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyTexSubImage1DEXT.f)(target, level, xoffset, x, y, width) } }
#[inline] pub fn CopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyTexSubImage2D.f)(target, level, xoffset, yoffset, x, y, width, height) } }
#[inline] pub fn CopyTexSubImage2DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyTexSubImage2DEXT.f)(target, level, xoffset, yoffset, x, y, width, height) } }
#[inline] pub fn CopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyTexSubImage3D.f)(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CopyTexSubImage3DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyTexSubImage3DEXT.f)(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CopyTexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyTexSubImage3DOES.f)(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CopyTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { (storage::CopyTextureImage1DEXT.f)(texture, target, level, internalformat, x, y, width, border) } }
#[inline] pub fn CopyTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { (storage::CopyTextureImage2DEXT.f)(texture, target, level, internalformat, x, y, width, height, border) } }
#[inline] pub fn CopyTextureLevelsAPPLE(destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) -> c_void { unsafe { (storage::CopyTextureLevelsAPPLE.f)(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) } }
#[inline] pub fn CopyTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (storage::CopyTextureSubImage1DEXT.f)(texture, target, level, xoffset, x, y, width) } }
#[inline] pub fn CopyTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyTextureSubImage2DEXT.f)(texture, target, level, xoffset, yoffset, x, y, width, height) } }
#[inline] pub fn CopyTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::CopyTextureSubImage3DEXT.f)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { (storage::CoverFillPathInstancedNV.f)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) } }
#[inline] pub fn CoverFillPathNV(path: GLuint, coverMode: GLenum) -> c_void { unsafe { (storage::CoverFillPathNV.f)(path, coverMode) } }
#[inline] pub fn CoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { (storage::CoverStrokePathInstancedNV.f)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) } }
#[inline] pub fn CoverStrokePathNV(path: GLuint, coverMode: GLenum) -> c_void { unsafe { (storage::CoverStrokePathNV.f)(path, coverMode) } }
#[inline] pub fn CoverageMaskNV(mask: GLboolean) -> c_void { unsafe { (storage::CoverageMaskNV.f)(mask) } }
#[inline] pub fn CoverageOperationNV(operation: GLenum) -> c_void { unsafe { (storage::CoverageOperationNV.f)(operation) } }
#[inline] pub unsafe fn CreateProgram() -> GLuint { (storage::CreateProgram.f)() }
#[inline] pub unsafe fn CreateProgramObjectARB() -> GLhandleARB { (storage::CreateProgramObjectARB.f)() }
#[inline] pub fn CreateShader(type_: GLenum) -> GLuint { unsafe { (storage::CreateShader.f)(type_) } }
#[inline] pub fn CreateShaderObjectARB(shaderType: GLenum) -> GLhandleARB { unsafe { (storage::CreateShaderObjectARB.f)(shaderType) } }
#[inline] pub fn CreateShaderProgramEXT(type_: GLenum, string: *GLchar) -> GLuint { unsafe { (storage::CreateShaderProgramEXT.f)(type_, string) } }
#[inline] pub fn CreateShaderProgramv(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint { unsafe { (storage::CreateShaderProgramv.f)(type_, count, strings) } }
#[inline] pub fn CreateShaderProgramvEXT(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint { unsafe { (storage::CreateShaderProgramvEXT.f)(type_, count, strings) } }
#[inline] pub fn CreateSyncFromCLeventARB(context: *_cl_context, event: *_cl_event, flags: GLbitfield) -> GLsync { unsafe { (storage::CreateSyncFromCLeventARB.f)(context, event, flags) } }
#[inline] pub fn CullFace(mode: GLenum) -> c_void { unsafe { (storage::CullFace.f)(mode) } }
#[inline] pub fn CullParameterdvEXT(pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::CullParameterdvEXT.f)(pname, params) } }
#[inline] pub fn CullParameterfvEXT(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::CullParameterfvEXT.f)(pname, params) } }
#[inline] pub fn CurrentPaletteMatrixARB(index: GLint) -> c_void { unsafe { (storage::CurrentPaletteMatrixARB.f)(index) } }
#[inline] pub fn CurrentPaletteMatrixOES(matrixpaletteindex: GLuint) -> c_void { unsafe { (storage::CurrentPaletteMatrixOES.f)(matrixpaletteindex) } }
#[inline] pub fn DebugMessageCallback(callback: GLDEBUGPROC, userParam: *c_void) -> c_void { unsafe { (storage::DebugMessageCallback.f)(callback, userParam) } }
#[inline] pub fn DebugMessageCallbackAMD(callback: GLDEBUGPROCAMD, userParam: *c_void) -> c_void { unsafe { (storage::DebugMessageCallbackAMD.f)(callback, userParam) } }
#[inline] pub fn DebugMessageCallbackARB(callback: GLDEBUGPROCARB, userParam: *c_void) -> c_void { unsafe { (storage::DebugMessageCallbackARB.f)(callback, userParam) } }
#[inline] pub fn DebugMessageCallbackKHR(callback: GLDEBUGPROCKHR, userParam: *c_void) -> c_void { unsafe { (storage::DebugMessageCallbackKHR.f)(callback, userParam) } }
#[inline] pub fn DebugMessageControl(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { unsafe { (storage::DebugMessageControl.f)(source, type_, severity, count, ids, enabled) } }
#[inline] pub fn DebugMessageControlARB(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { unsafe { (storage::DebugMessageControlARB.f)(source, type_, severity, count, ids, enabled) } }
#[inline] pub fn DebugMessageControlKHR(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { unsafe { (storage::DebugMessageControlKHR.f)(source, type_, severity, count, ids, enabled) } }
#[inline] pub fn DebugMessageEnableAMD(category: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { unsafe { (storage::DebugMessageEnableAMD.f)(category, severity, count, ids, enabled) } }
#[inline] pub fn DebugMessageInsert(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { unsafe { (storage::DebugMessageInsert.f)(source, type_, id, severity, length, buf) } }
#[inline] pub fn DebugMessageInsertAMD(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *GLchar) -> c_void { unsafe { (storage::DebugMessageInsertAMD.f)(category, severity, id, length, buf) } }
#[inline] pub fn DebugMessageInsertARB(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { unsafe { (storage::DebugMessageInsertARB.f)(source, type_, id, severity, length, buf) } }
#[inline] pub fn DebugMessageInsertKHR(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { unsafe { (storage::DebugMessageInsertKHR.f)(source, type_, id, severity, length, buf) } }
#[inline] pub fn DeformSGIX(mask: GLbitfield) -> c_void { unsafe { (storage::DeformSGIX.f)(mask) } }
#[inline] pub fn DeformationMap3dSGIX(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *GLdouble) -> c_void { unsafe { (storage::DeformationMap3dSGIX.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) } }
#[inline] pub fn DeformationMap3fSGIX(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *GLfloat) -> c_void { unsafe { (storage::DeformationMap3fSGIX.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) } }
#[inline] pub fn DeleteAsyncMarkersSGIX(marker: GLuint, range: GLsizei) -> c_void { unsafe { (storage::DeleteAsyncMarkersSGIX.f)(marker, range) } }
#[inline] pub fn DeleteBuffers(n: GLsizei, buffers: *GLuint) -> c_void { unsafe { (storage::DeleteBuffers.f)(n, buffers) } }
#[inline] pub fn DeleteBuffersARB(n: GLsizei, buffers: *GLuint) -> c_void { unsafe { (storage::DeleteBuffersARB.f)(n, buffers) } }
#[inline] pub fn DeleteFencesAPPLE(n: GLsizei, fences: *GLuint) -> c_void { unsafe { (storage::DeleteFencesAPPLE.f)(n, fences) } }
#[inline] pub fn DeleteFencesNV(n: GLsizei, fences: *GLuint) -> c_void { unsafe { (storage::DeleteFencesNV.f)(n, fences) } }
#[inline] pub fn DeleteFragmentShaderATI(id: GLuint) -> c_void { unsafe { (storage::DeleteFragmentShaderATI.f)(id) } }
#[inline] pub fn DeleteFramebuffers(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { (storage::DeleteFramebuffers.f)(n, framebuffers) } }
#[inline] pub fn DeleteFramebuffersEXT(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { (storage::DeleteFramebuffersEXT.f)(n, framebuffers) } }
#[inline] pub fn DeleteFramebuffersOES(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { (storage::DeleteFramebuffersOES.f)(n, framebuffers) } }
#[inline] pub fn DeleteLists(list: GLuint, range: GLsizei) -> c_void { unsafe { (storage::DeleteLists.f)(list, range) } }
#[inline] pub fn DeleteNamedStringARB(namelen: GLint, name: *GLchar) -> c_void { unsafe { (storage::DeleteNamedStringARB.f)(namelen, name) } }
#[inline] pub fn DeleteNamesAMD(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void { unsafe { (storage::DeleteNamesAMD.f)(identifier, num, names) } }
#[inline] pub fn DeleteObjectARB(obj: GLhandleARB) -> c_void { unsafe { (storage::DeleteObjectARB.f)(obj) } }
#[inline] pub fn DeleteOcclusionQueriesNV(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::DeleteOcclusionQueriesNV.f)(n, ids) } }
#[inline] pub fn DeletePathsNV(path: GLuint, range: GLsizei) -> c_void { unsafe { (storage::DeletePathsNV.f)(path, range) } }
#[inline] pub fn DeletePerfMonitorsAMD(n: GLsizei, monitors: *GLuint) -> c_void { unsafe { (storage::DeletePerfMonitorsAMD.f)(n, monitors) } }
#[inline] pub fn DeleteProgram(program: GLuint) -> c_void { unsafe { (storage::DeleteProgram.f)(program) } }
#[inline] pub fn DeleteProgramPipelines(n: GLsizei, pipelines: *GLuint) -> c_void { unsafe { (storage::DeleteProgramPipelines.f)(n, pipelines) } }
#[inline] pub fn DeleteProgramPipelinesEXT(n: GLsizei, pipelines: *GLuint) -> c_void { unsafe { (storage::DeleteProgramPipelinesEXT.f)(n, pipelines) } }
#[inline] pub fn DeleteProgramsARB(n: GLsizei, programs: *GLuint) -> c_void { unsafe { (storage::DeleteProgramsARB.f)(n, programs) } }
#[inline] pub fn DeleteProgramsNV(n: GLsizei, programs: *GLuint) -> c_void { unsafe { (storage::DeleteProgramsNV.f)(n, programs) } }
#[inline] pub fn DeleteQueries(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::DeleteQueries.f)(n, ids) } }
#[inline] pub fn DeleteQueriesARB(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::DeleteQueriesARB.f)(n, ids) } }
#[inline] pub fn DeleteQueriesEXT(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::DeleteQueriesEXT.f)(n, ids) } }
#[inline] pub fn DeleteRenderbuffers(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { (storage::DeleteRenderbuffers.f)(n, renderbuffers) } }
#[inline] pub fn DeleteRenderbuffersEXT(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { (storage::DeleteRenderbuffersEXT.f)(n, renderbuffers) } }
#[inline] pub fn DeleteRenderbuffersOES(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { (storage::DeleteRenderbuffersOES.f)(n, renderbuffers) } }
#[inline] pub fn DeleteSamplers(count: GLsizei, samplers: *GLuint) -> c_void { unsafe { (storage::DeleteSamplers.f)(count, samplers) } }
#[inline] pub fn DeleteShader(shader: GLuint) -> c_void { unsafe { (storage::DeleteShader.f)(shader) } }
#[inline] pub fn DeleteSync(sync: GLsync) -> c_void { unsafe { (storage::DeleteSync.f)(sync) } }
#[inline] pub fn DeleteSyncAPPLE(sync: GLsync) -> c_void { unsafe { (storage::DeleteSyncAPPLE.f)(sync) } }
#[inline] pub fn DeleteTextures(n: GLsizei, textures: *GLuint) -> c_void { unsafe { (storage::DeleteTextures.f)(n, textures) } }
#[inline] pub fn DeleteTexturesEXT(n: GLsizei, textures: *GLuint) -> c_void { unsafe { (storage::DeleteTexturesEXT.f)(n, textures) } }
#[inline] pub fn DeleteTransformFeedbacks(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::DeleteTransformFeedbacks.f)(n, ids) } }
#[inline] pub fn DeleteTransformFeedbacksNV(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::DeleteTransformFeedbacksNV.f)(n, ids) } }
#[inline] pub fn DeleteVertexArrays(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { (storage::DeleteVertexArrays.f)(n, arrays) } }
#[inline] pub fn DeleteVertexArraysAPPLE(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { (storage::DeleteVertexArraysAPPLE.f)(n, arrays) } }
#[inline] pub fn DeleteVertexArraysOES(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { (storage::DeleteVertexArraysOES.f)(n, arrays) } }
#[inline] pub fn DeleteVertexShaderEXT(id: GLuint) -> c_void { unsafe { (storage::DeleteVertexShaderEXT.f)(id) } }
#[inline] pub fn DepthBoundsEXT(zmin: GLclampd, zmax: GLclampd) -> c_void { unsafe { (storage::DepthBoundsEXT.f)(zmin, zmax) } }
#[inline] pub fn DepthBoundsdNV(zmin: GLdouble, zmax: GLdouble) -> c_void { unsafe { (storage::DepthBoundsdNV.f)(zmin, zmax) } }
#[inline] pub fn DepthFunc(func: GLenum) -> c_void { unsafe { (storage::DepthFunc.f)(func) } }
#[inline] pub fn DepthMask(flag: GLboolean) -> c_void { unsafe { (storage::DepthMask.f)(flag) } }
#[inline] pub fn DepthRange(near: GLdouble, far: GLdouble) -> c_void { unsafe { (storage::DepthRange.f)(near, far) } }
#[inline] pub fn DepthRangeArrayv(first: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { (storage::DepthRangeArrayv.f)(first, count, v) } }
#[inline] pub fn DepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble) -> c_void { unsafe { (storage::DepthRangeIndexed.f)(index, n, f) } }
#[inline] pub fn DepthRangedNV(zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (storage::DepthRangedNV.f)(zNear, zFar) } }
#[inline] pub fn DepthRangef(n: GLfloat, f: GLfloat) -> c_void { unsafe { (storage::DepthRangef.f)(n, f) } }
#[inline] pub fn DepthRangefOES(n: GLclampf, f: GLclampf) -> c_void { unsafe { (storage::DepthRangefOES.f)(n, f) } }
#[inline] pub fn DepthRangex(n: GLfixed, f: GLfixed) -> c_void { unsafe { (storage::DepthRangex.f)(n, f) } }
#[inline] pub fn DepthRangexOES(n: GLfixed, f: GLfixed) -> c_void { unsafe { (storage::DepthRangexOES.f)(n, f) } }
#[inline] pub fn DetachObjectARB(containerObj: GLhandleARB, attachedObj: GLhandleARB) -> c_void { unsafe { (storage::DetachObjectARB.f)(containerObj, attachedObj) } }
#[inline] pub fn DetachShader(program: GLuint, shader: GLuint) -> c_void { unsafe { (storage::DetachShader.f)(program, shader) } }
#[inline] pub fn DetailTexFuncSGIS(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void { unsafe { (storage::DetailTexFuncSGIS.f)(target, n, points) } }
#[inline] pub fn Disable(cap: GLenum) -> c_void { unsafe { (storage::Disable.f)(cap) } }
#[inline] pub fn DisableClientState(array: GLenum) -> c_void { unsafe { (storage::DisableClientState.f)(array) } }
#[inline] pub fn DisableClientStateIndexedEXT(array: GLenum, index: GLuint) -> c_void { unsafe { (storage::DisableClientStateIndexedEXT.f)(array, index) } }
#[inline] pub fn DisableClientStateiEXT(array: GLenum, index: GLuint) -> c_void { unsafe { (storage::DisableClientStateiEXT.f)(array, index) } }
#[inline] pub fn DisableDriverControlQCOM(driverControl: GLuint) -> c_void { unsafe { (storage::DisableDriverControlQCOM.f)(driverControl) } }
#[inline] pub fn DisableIndexedEXT(target: GLenum, index: GLuint) -> c_void { unsafe { (storage::DisableIndexedEXT.f)(target, index) } }
#[inline] pub fn DisableVariantClientStateEXT(id: GLuint) -> c_void { unsafe { (storage::DisableVariantClientStateEXT.f)(id) } }
#[inline] pub fn DisableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint) -> c_void { unsafe { (storage::DisableVertexArrayAttribEXT.f)(vaobj, index) } }
#[inline] pub fn DisableVertexArrayEXT(vaobj: GLuint, array: GLenum) -> c_void { unsafe { (storage::DisableVertexArrayEXT.f)(vaobj, array) } }
#[inline] pub fn DisableVertexAttribAPPLE(index: GLuint, pname: GLenum) -> c_void { unsafe { (storage::DisableVertexAttribAPPLE.f)(index, pname) } }
#[inline] pub fn DisableVertexAttribArray(index: GLuint) -> c_void { unsafe { (storage::DisableVertexAttribArray.f)(index) } }
#[inline] pub fn DisableVertexAttribArrayARB(index: GLuint) -> c_void { unsafe { (storage::DisableVertexAttribArrayARB.f)(index) } }
#[inline] pub fn Disablei(target: GLenum, index: GLuint) -> c_void { unsafe { (storage::Disablei.f)(target, index) } }
#[inline] pub fn DiscardFramebufferEXT(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void { unsafe { (storage::DiscardFramebufferEXT.f)(target, numAttachments, attachments) } }
#[inline] pub fn DispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> c_void { unsafe { (storage::DispatchCompute.f)(num_groups_x, num_groups_y, num_groups_z) } }
#[inline] pub fn DispatchComputeGroupSizeARB(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) -> c_void { unsafe { (storage::DispatchComputeGroupSizeARB.f)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) } }
#[inline] pub fn DispatchComputeIndirect(indirect: GLintptr) -> c_void { unsafe { (storage::DispatchComputeIndirect.f)(indirect) } }
#[inline] pub fn DrawArrays(mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { (storage::DrawArrays.f)(mode, first, count) } }
#[inline] pub fn DrawArraysEXT(mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { (storage::DrawArraysEXT.f)(mode, first, count) } }
#[inline] pub fn DrawArraysIndirect(mode: GLenum, indirect: *GLvoid) -> c_void { unsafe { (storage::DrawArraysIndirect.f)(mode, indirect) } }
#[inline] pub fn DrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> c_void { unsafe { (storage::DrawArraysInstanced.f)(mode, first, count, instancecount) } }
#[inline] pub fn DrawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { (storage::DrawArraysInstancedANGLE.f)(mode, first, count, primcount) } }
#[inline] pub fn DrawArraysInstancedARB(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { (storage::DrawArraysInstancedARB.f)(mode, first, count, primcount) } }
#[inline] pub fn DrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> c_void { unsafe { (storage::DrawArraysInstancedBaseInstance.f)(mode, first, count, instancecount, baseinstance) } }
#[inline] pub fn DrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { (storage::DrawArraysInstancedEXT.f)(mode, start, count, primcount) } }
#[inline] pub fn DrawArraysInstancedNV(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { (storage::DrawArraysInstancedNV.f)(mode, first, count, primcount) } }
#[inline] pub fn DrawBuffer(mode: GLenum) -> c_void { unsafe { (storage::DrawBuffer.f)(mode) } }
#[inline] pub fn DrawBuffers(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { (storage::DrawBuffers.f)(n, bufs) } }
#[inline] pub fn DrawBuffersARB(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { (storage::DrawBuffersARB.f)(n, bufs) } }
#[inline] pub fn DrawBuffersATI(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { (storage::DrawBuffersATI.f)(n, bufs) } }
#[inline] pub fn DrawBuffersEXT(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { (storage::DrawBuffersEXT.f)(n, bufs) } }
#[inline] pub fn DrawBuffersIndexedEXT(n: GLint, location: *GLenum, indices: *GLint) -> c_void { unsafe { (storage::DrawBuffersIndexedEXT.f)(n, location, indices) } }
#[inline] pub fn DrawBuffersNV(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { (storage::DrawBuffersNV.f)(n, bufs) } }
#[inline] pub fn DrawElementArrayAPPLE(mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { (storage::DrawElementArrayAPPLE.f)(mode, first, count) } }
#[inline] pub fn DrawElementArrayATI(mode: GLenum, count: GLsizei) -> c_void { unsafe { (storage::DrawElementArrayATI.f)(mode, count) } }
#[inline] pub fn DrawElements(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { unsafe { (storage::DrawElements.f)(mode, count, type_, indices) } }
#[inline] pub fn DrawElementsBaseVertex(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void { unsafe { (storage::DrawElementsBaseVertex.f)(mode, count, type_, indices, basevertex) } }
#[inline] pub fn DrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *GLvoid) -> c_void { unsafe { (storage::DrawElementsIndirect.f)(mode, type_, indirect) } }
#[inline] pub fn DrawElementsInstanced(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei) -> c_void { unsafe { (storage::DrawElementsInstanced.f)(mode, count, type_, indices, instancecount) } }
#[inline] pub fn DrawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, primcount: GLsizei) -> c_void { unsafe { (storage::DrawElementsInstancedANGLE.f)(mode, count, type_, indices, primcount) } }
#[inline] pub fn DrawElementsInstancedARB(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { unsafe { (storage::DrawElementsInstancedARB.f)(mode, count, type_, indices, primcount) } }
#[inline] pub fn DrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, baseinstance: GLuint) -> c_void { unsafe { (storage::DrawElementsInstancedBaseInstance.f)(mode, count, type_, indices, instancecount, baseinstance) } }
#[inline] pub fn DrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei, basevertex: GLint) -> c_void { unsafe { (storage::DrawElementsInstancedBaseVertex.f)(mode, count, type_, indices, instancecount, basevertex) } }
#[inline] pub fn DrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> c_void { unsafe { (storage::DrawElementsInstancedBaseVertexBaseInstance.f)(mode, count, type_, indices, instancecount, basevertex, baseinstance) } }
#[inline] pub fn DrawElementsInstancedEXT(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { unsafe { (storage::DrawElementsInstancedEXT.f)(mode, count, type_, indices, primcount) } }
#[inline] pub fn DrawElementsInstancedNV(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { unsafe { (storage::DrawElementsInstancedNV.f)(mode, count, type_, indices, primcount) } }
#[inline] pub fn DrawMeshArraysSUN(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) -> c_void { unsafe { (storage::DrawMeshArraysSUN.f)(mode, first, count, width) } }
#[inline] pub fn DrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::DrawPixels.f)(width, height, format, type_, pixels) } }
#[inline] pub fn DrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) -> c_void { unsafe { (storage::DrawRangeElementArrayAPPLE.f)(mode, start, end, first, count) } }
#[inline] pub fn DrawRangeElementArrayATI(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) -> c_void { unsafe { (storage::DrawRangeElementArrayATI.f)(mode, start, end, count) } }
#[inline] pub fn DrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { unsafe { (storage::DrawRangeElements.f)(mode, start, end, count, type_, indices) } }
#[inline] pub fn DrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void { unsafe { (storage::DrawRangeElementsBaseVertex.f)(mode, start, end, count, type_, indices, basevertex) } }
#[inline] pub fn DrawRangeElementsEXT(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { unsafe { (storage::DrawRangeElementsEXT.f)(mode, start, end, count, type_, indices) } }
#[inline] pub fn DrawTexfOES(x: GLfloat, y: GLfloat, z: GLfloat, width: GLfloat, height: GLfloat) -> c_void { unsafe { (storage::DrawTexfOES.f)(x, y, z, width, height) } }
#[inline] pub unsafe fn DrawTexfvOES(coords: *GLfloat) -> c_void { (storage::DrawTexfvOES.f)(coords) }
#[inline] pub fn DrawTexiOES(x: GLint, y: GLint, z: GLint, width: GLint, height: GLint) -> c_void { unsafe { (storage::DrawTexiOES.f)(x, y, z, width, height) } }
#[inline] pub unsafe fn DrawTexivOES(coords: *GLint) -> c_void { (storage::DrawTexivOES.f)(coords) }
#[inline] pub fn DrawTexsOES(x: GLshort, y: GLshort, z: GLshort, width: GLshort, height: GLshort) -> c_void { unsafe { (storage::DrawTexsOES.f)(x, y, z, width, height) } }
#[inline] pub unsafe fn DrawTexsvOES(coords: *GLshort) -> c_void { (storage::DrawTexsvOES.f)(coords) }
#[inline] pub fn DrawTextureNV(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> c_void { unsafe { (storage::DrawTextureNV.f)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) } }
#[inline] pub fn DrawTexxOES(x: GLfixed, y: GLfixed, z: GLfixed, width: GLfixed, height: GLfixed) -> c_void { unsafe { (storage::DrawTexxOES.f)(x, y, z, width, height) } }
#[inline] pub unsafe fn DrawTexxvOES(coords: *GLfixed) -> c_void { (storage::DrawTexxvOES.f)(coords) }
#[inline] pub fn DrawTransformFeedback(mode: GLenum, id: GLuint) -> c_void { unsafe { (storage::DrawTransformFeedback.f)(mode, id) } }
#[inline] pub fn DrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei) -> c_void { unsafe { (storage::DrawTransformFeedbackInstanced.f)(mode, id, instancecount) } }
#[inline] pub fn DrawTransformFeedbackNV(mode: GLenum, id: GLuint) -> c_void { unsafe { (storage::DrawTransformFeedbackNV.f)(mode, id) } }
#[inline] pub fn DrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint) -> c_void { unsafe { (storage::DrawTransformFeedbackStream.f)(mode, id, stream) } }
#[inline] pub fn DrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> c_void { unsafe { (storage::DrawTransformFeedbackStreamInstanced.f)(mode, id, stream, instancecount) } }
#[inline] pub fn EGLImageTargetRenderbufferStorageOES(target: GLenum, image: GLeglImageOES) -> c_void { unsafe { (storage::EGLImageTargetRenderbufferStorageOES.f)(target, image) } }
#[inline] pub fn EGLImageTargetTexture2DOES(target: GLenum, image: GLeglImageOES) -> c_void { unsafe { (storage::EGLImageTargetTexture2DOES.f)(target, image) } }
#[inline] pub fn EdgeFlag(flag: GLboolean) -> c_void { unsafe { (storage::EdgeFlag.f)(flag) } }
#[inline] pub fn EdgeFlagFormatNV(stride: GLsizei) -> c_void { unsafe { (storage::EdgeFlagFormatNV.f)(stride) } }
#[inline] pub fn EdgeFlagPointer(stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::EdgeFlagPointer.f)(stride, pointer) } }
#[inline] pub fn EdgeFlagPointerEXT(stride: GLsizei, count: GLsizei, pointer: *GLboolean) -> c_void { unsafe { (storage::EdgeFlagPointerEXT.f)(stride, count, pointer) } }
#[inline] pub fn EdgeFlagPointerListIBM(stride: GLint, pointer: **GLboolean, ptrstride: GLint) -> c_void { unsafe { (storage::EdgeFlagPointerListIBM.f)(stride, pointer, ptrstride) } }
#[inline] pub unsafe fn EdgeFlagv(flag: *GLboolean) -> c_void { (storage::EdgeFlagv.f)(flag) }
#[inline] pub fn ElementPointerAPPLE(type_: GLenum, pointer: *GLvoid) -> c_void { unsafe { (storage::ElementPointerAPPLE.f)(type_, pointer) } }
#[inline] pub fn ElementPointerATI(type_: GLenum, pointer: *GLvoid) -> c_void { unsafe { (storage::ElementPointerATI.f)(type_, pointer) } }
#[inline] pub fn Enable(cap: GLenum) -> c_void { unsafe { (storage::Enable.f)(cap) } }
#[inline] pub fn EnableClientState(array: GLenum) -> c_void { unsafe { (storage::EnableClientState.f)(array) } }
#[inline] pub fn EnableClientStateIndexedEXT(array: GLenum, index: GLuint) -> c_void { unsafe { (storage::EnableClientStateIndexedEXT.f)(array, index) } }
#[inline] pub fn EnableClientStateiEXT(array: GLenum, index: GLuint) -> c_void { unsafe { (storage::EnableClientStateiEXT.f)(array, index) } }
#[inline] pub fn EnableDriverControlQCOM(driverControl: GLuint) -> c_void { unsafe { (storage::EnableDriverControlQCOM.f)(driverControl) } }
#[inline] pub fn EnableIndexedEXT(target: GLenum, index: GLuint) -> c_void { unsafe { (storage::EnableIndexedEXT.f)(target, index) } }
#[inline] pub fn EnableVariantClientStateEXT(id: GLuint) -> c_void { unsafe { (storage::EnableVariantClientStateEXT.f)(id) } }
#[inline] pub fn EnableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint) -> c_void { unsafe { (storage::EnableVertexArrayAttribEXT.f)(vaobj, index) } }
#[inline] pub fn EnableVertexArrayEXT(vaobj: GLuint, array: GLenum) -> c_void { unsafe { (storage::EnableVertexArrayEXT.f)(vaobj, array) } }
#[inline] pub fn EnableVertexAttribAPPLE(index: GLuint, pname: GLenum) -> c_void { unsafe { (storage::EnableVertexAttribAPPLE.f)(index, pname) } }
#[inline] pub fn EnableVertexAttribArray(index: GLuint) -> c_void { unsafe { (storage::EnableVertexAttribArray.f)(index) } }
#[inline] pub fn EnableVertexAttribArrayARB(index: GLuint) -> c_void { unsafe { (storage::EnableVertexAttribArrayARB.f)(index) } }
#[inline] pub fn Enablei(target: GLenum, index: GLuint) -> c_void { unsafe { (storage::Enablei.f)(target, index) } }
#[inline] pub unsafe fn End() -> c_void { (storage::End.f)() }
#[inline] pub unsafe fn EndConditionalRender() -> c_void { (storage::EndConditionalRender.f)() }
#[inline] pub unsafe fn EndConditionalRenderNV() -> c_void { (storage::EndConditionalRenderNV.f)() }
#[inline] pub unsafe fn EndConditionalRenderNVX() -> c_void { (storage::EndConditionalRenderNVX.f)() }
#[inline] pub unsafe fn EndFragmentShaderATI() -> c_void { (storage::EndFragmentShaderATI.f)() }
#[inline] pub unsafe fn EndList() -> c_void { (storage::EndList.f)() }
#[inline] pub unsafe fn EndOcclusionQueryNV() -> c_void { (storage::EndOcclusionQueryNV.f)() }
#[inline] pub fn EndPerfMonitorAMD(monitor: GLuint) -> c_void { unsafe { (storage::EndPerfMonitorAMD.f)(monitor) } }
#[inline] pub fn EndQuery(target: GLenum) -> c_void { unsafe { (storage::EndQuery.f)(target) } }
#[inline] pub fn EndQueryARB(target: GLenum) -> c_void { unsafe { (storage::EndQueryARB.f)(target) } }
#[inline] pub fn EndQueryEXT(target: GLenum) -> c_void { unsafe { (storage::EndQueryEXT.f)(target) } }
#[inline] pub fn EndQueryIndexed(target: GLenum, index: GLuint) -> c_void { unsafe { (storage::EndQueryIndexed.f)(target, index) } }
#[inline] pub fn EndTilingQCOM(preserveMask: GLbitfield) -> c_void { unsafe { (storage::EndTilingQCOM.f)(preserveMask) } }
#[inline] pub unsafe fn EndTransformFeedback() -> c_void { (storage::EndTransformFeedback.f)() }
#[inline] pub unsafe fn EndTransformFeedbackEXT() -> c_void { (storage::EndTransformFeedbackEXT.f)() }
#[inline] pub unsafe fn EndTransformFeedbackNV() -> c_void { (storage::EndTransformFeedbackNV.f)() }
#[inline] pub unsafe fn EndVertexShaderEXT() -> c_void { (storage::EndVertexShaderEXT.f)() }
#[inline] pub fn EndVideoCaptureNV(video_capture_slot: GLuint) -> c_void { unsafe { (storage::EndVideoCaptureNV.f)(video_capture_slot) } }
#[inline] pub fn EvalCoord1d(u: GLdouble) -> c_void { unsafe { (storage::EvalCoord1d.f)(u) } }
#[inline] pub unsafe fn EvalCoord1dv(u: *GLdouble) -> c_void { (storage::EvalCoord1dv.f)(u) }
#[inline] pub fn EvalCoord1f(u: GLfloat) -> c_void { unsafe { (storage::EvalCoord1f.f)(u) } }
#[inline] pub unsafe fn EvalCoord1fv(u: *GLfloat) -> c_void { (storage::EvalCoord1fv.f)(u) }
#[inline] pub fn EvalCoord1xOES(u: GLfixed) -> c_void { unsafe { (storage::EvalCoord1xOES.f)(u) } }
#[inline] pub unsafe fn EvalCoord1xvOES(coords: *GLfixed) -> c_void { (storage::EvalCoord1xvOES.f)(coords) }
#[inline] pub fn EvalCoord2d(u: GLdouble, v: GLdouble) -> c_void { unsafe { (storage::EvalCoord2d.f)(u, v) } }
#[inline] pub unsafe fn EvalCoord2dv(u: *GLdouble) -> c_void { (storage::EvalCoord2dv.f)(u) }
#[inline] pub fn EvalCoord2f(u: GLfloat, v: GLfloat) -> c_void { unsafe { (storage::EvalCoord2f.f)(u, v) } }
#[inline] pub unsafe fn EvalCoord2fv(u: *GLfloat) -> c_void { (storage::EvalCoord2fv.f)(u) }
#[inline] pub fn EvalCoord2xOES(u: GLfixed, v: GLfixed) -> c_void { unsafe { (storage::EvalCoord2xOES.f)(u, v) } }
#[inline] pub unsafe fn EvalCoord2xvOES(coords: *GLfixed) -> c_void { (storage::EvalCoord2xvOES.f)(coords) }
#[inline] pub fn EvalMapsNV(target: GLenum, mode: GLenum) -> c_void { unsafe { (storage::EvalMapsNV.f)(target, mode) } }
#[inline] pub fn EvalMesh1(mode: GLenum, i1: GLint, i2: GLint) -> c_void { unsafe { (storage::EvalMesh1.f)(mode, i1, i2) } }
#[inline] pub fn EvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> c_void { unsafe { (storage::EvalMesh2.f)(mode, i1, i2, j1, j2) } }
#[inline] pub fn EvalPoint1(i: GLint) -> c_void { unsafe { (storage::EvalPoint1.f)(i) } }
#[inline] pub fn EvalPoint2(i: GLint, j: GLint) -> c_void { unsafe { (storage::EvalPoint2.f)(i, j) } }
#[inline] pub fn ExecuteProgramNV(target: GLenum, id: GLuint, params: *GLfloat) -> c_void { unsafe { (storage::ExecuteProgramNV.f)(target, id, params) } }
#[inline] pub fn ExtGetBufferPointervQCOM(target: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::ExtGetBufferPointervQCOM.f)(target, params) } }
#[inline] pub fn ExtGetBuffersQCOM(buffers: *GLuint, maxBuffers: GLint, numBuffers: *GLint) -> c_void { unsafe { (storage::ExtGetBuffersQCOM.f)(buffers, maxBuffers, numBuffers) } }
#[inline] pub fn ExtGetFramebuffersQCOM(framebuffers: *GLuint, maxFramebuffers: GLint, numFramebuffers: *GLint) -> c_void { unsafe { (storage::ExtGetFramebuffersQCOM.f)(framebuffers, maxFramebuffers, numFramebuffers) } }
#[inline] pub fn ExtGetProgramBinarySourceQCOM(program: GLuint, shadertype: GLenum, source: *GLchar, length: *GLint) -> c_void { unsafe { (storage::ExtGetProgramBinarySourceQCOM.f)(program, shadertype, source, length) } }
#[inline] pub fn ExtGetProgramsQCOM(programs: *GLuint, maxPrograms: GLint, numPrograms: *GLint) -> c_void { unsafe { (storage::ExtGetProgramsQCOM.f)(programs, maxPrograms, numPrograms) } }
#[inline] pub fn ExtGetRenderbuffersQCOM(renderbuffers: *GLuint, maxRenderbuffers: GLint, numRenderbuffers: *GLint) -> c_void { unsafe { (storage::ExtGetRenderbuffersQCOM.f)(renderbuffers, maxRenderbuffers, numRenderbuffers) } }
#[inline] pub fn ExtGetShadersQCOM(shaders: *GLuint, maxShaders: GLint, numShaders: *GLint) -> c_void { unsafe { (storage::ExtGetShadersQCOM.f)(shaders, maxShaders, numShaders) } }
#[inline] pub fn ExtGetTexLevelParameterivQCOM(texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::ExtGetTexLevelParameterivQCOM.f)(texture, face, level, pname, params) } }
#[inline] pub fn ExtGetTexSubImageQCOM(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, texels: *GLvoid) -> c_void { unsafe { (storage::ExtGetTexSubImageQCOM.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, texels) } }
#[inline] pub fn ExtGetTexturesQCOM(textures: *GLuint, maxTextures: GLint, numTextures: *GLint) -> c_void { unsafe { (storage::ExtGetTexturesQCOM.f)(textures, maxTextures, numTextures) } }
#[inline] pub fn ExtIsProgramBinaryQCOM(program: GLuint) -> GLboolean { unsafe { (storage::ExtIsProgramBinaryQCOM.f)(program) } }
#[inline] pub fn ExtTexObjectStateOverrideiQCOM(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::ExtTexObjectStateOverrideiQCOM.f)(target, pname, param) } }
#[inline] pub fn ExtractComponentEXT(res: GLuint, src: GLuint, num: GLuint) -> c_void { unsafe { (storage::ExtractComponentEXT.f)(res, src, num) } }
#[inline] pub fn FeedbackBuffer(size: GLsizei, type_: GLenum, buffer: *GLfloat) -> c_void { unsafe { (storage::FeedbackBuffer.f)(size, type_, buffer) } }
#[inline] pub fn FeedbackBufferxOES(n: GLsizei, type_: GLenum, buffer: *GLfixed) -> c_void { unsafe { (storage::FeedbackBufferxOES.f)(n, type_, buffer) } }
#[inline] pub fn FenceSync(condition: GLenum, flags: GLbitfield) -> GLsync { unsafe { (storage::FenceSync.f)(condition, flags) } }
#[inline] pub fn FenceSyncAPPLE(condition: GLenum, flags: GLbitfield) -> GLsync { unsafe { (storage::FenceSyncAPPLE.f)(condition, flags) } }
#[inline] pub fn FinalCombinerInputNV(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void { unsafe { (storage::FinalCombinerInputNV.f)(variable, input, mapping, componentUsage) } }
#[inline] pub unsafe fn Finish() -> c_void { (storage::Finish.f)() }
#[inline] pub unsafe fn FinishAsyncSGIX(markerp: *GLuint) -> GLint { (storage::FinishAsyncSGIX.f)(markerp) }
#[inline] pub fn FinishFenceAPPLE(fence: GLuint) -> c_void { unsafe { (storage::FinishFenceAPPLE.f)(fence) } }
#[inline] pub fn FinishFenceNV(fence: GLuint) -> c_void { unsafe { (storage::FinishFenceNV.f)(fence) } }
#[inline] pub fn FinishObjectAPPLE(object: GLenum, name: GLint) -> c_void { unsafe { (storage::FinishObjectAPPLE.f)(object, name) } }
#[inline] pub unsafe fn FinishTextureSUNX() -> c_void { (storage::FinishTextureSUNX.f)() }
#[inline] pub unsafe fn Flush() -> c_void { (storage::Flush.f)() }
#[inline] pub fn FlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { (storage::FlushMappedBufferRange.f)(target, offset, length) } }
#[inline] pub fn FlushMappedBufferRangeAPPLE(target: GLenum, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (storage::FlushMappedBufferRangeAPPLE.f)(target, offset, size) } }
#[inline] pub fn FlushMappedBufferRangeEXT(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { (storage::FlushMappedBufferRangeEXT.f)(target, offset, length) } }
#[inline] pub fn FlushMappedNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { (storage::FlushMappedNamedBufferRangeEXT.f)(buffer, offset, length) } }
#[inline] pub fn FlushPixelDataRangeNV(target: GLenum) -> c_void { unsafe { (storage::FlushPixelDataRangeNV.f)(target) } }
#[inline] pub unsafe fn FlushRasterSGIX() -> c_void { (storage::FlushRasterSGIX.f)() }
#[inline] pub fn FlushStaticDataIBM(target: GLenum) -> c_void { unsafe { (storage::FlushStaticDataIBM.f)(target) } }
#[inline] pub fn FlushVertexArrayRangeAPPLE(length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::FlushVertexArrayRangeAPPLE.f)(length, pointer) } }
#[inline] pub unsafe fn FlushVertexArrayRangeNV() -> c_void { (storage::FlushVertexArrayRangeNV.f)() }
#[inline] pub fn FogCoordFormatNV(type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::FogCoordFormatNV.f)(type_, stride) } }
#[inline] pub fn FogCoordPointer(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::FogCoordPointer.f)(type_, stride, pointer) } }
#[inline] pub fn FogCoordPointerEXT(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::FogCoordPointerEXT.f)(type_, stride, pointer) } }
#[inline] pub fn FogCoordPointerListIBM(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { (storage::FogCoordPointerListIBM.f)(type_, stride, pointer, ptrstride) } }
#[inline] pub fn FogCoordd(coord: GLdouble) -> c_void { unsafe { (storage::FogCoordd.f)(coord) } }
#[inline] pub fn FogCoorddEXT(coord: GLdouble) -> c_void { unsafe { (storage::FogCoorddEXT.f)(coord) } }
#[inline] pub unsafe fn FogCoorddv(coord: *GLdouble) -> c_void { (storage::FogCoorddv.f)(coord) }
#[inline] pub unsafe fn FogCoorddvEXT(coord: *GLdouble) -> c_void { (storage::FogCoorddvEXT.f)(coord) }
#[inline] pub fn FogCoordf(coord: GLfloat) -> c_void { unsafe { (storage::FogCoordf.f)(coord) } }
#[inline] pub fn FogCoordfEXT(coord: GLfloat) -> c_void { unsafe { (storage::FogCoordfEXT.f)(coord) } }
#[inline] pub unsafe fn FogCoordfv(coord: *GLfloat) -> c_void { (storage::FogCoordfv.f)(coord) }
#[inline] pub unsafe fn FogCoordfvEXT(coord: *GLfloat) -> c_void { (storage::FogCoordfvEXT.f)(coord) }
#[inline] pub fn FogCoordhNV(fog: GLhalfNV) -> c_void { unsafe { (storage::FogCoordhNV.f)(fog) } }
#[inline] pub unsafe fn FogCoordhvNV(fog: *GLhalfNV) -> c_void { (storage::FogCoordhvNV.f)(fog) }
#[inline] pub fn FogFuncSGIS(n: GLsizei, points: *GLfloat) -> c_void { unsafe { (storage::FogFuncSGIS.f)(n, points) } }
#[inline] pub fn Fogf(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::Fogf.f)(pname, param) } }
#[inline] pub fn Fogfv(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::Fogfv.f)(pname, params) } }
#[inline] pub fn Fogi(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::Fogi.f)(pname, param) } }
#[inline] pub fn Fogiv(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::Fogiv.f)(pname, params) } }
#[inline] pub fn Fogx(pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::Fogx.f)(pname, param) } }
#[inline] pub fn FogxOES(pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::FogxOES.f)(pname, param) } }
#[inline] pub fn Fogxv(pname: GLenum, param: *GLfixed) -> c_void { unsafe { (storage::Fogxv.f)(pname, param) } }
#[inline] pub fn FogxvOES(pname: GLenum, param: *GLfixed) -> c_void { unsafe { (storage::FogxvOES.f)(pname, param) } }
#[inline] pub fn FragmentColorMaterialSGIX(face: GLenum, mode: GLenum) -> c_void { unsafe { (storage::FragmentColorMaterialSGIX.f)(face, mode) } }
#[inline] pub fn FragmentLightModelfSGIX(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::FragmentLightModelfSGIX.f)(pname, param) } }
#[inline] pub fn FragmentLightModelfvSGIX(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::FragmentLightModelfvSGIX.f)(pname, params) } }
#[inline] pub fn FragmentLightModeliSGIX(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::FragmentLightModeliSGIX.f)(pname, param) } }
#[inline] pub fn FragmentLightModelivSGIX(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::FragmentLightModelivSGIX.f)(pname, params) } }
#[inline] pub fn FragmentLightfSGIX(light: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::FragmentLightfSGIX.f)(light, pname, param) } }
#[inline] pub fn FragmentLightfvSGIX(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::FragmentLightfvSGIX.f)(light, pname, params) } }
#[inline] pub fn FragmentLightiSGIX(light: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::FragmentLightiSGIX.f)(light, pname, param) } }
#[inline] pub fn FragmentLightivSGIX(light: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::FragmentLightivSGIX.f)(light, pname, params) } }
#[inline] pub fn FragmentMaterialfSGIX(face: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::FragmentMaterialfSGIX.f)(face, pname, param) } }
#[inline] pub fn FragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::FragmentMaterialfvSGIX.f)(face, pname, params) } }
#[inline] pub fn FragmentMaterialiSGIX(face: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::FragmentMaterialiSGIX.f)(face, pname, param) } }
#[inline] pub fn FragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::FragmentMaterialivSGIX.f)(face, pname, params) } }
#[inline] pub unsafe fn FrameTerminatorGREMEDY() -> c_void { (storage::FrameTerminatorGREMEDY.f)() }
#[inline] pub fn FrameZoomSGIX(factor: GLint) -> c_void { unsafe { (storage::FrameZoomSGIX.f)(factor) } }
#[inline] pub fn FramebufferDrawBufferEXT(framebuffer: GLuint, mode: GLenum) -> c_void { unsafe { (storage::FramebufferDrawBufferEXT.f)(framebuffer, mode) } }
#[inline] pub fn FramebufferDrawBuffersEXT(framebuffer: GLuint, n: GLsizei, bufs: *GLenum) -> c_void { unsafe { (storage::FramebufferDrawBuffersEXT.f)(framebuffer, n, bufs) } }
#[inline] pub fn FramebufferParameteri(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::FramebufferParameteri.f)(target, pname, param) } }
#[inline] pub fn FramebufferReadBufferEXT(framebuffer: GLuint, mode: GLenum) -> c_void { unsafe { (storage::FramebufferReadBufferEXT.f)(framebuffer, mode) } }
#[inline] pub fn FramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::FramebufferRenderbuffer.f)(target, attachment, renderbuffertarget, renderbuffer) } }
#[inline] pub fn FramebufferRenderbufferEXT(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::FramebufferRenderbufferEXT.f)(target, attachment, renderbuffertarget, renderbuffer) } }
#[inline] pub fn FramebufferRenderbufferOES(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::FramebufferRenderbufferOES.f)(target, attachment, renderbuffertarget, renderbuffer) } }
#[inline] pub fn FramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::FramebufferTexture.f)(target, attachment, texture, level) } }
#[inline] pub fn FramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::FramebufferTexture1D.f)(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture1DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::FramebufferTexture1DEXT.f)(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::FramebufferTexture2D.f)(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture2DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::FramebufferTexture2DEXT.f)(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture2DMultisampleEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void { unsafe { (storage::FramebufferTexture2DMultisampleEXT.f)(target, attachment, textarget, texture, level, samples) } }
#[inline] pub fn FramebufferTexture2DMultisampleIMG(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void { unsafe { (storage::FramebufferTexture2DMultisampleIMG.f)(target, attachment, textarget, texture, level, samples) } }
#[inline] pub fn FramebufferTexture2DOES(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::FramebufferTexture2DOES.f)(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { (storage::FramebufferTexture3D.f)(target, attachment, textarget, texture, level, zoffset) } }
#[inline] pub fn FramebufferTexture3DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { (storage::FramebufferTexture3DEXT.f)(target, attachment, textarget, texture, level, zoffset) } }
#[inline] pub fn FramebufferTexture3DOES(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { (storage::FramebufferTexture3DOES.f)(target, attachment, textarget, texture, level, zoffset) } }
#[inline] pub fn FramebufferTextureARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::FramebufferTextureARB.f)(target, attachment, texture, level) } }
#[inline] pub fn FramebufferTextureEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::FramebufferTextureEXT.f)(target, attachment, texture, level) } }
#[inline] pub fn FramebufferTextureFaceARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { (storage::FramebufferTextureFaceARB.f)(target, attachment, texture, level, face) } }
#[inline] pub fn FramebufferTextureFaceEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { (storage::FramebufferTextureFaceEXT.f)(target, attachment, texture, level, face) } }
#[inline] pub fn FramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { (storage::FramebufferTextureLayer.f)(target, attachment, texture, level, layer) } }
#[inline] pub fn FramebufferTextureLayerARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { (storage::FramebufferTextureLayerARB.f)(target, attachment, texture, level, layer) } }
#[inline] pub fn FramebufferTextureLayerEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { (storage::FramebufferTextureLayerEXT.f)(target, attachment, texture, level, layer) } }
#[inline] pub fn FreeObjectBufferATI(buffer: GLuint) -> c_void { unsafe { (storage::FreeObjectBufferATI.f)(buffer) } }
#[inline] pub fn FrontFace(mode: GLenum) -> c_void { unsafe { (storage::FrontFace.f)(mode) } }
#[inline] pub fn Frustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (storage::Frustum.f)(left, right, bottom, top, zNear, zFar) } }
#[inline] pub fn Frustumf(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { (storage::Frustumf.f)(l, r, b, t, n, f) } }
#[inline] pub fn FrustumfOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { (storage::FrustumfOES.f)(l, r, b, t, n, f) } }
#[inline] pub fn Frustumx(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { (storage::Frustumx.f)(l, r, b, t, n, f) } }
#[inline] pub fn FrustumxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { (storage::FrustumxOES.f)(l, r, b, t, n, f) } }
#[inline] pub fn GenAsyncMarkersSGIX(range: GLsizei) -> GLuint { unsafe { (storage::GenAsyncMarkersSGIX.f)(range) } }
#[inline] pub fn GenBuffers(n: GLsizei, buffers: *GLuint) -> c_void { unsafe { (storage::GenBuffers.f)(n, buffers) } }
#[inline] pub fn GenBuffersARB(n: GLsizei, buffers: *GLuint) -> c_void { unsafe { (storage::GenBuffersARB.f)(n, buffers) } }
#[inline] pub fn GenFencesAPPLE(n: GLsizei, fences: *GLuint) -> c_void { unsafe { (storage::GenFencesAPPLE.f)(n, fences) } }
#[inline] pub fn GenFencesNV(n: GLsizei, fences: *GLuint) -> c_void { unsafe { (storage::GenFencesNV.f)(n, fences) } }
#[inline] pub fn GenFragmentShadersATI(range: GLuint) -> GLuint { unsafe { (storage::GenFragmentShadersATI.f)(range) } }
#[inline] pub fn GenFramebuffers(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { (storage::GenFramebuffers.f)(n, framebuffers) } }
#[inline] pub fn GenFramebuffersEXT(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { (storage::GenFramebuffersEXT.f)(n, framebuffers) } }
#[inline] pub fn GenFramebuffersOES(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { (storage::GenFramebuffersOES.f)(n, framebuffers) } }
#[inline] pub fn GenLists(range: GLsizei) -> GLuint { unsafe { (storage::GenLists.f)(range) } }
#[inline] pub fn GenNamesAMD(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void { unsafe { (storage::GenNamesAMD.f)(identifier, num, names) } }
#[inline] pub fn GenOcclusionQueriesNV(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::GenOcclusionQueriesNV.f)(n, ids) } }
#[inline] pub fn GenPathsNV(range: GLsizei) -> GLuint { unsafe { (storage::GenPathsNV.f)(range) } }
#[inline] pub fn GenPerfMonitorsAMD(n: GLsizei, monitors: *GLuint) -> c_void { unsafe { (storage::GenPerfMonitorsAMD.f)(n, monitors) } }
#[inline] pub fn GenProgramPipelines(n: GLsizei, pipelines: *GLuint) -> c_void { unsafe { (storage::GenProgramPipelines.f)(n, pipelines) } }
#[inline] pub fn GenProgramPipelinesEXT(n: GLsizei, pipelines: *GLuint) -> c_void { unsafe { (storage::GenProgramPipelinesEXT.f)(n, pipelines) } }
#[inline] pub fn GenProgramsARB(n: GLsizei, programs: *GLuint) -> c_void { unsafe { (storage::GenProgramsARB.f)(n, programs) } }
#[inline] pub fn GenProgramsNV(n: GLsizei, programs: *GLuint) -> c_void { unsafe { (storage::GenProgramsNV.f)(n, programs) } }
#[inline] pub fn GenQueries(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::GenQueries.f)(n, ids) } }
#[inline] pub fn GenQueriesARB(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::GenQueriesARB.f)(n, ids) } }
#[inline] pub fn GenQueriesEXT(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::GenQueriesEXT.f)(n, ids) } }
#[inline] pub fn GenRenderbuffers(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { (storage::GenRenderbuffers.f)(n, renderbuffers) } }
#[inline] pub fn GenRenderbuffersEXT(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { (storage::GenRenderbuffersEXT.f)(n, renderbuffers) } }
#[inline] pub fn GenRenderbuffersOES(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { (storage::GenRenderbuffersOES.f)(n, renderbuffers) } }
#[inline] pub fn GenSamplers(count: GLsizei, samplers: *GLuint) -> c_void { unsafe { (storage::GenSamplers.f)(count, samplers) } }
#[inline] pub fn GenSymbolsEXT(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint { unsafe { (storage::GenSymbolsEXT.f)(datatype, storagetype, range, components) } }
#[inline] pub fn GenTextures(n: GLsizei, textures: *GLuint) -> c_void { unsafe { (storage::GenTextures.f)(n, textures) } }
#[inline] pub fn GenTexturesEXT(n: GLsizei, textures: *GLuint) -> c_void { unsafe { (storage::GenTexturesEXT.f)(n, textures) } }
#[inline] pub fn GenTransformFeedbacks(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::GenTransformFeedbacks.f)(n, ids) } }
#[inline] pub fn GenTransformFeedbacksNV(n: GLsizei, ids: *GLuint) -> c_void { unsafe { (storage::GenTransformFeedbacksNV.f)(n, ids) } }
#[inline] pub fn GenVertexArrays(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { (storage::GenVertexArrays.f)(n, arrays) } }
#[inline] pub fn GenVertexArraysAPPLE(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { (storage::GenVertexArraysAPPLE.f)(n, arrays) } }
#[inline] pub fn GenVertexArraysOES(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { (storage::GenVertexArraysOES.f)(n, arrays) } }
#[inline] pub fn GenVertexShadersEXT(range: GLuint) -> GLuint { unsafe { (storage::GenVertexShadersEXT.f)(range) } }
#[inline] pub fn GenerateMipmap(target: GLenum) -> c_void { unsafe { (storage::GenerateMipmap.f)(target) } }
#[inline] pub fn GenerateMipmapEXT(target: GLenum) -> c_void { unsafe { (storage::GenerateMipmapEXT.f)(target) } }
#[inline] pub fn GenerateMipmapOES(target: GLenum) -> c_void { unsafe { (storage::GenerateMipmapOES.f)(target) } }
#[inline] pub fn GenerateMultiTexMipmapEXT(texunit: GLenum, target: GLenum) -> c_void { unsafe { (storage::GenerateMultiTexMipmapEXT.f)(texunit, target) } }
#[inline] pub fn GenerateTextureMipmapEXT(texture: GLuint, target: GLenum) -> c_void { unsafe { (storage::GenerateTextureMipmapEXT.f)(texture, target) } }
#[inline] pub fn GetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetActiveAtomicCounterBufferiv.f)(program, bufferIndex, pname, params) } }
#[inline] pub fn GetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void { unsafe { (storage::GetActiveAttrib.f)(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetActiveAttribARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void { unsafe { (storage::GetActiveAttribARB.f)(programObj, index, maxLength, length, size, type_, name) } }
#[inline] pub fn GetActiveSubroutineName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { unsafe { (storage::GetActiveSubroutineName.f)(program, shadertype, index, bufsize, length, name) } }
#[inline] pub fn GetActiveSubroutineUniformName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { unsafe { (storage::GetActiveSubroutineUniformName.f)(program, shadertype, index, bufsize, length, name) } }
#[inline] pub fn GetActiveSubroutineUniformiv(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) -> c_void { unsafe { (storage::GetActiveSubroutineUniformiv.f)(program, shadertype, index, pname, values) } }
#[inline] pub fn GetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void { unsafe { (storage::GetActiveUniform.f)(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetActiveUniformARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void { unsafe { (storage::GetActiveUniformARB.f)(programObj, index, maxLength, length, size, type_, name) } }
#[inline] pub fn GetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> c_void { unsafe { (storage::GetActiveUniformBlockName.f)(program, uniformBlockIndex, bufSize, length, uniformBlockName) } }
#[inline] pub fn GetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetActiveUniformBlockiv.f)(program, uniformBlockIndex, pname, params) } }
#[inline] pub fn GetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) -> c_void { unsafe { (storage::GetActiveUniformName.f)(program, uniformIndex, bufSize, length, uniformName) } }
#[inline] pub fn GetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetActiveUniformsiv.f)(program, uniformCount, uniformIndices, pname, params) } }
#[inline] pub fn GetActiveVaryingNV(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { unsafe { (storage::GetActiveVaryingNV.f)(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetArrayObjectfvATI(array: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetArrayObjectfvATI.f)(array, pname, params) } }
#[inline] pub fn GetArrayObjectivATI(array: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetArrayObjectivATI.f)(array, pname, params) } }
#[inline] pub fn GetAttachedObjectsARB(containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) -> c_void { unsafe { (storage::GetAttachedObjectsARB.f)(containerObj, maxCount, count, obj) } }
#[inline] pub fn GetAttachedShaders(program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> c_void { unsafe { (storage::GetAttachedShaders.f)(program, maxCount, count, shaders) } }
#[inline] pub fn GetAttribLocation(program: GLuint, name: *GLchar) -> GLint { unsafe { (storage::GetAttribLocation.f)(program, name) } }
#[inline] pub fn GetAttribLocationARB(programObj: GLhandleARB, name: *GLcharARB) -> GLint { unsafe { (storage::GetAttribLocationARB.f)(programObj, name) } }
#[inline] pub fn GetBooleanIndexedvEXT(target: GLenum, index: GLuint, data: *GLboolean) -> c_void { unsafe { (storage::GetBooleanIndexedvEXT.f)(target, index, data) } }
#[inline] pub fn GetBooleani_v(target: GLenum, index: GLuint, data: *GLboolean) -> c_void { unsafe { (storage::GetBooleani_v.f)(target, index, data) } }
#[inline] pub fn GetBooleanv(pname: GLenum, params: *GLboolean) -> c_void { unsafe { (storage::GetBooleanv.f)(pname, params) } }
#[inline] pub fn GetBufferParameteri64v(target: GLenum, pname: GLenum, params: *GLint64) -> c_void { unsafe { (storage::GetBufferParameteri64v.f)(target, pname, params) } }
#[inline] pub fn GetBufferParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetBufferParameteriv.f)(target, pname, params) } }
#[inline] pub fn GetBufferParameterivARB(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetBufferParameterivARB.f)(target, pname, params) } }
#[inline] pub fn GetBufferParameterui64vNV(target: GLenum, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { (storage::GetBufferParameterui64vNV.f)(target, pname, params) } }
#[inline] pub fn GetBufferPointerv(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::GetBufferPointerv.f)(target, pname, params) } }
#[inline] pub fn GetBufferPointervARB(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::GetBufferPointervARB.f)(target, pname, params) } }
#[inline] pub fn GetBufferPointervOES(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::GetBufferPointervOES.f)(target, pname, params) } }
#[inline] pub fn GetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { unsafe { (storage::GetBufferSubData.f)(target, offset, size, data) } }
#[inline] pub fn GetBufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void { unsafe { (storage::GetBufferSubDataARB.f)(target, offset, size, data) } }
#[inline] pub fn GetClipPlane(plane: GLenum, equation: *GLdouble) -> c_void { unsafe { (storage::GetClipPlane.f)(plane, equation) } }
#[inline] pub fn GetClipPlanef(plane: GLenum, equation: *GLfloat) -> c_void { unsafe { (storage::GetClipPlanef.f)(plane, equation) } }
#[inline] pub fn GetClipPlanefOES(plane: GLenum, equation: *GLfloat) -> c_void { unsafe { (storage::GetClipPlanefOES.f)(plane, equation) } }
#[inline] pub fn GetClipPlanex(plane: GLenum, equation: *GLfixed) -> c_void { unsafe { (storage::GetClipPlanex.f)(plane, equation) } }
#[inline] pub fn GetClipPlanexOES(plane: GLenum, equation: *GLfixed) -> c_void { unsafe { (storage::GetClipPlanexOES.f)(plane, equation) } }
#[inline] pub fn GetColorTable(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { (storage::GetColorTable.f)(target, format, type_, table) } }
#[inline] pub fn GetColorTableEXT(target: GLenum, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { unsafe { (storage::GetColorTableEXT.f)(target, format, type_, data) } }
#[inline] pub fn GetColorTableParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetColorTableParameterfv.f)(target, pname, params) } }
#[inline] pub fn GetColorTableParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetColorTableParameterfvEXT.f)(target, pname, params) } }
#[inline] pub fn GetColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetColorTableParameterfvSGI.f)(target, pname, params) } }
#[inline] pub fn GetColorTableParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetColorTableParameteriv.f)(target, pname, params) } }
#[inline] pub fn GetColorTableParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetColorTableParameterivEXT.f)(target, pname, params) } }
#[inline] pub fn GetColorTableParameterivSGI(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetColorTableParameterivSGI.f)(target, pname, params) } }
#[inline] pub fn GetColorTableSGI(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { (storage::GetColorTableSGI.f)(target, format, type_, table) } }
#[inline] pub fn GetCombinerInputParameterfvNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetCombinerInputParameterfvNV.f)(stage, portion, variable, pname, params) } }
#[inline] pub fn GetCombinerInputParameterivNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetCombinerInputParameterivNV.f)(stage, portion, variable, pname, params) } }
#[inline] pub fn GetCombinerOutputParameterfvNV(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetCombinerOutputParameterfvNV.f)(stage, portion, pname, params) } }
#[inline] pub fn GetCombinerOutputParameterivNV(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetCombinerOutputParameterivNV.f)(stage, portion, pname, params) } }
#[inline] pub fn GetCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetCombinerStageParameterfvNV.f)(stage, pname, params) } }
#[inline] pub fn GetCompressedMultiTexImageEXT(texunit: GLenum, target: GLenum, lod: GLint, img: *GLvoid) -> c_void { unsafe { (storage::GetCompressedMultiTexImageEXT.f)(texunit, target, lod, img) } }
#[inline] pub fn GetCompressedTexImage(target: GLenum, level: GLint, img: *GLvoid) -> c_void { unsafe { (storage::GetCompressedTexImage.f)(target, level, img) } }
#[inline] pub fn GetCompressedTexImageARB(target: GLenum, level: GLint, img: *GLvoid) -> c_void { unsafe { (storage::GetCompressedTexImageARB.f)(target, level, img) } }
#[inline] pub fn GetCompressedTextureImageEXT(texture: GLuint, target: GLenum, lod: GLint, img: *GLvoid) -> c_void { unsafe { (storage::GetCompressedTextureImageEXT.f)(texture, target, lod, img) } }
#[inline] pub fn GetConvolutionFilter(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { (storage::GetConvolutionFilter.f)(target, format, type_, image) } }
#[inline] pub fn GetConvolutionFilterEXT(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { (storage::GetConvolutionFilterEXT.f)(target, format, type_, image) } }
#[inline] pub fn GetConvolutionParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetConvolutionParameterfv.f)(target, pname, params) } }
#[inline] pub fn GetConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetConvolutionParameterfvEXT.f)(target, pname, params) } }
#[inline] pub fn GetConvolutionParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetConvolutionParameteriv.f)(target, pname, params) } }
#[inline] pub fn GetConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetConvolutionParameterivEXT.f)(target, pname, params) } }
#[inline] pub fn GetConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetConvolutionParameterxvOES.f)(target, pname, params) } }
#[inline] pub fn GetDebugMessageLog(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { unsafe { (storage::GetDebugMessageLog.f)(count, bufsize, sources, types, ids, severities, lengths, messageLog) } }
#[inline] pub fn GetDebugMessageLogAMD(count: GLuint, bufsize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) -> GLuint { unsafe { (storage::GetDebugMessageLogAMD.f)(count, bufsize, categories, severities, ids, lengths, message) } }
#[inline] pub fn GetDebugMessageLogARB(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { unsafe { (storage::GetDebugMessageLogARB.f)(count, bufsize, sources, types, ids, severities, lengths, messageLog) } }
#[inline] pub fn GetDebugMessageLogKHR(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { unsafe { (storage::GetDebugMessageLogKHR.f)(count, bufsize, sources, types, ids, severities, lengths, messageLog) } }
#[inline] pub fn GetDetailTexFuncSGIS(target: GLenum, points: *GLfloat) -> c_void { unsafe { (storage::GetDetailTexFuncSGIS.f)(target, points) } }
#[inline] pub fn GetDoubleIndexedvEXT(target: GLenum, index: GLuint, data: *GLdouble) -> c_void { unsafe { (storage::GetDoubleIndexedvEXT.f)(target, index, data) } }
#[inline] pub fn GetDoublei_v(target: GLenum, index: GLuint, data: *GLdouble) -> c_void { unsafe { (storage::GetDoublei_v.f)(target, index, data) } }
#[inline] pub fn GetDoublei_vEXT(pname: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { (storage::GetDoublei_vEXT.f)(pname, index, params) } }
#[inline] pub fn GetDoublev(pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetDoublev.f)(pname, params) } }
#[inline] pub fn GetDriverControlStringQCOM(driverControl: GLuint, bufSize: GLsizei, length: *GLsizei, driverControlString: *GLchar) -> c_void { unsafe { (storage::GetDriverControlStringQCOM.f)(driverControl, bufSize, length, driverControlString) } }
#[inline] pub fn GetDriverControlsQCOM(num: *GLint, size: GLsizei, driverControls: *GLuint) -> c_void { unsafe { (storage::GetDriverControlsQCOM.f)(num, size, driverControls) } }
#[inline] pub unsafe fn GetError() -> GLenum { (storage::GetError.f)() }
#[inline] pub fn GetFenceivNV(fence: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFenceivNV.f)(fence, pname, params) } }
#[inline] pub fn GetFinalCombinerInputParameterfvNV(variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetFinalCombinerInputParameterfvNV.f)(variable, pname, params) } }
#[inline] pub fn GetFinalCombinerInputParameterivNV(variable: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFinalCombinerInputParameterivNV.f)(variable, pname, params) } }
#[inline] pub fn GetFixedv(pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetFixedv.f)(pname, params) } }
#[inline] pub fn GetFixedvOES(pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetFixedvOES.f)(pname, params) } }
#[inline] pub fn GetFloatIndexedvEXT(target: GLenum, index: GLuint, data: *GLfloat) -> c_void { unsafe { (storage::GetFloatIndexedvEXT.f)(target, index, data) } }
#[inline] pub fn GetFloati_v(target: GLenum, index: GLuint, data: *GLfloat) -> c_void { unsafe { (storage::GetFloati_v.f)(target, index, data) } }
#[inline] pub fn GetFloati_vEXT(pname: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { (storage::GetFloati_vEXT.f)(pname, index, params) } }
#[inline] pub fn GetFloatv(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetFloatv.f)(pname, params) } }
#[inline] pub unsafe fn GetFogFuncSGIS(points: *GLfloat) -> c_void { (storage::GetFogFuncSGIS.f)(points) }
#[inline] pub fn GetFragDataIndex(program: GLuint, name: *GLchar) -> GLint { unsafe { (storage::GetFragDataIndex.f)(program, name) } }
#[inline] pub fn GetFragDataLocation(program: GLuint, name: *GLchar) -> GLint { unsafe { (storage::GetFragDataLocation.f)(program, name) } }
#[inline] pub fn GetFragDataLocationEXT(program: GLuint, name: *GLchar) -> GLint { unsafe { (storage::GetFragDataLocationEXT.f)(program, name) } }
#[inline] pub fn GetFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetFragmentLightfvSGIX.f)(light, pname, params) } }
#[inline] pub fn GetFragmentLightivSGIX(light: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFragmentLightivSGIX.f)(light, pname, params) } }
#[inline] pub fn GetFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetFragmentMaterialfvSGIX.f)(face, pname, params) } }
#[inline] pub fn GetFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFragmentMaterialivSGIX.f)(face, pname, params) } }
#[inline] pub fn GetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFramebufferAttachmentParameteriv.f)(target, attachment, pname, params) } }
#[inline] pub fn GetFramebufferAttachmentParameterivEXT(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFramebufferAttachmentParameterivEXT.f)(target, attachment, pname, params) } }
#[inline] pub fn GetFramebufferAttachmentParameterivOES(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFramebufferAttachmentParameterivOES.f)(target, attachment, pname, params) } }
#[inline] pub fn GetFramebufferParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFramebufferParameteriv.f)(target, pname, params) } }
#[inline] pub fn GetFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetFramebufferParameterivEXT.f)(framebuffer, pname, params) } }
#[inline] pub unsafe fn GetGraphicsResetStatusARB() -> GLenum { (storage::GetGraphicsResetStatusARB.f)() }
#[inline] pub unsafe fn GetGraphicsResetStatusEXT() -> GLenum { (storage::GetGraphicsResetStatusEXT.f)() }
#[inline] pub fn GetHandleARB(pname: GLenum) -> GLhandleARB { unsafe { (storage::GetHandleARB.f)(pname) } }
#[inline] pub fn GetHistogram(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { unsafe { (storage::GetHistogram.f)(target, reset, format, type_, values) } }
#[inline] pub fn GetHistogramEXT(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { unsafe { (storage::GetHistogramEXT.f)(target, reset, format, type_, values) } }
#[inline] pub fn GetHistogramParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetHistogramParameterfv.f)(target, pname, params) } }
#[inline] pub fn GetHistogramParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetHistogramParameterfvEXT.f)(target, pname, params) } }
#[inline] pub fn GetHistogramParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetHistogramParameteriv.f)(target, pname, params) } }
#[inline] pub fn GetHistogramParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetHistogramParameterivEXT.f)(target, pname, params) } }
#[inline] pub fn GetHistogramParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetHistogramParameterxvOES.f)(target, pname, params) } }
#[inline] pub fn GetImageHandleARB(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 { unsafe { (storage::GetImageHandleARB.f)(texture, level, layered, layer, format) } }
#[inline] pub fn GetImageHandleNV(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 { unsafe { (storage::GetImageHandleNV.f)(texture, level, layered, layer, format) } }
#[inline] pub fn GetImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetImageTransformParameterfvHP.f)(target, pname, params) } }
#[inline] pub fn GetImageTransformParameterivHP(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetImageTransformParameterivHP.f)(target, pname, params) } }
#[inline] pub fn GetInfoLogARB(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) -> c_void { unsafe { (storage::GetInfoLogARB.f)(obj, maxLength, length, infoLog) } }
#[inline] pub unsafe fn GetInstrumentsSGIX() -> GLint { (storage::GetInstrumentsSGIX.f)() }
#[inline] pub fn GetInteger64i_v(target: GLenum, index: GLuint, data: *GLint64) -> c_void { unsafe { (storage::GetInteger64i_v.f)(target, index, data) } }
#[inline] pub fn GetInteger64v(pname: GLenum, params: *GLint64) -> c_void { unsafe { (storage::GetInteger64v.f)(pname, params) } }
#[inline] pub fn GetInteger64vAPPLE(pname: GLenum, params: *GLint64) -> c_void { unsafe { (storage::GetInteger64vAPPLE.f)(pname, params) } }
#[inline] pub fn GetIntegerIndexedvEXT(target: GLenum, index: GLuint, data: *GLint) -> c_void { unsafe { (storage::GetIntegerIndexedvEXT.f)(target, index, data) } }
#[inline] pub fn GetIntegeri_v(target: GLenum, index: GLuint, data: *GLint) -> c_void { unsafe { (storage::GetIntegeri_v.f)(target, index, data) } }
#[inline] pub fn GetIntegeri_vEXT(target: GLenum, index: GLuint, data: *GLint) -> c_void { unsafe { (storage::GetIntegeri_vEXT.f)(target, index, data) } }
#[inline] pub fn GetIntegerui64i_vNV(value: GLenum, index: GLuint, result: *GLuint64EXT) -> c_void { unsafe { (storage::GetIntegerui64i_vNV.f)(value, index, result) } }
#[inline] pub fn GetIntegerui64vNV(value: GLenum, result: *GLuint64EXT) -> c_void { unsafe { (storage::GetIntegerui64vNV.f)(value, result) } }
#[inline] pub fn GetIntegerv(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetIntegerv.f)(pname, params) } }
#[inline] pub fn GetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) -> c_void { unsafe { (storage::GetInternalformati64v.f)(target, internalformat, pname, bufSize, params) } }
#[inline] pub fn GetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) -> c_void { unsafe { (storage::GetInternalformativ.f)(target, internalformat, pname, bufSize, params) } }
#[inline] pub fn GetInvariantBooleanvEXT(id: GLuint, value: GLenum, data: *GLboolean) -> c_void { unsafe { (storage::GetInvariantBooleanvEXT.f)(id, value, data) } }
#[inline] pub fn GetInvariantFloatvEXT(id: GLuint, value: GLenum, data: *GLfloat) -> c_void { unsafe { (storage::GetInvariantFloatvEXT.f)(id, value, data) } }
#[inline] pub fn GetInvariantIntegervEXT(id: GLuint, value: GLenum, data: *GLint) -> c_void { unsafe { (storage::GetInvariantIntegervEXT.f)(id, value, data) } }
#[inline] pub fn GetLightfv(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetLightfv.f)(light, pname, params) } }
#[inline] pub fn GetLightiv(light: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetLightiv.f)(light, pname, params) } }
#[inline] pub fn GetLightx(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetLightx.f)(light, pname, params) } }
#[inline] pub fn GetLightxOES(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetLightxOES.f)(light, pname, params) } }
#[inline] pub fn GetLightxv(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetLightxv.f)(light, pname, params) } }
#[inline] pub fn GetLightxvOES(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetLightxvOES.f)(light, pname, params) } }
#[inline] pub fn GetListParameterfvSGIX(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetListParameterfvSGIX.f)(list, pname, params) } }
#[inline] pub fn GetListParameterivSGIX(list: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetListParameterivSGIX.f)(list, pname, params) } }
#[inline] pub fn GetLocalConstantBooleanvEXT(id: GLuint, value: GLenum, data: *GLboolean) -> c_void { unsafe { (storage::GetLocalConstantBooleanvEXT.f)(id, value, data) } }
#[inline] pub fn GetLocalConstantFloatvEXT(id: GLuint, value: GLenum, data: *GLfloat) -> c_void { unsafe { (storage::GetLocalConstantFloatvEXT.f)(id, value, data) } }
#[inline] pub fn GetLocalConstantIntegervEXT(id: GLuint, value: GLenum, data: *GLint) -> c_void { unsafe { (storage::GetLocalConstantIntegervEXT.f)(id, value, data) } }
#[inline] pub fn GetMapAttribParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMapAttribParameterfvNV.f)(target, index, pname, params) } }
#[inline] pub fn GetMapAttribParameterivNV(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMapAttribParameterivNV.f)(target, index, pname, params) } }
#[inline] pub fn GetMapControlPointsNV(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *GLvoid) -> c_void { unsafe { (storage::GetMapControlPointsNV.f)(target, index, type_, ustride, vstride, packed, points) } }
#[inline] pub fn GetMapParameterfvNV(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMapParameterfvNV.f)(target, pname, params) } }
#[inline] pub fn GetMapParameterivNV(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMapParameterivNV.f)(target, pname, params) } }
#[inline] pub fn GetMapdv(target: GLenum, query: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::GetMapdv.f)(target, query, v) } }
#[inline] pub fn GetMapfv(target: GLenum, query: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::GetMapfv.f)(target, query, v) } }
#[inline] pub fn GetMapiv(target: GLenum, query: GLenum, v: *GLint) -> c_void { unsafe { (storage::GetMapiv.f)(target, query, v) } }
#[inline] pub fn GetMapxvOES(target: GLenum, query: GLenum, v: *GLfixed) -> c_void { unsafe { (storage::GetMapxvOES.f)(target, query, v) } }
#[inline] pub fn GetMaterialfv(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMaterialfv.f)(face, pname, params) } }
#[inline] pub fn GetMaterialiv(face: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMaterialiv.f)(face, pname, params) } }
#[inline] pub fn GetMaterialx(face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::GetMaterialx.f)(face, pname, param) } }
#[inline] pub fn GetMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::GetMaterialxOES.f)(face, pname, param) } }
#[inline] pub fn GetMaterialxv(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetMaterialxv.f)(face, pname, params) } }
#[inline] pub fn GetMaterialxvOES(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetMaterialxvOES.f)(face, pname, params) } }
#[inline] pub fn GetMinmax(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { unsafe { (storage::GetMinmax.f)(target, reset, format, type_, values) } }
#[inline] pub fn GetMinmaxEXT(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { unsafe { (storage::GetMinmaxEXT.f)(target, reset, format, type_, values) } }
#[inline] pub fn GetMinmaxParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMinmaxParameterfv.f)(target, pname, params) } }
#[inline] pub fn GetMinmaxParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMinmaxParameterfvEXT.f)(target, pname, params) } }
#[inline] pub fn GetMinmaxParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMinmaxParameteriv.f)(target, pname, params) } }
#[inline] pub fn GetMinmaxParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMinmaxParameterivEXT.f)(target, pname, params) } }
#[inline] pub fn GetMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMultiTexEnvfvEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMultiTexEnvivEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetMultiTexGendvEXT.f)(texunit, coord, pname, params) } }
#[inline] pub fn GetMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMultiTexGenfvEXT.f)(texunit, coord, pname, params) } }
#[inline] pub fn GetMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMultiTexGenivEXT.f)(texunit, coord, pname, params) } }
#[inline] pub fn GetMultiTexImageEXT(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::GetMultiTexImageEXT.f)(texunit, target, level, format, type_, pixels) } }
#[inline] pub fn GetMultiTexLevelParameterfvEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMultiTexLevelParameterfvEXT.f)(texunit, target, level, pname, params) } }
#[inline] pub fn GetMultiTexLevelParameterivEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMultiTexLevelParameterivEXT.f)(texunit, target, level, pname, params) } }
#[inline] pub fn GetMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMultiTexParameterIivEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetMultiTexParameterIuivEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetMultiTexParameterfvEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetMultiTexParameterivEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn GetMultisamplefv(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { unsafe { (storage::GetMultisamplefv.f)(pname, index, val) } }
#[inline] pub fn GetMultisamplefvNV(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { unsafe { (storage::GetMultisamplefvNV.f)(pname, index, val) } }
#[inline] pub fn GetNamedBufferParameterivEXT(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetNamedBufferParameterivEXT.f)(buffer, pname, params) } }
#[inline] pub fn GetNamedBufferParameterui64vNV(buffer: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { (storage::GetNamedBufferParameterui64vNV.f)(buffer, pname, params) } }
#[inline] pub fn GetNamedBufferPointervEXT(buffer: GLuint, pname: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::GetNamedBufferPointervEXT.f)(buffer, pname, params) } }
#[inline] pub fn GetNamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { unsafe { (storage::GetNamedBufferSubDataEXT.f)(buffer, offset, size, data) } }
#[inline] pub fn GetNamedFramebufferAttachmentParameterivEXT(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetNamedFramebufferAttachmentParameterivEXT.f)(framebuffer, attachment, pname, params) } }
#[inline] pub fn GetNamedFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetNamedFramebufferParameterivEXT.f)(framebuffer, pname, params) } }
#[inline] pub fn GetNamedProgramLocalParameterIivEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { (storage::GetNamedProgramLocalParameterIivEXT.f)(program, target, index, params) } }
#[inline] pub fn GetNamedProgramLocalParameterIuivEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { (storage::GetNamedProgramLocalParameterIuivEXT.f)(program, target, index, params) } }
#[inline] pub fn GetNamedProgramLocalParameterdvEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { (storage::GetNamedProgramLocalParameterdvEXT.f)(program, target, index, params) } }
#[inline] pub fn GetNamedProgramLocalParameterfvEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { (storage::GetNamedProgramLocalParameterfvEXT.f)(program, target, index, params) } }
#[inline] pub fn GetNamedProgramStringEXT(program: GLuint, target: GLenum, pname: GLenum, string: *GLvoid) -> c_void { unsafe { (storage::GetNamedProgramStringEXT.f)(program, target, pname, string) } }
#[inline] pub fn GetNamedProgramivEXT(program: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetNamedProgramivEXT.f)(program, target, pname, params) } }
#[inline] pub fn GetNamedRenderbufferParameterivEXT(renderbuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetNamedRenderbufferParameterivEXT.f)(renderbuffer, pname, params) } }
#[inline] pub fn GetNamedStringARB(namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, string: *GLchar) -> c_void { unsafe { (storage::GetNamedStringARB.f)(namelen, name, bufSize, stringlen, string) } }
#[inline] pub fn GetNamedStringivARB(namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetNamedStringivARB.f)(namelen, name, pname, params) } }
#[inline] pub fn GetObjectBufferfvATI(buffer: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetObjectBufferfvATI.f)(buffer, pname, params) } }
#[inline] pub fn GetObjectBufferivATI(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetObjectBufferivATI.f)(buffer, pname, params) } }
#[inline] pub fn GetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { (storage::GetObjectLabel.f)(identifier, name, bufSize, length, label) } }
#[inline] pub fn GetObjectLabelEXT(type_: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { (storage::GetObjectLabelEXT.f)(type_, object, bufSize, length, label) } }
#[inline] pub fn GetObjectLabelKHR(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { (storage::GetObjectLabelKHR.f)(identifier, name, bufSize, length, label) } }
#[inline] pub fn GetObjectParameterfvARB(obj: GLhandleARB, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetObjectParameterfvARB.f)(obj, pname, params) } }
#[inline] pub fn GetObjectParameterivAPPLE(objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetObjectParameterivAPPLE.f)(objectType, name, pname, params) } }
#[inline] pub fn GetObjectParameterivARB(obj: GLhandleARB, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetObjectParameterivARB.f)(obj, pname, params) } }
#[inline] pub fn GetObjectPtrLabel(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { (storage::GetObjectPtrLabel.f)(ptr, bufSize, length, label) } }
#[inline] pub fn GetObjectPtrLabelKHR(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { (storage::GetObjectPtrLabelKHR.f)(ptr, bufSize, length, label) } }
#[inline] pub fn GetOcclusionQueryivNV(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetOcclusionQueryivNV.f)(id, pname, params) } }
#[inline] pub fn GetOcclusionQueryuivNV(id: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetOcclusionQueryuivNV.f)(id, pname, params) } }
#[inline] pub fn GetPathColorGenfvNV(color: GLenum, pname: GLenum, value: *GLfloat) -> c_void { unsafe { (storage::GetPathColorGenfvNV.f)(color, pname, value) } }
#[inline] pub fn GetPathColorGenivNV(color: GLenum, pname: GLenum, value: *GLint) -> c_void { unsafe { (storage::GetPathColorGenivNV.f)(color, pname, value) } }
#[inline] pub fn GetPathCommandsNV(path: GLuint, commands: *GLubyte) -> c_void { unsafe { (storage::GetPathCommandsNV.f)(path, commands) } }
#[inline] pub fn GetPathCoordsNV(path: GLuint, coords: *GLfloat) -> c_void { unsafe { (storage::GetPathCoordsNV.f)(path, coords) } }
#[inline] pub fn GetPathDashArrayNV(path: GLuint, dashArray: *GLfloat) -> c_void { unsafe { (storage::GetPathDashArrayNV.f)(path, dashArray) } }
#[inline] pub fn GetPathLengthNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat { unsafe { (storage::GetPathLengthNV.f)(path, startSegment, numSegments) } }
#[inline] pub fn GetPathMetricRangeNV(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) -> c_void { unsafe { (storage::GetPathMetricRangeNV.f)(metricQueryMask, firstPathName, numPaths, stride, metrics) } }
#[inline] pub fn GetPathMetricsNV(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) -> c_void { unsafe { (storage::GetPathMetricsNV.f)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) } }
#[inline] pub fn GetPathParameterfvNV(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void { unsafe { (storage::GetPathParameterfvNV.f)(path, pname, value) } }
#[inline] pub fn GetPathParameterivNV(path: GLuint, pname: GLenum, value: *GLint) -> c_void { unsafe { (storage::GetPathParameterivNV.f)(path, pname, value) } }
#[inline] pub fn GetPathSpacingNV(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) -> c_void { unsafe { (storage::GetPathSpacingNV.f)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) } }
#[inline] pub fn GetPathTexGenfvNV(texCoordSet: GLenum, pname: GLenum, value: *GLfloat) -> c_void { unsafe { (storage::GetPathTexGenfvNV.f)(texCoordSet, pname, value) } }
#[inline] pub fn GetPathTexGenivNV(texCoordSet: GLenum, pname: GLenum, value: *GLint) -> c_void { unsafe { (storage::GetPathTexGenivNV.f)(texCoordSet, pname, value) } }
#[inline] pub fn GetPerfMonitorCounterDataAMD(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) -> c_void { unsafe { (storage::GetPerfMonitorCounterDataAMD.f)(monitor, pname, dataSize, data, bytesWritten) } }
#[inline] pub fn GetPerfMonitorCounterInfoAMD(group: GLuint, counter: GLuint, pname: GLenum, data: *GLvoid) -> c_void { unsafe { (storage::GetPerfMonitorCounterInfoAMD.f)(group, counter, pname, data) } }
#[inline] pub fn GetPerfMonitorCounterStringAMD(group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) -> c_void { unsafe { (storage::GetPerfMonitorCounterStringAMD.f)(group, counter, bufSize, length, counterString) } }
#[inline] pub fn GetPerfMonitorCountersAMD(group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) -> c_void { unsafe { (storage::GetPerfMonitorCountersAMD.f)(group, numCounters, maxActiveCounters, counterSize, counters) } }
#[inline] pub fn GetPerfMonitorGroupStringAMD(group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) -> c_void { unsafe { (storage::GetPerfMonitorGroupStringAMD.f)(group, bufSize, length, groupString) } }
#[inline] pub fn GetPerfMonitorGroupsAMD(numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) -> c_void { unsafe { (storage::GetPerfMonitorGroupsAMD.f)(numGroups, groupsSize, groups) } }
#[inline] pub fn GetPixelMapfv(map: GLenum, values: *GLfloat) -> c_void { unsafe { (storage::GetPixelMapfv.f)(map, values) } }
#[inline] pub fn GetPixelMapuiv(map: GLenum, values: *GLuint) -> c_void { unsafe { (storage::GetPixelMapuiv.f)(map, values) } }
#[inline] pub fn GetPixelMapusv(map: GLenum, values: *GLushort) -> c_void { unsafe { (storage::GetPixelMapusv.f)(map, values) } }
#[inline] pub fn GetPixelMapxv(map: GLenum, size: GLint, values: *GLfixed) -> c_void { unsafe { (storage::GetPixelMapxv.f)(map, size, values) } }
#[inline] pub fn GetPixelTexGenParameterfvSGIS(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetPixelTexGenParameterfvSGIS.f)(pname, params) } }
#[inline] pub fn GetPixelTexGenParameterivSGIS(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetPixelTexGenParameterivSGIS.f)(pname, params) } }
#[inline] pub fn GetPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetPixelTransformParameterfvEXT.f)(target, pname, params) } }
#[inline] pub fn GetPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetPixelTransformParameterivEXT.f)(target, pname, params) } }
#[inline] pub fn GetPointerIndexedvEXT(target: GLenum, index: GLuint, data: **GLvoid) -> c_void { unsafe { (storage::GetPointerIndexedvEXT.f)(target, index, data) } }
#[inline] pub fn GetPointeri_vEXT(pname: GLenum, index: GLuint, params: **GLvoid) -> c_void { unsafe { (storage::GetPointeri_vEXT.f)(pname, index, params) } }
#[inline] pub fn GetPointerv(pname: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::GetPointerv.f)(pname, params) } }
#[inline] pub fn GetPointervEXT(pname: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::GetPointervEXT.f)(pname, params) } }
#[inline] pub fn GetPointervKHR(pname: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::GetPointervKHR.f)(pname, params) } }
#[inline] pub unsafe fn GetPolygonStipple(mask: *GLubyte) -> c_void { (storage::GetPolygonStipple.f)(mask) }
#[inline] pub fn GetProgramBinary(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void { unsafe { (storage::GetProgramBinary.f)(program, bufSize, length, binaryFormat, binary) } }
#[inline] pub fn GetProgramBinaryOES(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void { unsafe { (storage::GetProgramBinaryOES.f)(program, bufSize, length, binaryFormat, binary) } }
#[inline] pub fn GetProgramEnvParameterIivNV(target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { (storage::GetProgramEnvParameterIivNV.f)(target, index, params) } }
#[inline] pub fn GetProgramEnvParameterIuivNV(target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { (storage::GetProgramEnvParameterIuivNV.f)(target, index, params) } }
#[inline] pub fn GetProgramEnvParameterdvARB(target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { (storage::GetProgramEnvParameterdvARB.f)(target, index, params) } }
#[inline] pub fn GetProgramEnvParameterfvARB(target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { (storage::GetProgramEnvParameterfvARB.f)(target, index, params) } }
#[inline] pub fn GetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { unsafe { (storage::GetProgramInfoLog.f)(program, bufSize, length, infoLog) } }
#[inline] pub fn GetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetProgramInterfaceiv.f)(program, programInterface, pname, params) } }
#[inline] pub fn GetProgramLocalParameterIivNV(target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { (storage::GetProgramLocalParameterIivNV.f)(target, index, params) } }
#[inline] pub fn GetProgramLocalParameterIuivNV(target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { (storage::GetProgramLocalParameterIuivNV.f)(target, index, params) } }
#[inline] pub fn GetProgramLocalParameterdvARB(target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { (storage::GetProgramLocalParameterdvARB.f)(target, index, params) } }
#[inline] pub fn GetProgramLocalParameterfvARB(target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { (storage::GetProgramLocalParameterfvARB.f)(target, index, params) } }
#[inline] pub fn GetProgramNamedParameterdvNV(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLdouble) -> c_void { unsafe { (storage::GetProgramNamedParameterdvNV.f)(id, len, name, params) } }
#[inline] pub fn GetProgramNamedParameterfvNV(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLfloat) -> c_void { unsafe { (storage::GetProgramNamedParameterfvNV.f)(id, len, name, params) } }
#[inline] pub fn GetProgramParameterdvNV(target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetProgramParameterdvNV.f)(target, index, pname, params) } }
#[inline] pub fn GetProgramParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetProgramParameterfvNV.f)(target, index, pname, params) } }
#[inline] pub fn GetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { unsafe { (storage::GetProgramPipelineInfoLog.f)(pipeline, bufSize, length, infoLog) } }
#[inline] pub fn GetProgramPipelineInfoLogEXT(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { unsafe { (storage::GetProgramPipelineInfoLogEXT.f)(pipeline, bufSize, length, infoLog) } }
#[inline] pub fn GetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetProgramPipelineiv.f)(pipeline, pname, params) } }
#[inline] pub fn GetProgramPipelineivEXT(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetProgramPipelineivEXT.f)(pipeline, pname, params) } }
#[inline] pub fn GetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint { unsafe { (storage::GetProgramResourceIndex.f)(program, programInterface, name) } }
#[inline] pub fn GetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint { unsafe { (storage::GetProgramResourceLocation.f)(program, programInterface, name) } }
#[inline] pub fn GetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint { unsafe { (storage::GetProgramResourceLocationIndex.f)(program, programInterface, name) } }
#[inline] pub fn GetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { unsafe { (storage::GetProgramResourceName.f)(program, programInterface, index, bufSize, length, name) } }
#[inline] pub fn GetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> c_void { unsafe { (storage::GetProgramResourceiv.f)(program, programInterface, index, propCount, props, bufSize, length, params) } }
#[inline] pub fn GetProgramStageiv(program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) -> c_void { unsafe { (storage::GetProgramStageiv.f)(program, shadertype, pname, values) } }
#[inline] pub fn GetProgramStringARB(target: GLenum, pname: GLenum, string: *GLvoid) -> c_void { unsafe { (storage::GetProgramStringARB.f)(target, pname, string) } }
#[inline] pub fn GetProgramStringNV(id: GLuint, pname: GLenum, program: *GLubyte) -> c_void { unsafe { (storage::GetProgramStringNV.f)(id, pname, program) } }
#[inline] pub fn GetProgramSubroutineParameteruivNV(target: GLenum, index: GLuint, param: *GLuint) -> c_void { unsafe { (storage::GetProgramSubroutineParameteruivNV.f)(target, index, param) } }
#[inline] pub fn GetProgramiv(program: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetProgramiv.f)(program, pname, params) } }
#[inline] pub fn GetProgramivARB(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetProgramivARB.f)(target, pname, params) } }
#[inline] pub fn GetProgramivNV(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetProgramivNV.f)(id, pname, params) } }
#[inline] pub fn GetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetQueryIndexediv.f)(target, index, pname, params) } }
#[inline] pub fn GetQueryObjecti64v(id: GLuint, pname: GLenum, params: *GLint64) -> c_void { unsafe { (storage::GetQueryObjecti64v.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjecti64vEXT(id: GLuint, pname: GLenum, params: *GLint64) -> c_void { unsafe { (storage::GetQueryObjecti64vEXT.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjectiv(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetQueryObjectiv.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjectivARB(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetQueryObjectivARB.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjectivEXT(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetQueryObjectivEXT.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjectui64v(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void { unsafe { (storage::GetQueryObjectui64v.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjectui64vEXT(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void { unsafe { (storage::GetQueryObjectui64vEXT.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjectuiv(id: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetQueryObjectuiv.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjectuivARB(id: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetQueryObjectuivARB.f)(id, pname, params) } }
#[inline] pub fn GetQueryObjectuivEXT(id: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetQueryObjectuivEXT.f)(id, pname, params) } }
#[inline] pub fn GetQueryiv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetQueryiv.f)(target, pname, params) } }
#[inline] pub fn GetQueryivARB(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetQueryivARB.f)(target, pname, params) } }
#[inline] pub fn GetQueryivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetQueryivEXT.f)(target, pname, params) } }
#[inline] pub fn GetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetRenderbufferParameteriv.f)(target, pname, params) } }
#[inline] pub fn GetRenderbufferParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetRenderbufferParameterivEXT.f)(target, pname, params) } }
#[inline] pub fn GetRenderbufferParameterivOES(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetRenderbufferParameterivOES.f)(target, pname, params) } }
#[inline] pub fn GetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetSamplerParameterIiv.f)(sampler, pname, params) } }
#[inline] pub fn GetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetSamplerParameterIuiv.f)(sampler, pname, params) } }
#[inline] pub fn GetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetSamplerParameterfv.f)(sampler, pname, params) } }
#[inline] pub fn GetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetSamplerParameteriv.f)(sampler, pname, params) } }
#[inline] pub fn GetSeparableFilter(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void { unsafe { (storage::GetSeparableFilter.f)(target, format, type_, row, column, span) } }
#[inline] pub fn GetSeparableFilterEXT(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void { unsafe { (storage::GetSeparableFilterEXT.f)(target, format, type_, row, column, span) } }
#[inline] pub fn GetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { unsafe { (storage::GetShaderInfoLog.f)(shader, bufSize, length, infoLog) } }
#[inline] pub fn GetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> c_void { unsafe { (storage::GetShaderPrecisionFormat.f)(shadertype, precisiontype, range, precision) } }
#[inline] pub fn GetShaderSource(shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void { unsafe { (storage::GetShaderSource.f)(shader, bufSize, length, source) } }
#[inline] pub fn GetShaderSourceARB(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) -> c_void { unsafe { (storage::GetShaderSourceARB.f)(obj, maxLength, length, source) } }
#[inline] pub fn GetShaderiv(shader: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetShaderiv.f)(shader, pname, params) } }
#[inline] pub fn GetSharpenTexFuncSGIS(target: GLenum, points: *GLfloat) -> c_void { unsafe { (storage::GetSharpenTexFuncSGIS.f)(target, points) } }
#[inline] pub fn GetString(name: GLenum) -> *GLubyte { unsafe { (storage::GetString.f)(name) } }
#[inline] pub fn GetStringi(name: GLenum, index: GLuint) -> *GLubyte { unsafe { (storage::GetStringi.f)(name, index) } }
#[inline] pub fn GetSubroutineIndex(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint { unsafe { (storage::GetSubroutineIndex.f)(program, shadertype, name) } }
#[inline] pub fn GetSubroutineUniformLocation(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint { unsafe { (storage::GetSubroutineUniformLocation.f)(program, shadertype, name) } }
#[inline] pub fn GetSynciv(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { unsafe { (storage::GetSynciv.f)(sync, pname, bufSize, length, values) } }
#[inline] pub fn GetSyncivAPPLE(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { unsafe { (storage::GetSyncivAPPLE.f)(sync, pname, bufSize, length, values) } }
#[inline] pub fn GetTexBumpParameterfvATI(pname: GLenum, param: *GLfloat) -> c_void { unsafe { (storage::GetTexBumpParameterfvATI.f)(pname, param) } }
#[inline] pub fn GetTexBumpParameterivATI(pname: GLenum, param: *GLint) -> c_void { unsafe { (storage::GetTexBumpParameterivATI.f)(pname, param) } }
#[inline] pub fn GetTexEnvfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetTexEnvfv.f)(target, pname, params) } }
#[inline] pub fn GetTexEnviv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTexEnviv.f)(target, pname, params) } }
#[inline] pub fn GetTexEnvxv(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetTexEnvxv.f)(target, pname, params) } }
#[inline] pub fn GetTexEnvxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetTexEnvxvOES.f)(target, pname, params) } }
#[inline] pub fn GetTexFilterFuncSGIS(target: GLenum, filter: GLenum, weights: *GLfloat) -> c_void { unsafe { (storage::GetTexFilterFuncSGIS.f)(target, filter, weights) } }
#[inline] pub fn GetTexGendv(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetTexGendv.f)(coord, pname, params) } }
#[inline] pub fn GetTexGenfv(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetTexGenfv.f)(coord, pname, params) } }
#[inline] pub fn GetTexGenfvOES(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetTexGenfvOES.f)(coord, pname, params) } }
#[inline] pub fn GetTexGeniv(coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTexGeniv.f)(coord, pname, params) } }
#[inline] pub fn GetTexGenivOES(coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTexGenivOES.f)(coord, pname, params) } }
#[inline] pub fn GetTexGenxvOES(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetTexGenxvOES.f)(coord, pname, params) } }
#[inline] pub fn GetTexImage(target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::GetTexImage.f)(target, level, format, type_, pixels) } }
#[inline] pub fn GetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetTexLevelParameterfv.f)(target, level, pname, params) } }
#[inline] pub fn GetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTexLevelParameteriv.f)(target, level, pname, params) } }
#[inline] pub fn GetTexLevelParameterxvOES(target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetTexLevelParameterxvOES.f)(target, level, pname, params) } }
#[inline] pub fn GetTexParameterIiv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTexParameterIiv.f)(target, pname, params) } }
#[inline] pub fn GetTexParameterIivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTexParameterIivEXT.f)(target, pname, params) } }
#[inline] pub fn GetTexParameterIuiv(target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetTexParameterIuiv.f)(target, pname, params) } }
#[inline] pub fn GetTexParameterIuivEXT(target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetTexParameterIuivEXT.f)(target, pname, params) } }
#[inline] pub fn GetTexParameterPointervAPPLE(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { unsafe { (storage::GetTexParameterPointervAPPLE.f)(target, pname, params) } }
#[inline] pub fn GetTexParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetTexParameterfv.f)(target, pname, params) } }
#[inline] pub fn GetTexParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTexParameteriv.f)(target, pname, params) } }
#[inline] pub fn GetTexParameterxv(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetTexParameterxv.f)(target, pname, params) } }
#[inline] pub fn GetTexParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::GetTexParameterxvOES.f)(target, pname, params) } }
#[inline] pub fn GetTextureHandleARB(texture: GLuint) -> GLuint64 { unsafe { (storage::GetTextureHandleARB.f)(texture) } }
#[inline] pub fn GetTextureHandleNV(texture: GLuint) -> GLuint64 { unsafe { (storage::GetTextureHandleNV.f)(texture) } }
#[inline] pub fn GetTextureImageEXT(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::GetTextureImageEXT.f)(texture, target, level, format, type_, pixels) } }
#[inline] pub fn GetTextureLevelParameterfvEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetTextureLevelParameterfvEXT.f)(texture, target, level, pname, params) } }
#[inline] pub fn GetTextureLevelParameterivEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTextureLevelParameterivEXT.f)(texture, target, level, pname, params) } }
#[inline] pub fn GetTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTextureParameterIivEXT.f)(texture, target, pname, params) } }
#[inline] pub fn GetTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetTextureParameterIuivEXT.f)(texture, target, pname, params) } }
#[inline] pub fn GetTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetTextureParameterfvEXT.f)(texture, target, pname, params) } }
#[inline] pub fn GetTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTextureParameterivEXT.f)(texture, target, pname, params) } }
#[inline] pub fn GetTextureSamplerHandleARB(texture: GLuint, sampler: GLuint) -> GLuint64 { unsafe { (storage::GetTextureSamplerHandleARB.f)(texture, sampler) } }
#[inline] pub fn GetTextureSamplerHandleNV(texture: GLuint, sampler: GLuint) -> GLuint64 { unsafe { (storage::GetTextureSamplerHandleNV.f)(texture, sampler) } }
#[inline] pub fn GetTrackMatrixivNV(target: GLenum, address: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetTrackMatrixivNV.f)(target, address, pname, params) } }
#[inline] pub fn GetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { unsafe { (storage::GetTransformFeedbackVarying.f)(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetTransformFeedbackVaryingEXT(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { unsafe { (storage::GetTransformFeedbackVaryingEXT.f)(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetTransformFeedbackVaryingNV(program: GLuint, index: GLuint, location: *GLint) -> c_void { unsafe { (storage::GetTransformFeedbackVaryingNV.f)(program, index, location) } }
#[inline] pub fn GetTranslatedShaderSourceANGLE(shader: GLuint, bufsize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void { unsafe { (storage::GetTranslatedShaderSourceANGLE.f)(shader, bufsize, length, source) } }
#[inline] pub fn GetUniformBlockIndex(program: GLuint, uniformBlockName: *GLchar) -> GLuint { unsafe { (storage::GetUniformBlockIndex.f)(program, uniformBlockName) } }
#[inline] pub fn GetUniformBufferSizeEXT(program: GLuint, location: GLint) -> GLint { unsafe { (storage::GetUniformBufferSizeEXT.f)(program, location) } }
#[inline] pub fn GetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> c_void { unsafe { (storage::GetUniformIndices.f)(program, uniformCount, uniformNames, uniformIndices) } }
#[inline] pub fn GetUniformLocation(program: GLuint, name: *GLchar) -> GLint { unsafe { (storage::GetUniformLocation.f)(program, name) } }
#[inline] pub fn GetUniformLocationARB(programObj: GLhandleARB, name: *GLcharARB) -> GLint { unsafe { (storage::GetUniformLocationARB.f)(programObj, name) } }
#[inline] pub fn GetUniformOffsetEXT(program: GLuint, location: GLint) -> GLintptr { unsafe { (storage::GetUniformOffsetEXT.f)(program, location) } }
#[inline] pub fn GetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: *GLuint) -> c_void { unsafe { (storage::GetUniformSubroutineuiv.f)(shadertype, location, params) } }
#[inline] pub fn GetUniformdv(program: GLuint, location: GLint, params: *GLdouble) -> c_void { unsafe { (storage::GetUniformdv.f)(program, location, params) } }
#[inline] pub fn GetUniformfv(program: GLuint, location: GLint, params: *GLfloat) -> c_void { unsafe { (storage::GetUniformfv.f)(program, location, params) } }
#[inline] pub fn GetUniformfvARB(programObj: GLhandleARB, location: GLint, params: *GLfloat) -> c_void { unsafe { (storage::GetUniformfvARB.f)(programObj, location, params) } }
#[inline] pub fn GetUniformi64vNV(program: GLuint, location: GLint, params: *GLint64EXT) -> c_void { unsafe { (storage::GetUniformi64vNV.f)(program, location, params) } }
#[inline] pub fn GetUniformiv(program: GLuint, location: GLint, params: *GLint) -> c_void { unsafe { (storage::GetUniformiv.f)(program, location, params) } }
#[inline] pub fn GetUniformivARB(programObj: GLhandleARB, location: GLint, params: *GLint) -> c_void { unsafe { (storage::GetUniformivARB.f)(programObj, location, params) } }
#[inline] pub fn GetUniformui64vNV(program: GLuint, location: GLint, params: *GLuint64EXT) -> c_void { unsafe { (storage::GetUniformui64vNV.f)(program, location, params) } }
#[inline] pub fn GetUniformuiv(program: GLuint, location: GLint, params: *GLuint) -> c_void { unsafe { (storage::GetUniformuiv.f)(program, location, params) } }
#[inline] pub fn GetUniformuivEXT(program: GLuint, location: GLint, params: *GLuint) -> c_void { unsafe { (storage::GetUniformuivEXT.f)(program, location, params) } }
#[inline] pub fn GetVariantArrayObjectfvATI(id: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetVariantArrayObjectfvATI.f)(id, pname, params) } }
#[inline] pub fn GetVariantArrayObjectivATI(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVariantArrayObjectivATI.f)(id, pname, params) } }
#[inline] pub fn GetVariantBooleanvEXT(id: GLuint, value: GLenum, data: *GLboolean) -> c_void { unsafe { (storage::GetVariantBooleanvEXT.f)(id, value, data) } }
#[inline] pub fn GetVariantFloatvEXT(id: GLuint, value: GLenum, data: *GLfloat) -> c_void { unsafe { (storage::GetVariantFloatvEXT.f)(id, value, data) } }
#[inline] pub fn GetVariantIntegervEXT(id: GLuint, value: GLenum, data: *GLint) -> c_void { unsafe { (storage::GetVariantIntegervEXT.f)(id, value, data) } }
#[inline] pub fn GetVariantPointervEXT(id: GLuint, value: GLenum, data: **GLvoid) -> c_void { unsafe { (storage::GetVariantPointervEXT.f)(id, value, data) } }
#[inline] pub fn GetVaryingLocationNV(program: GLuint, name: *GLchar) -> GLint { unsafe { (storage::GetVaryingLocationNV.f)(program, name) } }
#[inline] pub fn GetVertexArrayIntegeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) -> c_void { unsafe { (storage::GetVertexArrayIntegeri_vEXT.f)(vaobj, index, pname, param) } }
#[inline] pub fn GetVertexArrayIntegervEXT(vaobj: GLuint, pname: GLenum, param: *GLint) -> c_void { unsafe { (storage::GetVertexArrayIntegervEXT.f)(vaobj, pname, param) } }
#[inline] pub fn GetVertexArrayPointeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: **GLvoid) -> c_void { unsafe { (storage::GetVertexArrayPointeri_vEXT.f)(vaobj, index, pname, param) } }
#[inline] pub fn GetVertexArrayPointervEXT(vaobj: GLuint, pname: GLenum, param: **GLvoid) -> c_void { unsafe { (storage::GetVertexArrayPointervEXT.f)(vaobj, pname, param) } }
#[inline] pub fn GetVertexAttribArrayObjectfvATI(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetVertexAttribArrayObjectfvATI.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribArrayObjectivATI(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVertexAttribArrayObjectivATI.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribIiv(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVertexAttribIiv.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribIivEXT(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVertexAttribIivEXT.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribIuiv(index: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetVertexAttribIuiv.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribIuivEXT(index: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetVertexAttribIuivEXT.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribLdv(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetVertexAttribLdv.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribLdvEXT(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetVertexAttribLdvEXT.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribLi64vNV(index: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void { unsafe { (storage::GetVertexAttribLi64vNV.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribLui64vARB(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { (storage::GetVertexAttribLui64vARB.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribLui64vNV(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { (storage::GetVertexAttribLui64vNV.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { unsafe { (storage::GetVertexAttribPointerv.f)(index, pname, pointer) } }
#[inline] pub fn GetVertexAttribPointervARB(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { unsafe { (storage::GetVertexAttribPointervARB.f)(index, pname, pointer) } }
#[inline] pub fn GetVertexAttribPointervNV(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { unsafe { (storage::GetVertexAttribPointervNV.f)(index, pname, pointer) } }
#[inline] pub fn GetVertexAttribdv(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetVertexAttribdv.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribdvARB(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetVertexAttribdvARB.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribdvNV(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetVertexAttribdvNV.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribfv(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetVertexAttribfv.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribfvARB(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetVertexAttribfvARB.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribfvNV(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetVertexAttribfvNV.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribiv(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVertexAttribiv.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribivARB(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVertexAttribivARB.f)(index, pname, params) } }
#[inline] pub fn GetVertexAttribivNV(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVertexAttribivNV.f)(index, pname, params) } }
#[inline] pub fn GetVideoCaptureStreamdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::GetVideoCaptureStreamdvNV.f)(video_capture_slot, stream, pname, params) } }
#[inline] pub fn GetVideoCaptureStreamfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::GetVideoCaptureStreamfvNV.f)(video_capture_slot, stream, pname, params) } }
#[inline] pub fn GetVideoCaptureStreamivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVideoCaptureStreamivNV.f)(video_capture_slot, stream, pname, params) } }
#[inline] pub fn GetVideoCaptureivNV(video_capture_slot: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVideoCaptureivNV.f)(video_capture_slot, pname, params) } }
#[inline] pub fn GetVideoi64vNV(video_slot: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void { unsafe { (storage::GetVideoi64vNV.f)(video_slot, pname, params) } }
#[inline] pub fn GetVideoivNV(video_slot: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::GetVideoivNV.f)(video_slot, pname, params) } }
#[inline] pub fn GetVideoui64vNV(video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { (storage::GetVideoui64vNV.f)(video_slot, pname, params) } }
#[inline] pub fn GetVideouivNV(video_slot: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::GetVideouivNV.f)(video_slot, pname, params) } }
#[inline] pub fn GetnColorTableARB(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, table: *GLvoid) -> c_void { unsafe { (storage::GetnColorTableARB.f)(target, format, type_, bufSize, table) } }
#[inline] pub fn GetnCompressedTexImageARB(target: GLenum, lod: GLint, bufSize: GLsizei, img: *GLvoid) -> c_void { unsafe { (storage::GetnCompressedTexImageARB.f)(target, lod, bufSize, img) } }
#[inline] pub fn GetnConvolutionFilterARB(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, image: *GLvoid) -> c_void { unsafe { (storage::GetnConvolutionFilterARB.f)(target, format, type_, bufSize, image) } }
#[inline] pub fn GetnHistogramARB(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void { unsafe { (storage::GetnHistogramARB.f)(target, reset, format, type_, bufSize, values) } }
#[inline] pub fn GetnMapdvARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) -> c_void { unsafe { (storage::GetnMapdvARB.f)(target, query, bufSize, v) } }
#[inline] pub fn GetnMapfvARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) -> c_void { unsafe { (storage::GetnMapfvARB.f)(target, query, bufSize, v) } }
#[inline] pub fn GetnMapivARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) -> c_void { unsafe { (storage::GetnMapivARB.f)(target, query, bufSize, v) } }
#[inline] pub fn GetnMinmaxARB(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void { unsafe { (storage::GetnMinmaxARB.f)(target, reset, format, type_, bufSize, values) } }
#[inline] pub fn GetnPixelMapfvARB(map: GLenum, bufSize: GLsizei, values: *GLfloat) -> c_void { unsafe { (storage::GetnPixelMapfvARB.f)(map, bufSize, values) } }
#[inline] pub fn GetnPixelMapuivARB(map: GLenum, bufSize: GLsizei, values: *GLuint) -> c_void { unsafe { (storage::GetnPixelMapuivARB.f)(map, bufSize, values) } }
#[inline] pub fn GetnPixelMapusvARB(map: GLenum, bufSize: GLsizei, values: *GLushort) -> c_void { unsafe { (storage::GetnPixelMapusvARB.f)(map, bufSize, values) } }
#[inline] pub fn GetnPolygonStippleARB(bufSize: GLsizei, pattern: *GLubyte) -> c_void { unsafe { (storage::GetnPolygonStippleARB.f)(bufSize, pattern) } }
#[inline] pub fn GetnSeparableFilterARB(target: GLenum, format: GLenum, type_: GLenum, rowBufSize: GLsizei, row: *GLvoid, columnBufSize: GLsizei, column: *GLvoid, span: *GLvoid) -> c_void { unsafe { (storage::GetnSeparableFilterARB.f)(target, format, type_, rowBufSize, row, columnBufSize, column, span) } }
#[inline] pub fn GetnTexImageARB(target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: *GLvoid) -> c_void { unsafe { (storage::GetnTexImageARB.f)(target, level, format, type_, bufSize, img) } }
#[inline] pub fn GetnUniformdvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) -> c_void { unsafe { (storage::GetnUniformdvARB.f)(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformfvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void { unsafe { (storage::GetnUniformfvARB.f)(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformfvEXT(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void { unsafe { (storage::GetnUniformfvEXT.f)(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void { unsafe { (storage::GetnUniformivARB.f)(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformivEXT(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void { unsafe { (storage::GetnUniformivEXT.f)(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformuivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> c_void { unsafe { (storage::GetnUniformuivARB.f)(program, location, bufSize, params) } }
#[inline] pub fn GlobalAlphaFactorbSUN(factor: GLbyte) -> c_void { unsafe { (storage::GlobalAlphaFactorbSUN.f)(factor) } }
#[inline] pub fn GlobalAlphaFactordSUN(factor: GLdouble) -> c_void { unsafe { (storage::GlobalAlphaFactordSUN.f)(factor) } }
#[inline] pub fn GlobalAlphaFactorfSUN(factor: GLfloat) -> c_void { unsafe { (storage::GlobalAlphaFactorfSUN.f)(factor) } }
#[inline] pub fn GlobalAlphaFactoriSUN(factor: GLint) -> c_void { unsafe { (storage::GlobalAlphaFactoriSUN.f)(factor) } }
#[inline] pub fn GlobalAlphaFactorsSUN(factor: GLshort) -> c_void { unsafe { (storage::GlobalAlphaFactorsSUN.f)(factor) } }
#[inline] pub fn GlobalAlphaFactorubSUN(factor: GLubyte) -> c_void { unsafe { (storage::GlobalAlphaFactorubSUN.f)(factor) } }
#[inline] pub fn GlobalAlphaFactoruiSUN(factor: GLuint) -> c_void { unsafe { (storage::GlobalAlphaFactoruiSUN.f)(factor) } }
#[inline] pub fn GlobalAlphaFactorusSUN(factor: GLushort) -> c_void { unsafe { (storage::GlobalAlphaFactorusSUN.f)(factor) } }
#[inline] pub fn Hint(target: GLenum, mode: GLenum) -> c_void { unsafe { (storage::Hint.f)(target, mode) } }
#[inline] pub fn HintPGI(target: GLenum, mode: GLint) -> c_void { unsafe { (storage::HintPGI.f)(target, mode) } }
#[inline] pub fn Histogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { (storage::Histogram.f)(target, width, internalformat, sink) } }
#[inline] pub fn HistogramEXT(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { (storage::HistogramEXT.f)(target, width, internalformat, sink) } }
#[inline] pub fn IglooInterfaceSGIX(pname: GLenum, params: *GLvoid) -> c_void { unsafe { (storage::IglooInterfaceSGIX.f)(pname, params) } }
#[inline] pub fn ImageTransformParameterfHP(target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::ImageTransformParameterfHP.f)(target, pname, param) } }
#[inline] pub fn ImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::ImageTransformParameterfvHP.f)(target, pname, params) } }
#[inline] pub fn ImageTransformParameteriHP(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::ImageTransformParameteriHP.f)(target, pname, param) } }
#[inline] pub fn ImageTransformParameterivHP(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::ImageTransformParameterivHP.f)(target, pname, params) } }
#[inline] pub fn ImportSyncEXT(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync { unsafe { (storage::ImportSyncEXT.f)(external_sync_type, external_sync, flags) } }
#[inline] pub fn IndexFormatNV(type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::IndexFormatNV.f)(type_, stride) } }
#[inline] pub fn IndexFuncEXT(func: GLenum, ref_: GLclampf) -> c_void { unsafe { (storage::IndexFuncEXT.f)(func, ref_) } }
#[inline] pub fn IndexMask(mask: GLuint) -> c_void { unsafe { (storage::IndexMask.f)(mask) } }
#[inline] pub fn IndexMaterialEXT(face: GLenum, mode: GLenum) -> c_void { unsafe { (storage::IndexMaterialEXT.f)(face, mode) } }
#[inline] pub fn IndexPointer(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::IndexPointer.f)(type_, stride, pointer) } }
#[inline] pub fn IndexPointerEXT(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::IndexPointerEXT.f)(type_, stride, count, pointer) } }
#[inline] pub fn IndexPointerListIBM(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { (storage::IndexPointerListIBM.f)(type_, stride, pointer, ptrstride) } }
#[inline] pub fn Indexd(c: GLdouble) -> c_void { unsafe { (storage::Indexd.f)(c) } }
#[inline] pub unsafe fn Indexdv(c: *GLdouble) -> c_void { (storage::Indexdv.f)(c) }
#[inline] pub fn Indexf(c: GLfloat) -> c_void { unsafe { (storage::Indexf.f)(c) } }
#[inline] pub unsafe fn Indexfv(c: *GLfloat) -> c_void { (storage::Indexfv.f)(c) }
#[inline] pub fn Indexi(c: GLint) -> c_void { unsafe { (storage::Indexi.f)(c) } }
#[inline] pub unsafe fn Indexiv(c: *GLint) -> c_void { (storage::Indexiv.f)(c) }
#[inline] pub fn Indexs(c: GLshort) -> c_void { unsafe { (storage::Indexs.f)(c) } }
#[inline] pub unsafe fn Indexsv(c: *GLshort) -> c_void { (storage::Indexsv.f)(c) }
#[inline] pub fn Indexub(c: GLubyte) -> c_void { unsafe { (storage::Indexub.f)(c) } }
#[inline] pub unsafe fn Indexubv(c: *GLubyte) -> c_void { (storage::Indexubv.f)(c) }
#[inline] pub fn IndexxOES(component: GLfixed) -> c_void { unsafe { (storage::IndexxOES.f)(component) } }
#[inline] pub unsafe fn IndexxvOES(component: *GLfixed) -> c_void { (storage::IndexxvOES.f)(component) }
#[inline] pub unsafe fn InitNames() -> c_void { (storage::InitNames.f)() }
#[inline] pub fn InsertComponentEXT(res: GLuint, src: GLuint, num: GLuint) -> c_void { unsafe { (storage::InsertComponentEXT.f)(res, src, num) } }
#[inline] pub fn InsertEventMarkerEXT(length: GLsizei, marker: *GLchar) -> c_void { unsafe { (storage::InsertEventMarkerEXT.f)(length, marker) } }
#[inline] pub fn InstrumentsBufferSGIX(size: GLsizei, buffer: *GLint) -> c_void { unsafe { (storage::InstrumentsBufferSGIX.f)(size, buffer) } }
#[inline] pub fn InterleavedArrays(format: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::InterleavedArrays.f)(format, stride, pointer) } }
#[inline] pub fn InterpolatePathsNV(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> c_void { unsafe { (storage::InterpolatePathsNV.f)(resultPath, pathA, pathB, weight) } }
#[inline] pub fn InvalidateBufferData(buffer: GLuint) -> c_void { unsafe { (storage::InvalidateBufferData.f)(buffer) } }
#[inline] pub fn InvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { (storage::InvalidateBufferSubData.f)(buffer, offset, length) } }
#[inline] pub fn InvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void { unsafe { (storage::InvalidateFramebuffer.f)(target, numAttachments, attachments) } }
#[inline] pub fn InvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::InvalidateSubFramebuffer.f)(target, numAttachments, attachments, x, y, width, height) } }
#[inline] pub fn InvalidateTexImage(texture: GLuint, level: GLint) -> c_void { unsafe { (storage::InvalidateTexImage.f)(texture, level) } }
#[inline] pub fn InvalidateTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (storage::InvalidateTexSubImage.f)(texture, level, xoffset, yoffset, zoffset, width, height, depth) } }
#[inline] pub fn IsAsyncMarkerSGIX(marker: GLuint) -> GLboolean { unsafe { (storage::IsAsyncMarkerSGIX.f)(marker) } }
#[inline] pub fn IsBuffer(buffer: GLuint) -> GLboolean { unsafe { (storage::IsBuffer.f)(buffer) } }
#[inline] pub fn IsBufferARB(buffer: GLuint) -> GLboolean { unsafe { (storage::IsBufferARB.f)(buffer) } }
#[inline] pub fn IsBufferResidentNV(target: GLenum) -> GLboolean { unsafe { (storage::IsBufferResidentNV.f)(target) } }
#[inline] pub fn IsEnabled(cap: GLenum) -> GLboolean { unsafe { (storage::IsEnabled.f)(cap) } }
#[inline] pub fn IsEnabledIndexedEXT(target: GLenum, index: GLuint) -> GLboolean { unsafe { (storage::IsEnabledIndexedEXT.f)(target, index) } }
#[inline] pub fn IsEnabledi(target: GLenum, index: GLuint) -> GLboolean { unsafe { (storage::IsEnabledi.f)(target, index) } }
#[inline] pub fn IsFenceAPPLE(fence: GLuint) -> GLboolean { unsafe { (storage::IsFenceAPPLE.f)(fence) } }
#[inline] pub fn IsFenceNV(fence: GLuint) -> GLboolean { unsafe { (storage::IsFenceNV.f)(fence) } }
#[inline] pub fn IsFramebuffer(framebuffer: GLuint) -> GLboolean { unsafe { (storage::IsFramebuffer.f)(framebuffer) } }
#[inline] pub fn IsFramebufferEXT(framebuffer: GLuint) -> GLboolean { unsafe { (storage::IsFramebufferEXT.f)(framebuffer) } }
#[inline] pub fn IsFramebufferOES(framebuffer: GLuint) -> GLboolean { unsafe { (storage::IsFramebufferOES.f)(framebuffer) } }
#[inline] pub fn IsImageHandleResidentARB(handle: GLuint64) -> GLboolean { unsafe { (storage::IsImageHandleResidentARB.f)(handle) } }
#[inline] pub fn IsImageHandleResidentNV(handle: GLuint64) -> GLboolean { unsafe { (storage::IsImageHandleResidentNV.f)(handle) } }
#[inline] pub fn IsList(list: GLuint) -> GLboolean { unsafe { (storage::IsList.f)(list) } }
#[inline] pub fn IsNameAMD(identifier: GLenum, name: GLuint) -> GLboolean { unsafe { (storage::IsNameAMD.f)(identifier, name) } }
#[inline] pub fn IsNamedBufferResidentNV(buffer: GLuint) -> GLboolean { unsafe { (storage::IsNamedBufferResidentNV.f)(buffer) } }
#[inline] pub fn IsNamedStringARB(namelen: GLint, name: *GLchar) -> GLboolean { unsafe { (storage::IsNamedStringARB.f)(namelen, name) } }
#[inline] pub fn IsObjectBufferATI(buffer: GLuint) -> GLboolean { unsafe { (storage::IsObjectBufferATI.f)(buffer) } }
#[inline] pub fn IsOcclusionQueryNV(id: GLuint) -> GLboolean { unsafe { (storage::IsOcclusionQueryNV.f)(id) } }
#[inline] pub fn IsPathNV(path: GLuint) -> GLboolean { unsafe { (storage::IsPathNV.f)(path) } }
#[inline] pub fn IsPointInFillPathNV(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean { unsafe { (storage::IsPointInFillPathNV.f)(path, mask, x, y) } }
#[inline] pub fn IsPointInStrokePathNV(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean { unsafe { (storage::IsPointInStrokePathNV.f)(path, x, y) } }
#[inline] pub fn IsProgram(program: GLuint) -> GLboolean { unsafe { (storage::IsProgram.f)(program) } }
#[inline] pub fn IsProgramARB(program: GLuint) -> GLboolean { unsafe { (storage::IsProgramARB.f)(program) } }
#[inline] pub fn IsProgramNV(id: GLuint) -> GLboolean { unsafe { (storage::IsProgramNV.f)(id) } }
#[inline] pub fn IsProgramPipeline(pipeline: GLuint) -> GLboolean { unsafe { (storage::IsProgramPipeline.f)(pipeline) } }
#[inline] pub fn IsProgramPipelineEXT(pipeline: GLuint) -> GLboolean { unsafe { (storage::IsProgramPipelineEXT.f)(pipeline) } }
#[inline] pub fn IsQuery(id: GLuint) -> GLboolean { unsafe { (storage::IsQuery.f)(id) } }
#[inline] pub fn IsQueryARB(id: GLuint) -> GLboolean { unsafe { (storage::IsQueryARB.f)(id) } }
#[inline] pub fn IsQueryEXT(id: GLuint) -> GLboolean { unsafe { (storage::IsQueryEXT.f)(id) } }
#[inline] pub fn IsRenderbuffer(renderbuffer: GLuint) -> GLboolean { unsafe { (storage::IsRenderbuffer.f)(renderbuffer) } }
#[inline] pub fn IsRenderbufferEXT(renderbuffer: GLuint) -> GLboolean { unsafe { (storage::IsRenderbufferEXT.f)(renderbuffer) } }
#[inline] pub fn IsRenderbufferOES(renderbuffer: GLuint) -> GLboolean { unsafe { (storage::IsRenderbufferOES.f)(renderbuffer) } }
#[inline] pub fn IsSampler(sampler: GLuint) -> GLboolean { unsafe { (storage::IsSampler.f)(sampler) } }
#[inline] pub fn IsShader(shader: GLuint) -> GLboolean { unsafe { (storage::IsShader.f)(shader) } }
#[inline] pub fn IsSync(sync: GLsync) -> GLboolean { unsafe { (storage::IsSync.f)(sync) } }
#[inline] pub fn IsSyncAPPLE(sync: GLsync) -> GLboolean { unsafe { (storage::IsSyncAPPLE.f)(sync) } }
#[inline] pub fn IsTexture(texture: GLuint) -> GLboolean { unsafe { (storage::IsTexture.f)(texture) } }
#[inline] pub fn IsTextureEXT(texture: GLuint) -> GLboolean { unsafe { (storage::IsTextureEXT.f)(texture) } }
#[inline] pub fn IsTextureHandleResidentARB(handle: GLuint64) -> GLboolean { unsafe { (storage::IsTextureHandleResidentARB.f)(handle) } }
#[inline] pub fn IsTextureHandleResidentNV(handle: GLuint64) -> GLboolean { unsafe { (storage::IsTextureHandleResidentNV.f)(handle) } }
#[inline] pub fn IsTransformFeedback(id: GLuint) -> GLboolean { unsafe { (storage::IsTransformFeedback.f)(id) } }
#[inline] pub fn IsTransformFeedbackNV(id: GLuint) -> GLboolean { unsafe { (storage::IsTransformFeedbackNV.f)(id) } }
#[inline] pub fn IsVariantEnabledEXT(id: GLuint, cap: GLenum) -> GLboolean { unsafe { (storage::IsVariantEnabledEXT.f)(id, cap) } }
#[inline] pub fn IsVertexArray(array: GLuint) -> GLboolean { unsafe { (storage::IsVertexArray.f)(array) } }
#[inline] pub fn IsVertexArrayAPPLE(array: GLuint) -> GLboolean { unsafe { (storage::IsVertexArrayAPPLE.f)(array) } }
#[inline] pub fn IsVertexArrayOES(array: GLuint) -> GLboolean { unsafe { (storage::IsVertexArrayOES.f)(array) } }
#[inline] pub fn IsVertexAttribEnabledAPPLE(index: GLuint, pname: GLenum) -> GLboolean { unsafe { (storage::IsVertexAttribEnabledAPPLE.f)(index, pname) } }
#[inline] pub fn LabelObjectEXT(type_: GLenum, object: GLuint, length: GLsizei, label: *GLchar) -> c_void { unsafe { (storage::LabelObjectEXT.f)(type_, object, length, label) } }
#[inline] pub fn LightEnviSGIX(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::LightEnviSGIX.f)(pname, param) } }
#[inline] pub fn LightModelf(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::LightModelf.f)(pname, param) } }
#[inline] pub fn LightModelfv(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::LightModelfv.f)(pname, params) } }
#[inline] pub fn LightModeli(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::LightModeli.f)(pname, param) } }
#[inline] pub fn LightModeliv(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::LightModeliv.f)(pname, params) } }
#[inline] pub fn LightModelx(pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::LightModelx.f)(pname, param) } }
#[inline] pub fn LightModelxOES(pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::LightModelxOES.f)(pname, param) } }
#[inline] pub fn LightModelxv(pname: GLenum, param: *GLfixed) -> c_void { unsafe { (storage::LightModelxv.f)(pname, param) } }
#[inline] pub fn LightModelxvOES(pname: GLenum, param: *GLfixed) -> c_void { unsafe { (storage::LightModelxvOES.f)(pname, param) } }
#[inline] pub fn Lightf(light: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::Lightf.f)(light, pname, param) } }
#[inline] pub fn Lightfv(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::Lightfv.f)(light, pname, params) } }
#[inline] pub fn Lighti(light: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::Lighti.f)(light, pname, param) } }
#[inline] pub fn Lightiv(light: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::Lightiv.f)(light, pname, params) } }
#[inline] pub fn Lightx(light: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::Lightx.f)(light, pname, param) } }
#[inline] pub fn LightxOES(light: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::LightxOES.f)(light, pname, param) } }
#[inline] pub fn Lightxv(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::Lightxv.f)(light, pname, params) } }
#[inline] pub fn LightxvOES(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::LightxvOES.f)(light, pname, params) } }
#[inline] pub fn LineStipple(factor: GLint, pattern: GLushort) -> c_void { unsafe { (storage::LineStipple.f)(factor, pattern) } }
#[inline] pub fn LineWidth(width: GLfloat) -> c_void { unsafe { (storage::LineWidth.f)(width) } }
#[inline] pub fn LineWidthx(width: GLfixed) -> c_void { unsafe { (storage::LineWidthx.f)(width) } }
#[inline] pub fn LineWidthxOES(width: GLfixed) -> c_void { unsafe { (storage::LineWidthxOES.f)(width) } }
#[inline] pub fn LinkProgram(program: GLuint) -> c_void { unsafe { (storage::LinkProgram.f)(program) } }
#[inline] pub fn LinkProgramARB(programObj: GLhandleARB) -> c_void { unsafe { (storage::LinkProgramARB.f)(programObj) } }
#[inline] pub fn ListBase(base: GLuint) -> c_void { unsafe { (storage::ListBase.f)(base) } }
#[inline] pub fn ListParameterfSGIX(list: GLuint, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::ListParameterfSGIX.f)(list, pname, param) } }
#[inline] pub fn ListParameterfvSGIX(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::ListParameterfvSGIX.f)(list, pname, params) } }
#[inline] pub fn ListParameteriSGIX(list: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::ListParameteriSGIX.f)(list, pname, param) } }
#[inline] pub fn ListParameterivSGIX(list: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::ListParameterivSGIX.f)(list, pname, params) } }
#[inline] pub unsafe fn LoadIdentity() -> c_void { (storage::LoadIdentity.f)() }
#[inline] pub fn LoadIdentityDeformationMapSGIX(mask: GLbitfield) -> c_void { unsafe { (storage::LoadIdentityDeformationMapSGIX.f)(mask) } }
#[inline] pub unsafe fn LoadMatrixd(m: *GLdouble) -> c_void { (storage::LoadMatrixd.f)(m) }
#[inline] pub unsafe fn LoadMatrixf(m: *GLfloat) -> c_void { (storage::LoadMatrixf.f)(m) }
#[inline] pub unsafe fn LoadMatrixx(m: *GLfixed) -> c_void { (storage::LoadMatrixx.f)(m) }
#[inline] pub unsafe fn LoadMatrixxOES(m: *GLfixed) -> c_void { (storage::LoadMatrixxOES.f)(m) }
#[inline] pub fn LoadName(name: GLuint) -> c_void { unsafe { (storage::LoadName.f)(name) } }
#[inline] pub unsafe fn LoadPaletteFromModelViewMatrixOES() -> c_void { (storage::LoadPaletteFromModelViewMatrixOES.f)() }
#[inline] pub fn LoadProgramNV(target: GLenum, id: GLuint, len: GLsizei, program: *GLubyte) -> c_void { unsafe { (storage::LoadProgramNV.f)(target, id, len, program) } }
#[inline] pub unsafe fn LoadTransposeMatrixd(m: *GLdouble) -> c_void { (storage::LoadTransposeMatrixd.f)(m) }
#[inline] pub unsafe fn LoadTransposeMatrixdARB(m: *GLdouble) -> c_void { (storage::LoadTransposeMatrixdARB.f)(m) }
#[inline] pub unsafe fn LoadTransposeMatrixf(m: *GLfloat) -> c_void { (storage::LoadTransposeMatrixf.f)(m) }
#[inline] pub unsafe fn LoadTransposeMatrixfARB(m: *GLfloat) -> c_void { (storage::LoadTransposeMatrixfARB.f)(m) }
#[inline] pub unsafe fn LoadTransposeMatrixxOES(m: *GLfixed) -> c_void { (storage::LoadTransposeMatrixxOES.f)(m) }
#[inline] pub fn LockArraysEXT(first: GLint, count: GLsizei) -> c_void { unsafe { (storage::LockArraysEXT.f)(first, count) } }
#[inline] pub fn LogicOp(opcode: GLenum) -> c_void { unsafe { (storage::LogicOp.f)(opcode) } }
#[inline] pub fn MakeBufferNonResidentNV(target: GLenum) -> c_void { unsafe { (storage::MakeBufferNonResidentNV.f)(target) } }
#[inline] pub fn MakeBufferResidentNV(target: GLenum, access: GLenum) -> c_void { unsafe { (storage::MakeBufferResidentNV.f)(target, access) } }
#[inline] pub fn MakeImageHandleNonResidentARB(handle: GLuint64) -> c_void { unsafe { (storage::MakeImageHandleNonResidentARB.f)(handle) } }
#[inline] pub fn MakeImageHandleNonResidentNV(handle: GLuint64) -> c_void { unsafe { (storage::MakeImageHandleNonResidentNV.f)(handle) } }
#[inline] pub fn MakeImageHandleResidentARB(handle: GLuint64, access: GLenum) -> c_void { unsafe { (storage::MakeImageHandleResidentARB.f)(handle, access) } }
#[inline] pub fn MakeImageHandleResidentNV(handle: GLuint64, access: GLenum) -> c_void { unsafe { (storage::MakeImageHandleResidentNV.f)(handle, access) } }
#[inline] pub fn MakeNamedBufferNonResidentNV(buffer: GLuint) -> c_void { unsafe { (storage::MakeNamedBufferNonResidentNV.f)(buffer) } }
#[inline] pub fn MakeNamedBufferResidentNV(buffer: GLuint, access: GLenum) -> c_void { unsafe { (storage::MakeNamedBufferResidentNV.f)(buffer, access) } }
#[inline] pub fn MakeTextureHandleNonResidentARB(handle: GLuint64) -> c_void { unsafe { (storage::MakeTextureHandleNonResidentARB.f)(handle) } }
#[inline] pub fn MakeTextureHandleNonResidentNV(handle: GLuint64) -> c_void { unsafe { (storage::MakeTextureHandleNonResidentNV.f)(handle) } }
#[inline] pub fn MakeTextureHandleResidentARB(handle: GLuint64) -> c_void { unsafe { (storage::MakeTextureHandleResidentARB.f)(handle) } }
#[inline] pub fn MakeTextureHandleResidentNV(handle: GLuint64) -> c_void { unsafe { (storage::MakeTextureHandleResidentNV.f)(handle) } }
#[inline] pub fn Map1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void { unsafe { (storage::Map1d.f)(target, u1, u2, stride, order, points) } }
#[inline] pub fn Map1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void { unsafe { (storage::Map1f.f)(target, u1, u2, stride, order, points) } }
#[inline] pub fn Map1xOES(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) -> c_void { unsafe { (storage::Map1xOES.f)(target, u1, u2, stride, order, points) } }
#[inline] pub fn Map2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void { unsafe { (storage::Map2d.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn Map2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void { unsafe { (storage::Map2f.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn Map2xOES(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) -> c_void { unsafe { (storage::Map2xOES.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn MapBuffer(target: GLenum, access: GLenum) -> *c_void { unsafe { (storage::MapBuffer.f)(target, access) } }
#[inline] pub fn MapBufferARB(target: GLenum, access: GLenum) -> *c_void { unsafe { (storage::MapBufferARB.f)(target, access) } }
#[inline] pub fn MapBufferOES(target: GLenum, access: GLenum) -> *c_void { unsafe { (storage::MapBufferOES.f)(target, access) } }
#[inline] pub fn MapBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { (storage::MapBufferRange.f)(target, offset, length, access) } }
#[inline] pub fn MapBufferRangeEXT(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { (storage::MapBufferRangeEXT.f)(target, offset, length, access) } }
#[inline] pub fn MapControlPointsNV(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *GLvoid) -> c_void { unsafe { (storage::MapControlPointsNV.f)(target, index, type_, ustride, vstride, uorder, vorder, packed, points) } }
#[inline] pub fn MapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) -> c_void { unsafe { (storage::MapGrid1d.f)(un, u1, u2) } }
#[inline] pub fn MapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) -> c_void { unsafe { (storage::MapGrid1f.f)(un, u1, u2) } }
#[inline] pub fn MapGrid1xOES(n: GLint, u1: GLfixed, u2: GLfixed) -> c_void { unsafe { (storage::MapGrid1xOES.f)(n, u1, u2) } }
#[inline] pub fn MapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> c_void { unsafe { (storage::MapGrid2d.f)(un, u1, u2, vn, v1, v2) } }
#[inline] pub fn MapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (storage::MapGrid2f.f)(un, u1, u2, vn, v1, v2) } }
#[inline] pub fn MapGrid2xOES(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) -> c_void { unsafe { (storage::MapGrid2xOES.f)(n, u1, u2, v1, v2) } }
#[inline] pub fn MapNamedBufferEXT(buffer: GLuint, access: GLenum) -> *c_void { unsafe { (storage::MapNamedBufferEXT.f)(buffer, access) } }
#[inline] pub fn MapNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { (storage::MapNamedBufferRangeEXT.f)(buffer, offset, length, access) } }
#[inline] pub fn MapObjectBufferATI(buffer: GLuint) -> *c_void { unsafe { (storage::MapObjectBufferATI.f)(buffer) } }
#[inline] pub fn MapParameterfvNV(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::MapParameterfvNV.f)(target, pname, params) } }
#[inline] pub fn MapParameterivNV(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::MapParameterivNV.f)(target, pname, params) } }
#[inline] pub fn MapTexture2DINTEL(texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) -> *c_void { unsafe { (storage::MapTexture2DINTEL.f)(texture, level, access, stride, layout) } }
#[inline] pub fn MapVertexAttrib1dAPPLE(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void { unsafe { (storage::MapVertexAttrib1dAPPLE.f)(index, size, u1, u2, stride, order, points) } }
#[inline] pub fn MapVertexAttrib1fAPPLE(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void { unsafe { (storage::MapVertexAttrib1fAPPLE.f)(index, size, u1, u2, stride, order, points) } }
#[inline] pub fn MapVertexAttrib2dAPPLE(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void { unsafe { (storage::MapVertexAttrib2dAPPLE.f)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn MapVertexAttrib2fAPPLE(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void { unsafe { (storage::MapVertexAttrib2fAPPLE.f)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn Materialf(face: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::Materialf.f)(face, pname, param) } }
#[inline] pub fn Materialfv(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::Materialfv.f)(face, pname, params) } }
#[inline] pub fn Materiali(face: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::Materiali.f)(face, pname, param) } }
#[inline] pub fn Materialiv(face: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::Materialiv.f)(face, pname, params) } }
#[inline] pub fn Materialx(face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::Materialx.f)(face, pname, param) } }
#[inline] pub fn MaterialxOES(face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::MaterialxOES.f)(face, pname, param) } }
#[inline] pub fn Materialxv(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void { unsafe { (storage::Materialxv.f)(face, pname, param) } }
#[inline] pub fn MaterialxvOES(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void { unsafe { (storage::MaterialxvOES.f)(face, pname, param) } }
#[inline] pub fn MatrixFrustumEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (storage::MatrixFrustumEXT.f)(mode, left, right, bottom, top, zNear, zFar) } }
#[inline] pub fn MatrixIndexPointerARB(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::MatrixIndexPointerARB.f)(size, type_, stride, pointer) } }
#[inline] pub fn MatrixIndexPointerOES(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::MatrixIndexPointerOES.f)(size, type_, stride, pointer) } }
#[inline] pub fn MatrixIndexubvARB(size: GLint, indices: *GLubyte) -> c_void { unsafe { (storage::MatrixIndexubvARB.f)(size, indices) } }
#[inline] pub fn MatrixIndexuivARB(size: GLint, indices: *GLuint) -> c_void { unsafe { (storage::MatrixIndexuivARB.f)(size, indices) } }
#[inline] pub fn MatrixIndexusvARB(size: GLint, indices: *GLushort) -> c_void { unsafe { (storage::MatrixIndexusvARB.f)(size, indices) } }
#[inline] pub fn MatrixLoadIdentityEXT(mode: GLenum) -> c_void { unsafe { (storage::MatrixLoadIdentityEXT.f)(mode) } }
#[inline] pub fn MatrixLoadTransposedEXT(mode: GLenum, m: *GLdouble) -> c_void { unsafe { (storage::MatrixLoadTransposedEXT.f)(mode, m) } }
#[inline] pub fn MatrixLoadTransposefEXT(mode: GLenum, m: *GLfloat) -> c_void { unsafe { (storage::MatrixLoadTransposefEXT.f)(mode, m) } }
#[inline] pub fn MatrixLoaddEXT(mode: GLenum, m: *GLdouble) -> c_void { unsafe { (storage::MatrixLoaddEXT.f)(mode, m) } }
#[inline] pub fn MatrixLoadfEXT(mode: GLenum, m: *GLfloat) -> c_void { unsafe { (storage::MatrixLoadfEXT.f)(mode, m) } }
#[inline] pub fn MatrixMode(mode: GLenum) -> c_void { unsafe { (storage::MatrixMode.f)(mode) } }
#[inline] pub fn MatrixMultTransposedEXT(mode: GLenum, m: *GLdouble) -> c_void { unsafe { (storage::MatrixMultTransposedEXT.f)(mode, m) } }
#[inline] pub fn MatrixMultTransposefEXT(mode: GLenum, m: *GLfloat) -> c_void { unsafe { (storage::MatrixMultTransposefEXT.f)(mode, m) } }
#[inline] pub fn MatrixMultdEXT(mode: GLenum, m: *GLdouble) -> c_void { unsafe { (storage::MatrixMultdEXT.f)(mode, m) } }
#[inline] pub fn MatrixMultfEXT(mode: GLenum, m: *GLfloat) -> c_void { unsafe { (storage::MatrixMultfEXT.f)(mode, m) } }
#[inline] pub fn MatrixOrthoEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (storage::MatrixOrthoEXT.f)(mode, left, right, bottom, top, zNear, zFar) } }
#[inline] pub fn MatrixPopEXT(mode: GLenum) -> c_void { unsafe { (storage::MatrixPopEXT.f)(mode) } }
#[inline] pub fn MatrixPushEXT(mode: GLenum) -> c_void { unsafe { (storage::MatrixPushEXT.f)(mode) } }
#[inline] pub fn MatrixRotatedEXT(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::MatrixRotatedEXT.f)(mode, angle, x, y, z) } }
#[inline] pub fn MatrixRotatefEXT(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::MatrixRotatefEXT.f)(mode, angle, x, y, z) } }
#[inline] pub fn MatrixScaledEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::MatrixScaledEXT.f)(mode, x, y, z) } }
#[inline] pub fn MatrixScalefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::MatrixScalefEXT.f)(mode, x, y, z) } }
#[inline] pub fn MatrixTranslatedEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::MatrixTranslatedEXT.f)(mode, x, y, z) } }
#[inline] pub fn MatrixTranslatefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::MatrixTranslatefEXT.f)(mode, x, y, z) } }
#[inline] pub fn MemoryBarrier(barriers: GLbitfield) -> c_void { unsafe { (storage::MemoryBarrier.f)(barriers) } }
#[inline] pub fn MemoryBarrierEXT(barriers: GLbitfield) -> c_void { unsafe { (storage::MemoryBarrierEXT.f)(barriers) } }
#[inline] pub fn MinSampleShading(value: GLfloat) -> c_void { unsafe { (storage::MinSampleShading.f)(value) } }
#[inline] pub fn MinSampleShadingARB(value: GLfloat) -> c_void { unsafe { (storage::MinSampleShadingARB.f)(value) } }
#[inline] pub fn Minmax(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { (storage::Minmax.f)(target, internalformat, sink) } }
#[inline] pub fn MinmaxEXT(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { (storage::MinmaxEXT.f)(target, internalformat, sink) } }
#[inline] pub unsafe fn MultMatrixd(m: *GLdouble) -> c_void { (storage::MultMatrixd.f)(m) }
#[inline] pub unsafe fn MultMatrixf(m: *GLfloat) -> c_void { (storage::MultMatrixf.f)(m) }
#[inline] pub unsafe fn MultMatrixx(m: *GLfixed) -> c_void { (storage::MultMatrixx.f)(m) }
#[inline] pub unsafe fn MultMatrixxOES(m: *GLfixed) -> c_void { (storage::MultMatrixxOES.f)(m) }
#[inline] pub unsafe fn MultTransposeMatrixd(m: *GLdouble) -> c_void { (storage::MultTransposeMatrixd.f)(m) }
#[inline] pub unsafe fn MultTransposeMatrixdARB(m: *GLdouble) -> c_void { (storage::MultTransposeMatrixdARB.f)(m) }
#[inline] pub unsafe fn MultTransposeMatrixf(m: *GLfloat) -> c_void { (storage::MultTransposeMatrixf.f)(m) }
#[inline] pub unsafe fn MultTransposeMatrixfARB(m: *GLfloat) -> c_void { (storage::MultTransposeMatrixfARB.f)(m) }
#[inline] pub unsafe fn MultTransposeMatrixxOES(m: *GLfixed) -> c_void { (storage::MultTransposeMatrixxOES.f)(m) }
#[inline] pub fn MultiDrawArrays(mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) -> c_void { unsafe { (storage::MultiDrawArrays.f)(mode, first, count, drawcount) } }
#[inline] pub fn MultiDrawArraysEXT(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { unsafe { (storage::MultiDrawArraysEXT.f)(mode, first, count, primcount) } }
#[inline] pub fn MultiDrawArraysIndirect(mode: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { (storage::MultiDrawArraysIndirect.f)(mode, indirect, drawcount, stride) } }
#[inline] pub fn MultiDrawArraysIndirectAMD(mode: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void { unsafe { (storage::MultiDrawArraysIndirectAMD.f)(mode, indirect, primcount, stride) } }
#[inline] pub fn MultiDrawArraysIndirectBindlessNV(mode: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void { unsafe { (storage::MultiDrawArraysIndirectBindlessNV.f)(mode, indirect, drawCount, stride, vertexBufferCount) } }
#[inline] pub fn MultiDrawElementsIndirectBindlessNV(mode: GLenum, type_: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void { unsafe { (storage::MultiDrawElementsIndirectBindlessNV.f)(mode, type_, indirect, drawCount, stride, vertexBufferCount) } }
#[inline] pub fn MultiDrawArraysIndirectCountARB(mode: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { (storage::MultiDrawArraysIndirectCountARB.f)(mode, indirect, drawcount, maxdrawcount, stride) } }
#[inline] pub fn MultiDrawElementArrayAPPLE(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { unsafe { (storage::MultiDrawElementArrayAPPLE.f)(mode, first, count, primcount) } }
#[inline] pub fn MultiDrawElements(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei) -> c_void { unsafe { (storage::MultiDrawElements.f)(mode, count, type_, indices, drawcount) } }
#[inline] pub fn MultiDrawElementsBaseVertex(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei, basevertex: *GLint) -> c_void { unsafe { (storage::MultiDrawElementsBaseVertex.f)(mode, count, type_, indices, drawcount, basevertex) } }
#[inline] pub fn MultiDrawElementsEXT(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei) -> c_void { unsafe { (storage::MultiDrawElementsEXT.f)(mode, count, type_, indices, primcount) } }
#[inline] pub fn MultiDrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { (storage::MultiDrawElementsIndirect.f)(mode, type_, indirect, drawcount, stride) } }
#[inline] pub fn MultiDrawElementsIndirectAMD(mode: GLenum, type_: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void { unsafe { (storage::MultiDrawElementsIndirectAMD.f)(mode, type_, indirect, primcount, stride) } }
#[inline] pub fn MultiDrawElementsIndirectCountARB(mode: GLenum, type_: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { (storage::MultiDrawElementsIndirectCountARB.f)(mode, type_, indirect, drawcount, maxdrawcount, stride) } }
#[inline] pub fn MultiDrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { unsafe { (storage::MultiDrawRangeElementArrayAPPLE.f)(mode, start, end, first, count, primcount) } }
#[inline] pub fn MultiModeDrawArraysIBM(mode: *GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei, modestride: GLint) -> c_void { unsafe { (storage::MultiModeDrawArraysIBM.f)(mode, first, count, primcount, modestride) } }
#[inline] pub fn MultiModeDrawElementsIBM(mode: *GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei, modestride: GLint) -> c_void { unsafe { (storage::MultiModeDrawElementsIBM.f)(mode, count, type_, indices, primcount, modestride) } }
#[inline] pub fn MultiTexBufferEXT(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (storage::MultiTexBufferEXT.f)(texunit, target, internalformat, buffer) } }
#[inline] pub fn MultiTexCoord1bOES(texture: GLenum, s: GLbyte) -> c_void { unsafe { (storage::MultiTexCoord1bOES.f)(texture, s) } }
#[inline] pub fn MultiTexCoord1bvOES(texture: GLenum, coords: *GLbyte) -> c_void { unsafe { (storage::MultiTexCoord1bvOES.f)(texture, coords) } }
#[inline] pub fn MultiTexCoord1d(target: GLenum, s: GLdouble) -> c_void { unsafe { (storage::MultiTexCoord1d.f)(target, s) } }
#[inline] pub fn MultiTexCoord1dARB(target: GLenum, s: GLdouble) -> c_void { unsafe { (storage::MultiTexCoord1dARB.f)(target, s) } }
#[inline] pub fn MultiTexCoord1dv(target: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::MultiTexCoord1dv.f)(target, v) } }
#[inline] pub fn MultiTexCoord1dvARB(target: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::MultiTexCoord1dvARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord1f(target: GLenum, s: GLfloat) -> c_void { unsafe { (storage::MultiTexCoord1f.f)(target, s) } }
#[inline] pub fn MultiTexCoord1fARB(target: GLenum, s: GLfloat) -> c_void { unsafe { (storage::MultiTexCoord1fARB.f)(target, s) } }
#[inline] pub fn MultiTexCoord1fv(target: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::MultiTexCoord1fv.f)(target, v) } }
#[inline] pub fn MultiTexCoord1fvARB(target: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::MultiTexCoord1fvARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord1hNV(target: GLenum, s: GLhalfNV) -> c_void { unsafe { (storage::MultiTexCoord1hNV.f)(target, s) } }
#[inline] pub fn MultiTexCoord1hvNV(target: GLenum, v: *GLhalfNV) -> c_void { unsafe { (storage::MultiTexCoord1hvNV.f)(target, v) } }
#[inline] pub fn MultiTexCoord1i(target: GLenum, s: GLint) -> c_void { unsafe { (storage::MultiTexCoord1i.f)(target, s) } }
#[inline] pub fn MultiTexCoord1iARB(target: GLenum, s: GLint) -> c_void { unsafe { (storage::MultiTexCoord1iARB.f)(target, s) } }
#[inline] pub fn MultiTexCoord1iv(target: GLenum, v: *GLint) -> c_void { unsafe { (storage::MultiTexCoord1iv.f)(target, v) } }
#[inline] pub fn MultiTexCoord1ivARB(target: GLenum, v: *GLint) -> c_void { unsafe { (storage::MultiTexCoord1ivARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord1s(target: GLenum, s: GLshort) -> c_void { unsafe { (storage::MultiTexCoord1s.f)(target, s) } }
#[inline] pub fn MultiTexCoord1sARB(target: GLenum, s: GLshort) -> c_void { unsafe { (storage::MultiTexCoord1sARB.f)(target, s) } }
#[inline] pub fn MultiTexCoord1sv(target: GLenum, v: *GLshort) -> c_void { unsafe { (storage::MultiTexCoord1sv.f)(target, v) } }
#[inline] pub fn MultiTexCoord1svARB(target: GLenum, v: *GLshort) -> c_void { unsafe { (storage::MultiTexCoord1svARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord1xOES(texture: GLenum, s: GLfixed) -> c_void { unsafe { (storage::MultiTexCoord1xOES.f)(texture, s) } }
#[inline] pub fn MultiTexCoord1xvOES(texture: GLenum, coords: *GLfixed) -> c_void { unsafe { (storage::MultiTexCoord1xvOES.f)(texture, coords) } }
#[inline] pub fn MultiTexCoord2bOES(texture: GLenum, s: GLbyte, t: GLbyte) -> c_void { unsafe { (storage::MultiTexCoord2bOES.f)(texture, s, t) } }
#[inline] pub fn MultiTexCoord2bvOES(texture: GLenum, coords: *GLbyte) -> c_void { unsafe { (storage::MultiTexCoord2bvOES.f)(texture, coords) } }
#[inline] pub fn MultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) -> c_void { unsafe { (storage::MultiTexCoord2d.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble) -> c_void { unsafe { (storage::MultiTexCoord2dARB.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2dv(target: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::MultiTexCoord2dv.f)(target, v) } }
#[inline] pub fn MultiTexCoord2dvARB(target: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::MultiTexCoord2dvARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) -> c_void { unsafe { (storage::MultiTexCoord2f.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat) -> c_void { unsafe { (storage::MultiTexCoord2fARB.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2fv(target: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::MultiTexCoord2fv.f)(target, v) } }
#[inline] pub fn MultiTexCoord2fvARB(target: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::MultiTexCoord2fvARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord2hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV) -> c_void { unsafe { (storage::MultiTexCoord2hNV.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2hvNV(target: GLenum, v: *GLhalfNV) -> c_void { unsafe { (storage::MultiTexCoord2hvNV.f)(target, v) } }
#[inline] pub fn MultiTexCoord2i(target: GLenum, s: GLint, t: GLint) -> c_void { unsafe { (storage::MultiTexCoord2i.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint) -> c_void { unsafe { (storage::MultiTexCoord2iARB.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2iv(target: GLenum, v: *GLint) -> c_void { unsafe { (storage::MultiTexCoord2iv.f)(target, v) } }
#[inline] pub fn MultiTexCoord2ivARB(target: GLenum, v: *GLint) -> c_void { unsafe { (storage::MultiTexCoord2ivARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) -> c_void { unsafe { (storage::MultiTexCoord2s.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort) -> c_void { unsafe { (storage::MultiTexCoord2sARB.f)(target, s, t) } }
#[inline] pub fn MultiTexCoord2sv(target: GLenum, v: *GLshort) -> c_void { unsafe { (storage::MultiTexCoord2sv.f)(target, v) } }
#[inline] pub fn MultiTexCoord2svARB(target: GLenum, v: *GLshort) -> c_void { unsafe { (storage::MultiTexCoord2svARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord2xOES(texture: GLenum, s: GLfixed, t: GLfixed) -> c_void { unsafe { (storage::MultiTexCoord2xOES.f)(texture, s, t) } }
#[inline] pub fn MultiTexCoord2xvOES(texture: GLenum, coords: *GLfixed) -> c_void { unsafe { (storage::MultiTexCoord2xvOES.f)(texture, coords) } }
#[inline] pub fn MultiTexCoord3bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) -> c_void { unsafe { (storage::MultiTexCoord3bOES.f)(texture, s, t, r) } }
#[inline] pub fn MultiTexCoord3bvOES(texture: GLenum, coords: *GLbyte) -> c_void { unsafe { (storage::MultiTexCoord3bvOES.f)(texture, coords) } }
#[inline] pub fn MultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { (storage::MultiTexCoord3d.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { (storage::MultiTexCoord3dARB.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3dv(target: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::MultiTexCoord3dv.f)(target, v) } }
#[inline] pub fn MultiTexCoord3dvARB(target: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::MultiTexCoord3dvARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { (storage::MultiTexCoord3f.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { (storage::MultiTexCoord3fARB.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3fv(target: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::MultiTexCoord3fv.f)(target, v) } }
#[inline] pub fn MultiTexCoord3fvARB(target: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::MultiTexCoord3fvARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord3hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void { unsafe { (storage::MultiTexCoord3hNV.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3hvNV(target: GLenum, v: *GLhalfNV) -> c_void { unsafe { (storage::MultiTexCoord3hvNV.f)(target, v) } }
#[inline] pub fn MultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void { unsafe { (storage::MultiTexCoord3i.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void { unsafe { (storage::MultiTexCoord3iARB.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3iv(target: GLenum, v: *GLint) -> c_void { unsafe { (storage::MultiTexCoord3iv.f)(target, v) } }
#[inline] pub fn MultiTexCoord3ivARB(target: GLenum, v: *GLint) -> c_void { unsafe { (storage::MultiTexCoord3ivARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { (storage::MultiTexCoord3s.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { (storage::MultiTexCoord3sARB.f)(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3sv(target: GLenum, v: *GLshort) -> c_void { unsafe { (storage::MultiTexCoord3sv.f)(target, v) } }
#[inline] pub fn MultiTexCoord3svARB(target: GLenum, v: *GLshort) -> c_void { unsafe { (storage::MultiTexCoord3svARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord3xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) -> c_void { unsafe { (storage::MultiTexCoord3xOES.f)(texture, s, t, r) } }
#[inline] pub fn MultiTexCoord3xvOES(texture: GLenum, coords: *GLfixed) -> c_void { unsafe { (storage::MultiTexCoord3xvOES.f)(texture, coords) } }
#[inline] pub fn MultiTexCoord4bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void { unsafe { (storage::MultiTexCoord4bOES.f)(texture, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4bvOES(texture: GLenum, coords: *GLbyte) -> c_void { unsafe { (storage::MultiTexCoord4bvOES.f)(texture, coords) } }
#[inline] pub fn MultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { (storage::MultiTexCoord4d.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { (storage::MultiTexCoord4dARB.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4dv(target: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::MultiTexCoord4dv.f)(target, v) } }
#[inline] pub fn MultiTexCoord4dvARB(target: GLenum, v: *GLdouble) -> c_void { unsafe { (storage::MultiTexCoord4dvARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { (storage::MultiTexCoord4f.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { (storage::MultiTexCoord4fARB.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4fv(target: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::MultiTexCoord4fv.f)(target, v) } }
#[inline] pub fn MultiTexCoord4fvARB(target: GLenum, v: *GLfloat) -> c_void { unsafe { (storage::MultiTexCoord4fvARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord4hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void { unsafe { (storage::MultiTexCoord4hNV.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4hvNV(target: GLenum, v: *GLhalfNV) -> c_void { unsafe { (storage::MultiTexCoord4hvNV.f)(target, v) } }
#[inline] pub fn MultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { (storage::MultiTexCoord4i.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { (storage::MultiTexCoord4iARB.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4iv(target: GLenum, v: *GLint) -> c_void { unsafe { (storage::MultiTexCoord4iv.f)(target, v) } }
#[inline] pub fn MultiTexCoord4ivARB(target: GLenum, v: *GLint) -> c_void { unsafe { (storage::MultiTexCoord4ivARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { (storage::MultiTexCoord4s.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { (storage::MultiTexCoord4sARB.f)(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4sv(target: GLenum, v: *GLshort) -> c_void { unsafe { (storage::MultiTexCoord4sv.f)(target, v) } }
#[inline] pub fn MultiTexCoord4svARB(target: GLenum, v: *GLshort) -> c_void { unsafe { (storage::MultiTexCoord4svARB.f)(target, v) } }
#[inline] pub fn MultiTexCoord4x(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { (storage::MultiTexCoord4x.f)(texture, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { (storage::MultiTexCoord4xOES.f)(texture, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4xvOES(texture: GLenum, coords: *GLfixed) -> c_void { unsafe { (storage::MultiTexCoord4xvOES.f)(texture, coords) } }
#[inline] pub fn MultiTexCoordP1ui(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::MultiTexCoordP1ui.f)(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP1uiv(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::MultiTexCoordP1uiv.f)(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP2ui(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::MultiTexCoordP2ui.f)(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP2uiv(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::MultiTexCoordP2uiv.f)(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP3ui(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::MultiTexCoordP3ui.f)(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP3uiv(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::MultiTexCoordP3uiv.f)(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP4ui(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::MultiTexCoordP4ui.f)(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP4uiv(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::MultiTexCoordP4uiv.f)(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordPointerEXT(texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::MultiTexCoordPointerEXT.f)(texunit, size, type_, stride, pointer) } }
#[inline] pub fn MultiTexEnvfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::MultiTexEnvfEXT.f)(texunit, target, pname, param) } }
#[inline] pub fn MultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::MultiTexEnvfvEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn MultiTexEnviEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::MultiTexEnviEXT.f)(texunit, target, pname, param) } }
#[inline] pub fn MultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::MultiTexEnvivEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn MultiTexGendEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) -> c_void { unsafe { (storage::MultiTexGendEXT.f)(texunit, coord, pname, param) } }
#[inline] pub fn MultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::MultiTexGendvEXT.f)(texunit, coord, pname, params) } }
#[inline] pub fn MultiTexGenfEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::MultiTexGenfEXT.f)(texunit, coord, pname, param) } }
#[inline] pub fn MultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::MultiTexGenfvEXT.f)(texunit, coord, pname, params) } }
#[inline] pub fn MultiTexGeniEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::MultiTexGeniEXT.f)(texunit, coord, pname, param) } }
#[inline] pub fn MultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::MultiTexGenivEXT.f)(texunit, coord, pname, params) } }
#[inline] pub fn MultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::MultiTexImage1DEXT.f)(texunit, target, level, internalformat, width, border, format, type_, pixels) } }
#[inline] pub fn MultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::MultiTexImage2DEXT.f)(texunit, target, level, internalformat, width, height, border, format, type_, pixels) } }
#[inline] pub fn MultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::MultiTexImage3DEXT.f)(texunit, target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn MultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::MultiTexParameterIivEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn MultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::MultiTexParameterIuivEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn MultiTexParameterfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::MultiTexParameterfEXT.f)(texunit, target, pname, param) } }
#[inline] pub fn MultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::MultiTexParameterfvEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn MultiTexParameteriEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::MultiTexParameteriEXT.f)(texunit, target, pname, param) } }
#[inline] pub fn MultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::MultiTexParameterivEXT.f)(texunit, target, pname, params) } }
#[inline] pub fn MultiTexRenderbufferEXT(texunit: GLenum, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::MultiTexRenderbufferEXT.f)(texunit, target, renderbuffer) } }
#[inline] pub fn MultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::MultiTexSubImage1DEXT.f)(texunit, target, level, xoffset, width, format, type_, pixels) } }
#[inline] pub fn MultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::MultiTexSubImage2DEXT.f)(texunit, target, level, xoffset, yoffset, width, height, format, type_, pixels) } }
#[inline] pub fn MultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::MultiTexSubImage3DEXT.f)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn NamedBufferDataEXT(buffer: GLuint, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void { unsafe { (storage::NamedBufferDataEXT.f)(buffer, size, data, usage) } }
#[inline] pub fn NamedBufferStorageEXT(buffer: GLuint, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void { unsafe { (storage::NamedBufferStorageEXT.f)(buffer, size, data, flags) } }
#[inline] pub fn NamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { unsafe { (storage::NamedBufferSubDataEXT.f)(buffer, offset, size, data) } }
#[inline] pub fn NamedCopyBufferSubDataEXT(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (storage::NamedCopyBufferSubDataEXT.f)(readBuffer, writeBuffer, readOffset, writeOffset, size) } }
#[inline] pub fn NamedFramebufferParameteriEXT(framebuffer: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::NamedFramebufferParameteriEXT.f)(framebuffer, pname, param) } }
#[inline] pub fn NamedFramebufferRenderbufferEXT(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::NamedFramebufferRenderbufferEXT.f)(framebuffer, attachment, renderbuffertarget, renderbuffer) } }
#[inline] pub fn NamedFramebufferTexture1DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::NamedFramebufferTexture1DEXT.f)(framebuffer, attachment, textarget, texture, level) } }
#[inline] pub fn NamedFramebufferTexture2DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::NamedFramebufferTexture2DEXT.f)(framebuffer, attachment, textarget, texture, level) } }
#[inline] pub fn NamedFramebufferTexture3DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { (storage::NamedFramebufferTexture3DEXT.f)(framebuffer, attachment, textarget, texture, level, zoffset) } }
#[inline] pub fn NamedFramebufferTextureEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (storage::NamedFramebufferTextureEXT.f)(framebuffer, attachment, texture, level) } }
#[inline] pub fn NamedFramebufferTextureFaceEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { (storage::NamedFramebufferTextureFaceEXT.f)(framebuffer, attachment, texture, level, face) } }
#[inline] pub fn NamedFramebufferTextureLayerEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { (storage::NamedFramebufferTextureLayerEXT.f)(framebuffer, attachment, texture, level, layer) } }
#[inline] pub fn NamedProgramLocalParameter4dEXT(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::NamedProgramLocalParameter4dEXT.f)(program, target, index, x, y, z, w) } }
#[inline] pub fn NamedProgramLocalParameter4dvEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { (storage::NamedProgramLocalParameter4dvEXT.f)(program, target, index, params) } }
#[inline] pub fn NamedProgramLocalParameter4fEXT(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::NamedProgramLocalParameter4fEXT.f)(program, target, index, x, y, z, w) } }
#[inline] pub fn NamedProgramLocalParameter4fvEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { (storage::NamedProgramLocalParameter4fvEXT.f)(program, target, index, params) } }
#[inline] pub fn NamedProgramLocalParameterI4iEXT(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::NamedProgramLocalParameterI4iEXT.f)(program, target, index, x, y, z, w) } }
#[inline] pub fn NamedProgramLocalParameterI4ivEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { (storage::NamedProgramLocalParameterI4ivEXT.f)(program, target, index, params) } }
#[inline] pub fn NamedProgramLocalParameterI4uiEXT(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (storage::NamedProgramLocalParameterI4uiEXT.f)(program, target, index, x, y, z, w) } }
#[inline] pub fn NamedProgramLocalParameterI4uivEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { (storage::NamedProgramLocalParameterI4uivEXT.f)(program, target, index, params) } }
#[inline] pub fn NamedProgramLocalParameters4fvEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { unsafe { (storage::NamedProgramLocalParameters4fvEXT.f)(program, target, index, count, params) } }
#[inline] pub fn NamedProgramLocalParametersI4ivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { unsafe { (storage::NamedProgramLocalParametersI4ivEXT.f)(program, target, index, count, params) } }
#[inline] pub fn NamedProgramLocalParametersI4uivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { unsafe { (storage::NamedProgramLocalParametersI4uivEXT.f)(program, target, index, count, params) } }
#[inline] pub fn NamedProgramStringEXT(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void { unsafe { (storage::NamedProgramStringEXT.f)(program, target, format, len, string) } }
#[inline] pub fn NamedRenderbufferStorageEXT(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::NamedRenderbufferStorageEXT.f)(renderbuffer, internalformat, width, height) } }
#[inline] pub fn NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::NamedRenderbufferStorageMultisampleCoverageEXT.f)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) } }
#[inline] pub fn NamedRenderbufferStorageMultisampleEXT(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::NamedRenderbufferStorageMultisampleEXT.f)(renderbuffer, samples, internalformat, width, height) } }
#[inline] pub fn NamedStringARB(type_: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, string: *GLchar) -> c_void { unsafe { (storage::NamedStringARB.f)(type_, namelen, name, stringlen, string) } }
#[inline] pub fn NewList(list: GLuint, mode: GLenum) -> c_void { unsafe { (storage::NewList.f)(list, mode) } }
#[inline] pub fn NewObjectBufferATI(size: GLsizei, pointer: *GLvoid, usage: GLenum) -> GLuint { unsafe { (storage::NewObjectBufferATI.f)(size, pointer, usage) } }
#[inline] pub fn Normal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void { unsafe { (storage::Normal3b.f)(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3bv(v: *GLbyte) -> c_void { (storage::Normal3bv.f)(v) }
#[inline] pub fn Normal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void { unsafe { (storage::Normal3d.f)(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3dv(v: *GLdouble) -> c_void { (storage::Normal3dv.f)(v) }
#[inline] pub fn Normal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void { unsafe { (storage::Normal3f.f)(nx, ny, nz) } }
#[inline] pub fn Normal3fVertex3fSUN(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::Normal3fVertex3fSUN.f)(nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn Normal3fVertex3fvSUN(n: *GLfloat, v: *GLfloat) -> c_void { (storage::Normal3fVertex3fvSUN.f)(n, v) }
#[inline] pub unsafe fn Normal3fv(v: *GLfloat) -> c_void { (storage::Normal3fv.f)(v) }
#[inline] pub fn Normal3hNV(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) -> c_void { unsafe { (storage::Normal3hNV.f)(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3hvNV(v: *GLhalfNV) -> c_void { (storage::Normal3hvNV.f)(v) }
#[inline] pub fn Normal3i(nx: GLint, ny: GLint, nz: GLint) -> c_void { unsafe { (storage::Normal3i.f)(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3iv(v: *GLint) -> c_void { (storage::Normal3iv.f)(v) }
#[inline] pub fn Normal3s(nx: GLshort, ny: GLshort, nz: GLshort) -> c_void { unsafe { (storage::Normal3s.f)(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3sv(v: *GLshort) -> c_void { (storage::Normal3sv.f)(v) }
#[inline] pub fn Normal3x(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void { unsafe { (storage::Normal3x.f)(nx, ny, nz) } }
#[inline] pub fn Normal3xOES(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void { unsafe { (storage::Normal3xOES.f)(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3xvOES(coords: *GLfixed) -> c_void { (storage::Normal3xvOES.f)(coords) }
#[inline] pub fn NormalFormatNV(type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::NormalFormatNV.f)(type_, stride) } }
#[inline] pub fn NormalP3ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::NormalP3ui.f)(type_, coords) } }
#[inline] pub fn NormalP3uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::NormalP3uiv.f)(type_, coords) } }
#[inline] pub fn NormalPointer(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::NormalPointer.f)(type_, stride, pointer) } }
#[inline] pub fn NormalPointerEXT(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::NormalPointerEXT.f)(type_, stride, count, pointer) } }
#[inline] pub fn NormalPointerListIBM(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { (storage::NormalPointerListIBM.f)(type_, stride, pointer, ptrstride) } }
#[inline] pub fn NormalPointervINTEL(type_: GLenum, pointer: **GLvoid) -> c_void { unsafe { (storage::NormalPointervINTEL.f)(type_, pointer) } }
#[inline] pub fn NormalStream3bATI(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void { unsafe { (storage::NormalStream3bATI.f)(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3bvATI(stream: GLenum, coords: *GLbyte) -> c_void { unsafe { (storage::NormalStream3bvATI.f)(stream, coords) } }
#[inline] pub fn NormalStream3dATI(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void { unsafe { (storage::NormalStream3dATI.f)(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { (storage::NormalStream3dvATI.f)(stream, coords) } }
#[inline] pub fn NormalStream3fATI(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void { unsafe { (storage::NormalStream3fATI.f)(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { (storage::NormalStream3fvATI.f)(stream, coords) } }
#[inline] pub fn NormalStream3iATI(stream: GLenum, nx: GLint, ny: GLint, nz: GLint) -> c_void { unsafe { (storage::NormalStream3iATI.f)(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { (storage::NormalStream3ivATI.f)(stream, coords) } }
#[inline] pub fn NormalStream3sATI(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) -> c_void { unsafe { (storage::NormalStream3sATI.f)(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { (storage::NormalStream3svATI.f)(stream, coords) } }
#[inline] pub fn ObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void { unsafe { (storage::ObjectLabel.f)(identifier, name, length, label) } }
#[inline] pub fn ObjectLabelKHR(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void { unsafe { (storage::ObjectLabelKHR.f)(identifier, name, length, label) } }
#[inline] pub fn ObjectPtrLabel(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void { unsafe { (storage::ObjectPtrLabel.f)(ptr, length, label) } }
#[inline] pub fn ObjectPtrLabelKHR(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void { unsafe { (storage::ObjectPtrLabelKHR.f)(ptr, length, label) } }
#[inline] pub fn ObjectPurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum { unsafe { (storage::ObjectPurgeableAPPLE.f)(objectType, name, option) } }
#[inline] pub fn ObjectUnpurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum { unsafe { (storage::ObjectUnpurgeableAPPLE.f)(objectType, name, option) } }
#[inline] pub fn Ortho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (storage::Ortho.f)(left, right, bottom, top, zNear, zFar) } }
#[inline] pub fn Orthof(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { (storage::Orthof.f)(l, r, b, t, n, f) } }
#[inline] pub fn OrthofOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { (storage::OrthofOES.f)(l, r, b, t, n, f) } }
#[inline] pub fn Orthox(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { (storage::Orthox.f)(l, r, b, t, n, f) } }
#[inline] pub fn OrthoxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { (storage::OrthoxOES.f)(l, r, b, t, n, f) } }
#[inline] pub fn PNTrianglesfATI(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PNTrianglesfATI.f)(pname, param) } }
#[inline] pub fn PNTrianglesiATI(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::PNTrianglesiATI.f)(pname, param) } }
#[inline] pub fn PassTexCoordATI(dst: GLuint, coord: GLuint, swizzle: GLenum) -> c_void { unsafe { (storage::PassTexCoordATI.f)(dst, coord, swizzle) } }
#[inline] pub fn PassThrough(token: GLfloat) -> c_void { unsafe { (storage::PassThrough.f)(token) } }
#[inline] pub fn PassThroughxOES(token: GLfixed) -> c_void { unsafe { (storage::PassThroughxOES.f)(token) } }
#[inline] pub fn PatchParameterfv(pname: GLenum, values: *GLfloat) -> c_void { unsafe { (storage::PatchParameterfv.f)(pname, values) } }
#[inline] pub fn PatchParameteri(pname: GLenum, value: GLint) -> c_void { unsafe { (storage::PatchParameteri.f)(pname, value) } }
#[inline] pub fn PathColorGenNV(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: *GLfloat) -> c_void { unsafe { (storage::PathColorGenNV.f)(color, genMode, colorFormat, coeffs) } }
#[inline] pub fn PathCommandsNV(path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { unsafe { (storage::PathCommandsNV.f)(path, numCommands, commands, numCoords, coordType, coords) } }
#[inline] pub fn PathCoordsNV(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { unsafe { (storage::PathCoordsNV.f)(path, numCoords, coordType, coords) } }
#[inline] pub fn PathCoverDepthFuncNV(func: GLenum) -> c_void { unsafe { (storage::PathCoverDepthFuncNV.f)(func) } }
#[inline] pub fn PathDashArrayNV(path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) -> c_void { unsafe { (storage::PathDashArrayNV.f)(path, dashCount, dashArray) } }
#[inline] pub fn PathFogGenNV(genMode: GLenum) -> c_void { unsafe { (storage::PathFogGenNV.f)(genMode) } }
#[inline] pub fn PathGlyphRangeNV(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void { unsafe { (storage::PathGlyphRangeNV.f)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) } }
#[inline] pub fn PathGlyphsNV(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: *GLvoid, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void { unsafe { (storage::PathGlyphsNV.f)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type_, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) } }
#[inline] pub fn PathParameterfNV(path: GLuint, pname: GLenum, value: GLfloat) -> c_void { unsafe { (storage::PathParameterfNV.f)(path, pname, value) } }
#[inline] pub fn PathParameterfvNV(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void { unsafe { (storage::PathParameterfvNV.f)(path, pname, value) } }
#[inline] pub fn PathParameteriNV(path: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { (storage::PathParameteriNV.f)(path, pname, value) } }
#[inline] pub fn PathParameterivNV(path: GLuint, pname: GLenum, value: *GLint) -> c_void { unsafe { (storage::PathParameterivNV.f)(path, pname, value) } }
#[inline] pub fn PathStencilDepthOffsetNV(factor: GLfloat, units: GLfloat) -> c_void { unsafe { (storage::PathStencilDepthOffsetNV.f)(factor, units) } }
#[inline] pub fn PathStencilFuncNV(func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { (storage::PathStencilFuncNV.f)(func, ref_, mask) } }
#[inline] pub fn PathStringNV(path: GLuint, format: GLenum, length: GLsizei, pathString: *GLvoid) -> c_void { unsafe { (storage::PathStringNV.f)(path, format, length, pathString) } }
#[inline] pub fn PathSubCommandsNV(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { unsafe { (storage::PathSubCommandsNV.f)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) } }
#[inline] pub fn PathSubCoordsNV(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { unsafe { (storage::PathSubCoordsNV.f)(path, coordStart, numCoords, coordType, coords) } }
#[inline] pub fn PathTexGenNV(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: *GLfloat) -> c_void { unsafe { (storage::PathTexGenNV.f)(texCoordSet, genMode, components, coeffs) } }
#[inline] pub unsafe fn PauseTransformFeedback() -> c_void { (storage::PauseTransformFeedback.f)() }
#[inline] pub unsafe fn PauseTransformFeedbackNV() -> c_void { (storage::PauseTransformFeedbackNV.f)() }
#[inline] pub fn PixelDataRangeNV(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::PixelDataRangeNV.f)(target, length, pointer) } }
#[inline] pub fn PixelMapfv(map: GLenum, mapsize: GLsizei, values: *GLfloat) -> c_void { unsafe { (storage::PixelMapfv.f)(map, mapsize, values) } }
#[inline] pub fn PixelMapuiv(map: GLenum, mapsize: GLsizei, values: *GLuint) -> c_void { unsafe { (storage::PixelMapuiv.f)(map, mapsize, values) } }
#[inline] pub fn PixelMapusv(map: GLenum, mapsize: GLsizei, values: *GLushort) -> c_void { unsafe { (storage::PixelMapusv.f)(map, mapsize, values) } }
#[inline] pub fn PixelMapx(map: GLenum, size: GLint, values: *GLfixed) -> c_void { unsafe { (storage::PixelMapx.f)(map, size, values) } }
#[inline] pub fn PixelStoref(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PixelStoref.f)(pname, param) } }
#[inline] pub fn PixelStorei(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::PixelStorei.f)(pname, param) } }
#[inline] pub fn PixelStorex(pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::PixelStorex.f)(pname, param) } }
#[inline] pub fn PixelTexGenParameterfSGIS(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PixelTexGenParameterfSGIS.f)(pname, param) } }
#[inline] pub fn PixelTexGenParameterfvSGIS(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::PixelTexGenParameterfvSGIS.f)(pname, params) } }
#[inline] pub fn PixelTexGenParameteriSGIS(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::PixelTexGenParameteriSGIS.f)(pname, param) } }
#[inline] pub fn PixelTexGenParameterivSGIS(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::PixelTexGenParameterivSGIS.f)(pname, params) } }
#[inline] pub fn PixelTexGenSGIX(mode: GLenum) -> c_void { unsafe { (storage::PixelTexGenSGIX.f)(mode) } }
#[inline] pub fn PixelTransferf(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PixelTransferf.f)(pname, param) } }
#[inline] pub fn PixelTransferi(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::PixelTransferi.f)(pname, param) } }
#[inline] pub fn PixelTransferxOES(pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::PixelTransferxOES.f)(pname, param) } }
#[inline] pub fn PixelTransformParameterfEXT(target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PixelTransformParameterfEXT.f)(target, pname, param) } }
#[inline] pub fn PixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::PixelTransformParameterfvEXT.f)(target, pname, params) } }
#[inline] pub fn PixelTransformParameteriEXT(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::PixelTransformParameteriEXT.f)(target, pname, param) } }
#[inline] pub fn PixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::PixelTransformParameterivEXT.f)(target, pname, params) } }
#[inline] pub fn PixelZoom(xfactor: GLfloat, yfactor: GLfloat) -> c_void { unsafe { (storage::PixelZoom.f)(xfactor, yfactor) } }
#[inline] pub fn PixelZoomxOES(xfactor: GLfixed, yfactor: GLfixed) -> c_void { unsafe { (storage::PixelZoomxOES.f)(xfactor, yfactor) } }
#[inline] pub fn PointAlongPathNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean { unsafe { (storage::PointAlongPathNV.f)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) } }
#[inline] pub fn PointParameterf(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PointParameterf.f)(pname, param) } }
#[inline] pub fn PointParameterfARB(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PointParameterfARB.f)(pname, param) } }
#[inline] pub fn PointParameterfEXT(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PointParameterfEXT.f)(pname, param) } }
#[inline] pub fn PointParameterfSGIS(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::PointParameterfSGIS.f)(pname, param) } }
#[inline] pub fn PointParameterfv(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::PointParameterfv.f)(pname, params) } }
#[inline] pub fn PointParameterfvARB(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::PointParameterfvARB.f)(pname, params) } }
#[inline] pub fn PointParameterfvEXT(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::PointParameterfvEXT.f)(pname, params) } }
#[inline] pub fn PointParameterfvSGIS(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::PointParameterfvSGIS.f)(pname, params) } }
#[inline] pub fn PointParameteri(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::PointParameteri.f)(pname, param) } }
#[inline] pub fn PointParameteriNV(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::PointParameteriNV.f)(pname, param) } }
#[inline] pub fn PointParameteriv(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::PointParameteriv.f)(pname, params) } }
#[inline] pub fn PointParameterivNV(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::PointParameterivNV.f)(pname, params) } }
#[inline] pub fn PointParameterx(pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::PointParameterx.f)(pname, param) } }
#[inline] pub fn PointParameterxOES(pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::PointParameterxOES.f)(pname, param) } }
#[inline] pub fn PointParameterxv(pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::PointParameterxv.f)(pname, params) } }
#[inline] pub fn PointParameterxvOES(pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::PointParameterxvOES.f)(pname, params) } }
#[inline] pub fn PointSize(size: GLfloat) -> c_void { unsafe { (storage::PointSize.f)(size) } }
#[inline] pub fn PointSizePointerOES(type_: GLenum, stride: GLsizei, pointer: *c_void) -> c_void { unsafe { (storage::PointSizePointerOES.f)(type_, stride, pointer) } }
#[inline] pub fn PointSizex(size: GLfixed) -> c_void { unsafe { (storage::PointSizex.f)(size) } }
#[inline] pub fn PointSizexOES(size: GLfixed) -> c_void { unsafe { (storage::PointSizexOES.f)(size) } }
#[inline] pub unsafe fn PollAsyncSGIX(markerp: *GLuint) -> GLint { (storage::PollAsyncSGIX.f)(markerp) }
#[inline] pub unsafe fn PollInstrumentsSGIX(marker_p: *GLint) -> GLint { (storage::PollInstrumentsSGIX.f)(marker_p) }
#[inline] pub fn PolygonMode(face: GLenum, mode: GLenum) -> c_void { unsafe { (storage::PolygonMode.f)(face, mode) } }
#[inline] pub fn PolygonOffset(factor: GLfloat, units: GLfloat) -> c_void { unsafe { (storage::PolygonOffset.f)(factor, units) } }
#[inline] pub fn PolygonOffsetEXT(factor: GLfloat, bias: GLfloat) -> c_void { unsafe { (storage::PolygonOffsetEXT.f)(factor, bias) } }
#[inline] pub fn PolygonOffsetx(factor: GLfixed, units: GLfixed) -> c_void { unsafe { (storage::PolygonOffsetx.f)(factor, units) } }
#[inline] pub fn PolygonOffsetxOES(factor: GLfixed, units: GLfixed) -> c_void { unsafe { (storage::PolygonOffsetxOES.f)(factor, units) } }
#[inline] pub unsafe fn PolygonStipple(mask: *GLubyte) -> c_void { (storage::PolygonStipple.f)(mask) }
#[inline] pub unsafe fn PopAttrib() -> c_void { (storage::PopAttrib.f)() }
#[inline] pub unsafe fn PopClientAttrib() -> c_void { (storage::PopClientAttrib.f)() }
#[inline] pub unsafe fn PopDebugGroup() -> c_void { (storage::PopDebugGroup.f)() }
#[inline] pub unsafe fn PopDebugGroupKHR() -> c_void { (storage::PopDebugGroupKHR.f)() }
#[inline] pub unsafe fn PopGroupMarkerEXT() -> c_void { (storage::PopGroupMarkerEXT.f)() }
#[inline] pub unsafe fn PopMatrix() -> c_void { (storage::PopMatrix.f)() }
#[inline] pub unsafe fn PopName() -> c_void { (storage::PopName.f)() }
#[inline] pub fn PresentFrameDualFillNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) -> c_void { unsafe { (storage::PresentFrameDualFillNV.f)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type_, target0, fill0, target1, fill1, target2, fill2, target3, fill3) } }
#[inline] pub fn PresentFrameKeyedNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) -> c_void { unsafe { (storage::PresentFrameKeyedNV.f)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type_, target0, fill0, key0, target1, fill1, key1) } }
#[inline] pub fn PrimitiveRestartIndex(index: GLuint) -> c_void { unsafe { (storage::PrimitiveRestartIndex.f)(index) } }
#[inline] pub fn PrimitiveRestartIndexNV(index: GLuint) -> c_void { unsafe { (storage::PrimitiveRestartIndexNV.f)(index) } }
#[inline] pub unsafe fn PrimitiveRestartNV() -> c_void { (storage::PrimitiveRestartNV.f)() }
#[inline] pub fn PrioritizeTextures(n: GLsizei, textures: *GLuint, priorities: *GLfloat) -> c_void { unsafe { (storage::PrioritizeTextures.f)(n, textures, priorities) } }
#[inline] pub fn PrioritizeTexturesEXT(n: GLsizei, textures: *GLuint, priorities: *GLclampf) -> c_void { unsafe { (storage::PrioritizeTexturesEXT.f)(n, textures, priorities) } }
#[inline] pub fn PrioritizeTexturesxOES(n: GLsizei, textures: *GLuint, priorities: *GLfixed) -> c_void { unsafe { (storage::PrioritizeTexturesxOES.f)(n, textures, priorities) } }
#[inline] pub fn ProgramBinary(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void { unsafe { (storage::ProgramBinary.f)(program, binaryFormat, binary, length) } }
#[inline] pub fn ProgramBinaryOES(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLint) -> c_void { unsafe { (storage::ProgramBinaryOES.f)(program, binaryFormat, binary, length) } }
#[inline] pub fn ProgramBufferParametersIivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLint) -> c_void { unsafe { (storage::ProgramBufferParametersIivNV.f)(target, bindingIndex, wordIndex, count, params) } }
#[inline] pub fn ProgramBufferParametersIuivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLuint) -> c_void { unsafe { (storage::ProgramBufferParametersIuivNV.f)(target, bindingIndex, wordIndex, count, params) } }
#[inline] pub fn ProgramBufferParametersfvNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLfloat) -> c_void { unsafe { (storage::ProgramBufferParametersfvNV.f)(target, bindingIndex, wordIndex, count, params) } }
#[inline] pub fn ProgramEnvParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::ProgramEnvParameter4dARB.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramEnvParameter4dvARB(target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { (storage::ProgramEnvParameter4dvARB.f)(target, index, params) } }
#[inline] pub fn ProgramEnvParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::ProgramEnvParameter4fARB.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramEnvParameter4fvARB(target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { (storage::ProgramEnvParameter4fvARB.f)(target, index, params) } }
#[inline] pub fn ProgramEnvParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::ProgramEnvParameterI4iNV.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramEnvParameterI4ivNV(target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { (storage::ProgramEnvParameterI4ivNV.f)(target, index, params) } }
#[inline] pub fn ProgramEnvParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (storage::ProgramEnvParameterI4uiNV.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramEnvParameterI4uivNV(target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { (storage::ProgramEnvParameterI4uivNV.f)(target, index, params) } }
#[inline] pub fn ProgramEnvParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { unsafe { (storage::ProgramEnvParameters4fvEXT.f)(target, index, count, params) } }
#[inline] pub fn ProgramEnvParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { unsafe { (storage::ProgramEnvParametersI4ivNV.f)(target, index, count, params) } }
#[inline] pub fn ProgramEnvParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { unsafe { (storage::ProgramEnvParametersI4uivNV.f)(target, index, count, params) } }
#[inline] pub fn ProgramLocalParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::ProgramLocalParameter4dARB.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramLocalParameter4dvARB(target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { (storage::ProgramLocalParameter4dvARB.f)(target, index, params) } }
#[inline] pub fn ProgramLocalParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::ProgramLocalParameter4fARB.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramLocalParameter4fvARB(target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { (storage::ProgramLocalParameter4fvARB.f)(target, index, params) } }
#[inline] pub fn ProgramLocalParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::ProgramLocalParameterI4iNV.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramLocalParameterI4ivNV(target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { (storage::ProgramLocalParameterI4ivNV.f)(target, index, params) } }
#[inline] pub fn ProgramLocalParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (storage::ProgramLocalParameterI4uiNV.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramLocalParameterI4uivNV(target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { (storage::ProgramLocalParameterI4uivNV.f)(target, index, params) } }
#[inline] pub fn ProgramLocalParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { unsafe { (storage::ProgramLocalParameters4fvEXT.f)(target, index, count, params) } }
#[inline] pub fn ProgramLocalParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { unsafe { (storage::ProgramLocalParametersI4ivNV.f)(target, index, count, params) } }
#[inline] pub fn ProgramLocalParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { unsafe { (storage::ProgramLocalParametersI4uivNV.f)(target, index, count, params) } }
#[inline] pub fn ProgramNamedParameter4dNV(id: GLuint, len: GLsizei, name: *GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::ProgramNamedParameter4dNV.f)(id, len, name, x, y, z, w) } }
#[inline] pub fn ProgramNamedParameter4dvNV(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLdouble) -> c_void { unsafe { (storage::ProgramNamedParameter4dvNV.f)(id, len, name, v) } }
#[inline] pub fn ProgramNamedParameter4fNV(id: GLuint, len: GLsizei, name: *GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::ProgramNamedParameter4fNV.f)(id, len, name, x, y, z, w) } }
#[inline] pub fn ProgramNamedParameter4fvNV(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLfloat) -> c_void { unsafe { (storage::ProgramNamedParameter4fvNV.f)(id, len, name, v) } }
#[inline] pub fn ProgramParameter4dNV(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::ProgramParameter4dNV.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramParameter4dvNV(target: GLenum, index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::ProgramParameter4dvNV.f)(target, index, v) } }
#[inline] pub fn ProgramParameter4fNV(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::ProgramParameter4fNV.f)(target, index, x, y, z, w) } }
#[inline] pub fn ProgramParameter4fvNV(target: GLenum, index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::ProgramParameter4fvNV.f)(target, index, v) } }
#[inline] pub fn ProgramParameteri(program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { (storage::ProgramParameteri.f)(program, pname, value) } }
#[inline] pub fn ProgramParameteriARB(program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { (storage::ProgramParameteriARB.f)(program, pname, value) } }
#[inline] pub fn ProgramParameteriEXT(program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { (storage::ProgramParameteriEXT.f)(program, pname, value) } }
#[inline] pub fn ProgramParameters4dvNV(target: GLenum, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { (storage::ProgramParameters4dvNV.f)(target, index, count, v) } }
#[inline] pub fn ProgramParameters4fvNV(target: GLenum, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { (storage::ProgramParameters4fvNV.f)(target, index, count, v) } }
#[inline] pub fn ProgramStringARB(target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void { unsafe { (storage::ProgramStringARB.f)(target, format, len, string) } }
#[inline] pub fn ProgramSubroutineParametersuivNV(target: GLenum, count: GLsizei, params: *GLuint) -> c_void { unsafe { (storage::ProgramSubroutineParametersuivNV.f)(target, count, params) } }
#[inline] pub fn ProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble) -> c_void { unsafe { (storage::ProgramUniform1d.f)(program, location, v0) } }
#[inline] pub fn ProgramUniform1dEXT(program: GLuint, location: GLint, x: GLdouble) -> c_void { unsafe { (storage::ProgramUniform1dEXT.f)(program, location, x) } }
#[inline] pub fn ProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniform1dv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniform1dvEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat) -> c_void { unsafe { (storage::ProgramUniform1f.f)(program, location, v0) } }
#[inline] pub fn ProgramUniform1fEXT(program: GLuint, location: GLint, v0: GLfloat) -> c_void { unsafe { (storage::ProgramUniform1fEXT.f)(program, location, v0) } }
#[inline] pub fn ProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniform1fv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniform1fvEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1i(program: GLuint, location: GLint, v0: GLint) -> c_void { unsafe { (storage::ProgramUniform1i.f)(program, location, v0) } }
#[inline] pub fn ProgramUniform1i64NV(program: GLuint, location: GLint, x: GLint64EXT) -> c_void { unsafe { (storage::ProgramUniform1i64NV.f)(program, location, x) } }
#[inline] pub fn ProgramUniform1i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { (storage::ProgramUniform1i64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1iEXT(program: GLuint, location: GLint, v0: GLint) -> c_void { unsafe { (storage::ProgramUniform1iEXT.f)(program, location, v0) } }
#[inline] pub fn ProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::ProgramUniform1iv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::ProgramUniform1ivEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint) -> c_void { unsafe { (storage::ProgramUniform1ui.f)(program, location, v0) } }
#[inline] pub fn ProgramUniform1ui64NV(program: GLuint, location: GLint, x: GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniform1ui64NV.f)(program, location, x) } }
#[inline] pub fn ProgramUniform1ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniform1ui64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1uiEXT(program: GLuint, location: GLint, v0: GLuint) -> c_void { unsafe { (storage::ProgramUniform1uiEXT.f)(program, location, v0) } }
#[inline] pub fn ProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::ProgramUniform1uiv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform1uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::ProgramUniform1uivEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> c_void { unsafe { (storage::ProgramUniform2d.f)(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::ProgramUniform2dEXT.f)(program, location, x, y) } }
#[inline] pub fn ProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniform2dv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniform2dvEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { (storage::ProgramUniform2f.f)(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { (storage::ProgramUniform2fEXT.f)(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniform2fv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniform2fvEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { (storage::ProgramUniform2i.f)(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { (storage::ProgramUniform2i64NV.f)(program, location, x, y) } }
#[inline] pub fn ProgramUniform2i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { (storage::ProgramUniform2i64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { (storage::ProgramUniform2iEXT.f)(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::ProgramUniform2iv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::ProgramUniform2ivEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { (storage::ProgramUniform2ui.f)(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniform2ui64NV.f)(program, location, x, y) } }
#[inline] pub fn ProgramUniform2ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniform2ui64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { (storage::ProgramUniform2uiEXT.f)(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::ProgramUniform2uiv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform2uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::ProgramUniform2uivEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> c_void { unsafe { (storage::ProgramUniform3d.f)(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::ProgramUniform3dEXT.f)(program, location, x, y, z) } }
#[inline] pub fn ProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniform3dv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniform3dvEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (storage::ProgramUniform3f.f)(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (storage::ProgramUniform3fEXT.f)(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniform3fv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniform3fvEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { (storage::ProgramUniform3i.f)(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { (storage::ProgramUniform3i64NV.f)(program, location, x, y, z) } }
#[inline] pub fn ProgramUniform3i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { (storage::ProgramUniform3i64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { (storage::ProgramUniform3iEXT.f)(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::ProgramUniform3iv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::ProgramUniform3ivEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { (storage::ProgramUniform3ui.f)(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniform3ui64NV.f)(program, location, x, y, z) } }
#[inline] pub fn ProgramUniform3ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniform3ui64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { (storage::ProgramUniform3uiEXT.f)(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::ProgramUniform3uiv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform3uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::ProgramUniform3uivEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> c_void { unsafe { (storage::ProgramUniform4d.f)(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::ProgramUniform4dEXT.f)(program, location, x, y, z, w) } }
#[inline] pub fn ProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniform4dv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniform4dvEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { (storage::ProgramUniform4f.f)(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { (storage::ProgramUniform4fEXT.f)(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniform4fv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniform4fvEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { (storage::ProgramUniform4i.f)(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { (storage::ProgramUniform4i64NV.f)(program, location, x, y, z, w) } }
#[inline] pub fn ProgramUniform4i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { (storage::ProgramUniform4i64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { (storage::ProgramUniform4iEXT.f)(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::ProgramUniform4iv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::ProgramUniform4ivEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { (storage::ProgramUniform4ui.f)(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniform4ui64NV.f)(program, location, x, y, z, w) } }
#[inline] pub fn ProgramUniform4ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniform4ui64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { (storage::ProgramUniform4uiEXT.f)(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::ProgramUniform4uiv.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniform4uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::ProgramUniform4uivEXT.f)(program, location, count, value) } }
#[inline] pub fn ProgramUniformHandleui64ARB(program: GLuint, location: GLint, value: GLuint64) -> c_void { unsafe { (storage::ProgramUniformHandleui64ARB.f)(program, location, value) } }
#[inline] pub fn ProgramUniformHandleui64NV(program: GLuint, location: GLint, value: GLuint64) -> c_void { unsafe { (storage::ProgramUniformHandleui64NV.f)(program, location, value) } }
#[inline] pub fn ProgramUniformHandleui64vARB(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void { unsafe { (storage::ProgramUniformHandleui64vARB.f)(program, location, count, values) } }
#[inline] pub fn ProgramUniformHandleui64vNV(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void { unsafe { (storage::ProgramUniformHandleui64vNV.f)(program, location, count, values) } }
#[inline] pub fn ProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix2dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix2dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix2fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix2fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix2x3dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix2x3dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix2x3fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix2x3fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix2x4dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix2x4dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix2x4fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix2x4fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix3dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix3dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix3fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix3fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix3x2dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix3x2dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix3x2fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix3x2fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix3x4dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix3x4dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix3x4fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix3x4fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix4dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix4dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix4fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix4fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix4x2dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix4x2dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix4x2fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix4x2fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix4x3dv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::ProgramUniformMatrix4x3dvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix4x3fv.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::ProgramUniformMatrix4x3fvEXT.f)(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformui64NV(program: GLuint, location: GLint, value: GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniformui64NV.f)(program, location, value) } }
#[inline] pub fn ProgramUniformui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::ProgramUniformui64vNV.f)(program, location, count, value) } }
#[inline] pub fn ProgramVertexLimitNV(target: GLenum, limit: GLint) -> c_void { unsafe { (storage::ProgramVertexLimitNV.f)(target, limit) } }
#[inline] pub fn ProvokingVertex(mode: GLenum) -> c_void { unsafe { (storage::ProvokingVertex.f)(mode) } }
#[inline] pub fn ProvokingVertexEXT(mode: GLenum) -> c_void { unsafe { (storage::ProvokingVertexEXT.f)(mode) } }
#[inline] pub fn PushAttrib(mask: GLbitfield) -> c_void { unsafe { (storage::PushAttrib.f)(mask) } }
#[inline] pub fn PushClientAttrib(mask: GLbitfield) -> c_void { unsafe { (storage::PushClientAttrib.f)(mask) } }
#[inline] pub fn PushClientAttribDefaultEXT(mask: GLbitfield) -> c_void { unsafe { (storage::PushClientAttribDefaultEXT.f)(mask) } }
#[inline] pub fn PushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void { unsafe { (storage::PushDebugGroup.f)(source, id, length, message) } }
#[inline] pub fn PushDebugGroupKHR(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void { unsafe { (storage::PushDebugGroupKHR.f)(source, id, length, message) } }
#[inline] pub fn PushGroupMarkerEXT(length: GLsizei, marker: *GLchar) -> c_void { unsafe { (storage::PushGroupMarkerEXT.f)(length, marker) } }
#[inline] pub unsafe fn PushMatrix() -> c_void { (storage::PushMatrix.f)() }
#[inline] pub fn PushName(name: GLuint) -> c_void { unsafe { (storage::PushName.f)(name) } }
#[inline] pub fn QueryCounter(id: GLuint, target: GLenum) -> c_void { unsafe { (storage::QueryCounter.f)(id, target) } }
#[inline] pub fn QueryCounterEXT(id: GLuint, target: GLenum) -> c_void { unsafe { (storage::QueryCounterEXT.f)(id, target) } }
#[inline] pub unsafe fn QueryMatrixxOES(mantissa: *GLfixed, exponent: *GLint) -> GLbitfield { (storage::QueryMatrixxOES.f)(mantissa, exponent) }
#[inline] pub fn RasterPos2d(x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::RasterPos2d.f)(x, y) } }
#[inline] pub unsafe fn RasterPos2dv(v: *GLdouble) -> c_void { (storage::RasterPos2dv.f)(v) }
#[inline] pub fn RasterPos2f(x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::RasterPos2f.f)(x, y) } }
#[inline] pub unsafe fn RasterPos2fv(v: *GLfloat) -> c_void { (storage::RasterPos2fv.f)(v) }
#[inline] pub fn RasterPos2i(x: GLint, y: GLint) -> c_void { unsafe { (storage::RasterPos2i.f)(x, y) } }
#[inline] pub unsafe fn RasterPos2iv(v: *GLint) -> c_void { (storage::RasterPos2iv.f)(v) }
#[inline] pub fn RasterPos2s(x: GLshort, y: GLshort) -> c_void { unsafe { (storage::RasterPos2s.f)(x, y) } }
#[inline] pub unsafe fn RasterPos2sv(v: *GLshort) -> c_void { (storage::RasterPos2sv.f)(v) }
#[inline] pub fn RasterPos2xOES(x: GLfixed, y: GLfixed) -> c_void { unsafe { (storage::RasterPos2xOES.f)(x, y) } }
#[inline] pub unsafe fn RasterPos2xvOES(coords: *GLfixed) -> c_void { (storage::RasterPos2xvOES.f)(coords) }
#[inline] pub fn RasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::RasterPos3d.f)(x, y, z) } }
#[inline] pub unsafe fn RasterPos3dv(v: *GLdouble) -> c_void { (storage::RasterPos3dv.f)(v) }
#[inline] pub fn RasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::RasterPos3f.f)(x, y, z) } }
#[inline] pub unsafe fn RasterPos3fv(v: *GLfloat) -> c_void { (storage::RasterPos3fv.f)(v) }
#[inline] pub fn RasterPos3i(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (storage::RasterPos3i.f)(x, y, z) } }
#[inline] pub unsafe fn RasterPos3iv(v: *GLint) -> c_void { (storage::RasterPos3iv.f)(v) }
#[inline] pub fn RasterPos3s(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::RasterPos3s.f)(x, y, z) } }
#[inline] pub unsafe fn RasterPos3sv(v: *GLshort) -> c_void { (storage::RasterPos3sv.f)(v) }
#[inline] pub fn RasterPos3xOES(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (storage::RasterPos3xOES.f)(x, y, z) } }
#[inline] pub unsafe fn RasterPos3xvOES(coords: *GLfixed) -> c_void { (storage::RasterPos3xvOES.f)(coords) }
#[inline] pub fn RasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::RasterPos4d.f)(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4dv(v: *GLdouble) -> c_void { (storage::RasterPos4dv.f)(v) }
#[inline] pub fn RasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::RasterPos4f.f)(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4fv(v: *GLfloat) -> c_void { (storage::RasterPos4fv.f)(v) }
#[inline] pub fn RasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::RasterPos4i.f)(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4iv(v: *GLint) -> c_void { (storage::RasterPos4iv.f)(v) }
#[inline] pub fn RasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (storage::RasterPos4s.f)(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4sv(v: *GLshort) -> c_void { (storage::RasterPos4sv.f)(v) }
#[inline] pub fn RasterPos4xOES(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) -> c_void { unsafe { (storage::RasterPos4xOES.f)(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4xvOES(coords: *GLfixed) -> c_void { (storage::RasterPos4xvOES.f)(coords) }
#[inline] pub fn ReadBuffer(mode: GLenum) -> c_void { unsafe { (storage::ReadBuffer.f)(mode) } }
#[inline] pub fn ReadBufferIndexedEXT(src: GLenum, index: GLint) -> c_void { unsafe { (storage::ReadBufferIndexedEXT.f)(src, index) } }
#[inline] pub fn ReadBufferNV(mode: GLenum) -> c_void { unsafe { (storage::ReadBufferNV.f)(mode) } }
#[inline] pub fn ReadInstrumentsSGIX(marker: GLint) -> c_void { unsafe { (storage::ReadInstrumentsSGIX.f)(marker) } }
#[inline] pub fn ReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::ReadPixels.f)(x, y, width, height, format, type_, pixels) } }
#[inline] pub fn ReadnPixelsARB(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::ReadnPixelsARB.f)(x, y, width, height, format, type_, bufSize, data) } }
#[inline] pub fn ReadnPixelsEXT(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void { unsafe { (storage::ReadnPixelsEXT.f)(x, y, width, height, format, type_, bufSize, data) } }
#[inline] pub fn Rectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> c_void { unsafe { (storage::Rectd.f)(x1, y1, x2, y2) } }
#[inline] pub unsafe fn Rectdv(v1: *GLdouble, v2: *GLdouble) -> c_void { (storage::Rectdv.f)(v1, v2) }
#[inline] pub fn Rectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> c_void { unsafe { (storage::Rectf.f)(x1, y1, x2, y2) } }
#[inline] pub unsafe fn Rectfv(v1: *GLfloat, v2: *GLfloat) -> c_void { (storage::Rectfv.f)(v1, v2) }
#[inline] pub fn Recti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> c_void { unsafe { (storage::Recti.f)(x1, y1, x2, y2) } }
#[inline] pub unsafe fn Rectiv(v1: *GLint, v2: *GLint) -> c_void { (storage::Rectiv.f)(v1, v2) }
#[inline] pub fn Rects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> c_void { unsafe { (storage::Rects.f)(x1, y1, x2, y2) } }
#[inline] pub unsafe fn Rectsv(v1: *GLshort, v2: *GLshort) -> c_void { (storage::Rectsv.f)(v1, v2) }
#[inline] pub fn RectxOES(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) -> c_void { unsafe { (storage::RectxOES.f)(x1, y1, x2, y2) } }
#[inline] pub unsafe fn RectxvOES(v1: *GLfixed, v2: *GLfixed) -> c_void { (storage::RectxvOES.f)(v1, v2) }
#[inline] pub unsafe fn ReferencePlaneSGIX(equation: *GLdouble) -> c_void { (storage::ReferencePlaneSGIX.f)(equation) }
#[inline] pub unsafe fn ReleaseShaderCompiler() -> c_void { (storage::ReleaseShaderCompiler.f)() }
#[inline] pub fn RenderMode(mode: GLenum) -> GLint { unsafe { (storage::RenderMode.f)(mode) } }
#[inline] pub fn RenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorage.f)(target, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageEXT.f)(target, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageMultisample.f)(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleANGLE(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageMultisampleANGLE.f)(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleAPPLE(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageMultisampleAPPLE.f)(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageMultisampleCoverageNV.f)(target, coverageSamples, colorSamples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleEXT(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageMultisampleEXT.f)(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleIMG(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageMultisampleIMG.f)(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleNV(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageMultisampleNV.f)(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageOES(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::RenderbufferStorageOES.f)(target, internalformat, width, height) } }
#[inline] pub fn ReplacementCodePointerSUN(type_: GLenum, stride: GLsizei, pointer: **GLvoid) -> c_void { unsafe { (storage::ReplacementCodePointerSUN.f)(type_, stride, pointer) } }
#[inline] pub fn ReplacementCodeubSUN(code: GLubyte) -> c_void { unsafe { (storage::ReplacementCodeubSUN.f)(code) } }
#[inline] pub unsafe fn ReplacementCodeubvSUN(code: *GLubyte) -> c_void { (storage::ReplacementCodeubvSUN.f)(code) }
#[inline] pub fn ReplacementCodeuiColor3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::ReplacementCodeuiColor3fVertex3fSUN.f)(rc, r, g, b, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiColor3fVertex3fvSUN(rc: *GLuint, c: *GLfloat, v: *GLfloat) -> c_void { (storage::ReplacementCodeuiColor3fVertex3fvSUN.f)(rc, c, v) }
#[inline] pub fn ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN.f)(rc, r, g, b, a, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc: *GLuint, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN.f)(rc, c, n, v) }
#[inline] pub fn ReplacementCodeuiColor4ubVertex3fSUN(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::ReplacementCodeuiColor4ubVertex3fSUN.f)(rc, r, g, b, a, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiColor4ubVertex3fvSUN(rc: *GLuint, c: *GLubyte, v: *GLfloat) -> c_void { (storage::ReplacementCodeuiColor4ubVertex3fvSUN.f)(rc, c, v) }
#[inline] pub fn ReplacementCodeuiNormal3fVertex3fSUN(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::ReplacementCodeuiNormal3fVertex3fSUN.f)(rc, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiNormal3fVertex3fvSUN(rc: *GLuint, n: *GLfloat, v: *GLfloat) -> c_void { (storage::ReplacementCodeuiNormal3fVertex3fvSUN.f)(rc, n, v) }
#[inline] pub fn ReplacementCodeuiSUN(code: GLuint) -> c_void { unsafe { (storage::ReplacementCodeuiSUN.f)(code) } }
#[inline] pub fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.f)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc: *GLuint, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.f)(rc, tc, c, n, v) }
#[inline] pub fn ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.f)(rc, s, t, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc: *GLuint, tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.f)(rc, tc, n, v) }
#[inline] pub fn ReplacementCodeuiTexCoord2fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::ReplacementCodeuiTexCoord2fVertex3fSUN.f)(rc, s, t, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiTexCoord2fVertex3fvSUN(rc: *GLuint, tc: *GLfloat, v: *GLfloat) -> c_void { (storage::ReplacementCodeuiTexCoord2fVertex3fvSUN.f)(rc, tc, v) }
#[inline] pub fn ReplacementCodeuiVertex3fSUN(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::ReplacementCodeuiVertex3fSUN.f)(rc, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiVertex3fvSUN(rc: *GLuint, v: *GLfloat) -> c_void { (storage::ReplacementCodeuiVertex3fvSUN.f)(rc, v) }
#[inline] pub unsafe fn ReplacementCodeuivSUN(code: *GLuint) -> c_void { (storage::ReplacementCodeuivSUN.f)(code) }
#[inline] pub fn ReplacementCodeusSUN(code: GLushort) -> c_void { unsafe { (storage::ReplacementCodeusSUN.f)(code) } }
#[inline] pub unsafe fn ReplacementCodeusvSUN(code: *GLushort) -> c_void { (storage::ReplacementCodeusvSUN.f)(code) }
#[inline] pub fn RequestResidentProgramsNV(n: GLsizei, programs: *GLuint) -> c_void { unsafe { (storage::RequestResidentProgramsNV.f)(n, programs) } }
#[inline] pub fn ResetHistogram(target: GLenum) -> c_void { unsafe { (storage::ResetHistogram.f)(target) } }
#[inline] pub fn ResetHistogramEXT(target: GLenum) -> c_void { unsafe { (storage::ResetHistogramEXT.f)(target) } }
#[inline] pub fn ResetMinmax(target: GLenum) -> c_void { unsafe { (storage::ResetMinmax.f)(target) } }
#[inline] pub fn ResetMinmaxEXT(target: GLenum) -> c_void { unsafe { (storage::ResetMinmaxEXT.f)(target) } }
#[inline] pub unsafe fn ResizeBuffersMESA() -> c_void { (storage::ResizeBuffersMESA.f)() }
#[inline] pub unsafe fn ResolveMultisampleFramebufferAPPLE() -> c_void { (storage::ResolveMultisampleFramebufferAPPLE.f)() }
#[inline] pub unsafe fn ResumeTransformFeedback() -> c_void { (storage::ResumeTransformFeedback.f)() }
#[inline] pub unsafe fn ResumeTransformFeedbackNV() -> c_void { (storage::ResumeTransformFeedbackNV.f)() }
#[inline] pub fn Rotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::Rotated.f)(angle, x, y, z) } }
#[inline] pub fn Rotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::Rotatef.f)(angle, x, y, z) } }
#[inline] pub fn Rotatex(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (storage::Rotatex.f)(angle, x, y, z) } }
#[inline] pub fn RotatexOES(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (storage::RotatexOES.f)(angle, x, y, z) } }
#[inline] pub fn SampleCoverage(value: GLfloat, invert: GLboolean) -> c_void { unsafe { (storage::SampleCoverage.f)(value, invert) } }
#[inline] pub fn SampleCoverageARB(value: GLfloat, invert: GLboolean) -> c_void { unsafe { (storage::SampleCoverageARB.f)(value, invert) } }
#[inline] pub fn SampleCoverageOES(value: GLfixed, invert: GLboolean) -> c_void { unsafe { (storage::SampleCoverageOES.f)(value, invert) } }
#[inline] pub fn SampleCoveragex(value: GLclampx, invert: GLboolean) -> c_void { unsafe { (storage::SampleCoveragex.f)(value, invert) } }
#[inline] pub fn SampleCoveragexOES(value: GLclampx, invert: GLboolean) -> c_void { unsafe { (storage::SampleCoveragexOES.f)(value, invert) } }
#[inline] pub fn SampleMapATI(dst: GLuint, interp: GLuint, swizzle: GLenum) -> c_void { unsafe { (storage::SampleMapATI.f)(dst, interp, swizzle) } }
#[inline] pub fn SampleMaskEXT(value: GLclampf, invert: GLboolean) -> c_void { unsafe { (storage::SampleMaskEXT.f)(value, invert) } }
#[inline] pub fn SampleMaskIndexedNV(index: GLuint, mask: GLbitfield) -> c_void { unsafe { (storage::SampleMaskIndexedNV.f)(index, mask) } }
#[inline] pub fn SampleMaskSGIS(value: GLclampf, invert: GLboolean) -> c_void { unsafe { (storage::SampleMaskSGIS.f)(value, invert) } }
#[inline] pub fn SampleMaski(index: GLuint, mask: GLbitfield) -> c_void { unsafe { (storage::SampleMaski.f)(index, mask) } }
#[inline] pub fn SamplePatternEXT(pattern: GLenum) -> c_void { unsafe { (storage::SamplePatternEXT.f)(pattern) } }
#[inline] pub fn SamplePatternSGIS(pattern: GLenum) -> c_void { unsafe { (storage::SamplePatternSGIS.f)(pattern) } }
#[inline] pub fn SamplerParameterIiv(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void { unsafe { (storage::SamplerParameterIiv.f)(sampler, pname, param) } }
#[inline] pub fn SamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: *GLuint) -> c_void { unsafe { (storage::SamplerParameterIuiv.f)(sampler, pname, param) } }
#[inline] pub fn SamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::SamplerParameterf.f)(sampler, pname, param) } }
#[inline] pub fn SamplerParameterfv(sampler: GLuint, pname: GLenum, param: *GLfloat) -> c_void { unsafe { (storage::SamplerParameterfv.f)(sampler, pname, param) } }
#[inline] pub fn SamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::SamplerParameteri.f)(sampler, pname, param) } }
#[inline] pub fn SamplerParameteriv(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void { unsafe { (storage::SamplerParameteriv.f)(sampler, pname, param) } }
#[inline] pub fn Scaled(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::Scaled.f)(x, y, z) } }
#[inline] pub fn Scalef(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::Scalef.f)(x, y, z) } }
#[inline] pub fn Scalex(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (storage::Scalex.f)(x, y, z) } }
#[inline] pub fn ScalexOES(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (storage::ScalexOES.f)(x, y, z) } }
#[inline] pub fn Scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::Scissor.f)(x, y, width, height) } }
#[inline] pub fn ScissorArrayv(first: GLuint, count: GLsizei, v: *GLint) -> c_void { unsafe { (storage::ScissorArrayv.f)(first, count, v) } }
#[inline] pub fn ScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::ScissorIndexed.f)(index, left, bottom, width, height) } }
#[inline] pub fn ScissorIndexedv(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::ScissorIndexedv.f)(index, v) } }
#[inline] pub fn SecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { (storage::SecondaryColor3b.f)(red, green, blue) } }
#[inline] pub fn SecondaryColor3bEXT(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { (storage::SecondaryColor3bEXT.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3bv(v: *GLbyte) -> c_void { (storage::SecondaryColor3bv.f)(v) }
#[inline] pub unsafe fn SecondaryColor3bvEXT(v: *GLbyte) -> c_void { (storage::SecondaryColor3bvEXT.f)(v) }
#[inline] pub fn SecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { (storage::SecondaryColor3d.f)(red, green, blue) } }
#[inline] pub fn SecondaryColor3dEXT(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { (storage::SecondaryColor3dEXT.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3dv(v: *GLdouble) -> c_void { (storage::SecondaryColor3dv.f)(v) }
#[inline] pub unsafe fn SecondaryColor3dvEXT(v: *GLdouble) -> c_void { (storage::SecondaryColor3dvEXT.f)(v) }
#[inline] pub fn SecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { (storage::SecondaryColor3f.f)(red, green, blue) } }
#[inline] pub fn SecondaryColor3fEXT(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { (storage::SecondaryColor3fEXT.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3fv(v: *GLfloat) -> c_void { (storage::SecondaryColor3fv.f)(v) }
#[inline] pub unsafe fn SecondaryColor3fvEXT(v: *GLfloat) -> c_void { (storage::SecondaryColor3fvEXT.f)(v) }
#[inline] pub fn SecondaryColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void { unsafe { (storage::SecondaryColor3hNV.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3hvNV(v: *GLhalfNV) -> c_void { (storage::SecondaryColor3hvNV.f)(v) }
#[inline] pub fn SecondaryColor3i(red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { (storage::SecondaryColor3i.f)(red, green, blue) } }
#[inline] pub fn SecondaryColor3iEXT(red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { (storage::SecondaryColor3iEXT.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3iv(v: *GLint) -> c_void { (storage::SecondaryColor3iv.f)(v) }
#[inline] pub unsafe fn SecondaryColor3ivEXT(v: *GLint) -> c_void { (storage::SecondaryColor3ivEXT.f)(v) }
#[inline] pub fn SecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { (storage::SecondaryColor3s.f)(red, green, blue) } }
#[inline] pub fn SecondaryColor3sEXT(red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { (storage::SecondaryColor3sEXT.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3sv(v: *GLshort) -> c_void { (storage::SecondaryColor3sv.f)(v) }
#[inline] pub unsafe fn SecondaryColor3svEXT(v: *GLshort) -> c_void { (storage::SecondaryColor3svEXT.f)(v) }
#[inline] pub fn SecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { (storage::SecondaryColor3ub.f)(red, green, blue) } }
#[inline] pub fn SecondaryColor3ubEXT(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { (storage::SecondaryColor3ubEXT.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3ubv(v: *GLubyte) -> c_void { (storage::SecondaryColor3ubv.f)(v) }
#[inline] pub unsafe fn SecondaryColor3ubvEXT(v: *GLubyte) -> c_void { (storage::SecondaryColor3ubvEXT.f)(v) }
#[inline] pub fn SecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { (storage::SecondaryColor3ui.f)(red, green, blue) } }
#[inline] pub fn SecondaryColor3uiEXT(red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { (storage::SecondaryColor3uiEXT.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3uiv(v: *GLuint) -> c_void { (storage::SecondaryColor3uiv.f)(v) }
#[inline] pub unsafe fn SecondaryColor3uivEXT(v: *GLuint) -> c_void { (storage::SecondaryColor3uivEXT.f)(v) }
#[inline] pub fn SecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { (storage::SecondaryColor3us.f)(red, green, blue) } }
#[inline] pub fn SecondaryColor3usEXT(red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { (storage::SecondaryColor3usEXT.f)(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3usv(v: *GLushort) -> c_void { (storage::SecondaryColor3usv.f)(v) }
#[inline] pub unsafe fn SecondaryColor3usvEXT(v: *GLushort) -> c_void { (storage::SecondaryColor3usvEXT.f)(v) }
#[inline] pub fn SecondaryColorFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::SecondaryColorFormatNV.f)(size, type_, stride) } }
#[inline] pub fn SecondaryColorP3ui(type_: GLenum, color: GLuint) -> c_void { unsafe { (storage::SecondaryColorP3ui.f)(type_, color) } }
#[inline] pub fn SecondaryColorP3uiv(type_: GLenum, color: *GLuint) -> c_void { unsafe { (storage::SecondaryColorP3uiv.f)(type_, color) } }
#[inline] pub fn SecondaryColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::SecondaryColorPointer.f)(size, type_, stride, pointer) } }
#[inline] pub fn SecondaryColorPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::SecondaryColorPointerEXT.f)(size, type_, stride, pointer) } }
#[inline] pub fn SecondaryColorPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { (storage::SecondaryColorPointerListIBM.f)(size, type_, stride, pointer, ptrstride) } }
#[inline] pub fn SelectBuffer(size: GLsizei, buffer: *GLuint) -> c_void { unsafe { (storage::SelectBuffer.f)(size, buffer) } }
#[inline] pub fn SelectPerfMonitorCountersAMD(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) -> c_void { unsafe { (storage::SelectPerfMonitorCountersAMD.f)(monitor, enable, group, numCounters, counterList) } }
#[inline] pub fn SeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void { unsafe { (storage::SeparableFilter2D.f)(target, internalformat, width, height, format, type_, row, column) } }
#[inline] pub fn SeparableFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void { unsafe { (storage::SeparableFilter2DEXT.f)(target, internalformat, width, height, format, type_, row, column) } }
#[inline] pub fn SetFenceAPPLE(fence: GLuint) -> c_void { unsafe { (storage::SetFenceAPPLE.f)(fence) } }
#[inline] pub fn SetFenceNV(fence: GLuint, condition: GLenum) -> c_void { unsafe { (storage::SetFenceNV.f)(fence, condition) } }
#[inline] pub fn SetFragmentShaderConstantATI(dst: GLuint, value: *GLfloat) -> c_void { unsafe { (storage::SetFragmentShaderConstantATI.f)(dst, value) } }
#[inline] pub fn SetInvariantEXT(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void { unsafe { (storage::SetInvariantEXT.f)(id, type_, addr) } }
#[inline] pub fn SetLocalConstantEXT(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void { unsafe { (storage::SetLocalConstantEXT.f)(id, type_, addr) } }
#[inline] pub fn SetMultisamplefvAMD(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { unsafe { (storage::SetMultisamplefvAMD.f)(pname, index, val) } }
#[inline] pub fn ShadeModel(mode: GLenum) -> c_void { unsafe { (storage::ShadeModel.f)(mode) } }
#[inline] pub fn ShaderBinary(count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void { unsafe { (storage::ShaderBinary.f)(count, shaders, binaryformat, binary, length) } }
#[inline] pub fn ShaderOp1EXT(op: GLenum, res: GLuint, arg1: GLuint) -> c_void { unsafe { (storage::ShaderOp1EXT.f)(op, res, arg1) } }
#[inline] pub fn ShaderOp2EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) -> c_void { unsafe { (storage::ShaderOp2EXT.f)(op, res, arg1, arg2) } }
#[inline] pub fn ShaderOp3EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) -> c_void { unsafe { (storage::ShaderOp3EXT.f)(op, res, arg1, arg2, arg3) } }
#[inline] pub fn ShaderSource(shader: GLuint, count: GLsizei, string: **GLchar, length: *GLint) -> c_void { unsafe { (storage::ShaderSource.f)(shader, count, string, length) } }
#[inline] pub fn ShaderSourceARB(shaderObj: GLhandleARB, count: GLsizei, string: **GLcharARB, length: *GLint) -> c_void { unsafe { (storage::ShaderSourceARB.f)(shaderObj, count, string, length) } }
#[inline] pub fn ShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> c_void { unsafe { (storage::ShaderStorageBlockBinding.f)(program, storageBlockIndex, storageBlockBinding) } }
#[inline] pub fn SharpenTexFuncSGIS(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void { unsafe { (storage::SharpenTexFuncSGIS.f)(target, n, points) } }
#[inline] pub fn SpriteParameterfSGIX(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::SpriteParameterfSGIX.f)(pname, param) } }
#[inline] pub fn SpriteParameterfvSGIX(pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::SpriteParameterfvSGIX.f)(pname, params) } }
#[inline] pub fn SpriteParameteriSGIX(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::SpriteParameteriSGIX.f)(pname, param) } }
#[inline] pub fn SpriteParameterivSGIX(pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::SpriteParameterivSGIX.f)(pname, params) } }
#[inline] pub unsafe fn StartInstrumentsSGIX() -> c_void { (storage::StartInstrumentsSGIX.f)() }
#[inline] pub fn StartTilingQCOM(x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) -> c_void { unsafe { (storage::StartTilingQCOM.f)(x, y, width, height, preserveMask) } }
#[inline] pub fn StencilClearTagEXT(stencilTagBits: GLsizei, stencilClearTag: GLuint) -> c_void { unsafe { (storage::StencilClearTagEXT.f)(stencilTagBits, stencilClearTag) } }
#[inline] pub fn StencilFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { (storage::StencilFillPathInstancedNV.f)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) } }
#[inline] pub fn StencilFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint) -> c_void { unsafe { (storage::StencilFillPathNV.f)(path, fillMode, mask) } }
#[inline] pub fn StencilFunc(func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { (storage::StencilFunc.f)(func, ref_, mask) } }
#[inline] pub fn StencilFuncSeparate(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { (storage::StencilFuncSeparate.f)(face, func, ref_, mask) } }
#[inline] pub fn StencilFuncSeparateATI(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { (storage::StencilFuncSeparateATI.f)(frontfunc, backfunc, ref_, mask) } }
#[inline] pub fn StencilMask(mask: GLuint) -> c_void { unsafe { (storage::StencilMask.f)(mask) } }
#[inline] pub fn StencilMaskSeparate(face: GLenum, mask: GLuint) -> c_void { unsafe { (storage::StencilMaskSeparate.f)(face, mask) } }
#[inline] pub fn StencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) -> c_void { unsafe { (storage::StencilOp.f)(fail, zfail, zpass) } }
#[inline] pub fn StencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void { unsafe { (storage::StencilOpSeparate.f)(face, sfail, dpfail, dppass) } }
#[inline] pub fn StencilOpSeparateATI(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void { unsafe { (storage::StencilOpSeparateATI.f)(face, sfail, dpfail, dppass) } }
#[inline] pub fn StencilOpValueAMD(face: GLenum, value: GLuint) -> c_void { unsafe { (storage::StencilOpValueAMD.f)(face, value) } }
#[inline] pub fn StencilStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { (storage::StencilStrokePathInstancedNV.f)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) } }
#[inline] pub fn StencilStrokePathNV(path: GLuint, reference: GLint, mask: GLuint) -> c_void { unsafe { (storage::StencilStrokePathNV.f)(path, reference, mask) } }
#[inline] pub fn StopInstrumentsSGIX(marker: GLint) -> c_void { unsafe { (storage::StopInstrumentsSGIX.f)(marker) } }
#[inline] pub fn StringMarkerGREMEDY(len: GLsizei, string: *GLvoid) -> c_void { unsafe { (storage::StringMarkerGREMEDY.f)(len, string) } }
#[inline] pub fn SwizzleEXT(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void { unsafe { (storage::SwizzleEXT.f)(res, in_, outX, outY, outZ, outW) } }
#[inline] pub fn SyncTextureINTEL(texture: GLuint) -> c_void { unsafe { (storage::SyncTextureINTEL.f)(texture) } }
#[inline] pub unsafe fn TagSampleBufferSGIX() -> c_void { (storage::TagSampleBufferSGIX.f)() }
#[inline] pub fn Tangent3bEXT(tx: GLbyte, ty: GLbyte, tz: GLbyte) -> c_void { unsafe { (storage::Tangent3bEXT.f)(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3bvEXT(v: *GLbyte) -> c_void { (storage::Tangent3bvEXT.f)(v) }
#[inline] pub fn Tangent3dEXT(tx: GLdouble, ty: GLdouble, tz: GLdouble) -> c_void { unsafe { (storage::Tangent3dEXT.f)(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3dvEXT(v: *GLdouble) -> c_void { (storage::Tangent3dvEXT.f)(v) }
#[inline] pub fn Tangent3fEXT(tx: GLfloat, ty: GLfloat, tz: GLfloat) -> c_void { unsafe { (storage::Tangent3fEXT.f)(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3fvEXT(v: *GLfloat) -> c_void { (storage::Tangent3fvEXT.f)(v) }
#[inline] pub fn Tangent3iEXT(tx: GLint, ty: GLint, tz: GLint) -> c_void { unsafe { (storage::Tangent3iEXT.f)(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3ivEXT(v: *GLint) -> c_void { (storage::Tangent3ivEXT.f)(v) }
#[inline] pub fn Tangent3sEXT(tx: GLshort, ty: GLshort, tz: GLshort) -> c_void { unsafe { (storage::Tangent3sEXT.f)(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3svEXT(v: *GLshort) -> c_void { (storage::Tangent3svEXT.f)(v) }
#[inline] pub fn TangentPointerEXT(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::TangentPointerEXT.f)(type_, stride, pointer) } }
#[inline] pub fn TbufferMask3DFX(mask: GLuint) -> c_void { unsafe { (storage::TbufferMask3DFX.f)(mask) } }
#[inline] pub fn TessellationFactorAMD(factor: GLfloat) -> c_void { unsafe { (storage::TessellationFactorAMD.f)(factor) } }
#[inline] pub fn TessellationModeAMD(mode: GLenum) -> c_void { unsafe { (storage::TessellationModeAMD.f)(mode) } }
#[inline] pub fn TestFenceAPPLE(fence: GLuint) -> GLboolean { unsafe { (storage::TestFenceAPPLE.f)(fence) } }
#[inline] pub fn TestFenceNV(fence: GLuint) -> GLboolean { unsafe { (storage::TestFenceNV.f)(fence) } }
#[inline] pub fn TestObjectAPPLE(object: GLenum, name: GLuint) -> GLboolean { unsafe { (storage::TestObjectAPPLE.f)(object, name) } }
#[inline] pub fn TexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (storage::TexBuffer.f)(target, internalformat, buffer) } }
#[inline] pub fn TexBufferARB(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (storage::TexBufferARB.f)(target, internalformat, buffer) } }
#[inline] pub fn TexBufferEXT(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (storage::TexBufferEXT.f)(target, internalformat, buffer) } }
#[inline] pub fn TexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (storage::TexBufferRange.f)(target, internalformat, buffer, offset, size) } }
#[inline] pub fn TexBumpParameterfvATI(pname: GLenum, param: *GLfloat) -> c_void { unsafe { (storage::TexBumpParameterfvATI.f)(pname, param) } }
#[inline] pub fn TexBumpParameterivATI(pname: GLenum, param: *GLint) -> c_void { unsafe { (storage::TexBumpParameterivATI.f)(pname, param) } }
#[inline] pub fn TexCoord1bOES(s: GLbyte) -> c_void { unsafe { (storage::TexCoord1bOES.f)(s) } }
#[inline] pub unsafe fn TexCoord1bvOES(coords: *GLbyte) -> c_void { (storage::TexCoord1bvOES.f)(coords) }
#[inline] pub fn TexCoord1d(s: GLdouble) -> c_void { unsafe { (storage::TexCoord1d.f)(s) } }
#[inline] pub unsafe fn TexCoord1dv(v: *GLdouble) -> c_void { (storage::TexCoord1dv.f)(v) }
#[inline] pub fn TexCoord1f(s: GLfloat) -> c_void { unsafe { (storage::TexCoord1f.f)(s) } }
#[inline] pub unsafe fn TexCoord1fv(v: *GLfloat) -> c_void { (storage::TexCoord1fv.f)(v) }
#[inline] pub fn TexCoord1hNV(s: GLhalfNV) -> c_void { unsafe { (storage::TexCoord1hNV.f)(s) } }
#[inline] pub unsafe fn TexCoord1hvNV(v: *GLhalfNV) -> c_void { (storage::TexCoord1hvNV.f)(v) }
#[inline] pub fn TexCoord1i(s: GLint) -> c_void { unsafe { (storage::TexCoord1i.f)(s) } }
#[inline] pub unsafe fn TexCoord1iv(v: *GLint) -> c_void { (storage::TexCoord1iv.f)(v) }
#[inline] pub fn TexCoord1s(s: GLshort) -> c_void { unsafe { (storage::TexCoord1s.f)(s) } }
#[inline] pub unsafe fn TexCoord1sv(v: *GLshort) -> c_void { (storage::TexCoord1sv.f)(v) }
#[inline] pub fn TexCoord1xOES(s: GLfixed) -> c_void { unsafe { (storage::TexCoord1xOES.f)(s) } }
#[inline] pub unsafe fn TexCoord1xvOES(coords: *GLfixed) -> c_void { (storage::TexCoord1xvOES.f)(coords) }
#[inline] pub fn TexCoord2bOES(s: GLbyte, t: GLbyte) -> c_void { unsafe { (storage::TexCoord2bOES.f)(s, t) } }
#[inline] pub unsafe fn TexCoord2bvOES(coords: *GLbyte) -> c_void { (storage::TexCoord2bvOES.f)(coords) }
#[inline] pub fn TexCoord2d(s: GLdouble, t: GLdouble) -> c_void { unsafe { (storage::TexCoord2d.f)(s, t) } }
#[inline] pub unsafe fn TexCoord2dv(v: *GLdouble) -> c_void { (storage::TexCoord2dv.f)(v) }
#[inline] pub fn TexCoord2f(s: GLfloat, t: GLfloat) -> c_void { unsafe { (storage::TexCoord2f.f)(s, t) } }
#[inline] pub fn TexCoord2fColor3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::TexCoord2fColor3fVertex3fSUN.f)(s, t, r, g, b, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fColor3fVertex3fvSUN(tc: *GLfloat, c: *GLfloat, v: *GLfloat) -> c_void { (storage::TexCoord2fColor3fVertex3fvSUN.f)(tc, c, v) }
#[inline] pub fn TexCoord2fColor4fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::TexCoord2fColor4fNormal3fVertex3fSUN.f)(s, t, r, g, b, a, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fColor4fNormal3fVertex3fvSUN(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (storage::TexCoord2fColor4fNormal3fVertex3fvSUN.f)(tc, c, n, v) }
#[inline] pub fn TexCoord2fColor4ubVertex3fSUN(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::TexCoord2fColor4ubVertex3fSUN.f)(s, t, r, g, b, a, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fColor4ubVertex3fvSUN(tc: *GLfloat, c: *GLubyte, v: *GLfloat) -> c_void { (storage::TexCoord2fColor4ubVertex3fvSUN.f)(tc, c, v) }
#[inline] pub fn TexCoord2fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::TexCoord2fNormal3fVertex3fSUN.f)(s, t, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fNormal3fVertex3fvSUN(tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (storage::TexCoord2fNormal3fVertex3fvSUN.f)(tc, n, v) }
#[inline] pub fn TexCoord2fVertex3fSUN(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::TexCoord2fVertex3fSUN.f)(s, t, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fVertex3fvSUN(tc: *GLfloat, v: *GLfloat) -> c_void { (storage::TexCoord2fVertex3fvSUN.f)(tc, v) }
#[inline] pub unsafe fn TexCoord2fv(v: *GLfloat) -> c_void { (storage::TexCoord2fv.f)(v) }
#[inline] pub fn TexCoord2hNV(s: GLhalfNV, t: GLhalfNV) -> c_void { unsafe { (storage::TexCoord2hNV.f)(s, t) } }
#[inline] pub unsafe fn TexCoord2hvNV(v: *GLhalfNV) -> c_void { (storage::TexCoord2hvNV.f)(v) }
#[inline] pub fn TexCoord2i(s: GLint, t: GLint) -> c_void { unsafe { (storage::TexCoord2i.f)(s, t) } }
#[inline] pub unsafe fn TexCoord2iv(v: *GLint) -> c_void { (storage::TexCoord2iv.f)(v) }
#[inline] pub fn TexCoord2s(s: GLshort, t: GLshort) -> c_void { unsafe { (storage::TexCoord2s.f)(s, t) } }
#[inline] pub unsafe fn TexCoord2sv(v: *GLshort) -> c_void { (storage::TexCoord2sv.f)(v) }
#[inline] pub fn TexCoord2xOES(s: GLfixed, t: GLfixed) -> c_void { unsafe { (storage::TexCoord2xOES.f)(s, t) } }
#[inline] pub unsafe fn TexCoord2xvOES(coords: *GLfixed) -> c_void { (storage::TexCoord2xvOES.f)(coords) }
#[inline] pub fn TexCoord3bOES(s: GLbyte, t: GLbyte, r: GLbyte) -> c_void { unsafe { (storage::TexCoord3bOES.f)(s, t, r) } }
#[inline] pub unsafe fn TexCoord3bvOES(coords: *GLbyte) -> c_void { (storage::TexCoord3bvOES.f)(coords) }
#[inline] pub fn TexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { (storage::TexCoord3d.f)(s, t, r) } }
#[inline] pub unsafe fn TexCoord3dv(v: *GLdouble) -> c_void { (storage::TexCoord3dv.f)(v) }
#[inline] pub fn TexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { (storage::TexCoord3f.f)(s, t, r) } }
#[inline] pub unsafe fn TexCoord3fv(v: *GLfloat) -> c_void { (storage::TexCoord3fv.f)(v) }
#[inline] pub fn TexCoord3hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void { unsafe { (storage::TexCoord3hNV.f)(s, t, r) } }
#[inline] pub unsafe fn TexCoord3hvNV(v: *GLhalfNV) -> c_void { (storage::TexCoord3hvNV.f)(v) }
#[inline] pub fn TexCoord3i(s: GLint, t: GLint, r: GLint) -> c_void { unsafe { (storage::TexCoord3i.f)(s, t, r) } }
#[inline] pub unsafe fn TexCoord3iv(v: *GLint) -> c_void { (storage::TexCoord3iv.f)(v) }
#[inline] pub fn TexCoord3s(s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { (storage::TexCoord3s.f)(s, t, r) } }
#[inline] pub unsafe fn TexCoord3sv(v: *GLshort) -> c_void { (storage::TexCoord3sv.f)(v) }
#[inline] pub fn TexCoord3xOES(s: GLfixed, t: GLfixed, r: GLfixed) -> c_void { unsafe { (storage::TexCoord3xOES.f)(s, t, r) } }
#[inline] pub unsafe fn TexCoord3xvOES(coords: *GLfixed) -> c_void { (storage::TexCoord3xvOES.f)(coords) }
#[inline] pub fn TexCoord4bOES(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void { unsafe { (storage::TexCoord4bOES.f)(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4bvOES(coords: *GLbyte) -> c_void { (storage::TexCoord4bvOES.f)(coords) }
#[inline] pub fn TexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { (storage::TexCoord4d.f)(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4dv(v: *GLdouble) -> c_void { (storage::TexCoord4dv.f)(v) }
#[inline] pub fn TexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { (storage::TexCoord4f.f)(s, t, r, q) } }
#[inline] pub fn TexCoord4fColor4fNormal3fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::TexCoord4fColor4fNormal3fVertex4fSUN.f)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) } }
#[inline] pub unsafe fn TexCoord4fColor4fNormal3fVertex4fvSUN(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (storage::TexCoord4fColor4fNormal3fVertex4fvSUN.f)(tc, c, n, v) }
#[inline] pub fn TexCoord4fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::TexCoord4fVertex4fSUN.f)(s, t, p, q, x, y, z, w) } }
#[inline] pub unsafe fn TexCoord4fVertex4fvSUN(tc: *GLfloat, v: *GLfloat) -> c_void { (storage::TexCoord4fVertex4fvSUN.f)(tc, v) }
#[inline] pub unsafe fn TexCoord4fv(v: *GLfloat) -> c_void { (storage::TexCoord4fv.f)(v) }
#[inline] pub fn TexCoord4hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void { unsafe { (storage::TexCoord4hNV.f)(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4hvNV(v: *GLhalfNV) -> c_void { (storage::TexCoord4hvNV.f)(v) }
#[inline] pub fn TexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { (storage::TexCoord4i.f)(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4iv(v: *GLint) -> c_void { (storage::TexCoord4iv.f)(v) }
#[inline] pub fn TexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { (storage::TexCoord4s.f)(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4sv(v: *GLshort) -> c_void { (storage::TexCoord4sv.f)(v) }
#[inline] pub fn TexCoord4xOES(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { (storage::TexCoord4xOES.f)(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4xvOES(coords: *GLfixed) -> c_void { (storage::TexCoord4xvOES.f)(coords) }
#[inline] pub fn TexCoordFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::TexCoordFormatNV.f)(size, type_, stride) } }
#[inline] pub fn TexCoordP1ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::TexCoordP1ui.f)(type_, coords) } }
#[inline] pub fn TexCoordP1uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::TexCoordP1uiv.f)(type_, coords) } }
#[inline] pub fn TexCoordP2ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::TexCoordP2ui.f)(type_, coords) } }
#[inline] pub fn TexCoordP2uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::TexCoordP2uiv.f)(type_, coords) } }
#[inline] pub fn TexCoordP3ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::TexCoordP3ui.f)(type_, coords) } }
#[inline] pub fn TexCoordP3uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::TexCoordP3uiv.f)(type_, coords) } }
#[inline] pub fn TexCoordP4ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { (storage::TexCoordP4ui.f)(type_, coords) } }
#[inline] pub fn TexCoordP4uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { (storage::TexCoordP4uiv.f)(type_, coords) } }
#[inline] pub fn TexCoordPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::TexCoordPointer.f)(size, type_, stride, pointer) } }
#[inline] pub fn TexCoordPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::TexCoordPointerEXT.f)(size, type_, stride, count, pointer) } }
#[inline] pub fn TexCoordPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { (storage::TexCoordPointerListIBM.f)(size, type_, stride, pointer, ptrstride) } }
#[inline] pub fn TexCoordPointervINTEL(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { unsafe { (storage::TexCoordPointervINTEL.f)(size, type_, pointer) } }
#[inline] pub fn TexEnvf(target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::TexEnvf.f)(target, pname, param) } }
#[inline] pub fn TexEnvfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::TexEnvfv.f)(target, pname, params) } }
#[inline] pub fn TexEnvi(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::TexEnvi.f)(target, pname, param) } }
#[inline] pub fn TexEnviv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::TexEnviv.f)(target, pname, params) } }
#[inline] pub fn TexEnvx(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::TexEnvx.f)(target, pname, param) } }
#[inline] pub fn TexEnvxOES(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::TexEnvxOES.f)(target, pname, param) } }
#[inline] pub fn TexEnvxv(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::TexEnvxv.f)(target, pname, params) } }
#[inline] pub fn TexEnvxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::TexEnvxvOES.f)(target, pname, params) } }
#[inline] pub fn TexFilterFuncSGIS(target: GLenum, filter: GLenum, n: GLsizei, weights: *GLfloat) -> c_void { unsafe { (storage::TexFilterFuncSGIS.f)(target, filter, n, weights) } }
#[inline] pub fn TexGend(coord: GLenum, pname: GLenum, param: GLdouble) -> c_void { unsafe { (storage::TexGend.f)(coord, pname, param) } }
#[inline] pub fn TexGendv(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::TexGendv.f)(coord, pname, params) } }
#[inline] pub fn TexGenf(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::TexGenf.f)(coord, pname, param) } }
#[inline] pub fn TexGenfOES(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::TexGenfOES.f)(coord, pname, param) } }
#[inline] pub fn TexGenfv(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::TexGenfv.f)(coord, pname, params) } }
#[inline] pub fn TexGenfvOES(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::TexGenfvOES.f)(coord, pname, params) } }
#[inline] pub fn TexGeni(coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::TexGeni.f)(coord, pname, param) } }
#[inline] pub fn TexGeniOES(coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::TexGeniOES.f)(coord, pname, param) } }
#[inline] pub fn TexGeniv(coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::TexGeniv.f)(coord, pname, params) } }
#[inline] pub fn TexGenivOES(coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::TexGenivOES.f)(coord, pname, params) } }
#[inline] pub fn TexGenxOES(coord: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::TexGenxOES.f)(coord, pname, param) } }
#[inline] pub fn TexGenxvOES(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::TexGenxvOES.f)(coord, pname, params) } }
#[inline] pub fn TexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexImage1D.f)(target, level, internalformat, width, border, format, type_, pixels) } }
#[inline] pub fn TexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexImage2D.f)(target, level, internalformat, width, height, border, format, type_, pixels) } }
#[inline] pub fn TexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (storage::TexImage2DMultisample.f)(target, samples, internalformat, width, height, fixedsamplelocations) } }
#[inline] pub fn TexImage2DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (storage::TexImage2DMultisampleCoverageNV.f)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) } }
#[inline] pub fn TexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexImage3D.f)(target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn TexImage3DEXT(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexImage3DEXT.f)(target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn TexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (storage::TexImage3DMultisample.f)(target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
#[inline] pub fn TexImage3DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (storage::TexImage3DMultisampleCoverageNV.f)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) } }
#[inline] pub fn TexImage3DOES(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexImage3DOES.f)(target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn TexImage4DSGIS(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexImage4DSGIS.f)(target, level, internalformat, width, height, depth, size4d, border, format, type_, pixels) } }
#[inline] pub fn TexPageCommitmentARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void { unsafe { (storage::TexPageCommitmentARB.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, resident) } }
#[inline] pub fn TexParameterIiv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::TexParameterIiv.f)(target, pname, params) } }
#[inline] pub fn TexParameterIivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::TexParameterIivEXT.f)(target, pname, params) } }
#[inline] pub fn TexParameterIuiv(target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::TexParameterIuiv.f)(target, pname, params) } }
#[inline] pub fn TexParameterIuivEXT(target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::TexParameterIuivEXT.f)(target, pname, params) } }
#[inline] pub fn TexParameterf(target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::TexParameterf.f)(target, pname, param) } }
#[inline] pub fn TexParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::TexParameterfv.f)(target, pname, params) } }
#[inline] pub fn TexParameteri(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::TexParameteri.f)(target, pname, param) } }
#[inline] pub fn TexParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::TexParameteriv.f)(target, pname, params) } }
#[inline] pub fn TexParameterx(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::TexParameterx.f)(target, pname, param) } }
#[inline] pub fn TexParameterxOES(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (storage::TexParameterxOES.f)(target, pname, param) } }
#[inline] pub fn TexParameterxv(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::TexParameterxv.f)(target, pname, params) } }
#[inline] pub fn TexParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { (storage::TexParameterxvOES.f)(target, pname, params) } }
#[inline] pub fn TexRenderbufferNV(target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::TexRenderbufferNV.f)(target, renderbuffer) } }
#[inline] pub fn TexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { (storage::TexStorage1D.f)(target, levels, internalformat, width) } }
#[inline] pub fn TexStorage1DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { (storage::TexStorage1DEXT.f)(target, levels, internalformat, width) } }
#[inline] pub fn TexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::TexStorage2D.f)(target, levels, internalformat, width, height) } }
#[inline] pub fn TexStorage2DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::TexStorage2DEXT.f)(target, levels, internalformat, width, height) } }
#[inline] pub fn TexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (storage::TexStorage2DMultisample.f)(target, samples, internalformat, width, height, fixedsamplelocations) } }
#[inline] pub fn TexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (storage::TexStorage3D.f)(target, levels, internalformat, width, height, depth) } }
#[inline] pub fn TexStorage3DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (storage::TexStorage3DEXT.f)(target, levels, internalformat, width, height, depth) } }
#[inline] pub fn TexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (storage::TexStorage3DMultisample.f)(target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
#[inline] pub fn TexStorageSparseAMD(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void { unsafe { (storage::TexStorageSparseAMD.f)(target, internalFormat, width, height, depth, layers, flags) } }
#[inline] pub fn TexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexSubImage1D.f)(target, level, xoffset, width, format, type_, pixels) } }
#[inline] pub fn TexSubImage1DEXT(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexSubImage1DEXT.f)(target, level, xoffset, width, format, type_, pixels) } }
#[inline] pub fn TexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexSubImage2D.f)(target, level, xoffset, yoffset, width, height, format, type_, pixels) } }
#[inline] pub fn TexSubImage2DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexSubImage2DEXT.f)(target, level, xoffset, yoffset, width, height, format, type_, pixels) } }
#[inline] pub fn TexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexSubImage3D.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn TexSubImage3DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexSubImage3DEXT.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn TexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexSubImage3DOES.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn TexSubImage4DSGIS(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TexSubImage4DSGIS.f)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type_, pixels) } }
#[inline] pub unsafe fn TextureBarrierNV() -> c_void { (storage::TextureBarrierNV.f)() }
#[inline] pub fn TextureBufferEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (storage::TextureBufferEXT.f)(texture, target, internalformat, buffer) } }
#[inline] pub fn TextureBufferRangeEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (storage::TextureBufferRangeEXT.f)(texture, target, internalformat, buffer, offset, size) } }
#[inline] pub fn TextureColorMaskSGIS(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void { unsafe { (storage::TextureColorMaskSGIS.f)(red, green, blue, alpha) } }
#[inline] pub fn TextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TextureImage1DEXT.f)(texture, target, level, internalformat, width, border, format, type_, pixels) } }
#[inline] pub fn TextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TextureImage2DEXT.f)(texture, target, level, internalformat, width, height, border, format, type_, pixels) } }
#[inline] pub fn TextureImage2DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (storage::TextureImage2DMultisampleCoverageNV.f)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) } }
#[inline] pub fn TextureImage2DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (storage::TextureImage2DMultisampleNV.f)(texture, target, samples, internalFormat, width, height, fixedSampleLocations) } }
#[inline] pub fn TextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TextureImage3DEXT.f)(texture, target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn TextureImage3DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (storage::TextureImage3DMultisampleCoverageNV.f)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) } }
#[inline] pub fn TextureImage3DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (storage::TextureImage3DMultisampleNV.f)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) } }
#[inline] pub fn TextureLightEXT(pname: GLenum) -> c_void { unsafe { (storage::TextureLightEXT.f)(pname) } }
#[inline] pub fn TextureMaterialEXT(face: GLenum, mode: GLenum) -> c_void { unsafe { (storage::TextureMaterialEXT.f)(face, mode) } }
#[inline] pub fn TextureNormalEXT(mode: GLenum) -> c_void { unsafe { (storage::TextureNormalEXT.f)(mode) } }
#[inline] pub fn TexturePageCommitmentEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void { unsafe { (storage::TexturePageCommitmentEXT.f)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, resident) } }
#[inline] pub fn TextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::TextureParameterIivEXT.f)(texture, target, pname, params) } }
#[inline] pub fn TextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { (storage::TextureParameterIuivEXT.f)(texture, target, pname, params) } }
#[inline] pub fn TextureParameterfEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::TextureParameterfEXT.f)(texture, target, pname, param) } }
#[inline] pub fn TextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::TextureParameterfvEXT.f)(texture, target, pname, params) } }
#[inline] pub fn TextureParameteriEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::TextureParameteriEXT.f)(texture, target, pname, param) } }
#[inline] pub fn TextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::TextureParameterivEXT.f)(texture, target, pname, params) } }
#[inline] pub fn TextureRangeAPPLE(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::TextureRangeAPPLE.f)(target, length, pointer) } }
#[inline] pub fn TextureRenderbufferEXT(texture: GLuint, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (storage::TextureRenderbufferEXT.f)(texture, target, renderbuffer) } }
#[inline] pub fn TextureStorage1DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { (storage::TextureStorage1DEXT.f)(texture, target, levels, internalformat, width) } }
#[inline] pub fn TextureStorage2DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::TextureStorage2DEXT.f)(texture, target, levels, internalformat, width, height) } }
#[inline] pub fn TextureStorage2DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (storage::TextureStorage2DMultisampleEXT.f)(texture, target, samples, internalformat, width, height, fixedsamplelocations) } }
#[inline] pub fn TextureStorage3DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (storage::TextureStorage3DEXT.f)(texture, target, levels, internalformat, width, height, depth) } }
#[inline] pub fn TextureStorage3DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (storage::TextureStorage3DMultisampleEXT.f)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
#[inline] pub fn TextureStorageSparseAMD(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void { unsafe { (storage::TextureStorageSparseAMD.f)(texture, target, internalFormat, width, height, depth, layers, flags) } }
#[inline] pub fn TextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TextureSubImage1DEXT.f)(texture, target, level, xoffset, width, format, type_, pixels) } }
#[inline] pub fn TextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TextureSubImage2DEXT.f)(texture, target, level, xoffset, yoffset, width, height, format, type_, pixels) } }
#[inline] pub fn TextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { (storage::TextureSubImage3DEXT.f)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn TextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> c_void { unsafe { (storage::TextureView.f)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) } }
#[inline] pub fn TrackMatrixNV(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) -> c_void { unsafe { (storage::TrackMatrixNV.f)(target, address, matrix, transform) } }
#[inline] pub fn TransformFeedbackAttribsNV(count: GLuint, attribs: *GLint, bufferMode: GLenum) -> c_void { unsafe { (storage::TransformFeedbackAttribsNV.f)(count, attribs, bufferMode) } }
#[inline] pub fn TransformFeedbackStreamAttribsNV(count: GLsizei, attribs: *GLint, nbuffers: GLsizei, bufstreams: *GLint, bufferMode: GLenum) -> c_void { unsafe { (storage::TransformFeedbackStreamAttribsNV.f)(count, attribs, nbuffers, bufstreams, bufferMode) } }
#[inline] pub fn TransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void { unsafe { (storage::TransformFeedbackVaryings.f)(program, count, varyings, bufferMode) } }
#[inline] pub fn TransformFeedbackVaryingsEXT(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void { unsafe { (storage::TransformFeedbackVaryingsEXT.f)(program, count, varyings, bufferMode) } }
#[inline] pub fn TransformFeedbackVaryingsNV(program: GLuint, count: GLsizei, locations: *GLint, bufferMode: GLenum) -> c_void { unsafe { (storage::TransformFeedbackVaryingsNV.f)(program, count, locations, bufferMode) } }
#[inline] pub fn TransformPathNV(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { (storage::TransformPathNV.f)(resultPath, srcPath, transformType, transformValues) } }
#[inline] pub fn Translated(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::Translated.f)(x, y, z) } }
#[inline] pub fn Translatef(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::Translatef.f)(x, y, z) } }
#[inline] pub fn Translatex(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (storage::Translatex.f)(x, y, z) } }
#[inline] pub fn TranslatexOES(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (storage::TranslatexOES.f)(x, y, z) } }
#[inline] pub fn Uniform1d(location: GLint, x: GLdouble) -> c_void { unsafe { (storage::Uniform1d.f)(location, x) } }
#[inline] pub fn Uniform1dv(location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::Uniform1dv.f)(location, count, value) } }
#[inline] pub fn Uniform1f(location: GLint, v0: GLfloat) -> c_void { unsafe { (storage::Uniform1f.f)(location, v0) } }
#[inline] pub fn Uniform1fARB(location: GLint, v0: GLfloat) -> c_void { unsafe { (storage::Uniform1fARB.f)(location, v0) } }
#[inline] pub fn Uniform1fv(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::Uniform1fv.f)(location, count, value) } }
#[inline] pub fn Uniform1fvARB(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::Uniform1fvARB.f)(location, count, value) } }
#[inline] pub fn Uniform1i(location: GLint, v0: GLint) -> c_void { unsafe { (storage::Uniform1i.f)(location, v0) } }
#[inline] pub fn Uniform1i64NV(location: GLint, x: GLint64EXT) -> c_void { unsafe { (storage::Uniform1i64NV.f)(location, x) } }
#[inline] pub fn Uniform1i64vNV(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { (storage::Uniform1i64vNV.f)(location, count, value) } }
#[inline] pub fn Uniform1iARB(location: GLint, v0: GLint) -> c_void { unsafe { (storage::Uniform1iARB.f)(location, v0) } }
#[inline] pub fn Uniform1iv(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::Uniform1iv.f)(location, count, value) } }
#[inline] pub fn Uniform1ivARB(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::Uniform1ivARB.f)(location, count, value) } }
#[inline] pub fn Uniform1ui(location: GLint, v0: GLuint) -> c_void { unsafe { (storage::Uniform1ui.f)(location, v0) } }
#[inline] pub fn Uniform1ui64NV(location: GLint, x: GLuint64EXT) -> c_void { unsafe { (storage::Uniform1ui64NV.f)(location, x) } }
#[inline] pub fn Uniform1ui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::Uniform1ui64vNV.f)(location, count, value) } }
#[inline] pub fn Uniform1uiEXT(location: GLint, v0: GLuint) -> c_void { unsafe { (storage::Uniform1uiEXT.f)(location, v0) } }
#[inline] pub fn Uniform1uiv(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::Uniform1uiv.f)(location, count, value) } }
#[inline] pub fn Uniform1uivEXT(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::Uniform1uivEXT.f)(location, count, value) } }
#[inline] pub fn Uniform2d(location: GLint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::Uniform2d.f)(location, x, y) } }
#[inline] pub fn Uniform2dv(location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::Uniform2dv.f)(location, count, value) } }
#[inline] pub fn Uniform2f(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { (storage::Uniform2f.f)(location, v0, v1) } }
#[inline] pub fn Uniform2fARB(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { (storage::Uniform2fARB.f)(location, v0, v1) } }
#[inline] pub fn Uniform2fv(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::Uniform2fv.f)(location, count, value) } }
#[inline] pub fn Uniform2fvARB(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::Uniform2fvARB.f)(location, count, value) } }
#[inline] pub fn Uniform2i(location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { (storage::Uniform2i.f)(location, v0, v1) } }
#[inline] pub fn Uniform2i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { (storage::Uniform2i64NV.f)(location, x, y) } }
#[inline] pub fn Uniform2i64vNV(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { (storage::Uniform2i64vNV.f)(location, count, value) } }
#[inline] pub fn Uniform2iARB(location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { (storage::Uniform2iARB.f)(location, v0, v1) } }
#[inline] pub fn Uniform2iv(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::Uniform2iv.f)(location, count, value) } }
#[inline] pub fn Uniform2ivARB(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::Uniform2ivARB.f)(location, count, value) } }
#[inline] pub fn Uniform2ui(location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { (storage::Uniform2ui.f)(location, v0, v1) } }
#[inline] pub fn Uniform2ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { (storage::Uniform2ui64NV.f)(location, x, y) } }
#[inline] pub fn Uniform2ui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::Uniform2ui64vNV.f)(location, count, value) } }
#[inline] pub fn Uniform2uiEXT(location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { (storage::Uniform2uiEXT.f)(location, v0, v1) } }
#[inline] pub fn Uniform2uiv(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::Uniform2uiv.f)(location, count, value) } }
#[inline] pub fn Uniform2uivEXT(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::Uniform2uivEXT.f)(location, count, value) } }
#[inline] pub fn Uniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::Uniform3d.f)(location, x, y, z) } }
#[inline] pub fn Uniform3dv(location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::Uniform3dv.f)(location, count, value) } }
#[inline] pub fn Uniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (storage::Uniform3f.f)(location, v0, v1, v2) } }
#[inline] pub fn Uniform3fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (storage::Uniform3fARB.f)(location, v0, v1, v2) } }
#[inline] pub fn Uniform3fv(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::Uniform3fv.f)(location, count, value) } }
#[inline] pub fn Uniform3fvARB(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::Uniform3fvARB.f)(location, count, value) } }
#[inline] pub fn Uniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { (storage::Uniform3i.f)(location, v0, v1, v2) } }
#[inline] pub fn Uniform3i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { (storage::Uniform3i64NV.f)(location, x, y, z) } }
#[inline] pub fn Uniform3i64vNV(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { (storage::Uniform3i64vNV.f)(location, count, value) } }
#[inline] pub fn Uniform3iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { (storage::Uniform3iARB.f)(location, v0, v1, v2) } }
#[inline] pub fn Uniform3iv(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::Uniform3iv.f)(location, count, value) } }
#[inline] pub fn Uniform3ivARB(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::Uniform3ivARB.f)(location, count, value) } }
#[inline] pub fn Uniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { (storage::Uniform3ui.f)(location, v0, v1, v2) } }
#[inline] pub fn Uniform3ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { (storage::Uniform3ui64NV.f)(location, x, y, z) } }
#[inline] pub fn Uniform3ui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::Uniform3ui64vNV.f)(location, count, value) } }
#[inline] pub fn Uniform3uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { (storage::Uniform3uiEXT.f)(location, v0, v1, v2) } }
#[inline] pub fn Uniform3uiv(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::Uniform3uiv.f)(location, count, value) } }
#[inline] pub fn Uniform3uivEXT(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::Uniform3uivEXT.f)(location, count, value) } }
#[inline] pub fn Uniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::Uniform4d.f)(location, x, y, z, w) } }
#[inline] pub fn Uniform4dv(location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { (storage::Uniform4dv.f)(location, count, value) } }
#[inline] pub fn Uniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { (storage::Uniform4f.f)(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { (storage::Uniform4fARB.f)(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4fv(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::Uniform4fv.f)(location, count, value) } }
#[inline] pub fn Uniform4fvARB(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { (storage::Uniform4fvARB.f)(location, count, value) } }
#[inline] pub fn Uniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { (storage::Uniform4i.f)(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { (storage::Uniform4i64NV.f)(location, x, y, z, w) } }
#[inline] pub fn Uniform4i64vNV(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { (storage::Uniform4i64vNV.f)(location, count, value) } }
#[inline] pub fn Uniform4iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { (storage::Uniform4iARB.f)(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4iv(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::Uniform4iv.f)(location, count, value) } }
#[inline] pub fn Uniform4ivARB(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { (storage::Uniform4ivARB.f)(location, count, value) } }
#[inline] pub fn Uniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { (storage::Uniform4ui.f)(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { (storage::Uniform4ui64NV.f)(location, x, y, z, w) } }
#[inline] pub fn Uniform4ui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::Uniform4ui64vNV.f)(location, count, value) } }
#[inline] pub fn Uniform4uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { (storage::Uniform4uiEXT.f)(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4uiv(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::Uniform4uiv.f)(location, count, value) } }
#[inline] pub fn Uniform4uivEXT(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { (storage::Uniform4uivEXT.f)(location, count, value) } }
#[inline] pub fn UniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> c_void { unsafe { (storage::UniformBlockBinding.f)(program, uniformBlockIndex, uniformBlockBinding) } }
#[inline] pub fn UniformBufferEXT(program: GLuint, location: GLint, buffer: GLuint) -> c_void { unsafe { (storage::UniformBufferEXT.f)(program, location, buffer) } }
#[inline] pub fn UniformHandleui64ARB(location: GLint, value: GLuint64) -> c_void { unsafe { (storage::UniformHandleui64ARB.f)(location, value) } }
#[inline] pub fn UniformHandleui64NV(location: GLint, value: GLuint64) -> c_void { unsafe { (storage::UniformHandleui64NV.f)(location, value) } }
#[inline] pub fn UniformHandleui64vARB(location: GLint, count: GLsizei, value: *GLuint64) -> c_void { unsafe { (storage::UniformHandleui64vARB.f)(location, count, value) } }
#[inline] pub fn UniformHandleui64vNV(location: GLint, count: GLsizei, value: *GLuint64) -> c_void { unsafe { (storage::UniformHandleui64vNV.f)(location, count, value) } }
#[inline] pub fn UniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix2dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix2fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix2fvARB.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix2x3dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix2x3fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix2x4dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix2x4fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix3dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix3fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix3fvARB.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix3x2dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix3x2fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix3x4dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix3x4fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix4dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix4fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix4fvARB.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix4x2dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix4x2fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { (storage::UniformMatrix4x3dv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { (storage::UniformMatrix4x3fv.f)(location, count, transpose, value) } }
#[inline] pub fn UniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: *GLuint) -> c_void { unsafe { (storage::UniformSubroutinesuiv.f)(shadertype, count, indices) } }
#[inline] pub fn Uniformui64NV(location: GLint, value: GLuint64EXT) -> c_void { unsafe { (storage::Uniformui64NV.f)(location, value) } }
#[inline] pub fn Uniformui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { (storage::Uniformui64vNV.f)(location, count, value) } }
#[inline] pub unsafe fn UnlockArraysEXT() -> c_void { (storage::UnlockArraysEXT.f)() }
#[inline] pub fn UnmapBuffer(target: GLenum) -> GLboolean { unsafe { (storage::UnmapBuffer.f)(target) } }
#[inline] pub fn UnmapBufferARB(target: GLenum) -> GLboolean { unsafe { (storage::UnmapBufferARB.f)(target) } }
#[inline] pub fn UnmapBufferOES(target: GLenum) -> GLboolean { unsafe { (storage::UnmapBufferOES.f)(target) } }
#[inline] pub fn UnmapNamedBufferEXT(buffer: GLuint) -> GLboolean { unsafe { (storage::UnmapNamedBufferEXT.f)(buffer) } }
#[inline] pub fn UnmapObjectBufferATI(buffer: GLuint) -> c_void { unsafe { (storage::UnmapObjectBufferATI.f)(buffer) } }
#[inline] pub fn UnmapTexture2DINTEL(texture: GLuint, level: GLint) -> c_void { unsafe { (storage::UnmapTexture2DINTEL.f)(texture, level) } }
#[inline] pub fn UpdateObjectBufferATI(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *GLvoid, preserve: GLenum) -> c_void { unsafe { (storage::UpdateObjectBufferATI.f)(buffer, offset, size, pointer, preserve) } }
#[inline] pub fn UseProgram(program: GLuint) -> c_void { unsafe { (storage::UseProgram.f)(program) } }
#[inline] pub fn UseProgramObjectARB(programObj: GLhandleARB) -> c_void { unsafe { (storage::UseProgramObjectARB.f)(programObj) } }
#[inline] pub fn UseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void { unsafe { (storage::UseProgramStages.f)(pipeline, stages, program) } }
#[inline] pub fn UseProgramStagesEXT(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void { unsafe { (storage::UseProgramStagesEXT.f)(pipeline, stages, program) } }
#[inline] pub fn UseShaderProgramEXT(type_: GLenum, program: GLuint) -> c_void { unsafe { (storage::UseShaderProgramEXT.f)(type_, program) } }
#[inline] pub unsafe fn VDPAUFiniNV() -> c_void { (storage::VDPAUFiniNV.f)() }
#[inline] pub fn VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { unsafe { (storage::VDPAUGetSurfaceivNV.f)(surface, pname, bufSize, length, values) } }
#[inline] pub unsafe fn VDPAUInitNV(vdpDevice: *GLvoid, getProcAddress: *GLvoid) -> c_void { (storage::VDPAUInitNV.f)(vdpDevice, getProcAddress) }
#[inline] pub fn VDPAUIsSurfaceNV(surface: GLvdpauSurfaceNV) -> c_void { unsafe { (storage::VDPAUIsSurfaceNV.f)(surface) } }
#[inline] pub fn VDPAUMapSurfacesNV(numSurfaces: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void { unsafe { (storage::VDPAUMapSurfacesNV.f)(numSurfaces, surfaces) } }
#[inline] pub fn VDPAURegisterOutputSurfaceNV(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV { unsafe { (storage::VDPAURegisterOutputSurfaceNV.f)(vdpSurface, target, numTextureNames, textureNames) } }
#[inline] pub fn VDPAURegisterVideoSurfaceNV(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV { unsafe { (storage::VDPAURegisterVideoSurfaceNV.f)(vdpSurface, target, numTextureNames, textureNames) } }
#[inline] pub fn VDPAUSurfaceAccessNV(surface: GLvdpauSurfaceNV, access: GLenum) -> c_void { unsafe { (storage::VDPAUSurfaceAccessNV.f)(surface, access) } }
#[inline] pub fn VDPAUUnmapSurfacesNV(numSurface: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void { unsafe { (storage::VDPAUUnmapSurfacesNV.f)(numSurface, surfaces) } }
#[inline] pub fn VDPAUUnregisterSurfaceNV(surface: GLvdpauSurfaceNV) -> c_void { unsafe { (storage::VDPAUUnregisterSurfaceNV.f)(surface) } }
#[inline] pub fn ValidateProgram(program: GLuint) -> c_void { unsafe { (storage::ValidateProgram.f)(program) } }
#[inline] pub fn ValidateProgramARB(programObj: GLhandleARB) -> c_void { unsafe { (storage::ValidateProgramARB.f)(programObj) } }
#[inline] pub fn ValidateProgramPipeline(pipeline: GLuint) -> c_void { unsafe { (storage::ValidateProgramPipeline.f)(pipeline) } }
#[inline] pub fn ValidateProgramPipelineEXT(pipeline: GLuint) -> c_void { unsafe { (storage::ValidateProgramPipelineEXT.f)(pipeline) } }
#[inline] pub fn VariantArrayObjectATI(id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { (storage::VariantArrayObjectATI.f)(id, type_, stride, buffer, offset) } }
#[inline] pub fn VariantPointerEXT(id: GLuint, type_: GLenum, stride: GLuint, addr: *GLvoid) -> c_void { unsafe { (storage::VariantPointerEXT.f)(id, type_, stride, addr) } }
#[inline] pub fn VariantbvEXT(id: GLuint, addr: *GLbyte) -> c_void { unsafe { (storage::VariantbvEXT.f)(id, addr) } }
#[inline] pub fn VariantdvEXT(id: GLuint, addr: *GLdouble) -> c_void { unsafe { (storage::VariantdvEXT.f)(id, addr) } }
#[inline] pub fn VariantfvEXT(id: GLuint, addr: *GLfloat) -> c_void { unsafe { (storage::VariantfvEXT.f)(id, addr) } }
#[inline] pub fn VariantivEXT(id: GLuint, addr: *GLint) -> c_void { unsafe { (storage::VariantivEXT.f)(id, addr) } }
#[inline] pub fn VariantsvEXT(id: GLuint, addr: *GLshort) -> c_void { unsafe { (storage::VariantsvEXT.f)(id, addr) } }
#[inline] pub fn VariantubvEXT(id: GLuint, addr: *GLubyte) -> c_void { unsafe { (storage::VariantubvEXT.f)(id, addr) } }
#[inline] pub fn VariantuivEXT(id: GLuint, addr: *GLuint) -> c_void { unsafe { (storage::VariantuivEXT.f)(id, addr) } }
#[inline] pub fn VariantusvEXT(id: GLuint, addr: *GLushort) -> c_void { unsafe { (storage::VariantusvEXT.f)(id, addr) } }
#[inline] pub fn Vertex2bOES(x: GLbyte) -> c_void { unsafe { (storage::Vertex2bOES.f)(x) } }
#[inline] pub unsafe fn Vertex2bvOES(coords: *GLbyte) -> c_void { (storage::Vertex2bvOES.f)(coords) }
#[inline] pub fn Vertex2d(x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::Vertex2d.f)(x, y) } }
#[inline] pub unsafe fn Vertex2dv(v: *GLdouble) -> c_void { (storage::Vertex2dv.f)(v) }
#[inline] pub fn Vertex2f(x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::Vertex2f.f)(x, y) } }
#[inline] pub unsafe fn Vertex2fv(v: *GLfloat) -> c_void { (storage::Vertex2fv.f)(v) }
#[inline] pub fn Vertex2hNV(x: GLhalfNV, y: GLhalfNV) -> c_void { unsafe { (storage::Vertex2hNV.f)(x, y) } }
#[inline] pub unsafe fn Vertex2hvNV(v: *GLhalfNV) -> c_void { (storage::Vertex2hvNV.f)(v) }
#[inline] pub fn Vertex2i(x: GLint, y: GLint) -> c_void { unsafe { (storage::Vertex2i.f)(x, y) } }
#[inline] pub unsafe fn Vertex2iv(v: *GLint) -> c_void { (storage::Vertex2iv.f)(v) }
#[inline] pub fn Vertex2s(x: GLshort, y: GLshort) -> c_void { unsafe { (storage::Vertex2s.f)(x, y) } }
#[inline] pub unsafe fn Vertex2sv(v: *GLshort) -> c_void { (storage::Vertex2sv.f)(v) }
#[inline] pub fn Vertex2xOES(x: GLfixed) -> c_void { unsafe { (storage::Vertex2xOES.f)(x) } }
#[inline] pub unsafe fn Vertex2xvOES(coords: *GLfixed) -> c_void { (storage::Vertex2xvOES.f)(coords) }
#[inline] pub fn Vertex3bOES(x: GLbyte, y: GLbyte) -> c_void { unsafe { (storage::Vertex3bOES.f)(x, y) } }
#[inline] pub unsafe fn Vertex3bvOES(coords: *GLbyte) -> c_void { (storage::Vertex3bvOES.f)(coords) }
#[inline] pub fn Vertex3d(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::Vertex3d.f)(x, y, z) } }
#[inline] pub unsafe fn Vertex3dv(v: *GLdouble) -> c_void { (storage::Vertex3dv.f)(v) }
#[inline] pub fn Vertex3f(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::Vertex3f.f)(x, y, z) } }
#[inline] pub unsafe fn Vertex3fv(v: *GLfloat) -> c_void { (storage::Vertex3fv.f)(v) }
#[inline] pub fn Vertex3hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void { unsafe { (storage::Vertex3hNV.f)(x, y, z) } }
#[inline] pub unsafe fn Vertex3hvNV(v: *GLhalfNV) -> c_void { (storage::Vertex3hvNV.f)(v) }
#[inline] pub fn Vertex3i(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (storage::Vertex3i.f)(x, y, z) } }
#[inline] pub unsafe fn Vertex3iv(v: *GLint) -> c_void { (storage::Vertex3iv.f)(v) }
#[inline] pub fn Vertex3s(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::Vertex3s.f)(x, y, z) } }
#[inline] pub unsafe fn Vertex3sv(v: *GLshort) -> c_void { (storage::Vertex3sv.f)(v) }
#[inline] pub fn Vertex3xOES(x: GLfixed, y: GLfixed) -> c_void { unsafe { (storage::Vertex3xOES.f)(x, y) } }
#[inline] pub unsafe fn Vertex3xvOES(coords: *GLfixed) -> c_void { (storage::Vertex3xvOES.f)(coords) }
#[inline] pub fn Vertex4bOES(x: GLbyte, y: GLbyte, z: GLbyte) -> c_void { unsafe { (storage::Vertex4bOES.f)(x, y, z) } }
#[inline] pub unsafe fn Vertex4bvOES(coords: *GLbyte) -> c_void { (storage::Vertex4bvOES.f)(coords) }
#[inline] pub fn Vertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::Vertex4d.f)(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4dv(v: *GLdouble) -> c_void { (storage::Vertex4dv.f)(v) }
#[inline] pub fn Vertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::Vertex4f.f)(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4fv(v: *GLfloat) -> c_void { (storage::Vertex4fv.f)(v) }
#[inline] pub fn Vertex4hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void { unsafe { (storage::Vertex4hNV.f)(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4hvNV(v: *GLhalfNV) -> c_void { (storage::Vertex4hvNV.f)(v) }
#[inline] pub fn Vertex4i(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::Vertex4i.f)(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4iv(v: *GLint) -> c_void { (storage::Vertex4iv.f)(v) }
#[inline] pub fn Vertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (storage::Vertex4s.f)(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4sv(v: *GLshort) -> c_void { (storage::Vertex4sv.f)(v) }
#[inline] pub fn Vertex4xOES(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (storage::Vertex4xOES.f)(x, y, z) } }
#[inline] pub unsafe fn Vertex4xvOES(coords: *GLfixed) -> c_void { (storage::Vertex4xvOES.f)(coords) }
#[inline] pub fn VertexArrayBindVertexBufferEXT(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void { unsafe { (storage::VertexArrayBindVertexBufferEXT.f)(vaobj, bindingindex, buffer, offset, stride) } }
#[inline] pub fn VertexArrayColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayColorOffsetEXT.f)(vaobj, buffer, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayEdgeFlagOffsetEXT(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayEdgeFlagOffsetEXT.f)(vaobj, buffer, stride, offset) } }
#[inline] pub fn VertexArrayFogCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayFogCoordOffsetEXT.f)(vaobj, buffer, type_, stride, offset) } }
#[inline] pub fn VertexArrayIndexOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayIndexOffsetEXT.f)(vaobj, buffer, type_, stride, offset) } }
#[inline] pub fn VertexArrayMultiTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayMultiTexCoordOffsetEXT.f)(vaobj, buffer, texunit, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayNormalOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayNormalOffsetEXT.f)(vaobj, buffer, type_, stride, offset) } }
#[inline] pub fn VertexArrayParameteriAPPLE(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::VertexArrayParameteriAPPLE.f)(pname, param) } }
#[inline] pub fn VertexArrayRangeAPPLE(length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexArrayRangeAPPLE.f)(length, pointer) } }
#[inline] pub fn VertexArrayRangeNV(length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexArrayRangeNV.f)(length, pointer) } }
#[inline] pub fn VertexArraySecondaryColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArraySecondaryColorOffsetEXT.f)(vaobj, buffer, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayTexCoordOffsetEXT.f)(vaobj, buffer, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayVertexAttribBindingEXT(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> c_void { unsafe { (storage::VertexArrayVertexAttribBindingEXT.f)(vaobj, attribindex, bindingindex) } }
#[inline] pub fn VertexArrayVertexAttribFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void { unsafe { (storage::VertexArrayVertexAttribFormatEXT.f)(vaobj, attribindex, size, type_, normalized, relativeoffset) } }
#[inline] pub fn VertexArrayVertexAttribIFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { (storage::VertexArrayVertexAttribIFormatEXT.f)(vaobj, attribindex, size, type_, relativeoffset) } }
#[inline] pub fn VertexArrayVertexAttribIOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayVertexAttribIOffsetEXT.f)(vaobj, buffer, index, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayVertexAttribLFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { (storage::VertexArrayVertexAttribLFormatEXT.f)(vaobj, attribindex, size, type_, relativeoffset) } }
#[inline] pub fn VertexArrayVertexAttribLOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayVertexAttribLOffsetEXT.f)(vaobj, buffer, index, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayVertexAttribOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayVertexAttribOffsetEXT.f)(vaobj, buffer, index, size, type_, normalized, stride, offset) } }
#[inline] pub fn VertexArrayVertexBindingDivisorEXT(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> c_void { unsafe { (storage::VertexArrayVertexBindingDivisorEXT.f)(vaobj, bindingindex, divisor) } }
#[inline] pub fn VertexArrayVertexOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (storage::VertexArrayVertexOffsetEXT.f)(vaobj, buffer, size, type_, stride, offset) } }
#[inline] pub fn VertexAttrib1d(index: GLuint, x: GLdouble) -> c_void { unsafe { (storage::VertexAttrib1d.f)(index, x) } }
#[inline] pub fn VertexAttrib1dARB(index: GLuint, x: GLdouble) -> c_void { unsafe { (storage::VertexAttrib1dARB.f)(index, x) } }
#[inline] pub fn VertexAttrib1dNV(index: GLuint, x: GLdouble) -> c_void { unsafe { (storage::VertexAttrib1dNV.f)(index, x) } }
#[inline] pub fn VertexAttrib1dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib1dv.f)(index, v) } }
#[inline] pub fn VertexAttrib1dvARB(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib1dvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib1dvNV(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib1dvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib1f(index: GLuint, x: GLfloat) -> c_void { unsafe { (storage::VertexAttrib1f.f)(index, x) } }
#[inline] pub fn VertexAttrib1fARB(index: GLuint, x: GLfloat) -> c_void { unsafe { (storage::VertexAttrib1fARB.f)(index, x) } }
#[inline] pub fn VertexAttrib1fNV(index: GLuint, x: GLfloat) -> c_void { unsafe { (storage::VertexAttrib1fNV.f)(index, x) } }
#[inline] pub fn VertexAttrib1fv(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib1fv.f)(index, v) } }
#[inline] pub fn VertexAttrib1fvARB(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib1fvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib1fvNV(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib1fvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib1hNV(index: GLuint, x: GLhalfNV) -> c_void { unsafe { (storage::VertexAttrib1hNV.f)(index, x) } }
#[inline] pub fn VertexAttrib1hvNV(index: GLuint, v: *GLhalfNV) -> c_void { unsafe { (storage::VertexAttrib1hvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib1s(index: GLuint, x: GLshort) -> c_void { unsafe { (storage::VertexAttrib1s.f)(index, x) } }
#[inline] pub fn VertexAttrib1sARB(index: GLuint, x: GLshort) -> c_void { unsafe { (storage::VertexAttrib1sARB.f)(index, x) } }
#[inline] pub fn VertexAttrib1sNV(index: GLuint, x: GLshort) -> c_void { unsafe { (storage::VertexAttrib1sNV.f)(index, x) } }
#[inline] pub fn VertexAttrib1sv(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib1sv.f)(index, v) } }
#[inline] pub fn VertexAttrib1svARB(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib1svARB.f)(index, v) } }
#[inline] pub fn VertexAttrib1svNV(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib1svNV.f)(index, v) } }
#[inline] pub fn VertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::VertexAttrib2d.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2dARB(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::VertexAttrib2dARB.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2dNV(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::VertexAttrib2dNV.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib2dv.f)(index, v) } }
#[inline] pub fn VertexAttrib2dvARB(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib2dvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib2dvNV(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib2dvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::VertexAttrib2f.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2fARB(index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::VertexAttrib2fARB.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2fNV(index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::VertexAttrib2fNV.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2fv(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib2fv.f)(index, v) } }
#[inline] pub fn VertexAttrib2fvARB(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib2fvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib2fvNV(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib2fvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib2hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV) -> c_void { unsafe { (storage::VertexAttrib2hNV.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2hvNV(index: GLuint, v: *GLhalfNV) -> c_void { unsafe { (storage::VertexAttrib2hvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib2s(index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { (storage::VertexAttrib2s.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2sARB(index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { (storage::VertexAttrib2sARB.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2sNV(index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { (storage::VertexAttrib2sNV.f)(index, x, y) } }
#[inline] pub fn VertexAttrib2sv(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib2sv.f)(index, v) } }
#[inline] pub fn VertexAttrib2svARB(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib2svARB.f)(index, v) } }
#[inline] pub fn VertexAttrib2svNV(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib2svNV.f)(index, v) } }
#[inline] pub fn VertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::VertexAttrib3d.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::VertexAttrib3dARB.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::VertexAttrib3dNV.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib3dv.f)(index, v) } }
#[inline] pub fn VertexAttrib3dvARB(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib3dvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib3dvNV(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib3dvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::VertexAttrib3f.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::VertexAttrib3fARB.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::VertexAttrib3fNV.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3fv(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib3fv.f)(index, v) } }
#[inline] pub fn VertexAttrib3fvARB(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib3fvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib3fvNV(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib3fvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib3hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void { unsafe { (storage::VertexAttrib3hNV.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3hvNV(index: GLuint, v: *GLhalfNV) -> c_void { unsafe { (storage::VertexAttrib3hvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::VertexAttrib3s.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::VertexAttrib3sARB.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::VertexAttrib3sNV.f)(index, x, y, z) } }
#[inline] pub fn VertexAttrib3sv(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib3sv.f)(index, v) } }
#[inline] pub fn VertexAttrib3svARB(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib3svARB.f)(index, v) } }
#[inline] pub fn VertexAttrib3svNV(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib3svNV.f)(index, v) } }
#[inline] pub fn VertexAttrib4Nbv(index: GLuint, v: *GLbyte) -> c_void { unsafe { (storage::VertexAttrib4Nbv.f)(index, v) } }
#[inline] pub fn VertexAttrib4NbvARB(index: GLuint, v: *GLbyte) -> c_void { unsafe { (storage::VertexAttrib4NbvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4Niv(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttrib4Niv.f)(index, v) } }
#[inline] pub fn VertexAttrib4NivARB(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttrib4NivARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4Nsv(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib4Nsv.f)(index, v) } }
#[inline] pub fn VertexAttrib4NsvARB(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib4NsvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { (storage::VertexAttrib4Nub.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4NubARB(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { (storage::VertexAttrib4NubARB.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4Nubv(index: GLuint, v: *GLubyte) -> c_void { unsafe { (storage::VertexAttrib4Nubv.f)(index, v) } }
#[inline] pub fn VertexAttrib4NubvARB(index: GLuint, v: *GLubyte) -> c_void { unsafe { (storage::VertexAttrib4NubvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4Nuiv(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttrib4Nuiv.f)(index, v) } }
#[inline] pub fn VertexAttrib4NuivARB(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttrib4NuivARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4Nusv(index: GLuint, v: *GLushort) -> c_void { unsafe { (storage::VertexAttrib4Nusv.f)(index, v) } }
#[inline] pub fn VertexAttrib4NusvARB(index: GLuint, v: *GLushort) -> c_void { unsafe { (storage::VertexAttrib4NusvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4bv(index: GLuint, v: *GLbyte) -> c_void { unsafe { (storage::VertexAttrib4bv.f)(index, v) } }
#[inline] pub fn VertexAttrib4bvARB(index: GLuint, v: *GLbyte) -> c_void { unsafe { (storage::VertexAttrib4bvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::VertexAttrib4d.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::VertexAttrib4dARB.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::VertexAttrib4dNV.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib4dv.f)(index, v) } }
#[inline] pub fn VertexAttrib4dvARB(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib4dvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4dvNV(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttrib4dvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::VertexAttrib4f.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::VertexAttrib4fARB.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::VertexAttrib4fNV.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4fv(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib4fv.f)(index, v) } }
#[inline] pub fn VertexAttrib4fvARB(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib4fvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4fvNV(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttrib4fvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib4hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void { unsafe { (storage::VertexAttrib4hNV.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4hvNV(index: GLuint, v: *GLhalfNV) -> c_void { unsafe { (storage::VertexAttrib4hvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib4iv(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttrib4iv.f)(index, v) } }
#[inline] pub fn VertexAttrib4ivARB(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttrib4ivARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (storage::VertexAttrib4s.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (storage::VertexAttrib4sARB.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (storage::VertexAttrib4sNV.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4sv(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib4sv.f)(index, v) } }
#[inline] pub fn VertexAttrib4svARB(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib4svARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4svNV(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttrib4svNV.f)(index, v) } }
#[inline] pub fn VertexAttrib4ubNV(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { (storage::VertexAttrib4ubNV.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4ubv(index: GLuint, v: *GLubyte) -> c_void { unsafe { (storage::VertexAttrib4ubv.f)(index, v) } }
#[inline] pub fn VertexAttrib4ubvARB(index: GLuint, v: *GLubyte) -> c_void { unsafe { (storage::VertexAttrib4ubvARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4ubvNV(index: GLuint, v: *GLubyte) -> c_void { unsafe { (storage::VertexAttrib4ubvNV.f)(index, v) } }
#[inline] pub fn VertexAttrib4uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttrib4uiv.f)(index, v) } }
#[inline] pub fn VertexAttrib4uivARB(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttrib4uivARB.f)(index, v) } }
#[inline] pub fn VertexAttrib4usv(index: GLuint, v: *GLushort) -> c_void { unsafe { (storage::VertexAttrib4usv.f)(index, v) } }
#[inline] pub fn VertexAttrib4usvARB(index: GLuint, v: *GLushort) -> c_void { unsafe { (storage::VertexAttrib4usvARB.f)(index, v) } }
#[inline] pub fn VertexAttribArrayObjectATI(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { (storage::VertexAttribArrayObjectATI.f)(index, size, type_, normalized, stride, buffer, offset) } }
#[inline] pub fn VertexAttribBinding(attribindex: GLuint, bindingindex: GLuint) -> c_void { unsafe { (storage::VertexAttribBinding.f)(attribindex, bindingindex) } }
#[inline] pub fn VertexAttribDivisor(index: GLuint, divisor: GLuint) -> c_void { unsafe { (storage::VertexAttribDivisor.f)(index, divisor) } }
#[inline] pub fn VertexAttribDivisorANGLE(index: GLuint, divisor: GLuint) -> c_void { unsafe { (storage::VertexAttribDivisorANGLE.f)(index, divisor) } }
#[inline] pub fn VertexAttribDivisorARB(index: GLuint, divisor: GLuint) -> c_void { unsafe { (storage::VertexAttribDivisorARB.f)(index, divisor) } }
#[inline] pub fn VertexAttribDivisorNV(index: GLuint, divisor: GLuint) -> c_void { unsafe { (storage::VertexAttribDivisorNV.f)(index, divisor) } }
#[inline] pub fn VertexAttribFormat(attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void { unsafe { (storage::VertexAttribFormat.f)(attribindex, size, type_, normalized, relativeoffset) } }
#[inline] pub fn VertexAttribFormatNV(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) -> c_void { unsafe { (storage::VertexAttribFormatNV.f)(index, size, type_, normalized, stride) } }
#[inline] pub fn VertexAttribI1i(index: GLuint, x: GLint) -> c_void { unsafe { (storage::VertexAttribI1i.f)(index, x) } }
#[inline] pub fn VertexAttribI1iEXT(index: GLuint, x: GLint) -> c_void { unsafe { (storage::VertexAttribI1iEXT.f)(index, x) } }
#[inline] pub fn VertexAttribI1iv(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttribI1iv.f)(index, v) } }
#[inline] pub fn VertexAttribI1ivEXT(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttribI1ivEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI1ui(index: GLuint, x: GLuint) -> c_void { unsafe { (storage::VertexAttribI1ui.f)(index, x) } }
#[inline] pub fn VertexAttribI1uiEXT(index: GLuint, x: GLuint) -> c_void { unsafe { (storage::VertexAttribI1uiEXT.f)(index, x) } }
#[inline] pub fn VertexAttribI1uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttribI1uiv.f)(index, v) } }
#[inline] pub fn VertexAttribI1uivEXT(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttribI1uivEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI2i(index: GLuint, x: GLint, y: GLint) -> c_void { unsafe { (storage::VertexAttribI2i.f)(index, x, y) } }
#[inline] pub fn VertexAttribI2iEXT(index: GLuint, x: GLint, y: GLint) -> c_void { unsafe { (storage::VertexAttribI2iEXT.f)(index, x, y) } }
#[inline] pub fn VertexAttribI2iv(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttribI2iv.f)(index, v) } }
#[inline] pub fn VertexAttribI2ivEXT(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttribI2ivEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint) -> c_void { unsafe { (storage::VertexAttribI2ui.f)(index, x, y) } }
#[inline] pub fn VertexAttribI2uiEXT(index: GLuint, x: GLuint, y: GLuint) -> c_void { unsafe { (storage::VertexAttribI2uiEXT.f)(index, x, y) } }
#[inline] pub fn VertexAttribI2uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttribI2uiv.f)(index, v) } }
#[inline] pub fn VertexAttribI2uivEXT(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttribI2uivEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (storage::VertexAttribI3i.f)(index, x, y, z) } }
#[inline] pub fn VertexAttribI3iEXT(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (storage::VertexAttribI3iEXT.f)(index, x, y, z) } }
#[inline] pub fn VertexAttribI3iv(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttribI3iv.f)(index, v) } }
#[inline] pub fn VertexAttribI3ivEXT(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttribI3ivEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void { unsafe { (storage::VertexAttribI3ui.f)(index, x, y, z) } }
#[inline] pub fn VertexAttribI3uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void { unsafe { (storage::VertexAttribI3uiEXT.f)(index, x, y, z) } }
#[inline] pub fn VertexAttribI3uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttribI3uiv.f)(index, v) } }
#[inline] pub fn VertexAttribI3uivEXT(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttribI3uivEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI4bv(index: GLuint, v: *GLbyte) -> c_void { unsafe { (storage::VertexAttribI4bv.f)(index, v) } }
#[inline] pub fn VertexAttribI4bvEXT(index: GLuint, v: *GLbyte) -> c_void { unsafe { (storage::VertexAttribI4bvEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::VertexAttribI4i.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttribI4iEXT(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::VertexAttribI4iEXT.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttribI4iv(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttribI4iv.f)(index, v) } }
#[inline] pub fn VertexAttribI4ivEXT(index: GLuint, v: *GLint) -> c_void { unsafe { (storage::VertexAttribI4ivEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI4sv(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttribI4sv.f)(index, v) } }
#[inline] pub fn VertexAttribI4svEXT(index: GLuint, v: *GLshort) -> c_void { unsafe { (storage::VertexAttribI4svEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI4ubv(index: GLuint, v: *GLubyte) -> c_void { unsafe { (storage::VertexAttribI4ubv.f)(index, v) } }
#[inline] pub fn VertexAttribI4ubvEXT(index: GLuint, v: *GLubyte) -> c_void { unsafe { (storage::VertexAttribI4ubvEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (storage::VertexAttribI4ui.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttribI4uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (storage::VertexAttribI4uiEXT.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttribI4uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttribI4uiv.f)(index, v) } }
#[inline] pub fn VertexAttribI4uivEXT(index: GLuint, v: *GLuint) -> c_void { unsafe { (storage::VertexAttribI4uivEXT.f)(index, v) } }
#[inline] pub fn VertexAttribI4usv(index: GLuint, v: *GLushort) -> c_void { unsafe { (storage::VertexAttribI4usv.f)(index, v) } }
#[inline] pub fn VertexAttribI4usvEXT(index: GLuint, v: *GLushort) -> c_void { unsafe { (storage::VertexAttribI4usvEXT.f)(index, v) } }
#[inline] pub fn VertexAttribIFormat(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { (storage::VertexAttribIFormat.f)(attribindex, size, type_, relativeoffset) } }
#[inline] pub fn VertexAttribIFormatNV(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::VertexAttribIFormatNV.f)(index, size, type_, stride) } }
#[inline] pub fn VertexAttribIPointer(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexAttribIPointer.f)(index, size, type_, stride, pointer) } }
#[inline] pub fn VertexAttribIPointerEXT(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexAttribIPointerEXT.f)(index, size, type_, stride, pointer) } }
#[inline] pub fn VertexAttribL1d(index: GLuint, x: GLdouble) -> c_void { unsafe { (storage::VertexAttribL1d.f)(index, x) } }
#[inline] pub fn VertexAttribL1dEXT(index: GLuint, x: GLdouble) -> c_void { unsafe { (storage::VertexAttribL1dEXT.f)(index, x) } }
#[inline] pub fn VertexAttribL1dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribL1dv.f)(index, v) } }
#[inline] pub fn VertexAttribL1dvEXT(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribL1dvEXT.f)(index, v) } }
#[inline] pub fn VertexAttribL1i64NV(index: GLuint, x: GLint64EXT) -> c_void { unsafe { (storage::VertexAttribL1i64NV.f)(index, x) } }
#[inline] pub fn VertexAttribL1i64vNV(index: GLuint, v: *GLint64EXT) -> c_void { unsafe { (storage::VertexAttribL1i64vNV.f)(index, v) } }
#[inline] pub fn VertexAttribL1ui64ARB(index: GLuint, x: GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL1ui64ARB.f)(index, x) } }
#[inline] pub fn VertexAttribL1ui64NV(index: GLuint, x: GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL1ui64NV.f)(index, x) } }
#[inline] pub fn VertexAttribL1ui64vARB(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL1ui64vARB.f)(index, v) } }
#[inline] pub fn VertexAttribL1ui64vNV(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL1ui64vNV.f)(index, v) } }
#[inline] pub fn VertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::VertexAttribL2d.f)(index, x, y) } }
#[inline] pub fn VertexAttribL2dEXT(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::VertexAttribL2dEXT.f)(index, x, y) } }
#[inline] pub fn VertexAttribL2dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribL2dv.f)(index, v) } }
#[inline] pub fn VertexAttribL2dvEXT(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribL2dvEXT.f)(index, v) } }
#[inline] pub fn VertexAttribL2i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { (storage::VertexAttribL2i64NV.f)(index, x, y) } }
#[inline] pub fn VertexAttribL2i64vNV(index: GLuint, v: *GLint64EXT) -> c_void { unsafe { (storage::VertexAttribL2i64vNV.f)(index, v) } }
#[inline] pub fn VertexAttribL2ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL2ui64NV.f)(index, x, y) } }
#[inline] pub fn VertexAttribL2ui64vNV(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL2ui64vNV.f)(index, v) } }
#[inline] pub fn VertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::VertexAttribL3d.f)(index, x, y, z) } }
#[inline] pub fn VertexAttribL3dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::VertexAttribL3dEXT.f)(index, x, y, z) } }
#[inline] pub fn VertexAttribL3dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribL3dv.f)(index, v) } }
#[inline] pub fn VertexAttribL3dvEXT(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribL3dvEXT.f)(index, v) } }
#[inline] pub fn VertexAttribL3i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { (storage::VertexAttribL3i64NV.f)(index, x, y, z) } }
#[inline] pub fn VertexAttribL3i64vNV(index: GLuint, v: *GLint64EXT) -> c_void { unsafe { (storage::VertexAttribL3i64vNV.f)(index, v) } }
#[inline] pub fn VertexAttribL3ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL3ui64NV.f)(index, x, y, z) } }
#[inline] pub fn VertexAttribL3ui64vNV(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL3ui64vNV.f)(index, v) } }
#[inline] pub fn VertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::VertexAttribL4d.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttribL4dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::VertexAttribL4dEXT.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttribL4dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribL4dv.f)(index, v) } }
#[inline] pub fn VertexAttribL4dvEXT(index: GLuint, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribL4dvEXT.f)(index, v) } }
#[inline] pub fn VertexAttribL4i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { (storage::VertexAttribL4i64NV.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttribL4i64vNV(index: GLuint, v: *GLint64EXT) -> c_void { unsafe { (storage::VertexAttribL4i64vNV.f)(index, v) } }
#[inline] pub fn VertexAttribL4ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL4ui64NV.f)(index, x, y, z, w) } }
#[inline] pub fn VertexAttribL4ui64vNV(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { (storage::VertexAttribL4ui64vNV.f)(index, v) } }
#[inline] pub fn VertexAttribLFormat(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { (storage::VertexAttribLFormat.f)(attribindex, size, type_, relativeoffset) } }
#[inline] pub fn VertexAttribLFormatNV(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::VertexAttribLFormatNV.f)(index, size, type_, stride) } }
#[inline] pub fn VertexAttribLPointer(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexAttribLPointer.f)(index, size, type_, stride, pointer) } }
#[inline] pub fn VertexAttribLPointerEXT(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexAttribLPointerEXT.f)(index, size, type_, stride, pointer) } }
#[inline] pub fn VertexAttribP1ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { (storage::VertexAttribP1ui.f)(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP1uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { unsafe { (storage::VertexAttribP1uiv.f)(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP2ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { (storage::VertexAttribP2ui.f)(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP2uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { unsafe { (storage::VertexAttribP2uiv.f)(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP3ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { (storage::VertexAttribP3ui.f)(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP3uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { unsafe { (storage::VertexAttribP3uiv.f)(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP4ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { (storage::VertexAttribP4ui.f)(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP4uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { unsafe { (storage::VertexAttribP4uiv.f)(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribParameteriAMD(index: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { (storage::VertexAttribParameteriAMD.f)(index, pname, param) } }
#[inline] pub fn VertexAttribPointer(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexAttribPointer.f)(index, size, type_, normalized, stride, pointer) } }
#[inline] pub fn VertexAttribPointerARB(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexAttribPointerARB.f)(index, size, type_, normalized, stride, pointer) } }
#[inline] pub fn VertexAttribPointerNV(index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexAttribPointerNV.f)(index, fsize, type_, stride, pointer) } }
#[inline] pub fn VertexAttribs1dvNV(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribs1dvNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs1fvNV(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttribs1fvNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs1hvNV(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { unsafe { (storage::VertexAttribs1hvNV.f)(index, n, v) } }
#[inline] pub fn VertexAttribs1svNV(index: GLuint, count: GLsizei, v: *GLshort) -> c_void { unsafe { (storage::VertexAttribs1svNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs2dvNV(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribs2dvNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs2fvNV(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttribs2fvNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs2hvNV(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { unsafe { (storage::VertexAttribs2hvNV.f)(index, n, v) } }
#[inline] pub fn VertexAttribs2svNV(index: GLuint, count: GLsizei, v: *GLshort) -> c_void { unsafe { (storage::VertexAttribs2svNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs3dvNV(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribs3dvNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs3fvNV(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttribs3fvNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs3hvNV(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { unsafe { (storage::VertexAttribs3hvNV.f)(index, n, v) } }
#[inline] pub fn VertexAttribs3svNV(index: GLuint, count: GLsizei, v: *GLshort) -> c_void { unsafe { (storage::VertexAttribs3svNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs4dvNV(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { (storage::VertexAttribs4dvNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs4fvNV(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { (storage::VertexAttribs4fvNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs4hvNV(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { unsafe { (storage::VertexAttribs4hvNV.f)(index, n, v) } }
#[inline] pub fn VertexAttribs4svNV(index: GLuint, count: GLsizei, v: *GLshort) -> c_void { unsafe { (storage::VertexAttribs4svNV.f)(index, count, v) } }
#[inline] pub fn VertexAttribs4ubvNV(index: GLuint, count: GLsizei, v: *GLubyte) -> c_void { unsafe { (storage::VertexAttribs4ubvNV.f)(index, count, v) } }
#[inline] pub fn VertexBindingDivisor(bindingindex: GLuint, divisor: GLuint) -> c_void { unsafe { (storage::VertexBindingDivisor.f)(bindingindex, divisor) } }
#[inline] pub fn VertexBlendARB(count: GLint) -> c_void { unsafe { (storage::VertexBlendARB.f)(count) } }
#[inline] pub fn VertexBlendEnvfATI(pname: GLenum, param: GLfloat) -> c_void { unsafe { (storage::VertexBlendEnvfATI.f)(pname, param) } }
#[inline] pub fn VertexBlendEnviATI(pname: GLenum, param: GLint) -> c_void { unsafe { (storage::VertexBlendEnviATI.f)(pname, param) } }
#[inline] pub fn VertexFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (storage::VertexFormatNV.f)(size, type_, stride) } }
#[inline] pub fn VertexP2ui(type_: GLenum, value: GLuint) -> c_void { unsafe { (storage::VertexP2ui.f)(type_, value) } }
#[inline] pub fn VertexP2uiv(type_: GLenum, value: *GLuint) -> c_void { unsafe { (storage::VertexP2uiv.f)(type_, value) } }
#[inline] pub fn VertexP3ui(type_: GLenum, value: GLuint) -> c_void { unsafe { (storage::VertexP3ui.f)(type_, value) } }
#[inline] pub fn VertexP3uiv(type_: GLenum, value: *GLuint) -> c_void { unsafe { (storage::VertexP3uiv.f)(type_, value) } }
#[inline] pub fn VertexP4ui(type_: GLenum, value: GLuint) -> c_void { unsafe { (storage::VertexP4ui.f)(type_, value) } }
#[inline] pub fn VertexP4uiv(type_: GLenum, value: *GLuint) -> c_void { unsafe { (storage::VertexP4uiv.f)(type_, value) } }
#[inline] pub fn VertexPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexPointer.f)(size, type_, stride, pointer) } }
#[inline] pub fn VertexPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexPointerEXT.f)(size, type_, stride, count, pointer) } }
#[inline] pub fn VertexPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { (storage::VertexPointerListIBM.f)(size, type_, stride, pointer, ptrstride) } }
#[inline] pub fn VertexPointervINTEL(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { unsafe { (storage::VertexPointervINTEL.f)(size, type_, pointer) } }
#[inline] pub fn VertexStream1dATI(stream: GLenum, x: GLdouble) -> c_void { unsafe { (storage::VertexStream1dATI.f)(stream, x) } }
#[inline] pub fn VertexStream1dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { (storage::VertexStream1dvATI.f)(stream, coords) } }
#[inline] pub fn VertexStream1fATI(stream: GLenum, x: GLfloat) -> c_void { unsafe { (storage::VertexStream1fATI.f)(stream, x) } }
#[inline] pub fn VertexStream1fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { (storage::VertexStream1fvATI.f)(stream, coords) } }
#[inline] pub fn VertexStream1iATI(stream: GLenum, x: GLint) -> c_void { unsafe { (storage::VertexStream1iATI.f)(stream, x) } }
#[inline] pub fn VertexStream1ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { (storage::VertexStream1ivATI.f)(stream, coords) } }
#[inline] pub fn VertexStream1sATI(stream: GLenum, x: GLshort) -> c_void { unsafe { (storage::VertexStream1sATI.f)(stream, x) } }
#[inline] pub fn VertexStream1svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { (storage::VertexStream1svATI.f)(stream, coords) } }
#[inline] pub fn VertexStream2dATI(stream: GLenum, x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::VertexStream2dATI.f)(stream, x, y) } }
#[inline] pub fn VertexStream2dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { (storage::VertexStream2dvATI.f)(stream, coords) } }
#[inline] pub fn VertexStream2fATI(stream: GLenum, x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::VertexStream2fATI.f)(stream, x, y) } }
#[inline] pub fn VertexStream2fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { (storage::VertexStream2fvATI.f)(stream, coords) } }
#[inline] pub fn VertexStream2iATI(stream: GLenum, x: GLint, y: GLint) -> c_void { unsafe { (storage::VertexStream2iATI.f)(stream, x, y) } }
#[inline] pub fn VertexStream2ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { (storage::VertexStream2ivATI.f)(stream, coords) } }
#[inline] pub fn VertexStream2sATI(stream: GLenum, x: GLshort, y: GLshort) -> c_void { unsafe { (storage::VertexStream2sATI.f)(stream, x, y) } }
#[inline] pub fn VertexStream2svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { (storage::VertexStream2svATI.f)(stream, coords) } }
#[inline] pub fn VertexStream3dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::VertexStream3dATI.f)(stream, x, y, z) } }
#[inline] pub fn VertexStream3dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { (storage::VertexStream3dvATI.f)(stream, coords) } }
#[inline] pub fn VertexStream3fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::VertexStream3fATI.f)(stream, x, y, z) } }
#[inline] pub fn VertexStream3fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { (storage::VertexStream3fvATI.f)(stream, coords) } }
#[inline] pub fn VertexStream3iATI(stream: GLenum, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (storage::VertexStream3iATI.f)(stream, x, y, z) } }
#[inline] pub fn VertexStream3ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { (storage::VertexStream3ivATI.f)(stream, coords) } }
#[inline] pub fn VertexStream3sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::VertexStream3sATI.f)(stream, x, y, z) } }
#[inline] pub fn VertexStream3svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { (storage::VertexStream3svATI.f)(stream, coords) } }
#[inline] pub fn VertexStream4dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::VertexStream4dATI.f)(stream, x, y, z, w) } }
#[inline] pub fn VertexStream4dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { (storage::VertexStream4dvATI.f)(stream, coords) } }
#[inline] pub fn VertexStream4fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::VertexStream4fATI.f)(stream, x, y, z, w) } }
#[inline] pub fn VertexStream4fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { (storage::VertexStream4fvATI.f)(stream, coords) } }
#[inline] pub fn VertexStream4iATI(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::VertexStream4iATI.f)(stream, x, y, z, w) } }
#[inline] pub fn VertexStream4ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { (storage::VertexStream4ivATI.f)(stream, coords) } }
#[inline] pub fn VertexStream4sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (storage::VertexStream4sATI.f)(stream, x, y, z, w) } }
#[inline] pub fn VertexStream4svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { (storage::VertexStream4svATI.f)(stream, coords) } }
#[inline] pub fn VertexWeightPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::VertexWeightPointerEXT.f)(size, type_, stride, pointer) } }
#[inline] pub fn VertexWeightfEXT(weight: GLfloat) -> c_void { unsafe { (storage::VertexWeightfEXT.f)(weight) } }
#[inline] pub unsafe fn VertexWeightfvEXT(weight: *GLfloat) -> c_void { (storage::VertexWeightfvEXT.f)(weight) }
#[inline] pub fn VertexWeighthNV(weight: GLhalfNV) -> c_void { unsafe { (storage::VertexWeighthNV.f)(weight) } }
#[inline] pub unsafe fn VertexWeighthvNV(weight: *GLhalfNV) -> c_void { (storage::VertexWeighthvNV.f)(weight) }
#[inline] pub fn VideoCaptureNV(video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) -> GLenum { unsafe { (storage::VideoCaptureNV.f)(video_capture_slot, sequence_num, capture_time) } }
#[inline] pub fn VideoCaptureStreamParameterdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { (storage::VideoCaptureStreamParameterdvNV.f)(video_capture_slot, stream, pname, params) } }
#[inline] pub fn VideoCaptureStreamParameterfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { (storage::VideoCaptureStreamParameterfvNV.f)(video_capture_slot, stream, pname, params) } }
#[inline] pub fn VideoCaptureStreamParameterivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { (storage::VideoCaptureStreamParameterivNV.f)(video_capture_slot, stream, pname, params) } }
#[inline] pub fn Viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (storage::Viewport.f)(x, y, width, height) } }
#[inline] pub fn ViewportArrayv(first: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { (storage::ViewportArrayv.f)(first, count, v) } }
#[inline] pub fn ViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> c_void { unsafe { (storage::ViewportIndexedf.f)(index, x, y, w, h) } }
#[inline] pub fn ViewportIndexedfv(index: GLuint, v: *GLfloat) -> c_void { unsafe { (storage::ViewportIndexedfv.f)(index, v) } }
#[inline] pub fn WaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void { unsafe { (storage::WaitSync.f)(sync, flags, timeout) } }
#[inline] pub fn WaitSyncAPPLE(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void { unsafe { (storage::WaitSyncAPPLE.f)(sync, flags, timeout) } }
#[inline] pub fn WeightPathsNV(resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) -> c_void { unsafe { (storage::WeightPathsNV.f)(resultPath, numPaths, paths, weights) } }
#[inline] pub fn WeightPointerARB(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::WeightPointerARB.f)(size, type_, stride, pointer) } }
#[inline] pub fn WeightPointerOES(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { (storage::WeightPointerOES.f)(size, type_, stride, pointer) } }
#[inline] pub fn WeightbvARB(size: GLint, weights: *GLbyte) -> c_void { unsafe { (storage::WeightbvARB.f)(size, weights) } }
#[inline] pub fn WeightdvARB(size: GLint, weights: *GLdouble) -> c_void { unsafe { (storage::WeightdvARB.f)(size, weights) } }
#[inline] pub fn WeightfvARB(size: GLint, weights: *GLfloat) -> c_void { unsafe { (storage::WeightfvARB.f)(size, weights) } }
#[inline] pub fn WeightivARB(size: GLint, weights: *GLint) -> c_void { unsafe { (storage::WeightivARB.f)(size, weights) } }
#[inline] pub fn WeightsvARB(size: GLint, weights: *GLshort) -> c_void { unsafe { (storage::WeightsvARB.f)(size, weights) } }
#[inline] pub fn WeightubvARB(size: GLint, weights: *GLubyte) -> c_void { unsafe { (storage::WeightubvARB.f)(size, weights) } }
#[inline] pub fn WeightuivARB(size: GLint, weights: *GLuint) -> c_void { unsafe { (storage::WeightuivARB.f)(size, weights) } }
#[inline] pub fn WeightusvARB(size: GLint, weights: *GLushort) -> c_void { unsafe { (storage::WeightusvARB.f)(size, weights) } }
#[inline] pub fn WindowPos2d(x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::WindowPos2d.f)(x, y) } }
#[inline] pub fn WindowPos2dARB(x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::WindowPos2dARB.f)(x, y) } }
#[inline] pub fn WindowPos2dMESA(x: GLdouble, y: GLdouble) -> c_void { unsafe { (storage::WindowPos2dMESA.f)(x, y) } }
#[inline] pub unsafe fn WindowPos2dv(v: *GLdouble) -> c_void { (storage::WindowPos2dv.f)(v) }
#[inline] pub unsafe fn WindowPos2dvARB(v: *GLdouble) -> c_void { (storage::WindowPos2dvARB.f)(v) }
#[inline] pub unsafe fn WindowPos2dvMESA(v: *GLdouble) -> c_void { (storage::WindowPos2dvMESA.f)(v) }
#[inline] pub fn WindowPos2f(x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::WindowPos2f.f)(x, y) } }
#[inline] pub fn WindowPos2fARB(x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::WindowPos2fARB.f)(x, y) } }
#[inline] pub fn WindowPos2fMESA(x: GLfloat, y: GLfloat) -> c_void { unsafe { (storage::WindowPos2fMESA.f)(x, y) } }
#[inline] pub unsafe fn WindowPos2fv(v: *GLfloat) -> c_void { (storage::WindowPos2fv.f)(v) }
#[inline] pub unsafe fn WindowPos2fvARB(v: *GLfloat) -> c_void { (storage::WindowPos2fvARB.f)(v) }
#[inline] pub unsafe fn WindowPos2fvMESA(v: *GLfloat) -> c_void { (storage::WindowPos2fvMESA.f)(v) }
#[inline] pub fn WindowPos2i(x: GLint, y: GLint) -> c_void { unsafe { (storage::WindowPos2i.f)(x, y) } }
#[inline] pub fn WindowPos2iARB(x: GLint, y: GLint) -> c_void { unsafe { (storage::WindowPos2iARB.f)(x, y) } }
#[inline] pub fn WindowPos2iMESA(x: GLint, y: GLint) -> c_void { unsafe { (storage::WindowPos2iMESA.f)(x, y) } }
#[inline] pub unsafe fn WindowPos2iv(v: *GLint) -> c_void { (storage::WindowPos2iv.f)(v) }
#[inline] pub unsafe fn WindowPos2ivARB(v: *GLint) -> c_void { (storage::WindowPos2ivARB.f)(v) }
#[inline] pub unsafe fn WindowPos2ivMESA(v: *GLint) -> c_void { (storage::WindowPos2ivMESA.f)(v) }
#[inline] pub fn WindowPos2s(x: GLshort, y: GLshort) -> c_void { unsafe { (storage::WindowPos2s.f)(x, y) } }
#[inline] pub fn WindowPos2sARB(x: GLshort, y: GLshort) -> c_void { unsafe { (storage::WindowPos2sARB.f)(x, y) } }
#[inline] pub fn WindowPos2sMESA(x: GLshort, y: GLshort) -> c_void { unsafe { (storage::WindowPos2sMESA.f)(x, y) } }
#[inline] pub unsafe fn WindowPos2sv(v: *GLshort) -> c_void { (storage::WindowPos2sv.f)(v) }
#[inline] pub unsafe fn WindowPos2svARB(v: *GLshort) -> c_void { (storage::WindowPos2svARB.f)(v) }
#[inline] pub unsafe fn WindowPos2svMESA(v: *GLshort) -> c_void { (storage::WindowPos2svMESA.f)(v) }
#[inline] pub fn WindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::WindowPos3d.f)(x, y, z) } }
#[inline] pub fn WindowPos3dARB(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::WindowPos3dARB.f)(x, y, z) } }
#[inline] pub fn WindowPos3dMESA(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (storage::WindowPos3dMESA.f)(x, y, z) } }
#[inline] pub unsafe fn WindowPos3dv(v: *GLdouble) -> c_void { (storage::WindowPos3dv.f)(v) }
#[inline] pub unsafe fn WindowPos3dvARB(v: *GLdouble) -> c_void { (storage::WindowPos3dvARB.f)(v) }
#[inline] pub unsafe fn WindowPos3dvMESA(v: *GLdouble) -> c_void { (storage::WindowPos3dvMESA.f)(v) }
#[inline] pub fn WindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::WindowPos3f.f)(x, y, z) } }
#[inline] pub fn WindowPos3fARB(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::WindowPos3fARB.f)(x, y, z) } }
#[inline] pub fn WindowPos3fMESA(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (storage::WindowPos3fMESA.f)(x, y, z) } }
#[inline] pub unsafe fn WindowPos3fv(v: *GLfloat) -> c_void { (storage::WindowPos3fv.f)(v) }
#[inline] pub unsafe fn WindowPos3fvARB(v: *GLfloat) -> c_void { (storage::WindowPos3fvARB.f)(v) }
#[inline] pub unsafe fn WindowPos3fvMESA(v: *GLfloat) -> c_void { (storage::WindowPos3fvMESA.f)(v) }
#[inline] pub fn WindowPos3i(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (storage::WindowPos3i.f)(x, y, z) } }
#[inline] pub fn WindowPos3iARB(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (storage::WindowPos3iARB.f)(x, y, z) } }
#[inline] pub fn WindowPos3iMESA(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (storage::WindowPos3iMESA.f)(x, y, z) } }
#[inline] pub unsafe fn WindowPos3iv(v: *GLint) -> c_void { (storage::WindowPos3iv.f)(v) }
#[inline] pub unsafe fn WindowPos3ivARB(v: *GLint) -> c_void { (storage::WindowPos3ivARB.f)(v) }
#[inline] pub unsafe fn WindowPos3ivMESA(v: *GLint) -> c_void { (storage::WindowPos3ivMESA.f)(v) }
#[inline] pub fn WindowPos3s(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::WindowPos3s.f)(x, y, z) } }
#[inline] pub fn WindowPos3sARB(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::WindowPos3sARB.f)(x, y, z) } }
#[inline] pub fn WindowPos3sMESA(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (storage::WindowPos3sMESA.f)(x, y, z) } }
#[inline] pub unsafe fn WindowPos3sv(v: *GLshort) -> c_void { (storage::WindowPos3sv.f)(v) }
#[inline] pub unsafe fn WindowPos3svARB(v: *GLshort) -> c_void { (storage::WindowPos3svARB.f)(v) }
#[inline] pub unsafe fn WindowPos3svMESA(v: *GLshort) -> c_void { (storage::WindowPos3svMESA.f)(v) }
#[inline] pub fn WindowPos4dMESA(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (storage::WindowPos4dMESA.f)(x, y, z, w) } }
#[inline] pub unsafe fn WindowPos4dvMESA(v: *GLdouble) -> c_void { (storage::WindowPos4dvMESA.f)(v) }
#[inline] pub fn WindowPos4fMESA(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (storage::WindowPos4fMESA.f)(x, y, z, w) } }
#[inline] pub unsafe fn WindowPos4fvMESA(v: *GLfloat) -> c_void { (storage::WindowPos4fvMESA.f)(v) }
#[inline] pub fn WindowPos4iMESA(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (storage::WindowPos4iMESA.f)(x, y, z, w) } }
#[inline] pub unsafe fn WindowPos4ivMESA(v: *GLint) -> c_void { (storage::WindowPos4ivMESA.f)(v) }
#[inline] pub fn WindowPos4sMESA(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (storage::WindowPos4sMESA.f)(x, y, z, w) } }
#[inline] pub unsafe fn WindowPos4svMESA(v: *GLshort) -> c_void { (storage::WindowPos4svMESA.f)(v) }
#[inline] pub fn WriteMaskEXT(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void { unsafe { (storage::WriteMaskEXT.f)(res, in_, outX, outY, outZ, outW) } }

mod storage {
    use std::libc::*;
    use super::types::*;
    
    struct FnPtr<F> { f: F, is_loaded: bool }
    
    pub static mut Accum: FnPtr<extern "C" fn(op: GLenum, value: GLfloat) -> c_void> = FnPtr { f: super::failing::Accum, is_loaded: false };
    pub static mut AccumxOES: FnPtr<extern "C" fn(op: GLenum, value: GLfixed) -> c_void> = FnPtr { f: super::failing::AccumxOES, is_loaded: false };
    pub static mut ActiveProgramEXT: FnPtr<extern "C" fn(program: GLuint) -> c_void> = FnPtr { f: super::failing::ActiveProgramEXT, is_loaded: false };
    pub static mut ActiveShaderProgram: FnPtr<extern "C" fn(pipeline: GLuint, program: GLuint) -> c_void> = FnPtr { f: super::failing::ActiveShaderProgram, is_loaded: false };
    pub static mut ActiveShaderProgramEXT: FnPtr<extern "C" fn(pipeline: GLuint, program: GLuint) -> c_void> = FnPtr { f: super::failing::ActiveShaderProgramEXT, is_loaded: false };
    pub static mut ActiveStencilFaceEXT: FnPtr<extern "C" fn(face: GLenum) -> c_void> = FnPtr { f: super::failing::ActiveStencilFaceEXT, is_loaded: false };
    pub static mut ActiveTexture: FnPtr<extern "C" fn(texture: GLenum) -> c_void> = FnPtr { f: super::failing::ActiveTexture, is_loaded: false };
    pub static mut ActiveTextureARB: FnPtr<extern "C" fn(texture: GLenum) -> c_void> = FnPtr { f: super::failing::ActiveTextureARB, is_loaded: false };
    pub static mut ActiveVaryingNV: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> c_void> = FnPtr { f: super::failing::ActiveVaryingNV, is_loaded: false };
    pub static mut AlphaFragmentOp1ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void> = FnPtr { f: super::failing::AlphaFragmentOp1ATI, is_loaded: false };
    pub static mut AlphaFragmentOp2ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void> = FnPtr { f: super::failing::AlphaFragmentOp2ATI, is_loaded: false };
    pub static mut AlphaFragmentOp3ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void> = FnPtr { f: super::failing::AlphaFragmentOp3ATI, is_loaded: false };
    pub static mut AlphaFunc: FnPtr<extern "C" fn(func: GLenum, ref_: GLfloat) -> c_void> = FnPtr { f: super::failing::AlphaFunc, is_loaded: false };
    pub static mut AlphaFuncQCOM: FnPtr<extern "C" fn(func: GLenum, ref_: GLclampf) -> c_void> = FnPtr { f: super::failing::AlphaFuncQCOM, is_loaded: false };
    pub static mut AlphaFuncx: FnPtr<extern "C" fn(func: GLenum, ref_: GLfixed) -> c_void> = FnPtr { f: super::failing::AlphaFuncx, is_loaded: false };
    pub static mut AlphaFuncxOES: FnPtr<extern "C" fn(func: GLenum, ref_: GLfixed) -> c_void> = FnPtr { f: super::failing::AlphaFuncxOES, is_loaded: false };
    pub static mut ApplyTextureEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::ApplyTextureEXT, is_loaded: false };
    pub static mut AreProgramsResidentNV: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint, residences: *GLboolean) -> GLboolean> = FnPtr { f: super::failing::AreProgramsResidentNV, is_loaded: false };
    pub static mut AreTexturesResident: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean> = FnPtr { f: super::failing::AreTexturesResident, is_loaded: false };
    pub static mut AreTexturesResidentEXT: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean> = FnPtr { f: super::failing::AreTexturesResidentEXT, is_loaded: false };
    pub static mut ArrayElement: FnPtr<extern "C" fn(i: GLint) -> c_void> = FnPtr { f: super::failing::ArrayElement, is_loaded: false };
    pub static mut ArrayElementEXT: FnPtr<extern "C" fn(i: GLint) -> c_void> = FnPtr { f: super::failing::ArrayElementEXT, is_loaded: false };
    pub static mut ArrayObjectATI: FnPtr<extern "C" fn(array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void> = FnPtr { f: super::failing::ArrayObjectATI, is_loaded: false };
    pub static mut AsyncMarkerSGIX: FnPtr<extern "C" fn(marker: GLuint) -> c_void> = FnPtr { f: super::failing::AsyncMarkerSGIX, is_loaded: false };
    pub static mut AttachObjectARB: FnPtr<extern "C" fn(containerObj: GLhandleARB, obj: GLhandleARB) -> c_void> = FnPtr { f: super::failing::AttachObjectARB, is_loaded: false };
    pub static mut AttachShader: FnPtr<extern "C" fn(program: GLuint, shader: GLuint) -> c_void> = FnPtr { f: super::failing::AttachShader, is_loaded: false };
    pub static mut Begin: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::Begin, is_loaded: false };
    pub static mut BeginConditionalRender: FnPtr<extern "C" fn(id: GLuint, mode: GLenum) -> c_void> = FnPtr { f: super::failing::BeginConditionalRender, is_loaded: false };
    pub static mut BeginConditionalRenderNV: FnPtr<extern "C" fn(id: GLuint, mode: GLenum) -> c_void> = FnPtr { f: super::failing::BeginConditionalRenderNV, is_loaded: false };
    pub static mut BeginConditionalRenderNVX: FnPtr<extern "C" fn(id: GLuint) -> c_void> = FnPtr { f: super::failing::BeginConditionalRenderNVX, is_loaded: false };
    pub static mut BeginFragmentShaderATI: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::BeginFragmentShaderATI, is_loaded: false };
    pub static mut BeginOcclusionQueryNV: FnPtr<extern "C" fn(id: GLuint) -> c_void> = FnPtr { f: super::failing::BeginOcclusionQueryNV, is_loaded: false };
    pub static mut BeginPerfMonitorAMD: FnPtr<extern "C" fn(monitor: GLuint) -> c_void> = FnPtr { f: super::failing::BeginPerfMonitorAMD, is_loaded: false };
    pub static mut BeginQuery: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void> = FnPtr { f: super::failing::BeginQuery, is_loaded: false };
    pub static mut BeginQueryARB: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void> = FnPtr { f: super::failing::BeginQueryARB, is_loaded: false };
    pub static mut BeginQueryEXT: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void> = FnPtr { f: super::failing::BeginQueryEXT, is_loaded: false };
    pub static mut BeginQueryIndexed: FnPtr<extern "C" fn(target: GLenum, index: GLuint, id: GLuint) -> c_void> = FnPtr { f: super::failing::BeginQueryIndexed, is_loaded: false };
    pub static mut BeginTransformFeedback: FnPtr<extern "C" fn(primitiveMode: GLenum) -> c_void> = FnPtr { f: super::failing::BeginTransformFeedback, is_loaded: false };
    pub static mut BeginTransformFeedbackEXT: FnPtr<extern "C" fn(primitiveMode: GLenum) -> c_void> = FnPtr { f: super::failing::BeginTransformFeedbackEXT, is_loaded: false };
    pub static mut BeginTransformFeedbackNV: FnPtr<extern "C" fn(primitiveMode: GLenum) -> c_void> = FnPtr { f: super::failing::BeginTransformFeedbackNV, is_loaded: false };
    pub static mut BeginVertexShaderEXT: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::BeginVertexShaderEXT, is_loaded: false };
    pub static mut BeginVideoCaptureNV: FnPtr<extern "C" fn(video_capture_slot: GLuint) -> c_void> = FnPtr { f: super::failing::BeginVideoCaptureNV, is_loaded: false };
    pub static mut BindAttribLocation: FnPtr<extern "C" fn(program: GLuint, index: GLuint, name: *GLchar) -> c_void> = FnPtr { f: super::failing::BindAttribLocation, is_loaded: false };
    pub static mut BindAttribLocationARB: FnPtr<extern "C" fn(programObj: GLhandleARB, index: GLuint, name: *GLcharARB) -> c_void> = FnPtr { f: super::failing::BindAttribLocationARB, is_loaded: false };
    pub static mut BindBuffer: FnPtr<extern "C" fn(target: GLenum, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindBuffer, is_loaded: false };
    pub static mut BindBufferARB: FnPtr<extern "C" fn(target: GLenum, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindBufferARB, is_loaded: false };
    pub static mut BindBufferBase: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindBufferBase, is_loaded: false };
    pub static mut BindBufferBaseEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindBufferBaseEXT, is_loaded: false };
    pub static mut BindBufferBaseNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindBufferBaseNV, is_loaded: false };
    pub static mut BindBufferOffsetEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::BindBufferOffsetEXT, is_loaded: false };
    pub static mut BindBufferOffsetNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::BindBufferOffsetNV, is_loaded: false };
    pub static mut BindBufferRange: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::BindBufferRange, is_loaded: false };
    pub static mut BindBufferRangeEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::BindBufferRangeEXT, is_loaded: false };
    pub static mut BindBufferRangeNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::BindBufferRangeNV, is_loaded: false };
    pub static mut BindBuffersBase: FnPtr<extern "C" fn(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) -> c_void> = FnPtr { f: super::failing::BindBuffersBase, is_loaded: false };
    pub static mut BindBuffersRange: FnPtr<extern "C" fn(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) -> c_void> = FnPtr { f: super::failing::BindBuffersRange, is_loaded: false };
    pub static mut BindFragDataLocation: FnPtr<extern "C" fn(program: GLuint, color: GLuint, name: *GLchar) -> c_void> = FnPtr { f: super::failing::BindFragDataLocation, is_loaded: false };
    pub static mut BindFragDataLocationEXT: FnPtr<extern "C" fn(program: GLuint, color: GLuint, name: *GLchar) -> c_void> = FnPtr { f: super::failing::BindFragDataLocationEXT, is_loaded: false };
    pub static mut BindFragDataLocationIndexed: FnPtr<extern "C" fn(program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) -> c_void> = FnPtr { f: super::failing::BindFragDataLocationIndexed, is_loaded: false };
    pub static mut BindFragmentShaderATI: FnPtr<extern "C" fn(id: GLuint) -> c_void> = FnPtr { f: super::failing::BindFragmentShaderATI, is_loaded: false };
    pub static mut BindFramebuffer: FnPtr<extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindFramebuffer, is_loaded: false };
    pub static mut BindFramebufferEXT: FnPtr<extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindFramebufferEXT, is_loaded: false };
    pub static mut BindFramebufferOES: FnPtr<extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindFramebufferOES, is_loaded: false };
    pub static mut BindImageTexture: FnPtr<extern "C" fn(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> c_void> = FnPtr { f: super::failing::BindImageTexture, is_loaded: false };
    pub static mut BindImageTextureEXT: FnPtr<extern "C" fn(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) -> c_void> = FnPtr { f: super::failing::BindImageTextureEXT, is_loaded: false };
    pub static mut BindImageTextures: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void> = FnPtr { f: super::failing::BindImageTextures, is_loaded: false };
    pub static mut BindLightParameterEXT: FnPtr<extern "C" fn(light: GLenum, value: GLenum) -> GLuint> = FnPtr { f: super::failing::BindLightParameterEXT, is_loaded: false };
    pub static mut BindMaterialParameterEXT: FnPtr<extern "C" fn(face: GLenum, value: GLenum) -> GLuint> = FnPtr { f: super::failing::BindMaterialParameterEXT, is_loaded: false };
    pub static mut BindMultiTextureEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, texture: GLuint) -> c_void> = FnPtr { f: super::failing::BindMultiTextureEXT, is_loaded: false };
    pub static mut BindParameterEXT: FnPtr<extern "C" fn(value: GLenum) -> GLuint> = FnPtr { f: super::failing::BindParameterEXT, is_loaded: false };
    pub static mut BindProgramARB: FnPtr<extern "C" fn(target: GLenum, program: GLuint) -> c_void> = FnPtr { f: super::failing::BindProgramARB, is_loaded: false };
    pub static mut BindProgramNV: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void> = FnPtr { f: super::failing::BindProgramNV, is_loaded: false };
    pub static mut BindProgramPipeline: FnPtr<extern "C" fn(pipeline: GLuint) -> c_void> = FnPtr { f: super::failing::BindProgramPipeline, is_loaded: false };
    pub static mut BindProgramPipelineEXT: FnPtr<extern "C" fn(pipeline: GLuint) -> c_void> = FnPtr { f: super::failing::BindProgramPipelineEXT, is_loaded: false };
    pub static mut BindRenderbuffer: FnPtr<extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindRenderbuffer, is_loaded: false };
    pub static mut BindRenderbufferEXT: FnPtr<extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindRenderbufferEXT, is_loaded: false };
    pub static mut BindRenderbufferOES: FnPtr<extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::BindRenderbufferOES, is_loaded: false };
    pub static mut BindSampler: FnPtr<extern "C" fn(unit: GLuint, sampler: GLuint) -> c_void> = FnPtr { f: super::failing::BindSampler, is_loaded: false };
    pub static mut BindSamplers: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, samplers: *GLuint) -> c_void> = FnPtr { f: super::failing::BindSamplers, is_loaded: false };
    pub static mut BindTexGenParameterEXT: FnPtr<extern "C" fn(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint> = FnPtr { f: super::failing::BindTexGenParameterEXT, is_loaded: false };
    pub static mut BindTexture: FnPtr<extern "C" fn(target: GLenum, texture: GLuint) -> c_void> = FnPtr { f: super::failing::BindTexture, is_loaded: false };
    pub static mut BindTextureEXT: FnPtr<extern "C" fn(target: GLenum, texture: GLuint) -> c_void> = FnPtr { f: super::failing::BindTextureEXT, is_loaded: false };
    pub static mut BindTextureUnitParameterEXT: FnPtr<extern "C" fn(unit: GLenum, value: GLenum) -> GLuint> = FnPtr { f: super::failing::BindTextureUnitParameterEXT, is_loaded: false };
    pub static mut BindTextures: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void> = FnPtr { f: super::failing::BindTextures, is_loaded: false };
    pub static mut BindTransformFeedback: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void> = FnPtr { f: super::failing::BindTransformFeedback, is_loaded: false };
    pub static mut BindTransformFeedbackNV: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void> = FnPtr { f: super::failing::BindTransformFeedbackNV, is_loaded: false };
    pub static mut BindVertexArray: FnPtr<extern "C" fn(array: GLuint) -> c_void> = FnPtr { f: super::failing::BindVertexArray, is_loaded: false };
    pub static mut BindVertexArrayAPPLE: FnPtr<extern "C" fn(array: GLuint) -> c_void> = FnPtr { f: super::failing::BindVertexArrayAPPLE, is_loaded: false };
    pub static mut BindVertexArrayOES: FnPtr<extern "C" fn(array: GLuint) -> c_void> = FnPtr { f: super::failing::BindVertexArrayOES, is_loaded: false };
    pub static mut BindVertexBuffer: FnPtr<extern "C" fn(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::BindVertexBuffer, is_loaded: false };
    pub static mut BindVertexBuffers: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) -> c_void> = FnPtr { f: super::failing::BindVertexBuffers, is_loaded: false };
    pub static mut BindVertexShaderEXT: FnPtr<extern "C" fn(id: GLuint) -> c_void> = FnPtr { f: super::failing::BindVertexShaderEXT, is_loaded: false };
    pub static mut BindVideoCaptureStreamBufferNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) -> c_void> = FnPtr { f: super::failing::BindVideoCaptureStreamBufferNV, is_loaded: false };
    pub static mut BindVideoCaptureStreamTextureNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) -> c_void> = FnPtr { f: super::failing::BindVideoCaptureStreamTextureNV, is_loaded: false };
    pub static mut Binormal3bEXT: FnPtr<extern "C" fn(bx: GLbyte, by: GLbyte, bz: GLbyte) -> c_void> = FnPtr { f: super::failing::Binormal3bEXT, is_loaded: false };
    pub static mut Binormal3bvEXT: FnPtr<extern "C" fn(v: *GLbyte) -> c_void> = FnPtr { f: super::failing::Binormal3bvEXT, is_loaded: false };
    pub static mut Binormal3dEXT: FnPtr<extern "C" fn(bx: GLdouble, by: GLdouble, bz: GLdouble) -> c_void> = FnPtr { f: super::failing::Binormal3dEXT, is_loaded: false };
    pub static mut Binormal3dvEXT: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::Binormal3dvEXT, is_loaded: false };
    pub static mut Binormal3fEXT: FnPtr<extern "C" fn(bx: GLfloat, by: GLfloat, bz: GLfloat) -> c_void> = FnPtr { f: super::failing::Binormal3fEXT, is_loaded: false };
    pub static mut Binormal3fvEXT: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Binormal3fvEXT, is_loaded: false };
    pub static mut Binormal3iEXT: FnPtr<extern "C" fn(bx: GLint, by: GLint, bz: GLint) -> c_void> = FnPtr { f: super::failing::Binormal3iEXT, is_loaded: false };
    pub static mut Binormal3ivEXT: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::Binormal3ivEXT, is_loaded: false };
    pub static mut Binormal3sEXT: FnPtr<extern "C" fn(bx: GLshort, by: GLshort, bz: GLshort) -> c_void> = FnPtr { f: super::failing::Binormal3sEXT, is_loaded: false };
    pub static mut Binormal3svEXT: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::Binormal3svEXT, is_loaded: false };
    pub static mut BinormalPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::BinormalPointerEXT, is_loaded: false };
    pub static mut Bitmap: FnPtr<extern "C" fn(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) -> c_void> = FnPtr { f: super::failing::Bitmap, is_loaded: false };
    pub static mut BitmapxOES: FnPtr<extern "C" fn(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *GLubyte) -> c_void> = FnPtr { f: super::failing::BitmapxOES, is_loaded: false };
    pub static mut BlendColor: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void> = FnPtr { f: super::failing::BlendColor, is_loaded: false };
    pub static mut BlendColorEXT: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void> = FnPtr { f: super::failing::BlendColorEXT, is_loaded: false };
    pub static mut BlendColorxOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void> = FnPtr { f: super::failing::BlendColorxOES, is_loaded: false };
    pub static mut BlendEquation: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquation, is_loaded: false };
    pub static mut BlendEquationEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationEXT, is_loaded: false };
    pub static mut BlendEquationIndexedAMD: FnPtr<extern "C" fn(buf: GLuint, mode: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationIndexedAMD, is_loaded: false };
    pub static mut BlendEquationOES: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationOES, is_loaded: false };
    pub static mut BlendEquationSeparate: FnPtr<extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationSeparate, is_loaded: false };
    pub static mut BlendEquationSeparateEXT: FnPtr<extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationSeparateEXT, is_loaded: false };
    pub static mut BlendEquationSeparateIndexedAMD: FnPtr<extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationSeparateIndexedAMD, is_loaded: false };
    pub static mut BlendEquationSeparateOES: FnPtr<extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationSeparateOES, is_loaded: false };
    pub static mut BlendEquationSeparatei: FnPtr<extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationSeparatei, is_loaded: false };
    pub static mut BlendEquationSeparateiARB: FnPtr<extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationSeparateiARB, is_loaded: false };
    pub static mut BlendEquationi: FnPtr<extern "C" fn(buf: GLuint, mode: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationi, is_loaded: false };
    pub static mut BlendEquationiARB: FnPtr<extern "C" fn(buf: GLuint, mode: GLenum) -> c_void> = FnPtr { f: super::failing::BlendEquationiARB, is_loaded: false };
    pub static mut BlendFunc: FnPtr<extern "C" fn(sfactor: GLenum, dfactor: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFunc, is_loaded: false };
    pub static mut BlendFuncIndexedAMD: FnPtr<extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFuncIndexedAMD, is_loaded: false };
    pub static mut BlendFuncSeparate: FnPtr<extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFuncSeparate, is_loaded: false };
    pub static mut BlendFuncSeparateEXT: FnPtr<extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFuncSeparateEXT, is_loaded: false };
    pub static mut BlendFuncSeparateINGR: FnPtr<extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFuncSeparateINGR, is_loaded: false };
    pub static mut BlendFuncSeparateIndexedAMD: FnPtr<extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFuncSeparateIndexedAMD, is_loaded: false };
    pub static mut BlendFuncSeparateOES: FnPtr<extern "C" fn(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFuncSeparateOES, is_loaded: false };
    pub static mut BlendFuncSeparatei: FnPtr<extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFuncSeparatei, is_loaded: false };
    pub static mut BlendFuncSeparateiARB: FnPtr<extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFuncSeparateiARB, is_loaded: false };
    pub static mut BlendFunci: FnPtr<extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFunci, is_loaded: false };
    pub static mut BlendFunciARB: FnPtr<extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void> = FnPtr { f: super::failing::BlendFunciARB, is_loaded: false };
    pub static mut BlendParameteriNV: FnPtr<extern "C" fn(pname: GLenum, value: GLint) -> c_void> = FnPtr { f: super::failing::BlendParameteriNV, is_loaded: false };
    pub static mut BlendBarrierNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::BlendBarrierNV, is_loaded: false };
    pub static mut BlitFramebuffer: FnPtr<extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void> = FnPtr { f: super::failing::BlitFramebuffer, is_loaded: false };
    pub static mut BlitFramebufferANGLE: FnPtr<extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void> = FnPtr { f: super::failing::BlitFramebufferANGLE, is_loaded: false };
    pub static mut BlitFramebufferEXT: FnPtr<extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void> = FnPtr { f: super::failing::BlitFramebufferEXT, is_loaded: false };
    pub static mut BlitFramebufferNV: FnPtr<extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void> = FnPtr { f: super::failing::BlitFramebufferNV, is_loaded: false };
    pub static mut BufferAddressRangeNV: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::BufferAddressRangeNV, is_loaded: false };
    pub static mut BufferData: FnPtr<extern "C" fn(target: GLenum, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void> = FnPtr { f: super::failing::BufferData, is_loaded: false };
    pub static mut BufferDataARB: FnPtr<extern "C" fn(target: GLenum, size: GLsizeiptrARB, data: *GLvoid, usage: GLenum) -> c_void> = FnPtr { f: super::failing::BufferDataARB, is_loaded: false };
    pub static mut BufferParameteriAPPLE: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::BufferParameteriAPPLE, is_loaded: false };
    pub static mut BufferStorage: FnPtr<extern "C" fn(target: GLenum, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void> = FnPtr { f: super::failing::BufferStorage, is_loaded: false };
    pub static mut BufferSubData: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::BufferSubData, is_loaded: false };
    pub static mut BufferSubDataARB: FnPtr<extern "C" fn(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::BufferSubDataARB, is_loaded: false };
    pub static mut CallList: FnPtr<extern "C" fn(list: GLuint) -> c_void> = FnPtr { f: super::failing::CallList, is_loaded: false };
    pub static mut CallLists: FnPtr<extern "C" fn(n: GLsizei, type_: GLenum, lists: *GLvoid) -> c_void> = FnPtr { f: super::failing::CallLists, is_loaded: false };
    pub static mut CheckFramebufferStatus: FnPtr<extern "C" fn(target: GLenum) -> GLenum> = FnPtr { f: super::failing::CheckFramebufferStatus, is_loaded: false };
    pub static mut CheckFramebufferStatusEXT: FnPtr<extern "C" fn(target: GLenum) -> GLenum> = FnPtr { f: super::failing::CheckFramebufferStatusEXT, is_loaded: false };
    pub static mut CheckFramebufferStatusOES: FnPtr<extern "C" fn(target: GLenum) -> GLenum> = FnPtr { f: super::failing::CheckFramebufferStatusOES, is_loaded: false };
    pub static mut CheckNamedFramebufferStatusEXT: FnPtr<extern "C" fn(framebuffer: GLuint, target: GLenum) -> GLenum> = FnPtr { f: super::failing::CheckNamedFramebufferStatusEXT, is_loaded: false };
    pub static mut ClampColor: FnPtr<extern "C" fn(target: GLenum, clamp: GLenum) -> c_void> = FnPtr { f: super::failing::ClampColor, is_loaded: false };
    pub static mut ClampColorARB: FnPtr<extern "C" fn(target: GLenum, clamp: GLenum) -> c_void> = FnPtr { f: super::failing::ClampColorARB, is_loaded: false };
    pub static mut Clear: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::Clear, is_loaded: false };
    pub static mut ClearAccum: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void> = FnPtr { f: super::failing::ClearAccum, is_loaded: false };
    pub static mut ClearAccumxOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void> = FnPtr { f: super::failing::ClearAccumxOES, is_loaded: false };
    pub static mut ClearBufferData: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void> = FnPtr { f: super::failing::ClearBufferData, is_loaded: false };
    pub static mut ClearBufferSubData: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *c_void) -> c_void> = FnPtr { f: super::failing::ClearBufferSubData, is_loaded: false };
    pub static mut ClearBufferfi: FnPtr<extern "C" fn(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> c_void> = FnPtr { f: super::failing::ClearBufferfi, is_loaded: false };
    pub static mut ClearBufferfv: FnPtr<extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ClearBufferfv, is_loaded: false };
    pub static mut ClearBufferiv: FnPtr<extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLint) -> c_void> = FnPtr { f: super::failing::ClearBufferiv, is_loaded: false };
    pub static mut ClearBufferuiv: FnPtr<extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ClearBufferuiv, is_loaded: false };
    pub static mut ClearColor: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void> = FnPtr { f: super::failing::ClearColor, is_loaded: false };
    pub static mut ClearColorIiEXT: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void> = FnPtr { f: super::failing::ClearColorIiEXT, is_loaded: false };
    pub static mut ClearColorIuiEXT: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void> = FnPtr { f: super::failing::ClearColorIuiEXT, is_loaded: false };
    pub static mut ClearColorx: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void> = FnPtr { f: super::failing::ClearColorx, is_loaded: false };
    pub static mut ClearColorxOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void> = FnPtr { f: super::failing::ClearColorxOES, is_loaded: false };
    pub static mut ClearDepth: FnPtr<extern "C" fn(depth: GLdouble) -> c_void> = FnPtr { f: super::failing::ClearDepth, is_loaded: false };
    pub static mut ClearDepthdNV: FnPtr<extern "C" fn(depth: GLdouble) -> c_void> = FnPtr { f: super::failing::ClearDepthdNV, is_loaded: false };
    pub static mut ClearDepthf: FnPtr<extern "C" fn(d: GLfloat) -> c_void> = FnPtr { f: super::failing::ClearDepthf, is_loaded: false };
    pub static mut ClearDepthfOES: FnPtr<extern "C" fn(depth: GLclampf) -> c_void> = FnPtr { f: super::failing::ClearDepthfOES, is_loaded: false };
    pub static mut ClearDepthx: FnPtr<extern "C" fn(depth: GLfixed) -> c_void> = FnPtr { f: super::failing::ClearDepthx, is_loaded: false };
    pub static mut ClearDepthxOES: FnPtr<extern "C" fn(depth: GLfixed) -> c_void> = FnPtr { f: super::failing::ClearDepthxOES, is_loaded: false };
    pub static mut ClearIndex: FnPtr<extern "C" fn(c: GLfloat) -> c_void> = FnPtr { f: super::failing::ClearIndex, is_loaded: false };
    pub static mut ClearNamedBufferDataEXT: FnPtr<extern "C" fn(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void> = FnPtr { f: super::failing::ClearNamedBufferDataEXT, is_loaded: false };
    pub static mut ClearNamedBufferSubDataEXT: FnPtr<extern "C" fn(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, offset: GLsizeiptr, size: GLsizeiptr, data: *c_void) -> c_void> = FnPtr { f: super::failing::ClearNamedBufferSubDataEXT, is_loaded: false };
    pub static mut ClearStencil: FnPtr<extern "C" fn(s: GLint) -> c_void> = FnPtr { f: super::failing::ClearStencil, is_loaded: false };
    pub static mut ClearTexImage: FnPtr<extern "C" fn(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *c_void) -> c_void> = FnPtr { f: super::failing::ClearTexImage, is_loaded: false };
    pub static mut ClearTexSubImage: FnPtr<extern "C" fn(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *c_void) -> c_void> = FnPtr { f: super::failing::ClearTexSubImage, is_loaded: false };
    pub static mut ClientActiveTexture: FnPtr<extern "C" fn(texture: GLenum) -> c_void> = FnPtr { f: super::failing::ClientActiveTexture, is_loaded: false };
    pub static mut ClientActiveTextureARB: FnPtr<extern "C" fn(texture: GLenum) -> c_void> = FnPtr { f: super::failing::ClientActiveTextureARB, is_loaded: false };
    pub static mut ClientActiveVertexStreamATI: FnPtr<extern "C" fn(stream: GLenum) -> c_void> = FnPtr { f: super::failing::ClientActiveVertexStreamATI, is_loaded: false };
    pub static mut ClientAttribDefaultEXT: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::ClientAttribDefaultEXT, is_loaded: false };
    pub static mut ClientWaitSync: FnPtr<extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum> = FnPtr { f: super::failing::ClientWaitSync, is_loaded: false };
    pub static mut ClientWaitSyncAPPLE: FnPtr<extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum> = FnPtr { f: super::failing::ClientWaitSyncAPPLE, is_loaded: false };
    pub static mut ClipControlARB: FnPtr<extern "C" fn(origin: GLenum, depth: GLenum) -> c_void> = FnPtr { f: super::failing::ClipControlARB, is_loaded: false };
    pub static mut ClipPlane: FnPtr<extern "C" fn(plane: GLenum, equation: *GLdouble) -> c_void> = FnPtr { f: super::failing::ClipPlane, is_loaded: false };
    pub static mut ClipPlanef: FnPtr<extern "C" fn(p: GLenum, eqn: *GLfloat) -> c_void> = FnPtr { f: super::failing::ClipPlanef, is_loaded: false };
    pub static mut ClipPlanefIMG: FnPtr<extern "C" fn(p: GLenum, eqn: *GLfloat) -> c_void> = FnPtr { f: super::failing::ClipPlanefIMG, is_loaded: false };
    pub static mut ClipPlanefOES: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void> = FnPtr { f: super::failing::ClipPlanefOES, is_loaded: false };
    pub static mut ClipPlanex: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void> = FnPtr { f: super::failing::ClipPlanex, is_loaded: false };
    pub static mut ClipPlanexIMG: FnPtr<extern "C" fn(p: GLenum, eqn: *GLfixed) -> c_void> = FnPtr { f: super::failing::ClipPlanexIMG, is_loaded: false };
    pub static mut ClipPlanexOES: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void> = FnPtr { f: super::failing::ClipPlanexOES, is_loaded: false };
    pub static mut Color3b: FnPtr<extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void> = FnPtr { f: super::failing::Color3b, is_loaded: false };
    pub static mut Color3bv: FnPtr<extern "C" fn(v: *GLbyte) -> c_void> = FnPtr { f: super::failing::Color3bv, is_loaded: false };
    pub static mut Color3d: FnPtr<extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void> = FnPtr { f: super::failing::Color3d, is_loaded: false };
    pub static mut Color3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::Color3dv, is_loaded: false };
    pub static mut Color3f: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void> = FnPtr { f: super::failing::Color3f, is_loaded: false };
    pub static mut Color3fVertex3fSUN: FnPtr<extern "C" fn(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::Color3fVertex3fSUN, is_loaded: false };
    pub static mut Color3fVertex3fvSUN: FnPtr<extern "C" fn(c: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Color3fVertex3fvSUN, is_loaded: false };
    pub static mut Color3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Color3fv, is_loaded: false };
    pub static mut Color3hNV: FnPtr<extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void> = FnPtr { f: super::failing::Color3hNV, is_loaded: false };
    pub static mut Color3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::Color3hvNV, is_loaded: false };
    pub static mut Color3i: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void> = FnPtr { f: super::failing::Color3i, is_loaded: false };
    pub static mut Color3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::Color3iv, is_loaded: false };
    pub static mut Color3s: FnPtr<extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void> = FnPtr { f: super::failing::Color3s, is_loaded: false };
    pub static mut Color3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::Color3sv, is_loaded: false };
    pub static mut Color3ub: FnPtr<extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void> = FnPtr { f: super::failing::Color3ub, is_loaded: false };
    pub static mut Color3ubv: FnPtr<extern "C" fn(v: *GLubyte) -> c_void> = FnPtr { f: super::failing::Color3ubv, is_loaded: false };
    pub static mut Color3ui: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void> = FnPtr { f: super::failing::Color3ui, is_loaded: false };
    pub static mut Color3uiv: FnPtr<extern "C" fn(v: *GLuint) -> c_void> = FnPtr { f: super::failing::Color3uiv, is_loaded: false };
    pub static mut Color3us: FnPtr<extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void> = FnPtr { f: super::failing::Color3us, is_loaded: false };
    pub static mut Color3usv: FnPtr<extern "C" fn(v: *GLushort) -> c_void> = FnPtr { f: super::failing::Color3usv, is_loaded: false };
    pub static mut Color3xOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed) -> c_void> = FnPtr { f: super::failing::Color3xOES, is_loaded: false };
    pub static mut Color3xvOES: FnPtr<extern "C" fn(components: *GLfixed) -> c_void> = FnPtr { f: super::failing::Color3xvOES, is_loaded: false };
    pub static mut Color4b: FnPtr<extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> c_void> = FnPtr { f: super::failing::Color4b, is_loaded: false };
    pub static mut Color4bv: FnPtr<extern "C" fn(v: *GLbyte) -> c_void> = FnPtr { f: super::failing::Color4bv, is_loaded: false };
    pub static mut Color4d: FnPtr<extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> c_void> = FnPtr { f: super::failing::Color4d, is_loaded: false };
    pub static mut Color4dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::Color4dv, is_loaded: false };
    pub static mut Color4f: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void> = FnPtr { f: super::failing::Color4f, is_loaded: false };
    pub static mut Color4fNormal3fVertex3fSUN: FnPtr<extern "C" fn(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::Color4fNormal3fVertex3fSUN, is_loaded: false };
    pub static mut Color4fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Color4fNormal3fVertex3fvSUN, is_loaded: false };
    pub static mut Color4fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Color4fv, is_loaded: false };
    pub static mut Color4hNV: FnPtr<extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) -> c_void> = FnPtr { f: super::failing::Color4hNV, is_loaded: false };
    pub static mut Color4hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::Color4hvNV, is_loaded: false };
    pub static mut Color4i: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void> = FnPtr { f: super::failing::Color4i, is_loaded: false };
    pub static mut Color4iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::Color4iv, is_loaded: false };
    pub static mut Color4s: FnPtr<extern "C" fn(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> c_void> = FnPtr { f: super::failing::Color4s, is_loaded: false };
    pub static mut Color4sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::Color4sv, is_loaded: false };
    pub static mut Color4ub: FnPtr<extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> c_void> = FnPtr { f: super::failing::Color4ub, is_loaded: false };
    pub static mut Color4ubVertex2fSUN: FnPtr<extern "C" fn(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::Color4ubVertex2fSUN, is_loaded: false };
    pub static mut Color4ubVertex2fvSUN: FnPtr<extern "C" fn(c: *GLubyte, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Color4ubVertex2fvSUN, is_loaded: false };
    pub static mut Color4ubVertex3fSUN: FnPtr<extern "C" fn(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::Color4ubVertex3fSUN, is_loaded: false };
    pub static mut Color4ubVertex3fvSUN: FnPtr<extern "C" fn(c: *GLubyte, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Color4ubVertex3fvSUN, is_loaded: false };
    pub static mut Color4ubv: FnPtr<extern "C" fn(v: *GLubyte) -> c_void> = FnPtr { f: super::failing::Color4ubv, is_loaded: false };
    pub static mut Color4ui: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void> = FnPtr { f: super::failing::Color4ui, is_loaded: false };
    pub static mut Color4uiv: FnPtr<extern "C" fn(v: *GLuint) -> c_void> = FnPtr { f: super::failing::Color4uiv, is_loaded: false };
    pub static mut Color4us: FnPtr<extern "C" fn(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> c_void> = FnPtr { f: super::failing::Color4us, is_loaded: false };
    pub static mut Color4usv: FnPtr<extern "C" fn(v: *GLushort) -> c_void> = FnPtr { f: super::failing::Color4usv, is_loaded: false };
    pub static mut Color4x: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void> = FnPtr { f: super::failing::Color4x, is_loaded: false };
    pub static mut Color4xOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void> = FnPtr { f: super::failing::Color4xOES, is_loaded: false };
    pub static mut Color4xvOES: FnPtr<extern "C" fn(components: *GLfixed) -> c_void> = FnPtr { f: super::failing::Color4xvOES, is_loaded: false };
    pub static mut ColorFormatNV: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::ColorFormatNV, is_loaded: false };
    pub static mut ColorFragmentOp1ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void> = FnPtr { f: super::failing::ColorFragmentOp1ATI, is_loaded: false };
    pub static mut ColorFragmentOp2ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void> = FnPtr { f: super::failing::ColorFragmentOp2ATI, is_loaded: false };
    pub static mut ColorFragmentOp3ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void> = FnPtr { f: super::failing::ColorFragmentOp3ATI, is_loaded: false };
    pub static mut ColorMask: FnPtr<extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void> = FnPtr { f: super::failing::ColorMask, is_loaded: false };
    pub static mut ColorMaskIndexedEXT: FnPtr<extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void> = FnPtr { f: super::failing::ColorMaskIndexedEXT, is_loaded: false };
    pub static mut ColorMaski: FnPtr<extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void> = FnPtr { f: super::failing::ColorMaski, is_loaded: false };
    pub static mut ColorMaterial: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void> = FnPtr { f: super::failing::ColorMaterial, is_loaded: false };
    pub static mut ColorP3ui: FnPtr<extern "C" fn(type_: GLenum, color: GLuint) -> c_void> = FnPtr { f: super::failing::ColorP3ui, is_loaded: false };
    pub static mut ColorP3uiv: FnPtr<extern "C" fn(type_: GLenum, color: *GLuint) -> c_void> = FnPtr { f: super::failing::ColorP3uiv, is_loaded: false };
    pub static mut ColorP4ui: FnPtr<extern "C" fn(type_: GLenum, color: GLuint) -> c_void> = FnPtr { f: super::failing::ColorP4ui, is_loaded: false };
    pub static mut ColorP4uiv: FnPtr<extern "C" fn(type_: GLenum, color: *GLuint) -> c_void> = FnPtr { f: super::failing::ColorP4uiv, is_loaded: false };
    pub static mut ColorPointer: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::ColorPointer, is_loaded: false };
    pub static mut ColorPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::ColorPointerEXT, is_loaded: false };
    pub static mut ColorPointerListIBM: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void> = FnPtr { f: super::failing::ColorPointerListIBM, is_loaded: false };
    pub static mut ColorPointervINTEL: FnPtr<extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void> = FnPtr { f: super::failing::ColorPointervINTEL, is_loaded: false };
    pub static mut ColorSubTable: FnPtr<extern "C" fn(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::ColorSubTable, is_loaded: false };
    pub static mut ColorSubTableEXT: FnPtr<extern "C" fn(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::ColorSubTableEXT, is_loaded: false };
    pub static mut ColorTable: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void> = FnPtr { f: super::failing::ColorTable, is_loaded: false };
    pub static mut ColorTableEXT: FnPtr<extern "C" fn(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void> = FnPtr { f: super::failing::ColorTableEXT, is_loaded: false };
    pub static mut ColorTableParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ColorTableParameterfv, is_loaded: false };
    pub static mut ColorTableParameterfvSGI: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ColorTableParameterfvSGI, is_loaded: false };
    pub static mut ColorTableParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::ColorTableParameteriv, is_loaded: false };
    pub static mut ColorTableParameterivSGI: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::ColorTableParameterivSGI, is_loaded: false };
    pub static mut ColorTableSGI: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void> = FnPtr { f: super::failing::ColorTableSGI, is_loaded: false };
    pub static mut CombinerInputNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void> = FnPtr { f: super::failing::CombinerInputNV, is_loaded: false };
    pub static mut CombinerOutputNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) -> c_void> = FnPtr { f: super::failing::CombinerOutputNV, is_loaded: false };
    pub static mut CombinerParameterfNV: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::CombinerParameterfNV, is_loaded: false };
    pub static mut CombinerParameterfvNV: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::CombinerParameterfvNV, is_loaded: false };
    pub static mut CombinerParameteriNV: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::CombinerParameteriNV, is_loaded: false };
    pub static mut CombinerParameterivNV: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::CombinerParameterivNV, is_loaded: false };
    pub static mut CombinerStageParameterfvNV: FnPtr<extern "C" fn(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::CombinerStageParameterfvNV, is_loaded: false };
    pub static mut CompileShader: FnPtr<extern "C" fn(shader: GLuint) -> c_void> = FnPtr { f: super::failing::CompileShader, is_loaded: false };
    pub static mut CompileShaderARB: FnPtr<extern "C" fn(shaderObj: GLhandleARB) -> c_void> = FnPtr { f: super::failing::CompileShaderARB, is_loaded: false };
    pub static mut CompileShaderIncludeARB: FnPtr<extern "C" fn(shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) -> c_void> = FnPtr { f: super::failing::CompileShaderIncludeARB, is_loaded: false };
    pub static mut CompressedMultiTexImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedMultiTexImage1DEXT, is_loaded: false };
    pub static mut CompressedMultiTexImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedMultiTexImage2DEXT, is_loaded: false };
    pub static mut CompressedMultiTexImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedMultiTexImage3DEXT, is_loaded: false };
    pub static mut CompressedMultiTexSubImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedMultiTexSubImage1DEXT, is_loaded: false };
    pub static mut CompressedMultiTexSubImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedMultiTexSubImage2DEXT, is_loaded: false };
    pub static mut CompressedMultiTexSubImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedMultiTexSubImage3DEXT, is_loaded: false };
    pub static mut CompressedTexImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexImage1D, is_loaded: false };
    pub static mut CompressedTexImage1DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexImage1DARB, is_loaded: false };
    pub static mut CompressedTexImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexImage2D, is_loaded: false };
    pub static mut CompressedTexImage2DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexImage2DARB, is_loaded: false };
    pub static mut CompressedTexImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexImage3D, is_loaded: false };
    pub static mut CompressedTexImage3DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexImage3DARB, is_loaded: false };
    pub static mut CompressedTexImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexImage3DOES, is_loaded: false };
    pub static mut CompressedTexSubImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexSubImage1D, is_loaded: false };
    pub static mut CompressedTexSubImage1DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexSubImage1DARB, is_loaded: false };
    pub static mut CompressedTexSubImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexSubImage2D, is_loaded: false };
    pub static mut CompressedTexSubImage2DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexSubImage2DARB, is_loaded: false };
    pub static mut CompressedTexSubImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexSubImage3D, is_loaded: false };
    pub static mut CompressedTexSubImage3DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexSubImage3DARB, is_loaded: false };
    pub static mut CompressedTexSubImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTexSubImage3DOES, is_loaded: false };
    pub static mut CompressedTextureImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTextureImage1DEXT, is_loaded: false };
    pub static mut CompressedTextureImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTextureImage2DEXT, is_loaded: false };
    pub static mut CompressedTextureImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTextureImage3DEXT, is_loaded: false };
    pub static mut CompressedTextureSubImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTextureSubImage1DEXT, is_loaded: false };
    pub static mut CompressedTextureSubImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTextureSubImage2DEXT, is_loaded: false };
    pub static mut CompressedTextureSubImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void> = FnPtr { f: super::failing::CompressedTextureSubImage3DEXT, is_loaded: false };
    pub static mut ConvolutionFilter1D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void> = FnPtr { f: super::failing::ConvolutionFilter1D, is_loaded: false };
    pub static mut ConvolutionFilter1DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void> = FnPtr { f: super::failing::ConvolutionFilter1DEXT, is_loaded: false };
    pub static mut ConvolutionFilter2D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void> = FnPtr { f: super::failing::ConvolutionFilter2D, is_loaded: false };
    pub static mut ConvolutionFilter2DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void> = FnPtr { f: super::failing::ConvolutionFilter2DEXT, is_loaded: false };
    pub static mut ConvolutionParameterf: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat) -> c_void> = FnPtr { f: super::failing::ConvolutionParameterf, is_loaded: false };
    pub static mut ConvolutionParameterfEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat) -> c_void> = FnPtr { f: super::failing::ConvolutionParameterfEXT, is_loaded: false };
    pub static mut ConvolutionParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ConvolutionParameterfv, is_loaded: false };
    pub static mut ConvolutionParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ConvolutionParameterfvEXT, is_loaded: false };
    pub static mut ConvolutionParameteri: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: GLint) -> c_void> = FnPtr { f: super::failing::ConvolutionParameteri, is_loaded: false };
    pub static mut ConvolutionParameteriEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: GLint) -> c_void> = FnPtr { f: super::failing::ConvolutionParameteriEXT, is_loaded: false };
    pub static mut ConvolutionParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::ConvolutionParameteriv, is_loaded: false };
    pub static mut ConvolutionParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::ConvolutionParameterivEXT, is_loaded: false };
    pub static mut ConvolutionParameterxOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::ConvolutionParameterxOES, is_loaded: false };
    pub static mut ConvolutionParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::ConvolutionParameterxvOES, is_loaded: false };
    pub static mut CopyBufferSubData: FnPtr<extern "C" fn(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::CopyBufferSubData, is_loaded: false };
    pub static mut CopyColorSubTable: FnPtr<extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyColorSubTable, is_loaded: false };
    pub static mut CopyColorSubTableEXT: FnPtr<extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyColorSubTableEXT, is_loaded: false };
    pub static mut CopyColorTable: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyColorTable, is_loaded: false };
    pub static mut CopyColorTableSGI: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyColorTableSGI, is_loaded: false };
    pub static mut CopyConvolutionFilter1D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyConvolutionFilter1D, is_loaded: false };
    pub static mut CopyConvolutionFilter1DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyConvolutionFilter1DEXT, is_loaded: false };
    pub static mut CopyConvolutionFilter2D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyConvolutionFilter2D, is_loaded: false };
    pub static mut CopyConvolutionFilter2DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyConvolutionFilter2DEXT, is_loaded: false };
    pub static mut CopyImageSubData: FnPtr<extern "C" fn(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyImageSubData, is_loaded: false };
    pub static mut CopyImageSubDataNV: FnPtr<extern "C" fn(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyImageSubDataNV, is_loaded: false };
    pub static mut CopyMultiTexImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void> = FnPtr { f: super::failing::CopyMultiTexImage1DEXT, is_loaded: false };
    pub static mut CopyMultiTexImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void> = FnPtr { f: super::failing::CopyMultiTexImage2DEXT, is_loaded: false };
    pub static mut CopyMultiTexSubImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyMultiTexSubImage1DEXT, is_loaded: false };
    pub static mut CopyMultiTexSubImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyMultiTexSubImage2DEXT, is_loaded: false };
    pub static mut CopyMultiTexSubImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyMultiTexSubImage3DEXT, is_loaded: false };
    pub static mut CopyPathNV: FnPtr<extern "C" fn(resultPath: GLuint, srcPath: GLuint) -> c_void> = FnPtr { f: super::failing::CopyPathNV, is_loaded: false };
    pub static mut CopyPixels: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum) -> c_void> = FnPtr { f: super::failing::CopyPixels, is_loaded: false };
    pub static mut CopyTexImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void> = FnPtr { f: super::failing::CopyTexImage1D, is_loaded: false };
    pub static mut CopyTexImage1DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void> = FnPtr { f: super::failing::CopyTexImage1DEXT, is_loaded: false };
    pub static mut CopyTexImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void> = FnPtr { f: super::failing::CopyTexImage2D, is_loaded: false };
    pub static mut CopyTexImage2DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void> = FnPtr { f: super::failing::CopyTexImage2DEXT, is_loaded: false };
    pub static mut CopyTexSubImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTexSubImage1D, is_loaded: false };
    pub static mut CopyTexSubImage1DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTexSubImage1DEXT, is_loaded: false };
    pub static mut CopyTexSubImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTexSubImage2D, is_loaded: false };
    pub static mut CopyTexSubImage2DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTexSubImage2DEXT, is_loaded: false };
    pub static mut CopyTexSubImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTexSubImage3D, is_loaded: false };
    pub static mut CopyTexSubImage3DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTexSubImage3DEXT, is_loaded: false };
    pub static mut CopyTexSubImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTexSubImage3DOES, is_loaded: false };
    pub static mut CopyTextureImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void> = FnPtr { f: super::failing::CopyTextureImage1DEXT, is_loaded: false };
    pub static mut CopyTextureImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void> = FnPtr { f: super::failing::CopyTextureImage2DEXT, is_loaded: false };
    pub static mut CopyTextureLevelsAPPLE: FnPtr<extern "C" fn(destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTextureLevelsAPPLE, is_loaded: false };
    pub static mut CopyTextureSubImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTextureSubImage1DEXT, is_loaded: false };
    pub static mut CopyTextureSubImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTextureSubImage2DEXT, is_loaded: false };
    pub static mut CopyTextureSubImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::CopyTextureSubImage3DEXT, is_loaded: false };
    pub static mut CoverFillPathInstancedNV: FnPtr<extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void> = FnPtr { f: super::failing::CoverFillPathInstancedNV, is_loaded: false };
    pub static mut CoverFillPathNV: FnPtr<extern "C" fn(path: GLuint, coverMode: GLenum) -> c_void> = FnPtr { f: super::failing::CoverFillPathNV, is_loaded: false };
    pub static mut CoverStrokePathInstancedNV: FnPtr<extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void> = FnPtr { f: super::failing::CoverStrokePathInstancedNV, is_loaded: false };
    pub static mut CoverStrokePathNV: FnPtr<extern "C" fn(path: GLuint, coverMode: GLenum) -> c_void> = FnPtr { f: super::failing::CoverStrokePathNV, is_loaded: false };
    pub static mut CoverageMaskNV: FnPtr<extern "C" fn(mask: GLboolean) -> c_void> = FnPtr { f: super::failing::CoverageMaskNV, is_loaded: false };
    pub static mut CoverageOperationNV: FnPtr<extern "C" fn(operation: GLenum) -> c_void> = FnPtr { f: super::failing::CoverageOperationNV, is_loaded: false };
    pub static mut CreateProgram: FnPtr<extern "C" fn() -> GLuint> = FnPtr { f: super::failing::CreateProgram, is_loaded: false };
    pub static mut CreateProgramObjectARB: FnPtr<extern "C" fn() -> GLhandleARB> = FnPtr { f: super::failing::CreateProgramObjectARB, is_loaded: false };
    pub static mut CreateShader: FnPtr<extern "C" fn(type_: GLenum) -> GLuint> = FnPtr { f: super::failing::CreateShader, is_loaded: false };
    pub static mut CreateShaderObjectARB: FnPtr<extern "C" fn(shaderType: GLenum) -> GLhandleARB> = FnPtr { f: super::failing::CreateShaderObjectARB, is_loaded: false };
    pub static mut CreateShaderProgramEXT: FnPtr<extern "C" fn(type_: GLenum, string: *GLchar) -> GLuint> = FnPtr { f: super::failing::CreateShaderProgramEXT, is_loaded: false };
    pub static mut CreateShaderProgramv: FnPtr<extern "C" fn(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint> = FnPtr { f: super::failing::CreateShaderProgramv, is_loaded: false };
    pub static mut CreateShaderProgramvEXT: FnPtr<extern "C" fn(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint> = FnPtr { f: super::failing::CreateShaderProgramvEXT, is_loaded: false };
    pub static mut CreateSyncFromCLeventARB: FnPtr<extern "C" fn(context: *_cl_context, event: *_cl_event, flags: GLbitfield) -> GLsync> = FnPtr { f: super::failing::CreateSyncFromCLeventARB, is_loaded: false };
    pub static mut CullFace: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::CullFace, is_loaded: false };
    pub static mut CullParameterdvEXT: FnPtr<extern "C" fn(pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::CullParameterdvEXT, is_loaded: false };
    pub static mut CullParameterfvEXT: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::CullParameterfvEXT, is_loaded: false };
    pub static mut CurrentPaletteMatrixARB: FnPtr<extern "C" fn(index: GLint) -> c_void> = FnPtr { f: super::failing::CurrentPaletteMatrixARB, is_loaded: false };
    pub static mut CurrentPaletteMatrixOES: FnPtr<extern "C" fn(matrixpaletteindex: GLuint) -> c_void> = FnPtr { f: super::failing::CurrentPaletteMatrixOES, is_loaded: false };
    pub static mut DebugMessageCallback: FnPtr<extern "C" fn(callback: GLDEBUGPROC, userParam: *c_void) -> c_void> = FnPtr { f: super::failing::DebugMessageCallback, is_loaded: false };
    pub static mut DebugMessageCallbackAMD: FnPtr<extern "C" fn(callback: GLDEBUGPROCAMD, userParam: *c_void) -> c_void> = FnPtr { f: super::failing::DebugMessageCallbackAMD, is_loaded: false };
    pub static mut DebugMessageCallbackARB: FnPtr<extern "C" fn(callback: GLDEBUGPROCARB, userParam: *c_void) -> c_void> = FnPtr { f: super::failing::DebugMessageCallbackARB, is_loaded: false };
    pub static mut DebugMessageCallbackKHR: FnPtr<extern "C" fn(callback: GLDEBUGPROCKHR, userParam: *c_void) -> c_void> = FnPtr { f: super::failing::DebugMessageCallbackKHR, is_loaded: false };
    pub static mut DebugMessageControl: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void> = FnPtr { f: super::failing::DebugMessageControl, is_loaded: false };
    pub static mut DebugMessageControlARB: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void> = FnPtr { f: super::failing::DebugMessageControlARB, is_loaded: false };
    pub static mut DebugMessageControlKHR: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void> = FnPtr { f: super::failing::DebugMessageControlKHR, is_loaded: false };
    pub static mut DebugMessageEnableAMD: FnPtr<extern "C" fn(category: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void> = FnPtr { f: super::failing::DebugMessageEnableAMD, is_loaded: false };
    pub static mut DebugMessageInsert: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void> = FnPtr { f: super::failing::DebugMessageInsert, is_loaded: false };
    pub static mut DebugMessageInsertAMD: FnPtr<extern "C" fn(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *GLchar) -> c_void> = FnPtr { f: super::failing::DebugMessageInsertAMD, is_loaded: false };
    pub static mut DebugMessageInsertARB: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void> = FnPtr { f: super::failing::DebugMessageInsertARB, is_loaded: false };
    pub static mut DebugMessageInsertKHR: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void> = FnPtr { f: super::failing::DebugMessageInsertKHR, is_loaded: false };
    pub static mut DeformSGIX: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::DeformSGIX, is_loaded: false };
    pub static mut DeformationMap3dSGIX: FnPtr<extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *GLdouble) -> c_void> = FnPtr { f: super::failing::DeformationMap3dSGIX, is_loaded: false };
    pub static mut DeformationMap3fSGIX: FnPtr<extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::DeformationMap3fSGIX, is_loaded: false };
    pub static mut DeleteAsyncMarkersSGIX: FnPtr<extern "C" fn(marker: GLuint, range: GLsizei) -> c_void> = FnPtr { f: super::failing::DeleteAsyncMarkersSGIX, is_loaded: false };
    pub static mut DeleteBuffers: FnPtr<extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteBuffers, is_loaded: false };
    pub static mut DeleteBuffersARB: FnPtr<extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteBuffersARB, is_loaded: false };
    pub static mut DeleteFencesAPPLE: FnPtr<extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteFencesAPPLE, is_loaded: false };
    pub static mut DeleteFencesNV: FnPtr<extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteFencesNV, is_loaded: false };
    pub static mut DeleteFragmentShaderATI: FnPtr<extern "C" fn(id: GLuint) -> c_void> = FnPtr { f: super::failing::DeleteFragmentShaderATI, is_loaded: false };
    pub static mut DeleteFramebuffers: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteFramebuffers, is_loaded: false };
    pub static mut DeleteFramebuffersEXT: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteFramebuffersEXT, is_loaded: false };
    pub static mut DeleteFramebuffersOES: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteFramebuffersOES, is_loaded: false };
    pub static mut DeleteLists: FnPtr<extern "C" fn(list: GLuint, range: GLsizei) -> c_void> = FnPtr { f: super::failing::DeleteLists, is_loaded: false };
    pub static mut DeleteNamedStringARB: FnPtr<extern "C" fn(namelen: GLint, name: *GLchar) -> c_void> = FnPtr { f: super::failing::DeleteNamedStringARB, is_loaded: false };
    pub static mut DeleteNamesAMD: FnPtr<extern "C" fn(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteNamesAMD, is_loaded: false };
    pub static mut DeleteObjectARB: FnPtr<extern "C" fn(obj: GLhandleARB) -> c_void> = FnPtr { f: super::failing::DeleteObjectARB, is_loaded: false };
    pub static mut DeleteOcclusionQueriesNV: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteOcclusionQueriesNV, is_loaded: false };
    pub static mut DeletePathsNV: FnPtr<extern "C" fn(path: GLuint, range: GLsizei) -> c_void> = FnPtr { f: super::failing::DeletePathsNV, is_loaded: false };
    pub static mut DeletePerfMonitorsAMD: FnPtr<extern "C" fn(n: GLsizei, monitors: *GLuint) -> c_void> = FnPtr { f: super::failing::DeletePerfMonitorsAMD, is_loaded: false };
    pub static mut DeleteProgram: FnPtr<extern "C" fn(program: GLuint) -> c_void> = FnPtr { f: super::failing::DeleteProgram, is_loaded: false };
    pub static mut DeleteProgramPipelines: FnPtr<extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteProgramPipelines, is_loaded: false };
    pub static mut DeleteProgramPipelinesEXT: FnPtr<extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteProgramPipelinesEXT, is_loaded: false };
    pub static mut DeleteProgramsARB: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteProgramsARB, is_loaded: false };
    pub static mut DeleteProgramsNV: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteProgramsNV, is_loaded: false };
    pub static mut DeleteQueries: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteQueries, is_loaded: false };
    pub static mut DeleteQueriesARB: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteQueriesARB, is_loaded: false };
    pub static mut DeleteQueriesEXT: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteQueriesEXT, is_loaded: false };
    pub static mut DeleteRenderbuffers: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteRenderbuffers, is_loaded: false };
    pub static mut DeleteRenderbuffersEXT: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteRenderbuffersEXT, is_loaded: false };
    pub static mut DeleteRenderbuffersOES: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteRenderbuffersOES, is_loaded: false };
    pub static mut DeleteSamplers: FnPtr<extern "C" fn(count: GLsizei, samplers: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteSamplers, is_loaded: false };
    pub static mut DeleteShader: FnPtr<extern "C" fn(shader: GLuint) -> c_void> = FnPtr { f: super::failing::DeleteShader, is_loaded: false };
    pub static mut DeleteSync: FnPtr<extern "C" fn(sync: GLsync) -> c_void> = FnPtr { f: super::failing::DeleteSync, is_loaded: false };
    pub static mut DeleteSyncAPPLE: FnPtr<extern "C" fn(sync: GLsync) -> c_void> = FnPtr { f: super::failing::DeleteSyncAPPLE, is_loaded: false };
    pub static mut DeleteTextures: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteTextures, is_loaded: false };
    pub static mut DeleteTexturesEXT: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteTexturesEXT, is_loaded: false };
    pub static mut DeleteTransformFeedbacks: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteTransformFeedbacks, is_loaded: false };
    pub static mut DeleteTransformFeedbacksNV: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteTransformFeedbacksNV, is_loaded: false };
    pub static mut DeleteVertexArrays: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteVertexArrays, is_loaded: false };
    pub static mut DeleteVertexArraysAPPLE: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteVertexArraysAPPLE, is_loaded: false };
    pub static mut DeleteVertexArraysOES: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void> = FnPtr { f: super::failing::DeleteVertexArraysOES, is_loaded: false };
    pub static mut DeleteVertexShaderEXT: FnPtr<extern "C" fn(id: GLuint) -> c_void> = FnPtr { f: super::failing::DeleteVertexShaderEXT, is_loaded: false };
    pub static mut DepthBoundsEXT: FnPtr<extern "C" fn(zmin: GLclampd, zmax: GLclampd) -> c_void> = FnPtr { f: super::failing::DepthBoundsEXT, is_loaded: false };
    pub static mut DepthBoundsdNV: FnPtr<extern "C" fn(zmin: GLdouble, zmax: GLdouble) -> c_void> = FnPtr { f: super::failing::DepthBoundsdNV, is_loaded: false };
    pub static mut DepthFunc: FnPtr<extern "C" fn(func: GLenum) -> c_void> = FnPtr { f: super::failing::DepthFunc, is_loaded: false };
    pub static mut DepthMask: FnPtr<extern "C" fn(flag: GLboolean) -> c_void> = FnPtr { f: super::failing::DepthMask, is_loaded: false };
    pub static mut DepthRange: FnPtr<extern "C" fn(near: GLdouble, far: GLdouble) -> c_void> = FnPtr { f: super::failing::DepthRange, is_loaded: false };
    pub static mut DepthRangeArrayv: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::DepthRangeArrayv, is_loaded: false };
    pub static mut DepthRangeIndexed: FnPtr<extern "C" fn(index: GLuint, n: GLdouble, f: GLdouble) -> c_void> = FnPtr { f: super::failing::DepthRangeIndexed, is_loaded: false };
    pub static mut DepthRangedNV: FnPtr<extern "C" fn(zNear: GLdouble, zFar: GLdouble) -> c_void> = FnPtr { f: super::failing::DepthRangedNV, is_loaded: false };
    pub static mut DepthRangef: FnPtr<extern "C" fn(n: GLfloat, f: GLfloat) -> c_void> = FnPtr { f: super::failing::DepthRangef, is_loaded: false };
    pub static mut DepthRangefOES: FnPtr<extern "C" fn(n: GLclampf, f: GLclampf) -> c_void> = FnPtr { f: super::failing::DepthRangefOES, is_loaded: false };
    pub static mut DepthRangex: FnPtr<extern "C" fn(n: GLfixed, f: GLfixed) -> c_void> = FnPtr { f: super::failing::DepthRangex, is_loaded: false };
    pub static mut DepthRangexOES: FnPtr<extern "C" fn(n: GLfixed, f: GLfixed) -> c_void> = FnPtr { f: super::failing::DepthRangexOES, is_loaded: false };
    pub static mut DetachObjectARB: FnPtr<extern "C" fn(containerObj: GLhandleARB, attachedObj: GLhandleARB) -> c_void> = FnPtr { f: super::failing::DetachObjectARB, is_loaded: false };
    pub static mut DetachShader: FnPtr<extern "C" fn(program: GLuint, shader: GLuint) -> c_void> = FnPtr { f: super::failing::DetachShader, is_loaded: false };
    pub static mut DetailTexFuncSGIS: FnPtr<extern "C" fn(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::DetailTexFuncSGIS, is_loaded: false };
    pub static mut Disable: FnPtr<extern "C" fn(cap: GLenum) -> c_void> = FnPtr { f: super::failing::Disable, is_loaded: false };
    pub static mut DisableClientState: FnPtr<extern "C" fn(array: GLenum) -> c_void> = FnPtr { f: super::failing::DisableClientState, is_loaded: false };
    pub static mut DisableClientStateIndexedEXT: FnPtr<extern "C" fn(array: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::DisableClientStateIndexedEXT, is_loaded: false };
    pub static mut DisableClientStateiEXT: FnPtr<extern "C" fn(array: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::DisableClientStateiEXT, is_loaded: false };
    pub static mut DisableDriverControlQCOM: FnPtr<extern "C" fn(driverControl: GLuint) -> c_void> = FnPtr { f: super::failing::DisableDriverControlQCOM, is_loaded: false };
    pub static mut DisableIndexedEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::DisableIndexedEXT, is_loaded: false };
    pub static mut DisableVariantClientStateEXT: FnPtr<extern "C" fn(id: GLuint) -> c_void> = FnPtr { f: super::failing::DisableVariantClientStateEXT, is_loaded: false };
    pub static mut DisableVertexArrayAttribEXT: FnPtr<extern "C" fn(vaobj: GLuint, index: GLuint) -> c_void> = FnPtr { f: super::failing::DisableVertexArrayAttribEXT, is_loaded: false };
    pub static mut DisableVertexArrayEXT: FnPtr<extern "C" fn(vaobj: GLuint, array: GLenum) -> c_void> = FnPtr { f: super::failing::DisableVertexArrayEXT, is_loaded: false };
    pub static mut DisableVertexAttribAPPLE: FnPtr<extern "C" fn(index: GLuint, pname: GLenum) -> c_void> = FnPtr { f: super::failing::DisableVertexAttribAPPLE, is_loaded: false };
    pub static mut DisableVertexAttribArray: FnPtr<extern "C" fn(index: GLuint) -> c_void> = FnPtr { f: super::failing::DisableVertexAttribArray, is_loaded: false };
    pub static mut DisableVertexAttribArrayARB: FnPtr<extern "C" fn(index: GLuint) -> c_void> = FnPtr { f: super::failing::DisableVertexAttribArrayARB, is_loaded: false };
    pub static mut Disablei: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::Disablei, is_loaded: false };
    pub static mut DiscardFramebufferEXT: FnPtr<extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void> = FnPtr { f: super::failing::DiscardFramebufferEXT, is_loaded: false };
    pub static mut DispatchCompute: FnPtr<extern "C" fn(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> c_void> = FnPtr { f: super::failing::DispatchCompute, is_loaded: false };
    pub static mut DispatchComputeGroupSizeARB: FnPtr<extern "C" fn(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) -> c_void> = FnPtr { f: super::failing::DispatchComputeGroupSizeARB, is_loaded: false };
    pub static mut DispatchComputeIndirect: FnPtr<extern "C" fn(indirect: GLintptr) -> c_void> = FnPtr { f: super::failing::DispatchComputeIndirect, is_loaded: false };
    pub static mut DrawArrays: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawArrays, is_loaded: false };
    pub static mut DrawArraysEXT: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawArraysEXT, is_loaded: false };
    pub static mut DrawArraysIndirect: FnPtr<extern "C" fn(mode: GLenum, indirect: *GLvoid) -> c_void> = FnPtr { f: super::failing::DrawArraysIndirect, is_loaded: false };
    pub static mut DrawArraysInstanced: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawArraysInstanced, is_loaded: false };
    pub static mut DrawArraysInstancedANGLE: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawArraysInstancedANGLE, is_loaded: false };
    pub static mut DrawArraysInstancedARB: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawArraysInstancedARB, is_loaded: false };
    pub static mut DrawArraysInstancedBaseInstance: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> c_void> = FnPtr { f: super::failing::DrawArraysInstancedBaseInstance, is_loaded: false };
    pub static mut DrawArraysInstancedEXT: FnPtr<extern "C" fn(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawArraysInstancedEXT, is_loaded: false };
    pub static mut DrawArraysInstancedNV: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawArraysInstancedNV, is_loaded: false };
    pub static mut DrawBuffer: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::DrawBuffer, is_loaded: false };
    pub static mut DrawBuffers: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void> = FnPtr { f: super::failing::DrawBuffers, is_loaded: false };
    pub static mut DrawBuffersARB: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void> = FnPtr { f: super::failing::DrawBuffersARB, is_loaded: false };
    pub static mut DrawBuffersATI: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void> = FnPtr { f: super::failing::DrawBuffersATI, is_loaded: false };
    pub static mut DrawBuffersEXT: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void> = FnPtr { f: super::failing::DrawBuffersEXT, is_loaded: false };
    pub static mut DrawBuffersIndexedEXT: FnPtr<extern "C" fn(n: GLint, location: *GLenum, indices: *GLint) -> c_void> = FnPtr { f: super::failing::DrawBuffersIndexedEXT, is_loaded: false };
    pub static mut DrawBuffersNV: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void> = FnPtr { f: super::failing::DrawBuffersNV, is_loaded: false };
    pub static mut DrawElementArrayAPPLE: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawElementArrayAPPLE, is_loaded: false };
    pub static mut DrawElementArrayATI: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawElementArrayATI, is_loaded: false };
    pub static mut DrawElements: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void> = FnPtr { f: super::failing::DrawElements, is_loaded: false };
    pub static mut DrawElementsBaseVertex: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void> = FnPtr { f: super::failing::DrawElementsBaseVertex, is_loaded: false };
    pub static mut DrawElementsIndirect: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid) -> c_void> = FnPtr { f: super::failing::DrawElementsIndirect, is_loaded: false };
    pub static mut DrawElementsInstanced: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawElementsInstanced, is_loaded: false };
    pub static mut DrawElementsInstancedANGLE: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawElementsInstancedANGLE, is_loaded: false };
    pub static mut DrawElementsInstancedARB: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawElementsInstancedARB, is_loaded: false };
    pub static mut DrawElementsInstancedBaseInstance: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, baseinstance: GLuint) -> c_void> = FnPtr { f: super::failing::DrawElementsInstancedBaseInstance, is_loaded: false };
    pub static mut DrawElementsInstancedBaseVertex: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei, basevertex: GLint) -> c_void> = FnPtr { f: super::failing::DrawElementsInstancedBaseVertex, is_loaded: false };
    pub static mut DrawElementsInstancedBaseVertexBaseInstance: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> c_void> = FnPtr { f: super::failing::DrawElementsInstancedBaseVertexBaseInstance, is_loaded: false };
    pub static mut DrawElementsInstancedEXT: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawElementsInstancedEXT, is_loaded: false };
    pub static mut DrawElementsInstancedNV: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawElementsInstancedNV, is_loaded: false };
    pub static mut DrawMeshArraysSUN: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawMeshArraysSUN, is_loaded: false };
    pub static mut DrawPixels: FnPtr<extern "C" fn(width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::DrawPixels, is_loaded: false };
    pub static mut DrawRangeElementArrayAPPLE: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawRangeElementArrayAPPLE, is_loaded: false };
    pub static mut DrawRangeElementArrayATI: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawRangeElementArrayATI, is_loaded: false };
    pub static mut DrawRangeElements: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void> = FnPtr { f: super::failing::DrawRangeElements, is_loaded: false };
    pub static mut DrawRangeElementsBaseVertex: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void> = FnPtr { f: super::failing::DrawRangeElementsBaseVertex, is_loaded: false };
    pub static mut DrawRangeElementsEXT: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void> = FnPtr { f: super::failing::DrawRangeElementsEXT, is_loaded: false };
    pub static mut DrawTexfOES: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, width: GLfloat, height: GLfloat) -> c_void> = FnPtr { f: super::failing::DrawTexfOES, is_loaded: false };
    pub static mut DrawTexfvOES: FnPtr<extern "C" fn(coords: *GLfloat) -> c_void> = FnPtr { f: super::failing::DrawTexfvOES, is_loaded: false };
    pub static mut DrawTexiOES: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint, width: GLint, height: GLint) -> c_void> = FnPtr { f: super::failing::DrawTexiOES, is_loaded: false };
    pub static mut DrawTexivOES: FnPtr<extern "C" fn(coords: *GLint) -> c_void> = FnPtr { f: super::failing::DrawTexivOES, is_loaded: false };
    pub static mut DrawTexsOES: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort, width: GLshort, height: GLshort) -> c_void> = FnPtr { f: super::failing::DrawTexsOES, is_loaded: false };
    pub static mut DrawTexsvOES: FnPtr<extern "C" fn(coords: *GLshort) -> c_void> = FnPtr { f: super::failing::DrawTexsvOES, is_loaded: false };
    pub static mut DrawTextureNV: FnPtr<extern "C" fn(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> c_void> = FnPtr { f: super::failing::DrawTextureNV, is_loaded: false };
    pub static mut DrawTexxOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed, width: GLfixed, height: GLfixed) -> c_void> = FnPtr { f: super::failing::DrawTexxOES, is_loaded: false };
    pub static mut DrawTexxvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::DrawTexxvOES, is_loaded: false };
    pub static mut DrawTransformFeedback: FnPtr<extern "C" fn(mode: GLenum, id: GLuint) -> c_void> = FnPtr { f: super::failing::DrawTransformFeedback, is_loaded: false };
    pub static mut DrawTransformFeedbackInstanced: FnPtr<extern "C" fn(mode: GLenum, id: GLuint, instancecount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawTransformFeedbackInstanced, is_loaded: false };
    pub static mut DrawTransformFeedbackNV: FnPtr<extern "C" fn(mode: GLenum, id: GLuint) -> c_void> = FnPtr { f: super::failing::DrawTransformFeedbackNV, is_loaded: false };
    pub static mut DrawTransformFeedbackStream: FnPtr<extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint) -> c_void> = FnPtr { f: super::failing::DrawTransformFeedbackStream, is_loaded: false };
    pub static mut DrawTransformFeedbackStreamInstanced: FnPtr<extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> c_void> = FnPtr { f: super::failing::DrawTransformFeedbackStreamInstanced, is_loaded: false };
    pub static mut EGLImageTargetRenderbufferStorageOES: FnPtr<extern "C" fn(target: GLenum, image: GLeglImageOES) -> c_void> = FnPtr { f: super::failing::EGLImageTargetRenderbufferStorageOES, is_loaded: false };
    pub static mut EGLImageTargetTexture2DOES: FnPtr<extern "C" fn(target: GLenum, image: GLeglImageOES) -> c_void> = FnPtr { f: super::failing::EGLImageTargetTexture2DOES, is_loaded: false };
    pub static mut EdgeFlag: FnPtr<extern "C" fn(flag: GLboolean) -> c_void> = FnPtr { f: super::failing::EdgeFlag, is_loaded: false };
    pub static mut EdgeFlagFormatNV: FnPtr<extern "C" fn(stride: GLsizei) -> c_void> = FnPtr { f: super::failing::EdgeFlagFormatNV, is_loaded: false };
    pub static mut EdgeFlagPointer: FnPtr<extern "C" fn(stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::EdgeFlagPointer, is_loaded: false };
    pub static mut EdgeFlagPointerEXT: FnPtr<extern "C" fn(stride: GLsizei, count: GLsizei, pointer: *GLboolean) -> c_void> = FnPtr { f: super::failing::EdgeFlagPointerEXT, is_loaded: false };
    pub static mut EdgeFlagPointerListIBM: FnPtr<extern "C" fn(stride: GLint, pointer: **GLboolean, ptrstride: GLint) -> c_void> = FnPtr { f: super::failing::EdgeFlagPointerListIBM, is_loaded: false };
    pub static mut EdgeFlagv: FnPtr<extern "C" fn(flag: *GLboolean) -> c_void> = FnPtr { f: super::failing::EdgeFlagv, is_loaded: false };
    pub static mut ElementPointerAPPLE: FnPtr<extern "C" fn(type_: GLenum, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::ElementPointerAPPLE, is_loaded: false };
    pub static mut ElementPointerATI: FnPtr<extern "C" fn(type_: GLenum, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::ElementPointerATI, is_loaded: false };
    pub static mut Enable: FnPtr<extern "C" fn(cap: GLenum) -> c_void> = FnPtr { f: super::failing::Enable, is_loaded: false };
    pub static mut EnableClientState: FnPtr<extern "C" fn(array: GLenum) -> c_void> = FnPtr { f: super::failing::EnableClientState, is_loaded: false };
    pub static mut EnableClientStateIndexedEXT: FnPtr<extern "C" fn(array: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::EnableClientStateIndexedEXT, is_loaded: false };
    pub static mut EnableClientStateiEXT: FnPtr<extern "C" fn(array: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::EnableClientStateiEXT, is_loaded: false };
    pub static mut EnableDriverControlQCOM: FnPtr<extern "C" fn(driverControl: GLuint) -> c_void> = FnPtr { f: super::failing::EnableDriverControlQCOM, is_loaded: false };
    pub static mut EnableIndexedEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::EnableIndexedEXT, is_loaded: false };
    pub static mut EnableVariantClientStateEXT: FnPtr<extern "C" fn(id: GLuint) -> c_void> = FnPtr { f: super::failing::EnableVariantClientStateEXT, is_loaded: false };
    pub static mut EnableVertexArrayAttribEXT: FnPtr<extern "C" fn(vaobj: GLuint, index: GLuint) -> c_void> = FnPtr { f: super::failing::EnableVertexArrayAttribEXT, is_loaded: false };
    pub static mut EnableVertexArrayEXT: FnPtr<extern "C" fn(vaobj: GLuint, array: GLenum) -> c_void> = FnPtr { f: super::failing::EnableVertexArrayEXT, is_loaded: false };
    pub static mut EnableVertexAttribAPPLE: FnPtr<extern "C" fn(index: GLuint, pname: GLenum) -> c_void> = FnPtr { f: super::failing::EnableVertexAttribAPPLE, is_loaded: false };
    pub static mut EnableVertexAttribArray: FnPtr<extern "C" fn(index: GLuint) -> c_void> = FnPtr { f: super::failing::EnableVertexAttribArray, is_loaded: false };
    pub static mut EnableVertexAttribArrayARB: FnPtr<extern "C" fn(index: GLuint) -> c_void> = FnPtr { f: super::failing::EnableVertexAttribArrayARB, is_loaded: false };
    pub static mut Enablei: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::Enablei, is_loaded: false };
    pub static mut End: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::End, is_loaded: false };
    pub static mut EndConditionalRender: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndConditionalRender, is_loaded: false };
    pub static mut EndConditionalRenderNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndConditionalRenderNV, is_loaded: false };
    pub static mut EndConditionalRenderNVX: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndConditionalRenderNVX, is_loaded: false };
    pub static mut EndFragmentShaderATI: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndFragmentShaderATI, is_loaded: false };
    pub static mut EndList: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndList, is_loaded: false };
    pub static mut EndOcclusionQueryNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndOcclusionQueryNV, is_loaded: false };
    pub static mut EndPerfMonitorAMD: FnPtr<extern "C" fn(monitor: GLuint) -> c_void> = FnPtr { f: super::failing::EndPerfMonitorAMD, is_loaded: false };
    pub static mut EndQuery: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::EndQuery, is_loaded: false };
    pub static mut EndQueryARB: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::EndQueryARB, is_loaded: false };
    pub static mut EndQueryEXT: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::EndQueryEXT, is_loaded: false };
    pub static mut EndQueryIndexed: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void> = FnPtr { f: super::failing::EndQueryIndexed, is_loaded: false };
    pub static mut EndTilingQCOM: FnPtr<extern "C" fn(preserveMask: GLbitfield) -> c_void> = FnPtr { f: super::failing::EndTilingQCOM, is_loaded: false };
    pub static mut EndTransformFeedback: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndTransformFeedback, is_loaded: false };
    pub static mut EndTransformFeedbackEXT: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndTransformFeedbackEXT, is_loaded: false };
    pub static mut EndTransformFeedbackNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndTransformFeedbackNV, is_loaded: false };
    pub static mut EndVertexShaderEXT: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::EndVertexShaderEXT, is_loaded: false };
    pub static mut EndVideoCaptureNV: FnPtr<extern "C" fn(video_capture_slot: GLuint) -> c_void> = FnPtr { f: super::failing::EndVideoCaptureNV, is_loaded: false };
    pub static mut EvalCoord1d: FnPtr<extern "C" fn(u: GLdouble) -> c_void> = FnPtr { f: super::failing::EvalCoord1d, is_loaded: false };
    pub static mut EvalCoord1dv: FnPtr<extern "C" fn(u: *GLdouble) -> c_void> = FnPtr { f: super::failing::EvalCoord1dv, is_loaded: false };
    pub static mut EvalCoord1f: FnPtr<extern "C" fn(u: GLfloat) -> c_void> = FnPtr { f: super::failing::EvalCoord1f, is_loaded: false };
    pub static mut EvalCoord1fv: FnPtr<extern "C" fn(u: *GLfloat) -> c_void> = FnPtr { f: super::failing::EvalCoord1fv, is_loaded: false };
    pub static mut EvalCoord1xOES: FnPtr<extern "C" fn(u: GLfixed) -> c_void> = FnPtr { f: super::failing::EvalCoord1xOES, is_loaded: false };
    pub static mut EvalCoord1xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::EvalCoord1xvOES, is_loaded: false };
    pub static mut EvalCoord2d: FnPtr<extern "C" fn(u: GLdouble, v: GLdouble) -> c_void> = FnPtr { f: super::failing::EvalCoord2d, is_loaded: false };
    pub static mut EvalCoord2dv: FnPtr<extern "C" fn(u: *GLdouble) -> c_void> = FnPtr { f: super::failing::EvalCoord2dv, is_loaded: false };
    pub static mut EvalCoord2f: FnPtr<extern "C" fn(u: GLfloat, v: GLfloat) -> c_void> = FnPtr { f: super::failing::EvalCoord2f, is_loaded: false };
    pub static mut EvalCoord2fv: FnPtr<extern "C" fn(u: *GLfloat) -> c_void> = FnPtr { f: super::failing::EvalCoord2fv, is_loaded: false };
    pub static mut EvalCoord2xOES: FnPtr<extern "C" fn(u: GLfixed, v: GLfixed) -> c_void> = FnPtr { f: super::failing::EvalCoord2xOES, is_loaded: false };
    pub static mut EvalCoord2xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::EvalCoord2xvOES, is_loaded: false };
    pub static mut EvalMapsNV: FnPtr<extern "C" fn(target: GLenum, mode: GLenum) -> c_void> = FnPtr { f: super::failing::EvalMapsNV, is_loaded: false };
    pub static mut EvalMesh1: FnPtr<extern "C" fn(mode: GLenum, i1: GLint, i2: GLint) -> c_void> = FnPtr { f: super::failing::EvalMesh1, is_loaded: false };
    pub static mut EvalMesh2: FnPtr<extern "C" fn(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> c_void> = FnPtr { f: super::failing::EvalMesh2, is_loaded: false };
    pub static mut EvalPoint1: FnPtr<extern "C" fn(i: GLint) -> c_void> = FnPtr { f: super::failing::EvalPoint1, is_loaded: false };
    pub static mut EvalPoint2: FnPtr<extern "C" fn(i: GLint, j: GLint) -> c_void> = FnPtr { f: super::failing::EvalPoint2, is_loaded: false };
    pub static mut ExecuteProgramNV: FnPtr<extern "C" fn(target: GLenum, id: GLuint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ExecuteProgramNV, is_loaded: false };
    pub static mut ExtGetBufferPointervQCOM: FnPtr<extern "C" fn(target: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::ExtGetBufferPointervQCOM, is_loaded: false };
    pub static mut ExtGetBuffersQCOM: FnPtr<extern "C" fn(buffers: *GLuint, maxBuffers: GLint, numBuffers: *GLint) -> c_void> = FnPtr { f: super::failing::ExtGetBuffersQCOM, is_loaded: false };
    pub static mut ExtGetFramebuffersQCOM: FnPtr<extern "C" fn(framebuffers: *GLuint, maxFramebuffers: GLint, numFramebuffers: *GLint) -> c_void> = FnPtr { f: super::failing::ExtGetFramebuffersQCOM, is_loaded: false };
    pub static mut ExtGetProgramBinarySourceQCOM: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, source: *GLchar, length: *GLint) -> c_void> = FnPtr { f: super::failing::ExtGetProgramBinarySourceQCOM, is_loaded: false };
    pub static mut ExtGetProgramsQCOM: FnPtr<extern "C" fn(programs: *GLuint, maxPrograms: GLint, numPrograms: *GLint) -> c_void> = FnPtr { f: super::failing::ExtGetProgramsQCOM, is_loaded: false };
    pub static mut ExtGetRenderbuffersQCOM: FnPtr<extern "C" fn(renderbuffers: *GLuint, maxRenderbuffers: GLint, numRenderbuffers: *GLint) -> c_void> = FnPtr { f: super::failing::ExtGetRenderbuffersQCOM, is_loaded: false };
    pub static mut ExtGetShadersQCOM: FnPtr<extern "C" fn(shaders: *GLuint, maxShaders: GLint, numShaders: *GLint) -> c_void> = FnPtr { f: super::failing::ExtGetShadersQCOM, is_loaded: false };
    pub static mut ExtGetTexLevelParameterivQCOM: FnPtr<extern "C" fn(texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::ExtGetTexLevelParameterivQCOM, is_loaded: false };
    pub static mut ExtGetTexSubImageQCOM: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, texels: *GLvoid) -> c_void> = FnPtr { f: super::failing::ExtGetTexSubImageQCOM, is_loaded: false };
    pub static mut ExtGetTexturesQCOM: FnPtr<extern "C" fn(textures: *GLuint, maxTextures: GLint, numTextures: *GLint) -> c_void> = FnPtr { f: super::failing::ExtGetTexturesQCOM, is_loaded: false };
    pub static mut ExtIsProgramBinaryQCOM: FnPtr<extern "C" fn(program: GLuint) -> GLboolean> = FnPtr { f: super::failing::ExtIsProgramBinaryQCOM, is_loaded: false };
    pub static mut ExtTexObjectStateOverrideiQCOM: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::ExtTexObjectStateOverrideiQCOM, is_loaded: false };
    pub static mut ExtractComponentEXT: FnPtr<extern "C" fn(res: GLuint, src: GLuint, num: GLuint) -> c_void> = FnPtr { f: super::failing::ExtractComponentEXT, is_loaded: false };
    pub static mut FeedbackBuffer: FnPtr<extern "C" fn(size: GLsizei, type_: GLenum, buffer: *GLfloat) -> c_void> = FnPtr { f: super::failing::FeedbackBuffer, is_loaded: false };
    pub static mut FeedbackBufferxOES: FnPtr<extern "C" fn(n: GLsizei, type_: GLenum, buffer: *GLfixed) -> c_void> = FnPtr { f: super::failing::FeedbackBufferxOES, is_loaded: false };
    pub static mut FenceSync: FnPtr<extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync> = FnPtr { f: super::failing::FenceSync, is_loaded: false };
    pub static mut FenceSyncAPPLE: FnPtr<extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync> = FnPtr { f: super::failing::FenceSyncAPPLE, is_loaded: false };
    pub static mut FinalCombinerInputNV: FnPtr<extern "C" fn(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void> = FnPtr { f: super::failing::FinalCombinerInputNV, is_loaded: false };
    pub static mut Finish: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::Finish, is_loaded: false };
    pub static mut FinishAsyncSGIX: FnPtr<extern "C" fn(markerp: *GLuint) -> GLint> = FnPtr { f: super::failing::FinishAsyncSGIX, is_loaded: false };
    pub static mut FinishFenceAPPLE: FnPtr<extern "C" fn(fence: GLuint) -> c_void> = FnPtr { f: super::failing::FinishFenceAPPLE, is_loaded: false };
    pub static mut FinishFenceNV: FnPtr<extern "C" fn(fence: GLuint) -> c_void> = FnPtr { f: super::failing::FinishFenceNV, is_loaded: false };
    pub static mut FinishObjectAPPLE: FnPtr<extern "C" fn(object: GLenum, name: GLint) -> c_void> = FnPtr { f: super::failing::FinishObjectAPPLE, is_loaded: false };
    pub static mut FinishTextureSUNX: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::FinishTextureSUNX, is_loaded: false };
    pub static mut Flush: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::Flush, is_loaded: false };
    pub static mut FlushMappedBufferRange: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::FlushMappedBufferRange, is_loaded: false };
    pub static mut FlushMappedBufferRangeAPPLE: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::FlushMappedBufferRangeAPPLE, is_loaded: false };
    pub static mut FlushMappedBufferRangeEXT: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::FlushMappedBufferRangeEXT, is_loaded: false };
    pub static mut FlushMappedNamedBufferRangeEXT: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::FlushMappedNamedBufferRangeEXT, is_loaded: false };
    pub static mut FlushPixelDataRangeNV: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::FlushPixelDataRangeNV, is_loaded: false };
    pub static mut FlushRasterSGIX: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::FlushRasterSGIX, is_loaded: false };
    pub static mut FlushStaticDataIBM: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::FlushStaticDataIBM, is_loaded: false };
    pub static mut FlushVertexArrayRangeAPPLE: FnPtr<extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::FlushVertexArrayRangeAPPLE, is_loaded: false };
    pub static mut FlushVertexArrayRangeNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::FlushVertexArrayRangeNV, is_loaded: false };
    pub static mut FogCoordFormatNV: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::FogCoordFormatNV, is_loaded: false };
    pub static mut FogCoordPointer: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::FogCoordPointer, is_loaded: false };
    pub static mut FogCoordPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::FogCoordPointerEXT, is_loaded: false };
    pub static mut FogCoordPointerListIBM: FnPtr<extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void> = FnPtr { f: super::failing::FogCoordPointerListIBM, is_loaded: false };
    pub static mut FogCoordd: FnPtr<extern "C" fn(coord: GLdouble) -> c_void> = FnPtr { f: super::failing::FogCoordd, is_loaded: false };
    pub static mut FogCoorddEXT: FnPtr<extern "C" fn(coord: GLdouble) -> c_void> = FnPtr { f: super::failing::FogCoorddEXT, is_loaded: false };
    pub static mut FogCoorddv: FnPtr<extern "C" fn(coord: *GLdouble) -> c_void> = FnPtr { f: super::failing::FogCoorddv, is_loaded: false };
    pub static mut FogCoorddvEXT: FnPtr<extern "C" fn(coord: *GLdouble) -> c_void> = FnPtr { f: super::failing::FogCoorddvEXT, is_loaded: false };
    pub static mut FogCoordf: FnPtr<extern "C" fn(coord: GLfloat) -> c_void> = FnPtr { f: super::failing::FogCoordf, is_loaded: false };
    pub static mut FogCoordfEXT: FnPtr<extern "C" fn(coord: GLfloat) -> c_void> = FnPtr { f: super::failing::FogCoordfEXT, is_loaded: false };
    pub static mut FogCoordfv: FnPtr<extern "C" fn(coord: *GLfloat) -> c_void> = FnPtr { f: super::failing::FogCoordfv, is_loaded: false };
    pub static mut FogCoordfvEXT: FnPtr<extern "C" fn(coord: *GLfloat) -> c_void> = FnPtr { f: super::failing::FogCoordfvEXT, is_loaded: false };
    pub static mut FogCoordhNV: FnPtr<extern "C" fn(fog: GLhalfNV) -> c_void> = FnPtr { f: super::failing::FogCoordhNV, is_loaded: false };
    pub static mut FogCoordhvNV: FnPtr<extern "C" fn(fog: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::FogCoordhvNV, is_loaded: false };
    pub static mut FogFuncSGIS: FnPtr<extern "C" fn(n: GLsizei, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::FogFuncSGIS, is_loaded: false };
    pub static mut Fogf: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::Fogf, is_loaded: false };
    pub static mut Fogfv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::Fogfv, is_loaded: false };
    pub static mut Fogi: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::Fogi, is_loaded: false };
    pub static mut Fogiv: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::Fogiv, is_loaded: false };
    pub static mut Fogx: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::Fogx, is_loaded: false };
    pub static mut FogxOES: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::FogxOES, is_loaded: false };
    pub static mut Fogxv: FnPtr<extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void> = FnPtr { f: super::failing::Fogxv, is_loaded: false };
    pub static mut FogxvOES: FnPtr<extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void> = FnPtr { f: super::failing::FogxvOES, is_loaded: false };
    pub static mut FragmentColorMaterialSGIX: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void> = FnPtr { f: super::failing::FragmentColorMaterialSGIX, is_loaded: false };
    pub static mut FragmentLightModelfSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::FragmentLightModelfSGIX, is_loaded: false };
    pub static mut FragmentLightModelfvSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::FragmentLightModelfvSGIX, is_loaded: false };
    pub static mut FragmentLightModeliSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::FragmentLightModeliSGIX, is_loaded: false };
    pub static mut FragmentLightModelivSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::FragmentLightModelivSGIX, is_loaded: false };
    pub static mut FragmentLightfSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::FragmentLightfSGIX, is_loaded: false };
    pub static mut FragmentLightfvSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::FragmentLightfvSGIX, is_loaded: false };
    pub static mut FragmentLightiSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::FragmentLightiSGIX, is_loaded: false };
    pub static mut FragmentLightivSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::FragmentLightivSGIX, is_loaded: false };
    pub static mut FragmentMaterialfSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::FragmentMaterialfSGIX, is_loaded: false };
    pub static mut FragmentMaterialfvSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::FragmentMaterialfvSGIX, is_loaded: false };
    pub static mut FragmentMaterialiSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::FragmentMaterialiSGIX, is_loaded: false };
    pub static mut FragmentMaterialivSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::FragmentMaterialivSGIX, is_loaded: false };
    pub static mut FrameTerminatorGREMEDY: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::FrameTerminatorGREMEDY, is_loaded: false };
    pub static mut FrameZoomSGIX: FnPtr<extern "C" fn(factor: GLint) -> c_void> = FnPtr { f: super::failing::FrameZoomSGIX, is_loaded: false };
    pub static mut FramebufferDrawBufferEXT: FnPtr<extern "C" fn(framebuffer: GLuint, mode: GLenum) -> c_void> = FnPtr { f: super::failing::FramebufferDrawBufferEXT, is_loaded: false };
    pub static mut FramebufferDrawBuffersEXT: FnPtr<extern "C" fn(framebuffer: GLuint, n: GLsizei, bufs: *GLenum) -> c_void> = FnPtr { f: super::failing::FramebufferDrawBuffersEXT, is_loaded: false };
    pub static mut FramebufferParameteri: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferParameteri, is_loaded: false };
    pub static mut FramebufferReadBufferEXT: FnPtr<extern "C" fn(framebuffer: GLuint, mode: GLenum) -> c_void> = FnPtr { f: super::failing::FramebufferReadBufferEXT, is_loaded: false };
    pub static mut FramebufferRenderbuffer: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::FramebufferRenderbuffer, is_loaded: false };
    pub static mut FramebufferRenderbufferEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::FramebufferRenderbufferEXT, is_loaded: false };
    pub static mut FramebufferRenderbufferOES: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::FramebufferRenderbufferOES, is_loaded: false };
    pub static mut FramebufferTexture: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture, is_loaded: false };
    pub static mut FramebufferTexture1D: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture1D, is_loaded: false };
    pub static mut FramebufferTexture1DEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture1DEXT, is_loaded: false };
    pub static mut FramebufferTexture2D: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture2D, is_loaded: false };
    pub static mut FramebufferTexture2DEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture2DEXT, is_loaded: false };
    pub static mut FramebufferTexture2DMultisampleEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void> = FnPtr { f: super::failing::FramebufferTexture2DMultisampleEXT, is_loaded: false };
    pub static mut FramebufferTexture2DMultisampleIMG: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void> = FnPtr { f: super::failing::FramebufferTexture2DMultisampleIMG, is_loaded: false };
    pub static mut FramebufferTexture2DOES: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture2DOES, is_loaded: false };
    pub static mut FramebufferTexture3D: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture3D, is_loaded: false };
    pub static mut FramebufferTexture3DEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture3DEXT, is_loaded: false };
    pub static mut FramebufferTexture3DOES: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTexture3DOES, is_loaded: false };
    pub static mut FramebufferTextureARB: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTextureARB, is_loaded: false };
    pub static mut FramebufferTextureEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTextureEXT, is_loaded: false };
    pub static mut FramebufferTextureFaceARB: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void> = FnPtr { f: super::failing::FramebufferTextureFaceARB, is_loaded: false };
    pub static mut FramebufferTextureFaceEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void> = FnPtr { f: super::failing::FramebufferTextureFaceEXT, is_loaded: false };
    pub static mut FramebufferTextureLayer: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTextureLayer, is_loaded: false };
    pub static mut FramebufferTextureLayerARB: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTextureLayerARB, is_loaded: false };
    pub static mut FramebufferTextureLayerEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void> = FnPtr { f: super::failing::FramebufferTextureLayerEXT, is_loaded: false };
    pub static mut FreeObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint) -> c_void> = FnPtr { f: super::failing::FreeObjectBufferATI, is_loaded: false };
    pub static mut FrontFace: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::FrontFace, is_loaded: false };
    pub static mut Frustum: FnPtr<extern "C" fn(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void> = FnPtr { f: super::failing::Frustum, is_loaded: false };
    pub static mut Frustumf: FnPtr<extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void> = FnPtr { f: super::failing::Frustumf, is_loaded: false };
    pub static mut FrustumfOES: FnPtr<extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void> = FnPtr { f: super::failing::FrustumfOES, is_loaded: false };
    pub static mut Frustumx: FnPtr<extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void> = FnPtr { f: super::failing::Frustumx, is_loaded: false };
    pub static mut FrustumxOES: FnPtr<extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void> = FnPtr { f: super::failing::FrustumxOES, is_loaded: false };
    pub static mut GenAsyncMarkersSGIX: FnPtr<extern "C" fn(range: GLsizei) -> GLuint> = FnPtr { f: super::failing::GenAsyncMarkersSGIX, is_loaded: false };
    pub static mut GenBuffers: FnPtr<extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenBuffers, is_loaded: false };
    pub static mut GenBuffersARB: FnPtr<extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenBuffersARB, is_loaded: false };
    pub static mut GenFencesAPPLE: FnPtr<extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void> = FnPtr { f: super::failing::GenFencesAPPLE, is_loaded: false };
    pub static mut GenFencesNV: FnPtr<extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void> = FnPtr { f: super::failing::GenFencesNV, is_loaded: false };
    pub static mut GenFragmentShadersATI: FnPtr<extern "C" fn(range: GLuint) -> GLuint> = FnPtr { f: super::failing::GenFragmentShadersATI, is_loaded: false };
    pub static mut GenFramebuffers: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenFramebuffers, is_loaded: false };
    pub static mut GenFramebuffersEXT: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenFramebuffersEXT, is_loaded: false };
    pub static mut GenFramebuffersOES: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenFramebuffersOES, is_loaded: false };
    pub static mut GenLists: FnPtr<extern "C" fn(range: GLsizei) -> GLuint> = FnPtr { f: super::failing::GenLists, is_loaded: false };
    pub static mut GenNamesAMD: FnPtr<extern "C" fn(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void> = FnPtr { f: super::failing::GenNamesAMD, is_loaded: false };
    pub static mut GenOcclusionQueriesNV: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::GenOcclusionQueriesNV, is_loaded: false };
    pub static mut GenPathsNV: FnPtr<extern "C" fn(range: GLsizei) -> GLuint> = FnPtr { f: super::failing::GenPathsNV, is_loaded: false };
    pub static mut GenPerfMonitorsAMD: FnPtr<extern "C" fn(n: GLsizei, monitors: *GLuint) -> c_void> = FnPtr { f: super::failing::GenPerfMonitorsAMD, is_loaded: false };
    pub static mut GenProgramPipelines: FnPtr<extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void> = FnPtr { f: super::failing::GenProgramPipelines, is_loaded: false };
    pub static mut GenProgramPipelinesEXT: FnPtr<extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void> = FnPtr { f: super::failing::GenProgramPipelinesEXT, is_loaded: false };
    pub static mut GenProgramsARB: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void> = FnPtr { f: super::failing::GenProgramsARB, is_loaded: false };
    pub static mut GenProgramsNV: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void> = FnPtr { f: super::failing::GenProgramsNV, is_loaded: false };
    pub static mut GenQueries: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::GenQueries, is_loaded: false };
    pub static mut GenQueriesARB: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::GenQueriesARB, is_loaded: false };
    pub static mut GenQueriesEXT: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::GenQueriesEXT, is_loaded: false };
    pub static mut GenRenderbuffers: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenRenderbuffers, is_loaded: false };
    pub static mut GenRenderbuffersEXT: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenRenderbuffersEXT, is_loaded: false };
    pub static mut GenRenderbuffersOES: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenRenderbuffersOES, is_loaded: false };
    pub static mut GenSamplers: FnPtr<extern "C" fn(count: GLsizei, samplers: *GLuint) -> c_void> = FnPtr { f: super::failing::GenSamplers, is_loaded: false };
    pub static mut GenSymbolsEXT: FnPtr<extern "C" fn(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint> = FnPtr { f: super::failing::GenSymbolsEXT, is_loaded: false };
    pub static mut GenTextures: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void> = FnPtr { f: super::failing::GenTextures, is_loaded: false };
    pub static mut GenTexturesEXT: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void> = FnPtr { f: super::failing::GenTexturesEXT, is_loaded: false };
    pub static mut GenTransformFeedbacks: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::GenTransformFeedbacks, is_loaded: false };
    pub static mut GenTransformFeedbacksNV: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void> = FnPtr { f: super::failing::GenTransformFeedbacksNV, is_loaded: false };
    pub static mut GenVertexArrays: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void> = FnPtr { f: super::failing::GenVertexArrays, is_loaded: false };
    pub static mut GenVertexArraysAPPLE: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void> = FnPtr { f: super::failing::GenVertexArraysAPPLE, is_loaded: false };
    pub static mut GenVertexArraysOES: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void> = FnPtr { f: super::failing::GenVertexArraysOES, is_loaded: false };
    pub static mut GenVertexShadersEXT: FnPtr<extern "C" fn(range: GLuint) -> GLuint> = FnPtr { f: super::failing::GenVertexShadersEXT, is_loaded: false };
    pub static mut GenerateMipmap: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::GenerateMipmap, is_loaded: false };
    pub static mut GenerateMipmapEXT: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::GenerateMipmapEXT, is_loaded: false };
    pub static mut GenerateMipmapOES: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::GenerateMipmapOES, is_loaded: false };
    pub static mut GenerateMultiTexMipmapEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum) -> c_void> = FnPtr { f: super::failing::GenerateMultiTexMipmapEXT, is_loaded: false };
    pub static mut GenerateTextureMipmapEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum) -> c_void> = FnPtr { f: super::failing::GenerateTextureMipmapEXT, is_loaded: false };
    pub static mut GetActiveAtomicCounterBufferiv: FnPtr<extern "C" fn(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetActiveAtomicCounterBufferiv, is_loaded: false };
    pub static mut GetActiveAttrib: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void> = FnPtr { f: super::failing::GetActiveAttrib, is_loaded: false };
    pub static mut GetActiveAttribARB: FnPtr<extern "C" fn(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void> = FnPtr { f: super::failing::GetActiveAttribARB, is_loaded: false };
    pub static mut GetActiveSubroutineName: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void> = FnPtr { f: super::failing::GetActiveSubroutineName, is_loaded: false };
    pub static mut GetActiveSubroutineUniformName: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void> = FnPtr { f: super::failing::GetActiveSubroutineUniformName, is_loaded: false };
    pub static mut GetActiveSubroutineUniformiv: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) -> c_void> = FnPtr { f: super::failing::GetActiveSubroutineUniformiv, is_loaded: false };
    pub static mut GetActiveUniform: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void> = FnPtr { f: super::failing::GetActiveUniform, is_loaded: false };
    pub static mut GetActiveUniformARB: FnPtr<extern "C" fn(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void> = FnPtr { f: super::failing::GetActiveUniformARB, is_loaded: false };
    pub static mut GetActiveUniformBlockName: FnPtr<extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> c_void> = FnPtr { f: super::failing::GetActiveUniformBlockName, is_loaded: false };
    pub static mut GetActiveUniformBlockiv: FnPtr<extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetActiveUniformBlockiv, is_loaded: false };
    pub static mut GetActiveUniformName: FnPtr<extern "C" fn(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) -> c_void> = FnPtr { f: super::failing::GetActiveUniformName, is_loaded: false };
    pub static mut GetActiveUniformsiv: FnPtr<extern "C" fn(program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetActiveUniformsiv, is_loaded: false };
    pub static mut GetActiveVaryingNV: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void> = FnPtr { f: super::failing::GetActiveVaryingNV, is_loaded: false };
    pub static mut GetArrayObjectfvATI: FnPtr<extern "C" fn(array: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetArrayObjectfvATI, is_loaded: false };
    pub static mut GetArrayObjectivATI: FnPtr<extern "C" fn(array: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetArrayObjectivATI, is_loaded: false };
    pub static mut GetAttachedObjectsARB: FnPtr<extern "C" fn(containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) -> c_void> = FnPtr { f: super::failing::GetAttachedObjectsARB, is_loaded: false };
    pub static mut GetAttachedShaders: FnPtr<extern "C" fn(program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> c_void> = FnPtr { f: super::failing::GetAttachedShaders, is_loaded: false };
    pub static mut GetAttribLocation: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetAttribLocation, is_loaded: false };
    pub static mut GetAttribLocationARB: FnPtr<extern "C" fn(programObj: GLhandleARB, name: *GLcharARB) -> GLint> = FnPtr { f: super::failing::GetAttribLocationARB, is_loaded: false };
    pub static mut GetBooleanIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLboolean) -> c_void> = FnPtr { f: super::failing::GetBooleanIndexedvEXT, is_loaded: false };
    pub static mut GetBooleani_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLboolean) -> c_void> = FnPtr { f: super::failing::GetBooleani_v, is_loaded: false };
    pub static mut GetBooleanv: FnPtr<extern "C" fn(pname: GLenum, params: *GLboolean) -> c_void> = FnPtr { f: super::failing::GetBooleanv, is_loaded: false };
    pub static mut GetBufferParameteri64v: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint64) -> c_void> = FnPtr { f: super::failing::GetBufferParameteri64v, is_loaded: false };
    pub static mut GetBufferParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetBufferParameteriv, is_loaded: false };
    pub static mut GetBufferParameterivARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetBufferParameterivARB, is_loaded: false };
    pub static mut GetBufferParameterui64vNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::GetBufferParameterui64vNV, is_loaded: false };
    pub static mut GetBufferPointerv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetBufferPointerv, is_loaded: false };
    pub static mut GetBufferPointervARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetBufferPointervARB, is_loaded: false };
    pub static mut GetBufferPointervOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetBufferPointervOES, is_loaded: false };
    pub static mut GetBufferSubData: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetBufferSubData, is_loaded: false };
    pub static mut GetBufferSubDataARB: FnPtr<extern "C" fn(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetBufferSubDataARB, is_loaded: false };
    pub static mut GetClipPlane: FnPtr<extern "C" fn(plane: GLenum, equation: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetClipPlane, is_loaded: false };
    pub static mut GetClipPlanef: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetClipPlanef, is_loaded: false };
    pub static mut GetClipPlanefOES: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetClipPlanefOES, is_loaded: false };
    pub static mut GetClipPlanex: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetClipPlanex, is_loaded: false };
    pub static mut GetClipPlanexOES: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetClipPlanexOES, is_loaded: false };
    pub static mut GetColorTable: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetColorTable, is_loaded: false };
    pub static mut GetColorTableEXT: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetColorTableEXT, is_loaded: false };
    pub static mut GetColorTableParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetColorTableParameterfv, is_loaded: false };
    pub static mut GetColorTableParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetColorTableParameterfvEXT, is_loaded: false };
    pub static mut GetColorTableParameterfvSGI: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetColorTableParameterfvSGI, is_loaded: false };
    pub static mut GetColorTableParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetColorTableParameteriv, is_loaded: false };
    pub static mut GetColorTableParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetColorTableParameterivEXT, is_loaded: false };
    pub static mut GetColorTableParameterivSGI: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetColorTableParameterivSGI, is_loaded: false };
    pub static mut GetColorTableSGI: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetColorTableSGI, is_loaded: false };
    pub static mut GetCombinerInputParameterfvNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetCombinerInputParameterfvNV, is_loaded: false };
    pub static mut GetCombinerInputParameterivNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetCombinerInputParameterivNV, is_loaded: false };
    pub static mut GetCombinerOutputParameterfvNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetCombinerOutputParameterfvNV, is_loaded: false };
    pub static mut GetCombinerOutputParameterivNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetCombinerOutputParameterivNV, is_loaded: false };
    pub static mut GetCombinerStageParameterfvNV: FnPtr<extern "C" fn(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetCombinerStageParameterfvNV, is_loaded: false };
    pub static mut GetCompressedMultiTexImageEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, lod: GLint, img: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetCompressedMultiTexImageEXT, is_loaded: false };
    pub static mut GetCompressedTexImage: FnPtr<extern "C" fn(target: GLenum, level: GLint, img: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetCompressedTexImage, is_loaded: false };
    pub static mut GetCompressedTexImageARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, img: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetCompressedTexImageARB, is_loaded: false };
    pub static mut GetCompressedTextureImageEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, lod: GLint, img: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetCompressedTextureImageEXT, is_loaded: false };
    pub static mut GetConvolutionFilter: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetConvolutionFilter, is_loaded: false };
    pub static mut GetConvolutionFilterEXT: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetConvolutionFilterEXT, is_loaded: false };
    pub static mut GetConvolutionParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetConvolutionParameterfv, is_loaded: false };
    pub static mut GetConvolutionParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetConvolutionParameterfvEXT, is_loaded: false };
    pub static mut GetConvolutionParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetConvolutionParameteriv, is_loaded: false };
    pub static mut GetConvolutionParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetConvolutionParameterivEXT, is_loaded: false };
    pub static mut GetConvolutionParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetConvolutionParameterxvOES, is_loaded: false };
    pub static mut GetDebugMessageLog: FnPtr<extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint> = FnPtr { f: super::failing::GetDebugMessageLog, is_loaded: false };
    pub static mut GetDebugMessageLogAMD: FnPtr<extern "C" fn(count: GLuint, bufsize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) -> GLuint> = FnPtr { f: super::failing::GetDebugMessageLogAMD, is_loaded: false };
    pub static mut GetDebugMessageLogARB: FnPtr<extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint> = FnPtr { f: super::failing::GetDebugMessageLogARB, is_loaded: false };
    pub static mut GetDebugMessageLogKHR: FnPtr<extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint> = FnPtr { f: super::failing::GetDebugMessageLogKHR, is_loaded: false };
    pub static mut GetDetailTexFuncSGIS: FnPtr<extern "C" fn(target: GLenum, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetDetailTexFuncSGIS, is_loaded: false };
    pub static mut GetDoubleIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetDoubleIndexedvEXT, is_loaded: false };
    pub static mut GetDoublei_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetDoublei_v, is_loaded: false };
    pub static mut GetDoublei_vEXT: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetDoublei_vEXT, is_loaded: false };
    pub static mut GetDoublev: FnPtr<extern "C" fn(pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetDoublev, is_loaded: false };
    pub static mut GetDriverControlStringQCOM: FnPtr<extern "C" fn(driverControl: GLuint, bufSize: GLsizei, length: *GLsizei, driverControlString: *GLchar) -> c_void> = FnPtr { f: super::failing::GetDriverControlStringQCOM, is_loaded: false };
    pub static mut GetDriverControlsQCOM: FnPtr<extern "C" fn(num: *GLint, size: GLsizei, driverControls: *GLuint) -> c_void> = FnPtr { f: super::failing::GetDriverControlsQCOM, is_loaded: false };
    pub static mut GetError: FnPtr<extern "C" fn() -> GLenum> = FnPtr { f: super::failing::GetError, is_loaded: false };
    pub static mut GetFenceivNV: FnPtr<extern "C" fn(fence: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFenceivNV, is_loaded: false };
    pub static mut GetFinalCombinerInputParameterfvNV: FnPtr<extern "C" fn(variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetFinalCombinerInputParameterfvNV, is_loaded: false };
    pub static mut GetFinalCombinerInputParameterivNV: FnPtr<extern "C" fn(variable: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFinalCombinerInputParameterivNV, is_loaded: false };
    pub static mut GetFixedv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetFixedv, is_loaded: false };
    pub static mut GetFixedvOES: FnPtr<extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetFixedvOES, is_loaded: false };
    pub static mut GetFloatIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetFloatIndexedvEXT, is_loaded: false };
    pub static mut GetFloati_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetFloati_v, is_loaded: false };
    pub static mut GetFloati_vEXT: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetFloati_vEXT, is_loaded: false };
    pub static mut GetFloatv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetFloatv, is_loaded: false };
    pub static mut GetFogFuncSGIS: FnPtr<extern "C" fn(points: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetFogFuncSGIS, is_loaded: false };
    pub static mut GetFragDataIndex: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetFragDataIndex, is_loaded: false };
    pub static mut GetFragDataLocation: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetFragDataLocation, is_loaded: false };
    pub static mut GetFragDataLocationEXT: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetFragDataLocationEXT, is_loaded: false };
    pub static mut GetFragmentLightfvSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetFragmentLightfvSGIX, is_loaded: false };
    pub static mut GetFragmentLightivSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFragmentLightivSGIX, is_loaded: false };
    pub static mut GetFragmentMaterialfvSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetFragmentMaterialfvSGIX, is_loaded: false };
    pub static mut GetFragmentMaterialivSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFragmentMaterialivSGIX, is_loaded: false };
    pub static mut GetFramebufferAttachmentParameteriv: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFramebufferAttachmentParameteriv, is_loaded: false };
    pub static mut GetFramebufferAttachmentParameterivEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFramebufferAttachmentParameterivEXT, is_loaded: false };
    pub static mut GetFramebufferAttachmentParameterivOES: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFramebufferAttachmentParameterivOES, is_loaded: false };
    pub static mut GetFramebufferParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFramebufferParameteriv, is_loaded: false };
    pub static mut GetFramebufferParameterivEXT: FnPtr<extern "C" fn(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetFramebufferParameterivEXT, is_loaded: false };
    pub static mut GetGraphicsResetStatusARB: FnPtr<extern "C" fn() -> GLenum> = FnPtr { f: super::failing::GetGraphicsResetStatusARB, is_loaded: false };
    pub static mut GetGraphicsResetStatusEXT: FnPtr<extern "C" fn() -> GLenum> = FnPtr { f: super::failing::GetGraphicsResetStatusEXT, is_loaded: false };
    pub static mut GetHandleARB: FnPtr<extern "C" fn(pname: GLenum) -> GLhandleARB> = FnPtr { f: super::failing::GetHandleARB, is_loaded: false };
    pub static mut GetHistogram: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetHistogram, is_loaded: false };
    pub static mut GetHistogramEXT: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetHistogramEXT, is_loaded: false };
    pub static mut GetHistogramParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetHistogramParameterfv, is_loaded: false };
    pub static mut GetHistogramParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetHistogramParameterfvEXT, is_loaded: false };
    pub static mut GetHistogramParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetHistogramParameteriv, is_loaded: false };
    pub static mut GetHistogramParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetHistogramParameterivEXT, is_loaded: false };
    pub static mut GetHistogramParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetHistogramParameterxvOES, is_loaded: false };
    pub static mut GetImageHandleARB: FnPtr<extern "C" fn(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64> = FnPtr { f: super::failing::GetImageHandleARB, is_loaded: false };
    pub static mut GetImageHandleNV: FnPtr<extern "C" fn(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64> = FnPtr { f: super::failing::GetImageHandleNV, is_loaded: false };
    pub static mut GetImageTransformParameterfvHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetImageTransformParameterfvHP, is_loaded: false };
    pub static mut GetImageTransformParameterivHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetImageTransformParameterivHP, is_loaded: false };
    pub static mut GetInfoLogARB: FnPtr<extern "C" fn(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) -> c_void> = FnPtr { f: super::failing::GetInfoLogARB, is_loaded: false };
    pub static mut GetInstrumentsSGIX: FnPtr<extern "C" fn() -> GLint> = FnPtr { f: super::failing::GetInstrumentsSGIX, is_loaded: false };
    pub static mut GetInteger64i_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLint64) -> c_void> = FnPtr { f: super::failing::GetInteger64i_v, is_loaded: false };
    pub static mut GetInteger64v: FnPtr<extern "C" fn(pname: GLenum, params: *GLint64) -> c_void> = FnPtr { f: super::failing::GetInteger64v, is_loaded: false };
    pub static mut GetInteger64vAPPLE: FnPtr<extern "C" fn(pname: GLenum, params: *GLint64) -> c_void> = FnPtr { f: super::failing::GetInteger64vAPPLE, is_loaded: false };
    pub static mut GetIntegerIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void> = FnPtr { f: super::failing::GetIntegerIndexedvEXT, is_loaded: false };
    pub static mut GetIntegeri_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void> = FnPtr { f: super::failing::GetIntegeri_v, is_loaded: false };
    pub static mut GetIntegeri_vEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void> = FnPtr { f: super::failing::GetIntegeri_vEXT, is_loaded: false };
    pub static mut GetIntegerui64i_vNV: FnPtr<extern "C" fn(value: GLenum, index: GLuint, result: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::GetIntegerui64i_vNV, is_loaded: false };
    pub static mut GetIntegerui64vNV: FnPtr<extern "C" fn(value: GLenum, result: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::GetIntegerui64vNV, is_loaded: false };
    pub static mut GetIntegerv: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetIntegerv, is_loaded: false };
    pub static mut GetInternalformati64v: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) -> c_void> = FnPtr { f: super::failing::GetInternalformati64v, is_loaded: false };
    pub static mut GetInternalformativ: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetInternalformativ, is_loaded: false };
    pub static mut GetInvariantBooleanvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void> = FnPtr { f: super::failing::GetInvariantBooleanvEXT, is_loaded: false };
    pub static mut GetInvariantFloatvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetInvariantFloatvEXT, is_loaded: false };
    pub static mut GetInvariantIntegervEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void> = FnPtr { f: super::failing::GetInvariantIntegervEXT, is_loaded: false };
    pub static mut GetLightfv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetLightfv, is_loaded: false };
    pub static mut GetLightiv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetLightiv, is_loaded: false };
    pub static mut GetLightx: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetLightx, is_loaded: false };
    pub static mut GetLightxOES: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetLightxOES, is_loaded: false };
    pub static mut GetLightxv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetLightxv, is_loaded: false };
    pub static mut GetLightxvOES: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetLightxvOES, is_loaded: false };
    pub static mut GetListParameterfvSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetListParameterfvSGIX, is_loaded: false };
    pub static mut GetListParameterivSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetListParameterivSGIX, is_loaded: false };
    pub static mut GetLocalConstantBooleanvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void> = FnPtr { f: super::failing::GetLocalConstantBooleanvEXT, is_loaded: false };
    pub static mut GetLocalConstantFloatvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetLocalConstantFloatvEXT, is_loaded: false };
    pub static mut GetLocalConstantIntegervEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void> = FnPtr { f: super::failing::GetLocalConstantIntegervEXT, is_loaded: false };
    pub static mut GetMapAttribParameterfvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMapAttribParameterfvNV, is_loaded: false };
    pub static mut GetMapAttribParameterivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMapAttribParameterivNV, is_loaded: false };
    pub static mut GetMapControlPointsNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetMapControlPointsNV, is_loaded: false };
    pub static mut GetMapParameterfvNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMapParameterfvNV, is_loaded: false };
    pub static mut GetMapParameterivNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMapParameterivNV, is_loaded: false };
    pub static mut GetMapdv: FnPtr<extern "C" fn(target: GLenum, query: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetMapdv, is_loaded: false };
    pub static mut GetMapfv: FnPtr<extern "C" fn(target: GLenum, query: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMapfv, is_loaded: false };
    pub static mut GetMapiv: FnPtr<extern "C" fn(target: GLenum, query: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::GetMapiv, is_loaded: false };
    pub static mut GetMapxvOES: FnPtr<extern "C" fn(target: GLenum, query: GLenum, v: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetMapxvOES, is_loaded: false };
    pub static mut GetMaterialfv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMaterialfv, is_loaded: false };
    pub static mut GetMaterialiv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMaterialiv, is_loaded: false };
    pub static mut GetMaterialx: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::GetMaterialx, is_loaded: false };
    pub static mut GetMaterialxOES: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::GetMaterialxOES, is_loaded: false };
    pub static mut GetMaterialxv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetMaterialxv, is_loaded: false };
    pub static mut GetMaterialxvOES: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetMaterialxvOES, is_loaded: false };
    pub static mut GetMinmax: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetMinmax, is_loaded: false };
    pub static mut GetMinmaxEXT: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetMinmaxEXT, is_loaded: false };
    pub static mut GetMinmaxParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMinmaxParameterfv, is_loaded: false };
    pub static mut GetMinmaxParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMinmaxParameterfvEXT, is_loaded: false };
    pub static mut GetMinmaxParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMinmaxParameteriv, is_loaded: false };
    pub static mut GetMinmaxParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMinmaxParameterivEXT, is_loaded: false };
    pub static mut GetMultiTexEnvfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMultiTexEnvfvEXT, is_loaded: false };
    pub static mut GetMultiTexEnvivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMultiTexEnvivEXT, is_loaded: false };
    pub static mut GetMultiTexGendvEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetMultiTexGendvEXT, is_loaded: false };
    pub static mut GetMultiTexGenfvEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMultiTexGenfvEXT, is_loaded: false };
    pub static mut GetMultiTexGenivEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMultiTexGenivEXT, is_loaded: false };
    pub static mut GetMultiTexImageEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetMultiTexImageEXT, is_loaded: false };
    pub static mut GetMultiTexLevelParameterfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMultiTexLevelParameterfvEXT, is_loaded: false };
    pub static mut GetMultiTexLevelParameterivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMultiTexLevelParameterivEXT, is_loaded: false };
    pub static mut GetMultiTexParameterIivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMultiTexParameterIivEXT, is_loaded: false };
    pub static mut GetMultiTexParameterIuivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetMultiTexParameterIuivEXT, is_loaded: false };
    pub static mut GetMultiTexParameterfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMultiTexParameterfvEXT, is_loaded: false };
    pub static mut GetMultiTexParameterivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetMultiTexParameterivEXT, is_loaded: false };
    pub static mut GetMultisamplefv: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMultisamplefv, is_loaded: false };
    pub static mut GetMultisamplefvNV: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetMultisamplefvNV, is_loaded: false };
    pub static mut GetNamedBufferParameterivEXT: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetNamedBufferParameterivEXT, is_loaded: false };
    pub static mut GetNamedBufferParameterui64vNV: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::GetNamedBufferParameterui64vNV, is_loaded: false };
    pub static mut GetNamedBufferPointervEXT: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetNamedBufferPointervEXT, is_loaded: false };
    pub static mut GetNamedBufferSubDataEXT: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetNamedBufferSubDataEXT, is_loaded: false };
    pub static mut GetNamedFramebufferAttachmentParameterivEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetNamedFramebufferAttachmentParameterivEXT, is_loaded: false };
    pub static mut GetNamedFramebufferParameterivEXT: FnPtr<extern "C" fn(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetNamedFramebufferParameterivEXT, is_loaded: false };
    pub static mut GetNamedProgramLocalParameterIivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetNamedProgramLocalParameterIivEXT, is_loaded: false };
    pub static mut GetNamedProgramLocalParameterIuivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetNamedProgramLocalParameterIuivEXT, is_loaded: false };
    pub static mut GetNamedProgramLocalParameterdvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetNamedProgramLocalParameterdvEXT, is_loaded: false };
    pub static mut GetNamedProgramLocalParameterfvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetNamedProgramLocalParameterfvEXT, is_loaded: false };
    pub static mut GetNamedProgramStringEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, pname: GLenum, string: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetNamedProgramStringEXT, is_loaded: false };
    pub static mut GetNamedProgramivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetNamedProgramivEXT, is_loaded: false };
    pub static mut GetNamedRenderbufferParameterivEXT: FnPtr<extern "C" fn(renderbuffer: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetNamedRenderbufferParameterivEXT, is_loaded: false };
    pub static mut GetNamedStringARB: FnPtr<extern "C" fn(namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, string: *GLchar) -> c_void> = FnPtr { f: super::failing::GetNamedStringARB, is_loaded: false };
    pub static mut GetNamedStringivARB: FnPtr<extern "C" fn(namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetNamedStringivARB, is_loaded: false };
    pub static mut GetObjectBufferfvATI: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetObjectBufferfvATI, is_loaded: false };
    pub static mut GetObjectBufferivATI: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetObjectBufferivATI, is_loaded: false };
    pub static mut GetObjectLabel: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::GetObjectLabel, is_loaded: false };
    pub static mut GetObjectLabelEXT: FnPtr<extern "C" fn(type_: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::GetObjectLabelEXT, is_loaded: false };
    pub static mut GetObjectLabelKHR: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::GetObjectLabelKHR, is_loaded: false };
    pub static mut GetObjectParameterfvARB: FnPtr<extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetObjectParameterfvARB, is_loaded: false };
    pub static mut GetObjectParameterivAPPLE: FnPtr<extern "C" fn(objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetObjectParameterivAPPLE, is_loaded: false };
    pub static mut GetObjectParameterivARB: FnPtr<extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetObjectParameterivARB, is_loaded: false };
    pub static mut GetObjectPtrLabel: FnPtr<extern "C" fn(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::GetObjectPtrLabel, is_loaded: false };
    pub static mut GetObjectPtrLabelKHR: FnPtr<extern "C" fn(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::GetObjectPtrLabelKHR, is_loaded: false };
    pub static mut GetOcclusionQueryivNV: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetOcclusionQueryivNV, is_loaded: false };
    pub static mut GetOcclusionQueryuivNV: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetOcclusionQueryuivNV, is_loaded: false };
    pub static mut GetPathColorGenfvNV: FnPtr<extern "C" fn(color: GLenum, pname: GLenum, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPathColorGenfvNV, is_loaded: false };
    pub static mut GetPathColorGenivNV: FnPtr<extern "C" fn(color: GLenum, pname: GLenum, value: *GLint) -> c_void> = FnPtr { f: super::failing::GetPathColorGenivNV, is_loaded: false };
    pub static mut GetPathCommandsNV: FnPtr<extern "C" fn(path: GLuint, commands: *GLubyte) -> c_void> = FnPtr { f: super::failing::GetPathCommandsNV, is_loaded: false };
    pub static mut GetPathCoordsNV: FnPtr<extern "C" fn(path: GLuint, coords: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPathCoordsNV, is_loaded: false };
    pub static mut GetPathDashArrayNV: FnPtr<extern "C" fn(path: GLuint, dashArray: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPathDashArrayNV, is_loaded: false };
    pub static mut GetPathLengthNV: FnPtr<extern "C" fn(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat> = FnPtr { f: super::failing::GetPathLengthNV, is_loaded: false };
    pub static mut GetPathMetricRangeNV: FnPtr<extern "C" fn(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPathMetricRangeNV, is_loaded: false };
    pub static mut GetPathMetricsNV: FnPtr<extern "C" fn(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPathMetricsNV, is_loaded: false };
    pub static mut GetPathParameterfvNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPathParameterfvNV, is_loaded: false };
    pub static mut GetPathParameterivNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: *GLint) -> c_void> = FnPtr { f: super::failing::GetPathParameterivNV, is_loaded: false };
    pub static mut GetPathSpacingNV: FnPtr<extern "C" fn(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPathSpacingNV, is_loaded: false };
    pub static mut GetPathTexGenfvNV: FnPtr<extern "C" fn(texCoordSet: GLenum, pname: GLenum, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPathTexGenfvNV, is_loaded: false };
    pub static mut GetPathTexGenivNV: FnPtr<extern "C" fn(texCoordSet: GLenum, pname: GLenum, value: *GLint) -> c_void> = FnPtr { f: super::failing::GetPathTexGenivNV, is_loaded: false };
    pub static mut GetPerfMonitorCounterDataAMD: FnPtr<extern "C" fn(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) -> c_void> = FnPtr { f: super::failing::GetPerfMonitorCounterDataAMD, is_loaded: false };
    pub static mut GetPerfMonitorCounterInfoAMD: FnPtr<extern "C" fn(group: GLuint, counter: GLuint, pname: GLenum, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetPerfMonitorCounterInfoAMD, is_loaded: false };
    pub static mut GetPerfMonitorCounterStringAMD: FnPtr<extern "C" fn(group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) -> c_void> = FnPtr { f: super::failing::GetPerfMonitorCounterStringAMD, is_loaded: false };
    pub static mut GetPerfMonitorCountersAMD: FnPtr<extern "C" fn(group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) -> c_void> = FnPtr { f: super::failing::GetPerfMonitorCountersAMD, is_loaded: false };
    pub static mut GetPerfMonitorGroupStringAMD: FnPtr<extern "C" fn(group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) -> c_void> = FnPtr { f: super::failing::GetPerfMonitorGroupStringAMD, is_loaded: false };
    pub static mut GetPerfMonitorGroupsAMD: FnPtr<extern "C" fn(numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) -> c_void> = FnPtr { f: super::failing::GetPerfMonitorGroupsAMD, is_loaded: false };
    pub static mut GetPixelMapfv: FnPtr<extern "C" fn(map: GLenum, values: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPixelMapfv, is_loaded: false };
    pub static mut GetPixelMapuiv: FnPtr<extern "C" fn(map: GLenum, values: *GLuint) -> c_void> = FnPtr { f: super::failing::GetPixelMapuiv, is_loaded: false };
    pub static mut GetPixelMapusv: FnPtr<extern "C" fn(map: GLenum, values: *GLushort) -> c_void> = FnPtr { f: super::failing::GetPixelMapusv, is_loaded: false };
    pub static mut GetPixelMapxv: FnPtr<extern "C" fn(map: GLenum, size: GLint, values: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetPixelMapxv, is_loaded: false };
    pub static mut GetPixelTexGenParameterfvSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPixelTexGenParameterfvSGIS, is_loaded: false };
    pub static mut GetPixelTexGenParameterivSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetPixelTexGenParameterivSGIS, is_loaded: false };
    pub static mut GetPixelTransformParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetPixelTransformParameterfvEXT, is_loaded: false };
    pub static mut GetPixelTransformParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetPixelTransformParameterivEXT, is_loaded: false };
    pub static mut GetPointerIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetPointerIndexedvEXT, is_loaded: false };
    pub static mut GetPointeri_vEXT: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetPointeri_vEXT, is_loaded: false };
    pub static mut GetPointerv: FnPtr<extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetPointerv, is_loaded: false };
    pub static mut GetPointervEXT: FnPtr<extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetPointervEXT, is_loaded: false };
    pub static mut GetPointervKHR: FnPtr<extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetPointervKHR, is_loaded: false };
    pub static mut GetPolygonStipple: FnPtr<extern "C" fn(mask: *GLubyte) -> c_void> = FnPtr { f: super::failing::GetPolygonStipple, is_loaded: false };
    pub static mut GetProgramBinary: FnPtr<extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetProgramBinary, is_loaded: false };
    pub static mut GetProgramBinaryOES: FnPtr<extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetProgramBinaryOES, is_loaded: false };
    pub static mut GetProgramEnvParameterIivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramEnvParameterIivNV, is_loaded: false };
    pub static mut GetProgramEnvParameterIuivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetProgramEnvParameterIuivNV, is_loaded: false };
    pub static mut GetProgramEnvParameterdvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetProgramEnvParameterdvARB, is_loaded: false };
    pub static mut GetProgramEnvParameterfvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetProgramEnvParameterfvARB, is_loaded: false };
    pub static mut GetProgramInfoLog: FnPtr<extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void> = FnPtr { f: super::failing::GetProgramInfoLog, is_loaded: false };
    pub static mut GetProgramInterfaceiv: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramInterfaceiv, is_loaded: false };
    pub static mut GetProgramLocalParameterIivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramLocalParameterIivNV, is_loaded: false };
    pub static mut GetProgramLocalParameterIuivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetProgramLocalParameterIuivNV, is_loaded: false };
    pub static mut GetProgramLocalParameterdvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetProgramLocalParameterdvARB, is_loaded: false };
    pub static mut GetProgramLocalParameterfvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetProgramLocalParameterfvARB, is_loaded: false };
    pub static mut GetProgramNamedParameterdvNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetProgramNamedParameterdvNV, is_loaded: false };
    pub static mut GetProgramNamedParameterfvNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetProgramNamedParameterfvNV, is_loaded: false };
    pub static mut GetProgramParameterdvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetProgramParameterdvNV, is_loaded: false };
    pub static mut GetProgramParameterfvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetProgramParameterfvNV, is_loaded: false };
    pub static mut GetProgramPipelineInfoLog: FnPtr<extern "C" fn(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void> = FnPtr { f: super::failing::GetProgramPipelineInfoLog, is_loaded: false };
    pub static mut GetProgramPipelineInfoLogEXT: FnPtr<extern "C" fn(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void> = FnPtr { f: super::failing::GetProgramPipelineInfoLogEXT, is_loaded: false };
    pub static mut GetProgramPipelineiv: FnPtr<extern "C" fn(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramPipelineiv, is_loaded: false };
    pub static mut GetProgramPipelineivEXT: FnPtr<extern "C" fn(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramPipelineivEXT, is_loaded: false };
    pub static mut GetProgramResourceIndex: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint> = FnPtr { f: super::failing::GetProgramResourceIndex, is_loaded: false };
    pub static mut GetProgramResourceLocation: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetProgramResourceLocation, is_loaded: false };
    pub static mut GetProgramResourceLocationIndex: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetProgramResourceLocationIndex, is_loaded: false };
    pub static mut GetProgramResourceName: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void> = FnPtr { f: super::failing::GetProgramResourceName, is_loaded: false };
    pub static mut GetProgramResourceiv: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramResourceiv, is_loaded: false };
    pub static mut GetProgramStageiv: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramStageiv, is_loaded: false };
    pub static mut GetProgramStringARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, string: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetProgramStringARB, is_loaded: false };
    pub static mut GetProgramStringNV: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, program: *GLubyte) -> c_void> = FnPtr { f: super::failing::GetProgramStringNV, is_loaded: false };
    pub static mut GetProgramSubroutineParameteruivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, param: *GLuint) -> c_void> = FnPtr { f: super::failing::GetProgramSubroutineParameteruivNV, is_loaded: false };
    pub static mut GetProgramiv: FnPtr<extern "C" fn(program: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramiv, is_loaded: false };
    pub static mut GetProgramivARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramivARB, is_loaded: false };
    pub static mut GetProgramivNV: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetProgramivNV, is_loaded: false };
    pub static mut GetQueryIndexediv: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetQueryIndexediv, is_loaded: false };
    pub static mut GetQueryObjecti64v: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint64) -> c_void> = FnPtr { f: super::failing::GetQueryObjecti64v, is_loaded: false };
    pub static mut GetQueryObjecti64vEXT: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint64) -> c_void> = FnPtr { f: super::failing::GetQueryObjecti64vEXT, is_loaded: false };
    pub static mut GetQueryObjectiv: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetQueryObjectiv, is_loaded: false };
    pub static mut GetQueryObjectivARB: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetQueryObjectivARB, is_loaded: false };
    pub static mut GetQueryObjectivEXT: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetQueryObjectivEXT, is_loaded: false };
    pub static mut GetQueryObjectui64v: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void> = FnPtr { f: super::failing::GetQueryObjectui64v, is_loaded: false };
    pub static mut GetQueryObjectui64vEXT: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void> = FnPtr { f: super::failing::GetQueryObjectui64vEXT, is_loaded: false };
    pub static mut GetQueryObjectuiv: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetQueryObjectuiv, is_loaded: false };
    pub static mut GetQueryObjectuivARB: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetQueryObjectuivARB, is_loaded: false };
    pub static mut GetQueryObjectuivEXT: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetQueryObjectuivEXT, is_loaded: false };
    pub static mut GetQueryiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetQueryiv, is_loaded: false };
    pub static mut GetQueryivARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetQueryivARB, is_loaded: false };
    pub static mut GetQueryivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetQueryivEXT, is_loaded: false };
    pub static mut GetRenderbufferParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetRenderbufferParameteriv, is_loaded: false };
    pub static mut GetRenderbufferParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetRenderbufferParameterivEXT, is_loaded: false };
    pub static mut GetRenderbufferParameterivOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetRenderbufferParameterivOES, is_loaded: false };
    pub static mut GetSamplerParameterIiv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetSamplerParameterIiv, is_loaded: false };
    pub static mut GetSamplerParameterIuiv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetSamplerParameterIuiv, is_loaded: false };
    pub static mut GetSamplerParameterfv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetSamplerParameterfv, is_loaded: false };
    pub static mut GetSamplerParameteriv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetSamplerParameteriv, is_loaded: false };
    pub static mut GetSeparableFilter: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetSeparableFilter, is_loaded: false };
    pub static mut GetSeparableFilterEXT: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetSeparableFilterEXT, is_loaded: false };
    pub static mut GetShaderInfoLog: FnPtr<extern "C" fn(shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void> = FnPtr { f: super::failing::GetShaderInfoLog, is_loaded: false };
    pub static mut GetShaderPrecisionFormat: FnPtr<extern "C" fn(shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> c_void> = FnPtr { f: super::failing::GetShaderPrecisionFormat, is_loaded: false };
    pub static mut GetShaderSource: FnPtr<extern "C" fn(shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void> = FnPtr { f: super::failing::GetShaderSource, is_loaded: false };
    pub static mut GetShaderSourceARB: FnPtr<extern "C" fn(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) -> c_void> = FnPtr { f: super::failing::GetShaderSourceARB, is_loaded: false };
    pub static mut GetShaderiv: FnPtr<extern "C" fn(shader: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetShaderiv, is_loaded: false };
    pub static mut GetSharpenTexFuncSGIS: FnPtr<extern "C" fn(target: GLenum, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetSharpenTexFuncSGIS, is_loaded: false };
    pub static mut GetString: FnPtr<extern "C" fn(name: GLenum) -> *GLubyte> = FnPtr { f: super::failing::GetString, is_loaded: false };
    pub static mut GetStringi: FnPtr<extern "C" fn(name: GLenum, index: GLuint) -> *GLubyte> = FnPtr { f: super::failing::GetStringi, is_loaded: false };
    pub static mut GetSubroutineIndex: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint> = FnPtr { f: super::failing::GetSubroutineIndex, is_loaded: false };
    pub static mut GetSubroutineUniformLocation: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetSubroutineUniformLocation, is_loaded: false };
    pub static mut GetSynciv: FnPtr<extern "C" fn(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void> = FnPtr { f: super::failing::GetSynciv, is_loaded: false };
    pub static mut GetSyncivAPPLE: FnPtr<extern "C" fn(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void> = FnPtr { f: super::failing::GetSyncivAPPLE, is_loaded: false };
    pub static mut GetTexBumpParameterfvATI: FnPtr<extern "C" fn(pname: GLenum, param: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTexBumpParameterfvATI, is_loaded: false };
    pub static mut GetTexBumpParameterivATI: FnPtr<extern "C" fn(pname: GLenum, param: *GLint) -> c_void> = FnPtr { f: super::failing::GetTexBumpParameterivATI, is_loaded: false };
    pub static mut GetTexEnvfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTexEnvfv, is_loaded: false };
    pub static mut GetTexEnviv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTexEnviv, is_loaded: false };
    pub static mut GetTexEnvxv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetTexEnvxv, is_loaded: false };
    pub static mut GetTexEnvxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetTexEnvxvOES, is_loaded: false };
    pub static mut GetTexFilterFuncSGIS: FnPtr<extern "C" fn(target: GLenum, filter: GLenum, weights: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTexFilterFuncSGIS, is_loaded: false };
    pub static mut GetTexGendv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetTexGendv, is_loaded: false };
    pub static mut GetTexGenfv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTexGenfv, is_loaded: false };
    pub static mut GetTexGenfvOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTexGenfvOES, is_loaded: false };
    pub static mut GetTexGeniv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTexGeniv, is_loaded: false };
    pub static mut GetTexGenivOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTexGenivOES, is_loaded: false };
    pub static mut GetTexGenxvOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetTexGenxvOES, is_loaded: false };
    pub static mut GetTexImage: FnPtr<extern "C" fn(target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetTexImage, is_loaded: false };
    pub static mut GetTexLevelParameterfv: FnPtr<extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTexLevelParameterfv, is_loaded: false };
    pub static mut GetTexLevelParameteriv: FnPtr<extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTexLevelParameteriv, is_loaded: false };
    pub static mut GetTexLevelParameterxvOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetTexLevelParameterxvOES, is_loaded: false };
    pub static mut GetTexParameterIiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTexParameterIiv, is_loaded: false };
    pub static mut GetTexParameterIivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTexParameterIivEXT, is_loaded: false };
    pub static mut GetTexParameterIuiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetTexParameterIuiv, is_loaded: false };
    pub static mut GetTexParameterIuivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetTexParameterIuivEXT, is_loaded: false };
    pub static mut GetTexParameterPointervAPPLE: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetTexParameterPointervAPPLE, is_loaded: false };
    pub static mut GetTexParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTexParameterfv, is_loaded: false };
    pub static mut GetTexParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTexParameteriv, is_loaded: false };
    pub static mut GetTexParameterxv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetTexParameterxv, is_loaded: false };
    pub static mut GetTexParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::GetTexParameterxvOES, is_loaded: false };
    pub static mut GetTextureHandleARB: FnPtr<extern "C" fn(texture: GLuint) -> GLuint64> = FnPtr { f: super::failing::GetTextureHandleARB, is_loaded: false };
    pub static mut GetTextureHandleNV: FnPtr<extern "C" fn(texture: GLuint) -> GLuint64> = FnPtr { f: super::failing::GetTextureHandleNV, is_loaded: false };
    pub static mut GetTextureImageEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetTextureImageEXT, is_loaded: false };
    pub static mut GetTextureLevelParameterfvEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTextureLevelParameterfvEXT, is_loaded: false };
    pub static mut GetTextureLevelParameterivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTextureLevelParameterivEXT, is_loaded: false };
    pub static mut GetTextureParameterIivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTextureParameterIivEXT, is_loaded: false };
    pub static mut GetTextureParameterIuivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetTextureParameterIuivEXT, is_loaded: false };
    pub static mut GetTextureParameterfvEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetTextureParameterfvEXT, is_loaded: false };
    pub static mut GetTextureParameterivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTextureParameterivEXT, is_loaded: false };
    pub static mut GetTextureSamplerHandleARB: FnPtr<extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64> = FnPtr { f: super::failing::GetTextureSamplerHandleARB, is_loaded: false };
    pub static mut GetTextureSamplerHandleNV: FnPtr<extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64> = FnPtr { f: super::failing::GetTextureSamplerHandleNV, is_loaded: false };
    pub static mut GetTrackMatrixivNV: FnPtr<extern "C" fn(target: GLenum, address: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetTrackMatrixivNV, is_loaded: false };
    pub static mut GetTransformFeedbackVarying: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void> = FnPtr { f: super::failing::GetTransformFeedbackVarying, is_loaded: false };
    pub static mut GetTransformFeedbackVaryingEXT: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void> = FnPtr { f: super::failing::GetTransformFeedbackVaryingEXT, is_loaded: false };
    pub static mut GetTransformFeedbackVaryingNV: FnPtr<extern "C" fn(program: GLuint, index: GLuint, location: *GLint) -> c_void> = FnPtr { f: super::failing::GetTransformFeedbackVaryingNV, is_loaded: false };
    pub static mut GetTranslatedShaderSourceANGLE: FnPtr<extern "C" fn(shader: GLuint, bufsize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void> = FnPtr { f: super::failing::GetTranslatedShaderSourceANGLE, is_loaded: false };
    pub static mut GetUniformBlockIndex: FnPtr<extern "C" fn(program: GLuint, uniformBlockName: *GLchar) -> GLuint> = FnPtr { f: super::failing::GetUniformBlockIndex, is_loaded: false };
    pub static mut GetUniformBufferSizeEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint) -> GLint> = FnPtr { f: super::failing::GetUniformBufferSizeEXT, is_loaded: false };
    pub static mut GetUniformIndices: FnPtr<extern "C" fn(program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> c_void> = FnPtr { f: super::failing::GetUniformIndices, is_loaded: false };
    pub static mut GetUniformLocation: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetUniformLocation, is_loaded: false };
    pub static mut GetUniformLocationARB: FnPtr<extern "C" fn(programObj: GLhandleARB, name: *GLcharARB) -> GLint> = FnPtr { f: super::failing::GetUniformLocationARB, is_loaded: false };
    pub static mut GetUniformOffsetEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint) -> GLintptr> = FnPtr { f: super::failing::GetUniformOffsetEXT, is_loaded: false };
    pub static mut GetUniformSubroutineuiv: FnPtr<extern "C" fn(shadertype: GLenum, location: GLint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetUniformSubroutineuiv, is_loaded: false };
    pub static mut GetUniformdv: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetUniformdv, is_loaded: false };
    pub static mut GetUniformfv: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetUniformfv, is_loaded: false };
    pub static mut GetUniformfvARB: FnPtr<extern "C" fn(programObj: GLhandleARB, location: GLint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetUniformfvARB, is_loaded: false };
    pub static mut GetUniformi64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::GetUniformi64vNV, is_loaded: false };
    pub static mut GetUniformiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetUniformiv, is_loaded: false };
    pub static mut GetUniformivARB: FnPtr<extern "C" fn(programObj: GLhandleARB, location: GLint, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetUniformivARB, is_loaded: false };
    pub static mut GetUniformui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::GetUniformui64vNV, is_loaded: false };
    pub static mut GetUniformuiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetUniformuiv, is_loaded: false };
    pub static mut GetUniformuivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetUniformuivEXT, is_loaded: false };
    pub static mut GetVariantArrayObjectfvATI: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetVariantArrayObjectfvATI, is_loaded: false };
    pub static mut GetVariantArrayObjectivATI: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVariantArrayObjectivATI, is_loaded: false };
    pub static mut GetVariantBooleanvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void> = FnPtr { f: super::failing::GetVariantBooleanvEXT, is_loaded: false };
    pub static mut GetVariantFloatvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetVariantFloatvEXT, is_loaded: false };
    pub static mut GetVariantIntegervEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void> = FnPtr { f: super::failing::GetVariantIntegervEXT, is_loaded: false };
    pub static mut GetVariantPointervEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetVariantPointervEXT, is_loaded: false };
    pub static mut GetVaryingLocationNV: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint> = FnPtr { f: super::failing::GetVaryingLocationNV, is_loaded: false };
    pub static mut GetVertexArrayIntegeri_vEXT: FnPtr<extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) -> c_void> = FnPtr { f: super::failing::GetVertexArrayIntegeri_vEXT, is_loaded: false };
    pub static mut GetVertexArrayIntegervEXT: FnPtr<extern "C" fn(vaobj: GLuint, pname: GLenum, param: *GLint) -> c_void> = FnPtr { f: super::failing::GetVertexArrayIntegervEXT, is_loaded: false };
    pub static mut GetVertexArrayPointeri_vEXT: FnPtr<extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetVertexArrayPointeri_vEXT, is_loaded: false };
    pub static mut GetVertexArrayPointervEXT: FnPtr<extern "C" fn(vaobj: GLuint, pname: GLenum, param: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetVertexArrayPointervEXT, is_loaded: false };
    pub static mut GetVertexAttribArrayObjectfvATI: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetVertexAttribArrayObjectfvATI, is_loaded: false };
    pub static mut GetVertexAttribArrayObjectivATI: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVertexAttribArrayObjectivATI, is_loaded: false };
    pub static mut GetVertexAttribIiv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVertexAttribIiv, is_loaded: false };
    pub static mut GetVertexAttribIivEXT: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVertexAttribIivEXT, is_loaded: false };
    pub static mut GetVertexAttribIuiv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetVertexAttribIuiv, is_loaded: false };
    pub static mut GetVertexAttribIuivEXT: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetVertexAttribIuivEXT, is_loaded: false };
    pub static mut GetVertexAttribLdv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetVertexAttribLdv, is_loaded: false };
    pub static mut GetVertexAttribLdvEXT: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetVertexAttribLdvEXT, is_loaded: false };
    pub static mut GetVertexAttribLi64vNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::GetVertexAttribLi64vNV, is_loaded: false };
    pub static mut GetVertexAttribLui64vARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::GetVertexAttribLui64vARB, is_loaded: false };
    pub static mut GetVertexAttribLui64vNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::GetVertexAttribLui64vNV, is_loaded: false };
    pub static mut GetVertexAttribPointerv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetVertexAttribPointerv, is_loaded: false };
    pub static mut GetVertexAttribPointervARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetVertexAttribPointervARB, is_loaded: false };
    pub static mut GetVertexAttribPointervNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void> = FnPtr { f: super::failing::GetVertexAttribPointervNV, is_loaded: false };
    pub static mut GetVertexAttribdv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetVertexAttribdv, is_loaded: false };
    pub static mut GetVertexAttribdvARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetVertexAttribdvARB, is_loaded: false };
    pub static mut GetVertexAttribdvNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetVertexAttribdvNV, is_loaded: false };
    pub static mut GetVertexAttribfv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetVertexAttribfv, is_loaded: false };
    pub static mut GetVertexAttribfvARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetVertexAttribfvARB, is_loaded: false };
    pub static mut GetVertexAttribfvNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetVertexAttribfvNV, is_loaded: false };
    pub static mut GetVertexAttribiv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVertexAttribiv, is_loaded: false };
    pub static mut GetVertexAttribivARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVertexAttribivARB, is_loaded: false };
    pub static mut GetVertexAttribivNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVertexAttribivNV, is_loaded: false };
    pub static mut GetVideoCaptureStreamdvNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetVideoCaptureStreamdvNV, is_loaded: false };
    pub static mut GetVideoCaptureStreamfvNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetVideoCaptureStreamfvNV, is_loaded: false };
    pub static mut GetVideoCaptureStreamivNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVideoCaptureStreamivNV, is_loaded: false };
    pub static mut GetVideoCaptureivNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVideoCaptureivNV, is_loaded: false };
    pub static mut GetVideoi64vNV: FnPtr<extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::GetVideoi64vNV, is_loaded: false };
    pub static mut GetVideoivNV: FnPtr<extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetVideoivNV, is_loaded: false };
    pub static mut GetVideoui64vNV: FnPtr<extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::GetVideoui64vNV, is_loaded: false };
    pub static mut GetVideouivNV: FnPtr<extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetVideouivNV, is_loaded: false };
    pub static mut GetnColorTableARB: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, table: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetnColorTableARB, is_loaded: false };
    pub static mut GetnCompressedTexImageARB: FnPtr<extern "C" fn(target: GLenum, lod: GLint, bufSize: GLsizei, img: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetnCompressedTexImageARB, is_loaded: false };
    pub static mut GetnConvolutionFilterARB: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, image: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetnConvolutionFilterARB, is_loaded: false };
    pub static mut GetnHistogramARB: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetnHistogramARB, is_loaded: false };
    pub static mut GetnMapdvARB: FnPtr<extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetnMapdvARB, is_loaded: false };
    pub static mut GetnMapfvARB: FnPtr<extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetnMapfvARB, is_loaded: false };
    pub static mut GetnMapivARB: FnPtr<extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) -> c_void> = FnPtr { f: super::failing::GetnMapivARB, is_loaded: false };
    pub static mut GetnMinmaxARB: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetnMinmaxARB, is_loaded: false };
    pub static mut GetnPixelMapfvARB: FnPtr<extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetnPixelMapfvARB, is_loaded: false };
    pub static mut GetnPixelMapuivARB: FnPtr<extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLuint) -> c_void> = FnPtr { f: super::failing::GetnPixelMapuivARB, is_loaded: false };
    pub static mut GetnPixelMapusvARB: FnPtr<extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLushort) -> c_void> = FnPtr { f: super::failing::GetnPixelMapusvARB, is_loaded: false };
    pub static mut GetnPolygonStippleARB: FnPtr<extern "C" fn(bufSize: GLsizei, pattern: *GLubyte) -> c_void> = FnPtr { f: super::failing::GetnPolygonStippleARB, is_loaded: false };
    pub static mut GetnSeparableFilterARB: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, rowBufSize: GLsizei, row: *GLvoid, columnBufSize: GLsizei, column: *GLvoid, span: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetnSeparableFilterARB, is_loaded: false };
    pub static mut GetnTexImageARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: *GLvoid) -> c_void> = FnPtr { f: super::failing::GetnTexImageARB, is_loaded: false };
    pub static mut GetnUniformdvARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::GetnUniformdvARB, is_loaded: false };
    pub static mut GetnUniformfvARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetnUniformfvARB, is_loaded: false };
    pub static mut GetnUniformfvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::GetnUniformfvEXT, is_loaded: false };
    pub static mut GetnUniformivARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetnUniformivARB, is_loaded: false };
    pub static mut GetnUniformivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void> = FnPtr { f: super::failing::GetnUniformivEXT, is_loaded: false };
    pub static mut GetnUniformuivARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> c_void> = FnPtr { f: super::failing::GetnUniformuivARB, is_loaded: false };
    pub static mut GlobalAlphaFactorbSUN: FnPtr<extern "C" fn(factor: GLbyte) -> c_void> = FnPtr { f: super::failing::GlobalAlphaFactorbSUN, is_loaded: false };
    pub static mut GlobalAlphaFactordSUN: FnPtr<extern "C" fn(factor: GLdouble) -> c_void> = FnPtr { f: super::failing::GlobalAlphaFactordSUN, is_loaded: false };
    pub static mut GlobalAlphaFactorfSUN: FnPtr<extern "C" fn(factor: GLfloat) -> c_void> = FnPtr { f: super::failing::GlobalAlphaFactorfSUN, is_loaded: false };
    pub static mut GlobalAlphaFactoriSUN: FnPtr<extern "C" fn(factor: GLint) -> c_void> = FnPtr { f: super::failing::GlobalAlphaFactoriSUN, is_loaded: false };
    pub static mut GlobalAlphaFactorsSUN: FnPtr<extern "C" fn(factor: GLshort) -> c_void> = FnPtr { f: super::failing::GlobalAlphaFactorsSUN, is_loaded: false };
    pub static mut GlobalAlphaFactorubSUN: FnPtr<extern "C" fn(factor: GLubyte) -> c_void> = FnPtr { f: super::failing::GlobalAlphaFactorubSUN, is_loaded: false };
    pub static mut GlobalAlphaFactoruiSUN: FnPtr<extern "C" fn(factor: GLuint) -> c_void> = FnPtr { f: super::failing::GlobalAlphaFactoruiSUN, is_loaded: false };
    pub static mut GlobalAlphaFactorusSUN: FnPtr<extern "C" fn(factor: GLushort) -> c_void> = FnPtr { f: super::failing::GlobalAlphaFactorusSUN, is_loaded: false };
    pub static mut Hint: FnPtr<extern "C" fn(target: GLenum, mode: GLenum) -> c_void> = FnPtr { f: super::failing::Hint, is_loaded: false };
    pub static mut HintPGI: FnPtr<extern "C" fn(target: GLenum, mode: GLint) -> c_void> = FnPtr { f: super::failing::HintPGI, is_loaded: false };
    pub static mut Histogram: FnPtr<extern "C" fn(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void> = FnPtr { f: super::failing::Histogram, is_loaded: false };
    pub static mut HistogramEXT: FnPtr<extern "C" fn(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void> = FnPtr { f: super::failing::HistogramEXT, is_loaded: false };
    pub static mut IglooInterfaceSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLvoid) -> c_void> = FnPtr { f: super::failing::IglooInterfaceSGIX, is_loaded: false };
    pub static mut ImageTransformParameterfHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::ImageTransformParameterfHP, is_loaded: false };
    pub static mut ImageTransformParameterfvHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ImageTransformParameterfvHP, is_loaded: false };
    pub static mut ImageTransformParameteriHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::ImageTransformParameteriHP, is_loaded: false };
    pub static mut ImageTransformParameterivHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::ImageTransformParameterivHP, is_loaded: false };
    pub static mut ImportSyncEXT: FnPtr<extern "C" fn(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync> = FnPtr { f: super::failing::ImportSyncEXT, is_loaded: false };
    pub static mut IndexFormatNV: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::IndexFormatNV, is_loaded: false };
    pub static mut IndexFuncEXT: FnPtr<extern "C" fn(func: GLenum, ref_: GLclampf) -> c_void> = FnPtr { f: super::failing::IndexFuncEXT, is_loaded: false };
    pub static mut IndexMask: FnPtr<extern "C" fn(mask: GLuint) -> c_void> = FnPtr { f: super::failing::IndexMask, is_loaded: false };
    pub static mut IndexMaterialEXT: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void> = FnPtr { f: super::failing::IndexMaterialEXT, is_loaded: false };
    pub static mut IndexPointer: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::IndexPointer, is_loaded: false };
    pub static mut IndexPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::IndexPointerEXT, is_loaded: false };
    pub static mut IndexPointerListIBM: FnPtr<extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void> = FnPtr { f: super::failing::IndexPointerListIBM, is_loaded: false };
    pub static mut Indexd: FnPtr<extern "C" fn(c: GLdouble) -> c_void> = FnPtr { f: super::failing::Indexd, is_loaded: false };
    pub static mut Indexdv: FnPtr<extern "C" fn(c: *GLdouble) -> c_void> = FnPtr { f: super::failing::Indexdv, is_loaded: false };
    pub static mut Indexf: FnPtr<extern "C" fn(c: GLfloat) -> c_void> = FnPtr { f: super::failing::Indexf, is_loaded: false };
    pub static mut Indexfv: FnPtr<extern "C" fn(c: *GLfloat) -> c_void> = FnPtr { f: super::failing::Indexfv, is_loaded: false };
    pub static mut Indexi: FnPtr<extern "C" fn(c: GLint) -> c_void> = FnPtr { f: super::failing::Indexi, is_loaded: false };
    pub static mut Indexiv: FnPtr<extern "C" fn(c: *GLint) -> c_void> = FnPtr { f: super::failing::Indexiv, is_loaded: false };
    pub static mut Indexs: FnPtr<extern "C" fn(c: GLshort) -> c_void> = FnPtr { f: super::failing::Indexs, is_loaded: false };
    pub static mut Indexsv: FnPtr<extern "C" fn(c: *GLshort) -> c_void> = FnPtr { f: super::failing::Indexsv, is_loaded: false };
    pub static mut Indexub: FnPtr<extern "C" fn(c: GLubyte) -> c_void> = FnPtr { f: super::failing::Indexub, is_loaded: false };
    pub static mut Indexubv: FnPtr<extern "C" fn(c: *GLubyte) -> c_void> = FnPtr { f: super::failing::Indexubv, is_loaded: false };
    pub static mut IndexxOES: FnPtr<extern "C" fn(component: GLfixed) -> c_void> = FnPtr { f: super::failing::IndexxOES, is_loaded: false };
    pub static mut IndexxvOES: FnPtr<extern "C" fn(component: *GLfixed) -> c_void> = FnPtr { f: super::failing::IndexxvOES, is_loaded: false };
    pub static mut InitNames: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::InitNames, is_loaded: false };
    pub static mut InsertComponentEXT: FnPtr<extern "C" fn(res: GLuint, src: GLuint, num: GLuint) -> c_void> = FnPtr { f: super::failing::InsertComponentEXT, is_loaded: false };
    pub static mut InsertEventMarkerEXT: FnPtr<extern "C" fn(length: GLsizei, marker: *GLchar) -> c_void> = FnPtr { f: super::failing::InsertEventMarkerEXT, is_loaded: false };
    pub static mut InstrumentsBufferSGIX: FnPtr<extern "C" fn(size: GLsizei, buffer: *GLint) -> c_void> = FnPtr { f: super::failing::InstrumentsBufferSGIX, is_loaded: false };
    pub static mut InterleavedArrays: FnPtr<extern "C" fn(format: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::InterleavedArrays, is_loaded: false };
    pub static mut InterpolatePathsNV: FnPtr<extern "C" fn(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> c_void> = FnPtr { f: super::failing::InterpolatePathsNV, is_loaded: false };
    pub static mut InvalidateBufferData: FnPtr<extern "C" fn(buffer: GLuint) -> c_void> = FnPtr { f: super::failing::InvalidateBufferData, is_loaded: false };
    pub static mut InvalidateBufferSubData: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::InvalidateBufferSubData, is_loaded: false };
    pub static mut InvalidateFramebuffer: FnPtr<extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void> = FnPtr { f: super::failing::InvalidateFramebuffer, is_loaded: false };
    pub static mut InvalidateSubFramebuffer: FnPtr<extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::InvalidateSubFramebuffer, is_loaded: false };
    pub static mut InvalidateTexImage: FnPtr<extern "C" fn(texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::InvalidateTexImage, is_loaded: false };
    pub static mut InvalidateTexSubImage: FnPtr<extern "C" fn(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void> = FnPtr { f: super::failing::InvalidateTexSubImage, is_loaded: false };
    pub static mut IsAsyncMarkerSGIX: FnPtr<extern "C" fn(marker: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsAsyncMarkerSGIX, is_loaded: false };
    pub static mut IsBuffer: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsBuffer, is_loaded: false };
    pub static mut IsBufferARB: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsBufferARB, is_loaded: false };
    pub static mut IsBufferResidentNV: FnPtr<extern "C" fn(target: GLenum) -> GLboolean> = FnPtr { f: super::failing::IsBufferResidentNV, is_loaded: false };
    pub static mut IsEnabled: FnPtr<extern "C" fn(cap: GLenum) -> GLboolean> = FnPtr { f: super::failing::IsEnabled, is_loaded: false };
    pub static mut IsEnabledIndexedEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsEnabledIndexedEXT, is_loaded: false };
    pub static mut IsEnabledi: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsEnabledi, is_loaded: false };
    pub static mut IsFenceAPPLE: FnPtr<extern "C" fn(fence: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsFenceAPPLE, is_loaded: false };
    pub static mut IsFenceNV: FnPtr<extern "C" fn(fence: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsFenceNV, is_loaded: false };
    pub static mut IsFramebuffer: FnPtr<extern "C" fn(framebuffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsFramebuffer, is_loaded: false };
    pub static mut IsFramebufferEXT: FnPtr<extern "C" fn(framebuffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsFramebufferEXT, is_loaded: false };
    pub static mut IsFramebufferOES: FnPtr<extern "C" fn(framebuffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsFramebufferOES, is_loaded: false };
    pub static mut IsImageHandleResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> GLboolean> = FnPtr { f: super::failing::IsImageHandleResidentARB, is_loaded: false };
    pub static mut IsImageHandleResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> GLboolean> = FnPtr { f: super::failing::IsImageHandleResidentNV, is_loaded: false };
    pub static mut IsList: FnPtr<extern "C" fn(list: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsList, is_loaded: false };
    pub static mut IsNameAMD: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsNameAMD, is_loaded: false };
    pub static mut IsNamedBufferResidentNV: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsNamedBufferResidentNV, is_loaded: false };
    pub static mut IsNamedStringARB: FnPtr<extern "C" fn(namelen: GLint, name: *GLchar) -> GLboolean> = FnPtr { f: super::failing::IsNamedStringARB, is_loaded: false };
    pub static mut IsObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsObjectBufferATI, is_loaded: false };
    pub static mut IsOcclusionQueryNV: FnPtr<extern "C" fn(id: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsOcclusionQueryNV, is_loaded: false };
    pub static mut IsPathNV: FnPtr<extern "C" fn(path: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsPathNV, is_loaded: false };
    pub static mut IsPointInFillPathNV: FnPtr<extern "C" fn(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean> = FnPtr { f: super::failing::IsPointInFillPathNV, is_loaded: false };
    pub static mut IsPointInStrokePathNV: FnPtr<extern "C" fn(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean> = FnPtr { f: super::failing::IsPointInStrokePathNV, is_loaded: false };
    pub static mut IsProgram: FnPtr<extern "C" fn(program: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsProgram, is_loaded: false };
    pub static mut IsProgramARB: FnPtr<extern "C" fn(program: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsProgramARB, is_loaded: false };
    pub static mut IsProgramNV: FnPtr<extern "C" fn(id: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsProgramNV, is_loaded: false };
    pub static mut IsProgramPipeline: FnPtr<extern "C" fn(pipeline: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsProgramPipeline, is_loaded: false };
    pub static mut IsProgramPipelineEXT: FnPtr<extern "C" fn(pipeline: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsProgramPipelineEXT, is_loaded: false };
    pub static mut IsQuery: FnPtr<extern "C" fn(id: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsQuery, is_loaded: false };
    pub static mut IsQueryARB: FnPtr<extern "C" fn(id: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsQueryARB, is_loaded: false };
    pub static mut IsQueryEXT: FnPtr<extern "C" fn(id: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsQueryEXT, is_loaded: false };
    pub static mut IsRenderbuffer: FnPtr<extern "C" fn(renderbuffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsRenderbuffer, is_loaded: false };
    pub static mut IsRenderbufferEXT: FnPtr<extern "C" fn(renderbuffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsRenderbufferEXT, is_loaded: false };
    pub static mut IsRenderbufferOES: FnPtr<extern "C" fn(renderbuffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsRenderbufferOES, is_loaded: false };
    pub static mut IsSampler: FnPtr<extern "C" fn(sampler: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsSampler, is_loaded: false };
    pub static mut IsShader: FnPtr<extern "C" fn(shader: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsShader, is_loaded: false };
    pub static mut IsSync: FnPtr<extern "C" fn(sync: GLsync) -> GLboolean> = FnPtr { f: super::failing::IsSync, is_loaded: false };
    pub static mut IsSyncAPPLE: FnPtr<extern "C" fn(sync: GLsync) -> GLboolean> = FnPtr { f: super::failing::IsSyncAPPLE, is_loaded: false };
    pub static mut IsTexture: FnPtr<extern "C" fn(texture: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsTexture, is_loaded: false };
    pub static mut IsTextureEXT: FnPtr<extern "C" fn(texture: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsTextureEXT, is_loaded: false };
    pub static mut IsTextureHandleResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> GLboolean> = FnPtr { f: super::failing::IsTextureHandleResidentARB, is_loaded: false };
    pub static mut IsTextureHandleResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> GLboolean> = FnPtr { f: super::failing::IsTextureHandleResidentNV, is_loaded: false };
    pub static mut IsTransformFeedback: FnPtr<extern "C" fn(id: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsTransformFeedback, is_loaded: false };
    pub static mut IsTransformFeedbackNV: FnPtr<extern "C" fn(id: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsTransformFeedbackNV, is_loaded: false };
    pub static mut IsVariantEnabledEXT: FnPtr<extern "C" fn(id: GLuint, cap: GLenum) -> GLboolean> = FnPtr { f: super::failing::IsVariantEnabledEXT, is_loaded: false };
    pub static mut IsVertexArray: FnPtr<extern "C" fn(array: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsVertexArray, is_loaded: false };
    pub static mut IsVertexArrayAPPLE: FnPtr<extern "C" fn(array: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsVertexArrayAPPLE, is_loaded: false };
    pub static mut IsVertexArrayOES: FnPtr<extern "C" fn(array: GLuint) -> GLboolean> = FnPtr { f: super::failing::IsVertexArrayOES, is_loaded: false };
    pub static mut IsVertexAttribEnabledAPPLE: FnPtr<extern "C" fn(index: GLuint, pname: GLenum) -> GLboolean> = FnPtr { f: super::failing::IsVertexAttribEnabledAPPLE, is_loaded: false };
    pub static mut LabelObjectEXT: FnPtr<extern "C" fn(type_: GLenum, object: GLuint, length: GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::LabelObjectEXT, is_loaded: false };
    pub static mut LightEnviSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::LightEnviSGIX, is_loaded: false };
    pub static mut LightModelf: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::LightModelf, is_loaded: false };
    pub static mut LightModelfv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::LightModelfv, is_loaded: false };
    pub static mut LightModeli: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::LightModeli, is_loaded: false };
    pub static mut LightModeliv: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::LightModeliv, is_loaded: false };
    pub static mut LightModelx: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::LightModelx, is_loaded: false };
    pub static mut LightModelxOES: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::LightModelxOES, is_loaded: false };
    pub static mut LightModelxv: FnPtr<extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void> = FnPtr { f: super::failing::LightModelxv, is_loaded: false };
    pub static mut LightModelxvOES: FnPtr<extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void> = FnPtr { f: super::failing::LightModelxvOES, is_loaded: false };
    pub static mut Lightf: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::Lightf, is_loaded: false };
    pub static mut Lightfv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::Lightfv, is_loaded: false };
    pub static mut Lighti: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::Lighti, is_loaded: false };
    pub static mut Lightiv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::Lightiv, is_loaded: false };
    pub static mut Lightx: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::Lightx, is_loaded: false };
    pub static mut LightxOES: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::LightxOES, is_loaded: false };
    pub static mut Lightxv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::Lightxv, is_loaded: false };
    pub static mut LightxvOES: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::LightxvOES, is_loaded: false };
    pub static mut LineStipple: FnPtr<extern "C" fn(factor: GLint, pattern: GLushort) -> c_void> = FnPtr { f: super::failing::LineStipple, is_loaded: false };
    pub static mut LineWidth: FnPtr<extern "C" fn(width: GLfloat) -> c_void> = FnPtr { f: super::failing::LineWidth, is_loaded: false };
    pub static mut LineWidthx: FnPtr<extern "C" fn(width: GLfixed) -> c_void> = FnPtr { f: super::failing::LineWidthx, is_loaded: false };
    pub static mut LineWidthxOES: FnPtr<extern "C" fn(width: GLfixed) -> c_void> = FnPtr { f: super::failing::LineWidthxOES, is_loaded: false };
    pub static mut LinkProgram: FnPtr<extern "C" fn(program: GLuint) -> c_void> = FnPtr { f: super::failing::LinkProgram, is_loaded: false };
    pub static mut LinkProgramARB: FnPtr<extern "C" fn(programObj: GLhandleARB) -> c_void> = FnPtr { f: super::failing::LinkProgramARB, is_loaded: false };
    pub static mut ListBase: FnPtr<extern "C" fn(base: GLuint) -> c_void> = FnPtr { f: super::failing::ListBase, is_loaded: false };
    pub static mut ListParameterfSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::ListParameterfSGIX, is_loaded: false };
    pub static mut ListParameterfvSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ListParameterfvSGIX, is_loaded: false };
    pub static mut ListParameteriSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::ListParameteriSGIX, is_loaded: false };
    pub static mut ListParameterivSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::ListParameterivSGIX, is_loaded: false };
    pub static mut LoadIdentity: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::LoadIdentity, is_loaded: false };
    pub static mut LoadIdentityDeformationMapSGIX: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::LoadIdentityDeformationMapSGIX, is_loaded: false };
    pub static mut LoadMatrixd: FnPtr<extern "C" fn(m: *GLdouble) -> c_void> = FnPtr { f: super::failing::LoadMatrixd, is_loaded: false };
    pub static mut LoadMatrixf: FnPtr<extern "C" fn(m: *GLfloat) -> c_void> = FnPtr { f: super::failing::LoadMatrixf, is_loaded: false };
    pub static mut LoadMatrixx: FnPtr<extern "C" fn(m: *GLfixed) -> c_void> = FnPtr { f: super::failing::LoadMatrixx, is_loaded: false };
    pub static mut LoadMatrixxOES: FnPtr<extern "C" fn(m: *GLfixed) -> c_void> = FnPtr { f: super::failing::LoadMatrixxOES, is_loaded: false };
    pub static mut LoadName: FnPtr<extern "C" fn(name: GLuint) -> c_void> = FnPtr { f: super::failing::LoadName, is_loaded: false };
    pub static mut LoadPaletteFromModelViewMatrixOES: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::LoadPaletteFromModelViewMatrixOES, is_loaded: false };
    pub static mut LoadProgramNV: FnPtr<extern "C" fn(target: GLenum, id: GLuint, len: GLsizei, program: *GLubyte) -> c_void> = FnPtr { f: super::failing::LoadProgramNV, is_loaded: false };
    pub static mut LoadTransposeMatrixd: FnPtr<extern "C" fn(m: *GLdouble) -> c_void> = FnPtr { f: super::failing::LoadTransposeMatrixd, is_loaded: false };
    pub static mut LoadTransposeMatrixdARB: FnPtr<extern "C" fn(m: *GLdouble) -> c_void> = FnPtr { f: super::failing::LoadTransposeMatrixdARB, is_loaded: false };
    pub static mut LoadTransposeMatrixf: FnPtr<extern "C" fn(m: *GLfloat) -> c_void> = FnPtr { f: super::failing::LoadTransposeMatrixf, is_loaded: false };
    pub static mut LoadTransposeMatrixfARB: FnPtr<extern "C" fn(m: *GLfloat) -> c_void> = FnPtr { f: super::failing::LoadTransposeMatrixfARB, is_loaded: false };
    pub static mut LoadTransposeMatrixxOES: FnPtr<extern "C" fn(m: *GLfixed) -> c_void> = FnPtr { f: super::failing::LoadTransposeMatrixxOES, is_loaded: false };
    pub static mut LockArraysEXT: FnPtr<extern "C" fn(first: GLint, count: GLsizei) -> c_void> = FnPtr { f: super::failing::LockArraysEXT, is_loaded: false };
    pub static mut LogicOp: FnPtr<extern "C" fn(opcode: GLenum) -> c_void> = FnPtr { f: super::failing::LogicOp, is_loaded: false };
    pub static mut MakeBufferNonResidentNV: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::MakeBufferNonResidentNV, is_loaded: false };
    pub static mut MakeBufferResidentNV: FnPtr<extern "C" fn(target: GLenum, access: GLenum) -> c_void> = FnPtr { f: super::failing::MakeBufferResidentNV, is_loaded: false };
    pub static mut MakeImageHandleNonResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> c_void> = FnPtr { f: super::failing::MakeImageHandleNonResidentARB, is_loaded: false };
    pub static mut MakeImageHandleNonResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> c_void> = FnPtr { f: super::failing::MakeImageHandleNonResidentNV, is_loaded: false };
    pub static mut MakeImageHandleResidentARB: FnPtr<extern "C" fn(handle: GLuint64, access: GLenum) -> c_void> = FnPtr { f: super::failing::MakeImageHandleResidentARB, is_loaded: false };
    pub static mut MakeImageHandleResidentNV: FnPtr<extern "C" fn(handle: GLuint64, access: GLenum) -> c_void> = FnPtr { f: super::failing::MakeImageHandleResidentNV, is_loaded: false };
    pub static mut MakeNamedBufferNonResidentNV: FnPtr<extern "C" fn(buffer: GLuint) -> c_void> = FnPtr { f: super::failing::MakeNamedBufferNonResidentNV, is_loaded: false };
    pub static mut MakeNamedBufferResidentNV: FnPtr<extern "C" fn(buffer: GLuint, access: GLenum) -> c_void> = FnPtr { f: super::failing::MakeNamedBufferResidentNV, is_loaded: false };
    pub static mut MakeTextureHandleNonResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> c_void> = FnPtr { f: super::failing::MakeTextureHandleNonResidentARB, is_loaded: false };
    pub static mut MakeTextureHandleNonResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> c_void> = FnPtr { f: super::failing::MakeTextureHandleNonResidentNV, is_loaded: false };
    pub static mut MakeTextureHandleResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> c_void> = FnPtr { f: super::failing::MakeTextureHandleResidentARB, is_loaded: false };
    pub static mut MakeTextureHandleResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> c_void> = FnPtr { f: super::failing::MakeTextureHandleResidentNV, is_loaded: false };
    pub static mut Map1d: FnPtr<extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void> = FnPtr { f: super::failing::Map1d, is_loaded: false };
    pub static mut Map1f: FnPtr<extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::Map1f, is_loaded: false };
    pub static mut Map1xOES: FnPtr<extern "C" fn(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) -> c_void> = FnPtr { f: super::failing::Map1xOES, is_loaded: false };
    pub static mut Map2d: FnPtr<extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void> = FnPtr { f: super::failing::Map2d, is_loaded: false };
    pub static mut Map2f: FnPtr<extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::Map2f, is_loaded: false };
    pub static mut Map2xOES: FnPtr<extern "C" fn(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) -> c_void> = FnPtr { f: super::failing::Map2xOES, is_loaded: false };
    pub static mut MapBuffer: FnPtr<extern "C" fn(target: GLenum, access: GLenum) -> *c_void> = FnPtr { f: super::failing::MapBuffer, is_loaded: false };
    pub static mut MapBufferARB: FnPtr<extern "C" fn(target: GLenum, access: GLenum) -> *c_void> = FnPtr { f: super::failing::MapBufferARB, is_loaded: false };
    pub static mut MapBufferOES: FnPtr<extern "C" fn(target: GLenum, access: GLenum) -> *c_void> = FnPtr { f: super::failing::MapBufferOES, is_loaded: false };
    pub static mut MapBufferRange: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void> = FnPtr { f: super::failing::MapBufferRange, is_loaded: false };
    pub static mut MapBufferRangeEXT: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void> = FnPtr { f: super::failing::MapBufferRangeEXT, is_loaded: false };
    pub static mut MapControlPointsNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *GLvoid) -> c_void> = FnPtr { f: super::failing::MapControlPointsNV, is_loaded: false };
    pub static mut MapGrid1d: FnPtr<extern "C" fn(un: GLint, u1: GLdouble, u2: GLdouble) -> c_void> = FnPtr { f: super::failing::MapGrid1d, is_loaded: false };
    pub static mut MapGrid1f: FnPtr<extern "C" fn(un: GLint, u1: GLfloat, u2: GLfloat) -> c_void> = FnPtr { f: super::failing::MapGrid1f, is_loaded: false };
    pub static mut MapGrid1xOES: FnPtr<extern "C" fn(n: GLint, u1: GLfixed, u2: GLfixed) -> c_void> = FnPtr { f: super::failing::MapGrid1xOES, is_loaded: false };
    pub static mut MapGrid2d: FnPtr<extern "C" fn(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> c_void> = FnPtr { f: super::failing::MapGrid2d, is_loaded: false };
    pub static mut MapGrid2f: FnPtr<extern "C" fn(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> c_void> = FnPtr { f: super::failing::MapGrid2f, is_loaded: false };
    pub static mut MapGrid2xOES: FnPtr<extern "C" fn(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) -> c_void> = FnPtr { f: super::failing::MapGrid2xOES, is_loaded: false };
    pub static mut MapNamedBufferEXT: FnPtr<extern "C" fn(buffer: GLuint, access: GLenum) -> *c_void> = FnPtr { f: super::failing::MapNamedBufferEXT, is_loaded: false };
    pub static mut MapNamedBufferRangeEXT: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void> = FnPtr { f: super::failing::MapNamedBufferRangeEXT, is_loaded: false };
    pub static mut MapObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint) -> *c_void> = FnPtr { f: super::failing::MapObjectBufferATI, is_loaded: false };
    pub static mut MapParameterfvNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::MapParameterfvNV, is_loaded: false };
    pub static mut MapParameterivNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::MapParameterivNV, is_loaded: false };
    pub static mut MapTexture2DINTEL: FnPtr<extern "C" fn(texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) -> *c_void> = FnPtr { f: super::failing::MapTexture2DINTEL, is_loaded: false };
    pub static mut MapVertexAttrib1dAPPLE: FnPtr<extern "C" fn(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void> = FnPtr { f: super::failing::MapVertexAttrib1dAPPLE, is_loaded: false };
    pub static mut MapVertexAttrib1fAPPLE: FnPtr<extern "C" fn(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::MapVertexAttrib1fAPPLE, is_loaded: false };
    pub static mut MapVertexAttrib2dAPPLE: FnPtr<extern "C" fn(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void> = FnPtr { f: super::failing::MapVertexAttrib2dAPPLE, is_loaded: false };
    pub static mut MapVertexAttrib2fAPPLE: FnPtr<extern "C" fn(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::MapVertexAttrib2fAPPLE, is_loaded: false };
    pub static mut Materialf: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::Materialf, is_loaded: false };
    pub static mut Materialfv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::Materialfv, is_loaded: false };
    pub static mut Materiali: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::Materiali, is_loaded: false };
    pub static mut Materialiv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::Materialiv, is_loaded: false };
    pub static mut Materialx: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::Materialx, is_loaded: false };
    pub static mut MaterialxOES: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::MaterialxOES, is_loaded: false };
    pub static mut Materialxv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void> = FnPtr { f: super::failing::Materialxv, is_loaded: false };
    pub static mut MaterialxvOES: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void> = FnPtr { f: super::failing::MaterialxvOES, is_loaded: false };
    pub static mut MatrixFrustumEXT: FnPtr<extern "C" fn(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixFrustumEXT, is_loaded: false };
    pub static mut MatrixIndexPointerARB: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::MatrixIndexPointerARB, is_loaded: false };
    pub static mut MatrixIndexPointerOES: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::MatrixIndexPointerOES, is_loaded: false };
    pub static mut MatrixIndexubvARB: FnPtr<extern "C" fn(size: GLint, indices: *GLubyte) -> c_void> = FnPtr { f: super::failing::MatrixIndexubvARB, is_loaded: false };
    pub static mut MatrixIndexuivARB: FnPtr<extern "C" fn(size: GLint, indices: *GLuint) -> c_void> = FnPtr { f: super::failing::MatrixIndexuivARB, is_loaded: false };
    pub static mut MatrixIndexusvARB: FnPtr<extern "C" fn(size: GLint, indices: *GLushort) -> c_void> = FnPtr { f: super::failing::MatrixIndexusvARB, is_loaded: false };
    pub static mut MatrixLoadIdentityEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::MatrixLoadIdentityEXT, is_loaded: false };
    pub static mut MatrixLoadTransposedEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixLoadTransposedEXT, is_loaded: false };
    pub static mut MatrixLoadTransposefEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void> = FnPtr { f: super::failing::MatrixLoadTransposefEXT, is_loaded: false };
    pub static mut MatrixLoaddEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixLoaddEXT, is_loaded: false };
    pub static mut MatrixLoadfEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void> = FnPtr { f: super::failing::MatrixLoadfEXT, is_loaded: false };
    pub static mut MatrixMode: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::MatrixMode, is_loaded: false };
    pub static mut MatrixMultTransposedEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixMultTransposedEXT, is_loaded: false };
    pub static mut MatrixMultTransposefEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void> = FnPtr { f: super::failing::MatrixMultTransposefEXT, is_loaded: false };
    pub static mut MatrixMultdEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixMultdEXT, is_loaded: false };
    pub static mut MatrixMultfEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void> = FnPtr { f: super::failing::MatrixMultfEXT, is_loaded: false };
    pub static mut MatrixOrthoEXT: FnPtr<extern "C" fn(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixOrthoEXT, is_loaded: false };
    pub static mut MatrixPopEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::MatrixPopEXT, is_loaded: false };
    pub static mut MatrixPushEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::MatrixPushEXT, is_loaded: false };
    pub static mut MatrixRotatedEXT: FnPtr<extern "C" fn(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixRotatedEXT, is_loaded: false };
    pub static mut MatrixRotatefEXT: FnPtr<extern "C" fn(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::MatrixRotatefEXT, is_loaded: false };
    pub static mut MatrixScaledEXT: FnPtr<extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixScaledEXT, is_loaded: false };
    pub static mut MatrixScalefEXT: FnPtr<extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::MatrixScalefEXT, is_loaded: false };
    pub static mut MatrixTranslatedEXT: FnPtr<extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::MatrixTranslatedEXT, is_loaded: false };
    pub static mut MatrixTranslatefEXT: FnPtr<extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::MatrixTranslatefEXT, is_loaded: false };
    pub static mut MemoryBarrier: FnPtr<extern "C" fn(barriers: GLbitfield) -> c_void> = FnPtr { f: super::failing::MemoryBarrier, is_loaded: false };
    pub static mut MemoryBarrierEXT: FnPtr<extern "C" fn(barriers: GLbitfield) -> c_void> = FnPtr { f: super::failing::MemoryBarrierEXT, is_loaded: false };
    pub static mut MinSampleShading: FnPtr<extern "C" fn(value: GLfloat) -> c_void> = FnPtr { f: super::failing::MinSampleShading, is_loaded: false };
    pub static mut MinSampleShadingARB: FnPtr<extern "C" fn(value: GLfloat) -> c_void> = FnPtr { f: super::failing::MinSampleShadingARB, is_loaded: false };
    pub static mut Minmax: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void> = FnPtr { f: super::failing::Minmax, is_loaded: false };
    pub static mut MinmaxEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void> = FnPtr { f: super::failing::MinmaxEXT, is_loaded: false };
    pub static mut MultMatrixd: FnPtr<extern "C" fn(m: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultMatrixd, is_loaded: false };
    pub static mut MultMatrixf: FnPtr<extern "C" fn(m: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultMatrixf, is_loaded: false };
    pub static mut MultMatrixx: FnPtr<extern "C" fn(m: *GLfixed) -> c_void> = FnPtr { f: super::failing::MultMatrixx, is_loaded: false };
    pub static mut MultMatrixxOES: FnPtr<extern "C" fn(m: *GLfixed) -> c_void> = FnPtr { f: super::failing::MultMatrixxOES, is_loaded: false };
    pub static mut MultTransposeMatrixd: FnPtr<extern "C" fn(m: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultTransposeMatrixd, is_loaded: false };
    pub static mut MultTransposeMatrixdARB: FnPtr<extern "C" fn(m: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultTransposeMatrixdARB, is_loaded: false };
    pub static mut MultTransposeMatrixf: FnPtr<extern "C" fn(m: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultTransposeMatrixf, is_loaded: false };
    pub static mut MultTransposeMatrixfARB: FnPtr<extern "C" fn(m: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultTransposeMatrixfARB, is_loaded: false };
    pub static mut MultTransposeMatrixxOES: FnPtr<extern "C" fn(m: *GLfixed) -> c_void> = FnPtr { f: super::failing::MultTransposeMatrixxOES, is_loaded: false };
    pub static mut MultiDrawArrays: FnPtr<extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawArrays, is_loaded: false };
    pub static mut MultiDrawArraysEXT: FnPtr<extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawArraysEXT, is_loaded: false };
    pub static mut MultiDrawArraysIndirect: FnPtr<extern "C" fn(mode: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawArraysIndirect, is_loaded: false };
    pub static mut MultiDrawArraysIndirectAMD: FnPtr<extern "C" fn(mode: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawArraysIndirectAMD, is_loaded: false };
    pub static mut MultiDrawArraysIndirectBindlessNV: FnPtr<extern "C" fn(mode: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void> = FnPtr { f: super::failing::MultiDrawArraysIndirectBindlessNV, is_loaded: false };
    pub static mut MultiDrawElementsIndirectBindlessNV: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void> = FnPtr { f: super::failing::MultiDrawElementsIndirectBindlessNV, is_loaded: false };
    pub static mut MultiDrawArraysIndirectCountARB: FnPtr<extern "C" fn(mode: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawArraysIndirectCountARB, is_loaded: false };
    pub static mut MultiDrawElementArrayAPPLE: FnPtr<extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawElementArrayAPPLE, is_loaded: false };
    pub static mut MultiDrawElements: FnPtr<extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawElements, is_loaded: false };
    pub static mut MultiDrawElementsBaseVertex: FnPtr<extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei, basevertex: *GLint) -> c_void> = FnPtr { f: super::failing::MultiDrawElementsBaseVertex, is_loaded: false };
    pub static mut MultiDrawElementsEXT: FnPtr<extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawElementsEXT, is_loaded: false };
    pub static mut MultiDrawElementsIndirect: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawElementsIndirect, is_loaded: false };
    pub static mut MultiDrawElementsIndirectAMD: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawElementsIndirectAMD, is_loaded: false };
    pub static mut MultiDrawElementsIndirectCountARB: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawElementsIndirectCountARB, is_loaded: false };
    pub static mut MultiDrawRangeElementArrayAPPLE: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void> = FnPtr { f: super::failing::MultiDrawRangeElementArrayAPPLE, is_loaded: false };
    pub static mut MultiModeDrawArraysIBM: FnPtr<extern "C" fn(mode: *GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei, modestride: GLint) -> c_void> = FnPtr { f: super::failing::MultiModeDrawArraysIBM, is_loaded: false };
    pub static mut MultiModeDrawElementsIBM: FnPtr<extern "C" fn(mode: *GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei, modestride: GLint) -> c_void> = FnPtr { f: super::failing::MultiModeDrawElementsIBM, is_loaded: false };
    pub static mut MultiTexBufferEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexBufferEXT, is_loaded: false };
    pub static mut MultiTexCoord1bOES: FnPtr<extern "C" fn(texture: GLenum, s: GLbyte) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1bOES, is_loaded: false };
    pub static mut MultiTexCoord1bvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1bvOES, is_loaded: false };
    pub static mut MultiTexCoord1d: FnPtr<extern "C" fn(target: GLenum, s: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1d, is_loaded: false };
    pub static mut MultiTexCoord1dARB: FnPtr<extern "C" fn(target: GLenum, s: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1dARB, is_loaded: false };
    pub static mut MultiTexCoord1dv: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1dv, is_loaded: false };
    pub static mut MultiTexCoord1dvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1dvARB, is_loaded: false };
    pub static mut MultiTexCoord1f: FnPtr<extern "C" fn(target: GLenum, s: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1f, is_loaded: false };
    pub static mut MultiTexCoord1fARB: FnPtr<extern "C" fn(target: GLenum, s: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1fARB, is_loaded: false };
    pub static mut MultiTexCoord1fv: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1fv, is_loaded: false };
    pub static mut MultiTexCoord1fvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1fvARB, is_loaded: false };
    pub static mut MultiTexCoord1hNV: FnPtr<extern "C" fn(target: GLenum, s: GLhalfNV) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1hNV, is_loaded: false };
    pub static mut MultiTexCoord1hvNV: FnPtr<extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1hvNV, is_loaded: false };
    pub static mut MultiTexCoord1i: FnPtr<extern "C" fn(target: GLenum, s: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1i, is_loaded: false };
    pub static mut MultiTexCoord1iARB: FnPtr<extern "C" fn(target: GLenum, s: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1iARB, is_loaded: false };
    pub static mut MultiTexCoord1iv: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1iv, is_loaded: false };
    pub static mut MultiTexCoord1ivARB: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1ivARB, is_loaded: false };
    pub static mut MultiTexCoord1s: FnPtr<extern "C" fn(target: GLenum, s: GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1s, is_loaded: false };
    pub static mut MultiTexCoord1sARB: FnPtr<extern "C" fn(target: GLenum, s: GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1sARB, is_loaded: false };
    pub static mut MultiTexCoord1sv: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1sv, is_loaded: false };
    pub static mut MultiTexCoord1svARB: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1svARB, is_loaded: false };
    pub static mut MultiTexCoord1xOES: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1xOES, is_loaded: false };
    pub static mut MultiTexCoord1xvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord1xvOES, is_loaded: false };
    pub static mut MultiTexCoord2bOES: FnPtr<extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2bOES, is_loaded: false };
    pub static mut MultiTexCoord2bvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2bvOES, is_loaded: false };
    pub static mut MultiTexCoord2d: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2d, is_loaded: false };
    pub static mut MultiTexCoord2dARB: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2dARB, is_loaded: false };
    pub static mut MultiTexCoord2dv: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2dv, is_loaded: false };
    pub static mut MultiTexCoord2dvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2dvARB, is_loaded: false };
    pub static mut MultiTexCoord2f: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2f, is_loaded: false };
    pub static mut MultiTexCoord2fARB: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2fARB, is_loaded: false };
    pub static mut MultiTexCoord2fv: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2fv, is_loaded: false };
    pub static mut MultiTexCoord2fvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2fvARB, is_loaded: false };
    pub static mut MultiTexCoord2hNV: FnPtr<extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2hNV, is_loaded: false };
    pub static mut MultiTexCoord2hvNV: FnPtr<extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2hvNV, is_loaded: false };
    pub static mut MultiTexCoord2i: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2i, is_loaded: false };
    pub static mut MultiTexCoord2iARB: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2iARB, is_loaded: false };
    pub static mut MultiTexCoord2iv: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2iv, is_loaded: false };
    pub static mut MultiTexCoord2ivARB: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2ivARB, is_loaded: false };
    pub static mut MultiTexCoord2s: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2s, is_loaded: false };
    pub static mut MultiTexCoord2sARB: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2sARB, is_loaded: false };
    pub static mut MultiTexCoord2sv: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2sv, is_loaded: false };
    pub static mut MultiTexCoord2svARB: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2svARB, is_loaded: false };
    pub static mut MultiTexCoord2xOES: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2xOES, is_loaded: false };
    pub static mut MultiTexCoord2xvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord2xvOES, is_loaded: false };
    pub static mut MultiTexCoord3bOES: FnPtr<extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3bOES, is_loaded: false };
    pub static mut MultiTexCoord3bvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3bvOES, is_loaded: false };
    pub static mut MultiTexCoord3d: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3d, is_loaded: false };
    pub static mut MultiTexCoord3dARB: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3dARB, is_loaded: false };
    pub static mut MultiTexCoord3dv: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3dv, is_loaded: false };
    pub static mut MultiTexCoord3dvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3dvARB, is_loaded: false };
    pub static mut MultiTexCoord3f: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3f, is_loaded: false };
    pub static mut MultiTexCoord3fARB: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3fARB, is_loaded: false };
    pub static mut MultiTexCoord3fv: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3fv, is_loaded: false };
    pub static mut MultiTexCoord3fvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3fvARB, is_loaded: false };
    pub static mut MultiTexCoord3hNV: FnPtr<extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3hNV, is_loaded: false };
    pub static mut MultiTexCoord3hvNV: FnPtr<extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3hvNV, is_loaded: false };
    pub static mut MultiTexCoord3i: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3i, is_loaded: false };
    pub static mut MultiTexCoord3iARB: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3iARB, is_loaded: false };
    pub static mut MultiTexCoord3iv: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3iv, is_loaded: false };
    pub static mut MultiTexCoord3ivARB: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3ivARB, is_loaded: false };
    pub static mut MultiTexCoord3s: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3s, is_loaded: false };
    pub static mut MultiTexCoord3sARB: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3sARB, is_loaded: false };
    pub static mut MultiTexCoord3sv: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3sv, is_loaded: false };
    pub static mut MultiTexCoord3svARB: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3svARB, is_loaded: false };
    pub static mut MultiTexCoord3xOES: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3xOES, is_loaded: false };
    pub static mut MultiTexCoord3xvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord3xvOES, is_loaded: false };
    pub static mut MultiTexCoord4bOES: FnPtr<extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4bOES, is_loaded: false };
    pub static mut MultiTexCoord4bvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4bvOES, is_loaded: false };
    pub static mut MultiTexCoord4d: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4d, is_loaded: false };
    pub static mut MultiTexCoord4dARB: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4dARB, is_loaded: false };
    pub static mut MultiTexCoord4dv: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4dv, is_loaded: false };
    pub static mut MultiTexCoord4dvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4dvARB, is_loaded: false };
    pub static mut MultiTexCoord4f: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4f, is_loaded: false };
    pub static mut MultiTexCoord4fARB: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4fARB, is_loaded: false };
    pub static mut MultiTexCoord4fv: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4fv, is_loaded: false };
    pub static mut MultiTexCoord4fvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4fvARB, is_loaded: false };
    pub static mut MultiTexCoord4hNV: FnPtr<extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4hNV, is_loaded: false };
    pub static mut MultiTexCoord4hvNV: FnPtr<extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4hvNV, is_loaded: false };
    pub static mut MultiTexCoord4i: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4i, is_loaded: false };
    pub static mut MultiTexCoord4iARB: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4iARB, is_loaded: false };
    pub static mut MultiTexCoord4iv: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4iv, is_loaded: false };
    pub static mut MultiTexCoord4ivARB: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4ivARB, is_loaded: false };
    pub static mut MultiTexCoord4s: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4s, is_loaded: false };
    pub static mut MultiTexCoord4sARB: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4sARB, is_loaded: false };
    pub static mut MultiTexCoord4sv: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4sv, is_loaded: false };
    pub static mut MultiTexCoord4svARB: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4svARB, is_loaded: false };
    pub static mut MultiTexCoord4x: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4x, is_loaded: false };
    pub static mut MultiTexCoord4xOES: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4xOES, is_loaded: false };
    pub static mut MultiTexCoord4xvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::MultiTexCoord4xvOES, is_loaded: false };
    pub static mut MultiTexCoordP1ui: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexCoordP1ui, is_loaded: false };
    pub static mut MultiTexCoordP1uiv: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexCoordP1uiv, is_loaded: false };
    pub static mut MultiTexCoordP2ui: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexCoordP2ui, is_loaded: false };
    pub static mut MultiTexCoordP2uiv: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexCoordP2uiv, is_loaded: false };
    pub static mut MultiTexCoordP3ui: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexCoordP3ui, is_loaded: false };
    pub static mut MultiTexCoordP3uiv: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexCoordP3uiv, is_loaded: false };
    pub static mut MultiTexCoordP4ui: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexCoordP4ui, is_loaded: false };
    pub static mut MultiTexCoordP4uiv: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexCoordP4uiv, is_loaded: false };
    pub static mut MultiTexCoordPointerEXT: FnPtr<extern "C" fn(texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::MultiTexCoordPointerEXT, is_loaded: false };
    pub static mut MultiTexEnvfEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexEnvfEXT, is_loaded: false };
    pub static mut MultiTexEnvfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexEnvfvEXT, is_loaded: false };
    pub static mut MultiTexEnviEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexEnviEXT, is_loaded: false };
    pub static mut MultiTexEnvivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexEnvivEXT, is_loaded: false };
    pub static mut MultiTexGendEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexGendEXT, is_loaded: false };
    pub static mut MultiTexGendvEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::MultiTexGendvEXT, is_loaded: false };
    pub static mut MultiTexGenfEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexGenfEXT, is_loaded: false };
    pub static mut MultiTexGenfvEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexGenfvEXT, is_loaded: false };
    pub static mut MultiTexGeniEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexGeniEXT, is_loaded: false };
    pub static mut MultiTexGenivEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexGenivEXT, is_loaded: false };
    pub static mut MultiTexImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::MultiTexImage1DEXT, is_loaded: false };
    pub static mut MultiTexImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::MultiTexImage2DEXT, is_loaded: false };
    pub static mut MultiTexImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::MultiTexImage3DEXT, is_loaded: false };
    pub static mut MultiTexParameterIivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexParameterIivEXT, is_loaded: false };
    pub static mut MultiTexParameterIuivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexParameterIuivEXT, is_loaded: false };
    pub static mut MultiTexParameterfEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexParameterfEXT, is_loaded: false };
    pub static mut MultiTexParameterfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::MultiTexParameterfvEXT, is_loaded: false };
    pub static mut MultiTexParameteriEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::MultiTexParameteriEXT, is_loaded: false };
    pub static mut MultiTexParameterivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::MultiTexParameterivEXT, is_loaded: false };
    pub static mut MultiTexRenderbufferEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::MultiTexRenderbufferEXT, is_loaded: false };
    pub static mut MultiTexSubImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::MultiTexSubImage1DEXT, is_loaded: false };
    pub static mut MultiTexSubImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::MultiTexSubImage2DEXT, is_loaded: false };
    pub static mut MultiTexSubImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::MultiTexSubImage3DEXT, is_loaded: false };
    pub static mut NamedBufferDataEXT: FnPtr<extern "C" fn(buffer: GLuint, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void> = FnPtr { f: super::failing::NamedBufferDataEXT, is_loaded: false };
    pub static mut NamedBufferStorageEXT: FnPtr<extern "C" fn(buffer: GLuint, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void> = FnPtr { f: super::failing::NamedBufferStorageEXT, is_loaded: false };
    pub static mut NamedBufferSubDataEXT: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::NamedBufferSubDataEXT, is_loaded: false };
    pub static mut NamedCopyBufferSubDataEXT: FnPtr<extern "C" fn(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::NamedCopyBufferSubDataEXT, is_loaded: false };
    pub static mut NamedFramebufferParameteriEXT: FnPtr<extern "C" fn(framebuffer: GLuint, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::NamedFramebufferParameteriEXT, is_loaded: false };
    pub static mut NamedFramebufferRenderbufferEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::NamedFramebufferRenderbufferEXT, is_loaded: false };
    pub static mut NamedFramebufferTexture1DEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::NamedFramebufferTexture1DEXT, is_loaded: false };
    pub static mut NamedFramebufferTexture2DEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::NamedFramebufferTexture2DEXT, is_loaded: false };
    pub static mut NamedFramebufferTexture3DEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void> = FnPtr { f: super::failing::NamedFramebufferTexture3DEXT, is_loaded: false };
    pub static mut NamedFramebufferTextureEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::NamedFramebufferTextureEXT, is_loaded: false };
    pub static mut NamedFramebufferTextureFaceEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void> = FnPtr { f: super::failing::NamedFramebufferTextureFaceEXT, is_loaded: false };
    pub static mut NamedFramebufferTextureLayerEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void> = FnPtr { f: super::failing::NamedFramebufferTextureLayerEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameter4dEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameter4dEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameter4dvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameter4dvEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameter4fEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameter4fEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameter4fvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameter4fvEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameterI4iEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameterI4iEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameterI4ivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameterI4ivEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameterI4uiEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameterI4uiEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameterI4uivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameterI4uivEXT, is_loaded: false };
    pub static mut NamedProgramLocalParameters4fvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParameters4fvEXT, is_loaded: false };
    pub static mut NamedProgramLocalParametersI4ivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParametersI4ivEXT, is_loaded: false };
    pub static mut NamedProgramLocalParametersI4uivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void> = FnPtr { f: super::failing::NamedProgramLocalParametersI4uivEXT, is_loaded: false };
    pub static mut NamedProgramStringEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void> = FnPtr { f: super::failing::NamedProgramStringEXT, is_loaded: false };
    pub static mut NamedRenderbufferStorageEXT: FnPtr<extern "C" fn(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::NamedRenderbufferStorageEXT, is_loaded: false };
    pub static mut NamedRenderbufferStorageMultisampleCoverageEXT: FnPtr<extern "C" fn(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::NamedRenderbufferStorageMultisampleCoverageEXT, is_loaded: false };
    pub static mut NamedRenderbufferStorageMultisampleEXT: FnPtr<extern "C" fn(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::NamedRenderbufferStorageMultisampleEXT, is_loaded: false };
    pub static mut NamedStringARB: FnPtr<extern "C" fn(type_: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, string: *GLchar) -> c_void> = FnPtr { f: super::failing::NamedStringARB, is_loaded: false };
    pub static mut NewList: FnPtr<extern "C" fn(list: GLuint, mode: GLenum) -> c_void> = FnPtr { f: super::failing::NewList, is_loaded: false };
    pub static mut NewObjectBufferATI: FnPtr<extern "C" fn(size: GLsizei, pointer: *GLvoid, usage: GLenum) -> GLuint> = FnPtr { f: super::failing::NewObjectBufferATI, is_loaded: false };
    pub static mut Normal3b: FnPtr<extern "C" fn(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void> = FnPtr { f: super::failing::Normal3b, is_loaded: false };
    pub static mut Normal3bv: FnPtr<extern "C" fn(v: *GLbyte) -> c_void> = FnPtr { f: super::failing::Normal3bv, is_loaded: false };
    pub static mut Normal3d: FnPtr<extern "C" fn(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void> = FnPtr { f: super::failing::Normal3d, is_loaded: false };
    pub static mut Normal3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::Normal3dv, is_loaded: false };
    pub static mut Normal3f: FnPtr<extern "C" fn(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void> = FnPtr { f: super::failing::Normal3f, is_loaded: false };
    pub static mut Normal3fVertex3fSUN: FnPtr<extern "C" fn(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::Normal3fVertex3fSUN, is_loaded: false };
    pub static mut Normal3fVertex3fvSUN: FnPtr<extern "C" fn(n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Normal3fVertex3fvSUN, is_loaded: false };
    pub static mut Normal3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Normal3fv, is_loaded: false };
    pub static mut Normal3hNV: FnPtr<extern "C" fn(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) -> c_void> = FnPtr { f: super::failing::Normal3hNV, is_loaded: false };
    pub static mut Normal3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::Normal3hvNV, is_loaded: false };
    pub static mut Normal3i: FnPtr<extern "C" fn(nx: GLint, ny: GLint, nz: GLint) -> c_void> = FnPtr { f: super::failing::Normal3i, is_loaded: false };
    pub static mut Normal3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::Normal3iv, is_loaded: false };
    pub static mut Normal3s: FnPtr<extern "C" fn(nx: GLshort, ny: GLshort, nz: GLshort) -> c_void> = FnPtr { f: super::failing::Normal3s, is_loaded: false };
    pub static mut Normal3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::Normal3sv, is_loaded: false };
    pub static mut Normal3x: FnPtr<extern "C" fn(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void> = FnPtr { f: super::failing::Normal3x, is_loaded: false };
    pub static mut Normal3xOES: FnPtr<extern "C" fn(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void> = FnPtr { f: super::failing::Normal3xOES, is_loaded: false };
    pub static mut Normal3xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::Normal3xvOES, is_loaded: false };
    pub static mut NormalFormatNV: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::NormalFormatNV, is_loaded: false };
    pub static mut NormalP3ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::NormalP3ui, is_loaded: false };
    pub static mut NormalP3uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::NormalP3uiv, is_loaded: false };
    pub static mut NormalPointer: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::NormalPointer, is_loaded: false };
    pub static mut NormalPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::NormalPointerEXT, is_loaded: false };
    pub static mut NormalPointerListIBM: FnPtr<extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void> = FnPtr { f: super::failing::NormalPointerListIBM, is_loaded: false };
    pub static mut NormalPointervINTEL: FnPtr<extern "C" fn(type_: GLenum, pointer: **GLvoid) -> c_void> = FnPtr { f: super::failing::NormalPointervINTEL, is_loaded: false };
    pub static mut NormalStream3bATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void> = FnPtr { f: super::failing::NormalStream3bATI, is_loaded: false };
    pub static mut NormalStream3bvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::NormalStream3bvATI, is_loaded: false };
    pub static mut NormalStream3dATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void> = FnPtr { f: super::failing::NormalStream3dATI, is_loaded: false };
    pub static mut NormalStream3dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void> = FnPtr { f: super::failing::NormalStream3dvATI, is_loaded: false };
    pub static mut NormalStream3fATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void> = FnPtr { f: super::failing::NormalStream3fATI, is_loaded: false };
    pub static mut NormalStream3fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void> = FnPtr { f: super::failing::NormalStream3fvATI, is_loaded: false };
    pub static mut NormalStream3iATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLint, ny: GLint, nz: GLint) -> c_void> = FnPtr { f: super::failing::NormalStream3iATI, is_loaded: false };
    pub static mut NormalStream3ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void> = FnPtr { f: super::failing::NormalStream3ivATI, is_loaded: false };
    pub static mut NormalStream3sATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) -> c_void> = FnPtr { f: super::failing::NormalStream3sATI, is_loaded: false };
    pub static mut NormalStream3svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void> = FnPtr { f: super::failing::NormalStream3svATI, is_loaded: false };
    pub static mut ObjectLabel: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::ObjectLabel, is_loaded: false };
    pub static mut ObjectLabelKHR: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::ObjectLabelKHR, is_loaded: false };
    pub static mut ObjectPtrLabel: FnPtr<extern "C" fn(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::ObjectPtrLabel, is_loaded: false };
    pub static mut ObjectPtrLabelKHR: FnPtr<extern "C" fn(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void> = FnPtr { f: super::failing::ObjectPtrLabelKHR, is_loaded: false };
    pub static mut ObjectPurgeableAPPLE: FnPtr<extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum> = FnPtr { f: super::failing::ObjectPurgeableAPPLE, is_loaded: false };
    pub static mut ObjectUnpurgeableAPPLE: FnPtr<extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum> = FnPtr { f: super::failing::ObjectUnpurgeableAPPLE, is_loaded: false };
    pub static mut Ortho: FnPtr<extern "C" fn(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void> = FnPtr { f: super::failing::Ortho, is_loaded: false };
    pub static mut Orthof: FnPtr<extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void> = FnPtr { f: super::failing::Orthof, is_loaded: false };
    pub static mut OrthofOES: FnPtr<extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void> = FnPtr { f: super::failing::OrthofOES, is_loaded: false };
    pub static mut Orthox: FnPtr<extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void> = FnPtr { f: super::failing::Orthox, is_loaded: false };
    pub static mut OrthoxOES: FnPtr<extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void> = FnPtr { f: super::failing::OrthoxOES, is_loaded: false };
    pub static mut PNTrianglesfATI: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PNTrianglesfATI, is_loaded: false };
    pub static mut PNTrianglesiATI: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::PNTrianglesiATI, is_loaded: false };
    pub static mut PassTexCoordATI: FnPtr<extern "C" fn(dst: GLuint, coord: GLuint, swizzle: GLenum) -> c_void> = FnPtr { f: super::failing::PassTexCoordATI, is_loaded: false };
    pub static mut PassThrough: FnPtr<extern "C" fn(token: GLfloat) -> c_void> = FnPtr { f: super::failing::PassThrough, is_loaded: false };
    pub static mut PassThroughxOES: FnPtr<extern "C" fn(token: GLfixed) -> c_void> = FnPtr { f: super::failing::PassThroughxOES, is_loaded: false };
    pub static mut PatchParameterfv: FnPtr<extern "C" fn(pname: GLenum, values: *GLfloat) -> c_void> = FnPtr { f: super::failing::PatchParameterfv, is_loaded: false };
    pub static mut PatchParameteri: FnPtr<extern "C" fn(pname: GLenum, value: GLint) -> c_void> = FnPtr { f: super::failing::PatchParameteri, is_loaded: false };
    pub static mut PathColorGenNV: FnPtr<extern "C" fn(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: *GLfloat) -> c_void> = FnPtr { f: super::failing::PathColorGenNV, is_loaded: false };
    pub static mut PathCommandsNV: FnPtr<extern "C" fn(path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void> = FnPtr { f: super::failing::PathCommandsNV, is_loaded: false };
    pub static mut PathCoordsNV: FnPtr<extern "C" fn(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void> = FnPtr { f: super::failing::PathCoordsNV, is_loaded: false };
    pub static mut PathCoverDepthFuncNV: FnPtr<extern "C" fn(func: GLenum) -> c_void> = FnPtr { f: super::failing::PathCoverDepthFuncNV, is_loaded: false };
    pub static mut PathDashArrayNV: FnPtr<extern "C" fn(path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) -> c_void> = FnPtr { f: super::failing::PathDashArrayNV, is_loaded: false };
    pub static mut PathFogGenNV: FnPtr<extern "C" fn(genMode: GLenum) -> c_void> = FnPtr { f: super::failing::PathFogGenNV, is_loaded: false };
    pub static mut PathGlyphRangeNV: FnPtr<extern "C" fn(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void> = FnPtr { f: super::failing::PathGlyphRangeNV, is_loaded: false };
    pub static mut PathGlyphsNV: FnPtr<extern "C" fn(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: *GLvoid, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void> = FnPtr { f: super::failing::PathGlyphsNV, is_loaded: false };
    pub static mut PathParameterfNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: GLfloat) -> c_void> = FnPtr { f: super::failing::PathParameterfNV, is_loaded: false };
    pub static mut PathParameterfvNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::PathParameterfvNV, is_loaded: false };
    pub static mut PathParameteriNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: GLint) -> c_void> = FnPtr { f: super::failing::PathParameteriNV, is_loaded: false };
    pub static mut PathParameterivNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: *GLint) -> c_void> = FnPtr { f: super::failing::PathParameterivNV, is_loaded: false };
    pub static mut PathStencilDepthOffsetNV: FnPtr<extern "C" fn(factor: GLfloat, units: GLfloat) -> c_void> = FnPtr { f: super::failing::PathStencilDepthOffsetNV, is_loaded: false };
    pub static mut PathStencilFuncNV: FnPtr<extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint) -> c_void> = FnPtr { f: super::failing::PathStencilFuncNV, is_loaded: false };
    pub static mut PathStringNV: FnPtr<extern "C" fn(path: GLuint, format: GLenum, length: GLsizei, pathString: *GLvoid) -> c_void> = FnPtr { f: super::failing::PathStringNV, is_loaded: false };
    pub static mut PathSubCommandsNV: FnPtr<extern "C" fn(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void> = FnPtr { f: super::failing::PathSubCommandsNV, is_loaded: false };
    pub static mut PathSubCoordsNV: FnPtr<extern "C" fn(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void> = FnPtr { f: super::failing::PathSubCoordsNV, is_loaded: false };
    pub static mut PathTexGenNV: FnPtr<extern "C" fn(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: *GLfloat) -> c_void> = FnPtr { f: super::failing::PathTexGenNV, is_loaded: false };
    pub static mut PauseTransformFeedback: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PauseTransformFeedback, is_loaded: false };
    pub static mut PauseTransformFeedbackNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PauseTransformFeedbackNV, is_loaded: false };
    pub static mut PixelDataRangeNV: FnPtr<extern "C" fn(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::PixelDataRangeNV, is_loaded: false };
    pub static mut PixelMapfv: FnPtr<extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLfloat) -> c_void> = FnPtr { f: super::failing::PixelMapfv, is_loaded: false };
    pub static mut PixelMapuiv: FnPtr<extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLuint) -> c_void> = FnPtr { f: super::failing::PixelMapuiv, is_loaded: false };
    pub static mut PixelMapusv: FnPtr<extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLushort) -> c_void> = FnPtr { f: super::failing::PixelMapusv, is_loaded: false };
    pub static mut PixelMapx: FnPtr<extern "C" fn(map: GLenum, size: GLint, values: *GLfixed) -> c_void> = FnPtr { f: super::failing::PixelMapx, is_loaded: false };
    pub static mut PixelStoref: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PixelStoref, is_loaded: false };
    pub static mut PixelStorei: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::PixelStorei, is_loaded: false };
    pub static mut PixelStorex: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::PixelStorex, is_loaded: false };
    pub static mut PixelTexGenParameterfSGIS: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PixelTexGenParameterfSGIS, is_loaded: false };
    pub static mut PixelTexGenParameterfvSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::PixelTexGenParameterfvSGIS, is_loaded: false };
    pub static mut PixelTexGenParameteriSGIS: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::PixelTexGenParameteriSGIS, is_loaded: false };
    pub static mut PixelTexGenParameterivSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::PixelTexGenParameterivSGIS, is_loaded: false };
    pub static mut PixelTexGenSGIX: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::PixelTexGenSGIX, is_loaded: false };
    pub static mut PixelTransferf: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PixelTransferf, is_loaded: false };
    pub static mut PixelTransferi: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::PixelTransferi, is_loaded: false };
    pub static mut PixelTransferxOES: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::PixelTransferxOES, is_loaded: false };
    pub static mut PixelTransformParameterfEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PixelTransformParameterfEXT, is_loaded: false };
    pub static mut PixelTransformParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::PixelTransformParameterfvEXT, is_loaded: false };
    pub static mut PixelTransformParameteriEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::PixelTransformParameteriEXT, is_loaded: false };
    pub static mut PixelTransformParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::PixelTransformParameterivEXT, is_loaded: false };
    pub static mut PixelZoom: FnPtr<extern "C" fn(xfactor: GLfloat, yfactor: GLfloat) -> c_void> = FnPtr { f: super::failing::PixelZoom, is_loaded: false };
    pub static mut PixelZoomxOES: FnPtr<extern "C" fn(xfactor: GLfixed, yfactor: GLfixed) -> c_void> = FnPtr { f: super::failing::PixelZoomxOES, is_loaded: false };
    pub static mut PointAlongPathNV: FnPtr<extern "C" fn(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean> = FnPtr { f: super::failing::PointAlongPathNV, is_loaded: false };
    pub static mut PointParameterf: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PointParameterf, is_loaded: false };
    pub static mut PointParameterfARB: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PointParameterfARB, is_loaded: false };
    pub static mut PointParameterfEXT: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PointParameterfEXT, is_loaded: false };
    pub static mut PointParameterfSGIS: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::PointParameterfSGIS, is_loaded: false };
    pub static mut PointParameterfv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::PointParameterfv, is_loaded: false };
    pub static mut PointParameterfvARB: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::PointParameterfvARB, is_loaded: false };
    pub static mut PointParameterfvEXT: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::PointParameterfvEXT, is_loaded: false };
    pub static mut PointParameterfvSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::PointParameterfvSGIS, is_loaded: false };
    pub static mut PointParameteri: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::PointParameteri, is_loaded: false };
    pub static mut PointParameteriNV: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::PointParameteriNV, is_loaded: false };
    pub static mut PointParameteriv: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::PointParameteriv, is_loaded: false };
    pub static mut PointParameterivNV: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::PointParameterivNV, is_loaded: false };
    pub static mut PointParameterx: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::PointParameterx, is_loaded: false };
    pub static mut PointParameterxOES: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::PointParameterxOES, is_loaded: false };
    pub static mut PointParameterxv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::PointParameterxv, is_loaded: false };
    pub static mut PointParameterxvOES: FnPtr<extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::PointParameterxvOES, is_loaded: false };
    pub static mut PointSize: FnPtr<extern "C" fn(size: GLfloat) -> c_void> = FnPtr { f: super::failing::PointSize, is_loaded: false };
    pub static mut PointSizePointerOES: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *c_void) -> c_void> = FnPtr { f: super::failing::PointSizePointerOES, is_loaded: false };
    pub static mut PointSizex: FnPtr<extern "C" fn(size: GLfixed) -> c_void> = FnPtr { f: super::failing::PointSizex, is_loaded: false };
    pub static mut PointSizexOES: FnPtr<extern "C" fn(size: GLfixed) -> c_void> = FnPtr { f: super::failing::PointSizexOES, is_loaded: false };
    pub static mut PollAsyncSGIX: FnPtr<extern "C" fn(markerp: *GLuint) -> GLint> = FnPtr { f: super::failing::PollAsyncSGIX, is_loaded: false };
    pub static mut PollInstrumentsSGIX: FnPtr<extern "C" fn(marker_p: *GLint) -> GLint> = FnPtr { f: super::failing::PollInstrumentsSGIX, is_loaded: false };
    pub static mut PolygonMode: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void> = FnPtr { f: super::failing::PolygonMode, is_loaded: false };
    pub static mut PolygonOffset: FnPtr<extern "C" fn(factor: GLfloat, units: GLfloat) -> c_void> = FnPtr { f: super::failing::PolygonOffset, is_loaded: false };
    pub static mut PolygonOffsetEXT: FnPtr<extern "C" fn(factor: GLfloat, bias: GLfloat) -> c_void> = FnPtr { f: super::failing::PolygonOffsetEXT, is_loaded: false };
    pub static mut PolygonOffsetx: FnPtr<extern "C" fn(factor: GLfixed, units: GLfixed) -> c_void> = FnPtr { f: super::failing::PolygonOffsetx, is_loaded: false };
    pub static mut PolygonOffsetxOES: FnPtr<extern "C" fn(factor: GLfixed, units: GLfixed) -> c_void> = FnPtr { f: super::failing::PolygonOffsetxOES, is_loaded: false };
    pub static mut PolygonStipple: FnPtr<extern "C" fn(mask: *GLubyte) -> c_void> = FnPtr { f: super::failing::PolygonStipple, is_loaded: false };
    pub static mut PopAttrib: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PopAttrib, is_loaded: false };
    pub static mut PopClientAttrib: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PopClientAttrib, is_loaded: false };
    pub static mut PopDebugGroup: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PopDebugGroup, is_loaded: false };
    pub static mut PopDebugGroupKHR: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PopDebugGroupKHR, is_loaded: false };
    pub static mut PopGroupMarkerEXT: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PopGroupMarkerEXT, is_loaded: false };
    pub static mut PopMatrix: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PopMatrix, is_loaded: false };
    pub static mut PopName: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PopName, is_loaded: false };
    pub static mut PresentFrameDualFillNV: FnPtr<extern "C" fn(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) -> c_void> = FnPtr { f: super::failing::PresentFrameDualFillNV, is_loaded: false };
    pub static mut PresentFrameKeyedNV: FnPtr<extern "C" fn(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) -> c_void> = FnPtr { f: super::failing::PresentFrameKeyedNV, is_loaded: false };
    pub static mut PrimitiveRestartIndex: FnPtr<extern "C" fn(index: GLuint) -> c_void> = FnPtr { f: super::failing::PrimitiveRestartIndex, is_loaded: false };
    pub static mut PrimitiveRestartIndexNV: FnPtr<extern "C" fn(index: GLuint) -> c_void> = FnPtr { f: super::failing::PrimitiveRestartIndexNV, is_loaded: false };
    pub static mut PrimitiveRestartNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PrimitiveRestartNV, is_loaded: false };
    pub static mut PrioritizeTextures: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLfloat) -> c_void> = FnPtr { f: super::failing::PrioritizeTextures, is_loaded: false };
    pub static mut PrioritizeTexturesEXT: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLclampf) -> c_void> = FnPtr { f: super::failing::PrioritizeTexturesEXT, is_loaded: false };
    pub static mut PrioritizeTexturesxOES: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLfixed) -> c_void> = FnPtr { f: super::failing::PrioritizeTexturesxOES, is_loaded: false };
    pub static mut ProgramBinary: FnPtr<extern "C" fn(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void> = FnPtr { f: super::failing::ProgramBinary, is_loaded: false };
    pub static mut ProgramBinaryOES: FnPtr<extern "C" fn(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLint) -> c_void> = FnPtr { f: super::failing::ProgramBinaryOES, is_loaded: false };
    pub static mut ProgramBufferParametersIivNV: FnPtr<extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramBufferParametersIivNV, is_loaded: false };
    pub static mut ProgramBufferParametersIuivNV: FnPtr<extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramBufferParametersIuivNV, is_loaded: false };
    pub static mut ProgramBufferParametersfvNV: FnPtr<extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramBufferParametersfvNV, is_loaded: false };
    pub static mut ProgramEnvParameter4dARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameter4dARB, is_loaded: false };
    pub static mut ProgramEnvParameter4dvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameter4dvARB, is_loaded: false };
    pub static mut ProgramEnvParameter4fARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameter4fARB, is_loaded: false };
    pub static mut ProgramEnvParameter4fvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameter4fvARB, is_loaded: false };
    pub static mut ProgramEnvParameterI4iNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameterI4iNV, is_loaded: false };
    pub static mut ProgramEnvParameterI4ivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameterI4ivNV, is_loaded: false };
    pub static mut ProgramEnvParameterI4uiNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameterI4uiNV, is_loaded: false };
    pub static mut ProgramEnvParameterI4uivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameterI4uivNV, is_loaded: false };
    pub static mut ProgramEnvParameters4fvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramEnvParameters4fvEXT, is_loaded: false };
    pub static mut ProgramEnvParametersI4ivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramEnvParametersI4ivNV, is_loaded: false };
    pub static mut ProgramEnvParametersI4uivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramEnvParametersI4uivNV, is_loaded: false };
    pub static mut ProgramLocalParameter4dARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameter4dARB, is_loaded: false };
    pub static mut ProgramLocalParameter4dvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameter4dvARB, is_loaded: false };
    pub static mut ProgramLocalParameter4fARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameter4fARB, is_loaded: false };
    pub static mut ProgramLocalParameter4fvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameter4fvARB, is_loaded: false };
    pub static mut ProgramLocalParameterI4iNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameterI4iNV, is_loaded: false };
    pub static mut ProgramLocalParameterI4ivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameterI4ivNV, is_loaded: false };
    pub static mut ProgramLocalParameterI4uiNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameterI4uiNV, is_loaded: false };
    pub static mut ProgramLocalParameterI4uivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameterI4uivNV, is_loaded: false };
    pub static mut ProgramLocalParameters4fvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramLocalParameters4fvEXT, is_loaded: false };
    pub static mut ProgramLocalParametersI4ivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramLocalParametersI4ivNV, is_loaded: false };
    pub static mut ProgramLocalParametersI4uivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramLocalParametersI4uivNV, is_loaded: false };
    pub static mut ProgramNamedParameter4dNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramNamedParameter4dNV, is_loaded: false };
    pub static mut ProgramNamedParameter4dvNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramNamedParameter4dvNV, is_loaded: false };
    pub static mut ProgramNamedParameter4fNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramNamedParameter4fNV, is_loaded: false };
    pub static mut ProgramNamedParameter4fvNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramNamedParameter4fvNV, is_loaded: false };
    pub static mut ProgramParameter4dNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramParameter4dNV, is_loaded: false };
    pub static mut ProgramParameter4dvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramParameter4dvNV, is_loaded: false };
    pub static mut ProgramParameter4fNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramParameter4fNV, is_loaded: false };
    pub static mut ProgramParameter4fvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramParameter4fvNV, is_loaded: false };
    pub static mut ProgramParameteri: FnPtr<extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void> = FnPtr { f: super::failing::ProgramParameteri, is_loaded: false };
    pub static mut ProgramParameteriARB: FnPtr<extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void> = FnPtr { f: super::failing::ProgramParameteriARB, is_loaded: false };
    pub static mut ProgramParameteriEXT: FnPtr<extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void> = FnPtr { f: super::failing::ProgramParameteriEXT, is_loaded: false };
    pub static mut ProgramParameters4dvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramParameters4dvNV, is_loaded: false };
    pub static mut ProgramParameters4fvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramParameters4fvNV, is_loaded: false };
    pub static mut ProgramStringARB: FnPtr<extern "C" fn(target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void> = FnPtr { f: super::failing::ProgramStringARB, is_loaded: false };
    pub static mut ProgramSubroutineParametersuivNV: FnPtr<extern "C" fn(target: GLenum, count: GLsizei, params: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramSubroutineParametersuivNV, is_loaded: false };
    pub static mut ProgramUniform1d: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform1d, is_loaded: false };
    pub static mut ProgramUniform1dEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform1dEXT, is_loaded: false };
    pub static mut ProgramUniform1dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform1dv, is_loaded: false };
    pub static mut ProgramUniform1dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform1dvEXT, is_loaded: false };
    pub static mut ProgramUniform1f: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform1f, is_loaded: false };
    pub static mut ProgramUniform1fEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform1fEXT, is_loaded: false };
    pub static mut ProgramUniform1fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform1fv, is_loaded: false };
    pub static mut ProgramUniform1fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform1fvEXT, is_loaded: false };
    pub static mut ProgramUniform1i: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform1i, is_loaded: false };
    pub static mut ProgramUniform1i64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform1i64NV, is_loaded: false };
    pub static mut ProgramUniform1i64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform1i64vNV, is_loaded: false };
    pub static mut ProgramUniform1iEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform1iEXT, is_loaded: false };
    pub static mut ProgramUniform1iv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform1iv, is_loaded: false };
    pub static mut ProgramUniform1ivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform1ivEXT, is_loaded: false };
    pub static mut ProgramUniform1ui: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform1ui, is_loaded: false };
    pub static mut ProgramUniform1ui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform1ui64NV, is_loaded: false };
    pub static mut ProgramUniform1ui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform1ui64vNV, is_loaded: false };
    pub static mut ProgramUniform1uiEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform1uiEXT, is_loaded: false };
    pub static mut ProgramUniform1uiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform1uiv, is_loaded: false };
    pub static mut ProgramUniform1uivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform1uivEXT, is_loaded: false };
    pub static mut ProgramUniform2d: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform2d, is_loaded: false };
    pub static mut ProgramUniform2dEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform2dEXT, is_loaded: false };
    pub static mut ProgramUniform2dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform2dv, is_loaded: false };
    pub static mut ProgramUniform2dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform2dvEXT, is_loaded: false };
    pub static mut ProgramUniform2f: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform2f, is_loaded: false };
    pub static mut ProgramUniform2fEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform2fEXT, is_loaded: false };
    pub static mut ProgramUniform2fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform2fv, is_loaded: false };
    pub static mut ProgramUniform2fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform2fvEXT, is_loaded: false };
    pub static mut ProgramUniform2i: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform2i, is_loaded: false };
    pub static mut ProgramUniform2i64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform2i64NV, is_loaded: false };
    pub static mut ProgramUniform2i64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform2i64vNV, is_loaded: false };
    pub static mut ProgramUniform2iEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform2iEXT, is_loaded: false };
    pub static mut ProgramUniform2iv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform2iv, is_loaded: false };
    pub static mut ProgramUniform2ivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform2ivEXT, is_loaded: false };
    pub static mut ProgramUniform2ui: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform2ui, is_loaded: false };
    pub static mut ProgramUniform2ui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform2ui64NV, is_loaded: false };
    pub static mut ProgramUniform2ui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform2ui64vNV, is_loaded: false };
    pub static mut ProgramUniform2uiEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform2uiEXT, is_loaded: false };
    pub static mut ProgramUniform2uiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform2uiv, is_loaded: false };
    pub static mut ProgramUniform2uivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform2uivEXT, is_loaded: false };
    pub static mut ProgramUniform3d: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform3d, is_loaded: false };
    pub static mut ProgramUniform3dEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform3dEXT, is_loaded: false };
    pub static mut ProgramUniform3dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform3dv, is_loaded: false };
    pub static mut ProgramUniform3dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform3dvEXT, is_loaded: false };
    pub static mut ProgramUniform3f: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform3f, is_loaded: false };
    pub static mut ProgramUniform3fEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform3fEXT, is_loaded: false };
    pub static mut ProgramUniform3fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform3fv, is_loaded: false };
    pub static mut ProgramUniform3fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform3fvEXT, is_loaded: false };
    pub static mut ProgramUniform3i: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform3i, is_loaded: false };
    pub static mut ProgramUniform3i64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform3i64NV, is_loaded: false };
    pub static mut ProgramUniform3i64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform3i64vNV, is_loaded: false };
    pub static mut ProgramUniform3iEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform3iEXT, is_loaded: false };
    pub static mut ProgramUniform3iv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform3iv, is_loaded: false };
    pub static mut ProgramUniform3ivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform3ivEXT, is_loaded: false };
    pub static mut ProgramUniform3ui: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform3ui, is_loaded: false };
    pub static mut ProgramUniform3ui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform3ui64NV, is_loaded: false };
    pub static mut ProgramUniform3ui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform3ui64vNV, is_loaded: false };
    pub static mut ProgramUniform3uiEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform3uiEXT, is_loaded: false };
    pub static mut ProgramUniform3uiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform3uiv, is_loaded: false };
    pub static mut ProgramUniform3uivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform3uivEXT, is_loaded: false };
    pub static mut ProgramUniform4d: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform4d, is_loaded: false };
    pub static mut ProgramUniform4dEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform4dEXT, is_loaded: false };
    pub static mut ProgramUniform4dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform4dv, is_loaded: false };
    pub static mut ProgramUniform4dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniform4dvEXT, is_loaded: false };
    pub static mut ProgramUniform4f: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform4f, is_loaded: false };
    pub static mut ProgramUniform4fEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform4fEXT, is_loaded: false };
    pub static mut ProgramUniform4fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform4fv, is_loaded: false };
    pub static mut ProgramUniform4fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniform4fvEXT, is_loaded: false };
    pub static mut ProgramUniform4i: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform4i, is_loaded: false };
    pub static mut ProgramUniform4i64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform4i64NV, is_loaded: false };
    pub static mut ProgramUniform4i64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform4i64vNV, is_loaded: false };
    pub static mut ProgramUniform4iEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform4iEXT, is_loaded: false };
    pub static mut ProgramUniform4iv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform4iv, is_loaded: false };
    pub static mut ProgramUniform4ivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::ProgramUniform4ivEXT, is_loaded: false };
    pub static mut ProgramUniform4ui: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform4ui, is_loaded: false };
    pub static mut ProgramUniform4ui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform4ui64NV, is_loaded: false };
    pub static mut ProgramUniform4ui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniform4ui64vNV, is_loaded: false };
    pub static mut ProgramUniform4uiEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform4uiEXT, is_loaded: false };
    pub static mut ProgramUniform4uiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform4uiv, is_loaded: false };
    pub static mut ProgramUniform4uivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::ProgramUniform4uivEXT, is_loaded: false };
    pub static mut ProgramUniformHandleui64ARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, value: GLuint64) -> c_void> = FnPtr { f: super::failing::ProgramUniformHandleui64ARB, is_loaded: false };
    pub static mut ProgramUniformHandleui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, value: GLuint64) -> c_void> = FnPtr { f: super::failing::ProgramUniformHandleui64NV, is_loaded: false };
    pub static mut ProgramUniformHandleui64vARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void> = FnPtr { f: super::failing::ProgramUniformHandleui64vARB, is_loaded: false };
    pub static mut ProgramUniformHandleui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void> = FnPtr { f: super::failing::ProgramUniformHandleui64vNV, is_loaded: false };
    pub static mut ProgramUniformMatrix2dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2dv, is_loaded: false };
    pub static mut ProgramUniformMatrix2dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix2fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2fv, is_loaded: false };
    pub static mut ProgramUniformMatrix2fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2fvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix2x3dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2x3dv, is_loaded: false };
    pub static mut ProgramUniformMatrix2x3dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2x3dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix2x3fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2x3fv, is_loaded: false };
    pub static mut ProgramUniformMatrix2x3fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2x3fvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix2x4dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2x4dv, is_loaded: false };
    pub static mut ProgramUniformMatrix2x4dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2x4dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix2x4fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2x4fv, is_loaded: false };
    pub static mut ProgramUniformMatrix2x4fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix2x4fvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix3dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3dv, is_loaded: false };
    pub static mut ProgramUniformMatrix3dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix3fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3fv, is_loaded: false };
    pub static mut ProgramUniformMatrix3fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3fvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix3x2dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3x2dv, is_loaded: false };
    pub static mut ProgramUniformMatrix3x2dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3x2dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix3x2fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3x2fv, is_loaded: false };
    pub static mut ProgramUniformMatrix3x2fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3x2fvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix3x4dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3x4dv, is_loaded: false };
    pub static mut ProgramUniformMatrix3x4dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3x4dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix3x4fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3x4fv, is_loaded: false };
    pub static mut ProgramUniformMatrix3x4fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix3x4fvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix4dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4dv, is_loaded: false };
    pub static mut ProgramUniformMatrix4dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix4fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4fv, is_loaded: false };
    pub static mut ProgramUniformMatrix4fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4fvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix4x2dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4x2dv, is_loaded: false };
    pub static mut ProgramUniformMatrix4x2dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4x2dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix4x2fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4x2fv, is_loaded: false };
    pub static mut ProgramUniformMatrix4x2fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4x2fvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix4x3dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4x3dv, is_loaded: false };
    pub static mut ProgramUniformMatrix4x3dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4x3dvEXT, is_loaded: false };
    pub static mut ProgramUniformMatrix4x3fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4x3fv, is_loaded: false };
    pub static mut ProgramUniformMatrix4x3fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::ProgramUniformMatrix4x3fvEXT, is_loaded: false };
    pub static mut ProgramUniformui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, value: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniformui64NV, is_loaded: false };
    pub static mut ProgramUniformui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::ProgramUniformui64vNV, is_loaded: false };
    pub static mut ProgramVertexLimitNV: FnPtr<extern "C" fn(target: GLenum, limit: GLint) -> c_void> = FnPtr { f: super::failing::ProgramVertexLimitNV, is_loaded: false };
    pub static mut ProvokingVertex: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::ProvokingVertex, is_loaded: false };
    pub static mut ProvokingVertexEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::ProvokingVertexEXT, is_loaded: false };
    pub static mut PushAttrib: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::PushAttrib, is_loaded: false };
    pub static mut PushClientAttrib: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::PushClientAttrib, is_loaded: false };
    pub static mut PushClientAttribDefaultEXT: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::PushClientAttribDefaultEXT, is_loaded: false };
    pub static mut PushDebugGroup: FnPtr<extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void> = FnPtr { f: super::failing::PushDebugGroup, is_loaded: false };
    pub static mut PushDebugGroupKHR: FnPtr<extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void> = FnPtr { f: super::failing::PushDebugGroupKHR, is_loaded: false };
    pub static mut PushGroupMarkerEXT: FnPtr<extern "C" fn(length: GLsizei, marker: *GLchar) -> c_void> = FnPtr { f: super::failing::PushGroupMarkerEXT, is_loaded: false };
    pub static mut PushMatrix: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::PushMatrix, is_loaded: false };
    pub static mut PushName: FnPtr<extern "C" fn(name: GLuint) -> c_void> = FnPtr { f: super::failing::PushName, is_loaded: false };
    pub static mut QueryCounter: FnPtr<extern "C" fn(id: GLuint, target: GLenum) -> c_void> = FnPtr { f: super::failing::QueryCounter, is_loaded: false };
    pub static mut QueryCounterEXT: FnPtr<extern "C" fn(id: GLuint, target: GLenum) -> c_void> = FnPtr { f: super::failing::QueryCounterEXT, is_loaded: false };
    pub static mut QueryMatrixxOES: FnPtr<extern "C" fn(mantissa: *GLfixed, exponent: *GLint) -> GLbitfield> = FnPtr { f: super::failing::QueryMatrixxOES, is_loaded: false };
    pub static mut RasterPos2d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::RasterPos2d, is_loaded: false };
    pub static mut RasterPos2dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::RasterPos2dv, is_loaded: false };
    pub static mut RasterPos2f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::RasterPos2f, is_loaded: false };
    pub static mut RasterPos2fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::RasterPos2fv, is_loaded: false };
    pub static mut RasterPos2i: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void> = FnPtr { f: super::failing::RasterPos2i, is_loaded: false };
    pub static mut RasterPos2iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::RasterPos2iv, is_loaded: false };
    pub static mut RasterPos2s: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::RasterPos2s, is_loaded: false };
    pub static mut RasterPos2sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::RasterPos2sv, is_loaded: false };
    pub static mut RasterPos2xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed) -> c_void> = FnPtr { f: super::failing::RasterPos2xOES, is_loaded: false };
    pub static mut RasterPos2xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::RasterPos2xvOES, is_loaded: false };
    pub static mut RasterPos3d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::RasterPos3d, is_loaded: false };
    pub static mut RasterPos3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::RasterPos3dv, is_loaded: false };
    pub static mut RasterPos3f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::RasterPos3f, is_loaded: false };
    pub static mut RasterPos3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::RasterPos3fv, is_loaded: false };
    pub static mut RasterPos3i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void> = FnPtr { f: super::failing::RasterPos3i, is_loaded: false };
    pub static mut RasterPos3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::RasterPos3iv, is_loaded: false };
    pub static mut RasterPos3s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::RasterPos3s, is_loaded: false };
    pub static mut RasterPos3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::RasterPos3sv, is_loaded: false };
    pub static mut RasterPos3xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void> = FnPtr { f: super::failing::RasterPos3xOES, is_loaded: false };
    pub static mut RasterPos3xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::RasterPos3xvOES, is_loaded: false };
    pub static mut RasterPos4d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::RasterPos4d, is_loaded: false };
    pub static mut RasterPos4dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::RasterPos4dv, is_loaded: false };
    pub static mut RasterPos4f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::RasterPos4f, is_loaded: false };
    pub static mut RasterPos4fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::RasterPos4fv, is_loaded: false };
    pub static mut RasterPos4i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::RasterPos4i, is_loaded: false };
    pub static mut RasterPos4iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::RasterPos4iv, is_loaded: false };
    pub static mut RasterPos4s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void> = FnPtr { f: super::failing::RasterPos4s, is_loaded: false };
    pub static mut RasterPos4sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::RasterPos4sv, is_loaded: false };
    pub static mut RasterPos4xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) -> c_void> = FnPtr { f: super::failing::RasterPos4xOES, is_loaded: false };
    pub static mut RasterPos4xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::RasterPos4xvOES, is_loaded: false };
    pub static mut ReadBuffer: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::ReadBuffer, is_loaded: false };
    pub static mut ReadBufferIndexedEXT: FnPtr<extern "C" fn(src: GLenum, index: GLint) -> c_void> = FnPtr { f: super::failing::ReadBufferIndexedEXT, is_loaded: false };
    pub static mut ReadBufferNV: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::ReadBufferNV, is_loaded: false };
    pub static mut ReadInstrumentsSGIX: FnPtr<extern "C" fn(marker: GLint) -> c_void> = FnPtr { f: super::failing::ReadInstrumentsSGIX, is_loaded: false };
    pub static mut ReadPixels: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::ReadPixels, is_loaded: false };
    pub static mut ReadnPixelsARB: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::ReadnPixelsARB, is_loaded: false };
    pub static mut ReadnPixelsEXT: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void> = FnPtr { f: super::failing::ReadnPixelsEXT, is_loaded: false };
    pub static mut Rectd: FnPtr<extern "C" fn(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> c_void> = FnPtr { f: super::failing::Rectd, is_loaded: false };
    pub static mut Rectdv: FnPtr<extern "C" fn(v1: *GLdouble, v2: *GLdouble) -> c_void> = FnPtr { f: super::failing::Rectdv, is_loaded: false };
    pub static mut Rectf: FnPtr<extern "C" fn(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> c_void> = FnPtr { f: super::failing::Rectf, is_loaded: false };
    pub static mut Rectfv: FnPtr<extern "C" fn(v1: *GLfloat, v2: *GLfloat) -> c_void> = FnPtr { f: super::failing::Rectfv, is_loaded: false };
    pub static mut Recti: FnPtr<extern "C" fn(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> c_void> = FnPtr { f: super::failing::Recti, is_loaded: false };
    pub static mut Rectiv: FnPtr<extern "C" fn(v1: *GLint, v2: *GLint) -> c_void> = FnPtr { f: super::failing::Rectiv, is_loaded: false };
    pub static mut Rects: FnPtr<extern "C" fn(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> c_void> = FnPtr { f: super::failing::Rects, is_loaded: false };
    pub static mut Rectsv: FnPtr<extern "C" fn(v1: *GLshort, v2: *GLshort) -> c_void> = FnPtr { f: super::failing::Rectsv, is_loaded: false };
    pub static mut RectxOES: FnPtr<extern "C" fn(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) -> c_void> = FnPtr { f: super::failing::RectxOES, is_loaded: false };
    pub static mut RectxvOES: FnPtr<extern "C" fn(v1: *GLfixed, v2: *GLfixed) -> c_void> = FnPtr { f: super::failing::RectxvOES, is_loaded: false };
    pub static mut ReferencePlaneSGIX: FnPtr<extern "C" fn(equation: *GLdouble) -> c_void> = FnPtr { f: super::failing::ReferencePlaneSGIX, is_loaded: false };
    pub static mut ReleaseShaderCompiler: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::ReleaseShaderCompiler, is_loaded: false };
    pub static mut RenderMode: FnPtr<extern "C" fn(mode: GLenum) -> GLint> = FnPtr { f: super::failing::RenderMode, is_loaded: false };
    pub static mut RenderbufferStorage: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorage, is_loaded: false };
    pub static mut RenderbufferStorageEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageEXT, is_loaded: false };
    pub static mut RenderbufferStorageMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageMultisample, is_loaded: false };
    pub static mut RenderbufferStorageMultisampleANGLE: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageMultisampleANGLE, is_loaded: false };
    pub static mut RenderbufferStorageMultisampleAPPLE: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageMultisampleAPPLE, is_loaded: false };
    pub static mut RenderbufferStorageMultisampleCoverageNV: FnPtr<extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageMultisampleCoverageNV, is_loaded: false };
    pub static mut RenderbufferStorageMultisampleEXT: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageMultisampleEXT, is_loaded: false };
    pub static mut RenderbufferStorageMultisampleIMG: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageMultisampleIMG, is_loaded: false };
    pub static mut RenderbufferStorageMultisampleNV: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageMultisampleNV, is_loaded: false };
    pub static mut RenderbufferStorageOES: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::RenderbufferStorageOES, is_loaded: false };
    pub static mut ReplacementCodePointerSUN: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: **GLvoid) -> c_void> = FnPtr { f: super::failing::ReplacementCodePointerSUN, is_loaded: false };
    pub static mut ReplacementCodeubSUN: FnPtr<extern "C" fn(code: GLubyte) -> c_void> = FnPtr { f: super::failing::ReplacementCodeubSUN, is_loaded: false };
    pub static mut ReplacementCodeubvSUN: FnPtr<extern "C" fn(code: *GLubyte) -> c_void> = FnPtr { f: super::failing::ReplacementCodeubvSUN, is_loaded: false };
    pub static mut ReplacementCodeuiColor3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiColor3fVertex3fSUN, is_loaded: false };
    pub static mut ReplacementCodeuiColor3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, c: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiColor3fVertex3fvSUN, is_loaded: false };
    pub static mut ReplacementCodeuiColor4fNormal3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiColor4fNormal3fVertex3fSUN, is_loaded: false };
    pub static mut ReplacementCodeuiColor4fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiColor4fNormal3fVertex3fvSUN, is_loaded: false };
    pub static mut ReplacementCodeuiColor4ubVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiColor4ubVertex3fSUN, is_loaded: false };
    pub static mut ReplacementCodeuiColor4ubVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, c: *GLubyte, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiColor4ubVertex3fvSUN, is_loaded: false };
    pub static mut ReplacementCodeuiNormal3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiNormal3fVertex3fSUN, is_loaded: false };
    pub static mut ReplacementCodeuiNormal3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiNormal3fVertex3fvSUN, is_loaded: false };
    pub static mut ReplacementCodeuiSUN: FnPtr<extern "C" fn(code: GLuint) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiSUN, is_loaded: false };
    pub static mut ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, is_loaded: false };
    pub static mut ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, is_loaded: false };
    pub static mut ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, is_loaded: false };
    pub static mut ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, is_loaded: false };
    pub static mut ReplacementCodeuiTexCoord2fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiTexCoord2fVertex3fSUN, is_loaded: false };
    pub static mut ReplacementCodeuiTexCoord2fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, tc: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiTexCoord2fVertex3fvSUN, is_loaded: false };
    pub static mut ReplacementCodeuiVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiVertex3fSUN, is_loaded: false };
    pub static mut ReplacementCodeuiVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuiVertex3fvSUN, is_loaded: false };
    pub static mut ReplacementCodeuivSUN: FnPtr<extern "C" fn(code: *GLuint) -> c_void> = FnPtr { f: super::failing::ReplacementCodeuivSUN, is_loaded: false };
    pub static mut ReplacementCodeusSUN: FnPtr<extern "C" fn(code: GLushort) -> c_void> = FnPtr { f: super::failing::ReplacementCodeusSUN, is_loaded: false };
    pub static mut ReplacementCodeusvSUN: FnPtr<extern "C" fn(code: *GLushort) -> c_void> = FnPtr { f: super::failing::ReplacementCodeusvSUN, is_loaded: false };
    pub static mut RequestResidentProgramsNV: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void> = FnPtr { f: super::failing::RequestResidentProgramsNV, is_loaded: false };
    pub static mut ResetHistogram: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::ResetHistogram, is_loaded: false };
    pub static mut ResetHistogramEXT: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::ResetHistogramEXT, is_loaded: false };
    pub static mut ResetMinmax: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::ResetMinmax, is_loaded: false };
    pub static mut ResetMinmaxEXT: FnPtr<extern "C" fn(target: GLenum) -> c_void> = FnPtr { f: super::failing::ResetMinmaxEXT, is_loaded: false };
    pub static mut ResizeBuffersMESA: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::ResizeBuffersMESA, is_loaded: false };
    pub static mut ResolveMultisampleFramebufferAPPLE: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::ResolveMultisampleFramebufferAPPLE, is_loaded: false };
    pub static mut ResumeTransformFeedback: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::ResumeTransformFeedback, is_loaded: false };
    pub static mut ResumeTransformFeedbackNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::ResumeTransformFeedbackNV, is_loaded: false };
    pub static mut Rotated: FnPtr<extern "C" fn(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::Rotated, is_loaded: false };
    pub static mut Rotatef: FnPtr<extern "C" fn(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::Rotatef, is_loaded: false };
    pub static mut Rotatex: FnPtr<extern "C" fn(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void> = FnPtr { f: super::failing::Rotatex, is_loaded: false };
    pub static mut RotatexOES: FnPtr<extern "C" fn(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void> = FnPtr { f: super::failing::RotatexOES, is_loaded: false };
    pub static mut SampleCoverage: FnPtr<extern "C" fn(value: GLfloat, invert: GLboolean) -> c_void> = FnPtr { f: super::failing::SampleCoverage, is_loaded: false };
    pub static mut SampleCoverageARB: FnPtr<extern "C" fn(value: GLfloat, invert: GLboolean) -> c_void> = FnPtr { f: super::failing::SampleCoverageARB, is_loaded: false };
    pub static mut SampleCoverageOES: FnPtr<extern "C" fn(value: GLfixed, invert: GLboolean) -> c_void> = FnPtr { f: super::failing::SampleCoverageOES, is_loaded: false };
    pub static mut SampleCoveragex: FnPtr<extern "C" fn(value: GLclampx, invert: GLboolean) -> c_void> = FnPtr { f: super::failing::SampleCoveragex, is_loaded: false };
    pub static mut SampleCoveragexOES: FnPtr<extern "C" fn(value: GLclampx, invert: GLboolean) -> c_void> = FnPtr { f: super::failing::SampleCoveragexOES, is_loaded: false };
    pub static mut SampleMapATI: FnPtr<extern "C" fn(dst: GLuint, interp: GLuint, swizzle: GLenum) -> c_void> = FnPtr { f: super::failing::SampleMapATI, is_loaded: false };
    pub static mut SampleMaskEXT: FnPtr<extern "C" fn(value: GLclampf, invert: GLboolean) -> c_void> = FnPtr { f: super::failing::SampleMaskEXT, is_loaded: false };
    pub static mut SampleMaskIndexedNV: FnPtr<extern "C" fn(index: GLuint, mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::SampleMaskIndexedNV, is_loaded: false };
    pub static mut SampleMaskSGIS: FnPtr<extern "C" fn(value: GLclampf, invert: GLboolean) -> c_void> = FnPtr { f: super::failing::SampleMaskSGIS, is_loaded: false };
    pub static mut SampleMaski: FnPtr<extern "C" fn(index: GLuint, mask: GLbitfield) -> c_void> = FnPtr { f: super::failing::SampleMaski, is_loaded: false };
    pub static mut SamplePatternEXT: FnPtr<extern "C" fn(pattern: GLenum) -> c_void> = FnPtr { f: super::failing::SamplePatternEXT, is_loaded: false };
    pub static mut SamplePatternSGIS: FnPtr<extern "C" fn(pattern: GLenum) -> c_void> = FnPtr { f: super::failing::SamplePatternSGIS, is_loaded: false };
    pub static mut SamplerParameterIiv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void> = FnPtr { f: super::failing::SamplerParameterIiv, is_loaded: false };
    pub static mut SamplerParameterIuiv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLuint) -> c_void> = FnPtr { f: super::failing::SamplerParameterIuiv, is_loaded: false };
    pub static mut SamplerParameterf: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::SamplerParameterf, is_loaded: false };
    pub static mut SamplerParameterfv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLfloat) -> c_void> = FnPtr { f: super::failing::SamplerParameterfv, is_loaded: false };
    pub static mut SamplerParameteri: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::SamplerParameteri, is_loaded: false };
    pub static mut SamplerParameteriv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void> = FnPtr { f: super::failing::SamplerParameteriv, is_loaded: false };
    pub static mut Scaled: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::Scaled, is_loaded: false };
    pub static mut Scalef: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::Scalef, is_loaded: false };
    pub static mut Scalex: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void> = FnPtr { f: super::failing::Scalex, is_loaded: false };
    pub static mut ScalexOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void> = FnPtr { f: super::failing::ScalexOES, is_loaded: false };
    pub static mut Scissor: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::Scissor, is_loaded: false };
    pub static mut ScissorArrayv: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, v: *GLint) -> c_void> = FnPtr { f: super::failing::ScissorArrayv, is_loaded: false };
    pub static mut ScissorIndexed: FnPtr<extern "C" fn(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::ScissorIndexed, is_loaded: false };
    pub static mut ScissorIndexedv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::ScissorIndexedv, is_loaded: false };
    pub static mut SecondaryColor3b: FnPtr<extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void> = FnPtr { f: super::failing::SecondaryColor3b, is_loaded: false };
    pub static mut SecondaryColor3bEXT: FnPtr<extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void> = FnPtr { f: super::failing::SecondaryColor3bEXT, is_loaded: false };
    pub static mut SecondaryColor3bv: FnPtr<extern "C" fn(v: *GLbyte) -> c_void> = FnPtr { f: super::failing::SecondaryColor3bv, is_loaded: false };
    pub static mut SecondaryColor3bvEXT: FnPtr<extern "C" fn(v: *GLbyte) -> c_void> = FnPtr { f: super::failing::SecondaryColor3bvEXT, is_loaded: false };
    pub static mut SecondaryColor3d: FnPtr<extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void> = FnPtr { f: super::failing::SecondaryColor3d, is_loaded: false };
    pub static mut SecondaryColor3dEXT: FnPtr<extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void> = FnPtr { f: super::failing::SecondaryColor3dEXT, is_loaded: false };
    pub static mut SecondaryColor3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::SecondaryColor3dv, is_loaded: false };
    pub static mut SecondaryColor3dvEXT: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::SecondaryColor3dvEXT, is_loaded: false };
    pub static mut SecondaryColor3f: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void> = FnPtr { f: super::failing::SecondaryColor3f, is_loaded: false };
    pub static mut SecondaryColor3fEXT: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void> = FnPtr { f: super::failing::SecondaryColor3fEXT, is_loaded: false };
    pub static mut SecondaryColor3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::SecondaryColor3fv, is_loaded: false };
    pub static mut SecondaryColor3fvEXT: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::SecondaryColor3fvEXT, is_loaded: false };
    pub static mut SecondaryColor3hNV: FnPtr<extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void> = FnPtr { f: super::failing::SecondaryColor3hNV, is_loaded: false };
    pub static mut SecondaryColor3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::SecondaryColor3hvNV, is_loaded: false };
    pub static mut SecondaryColor3i: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void> = FnPtr { f: super::failing::SecondaryColor3i, is_loaded: false };
    pub static mut SecondaryColor3iEXT: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void> = FnPtr { f: super::failing::SecondaryColor3iEXT, is_loaded: false };
    pub static mut SecondaryColor3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::SecondaryColor3iv, is_loaded: false };
    pub static mut SecondaryColor3ivEXT: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::SecondaryColor3ivEXT, is_loaded: false };
    pub static mut SecondaryColor3s: FnPtr<extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void> = FnPtr { f: super::failing::SecondaryColor3s, is_loaded: false };
    pub static mut SecondaryColor3sEXT: FnPtr<extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void> = FnPtr { f: super::failing::SecondaryColor3sEXT, is_loaded: false };
    pub static mut SecondaryColor3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::SecondaryColor3sv, is_loaded: false };
    pub static mut SecondaryColor3svEXT: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::SecondaryColor3svEXT, is_loaded: false };
    pub static mut SecondaryColor3ub: FnPtr<extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void> = FnPtr { f: super::failing::SecondaryColor3ub, is_loaded: false };
    pub static mut SecondaryColor3ubEXT: FnPtr<extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void> = FnPtr { f: super::failing::SecondaryColor3ubEXT, is_loaded: false };
    pub static mut SecondaryColor3ubv: FnPtr<extern "C" fn(v: *GLubyte) -> c_void> = FnPtr { f: super::failing::SecondaryColor3ubv, is_loaded: false };
    pub static mut SecondaryColor3ubvEXT: FnPtr<extern "C" fn(v: *GLubyte) -> c_void> = FnPtr { f: super::failing::SecondaryColor3ubvEXT, is_loaded: false };
    pub static mut SecondaryColor3ui: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void> = FnPtr { f: super::failing::SecondaryColor3ui, is_loaded: false };
    pub static mut SecondaryColor3uiEXT: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void> = FnPtr { f: super::failing::SecondaryColor3uiEXT, is_loaded: false };
    pub static mut SecondaryColor3uiv: FnPtr<extern "C" fn(v: *GLuint) -> c_void> = FnPtr { f: super::failing::SecondaryColor3uiv, is_loaded: false };
    pub static mut SecondaryColor3uivEXT: FnPtr<extern "C" fn(v: *GLuint) -> c_void> = FnPtr { f: super::failing::SecondaryColor3uivEXT, is_loaded: false };
    pub static mut SecondaryColor3us: FnPtr<extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void> = FnPtr { f: super::failing::SecondaryColor3us, is_loaded: false };
    pub static mut SecondaryColor3usEXT: FnPtr<extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void> = FnPtr { f: super::failing::SecondaryColor3usEXT, is_loaded: false };
    pub static mut SecondaryColor3usv: FnPtr<extern "C" fn(v: *GLushort) -> c_void> = FnPtr { f: super::failing::SecondaryColor3usv, is_loaded: false };
    pub static mut SecondaryColor3usvEXT: FnPtr<extern "C" fn(v: *GLushort) -> c_void> = FnPtr { f: super::failing::SecondaryColor3usvEXT, is_loaded: false };
    pub static mut SecondaryColorFormatNV: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::SecondaryColorFormatNV, is_loaded: false };
    pub static mut SecondaryColorP3ui: FnPtr<extern "C" fn(type_: GLenum, color: GLuint) -> c_void> = FnPtr { f: super::failing::SecondaryColorP3ui, is_loaded: false };
    pub static mut SecondaryColorP3uiv: FnPtr<extern "C" fn(type_: GLenum, color: *GLuint) -> c_void> = FnPtr { f: super::failing::SecondaryColorP3uiv, is_loaded: false };
    pub static mut SecondaryColorPointer: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::SecondaryColorPointer, is_loaded: false };
    pub static mut SecondaryColorPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::SecondaryColorPointerEXT, is_loaded: false };
    pub static mut SecondaryColorPointerListIBM: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void> = FnPtr { f: super::failing::SecondaryColorPointerListIBM, is_loaded: false };
    pub static mut SelectBuffer: FnPtr<extern "C" fn(size: GLsizei, buffer: *GLuint) -> c_void> = FnPtr { f: super::failing::SelectBuffer, is_loaded: false };
    pub static mut SelectPerfMonitorCountersAMD: FnPtr<extern "C" fn(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) -> c_void> = FnPtr { f: super::failing::SelectPerfMonitorCountersAMD, is_loaded: false };
    pub static mut SeparableFilter2D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void> = FnPtr { f: super::failing::SeparableFilter2D, is_loaded: false };
    pub static mut SeparableFilter2DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void> = FnPtr { f: super::failing::SeparableFilter2DEXT, is_loaded: false };
    pub static mut SetFenceAPPLE: FnPtr<extern "C" fn(fence: GLuint) -> c_void> = FnPtr { f: super::failing::SetFenceAPPLE, is_loaded: false };
    pub static mut SetFenceNV: FnPtr<extern "C" fn(fence: GLuint, condition: GLenum) -> c_void> = FnPtr { f: super::failing::SetFenceNV, is_loaded: false };
    pub static mut SetFragmentShaderConstantATI: FnPtr<extern "C" fn(dst: GLuint, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::SetFragmentShaderConstantATI, is_loaded: false };
    pub static mut SetInvariantEXT: FnPtr<extern "C" fn(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void> = FnPtr { f: super::failing::SetInvariantEXT, is_loaded: false };
    pub static mut SetLocalConstantEXT: FnPtr<extern "C" fn(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void> = FnPtr { f: super::failing::SetLocalConstantEXT, is_loaded: false };
    pub static mut SetMultisamplefvAMD: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void> = FnPtr { f: super::failing::SetMultisamplefvAMD, is_loaded: false };
    pub static mut ShadeModel: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::ShadeModel, is_loaded: false };
    pub static mut ShaderBinary: FnPtr<extern "C" fn(count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void> = FnPtr { f: super::failing::ShaderBinary, is_loaded: false };
    pub static mut ShaderOp1EXT: FnPtr<extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint) -> c_void> = FnPtr { f: super::failing::ShaderOp1EXT, is_loaded: false };
    pub static mut ShaderOp2EXT: FnPtr<extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) -> c_void> = FnPtr { f: super::failing::ShaderOp2EXT, is_loaded: false };
    pub static mut ShaderOp3EXT: FnPtr<extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) -> c_void> = FnPtr { f: super::failing::ShaderOp3EXT, is_loaded: false };
    pub static mut ShaderSource: FnPtr<extern "C" fn(shader: GLuint, count: GLsizei, string: **GLchar, length: *GLint) -> c_void> = FnPtr { f: super::failing::ShaderSource, is_loaded: false };
    pub static mut ShaderSourceARB: FnPtr<extern "C" fn(shaderObj: GLhandleARB, count: GLsizei, string: **GLcharARB, length: *GLint) -> c_void> = FnPtr { f: super::failing::ShaderSourceARB, is_loaded: false };
    pub static mut ShaderStorageBlockBinding: FnPtr<extern "C" fn(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> c_void> = FnPtr { f: super::failing::ShaderStorageBlockBinding, is_loaded: false };
    pub static mut SharpenTexFuncSGIS: FnPtr<extern "C" fn(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void> = FnPtr { f: super::failing::SharpenTexFuncSGIS, is_loaded: false };
    pub static mut SpriteParameterfSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::SpriteParameterfSGIX, is_loaded: false };
    pub static mut SpriteParameterfvSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::SpriteParameterfvSGIX, is_loaded: false };
    pub static mut SpriteParameteriSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::SpriteParameteriSGIX, is_loaded: false };
    pub static mut SpriteParameterivSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::SpriteParameterivSGIX, is_loaded: false };
    pub static mut StartInstrumentsSGIX: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::StartInstrumentsSGIX, is_loaded: false };
    pub static mut StartTilingQCOM: FnPtr<extern "C" fn(x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) -> c_void> = FnPtr { f: super::failing::StartTilingQCOM, is_loaded: false };
    pub static mut StencilClearTagEXT: FnPtr<extern "C" fn(stencilTagBits: GLsizei, stencilClearTag: GLuint) -> c_void> = FnPtr { f: super::failing::StencilClearTagEXT, is_loaded: false };
    pub static mut StencilFillPathInstancedNV: FnPtr<extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void> = FnPtr { f: super::failing::StencilFillPathInstancedNV, is_loaded: false };
    pub static mut StencilFillPathNV: FnPtr<extern "C" fn(path: GLuint, fillMode: GLenum, mask: GLuint) -> c_void> = FnPtr { f: super::failing::StencilFillPathNV, is_loaded: false };
    pub static mut StencilFunc: FnPtr<extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint) -> c_void> = FnPtr { f: super::failing::StencilFunc, is_loaded: false };
    pub static mut StencilFuncSeparate: FnPtr<extern "C" fn(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint) -> c_void> = FnPtr { f: super::failing::StencilFuncSeparate, is_loaded: false };
    pub static mut StencilFuncSeparateATI: FnPtr<extern "C" fn(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint) -> c_void> = FnPtr { f: super::failing::StencilFuncSeparateATI, is_loaded: false };
    pub static mut StencilMask: FnPtr<extern "C" fn(mask: GLuint) -> c_void> = FnPtr { f: super::failing::StencilMask, is_loaded: false };
    pub static mut StencilMaskSeparate: FnPtr<extern "C" fn(face: GLenum, mask: GLuint) -> c_void> = FnPtr { f: super::failing::StencilMaskSeparate, is_loaded: false };
    pub static mut StencilOp: FnPtr<extern "C" fn(fail: GLenum, zfail: GLenum, zpass: GLenum) -> c_void> = FnPtr { f: super::failing::StencilOp, is_loaded: false };
    pub static mut StencilOpSeparate: FnPtr<extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void> = FnPtr { f: super::failing::StencilOpSeparate, is_loaded: false };
    pub static mut StencilOpSeparateATI: FnPtr<extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void> = FnPtr { f: super::failing::StencilOpSeparateATI, is_loaded: false };
    pub static mut StencilOpValueAMD: FnPtr<extern "C" fn(face: GLenum, value: GLuint) -> c_void> = FnPtr { f: super::failing::StencilOpValueAMD, is_loaded: false };
    pub static mut StencilStrokePathInstancedNV: FnPtr<extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void> = FnPtr { f: super::failing::StencilStrokePathInstancedNV, is_loaded: false };
    pub static mut StencilStrokePathNV: FnPtr<extern "C" fn(path: GLuint, reference: GLint, mask: GLuint) -> c_void> = FnPtr { f: super::failing::StencilStrokePathNV, is_loaded: false };
    pub static mut StopInstrumentsSGIX: FnPtr<extern "C" fn(marker: GLint) -> c_void> = FnPtr { f: super::failing::StopInstrumentsSGIX, is_loaded: false };
    pub static mut StringMarkerGREMEDY: FnPtr<extern "C" fn(len: GLsizei, string: *GLvoid) -> c_void> = FnPtr { f: super::failing::StringMarkerGREMEDY, is_loaded: false };
    pub static mut SwizzleEXT: FnPtr<extern "C" fn(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void> = FnPtr { f: super::failing::SwizzleEXT, is_loaded: false };
    pub static mut SyncTextureINTEL: FnPtr<extern "C" fn(texture: GLuint) -> c_void> = FnPtr { f: super::failing::SyncTextureINTEL, is_loaded: false };
    pub static mut TagSampleBufferSGIX: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::TagSampleBufferSGIX, is_loaded: false };
    pub static mut Tangent3bEXT: FnPtr<extern "C" fn(tx: GLbyte, ty: GLbyte, tz: GLbyte) -> c_void> = FnPtr { f: super::failing::Tangent3bEXT, is_loaded: false };
    pub static mut Tangent3bvEXT: FnPtr<extern "C" fn(v: *GLbyte) -> c_void> = FnPtr { f: super::failing::Tangent3bvEXT, is_loaded: false };
    pub static mut Tangent3dEXT: FnPtr<extern "C" fn(tx: GLdouble, ty: GLdouble, tz: GLdouble) -> c_void> = FnPtr { f: super::failing::Tangent3dEXT, is_loaded: false };
    pub static mut Tangent3dvEXT: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::Tangent3dvEXT, is_loaded: false };
    pub static mut Tangent3fEXT: FnPtr<extern "C" fn(tx: GLfloat, ty: GLfloat, tz: GLfloat) -> c_void> = FnPtr { f: super::failing::Tangent3fEXT, is_loaded: false };
    pub static mut Tangent3fvEXT: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Tangent3fvEXT, is_loaded: false };
    pub static mut Tangent3iEXT: FnPtr<extern "C" fn(tx: GLint, ty: GLint, tz: GLint) -> c_void> = FnPtr { f: super::failing::Tangent3iEXT, is_loaded: false };
    pub static mut Tangent3ivEXT: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::Tangent3ivEXT, is_loaded: false };
    pub static mut Tangent3sEXT: FnPtr<extern "C" fn(tx: GLshort, ty: GLshort, tz: GLshort) -> c_void> = FnPtr { f: super::failing::Tangent3sEXT, is_loaded: false };
    pub static mut Tangent3svEXT: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::Tangent3svEXT, is_loaded: false };
    pub static mut TangentPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::TangentPointerEXT, is_loaded: false };
    pub static mut TbufferMask3DFX: FnPtr<extern "C" fn(mask: GLuint) -> c_void> = FnPtr { f: super::failing::TbufferMask3DFX, is_loaded: false };
    pub static mut TessellationFactorAMD: FnPtr<extern "C" fn(factor: GLfloat) -> c_void> = FnPtr { f: super::failing::TessellationFactorAMD, is_loaded: false };
    pub static mut TessellationModeAMD: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::TessellationModeAMD, is_loaded: false };
    pub static mut TestFenceAPPLE: FnPtr<extern "C" fn(fence: GLuint) -> GLboolean> = FnPtr { f: super::failing::TestFenceAPPLE, is_loaded: false };
    pub static mut TestFenceNV: FnPtr<extern "C" fn(fence: GLuint) -> GLboolean> = FnPtr { f: super::failing::TestFenceNV, is_loaded: false };
    pub static mut TestObjectAPPLE: FnPtr<extern "C" fn(object: GLenum, name: GLuint) -> GLboolean> = FnPtr { f: super::failing::TestObjectAPPLE, is_loaded: false };
    pub static mut TexBuffer: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::TexBuffer, is_loaded: false };
    pub static mut TexBufferARB: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::TexBufferARB, is_loaded: false };
    pub static mut TexBufferEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::TexBufferEXT, is_loaded: false };
    pub static mut TexBufferRange: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::TexBufferRange, is_loaded: false };
    pub static mut TexBumpParameterfvATI: FnPtr<extern "C" fn(pname: GLenum, param: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexBumpParameterfvATI, is_loaded: false };
    pub static mut TexBumpParameterivATI: FnPtr<extern "C" fn(pname: GLenum, param: *GLint) -> c_void> = FnPtr { f: super::failing::TexBumpParameterivATI, is_loaded: false };
    pub static mut TexCoord1bOES: FnPtr<extern "C" fn(s: GLbyte) -> c_void> = FnPtr { f: super::failing::TexCoord1bOES, is_loaded: false };
    pub static mut TexCoord1bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::TexCoord1bvOES, is_loaded: false };
    pub static mut TexCoord1d: FnPtr<extern "C" fn(s: GLdouble) -> c_void> = FnPtr { f: super::failing::TexCoord1d, is_loaded: false };
    pub static mut TexCoord1dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::TexCoord1dv, is_loaded: false };
    pub static mut TexCoord1f: FnPtr<extern "C" fn(s: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord1f, is_loaded: false };
    pub static mut TexCoord1fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord1fv, is_loaded: false };
    pub static mut TexCoord1hNV: FnPtr<extern "C" fn(s: GLhalfNV) -> c_void> = FnPtr { f: super::failing::TexCoord1hNV, is_loaded: false };
    pub static mut TexCoord1hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::TexCoord1hvNV, is_loaded: false };
    pub static mut TexCoord1i: FnPtr<extern "C" fn(s: GLint) -> c_void> = FnPtr { f: super::failing::TexCoord1i, is_loaded: false };
    pub static mut TexCoord1iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::TexCoord1iv, is_loaded: false };
    pub static mut TexCoord1s: FnPtr<extern "C" fn(s: GLshort) -> c_void> = FnPtr { f: super::failing::TexCoord1s, is_loaded: false };
    pub static mut TexCoord1sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::TexCoord1sv, is_loaded: false };
    pub static mut TexCoord1xOES: FnPtr<extern "C" fn(s: GLfixed) -> c_void> = FnPtr { f: super::failing::TexCoord1xOES, is_loaded: false };
    pub static mut TexCoord1xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexCoord1xvOES, is_loaded: false };
    pub static mut TexCoord2bOES: FnPtr<extern "C" fn(s: GLbyte, t: GLbyte) -> c_void> = FnPtr { f: super::failing::TexCoord2bOES, is_loaded: false };
    pub static mut TexCoord2bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::TexCoord2bvOES, is_loaded: false };
    pub static mut TexCoord2d: FnPtr<extern "C" fn(s: GLdouble, t: GLdouble) -> c_void> = FnPtr { f: super::failing::TexCoord2d, is_loaded: false };
    pub static mut TexCoord2dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::TexCoord2dv, is_loaded: false };
    pub static mut TexCoord2f: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2f, is_loaded: false };
    pub static mut TexCoord2fColor3fVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fColor3fVertex3fSUN, is_loaded: false };
    pub static mut TexCoord2fColor3fVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, c: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fColor3fVertex3fvSUN, is_loaded: false };
    pub static mut TexCoord2fColor4fNormal3fVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fColor4fNormal3fVertex3fSUN, is_loaded: false };
    pub static mut TexCoord2fColor4fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fColor4fNormal3fVertex3fvSUN, is_loaded: false };
    pub static mut TexCoord2fColor4ubVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fColor4ubVertex3fSUN, is_loaded: false };
    pub static mut TexCoord2fColor4ubVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, c: *GLubyte, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fColor4ubVertex3fvSUN, is_loaded: false };
    pub static mut TexCoord2fNormal3fVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fNormal3fVertex3fSUN, is_loaded: false };
    pub static mut TexCoord2fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fNormal3fVertex3fvSUN, is_loaded: false };
    pub static mut TexCoord2fVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fVertex3fSUN, is_loaded: false };
    pub static mut TexCoord2fVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fVertex3fvSUN, is_loaded: false };
    pub static mut TexCoord2fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord2fv, is_loaded: false };
    pub static mut TexCoord2hNV: FnPtr<extern "C" fn(s: GLhalfNV, t: GLhalfNV) -> c_void> = FnPtr { f: super::failing::TexCoord2hNV, is_loaded: false };
    pub static mut TexCoord2hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::TexCoord2hvNV, is_loaded: false };
    pub static mut TexCoord2i: FnPtr<extern "C" fn(s: GLint, t: GLint) -> c_void> = FnPtr { f: super::failing::TexCoord2i, is_loaded: false };
    pub static mut TexCoord2iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::TexCoord2iv, is_loaded: false };
    pub static mut TexCoord2s: FnPtr<extern "C" fn(s: GLshort, t: GLshort) -> c_void> = FnPtr { f: super::failing::TexCoord2s, is_loaded: false };
    pub static mut TexCoord2sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::TexCoord2sv, is_loaded: false };
    pub static mut TexCoord2xOES: FnPtr<extern "C" fn(s: GLfixed, t: GLfixed) -> c_void> = FnPtr { f: super::failing::TexCoord2xOES, is_loaded: false };
    pub static mut TexCoord2xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexCoord2xvOES, is_loaded: false };
    pub static mut TexCoord3bOES: FnPtr<extern "C" fn(s: GLbyte, t: GLbyte, r: GLbyte) -> c_void> = FnPtr { f: super::failing::TexCoord3bOES, is_loaded: false };
    pub static mut TexCoord3bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::TexCoord3bvOES, is_loaded: false };
    pub static mut TexCoord3d: FnPtr<extern "C" fn(s: GLdouble, t: GLdouble, r: GLdouble) -> c_void> = FnPtr { f: super::failing::TexCoord3d, is_loaded: false };
    pub static mut TexCoord3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::TexCoord3dv, is_loaded: false };
    pub static mut TexCoord3f: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord3f, is_loaded: false };
    pub static mut TexCoord3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord3fv, is_loaded: false };
    pub static mut TexCoord3hNV: FnPtr<extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void> = FnPtr { f: super::failing::TexCoord3hNV, is_loaded: false };
    pub static mut TexCoord3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::TexCoord3hvNV, is_loaded: false };
    pub static mut TexCoord3i: FnPtr<extern "C" fn(s: GLint, t: GLint, r: GLint) -> c_void> = FnPtr { f: super::failing::TexCoord3i, is_loaded: false };
    pub static mut TexCoord3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::TexCoord3iv, is_loaded: false };
    pub static mut TexCoord3s: FnPtr<extern "C" fn(s: GLshort, t: GLshort, r: GLshort) -> c_void> = FnPtr { f: super::failing::TexCoord3s, is_loaded: false };
    pub static mut TexCoord3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::TexCoord3sv, is_loaded: false };
    pub static mut TexCoord3xOES: FnPtr<extern "C" fn(s: GLfixed, t: GLfixed, r: GLfixed) -> c_void> = FnPtr { f: super::failing::TexCoord3xOES, is_loaded: false };
    pub static mut TexCoord3xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexCoord3xvOES, is_loaded: false };
    pub static mut TexCoord4bOES: FnPtr<extern "C" fn(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void> = FnPtr { f: super::failing::TexCoord4bOES, is_loaded: false };
    pub static mut TexCoord4bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::TexCoord4bvOES, is_loaded: false };
    pub static mut TexCoord4d: FnPtr<extern "C" fn(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void> = FnPtr { f: super::failing::TexCoord4d, is_loaded: false };
    pub static mut TexCoord4dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::TexCoord4dv, is_loaded: false };
    pub static mut TexCoord4f: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord4f, is_loaded: false };
    pub static mut TexCoord4fColor4fNormal3fVertex4fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord4fColor4fNormal3fVertex4fSUN, is_loaded: false };
    pub static mut TexCoord4fColor4fNormal3fVertex4fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord4fColor4fNormal3fVertex4fvSUN, is_loaded: false };
    pub static mut TexCoord4fVertex4fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord4fVertex4fSUN, is_loaded: false };
    pub static mut TexCoord4fVertex4fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord4fVertex4fvSUN, is_loaded: false };
    pub static mut TexCoord4fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexCoord4fv, is_loaded: false };
    pub static mut TexCoord4hNV: FnPtr<extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void> = FnPtr { f: super::failing::TexCoord4hNV, is_loaded: false };
    pub static mut TexCoord4hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::TexCoord4hvNV, is_loaded: false };
    pub static mut TexCoord4i: FnPtr<extern "C" fn(s: GLint, t: GLint, r: GLint, q: GLint) -> c_void> = FnPtr { f: super::failing::TexCoord4i, is_loaded: false };
    pub static mut TexCoord4iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::TexCoord4iv, is_loaded: false };
    pub static mut TexCoord4s: FnPtr<extern "C" fn(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void> = FnPtr { f: super::failing::TexCoord4s, is_loaded: false };
    pub static mut TexCoord4sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::TexCoord4sv, is_loaded: false };
    pub static mut TexCoord4xOES: FnPtr<extern "C" fn(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void> = FnPtr { f: super::failing::TexCoord4xOES, is_loaded: false };
    pub static mut TexCoord4xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexCoord4xvOES, is_loaded: false };
    pub static mut TexCoordFormatNV: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::TexCoordFormatNV, is_loaded: false };
    pub static mut TexCoordP1ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::TexCoordP1ui, is_loaded: false };
    pub static mut TexCoordP1uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::TexCoordP1uiv, is_loaded: false };
    pub static mut TexCoordP2ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::TexCoordP2ui, is_loaded: false };
    pub static mut TexCoordP2uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::TexCoordP2uiv, is_loaded: false };
    pub static mut TexCoordP3ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::TexCoordP3ui, is_loaded: false };
    pub static mut TexCoordP3uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::TexCoordP3uiv, is_loaded: false };
    pub static mut TexCoordP4ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void> = FnPtr { f: super::failing::TexCoordP4ui, is_loaded: false };
    pub static mut TexCoordP4uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void> = FnPtr { f: super::failing::TexCoordP4uiv, is_loaded: false };
    pub static mut TexCoordPointer: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexCoordPointer, is_loaded: false };
    pub static mut TexCoordPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexCoordPointerEXT, is_loaded: false };
    pub static mut TexCoordPointerListIBM: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void> = FnPtr { f: super::failing::TexCoordPointerListIBM, is_loaded: false };
    pub static mut TexCoordPointervINTEL: FnPtr<extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void> = FnPtr { f: super::failing::TexCoordPointervINTEL, is_loaded: false };
    pub static mut TexEnvf: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::TexEnvf, is_loaded: false };
    pub static mut TexEnvfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexEnvfv, is_loaded: false };
    pub static mut TexEnvi: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::TexEnvi, is_loaded: false };
    pub static mut TexEnviv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::TexEnviv, is_loaded: false };
    pub static mut TexEnvx: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::TexEnvx, is_loaded: false };
    pub static mut TexEnvxOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::TexEnvxOES, is_loaded: false };
    pub static mut TexEnvxv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexEnvxv, is_loaded: false };
    pub static mut TexEnvxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexEnvxvOES, is_loaded: false };
    pub static mut TexFilterFuncSGIS: FnPtr<extern "C" fn(target: GLenum, filter: GLenum, n: GLsizei, weights: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexFilterFuncSGIS, is_loaded: false };
    pub static mut TexGend: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLdouble) -> c_void> = FnPtr { f: super::failing::TexGend, is_loaded: false };
    pub static mut TexGendv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::TexGendv, is_loaded: false };
    pub static mut TexGenf: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::TexGenf, is_loaded: false };
    pub static mut TexGenfOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::TexGenfOES, is_loaded: false };
    pub static mut TexGenfv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexGenfv, is_loaded: false };
    pub static mut TexGenfvOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexGenfvOES, is_loaded: false };
    pub static mut TexGeni: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::TexGeni, is_loaded: false };
    pub static mut TexGeniOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::TexGeniOES, is_loaded: false };
    pub static mut TexGeniv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::TexGeniv, is_loaded: false };
    pub static mut TexGenivOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::TexGenivOES, is_loaded: false };
    pub static mut TexGenxOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::TexGenxOES, is_loaded: false };
    pub static mut TexGenxvOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexGenxvOES, is_loaded: false };
    pub static mut TexImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexImage1D, is_loaded: false };
    pub static mut TexImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexImage2D, is_loaded: false };
    pub static mut TexImage2DMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TexImage2DMultisample, is_loaded: false };
    pub static mut TexImage2DMultisampleCoverageNV: FnPtr<extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TexImage2DMultisampleCoverageNV, is_loaded: false };
    pub static mut TexImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexImage3D, is_loaded: false };
    pub static mut TexImage3DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexImage3DEXT, is_loaded: false };
    pub static mut TexImage3DMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TexImage3DMultisample, is_loaded: false };
    pub static mut TexImage3DMultisampleCoverageNV: FnPtr<extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TexImage3DMultisampleCoverageNV, is_loaded: false };
    pub static mut TexImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexImage3DOES, is_loaded: false };
    pub static mut TexImage4DSGIS: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexImage4DSGIS, is_loaded: false };
    pub static mut TexPageCommitmentARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void> = FnPtr { f: super::failing::TexPageCommitmentARB, is_loaded: false };
    pub static mut TexParameterIiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::TexParameterIiv, is_loaded: false };
    pub static mut TexParameterIivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::TexParameterIivEXT, is_loaded: false };
    pub static mut TexParameterIuiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::TexParameterIuiv, is_loaded: false };
    pub static mut TexParameterIuivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::TexParameterIuivEXT, is_loaded: false };
    pub static mut TexParameterf: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::TexParameterf, is_loaded: false };
    pub static mut TexParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::TexParameterfv, is_loaded: false };
    pub static mut TexParameteri: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::TexParameteri, is_loaded: false };
    pub static mut TexParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::TexParameteriv, is_loaded: false };
    pub static mut TexParameterx: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::TexParameterx, is_loaded: false };
    pub static mut TexParameterxOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void> = FnPtr { f: super::failing::TexParameterxOES, is_loaded: false };
    pub static mut TexParameterxv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexParameterxv, is_loaded: false };
    pub static mut TexParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void> = FnPtr { f: super::failing::TexParameterxvOES, is_loaded: false };
    pub static mut TexRenderbufferNV: FnPtr<extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::TexRenderbufferNV, is_loaded: false };
    pub static mut TexStorage1D: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void> = FnPtr { f: super::failing::TexStorage1D, is_loaded: false };
    pub static mut TexStorage1DEXT: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void> = FnPtr { f: super::failing::TexStorage1DEXT, is_loaded: false };
    pub static mut TexStorage2D: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::TexStorage2D, is_loaded: false };
    pub static mut TexStorage2DEXT: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::TexStorage2DEXT, is_loaded: false };
    pub static mut TexStorage2DMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TexStorage2DMultisample, is_loaded: false };
    pub static mut TexStorage3D: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void> = FnPtr { f: super::failing::TexStorage3D, is_loaded: false };
    pub static mut TexStorage3DEXT: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void> = FnPtr { f: super::failing::TexStorage3DEXT, is_loaded: false };
    pub static mut TexStorage3DMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TexStorage3DMultisample, is_loaded: false };
    pub static mut TexStorageSparseAMD: FnPtr<extern "C" fn(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void> = FnPtr { f: super::failing::TexStorageSparseAMD, is_loaded: false };
    pub static mut TexSubImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexSubImage1D, is_loaded: false };
    pub static mut TexSubImage1DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexSubImage1DEXT, is_loaded: false };
    pub static mut TexSubImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexSubImage2D, is_loaded: false };
    pub static mut TexSubImage2DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexSubImage2DEXT, is_loaded: false };
    pub static mut TexSubImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexSubImage3D, is_loaded: false };
    pub static mut TexSubImage3DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexSubImage3DEXT, is_loaded: false };
    pub static mut TexSubImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexSubImage3DOES, is_loaded: false };
    pub static mut TexSubImage4DSGIS: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TexSubImage4DSGIS, is_loaded: false };
    pub static mut TextureBarrierNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::TextureBarrierNV, is_loaded: false };
    pub static mut TextureBufferEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::TextureBufferEXT, is_loaded: false };
    pub static mut TextureBufferRangeEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void> = FnPtr { f: super::failing::TextureBufferRangeEXT, is_loaded: false };
    pub static mut TextureColorMaskSGIS: FnPtr<extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void> = FnPtr { f: super::failing::TextureColorMaskSGIS, is_loaded: false };
    pub static mut TextureImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TextureImage1DEXT, is_loaded: false };
    pub static mut TextureImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TextureImage2DEXT, is_loaded: false };
    pub static mut TextureImage2DMultisampleCoverageNV: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TextureImage2DMultisampleCoverageNV, is_loaded: false };
    pub static mut TextureImage2DMultisampleNV: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TextureImage2DMultisampleNV, is_loaded: false };
    pub static mut TextureImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TextureImage3DEXT, is_loaded: false };
    pub static mut TextureImage3DMultisampleCoverageNV: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TextureImage3DMultisampleCoverageNV, is_loaded: false };
    pub static mut TextureImage3DMultisampleNV: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TextureImage3DMultisampleNV, is_loaded: false };
    pub static mut TextureLightEXT: FnPtr<extern "C" fn(pname: GLenum) -> c_void> = FnPtr { f: super::failing::TextureLightEXT, is_loaded: false };
    pub static mut TextureMaterialEXT: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void> = FnPtr { f: super::failing::TextureMaterialEXT, is_loaded: false };
    pub static mut TextureNormalEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void> = FnPtr { f: super::failing::TextureNormalEXT, is_loaded: false };
    pub static mut TexturePageCommitmentEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void> = FnPtr { f: super::failing::TexturePageCommitmentEXT, is_loaded: false };
    pub static mut TextureParameterIivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::TextureParameterIivEXT, is_loaded: false };
    pub static mut TextureParameterIuivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void> = FnPtr { f: super::failing::TextureParameterIuivEXT, is_loaded: false };
    pub static mut TextureParameterfEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::TextureParameterfEXT, is_loaded: false };
    pub static mut TextureParameterfvEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::TextureParameterfvEXT, is_loaded: false };
    pub static mut TextureParameteriEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::TextureParameteriEXT, is_loaded: false };
    pub static mut TextureParameterivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::TextureParameterivEXT, is_loaded: false };
    pub static mut TextureRangeAPPLE: FnPtr<extern "C" fn(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::TextureRangeAPPLE, is_loaded: false };
    pub static mut TextureRenderbufferEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, renderbuffer: GLuint) -> c_void> = FnPtr { f: super::failing::TextureRenderbufferEXT, is_loaded: false };
    pub static mut TextureStorage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void> = FnPtr { f: super::failing::TextureStorage1DEXT, is_loaded: false };
    pub static mut TextureStorage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::TextureStorage2DEXT, is_loaded: false };
    pub static mut TextureStorage2DMultisampleEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TextureStorage2DMultisampleEXT, is_loaded: false };
    pub static mut TextureStorage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void> = FnPtr { f: super::failing::TextureStorage3DEXT, is_loaded: false };
    pub static mut TextureStorage3DMultisampleEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void> = FnPtr { f: super::failing::TextureStorage3DMultisampleEXT, is_loaded: false };
    pub static mut TextureStorageSparseAMD: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void> = FnPtr { f: super::failing::TextureStorageSparseAMD, is_loaded: false };
    pub static mut TextureSubImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TextureSubImage1DEXT, is_loaded: false };
    pub static mut TextureSubImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TextureSubImage2DEXT, is_loaded: false };
    pub static mut TextureSubImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void> = FnPtr { f: super::failing::TextureSubImage3DEXT, is_loaded: false };
    pub static mut TextureView: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> c_void> = FnPtr { f: super::failing::TextureView, is_loaded: false };
    pub static mut TrackMatrixNV: FnPtr<extern "C" fn(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) -> c_void> = FnPtr { f: super::failing::TrackMatrixNV, is_loaded: false };
    pub static mut TransformFeedbackAttribsNV: FnPtr<extern "C" fn(count: GLuint, attribs: *GLint, bufferMode: GLenum) -> c_void> = FnPtr { f: super::failing::TransformFeedbackAttribsNV, is_loaded: false };
    pub static mut TransformFeedbackStreamAttribsNV: FnPtr<extern "C" fn(count: GLsizei, attribs: *GLint, nbuffers: GLsizei, bufstreams: *GLint, bufferMode: GLenum) -> c_void> = FnPtr { f: super::failing::TransformFeedbackStreamAttribsNV, is_loaded: false };
    pub static mut TransformFeedbackVaryings: FnPtr<extern "C" fn(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void> = FnPtr { f: super::failing::TransformFeedbackVaryings, is_loaded: false };
    pub static mut TransformFeedbackVaryingsEXT: FnPtr<extern "C" fn(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void> = FnPtr { f: super::failing::TransformFeedbackVaryingsEXT, is_loaded: false };
    pub static mut TransformFeedbackVaryingsNV: FnPtr<extern "C" fn(program: GLuint, count: GLsizei, locations: *GLint, bufferMode: GLenum) -> c_void> = FnPtr { f: super::failing::TransformFeedbackVaryingsNV, is_loaded: false };
    pub static mut TransformPathNV: FnPtr<extern "C" fn(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void> = FnPtr { f: super::failing::TransformPathNV, is_loaded: false };
    pub static mut Translated: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::Translated, is_loaded: false };
    pub static mut Translatef: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::Translatef, is_loaded: false };
    pub static mut Translatex: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void> = FnPtr { f: super::failing::Translatex, is_loaded: false };
    pub static mut TranslatexOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void> = FnPtr { f: super::failing::TranslatexOES, is_loaded: false };
    pub static mut Uniform1d: FnPtr<extern "C" fn(location: GLint, x: GLdouble) -> c_void> = FnPtr { f: super::failing::Uniform1d, is_loaded: false };
    pub static mut Uniform1dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::Uniform1dv, is_loaded: false };
    pub static mut Uniform1f: FnPtr<extern "C" fn(location: GLint, v0: GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform1f, is_loaded: false };
    pub static mut Uniform1fARB: FnPtr<extern "C" fn(location: GLint, v0: GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform1fARB, is_loaded: false };
    pub static mut Uniform1fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform1fv, is_loaded: false };
    pub static mut Uniform1fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform1fvARB, is_loaded: false };
    pub static mut Uniform1i: FnPtr<extern "C" fn(location: GLint, v0: GLint) -> c_void> = FnPtr { f: super::failing::Uniform1i, is_loaded: false };
    pub static mut Uniform1i64NV: FnPtr<extern "C" fn(location: GLint, x: GLint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform1i64NV, is_loaded: false };
    pub static mut Uniform1i64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform1i64vNV, is_loaded: false };
    pub static mut Uniform1iARB: FnPtr<extern "C" fn(location: GLint, v0: GLint) -> c_void> = FnPtr { f: super::failing::Uniform1iARB, is_loaded: false };
    pub static mut Uniform1iv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::Uniform1iv, is_loaded: false };
    pub static mut Uniform1ivARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::Uniform1ivARB, is_loaded: false };
    pub static mut Uniform1ui: FnPtr<extern "C" fn(location: GLint, v0: GLuint) -> c_void> = FnPtr { f: super::failing::Uniform1ui, is_loaded: false };
    pub static mut Uniform1ui64NV: FnPtr<extern "C" fn(location: GLint, x: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform1ui64NV, is_loaded: false };
    pub static mut Uniform1ui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform1ui64vNV, is_loaded: false };
    pub static mut Uniform1uiEXT: FnPtr<extern "C" fn(location: GLint, v0: GLuint) -> c_void> = FnPtr { f: super::failing::Uniform1uiEXT, is_loaded: false };
    pub static mut Uniform1uiv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::Uniform1uiv, is_loaded: false };
    pub static mut Uniform1uivEXT: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::Uniform1uivEXT, is_loaded: false };
    pub static mut Uniform2d: FnPtr<extern "C" fn(location: GLint, x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::Uniform2d, is_loaded: false };
    pub static mut Uniform2dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::Uniform2dv, is_loaded: false };
    pub static mut Uniform2f: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform2f, is_loaded: false };
    pub static mut Uniform2fARB: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform2fARB, is_loaded: false };
    pub static mut Uniform2fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform2fv, is_loaded: false };
    pub static mut Uniform2fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform2fvARB, is_loaded: false };
    pub static mut Uniform2i: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint) -> c_void> = FnPtr { f: super::failing::Uniform2i, is_loaded: false };
    pub static mut Uniform2i64NV: FnPtr<extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform2i64NV, is_loaded: false };
    pub static mut Uniform2i64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform2i64vNV, is_loaded: false };
    pub static mut Uniform2iARB: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint) -> c_void> = FnPtr { f: super::failing::Uniform2iARB, is_loaded: false };
    pub static mut Uniform2iv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::Uniform2iv, is_loaded: false };
    pub static mut Uniform2ivARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::Uniform2ivARB, is_loaded: false };
    pub static mut Uniform2ui: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint) -> c_void> = FnPtr { f: super::failing::Uniform2ui, is_loaded: false };
    pub static mut Uniform2ui64NV: FnPtr<extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform2ui64NV, is_loaded: false };
    pub static mut Uniform2ui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform2ui64vNV, is_loaded: false };
    pub static mut Uniform2uiEXT: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint) -> c_void> = FnPtr { f: super::failing::Uniform2uiEXT, is_loaded: false };
    pub static mut Uniform2uiv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::Uniform2uiv, is_loaded: false };
    pub static mut Uniform2uivEXT: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::Uniform2uivEXT, is_loaded: false };
    pub static mut Uniform3d: FnPtr<extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::Uniform3d, is_loaded: false };
    pub static mut Uniform3dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::Uniform3dv, is_loaded: false };
    pub static mut Uniform3f: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform3f, is_loaded: false };
    pub static mut Uniform3fARB: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform3fARB, is_loaded: false };
    pub static mut Uniform3fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform3fv, is_loaded: false };
    pub static mut Uniform3fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform3fvARB, is_loaded: false };
    pub static mut Uniform3i: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void> = FnPtr { f: super::failing::Uniform3i, is_loaded: false };
    pub static mut Uniform3i64NV: FnPtr<extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform3i64NV, is_loaded: false };
    pub static mut Uniform3i64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform3i64vNV, is_loaded: false };
    pub static mut Uniform3iARB: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void> = FnPtr { f: super::failing::Uniform3iARB, is_loaded: false };
    pub static mut Uniform3iv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::Uniform3iv, is_loaded: false };
    pub static mut Uniform3ivARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::Uniform3ivARB, is_loaded: false };
    pub static mut Uniform3ui: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void> = FnPtr { f: super::failing::Uniform3ui, is_loaded: false };
    pub static mut Uniform3ui64NV: FnPtr<extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform3ui64NV, is_loaded: false };
    pub static mut Uniform3ui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform3ui64vNV, is_loaded: false };
    pub static mut Uniform3uiEXT: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void> = FnPtr { f: super::failing::Uniform3uiEXT, is_loaded: false };
    pub static mut Uniform3uiv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::Uniform3uiv, is_loaded: false };
    pub static mut Uniform3uivEXT: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::Uniform3uivEXT, is_loaded: false };
    pub static mut Uniform4d: FnPtr<extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::Uniform4d, is_loaded: false };
    pub static mut Uniform4dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::Uniform4dv, is_loaded: false };
    pub static mut Uniform4f: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform4f, is_loaded: false };
    pub static mut Uniform4fARB: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform4fARB, is_loaded: false };
    pub static mut Uniform4fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform4fv, is_loaded: false };
    pub static mut Uniform4fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::Uniform4fvARB, is_loaded: false };
    pub static mut Uniform4i: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void> = FnPtr { f: super::failing::Uniform4i, is_loaded: false };
    pub static mut Uniform4i64NV: FnPtr<extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform4i64NV, is_loaded: false };
    pub static mut Uniform4i64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform4i64vNV, is_loaded: false };
    pub static mut Uniform4iARB: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void> = FnPtr { f: super::failing::Uniform4iARB, is_loaded: false };
    pub static mut Uniform4iv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::Uniform4iv, is_loaded: false };
    pub static mut Uniform4ivARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void> = FnPtr { f: super::failing::Uniform4ivARB, is_loaded: false };
    pub static mut Uniform4ui: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void> = FnPtr { f: super::failing::Uniform4ui, is_loaded: false };
    pub static mut Uniform4ui64NV: FnPtr<extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform4ui64NV, is_loaded: false };
    pub static mut Uniform4ui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniform4ui64vNV, is_loaded: false };
    pub static mut Uniform4uiEXT: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void> = FnPtr { f: super::failing::Uniform4uiEXT, is_loaded: false };
    pub static mut Uniform4uiv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::Uniform4uiv, is_loaded: false };
    pub static mut Uniform4uivEXT: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void> = FnPtr { f: super::failing::Uniform4uivEXT, is_loaded: false };
    pub static mut UniformBlockBinding: FnPtr<extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> c_void> = FnPtr { f: super::failing::UniformBlockBinding, is_loaded: false };
    pub static mut UniformBufferEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, buffer: GLuint) -> c_void> = FnPtr { f: super::failing::UniformBufferEXT, is_loaded: false };
    pub static mut UniformHandleui64ARB: FnPtr<extern "C" fn(location: GLint, value: GLuint64) -> c_void> = FnPtr { f: super::failing::UniformHandleui64ARB, is_loaded: false };
    pub static mut UniformHandleui64NV: FnPtr<extern "C" fn(location: GLint, value: GLuint64) -> c_void> = FnPtr { f: super::failing::UniformHandleui64NV, is_loaded: false };
    pub static mut UniformHandleui64vARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64) -> c_void> = FnPtr { f: super::failing::UniformHandleui64vARB, is_loaded: false };
    pub static mut UniformHandleui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64) -> c_void> = FnPtr { f: super::failing::UniformHandleui64vNV, is_loaded: false };
    pub static mut UniformMatrix2dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix2dv, is_loaded: false };
    pub static mut UniformMatrix2fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix2fv, is_loaded: false };
    pub static mut UniformMatrix2fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix2fvARB, is_loaded: false };
    pub static mut UniformMatrix2x3dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix2x3dv, is_loaded: false };
    pub static mut UniformMatrix2x3fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix2x3fv, is_loaded: false };
    pub static mut UniformMatrix2x4dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix2x4dv, is_loaded: false };
    pub static mut UniformMatrix2x4fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix2x4fv, is_loaded: false };
    pub static mut UniformMatrix3dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix3dv, is_loaded: false };
    pub static mut UniformMatrix3fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix3fv, is_loaded: false };
    pub static mut UniformMatrix3fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix3fvARB, is_loaded: false };
    pub static mut UniformMatrix3x2dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix3x2dv, is_loaded: false };
    pub static mut UniformMatrix3x2fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix3x2fv, is_loaded: false };
    pub static mut UniformMatrix3x4dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix3x4dv, is_loaded: false };
    pub static mut UniformMatrix3x4fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix3x4fv, is_loaded: false };
    pub static mut UniformMatrix4dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix4dv, is_loaded: false };
    pub static mut UniformMatrix4fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix4fv, is_loaded: false };
    pub static mut UniformMatrix4fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix4fvARB, is_loaded: false };
    pub static mut UniformMatrix4x2dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix4x2dv, is_loaded: false };
    pub static mut UniformMatrix4x2fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix4x2fv, is_loaded: false };
    pub static mut UniformMatrix4x3dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void> = FnPtr { f: super::failing::UniformMatrix4x3dv, is_loaded: false };
    pub static mut UniformMatrix4x3fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void> = FnPtr { f: super::failing::UniformMatrix4x3fv, is_loaded: false };
    pub static mut UniformSubroutinesuiv: FnPtr<extern "C" fn(shadertype: GLenum, count: GLsizei, indices: *GLuint) -> c_void> = FnPtr { f: super::failing::UniformSubroutinesuiv, is_loaded: false };
    pub static mut Uniformui64NV: FnPtr<extern "C" fn(location: GLint, value: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniformui64NV, is_loaded: false };
    pub static mut Uniformui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::Uniformui64vNV, is_loaded: false };
    pub static mut UnlockArraysEXT: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::UnlockArraysEXT, is_loaded: false };
    pub static mut UnmapBuffer: FnPtr<extern "C" fn(target: GLenum) -> GLboolean> = FnPtr { f: super::failing::UnmapBuffer, is_loaded: false };
    pub static mut UnmapBufferARB: FnPtr<extern "C" fn(target: GLenum) -> GLboolean> = FnPtr { f: super::failing::UnmapBufferARB, is_loaded: false };
    pub static mut UnmapBufferOES: FnPtr<extern "C" fn(target: GLenum) -> GLboolean> = FnPtr { f: super::failing::UnmapBufferOES, is_loaded: false };
    pub static mut UnmapNamedBufferEXT: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean> = FnPtr { f: super::failing::UnmapNamedBufferEXT, is_loaded: false };
    pub static mut UnmapObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint) -> c_void> = FnPtr { f: super::failing::UnmapObjectBufferATI, is_loaded: false };
    pub static mut UnmapTexture2DINTEL: FnPtr<extern "C" fn(texture: GLuint, level: GLint) -> c_void> = FnPtr { f: super::failing::UnmapTexture2DINTEL, is_loaded: false };
    pub static mut UpdateObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *GLvoid, preserve: GLenum) -> c_void> = FnPtr { f: super::failing::UpdateObjectBufferATI, is_loaded: false };
    pub static mut UseProgram: FnPtr<extern "C" fn(program: GLuint) -> c_void> = FnPtr { f: super::failing::UseProgram, is_loaded: false };
    pub static mut UseProgramObjectARB: FnPtr<extern "C" fn(programObj: GLhandleARB) -> c_void> = FnPtr { f: super::failing::UseProgramObjectARB, is_loaded: false };
    pub static mut UseProgramStages: FnPtr<extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void> = FnPtr { f: super::failing::UseProgramStages, is_loaded: false };
    pub static mut UseProgramStagesEXT: FnPtr<extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void> = FnPtr { f: super::failing::UseProgramStagesEXT, is_loaded: false };
    pub static mut UseShaderProgramEXT: FnPtr<extern "C" fn(type_: GLenum, program: GLuint) -> c_void> = FnPtr { f: super::failing::UseShaderProgramEXT, is_loaded: false };
    pub static mut VDPAUFiniNV: FnPtr<extern "C" fn() -> c_void> = FnPtr { f: super::failing::VDPAUFiniNV, is_loaded: false };
    pub static mut VDPAUGetSurfaceivNV: FnPtr<extern "C" fn(surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void> = FnPtr { f: super::failing::VDPAUGetSurfaceivNV, is_loaded: false };
    pub static mut VDPAUInitNV: FnPtr<extern "C" fn(vdpDevice: *GLvoid, getProcAddress: *GLvoid) -> c_void> = FnPtr { f: super::failing::VDPAUInitNV, is_loaded: false };
    pub static mut VDPAUIsSurfaceNV: FnPtr<extern "C" fn(surface: GLvdpauSurfaceNV) -> c_void> = FnPtr { f: super::failing::VDPAUIsSurfaceNV, is_loaded: false };
    pub static mut VDPAUMapSurfacesNV: FnPtr<extern "C" fn(numSurfaces: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void> = FnPtr { f: super::failing::VDPAUMapSurfacesNV, is_loaded: false };
    pub static mut VDPAURegisterOutputSurfaceNV: FnPtr<extern "C" fn(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV> = FnPtr { f: super::failing::VDPAURegisterOutputSurfaceNV, is_loaded: false };
    pub static mut VDPAURegisterVideoSurfaceNV: FnPtr<extern "C" fn(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV> = FnPtr { f: super::failing::VDPAURegisterVideoSurfaceNV, is_loaded: false };
    pub static mut VDPAUSurfaceAccessNV: FnPtr<extern "C" fn(surface: GLvdpauSurfaceNV, access: GLenum) -> c_void> = FnPtr { f: super::failing::VDPAUSurfaceAccessNV, is_loaded: false };
    pub static mut VDPAUUnmapSurfacesNV: FnPtr<extern "C" fn(numSurface: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void> = FnPtr { f: super::failing::VDPAUUnmapSurfacesNV, is_loaded: false };
    pub static mut VDPAUUnregisterSurfaceNV: FnPtr<extern "C" fn(surface: GLvdpauSurfaceNV) -> c_void> = FnPtr { f: super::failing::VDPAUUnregisterSurfaceNV, is_loaded: false };
    pub static mut ValidateProgram: FnPtr<extern "C" fn(program: GLuint) -> c_void> = FnPtr { f: super::failing::ValidateProgram, is_loaded: false };
    pub static mut ValidateProgramARB: FnPtr<extern "C" fn(programObj: GLhandleARB) -> c_void> = FnPtr { f: super::failing::ValidateProgramARB, is_loaded: false };
    pub static mut ValidateProgramPipeline: FnPtr<extern "C" fn(pipeline: GLuint) -> c_void> = FnPtr { f: super::failing::ValidateProgramPipeline, is_loaded: false };
    pub static mut ValidateProgramPipelineEXT: FnPtr<extern "C" fn(pipeline: GLuint) -> c_void> = FnPtr { f: super::failing::ValidateProgramPipelineEXT, is_loaded: false };
    pub static mut VariantArrayObjectATI: FnPtr<extern "C" fn(id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void> = FnPtr { f: super::failing::VariantArrayObjectATI, is_loaded: false };
    pub static mut VariantPointerEXT: FnPtr<extern "C" fn(id: GLuint, type_: GLenum, stride: GLuint, addr: *GLvoid) -> c_void> = FnPtr { f: super::failing::VariantPointerEXT, is_loaded: false };
    pub static mut VariantbvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLbyte) -> c_void> = FnPtr { f: super::failing::VariantbvEXT, is_loaded: false };
    pub static mut VariantdvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLdouble) -> c_void> = FnPtr { f: super::failing::VariantdvEXT, is_loaded: false };
    pub static mut VariantfvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLfloat) -> c_void> = FnPtr { f: super::failing::VariantfvEXT, is_loaded: false };
    pub static mut VariantivEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLint) -> c_void> = FnPtr { f: super::failing::VariantivEXT, is_loaded: false };
    pub static mut VariantsvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLshort) -> c_void> = FnPtr { f: super::failing::VariantsvEXT, is_loaded: false };
    pub static mut VariantubvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLubyte) -> c_void> = FnPtr { f: super::failing::VariantubvEXT, is_loaded: false };
    pub static mut VariantuivEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLuint) -> c_void> = FnPtr { f: super::failing::VariantuivEXT, is_loaded: false };
    pub static mut VariantusvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLushort) -> c_void> = FnPtr { f: super::failing::VariantusvEXT, is_loaded: false };
    pub static mut Vertex2bOES: FnPtr<extern "C" fn(x: GLbyte) -> c_void> = FnPtr { f: super::failing::Vertex2bOES, is_loaded: false };
    pub static mut Vertex2bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::Vertex2bvOES, is_loaded: false };
    pub static mut Vertex2d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::Vertex2d, is_loaded: false };
    pub static mut Vertex2dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::Vertex2dv, is_loaded: false };
    pub static mut Vertex2f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::Vertex2f, is_loaded: false };
    pub static mut Vertex2fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Vertex2fv, is_loaded: false };
    pub static mut Vertex2hNV: FnPtr<extern "C" fn(x: GLhalfNV, y: GLhalfNV) -> c_void> = FnPtr { f: super::failing::Vertex2hNV, is_loaded: false };
    pub static mut Vertex2hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::Vertex2hvNV, is_loaded: false };
    pub static mut Vertex2i: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void> = FnPtr { f: super::failing::Vertex2i, is_loaded: false };
    pub static mut Vertex2iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::Vertex2iv, is_loaded: false };
    pub static mut Vertex2s: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::Vertex2s, is_loaded: false };
    pub static mut Vertex2sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::Vertex2sv, is_loaded: false };
    pub static mut Vertex2xOES: FnPtr<extern "C" fn(x: GLfixed) -> c_void> = FnPtr { f: super::failing::Vertex2xOES, is_loaded: false };
    pub static mut Vertex2xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::Vertex2xvOES, is_loaded: false };
    pub static mut Vertex3bOES: FnPtr<extern "C" fn(x: GLbyte, y: GLbyte) -> c_void> = FnPtr { f: super::failing::Vertex3bOES, is_loaded: false };
    pub static mut Vertex3bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::Vertex3bvOES, is_loaded: false };
    pub static mut Vertex3d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::Vertex3d, is_loaded: false };
    pub static mut Vertex3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::Vertex3dv, is_loaded: false };
    pub static mut Vertex3f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::Vertex3f, is_loaded: false };
    pub static mut Vertex3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Vertex3fv, is_loaded: false };
    pub static mut Vertex3hNV: FnPtr<extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void> = FnPtr { f: super::failing::Vertex3hNV, is_loaded: false };
    pub static mut Vertex3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::Vertex3hvNV, is_loaded: false };
    pub static mut Vertex3i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void> = FnPtr { f: super::failing::Vertex3i, is_loaded: false };
    pub static mut Vertex3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::Vertex3iv, is_loaded: false };
    pub static mut Vertex3s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::Vertex3s, is_loaded: false };
    pub static mut Vertex3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::Vertex3sv, is_loaded: false };
    pub static mut Vertex3xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed) -> c_void> = FnPtr { f: super::failing::Vertex3xOES, is_loaded: false };
    pub static mut Vertex3xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::Vertex3xvOES, is_loaded: false };
    pub static mut Vertex4bOES: FnPtr<extern "C" fn(x: GLbyte, y: GLbyte, z: GLbyte) -> c_void> = FnPtr { f: super::failing::Vertex4bOES, is_loaded: false };
    pub static mut Vertex4bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void> = FnPtr { f: super::failing::Vertex4bvOES, is_loaded: false };
    pub static mut Vertex4d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::Vertex4d, is_loaded: false };
    pub static mut Vertex4dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::Vertex4dv, is_loaded: false };
    pub static mut Vertex4f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::Vertex4f, is_loaded: false };
    pub static mut Vertex4fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::Vertex4fv, is_loaded: false };
    pub static mut Vertex4hNV: FnPtr<extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void> = FnPtr { f: super::failing::Vertex4hNV, is_loaded: false };
    pub static mut Vertex4hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::Vertex4hvNV, is_loaded: false };
    pub static mut Vertex4i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::Vertex4i, is_loaded: false };
    pub static mut Vertex4iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::Vertex4iv, is_loaded: false };
    pub static mut Vertex4s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void> = FnPtr { f: super::failing::Vertex4s, is_loaded: false };
    pub static mut Vertex4sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::Vertex4sv, is_loaded: false };
    pub static mut Vertex4xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void> = FnPtr { f: super::failing::Vertex4xOES, is_loaded: false };
    pub static mut Vertex4xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void> = FnPtr { f: super::failing::Vertex4xvOES, is_loaded: false };
    pub static mut VertexArrayBindVertexBufferEXT: FnPtr<extern "C" fn(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::VertexArrayBindVertexBufferEXT, is_loaded: false };
    pub static mut VertexArrayColorOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayColorOffsetEXT, is_loaded: false };
    pub static mut VertexArrayEdgeFlagOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayEdgeFlagOffsetEXT, is_loaded: false };
    pub static mut VertexArrayFogCoordOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayFogCoordOffsetEXT, is_loaded: false };
    pub static mut VertexArrayIndexOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayIndexOffsetEXT, is_loaded: false };
    pub static mut VertexArrayMultiTexCoordOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayMultiTexCoordOffsetEXT, is_loaded: false };
    pub static mut VertexArrayNormalOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayNormalOffsetEXT, is_loaded: false };
    pub static mut VertexArrayParameteriAPPLE: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::VertexArrayParameteriAPPLE, is_loaded: false };
    pub static mut VertexArrayRangeAPPLE: FnPtr<extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexArrayRangeAPPLE, is_loaded: false };
    pub static mut VertexArrayRangeNV: FnPtr<extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexArrayRangeNV, is_loaded: false };
    pub static mut VertexArraySecondaryColorOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArraySecondaryColorOffsetEXT, is_loaded: false };
    pub static mut VertexArrayTexCoordOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayTexCoordOffsetEXT, is_loaded: false };
    pub static mut VertexArrayVertexAttribBindingEXT: FnPtr<extern "C" fn(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexAttribBindingEXT, is_loaded: false };
    pub static mut VertexArrayVertexAttribFormatEXT: FnPtr<extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexAttribFormatEXT, is_loaded: false };
    pub static mut VertexArrayVertexAttribIFormatEXT: FnPtr<extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexAttribIFormatEXT, is_loaded: false };
    pub static mut VertexArrayVertexAttribIOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexAttribIOffsetEXT, is_loaded: false };
    pub static mut VertexArrayVertexAttribLFormatEXT: FnPtr<extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexAttribLFormatEXT, is_loaded: false };
    pub static mut VertexArrayVertexAttribLOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexAttribLOffsetEXT, is_loaded: false };
    pub static mut VertexArrayVertexAttribOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexAttribOffsetEXT, is_loaded: false };
    pub static mut VertexArrayVertexBindingDivisorEXT: FnPtr<extern "C" fn(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexBindingDivisorEXT, is_loaded: false };
    pub static mut VertexArrayVertexOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void> = FnPtr { f: super::failing::VertexArrayVertexOffsetEXT, is_loaded: false };
    pub static mut VertexAttrib1d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib1d, is_loaded: false };
    pub static mut VertexAttrib1dARB: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib1dARB, is_loaded: false };
    pub static mut VertexAttrib1dNV: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib1dNV, is_loaded: false };
    pub static mut VertexAttrib1dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib1dv, is_loaded: false };
    pub static mut VertexAttrib1dvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib1dvARB, is_loaded: false };
    pub static mut VertexAttrib1dvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib1dvNV, is_loaded: false };
    pub static mut VertexAttrib1f: FnPtr<extern "C" fn(index: GLuint, x: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib1f, is_loaded: false };
    pub static mut VertexAttrib1fARB: FnPtr<extern "C" fn(index: GLuint, x: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib1fARB, is_loaded: false };
    pub static mut VertexAttrib1fNV: FnPtr<extern "C" fn(index: GLuint, x: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib1fNV, is_loaded: false };
    pub static mut VertexAttrib1fv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib1fv, is_loaded: false };
    pub static mut VertexAttrib1fvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib1fvARB, is_loaded: false };
    pub static mut VertexAttrib1fvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib1fvNV, is_loaded: false };
    pub static mut VertexAttrib1hNV: FnPtr<extern "C" fn(index: GLuint, x: GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttrib1hNV, is_loaded: false };
    pub static mut VertexAttrib1hvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttrib1hvNV, is_loaded: false };
    pub static mut VertexAttrib1s: FnPtr<extern "C" fn(index: GLuint, x: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib1s, is_loaded: false };
    pub static mut VertexAttrib1sARB: FnPtr<extern "C" fn(index: GLuint, x: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib1sARB, is_loaded: false };
    pub static mut VertexAttrib1sNV: FnPtr<extern "C" fn(index: GLuint, x: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib1sNV, is_loaded: false };
    pub static mut VertexAttrib1sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib1sv, is_loaded: false };
    pub static mut VertexAttrib1svARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib1svARB, is_loaded: false };
    pub static mut VertexAttrib1svNV: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib1svNV, is_loaded: false };
    pub static mut VertexAttrib2d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib2d, is_loaded: false };
    pub static mut VertexAttrib2dARB: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib2dARB, is_loaded: false };
    pub static mut VertexAttrib2dNV: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib2dNV, is_loaded: false };
    pub static mut VertexAttrib2dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib2dv, is_loaded: false };
    pub static mut VertexAttrib2dvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib2dvARB, is_loaded: false };
    pub static mut VertexAttrib2dvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib2dvNV, is_loaded: false };
    pub static mut VertexAttrib2f: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib2f, is_loaded: false };
    pub static mut VertexAttrib2fARB: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib2fARB, is_loaded: false };
    pub static mut VertexAttrib2fNV: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib2fNV, is_loaded: false };
    pub static mut VertexAttrib2fv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib2fv, is_loaded: false };
    pub static mut VertexAttrib2fvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib2fvARB, is_loaded: false };
    pub static mut VertexAttrib2fvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib2fvNV, is_loaded: false };
    pub static mut VertexAttrib2hNV: FnPtr<extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttrib2hNV, is_loaded: false };
    pub static mut VertexAttrib2hvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttrib2hvNV, is_loaded: false };
    pub static mut VertexAttrib2s: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib2s, is_loaded: false };
    pub static mut VertexAttrib2sARB: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib2sARB, is_loaded: false };
    pub static mut VertexAttrib2sNV: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib2sNV, is_loaded: false };
    pub static mut VertexAttrib2sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib2sv, is_loaded: false };
    pub static mut VertexAttrib2svARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib2svARB, is_loaded: false };
    pub static mut VertexAttrib2svNV: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib2svNV, is_loaded: false };
    pub static mut VertexAttrib3d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib3d, is_loaded: false };
    pub static mut VertexAttrib3dARB: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib3dARB, is_loaded: false };
    pub static mut VertexAttrib3dNV: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib3dNV, is_loaded: false };
    pub static mut VertexAttrib3dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib3dv, is_loaded: false };
    pub static mut VertexAttrib3dvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib3dvARB, is_loaded: false };
    pub static mut VertexAttrib3dvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib3dvNV, is_loaded: false };
    pub static mut VertexAttrib3f: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib3f, is_loaded: false };
    pub static mut VertexAttrib3fARB: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib3fARB, is_loaded: false };
    pub static mut VertexAttrib3fNV: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib3fNV, is_loaded: false };
    pub static mut VertexAttrib3fv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib3fv, is_loaded: false };
    pub static mut VertexAttrib3fvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib3fvARB, is_loaded: false };
    pub static mut VertexAttrib3fvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib3fvNV, is_loaded: false };
    pub static mut VertexAttrib3hNV: FnPtr<extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttrib3hNV, is_loaded: false };
    pub static mut VertexAttrib3hvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttrib3hvNV, is_loaded: false };
    pub static mut VertexAttrib3s: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib3s, is_loaded: false };
    pub static mut VertexAttrib3sARB: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib3sARB, is_loaded: false };
    pub static mut VertexAttrib3sNV: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib3sNV, is_loaded: false };
    pub static mut VertexAttrib3sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib3sv, is_loaded: false };
    pub static mut VertexAttrib3svARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib3svARB, is_loaded: false };
    pub static mut VertexAttrib3svNV: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib3svNV, is_loaded: false };
    pub static mut VertexAttrib4Nbv: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4Nbv, is_loaded: false };
    pub static mut VertexAttrib4NbvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4NbvARB, is_loaded: false };
    pub static mut VertexAttrib4Niv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttrib4Niv, is_loaded: false };
    pub static mut VertexAttrib4NivARB: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttrib4NivARB, is_loaded: false };
    pub static mut VertexAttrib4Nsv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4Nsv, is_loaded: false };
    pub static mut VertexAttrib4NsvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4NsvARB, is_loaded: false };
    pub static mut VertexAttrib4Nub: FnPtr<extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4Nub, is_loaded: false };
    pub static mut VertexAttrib4NubARB: FnPtr<extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4NubARB, is_loaded: false };
    pub static mut VertexAttrib4Nubv: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4Nubv, is_loaded: false };
    pub static mut VertexAttrib4NubvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4NubvARB, is_loaded: false };
    pub static mut VertexAttrib4Nuiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttrib4Nuiv, is_loaded: false };
    pub static mut VertexAttrib4NuivARB: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttrib4NuivARB, is_loaded: false };
    pub static mut VertexAttrib4Nusv: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4Nusv, is_loaded: false };
    pub static mut VertexAttrib4NusvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4NusvARB, is_loaded: false };
    pub static mut VertexAttrib4bv: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4bv, is_loaded: false };
    pub static mut VertexAttrib4bvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4bvARB, is_loaded: false };
    pub static mut VertexAttrib4d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib4d, is_loaded: false };
    pub static mut VertexAttrib4dARB: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib4dARB, is_loaded: false };
    pub static mut VertexAttrib4dNV: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib4dNV, is_loaded: false };
    pub static mut VertexAttrib4dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib4dv, is_loaded: false };
    pub static mut VertexAttrib4dvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib4dvARB, is_loaded: false };
    pub static mut VertexAttrib4dvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttrib4dvNV, is_loaded: false };
    pub static mut VertexAttrib4f: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib4f, is_loaded: false };
    pub static mut VertexAttrib4fARB: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib4fARB, is_loaded: false };
    pub static mut VertexAttrib4fNV: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib4fNV, is_loaded: false };
    pub static mut VertexAttrib4fv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib4fv, is_loaded: false };
    pub static mut VertexAttrib4fvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib4fvARB, is_loaded: false };
    pub static mut VertexAttrib4fvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttrib4fvNV, is_loaded: false };
    pub static mut VertexAttrib4hNV: FnPtr<extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttrib4hNV, is_loaded: false };
    pub static mut VertexAttrib4hvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttrib4hvNV, is_loaded: false };
    pub static mut VertexAttrib4iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttrib4iv, is_loaded: false };
    pub static mut VertexAttrib4ivARB: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttrib4ivARB, is_loaded: false };
    pub static mut VertexAttrib4s: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4s, is_loaded: false };
    pub static mut VertexAttrib4sARB: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4sARB, is_loaded: false };
    pub static mut VertexAttrib4sNV: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4sNV, is_loaded: false };
    pub static mut VertexAttrib4sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4sv, is_loaded: false };
    pub static mut VertexAttrib4svARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4svARB, is_loaded: false };
    pub static mut VertexAttrib4svNV: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4svNV, is_loaded: false };
    pub static mut VertexAttrib4ubNV: FnPtr<extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4ubNV, is_loaded: false };
    pub static mut VertexAttrib4ubv: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4ubv, is_loaded: false };
    pub static mut VertexAttrib4ubvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4ubvARB, is_loaded: false };
    pub static mut VertexAttrib4ubvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttrib4ubvNV, is_loaded: false };
    pub static mut VertexAttrib4uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttrib4uiv, is_loaded: false };
    pub static mut VertexAttrib4uivARB: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttrib4uivARB, is_loaded: false };
    pub static mut VertexAttrib4usv: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4usv, is_loaded: false };
    pub static mut VertexAttrib4usvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void> = FnPtr { f: super::failing::VertexAttrib4usvARB, is_loaded: false };
    pub static mut VertexAttribArrayObjectATI: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribArrayObjectATI, is_loaded: false };
    pub static mut VertexAttribBinding: FnPtr<extern "C" fn(attribindex: GLuint, bindingindex: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribBinding, is_loaded: false };
    pub static mut VertexAttribDivisor: FnPtr<extern "C" fn(index: GLuint, divisor: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribDivisor, is_loaded: false };
    pub static mut VertexAttribDivisorANGLE: FnPtr<extern "C" fn(index: GLuint, divisor: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribDivisorANGLE, is_loaded: false };
    pub static mut VertexAttribDivisorARB: FnPtr<extern "C" fn(index: GLuint, divisor: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribDivisorARB, is_loaded: false };
    pub static mut VertexAttribDivisorNV: FnPtr<extern "C" fn(index: GLuint, divisor: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribDivisorNV, is_loaded: false };
    pub static mut VertexAttribFormat: FnPtr<extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribFormat, is_loaded: false };
    pub static mut VertexAttribFormatNV: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::VertexAttribFormatNV, is_loaded: false };
    pub static mut VertexAttribI1i: FnPtr<extern "C" fn(index: GLuint, x: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI1i, is_loaded: false };
    pub static mut VertexAttribI1iEXT: FnPtr<extern "C" fn(index: GLuint, x: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI1iEXT, is_loaded: false };
    pub static mut VertexAttribI1iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI1iv, is_loaded: false };
    pub static mut VertexAttribI1ivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI1ivEXT, is_loaded: false };
    pub static mut VertexAttribI1ui: FnPtr<extern "C" fn(index: GLuint, x: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI1ui, is_loaded: false };
    pub static mut VertexAttribI1uiEXT: FnPtr<extern "C" fn(index: GLuint, x: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI1uiEXT, is_loaded: false };
    pub static mut VertexAttribI1uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI1uiv, is_loaded: false };
    pub static mut VertexAttribI1uivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI1uivEXT, is_loaded: false };
    pub static mut VertexAttribI2i: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI2i, is_loaded: false };
    pub static mut VertexAttribI2iEXT: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI2iEXT, is_loaded: false };
    pub static mut VertexAttribI2iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI2iv, is_loaded: false };
    pub static mut VertexAttribI2ivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI2ivEXT, is_loaded: false };
    pub static mut VertexAttribI2ui: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI2ui, is_loaded: false };
    pub static mut VertexAttribI2uiEXT: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI2uiEXT, is_loaded: false };
    pub static mut VertexAttribI2uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI2uiv, is_loaded: false };
    pub static mut VertexAttribI2uivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI2uivEXT, is_loaded: false };
    pub static mut VertexAttribI3i: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI3i, is_loaded: false };
    pub static mut VertexAttribI3iEXT: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI3iEXT, is_loaded: false };
    pub static mut VertexAttribI3iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI3iv, is_loaded: false };
    pub static mut VertexAttribI3ivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI3ivEXT, is_loaded: false };
    pub static mut VertexAttribI3ui: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI3ui, is_loaded: false };
    pub static mut VertexAttribI3uiEXT: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI3uiEXT, is_loaded: false };
    pub static mut VertexAttribI3uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI3uiv, is_loaded: false };
    pub static mut VertexAttribI3uivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI3uivEXT, is_loaded: false };
    pub static mut VertexAttribI4bv: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void> = FnPtr { f: super::failing::VertexAttribI4bv, is_loaded: false };
    pub static mut VertexAttribI4bvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void> = FnPtr { f: super::failing::VertexAttribI4bvEXT, is_loaded: false };
    pub static mut VertexAttribI4i: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI4i, is_loaded: false };
    pub static mut VertexAttribI4iEXT: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI4iEXT, is_loaded: false };
    pub static mut VertexAttribI4iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI4iv, is_loaded: false };
    pub static mut VertexAttribI4ivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribI4ivEXT, is_loaded: false };
    pub static mut VertexAttribI4sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttribI4sv, is_loaded: false };
    pub static mut VertexAttribI4svEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttribI4svEXT, is_loaded: false };
    pub static mut VertexAttribI4ubv: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttribI4ubv, is_loaded: false };
    pub static mut VertexAttribI4ubvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttribI4ubvEXT, is_loaded: false };
    pub static mut VertexAttribI4ui: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI4ui, is_loaded: false };
    pub static mut VertexAttribI4uiEXT: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI4uiEXT, is_loaded: false };
    pub static mut VertexAttribI4uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI4uiv, is_loaded: false };
    pub static mut VertexAttribI4uivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribI4uivEXT, is_loaded: false };
    pub static mut VertexAttribI4usv: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void> = FnPtr { f: super::failing::VertexAttribI4usv, is_loaded: false };
    pub static mut VertexAttribI4usvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void> = FnPtr { f: super::failing::VertexAttribI4usvEXT, is_loaded: false };
    pub static mut VertexAttribIFormat: FnPtr<extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribIFormat, is_loaded: false };
    pub static mut VertexAttribIFormatNV: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::VertexAttribIFormatNV, is_loaded: false };
    pub static mut VertexAttribIPointer: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexAttribIPointer, is_loaded: false };
    pub static mut VertexAttribIPointerEXT: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexAttribIPointerEXT, is_loaded: false };
    pub static mut VertexAttribL1d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL1d, is_loaded: false };
    pub static mut VertexAttribL1dEXT: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL1dEXT, is_loaded: false };
    pub static mut VertexAttribL1dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL1dv, is_loaded: false };
    pub static mut VertexAttribL1dvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL1dvEXT, is_loaded: false };
    pub static mut VertexAttribL1i64NV: FnPtr<extern "C" fn(index: GLuint, x: GLint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL1i64NV, is_loaded: false };
    pub static mut VertexAttribL1i64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL1i64vNV, is_loaded: false };
    pub static mut VertexAttribL1ui64ARB: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL1ui64ARB, is_loaded: false };
    pub static mut VertexAttribL1ui64NV: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL1ui64NV, is_loaded: false };
    pub static mut VertexAttribL1ui64vARB: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL1ui64vARB, is_loaded: false };
    pub static mut VertexAttribL1ui64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL1ui64vNV, is_loaded: false };
    pub static mut VertexAttribL2d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL2d, is_loaded: false };
    pub static mut VertexAttribL2dEXT: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL2dEXT, is_loaded: false };
    pub static mut VertexAttribL2dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL2dv, is_loaded: false };
    pub static mut VertexAttribL2dvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL2dvEXT, is_loaded: false };
    pub static mut VertexAttribL2i64NV: FnPtr<extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL2i64NV, is_loaded: false };
    pub static mut VertexAttribL2i64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL2i64vNV, is_loaded: false };
    pub static mut VertexAttribL2ui64NV: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL2ui64NV, is_loaded: false };
    pub static mut VertexAttribL2ui64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL2ui64vNV, is_loaded: false };
    pub static mut VertexAttribL3d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL3d, is_loaded: false };
    pub static mut VertexAttribL3dEXT: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL3dEXT, is_loaded: false };
    pub static mut VertexAttribL3dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL3dv, is_loaded: false };
    pub static mut VertexAttribL3dvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL3dvEXT, is_loaded: false };
    pub static mut VertexAttribL3i64NV: FnPtr<extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL3i64NV, is_loaded: false };
    pub static mut VertexAttribL3i64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL3i64vNV, is_loaded: false };
    pub static mut VertexAttribL3ui64NV: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL3ui64NV, is_loaded: false };
    pub static mut VertexAttribL3ui64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL3ui64vNV, is_loaded: false };
    pub static mut VertexAttribL4d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL4d, is_loaded: false };
    pub static mut VertexAttribL4dEXT: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL4dEXT, is_loaded: false };
    pub static mut VertexAttribL4dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL4dv, is_loaded: false };
    pub static mut VertexAttribL4dvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribL4dvEXT, is_loaded: false };
    pub static mut VertexAttribL4i64NV: FnPtr<extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL4i64NV, is_loaded: false };
    pub static mut VertexAttribL4i64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL4i64vNV, is_loaded: false };
    pub static mut VertexAttribL4ui64NV: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL4ui64NV, is_loaded: false };
    pub static mut VertexAttribL4ui64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void> = FnPtr { f: super::failing::VertexAttribL4ui64vNV, is_loaded: false };
    pub static mut VertexAttribLFormat: FnPtr<extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribLFormat, is_loaded: false };
    pub static mut VertexAttribLFormatNV: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::VertexAttribLFormatNV, is_loaded: false };
    pub static mut VertexAttribLPointer: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexAttribLPointer, is_loaded: false };
    pub static mut VertexAttribLPointerEXT: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexAttribLPointerEXT, is_loaded: false };
    pub static mut VertexAttribP1ui: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribP1ui, is_loaded: false };
    pub static mut VertexAttribP1uiv: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribP1uiv, is_loaded: false };
    pub static mut VertexAttribP2ui: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribP2ui, is_loaded: false };
    pub static mut VertexAttribP2uiv: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribP2uiv, is_loaded: false };
    pub static mut VertexAttribP3ui: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribP3ui, is_loaded: false };
    pub static mut VertexAttribP3uiv: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribP3uiv, is_loaded: false };
    pub static mut VertexAttribP4ui: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribP4ui, is_loaded: false };
    pub static mut VertexAttribP4uiv: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexAttribP4uiv, is_loaded: false };
    pub static mut VertexAttribParameteriAMD: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::VertexAttribParameteriAMD, is_loaded: false };
    pub static mut VertexAttribPointer: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexAttribPointer, is_loaded: false };
    pub static mut VertexAttribPointerARB: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexAttribPointerARB, is_loaded: false };
    pub static mut VertexAttribPointerNV: FnPtr<extern "C" fn(index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexAttribPointerNV, is_loaded: false };
    pub static mut VertexAttribs1dvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribs1dvNV, is_loaded: false };
    pub static mut VertexAttribs1fvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttribs1fvNV, is_loaded: false };
    pub static mut VertexAttribs1hvNV: FnPtr<extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttribs1hvNV, is_loaded: false };
    pub static mut VertexAttribs1svNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttribs1svNV, is_loaded: false };
    pub static mut VertexAttribs2dvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribs2dvNV, is_loaded: false };
    pub static mut VertexAttribs2fvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttribs2fvNV, is_loaded: false };
    pub static mut VertexAttribs2hvNV: FnPtr<extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttribs2hvNV, is_loaded: false };
    pub static mut VertexAttribs2svNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttribs2svNV, is_loaded: false };
    pub static mut VertexAttribs3dvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribs3dvNV, is_loaded: false };
    pub static mut VertexAttribs3fvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttribs3fvNV, is_loaded: false };
    pub static mut VertexAttribs3hvNV: FnPtr<extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttribs3hvNV, is_loaded: false };
    pub static mut VertexAttribs3svNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttribs3svNV, is_loaded: false };
    pub static mut VertexAttribs4dvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexAttribs4dvNV, is_loaded: false };
    pub static mut VertexAttribs4fvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexAttribs4fvNV, is_loaded: false };
    pub static mut VertexAttribs4hvNV: FnPtr<extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexAttribs4hvNV, is_loaded: false };
    pub static mut VertexAttribs4svNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexAttribs4svNV, is_loaded: false };
    pub static mut VertexAttribs4ubvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLubyte) -> c_void> = FnPtr { f: super::failing::VertexAttribs4ubvNV, is_loaded: false };
    pub static mut VertexBindingDivisor: FnPtr<extern "C" fn(bindingindex: GLuint, divisor: GLuint) -> c_void> = FnPtr { f: super::failing::VertexBindingDivisor, is_loaded: false };
    pub static mut VertexBlendARB: FnPtr<extern "C" fn(count: GLint) -> c_void> = FnPtr { f: super::failing::VertexBlendARB, is_loaded: false };
    pub static mut VertexBlendEnvfATI: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexBlendEnvfATI, is_loaded: false };
    pub static mut VertexBlendEnviATI: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void> = FnPtr { f: super::failing::VertexBlendEnviATI, is_loaded: false };
    pub static mut VertexFormatNV: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void> = FnPtr { f: super::failing::VertexFormatNV, is_loaded: false };
    pub static mut VertexP2ui: FnPtr<extern "C" fn(type_: GLenum, value: GLuint) -> c_void> = FnPtr { f: super::failing::VertexP2ui, is_loaded: false };
    pub static mut VertexP2uiv: FnPtr<extern "C" fn(type_: GLenum, value: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexP2uiv, is_loaded: false };
    pub static mut VertexP3ui: FnPtr<extern "C" fn(type_: GLenum, value: GLuint) -> c_void> = FnPtr { f: super::failing::VertexP3ui, is_loaded: false };
    pub static mut VertexP3uiv: FnPtr<extern "C" fn(type_: GLenum, value: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexP3uiv, is_loaded: false };
    pub static mut VertexP4ui: FnPtr<extern "C" fn(type_: GLenum, value: GLuint) -> c_void> = FnPtr { f: super::failing::VertexP4ui, is_loaded: false };
    pub static mut VertexP4uiv: FnPtr<extern "C" fn(type_: GLenum, value: *GLuint) -> c_void> = FnPtr { f: super::failing::VertexP4uiv, is_loaded: false };
    pub static mut VertexPointer: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexPointer, is_loaded: false };
    pub static mut VertexPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexPointerEXT, is_loaded: false };
    pub static mut VertexPointerListIBM: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void> = FnPtr { f: super::failing::VertexPointerListIBM, is_loaded: false };
    pub static mut VertexPointervINTEL: FnPtr<extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void> = FnPtr { f: super::failing::VertexPointervINTEL, is_loaded: false };
    pub static mut VertexStream1dATI: FnPtr<extern "C" fn(stream: GLenum, x: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexStream1dATI, is_loaded: false };
    pub static mut VertexStream1dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexStream1dvATI, is_loaded: false };
    pub static mut VertexStream1fATI: FnPtr<extern "C" fn(stream: GLenum, x: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexStream1fATI, is_loaded: false };
    pub static mut VertexStream1fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexStream1fvATI, is_loaded: false };
    pub static mut VertexStream1iATI: FnPtr<extern "C" fn(stream: GLenum, x: GLint) -> c_void> = FnPtr { f: super::failing::VertexStream1iATI, is_loaded: false };
    pub static mut VertexStream1ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void> = FnPtr { f: super::failing::VertexStream1ivATI, is_loaded: false };
    pub static mut VertexStream1sATI: FnPtr<extern "C" fn(stream: GLenum, x: GLshort) -> c_void> = FnPtr { f: super::failing::VertexStream1sATI, is_loaded: false };
    pub static mut VertexStream1svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexStream1svATI, is_loaded: false };
    pub static mut VertexStream2dATI: FnPtr<extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexStream2dATI, is_loaded: false };
    pub static mut VertexStream2dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexStream2dvATI, is_loaded: false };
    pub static mut VertexStream2fATI: FnPtr<extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexStream2fATI, is_loaded: false };
    pub static mut VertexStream2fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexStream2fvATI, is_loaded: false };
    pub static mut VertexStream2iATI: FnPtr<extern "C" fn(stream: GLenum, x: GLint, y: GLint) -> c_void> = FnPtr { f: super::failing::VertexStream2iATI, is_loaded: false };
    pub static mut VertexStream2ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void> = FnPtr { f: super::failing::VertexStream2ivATI, is_loaded: false };
    pub static mut VertexStream2sATI: FnPtr<extern "C" fn(stream: GLenum, x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::VertexStream2sATI, is_loaded: false };
    pub static mut VertexStream2svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexStream2svATI, is_loaded: false };
    pub static mut VertexStream3dATI: FnPtr<extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexStream3dATI, is_loaded: false };
    pub static mut VertexStream3dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexStream3dvATI, is_loaded: false };
    pub static mut VertexStream3fATI: FnPtr<extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexStream3fATI, is_loaded: false };
    pub static mut VertexStream3fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexStream3fvATI, is_loaded: false };
    pub static mut VertexStream3iATI: FnPtr<extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint) -> c_void> = FnPtr { f: super::failing::VertexStream3iATI, is_loaded: false };
    pub static mut VertexStream3ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void> = FnPtr { f: super::failing::VertexStream3ivATI, is_loaded: false };
    pub static mut VertexStream3sATI: FnPtr<extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::VertexStream3sATI, is_loaded: false };
    pub static mut VertexStream3svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexStream3svATI, is_loaded: false };
    pub static mut VertexStream4dATI: FnPtr<extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::VertexStream4dATI, is_loaded: false };
    pub static mut VertexStream4dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void> = FnPtr { f: super::failing::VertexStream4dvATI, is_loaded: false };
    pub static mut VertexStream4fATI: FnPtr<extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexStream4fATI, is_loaded: false };
    pub static mut VertexStream4fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexStream4fvATI, is_loaded: false };
    pub static mut VertexStream4iATI: FnPtr<extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::VertexStream4iATI, is_loaded: false };
    pub static mut VertexStream4ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void> = FnPtr { f: super::failing::VertexStream4ivATI, is_loaded: false };
    pub static mut VertexStream4sATI: FnPtr<extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void> = FnPtr { f: super::failing::VertexStream4sATI, is_loaded: false };
    pub static mut VertexStream4svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void> = FnPtr { f: super::failing::VertexStream4svATI, is_loaded: false };
    pub static mut VertexWeightPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::VertexWeightPointerEXT, is_loaded: false };
    pub static mut VertexWeightfEXT: FnPtr<extern "C" fn(weight: GLfloat) -> c_void> = FnPtr { f: super::failing::VertexWeightfEXT, is_loaded: false };
    pub static mut VertexWeightfvEXT: FnPtr<extern "C" fn(weight: *GLfloat) -> c_void> = FnPtr { f: super::failing::VertexWeightfvEXT, is_loaded: false };
    pub static mut VertexWeighthNV: FnPtr<extern "C" fn(weight: GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexWeighthNV, is_loaded: false };
    pub static mut VertexWeighthvNV: FnPtr<extern "C" fn(weight: *GLhalfNV) -> c_void> = FnPtr { f: super::failing::VertexWeighthvNV, is_loaded: false };
    pub static mut VideoCaptureNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) -> GLenum> = FnPtr { f: super::failing::VideoCaptureNV, is_loaded: false };
    pub static mut VideoCaptureStreamParameterdvNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void> = FnPtr { f: super::failing::VideoCaptureStreamParameterdvNV, is_loaded: false };
    pub static mut VideoCaptureStreamParameterfvNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void> = FnPtr { f: super::failing::VideoCaptureStreamParameterfvNV, is_loaded: false };
    pub static mut VideoCaptureStreamParameterivNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void> = FnPtr { f: super::failing::VideoCaptureStreamParameterivNV, is_loaded: false };
    pub static mut Viewport: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void> = FnPtr { f: super::failing::Viewport, is_loaded: false };
    pub static mut ViewportArrayv: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ViewportArrayv, is_loaded: false };
    pub static mut ViewportIndexedf: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> c_void> = FnPtr { f: super::failing::ViewportIndexedf, is_loaded: false };
    pub static mut ViewportIndexedfv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void> = FnPtr { f: super::failing::ViewportIndexedfv, is_loaded: false };
    pub static mut WaitSync: FnPtr<extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void> = FnPtr { f: super::failing::WaitSync, is_loaded: false };
    pub static mut WaitSyncAPPLE: FnPtr<extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void> = FnPtr { f: super::failing::WaitSyncAPPLE, is_loaded: false };
    pub static mut WeightPathsNV: FnPtr<extern "C" fn(resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) -> c_void> = FnPtr { f: super::failing::WeightPathsNV, is_loaded: false };
    pub static mut WeightPointerARB: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::WeightPointerARB, is_loaded: false };
    pub static mut WeightPointerOES: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void> = FnPtr { f: super::failing::WeightPointerOES, is_loaded: false };
    pub static mut WeightbvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLbyte) -> c_void> = FnPtr { f: super::failing::WeightbvARB, is_loaded: false };
    pub static mut WeightdvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLdouble) -> c_void> = FnPtr { f: super::failing::WeightdvARB, is_loaded: false };
    pub static mut WeightfvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLfloat) -> c_void> = FnPtr { f: super::failing::WeightfvARB, is_loaded: false };
    pub static mut WeightivARB: FnPtr<extern "C" fn(size: GLint, weights: *GLint) -> c_void> = FnPtr { f: super::failing::WeightivARB, is_loaded: false };
    pub static mut WeightsvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLshort) -> c_void> = FnPtr { f: super::failing::WeightsvARB, is_loaded: false };
    pub static mut WeightubvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLubyte) -> c_void> = FnPtr { f: super::failing::WeightubvARB, is_loaded: false };
    pub static mut WeightuivARB: FnPtr<extern "C" fn(size: GLint, weights: *GLuint) -> c_void> = FnPtr { f: super::failing::WeightuivARB, is_loaded: false };
    pub static mut WeightusvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLushort) -> c_void> = FnPtr { f: super::failing::WeightusvARB, is_loaded: false };
    pub static mut WindowPos2d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos2d, is_loaded: false };
    pub static mut WindowPos2dARB: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos2dARB, is_loaded: false };
    pub static mut WindowPos2dMESA: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos2dMESA, is_loaded: false };
    pub static mut WindowPos2dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos2dv, is_loaded: false };
    pub static mut WindowPos2dvARB: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos2dvARB, is_loaded: false };
    pub static mut WindowPos2dvMESA: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos2dvMESA, is_loaded: false };
    pub static mut WindowPos2f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos2f, is_loaded: false };
    pub static mut WindowPos2fARB: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos2fARB, is_loaded: false };
    pub static mut WindowPos2fMESA: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos2fMESA, is_loaded: false };
    pub static mut WindowPos2fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos2fv, is_loaded: false };
    pub static mut WindowPos2fvARB: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos2fvARB, is_loaded: false };
    pub static mut WindowPos2fvMESA: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos2fvMESA, is_loaded: false };
    pub static mut WindowPos2i: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void> = FnPtr { f: super::failing::WindowPos2i, is_loaded: false };
    pub static mut WindowPos2iARB: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void> = FnPtr { f: super::failing::WindowPos2iARB, is_loaded: false };
    pub static mut WindowPos2iMESA: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void> = FnPtr { f: super::failing::WindowPos2iMESA, is_loaded: false };
    pub static mut WindowPos2iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::WindowPos2iv, is_loaded: false };
    pub static mut WindowPos2ivARB: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::WindowPos2ivARB, is_loaded: false };
    pub static mut WindowPos2ivMESA: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::WindowPos2ivMESA, is_loaded: false };
    pub static mut WindowPos2s: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos2s, is_loaded: false };
    pub static mut WindowPos2sARB: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos2sARB, is_loaded: false };
    pub static mut WindowPos2sMESA: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos2sMESA, is_loaded: false };
    pub static mut WindowPos2sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos2sv, is_loaded: false };
    pub static mut WindowPos2svARB: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos2svARB, is_loaded: false };
    pub static mut WindowPos2svMESA: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos2svMESA, is_loaded: false };
    pub static mut WindowPos3d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos3d, is_loaded: false };
    pub static mut WindowPos3dARB: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos3dARB, is_loaded: false };
    pub static mut WindowPos3dMESA: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos3dMESA, is_loaded: false };
    pub static mut WindowPos3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos3dv, is_loaded: false };
    pub static mut WindowPos3dvARB: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos3dvARB, is_loaded: false };
    pub static mut WindowPos3dvMESA: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos3dvMESA, is_loaded: false };
    pub static mut WindowPos3f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos3f, is_loaded: false };
    pub static mut WindowPos3fARB: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos3fARB, is_loaded: false };
    pub static mut WindowPos3fMESA: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos3fMESA, is_loaded: false };
    pub static mut WindowPos3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos3fv, is_loaded: false };
    pub static mut WindowPos3fvARB: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos3fvARB, is_loaded: false };
    pub static mut WindowPos3fvMESA: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos3fvMESA, is_loaded: false };
    pub static mut WindowPos3i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void> = FnPtr { f: super::failing::WindowPos3i, is_loaded: false };
    pub static mut WindowPos3iARB: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void> = FnPtr { f: super::failing::WindowPos3iARB, is_loaded: false };
    pub static mut WindowPos3iMESA: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void> = FnPtr { f: super::failing::WindowPos3iMESA, is_loaded: false };
    pub static mut WindowPos3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::WindowPos3iv, is_loaded: false };
    pub static mut WindowPos3ivARB: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::WindowPos3ivARB, is_loaded: false };
    pub static mut WindowPos3ivMESA: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::WindowPos3ivMESA, is_loaded: false };
    pub static mut WindowPos3s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos3s, is_loaded: false };
    pub static mut WindowPos3sARB: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos3sARB, is_loaded: false };
    pub static mut WindowPos3sMESA: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos3sMESA, is_loaded: false };
    pub static mut WindowPos3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos3sv, is_loaded: false };
    pub static mut WindowPos3svARB: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos3svARB, is_loaded: false };
    pub static mut WindowPos3svMESA: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos3svMESA, is_loaded: false };
    pub static mut WindowPos4dMESA: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos4dMESA, is_loaded: false };
    pub static mut WindowPos4dvMESA: FnPtr<extern "C" fn(v: *GLdouble) -> c_void> = FnPtr { f: super::failing::WindowPos4dvMESA, is_loaded: false };
    pub static mut WindowPos4fMESA: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos4fMESA, is_loaded: false };
    pub static mut WindowPos4fvMESA: FnPtr<extern "C" fn(v: *GLfloat) -> c_void> = FnPtr { f: super::failing::WindowPos4fvMESA, is_loaded: false };
    pub static mut WindowPos4iMESA: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void> = FnPtr { f: super::failing::WindowPos4iMESA, is_loaded: false };
    pub static mut WindowPos4ivMESA: FnPtr<extern "C" fn(v: *GLint) -> c_void> = FnPtr { f: super::failing::WindowPos4ivMESA, is_loaded: false };
    pub static mut WindowPos4sMESA: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos4sMESA, is_loaded: false };
    pub static mut WindowPos4svMESA: FnPtr<extern "C" fn(v: *GLshort) -> c_void> = FnPtr { f: super::failing::WindowPos4svMESA, is_loaded: false };
    pub static mut WriteMaskEXT: FnPtr<extern "C" fn(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void> = FnPtr { f: super::failing::WriteMaskEXT, is_loaded: false };
}

pub mod Accum { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Accum.is_loaded } } }
pub mod AccumxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AccumxOES.is_loaded } } }
pub mod ActiveProgramEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ActiveProgramEXT.is_loaded } } }
pub mod ActiveShaderProgram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ActiveShaderProgram.is_loaded } } }
pub mod ActiveShaderProgramEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ActiveShaderProgramEXT.is_loaded } } }
pub mod ActiveStencilFaceEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ActiveStencilFaceEXT.is_loaded } } }
pub mod ActiveTexture { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ActiveTexture.is_loaded } } }
pub mod ActiveTextureARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ActiveTextureARB.is_loaded } } }
pub mod ActiveVaryingNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ActiveVaryingNV.is_loaded } } }
pub mod AlphaFragmentOp1ATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AlphaFragmentOp1ATI.is_loaded } } }
pub mod AlphaFragmentOp2ATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AlphaFragmentOp2ATI.is_loaded } } }
pub mod AlphaFragmentOp3ATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AlphaFragmentOp3ATI.is_loaded } } }
pub mod AlphaFunc { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AlphaFunc.is_loaded } } }
pub mod AlphaFuncQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AlphaFuncQCOM.is_loaded } } }
pub mod AlphaFuncx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AlphaFuncx.is_loaded } } }
pub mod AlphaFuncxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AlphaFuncxOES.is_loaded } } }
pub mod ApplyTextureEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ApplyTextureEXT.is_loaded } } }
pub mod AreProgramsResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AreProgramsResidentNV.is_loaded } } }
pub mod AreTexturesResident { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AreTexturesResident.is_loaded } } }
pub mod AreTexturesResidentEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AreTexturesResidentEXT.is_loaded } } }
pub mod ArrayElement { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ArrayElement.is_loaded } } }
pub mod ArrayElementEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ArrayElementEXT.is_loaded } } }
pub mod ArrayObjectATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ArrayObjectATI.is_loaded } } }
pub mod AsyncMarkerSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AsyncMarkerSGIX.is_loaded } } }
pub mod AttachObjectARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AttachObjectARB.is_loaded } } }
pub mod AttachShader { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::AttachShader.is_loaded } } }
pub mod Begin { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Begin.is_loaded } } }
pub mod BeginConditionalRender { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginConditionalRender.is_loaded } } }
pub mod BeginConditionalRenderNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginConditionalRenderNV.is_loaded } } }
pub mod BeginConditionalRenderNVX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginConditionalRenderNVX.is_loaded } } }
pub mod BeginFragmentShaderATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginFragmentShaderATI.is_loaded } } }
pub mod BeginOcclusionQueryNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginOcclusionQueryNV.is_loaded } } }
pub mod BeginPerfMonitorAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginPerfMonitorAMD.is_loaded } } }
pub mod BeginQuery { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginQuery.is_loaded } } }
pub mod BeginQueryARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginQueryARB.is_loaded } } }
pub mod BeginQueryEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginQueryEXT.is_loaded } } }
pub mod BeginQueryIndexed { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginQueryIndexed.is_loaded } } }
pub mod BeginTransformFeedback { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginTransformFeedback.is_loaded } } }
pub mod BeginTransformFeedbackEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginTransformFeedbackEXT.is_loaded } } }
pub mod BeginTransformFeedbackNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginTransformFeedbackNV.is_loaded } } }
pub mod BeginVertexShaderEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginVertexShaderEXT.is_loaded } } }
pub mod BeginVideoCaptureNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BeginVideoCaptureNV.is_loaded } } }
pub mod BindAttribLocation { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindAttribLocation.is_loaded } } }
pub mod BindAttribLocationARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindAttribLocationARB.is_loaded } } }
pub mod BindBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBuffer.is_loaded } } }
pub mod BindBufferARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferARB.is_loaded } } }
pub mod BindBufferBase { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferBase.is_loaded } } }
pub mod BindBufferBaseEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferBaseEXT.is_loaded } } }
pub mod BindBufferBaseNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferBaseNV.is_loaded } } }
pub mod BindBufferOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferOffsetEXT.is_loaded } } }
pub mod BindBufferOffsetNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferOffsetNV.is_loaded } } }
pub mod BindBufferRange { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferRange.is_loaded } } }
pub mod BindBufferRangeEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferRangeEXT.is_loaded } } }
pub mod BindBufferRangeNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBufferRangeNV.is_loaded } } }
pub mod BindBuffersBase { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBuffersBase.is_loaded } } }
pub mod BindBuffersRange { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindBuffersRange.is_loaded } } }
pub mod BindFragDataLocation { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindFragDataLocation.is_loaded } } }
pub mod BindFragDataLocationEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindFragDataLocationEXT.is_loaded } } }
pub mod BindFragDataLocationIndexed { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindFragDataLocationIndexed.is_loaded } } }
pub mod BindFragmentShaderATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindFragmentShaderATI.is_loaded } } }
pub mod BindFramebuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindFramebuffer.is_loaded } } }
pub mod BindFramebufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindFramebufferEXT.is_loaded } } }
pub mod BindFramebufferOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindFramebufferOES.is_loaded } } }
pub mod BindImageTexture { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindImageTexture.is_loaded } } }
pub mod BindImageTextureEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindImageTextureEXT.is_loaded } } }
pub mod BindImageTextures { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindImageTextures.is_loaded } } }
pub mod BindLightParameterEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindLightParameterEXT.is_loaded } } }
pub mod BindMaterialParameterEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindMaterialParameterEXT.is_loaded } } }
pub mod BindMultiTextureEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindMultiTextureEXT.is_loaded } } }
pub mod BindParameterEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindParameterEXT.is_loaded } } }
pub mod BindProgramARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindProgramARB.is_loaded } } }
pub mod BindProgramNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindProgramNV.is_loaded } } }
pub mod BindProgramPipeline { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindProgramPipeline.is_loaded } } }
pub mod BindProgramPipelineEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindProgramPipelineEXT.is_loaded } } }
pub mod BindRenderbuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindRenderbuffer.is_loaded } } }
pub mod BindRenderbufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindRenderbufferEXT.is_loaded } } }
pub mod BindRenderbufferOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindRenderbufferOES.is_loaded } } }
pub mod BindSampler { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindSampler.is_loaded } } }
pub mod BindSamplers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindSamplers.is_loaded } } }
pub mod BindTexGenParameterEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindTexGenParameterEXT.is_loaded } } }
pub mod BindTexture { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindTexture.is_loaded } } }
pub mod BindTextureEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindTextureEXT.is_loaded } } }
pub mod BindTextureUnitParameterEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindTextureUnitParameterEXT.is_loaded } } }
pub mod BindTextures { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindTextures.is_loaded } } }
pub mod BindTransformFeedback { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindTransformFeedback.is_loaded } } }
pub mod BindTransformFeedbackNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindTransformFeedbackNV.is_loaded } } }
pub mod BindVertexArray { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindVertexArray.is_loaded } } }
pub mod BindVertexArrayAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindVertexArrayAPPLE.is_loaded } } }
pub mod BindVertexArrayOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindVertexArrayOES.is_loaded } } }
pub mod BindVertexBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindVertexBuffer.is_loaded } } }
pub mod BindVertexBuffers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindVertexBuffers.is_loaded } } }
pub mod BindVertexShaderEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindVertexShaderEXT.is_loaded } } }
pub mod BindVideoCaptureStreamBufferNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindVideoCaptureStreamBufferNV.is_loaded } } }
pub mod BindVideoCaptureStreamTextureNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BindVideoCaptureStreamTextureNV.is_loaded } } }
pub mod Binormal3bEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3bEXT.is_loaded } } }
pub mod Binormal3bvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3bvEXT.is_loaded } } }
pub mod Binormal3dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3dEXT.is_loaded } } }
pub mod Binormal3dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3dvEXT.is_loaded } } }
pub mod Binormal3fEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3fEXT.is_loaded } } }
pub mod Binormal3fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3fvEXT.is_loaded } } }
pub mod Binormal3iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3iEXT.is_loaded } } }
pub mod Binormal3ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3ivEXT.is_loaded } } }
pub mod Binormal3sEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3sEXT.is_loaded } } }
pub mod Binormal3svEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Binormal3svEXT.is_loaded } } }
pub mod BinormalPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BinormalPointerEXT.is_loaded } } }
pub mod Bitmap { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Bitmap.is_loaded } } }
pub mod BitmapxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BitmapxOES.is_loaded } } }
pub mod BlendColor { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendColor.is_loaded } } }
pub mod BlendColorEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendColorEXT.is_loaded } } }
pub mod BlendColorxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendColorxOES.is_loaded } } }
pub mod BlendEquation { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquation.is_loaded } } }
pub mod BlendEquationEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationEXT.is_loaded } } }
pub mod BlendEquationIndexedAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationIndexedAMD.is_loaded } } }
pub mod BlendEquationOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationOES.is_loaded } } }
pub mod BlendEquationSeparate { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationSeparate.is_loaded } } }
pub mod BlendEquationSeparateEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationSeparateEXT.is_loaded } } }
pub mod BlendEquationSeparateIndexedAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationSeparateIndexedAMD.is_loaded } } }
pub mod BlendEquationSeparateOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationSeparateOES.is_loaded } } }
pub mod BlendEquationSeparatei { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationSeparatei.is_loaded } } }
pub mod BlendEquationSeparateiARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationSeparateiARB.is_loaded } } }
pub mod BlendEquationi { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationi.is_loaded } } }
pub mod BlendEquationiARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendEquationiARB.is_loaded } } }
pub mod BlendFunc { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFunc.is_loaded } } }
pub mod BlendFuncIndexedAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFuncIndexedAMD.is_loaded } } }
pub mod BlendFuncSeparate { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFuncSeparate.is_loaded } } }
pub mod BlendFuncSeparateEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFuncSeparateEXT.is_loaded } } }
pub mod BlendFuncSeparateINGR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFuncSeparateINGR.is_loaded } } }
pub mod BlendFuncSeparateIndexedAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFuncSeparateIndexedAMD.is_loaded } } }
pub mod BlendFuncSeparateOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFuncSeparateOES.is_loaded } } }
pub mod BlendFuncSeparatei { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFuncSeparatei.is_loaded } } }
pub mod BlendFuncSeparateiARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFuncSeparateiARB.is_loaded } } }
pub mod BlendFunci { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFunci.is_loaded } } }
pub mod BlendFunciARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendFunciARB.is_loaded } } }
pub mod BlendParameteriNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendParameteriNV.is_loaded } } }
pub mod BlendBarrierNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlendBarrierNV.is_loaded } } }
pub mod BlitFramebuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlitFramebuffer.is_loaded } } }
pub mod BlitFramebufferANGLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlitFramebufferANGLE.is_loaded } } }
pub mod BlitFramebufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlitFramebufferEXT.is_loaded } } }
pub mod BlitFramebufferNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BlitFramebufferNV.is_loaded } } }
pub mod BufferAddressRangeNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BufferAddressRangeNV.is_loaded } } }
pub mod BufferData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BufferData.is_loaded } } }
pub mod BufferDataARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BufferDataARB.is_loaded } } }
pub mod BufferParameteriAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BufferParameteriAPPLE.is_loaded } } }
pub mod BufferStorage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BufferStorage.is_loaded } } }
pub mod BufferSubData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BufferSubData.is_loaded } } }
pub mod BufferSubDataARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::BufferSubDataARB.is_loaded } } }
pub mod CallList { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CallList.is_loaded } } }
pub mod CallLists { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CallLists.is_loaded } } }
pub mod CheckFramebufferStatus { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CheckFramebufferStatus.is_loaded } } }
pub mod CheckFramebufferStatusEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CheckFramebufferStatusEXT.is_loaded } } }
pub mod CheckFramebufferStatusOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CheckFramebufferStatusOES.is_loaded } } }
pub mod CheckNamedFramebufferStatusEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CheckNamedFramebufferStatusEXT.is_loaded } } }
pub mod ClampColor { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClampColor.is_loaded } } }
pub mod ClampColorARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClampColorARB.is_loaded } } }
pub mod Clear { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Clear.is_loaded } } }
pub mod ClearAccum { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearAccum.is_loaded } } }
pub mod ClearAccumxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearAccumxOES.is_loaded } } }
pub mod ClearBufferData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearBufferData.is_loaded } } }
pub mod ClearBufferSubData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearBufferSubData.is_loaded } } }
pub mod ClearBufferfi { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearBufferfi.is_loaded } } }
pub mod ClearBufferfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearBufferfv.is_loaded } } }
pub mod ClearBufferiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearBufferiv.is_loaded } } }
pub mod ClearBufferuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearBufferuiv.is_loaded } } }
pub mod ClearColor { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearColor.is_loaded } } }
pub mod ClearColorIiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearColorIiEXT.is_loaded } } }
pub mod ClearColorIuiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearColorIuiEXT.is_loaded } } }
pub mod ClearColorx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearColorx.is_loaded } } }
pub mod ClearColorxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearColorxOES.is_loaded } } }
pub mod ClearDepth { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearDepth.is_loaded } } }
pub mod ClearDepthdNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearDepthdNV.is_loaded } } }
pub mod ClearDepthf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearDepthf.is_loaded } } }
pub mod ClearDepthfOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearDepthfOES.is_loaded } } }
pub mod ClearDepthx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearDepthx.is_loaded } } }
pub mod ClearDepthxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearDepthxOES.is_loaded } } }
pub mod ClearIndex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearIndex.is_loaded } } }
pub mod ClearNamedBufferDataEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearNamedBufferDataEXT.is_loaded } } }
pub mod ClearNamedBufferSubDataEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearNamedBufferSubDataEXT.is_loaded } } }
pub mod ClearStencil { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearStencil.is_loaded } } }
pub mod ClearTexImage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearTexImage.is_loaded } } }
pub mod ClearTexSubImage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClearTexSubImage.is_loaded } } }
pub mod ClientActiveTexture { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClientActiveTexture.is_loaded } } }
pub mod ClientActiveTextureARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClientActiveTextureARB.is_loaded } } }
pub mod ClientActiveVertexStreamATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClientActiveVertexStreamATI.is_loaded } } }
pub mod ClientAttribDefaultEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClientAttribDefaultEXT.is_loaded } } }
pub mod ClientWaitSync { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClientWaitSync.is_loaded } } }
pub mod ClientWaitSyncAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClientWaitSyncAPPLE.is_loaded } } }
pub mod ClipControlARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClipControlARB.is_loaded } } }
pub mod ClipPlane { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClipPlane.is_loaded } } }
pub mod ClipPlanef { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClipPlanef.is_loaded } } }
pub mod ClipPlanefIMG { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClipPlanefIMG.is_loaded } } }
pub mod ClipPlanefOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClipPlanefOES.is_loaded } } }
pub mod ClipPlanex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClipPlanex.is_loaded } } }
pub mod ClipPlanexIMG { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClipPlanexIMG.is_loaded } } }
pub mod ClipPlanexOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ClipPlanexOES.is_loaded } } }
pub mod Color3b { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3b.is_loaded } } }
pub mod Color3bv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3bv.is_loaded } } }
pub mod Color3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3d.is_loaded } } }
pub mod Color3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3dv.is_loaded } } }
pub mod Color3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3f.is_loaded } } }
pub mod Color3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3fVertex3fSUN.is_loaded } } }
pub mod Color3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3fVertex3fvSUN.is_loaded } } }
pub mod Color3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3fv.is_loaded } } }
pub mod Color3hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3hNV.is_loaded } } }
pub mod Color3hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3hvNV.is_loaded } } }
pub mod Color3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3i.is_loaded } } }
pub mod Color3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3iv.is_loaded } } }
pub mod Color3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3s.is_loaded } } }
pub mod Color3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3sv.is_loaded } } }
pub mod Color3ub { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3ub.is_loaded } } }
pub mod Color3ubv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3ubv.is_loaded } } }
pub mod Color3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3ui.is_loaded } } }
pub mod Color3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3uiv.is_loaded } } }
pub mod Color3us { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3us.is_loaded } } }
pub mod Color3usv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3usv.is_loaded } } }
pub mod Color3xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3xOES.is_loaded } } }
pub mod Color3xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color3xvOES.is_loaded } } }
pub mod Color4b { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4b.is_loaded } } }
pub mod Color4bv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4bv.is_loaded } } }
pub mod Color4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4d.is_loaded } } }
pub mod Color4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4dv.is_loaded } } }
pub mod Color4f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4f.is_loaded } } }
pub mod Color4fNormal3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4fNormal3fVertex3fSUN.is_loaded } } }
pub mod Color4fNormal3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4fNormal3fVertex3fvSUN.is_loaded } } }
pub mod Color4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4fv.is_loaded } } }
pub mod Color4hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4hNV.is_loaded } } }
pub mod Color4hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4hvNV.is_loaded } } }
pub mod Color4i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4i.is_loaded } } }
pub mod Color4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4iv.is_loaded } } }
pub mod Color4s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4s.is_loaded } } }
pub mod Color4sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4sv.is_loaded } } }
pub mod Color4ub { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4ub.is_loaded } } }
pub mod Color4ubVertex2fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4ubVertex2fSUN.is_loaded } } }
pub mod Color4ubVertex2fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4ubVertex2fvSUN.is_loaded } } }
pub mod Color4ubVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4ubVertex3fSUN.is_loaded } } }
pub mod Color4ubVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4ubVertex3fvSUN.is_loaded } } }
pub mod Color4ubv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4ubv.is_loaded } } }
pub mod Color4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4ui.is_loaded } } }
pub mod Color4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4uiv.is_loaded } } }
pub mod Color4us { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4us.is_loaded } } }
pub mod Color4usv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4usv.is_loaded } } }
pub mod Color4x { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4x.is_loaded } } }
pub mod Color4xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4xOES.is_loaded } } }
pub mod Color4xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Color4xvOES.is_loaded } } }
pub mod ColorFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorFormatNV.is_loaded } } }
pub mod ColorFragmentOp1ATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorFragmentOp1ATI.is_loaded } } }
pub mod ColorFragmentOp2ATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorFragmentOp2ATI.is_loaded } } }
pub mod ColorFragmentOp3ATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorFragmentOp3ATI.is_loaded } } }
pub mod ColorMask { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorMask.is_loaded } } }
pub mod ColorMaskIndexedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorMaskIndexedEXT.is_loaded } } }
pub mod ColorMaski { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorMaski.is_loaded } } }
pub mod ColorMaterial { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorMaterial.is_loaded } } }
pub mod ColorP3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorP3ui.is_loaded } } }
pub mod ColorP3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorP3uiv.is_loaded } } }
pub mod ColorP4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorP4ui.is_loaded } } }
pub mod ColorP4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorP4uiv.is_loaded } } }
pub mod ColorPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorPointer.is_loaded } } }
pub mod ColorPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorPointerEXT.is_loaded } } }
pub mod ColorPointerListIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorPointerListIBM.is_loaded } } }
pub mod ColorPointervINTEL { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorPointervINTEL.is_loaded } } }
pub mod ColorSubTable { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorSubTable.is_loaded } } }
pub mod ColorSubTableEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorSubTableEXT.is_loaded } } }
pub mod ColorTable { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorTable.is_loaded } } }
pub mod ColorTableEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorTableEXT.is_loaded } } }
pub mod ColorTableParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorTableParameterfv.is_loaded } } }
pub mod ColorTableParameterfvSGI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorTableParameterfvSGI.is_loaded } } }
pub mod ColorTableParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorTableParameteriv.is_loaded } } }
pub mod ColorTableParameterivSGI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorTableParameterivSGI.is_loaded } } }
pub mod ColorTableSGI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ColorTableSGI.is_loaded } } }
pub mod CombinerInputNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CombinerInputNV.is_loaded } } }
pub mod CombinerOutputNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CombinerOutputNV.is_loaded } } }
pub mod CombinerParameterfNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CombinerParameterfNV.is_loaded } } }
pub mod CombinerParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CombinerParameterfvNV.is_loaded } } }
pub mod CombinerParameteriNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CombinerParameteriNV.is_loaded } } }
pub mod CombinerParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CombinerParameterivNV.is_loaded } } }
pub mod CombinerStageParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CombinerStageParameterfvNV.is_loaded } } }
pub mod CompileShader { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompileShader.is_loaded } } }
pub mod CompileShaderARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompileShaderARB.is_loaded } } }
pub mod CompileShaderIncludeARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompileShaderIncludeARB.is_loaded } } }
pub mod CompressedMultiTexImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedMultiTexImage1DEXT.is_loaded } } }
pub mod CompressedMultiTexImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedMultiTexImage2DEXT.is_loaded } } }
pub mod CompressedMultiTexImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedMultiTexImage3DEXT.is_loaded } } }
pub mod CompressedMultiTexSubImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedMultiTexSubImage1DEXT.is_loaded } } }
pub mod CompressedMultiTexSubImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedMultiTexSubImage2DEXT.is_loaded } } }
pub mod CompressedMultiTexSubImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedMultiTexSubImage3DEXT.is_loaded } } }
pub mod CompressedTexImage1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexImage1D.is_loaded } } }
pub mod CompressedTexImage1DARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexImage1DARB.is_loaded } } }
pub mod CompressedTexImage2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexImage2D.is_loaded } } }
pub mod CompressedTexImage2DARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexImage2DARB.is_loaded } } }
pub mod CompressedTexImage3D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexImage3D.is_loaded } } }
pub mod CompressedTexImage3DARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexImage3DARB.is_loaded } } }
pub mod CompressedTexImage3DOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexImage3DOES.is_loaded } } }
pub mod CompressedTexSubImage1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexSubImage1D.is_loaded } } }
pub mod CompressedTexSubImage1DARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexSubImage1DARB.is_loaded } } }
pub mod CompressedTexSubImage2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexSubImage2D.is_loaded } } }
pub mod CompressedTexSubImage2DARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexSubImage2DARB.is_loaded } } }
pub mod CompressedTexSubImage3D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexSubImage3D.is_loaded } } }
pub mod CompressedTexSubImage3DARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexSubImage3DARB.is_loaded } } }
pub mod CompressedTexSubImage3DOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTexSubImage3DOES.is_loaded } } }
pub mod CompressedTextureImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTextureImage1DEXT.is_loaded } } }
pub mod CompressedTextureImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTextureImage2DEXT.is_loaded } } }
pub mod CompressedTextureImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTextureImage3DEXT.is_loaded } } }
pub mod CompressedTextureSubImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTextureSubImage1DEXT.is_loaded } } }
pub mod CompressedTextureSubImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTextureSubImage2DEXT.is_loaded } } }
pub mod CompressedTextureSubImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CompressedTextureSubImage3DEXT.is_loaded } } }
pub mod ConvolutionFilter1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionFilter1D.is_loaded } } }
pub mod ConvolutionFilter1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionFilter1DEXT.is_loaded } } }
pub mod ConvolutionFilter2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionFilter2D.is_loaded } } }
pub mod ConvolutionFilter2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionFilter2DEXT.is_loaded } } }
pub mod ConvolutionParameterf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameterf.is_loaded } } }
pub mod ConvolutionParameterfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameterfEXT.is_loaded } } }
pub mod ConvolutionParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameterfv.is_loaded } } }
pub mod ConvolutionParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameterfvEXT.is_loaded } } }
pub mod ConvolutionParameteri { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameteri.is_loaded } } }
pub mod ConvolutionParameteriEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameteriEXT.is_loaded } } }
pub mod ConvolutionParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameteriv.is_loaded } } }
pub mod ConvolutionParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameterivEXT.is_loaded } } }
pub mod ConvolutionParameterxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameterxOES.is_loaded } } }
pub mod ConvolutionParameterxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ConvolutionParameterxvOES.is_loaded } } }
pub mod CopyBufferSubData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyBufferSubData.is_loaded } } }
pub mod CopyColorSubTable { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyColorSubTable.is_loaded } } }
pub mod CopyColorSubTableEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyColorSubTableEXT.is_loaded } } }
pub mod CopyColorTable { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyColorTable.is_loaded } } }
pub mod CopyColorTableSGI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyColorTableSGI.is_loaded } } }
pub mod CopyConvolutionFilter1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyConvolutionFilter1D.is_loaded } } }
pub mod CopyConvolutionFilter1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyConvolutionFilter1DEXT.is_loaded } } }
pub mod CopyConvolutionFilter2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyConvolutionFilter2D.is_loaded } } }
pub mod CopyConvolutionFilter2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyConvolutionFilter2DEXT.is_loaded } } }
pub mod CopyImageSubData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyImageSubData.is_loaded } } }
pub mod CopyImageSubDataNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyImageSubDataNV.is_loaded } } }
pub mod CopyMultiTexImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyMultiTexImage1DEXT.is_loaded } } }
pub mod CopyMultiTexImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyMultiTexImage2DEXT.is_loaded } } }
pub mod CopyMultiTexSubImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyMultiTexSubImage1DEXT.is_loaded } } }
pub mod CopyMultiTexSubImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyMultiTexSubImage2DEXT.is_loaded } } }
pub mod CopyMultiTexSubImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyMultiTexSubImage3DEXT.is_loaded } } }
pub mod CopyPathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyPathNV.is_loaded } } }
pub mod CopyPixels { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyPixels.is_loaded } } }
pub mod CopyTexImage1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexImage1D.is_loaded } } }
pub mod CopyTexImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexImage1DEXT.is_loaded } } }
pub mod CopyTexImage2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexImage2D.is_loaded } } }
pub mod CopyTexImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexImage2DEXT.is_loaded } } }
pub mod CopyTexSubImage1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexSubImage1D.is_loaded } } }
pub mod CopyTexSubImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexSubImage1DEXT.is_loaded } } }
pub mod CopyTexSubImage2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexSubImage2D.is_loaded } } }
pub mod CopyTexSubImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexSubImage2DEXT.is_loaded } } }
pub mod CopyTexSubImage3D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexSubImage3D.is_loaded } } }
pub mod CopyTexSubImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexSubImage3DEXT.is_loaded } } }
pub mod CopyTexSubImage3DOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTexSubImage3DOES.is_loaded } } }
pub mod CopyTextureImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTextureImage1DEXT.is_loaded } } }
pub mod CopyTextureImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTextureImage2DEXT.is_loaded } } }
pub mod CopyTextureLevelsAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTextureLevelsAPPLE.is_loaded } } }
pub mod CopyTextureSubImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTextureSubImage1DEXT.is_loaded } } }
pub mod CopyTextureSubImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTextureSubImage2DEXT.is_loaded } } }
pub mod CopyTextureSubImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CopyTextureSubImage3DEXT.is_loaded } } }
pub mod CoverFillPathInstancedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CoverFillPathInstancedNV.is_loaded } } }
pub mod CoverFillPathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CoverFillPathNV.is_loaded } } }
pub mod CoverStrokePathInstancedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CoverStrokePathInstancedNV.is_loaded } } }
pub mod CoverStrokePathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CoverStrokePathNV.is_loaded } } }
pub mod CoverageMaskNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CoverageMaskNV.is_loaded } } }
pub mod CoverageOperationNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CoverageOperationNV.is_loaded } } }
pub mod CreateProgram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CreateProgram.is_loaded } } }
pub mod CreateProgramObjectARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CreateProgramObjectARB.is_loaded } } }
pub mod CreateShader { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CreateShader.is_loaded } } }
pub mod CreateShaderObjectARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CreateShaderObjectARB.is_loaded } } }
pub mod CreateShaderProgramEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CreateShaderProgramEXT.is_loaded } } }
pub mod CreateShaderProgramv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CreateShaderProgramv.is_loaded } } }
pub mod CreateShaderProgramvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CreateShaderProgramvEXT.is_loaded } } }
pub mod CreateSyncFromCLeventARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CreateSyncFromCLeventARB.is_loaded } } }
pub mod CullFace { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CullFace.is_loaded } } }
pub mod CullParameterdvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CullParameterdvEXT.is_loaded } } }
pub mod CullParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CullParameterfvEXT.is_loaded } } }
pub mod CurrentPaletteMatrixARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CurrentPaletteMatrixARB.is_loaded } } }
pub mod CurrentPaletteMatrixOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::CurrentPaletteMatrixOES.is_loaded } } }
pub mod DebugMessageCallback { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageCallback.is_loaded } } }
pub mod DebugMessageCallbackAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageCallbackAMD.is_loaded } } }
pub mod DebugMessageCallbackARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageCallbackARB.is_loaded } } }
pub mod DebugMessageCallbackKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageCallbackKHR.is_loaded } } }
pub mod DebugMessageControl { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageControl.is_loaded } } }
pub mod DebugMessageControlARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageControlARB.is_loaded } } }
pub mod DebugMessageControlKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageControlKHR.is_loaded } } }
pub mod DebugMessageEnableAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageEnableAMD.is_loaded } } }
pub mod DebugMessageInsert { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageInsert.is_loaded } } }
pub mod DebugMessageInsertAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageInsertAMD.is_loaded } } }
pub mod DebugMessageInsertARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageInsertARB.is_loaded } } }
pub mod DebugMessageInsertKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DebugMessageInsertKHR.is_loaded } } }
pub mod DeformSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeformSGIX.is_loaded } } }
pub mod DeformationMap3dSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeformationMap3dSGIX.is_loaded } } }
pub mod DeformationMap3fSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeformationMap3fSGIX.is_loaded } } }
pub mod DeleteAsyncMarkersSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteAsyncMarkersSGIX.is_loaded } } }
pub mod DeleteBuffers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteBuffers.is_loaded } } }
pub mod DeleteBuffersARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteBuffersARB.is_loaded } } }
pub mod DeleteFencesAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteFencesAPPLE.is_loaded } } }
pub mod DeleteFencesNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteFencesNV.is_loaded } } }
pub mod DeleteFragmentShaderATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteFragmentShaderATI.is_loaded } } }
pub mod DeleteFramebuffers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteFramebuffers.is_loaded } } }
pub mod DeleteFramebuffersEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteFramebuffersEXT.is_loaded } } }
pub mod DeleteFramebuffersOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteFramebuffersOES.is_loaded } } }
pub mod DeleteLists { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteLists.is_loaded } } }
pub mod DeleteNamedStringARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteNamedStringARB.is_loaded } } }
pub mod DeleteNamesAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteNamesAMD.is_loaded } } }
pub mod DeleteObjectARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteObjectARB.is_loaded } } }
pub mod DeleteOcclusionQueriesNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteOcclusionQueriesNV.is_loaded } } }
pub mod DeletePathsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeletePathsNV.is_loaded } } }
pub mod DeletePerfMonitorsAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeletePerfMonitorsAMD.is_loaded } } }
pub mod DeleteProgram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteProgram.is_loaded } } }
pub mod DeleteProgramPipelines { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteProgramPipelines.is_loaded } } }
pub mod DeleteProgramPipelinesEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteProgramPipelinesEXT.is_loaded } } }
pub mod DeleteProgramsARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteProgramsARB.is_loaded } } }
pub mod DeleteProgramsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteProgramsNV.is_loaded } } }
pub mod DeleteQueries { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteQueries.is_loaded } } }
pub mod DeleteQueriesARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteQueriesARB.is_loaded } } }
pub mod DeleteQueriesEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteQueriesEXT.is_loaded } } }
pub mod DeleteRenderbuffers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteRenderbuffers.is_loaded } } }
pub mod DeleteRenderbuffersEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteRenderbuffersEXT.is_loaded } } }
pub mod DeleteRenderbuffersOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteRenderbuffersOES.is_loaded } } }
pub mod DeleteSamplers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteSamplers.is_loaded } } }
pub mod DeleteShader { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteShader.is_loaded } } }
pub mod DeleteSync { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteSync.is_loaded } } }
pub mod DeleteSyncAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteSyncAPPLE.is_loaded } } }
pub mod DeleteTextures { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteTextures.is_loaded } } }
pub mod DeleteTexturesEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteTexturesEXT.is_loaded } } }
pub mod DeleteTransformFeedbacks { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteTransformFeedbacks.is_loaded } } }
pub mod DeleteTransformFeedbacksNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteTransformFeedbacksNV.is_loaded } } }
pub mod DeleteVertexArrays { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteVertexArrays.is_loaded } } }
pub mod DeleteVertexArraysAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteVertexArraysAPPLE.is_loaded } } }
pub mod DeleteVertexArraysOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteVertexArraysOES.is_loaded } } }
pub mod DeleteVertexShaderEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DeleteVertexShaderEXT.is_loaded } } }
pub mod DepthBoundsEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthBoundsEXT.is_loaded } } }
pub mod DepthBoundsdNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthBoundsdNV.is_loaded } } }
pub mod DepthFunc { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthFunc.is_loaded } } }
pub mod DepthMask { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthMask.is_loaded } } }
pub mod DepthRange { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthRange.is_loaded } } }
pub mod DepthRangeArrayv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthRangeArrayv.is_loaded } } }
pub mod DepthRangeIndexed { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthRangeIndexed.is_loaded } } }
pub mod DepthRangedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthRangedNV.is_loaded } } }
pub mod DepthRangef { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthRangef.is_loaded } } }
pub mod DepthRangefOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthRangefOES.is_loaded } } }
pub mod DepthRangex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthRangex.is_loaded } } }
pub mod DepthRangexOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DepthRangexOES.is_loaded } } }
pub mod DetachObjectARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DetachObjectARB.is_loaded } } }
pub mod DetachShader { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DetachShader.is_loaded } } }
pub mod DetailTexFuncSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DetailTexFuncSGIS.is_loaded } } }
pub mod Disable { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Disable.is_loaded } } }
pub mod DisableClientState { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableClientState.is_loaded } } }
pub mod DisableClientStateIndexedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableClientStateIndexedEXT.is_loaded } } }
pub mod DisableClientStateiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableClientStateiEXT.is_loaded } } }
pub mod DisableDriverControlQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableDriverControlQCOM.is_loaded } } }
pub mod DisableIndexedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableIndexedEXT.is_loaded } } }
pub mod DisableVariantClientStateEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableVariantClientStateEXT.is_loaded } } }
pub mod DisableVertexArrayAttribEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableVertexArrayAttribEXT.is_loaded } } }
pub mod DisableVertexArrayEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableVertexArrayEXT.is_loaded } } }
pub mod DisableVertexAttribAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableVertexAttribAPPLE.is_loaded } } }
pub mod DisableVertexAttribArray { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableVertexAttribArray.is_loaded } } }
pub mod DisableVertexAttribArrayARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DisableVertexAttribArrayARB.is_loaded } } }
pub mod Disablei { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Disablei.is_loaded } } }
pub mod DiscardFramebufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DiscardFramebufferEXT.is_loaded } } }
pub mod DispatchCompute { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DispatchCompute.is_loaded } } }
pub mod DispatchComputeGroupSizeARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DispatchComputeGroupSizeARB.is_loaded } } }
pub mod DispatchComputeIndirect { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DispatchComputeIndirect.is_loaded } } }
pub mod DrawArrays { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArrays.is_loaded } } }
pub mod DrawArraysEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArraysEXT.is_loaded } } }
pub mod DrawArraysIndirect { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArraysIndirect.is_loaded } } }
pub mod DrawArraysInstanced { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArraysInstanced.is_loaded } } }
pub mod DrawArraysInstancedANGLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArraysInstancedANGLE.is_loaded } } }
pub mod DrawArraysInstancedARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArraysInstancedARB.is_loaded } } }
pub mod DrawArraysInstancedBaseInstance { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArraysInstancedBaseInstance.is_loaded } } }
pub mod DrawArraysInstancedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArraysInstancedEXT.is_loaded } } }
pub mod DrawArraysInstancedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawArraysInstancedNV.is_loaded } } }
pub mod DrawBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawBuffer.is_loaded } } }
pub mod DrawBuffers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawBuffers.is_loaded } } }
pub mod DrawBuffersARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawBuffersARB.is_loaded } } }
pub mod DrawBuffersATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawBuffersATI.is_loaded } } }
pub mod DrawBuffersEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawBuffersEXT.is_loaded } } }
pub mod DrawBuffersIndexedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawBuffersIndexedEXT.is_loaded } } }
pub mod DrawBuffersNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawBuffersNV.is_loaded } } }
pub mod DrawElementArrayAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementArrayAPPLE.is_loaded } } }
pub mod DrawElementArrayATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementArrayATI.is_loaded } } }
pub mod DrawElements { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElements.is_loaded } } }
pub mod DrawElementsBaseVertex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsBaseVertex.is_loaded } } }
pub mod DrawElementsIndirect { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsIndirect.is_loaded } } }
pub mod DrawElementsInstanced { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsInstanced.is_loaded } } }
pub mod DrawElementsInstancedANGLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsInstancedANGLE.is_loaded } } }
pub mod DrawElementsInstancedARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsInstancedARB.is_loaded } } }
pub mod DrawElementsInstancedBaseInstance { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsInstancedBaseInstance.is_loaded } } }
pub mod DrawElementsInstancedBaseVertex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsInstancedBaseVertex.is_loaded } } }
pub mod DrawElementsInstancedBaseVertexBaseInstance { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsInstancedBaseVertexBaseInstance.is_loaded } } }
pub mod DrawElementsInstancedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsInstancedEXT.is_loaded } } }
pub mod DrawElementsInstancedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawElementsInstancedNV.is_loaded } } }
pub mod DrawMeshArraysSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawMeshArraysSUN.is_loaded } } }
pub mod DrawPixels { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawPixels.is_loaded } } }
pub mod DrawRangeElementArrayAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawRangeElementArrayAPPLE.is_loaded } } }
pub mod DrawRangeElementArrayATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawRangeElementArrayATI.is_loaded } } }
pub mod DrawRangeElements { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawRangeElements.is_loaded } } }
pub mod DrawRangeElementsBaseVertex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawRangeElementsBaseVertex.is_loaded } } }
pub mod DrawRangeElementsEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawRangeElementsEXT.is_loaded } } }
pub mod DrawTexfOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTexfOES.is_loaded } } }
pub mod DrawTexfvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTexfvOES.is_loaded } } }
pub mod DrawTexiOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTexiOES.is_loaded } } }
pub mod DrawTexivOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTexivOES.is_loaded } } }
pub mod DrawTexsOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTexsOES.is_loaded } } }
pub mod DrawTexsvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTexsvOES.is_loaded } } }
pub mod DrawTextureNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTextureNV.is_loaded } } }
pub mod DrawTexxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTexxOES.is_loaded } } }
pub mod DrawTexxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTexxvOES.is_loaded } } }
pub mod DrawTransformFeedback { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTransformFeedback.is_loaded } } }
pub mod DrawTransformFeedbackInstanced { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTransformFeedbackInstanced.is_loaded } } }
pub mod DrawTransformFeedbackNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTransformFeedbackNV.is_loaded } } }
pub mod DrawTransformFeedbackStream { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTransformFeedbackStream.is_loaded } } }
pub mod DrawTransformFeedbackStreamInstanced { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::DrawTransformFeedbackStreamInstanced.is_loaded } } }
pub mod EGLImageTargetRenderbufferStorageOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EGLImageTargetRenderbufferStorageOES.is_loaded } } }
pub mod EGLImageTargetTexture2DOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EGLImageTargetTexture2DOES.is_loaded } } }
pub mod EdgeFlag { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EdgeFlag.is_loaded } } }
pub mod EdgeFlagFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EdgeFlagFormatNV.is_loaded } } }
pub mod EdgeFlagPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EdgeFlagPointer.is_loaded } } }
pub mod EdgeFlagPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EdgeFlagPointerEXT.is_loaded } } }
pub mod EdgeFlagPointerListIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EdgeFlagPointerListIBM.is_loaded } } }
pub mod EdgeFlagv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EdgeFlagv.is_loaded } } }
pub mod ElementPointerAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ElementPointerAPPLE.is_loaded } } }
pub mod ElementPointerATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ElementPointerATI.is_loaded } } }
pub mod Enable { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Enable.is_loaded } } }
pub mod EnableClientState { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableClientState.is_loaded } } }
pub mod EnableClientStateIndexedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableClientStateIndexedEXT.is_loaded } } }
pub mod EnableClientStateiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableClientStateiEXT.is_loaded } } }
pub mod EnableDriverControlQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableDriverControlQCOM.is_loaded } } }
pub mod EnableIndexedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableIndexedEXT.is_loaded } } }
pub mod EnableVariantClientStateEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableVariantClientStateEXT.is_loaded } } }
pub mod EnableVertexArrayAttribEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableVertexArrayAttribEXT.is_loaded } } }
pub mod EnableVertexArrayEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableVertexArrayEXT.is_loaded } } }
pub mod EnableVertexAttribAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableVertexAttribAPPLE.is_loaded } } }
pub mod EnableVertexAttribArray { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableVertexAttribArray.is_loaded } } }
pub mod EnableVertexAttribArrayARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EnableVertexAttribArrayARB.is_loaded } } }
pub mod Enablei { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Enablei.is_loaded } } }
pub mod End { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::End.is_loaded } } }
pub mod EndConditionalRender { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndConditionalRender.is_loaded } } }
pub mod EndConditionalRenderNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndConditionalRenderNV.is_loaded } } }
pub mod EndConditionalRenderNVX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndConditionalRenderNVX.is_loaded } } }
pub mod EndFragmentShaderATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndFragmentShaderATI.is_loaded } } }
pub mod EndList { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndList.is_loaded } } }
pub mod EndOcclusionQueryNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndOcclusionQueryNV.is_loaded } } }
pub mod EndPerfMonitorAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndPerfMonitorAMD.is_loaded } } }
pub mod EndQuery { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndQuery.is_loaded } } }
pub mod EndQueryARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndQueryARB.is_loaded } } }
pub mod EndQueryEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndQueryEXT.is_loaded } } }
pub mod EndQueryIndexed { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndQueryIndexed.is_loaded } } }
pub mod EndTilingQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndTilingQCOM.is_loaded } } }
pub mod EndTransformFeedback { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndTransformFeedback.is_loaded } } }
pub mod EndTransformFeedbackEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndTransformFeedbackEXT.is_loaded } } }
pub mod EndTransformFeedbackNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndTransformFeedbackNV.is_loaded } } }
pub mod EndVertexShaderEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndVertexShaderEXT.is_loaded } } }
pub mod EndVideoCaptureNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EndVideoCaptureNV.is_loaded } } }
pub mod EvalCoord1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord1d.is_loaded } } }
pub mod EvalCoord1dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord1dv.is_loaded } } }
pub mod EvalCoord1f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord1f.is_loaded } } }
pub mod EvalCoord1fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord1fv.is_loaded } } }
pub mod EvalCoord1xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord1xOES.is_loaded } } }
pub mod EvalCoord1xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord1xvOES.is_loaded } } }
pub mod EvalCoord2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord2d.is_loaded } } }
pub mod EvalCoord2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord2dv.is_loaded } } }
pub mod EvalCoord2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord2f.is_loaded } } }
pub mod EvalCoord2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord2fv.is_loaded } } }
pub mod EvalCoord2xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord2xOES.is_loaded } } }
pub mod EvalCoord2xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalCoord2xvOES.is_loaded } } }
pub mod EvalMapsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalMapsNV.is_loaded } } }
pub mod EvalMesh1 { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalMesh1.is_loaded } } }
pub mod EvalMesh2 { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalMesh2.is_loaded } } }
pub mod EvalPoint1 { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalPoint1.is_loaded } } }
pub mod EvalPoint2 { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::EvalPoint2.is_loaded } } }
pub mod ExecuteProgramNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExecuteProgramNV.is_loaded } } }
pub mod ExtGetBufferPointervQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetBufferPointervQCOM.is_loaded } } }
pub mod ExtGetBuffersQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetBuffersQCOM.is_loaded } } }
pub mod ExtGetFramebuffersQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetFramebuffersQCOM.is_loaded } } }
pub mod ExtGetProgramBinarySourceQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetProgramBinarySourceQCOM.is_loaded } } }
pub mod ExtGetProgramsQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetProgramsQCOM.is_loaded } } }
pub mod ExtGetRenderbuffersQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetRenderbuffersQCOM.is_loaded } } }
pub mod ExtGetShadersQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetShadersQCOM.is_loaded } } }
pub mod ExtGetTexLevelParameterivQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetTexLevelParameterivQCOM.is_loaded } } }
pub mod ExtGetTexSubImageQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetTexSubImageQCOM.is_loaded } } }
pub mod ExtGetTexturesQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtGetTexturesQCOM.is_loaded } } }
pub mod ExtIsProgramBinaryQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtIsProgramBinaryQCOM.is_loaded } } }
pub mod ExtTexObjectStateOverrideiQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtTexObjectStateOverrideiQCOM.is_loaded } } }
pub mod ExtractComponentEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ExtractComponentEXT.is_loaded } } }
pub mod FeedbackBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FeedbackBuffer.is_loaded } } }
pub mod FeedbackBufferxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FeedbackBufferxOES.is_loaded } } }
pub mod FenceSync { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FenceSync.is_loaded } } }
pub mod FenceSyncAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FenceSyncAPPLE.is_loaded } } }
pub mod FinalCombinerInputNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FinalCombinerInputNV.is_loaded } } }
pub mod Finish { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Finish.is_loaded } } }
pub mod FinishAsyncSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FinishAsyncSGIX.is_loaded } } }
pub mod FinishFenceAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FinishFenceAPPLE.is_loaded } } }
pub mod FinishFenceNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FinishFenceNV.is_loaded } } }
pub mod FinishObjectAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FinishObjectAPPLE.is_loaded } } }
pub mod FinishTextureSUNX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FinishTextureSUNX.is_loaded } } }
pub mod Flush { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Flush.is_loaded } } }
pub mod FlushMappedBufferRange { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushMappedBufferRange.is_loaded } } }
pub mod FlushMappedBufferRangeAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushMappedBufferRangeAPPLE.is_loaded } } }
pub mod FlushMappedBufferRangeEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushMappedBufferRangeEXT.is_loaded } } }
pub mod FlushMappedNamedBufferRangeEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushMappedNamedBufferRangeEXT.is_loaded } } }
pub mod FlushPixelDataRangeNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushPixelDataRangeNV.is_loaded } } }
pub mod FlushRasterSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushRasterSGIX.is_loaded } } }
pub mod FlushStaticDataIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushStaticDataIBM.is_loaded } } }
pub mod FlushVertexArrayRangeAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushVertexArrayRangeAPPLE.is_loaded } } }
pub mod FlushVertexArrayRangeNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FlushVertexArrayRangeNV.is_loaded } } }
pub mod FogCoordFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordFormatNV.is_loaded } } }
pub mod FogCoordPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordPointer.is_loaded } } }
pub mod FogCoordPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordPointerEXT.is_loaded } } }
pub mod FogCoordPointerListIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordPointerListIBM.is_loaded } } }
pub mod FogCoordd { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordd.is_loaded } } }
pub mod FogCoorddEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoorddEXT.is_loaded } } }
pub mod FogCoorddv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoorddv.is_loaded } } }
pub mod FogCoorddvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoorddvEXT.is_loaded } } }
pub mod FogCoordf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordf.is_loaded } } }
pub mod FogCoordfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordfEXT.is_loaded } } }
pub mod FogCoordfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordfv.is_loaded } } }
pub mod FogCoordfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordfvEXT.is_loaded } } }
pub mod FogCoordhNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordhNV.is_loaded } } }
pub mod FogCoordhvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogCoordhvNV.is_loaded } } }
pub mod FogFuncSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogFuncSGIS.is_loaded } } }
pub mod Fogf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Fogf.is_loaded } } }
pub mod Fogfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Fogfv.is_loaded } } }
pub mod Fogi { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Fogi.is_loaded } } }
pub mod Fogiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Fogiv.is_loaded } } }
pub mod Fogx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Fogx.is_loaded } } }
pub mod FogxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogxOES.is_loaded } } }
pub mod Fogxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Fogxv.is_loaded } } }
pub mod FogxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FogxvOES.is_loaded } } }
pub mod FragmentColorMaterialSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentColorMaterialSGIX.is_loaded } } }
pub mod FragmentLightModelfSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentLightModelfSGIX.is_loaded } } }
pub mod FragmentLightModelfvSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentLightModelfvSGIX.is_loaded } } }
pub mod FragmentLightModeliSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentLightModeliSGIX.is_loaded } } }
pub mod FragmentLightModelivSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentLightModelivSGIX.is_loaded } } }
pub mod FragmentLightfSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentLightfSGIX.is_loaded } } }
pub mod FragmentLightfvSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentLightfvSGIX.is_loaded } } }
pub mod FragmentLightiSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentLightiSGIX.is_loaded } } }
pub mod FragmentLightivSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentLightivSGIX.is_loaded } } }
pub mod FragmentMaterialfSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentMaterialfSGIX.is_loaded } } }
pub mod FragmentMaterialfvSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentMaterialfvSGIX.is_loaded } } }
pub mod FragmentMaterialiSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentMaterialiSGIX.is_loaded } } }
pub mod FragmentMaterialivSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FragmentMaterialivSGIX.is_loaded } } }
pub mod FrameTerminatorGREMEDY { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FrameTerminatorGREMEDY.is_loaded } } }
pub mod FrameZoomSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FrameZoomSGIX.is_loaded } } }
pub mod FramebufferDrawBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferDrawBufferEXT.is_loaded } } }
pub mod FramebufferDrawBuffersEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferDrawBuffersEXT.is_loaded } } }
pub mod FramebufferParameteri { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferParameteri.is_loaded } } }
pub mod FramebufferReadBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferReadBufferEXT.is_loaded } } }
pub mod FramebufferRenderbuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferRenderbuffer.is_loaded } } }
pub mod FramebufferRenderbufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferRenderbufferEXT.is_loaded } } }
pub mod FramebufferRenderbufferOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferRenderbufferOES.is_loaded } } }
pub mod FramebufferTexture { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture.is_loaded } } }
pub mod FramebufferTexture1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture1D.is_loaded } } }
pub mod FramebufferTexture1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture1DEXT.is_loaded } } }
pub mod FramebufferTexture2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture2D.is_loaded } } }
pub mod FramebufferTexture2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture2DEXT.is_loaded } } }
pub mod FramebufferTexture2DMultisampleEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture2DMultisampleEXT.is_loaded } } }
pub mod FramebufferTexture2DMultisampleIMG { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture2DMultisampleIMG.is_loaded } } }
pub mod FramebufferTexture2DOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture2DOES.is_loaded } } }
pub mod FramebufferTexture3D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture3D.is_loaded } } }
pub mod FramebufferTexture3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture3DEXT.is_loaded } } }
pub mod FramebufferTexture3DOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTexture3DOES.is_loaded } } }
pub mod FramebufferTextureARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTextureARB.is_loaded } } }
pub mod FramebufferTextureEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTextureEXT.is_loaded } } }
pub mod FramebufferTextureFaceARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTextureFaceARB.is_loaded } } }
pub mod FramebufferTextureFaceEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTextureFaceEXT.is_loaded } } }
pub mod FramebufferTextureLayer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTextureLayer.is_loaded } } }
pub mod FramebufferTextureLayerARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTextureLayerARB.is_loaded } } }
pub mod FramebufferTextureLayerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FramebufferTextureLayerEXT.is_loaded } } }
pub mod FreeObjectBufferATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FreeObjectBufferATI.is_loaded } } }
pub mod FrontFace { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FrontFace.is_loaded } } }
pub mod Frustum { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Frustum.is_loaded } } }
pub mod Frustumf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Frustumf.is_loaded } } }
pub mod FrustumfOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FrustumfOES.is_loaded } } }
pub mod Frustumx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Frustumx.is_loaded } } }
pub mod FrustumxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::FrustumxOES.is_loaded } } }
pub mod GenAsyncMarkersSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenAsyncMarkersSGIX.is_loaded } } }
pub mod GenBuffers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenBuffers.is_loaded } } }
pub mod GenBuffersARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenBuffersARB.is_loaded } } }
pub mod GenFencesAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenFencesAPPLE.is_loaded } } }
pub mod GenFencesNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenFencesNV.is_loaded } } }
pub mod GenFragmentShadersATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenFragmentShadersATI.is_loaded } } }
pub mod GenFramebuffers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenFramebuffers.is_loaded } } }
pub mod GenFramebuffersEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenFramebuffersEXT.is_loaded } } }
pub mod GenFramebuffersOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenFramebuffersOES.is_loaded } } }
pub mod GenLists { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenLists.is_loaded } } }
pub mod GenNamesAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenNamesAMD.is_loaded } } }
pub mod GenOcclusionQueriesNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenOcclusionQueriesNV.is_loaded } } }
pub mod GenPathsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenPathsNV.is_loaded } } }
pub mod GenPerfMonitorsAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenPerfMonitorsAMD.is_loaded } } }
pub mod GenProgramPipelines { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenProgramPipelines.is_loaded } } }
pub mod GenProgramPipelinesEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenProgramPipelinesEXT.is_loaded } } }
pub mod GenProgramsARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenProgramsARB.is_loaded } } }
pub mod GenProgramsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenProgramsNV.is_loaded } } }
pub mod GenQueries { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenQueries.is_loaded } } }
pub mod GenQueriesARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenQueriesARB.is_loaded } } }
pub mod GenQueriesEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenQueriesEXT.is_loaded } } }
pub mod GenRenderbuffers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenRenderbuffers.is_loaded } } }
pub mod GenRenderbuffersEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenRenderbuffersEXT.is_loaded } } }
pub mod GenRenderbuffersOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenRenderbuffersOES.is_loaded } } }
pub mod GenSamplers { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenSamplers.is_loaded } } }
pub mod GenSymbolsEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenSymbolsEXT.is_loaded } } }
pub mod GenTextures { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenTextures.is_loaded } } }
pub mod GenTexturesEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenTexturesEXT.is_loaded } } }
pub mod GenTransformFeedbacks { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenTransformFeedbacks.is_loaded } } }
pub mod GenTransformFeedbacksNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenTransformFeedbacksNV.is_loaded } } }
pub mod GenVertexArrays { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenVertexArrays.is_loaded } } }
pub mod GenVertexArraysAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenVertexArraysAPPLE.is_loaded } } }
pub mod GenVertexArraysOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenVertexArraysOES.is_loaded } } }
pub mod GenVertexShadersEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenVertexShadersEXT.is_loaded } } }
pub mod GenerateMipmap { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenerateMipmap.is_loaded } } }
pub mod GenerateMipmapEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenerateMipmapEXT.is_loaded } } }
pub mod GenerateMipmapOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenerateMipmapOES.is_loaded } } }
pub mod GenerateMultiTexMipmapEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenerateMultiTexMipmapEXT.is_loaded } } }
pub mod GenerateTextureMipmapEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GenerateTextureMipmapEXT.is_loaded } } }
pub mod GetActiveAtomicCounterBufferiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveAtomicCounterBufferiv.is_loaded } } }
pub mod GetActiveAttrib { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveAttrib.is_loaded } } }
pub mod GetActiveAttribARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveAttribARB.is_loaded } } }
pub mod GetActiveSubroutineName { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveSubroutineName.is_loaded } } }
pub mod GetActiveSubroutineUniformName { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveSubroutineUniformName.is_loaded } } }
pub mod GetActiveSubroutineUniformiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveSubroutineUniformiv.is_loaded } } }
pub mod GetActiveUniform { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveUniform.is_loaded } } }
pub mod GetActiveUniformARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveUniformARB.is_loaded } } }
pub mod GetActiveUniformBlockName { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveUniformBlockName.is_loaded } } }
pub mod GetActiveUniformBlockiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveUniformBlockiv.is_loaded } } }
pub mod GetActiveUniformName { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveUniformName.is_loaded } } }
pub mod GetActiveUniformsiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveUniformsiv.is_loaded } } }
pub mod GetActiveVaryingNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetActiveVaryingNV.is_loaded } } }
pub mod GetArrayObjectfvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetArrayObjectfvATI.is_loaded } } }
pub mod GetArrayObjectivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetArrayObjectivATI.is_loaded } } }
pub mod GetAttachedObjectsARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetAttachedObjectsARB.is_loaded } } }
pub mod GetAttachedShaders { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetAttachedShaders.is_loaded } } }
pub mod GetAttribLocation { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetAttribLocation.is_loaded } } }
pub mod GetAttribLocationARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetAttribLocationARB.is_loaded } } }
pub mod GetBooleanIndexedvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBooleanIndexedvEXT.is_loaded } } }
pub mod GetBooleani_v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBooleani_v.is_loaded } } }
pub mod GetBooleanv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBooleanv.is_loaded } } }
pub mod GetBufferParameteri64v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferParameteri64v.is_loaded } } }
pub mod GetBufferParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferParameteriv.is_loaded } } }
pub mod GetBufferParameterivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferParameterivARB.is_loaded } } }
pub mod GetBufferParameterui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferParameterui64vNV.is_loaded } } }
pub mod GetBufferPointerv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferPointerv.is_loaded } } }
pub mod GetBufferPointervARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferPointervARB.is_loaded } } }
pub mod GetBufferPointervOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferPointervOES.is_loaded } } }
pub mod GetBufferSubData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferSubData.is_loaded } } }
pub mod GetBufferSubDataARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetBufferSubDataARB.is_loaded } } }
pub mod GetClipPlane { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetClipPlane.is_loaded } } }
pub mod GetClipPlanef { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetClipPlanef.is_loaded } } }
pub mod GetClipPlanefOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetClipPlanefOES.is_loaded } } }
pub mod GetClipPlanex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetClipPlanex.is_loaded } } }
pub mod GetClipPlanexOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetClipPlanexOES.is_loaded } } }
pub mod GetColorTable { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTable.is_loaded } } }
pub mod GetColorTableEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTableEXT.is_loaded } } }
pub mod GetColorTableParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTableParameterfv.is_loaded } } }
pub mod GetColorTableParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTableParameterfvEXT.is_loaded } } }
pub mod GetColorTableParameterfvSGI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTableParameterfvSGI.is_loaded } } }
pub mod GetColorTableParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTableParameteriv.is_loaded } } }
pub mod GetColorTableParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTableParameterivEXT.is_loaded } } }
pub mod GetColorTableParameterivSGI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTableParameterivSGI.is_loaded } } }
pub mod GetColorTableSGI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetColorTableSGI.is_loaded } } }
pub mod GetCombinerInputParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCombinerInputParameterfvNV.is_loaded } } }
pub mod GetCombinerInputParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCombinerInputParameterivNV.is_loaded } } }
pub mod GetCombinerOutputParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCombinerOutputParameterfvNV.is_loaded } } }
pub mod GetCombinerOutputParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCombinerOutputParameterivNV.is_loaded } } }
pub mod GetCombinerStageParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCombinerStageParameterfvNV.is_loaded } } }
pub mod GetCompressedMultiTexImageEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCompressedMultiTexImageEXT.is_loaded } } }
pub mod GetCompressedTexImage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCompressedTexImage.is_loaded } } }
pub mod GetCompressedTexImageARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCompressedTexImageARB.is_loaded } } }
pub mod GetCompressedTextureImageEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetCompressedTextureImageEXT.is_loaded } } }
pub mod GetConvolutionFilter { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetConvolutionFilter.is_loaded } } }
pub mod GetConvolutionFilterEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetConvolutionFilterEXT.is_loaded } } }
pub mod GetConvolutionParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetConvolutionParameterfv.is_loaded } } }
pub mod GetConvolutionParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetConvolutionParameterfvEXT.is_loaded } } }
pub mod GetConvolutionParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetConvolutionParameteriv.is_loaded } } }
pub mod GetConvolutionParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetConvolutionParameterivEXT.is_loaded } } }
pub mod GetConvolutionParameterxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetConvolutionParameterxvOES.is_loaded } } }
pub mod GetDebugMessageLog { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDebugMessageLog.is_loaded } } }
pub mod GetDebugMessageLogAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDebugMessageLogAMD.is_loaded } } }
pub mod GetDebugMessageLogARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDebugMessageLogARB.is_loaded } } }
pub mod GetDebugMessageLogKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDebugMessageLogKHR.is_loaded } } }
pub mod GetDetailTexFuncSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDetailTexFuncSGIS.is_loaded } } }
pub mod GetDoubleIndexedvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDoubleIndexedvEXT.is_loaded } } }
pub mod GetDoublei_v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDoublei_v.is_loaded } } }
pub mod GetDoublei_vEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDoublei_vEXT.is_loaded } } }
pub mod GetDoublev { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDoublev.is_loaded } } }
pub mod GetDriverControlStringQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDriverControlStringQCOM.is_loaded } } }
pub mod GetDriverControlsQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetDriverControlsQCOM.is_loaded } } }
pub mod GetError { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetError.is_loaded } } }
pub mod GetFenceivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFenceivNV.is_loaded } } }
pub mod GetFinalCombinerInputParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFinalCombinerInputParameterfvNV.is_loaded } } }
pub mod GetFinalCombinerInputParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFinalCombinerInputParameterivNV.is_loaded } } }
pub mod GetFixedv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFixedv.is_loaded } } }
pub mod GetFixedvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFixedvOES.is_loaded } } }
pub mod GetFloatIndexedvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFloatIndexedvEXT.is_loaded } } }
pub mod GetFloati_v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFloati_v.is_loaded } } }
pub mod GetFloati_vEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFloati_vEXT.is_loaded } } }
pub mod GetFloatv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFloatv.is_loaded } } }
pub mod GetFogFuncSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFogFuncSGIS.is_loaded } } }
pub mod GetFragDataIndex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFragDataIndex.is_loaded } } }
pub mod GetFragDataLocation { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFragDataLocation.is_loaded } } }
pub mod GetFragDataLocationEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFragDataLocationEXT.is_loaded } } }
pub mod GetFragmentLightfvSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFragmentLightfvSGIX.is_loaded } } }
pub mod GetFragmentLightivSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFragmentLightivSGIX.is_loaded } } }
pub mod GetFragmentMaterialfvSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFragmentMaterialfvSGIX.is_loaded } } }
pub mod GetFragmentMaterialivSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFragmentMaterialivSGIX.is_loaded } } }
pub mod GetFramebufferAttachmentParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFramebufferAttachmentParameteriv.is_loaded } } }
pub mod GetFramebufferAttachmentParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFramebufferAttachmentParameterivEXT.is_loaded } } }
pub mod GetFramebufferAttachmentParameterivOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFramebufferAttachmentParameterivOES.is_loaded } } }
pub mod GetFramebufferParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFramebufferParameteriv.is_loaded } } }
pub mod GetFramebufferParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetFramebufferParameterivEXT.is_loaded } } }
pub mod GetGraphicsResetStatusARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetGraphicsResetStatusARB.is_loaded } } }
pub mod GetGraphicsResetStatusEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetGraphicsResetStatusEXT.is_loaded } } }
pub mod GetHandleARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetHandleARB.is_loaded } } }
pub mod GetHistogram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetHistogram.is_loaded } } }
pub mod GetHistogramEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetHistogramEXT.is_loaded } } }
pub mod GetHistogramParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetHistogramParameterfv.is_loaded } } }
pub mod GetHistogramParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetHistogramParameterfvEXT.is_loaded } } }
pub mod GetHistogramParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetHistogramParameteriv.is_loaded } } }
pub mod GetHistogramParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetHistogramParameterivEXT.is_loaded } } }
pub mod GetHistogramParameterxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetHistogramParameterxvOES.is_loaded } } }
pub mod GetImageHandleARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetImageHandleARB.is_loaded } } }
pub mod GetImageHandleNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetImageHandleNV.is_loaded } } }
pub mod GetImageTransformParameterfvHP { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetImageTransformParameterfvHP.is_loaded } } }
pub mod GetImageTransformParameterivHP { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetImageTransformParameterivHP.is_loaded } } }
pub mod GetInfoLogARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInfoLogARB.is_loaded } } }
pub mod GetInstrumentsSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInstrumentsSGIX.is_loaded } } }
pub mod GetInteger64i_v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInteger64i_v.is_loaded } } }
pub mod GetInteger64v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInteger64v.is_loaded } } }
pub mod GetInteger64vAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInteger64vAPPLE.is_loaded } } }
pub mod GetIntegerIndexedvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetIntegerIndexedvEXT.is_loaded } } }
pub mod GetIntegeri_v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetIntegeri_v.is_loaded } } }
pub mod GetIntegeri_vEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetIntegeri_vEXT.is_loaded } } }
pub mod GetIntegerui64i_vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetIntegerui64i_vNV.is_loaded } } }
pub mod GetIntegerui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetIntegerui64vNV.is_loaded } } }
pub mod GetIntegerv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetIntegerv.is_loaded } } }
pub mod GetInternalformati64v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInternalformati64v.is_loaded } } }
pub mod GetInternalformativ { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInternalformativ.is_loaded } } }
pub mod GetInvariantBooleanvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInvariantBooleanvEXT.is_loaded } } }
pub mod GetInvariantFloatvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInvariantFloatvEXT.is_loaded } } }
pub mod GetInvariantIntegervEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetInvariantIntegervEXT.is_loaded } } }
pub mod GetLightfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLightfv.is_loaded } } }
pub mod GetLightiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLightiv.is_loaded } } }
pub mod GetLightx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLightx.is_loaded } } }
pub mod GetLightxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLightxOES.is_loaded } } }
pub mod GetLightxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLightxv.is_loaded } } }
pub mod GetLightxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLightxvOES.is_loaded } } }
pub mod GetListParameterfvSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetListParameterfvSGIX.is_loaded } } }
pub mod GetListParameterivSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetListParameterivSGIX.is_loaded } } }
pub mod GetLocalConstantBooleanvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLocalConstantBooleanvEXT.is_loaded } } }
pub mod GetLocalConstantFloatvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLocalConstantFloatvEXT.is_loaded } } }
pub mod GetLocalConstantIntegervEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetLocalConstantIntegervEXT.is_loaded } } }
pub mod GetMapAttribParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapAttribParameterfvNV.is_loaded } } }
pub mod GetMapAttribParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapAttribParameterivNV.is_loaded } } }
pub mod GetMapControlPointsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapControlPointsNV.is_loaded } } }
pub mod GetMapParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapParameterfvNV.is_loaded } } }
pub mod GetMapParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapParameterivNV.is_loaded } } }
pub mod GetMapdv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapdv.is_loaded } } }
pub mod GetMapfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapfv.is_loaded } } }
pub mod GetMapiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapiv.is_loaded } } }
pub mod GetMapxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMapxvOES.is_loaded } } }
pub mod GetMaterialfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMaterialfv.is_loaded } } }
pub mod GetMaterialiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMaterialiv.is_loaded } } }
pub mod GetMaterialx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMaterialx.is_loaded } } }
pub mod GetMaterialxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMaterialxOES.is_loaded } } }
pub mod GetMaterialxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMaterialxv.is_loaded } } }
pub mod GetMaterialxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMaterialxvOES.is_loaded } } }
pub mod GetMinmax { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMinmax.is_loaded } } }
pub mod GetMinmaxEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMinmaxEXT.is_loaded } } }
pub mod GetMinmaxParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMinmaxParameterfv.is_loaded } } }
pub mod GetMinmaxParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMinmaxParameterfvEXT.is_loaded } } }
pub mod GetMinmaxParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMinmaxParameteriv.is_loaded } } }
pub mod GetMinmaxParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMinmaxParameterivEXT.is_loaded } } }
pub mod GetMultiTexEnvfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexEnvfvEXT.is_loaded } } }
pub mod GetMultiTexEnvivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexEnvivEXT.is_loaded } } }
pub mod GetMultiTexGendvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexGendvEXT.is_loaded } } }
pub mod GetMultiTexGenfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexGenfvEXT.is_loaded } } }
pub mod GetMultiTexGenivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexGenivEXT.is_loaded } } }
pub mod GetMultiTexImageEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexImageEXT.is_loaded } } }
pub mod GetMultiTexLevelParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexLevelParameterfvEXT.is_loaded } } }
pub mod GetMultiTexLevelParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexLevelParameterivEXT.is_loaded } } }
pub mod GetMultiTexParameterIivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexParameterIivEXT.is_loaded } } }
pub mod GetMultiTexParameterIuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexParameterIuivEXT.is_loaded } } }
pub mod GetMultiTexParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexParameterfvEXT.is_loaded } } }
pub mod GetMultiTexParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultiTexParameterivEXT.is_loaded } } }
pub mod GetMultisamplefv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultisamplefv.is_loaded } } }
pub mod GetMultisamplefvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetMultisamplefvNV.is_loaded } } }
pub mod GetNamedBufferParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedBufferParameterivEXT.is_loaded } } }
pub mod GetNamedBufferParameterui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedBufferParameterui64vNV.is_loaded } } }
pub mod GetNamedBufferPointervEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedBufferPointervEXT.is_loaded } } }
pub mod GetNamedBufferSubDataEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedBufferSubDataEXT.is_loaded } } }
pub mod GetNamedFramebufferAttachmentParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedFramebufferAttachmentParameterivEXT.is_loaded } } }
pub mod GetNamedFramebufferParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedFramebufferParameterivEXT.is_loaded } } }
pub mod GetNamedProgramLocalParameterIivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedProgramLocalParameterIivEXT.is_loaded } } }
pub mod GetNamedProgramLocalParameterIuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedProgramLocalParameterIuivEXT.is_loaded } } }
pub mod GetNamedProgramLocalParameterdvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedProgramLocalParameterdvEXT.is_loaded } } }
pub mod GetNamedProgramLocalParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedProgramLocalParameterfvEXT.is_loaded } } }
pub mod GetNamedProgramStringEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedProgramStringEXT.is_loaded } } }
pub mod GetNamedProgramivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedProgramivEXT.is_loaded } } }
pub mod GetNamedRenderbufferParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedRenderbufferParameterivEXT.is_loaded } } }
pub mod GetNamedStringARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedStringARB.is_loaded } } }
pub mod GetNamedStringivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetNamedStringivARB.is_loaded } } }
pub mod GetObjectBufferfvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectBufferfvATI.is_loaded } } }
pub mod GetObjectBufferivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectBufferivATI.is_loaded } } }
pub mod GetObjectLabel { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectLabel.is_loaded } } }
pub mod GetObjectLabelEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectLabelEXT.is_loaded } } }
pub mod GetObjectLabelKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectLabelKHR.is_loaded } } }
pub mod GetObjectParameterfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectParameterfvARB.is_loaded } } }
pub mod GetObjectParameterivAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectParameterivAPPLE.is_loaded } } }
pub mod GetObjectParameterivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectParameterivARB.is_loaded } } }
pub mod GetObjectPtrLabel { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectPtrLabel.is_loaded } } }
pub mod GetObjectPtrLabelKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetObjectPtrLabelKHR.is_loaded } } }
pub mod GetOcclusionQueryivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetOcclusionQueryivNV.is_loaded } } }
pub mod GetOcclusionQueryuivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetOcclusionQueryuivNV.is_loaded } } }
pub mod GetPathColorGenfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathColorGenfvNV.is_loaded } } }
pub mod GetPathColorGenivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathColorGenivNV.is_loaded } } }
pub mod GetPathCommandsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathCommandsNV.is_loaded } } }
pub mod GetPathCoordsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathCoordsNV.is_loaded } } }
pub mod GetPathDashArrayNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathDashArrayNV.is_loaded } } }
pub mod GetPathLengthNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathLengthNV.is_loaded } } }
pub mod GetPathMetricRangeNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathMetricRangeNV.is_loaded } } }
pub mod GetPathMetricsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathMetricsNV.is_loaded } } }
pub mod GetPathParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathParameterfvNV.is_loaded } } }
pub mod GetPathParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathParameterivNV.is_loaded } } }
pub mod GetPathSpacingNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathSpacingNV.is_loaded } } }
pub mod GetPathTexGenfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathTexGenfvNV.is_loaded } } }
pub mod GetPathTexGenivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPathTexGenivNV.is_loaded } } }
pub mod GetPerfMonitorCounterDataAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPerfMonitorCounterDataAMD.is_loaded } } }
pub mod GetPerfMonitorCounterInfoAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPerfMonitorCounterInfoAMD.is_loaded } } }
pub mod GetPerfMonitorCounterStringAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPerfMonitorCounterStringAMD.is_loaded } } }
pub mod GetPerfMonitorCountersAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPerfMonitorCountersAMD.is_loaded } } }
pub mod GetPerfMonitorGroupStringAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPerfMonitorGroupStringAMD.is_loaded } } }
pub mod GetPerfMonitorGroupsAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPerfMonitorGroupsAMD.is_loaded } } }
pub mod GetPixelMapfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPixelMapfv.is_loaded } } }
pub mod GetPixelMapuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPixelMapuiv.is_loaded } } }
pub mod GetPixelMapusv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPixelMapusv.is_loaded } } }
pub mod GetPixelMapxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPixelMapxv.is_loaded } } }
pub mod GetPixelTexGenParameterfvSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPixelTexGenParameterfvSGIS.is_loaded } } }
pub mod GetPixelTexGenParameterivSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPixelTexGenParameterivSGIS.is_loaded } } }
pub mod GetPixelTransformParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPixelTransformParameterfvEXT.is_loaded } } }
pub mod GetPixelTransformParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPixelTransformParameterivEXT.is_loaded } } }
pub mod GetPointerIndexedvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPointerIndexedvEXT.is_loaded } } }
pub mod GetPointeri_vEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPointeri_vEXT.is_loaded } } }
pub mod GetPointerv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPointerv.is_loaded } } }
pub mod GetPointervEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPointervEXT.is_loaded } } }
pub mod GetPointervKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPointervKHR.is_loaded } } }
pub mod GetPolygonStipple { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetPolygonStipple.is_loaded } } }
pub mod GetProgramBinary { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramBinary.is_loaded } } }
pub mod GetProgramBinaryOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramBinaryOES.is_loaded } } }
pub mod GetProgramEnvParameterIivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramEnvParameterIivNV.is_loaded } } }
pub mod GetProgramEnvParameterIuivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramEnvParameterIuivNV.is_loaded } } }
pub mod GetProgramEnvParameterdvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramEnvParameterdvARB.is_loaded } } }
pub mod GetProgramEnvParameterfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramEnvParameterfvARB.is_loaded } } }
pub mod GetProgramInfoLog { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramInfoLog.is_loaded } } }
pub mod GetProgramInterfaceiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramInterfaceiv.is_loaded } } }
pub mod GetProgramLocalParameterIivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramLocalParameterIivNV.is_loaded } } }
pub mod GetProgramLocalParameterIuivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramLocalParameterIuivNV.is_loaded } } }
pub mod GetProgramLocalParameterdvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramLocalParameterdvARB.is_loaded } } }
pub mod GetProgramLocalParameterfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramLocalParameterfvARB.is_loaded } } }
pub mod GetProgramNamedParameterdvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramNamedParameterdvNV.is_loaded } } }
pub mod GetProgramNamedParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramNamedParameterfvNV.is_loaded } } }
pub mod GetProgramParameterdvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramParameterdvNV.is_loaded } } }
pub mod GetProgramParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramParameterfvNV.is_loaded } } }
pub mod GetProgramPipelineInfoLog { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramPipelineInfoLog.is_loaded } } }
pub mod GetProgramPipelineInfoLogEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramPipelineInfoLogEXT.is_loaded } } }
pub mod GetProgramPipelineiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramPipelineiv.is_loaded } } }
pub mod GetProgramPipelineivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramPipelineivEXT.is_loaded } } }
pub mod GetProgramResourceIndex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramResourceIndex.is_loaded } } }
pub mod GetProgramResourceLocation { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramResourceLocation.is_loaded } } }
pub mod GetProgramResourceLocationIndex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramResourceLocationIndex.is_loaded } } }
pub mod GetProgramResourceName { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramResourceName.is_loaded } } }
pub mod GetProgramResourceiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramResourceiv.is_loaded } } }
pub mod GetProgramStageiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramStageiv.is_loaded } } }
pub mod GetProgramStringARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramStringARB.is_loaded } } }
pub mod GetProgramStringNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramStringNV.is_loaded } } }
pub mod GetProgramSubroutineParameteruivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramSubroutineParameteruivNV.is_loaded } } }
pub mod GetProgramiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramiv.is_loaded } } }
pub mod GetProgramivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramivARB.is_loaded } } }
pub mod GetProgramivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetProgramivNV.is_loaded } } }
pub mod GetQueryIndexediv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryIndexediv.is_loaded } } }
pub mod GetQueryObjecti64v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjecti64v.is_loaded } } }
pub mod GetQueryObjecti64vEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjecti64vEXT.is_loaded } } }
pub mod GetQueryObjectiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjectiv.is_loaded } } }
pub mod GetQueryObjectivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjectivARB.is_loaded } } }
pub mod GetQueryObjectivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjectivEXT.is_loaded } } }
pub mod GetQueryObjectui64v { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjectui64v.is_loaded } } }
pub mod GetQueryObjectui64vEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjectui64vEXT.is_loaded } } }
pub mod GetQueryObjectuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjectuiv.is_loaded } } }
pub mod GetQueryObjectuivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjectuivARB.is_loaded } } }
pub mod GetQueryObjectuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryObjectuivEXT.is_loaded } } }
pub mod GetQueryiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryiv.is_loaded } } }
pub mod GetQueryivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryivARB.is_loaded } } }
pub mod GetQueryivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetQueryivEXT.is_loaded } } }
pub mod GetRenderbufferParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetRenderbufferParameteriv.is_loaded } } }
pub mod GetRenderbufferParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetRenderbufferParameterivEXT.is_loaded } } }
pub mod GetRenderbufferParameterivOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetRenderbufferParameterivOES.is_loaded } } }
pub mod GetSamplerParameterIiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSamplerParameterIiv.is_loaded } } }
pub mod GetSamplerParameterIuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSamplerParameterIuiv.is_loaded } } }
pub mod GetSamplerParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSamplerParameterfv.is_loaded } } }
pub mod GetSamplerParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSamplerParameteriv.is_loaded } } }
pub mod GetSeparableFilter { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSeparableFilter.is_loaded } } }
pub mod GetSeparableFilterEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSeparableFilterEXT.is_loaded } } }
pub mod GetShaderInfoLog { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetShaderInfoLog.is_loaded } } }
pub mod GetShaderPrecisionFormat { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetShaderPrecisionFormat.is_loaded } } }
pub mod GetShaderSource { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetShaderSource.is_loaded } } }
pub mod GetShaderSourceARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetShaderSourceARB.is_loaded } } }
pub mod GetShaderiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetShaderiv.is_loaded } } }
pub mod GetSharpenTexFuncSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSharpenTexFuncSGIS.is_loaded } } }
pub mod GetString { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetString.is_loaded } } }
pub mod GetStringi { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetStringi.is_loaded } } }
pub mod GetSubroutineIndex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSubroutineIndex.is_loaded } } }
pub mod GetSubroutineUniformLocation { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSubroutineUniformLocation.is_loaded } } }
pub mod GetSynciv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSynciv.is_loaded } } }
pub mod GetSyncivAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetSyncivAPPLE.is_loaded } } }
pub mod GetTexBumpParameterfvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexBumpParameterfvATI.is_loaded } } }
pub mod GetTexBumpParameterivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexBumpParameterivATI.is_loaded } } }
pub mod GetTexEnvfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexEnvfv.is_loaded } } }
pub mod GetTexEnviv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexEnviv.is_loaded } } }
pub mod GetTexEnvxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexEnvxv.is_loaded } } }
pub mod GetTexEnvxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexEnvxvOES.is_loaded } } }
pub mod GetTexFilterFuncSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexFilterFuncSGIS.is_loaded } } }
pub mod GetTexGendv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexGendv.is_loaded } } }
pub mod GetTexGenfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexGenfv.is_loaded } } }
pub mod GetTexGenfvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexGenfvOES.is_loaded } } }
pub mod GetTexGeniv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexGeniv.is_loaded } } }
pub mod GetTexGenivOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexGenivOES.is_loaded } } }
pub mod GetTexGenxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexGenxvOES.is_loaded } } }
pub mod GetTexImage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexImage.is_loaded } } }
pub mod GetTexLevelParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexLevelParameterfv.is_loaded } } }
pub mod GetTexLevelParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexLevelParameteriv.is_loaded } } }
pub mod GetTexLevelParameterxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexLevelParameterxvOES.is_loaded } } }
pub mod GetTexParameterIiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameterIiv.is_loaded } } }
pub mod GetTexParameterIivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameterIivEXT.is_loaded } } }
pub mod GetTexParameterIuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameterIuiv.is_loaded } } }
pub mod GetTexParameterIuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameterIuivEXT.is_loaded } } }
pub mod GetTexParameterPointervAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameterPointervAPPLE.is_loaded } } }
pub mod GetTexParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameterfv.is_loaded } } }
pub mod GetTexParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameteriv.is_loaded } } }
pub mod GetTexParameterxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameterxv.is_loaded } } }
pub mod GetTexParameterxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTexParameterxvOES.is_loaded } } }
pub mod GetTextureHandleARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureHandleARB.is_loaded } } }
pub mod GetTextureHandleNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureHandleNV.is_loaded } } }
pub mod GetTextureImageEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureImageEXT.is_loaded } } }
pub mod GetTextureLevelParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureLevelParameterfvEXT.is_loaded } } }
pub mod GetTextureLevelParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureLevelParameterivEXT.is_loaded } } }
pub mod GetTextureParameterIivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureParameterIivEXT.is_loaded } } }
pub mod GetTextureParameterIuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureParameterIuivEXT.is_loaded } } }
pub mod GetTextureParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureParameterfvEXT.is_loaded } } }
pub mod GetTextureParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureParameterivEXT.is_loaded } } }
pub mod GetTextureSamplerHandleARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureSamplerHandleARB.is_loaded } } }
pub mod GetTextureSamplerHandleNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTextureSamplerHandleNV.is_loaded } } }
pub mod GetTrackMatrixivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTrackMatrixivNV.is_loaded } } }
pub mod GetTransformFeedbackVarying { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTransformFeedbackVarying.is_loaded } } }
pub mod GetTransformFeedbackVaryingEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTransformFeedbackVaryingEXT.is_loaded } } }
pub mod GetTransformFeedbackVaryingNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTransformFeedbackVaryingNV.is_loaded } } }
pub mod GetTranslatedShaderSourceANGLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetTranslatedShaderSourceANGLE.is_loaded } } }
pub mod GetUniformBlockIndex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformBlockIndex.is_loaded } } }
pub mod GetUniformBufferSizeEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformBufferSizeEXT.is_loaded } } }
pub mod GetUniformIndices { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformIndices.is_loaded } } }
pub mod GetUniformLocation { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformLocation.is_loaded } } }
pub mod GetUniformLocationARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformLocationARB.is_loaded } } }
pub mod GetUniformOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformOffsetEXT.is_loaded } } }
pub mod GetUniformSubroutineuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformSubroutineuiv.is_loaded } } }
pub mod GetUniformdv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformdv.is_loaded } } }
pub mod GetUniformfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformfv.is_loaded } } }
pub mod GetUniformfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformfvARB.is_loaded } } }
pub mod GetUniformi64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformi64vNV.is_loaded } } }
pub mod GetUniformiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformiv.is_loaded } } }
pub mod GetUniformivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformivARB.is_loaded } } }
pub mod GetUniformui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformui64vNV.is_loaded } } }
pub mod GetUniformuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformuiv.is_loaded } } }
pub mod GetUniformuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetUniformuivEXT.is_loaded } } }
pub mod GetVariantArrayObjectfvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVariantArrayObjectfvATI.is_loaded } } }
pub mod GetVariantArrayObjectivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVariantArrayObjectivATI.is_loaded } } }
pub mod GetVariantBooleanvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVariantBooleanvEXT.is_loaded } } }
pub mod GetVariantFloatvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVariantFloatvEXT.is_loaded } } }
pub mod GetVariantIntegervEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVariantIntegervEXT.is_loaded } } }
pub mod GetVariantPointervEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVariantPointervEXT.is_loaded } } }
pub mod GetVaryingLocationNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVaryingLocationNV.is_loaded } } }
pub mod GetVertexArrayIntegeri_vEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexArrayIntegeri_vEXT.is_loaded } } }
pub mod GetVertexArrayIntegervEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexArrayIntegervEXT.is_loaded } } }
pub mod GetVertexArrayPointeri_vEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexArrayPointeri_vEXT.is_loaded } } }
pub mod GetVertexArrayPointervEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexArrayPointervEXT.is_loaded } } }
pub mod GetVertexAttribArrayObjectfvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribArrayObjectfvATI.is_loaded } } }
pub mod GetVertexAttribArrayObjectivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribArrayObjectivATI.is_loaded } } }
pub mod GetVertexAttribIiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribIiv.is_loaded } } }
pub mod GetVertexAttribIivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribIivEXT.is_loaded } } }
pub mod GetVertexAttribIuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribIuiv.is_loaded } } }
pub mod GetVertexAttribIuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribIuivEXT.is_loaded } } }
pub mod GetVertexAttribLdv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribLdv.is_loaded } } }
pub mod GetVertexAttribLdvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribLdvEXT.is_loaded } } }
pub mod GetVertexAttribLi64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribLi64vNV.is_loaded } } }
pub mod GetVertexAttribLui64vARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribLui64vARB.is_loaded } } }
pub mod GetVertexAttribLui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribLui64vNV.is_loaded } } }
pub mod GetVertexAttribPointerv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribPointerv.is_loaded } } }
pub mod GetVertexAttribPointervARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribPointervARB.is_loaded } } }
pub mod GetVertexAttribPointervNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribPointervNV.is_loaded } } }
pub mod GetVertexAttribdv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribdv.is_loaded } } }
pub mod GetVertexAttribdvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribdvARB.is_loaded } } }
pub mod GetVertexAttribdvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribdvNV.is_loaded } } }
pub mod GetVertexAttribfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribfv.is_loaded } } }
pub mod GetVertexAttribfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribfvARB.is_loaded } } }
pub mod GetVertexAttribfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribfvNV.is_loaded } } }
pub mod GetVertexAttribiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribiv.is_loaded } } }
pub mod GetVertexAttribivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribivARB.is_loaded } } }
pub mod GetVertexAttribivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVertexAttribivNV.is_loaded } } }
pub mod GetVideoCaptureStreamdvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVideoCaptureStreamdvNV.is_loaded } } }
pub mod GetVideoCaptureStreamfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVideoCaptureStreamfvNV.is_loaded } } }
pub mod GetVideoCaptureStreamivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVideoCaptureStreamivNV.is_loaded } } }
pub mod GetVideoCaptureivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVideoCaptureivNV.is_loaded } } }
pub mod GetVideoi64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVideoi64vNV.is_loaded } } }
pub mod GetVideoivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVideoivNV.is_loaded } } }
pub mod GetVideoui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVideoui64vNV.is_loaded } } }
pub mod GetVideouivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetVideouivNV.is_loaded } } }
pub mod GetnColorTableARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnColorTableARB.is_loaded } } }
pub mod GetnCompressedTexImageARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnCompressedTexImageARB.is_loaded } } }
pub mod GetnConvolutionFilterARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnConvolutionFilterARB.is_loaded } } }
pub mod GetnHistogramARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnHistogramARB.is_loaded } } }
pub mod GetnMapdvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnMapdvARB.is_loaded } } }
pub mod GetnMapfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnMapfvARB.is_loaded } } }
pub mod GetnMapivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnMapivARB.is_loaded } } }
pub mod GetnMinmaxARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnMinmaxARB.is_loaded } } }
pub mod GetnPixelMapfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnPixelMapfvARB.is_loaded } } }
pub mod GetnPixelMapuivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnPixelMapuivARB.is_loaded } } }
pub mod GetnPixelMapusvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnPixelMapusvARB.is_loaded } } }
pub mod GetnPolygonStippleARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnPolygonStippleARB.is_loaded } } }
pub mod GetnSeparableFilterARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnSeparableFilterARB.is_loaded } } }
pub mod GetnTexImageARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnTexImageARB.is_loaded } } }
pub mod GetnUniformdvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnUniformdvARB.is_loaded } } }
pub mod GetnUniformfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnUniformfvARB.is_loaded } } }
pub mod GetnUniformfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnUniformfvEXT.is_loaded } } }
pub mod GetnUniformivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnUniformivARB.is_loaded } } }
pub mod GetnUniformivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnUniformivEXT.is_loaded } } }
pub mod GetnUniformuivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GetnUniformuivARB.is_loaded } } }
pub mod GlobalAlphaFactorbSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GlobalAlphaFactorbSUN.is_loaded } } }
pub mod GlobalAlphaFactordSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GlobalAlphaFactordSUN.is_loaded } } }
pub mod GlobalAlphaFactorfSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GlobalAlphaFactorfSUN.is_loaded } } }
pub mod GlobalAlphaFactoriSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GlobalAlphaFactoriSUN.is_loaded } } }
pub mod GlobalAlphaFactorsSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GlobalAlphaFactorsSUN.is_loaded } } }
pub mod GlobalAlphaFactorubSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GlobalAlphaFactorubSUN.is_loaded } } }
pub mod GlobalAlphaFactoruiSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GlobalAlphaFactoruiSUN.is_loaded } } }
pub mod GlobalAlphaFactorusSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::GlobalAlphaFactorusSUN.is_loaded } } }
pub mod Hint { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Hint.is_loaded } } }
pub mod HintPGI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::HintPGI.is_loaded } } }
pub mod Histogram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Histogram.is_loaded } } }
pub mod HistogramEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::HistogramEXT.is_loaded } } }
pub mod IglooInterfaceSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IglooInterfaceSGIX.is_loaded } } }
pub mod ImageTransformParameterfHP { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ImageTransformParameterfHP.is_loaded } } }
pub mod ImageTransformParameterfvHP { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ImageTransformParameterfvHP.is_loaded } } }
pub mod ImageTransformParameteriHP { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ImageTransformParameteriHP.is_loaded } } }
pub mod ImageTransformParameterivHP { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ImageTransformParameterivHP.is_loaded } } }
pub mod ImportSyncEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ImportSyncEXT.is_loaded } } }
pub mod IndexFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexFormatNV.is_loaded } } }
pub mod IndexFuncEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexFuncEXT.is_loaded } } }
pub mod IndexMask { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexMask.is_loaded } } }
pub mod IndexMaterialEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexMaterialEXT.is_loaded } } }
pub mod IndexPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexPointer.is_loaded } } }
pub mod IndexPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexPointerEXT.is_loaded } } }
pub mod IndexPointerListIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexPointerListIBM.is_loaded } } }
pub mod Indexd { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexd.is_loaded } } }
pub mod Indexdv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexdv.is_loaded } } }
pub mod Indexf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexf.is_loaded } } }
pub mod Indexfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexfv.is_loaded } } }
pub mod Indexi { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexi.is_loaded } } }
pub mod Indexiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexiv.is_loaded } } }
pub mod Indexs { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexs.is_loaded } } }
pub mod Indexsv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexsv.is_loaded } } }
pub mod Indexub { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexub.is_loaded } } }
pub mod Indexubv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Indexubv.is_loaded } } }
pub mod IndexxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexxOES.is_loaded } } }
pub mod IndexxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IndexxvOES.is_loaded } } }
pub mod InitNames { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InitNames.is_loaded } } }
pub mod InsertComponentEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InsertComponentEXT.is_loaded } } }
pub mod InsertEventMarkerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InsertEventMarkerEXT.is_loaded } } }
pub mod InstrumentsBufferSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InstrumentsBufferSGIX.is_loaded } } }
pub mod InterleavedArrays { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InterleavedArrays.is_loaded } } }
pub mod InterpolatePathsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InterpolatePathsNV.is_loaded } } }
pub mod InvalidateBufferData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InvalidateBufferData.is_loaded } } }
pub mod InvalidateBufferSubData { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InvalidateBufferSubData.is_loaded } } }
pub mod InvalidateFramebuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InvalidateFramebuffer.is_loaded } } }
pub mod InvalidateSubFramebuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InvalidateSubFramebuffer.is_loaded } } }
pub mod InvalidateTexImage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InvalidateTexImage.is_loaded } } }
pub mod InvalidateTexSubImage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::InvalidateTexSubImage.is_loaded } } }
pub mod IsAsyncMarkerSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsAsyncMarkerSGIX.is_loaded } } }
pub mod IsBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsBuffer.is_loaded } } }
pub mod IsBufferARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsBufferARB.is_loaded } } }
pub mod IsBufferResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsBufferResidentNV.is_loaded } } }
pub mod IsEnabled { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsEnabled.is_loaded } } }
pub mod IsEnabledIndexedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsEnabledIndexedEXT.is_loaded } } }
pub mod IsEnabledi { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsEnabledi.is_loaded } } }
pub mod IsFenceAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsFenceAPPLE.is_loaded } } }
pub mod IsFenceNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsFenceNV.is_loaded } } }
pub mod IsFramebuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsFramebuffer.is_loaded } } }
pub mod IsFramebufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsFramebufferEXT.is_loaded } } }
pub mod IsFramebufferOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsFramebufferOES.is_loaded } } }
pub mod IsImageHandleResidentARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsImageHandleResidentARB.is_loaded } } }
pub mod IsImageHandleResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsImageHandleResidentNV.is_loaded } } }
pub mod IsList { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsList.is_loaded } } }
pub mod IsNameAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsNameAMD.is_loaded } } }
pub mod IsNamedBufferResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsNamedBufferResidentNV.is_loaded } } }
pub mod IsNamedStringARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsNamedStringARB.is_loaded } } }
pub mod IsObjectBufferATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsObjectBufferATI.is_loaded } } }
pub mod IsOcclusionQueryNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsOcclusionQueryNV.is_loaded } } }
pub mod IsPathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsPathNV.is_loaded } } }
pub mod IsPointInFillPathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsPointInFillPathNV.is_loaded } } }
pub mod IsPointInStrokePathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsPointInStrokePathNV.is_loaded } } }
pub mod IsProgram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsProgram.is_loaded } } }
pub mod IsProgramARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsProgramARB.is_loaded } } }
pub mod IsProgramNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsProgramNV.is_loaded } } }
pub mod IsProgramPipeline { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsProgramPipeline.is_loaded } } }
pub mod IsProgramPipelineEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsProgramPipelineEXT.is_loaded } } }
pub mod IsQuery { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsQuery.is_loaded } } }
pub mod IsQueryARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsQueryARB.is_loaded } } }
pub mod IsQueryEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsQueryEXT.is_loaded } } }
pub mod IsRenderbuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsRenderbuffer.is_loaded } } }
pub mod IsRenderbufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsRenderbufferEXT.is_loaded } } }
pub mod IsRenderbufferOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsRenderbufferOES.is_loaded } } }
pub mod IsSampler { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsSampler.is_loaded } } }
pub mod IsShader { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsShader.is_loaded } } }
pub mod IsSync { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsSync.is_loaded } } }
pub mod IsSyncAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsSyncAPPLE.is_loaded } } }
pub mod IsTexture { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsTexture.is_loaded } } }
pub mod IsTextureEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsTextureEXT.is_loaded } } }
pub mod IsTextureHandleResidentARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsTextureHandleResidentARB.is_loaded } } }
pub mod IsTextureHandleResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsTextureHandleResidentNV.is_loaded } } }
pub mod IsTransformFeedback { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsTransformFeedback.is_loaded } } }
pub mod IsTransformFeedbackNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsTransformFeedbackNV.is_loaded } } }
pub mod IsVariantEnabledEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsVariantEnabledEXT.is_loaded } } }
pub mod IsVertexArray { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsVertexArray.is_loaded } } }
pub mod IsVertexArrayAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsVertexArrayAPPLE.is_loaded } } }
pub mod IsVertexArrayOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsVertexArrayOES.is_loaded } } }
pub mod IsVertexAttribEnabledAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::IsVertexAttribEnabledAPPLE.is_loaded } } }
pub mod LabelObjectEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LabelObjectEXT.is_loaded } } }
pub mod LightEnviSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightEnviSGIX.is_loaded } } }
pub mod LightModelf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightModelf.is_loaded } } }
pub mod LightModelfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightModelfv.is_loaded } } }
pub mod LightModeli { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightModeli.is_loaded } } }
pub mod LightModeliv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightModeliv.is_loaded } } }
pub mod LightModelx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightModelx.is_loaded } } }
pub mod LightModelxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightModelxOES.is_loaded } } }
pub mod LightModelxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightModelxv.is_loaded } } }
pub mod LightModelxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightModelxvOES.is_loaded } } }
pub mod Lightf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Lightf.is_loaded } } }
pub mod Lightfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Lightfv.is_loaded } } }
pub mod Lighti { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Lighti.is_loaded } } }
pub mod Lightiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Lightiv.is_loaded } } }
pub mod Lightx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Lightx.is_loaded } } }
pub mod LightxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightxOES.is_loaded } } }
pub mod Lightxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Lightxv.is_loaded } } }
pub mod LightxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LightxvOES.is_loaded } } }
pub mod LineStipple { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LineStipple.is_loaded } } }
pub mod LineWidth { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LineWidth.is_loaded } } }
pub mod LineWidthx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LineWidthx.is_loaded } } }
pub mod LineWidthxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LineWidthxOES.is_loaded } } }
pub mod LinkProgram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LinkProgram.is_loaded } } }
pub mod LinkProgramARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LinkProgramARB.is_loaded } } }
pub mod ListBase { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ListBase.is_loaded } } }
pub mod ListParameterfSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ListParameterfSGIX.is_loaded } } }
pub mod ListParameterfvSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ListParameterfvSGIX.is_loaded } } }
pub mod ListParameteriSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ListParameteriSGIX.is_loaded } } }
pub mod ListParameterivSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ListParameterivSGIX.is_loaded } } }
pub mod LoadIdentity { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadIdentity.is_loaded } } }
pub mod LoadIdentityDeformationMapSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadIdentityDeformationMapSGIX.is_loaded } } }
pub mod LoadMatrixd { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadMatrixd.is_loaded } } }
pub mod LoadMatrixf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadMatrixf.is_loaded } } }
pub mod LoadMatrixx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadMatrixx.is_loaded } } }
pub mod LoadMatrixxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadMatrixxOES.is_loaded } } }
pub mod LoadName { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadName.is_loaded } } }
pub mod LoadPaletteFromModelViewMatrixOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadPaletteFromModelViewMatrixOES.is_loaded } } }
pub mod LoadProgramNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadProgramNV.is_loaded } } }
pub mod LoadTransposeMatrixd { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadTransposeMatrixd.is_loaded } } }
pub mod LoadTransposeMatrixdARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadTransposeMatrixdARB.is_loaded } } }
pub mod LoadTransposeMatrixf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadTransposeMatrixf.is_loaded } } }
pub mod LoadTransposeMatrixfARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadTransposeMatrixfARB.is_loaded } } }
pub mod LoadTransposeMatrixxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LoadTransposeMatrixxOES.is_loaded } } }
pub mod LockArraysEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LockArraysEXT.is_loaded } } }
pub mod LogicOp { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::LogicOp.is_loaded } } }
pub mod MakeBufferNonResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeBufferNonResidentNV.is_loaded } } }
pub mod MakeBufferResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeBufferResidentNV.is_loaded } } }
pub mod MakeImageHandleNonResidentARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeImageHandleNonResidentARB.is_loaded } } }
pub mod MakeImageHandleNonResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeImageHandleNonResidentNV.is_loaded } } }
pub mod MakeImageHandleResidentARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeImageHandleResidentARB.is_loaded } } }
pub mod MakeImageHandleResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeImageHandleResidentNV.is_loaded } } }
pub mod MakeNamedBufferNonResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeNamedBufferNonResidentNV.is_loaded } } }
pub mod MakeNamedBufferResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeNamedBufferResidentNV.is_loaded } } }
pub mod MakeTextureHandleNonResidentARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeTextureHandleNonResidentARB.is_loaded } } }
pub mod MakeTextureHandleNonResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeTextureHandleNonResidentNV.is_loaded } } }
pub mod MakeTextureHandleResidentARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeTextureHandleResidentARB.is_loaded } } }
pub mod MakeTextureHandleResidentNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MakeTextureHandleResidentNV.is_loaded } } }
pub mod Map1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Map1d.is_loaded } } }
pub mod Map1f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Map1f.is_loaded } } }
pub mod Map1xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Map1xOES.is_loaded } } }
pub mod Map2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Map2d.is_loaded } } }
pub mod Map2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Map2f.is_loaded } } }
pub mod Map2xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Map2xOES.is_loaded } } }
pub mod MapBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapBuffer.is_loaded } } }
pub mod MapBufferARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapBufferARB.is_loaded } } }
pub mod MapBufferOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapBufferOES.is_loaded } } }
pub mod MapBufferRange { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapBufferRange.is_loaded } } }
pub mod MapBufferRangeEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapBufferRangeEXT.is_loaded } } }
pub mod MapControlPointsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapControlPointsNV.is_loaded } } }
pub mod MapGrid1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapGrid1d.is_loaded } } }
pub mod MapGrid1f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapGrid1f.is_loaded } } }
pub mod MapGrid1xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapGrid1xOES.is_loaded } } }
pub mod MapGrid2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapGrid2d.is_loaded } } }
pub mod MapGrid2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapGrid2f.is_loaded } } }
pub mod MapGrid2xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapGrid2xOES.is_loaded } } }
pub mod MapNamedBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapNamedBufferEXT.is_loaded } } }
pub mod MapNamedBufferRangeEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapNamedBufferRangeEXT.is_loaded } } }
pub mod MapObjectBufferATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapObjectBufferATI.is_loaded } } }
pub mod MapParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapParameterfvNV.is_loaded } } }
pub mod MapParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapParameterivNV.is_loaded } } }
pub mod MapTexture2DINTEL { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapTexture2DINTEL.is_loaded } } }
pub mod MapVertexAttrib1dAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapVertexAttrib1dAPPLE.is_loaded } } }
pub mod MapVertexAttrib1fAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapVertexAttrib1fAPPLE.is_loaded } } }
pub mod MapVertexAttrib2dAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapVertexAttrib2dAPPLE.is_loaded } } }
pub mod MapVertexAttrib2fAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MapVertexAttrib2fAPPLE.is_loaded } } }
pub mod Materialf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Materialf.is_loaded } } }
pub mod Materialfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Materialfv.is_loaded } } }
pub mod Materiali { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Materiali.is_loaded } } }
pub mod Materialiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Materialiv.is_loaded } } }
pub mod Materialx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Materialx.is_loaded } } }
pub mod MaterialxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MaterialxOES.is_loaded } } }
pub mod Materialxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Materialxv.is_loaded } } }
pub mod MaterialxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MaterialxvOES.is_loaded } } }
pub mod MatrixFrustumEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixFrustumEXT.is_loaded } } }
pub mod MatrixIndexPointerARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixIndexPointerARB.is_loaded } } }
pub mod MatrixIndexPointerOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixIndexPointerOES.is_loaded } } }
pub mod MatrixIndexubvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixIndexubvARB.is_loaded } } }
pub mod MatrixIndexuivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixIndexuivARB.is_loaded } } }
pub mod MatrixIndexusvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixIndexusvARB.is_loaded } } }
pub mod MatrixLoadIdentityEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixLoadIdentityEXT.is_loaded } } }
pub mod MatrixLoadTransposedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixLoadTransposedEXT.is_loaded } } }
pub mod MatrixLoadTransposefEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixLoadTransposefEXT.is_loaded } } }
pub mod MatrixLoaddEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixLoaddEXT.is_loaded } } }
pub mod MatrixLoadfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixLoadfEXT.is_loaded } } }
pub mod MatrixMode { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixMode.is_loaded } } }
pub mod MatrixMultTransposedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixMultTransposedEXT.is_loaded } } }
pub mod MatrixMultTransposefEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixMultTransposefEXT.is_loaded } } }
pub mod MatrixMultdEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixMultdEXT.is_loaded } } }
pub mod MatrixMultfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixMultfEXT.is_loaded } } }
pub mod MatrixOrthoEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixOrthoEXT.is_loaded } } }
pub mod MatrixPopEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixPopEXT.is_loaded } } }
pub mod MatrixPushEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixPushEXT.is_loaded } } }
pub mod MatrixRotatedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixRotatedEXT.is_loaded } } }
pub mod MatrixRotatefEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixRotatefEXT.is_loaded } } }
pub mod MatrixScaledEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixScaledEXT.is_loaded } } }
pub mod MatrixScalefEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixScalefEXT.is_loaded } } }
pub mod MatrixTranslatedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixTranslatedEXT.is_loaded } } }
pub mod MatrixTranslatefEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MatrixTranslatefEXT.is_loaded } } }
pub mod MemoryBarrier { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MemoryBarrier.is_loaded } } }
pub mod MemoryBarrierEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MemoryBarrierEXT.is_loaded } } }
pub mod MinSampleShading { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MinSampleShading.is_loaded } } }
pub mod MinSampleShadingARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MinSampleShadingARB.is_loaded } } }
pub mod Minmax { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Minmax.is_loaded } } }
pub mod MinmaxEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MinmaxEXT.is_loaded } } }
pub mod MultMatrixd { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultMatrixd.is_loaded } } }
pub mod MultMatrixf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultMatrixf.is_loaded } } }
pub mod MultMatrixx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultMatrixx.is_loaded } } }
pub mod MultMatrixxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultMatrixxOES.is_loaded } } }
pub mod MultTransposeMatrixd { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultTransposeMatrixd.is_loaded } } }
pub mod MultTransposeMatrixdARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultTransposeMatrixdARB.is_loaded } } }
pub mod MultTransposeMatrixf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultTransposeMatrixf.is_loaded } } }
pub mod MultTransposeMatrixfARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultTransposeMatrixfARB.is_loaded } } }
pub mod MultTransposeMatrixxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultTransposeMatrixxOES.is_loaded } } }
pub mod MultiDrawArrays { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawArrays.is_loaded } } }
pub mod MultiDrawArraysEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawArraysEXT.is_loaded } } }
pub mod MultiDrawArraysIndirect { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawArraysIndirect.is_loaded } } }
pub mod MultiDrawArraysIndirectAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawArraysIndirectAMD.is_loaded } } }
pub mod MultiDrawArraysIndirectBindlessNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawArraysIndirectBindlessNV.is_loaded } } }
pub mod MultiDrawElementsIndirectBindlessNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawElementsIndirectBindlessNV.is_loaded } } }
pub mod MultiDrawArraysIndirectCountARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawArraysIndirectCountARB.is_loaded } } }
pub mod MultiDrawElementArrayAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawElementArrayAPPLE.is_loaded } } }
pub mod MultiDrawElements { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawElements.is_loaded } } }
pub mod MultiDrawElementsBaseVertex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawElementsBaseVertex.is_loaded } } }
pub mod MultiDrawElementsEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawElementsEXT.is_loaded } } }
pub mod MultiDrawElementsIndirect { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawElementsIndirect.is_loaded } } }
pub mod MultiDrawElementsIndirectAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawElementsIndirectAMD.is_loaded } } }
pub mod MultiDrawElementsIndirectCountARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawElementsIndirectCountARB.is_loaded } } }
pub mod MultiDrawRangeElementArrayAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiDrawRangeElementArrayAPPLE.is_loaded } } }
pub mod MultiModeDrawArraysIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiModeDrawArraysIBM.is_loaded } } }
pub mod MultiModeDrawElementsIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiModeDrawElementsIBM.is_loaded } } }
pub mod MultiTexBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexBufferEXT.is_loaded } } }
pub mod MultiTexCoord1bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1bOES.is_loaded } } }
pub mod MultiTexCoord1bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1bvOES.is_loaded } } }
pub mod MultiTexCoord1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1d.is_loaded } } }
pub mod MultiTexCoord1dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1dARB.is_loaded } } }
pub mod MultiTexCoord1dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1dv.is_loaded } } }
pub mod MultiTexCoord1dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1dvARB.is_loaded } } }
pub mod MultiTexCoord1f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1f.is_loaded } } }
pub mod MultiTexCoord1fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1fARB.is_loaded } } }
pub mod MultiTexCoord1fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1fv.is_loaded } } }
pub mod MultiTexCoord1fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1fvARB.is_loaded } } }
pub mod MultiTexCoord1hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1hNV.is_loaded } } }
pub mod MultiTexCoord1hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1hvNV.is_loaded } } }
pub mod MultiTexCoord1i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1i.is_loaded } } }
pub mod MultiTexCoord1iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1iARB.is_loaded } } }
pub mod MultiTexCoord1iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1iv.is_loaded } } }
pub mod MultiTexCoord1ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1ivARB.is_loaded } } }
pub mod MultiTexCoord1s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1s.is_loaded } } }
pub mod MultiTexCoord1sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1sARB.is_loaded } } }
pub mod MultiTexCoord1sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1sv.is_loaded } } }
pub mod MultiTexCoord1svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1svARB.is_loaded } } }
pub mod MultiTexCoord1xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1xOES.is_loaded } } }
pub mod MultiTexCoord1xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord1xvOES.is_loaded } } }
pub mod MultiTexCoord2bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2bOES.is_loaded } } }
pub mod MultiTexCoord2bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2bvOES.is_loaded } } }
pub mod MultiTexCoord2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2d.is_loaded } } }
pub mod MultiTexCoord2dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2dARB.is_loaded } } }
pub mod MultiTexCoord2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2dv.is_loaded } } }
pub mod MultiTexCoord2dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2dvARB.is_loaded } } }
pub mod MultiTexCoord2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2f.is_loaded } } }
pub mod MultiTexCoord2fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2fARB.is_loaded } } }
pub mod MultiTexCoord2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2fv.is_loaded } } }
pub mod MultiTexCoord2fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2fvARB.is_loaded } } }
pub mod MultiTexCoord2hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2hNV.is_loaded } } }
pub mod MultiTexCoord2hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2hvNV.is_loaded } } }
pub mod MultiTexCoord2i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2i.is_loaded } } }
pub mod MultiTexCoord2iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2iARB.is_loaded } } }
pub mod MultiTexCoord2iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2iv.is_loaded } } }
pub mod MultiTexCoord2ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2ivARB.is_loaded } } }
pub mod MultiTexCoord2s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2s.is_loaded } } }
pub mod MultiTexCoord2sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2sARB.is_loaded } } }
pub mod MultiTexCoord2sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2sv.is_loaded } } }
pub mod MultiTexCoord2svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2svARB.is_loaded } } }
pub mod MultiTexCoord2xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2xOES.is_loaded } } }
pub mod MultiTexCoord2xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord2xvOES.is_loaded } } }
pub mod MultiTexCoord3bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3bOES.is_loaded } } }
pub mod MultiTexCoord3bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3bvOES.is_loaded } } }
pub mod MultiTexCoord3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3d.is_loaded } } }
pub mod MultiTexCoord3dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3dARB.is_loaded } } }
pub mod MultiTexCoord3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3dv.is_loaded } } }
pub mod MultiTexCoord3dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3dvARB.is_loaded } } }
pub mod MultiTexCoord3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3f.is_loaded } } }
pub mod MultiTexCoord3fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3fARB.is_loaded } } }
pub mod MultiTexCoord3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3fv.is_loaded } } }
pub mod MultiTexCoord3fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3fvARB.is_loaded } } }
pub mod MultiTexCoord3hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3hNV.is_loaded } } }
pub mod MultiTexCoord3hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3hvNV.is_loaded } } }
pub mod MultiTexCoord3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3i.is_loaded } } }
pub mod MultiTexCoord3iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3iARB.is_loaded } } }
pub mod MultiTexCoord3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3iv.is_loaded } } }
pub mod MultiTexCoord3ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3ivARB.is_loaded } } }
pub mod MultiTexCoord3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3s.is_loaded } } }
pub mod MultiTexCoord3sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3sARB.is_loaded } } }
pub mod MultiTexCoord3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3sv.is_loaded } } }
pub mod MultiTexCoord3svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3svARB.is_loaded } } }
pub mod MultiTexCoord3xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3xOES.is_loaded } } }
pub mod MultiTexCoord3xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord3xvOES.is_loaded } } }
pub mod MultiTexCoord4bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4bOES.is_loaded } } }
pub mod MultiTexCoord4bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4bvOES.is_loaded } } }
pub mod MultiTexCoord4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4d.is_loaded } } }
pub mod MultiTexCoord4dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4dARB.is_loaded } } }
pub mod MultiTexCoord4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4dv.is_loaded } } }
pub mod MultiTexCoord4dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4dvARB.is_loaded } } }
pub mod MultiTexCoord4f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4f.is_loaded } } }
pub mod MultiTexCoord4fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4fARB.is_loaded } } }
pub mod MultiTexCoord4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4fv.is_loaded } } }
pub mod MultiTexCoord4fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4fvARB.is_loaded } } }
pub mod MultiTexCoord4hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4hNV.is_loaded } } }
pub mod MultiTexCoord4hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4hvNV.is_loaded } } }
pub mod MultiTexCoord4i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4i.is_loaded } } }
pub mod MultiTexCoord4iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4iARB.is_loaded } } }
pub mod MultiTexCoord4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4iv.is_loaded } } }
pub mod MultiTexCoord4ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4ivARB.is_loaded } } }
pub mod MultiTexCoord4s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4s.is_loaded } } }
pub mod MultiTexCoord4sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4sARB.is_loaded } } }
pub mod MultiTexCoord4sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4sv.is_loaded } } }
pub mod MultiTexCoord4svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4svARB.is_loaded } } }
pub mod MultiTexCoord4x { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4x.is_loaded } } }
pub mod MultiTexCoord4xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4xOES.is_loaded } } }
pub mod MultiTexCoord4xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoord4xvOES.is_loaded } } }
pub mod MultiTexCoordP1ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordP1ui.is_loaded } } }
pub mod MultiTexCoordP1uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordP1uiv.is_loaded } } }
pub mod MultiTexCoordP2ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordP2ui.is_loaded } } }
pub mod MultiTexCoordP2uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordP2uiv.is_loaded } } }
pub mod MultiTexCoordP3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordP3ui.is_loaded } } }
pub mod MultiTexCoordP3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordP3uiv.is_loaded } } }
pub mod MultiTexCoordP4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordP4ui.is_loaded } } }
pub mod MultiTexCoordP4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordP4uiv.is_loaded } } }
pub mod MultiTexCoordPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexCoordPointerEXT.is_loaded } } }
pub mod MultiTexEnvfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexEnvfEXT.is_loaded } } }
pub mod MultiTexEnvfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexEnvfvEXT.is_loaded } } }
pub mod MultiTexEnviEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexEnviEXT.is_loaded } } }
pub mod MultiTexEnvivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexEnvivEXT.is_loaded } } }
pub mod MultiTexGendEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexGendEXT.is_loaded } } }
pub mod MultiTexGendvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexGendvEXT.is_loaded } } }
pub mod MultiTexGenfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexGenfEXT.is_loaded } } }
pub mod MultiTexGenfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexGenfvEXT.is_loaded } } }
pub mod MultiTexGeniEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexGeniEXT.is_loaded } } }
pub mod MultiTexGenivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexGenivEXT.is_loaded } } }
pub mod MultiTexImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexImage1DEXT.is_loaded } } }
pub mod MultiTexImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexImage2DEXT.is_loaded } } }
pub mod MultiTexImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexImage3DEXT.is_loaded } } }
pub mod MultiTexParameterIivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexParameterIivEXT.is_loaded } } }
pub mod MultiTexParameterIuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexParameterIuivEXT.is_loaded } } }
pub mod MultiTexParameterfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexParameterfEXT.is_loaded } } }
pub mod MultiTexParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexParameterfvEXT.is_loaded } } }
pub mod MultiTexParameteriEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexParameteriEXT.is_loaded } } }
pub mod MultiTexParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexParameterivEXT.is_loaded } } }
pub mod MultiTexRenderbufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexRenderbufferEXT.is_loaded } } }
pub mod MultiTexSubImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexSubImage1DEXT.is_loaded } } }
pub mod MultiTexSubImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexSubImage2DEXT.is_loaded } } }
pub mod MultiTexSubImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::MultiTexSubImage3DEXT.is_loaded } } }
pub mod NamedBufferDataEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedBufferDataEXT.is_loaded } } }
pub mod NamedBufferStorageEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedBufferStorageEXT.is_loaded } } }
pub mod NamedBufferSubDataEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedBufferSubDataEXT.is_loaded } } }
pub mod NamedCopyBufferSubDataEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedCopyBufferSubDataEXT.is_loaded } } }
pub mod NamedFramebufferParameteriEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedFramebufferParameteriEXT.is_loaded } } }
pub mod NamedFramebufferRenderbufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedFramebufferRenderbufferEXT.is_loaded } } }
pub mod NamedFramebufferTexture1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedFramebufferTexture1DEXT.is_loaded } } }
pub mod NamedFramebufferTexture2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedFramebufferTexture2DEXT.is_loaded } } }
pub mod NamedFramebufferTexture3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedFramebufferTexture3DEXT.is_loaded } } }
pub mod NamedFramebufferTextureEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedFramebufferTextureEXT.is_loaded } } }
pub mod NamedFramebufferTextureFaceEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedFramebufferTextureFaceEXT.is_loaded } } }
pub mod NamedFramebufferTextureLayerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedFramebufferTextureLayerEXT.is_loaded } } }
pub mod NamedProgramLocalParameter4dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameter4dEXT.is_loaded } } }
pub mod NamedProgramLocalParameter4dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameter4dvEXT.is_loaded } } }
pub mod NamedProgramLocalParameter4fEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameter4fEXT.is_loaded } } }
pub mod NamedProgramLocalParameter4fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameter4fvEXT.is_loaded } } }
pub mod NamedProgramLocalParameterI4iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameterI4iEXT.is_loaded } } }
pub mod NamedProgramLocalParameterI4ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameterI4ivEXT.is_loaded } } }
pub mod NamedProgramLocalParameterI4uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameterI4uiEXT.is_loaded } } }
pub mod NamedProgramLocalParameterI4uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameterI4uivEXT.is_loaded } } }
pub mod NamedProgramLocalParameters4fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParameters4fvEXT.is_loaded } } }
pub mod NamedProgramLocalParametersI4ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParametersI4ivEXT.is_loaded } } }
pub mod NamedProgramLocalParametersI4uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramLocalParametersI4uivEXT.is_loaded } } }
pub mod NamedProgramStringEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedProgramStringEXT.is_loaded } } }
pub mod NamedRenderbufferStorageEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedRenderbufferStorageEXT.is_loaded } } }
pub mod NamedRenderbufferStorageMultisampleCoverageEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedRenderbufferStorageMultisampleCoverageEXT.is_loaded } } }
pub mod NamedRenderbufferStorageMultisampleEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedRenderbufferStorageMultisampleEXT.is_loaded } } }
pub mod NamedStringARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NamedStringARB.is_loaded } } }
pub mod NewList { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NewList.is_loaded } } }
pub mod NewObjectBufferATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NewObjectBufferATI.is_loaded } } }
pub mod Normal3b { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3b.is_loaded } } }
pub mod Normal3bv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3bv.is_loaded } } }
pub mod Normal3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3d.is_loaded } } }
pub mod Normal3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3dv.is_loaded } } }
pub mod Normal3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3f.is_loaded } } }
pub mod Normal3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3fVertex3fSUN.is_loaded } } }
pub mod Normal3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3fVertex3fvSUN.is_loaded } } }
pub mod Normal3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3fv.is_loaded } } }
pub mod Normal3hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3hNV.is_loaded } } }
pub mod Normal3hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3hvNV.is_loaded } } }
pub mod Normal3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3i.is_loaded } } }
pub mod Normal3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3iv.is_loaded } } }
pub mod Normal3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3s.is_loaded } } }
pub mod Normal3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3sv.is_loaded } } }
pub mod Normal3x { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3x.is_loaded } } }
pub mod Normal3xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3xOES.is_loaded } } }
pub mod Normal3xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Normal3xvOES.is_loaded } } }
pub mod NormalFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalFormatNV.is_loaded } } }
pub mod NormalP3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalP3ui.is_loaded } } }
pub mod NormalP3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalP3uiv.is_loaded } } }
pub mod NormalPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalPointer.is_loaded } } }
pub mod NormalPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalPointerEXT.is_loaded } } }
pub mod NormalPointerListIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalPointerListIBM.is_loaded } } }
pub mod NormalPointervINTEL { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalPointervINTEL.is_loaded } } }
pub mod NormalStream3bATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3bATI.is_loaded } } }
pub mod NormalStream3bvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3bvATI.is_loaded } } }
pub mod NormalStream3dATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3dATI.is_loaded } } }
pub mod NormalStream3dvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3dvATI.is_loaded } } }
pub mod NormalStream3fATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3fATI.is_loaded } } }
pub mod NormalStream3fvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3fvATI.is_loaded } } }
pub mod NormalStream3iATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3iATI.is_loaded } } }
pub mod NormalStream3ivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3ivATI.is_loaded } } }
pub mod NormalStream3sATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3sATI.is_loaded } } }
pub mod NormalStream3svATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::NormalStream3svATI.is_loaded } } }
pub mod ObjectLabel { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ObjectLabel.is_loaded } } }
pub mod ObjectLabelKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ObjectLabelKHR.is_loaded } } }
pub mod ObjectPtrLabel { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ObjectPtrLabel.is_loaded } } }
pub mod ObjectPtrLabelKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ObjectPtrLabelKHR.is_loaded } } }
pub mod ObjectPurgeableAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ObjectPurgeableAPPLE.is_loaded } } }
pub mod ObjectUnpurgeableAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ObjectUnpurgeableAPPLE.is_loaded } } }
pub mod Ortho { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Ortho.is_loaded } } }
pub mod Orthof { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Orthof.is_loaded } } }
pub mod OrthofOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::OrthofOES.is_loaded } } }
pub mod Orthox { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Orthox.is_loaded } } }
pub mod OrthoxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::OrthoxOES.is_loaded } } }
pub mod PNTrianglesfATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PNTrianglesfATI.is_loaded } } }
pub mod PNTrianglesiATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PNTrianglesiATI.is_loaded } } }
pub mod PassTexCoordATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PassTexCoordATI.is_loaded } } }
pub mod PassThrough { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PassThrough.is_loaded } } }
pub mod PassThroughxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PassThroughxOES.is_loaded } } }
pub mod PatchParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PatchParameterfv.is_loaded } } }
pub mod PatchParameteri { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PatchParameteri.is_loaded } } }
pub mod PathColorGenNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathColorGenNV.is_loaded } } }
pub mod PathCommandsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathCommandsNV.is_loaded } } }
pub mod PathCoordsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathCoordsNV.is_loaded } } }
pub mod PathCoverDepthFuncNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathCoverDepthFuncNV.is_loaded } } }
pub mod PathDashArrayNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathDashArrayNV.is_loaded } } }
pub mod PathFogGenNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathFogGenNV.is_loaded } } }
pub mod PathGlyphRangeNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathGlyphRangeNV.is_loaded } } }
pub mod PathGlyphsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathGlyphsNV.is_loaded } } }
pub mod PathParameterfNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathParameterfNV.is_loaded } } }
pub mod PathParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathParameterfvNV.is_loaded } } }
pub mod PathParameteriNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathParameteriNV.is_loaded } } }
pub mod PathParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathParameterivNV.is_loaded } } }
pub mod PathStencilDepthOffsetNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathStencilDepthOffsetNV.is_loaded } } }
pub mod PathStencilFuncNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathStencilFuncNV.is_loaded } } }
pub mod PathStringNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathStringNV.is_loaded } } }
pub mod PathSubCommandsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathSubCommandsNV.is_loaded } } }
pub mod PathSubCoordsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathSubCoordsNV.is_loaded } } }
pub mod PathTexGenNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PathTexGenNV.is_loaded } } }
pub mod PauseTransformFeedback { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PauseTransformFeedback.is_loaded } } }
pub mod PauseTransformFeedbackNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PauseTransformFeedbackNV.is_loaded } } }
pub mod PixelDataRangeNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelDataRangeNV.is_loaded } } }
pub mod PixelMapfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelMapfv.is_loaded } } }
pub mod PixelMapuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelMapuiv.is_loaded } } }
pub mod PixelMapusv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelMapusv.is_loaded } } }
pub mod PixelMapx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelMapx.is_loaded } } }
pub mod PixelStoref { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelStoref.is_loaded } } }
pub mod PixelStorei { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelStorei.is_loaded } } }
pub mod PixelStorex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelStorex.is_loaded } } }
pub mod PixelTexGenParameterfSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTexGenParameterfSGIS.is_loaded } } }
pub mod PixelTexGenParameterfvSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTexGenParameterfvSGIS.is_loaded } } }
pub mod PixelTexGenParameteriSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTexGenParameteriSGIS.is_loaded } } }
pub mod PixelTexGenParameterivSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTexGenParameterivSGIS.is_loaded } } }
pub mod PixelTexGenSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTexGenSGIX.is_loaded } } }
pub mod PixelTransferf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTransferf.is_loaded } } }
pub mod PixelTransferi { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTransferi.is_loaded } } }
pub mod PixelTransferxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTransferxOES.is_loaded } } }
pub mod PixelTransformParameterfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTransformParameterfEXT.is_loaded } } }
pub mod PixelTransformParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTransformParameterfvEXT.is_loaded } } }
pub mod PixelTransformParameteriEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTransformParameteriEXT.is_loaded } } }
pub mod PixelTransformParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelTransformParameterivEXT.is_loaded } } }
pub mod PixelZoom { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelZoom.is_loaded } } }
pub mod PixelZoomxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PixelZoomxOES.is_loaded } } }
pub mod PointAlongPathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointAlongPathNV.is_loaded } } }
pub mod PointParameterf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterf.is_loaded } } }
pub mod PointParameterfARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterfARB.is_loaded } } }
pub mod PointParameterfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterfEXT.is_loaded } } }
pub mod PointParameterfSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterfSGIS.is_loaded } } }
pub mod PointParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterfv.is_loaded } } }
pub mod PointParameterfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterfvARB.is_loaded } } }
pub mod PointParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterfvEXT.is_loaded } } }
pub mod PointParameterfvSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterfvSGIS.is_loaded } } }
pub mod PointParameteri { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameteri.is_loaded } } }
pub mod PointParameteriNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameteriNV.is_loaded } } }
pub mod PointParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameteriv.is_loaded } } }
pub mod PointParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterivNV.is_loaded } } }
pub mod PointParameterx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterx.is_loaded } } }
pub mod PointParameterxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterxOES.is_loaded } } }
pub mod PointParameterxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterxv.is_loaded } } }
pub mod PointParameterxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointParameterxvOES.is_loaded } } }
pub mod PointSize { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointSize.is_loaded } } }
pub mod PointSizePointerOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointSizePointerOES.is_loaded } } }
pub mod PointSizex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointSizex.is_loaded } } }
pub mod PointSizexOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PointSizexOES.is_loaded } } }
pub mod PollAsyncSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PollAsyncSGIX.is_loaded } } }
pub mod PollInstrumentsSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PollInstrumentsSGIX.is_loaded } } }
pub mod PolygonMode { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PolygonMode.is_loaded } } }
pub mod PolygonOffset { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PolygonOffset.is_loaded } } }
pub mod PolygonOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PolygonOffsetEXT.is_loaded } } }
pub mod PolygonOffsetx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PolygonOffsetx.is_loaded } } }
pub mod PolygonOffsetxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PolygonOffsetxOES.is_loaded } } }
pub mod PolygonStipple { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PolygonStipple.is_loaded } } }
pub mod PopAttrib { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PopAttrib.is_loaded } } }
pub mod PopClientAttrib { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PopClientAttrib.is_loaded } } }
pub mod PopDebugGroup { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PopDebugGroup.is_loaded } } }
pub mod PopDebugGroupKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PopDebugGroupKHR.is_loaded } } }
pub mod PopGroupMarkerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PopGroupMarkerEXT.is_loaded } } }
pub mod PopMatrix { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PopMatrix.is_loaded } } }
pub mod PopName { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PopName.is_loaded } } }
pub mod PresentFrameDualFillNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PresentFrameDualFillNV.is_loaded } } }
pub mod PresentFrameKeyedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PresentFrameKeyedNV.is_loaded } } }
pub mod PrimitiveRestartIndex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PrimitiveRestartIndex.is_loaded } } }
pub mod PrimitiveRestartIndexNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PrimitiveRestartIndexNV.is_loaded } } }
pub mod PrimitiveRestartNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PrimitiveRestartNV.is_loaded } } }
pub mod PrioritizeTextures { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PrioritizeTextures.is_loaded } } }
pub mod PrioritizeTexturesEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PrioritizeTexturesEXT.is_loaded } } }
pub mod PrioritizeTexturesxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PrioritizeTexturesxOES.is_loaded } } }
pub mod ProgramBinary { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramBinary.is_loaded } } }
pub mod ProgramBinaryOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramBinaryOES.is_loaded } } }
pub mod ProgramBufferParametersIivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramBufferParametersIivNV.is_loaded } } }
pub mod ProgramBufferParametersIuivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramBufferParametersIuivNV.is_loaded } } }
pub mod ProgramBufferParametersfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramBufferParametersfvNV.is_loaded } } }
pub mod ProgramEnvParameter4dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameter4dARB.is_loaded } } }
pub mod ProgramEnvParameter4dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameter4dvARB.is_loaded } } }
pub mod ProgramEnvParameter4fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameter4fARB.is_loaded } } }
pub mod ProgramEnvParameter4fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameter4fvARB.is_loaded } } }
pub mod ProgramEnvParameterI4iNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameterI4iNV.is_loaded } } }
pub mod ProgramEnvParameterI4ivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameterI4ivNV.is_loaded } } }
pub mod ProgramEnvParameterI4uiNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameterI4uiNV.is_loaded } } }
pub mod ProgramEnvParameterI4uivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameterI4uivNV.is_loaded } } }
pub mod ProgramEnvParameters4fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParameters4fvEXT.is_loaded } } }
pub mod ProgramEnvParametersI4ivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParametersI4ivNV.is_loaded } } }
pub mod ProgramEnvParametersI4uivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramEnvParametersI4uivNV.is_loaded } } }
pub mod ProgramLocalParameter4dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameter4dARB.is_loaded } } }
pub mod ProgramLocalParameter4dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameter4dvARB.is_loaded } } }
pub mod ProgramLocalParameter4fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameter4fARB.is_loaded } } }
pub mod ProgramLocalParameter4fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameter4fvARB.is_loaded } } }
pub mod ProgramLocalParameterI4iNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameterI4iNV.is_loaded } } }
pub mod ProgramLocalParameterI4ivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameterI4ivNV.is_loaded } } }
pub mod ProgramLocalParameterI4uiNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameterI4uiNV.is_loaded } } }
pub mod ProgramLocalParameterI4uivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameterI4uivNV.is_loaded } } }
pub mod ProgramLocalParameters4fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParameters4fvEXT.is_loaded } } }
pub mod ProgramLocalParametersI4ivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParametersI4ivNV.is_loaded } } }
pub mod ProgramLocalParametersI4uivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramLocalParametersI4uivNV.is_loaded } } }
pub mod ProgramNamedParameter4dNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramNamedParameter4dNV.is_loaded } } }
pub mod ProgramNamedParameter4dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramNamedParameter4dvNV.is_loaded } } }
pub mod ProgramNamedParameter4fNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramNamedParameter4fNV.is_loaded } } }
pub mod ProgramNamedParameter4fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramNamedParameter4fvNV.is_loaded } } }
pub mod ProgramParameter4dNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameter4dNV.is_loaded } } }
pub mod ProgramParameter4dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameter4dvNV.is_loaded } } }
pub mod ProgramParameter4fNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameter4fNV.is_loaded } } }
pub mod ProgramParameter4fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameter4fvNV.is_loaded } } }
pub mod ProgramParameteri { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameteri.is_loaded } } }
pub mod ProgramParameteriARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameteriARB.is_loaded } } }
pub mod ProgramParameteriEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameteriEXT.is_loaded } } }
pub mod ProgramParameters4dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameters4dvNV.is_loaded } } }
pub mod ProgramParameters4fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramParameters4fvNV.is_loaded } } }
pub mod ProgramStringARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramStringARB.is_loaded } } }
pub mod ProgramSubroutineParametersuivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramSubroutineParametersuivNV.is_loaded } } }
pub mod ProgramUniform1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1d.is_loaded } } }
pub mod ProgramUniform1dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1dEXT.is_loaded } } }
pub mod ProgramUniform1dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1dv.is_loaded } } }
pub mod ProgramUniform1dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1dvEXT.is_loaded } } }
pub mod ProgramUniform1f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1f.is_loaded } } }
pub mod ProgramUniform1fEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1fEXT.is_loaded } } }
pub mod ProgramUniform1fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1fv.is_loaded } } }
pub mod ProgramUniform1fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1fvEXT.is_loaded } } }
pub mod ProgramUniform1i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1i.is_loaded } } }
pub mod ProgramUniform1i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1i64NV.is_loaded } } }
pub mod ProgramUniform1i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1i64vNV.is_loaded } } }
pub mod ProgramUniform1iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1iEXT.is_loaded } } }
pub mod ProgramUniform1iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1iv.is_loaded } } }
pub mod ProgramUniform1ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1ivEXT.is_loaded } } }
pub mod ProgramUniform1ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1ui.is_loaded } } }
pub mod ProgramUniform1ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1ui64NV.is_loaded } } }
pub mod ProgramUniform1ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1ui64vNV.is_loaded } } }
pub mod ProgramUniform1uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1uiEXT.is_loaded } } }
pub mod ProgramUniform1uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1uiv.is_loaded } } }
pub mod ProgramUniform1uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform1uivEXT.is_loaded } } }
pub mod ProgramUniform2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2d.is_loaded } } }
pub mod ProgramUniform2dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2dEXT.is_loaded } } }
pub mod ProgramUniform2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2dv.is_loaded } } }
pub mod ProgramUniform2dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2dvEXT.is_loaded } } }
pub mod ProgramUniform2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2f.is_loaded } } }
pub mod ProgramUniform2fEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2fEXT.is_loaded } } }
pub mod ProgramUniform2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2fv.is_loaded } } }
pub mod ProgramUniform2fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2fvEXT.is_loaded } } }
pub mod ProgramUniform2i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2i.is_loaded } } }
pub mod ProgramUniform2i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2i64NV.is_loaded } } }
pub mod ProgramUniform2i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2i64vNV.is_loaded } } }
pub mod ProgramUniform2iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2iEXT.is_loaded } } }
pub mod ProgramUniform2iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2iv.is_loaded } } }
pub mod ProgramUniform2ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2ivEXT.is_loaded } } }
pub mod ProgramUniform2ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2ui.is_loaded } } }
pub mod ProgramUniform2ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2ui64NV.is_loaded } } }
pub mod ProgramUniform2ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2ui64vNV.is_loaded } } }
pub mod ProgramUniform2uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2uiEXT.is_loaded } } }
pub mod ProgramUniform2uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2uiv.is_loaded } } }
pub mod ProgramUniform2uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform2uivEXT.is_loaded } } }
pub mod ProgramUniform3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3d.is_loaded } } }
pub mod ProgramUniform3dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3dEXT.is_loaded } } }
pub mod ProgramUniform3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3dv.is_loaded } } }
pub mod ProgramUniform3dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3dvEXT.is_loaded } } }
pub mod ProgramUniform3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3f.is_loaded } } }
pub mod ProgramUniform3fEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3fEXT.is_loaded } } }
pub mod ProgramUniform3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3fv.is_loaded } } }
pub mod ProgramUniform3fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3fvEXT.is_loaded } } }
pub mod ProgramUniform3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3i.is_loaded } } }
pub mod ProgramUniform3i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3i64NV.is_loaded } } }
pub mod ProgramUniform3i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3i64vNV.is_loaded } } }
pub mod ProgramUniform3iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3iEXT.is_loaded } } }
pub mod ProgramUniform3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3iv.is_loaded } } }
pub mod ProgramUniform3ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3ivEXT.is_loaded } } }
pub mod ProgramUniform3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3ui.is_loaded } } }
pub mod ProgramUniform3ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3ui64NV.is_loaded } } }
pub mod ProgramUniform3ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3ui64vNV.is_loaded } } }
pub mod ProgramUniform3uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3uiEXT.is_loaded } } }
pub mod ProgramUniform3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3uiv.is_loaded } } }
pub mod ProgramUniform3uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform3uivEXT.is_loaded } } }
pub mod ProgramUniform4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4d.is_loaded } } }
pub mod ProgramUniform4dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4dEXT.is_loaded } } }
pub mod ProgramUniform4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4dv.is_loaded } } }
pub mod ProgramUniform4dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4dvEXT.is_loaded } } }
pub mod ProgramUniform4f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4f.is_loaded } } }
pub mod ProgramUniform4fEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4fEXT.is_loaded } } }
pub mod ProgramUniform4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4fv.is_loaded } } }
pub mod ProgramUniform4fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4fvEXT.is_loaded } } }
pub mod ProgramUniform4i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4i.is_loaded } } }
pub mod ProgramUniform4i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4i64NV.is_loaded } } }
pub mod ProgramUniform4i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4i64vNV.is_loaded } } }
pub mod ProgramUniform4iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4iEXT.is_loaded } } }
pub mod ProgramUniform4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4iv.is_loaded } } }
pub mod ProgramUniform4ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4ivEXT.is_loaded } } }
pub mod ProgramUniform4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4ui.is_loaded } } }
pub mod ProgramUniform4ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4ui64NV.is_loaded } } }
pub mod ProgramUniform4ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4ui64vNV.is_loaded } } }
pub mod ProgramUniform4uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4uiEXT.is_loaded } } }
pub mod ProgramUniform4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4uiv.is_loaded } } }
pub mod ProgramUniform4uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniform4uivEXT.is_loaded } } }
pub mod ProgramUniformHandleui64ARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformHandleui64ARB.is_loaded } } }
pub mod ProgramUniformHandleui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformHandleui64NV.is_loaded } } }
pub mod ProgramUniformHandleui64vARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformHandleui64vARB.is_loaded } } }
pub mod ProgramUniformHandleui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformHandleui64vNV.is_loaded } } }
pub mod ProgramUniformMatrix2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2dv.is_loaded } } }
pub mod ProgramUniformMatrix2dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2fv.is_loaded } } }
pub mod ProgramUniformMatrix2fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2fvEXT.is_loaded } } }
pub mod ProgramUniformMatrix2x3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2x3dv.is_loaded } } }
pub mod ProgramUniformMatrix2x3dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2x3dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix2x3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2x3fv.is_loaded } } }
pub mod ProgramUniformMatrix2x3fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2x3fvEXT.is_loaded } } }
pub mod ProgramUniformMatrix2x4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2x4dv.is_loaded } } }
pub mod ProgramUniformMatrix2x4dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2x4dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix2x4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2x4fv.is_loaded } } }
pub mod ProgramUniformMatrix2x4fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix2x4fvEXT.is_loaded } } }
pub mod ProgramUniformMatrix3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3dv.is_loaded } } }
pub mod ProgramUniformMatrix3dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3fv.is_loaded } } }
pub mod ProgramUniformMatrix3fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3fvEXT.is_loaded } } }
pub mod ProgramUniformMatrix3x2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3x2dv.is_loaded } } }
pub mod ProgramUniformMatrix3x2dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3x2dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix3x2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3x2fv.is_loaded } } }
pub mod ProgramUniformMatrix3x2fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3x2fvEXT.is_loaded } } }
pub mod ProgramUniformMatrix3x4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3x4dv.is_loaded } } }
pub mod ProgramUniformMatrix3x4dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3x4dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix3x4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3x4fv.is_loaded } } }
pub mod ProgramUniformMatrix3x4fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix3x4fvEXT.is_loaded } } }
pub mod ProgramUniformMatrix4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4dv.is_loaded } } }
pub mod ProgramUniformMatrix4dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4fv.is_loaded } } }
pub mod ProgramUniformMatrix4fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4fvEXT.is_loaded } } }
pub mod ProgramUniformMatrix4x2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4x2dv.is_loaded } } }
pub mod ProgramUniformMatrix4x2dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4x2dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix4x2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4x2fv.is_loaded } } }
pub mod ProgramUniformMatrix4x2fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4x2fvEXT.is_loaded } } }
pub mod ProgramUniformMatrix4x3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4x3dv.is_loaded } } }
pub mod ProgramUniformMatrix4x3dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4x3dvEXT.is_loaded } } }
pub mod ProgramUniformMatrix4x3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4x3fv.is_loaded } } }
pub mod ProgramUniformMatrix4x3fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformMatrix4x3fvEXT.is_loaded } } }
pub mod ProgramUniformui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformui64NV.is_loaded } } }
pub mod ProgramUniformui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramUniformui64vNV.is_loaded } } }
pub mod ProgramVertexLimitNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProgramVertexLimitNV.is_loaded } } }
pub mod ProvokingVertex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProvokingVertex.is_loaded } } }
pub mod ProvokingVertexEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ProvokingVertexEXT.is_loaded } } }
pub mod PushAttrib { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PushAttrib.is_loaded } } }
pub mod PushClientAttrib { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PushClientAttrib.is_loaded } } }
pub mod PushClientAttribDefaultEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PushClientAttribDefaultEXT.is_loaded } } }
pub mod PushDebugGroup { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PushDebugGroup.is_loaded } } }
pub mod PushDebugGroupKHR { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PushDebugGroupKHR.is_loaded } } }
pub mod PushGroupMarkerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PushGroupMarkerEXT.is_loaded } } }
pub mod PushMatrix { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PushMatrix.is_loaded } } }
pub mod PushName { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::PushName.is_loaded } } }
pub mod QueryCounter { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::QueryCounter.is_loaded } } }
pub mod QueryCounterEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::QueryCounterEXT.is_loaded } } }
pub mod QueryMatrixxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::QueryMatrixxOES.is_loaded } } }
pub mod RasterPos2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2d.is_loaded } } }
pub mod RasterPos2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2dv.is_loaded } } }
pub mod RasterPos2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2f.is_loaded } } }
pub mod RasterPos2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2fv.is_loaded } } }
pub mod RasterPos2i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2i.is_loaded } } }
pub mod RasterPos2iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2iv.is_loaded } } }
pub mod RasterPos2s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2s.is_loaded } } }
pub mod RasterPos2sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2sv.is_loaded } } }
pub mod RasterPos2xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2xOES.is_loaded } } }
pub mod RasterPos2xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos2xvOES.is_loaded } } }
pub mod RasterPos3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3d.is_loaded } } }
pub mod RasterPos3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3dv.is_loaded } } }
pub mod RasterPos3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3f.is_loaded } } }
pub mod RasterPos3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3fv.is_loaded } } }
pub mod RasterPos3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3i.is_loaded } } }
pub mod RasterPos3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3iv.is_loaded } } }
pub mod RasterPos3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3s.is_loaded } } }
pub mod RasterPos3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3sv.is_loaded } } }
pub mod RasterPos3xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3xOES.is_loaded } } }
pub mod RasterPos3xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos3xvOES.is_loaded } } }
pub mod RasterPos4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4d.is_loaded } } }
pub mod RasterPos4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4dv.is_loaded } } }
pub mod RasterPos4f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4f.is_loaded } } }
pub mod RasterPos4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4fv.is_loaded } } }
pub mod RasterPos4i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4i.is_loaded } } }
pub mod RasterPos4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4iv.is_loaded } } }
pub mod RasterPos4s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4s.is_loaded } } }
pub mod RasterPos4sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4sv.is_loaded } } }
pub mod RasterPos4xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4xOES.is_loaded } } }
pub mod RasterPos4xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RasterPos4xvOES.is_loaded } } }
pub mod ReadBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReadBuffer.is_loaded } } }
pub mod ReadBufferIndexedEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReadBufferIndexedEXT.is_loaded } } }
pub mod ReadBufferNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReadBufferNV.is_loaded } } }
pub mod ReadInstrumentsSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReadInstrumentsSGIX.is_loaded } } }
pub mod ReadPixels { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReadPixels.is_loaded } } }
pub mod ReadnPixelsARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReadnPixelsARB.is_loaded } } }
pub mod ReadnPixelsEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReadnPixelsEXT.is_loaded } } }
pub mod Rectd { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rectd.is_loaded } } }
pub mod Rectdv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rectdv.is_loaded } } }
pub mod Rectf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rectf.is_loaded } } }
pub mod Rectfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rectfv.is_loaded } } }
pub mod Recti { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Recti.is_loaded } } }
pub mod Rectiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rectiv.is_loaded } } }
pub mod Rects { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rects.is_loaded } } }
pub mod Rectsv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rectsv.is_loaded } } }
pub mod RectxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RectxOES.is_loaded } } }
pub mod RectxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RectxvOES.is_loaded } } }
pub mod ReferencePlaneSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReferencePlaneSGIX.is_loaded } } }
pub mod ReleaseShaderCompiler { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReleaseShaderCompiler.is_loaded } } }
pub mod RenderMode { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderMode.is_loaded } } }
pub mod RenderbufferStorage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorage.is_loaded } } }
pub mod RenderbufferStorageEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageEXT.is_loaded } } }
pub mod RenderbufferStorageMultisample { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageMultisample.is_loaded } } }
pub mod RenderbufferStorageMultisampleANGLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageMultisampleANGLE.is_loaded } } }
pub mod RenderbufferStorageMultisampleAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageMultisampleAPPLE.is_loaded } } }
pub mod RenderbufferStorageMultisampleCoverageNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageMultisampleCoverageNV.is_loaded } } }
pub mod RenderbufferStorageMultisampleEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageMultisampleEXT.is_loaded } } }
pub mod RenderbufferStorageMultisampleIMG { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageMultisampleIMG.is_loaded } } }
pub mod RenderbufferStorageMultisampleNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageMultisampleNV.is_loaded } } }
pub mod RenderbufferStorageOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RenderbufferStorageOES.is_loaded } } }
pub mod ReplacementCodePointerSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodePointerSUN.is_loaded } } }
pub mod ReplacementCodeubSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeubSUN.is_loaded } } }
pub mod ReplacementCodeubvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeubvSUN.is_loaded } } }
pub mod ReplacementCodeuiColor3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiColor3fVertex3fSUN.is_loaded } } }
pub mod ReplacementCodeuiColor3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiColor3fVertex3fvSUN.is_loaded } } }
pub mod ReplacementCodeuiColor4fNormal3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN.is_loaded } } }
pub mod ReplacementCodeuiColor4fNormal3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN.is_loaded } } }
pub mod ReplacementCodeuiColor4ubVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiColor4ubVertex3fSUN.is_loaded } } }
pub mod ReplacementCodeuiColor4ubVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiColor4ubVertex3fvSUN.is_loaded } } }
pub mod ReplacementCodeuiNormal3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiNormal3fVertex3fSUN.is_loaded } } }
pub mod ReplacementCodeuiNormal3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiNormal3fVertex3fvSUN.is_loaded } } }
pub mod ReplacementCodeuiSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiSUN.is_loaded } } }
pub mod ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.is_loaded } } }
pub mod ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.is_loaded } } }
pub mod ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.is_loaded } } }
pub mod ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.is_loaded } } }
pub mod ReplacementCodeuiTexCoord2fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiTexCoord2fVertex3fSUN.is_loaded } } }
pub mod ReplacementCodeuiTexCoord2fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiTexCoord2fVertex3fvSUN.is_loaded } } }
pub mod ReplacementCodeuiVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiVertex3fSUN.is_loaded } } }
pub mod ReplacementCodeuiVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuiVertex3fvSUN.is_loaded } } }
pub mod ReplacementCodeuivSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeuivSUN.is_loaded } } }
pub mod ReplacementCodeusSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeusSUN.is_loaded } } }
pub mod ReplacementCodeusvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ReplacementCodeusvSUN.is_loaded } } }
pub mod RequestResidentProgramsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RequestResidentProgramsNV.is_loaded } } }
pub mod ResetHistogram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ResetHistogram.is_loaded } } }
pub mod ResetHistogramEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ResetHistogramEXT.is_loaded } } }
pub mod ResetMinmax { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ResetMinmax.is_loaded } } }
pub mod ResetMinmaxEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ResetMinmaxEXT.is_loaded } } }
pub mod ResizeBuffersMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ResizeBuffersMESA.is_loaded } } }
pub mod ResolveMultisampleFramebufferAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ResolveMultisampleFramebufferAPPLE.is_loaded } } }
pub mod ResumeTransformFeedback { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ResumeTransformFeedback.is_loaded } } }
pub mod ResumeTransformFeedbackNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ResumeTransformFeedbackNV.is_loaded } } }
pub mod Rotated { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rotated.is_loaded } } }
pub mod Rotatef { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rotatef.is_loaded } } }
pub mod Rotatex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Rotatex.is_loaded } } }
pub mod RotatexOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::RotatexOES.is_loaded } } }
pub mod SampleCoverage { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleCoverage.is_loaded } } }
pub mod SampleCoverageARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleCoverageARB.is_loaded } } }
pub mod SampleCoverageOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleCoverageOES.is_loaded } } }
pub mod SampleCoveragex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleCoveragex.is_loaded } } }
pub mod SampleCoveragexOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleCoveragexOES.is_loaded } } }
pub mod SampleMapATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleMapATI.is_loaded } } }
pub mod SampleMaskEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleMaskEXT.is_loaded } } }
pub mod SampleMaskIndexedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleMaskIndexedNV.is_loaded } } }
pub mod SampleMaskSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleMaskSGIS.is_loaded } } }
pub mod SampleMaski { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SampleMaski.is_loaded } } }
pub mod SamplePatternEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SamplePatternEXT.is_loaded } } }
pub mod SamplePatternSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SamplePatternSGIS.is_loaded } } }
pub mod SamplerParameterIiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SamplerParameterIiv.is_loaded } } }
pub mod SamplerParameterIuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SamplerParameterIuiv.is_loaded } } }
pub mod SamplerParameterf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SamplerParameterf.is_loaded } } }
pub mod SamplerParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SamplerParameterfv.is_loaded } } }
pub mod SamplerParameteri { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SamplerParameteri.is_loaded } } }
pub mod SamplerParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SamplerParameteriv.is_loaded } } }
pub mod Scaled { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Scaled.is_loaded } } }
pub mod Scalef { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Scalef.is_loaded } } }
pub mod Scalex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Scalex.is_loaded } } }
pub mod ScalexOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ScalexOES.is_loaded } } }
pub mod Scissor { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Scissor.is_loaded } } }
pub mod ScissorArrayv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ScissorArrayv.is_loaded } } }
pub mod ScissorIndexed { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ScissorIndexed.is_loaded } } }
pub mod ScissorIndexedv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ScissorIndexedv.is_loaded } } }
pub mod SecondaryColor3b { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3b.is_loaded } } }
pub mod SecondaryColor3bEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3bEXT.is_loaded } } }
pub mod SecondaryColor3bv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3bv.is_loaded } } }
pub mod SecondaryColor3bvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3bvEXT.is_loaded } } }
pub mod SecondaryColor3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3d.is_loaded } } }
pub mod SecondaryColor3dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3dEXT.is_loaded } } }
pub mod SecondaryColor3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3dv.is_loaded } } }
pub mod SecondaryColor3dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3dvEXT.is_loaded } } }
pub mod SecondaryColor3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3f.is_loaded } } }
pub mod SecondaryColor3fEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3fEXT.is_loaded } } }
pub mod SecondaryColor3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3fv.is_loaded } } }
pub mod SecondaryColor3fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3fvEXT.is_loaded } } }
pub mod SecondaryColor3hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3hNV.is_loaded } } }
pub mod SecondaryColor3hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3hvNV.is_loaded } } }
pub mod SecondaryColor3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3i.is_loaded } } }
pub mod SecondaryColor3iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3iEXT.is_loaded } } }
pub mod SecondaryColor3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3iv.is_loaded } } }
pub mod SecondaryColor3ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3ivEXT.is_loaded } } }
pub mod SecondaryColor3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3s.is_loaded } } }
pub mod SecondaryColor3sEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3sEXT.is_loaded } } }
pub mod SecondaryColor3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3sv.is_loaded } } }
pub mod SecondaryColor3svEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3svEXT.is_loaded } } }
pub mod SecondaryColor3ub { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3ub.is_loaded } } }
pub mod SecondaryColor3ubEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3ubEXT.is_loaded } } }
pub mod SecondaryColor3ubv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3ubv.is_loaded } } }
pub mod SecondaryColor3ubvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3ubvEXT.is_loaded } } }
pub mod SecondaryColor3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3ui.is_loaded } } }
pub mod SecondaryColor3uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3uiEXT.is_loaded } } }
pub mod SecondaryColor3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3uiv.is_loaded } } }
pub mod SecondaryColor3uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3uivEXT.is_loaded } } }
pub mod SecondaryColor3us { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3us.is_loaded } } }
pub mod SecondaryColor3usEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3usEXT.is_loaded } } }
pub mod SecondaryColor3usv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3usv.is_loaded } } }
pub mod SecondaryColor3usvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColor3usvEXT.is_loaded } } }
pub mod SecondaryColorFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColorFormatNV.is_loaded } } }
pub mod SecondaryColorP3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColorP3ui.is_loaded } } }
pub mod SecondaryColorP3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColorP3uiv.is_loaded } } }
pub mod SecondaryColorPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColorPointer.is_loaded } } }
pub mod SecondaryColorPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColorPointerEXT.is_loaded } } }
pub mod SecondaryColorPointerListIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SecondaryColorPointerListIBM.is_loaded } } }
pub mod SelectBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SelectBuffer.is_loaded } } }
pub mod SelectPerfMonitorCountersAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SelectPerfMonitorCountersAMD.is_loaded } } }
pub mod SeparableFilter2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SeparableFilter2D.is_loaded } } }
pub mod SeparableFilter2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SeparableFilter2DEXT.is_loaded } } }
pub mod SetFenceAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SetFenceAPPLE.is_loaded } } }
pub mod SetFenceNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SetFenceNV.is_loaded } } }
pub mod SetFragmentShaderConstantATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SetFragmentShaderConstantATI.is_loaded } } }
pub mod SetInvariantEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SetInvariantEXT.is_loaded } } }
pub mod SetLocalConstantEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SetLocalConstantEXT.is_loaded } } }
pub mod SetMultisamplefvAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SetMultisamplefvAMD.is_loaded } } }
pub mod ShadeModel { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ShadeModel.is_loaded } } }
pub mod ShaderBinary { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ShaderBinary.is_loaded } } }
pub mod ShaderOp1EXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ShaderOp1EXT.is_loaded } } }
pub mod ShaderOp2EXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ShaderOp2EXT.is_loaded } } }
pub mod ShaderOp3EXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ShaderOp3EXT.is_loaded } } }
pub mod ShaderSource { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ShaderSource.is_loaded } } }
pub mod ShaderSourceARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ShaderSourceARB.is_loaded } } }
pub mod ShaderStorageBlockBinding { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ShaderStorageBlockBinding.is_loaded } } }
pub mod SharpenTexFuncSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SharpenTexFuncSGIS.is_loaded } } }
pub mod SpriteParameterfSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SpriteParameterfSGIX.is_loaded } } }
pub mod SpriteParameterfvSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SpriteParameterfvSGIX.is_loaded } } }
pub mod SpriteParameteriSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SpriteParameteriSGIX.is_loaded } } }
pub mod SpriteParameterivSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SpriteParameterivSGIX.is_loaded } } }
pub mod StartInstrumentsSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StartInstrumentsSGIX.is_loaded } } }
pub mod StartTilingQCOM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StartTilingQCOM.is_loaded } } }
pub mod StencilClearTagEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilClearTagEXT.is_loaded } } }
pub mod StencilFillPathInstancedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilFillPathInstancedNV.is_loaded } } }
pub mod StencilFillPathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilFillPathNV.is_loaded } } }
pub mod StencilFunc { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilFunc.is_loaded } } }
pub mod StencilFuncSeparate { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilFuncSeparate.is_loaded } } }
pub mod StencilFuncSeparateATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilFuncSeparateATI.is_loaded } } }
pub mod StencilMask { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilMask.is_loaded } } }
pub mod StencilMaskSeparate { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilMaskSeparate.is_loaded } } }
pub mod StencilOp { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilOp.is_loaded } } }
pub mod StencilOpSeparate { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilOpSeparate.is_loaded } } }
pub mod StencilOpSeparateATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilOpSeparateATI.is_loaded } } }
pub mod StencilOpValueAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilOpValueAMD.is_loaded } } }
pub mod StencilStrokePathInstancedNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilStrokePathInstancedNV.is_loaded } } }
pub mod StencilStrokePathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StencilStrokePathNV.is_loaded } } }
pub mod StopInstrumentsSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StopInstrumentsSGIX.is_loaded } } }
pub mod StringMarkerGREMEDY { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::StringMarkerGREMEDY.is_loaded } } }
pub mod SwizzleEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SwizzleEXT.is_loaded } } }
pub mod SyncTextureINTEL { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::SyncTextureINTEL.is_loaded } } }
pub mod TagSampleBufferSGIX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TagSampleBufferSGIX.is_loaded } } }
pub mod Tangent3bEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3bEXT.is_loaded } } }
pub mod Tangent3bvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3bvEXT.is_loaded } } }
pub mod Tangent3dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3dEXT.is_loaded } } }
pub mod Tangent3dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3dvEXT.is_loaded } } }
pub mod Tangent3fEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3fEXT.is_loaded } } }
pub mod Tangent3fvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3fvEXT.is_loaded } } }
pub mod Tangent3iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3iEXT.is_loaded } } }
pub mod Tangent3ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3ivEXT.is_loaded } } }
pub mod Tangent3sEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3sEXT.is_loaded } } }
pub mod Tangent3svEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Tangent3svEXT.is_loaded } } }
pub mod TangentPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TangentPointerEXT.is_loaded } } }
pub mod TbufferMask3DFX { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TbufferMask3DFX.is_loaded } } }
pub mod TessellationFactorAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TessellationFactorAMD.is_loaded } } }
pub mod TessellationModeAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TessellationModeAMD.is_loaded } } }
pub mod TestFenceAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TestFenceAPPLE.is_loaded } } }
pub mod TestFenceNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TestFenceNV.is_loaded } } }
pub mod TestObjectAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TestObjectAPPLE.is_loaded } } }
pub mod TexBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexBuffer.is_loaded } } }
pub mod TexBufferARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexBufferARB.is_loaded } } }
pub mod TexBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexBufferEXT.is_loaded } } }
pub mod TexBufferRange { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexBufferRange.is_loaded } } }
pub mod TexBumpParameterfvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexBumpParameterfvATI.is_loaded } } }
pub mod TexBumpParameterivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexBumpParameterivATI.is_loaded } } }
pub mod TexCoord1bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1bOES.is_loaded } } }
pub mod TexCoord1bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1bvOES.is_loaded } } }
pub mod TexCoord1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1d.is_loaded } } }
pub mod TexCoord1dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1dv.is_loaded } } }
pub mod TexCoord1f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1f.is_loaded } } }
pub mod TexCoord1fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1fv.is_loaded } } }
pub mod TexCoord1hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1hNV.is_loaded } } }
pub mod TexCoord1hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1hvNV.is_loaded } } }
pub mod TexCoord1i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1i.is_loaded } } }
pub mod TexCoord1iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1iv.is_loaded } } }
pub mod TexCoord1s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1s.is_loaded } } }
pub mod TexCoord1sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1sv.is_loaded } } }
pub mod TexCoord1xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1xOES.is_loaded } } }
pub mod TexCoord1xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord1xvOES.is_loaded } } }
pub mod TexCoord2bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2bOES.is_loaded } } }
pub mod TexCoord2bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2bvOES.is_loaded } } }
pub mod TexCoord2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2d.is_loaded } } }
pub mod TexCoord2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2dv.is_loaded } } }
pub mod TexCoord2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2f.is_loaded } } }
pub mod TexCoord2fColor3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fColor3fVertex3fSUN.is_loaded } } }
pub mod TexCoord2fColor3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fColor3fVertex3fvSUN.is_loaded } } }
pub mod TexCoord2fColor4fNormal3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fColor4fNormal3fVertex3fSUN.is_loaded } } }
pub mod TexCoord2fColor4fNormal3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fColor4fNormal3fVertex3fvSUN.is_loaded } } }
pub mod TexCoord2fColor4ubVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fColor4ubVertex3fSUN.is_loaded } } }
pub mod TexCoord2fColor4ubVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fColor4ubVertex3fvSUN.is_loaded } } }
pub mod TexCoord2fNormal3fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fNormal3fVertex3fSUN.is_loaded } } }
pub mod TexCoord2fNormal3fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fNormal3fVertex3fvSUN.is_loaded } } }
pub mod TexCoord2fVertex3fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fVertex3fSUN.is_loaded } } }
pub mod TexCoord2fVertex3fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fVertex3fvSUN.is_loaded } } }
pub mod TexCoord2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2fv.is_loaded } } }
pub mod TexCoord2hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2hNV.is_loaded } } }
pub mod TexCoord2hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2hvNV.is_loaded } } }
pub mod TexCoord2i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2i.is_loaded } } }
pub mod TexCoord2iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2iv.is_loaded } } }
pub mod TexCoord2s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2s.is_loaded } } }
pub mod TexCoord2sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2sv.is_loaded } } }
pub mod TexCoord2xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2xOES.is_loaded } } }
pub mod TexCoord2xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord2xvOES.is_loaded } } }
pub mod TexCoord3bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3bOES.is_loaded } } }
pub mod TexCoord3bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3bvOES.is_loaded } } }
pub mod TexCoord3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3d.is_loaded } } }
pub mod TexCoord3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3dv.is_loaded } } }
pub mod TexCoord3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3f.is_loaded } } }
pub mod TexCoord3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3fv.is_loaded } } }
pub mod TexCoord3hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3hNV.is_loaded } } }
pub mod TexCoord3hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3hvNV.is_loaded } } }
pub mod TexCoord3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3i.is_loaded } } }
pub mod TexCoord3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3iv.is_loaded } } }
pub mod TexCoord3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3s.is_loaded } } }
pub mod TexCoord3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3sv.is_loaded } } }
pub mod TexCoord3xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3xOES.is_loaded } } }
pub mod TexCoord3xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord3xvOES.is_loaded } } }
pub mod TexCoord4bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4bOES.is_loaded } } }
pub mod TexCoord4bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4bvOES.is_loaded } } }
pub mod TexCoord4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4d.is_loaded } } }
pub mod TexCoord4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4dv.is_loaded } } }
pub mod TexCoord4f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4f.is_loaded } } }
pub mod TexCoord4fColor4fNormal3fVertex4fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4fColor4fNormal3fVertex4fSUN.is_loaded } } }
pub mod TexCoord4fColor4fNormal3fVertex4fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4fColor4fNormal3fVertex4fvSUN.is_loaded } } }
pub mod TexCoord4fVertex4fSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4fVertex4fSUN.is_loaded } } }
pub mod TexCoord4fVertex4fvSUN { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4fVertex4fvSUN.is_loaded } } }
pub mod TexCoord4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4fv.is_loaded } } }
pub mod TexCoord4hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4hNV.is_loaded } } }
pub mod TexCoord4hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4hvNV.is_loaded } } }
pub mod TexCoord4i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4i.is_loaded } } }
pub mod TexCoord4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4iv.is_loaded } } }
pub mod TexCoord4s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4s.is_loaded } } }
pub mod TexCoord4sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4sv.is_loaded } } }
pub mod TexCoord4xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4xOES.is_loaded } } }
pub mod TexCoord4xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoord4xvOES.is_loaded } } }
pub mod TexCoordFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordFormatNV.is_loaded } } }
pub mod TexCoordP1ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordP1ui.is_loaded } } }
pub mod TexCoordP1uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordP1uiv.is_loaded } } }
pub mod TexCoordP2ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordP2ui.is_loaded } } }
pub mod TexCoordP2uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordP2uiv.is_loaded } } }
pub mod TexCoordP3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordP3ui.is_loaded } } }
pub mod TexCoordP3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordP3uiv.is_loaded } } }
pub mod TexCoordP4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordP4ui.is_loaded } } }
pub mod TexCoordP4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordP4uiv.is_loaded } } }
pub mod TexCoordPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordPointer.is_loaded } } }
pub mod TexCoordPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordPointerEXT.is_loaded } } }
pub mod TexCoordPointerListIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordPointerListIBM.is_loaded } } }
pub mod TexCoordPointervINTEL { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexCoordPointervINTEL.is_loaded } } }
pub mod TexEnvf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexEnvf.is_loaded } } }
pub mod TexEnvfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexEnvfv.is_loaded } } }
pub mod TexEnvi { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexEnvi.is_loaded } } }
pub mod TexEnviv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexEnviv.is_loaded } } }
pub mod TexEnvx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexEnvx.is_loaded } } }
pub mod TexEnvxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexEnvxOES.is_loaded } } }
pub mod TexEnvxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexEnvxv.is_loaded } } }
pub mod TexEnvxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexEnvxvOES.is_loaded } } }
pub mod TexFilterFuncSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexFilterFuncSGIS.is_loaded } } }
pub mod TexGend { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGend.is_loaded } } }
pub mod TexGendv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGendv.is_loaded } } }
pub mod TexGenf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGenf.is_loaded } } }
pub mod TexGenfOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGenfOES.is_loaded } } }
pub mod TexGenfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGenfv.is_loaded } } }
pub mod TexGenfvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGenfvOES.is_loaded } } }
pub mod TexGeni { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGeni.is_loaded } } }
pub mod TexGeniOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGeniOES.is_loaded } } }
pub mod TexGeniv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGeniv.is_loaded } } }
pub mod TexGenivOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGenivOES.is_loaded } } }
pub mod TexGenxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGenxOES.is_loaded } } }
pub mod TexGenxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexGenxvOES.is_loaded } } }
pub mod TexImage1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage1D.is_loaded } } }
pub mod TexImage2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage2D.is_loaded } } }
pub mod TexImage2DMultisample { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage2DMultisample.is_loaded } } }
pub mod TexImage2DMultisampleCoverageNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage2DMultisampleCoverageNV.is_loaded } } }
pub mod TexImage3D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage3D.is_loaded } } }
pub mod TexImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage3DEXT.is_loaded } } }
pub mod TexImage3DMultisample { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage3DMultisample.is_loaded } } }
pub mod TexImage3DMultisampleCoverageNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage3DMultisampleCoverageNV.is_loaded } } }
pub mod TexImage3DOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage3DOES.is_loaded } } }
pub mod TexImage4DSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexImage4DSGIS.is_loaded } } }
pub mod TexPageCommitmentARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexPageCommitmentARB.is_loaded } } }
pub mod TexParameterIiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterIiv.is_loaded } } }
pub mod TexParameterIivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterIivEXT.is_loaded } } }
pub mod TexParameterIuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterIuiv.is_loaded } } }
pub mod TexParameterIuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterIuivEXT.is_loaded } } }
pub mod TexParameterf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterf.is_loaded } } }
pub mod TexParameterfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterfv.is_loaded } } }
pub mod TexParameteri { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameteri.is_loaded } } }
pub mod TexParameteriv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameteriv.is_loaded } } }
pub mod TexParameterx { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterx.is_loaded } } }
pub mod TexParameterxOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterxOES.is_loaded } } }
pub mod TexParameterxv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterxv.is_loaded } } }
pub mod TexParameterxvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexParameterxvOES.is_loaded } } }
pub mod TexRenderbufferNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexRenderbufferNV.is_loaded } } }
pub mod TexStorage1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorage1D.is_loaded } } }
pub mod TexStorage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorage1DEXT.is_loaded } } }
pub mod TexStorage2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorage2D.is_loaded } } }
pub mod TexStorage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorage2DEXT.is_loaded } } }
pub mod TexStorage2DMultisample { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorage2DMultisample.is_loaded } } }
pub mod TexStorage3D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorage3D.is_loaded } } }
pub mod TexStorage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorage3DEXT.is_loaded } } }
pub mod TexStorage3DMultisample { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorage3DMultisample.is_loaded } } }
pub mod TexStorageSparseAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexStorageSparseAMD.is_loaded } } }
pub mod TexSubImage1D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexSubImage1D.is_loaded } } }
pub mod TexSubImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexSubImage1DEXT.is_loaded } } }
pub mod TexSubImage2D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexSubImage2D.is_loaded } } }
pub mod TexSubImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexSubImage2DEXT.is_loaded } } }
pub mod TexSubImage3D { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexSubImage3D.is_loaded } } }
pub mod TexSubImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexSubImage3DEXT.is_loaded } } }
pub mod TexSubImage3DOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexSubImage3DOES.is_loaded } } }
pub mod TexSubImage4DSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexSubImage4DSGIS.is_loaded } } }
pub mod TextureBarrierNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureBarrierNV.is_loaded } } }
pub mod TextureBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureBufferEXT.is_loaded } } }
pub mod TextureBufferRangeEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureBufferRangeEXT.is_loaded } } }
pub mod TextureColorMaskSGIS { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureColorMaskSGIS.is_loaded } } }
pub mod TextureImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureImage1DEXT.is_loaded } } }
pub mod TextureImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureImage2DEXT.is_loaded } } }
pub mod TextureImage2DMultisampleCoverageNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureImage2DMultisampleCoverageNV.is_loaded } } }
pub mod TextureImage2DMultisampleNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureImage2DMultisampleNV.is_loaded } } }
pub mod TextureImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureImage3DEXT.is_loaded } } }
pub mod TextureImage3DMultisampleCoverageNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureImage3DMultisampleCoverageNV.is_loaded } } }
pub mod TextureImage3DMultisampleNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureImage3DMultisampleNV.is_loaded } } }
pub mod TextureLightEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureLightEXT.is_loaded } } }
pub mod TextureMaterialEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureMaterialEXT.is_loaded } } }
pub mod TextureNormalEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureNormalEXT.is_loaded } } }
pub mod TexturePageCommitmentEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TexturePageCommitmentEXT.is_loaded } } }
pub mod TextureParameterIivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureParameterIivEXT.is_loaded } } }
pub mod TextureParameterIuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureParameterIuivEXT.is_loaded } } }
pub mod TextureParameterfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureParameterfEXT.is_loaded } } }
pub mod TextureParameterfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureParameterfvEXT.is_loaded } } }
pub mod TextureParameteriEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureParameteriEXT.is_loaded } } }
pub mod TextureParameterivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureParameterivEXT.is_loaded } } }
pub mod TextureRangeAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureRangeAPPLE.is_loaded } } }
pub mod TextureRenderbufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureRenderbufferEXT.is_loaded } } }
pub mod TextureStorage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureStorage1DEXT.is_loaded } } }
pub mod TextureStorage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureStorage2DEXT.is_loaded } } }
pub mod TextureStorage2DMultisampleEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureStorage2DMultisampleEXT.is_loaded } } }
pub mod TextureStorage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureStorage3DEXT.is_loaded } } }
pub mod TextureStorage3DMultisampleEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureStorage3DMultisampleEXT.is_loaded } } }
pub mod TextureStorageSparseAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureStorageSparseAMD.is_loaded } } }
pub mod TextureSubImage1DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureSubImage1DEXT.is_loaded } } }
pub mod TextureSubImage2DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureSubImage2DEXT.is_loaded } } }
pub mod TextureSubImage3DEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureSubImage3DEXT.is_loaded } } }
pub mod TextureView { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TextureView.is_loaded } } }
pub mod TrackMatrixNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TrackMatrixNV.is_loaded } } }
pub mod TransformFeedbackAttribsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TransformFeedbackAttribsNV.is_loaded } } }
pub mod TransformFeedbackStreamAttribsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TransformFeedbackStreamAttribsNV.is_loaded } } }
pub mod TransformFeedbackVaryings { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TransformFeedbackVaryings.is_loaded } } }
pub mod TransformFeedbackVaryingsEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TransformFeedbackVaryingsEXT.is_loaded } } }
pub mod TransformFeedbackVaryingsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TransformFeedbackVaryingsNV.is_loaded } } }
pub mod TransformPathNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TransformPathNV.is_loaded } } }
pub mod Translated { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Translated.is_loaded } } }
pub mod Translatef { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Translatef.is_loaded } } }
pub mod Translatex { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Translatex.is_loaded } } }
pub mod TranslatexOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::TranslatexOES.is_loaded } } }
pub mod Uniform1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1d.is_loaded } } }
pub mod Uniform1dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1dv.is_loaded } } }
pub mod Uniform1f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1f.is_loaded } } }
pub mod Uniform1fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1fARB.is_loaded } } }
pub mod Uniform1fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1fv.is_loaded } } }
pub mod Uniform1fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1fvARB.is_loaded } } }
pub mod Uniform1i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1i.is_loaded } } }
pub mod Uniform1i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1i64NV.is_loaded } } }
pub mod Uniform1i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1i64vNV.is_loaded } } }
pub mod Uniform1iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1iARB.is_loaded } } }
pub mod Uniform1iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1iv.is_loaded } } }
pub mod Uniform1ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1ivARB.is_loaded } } }
pub mod Uniform1ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1ui.is_loaded } } }
pub mod Uniform1ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1ui64NV.is_loaded } } }
pub mod Uniform1ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1ui64vNV.is_loaded } } }
pub mod Uniform1uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1uiEXT.is_loaded } } }
pub mod Uniform1uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1uiv.is_loaded } } }
pub mod Uniform1uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform1uivEXT.is_loaded } } }
pub mod Uniform2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2d.is_loaded } } }
pub mod Uniform2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2dv.is_loaded } } }
pub mod Uniform2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2f.is_loaded } } }
pub mod Uniform2fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2fARB.is_loaded } } }
pub mod Uniform2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2fv.is_loaded } } }
pub mod Uniform2fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2fvARB.is_loaded } } }
pub mod Uniform2i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2i.is_loaded } } }
pub mod Uniform2i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2i64NV.is_loaded } } }
pub mod Uniform2i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2i64vNV.is_loaded } } }
pub mod Uniform2iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2iARB.is_loaded } } }
pub mod Uniform2iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2iv.is_loaded } } }
pub mod Uniform2ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2ivARB.is_loaded } } }
pub mod Uniform2ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2ui.is_loaded } } }
pub mod Uniform2ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2ui64NV.is_loaded } } }
pub mod Uniform2ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2ui64vNV.is_loaded } } }
pub mod Uniform2uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2uiEXT.is_loaded } } }
pub mod Uniform2uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2uiv.is_loaded } } }
pub mod Uniform2uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform2uivEXT.is_loaded } } }
pub mod Uniform3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3d.is_loaded } } }
pub mod Uniform3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3dv.is_loaded } } }
pub mod Uniform3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3f.is_loaded } } }
pub mod Uniform3fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3fARB.is_loaded } } }
pub mod Uniform3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3fv.is_loaded } } }
pub mod Uniform3fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3fvARB.is_loaded } } }
pub mod Uniform3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3i.is_loaded } } }
pub mod Uniform3i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3i64NV.is_loaded } } }
pub mod Uniform3i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3i64vNV.is_loaded } } }
pub mod Uniform3iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3iARB.is_loaded } } }
pub mod Uniform3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3iv.is_loaded } } }
pub mod Uniform3ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3ivARB.is_loaded } } }
pub mod Uniform3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3ui.is_loaded } } }
pub mod Uniform3ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3ui64NV.is_loaded } } }
pub mod Uniform3ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3ui64vNV.is_loaded } } }
pub mod Uniform3uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3uiEXT.is_loaded } } }
pub mod Uniform3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3uiv.is_loaded } } }
pub mod Uniform3uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform3uivEXT.is_loaded } } }
pub mod Uniform4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4d.is_loaded } } }
pub mod Uniform4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4dv.is_loaded } } }
pub mod Uniform4f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4f.is_loaded } } }
pub mod Uniform4fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4fARB.is_loaded } } }
pub mod Uniform4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4fv.is_loaded } } }
pub mod Uniform4fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4fvARB.is_loaded } } }
pub mod Uniform4i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4i.is_loaded } } }
pub mod Uniform4i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4i64NV.is_loaded } } }
pub mod Uniform4i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4i64vNV.is_loaded } } }
pub mod Uniform4iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4iARB.is_loaded } } }
pub mod Uniform4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4iv.is_loaded } } }
pub mod Uniform4ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4ivARB.is_loaded } } }
pub mod Uniform4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4ui.is_loaded } } }
pub mod Uniform4ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4ui64NV.is_loaded } } }
pub mod Uniform4ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4ui64vNV.is_loaded } } }
pub mod Uniform4uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4uiEXT.is_loaded } } }
pub mod Uniform4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4uiv.is_loaded } } }
pub mod Uniform4uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniform4uivEXT.is_loaded } } }
pub mod UniformBlockBinding { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformBlockBinding.is_loaded } } }
pub mod UniformBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformBufferEXT.is_loaded } } }
pub mod UniformHandleui64ARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformHandleui64ARB.is_loaded } } }
pub mod UniformHandleui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformHandleui64NV.is_loaded } } }
pub mod UniformHandleui64vARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformHandleui64vARB.is_loaded } } }
pub mod UniformHandleui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformHandleui64vNV.is_loaded } } }
pub mod UniformMatrix2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix2dv.is_loaded } } }
pub mod UniformMatrix2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix2fv.is_loaded } } }
pub mod UniformMatrix2fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix2fvARB.is_loaded } } }
pub mod UniformMatrix2x3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix2x3dv.is_loaded } } }
pub mod UniformMatrix2x3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix2x3fv.is_loaded } } }
pub mod UniformMatrix2x4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix2x4dv.is_loaded } } }
pub mod UniformMatrix2x4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix2x4fv.is_loaded } } }
pub mod UniformMatrix3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix3dv.is_loaded } } }
pub mod UniformMatrix3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix3fv.is_loaded } } }
pub mod UniformMatrix3fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix3fvARB.is_loaded } } }
pub mod UniformMatrix3x2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix3x2dv.is_loaded } } }
pub mod UniformMatrix3x2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix3x2fv.is_loaded } } }
pub mod UniformMatrix3x4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix3x4dv.is_loaded } } }
pub mod UniformMatrix3x4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix3x4fv.is_loaded } } }
pub mod UniformMatrix4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix4dv.is_loaded } } }
pub mod UniformMatrix4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix4fv.is_loaded } } }
pub mod UniformMatrix4fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix4fvARB.is_loaded } } }
pub mod UniformMatrix4x2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix4x2dv.is_loaded } } }
pub mod UniformMatrix4x2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix4x2fv.is_loaded } } }
pub mod UniformMatrix4x3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix4x3dv.is_loaded } } }
pub mod UniformMatrix4x3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformMatrix4x3fv.is_loaded } } }
pub mod UniformSubroutinesuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UniformSubroutinesuiv.is_loaded } } }
pub mod Uniformui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniformui64NV.is_loaded } } }
pub mod Uniformui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Uniformui64vNV.is_loaded } } }
pub mod UnlockArraysEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UnlockArraysEXT.is_loaded } } }
pub mod UnmapBuffer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UnmapBuffer.is_loaded } } }
pub mod UnmapBufferARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UnmapBufferARB.is_loaded } } }
pub mod UnmapBufferOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UnmapBufferOES.is_loaded } } }
pub mod UnmapNamedBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UnmapNamedBufferEXT.is_loaded } } }
pub mod UnmapObjectBufferATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UnmapObjectBufferATI.is_loaded } } }
pub mod UnmapTexture2DINTEL { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UnmapTexture2DINTEL.is_loaded } } }
pub mod UpdateObjectBufferATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UpdateObjectBufferATI.is_loaded } } }
pub mod UseProgram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UseProgram.is_loaded } } }
pub mod UseProgramObjectARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UseProgramObjectARB.is_loaded } } }
pub mod UseProgramStages { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UseProgramStages.is_loaded } } }
pub mod UseProgramStagesEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UseProgramStagesEXT.is_loaded } } }
pub mod UseShaderProgramEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::UseShaderProgramEXT.is_loaded } } }
pub mod VDPAUFiniNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAUFiniNV.is_loaded } } }
pub mod VDPAUGetSurfaceivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAUGetSurfaceivNV.is_loaded } } }
pub mod VDPAUInitNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAUInitNV.is_loaded } } }
pub mod VDPAUIsSurfaceNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAUIsSurfaceNV.is_loaded } } }
pub mod VDPAUMapSurfacesNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAUMapSurfacesNV.is_loaded } } }
pub mod VDPAURegisterOutputSurfaceNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAURegisterOutputSurfaceNV.is_loaded } } }
pub mod VDPAURegisterVideoSurfaceNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAURegisterVideoSurfaceNV.is_loaded } } }
pub mod VDPAUSurfaceAccessNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAUSurfaceAccessNV.is_loaded } } }
pub mod VDPAUUnmapSurfacesNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAUUnmapSurfacesNV.is_loaded } } }
pub mod VDPAUUnregisterSurfaceNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VDPAUUnregisterSurfaceNV.is_loaded } } }
pub mod ValidateProgram { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ValidateProgram.is_loaded } } }
pub mod ValidateProgramARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ValidateProgramARB.is_loaded } } }
pub mod ValidateProgramPipeline { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ValidateProgramPipeline.is_loaded } } }
pub mod ValidateProgramPipelineEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ValidateProgramPipelineEXT.is_loaded } } }
pub mod VariantArrayObjectATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantArrayObjectATI.is_loaded } } }
pub mod VariantPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantPointerEXT.is_loaded } } }
pub mod VariantbvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantbvEXT.is_loaded } } }
pub mod VariantdvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantdvEXT.is_loaded } } }
pub mod VariantfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantfvEXT.is_loaded } } }
pub mod VariantivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantivEXT.is_loaded } } }
pub mod VariantsvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantsvEXT.is_loaded } } }
pub mod VariantubvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantubvEXT.is_loaded } } }
pub mod VariantuivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantuivEXT.is_loaded } } }
pub mod VariantusvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VariantusvEXT.is_loaded } } }
pub mod Vertex2bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2bOES.is_loaded } } }
pub mod Vertex2bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2bvOES.is_loaded } } }
pub mod Vertex2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2d.is_loaded } } }
pub mod Vertex2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2dv.is_loaded } } }
pub mod Vertex2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2f.is_loaded } } }
pub mod Vertex2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2fv.is_loaded } } }
pub mod Vertex2hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2hNV.is_loaded } } }
pub mod Vertex2hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2hvNV.is_loaded } } }
pub mod Vertex2i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2i.is_loaded } } }
pub mod Vertex2iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2iv.is_loaded } } }
pub mod Vertex2s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2s.is_loaded } } }
pub mod Vertex2sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2sv.is_loaded } } }
pub mod Vertex2xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2xOES.is_loaded } } }
pub mod Vertex2xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex2xvOES.is_loaded } } }
pub mod Vertex3bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3bOES.is_loaded } } }
pub mod Vertex3bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3bvOES.is_loaded } } }
pub mod Vertex3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3d.is_loaded } } }
pub mod Vertex3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3dv.is_loaded } } }
pub mod Vertex3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3f.is_loaded } } }
pub mod Vertex3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3fv.is_loaded } } }
pub mod Vertex3hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3hNV.is_loaded } } }
pub mod Vertex3hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3hvNV.is_loaded } } }
pub mod Vertex3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3i.is_loaded } } }
pub mod Vertex3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3iv.is_loaded } } }
pub mod Vertex3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3s.is_loaded } } }
pub mod Vertex3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3sv.is_loaded } } }
pub mod Vertex3xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3xOES.is_loaded } } }
pub mod Vertex3xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex3xvOES.is_loaded } } }
pub mod Vertex4bOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4bOES.is_loaded } } }
pub mod Vertex4bvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4bvOES.is_loaded } } }
pub mod Vertex4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4d.is_loaded } } }
pub mod Vertex4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4dv.is_loaded } } }
pub mod Vertex4f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4f.is_loaded } } }
pub mod Vertex4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4fv.is_loaded } } }
pub mod Vertex4hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4hNV.is_loaded } } }
pub mod Vertex4hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4hvNV.is_loaded } } }
pub mod Vertex4i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4i.is_loaded } } }
pub mod Vertex4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4iv.is_loaded } } }
pub mod Vertex4s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4s.is_loaded } } }
pub mod Vertex4sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4sv.is_loaded } } }
pub mod Vertex4xOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4xOES.is_loaded } } }
pub mod Vertex4xvOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Vertex4xvOES.is_loaded } } }
pub mod VertexArrayBindVertexBufferEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayBindVertexBufferEXT.is_loaded } } }
pub mod VertexArrayColorOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayColorOffsetEXT.is_loaded } } }
pub mod VertexArrayEdgeFlagOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayEdgeFlagOffsetEXT.is_loaded } } }
pub mod VertexArrayFogCoordOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayFogCoordOffsetEXT.is_loaded } } }
pub mod VertexArrayIndexOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayIndexOffsetEXT.is_loaded } } }
pub mod VertexArrayMultiTexCoordOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayMultiTexCoordOffsetEXT.is_loaded } } }
pub mod VertexArrayNormalOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayNormalOffsetEXT.is_loaded } } }
pub mod VertexArrayParameteriAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayParameteriAPPLE.is_loaded } } }
pub mod VertexArrayRangeAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayRangeAPPLE.is_loaded } } }
pub mod VertexArrayRangeNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayRangeNV.is_loaded } } }
pub mod VertexArraySecondaryColorOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArraySecondaryColorOffsetEXT.is_loaded } } }
pub mod VertexArrayTexCoordOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayTexCoordOffsetEXT.is_loaded } } }
pub mod VertexArrayVertexAttribBindingEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexAttribBindingEXT.is_loaded } } }
pub mod VertexArrayVertexAttribFormatEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexAttribFormatEXT.is_loaded } } }
pub mod VertexArrayVertexAttribIFormatEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexAttribIFormatEXT.is_loaded } } }
pub mod VertexArrayVertexAttribIOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexAttribIOffsetEXT.is_loaded } } }
pub mod VertexArrayVertexAttribLFormatEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexAttribLFormatEXT.is_loaded } } }
pub mod VertexArrayVertexAttribLOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexAttribLOffsetEXT.is_loaded } } }
pub mod VertexArrayVertexAttribOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexAttribOffsetEXT.is_loaded } } }
pub mod VertexArrayVertexBindingDivisorEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexBindingDivisorEXT.is_loaded } } }
pub mod VertexArrayVertexOffsetEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexArrayVertexOffsetEXT.is_loaded } } }
pub mod VertexAttrib1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1d.is_loaded } } }
pub mod VertexAttrib1dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1dARB.is_loaded } } }
pub mod VertexAttrib1dNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1dNV.is_loaded } } }
pub mod VertexAttrib1dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1dv.is_loaded } } }
pub mod VertexAttrib1dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1dvARB.is_loaded } } }
pub mod VertexAttrib1dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1dvNV.is_loaded } } }
pub mod VertexAttrib1f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1f.is_loaded } } }
pub mod VertexAttrib1fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1fARB.is_loaded } } }
pub mod VertexAttrib1fNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1fNV.is_loaded } } }
pub mod VertexAttrib1fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1fv.is_loaded } } }
pub mod VertexAttrib1fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1fvARB.is_loaded } } }
pub mod VertexAttrib1fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1fvNV.is_loaded } } }
pub mod VertexAttrib1hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1hNV.is_loaded } } }
pub mod VertexAttrib1hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1hvNV.is_loaded } } }
pub mod VertexAttrib1s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1s.is_loaded } } }
pub mod VertexAttrib1sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1sARB.is_loaded } } }
pub mod VertexAttrib1sNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1sNV.is_loaded } } }
pub mod VertexAttrib1sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1sv.is_loaded } } }
pub mod VertexAttrib1svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1svARB.is_loaded } } }
pub mod VertexAttrib1svNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib1svNV.is_loaded } } }
pub mod VertexAttrib2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2d.is_loaded } } }
pub mod VertexAttrib2dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2dARB.is_loaded } } }
pub mod VertexAttrib2dNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2dNV.is_loaded } } }
pub mod VertexAttrib2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2dv.is_loaded } } }
pub mod VertexAttrib2dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2dvARB.is_loaded } } }
pub mod VertexAttrib2dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2dvNV.is_loaded } } }
pub mod VertexAttrib2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2f.is_loaded } } }
pub mod VertexAttrib2fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2fARB.is_loaded } } }
pub mod VertexAttrib2fNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2fNV.is_loaded } } }
pub mod VertexAttrib2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2fv.is_loaded } } }
pub mod VertexAttrib2fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2fvARB.is_loaded } } }
pub mod VertexAttrib2fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2fvNV.is_loaded } } }
pub mod VertexAttrib2hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2hNV.is_loaded } } }
pub mod VertexAttrib2hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2hvNV.is_loaded } } }
pub mod VertexAttrib2s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2s.is_loaded } } }
pub mod VertexAttrib2sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2sARB.is_loaded } } }
pub mod VertexAttrib2sNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2sNV.is_loaded } } }
pub mod VertexAttrib2sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2sv.is_loaded } } }
pub mod VertexAttrib2svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2svARB.is_loaded } } }
pub mod VertexAttrib2svNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib2svNV.is_loaded } } }
pub mod VertexAttrib3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3d.is_loaded } } }
pub mod VertexAttrib3dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3dARB.is_loaded } } }
pub mod VertexAttrib3dNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3dNV.is_loaded } } }
pub mod VertexAttrib3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3dv.is_loaded } } }
pub mod VertexAttrib3dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3dvARB.is_loaded } } }
pub mod VertexAttrib3dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3dvNV.is_loaded } } }
pub mod VertexAttrib3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3f.is_loaded } } }
pub mod VertexAttrib3fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3fARB.is_loaded } } }
pub mod VertexAttrib3fNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3fNV.is_loaded } } }
pub mod VertexAttrib3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3fv.is_loaded } } }
pub mod VertexAttrib3fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3fvARB.is_loaded } } }
pub mod VertexAttrib3fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3fvNV.is_loaded } } }
pub mod VertexAttrib3hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3hNV.is_loaded } } }
pub mod VertexAttrib3hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3hvNV.is_loaded } } }
pub mod VertexAttrib3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3s.is_loaded } } }
pub mod VertexAttrib3sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3sARB.is_loaded } } }
pub mod VertexAttrib3sNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3sNV.is_loaded } } }
pub mod VertexAttrib3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3sv.is_loaded } } }
pub mod VertexAttrib3svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3svARB.is_loaded } } }
pub mod VertexAttrib3svNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib3svNV.is_loaded } } }
pub mod VertexAttrib4Nbv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4Nbv.is_loaded } } }
pub mod VertexAttrib4NbvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4NbvARB.is_loaded } } }
pub mod VertexAttrib4Niv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4Niv.is_loaded } } }
pub mod VertexAttrib4NivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4NivARB.is_loaded } } }
pub mod VertexAttrib4Nsv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4Nsv.is_loaded } } }
pub mod VertexAttrib4NsvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4NsvARB.is_loaded } } }
pub mod VertexAttrib4Nub { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4Nub.is_loaded } } }
pub mod VertexAttrib4NubARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4NubARB.is_loaded } } }
pub mod VertexAttrib4Nubv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4Nubv.is_loaded } } }
pub mod VertexAttrib4NubvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4NubvARB.is_loaded } } }
pub mod VertexAttrib4Nuiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4Nuiv.is_loaded } } }
pub mod VertexAttrib4NuivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4NuivARB.is_loaded } } }
pub mod VertexAttrib4Nusv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4Nusv.is_loaded } } }
pub mod VertexAttrib4NusvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4NusvARB.is_loaded } } }
pub mod VertexAttrib4bv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4bv.is_loaded } } }
pub mod VertexAttrib4bvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4bvARB.is_loaded } } }
pub mod VertexAttrib4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4d.is_loaded } } }
pub mod VertexAttrib4dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4dARB.is_loaded } } }
pub mod VertexAttrib4dNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4dNV.is_loaded } } }
pub mod VertexAttrib4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4dv.is_loaded } } }
pub mod VertexAttrib4dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4dvARB.is_loaded } } }
pub mod VertexAttrib4dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4dvNV.is_loaded } } }
pub mod VertexAttrib4f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4f.is_loaded } } }
pub mod VertexAttrib4fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4fARB.is_loaded } } }
pub mod VertexAttrib4fNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4fNV.is_loaded } } }
pub mod VertexAttrib4fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4fv.is_loaded } } }
pub mod VertexAttrib4fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4fvARB.is_loaded } } }
pub mod VertexAttrib4fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4fvNV.is_loaded } } }
pub mod VertexAttrib4hNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4hNV.is_loaded } } }
pub mod VertexAttrib4hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4hvNV.is_loaded } } }
pub mod VertexAttrib4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4iv.is_loaded } } }
pub mod VertexAttrib4ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4ivARB.is_loaded } } }
pub mod VertexAttrib4s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4s.is_loaded } } }
pub mod VertexAttrib4sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4sARB.is_loaded } } }
pub mod VertexAttrib4sNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4sNV.is_loaded } } }
pub mod VertexAttrib4sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4sv.is_loaded } } }
pub mod VertexAttrib4svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4svARB.is_loaded } } }
pub mod VertexAttrib4svNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4svNV.is_loaded } } }
pub mod VertexAttrib4ubNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4ubNV.is_loaded } } }
pub mod VertexAttrib4ubv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4ubv.is_loaded } } }
pub mod VertexAttrib4ubvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4ubvARB.is_loaded } } }
pub mod VertexAttrib4ubvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4ubvNV.is_loaded } } }
pub mod VertexAttrib4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4uiv.is_loaded } } }
pub mod VertexAttrib4uivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4uivARB.is_loaded } } }
pub mod VertexAttrib4usv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4usv.is_loaded } } }
pub mod VertexAttrib4usvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttrib4usvARB.is_loaded } } }
pub mod VertexAttribArrayObjectATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribArrayObjectATI.is_loaded } } }
pub mod VertexAttribBinding { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribBinding.is_loaded } } }
pub mod VertexAttribDivisor { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribDivisor.is_loaded } } }
pub mod VertexAttribDivisorANGLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribDivisorANGLE.is_loaded } } }
pub mod VertexAttribDivisorARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribDivisorARB.is_loaded } } }
pub mod VertexAttribDivisorNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribDivisorNV.is_loaded } } }
pub mod VertexAttribFormat { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribFormat.is_loaded } } }
pub mod VertexAttribFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribFormatNV.is_loaded } } }
pub mod VertexAttribI1i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI1i.is_loaded } } }
pub mod VertexAttribI1iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI1iEXT.is_loaded } } }
pub mod VertexAttribI1iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI1iv.is_loaded } } }
pub mod VertexAttribI1ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI1ivEXT.is_loaded } } }
pub mod VertexAttribI1ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI1ui.is_loaded } } }
pub mod VertexAttribI1uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI1uiEXT.is_loaded } } }
pub mod VertexAttribI1uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI1uiv.is_loaded } } }
pub mod VertexAttribI1uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI1uivEXT.is_loaded } } }
pub mod VertexAttribI2i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI2i.is_loaded } } }
pub mod VertexAttribI2iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI2iEXT.is_loaded } } }
pub mod VertexAttribI2iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI2iv.is_loaded } } }
pub mod VertexAttribI2ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI2ivEXT.is_loaded } } }
pub mod VertexAttribI2ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI2ui.is_loaded } } }
pub mod VertexAttribI2uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI2uiEXT.is_loaded } } }
pub mod VertexAttribI2uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI2uiv.is_loaded } } }
pub mod VertexAttribI2uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI2uivEXT.is_loaded } } }
pub mod VertexAttribI3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI3i.is_loaded } } }
pub mod VertexAttribI3iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI3iEXT.is_loaded } } }
pub mod VertexAttribI3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI3iv.is_loaded } } }
pub mod VertexAttribI3ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI3ivEXT.is_loaded } } }
pub mod VertexAttribI3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI3ui.is_loaded } } }
pub mod VertexAttribI3uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI3uiEXT.is_loaded } } }
pub mod VertexAttribI3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI3uiv.is_loaded } } }
pub mod VertexAttribI3uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI3uivEXT.is_loaded } } }
pub mod VertexAttribI4bv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4bv.is_loaded } } }
pub mod VertexAttribI4bvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4bvEXT.is_loaded } } }
pub mod VertexAttribI4i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4i.is_loaded } } }
pub mod VertexAttribI4iEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4iEXT.is_loaded } } }
pub mod VertexAttribI4iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4iv.is_loaded } } }
pub mod VertexAttribI4ivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4ivEXT.is_loaded } } }
pub mod VertexAttribI4sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4sv.is_loaded } } }
pub mod VertexAttribI4svEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4svEXT.is_loaded } } }
pub mod VertexAttribI4ubv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4ubv.is_loaded } } }
pub mod VertexAttribI4ubvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4ubvEXT.is_loaded } } }
pub mod VertexAttribI4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4ui.is_loaded } } }
pub mod VertexAttribI4uiEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4uiEXT.is_loaded } } }
pub mod VertexAttribI4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4uiv.is_loaded } } }
pub mod VertexAttribI4uivEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4uivEXT.is_loaded } } }
pub mod VertexAttribI4usv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4usv.is_loaded } } }
pub mod VertexAttribI4usvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribI4usvEXT.is_loaded } } }
pub mod VertexAttribIFormat { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribIFormat.is_loaded } } }
pub mod VertexAttribIFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribIFormatNV.is_loaded } } }
pub mod VertexAttribIPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribIPointer.is_loaded } } }
pub mod VertexAttribIPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribIPointerEXT.is_loaded } } }
pub mod VertexAttribL1d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1d.is_loaded } } }
pub mod VertexAttribL1dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1dEXT.is_loaded } } }
pub mod VertexAttribL1dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1dv.is_loaded } } }
pub mod VertexAttribL1dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1dvEXT.is_loaded } } }
pub mod VertexAttribL1i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1i64NV.is_loaded } } }
pub mod VertexAttribL1i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1i64vNV.is_loaded } } }
pub mod VertexAttribL1ui64ARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1ui64ARB.is_loaded } } }
pub mod VertexAttribL1ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1ui64NV.is_loaded } } }
pub mod VertexAttribL1ui64vARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1ui64vARB.is_loaded } } }
pub mod VertexAttribL1ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL1ui64vNV.is_loaded } } }
pub mod VertexAttribL2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL2d.is_loaded } } }
pub mod VertexAttribL2dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL2dEXT.is_loaded } } }
pub mod VertexAttribL2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL2dv.is_loaded } } }
pub mod VertexAttribL2dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL2dvEXT.is_loaded } } }
pub mod VertexAttribL2i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL2i64NV.is_loaded } } }
pub mod VertexAttribL2i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL2i64vNV.is_loaded } } }
pub mod VertexAttribL2ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL2ui64NV.is_loaded } } }
pub mod VertexAttribL2ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL2ui64vNV.is_loaded } } }
pub mod VertexAttribL3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL3d.is_loaded } } }
pub mod VertexAttribL3dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL3dEXT.is_loaded } } }
pub mod VertexAttribL3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL3dv.is_loaded } } }
pub mod VertexAttribL3dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL3dvEXT.is_loaded } } }
pub mod VertexAttribL3i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL3i64NV.is_loaded } } }
pub mod VertexAttribL3i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL3i64vNV.is_loaded } } }
pub mod VertexAttribL3ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL3ui64NV.is_loaded } } }
pub mod VertexAttribL3ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL3ui64vNV.is_loaded } } }
pub mod VertexAttribL4d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL4d.is_loaded } } }
pub mod VertexAttribL4dEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL4dEXT.is_loaded } } }
pub mod VertexAttribL4dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL4dv.is_loaded } } }
pub mod VertexAttribL4dvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL4dvEXT.is_loaded } } }
pub mod VertexAttribL4i64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL4i64NV.is_loaded } } }
pub mod VertexAttribL4i64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL4i64vNV.is_loaded } } }
pub mod VertexAttribL4ui64NV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL4ui64NV.is_loaded } } }
pub mod VertexAttribL4ui64vNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribL4ui64vNV.is_loaded } } }
pub mod VertexAttribLFormat { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribLFormat.is_loaded } } }
pub mod VertexAttribLFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribLFormatNV.is_loaded } } }
pub mod VertexAttribLPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribLPointer.is_loaded } } }
pub mod VertexAttribLPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribLPointerEXT.is_loaded } } }
pub mod VertexAttribP1ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribP1ui.is_loaded } } }
pub mod VertexAttribP1uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribP1uiv.is_loaded } } }
pub mod VertexAttribP2ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribP2ui.is_loaded } } }
pub mod VertexAttribP2uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribP2uiv.is_loaded } } }
pub mod VertexAttribP3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribP3ui.is_loaded } } }
pub mod VertexAttribP3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribP3uiv.is_loaded } } }
pub mod VertexAttribP4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribP4ui.is_loaded } } }
pub mod VertexAttribP4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribP4uiv.is_loaded } } }
pub mod VertexAttribParameteriAMD { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribParameteriAMD.is_loaded } } }
pub mod VertexAttribPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribPointer.is_loaded } } }
pub mod VertexAttribPointerARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribPointerARB.is_loaded } } }
pub mod VertexAttribPointerNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribPointerNV.is_loaded } } }
pub mod VertexAttribs1dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs1dvNV.is_loaded } } }
pub mod VertexAttribs1fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs1fvNV.is_loaded } } }
pub mod VertexAttribs1hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs1hvNV.is_loaded } } }
pub mod VertexAttribs1svNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs1svNV.is_loaded } } }
pub mod VertexAttribs2dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs2dvNV.is_loaded } } }
pub mod VertexAttribs2fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs2fvNV.is_loaded } } }
pub mod VertexAttribs2hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs2hvNV.is_loaded } } }
pub mod VertexAttribs2svNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs2svNV.is_loaded } } }
pub mod VertexAttribs3dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs3dvNV.is_loaded } } }
pub mod VertexAttribs3fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs3fvNV.is_loaded } } }
pub mod VertexAttribs3hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs3hvNV.is_loaded } } }
pub mod VertexAttribs3svNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs3svNV.is_loaded } } }
pub mod VertexAttribs4dvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs4dvNV.is_loaded } } }
pub mod VertexAttribs4fvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs4fvNV.is_loaded } } }
pub mod VertexAttribs4hvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs4hvNV.is_loaded } } }
pub mod VertexAttribs4svNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs4svNV.is_loaded } } }
pub mod VertexAttribs4ubvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexAttribs4ubvNV.is_loaded } } }
pub mod VertexBindingDivisor { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexBindingDivisor.is_loaded } } }
pub mod VertexBlendARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexBlendARB.is_loaded } } }
pub mod VertexBlendEnvfATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexBlendEnvfATI.is_loaded } } }
pub mod VertexBlendEnviATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexBlendEnviATI.is_loaded } } }
pub mod VertexFormatNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexFormatNV.is_loaded } } }
pub mod VertexP2ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexP2ui.is_loaded } } }
pub mod VertexP2uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexP2uiv.is_loaded } } }
pub mod VertexP3ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexP3ui.is_loaded } } }
pub mod VertexP3uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexP3uiv.is_loaded } } }
pub mod VertexP4ui { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexP4ui.is_loaded } } }
pub mod VertexP4uiv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexP4uiv.is_loaded } } }
pub mod VertexPointer { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexPointer.is_loaded } } }
pub mod VertexPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexPointerEXT.is_loaded } } }
pub mod VertexPointerListIBM { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexPointerListIBM.is_loaded } } }
pub mod VertexPointervINTEL { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexPointervINTEL.is_loaded } } }
pub mod VertexStream1dATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream1dATI.is_loaded } } }
pub mod VertexStream1dvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream1dvATI.is_loaded } } }
pub mod VertexStream1fATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream1fATI.is_loaded } } }
pub mod VertexStream1fvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream1fvATI.is_loaded } } }
pub mod VertexStream1iATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream1iATI.is_loaded } } }
pub mod VertexStream1ivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream1ivATI.is_loaded } } }
pub mod VertexStream1sATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream1sATI.is_loaded } } }
pub mod VertexStream1svATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream1svATI.is_loaded } } }
pub mod VertexStream2dATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream2dATI.is_loaded } } }
pub mod VertexStream2dvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream2dvATI.is_loaded } } }
pub mod VertexStream2fATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream2fATI.is_loaded } } }
pub mod VertexStream2fvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream2fvATI.is_loaded } } }
pub mod VertexStream2iATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream2iATI.is_loaded } } }
pub mod VertexStream2ivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream2ivATI.is_loaded } } }
pub mod VertexStream2sATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream2sATI.is_loaded } } }
pub mod VertexStream2svATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream2svATI.is_loaded } } }
pub mod VertexStream3dATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream3dATI.is_loaded } } }
pub mod VertexStream3dvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream3dvATI.is_loaded } } }
pub mod VertexStream3fATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream3fATI.is_loaded } } }
pub mod VertexStream3fvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream3fvATI.is_loaded } } }
pub mod VertexStream3iATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream3iATI.is_loaded } } }
pub mod VertexStream3ivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream3ivATI.is_loaded } } }
pub mod VertexStream3sATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream3sATI.is_loaded } } }
pub mod VertexStream3svATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream3svATI.is_loaded } } }
pub mod VertexStream4dATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream4dATI.is_loaded } } }
pub mod VertexStream4dvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream4dvATI.is_loaded } } }
pub mod VertexStream4fATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream4fATI.is_loaded } } }
pub mod VertexStream4fvATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream4fvATI.is_loaded } } }
pub mod VertexStream4iATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream4iATI.is_loaded } } }
pub mod VertexStream4ivATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream4ivATI.is_loaded } } }
pub mod VertexStream4sATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream4sATI.is_loaded } } }
pub mod VertexStream4svATI { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexStream4svATI.is_loaded } } }
pub mod VertexWeightPointerEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexWeightPointerEXT.is_loaded } } }
pub mod VertexWeightfEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexWeightfEXT.is_loaded } } }
pub mod VertexWeightfvEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexWeightfvEXT.is_loaded } } }
pub mod VertexWeighthNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexWeighthNV.is_loaded } } }
pub mod VertexWeighthvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VertexWeighthvNV.is_loaded } } }
pub mod VideoCaptureNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VideoCaptureNV.is_loaded } } }
pub mod VideoCaptureStreamParameterdvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VideoCaptureStreamParameterdvNV.is_loaded } } }
pub mod VideoCaptureStreamParameterfvNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VideoCaptureStreamParameterfvNV.is_loaded } } }
pub mod VideoCaptureStreamParameterivNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::VideoCaptureStreamParameterivNV.is_loaded } } }
pub mod Viewport { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::Viewport.is_loaded } } }
pub mod ViewportArrayv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ViewportArrayv.is_loaded } } }
pub mod ViewportIndexedf { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ViewportIndexedf.is_loaded } } }
pub mod ViewportIndexedfv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::ViewportIndexedfv.is_loaded } } }
pub mod WaitSync { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WaitSync.is_loaded } } }
pub mod WaitSyncAPPLE { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WaitSyncAPPLE.is_loaded } } }
pub mod WeightPathsNV { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightPathsNV.is_loaded } } }
pub mod WeightPointerARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightPointerARB.is_loaded } } }
pub mod WeightPointerOES { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightPointerOES.is_loaded } } }
pub mod WeightbvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightbvARB.is_loaded } } }
pub mod WeightdvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightdvARB.is_loaded } } }
pub mod WeightfvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightfvARB.is_loaded } } }
pub mod WeightivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightivARB.is_loaded } } }
pub mod WeightsvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightsvARB.is_loaded } } }
pub mod WeightubvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightubvARB.is_loaded } } }
pub mod WeightuivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightuivARB.is_loaded } } }
pub mod WeightusvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WeightusvARB.is_loaded } } }
pub mod WindowPos2d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2d.is_loaded } } }
pub mod WindowPos2dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2dARB.is_loaded } } }
pub mod WindowPos2dMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2dMESA.is_loaded } } }
pub mod WindowPos2dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2dv.is_loaded } } }
pub mod WindowPos2dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2dvARB.is_loaded } } }
pub mod WindowPos2dvMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2dvMESA.is_loaded } } }
pub mod WindowPos2f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2f.is_loaded } } }
pub mod WindowPos2fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2fARB.is_loaded } } }
pub mod WindowPos2fMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2fMESA.is_loaded } } }
pub mod WindowPos2fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2fv.is_loaded } } }
pub mod WindowPos2fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2fvARB.is_loaded } } }
pub mod WindowPos2fvMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2fvMESA.is_loaded } } }
pub mod WindowPos2i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2i.is_loaded } } }
pub mod WindowPos2iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2iARB.is_loaded } } }
pub mod WindowPos2iMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2iMESA.is_loaded } } }
pub mod WindowPos2iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2iv.is_loaded } } }
pub mod WindowPos2ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2ivARB.is_loaded } } }
pub mod WindowPos2ivMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2ivMESA.is_loaded } } }
pub mod WindowPos2s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2s.is_loaded } } }
pub mod WindowPos2sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2sARB.is_loaded } } }
pub mod WindowPos2sMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2sMESA.is_loaded } } }
pub mod WindowPos2sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2sv.is_loaded } } }
pub mod WindowPos2svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2svARB.is_loaded } } }
pub mod WindowPos2svMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos2svMESA.is_loaded } } }
pub mod WindowPos3d { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3d.is_loaded } } }
pub mod WindowPos3dARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3dARB.is_loaded } } }
pub mod WindowPos3dMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3dMESA.is_loaded } } }
pub mod WindowPos3dv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3dv.is_loaded } } }
pub mod WindowPos3dvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3dvARB.is_loaded } } }
pub mod WindowPos3dvMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3dvMESA.is_loaded } } }
pub mod WindowPos3f { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3f.is_loaded } } }
pub mod WindowPos3fARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3fARB.is_loaded } } }
pub mod WindowPos3fMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3fMESA.is_loaded } } }
pub mod WindowPos3fv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3fv.is_loaded } } }
pub mod WindowPos3fvARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3fvARB.is_loaded } } }
pub mod WindowPos3fvMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3fvMESA.is_loaded } } }
pub mod WindowPos3i { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3i.is_loaded } } }
pub mod WindowPos3iARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3iARB.is_loaded } } }
pub mod WindowPos3iMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3iMESA.is_loaded } } }
pub mod WindowPos3iv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3iv.is_loaded } } }
pub mod WindowPos3ivARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3ivARB.is_loaded } } }
pub mod WindowPos3ivMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3ivMESA.is_loaded } } }
pub mod WindowPos3s { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3s.is_loaded } } }
pub mod WindowPos3sARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3sARB.is_loaded } } }
pub mod WindowPos3sMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3sMESA.is_loaded } } }
pub mod WindowPos3sv { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3sv.is_loaded } } }
pub mod WindowPos3svARB { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3svARB.is_loaded } } }
pub mod WindowPos3svMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos3svMESA.is_loaded } } }
pub mod WindowPos4dMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos4dMESA.is_loaded } } }
pub mod WindowPos4dvMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos4dvMESA.is_loaded } } }
pub mod WindowPos4fMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos4fMESA.is_loaded } } }
pub mod WindowPos4fvMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos4fvMESA.is_loaded } } }
pub mod WindowPos4iMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos4iMESA.is_loaded } } }
pub mod WindowPos4ivMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos4ivMESA.is_loaded } } }
pub mod WindowPos4sMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos4sMESA.is_loaded } } }
pub mod WindowPos4svMESA { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WindowPos4svMESA.is_loaded } } }
pub mod WriteMaskEXT { #[inline] pub fn is_loaded() -> bool { unsafe { super::storage::WriteMaskEXT.is_loaded } } }

mod failing {
    use std::libc::*;
    use super::types::*;
    
    pub extern "C" fn Accum(_: GLenum, _: GLfloat) -> c_void { fail!("Accum was not loaded") }
    pub extern "C" fn AccumxOES(_: GLenum, _: GLfixed) -> c_void { fail!("AccumxOES was not loaded") }
    pub extern "C" fn ActiveProgramEXT(_: GLuint) -> c_void { fail!("ActiveProgramEXT was not loaded") }
    pub extern "C" fn ActiveShaderProgram(_: GLuint, _: GLuint) -> c_void { fail!("ActiveShaderProgram was not loaded") }
    pub extern "C" fn ActiveShaderProgramEXT(_: GLuint, _: GLuint) -> c_void { fail!("ActiveShaderProgramEXT was not loaded") }
    pub extern "C" fn ActiveStencilFaceEXT(_: GLenum) -> c_void { fail!("ActiveStencilFaceEXT was not loaded") }
    pub extern "C" fn ActiveTexture(_: GLenum) -> c_void { fail!("ActiveTexture was not loaded") }
    pub extern "C" fn ActiveTextureARB(_: GLenum) -> c_void { fail!("ActiveTextureARB was not loaded") }
    pub extern "C" fn ActiveVaryingNV(_: GLuint, _: *GLchar) -> c_void { fail!("ActiveVaryingNV was not loaded") }
    pub extern "C" fn AlphaFragmentOp1ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("AlphaFragmentOp1ATI was not loaded") }
    pub extern "C" fn AlphaFragmentOp2ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("AlphaFragmentOp2ATI was not loaded") }
    pub extern "C" fn AlphaFragmentOp3ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("AlphaFragmentOp3ATI was not loaded") }
    pub extern "C" fn AlphaFunc(_: GLenum, _: GLfloat) -> c_void { fail!("AlphaFunc was not loaded") }
    pub extern "C" fn AlphaFuncQCOM(_: GLenum, _: GLclampf) -> c_void { fail!("AlphaFuncQCOM was not loaded") }
    pub extern "C" fn AlphaFuncx(_: GLenum, _: GLfixed) -> c_void { fail!("AlphaFuncx was not loaded") }
    pub extern "C" fn AlphaFuncxOES(_: GLenum, _: GLfixed) -> c_void { fail!("AlphaFuncxOES was not loaded") }
    pub extern "C" fn ApplyTextureEXT(_: GLenum) -> c_void { fail!("ApplyTextureEXT was not loaded") }
    pub extern "C" fn AreProgramsResidentNV(_: GLsizei, _: *GLuint, _: *GLboolean) -> GLboolean { fail!("AreProgramsResidentNV was not loaded") }
    pub extern "C" fn AreTexturesResident(_: GLsizei, _: *GLuint, _: *GLboolean) -> GLboolean { fail!("AreTexturesResident was not loaded") }
    pub extern "C" fn AreTexturesResidentEXT(_: GLsizei, _: *GLuint, _: *GLboolean) -> GLboolean { fail!("AreTexturesResidentEXT was not loaded") }
    pub extern "C" fn ArrayElement(_: GLint) -> c_void { fail!("ArrayElement was not loaded") }
    pub extern "C" fn ArrayElementEXT(_: GLint) -> c_void { fail!("ArrayElementEXT was not loaded") }
    pub extern "C" fn ArrayObjectATI(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLuint, _: GLuint) -> c_void { fail!("ArrayObjectATI was not loaded") }
    pub extern "C" fn AsyncMarkerSGIX(_: GLuint) -> c_void { fail!("AsyncMarkerSGIX was not loaded") }
    pub extern "C" fn AttachObjectARB(_: GLhandleARB, _: GLhandleARB) -> c_void { fail!("AttachObjectARB was not loaded") }
    pub extern "C" fn AttachShader(_: GLuint, _: GLuint) -> c_void { fail!("AttachShader was not loaded") }
    pub extern "C" fn Begin(_: GLenum) -> c_void { fail!("Begin was not loaded") }
    pub extern "C" fn BeginConditionalRender(_: GLuint, _: GLenum) -> c_void { fail!("BeginConditionalRender was not loaded") }
    pub extern "C" fn BeginConditionalRenderNV(_: GLuint, _: GLenum) -> c_void { fail!("BeginConditionalRenderNV was not loaded") }
    pub extern "C" fn BeginConditionalRenderNVX(_: GLuint) -> c_void { fail!("BeginConditionalRenderNVX was not loaded") }
    pub extern "C" fn BeginFragmentShaderATI() -> c_void { fail!("BeginFragmentShaderATI was not loaded") }
    pub extern "C" fn BeginOcclusionQueryNV(_: GLuint) -> c_void { fail!("BeginOcclusionQueryNV was not loaded") }
    pub extern "C" fn BeginPerfMonitorAMD(_: GLuint) -> c_void { fail!("BeginPerfMonitorAMD was not loaded") }
    pub extern "C" fn BeginQuery(_: GLenum, _: GLuint) -> c_void { fail!("BeginQuery was not loaded") }
    pub extern "C" fn BeginQueryARB(_: GLenum, _: GLuint) -> c_void { fail!("BeginQueryARB was not loaded") }
    pub extern "C" fn BeginQueryEXT(_: GLenum, _: GLuint) -> c_void { fail!("BeginQueryEXT was not loaded") }
    pub extern "C" fn BeginQueryIndexed(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("BeginQueryIndexed was not loaded") }
    pub extern "C" fn BeginTransformFeedback(_: GLenum) -> c_void { fail!("BeginTransformFeedback was not loaded") }
    pub extern "C" fn BeginTransformFeedbackEXT(_: GLenum) -> c_void { fail!("BeginTransformFeedbackEXT was not loaded") }
    pub extern "C" fn BeginTransformFeedbackNV(_: GLenum) -> c_void { fail!("BeginTransformFeedbackNV was not loaded") }
    pub extern "C" fn BeginVertexShaderEXT() -> c_void { fail!("BeginVertexShaderEXT was not loaded") }
    pub extern "C" fn BeginVideoCaptureNV(_: GLuint) -> c_void { fail!("BeginVideoCaptureNV was not loaded") }
    pub extern "C" fn BindAttribLocation(_: GLuint, _: GLuint, _: *GLchar) -> c_void { fail!("BindAttribLocation was not loaded") }
    pub extern "C" fn BindAttribLocationARB(_: GLhandleARB, _: GLuint, _: *GLcharARB) -> c_void { fail!("BindAttribLocationARB was not loaded") }
    pub extern "C" fn BindBuffer(_: GLenum, _: GLuint) -> c_void { fail!("BindBuffer was not loaded") }
    pub extern "C" fn BindBufferARB(_: GLenum, _: GLuint) -> c_void { fail!("BindBufferARB was not loaded") }
    pub extern "C" fn BindBufferBase(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("BindBufferBase was not loaded") }
    pub extern "C" fn BindBufferBaseEXT(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("BindBufferBaseEXT was not loaded") }
    pub extern "C" fn BindBufferBaseNV(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("BindBufferBaseNV was not loaded") }
    pub extern "C" fn BindBufferOffsetEXT(_: GLenum, _: GLuint, _: GLuint, _: GLintptr) -> c_void { fail!("BindBufferOffsetEXT was not loaded") }
    pub extern "C" fn BindBufferOffsetNV(_: GLenum, _: GLuint, _: GLuint, _: GLintptr) -> c_void { fail!("BindBufferOffsetNV was not loaded") }
    pub extern "C" fn BindBufferRange(_: GLenum, _: GLuint, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("BindBufferRange was not loaded") }
    pub extern "C" fn BindBufferRangeEXT(_: GLenum, _: GLuint, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("BindBufferRangeEXT was not loaded") }
    pub extern "C" fn BindBufferRangeNV(_: GLenum, _: GLuint, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("BindBufferRangeNV was not loaded") }
    pub extern "C" fn BindBuffersBase(_: GLenum, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("BindBuffersBase was not loaded") }
    pub extern "C" fn BindBuffersRange(_: GLenum, _: GLuint, _: GLsizei, _: *GLuint, _: *GLintptr, _: *GLsizeiptr) -> c_void { fail!("BindBuffersRange was not loaded") }
    pub extern "C" fn BindFragDataLocation(_: GLuint, _: GLuint, _: *GLchar) -> c_void { fail!("BindFragDataLocation was not loaded") }
    pub extern "C" fn BindFragDataLocationEXT(_: GLuint, _: GLuint, _: *GLchar) -> c_void { fail!("BindFragDataLocationEXT was not loaded") }
    pub extern "C" fn BindFragDataLocationIndexed(_: GLuint, _: GLuint, _: GLuint, _: *GLchar) -> c_void { fail!("BindFragDataLocationIndexed was not loaded") }
    pub extern "C" fn BindFragmentShaderATI(_: GLuint) -> c_void { fail!("BindFragmentShaderATI was not loaded") }
    pub extern "C" fn BindFramebuffer(_: GLenum, _: GLuint) -> c_void { fail!("BindFramebuffer was not loaded") }
    pub extern "C" fn BindFramebufferEXT(_: GLenum, _: GLuint) -> c_void { fail!("BindFramebufferEXT was not loaded") }
    pub extern "C" fn BindFramebufferOES(_: GLenum, _: GLuint) -> c_void { fail!("BindFramebufferOES was not loaded") }
    pub extern "C" fn BindImageTexture(_: GLuint, _: GLuint, _: GLint, _: GLboolean, _: GLint, _: GLenum, _: GLenum) -> c_void { fail!("BindImageTexture was not loaded") }
    pub extern "C" fn BindImageTextureEXT(_: GLuint, _: GLuint, _: GLint, _: GLboolean, _: GLint, _: GLenum, _: GLint) -> c_void { fail!("BindImageTextureEXT was not loaded") }
    pub extern "C" fn BindImageTextures(_: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("BindImageTextures was not loaded") }
    pub extern "C" fn BindLightParameterEXT(_: GLenum, _: GLenum) -> GLuint { fail!("BindLightParameterEXT was not loaded") }
    pub extern "C" fn BindMaterialParameterEXT(_: GLenum, _: GLenum) -> GLuint { fail!("BindMaterialParameterEXT was not loaded") }
    pub extern "C" fn BindMultiTextureEXT(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("BindMultiTextureEXT was not loaded") }
    pub extern "C" fn BindParameterEXT(_: GLenum) -> GLuint { fail!("BindParameterEXT was not loaded") }
    pub extern "C" fn BindProgramARB(_: GLenum, _: GLuint) -> c_void { fail!("BindProgramARB was not loaded") }
    pub extern "C" fn BindProgramNV(_: GLenum, _: GLuint) -> c_void { fail!("BindProgramNV was not loaded") }
    pub extern "C" fn BindProgramPipeline(_: GLuint) -> c_void { fail!("BindProgramPipeline was not loaded") }
    pub extern "C" fn BindProgramPipelineEXT(_: GLuint) -> c_void { fail!("BindProgramPipelineEXT was not loaded") }
    pub extern "C" fn BindRenderbuffer(_: GLenum, _: GLuint) -> c_void { fail!("BindRenderbuffer was not loaded") }
    pub extern "C" fn BindRenderbufferEXT(_: GLenum, _: GLuint) -> c_void { fail!("BindRenderbufferEXT was not loaded") }
    pub extern "C" fn BindRenderbufferOES(_: GLenum, _: GLuint) -> c_void { fail!("BindRenderbufferOES was not loaded") }
    pub extern "C" fn BindSampler(_: GLuint, _: GLuint) -> c_void { fail!("BindSampler was not loaded") }
    pub extern "C" fn BindSamplers(_: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("BindSamplers was not loaded") }
    pub extern "C" fn BindTexGenParameterEXT(_: GLenum, _: GLenum, _: GLenum) -> GLuint { fail!("BindTexGenParameterEXT was not loaded") }
    pub extern "C" fn BindTexture(_: GLenum, _: GLuint) -> c_void { fail!("BindTexture was not loaded") }
    pub extern "C" fn BindTextureEXT(_: GLenum, _: GLuint) -> c_void { fail!("BindTextureEXT was not loaded") }
    pub extern "C" fn BindTextureUnitParameterEXT(_: GLenum, _: GLenum) -> GLuint { fail!("BindTextureUnitParameterEXT was not loaded") }
    pub extern "C" fn BindTextures(_: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("BindTextures was not loaded") }
    pub extern "C" fn BindTransformFeedback(_: GLenum, _: GLuint) -> c_void { fail!("BindTransformFeedback was not loaded") }
    pub extern "C" fn BindTransformFeedbackNV(_: GLenum, _: GLuint) -> c_void { fail!("BindTransformFeedbackNV was not loaded") }
    pub extern "C" fn BindVertexArray(_: GLuint) -> c_void { fail!("BindVertexArray was not loaded") }
    pub extern "C" fn BindVertexArrayAPPLE(_: GLuint) -> c_void { fail!("BindVertexArrayAPPLE was not loaded") }
    pub extern "C" fn BindVertexArrayOES(_: GLuint) -> c_void { fail!("BindVertexArrayOES was not loaded") }
    pub extern "C" fn BindVertexBuffer(_: GLuint, _: GLuint, _: GLintptr, _: GLsizei) -> c_void { fail!("BindVertexBuffer was not loaded") }
    pub extern "C" fn BindVertexBuffers(_: GLuint, _: GLsizei, _: *GLuint, _: *GLintptr, _: *GLsizei) -> c_void { fail!("BindVertexBuffers was not loaded") }
    pub extern "C" fn BindVertexShaderEXT(_: GLuint) -> c_void { fail!("BindVertexShaderEXT was not loaded") }
    pub extern "C" fn BindVideoCaptureStreamBufferNV(_: GLuint, _: GLuint, _: GLenum, _: GLintptrARB) -> c_void { fail!("BindVideoCaptureStreamBufferNV was not loaded") }
    pub extern "C" fn BindVideoCaptureStreamTextureNV(_: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("BindVideoCaptureStreamTextureNV was not loaded") }
    pub extern "C" fn Binormal3bEXT(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Binormal3bEXT was not loaded") }
    pub extern "C" fn Binormal3bvEXT(_: *GLbyte) -> c_void { fail!("Binormal3bvEXT was not loaded") }
    pub extern "C" fn Binormal3dEXT(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Binormal3dEXT was not loaded") }
    pub extern "C" fn Binormal3dvEXT(_: *GLdouble) -> c_void { fail!("Binormal3dvEXT was not loaded") }
    pub extern "C" fn Binormal3fEXT(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Binormal3fEXT was not loaded") }
    pub extern "C" fn Binormal3fvEXT(_: *GLfloat) -> c_void { fail!("Binormal3fvEXT was not loaded") }
    pub extern "C" fn Binormal3iEXT(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Binormal3iEXT was not loaded") }
    pub extern "C" fn Binormal3ivEXT(_: *GLint) -> c_void { fail!("Binormal3ivEXT was not loaded") }
    pub extern "C" fn Binormal3sEXT(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Binormal3sEXT was not loaded") }
    pub extern "C" fn Binormal3svEXT(_: *GLshort) -> c_void { fail!("Binormal3svEXT was not loaded") }
    pub extern "C" fn BinormalPointerEXT(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("BinormalPointerEXT was not loaded") }
    pub extern "C" fn Bitmap(_: GLsizei, _: GLsizei, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: *GLubyte) -> c_void { fail!("Bitmap was not loaded") }
    pub extern "C" fn BitmapxOES(_: GLsizei, _: GLsizei, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: *GLubyte) -> c_void { fail!("BitmapxOES was not loaded") }
    pub extern "C" fn BlendColor(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("BlendColor was not loaded") }
    pub extern "C" fn BlendColorEXT(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("BlendColorEXT was not loaded") }
    pub extern "C" fn BlendColorxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("BlendColorxOES was not loaded") }
    pub extern "C" fn BlendEquation(_: GLenum) -> c_void { fail!("BlendEquation was not loaded") }
    pub extern "C" fn BlendEquationEXT(_: GLenum) -> c_void { fail!("BlendEquationEXT was not loaded") }
    pub extern "C" fn BlendEquationIndexedAMD(_: GLuint, _: GLenum) -> c_void { fail!("BlendEquationIndexedAMD was not loaded") }
    pub extern "C" fn BlendEquationOES(_: GLenum) -> c_void { fail!("BlendEquationOES was not loaded") }
    pub extern "C" fn BlendEquationSeparate(_: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparate was not loaded") }
    pub extern "C" fn BlendEquationSeparateEXT(_: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparateEXT was not loaded") }
    pub extern "C" fn BlendEquationSeparateIndexedAMD(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparateIndexedAMD was not loaded") }
    pub extern "C" fn BlendEquationSeparateOES(_: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparateOES was not loaded") }
    pub extern "C" fn BlendEquationSeparatei(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparatei was not loaded") }
    pub extern "C" fn BlendEquationSeparateiARB(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparateiARB was not loaded") }
    pub extern "C" fn BlendEquationi(_: GLuint, _: GLenum) -> c_void { fail!("BlendEquationi was not loaded") }
    pub extern "C" fn BlendEquationiARB(_: GLuint, _: GLenum) -> c_void { fail!("BlendEquationiARB was not loaded") }
    pub extern "C" fn BlendFunc(_: GLenum, _: GLenum) -> c_void { fail!("BlendFunc was not loaded") }
    pub extern "C" fn BlendFuncIndexedAMD(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncIndexedAMD was not loaded") }
    pub extern "C" fn BlendFuncSeparate(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparate was not loaded") }
    pub extern "C" fn BlendFuncSeparateEXT(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateEXT was not loaded") }
    pub extern "C" fn BlendFuncSeparateINGR(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateINGR was not loaded") }
    pub extern "C" fn BlendFuncSeparateIndexedAMD(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateIndexedAMD was not loaded") }
    pub extern "C" fn BlendFuncSeparateOES(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateOES was not loaded") }
    pub extern "C" fn BlendFuncSeparatei(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparatei was not loaded") }
    pub extern "C" fn BlendFuncSeparateiARB(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateiARB was not loaded") }
    pub extern "C" fn BlendFunci(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendFunci was not loaded") }
    pub extern "C" fn BlendFunciARB(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendFunciARB was not loaded") }
    pub extern "C" fn BlendParameteriNV(_: GLenum, _: GLint) -> c_void { fail!("BlendParameteriNV was not loaded") }
    pub extern "C" fn BlendBarrierNV() -> c_void { fail!("BlendBarrierNV was not loaded") }
    pub extern "C" fn BlitFramebuffer(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLbitfield, _: GLenum) -> c_void { fail!("BlitFramebuffer was not loaded") }
    pub extern "C" fn BlitFramebufferANGLE(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLbitfield, _: GLenum) -> c_void { fail!("BlitFramebufferANGLE was not loaded") }
    pub extern "C" fn BlitFramebufferEXT(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLbitfield, _: GLenum) -> c_void { fail!("BlitFramebufferEXT was not loaded") }
    pub extern "C" fn BlitFramebufferNV(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLbitfield, _: GLenum) -> c_void { fail!("BlitFramebufferNV was not loaded") }
    pub extern "C" fn BufferAddressRangeNV(_: GLenum, _: GLuint, _: GLuint64EXT, _: GLsizeiptr) -> c_void { fail!("BufferAddressRangeNV was not loaded") }
    pub extern "C" fn BufferData(_: GLenum, _: GLsizeiptr, _: *GLvoid, _: GLenum) -> c_void { fail!("BufferData was not loaded") }
    pub extern "C" fn BufferDataARB(_: GLenum, _: GLsizeiptrARB, _: *GLvoid, _: GLenum) -> c_void { fail!("BufferDataARB was not loaded") }
    pub extern "C" fn BufferParameteriAPPLE(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("BufferParameteriAPPLE was not loaded") }
    pub extern "C" fn BufferStorage(_: GLenum, _: GLsizeiptr, _: *c_void, _: GLbitfield) -> c_void { fail!("BufferStorage was not loaded") }
    pub extern "C" fn BufferSubData(_: GLenum, _: GLintptr, _: GLsizeiptr, _: *GLvoid) -> c_void { fail!("BufferSubData was not loaded") }
    pub extern "C" fn BufferSubDataARB(_: GLenum, _: GLintptrARB, _: GLsizeiptrARB, _: *GLvoid) -> c_void { fail!("BufferSubDataARB was not loaded") }
    pub extern "C" fn CallList(_: GLuint) -> c_void { fail!("CallList was not loaded") }
    pub extern "C" fn CallLists(_: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("CallLists was not loaded") }
    pub extern "C" fn CheckFramebufferStatus(_: GLenum) -> GLenum { fail!("CheckFramebufferStatus was not loaded") }
    pub extern "C" fn CheckFramebufferStatusEXT(_: GLenum) -> GLenum { fail!("CheckFramebufferStatusEXT was not loaded") }
    pub extern "C" fn CheckFramebufferStatusOES(_: GLenum) -> GLenum { fail!("CheckFramebufferStatusOES was not loaded") }
    pub extern "C" fn CheckNamedFramebufferStatusEXT(_: GLuint, _: GLenum) -> GLenum { fail!("CheckNamedFramebufferStatusEXT was not loaded") }
    pub extern "C" fn ClampColor(_: GLenum, _: GLenum) -> c_void { fail!("ClampColor was not loaded") }
    pub extern "C" fn ClampColorARB(_: GLenum, _: GLenum) -> c_void { fail!("ClampColorARB was not loaded") }
    pub extern "C" fn Clear(_: GLbitfield) -> c_void { fail!("Clear was not loaded") }
    pub extern "C" fn ClearAccum(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ClearAccum was not loaded") }
    pub extern "C" fn ClearAccumxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("ClearAccumxOES was not loaded") }
    pub extern "C" fn ClearBufferData(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearBufferData was not loaded") }
    pub extern "C" fn ClearBufferSubData(_: GLenum, _: GLenum, _: GLintptr, _: GLsizeiptr, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearBufferSubData was not loaded") }
    pub extern "C" fn ClearBufferfi(_: GLenum, _: GLint, _: GLfloat, _: GLint) -> c_void { fail!("ClearBufferfi was not loaded") }
    pub extern "C" fn ClearBufferfv(_: GLenum, _: GLint, _: *GLfloat) -> c_void { fail!("ClearBufferfv was not loaded") }
    pub extern "C" fn ClearBufferiv(_: GLenum, _: GLint, _: *GLint) -> c_void { fail!("ClearBufferiv was not loaded") }
    pub extern "C" fn ClearBufferuiv(_: GLenum, _: GLint, _: *GLuint) -> c_void { fail!("ClearBufferuiv was not loaded") }
    pub extern "C" fn ClearColor(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ClearColor was not loaded") }
    pub extern "C" fn ClearColorIiEXT(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ClearColorIiEXT was not loaded") }
    pub extern "C" fn ClearColorIuiEXT(_: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ClearColorIuiEXT was not loaded") }
    pub extern "C" fn ClearColorx(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("ClearColorx was not loaded") }
    pub extern "C" fn ClearColorxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("ClearColorxOES was not loaded") }
    pub extern "C" fn ClearDepth(_: GLdouble) -> c_void { fail!("ClearDepth was not loaded") }
    pub extern "C" fn ClearDepthdNV(_: GLdouble) -> c_void { fail!("ClearDepthdNV was not loaded") }
    pub extern "C" fn ClearDepthf(_: GLfloat) -> c_void { fail!("ClearDepthf was not loaded") }
    pub extern "C" fn ClearDepthfOES(_: GLclampf) -> c_void { fail!("ClearDepthfOES was not loaded") }
    pub extern "C" fn ClearDepthx(_: GLfixed) -> c_void { fail!("ClearDepthx was not loaded") }
    pub extern "C" fn ClearDepthxOES(_: GLfixed) -> c_void { fail!("ClearDepthxOES was not loaded") }
    pub extern "C" fn ClearIndex(_: GLfloat) -> c_void { fail!("ClearIndex was not loaded") }
    pub extern "C" fn ClearNamedBufferDataEXT(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearNamedBufferDataEXT was not loaded") }
    pub extern "C" fn ClearNamedBufferSubDataEXT(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLsizeiptr, _: GLsizeiptr, _: *c_void) -> c_void { fail!("ClearNamedBufferSubDataEXT was not loaded") }
    pub extern "C" fn ClearStencil(_: GLint) -> c_void { fail!("ClearStencil was not loaded") }
    pub extern "C" fn ClearTexImage(_: GLuint, _: GLint, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearTexImage was not loaded") }
    pub extern "C" fn ClearTexSubImage(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearTexSubImage was not loaded") }
    pub extern "C" fn ClientActiveTexture(_: GLenum) -> c_void { fail!("ClientActiveTexture was not loaded") }
    pub extern "C" fn ClientActiveTextureARB(_: GLenum) -> c_void { fail!("ClientActiveTextureARB was not loaded") }
    pub extern "C" fn ClientActiveVertexStreamATI(_: GLenum) -> c_void { fail!("ClientActiveVertexStreamATI was not loaded") }
    pub extern "C" fn ClientAttribDefaultEXT(_: GLbitfield) -> c_void { fail!("ClientAttribDefaultEXT was not loaded") }
    pub extern "C" fn ClientWaitSync(_: GLsync, _: GLbitfield, _: GLuint64) -> GLenum { fail!("ClientWaitSync was not loaded") }
    pub extern "C" fn ClientWaitSyncAPPLE(_: GLsync, _: GLbitfield, _: GLuint64) -> GLenum { fail!("ClientWaitSyncAPPLE was not loaded") }
    pub extern "C" fn ClipControlARB(_: GLenum, _: GLenum) -> c_void { fail!("ClipControlARB was not loaded") }
    pub extern "C" fn ClipPlane(_: GLenum, _: *GLdouble) -> c_void { fail!("ClipPlane was not loaded") }
    pub extern "C" fn ClipPlanef(_: GLenum, _: *GLfloat) -> c_void { fail!("ClipPlanef was not loaded") }
    pub extern "C" fn ClipPlanefIMG(_: GLenum, _: *GLfloat) -> c_void { fail!("ClipPlanefIMG was not loaded") }
    pub extern "C" fn ClipPlanefOES(_: GLenum, _: *GLfloat) -> c_void { fail!("ClipPlanefOES was not loaded") }
    pub extern "C" fn ClipPlanex(_: GLenum, _: *GLfixed) -> c_void { fail!("ClipPlanex was not loaded") }
    pub extern "C" fn ClipPlanexIMG(_: GLenum, _: *GLfixed) -> c_void { fail!("ClipPlanexIMG was not loaded") }
    pub extern "C" fn ClipPlanexOES(_: GLenum, _: *GLfixed) -> c_void { fail!("ClipPlanexOES was not loaded") }
    pub extern "C" fn Color3b(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Color3b was not loaded") }
    pub extern "C" fn Color3bv(_: *GLbyte) -> c_void { fail!("Color3bv was not loaded") }
    pub extern "C" fn Color3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Color3d was not loaded") }
    pub extern "C" fn Color3dv(_: *GLdouble) -> c_void { fail!("Color3dv was not loaded") }
    pub extern "C" fn Color3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color3f was not loaded") }
    pub extern "C" fn Color3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color3fVertex3fSUN was not loaded") }
    pub extern "C" fn Color3fVertex3fvSUN(_: *GLfloat, _: *GLfloat) -> c_void { fail!("Color3fVertex3fvSUN was not loaded") }
    pub extern "C" fn Color3fv(_: *GLfloat) -> c_void { fail!("Color3fv was not loaded") }
    pub extern "C" fn Color3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Color3hNV was not loaded") }
    pub extern "C" fn Color3hvNV(_: *GLhalfNV) -> c_void { fail!("Color3hvNV was not loaded") }
    pub extern "C" fn Color3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Color3i was not loaded") }
    pub extern "C" fn Color3iv(_: *GLint) -> c_void { fail!("Color3iv was not loaded") }
    pub extern "C" fn Color3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Color3s was not loaded") }
    pub extern "C" fn Color3sv(_: *GLshort) -> c_void { fail!("Color3sv was not loaded") }
    pub extern "C" fn Color3ub(_: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("Color3ub was not loaded") }
    pub extern "C" fn Color3ubv(_: *GLubyte) -> c_void { fail!("Color3ubv was not loaded") }
    pub extern "C" fn Color3ui(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Color3ui was not loaded") }
    pub extern "C" fn Color3uiv(_: *GLuint) -> c_void { fail!("Color3uiv was not loaded") }
    pub extern "C" fn Color3us(_: GLushort, _: GLushort, _: GLushort) -> c_void { fail!("Color3us was not loaded") }
    pub extern "C" fn Color3usv(_: *GLushort) -> c_void { fail!("Color3usv was not loaded") }
    pub extern "C" fn Color3xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Color3xOES was not loaded") }
    pub extern "C" fn Color3xvOES(_: *GLfixed) -> c_void { fail!("Color3xvOES was not loaded") }
    pub extern "C" fn Color4b(_: GLbyte, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Color4b was not loaded") }
    pub extern "C" fn Color4bv(_: *GLbyte) -> c_void { fail!("Color4bv was not loaded") }
    pub extern "C" fn Color4d(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Color4d was not loaded") }
    pub extern "C" fn Color4dv(_: *GLdouble) -> c_void { fail!("Color4dv was not loaded") }
    pub extern "C" fn Color4f(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color4f was not loaded") }
    pub extern "C" fn Color4fNormal3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color4fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn Color4fNormal3fVertex3fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("Color4fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn Color4fv(_: *GLfloat) -> c_void { fail!("Color4fv was not loaded") }
    pub extern "C" fn Color4hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Color4hNV was not loaded") }
    pub extern "C" fn Color4hvNV(_: *GLhalfNV) -> c_void { fail!("Color4hvNV was not loaded") }
    pub extern "C" fn Color4i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Color4i was not loaded") }
    pub extern "C" fn Color4iv(_: *GLint) -> c_void { fail!("Color4iv was not loaded") }
    pub extern "C" fn Color4s(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Color4s was not loaded") }
    pub extern "C" fn Color4sv(_: *GLshort) -> c_void { fail!("Color4sv was not loaded") }
    pub extern "C" fn Color4ub(_: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("Color4ub was not loaded") }
    pub extern "C" fn Color4ubVertex2fSUN(_: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte, _: GLfloat, _: GLfloat) -> c_void { fail!("Color4ubVertex2fSUN was not loaded") }
    pub extern "C" fn Color4ubVertex2fvSUN(_: *GLubyte, _: *GLfloat) -> c_void { fail!("Color4ubVertex2fvSUN was not loaded") }
    pub extern "C" fn Color4ubVertex3fSUN(_: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color4ubVertex3fSUN was not loaded") }
    pub extern "C" fn Color4ubVertex3fvSUN(_: *GLubyte, _: *GLfloat) -> c_void { fail!("Color4ubVertex3fvSUN was not loaded") }
    pub extern "C" fn Color4ubv(_: *GLubyte) -> c_void { fail!("Color4ubv was not loaded") }
    pub extern "C" fn Color4ui(_: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Color4ui was not loaded") }
    pub extern "C" fn Color4uiv(_: *GLuint) -> c_void { fail!("Color4uiv was not loaded") }
    pub extern "C" fn Color4us(_: GLushort, _: GLushort, _: GLushort, _: GLushort) -> c_void { fail!("Color4us was not loaded") }
    pub extern "C" fn Color4usv(_: *GLushort) -> c_void { fail!("Color4usv was not loaded") }
    pub extern "C" fn Color4x(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Color4x was not loaded") }
    pub extern "C" fn Color4xOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Color4xOES was not loaded") }
    pub extern "C" fn Color4xvOES(_: *GLfixed) -> c_void { fail!("Color4xvOES was not loaded") }
    pub extern "C" fn ColorFormatNV(_: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("ColorFormatNV was not loaded") }
    pub extern "C" fn ColorFragmentOp1ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ColorFragmentOp1ATI was not loaded") }
    pub extern "C" fn ColorFragmentOp2ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ColorFragmentOp2ATI was not loaded") }
    pub extern "C" fn ColorFragmentOp3ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ColorFragmentOp3ATI was not loaded") }
    pub extern "C" fn ColorMask(_: GLboolean, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("ColorMask was not loaded") }
    pub extern "C" fn ColorMaskIndexedEXT(_: GLuint, _: GLboolean, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("ColorMaskIndexedEXT was not loaded") }
    pub extern "C" fn ColorMaski(_: GLuint, _: GLboolean, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("ColorMaski was not loaded") }
    pub extern "C" fn ColorMaterial(_: GLenum, _: GLenum) -> c_void { fail!("ColorMaterial was not loaded") }
    pub extern "C" fn ColorP3ui(_: GLenum, _: GLuint) -> c_void { fail!("ColorP3ui was not loaded") }
    pub extern "C" fn ColorP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("ColorP3uiv was not loaded") }
    pub extern "C" fn ColorP4ui(_: GLenum, _: GLuint) -> c_void { fail!("ColorP4ui was not loaded") }
    pub extern "C" fn ColorP4uiv(_: GLenum, _: *GLuint) -> c_void { fail!("ColorP4uiv was not loaded") }
    pub extern "C" fn ColorPointer(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("ColorPointer was not loaded") }
    pub extern "C" fn ColorPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("ColorPointerEXT was not loaded") }
    pub extern "C" fn ColorPointerListIBM(_: GLint, _: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("ColorPointerListIBM was not loaded") }
    pub extern "C" fn ColorPointervINTEL(_: GLint, _: GLenum, _: **GLvoid) -> c_void { fail!("ColorPointervINTEL was not loaded") }
    pub extern "C" fn ColorSubTable(_: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorSubTable was not loaded") }
    pub extern "C" fn ColorSubTableEXT(_: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorSubTableEXT was not loaded") }
    pub extern "C" fn ColorTable(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorTable was not loaded") }
    pub extern "C" fn ColorTableEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorTableEXT was not loaded") }
    pub extern "C" fn ColorTableParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ColorTableParameterfv was not loaded") }
    pub extern "C" fn ColorTableParameterfvSGI(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ColorTableParameterfvSGI was not loaded") }
    pub extern "C" fn ColorTableParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ColorTableParameteriv was not loaded") }
    pub extern "C" fn ColorTableParameterivSGI(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ColorTableParameterivSGI was not loaded") }
    pub extern "C" fn ColorTableSGI(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorTableSGI was not loaded") }
    pub extern "C" fn CombinerInputNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("CombinerInputNV was not loaded") }
    pub extern "C" fn CombinerOutputNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("CombinerOutputNV was not loaded") }
    pub extern "C" fn CombinerParameterfNV(_: GLenum, _: GLfloat) -> c_void { fail!("CombinerParameterfNV was not loaded") }
    pub extern "C" fn CombinerParameterfvNV(_: GLenum, _: *GLfloat) -> c_void { fail!("CombinerParameterfvNV was not loaded") }
    pub extern "C" fn CombinerParameteriNV(_: GLenum, _: GLint) -> c_void { fail!("CombinerParameteriNV was not loaded") }
    pub extern "C" fn CombinerParameterivNV(_: GLenum, _: *GLint) -> c_void { fail!("CombinerParameterivNV was not loaded") }
    pub extern "C" fn CombinerStageParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("CombinerStageParameterfvNV was not loaded") }
    pub extern "C" fn CompileShader(_: GLuint) -> c_void { fail!("CompileShader was not loaded") }
    pub extern "C" fn CompileShaderARB(_: GLhandleARB) -> c_void { fail!("CompileShaderARB was not loaded") }
    pub extern "C" fn CompileShaderIncludeARB(_: GLuint, _: GLsizei, _: **GLchar, _: *GLint) -> c_void { fail!("CompileShaderIncludeARB was not loaded") }
    pub extern "C" fn CompressedMultiTexImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexImage1DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexImage2DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexImage3DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexSubImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexSubImage1DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexSubImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexSubImage2DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexSubImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexSubImage3DEXT was not loaded") }
    pub extern "C" fn CompressedTexImage1D(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage1D was not loaded") }
    pub extern "C" fn CompressedTexImage1DARB(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage1DARB was not loaded") }
    pub extern "C" fn CompressedTexImage2D(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage2D was not loaded") }
    pub extern "C" fn CompressedTexImage2DARB(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage2DARB was not loaded") }
    pub extern "C" fn CompressedTexImage3D(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage3D was not loaded") }
    pub extern "C" fn CompressedTexImage3DARB(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage3DARB was not loaded") }
    pub extern "C" fn CompressedTexImage3DOES(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage3DOES was not loaded") }
    pub extern "C" fn CompressedTexSubImage1D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage1D was not loaded") }
    pub extern "C" fn CompressedTexSubImage1DARB(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage1DARB was not loaded") }
    pub extern "C" fn CompressedTexSubImage2D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage2D was not loaded") }
    pub extern "C" fn CompressedTexSubImage2DARB(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage2DARB was not loaded") }
    pub extern "C" fn CompressedTexSubImage3D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage3D was not loaded") }
    pub extern "C" fn CompressedTexSubImage3DARB(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage3DARB was not loaded") }
    pub extern "C" fn CompressedTexSubImage3DOES(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage3DOES was not loaded") }
    pub extern "C" fn CompressedTextureImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureImage1DEXT was not loaded") }
    pub extern "C" fn CompressedTextureImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureImage2DEXT was not loaded") }
    pub extern "C" fn CompressedTextureImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureImage3DEXT was not loaded") }
    pub extern "C" fn CompressedTextureSubImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureSubImage1DEXT was not loaded") }
    pub extern "C" fn CompressedTextureSubImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureSubImage2DEXT was not loaded") }
    pub extern "C" fn CompressedTextureSubImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureSubImage3DEXT was not loaded") }
    pub extern "C" fn ConvolutionFilter1D(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ConvolutionFilter1D was not loaded") }
    pub extern "C" fn ConvolutionFilter1DEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ConvolutionFilter1DEXT was not loaded") }
    pub extern "C" fn ConvolutionFilter2D(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ConvolutionFilter2D was not loaded") }
    pub extern "C" fn ConvolutionFilter2DEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ConvolutionFilter2DEXT was not loaded") }
    pub extern "C" fn ConvolutionParameterf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("ConvolutionParameterf was not loaded") }
    pub extern "C" fn ConvolutionParameterfEXT(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("ConvolutionParameterfEXT was not loaded") }
    pub extern "C" fn ConvolutionParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ConvolutionParameterfv was not loaded") }
    pub extern "C" fn ConvolutionParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ConvolutionParameterfvEXT was not loaded") }
    pub extern "C" fn ConvolutionParameteri(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("ConvolutionParameteri was not loaded") }
    pub extern "C" fn ConvolutionParameteriEXT(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("ConvolutionParameteriEXT was not loaded") }
    pub extern "C" fn ConvolutionParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ConvolutionParameteriv was not loaded") }
    pub extern "C" fn ConvolutionParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ConvolutionParameterivEXT was not loaded") }
    pub extern "C" fn ConvolutionParameterxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("ConvolutionParameterxOES was not loaded") }
    pub extern "C" fn ConvolutionParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("ConvolutionParameterxvOES was not loaded") }
    pub extern "C" fn CopyBufferSubData(_: GLenum, _: GLenum, _: GLintptr, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("CopyBufferSubData was not loaded") }
    pub extern "C" fn CopyColorSubTable(_: GLenum, _: GLsizei, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyColorSubTable was not loaded") }
    pub extern "C" fn CopyColorSubTableEXT(_: GLenum, _: GLsizei, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyColorSubTableEXT was not loaded") }
    pub extern "C" fn CopyColorTable(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyColorTable was not loaded") }
    pub extern "C" fn CopyColorTableSGI(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyColorTableSGI was not loaded") }
    pub extern "C" fn CopyConvolutionFilter1D(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyConvolutionFilter1D was not loaded") }
    pub extern "C" fn CopyConvolutionFilter1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyConvolutionFilter1DEXT was not loaded") }
    pub extern "C" fn CopyConvolutionFilter2D(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyConvolutionFilter2D was not loaded") }
    pub extern "C" fn CopyConvolutionFilter2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyConvolutionFilter2DEXT was not loaded") }
    pub extern "C" fn CopyImageSubData(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyImageSubData was not loaded") }
    pub extern "C" fn CopyImageSubDataNV(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyImageSubDataNV was not loaded") }
    pub extern "C" fn CopyMultiTexImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint) -> c_void { fail!("CopyMultiTexImage1DEXT was not loaded") }
    pub extern "C" fn CopyMultiTexImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("CopyMultiTexImage2DEXT was not loaded") }
    pub extern "C" fn CopyMultiTexSubImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyMultiTexSubImage1DEXT was not loaded") }
    pub extern "C" fn CopyMultiTexSubImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyMultiTexSubImage2DEXT was not loaded") }
    pub extern "C" fn CopyMultiTexSubImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyMultiTexSubImage3DEXT was not loaded") }
    pub extern "C" fn CopyPathNV(_: GLuint, _: GLuint) -> c_void { fail!("CopyPathNV was not loaded") }
    pub extern "C" fn CopyPixels(_: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum) -> c_void { fail!("CopyPixels was not loaded") }
    pub extern "C" fn CopyTexImage1D(_: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint) -> c_void { fail!("CopyTexImage1D was not loaded") }
    pub extern "C" fn CopyTexImage1DEXT(_: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint) -> c_void { fail!("CopyTexImage1DEXT was not loaded") }
    pub extern "C" fn CopyTexImage2D(_: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("CopyTexImage2D was not loaded") }
    pub extern "C" fn CopyTexImage2DEXT(_: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("CopyTexImage2DEXT was not loaded") }
    pub extern "C" fn CopyTexSubImage1D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyTexSubImage1D was not loaded") }
    pub extern "C" fn CopyTexSubImage1DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyTexSubImage1DEXT was not loaded") }
    pub extern "C" fn CopyTexSubImage2D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage2D was not loaded") }
    pub extern "C" fn CopyTexSubImage2DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage2DEXT was not loaded") }
    pub extern "C" fn CopyTexSubImage3D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage3D was not loaded") }
    pub extern "C" fn CopyTexSubImage3DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage3DEXT was not loaded") }
    pub extern "C" fn CopyTexSubImage3DOES(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage3DOES was not loaded") }
    pub extern "C" fn CopyTextureImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint) -> c_void { fail!("CopyTextureImage1DEXT was not loaded") }
    pub extern "C" fn CopyTextureImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("CopyTextureImage2DEXT was not loaded") }
    pub extern "C" fn CopyTextureLevelsAPPLE(_: GLuint, _: GLuint, _: GLint, _: GLsizei) -> c_void { fail!("CopyTextureLevelsAPPLE was not loaded") }
    pub extern "C" fn CopyTextureSubImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyTextureSubImage1DEXT was not loaded") }
    pub extern "C" fn CopyTextureSubImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTextureSubImage2DEXT was not loaded") }
    pub extern "C" fn CopyTextureSubImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTextureSubImage3DEXT was not loaded") }
    pub extern "C" fn CoverFillPathInstancedNV(_: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("CoverFillPathInstancedNV was not loaded") }
    pub extern "C" fn CoverFillPathNV(_: GLuint, _: GLenum) -> c_void { fail!("CoverFillPathNV was not loaded") }
    pub extern "C" fn CoverStrokePathInstancedNV(_: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("CoverStrokePathInstancedNV was not loaded") }
    pub extern "C" fn CoverStrokePathNV(_: GLuint, _: GLenum) -> c_void { fail!("CoverStrokePathNV was not loaded") }
    pub extern "C" fn CoverageMaskNV(_: GLboolean) -> c_void { fail!("CoverageMaskNV was not loaded") }
    pub extern "C" fn CoverageOperationNV(_: GLenum) -> c_void { fail!("CoverageOperationNV was not loaded") }
    pub extern "C" fn CreateProgram() -> GLuint { fail!("CreateProgram was not loaded") }
    pub extern "C" fn CreateProgramObjectARB() -> GLhandleARB { fail!("CreateProgramObjectARB was not loaded") }
    pub extern "C" fn CreateShader(_: GLenum) -> GLuint { fail!("CreateShader was not loaded") }
    pub extern "C" fn CreateShaderObjectARB(_: GLenum) -> GLhandleARB { fail!("CreateShaderObjectARB was not loaded") }
    pub extern "C" fn CreateShaderProgramEXT(_: GLenum, _: *GLchar) -> GLuint { fail!("CreateShaderProgramEXT was not loaded") }
    pub extern "C" fn CreateShaderProgramv(_: GLenum, _: GLsizei, _: **GLchar) -> GLuint { fail!("CreateShaderProgramv was not loaded") }
    pub extern "C" fn CreateShaderProgramvEXT(_: GLenum, _: GLsizei, _: **GLchar) -> GLuint { fail!("CreateShaderProgramvEXT was not loaded") }
    pub extern "C" fn CreateSyncFromCLeventARB(_: *_cl_context, _: *_cl_event, _: GLbitfield) -> GLsync { fail!("CreateSyncFromCLeventARB was not loaded") }
    pub extern "C" fn CullFace(_: GLenum) -> c_void { fail!("CullFace was not loaded") }
    pub extern "C" fn CullParameterdvEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("CullParameterdvEXT was not loaded") }
    pub extern "C" fn CullParameterfvEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("CullParameterfvEXT was not loaded") }
    pub extern "C" fn CurrentPaletteMatrixARB(_: GLint) -> c_void { fail!("CurrentPaletteMatrixARB was not loaded") }
    pub extern "C" fn CurrentPaletteMatrixOES(_: GLuint) -> c_void { fail!("CurrentPaletteMatrixOES was not loaded") }
    pub extern "C" fn DebugMessageCallback(_: GLDEBUGPROC, _: *c_void) -> c_void { fail!("DebugMessageCallback was not loaded") }
    pub extern "C" fn DebugMessageCallbackAMD(_: GLDEBUGPROCAMD, _: *c_void) -> c_void { fail!("DebugMessageCallbackAMD was not loaded") }
    pub extern "C" fn DebugMessageCallbackARB(_: GLDEBUGPROCARB, _: *c_void) -> c_void { fail!("DebugMessageCallbackARB was not loaded") }
    pub extern "C" fn DebugMessageCallbackKHR(_: GLDEBUGPROCKHR, _: *c_void) -> c_void { fail!("DebugMessageCallbackKHR was not loaded") }
    pub extern "C" fn DebugMessageControl(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLuint, _: GLboolean) -> c_void { fail!("DebugMessageControl was not loaded") }
    pub extern "C" fn DebugMessageControlARB(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLuint, _: GLboolean) -> c_void { fail!("DebugMessageControlARB was not loaded") }
    pub extern "C" fn DebugMessageControlKHR(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLuint, _: GLboolean) -> c_void { fail!("DebugMessageControlKHR was not loaded") }
    pub extern "C" fn DebugMessageEnableAMD(_: GLenum, _: GLenum, _: GLsizei, _: *GLuint, _: GLboolean) -> c_void { fail!("DebugMessageEnableAMD was not loaded") }
    pub extern "C" fn DebugMessageInsert(_: GLenum, _: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: *GLchar) -> c_void { fail!("DebugMessageInsert was not loaded") }
    pub extern "C" fn DebugMessageInsertAMD(_: GLenum, _: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("DebugMessageInsertAMD was not loaded") }
    pub extern "C" fn DebugMessageInsertARB(_: GLenum, _: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: *GLchar) -> c_void { fail!("DebugMessageInsertARB was not loaded") }
    pub extern "C" fn DebugMessageInsertKHR(_: GLenum, _: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: *GLchar) -> c_void { fail!("DebugMessageInsertKHR was not loaded") }
    pub extern "C" fn DeformSGIX(_: GLbitfield) -> c_void { fail!("DeformSGIX was not loaded") }
    pub extern "C" fn DeformationMap3dSGIX(_: GLenum, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("DeformationMap3dSGIX was not loaded") }
    pub extern "C" fn DeformationMap3fSGIX(_: GLenum, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("DeformationMap3fSGIX was not loaded") }
    pub extern "C" fn DeleteAsyncMarkersSGIX(_: GLuint, _: GLsizei) -> c_void { fail!("DeleteAsyncMarkersSGIX was not loaded") }
    pub extern "C" fn DeleteBuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteBuffers was not loaded") }
    pub extern "C" fn DeleteBuffersARB(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteBuffersARB was not loaded") }
    pub extern "C" fn DeleteFencesAPPLE(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFencesAPPLE was not loaded") }
    pub extern "C" fn DeleteFencesNV(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFencesNV was not loaded") }
    pub extern "C" fn DeleteFragmentShaderATI(_: GLuint) -> c_void { fail!("DeleteFragmentShaderATI was not loaded") }
    pub extern "C" fn DeleteFramebuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFramebuffers was not loaded") }
    pub extern "C" fn DeleteFramebuffersEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFramebuffersEXT was not loaded") }
    pub extern "C" fn DeleteFramebuffersOES(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFramebuffersOES was not loaded") }
    pub extern "C" fn DeleteLists(_: GLuint, _: GLsizei) -> c_void { fail!("DeleteLists was not loaded") }
    pub extern "C" fn DeleteNamedStringARB(_: GLint, _: *GLchar) -> c_void { fail!("DeleteNamedStringARB was not loaded") }
    pub extern "C" fn DeleteNamesAMD(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("DeleteNamesAMD was not loaded") }
    pub extern "C" fn DeleteObjectARB(_: GLhandleARB) -> c_void { fail!("DeleteObjectARB was not loaded") }
    pub extern "C" fn DeleteOcclusionQueriesNV(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteOcclusionQueriesNV was not loaded") }
    pub extern "C" fn DeletePathsNV(_: GLuint, _: GLsizei) -> c_void { fail!("DeletePathsNV was not loaded") }
    pub extern "C" fn DeletePerfMonitorsAMD(_: GLsizei, _: *GLuint) -> c_void { fail!("DeletePerfMonitorsAMD was not loaded") }
    pub extern "C" fn DeleteProgram(_: GLuint) -> c_void { fail!("DeleteProgram was not loaded") }
    pub extern "C" fn DeleteProgramPipelines(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteProgramPipelines was not loaded") }
    pub extern "C" fn DeleteProgramPipelinesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteProgramPipelinesEXT was not loaded") }
    pub extern "C" fn DeleteProgramsARB(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteProgramsARB was not loaded") }
    pub extern "C" fn DeleteProgramsNV(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteProgramsNV was not loaded") }
    pub extern "C" fn DeleteQueries(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteQueries was not loaded") }
    pub extern "C" fn DeleteQueriesARB(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteQueriesARB was not loaded") }
    pub extern "C" fn DeleteQueriesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteQueriesEXT was not loaded") }
    pub extern "C" fn DeleteRenderbuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteRenderbuffers was not loaded") }
    pub extern "C" fn DeleteRenderbuffersEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteRenderbuffersEXT was not loaded") }
    pub extern "C" fn DeleteRenderbuffersOES(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteRenderbuffersOES was not loaded") }
    pub extern "C" fn DeleteSamplers(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteSamplers was not loaded") }
    pub extern "C" fn DeleteShader(_: GLuint) -> c_void { fail!("DeleteShader was not loaded") }
    pub extern "C" fn DeleteSync(_: GLsync) -> c_void { fail!("DeleteSync was not loaded") }
    pub extern "C" fn DeleteSyncAPPLE(_: GLsync) -> c_void { fail!("DeleteSyncAPPLE was not loaded") }
    pub extern "C" fn DeleteTextures(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteTextures was not loaded") }
    pub extern "C" fn DeleteTexturesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteTexturesEXT was not loaded") }
    pub extern "C" fn DeleteTransformFeedbacks(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteTransformFeedbacks was not loaded") }
    pub extern "C" fn DeleteTransformFeedbacksNV(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteTransformFeedbacksNV was not loaded") }
    pub extern "C" fn DeleteVertexArrays(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteVertexArrays was not loaded") }
    pub extern "C" fn DeleteVertexArraysAPPLE(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteVertexArraysAPPLE was not loaded") }
    pub extern "C" fn DeleteVertexArraysOES(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteVertexArraysOES was not loaded") }
    pub extern "C" fn DeleteVertexShaderEXT(_: GLuint) -> c_void { fail!("DeleteVertexShaderEXT was not loaded") }
    pub extern "C" fn DepthBoundsEXT(_: GLclampd, _: GLclampd) -> c_void { fail!("DepthBoundsEXT was not loaded") }
    pub extern "C" fn DepthBoundsdNV(_: GLdouble, _: GLdouble) -> c_void { fail!("DepthBoundsdNV was not loaded") }
    pub extern "C" fn DepthFunc(_: GLenum) -> c_void { fail!("DepthFunc was not loaded") }
    pub extern "C" fn DepthMask(_: GLboolean) -> c_void { fail!("DepthMask was not loaded") }
    pub extern "C" fn DepthRange(_: GLdouble, _: GLdouble) -> c_void { fail!("DepthRange was not loaded") }
    pub extern "C" fn DepthRangeArrayv(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("DepthRangeArrayv was not loaded") }
    pub extern "C" fn DepthRangeIndexed(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("DepthRangeIndexed was not loaded") }
    pub extern "C" fn DepthRangedNV(_: GLdouble, _: GLdouble) -> c_void { fail!("DepthRangedNV was not loaded") }
    pub extern "C" fn DepthRangef(_: GLfloat, _: GLfloat) -> c_void { fail!("DepthRangef was not loaded") }
    pub extern "C" fn DepthRangefOES(_: GLclampf, _: GLclampf) -> c_void { fail!("DepthRangefOES was not loaded") }
    pub extern "C" fn DepthRangex(_: GLfixed, _: GLfixed) -> c_void { fail!("DepthRangex was not loaded") }
    pub extern "C" fn DepthRangexOES(_: GLfixed, _: GLfixed) -> c_void { fail!("DepthRangexOES was not loaded") }
    pub extern "C" fn DetachObjectARB(_: GLhandleARB, _: GLhandleARB) -> c_void { fail!("DetachObjectARB was not loaded") }
    pub extern "C" fn DetachShader(_: GLuint, _: GLuint) -> c_void { fail!("DetachShader was not loaded") }
    pub extern "C" fn DetailTexFuncSGIS(_: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("DetailTexFuncSGIS was not loaded") }
    pub extern "C" fn Disable(_: GLenum) -> c_void { fail!("Disable was not loaded") }
    pub extern "C" fn DisableClientState(_: GLenum) -> c_void { fail!("DisableClientState was not loaded") }
    pub extern "C" fn DisableClientStateIndexedEXT(_: GLenum, _: GLuint) -> c_void { fail!("DisableClientStateIndexedEXT was not loaded") }
    pub extern "C" fn DisableClientStateiEXT(_: GLenum, _: GLuint) -> c_void { fail!("DisableClientStateiEXT was not loaded") }
    pub extern "C" fn DisableDriverControlQCOM(_: GLuint) -> c_void { fail!("DisableDriverControlQCOM was not loaded") }
    pub extern "C" fn DisableIndexedEXT(_: GLenum, _: GLuint) -> c_void { fail!("DisableIndexedEXT was not loaded") }
    pub extern "C" fn DisableVariantClientStateEXT(_: GLuint) -> c_void { fail!("DisableVariantClientStateEXT was not loaded") }
    pub extern "C" fn DisableVertexArrayAttribEXT(_: GLuint, _: GLuint) -> c_void { fail!("DisableVertexArrayAttribEXT was not loaded") }
    pub extern "C" fn DisableVertexArrayEXT(_: GLuint, _: GLenum) -> c_void { fail!("DisableVertexArrayEXT was not loaded") }
    pub extern "C" fn DisableVertexAttribAPPLE(_: GLuint, _: GLenum) -> c_void { fail!("DisableVertexAttribAPPLE was not loaded") }
    pub extern "C" fn DisableVertexAttribArray(_: GLuint) -> c_void { fail!("DisableVertexAttribArray was not loaded") }
    pub extern "C" fn DisableVertexAttribArrayARB(_: GLuint) -> c_void { fail!("DisableVertexAttribArrayARB was not loaded") }
    pub extern "C" fn Disablei(_: GLenum, _: GLuint) -> c_void { fail!("Disablei was not loaded") }
    pub extern "C" fn DiscardFramebufferEXT(_: GLenum, _: GLsizei, _: *GLenum) -> c_void { fail!("DiscardFramebufferEXT was not loaded") }
    pub extern "C" fn DispatchCompute(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("DispatchCompute was not loaded") }
    pub extern "C" fn DispatchComputeGroupSizeARB(_: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("DispatchComputeGroupSizeARB was not loaded") }
    pub extern "C" fn DispatchComputeIndirect(_: GLintptr) -> c_void { fail!("DispatchComputeIndirect was not loaded") }
    pub extern "C" fn DrawArrays(_: GLenum, _: GLint, _: GLsizei) -> c_void { fail!("DrawArrays was not loaded") }
    pub extern "C" fn DrawArraysEXT(_: GLenum, _: GLint, _: GLsizei) -> c_void { fail!("DrawArraysEXT was not loaded") }
    pub extern "C" fn DrawArraysIndirect(_: GLenum, _: *GLvoid) -> c_void { fail!("DrawArraysIndirect was not loaded") }
    pub extern "C" fn DrawArraysInstanced(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstanced was not loaded") }
    pub extern "C" fn DrawArraysInstancedANGLE(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstancedANGLE was not loaded") }
    pub extern "C" fn DrawArraysInstancedARB(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstancedARB was not loaded") }
    pub extern "C" fn DrawArraysInstancedBaseInstance(_: GLenum, _: GLint, _: GLsizei, _: GLsizei, _: GLuint) -> c_void { fail!("DrawArraysInstancedBaseInstance was not loaded") }
    pub extern "C" fn DrawArraysInstancedEXT(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstancedEXT was not loaded") }
    pub extern "C" fn DrawArraysInstancedNV(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstancedNV was not loaded") }
    pub extern "C" fn DrawBuffer(_: GLenum) -> c_void { fail!("DrawBuffer was not loaded") }
    pub extern "C" fn DrawBuffers(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffers was not loaded") }
    pub extern "C" fn DrawBuffersARB(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffersARB was not loaded") }
    pub extern "C" fn DrawBuffersATI(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffersATI was not loaded") }
    pub extern "C" fn DrawBuffersEXT(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffersEXT was not loaded") }
    pub extern "C" fn DrawBuffersIndexedEXT(_: GLint, _: *GLenum, _: *GLint) -> c_void { fail!("DrawBuffersIndexedEXT was not loaded") }
    pub extern "C" fn DrawBuffersNV(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffersNV was not loaded") }
    pub extern "C" fn DrawElementArrayAPPLE(_: GLenum, _: GLint, _: GLsizei) -> c_void { fail!("DrawElementArrayAPPLE was not loaded") }
    pub extern "C" fn DrawElementArrayATI(_: GLenum, _: GLsizei) -> c_void { fail!("DrawElementArrayATI was not loaded") }
    pub extern "C" fn DrawElements(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawElements was not loaded") }
    pub extern "C" fn DrawElementsBaseVertex(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLint) -> c_void { fail!("DrawElementsBaseVertex was not loaded") }
    pub extern "C" fn DrawElementsIndirect(_: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawElementsIndirect was not loaded") }
    pub extern "C" fn DrawElementsInstanced(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("DrawElementsInstanced was not loaded") }
    pub extern "C" fn DrawElementsInstancedANGLE(_: GLenum, _: GLsizei, _: GLenum, _: *c_void, _: GLsizei) -> c_void { fail!("DrawElementsInstancedANGLE was not loaded") }
    pub extern "C" fn DrawElementsInstancedARB(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("DrawElementsInstancedARB was not loaded") }
    pub extern "C" fn DrawElementsInstancedBaseInstance(_: GLenum, _: GLsizei, _: GLenum, _: *c_void, _: GLsizei, _: GLuint) -> c_void { fail!("DrawElementsInstancedBaseInstance was not loaded") }
    pub extern "C" fn DrawElementsInstancedBaseVertex(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei, _: GLint) -> c_void { fail!("DrawElementsInstancedBaseVertex was not loaded") }
    pub extern "C" fn DrawElementsInstancedBaseVertexBaseInstance(_: GLenum, _: GLsizei, _: GLenum, _: *c_void, _: GLsizei, _: GLint, _: GLuint) -> c_void { fail!("DrawElementsInstancedBaseVertexBaseInstance was not loaded") }
    pub extern "C" fn DrawElementsInstancedEXT(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("DrawElementsInstancedEXT was not loaded") }
    pub extern "C" fn DrawElementsInstancedNV(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("DrawElementsInstancedNV was not loaded") }
    pub extern "C" fn DrawMeshArraysSUN(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawMeshArraysSUN was not loaded") }
    pub extern "C" fn DrawPixels(_: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawPixels was not loaded") }
    pub extern "C" fn DrawRangeElementArrayAPPLE(_: GLenum, _: GLuint, _: GLuint, _: GLint, _: GLsizei) -> c_void { fail!("DrawRangeElementArrayAPPLE was not loaded") }
    pub extern "C" fn DrawRangeElementArrayATI(_: GLenum, _: GLuint, _: GLuint, _: GLsizei) -> c_void { fail!("DrawRangeElementArrayATI was not loaded") }
    pub extern "C" fn DrawRangeElements(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawRangeElements was not loaded") }
    pub extern "C" fn DrawRangeElementsBaseVertex(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: GLenum, _: *GLvoid, _: GLint) -> c_void { fail!("DrawRangeElementsBaseVertex was not loaded") }
    pub extern "C" fn DrawRangeElementsEXT(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawRangeElementsEXT was not loaded") }
    pub extern "C" fn DrawTexfOES(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("DrawTexfOES was not loaded") }
    pub extern "C" fn DrawTexfvOES(_: *GLfloat) -> c_void { fail!("DrawTexfvOES was not loaded") }
    pub extern "C" fn DrawTexiOES(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("DrawTexiOES was not loaded") }
    pub extern "C" fn DrawTexivOES(_: *GLint) -> c_void { fail!("DrawTexivOES was not loaded") }
    pub extern "C" fn DrawTexsOES(_: GLshort, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("DrawTexsOES was not loaded") }
    pub extern "C" fn DrawTexsvOES(_: *GLshort) -> c_void { fail!("DrawTexsvOES was not loaded") }
    pub extern "C" fn DrawTextureNV(_: GLuint, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("DrawTextureNV was not loaded") }
    pub extern "C" fn DrawTexxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("DrawTexxOES was not loaded") }
    pub extern "C" fn DrawTexxvOES(_: *GLfixed) -> c_void { fail!("DrawTexxvOES was not loaded") }
    pub extern "C" fn DrawTransformFeedback(_: GLenum, _: GLuint) -> c_void { fail!("DrawTransformFeedback was not loaded") }
    pub extern "C" fn DrawTransformFeedbackInstanced(_: GLenum, _: GLuint, _: GLsizei) -> c_void { fail!("DrawTransformFeedbackInstanced was not loaded") }
    pub extern "C" fn DrawTransformFeedbackNV(_: GLenum, _: GLuint) -> c_void { fail!("DrawTransformFeedbackNV was not loaded") }
    pub extern "C" fn DrawTransformFeedbackStream(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("DrawTransformFeedbackStream was not loaded") }
    pub extern "C" fn DrawTransformFeedbackStreamInstanced(_: GLenum, _: GLuint, _: GLuint, _: GLsizei) -> c_void { fail!("DrawTransformFeedbackStreamInstanced was not loaded") }
    pub extern "C" fn EGLImageTargetRenderbufferStorageOES(_: GLenum, _: GLeglImageOES) -> c_void { fail!("EGLImageTargetRenderbufferStorageOES was not loaded") }
    pub extern "C" fn EGLImageTargetTexture2DOES(_: GLenum, _: GLeglImageOES) -> c_void { fail!("EGLImageTargetTexture2DOES was not loaded") }
    pub extern "C" fn EdgeFlag(_: GLboolean) -> c_void { fail!("EdgeFlag was not loaded") }
    pub extern "C" fn EdgeFlagFormatNV(_: GLsizei) -> c_void { fail!("EdgeFlagFormatNV was not loaded") }
    pub extern "C" fn EdgeFlagPointer(_: GLsizei, _: *GLvoid) -> c_void { fail!("EdgeFlagPointer was not loaded") }
    pub extern "C" fn EdgeFlagPointerEXT(_: GLsizei, _: GLsizei, _: *GLboolean) -> c_void { fail!("EdgeFlagPointerEXT was not loaded") }
    pub extern "C" fn EdgeFlagPointerListIBM(_: GLint, _: **GLboolean, _: GLint) -> c_void { fail!("EdgeFlagPointerListIBM was not loaded") }
    pub extern "C" fn EdgeFlagv(_: *GLboolean) -> c_void { fail!("EdgeFlagv was not loaded") }
    pub extern "C" fn ElementPointerAPPLE(_: GLenum, _: *GLvoid) -> c_void { fail!("ElementPointerAPPLE was not loaded") }
    pub extern "C" fn ElementPointerATI(_: GLenum, _: *GLvoid) -> c_void { fail!("ElementPointerATI was not loaded") }
    pub extern "C" fn Enable(_: GLenum) -> c_void { fail!("Enable was not loaded") }
    pub extern "C" fn EnableClientState(_: GLenum) -> c_void { fail!("EnableClientState was not loaded") }
    pub extern "C" fn EnableClientStateIndexedEXT(_: GLenum, _: GLuint) -> c_void { fail!("EnableClientStateIndexedEXT was not loaded") }
    pub extern "C" fn EnableClientStateiEXT(_: GLenum, _: GLuint) -> c_void { fail!("EnableClientStateiEXT was not loaded") }
    pub extern "C" fn EnableDriverControlQCOM(_: GLuint) -> c_void { fail!("EnableDriverControlQCOM was not loaded") }
    pub extern "C" fn EnableIndexedEXT(_: GLenum, _: GLuint) -> c_void { fail!("EnableIndexedEXT was not loaded") }
    pub extern "C" fn EnableVariantClientStateEXT(_: GLuint) -> c_void { fail!("EnableVariantClientStateEXT was not loaded") }
    pub extern "C" fn EnableVertexArrayAttribEXT(_: GLuint, _: GLuint) -> c_void { fail!("EnableVertexArrayAttribEXT was not loaded") }
    pub extern "C" fn EnableVertexArrayEXT(_: GLuint, _: GLenum) -> c_void { fail!("EnableVertexArrayEXT was not loaded") }
    pub extern "C" fn EnableVertexAttribAPPLE(_: GLuint, _: GLenum) -> c_void { fail!("EnableVertexAttribAPPLE was not loaded") }
    pub extern "C" fn EnableVertexAttribArray(_: GLuint) -> c_void { fail!("EnableVertexAttribArray was not loaded") }
    pub extern "C" fn EnableVertexAttribArrayARB(_: GLuint) -> c_void { fail!("EnableVertexAttribArrayARB was not loaded") }
    pub extern "C" fn Enablei(_: GLenum, _: GLuint) -> c_void { fail!("Enablei was not loaded") }
    pub extern "C" fn End() -> c_void { fail!("End was not loaded") }
    pub extern "C" fn EndConditionalRender() -> c_void { fail!("EndConditionalRender was not loaded") }
    pub extern "C" fn EndConditionalRenderNV() -> c_void { fail!("EndConditionalRenderNV was not loaded") }
    pub extern "C" fn EndConditionalRenderNVX() -> c_void { fail!("EndConditionalRenderNVX was not loaded") }
    pub extern "C" fn EndFragmentShaderATI() -> c_void { fail!("EndFragmentShaderATI was not loaded") }
    pub extern "C" fn EndList() -> c_void { fail!("EndList was not loaded") }
    pub extern "C" fn EndOcclusionQueryNV() -> c_void { fail!("EndOcclusionQueryNV was not loaded") }
    pub extern "C" fn EndPerfMonitorAMD(_: GLuint) -> c_void { fail!("EndPerfMonitorAMD was not loaded") }
    pub extern "C" fn EndQuery(_: GLenum) -> c_void { fail!("EndQuery was not loaded") }
    pub extern "C" fn EndQueryARB(_: GLenum) -> c_void { fail!("EndQueryARB was not loaded") }
    pub extern "C" fn EndQueryEXT(_: GLenum) -> c_void { fail!("EndQueryEXT was not loaded") }
    pub extern "C" fn EndQueryIndexed(_: GLenum, _: GLuint) -> c_void { fail!("EndQueryIndexed was not loaded") }
    pub extern "C" fn EndTilingQCOM(_: GLbitfield) -> c_void { fail!("EndTilingQCOM was not loaded") }
    pub extern "C" fn EndTransformFeedback() -> c_void { fail!("EndTransformFeedback was not loaded") }
    pub extern "C" fn EndTransformFeedbackEXT() -> c_void { fail!("EndTransformFeedbackEXT was not loaded") }
    pub extern "C" fn EndTransformFeedbackNV() -> c_void { fail!("EndTransformFeedbackNV was not loaded") }
    pub extern "C" fn EndVertexShaderEXT() -> c_void { fail!("EndVertexShaderEXT was not loaded") }
    pub extern "C" fn EndVideoCaptureNV(_: GLuint) -> c_void { fail!("EndVideoCaptureNV was not loaded") }
    pub extern "C" fn EvalCoord1d(_: GLdouble) -> c_void { fail!("EvalCoord1d was not loaded") }
    pub extern "C" fn EvalCoord1dv(_: *GLdouble) -> c_void { fail!("EvalCoord1dv was not loaded") }
    pub extern "C" fn EvalCoord1f(_: GLfloat) -> c_void { fail!("EvalCoord1f was not loaded") }
    pub extern "C" fn EvalCoord1fv(_: *GLfloat) -> c_void { fail!("EvalCoord1fv was not loaded") }
    pub extern "C" fn EvalCoord1xOES(_: GLfixed) -> c_void { fail!("EvalCoord1xOES was not loaded") }
    pub extern "C" fn EvalCoord1xvOES(_: *GLfixed) -> c_void { fail!("EvalCoord1xvOES was not loaded") }
    pub extern "C" fn EvalCoord2d(_: GLdouble, _: GLdouble) -> c_void { fail!("EvalCoord2d was not loaded") }
    pub extern "C" fn EvalCoord2dv(_: *GLdouble) -> c_void { fail!("EvalCoord2dv was not loaded") }
    pub extern "C" fn EvalCoord2f(_: GLfloat, _: GLfloat) -> c_void { fail!("EvalCoord2f was not loaded") }
    pub extern "C" fn EvalCoord2fv(_: *GLfloat) -> c_void { fail!("EvalCoord2fv was not loaded") }
    pub extern "C" fn EvalCoord2xOES(_: GLfixed, _: GLfixed) -> c_void { fail!("EvalCoord2xOES was not loaded") }
    pub extern "C" fn EvalCoord2xvOES(_: *GLfixed) -> c_void { fail!("EvalCoord2xvOES was not loaded") }
    pub extern "C" fn EvalMapsNV(_: GLenum, _: GLenum) -> c_void { fail!("EvalMapsNV was not loaded") }
    pub extern "C" fn EvalMesh1(_: GLenum, _: GLint, _: GLint) -> c_void { fail!("EvalMesh1 was not loaded") }
    pub extern "C" fn EvalMesh2(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("EvalMesh2 was not loaded") }
    pub extern "C" fn EvalPoint1(_: GLint) -> c_void { fail!("EvalPoint1 was not loaded") }
    pub extern "C" fn EvalPoint2(_: GLint, _: GLint) -> c_void { fail!("EvalPoint2 was not loaded") }
    pub extern "C" fn ExecuteProgramNV(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("ExecuteProgramNV was not loaded") }
    pub extern "C" fn ExtGetBufferPointervQCOM(_: GLenum, _: **GLvoid) -> c_void { fail!("ExtGetBufferPointervQCOM was not loaded") }
    pub extern "C" fn ExtGetBuffersQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetBuffersQCOM was not loaded") }
    pub extern "C" fn ExtGetFramebuffersQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetFramebuffersQCOM was not loaded") }
    pub extern "C" fn ExtGetProgramBinarySourceQCOM(_: GLuint, _: GLenum, _: *GLchar, _: *GLint) -> c_void { fail!("ExtGetProgramBinarySourceQCOM was not loaded") }
    pub extern "C" fn ExtGetProgramsQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetProgramsQCOM was not loaded") }
    pub extern "C" fn ExtGetRenderbuffersQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetRenderbuffersQCOM was not loaded") }
    pub extern "C" fn ExtGetShadersQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetShadersQCOM was not loaded") }
    pub extern "C" fn ExtGetTexLevelParameterivQCOM(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: *GLint) -> c_void { fail!("ExtGetTexLevelParameterivQCOM was not loaded") }
    pub extern "C" fn ExtGetTexSubImageQCOM(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ExtGetTexSubImageQCOM was not loaded") }
    pub extern "C" fn ExtGetTexturesQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetTexturesQCOM was not loaded") }
    pub extern "C" fn ExtIsProgramBinaryQCOM(_: GLuint) -> GLboolean { fail!("ExtIsProgramBinaryQCOM was not loaded") }
    pub extern "C" fn ExtTexObjectStateOverrideiQCOM(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("ExtTexObjectStateOverrideiQCOM was not loaded") }
    pub extern "C" fn ExtractComponentEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ExtractComponentEXT was not loaded") }
    pub extern "C" fn FeedbackBuffer(_: GLsizei, _: GLenum, _: *GLfloat) -> c_void { fail!("FeedbackBuffer was not loaded") }
    pub extern "C" fn FeedbackBufferxOES(_: GLsizei, _: GLenum, _: *GLfixed) -> c_void { fail!("FeedbackBufferxOES was not loaded") }
    pub extern "C" fn FenceSync(_: GLenum, _: GLbitfield) -> GLsync { fail!("FenceSync was not loaded") }
    pub extern "C" fn FenceSyncAPPLE(_: GLenum, _: GLbitfield) -> GLsync { fail!("FenceSyncAPPLE was not loaded") }
    pub extern "C" fn FinalCombinerInputNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("FinalCombinerInputNV was not loaded") }
    pub extern "C" fn Finish() -> c_void { fail!("Finish was not loaded") }
    pub extern "C" fn FinishAsyncSGIX(_: *GLuint) -> GLint { fail!("FinishAsyncSGIX was not loaded") }
    pub extern "C" fn FinishFenceAPPLE(_: GLuint) -> c_void { fail!("FinishFenceAPPLE was not loaded") }
    pub extern "C" fn FinishFenceNV(_: GLuint) -> c_void { fail!("FinishFenceNV was not loaded") }
    pub extern "C" fn FinishObjectAPPLE(_: GLenum, _: GLint) -> c_void { fail!("FinishObjectAPPLE was not loaded") }
    pub extern "C" fn FinishTextureSUNX() -> c_void { fail!("FinishTextureSUNX was not loaded") }
    pub extern "C" fn Flush() -> c_void { fail!("Flush was not loaded") }
    pub extern "C" fn FlushMappedBufferRange(_: GLenum, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("FlushMappedBufferRange was not loaded") }
    pub extern "C" fn FlushMappedBufferRangeAPPLE(_: GLenum, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("FlushMappedBufferRangeAPPLE was not loaded") }
    pub extern "C" fn FlushMappedBufferRangeEXT(_: GLenum, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("FlushMappedBufferRangeEXT was not loaded") }
    pub extern "C" fn FlushMappedNamedBufferRangeEXT(_: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("FlushMappedNamedBufferRangeEXT was not loaded") }
    pub extern "C" fn FlushPixelDataRangeNV(_: GLenum) -> c_void { fail!("FlushPixelDataRangeNV was not loaded") }
    pub extern "C" fn FlushRasterSGIX() -> c_void { fail!("FlushRasterSGIX was not loaded") }
    pub extern "C" fn FlushStaticDataIBM(_: GLenum) -> c_void { fail!("FlushStaticDataIBM was not loaded") }
    pub extern "C" fn FlushVertexArrayRangeAPPLE(_: GLsizei, _: *GLvoid) -> c_void { fail!("FlushVertexArrayRangeAPPLE was not loaded") }
    pub extern "C" fn FlushVertexArrayRangeNV() -> c_void { fail!("FlushVertexArrayRangeNV was not loaded") }
    pub extern "C" fn FogCoordFormatNV(_: GLenum, _: GLsizei) -> c_void { fail!("FogCoordFormatNV was not loaded") }
    pub extern "C" fn FogCoordPointer(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("FogCoordPointer was not loaded") }
    pub extern "C" fn FogCoordPointerEXT(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("FogCoordPointerEXT was not loaded") }
    pub extern "C" fn FogCoordPointerListIBM(_: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("FogCoordPointerListIBM was not loaded") }
    pub extern "C" fn FogCoordd(_: GLdouble) -> c_void { fail!("FogCoordd was not loaded") }
    pub extern "C" fn FogCoorddEXT(_: GLdouble) -> c_void { fail!("FogCoorddEXT was not loaded") }
    pub extern "C" fn FogCoorddv(_: *GLdouble) -> c_void { fail!("FogCoorddv was not loaded") }
    pub extern "C" fn FogCoorddvEXT(_: *GLdouble) -> c_void { fail!("FogCoorddvEXT was not loaded") }
    pub extern "C" fn FogCoordf(_: GLfloat) -> c_void { fail!("FogCoordf was not loaded") }
    pub extern "C" fn FogCoordfEXT(_: GLfloat) -> c_void { fail!("FogCoordfEXT was not loaded") }
    pub extern "C" fn FogCoordfv(_: *GLfloat) -> c_void { fail!("FogCoordfv was not loaded") }
    pub extern "C" fn FogCoordfvEXT(_: *GLfloat) -> c_void { fail!("FogCoordfvEXT was not loaded") }
    pub extern "C" fn FogCoordhNV(_: GLhalfNV) -> c_void { fail!("FogCoordhNV was not loaded") }
    pub extern "C" fn FogCoordhvNV(_: *GLhalfNV) -> c_void { fail!("FogCoordhvNV was not loaded") }
    pub extern "C" fn FogFuncSGIS(_: GLsizei, _: *GLfloat) -> c_void { fail!("FogFuncSGIS was not loaded") }
    pub extern "C" fn Fogf(_: GLenum, _: GLfloat) -> c_void { fail!("Fogf was not loaded") }
    pub extern "C" fn Fogfv(_: GLenum, _: *GLfloat) -> c_void { fail!("Fogfv was not loaded") }
    pub extern "C" fn Fogi(_: GLenum, _: GLint) -> c_void { fail!("Fogi was not loaded") }
    pub extern "C" fn Fogiv(_: GLenum, _: *GLint) -> c_void { fail!("Fogiv was not loaded") }
    pub extern "C" fn Fogx(_: GLenum, _: GLfixed) -> c_void { fail!("Fogx was not loaded") }
    pub extern "C" fn FogxOES(_: GLenum, _: GLfixed) -> c_void { fail!("FogxOES was not loaded") }
    pub extern "C" fn Fogxv(_: GLenum, _: *GLfixed) -> c_void { fail!("Fogxv was not loaded") }
    pub extern "C" fn FogxvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("FogxvOES was not loaded") }
    pub extern "C" fn FragmentColorMaterialSGIX(_: GLenum, _: GLenum) -> c_void { fail!("FragmentColorMaterialSGIX was not loaded") }
    pub extern "C" fn FragmentLightModelfSGIX(_: GLenum, _: GLfloat) -> c_void { fail!("FragmentLightModelfSGIX was not loaded") }
    pub extern "C" fn FragmentLightModelfvSGIX(_: GLenum, _: *GLfloat) -> c_void { fail!("FragmentLightModelfvSGIX was not loaded") }
    pub extern "C" fn FragmentLightModeliSGIX(_: GLenum, _: GLint) -> c_void { fail!("FragmentLightModeliSGIX was not loaded") }
    pub extern "C" fn FragmentLightModelivSGIX(_: GLenum, _: *GLint) -> c_void { fail!("FragmentLightModelivSGIX was not loaded") }
    pub extern "C" fn FragmentLightfSGIX(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("FragmentLightfSGIX was not loaded") }
    pub extern "C" fn FragmentLightfvSGIX(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("FragmentLightfvSGIX was not loaded") }
    pub extern "C" fn FragmentLightiSGIX(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("FragmentLightiSGIX was not loaded") }
    pub extern "C" fn FragmentLightivSGIX(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("FragmentLightivSGIX was not loaded") }
    pub extern "C" fn FragmentMaterialfSGIX(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("FragmentMaterialfSGIX was not loaded") }
    pub extern "C" fn FragmentMaterialfvSGIX(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("FragmentMaterialfvSGIX was not loaded") }
    pub extern "C" fn FragmentMaterialiSGIX(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("FragmentMaterialiSGIX was not loaded") }
    pub extern "C" fn FragmentMaterialivSGIX(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("FragmentMaterialivSGIX was not loaded") }
    pub extern "C" fn FrameTerminatorGREMEDY() -> c_void { fail!("FrameTerminatorGREMEDY was not loaded") }
    pub extern "C" fn FrameZoomSGIX(_: GLint) -> c_void { fail!("FrameZoomSGIX was not loaded") }
    pub extern "C" fn FramebufferDrawBufferEXT(_: GLuint, _: GLenum) -> c_void { fail!("FramebufferDrawBufferEXT was not loaded") }
    pub extern "C" fn FramebufferDrawBuffersEXT(_: GLuint, _: GLsizei, _: *GLenum) -> c_void { fail!("FramebufferDrawBuffersEXT was not loaded") }
    pub extern "C" fn FramebufferParameteri(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("FramebufferParameteri was not loaded") }
    pub extern "C" fn FramebufferReadBufferEXT(_: GLuint, _: GLenum) -> c_void { fail!("FramebufferReadBufferEXT was not loaded") }
    pub extern "C" fn FramebufferRenderbuffer(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("FramebufferRenderbuffer was not loaded") }
    pub extern "C" fn FramebufferRenderbufferEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("FramebufferRenderbufferEXT was not loaded") }
    pub extern "C" fn FramebufferRenderbufferOES(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("FramebufferRenderbufferOES was not loaded") }
    pub extern "C" fn FramebufferTexture(_: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture was not loaded") }
    pub extern "C" fn FramebufferTexture1D(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture1D was not loaded") }
    pub extern "C" fn FramebufferTexture1DEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture1DEXT was not loaded") }
    pub extern "C" fn FramebufferTexture2D(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture2D was not loaded") }
    pub extern "C" fn FramebufferTexture2DEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture2DEXT was not loaded") }
    pub extern "C" fn FramebufferTexture2DMultisampleEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLsizei) -> c_void { fail!("FramebufferTexture2DMultisampleEXT was not loaded") }
    pub extern "C" fn FramebufferTexture2DMultisampleIMG(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLsizei) -> c_void { fail!("FramebufferTexture2DMultisampleIMG was not loaded") }
    pub extern "C" fn FramebufferTexture2DOES(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture2DOES was not loaded") }
    pub extern "C" fn FramebufferTexture3D(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTexture3D was not loaded") }
    pub extern "C" fn FramebufferTexture3DEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTexture3DEXT was not loaded") }
    pub extern "C" fn FramebufferTexture3DOES(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTexture3DOES was not loaded") }
    pub extern "C" fn FramebufferTextureARB(_: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTextureARB was not loaded") }
    pub extern "C" fn FramebufferTextureEXT(_: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTextureEXT was not loaded") }
    pub extern "C" fn FramebufferTextureFaceARB(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLenum) -> c_void { fail!("FramebufferTextureFaceARB was not loaded") }
    pub extern "C" fn FramebufferTextureFaceEXT(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLenum) -> c_void { fail!("FramebufferTextureFaceEXT was not loaded") }
    pub extern "C" fn FramebufferTextureLayer(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTextureLayer was not loaded") }
    pub extern "C" fn FramebufferTextureLayerARB(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTextureLayerARB was not loaded") }
    pub extern "C" fn FramebufferTextureLayerEXT(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTextureLayerEXT was not loaded") }
    pub extern "C" fn FreeObjectBufferATI(_: GLuint) -> c_void { fail!("FreeObjectBufferATI was not loaded") }
    pub extern "C" fn FrontFace(_: GLenum) -> c_void { fail!("FrontFace was not loaded") }
    pub extern "C" fn Frustum(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Frustum was not loaded") }
    pub extern "C" fn Frustumf(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Frustumf was not loaded") }
    pub extern "C" fn FrustumfOES(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("FrustumfOES was not loaded") }
    pub extern "C" fn Frustumx(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Frustumx was not loaded") }
    pub extern "C" fn FrustumxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("FrustumxOES was not loaded") }
    pub extern "C" fn GenAsyncMarkersSGIX(_: GLsizei) -> GLuint { fail!("GenAsyncMarkersSGIX was not loaded") }
    pub extern "C" fn GenBuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("GenBuffers was not loaded") }
    pub extern "C" fn GenBuffersARB(_: GLsizei, _: *GLuint) -> c_void { fail!("GenBuffersARB was not loaded") }
    pub extern "C" fn GenFencesAPPLE(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFencesAPPLE was not loaded") }
    pub extern "C" fn GenFencesNV(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFencesNV was not loaded") }
    pub extern "C" fn GenFragmentShadersATI(_: GLuint) -> GLuint { fail!("GenFragmentShadersATI was not loaded") }
    pub extern "C" fn GenFramebuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFramebuffers was not loaded") }
    pub extern "C" fn GenFramebuffersEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFramebuffersEXT was not loaded") }
    pub extern "C" fn GenFramebuffersOES(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFramebuffersOES was not loaded") }
    pub extern "C" fn GenLists(_: GLsizei) -> GLuint { fail!("GenLists was not loaded") }
    pub extern "C" fn GenNamesAMD(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GenNamesAMD was not loaded") }
    pub extern "C" fn GenOcclusionQueriesNV(_: GLsizei, _: *GLuint) -> c_void { fail!("GenOcclusionQueriesNV was not loaded") }
    pub extern "C" fn GenPathsNV(_: GLsizei) -> GLuint { fail!("GenPathsNV was not loaded") }
    pub extern "C" fn GenPerfMonitorsAMD(_: GLsizei, _: *GLuint) -> c_void { fail!("GenPerfMonitorsAMD was not loaded") }
    pub extern "C" fn GenProgramPipelines(_: GLsizei, _: *GLuint) -> c_void { fail!("GenProgramPipelines was not loaded") }
    pub extern "C" fn GenProgramPipelinesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenProgramPipelinesEXT was not loaded") }
    pub extern "C" fn GenProgramsARB(_: GLsizei, _: *GLuint) -> c_void { fail!("GenProgramsARB was not loaded") }
    pub extern "C" fn GenProgramsNV(_: GLsizei, _: *GLuint) -> c_void { fail!("GenProgramsNV was not loaded") }
    pub extern "C" fn GenQueries(_: GLsizei, _: *GLuint) -> c_void { fail!("GenQueries was not loaded") }
    pub extern "C" fn GenQueriesARB(_: GLsizei, _: *GLuint) -> c_void { fail!("GenQueriesARB was not loaded") }
    pub extern "C" fn GenQueriesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenQueriesEXT was not loaded") }
    pub extern "C" fn GenRenderbuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("GenRenderbuffers was not loaded") }
    pub extern "C" fn GenRenderbuffersEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenRenderbuffersEXT was not loaded") }
    pub extern "C" fn GenRenderbuffersOES(_: GLsizei, _: *GLuint) -> c_void { fail!("GenRenderbuffersOES was not loaded") }
    pub extern "C" fn GenSamplers(_: GLsizei, _: *GLuint) -> c_void { fail!("GenSamplers was not loaded") }
    pub extern "C" fn GenSymbolsEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> GLuint { fail!("GenSymbolsEXT was not loaded") }
    pub extern "C" fn GenTextures(_: GLsizei, _: *GLuint) -> c_void { fail!("GenTextures was not loaded") }
    pub extern "C" fn GenTexturesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenTexturesEXT was not loaded") }
    pub extern "C" fn GenTransformFeedbacks(_: GLsizei, _: *GLuint) -> c_void { fail!("GenTransformFeedbacks was not loaded") }
    pub extern "C" fn GenTransformFeedbacksNV(_: GLsizei, _: *GLuint) -> c_void { fail!("GenTransformFeedbacksNV was not loaded") }
    pub extern "C" fn GenVertexArrays(_: GLsizei, _: *GLuint) -> c_void { fail!("GenVertexArrays was not loaded") }
    pub extern "C" fn GenVertexArraysAPPLE(_: GLsizei, _: *GLuint) -> c_void { fail!("GenVertexArraysAPPLE was not loaded") }
    pub extern "C" fn GenVertexArraysOES(_: GLsizei, _: *GLuint) -> c_void { fail!("GenVertexArraysOES was not loaded") }
    pub extern "C" fn GenVertexShadersEXT(_: GLuint) -> GLuint { fail!("GenVertexShadersEXT was not loaded") }
    pub extern "C" fn GenerateMipmap(_: GLenum) -> c_void { fail!("GenerateMipmap was not loaded") }
    pub extern "C" fn GenerateMipmapEXT(_: GLenum) -> c_void { fail!("GenerateMipmapEXT was not loaded") }
    pub extern "C" fn GenerateMipmapOES(_: GLenum) -> c_void { fail!("GenerateMipmapOES was not loaded") }
    pub extern "C" fn GenerateMultiTexMipmapEXT(_: GLenum, _: GLenum) -> c_void { fail!("GenerateMultiTexMipmapEXT was not loaded") }
    pub extern "C" fn GenerateTextureMipmapEXT(_: GLuint, _: GLenum) -> c_void { fail!("GenerateTextureMipmapEXT was not loaded") }
    pub extern "C" fn GetActiveAtomicCounterBufferiv(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetActiveAtomicCounterBufferiv was not loaded") }
    pub extern "C" fn GetActiveAttrib(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLint, _: *GLenum, _: *GLchar) -> c_void { fail!("GetActiveAttrib was not loaded") }
    pub extern "C" fn GetActiveAttribARB(_: GLhandleARB, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLint, _: *GLenum, _: *GLcharARB) -> c_void { fail!("GetActiveAttribARB was not loaded") }
    pub extern "C" fn GetActiveSubroutineName(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetActiveSubroutineName was not loaded") }
    pub extern "C" fn GetActiveSubroutineUniformName(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetActiveSubroutineUniformName was not loaded") }
    pub extern "C" fn GetActiveSubroutineUniformiv(_: GLuint, _: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetActiveSubroutineUniformiv was not loaded") }
    pub extern "C" fn GetActiveUniform(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLint, _: *GLenum, _: *GLchar) -> c_void { fail!("GetActiveUniform was not loaded") }
    pub extern "C" fn GetActiveUniformARB(_: GLhandleARB, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLint, _: *GLenum, _: *GLcharARB) -> c_void { fail!("GetActiveUniformARB was not loaded") }
    pub extern "C" fn GetActiveUniformBlockName(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetActiveUniformBlockName was not loaded") }
    pub extern "C" fn GetActiveUniformBlockiv(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetActiveUniformBlockiv was not loaded") }
    pub extern "C" fn GetActiveUniformName(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetActiveUniformName was not loaded") }
    pub extern "C" fn GetActiveUniformsiv(_: GLuint, _: GLsizei, _: *GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetActiveUniformsiv was not loaded") }
    pub extern "C" fn GetActiveVaryingNV(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLsizei, _: *GLenum, _: *GLchar) -> c_void { fail!("GetActiveVaryingNV was not loaded") }
    pub extern "C" fn GetArrayObjectfvATI(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetArrayObjectfvATI was not loaded") }
    pub extern "C" fn GetArrayObjectivATI(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetArrayObjectivATI was not loaded") }
    pub extern "C" fn GetAttachedObjectsARB(_: GLhandleARB, _: GLsizei, _: *GLsizei, _: *GLhandleARB) -> c_void { fail!("GetAttachedObjectsARB was not loaded") }
    pub extern "C" fn GetAttachedShaders(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLuint) -> c_void { fail!("GetAttachedShaders was not loaded") }
    pub extern "C" fn GetAttribLocation(_: GLuint, _: *GLchar) -> GLint { fail!("GetAttribLocation was not loaded") }
    pub extern "C" fn GetAttribLocationARB(_: GLhandleARB, _: *GLcharARB) -> GLint { fail!("GetAttribLocationARB was not loaded") }
    pub extern "C" fn GetBooleanIndexedvEXT(_: GLenum, _: GLuint, _: *GLboolean) -> c_void { fail!("GetBooleanIndexedvEXT was not loaded") }
    pub extern "C" fn GetBooleani_v(_: GLenum, _: GLuint, _: *GLboolean) -> c_void { fail!("GetBooleani_v was not loaded") }
    pub extern "C" fn GetBooleanv(_: GLenum, _: *GLboolean) -> c_void { fail!("GetBooleanv was not loaded") }
    pub extern "C" fn GetBufferParameteri64v(_: GLenum, _: GLenum, _: *GLint64) -> c_void { fail!("GetBufferParameteri64v was not loaded") }
    pub extern "C" fn GetBufferParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetBufferParameteriv was not loaded") }
    pub extern "C" fn GetBufferParameterivARB(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetBufferParameterivARB was not loaded") }
    pub extern "C" fn GetBufferParameterui64vNV(_: GLenum, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetBufferParameterui64vNV was not loaded") }
    pub extern "C" fn GetBufferPointerv(_: GLenum, _: GLenum, _: **GLvoid) -> c_void { fail!("GetBufferPointerv was not loaded") }
    pub extern "C" fn GetBufferPointervARB(_: GLenum, _: GLenum, _: **GLvoid) -> c_void { fail!("GetBufferPointervARB was not loaded") }
    pub extern "C" fn GetBufferPointervOES(_: GLenum, _: GLenum, _: **GLvoid) -> c_void { fail!("GetBufferPointervOES was not loaded") }
    pub extern "C" fn GetBufferSubData(_: GLenum, _: GLintptr, _: GLsizeiptr, _: *GLvoid) -> c_void { fail!("GetBufferSubData was not loaded") }
    pub extern "C" fn GetBufferSubDataARB(_: GLenum, _: GLintptrARB, _: GLsizeiptrARB, _: *GLvoid) -> c_void { fail!("GetBufferSubDataARB was not loaded") }
    pub extern "C" fn GetClipPlane(_: GLenum, _: *GLdouble) -> c_void { fail!("GetClipPlane was not loaded") }
    pub extern "C" fn GetClipPlanef(_: GLenum, _: *GLfloat) -> c_void { fail!("GetClipPlanef was not loaded") }
    pub extern "C" fn GetClipPlanefOES(_: GLenum, _: *GLfloat) -> c_void { fail!("GetClipPlanefOES was not loaded") }
    pub extern "C" fn GetClipPlanex(_: GLenum, _: *GLfixed) -> c_void { fail!("GetClipPlanex was not loaded") }
    pub extern "C" fn GetClipPlanexOES(_: GLenum, _: *GLfixed) -> c_void { fail!("GetClipPlanexOES was not loaded") }
    pub extern "C" fn GetColorTable(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetColorTable was not loaded") }
    pub extern "C" fn GetColorTableEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetColorTableEXT was not loaded") }
    pub extern "C" fn GetColorTableParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetColorTableParameterfv was not loaded") }
    pub extern "C" fn GetColorTableParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetColorTableParameterfvEXT was not loaded") }
    pub extern "C" fn GetColorTableParameterfvSGI(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetColorTableParameterfvSGI was not loaded") }
    pub extern "C" fn GetColorTableParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetColorTableParameteriv was not loaded") }
    pub extern "C" fn GetColorTableParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetColorTableParameterivEXT was not loaded") }
    pub extern "C" fn GetColorTableParameterivSGI(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetColorTableParameterivSGI was not loaded") }
    pub extern "C" fn GetColorTableSGI(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetColorTableSGI was not loaded") }
    pub extern "C" fn GetCombinerInputParameterfvNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetCombinerInputParameterfvNV was not loaded") }
    pub extern "C" fn GetCombinerInputParameterivNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetCombinerInputParameterivNV was not loaded") }
    pub extern "C" fn GetCombinerOutputParameterfvNV(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetCombinerOutputParameterfvNV was not loaded") }
    pub extern "C" fn GetCombinerOutputParameterivNV(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetCombinerOutputParameterivNV was not loaded") }
    pub extern "C" fn GetCombinerStageParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetCombinerStageParameterfvNV was not loaded") }
    pub extern "C" fn GetCompressedMultiTexImageEXT(_: GLenum, _: GLenum, _: GLint, _: *GLvoid) -> c_void { fail!("GetCompressedMultiTexImageEXT was not loaded") }
    pub extern "C" fn GetCompressedTexImage(_: GLenum, _: GLint, _: *GLvoid) -> c_void { fail!("GetCompressedTexImage was not loaded") }
    pub extern "C" fn GetCompressedTexImageARB(_: GLenum, _: GLint, _: *GLvoid) -> c_void { fail!("GetCompressedTexImageARB was not loaded") }
    pub extern "C" fn GetCompressedTextureImageEXT(_: GLuint, _: GLenum, _: GLint, _: *GLvoid) -> c_void { fail!("GetCompressedTextureImageEXT was not loaded") }
    pub extern "C" fn GetConvolutionFilter(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetConvolutionFilter was not loaded") }
    pub extern "C" fn GetConvolutionFilterEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetConvolutionFilterEXT was not loaded") }
    pub extern "C" fn GetConvolutionParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetConvolutionParameterfv was not loaded") }
    pub extern "C" fn GetConvolutionParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetConvolutionParameterfvEXT was not loaded") }
    pub extern "C" fn GetConvolutionParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetConvolutionParameteriv was not loaded") }
    pub extern "C" fn GetConvolutionParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetConvolutionParameterivEXT was not loaded") }
    pub extern "C" fn GetConvolutionParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetConvolutionParameterxvOES was not loaded") }
    pub extern "C" fn GetDebugMessageLog(_: GLuint, _: GLsizei, _: *GLenum, _: *GLenum, _: *GLuint, _: *GLenum, _: *GLsizei, _: *GLchar) -> GLuint { fail!("GetDebugMessageLog was not loaded") }
    pub extern "C" fn GetDebugMessageLogAMD(_: GLuint, _: GLsizei, _: *GLenum, _: *GLuint, _: *GLuint, _: *GLsizei, _: *GLchar) -> GLuint { fail!("GetDebugMessageLogAMD was not loaded") }
    pub extern "C" fn GetDebugMessageLogARB(_: GLuint, _: GLsizei, _: *GLenum, _: *GLenum, _: *GLuint, _: *GLenum, _: *GLsizei, _: *GLchar) -> GLuint { fail!("GetDebugMessageLogARB was not loaded") }
    pub extern "C" fn GetDebugMessageLogKHR(_: GLuint, _: GLsizei, _: *GLenum, _: *GLenum, _: *GLuint, _: *GLenum, _: *GLsizei, _: *GLchar) -> GLuint { fail!("GetDebugMessageLogKHR was not loaded") }
    pub extern "C" fn GetDetailTexFuncSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("GetDetailTexFuncSGIS was not loaded") }
    pub extern "C" fn GetDoubleIndexedvEXT(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetDoubleIndexedvEXT was not loaded") }
    pub extern "C" fn GetDoublei_v(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetDoublei_v was not loaded") }
    pub extern "C" fn GetDoublei_vEXT(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetDoublei_vEXT was not loaded") }
    pub extern "C" fn GetDoublev(_: GLenum, _: *GLdouble) -> c_void { fail!("GetDoublev was not loaded") }
    pub extern "C" fn GetDriverControlStringQCOM(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetDriverControlStringQCOM was not loaded") }
    pub extern "C" fn GetDriverControlsQCOM(_: *GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("GetDriverControlsQCOM was not loaded") }
    pub extern "C" fn GetError() -> GLenum { fail!("GetError was not loaded") }
    pub extern "C" fn GetFenceivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetFenceivNV was not loaded") }
    pub extern "C" fn GetFinalCombinerInputParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetFinalCombinerInputParameterfvNV was not loaded") }
    pub extern "C" fn GetFinalCombinerInputParameterivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFinalCombinerInputParameterivNV was not loaded") }
    pub extern "C" fn GetFixedv(_: GLenum, _: *GLfixed) -> c_void { fail!("GetFixedv was not loaded") }
    pub extern "C" fn GetFixedvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("GetFixedvOES was not loaded") }
    pub extern "C" fn GetFloatIndexedvEXT(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetFloatIndexedvEXT was not loaded") }
    pub extern "C" fn GetFloati_v(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetFloati_v was not loaded") }
    pub extern "C" fn GetFloati_vEXT(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetFloati_vEXT was not loaded") }
    pub extern "C" fn GetFloatv(_: GLenum, _: *GLfloat) -> c_void { fail!("GetFloatv was not loaded") }
    pub extern "C" fn GetFogFuncSGIS(_: *GLfloat) -> c_void { fail!("GetFogFuncSGIS was not loaded") }
    pub extern "C" fn GetFragDataIndex(_: GLuint, _: *GLchar) -> GLint { fail!("GetFragDataIndex was not loaded") }
    pub extern "C" fn GetFragDataLocation(_: GLuint, _: *GLchar) -> GLint { fail!("GetFragDataLocation was not loaded") }
    pub extern "C" fn GetFragDataLocationEXT(_: GLuint, _: *GLchar) -> GLint { fail!("GetFragDataLocationEXT was not loaded") }
    pub extern "C" fn GetFragmentLightfvSGIX(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetFragmentLightfvSGIX was not loaded") }
    pub extern "C" fn GetFragmentLightivSGIX(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFragmentLightivSGIX was not loaded") }
    pub extern "C" fn GetFragmentMaterialfvSGIX(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetFragmentMaterialfvSGIX was not loaded") }
    pub extern "C" fn GetFragmentMaterialivSGIX(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFragmentMaterialivSGIX was not loaded") }
    pub extern "C" fn GetFramebufferAttachmentParameteriv(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferAttachmentParameteriv was not loaded") }
    pub extern "C" fn GetFramebufferAttachmentParameterivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferAttachmentParameterivEXT was not loaded") }
    pub extern "C" fn GetFramebufferAttachmentParameterivOES(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferAttachmentParameterivOES was not loaded") }
    pub extern "C" fn GetFramebufferParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferParameteriv was not loaded") }
    pub extern "C" fn GetFramebufferParameterivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferParameterivEXT was not loaded") }
    pub extern "C" fn GetGraphicsResetStatusARB() -> GLenum { fail!("GetGraphicsResetStatusARB was not loaded") }
    pub extern "C" fn GetGraphicsResetStatusEXT() -> GLenum { fail!("GetGraphicsResetStatusEXT was not loaded") }
    pub extern "C" fn GetHandleARB(_: GLenum) -> GLhandleARB { fail!("GetHandleARB was not loaded") }
    pub extern "C" fn GetHistogram(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetHistogram was not loaded") }
    pub extern "C" fn GetHistogramEXT(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetHistogramEXT was not loaded") }
    pub extern "C" fn GetHistogramParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetHistogramParameterfv was not loaded") }
    pub extern "C" fn GetHistogramParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetHistogramParameterfvEXT was not loaded") }
    pub extern "C" fn GetHistogramParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetHistogramParameteriv was not loaded") }
    pub extern "C" fn GetHistogramParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetHistogramParameterivEXT was not loaded") }
    pub extern "C" fn GetHistogramParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetHistogramParameterxvOES was not loaded") }
    pub extern "C" fn GetImageHandleARB(_: GLuint, _: GLint, _: GLboolean, _: GLint, _: GLenum) -> GLuint64 { fail!("GetImageHandleARB was not loaded") }
    pub extern "C" fn GetImageHandleNV(_: GLuint, _: GLint, _: GLboolean, _: GLint, _: GLenum) -> GLuint64 { fail!("GetImageHandleNV was not loaded") }
    pub extern "C" fn GetImageTransformParameterfvHP(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetImageTransformParameterfvHP was not loaded") }
    pub extern "C" fn GetImageTransformParameterivHP(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetImageTransformParameterivHP was not loaded") }
    pub extern "C" fn GetInfoLogARB(_: GLhandleARB, _: GLsizei, _: *GLsizei, _: *GLcharARB) -> c_void { fail!("GetInfoLogARB was not loaded") }
    pub extern "C" fn GetInstrumentsSGIX() -> GLint { fail!("GetInstrumentsSGIX was not loaded") }
    pub extern "C" fn GetInteger64i_v(_: GLenum, _: GLuint, _: *GLint64) -> c_void { fail!("GetInteger64i_v was not loaded") }
    pub extern "C" fn GetInteger64v(_: GLenum, _: *GLint64) -> c_void { fail!("GetInteger64v was not loaded") }
    pub extern "C" fn GetInteger64vAPPLE(_: GLenum, _: *GLint64) -> c_void { fail!("GetInteger64vAPPLE was not loaded") }
    pub extern "C" fn GetIntegerIndexedvEXT(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetIntegerIndexedvEXT was not loaded") }
    pub extern "C" fn GetIntegeri_v(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetIntegeri_v was not loaded") }
    pub extern "C" fn GetIntegeri_vEXT(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetIntegeri_vEXT was not loaded") }
    pub extern "C" fn GetIntegerui64i_vNV(_: GLenum, _: GLuint, _: *GLuint64EXT) -> c_void { fail!("GetIntegerui64i_vNV was not loaded") }
    pub extern "C" fn GetIntegerui64vNV(_: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetIntegerui64vNV was not loaded") }
    pub extern "C" fn GetIntegerv(_: GLenum, _: *GLint) -> c_void { fail!("GetIntegerv was not loaded") }
    pub extern "C" fn GetInternalformati64v(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLint64) -> c_void { fail!("GetInternalformati64v was not loaded") }
    pub extern "C" fn GetInternalformativ(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLint) -> c_void { fail!("GetInternalformativ was not loaded") }
    pub extern "C" fn GetInvariantBooleanvEXT(_: GLuint, _: GLenum, _: *GLboolean) -> c_void { fail!("GetInvariantBooleanvEXT was not loaded") }
    pub extern "C" fn GetInvariantFloatvEXT(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetInvariantFloatvEXT was not loaded") }
    pub extern "C" fn GetInvariantIntegervEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetInvariantIntegervEXT was not loaded") }
    pub extern "C" fn GetLightfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetLightfv was not loaded") }
    pub extern "C" fn GetLightiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetLightiv was not loaded") }
    pub extern "C" fn GetLightx(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetLightx was not loaded") }
    pub extern "C" fn GetLightxOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetLightxOES was not loaded") }
    pub extern "C" fn GetLightxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetLightxv was not loaded") }
    pub extern "C" fn GetLightxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetLightxvOES was not loaded") }
    pub extern "C" fn GetListParameterfvSGIX(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetListParameterfvSGIX was not loaded") }
    pub extern "C" fn GetListParameterivSGIX(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetListParameterivSGIX was not loaded") }
    pub extern "C" fn GetLocalConstantBooleanvEXT(_: GLuint, _: GLenum, _: *GLboolean) -> c_void { fail!("GetLocalConstantBooleanvEXT was not loaded") }
    pub extern "C" fn GetLocalConstantFloatvEXT(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetLocalConstantFloatvEXT was not loaded") }
    pub extern "C" fn GetLocalConstantIntegervEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetLocalConstantIntegervEXT was not loaded") }
    pub extern "C" fn GetMapAttribParameterfvNV(_: GLenum, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMapAttribParameterfvNV was not loaded") }
    pub extern "C" fn GetMapAttribParameterivNV(_: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetMapAttribParameterivNV was not loaded") }
    pub extern "C" fn GetMapControlPointsNV(_: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: GLsizei, _: GLboolean, _: *GLvoid) -> c_void { fail!("GetMapControlPointsNV was not loaded") }
    pub extern "C" fn GetMapParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMapParameterfvNV was not loaded") }
    pub extern "C" fn GetMapParameterivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMapParameterivNV was not loaded") }
    pub extern "C" fn GetMapdv(_: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("GetMapdv was not loaded") }
    pub extern "C" fn GetMapfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMapfv was not loaded") }
    pub extern "C" fn GetMapiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMapiv was not loaded") }
    pub extern "C" fn GetMapxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetMapxvOES was not loaded") }
    pub extern "C" fn GetMaterialfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMaterialfv was not loaded") }
    pub extern "C" fn GetMaterialiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMaterialiv was not loaded") }
    pub extern "C" fn GetMaterialx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("GetMaterialx was not loaded") }
    pub extern "C" fn GetMaterialxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("GetMaterialxOES was not loaded") }
    pub extern "C" fn GetMaterialxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetMaterialxv was not loaded") }
    pub extern "C" fn GetMaterialxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetMaterialxvOES was not loaded") }
    pub extern "C" fn GetMinmax(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetMinmax was not loaded") }
    pub extern "C" fn GetMinmaxEXT(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetMinmaxEXT was not loaded") }
    pub extern "C" fn GetMinmaxParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMinmaxParameterfv was not loaded") }
    pub extern "C" fn GetMinmaxParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMinmaxParameterfvEXT was not loaded") }
    pub extern "C" fn GetMinmaxParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMinmaxParameteriv was not loaded") }
    pub extern "C" fn GetMinmaxParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMinmaxParameterivEXT was not loaded") }
    pub extern "C" fn GetMultiTexEnvfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMultiTexEnvfvEXT was not loaded") }
    pub extern "C" fn GetMultiTexEnvivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexEnvivEXT was not loaded") }
    pub extern "C" fn GetMultiTexGendvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("GetMultiTexGendvEXT was not loaded") }
    pub extern "C" fn GetMultiTexGenfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMultiTexGenfvEXT was not loaded") }
    pub extern "C" fn GetMultiTexGenivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexGenivEXT was not loaded") }
    pub extern "C" fn GetMultiTexImageEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetMultiTexImageEXT was not loaded") }
    pub extern "C" fn GetMultiTexLevelParameterfvEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMultiTexLevelParameterfvEXT was not loaded") }
    pub extern "C" fn GetMultiTexLevelParameterivEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexLevelParameterivEXT was not loaded") }
    pub extern "C" fn GetMultiTexParameterIivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexParameterIivEXT was not loaded") }
    pub extern "C" fn GetMultiTexParameterIuivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("GetMultiTexParameterIuivEXT was not loaded") }
    pub extern "C" fn GetMultiTexParameterfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMultiTexParameterfvEXT was not loaded") }
    pub extern "C" fn GetMultiTexParameterivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexParameterivEXT was not loaded") }
    pub extern "C" fn GetMultisamplefv(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetMultisamplefv was not loaded") }
    pub extern "C" fn GetMultisamplefvNV(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetMultisamplefvNV was not loaded") }
    pub extern "C" fn GetNamedBufferParameterivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedBufferParameterivEXT was not loaded") }
    pub extern "C" fn GetNamedBufferParameterui64vNV(_: GLuint, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetNamedBufferParameterui64vNV was not loaded") }
    pub extern "C" fn GetNamedBufferPointervEXT(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetNamedBufferPointervEXT was not loaded") }
    pub extern "C" fn GetNamedBufferSubDataEXT(_: GLuint, _: GLintptr, _: GLsizeiptr, _: *GLvoid) -> c_void { fail!("GetNamedBufferSubDataEXT was not loaded") }
    pub extern "C" fn GetNamedFramebufferAttachmentParameterivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedFramebufferAttachmentParameterivEXT was not loaded") }
    pub extern "C" fn GetNamedFramebufferParameterivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedFramebufferParameterivEXT was not loaded") }
    pub extern "C" fn GetNamedProgramLocalParameterIivEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetNamedProgramLocalParameterIivEXT was not loaded") }
    pub extern "C" fn GetNamedProgramLocalParameterIuivEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GetNamedProgramLocalParameterIuivEXT was not loaded") }
    pub extern "C" fn GetNamedProgramLocalParameterdvEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetNamedProgramLocalParameterdvEXT was not loaded") }
    pub extern "C" fn GetNamedProgramLocalParameterfvEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetNamedProgramLocalParameterfvEXT was not loaded") }
    pub extern "C" fn GetNamedProgramStringEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetNamedProgramStringEXT was not loaded") }
    pub extern "C" fn GetNamedProgramivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedProgramivEXT was not loaded") }
    pub extern "C" fn GetNamedRenderbufferParameterivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedRenderbufferParameterivEXT was not loaded") }
    pub extern "C" fn GetNamedStringARB(_: GLint, _: *GLchar, _: GLsizei, _: *GLint, _: *GLchar) -> c_void { fail!("GetNamedStringARB was not loaded") }
    pub extern "C" fn GetNamedStringivARB(_: GLint, _: *GLchar, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedStringivARB was not loaded") }
    pub extern "C" fn GetObjectBufferfvATI(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetObjectBufferfvATI was not loaded") }
    pub extern "C" fn GetObjectBufferivATI(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetObjectBufferivATI was not loaded") }
    pub extern "C" fn GetObjectLabel(_: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectLabel was not loaded") }
    pub extern "C" fn GetObjectLabelEXT(_: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectLabelEXT was not loaded") }
    pub extern "C" fn GetObjectLabelKHR(_: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectLabelKHR was not loaded") }
    pub extern "C" fn GetObjectParameterfvARB(_: GLhandleARB, _: GLenum, _: *GLfloat) -> c_void { fail!("GetObjectParameterfvARB was not loaded") }
    pub extern "C" fn GetObjectParameterivAPPLE(_: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetObjectParameterivAPPLE was not loaded") }
    pub extern "C" fn GetObjectParameterivARB(_: GLhandleARB, _: GLenum, _: *GLint) -> c_void { fail!("GetObjectParameterivARB was not loaded") }
    pub extern "C" fn GetObjectPtrLabel(_: *c_void, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectPtrLabel was not loaded") }
    pub extern "C" fn GetObjectPtrLabelKHR(_: *c_void, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectPtrLabelKHR was not loaded") }
    pub extern "C" fn GetOcclusionQueryivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetOcclusionQueryivNV was not loaded") }
    pub extern "C" fn GetOcclusionQueryuivNV(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetOcclusionQueryuivNV was not loaded") }
    pub extern "C" fn GetPathColorGenfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPathColorGenfvNV was not loaded") }
    pub extern "C" fn GetPathColorGenivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetPathColorGenivNV was not loaded") }
    pub extern "C" fn GetPathCommandsNV(_: GLuint, _: *GLubyte) -> c_void { fail!("GetPathCommandsNV was not loaded") }
    pub extern "C" fn GetPathCoordsNV(_: GLuint, _: *GLfloat) -> c_void { fail!("GetPathCoordsNV was not loaded") }
    pub extern "C" fn GetPathDashArrayNV(_: GLuint, _: *GLfloat) -> c_void { fail!("GetPathDashArrayNV was not loaded") }
    pub extern "C" fn GetPathLengthNV(_: GLuint, _: GLsizei, _: GLsizei) -> GLfloat { fail!("GetPathLengthNV was not loaded") }
    pub extern "C" fn GetPathMetricRangeNV(_: GLbitfield, _: GLuint, _: GLsizei, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetPathMetricRangeNV was not loaded") }
    pub extern "C" fn GetPathMetricsNV(_: GLbitfield, _: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetPathMetricsNV was not loaded") }
    pub extern "C" fn GetPathParameterfvNV(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPathParameterfvNV was not loaded") }
    pub extern "C" fn GetPathParameterivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetPathParameterivNV was not loaded") }
    pub extern "C" fn GetPathSpacingNV(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLfloat, _: GLfloat, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPathSpacingNV was not loaded") }
    pub extern "C" fn GetPathTexGenfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPathTexGenfvNV was not loaded") }
    pub extern "C" fn GetPathTexGenivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetPathTexGenivNV was not loaded") }
    pub extern "C" fn GetPerfMonitorCounterDataAMD(_: GLuint, _: GLenum, _: GLsizei, _: *GLuint, _: *GLint) -> c_void { fail!("GetPerfMonitorCounterDataAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorCounterInfoAMD(_: GLuint, _: GLuint, _: GLenum, _: *GLvoid) -> c_void { fail!("GetPerfMonitorCounterInfoAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorCounterStringAMD(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetPerfMonitorCounterStringAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorCountersAMD(_: GLuint, _: *GLint, _: *GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("GetPerfMonitorCountersAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorGroupStringAMD(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetPerfMonitorGroupStringAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorGroupsAMD(_: *GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("GetPerfMonitorGroupsAMD was not loaded") }
    pub extern "C" fn GetPixelMapfv(_: GLenum, _: *GLfloat) -> c_void { fail!("GetPixelMapfv was not loaded") }
    pub extern "C" fn GetPixelMapuiv(_: GLenum, _: *GLuint) -> c_void { fail!("GetPixelMapuiv was not loaded") }
    pub extern "C" fn GetPixelMapusv(_: GLenum, _: *GLushort) -> c_void { fail!("GetPixelMapusv was not loaded") }
    pub extern "C" fn GetPixelMapxv(_: GLenum, _: GLint, _: *GLfixed) -> c_void { fail!("GetPixelMapxv was not loaded") }
    pub extern "C" fn GetPixelTexGenParameterfvSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("GetPixelTexGenParameterfvSGIS was not loaded") }
    pub extern "C" fn GetPixelTexGenParameterivSGIS(_: GLenum, _: *GLint) -> c_void { fail!("GetPixelTexGenParameterivSGIS was not loaded") }
    pub extern "C" fn GetPixelTransformParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPixelTransformParameterfvEXT was not loaded") }
    pub extern "C" fn GetPixelTransformParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetPixelTransformParameterivEXT was not loaded") }
    pub extern "C" fn GetPointerIndexedvEXT(_: GLenum, _: GLuint, _: **GLvoid) -> c_void { fail!("GetPointerIndexedvEXT was not loaded") }
    pub extern "C" fn GetPointeri_vEXT(_: GLenum, _: GLuint, _: **GLvoid) -> c_void { fail!("GetPointeri_vEXT was not loaded") }
    pub extern "C" fn GetPointerv(_: GLenum, _: **GLvoid) -> c_void { fail!("GetPointerv was not loaded") }
    pub extern "C" fn GetPointervEXT(_: GLenum, _: **GLvoid) -> c_void { fail!("GetPointervEXT was not loaded") }
    pub extern "C" fn GetPointervKHR(_: GLenum, _: **GLvoid) -> c_void { fail!("GetPointervKHR was not loaded") }
    pub extern "C" fn GetPolygonStipple(_: *GLubyte) -> c_void { fail!("GetPolygonStipple was not loaded") }
    pub extern "C" fn GetProgramBinary(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLenum, _: *GLvoid) -> c_void { fail!("GetProgramBinary was not loaded") }
    pub extern "C" fn GetProgramBinaryOES(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLenum, _: *GLvoid) -> c_void { fail!("GetProgramBinaryOES was not loaded") }
    pub extern "C" fn GetProgramEnvParameterIivNV(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetProgramEnvParameterIivNV was not loaded") }
    pub extern "C" fn GetProgramEnvParameterIuivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GetProgramEnvParameterIuivNV was not loaded") }
    pub extern "C" fn GetProgramEnvParameterdvARB(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetProgramEnvParameterdvARB was not loaded") }
    pub extern "C" fn GetProgramEnvParameterfvARB(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetProgramEnvParameterfvARB was not loaded") }
    pub extern "C" fn GetProgramInfoLog(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetProgramInfoLog was not loaded") }
    pub extern "C" fn GetProgramInterfaceiv(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramInterfaceiv was not loaded") }
    pub extern "C" fn GetProgramLocalParameterIivNV(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetProgramLocalParameterIivNV was not loaded") }
    pub extern "C" fn GetProgramLocalParameterIuivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GetProgramLocalParameterIuivNV was not loaded") }
    pub extern "C" fn GetProgramLocalParameterdvARB(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetProgramLocalParameterdvARB was not loaded") }
    pub extern "C" fn GetProgramLocalParameterfvARB(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetProgramLocalParameterfvARB was not loaded") }
    pub extern "C" fn GetProgramNamedParameterdvNV(_: GLuint, _: GLsizei, _: *GLubyte, _: *GLdouble) -> c_void { fail!("GetProgramNamedParameterdvNV was not loaded") }
    pub extern "C" fn GetProgramNamedParameterfvNV(_: GLuint, _: GLsizei, _: *GLubyte, _: *GLfloat) -> c_void { fail!("GetProgramNamedParameterfvNV was not loaded") }
    pub extern "C" fn GetProgramParameterdvNV(_: GLenum, _: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetProgramParameterdvNV was not loaded") }
    pub extern "C" fn GetProgramParameterfvNV(_: GLenum, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetProgramParameterfvNV was not loaded") }
    pub extern "C" fn GetProgramPipelineInfoLog(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetProgramPipelineInfoLog was not loaded") }
    pub extern "C" fn GetProgramPipelineInfoLogEXT(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetProgramPipelineInfoLogEXT was not loaded") }
    pub extern "C" fn GetProgramPipelineiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramPipelineiv was not loaded") }
    pub extern "C" fn GetProgramPipelineivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramPipelineivEXT was not loaded") }
    pub extern "C" fn GetProgramResourceIndex(_: GLuint, _: GLenum, _: *GLchar) -> GLuint { fail!("GetProgramResourceIndex was not loaded") }
    pub extern "C" fn GetProgramResourceLocation(_: GLuint, _: GLenum, _: *GLchar) -> GLint { fail!("GetProgramResourceLocation was not loaded") }
    pub extern "C" fn GetProgramResourceLocationIndex(_: GLuint, _: GLenum, _: *GLchar) -> GLint { fail!("GetProgramResourceLocationIndex was not loaded") }
    pub extern "C" fn GetProgramResourceName(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetProgramResourceName was not loaded") }
    pub extern "C" fn GetProgramResourceiv(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLenum, _: GLsizei, _: *GLsizei, _: *GLint) -> c_void { fail!("GetProgramResourceiv was not loaded") }
    pub extern "C" fn GetProgramStageiv(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramStageiv was not loaded") }
    pub extern "C" fn GetProgramStringARB(_: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetProgramStringARB was not loaded") }
    pub extern "C" fn GetProgramStringNV(_: GLuint, _: GLenum, _: *GLubyte) -> c_void { fail!("GetProgramStringNV was not loaded") }
    pub extern "C" fn GetProgramSubroutineParameteruivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GetProgramSubroutineParameteruivNV was not loaded") }
    pub extern "C" fn GetProgramiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramiv was not loaded") }
    pub extern "C" fn GetProgramivARB(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramivARB was not loaded") }
    pub extern "C" fn GetProgramivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramivNV was not loaded") }
    pub extern "C" fn GetQueryIndexediv(_: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryIndexediv was not loaded") }
    pub extern "C" fn GetQueryObjecti64v(_: GLuint, _: GLenum, _: *GLint64) -> c_void { fail!("GetQueryObjecti64v was not loaded") }
    pub extern "C" fn GetQueryObjecti64vEXT(_: GLuint, _: GLenum, _: *GLint64) -> c_void { fail!("GetQueryObjecti64vEXT was not loaded") }
    pub extern "C" fn GetQueryObjectiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryObjectiv was not loaded") }
    pub extern "C" fn GetQueryObjectivARB(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryObjectivARB was not loaded") }
    pub extern "C" fn GetQueryObjectivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryObjectivEXT was not loaded") }
    pub extern "C" fn GetQueryObjectui64v(_: GLuint, _: GLenum, _: *GLuint64) -> c_void { fail!("GetQueryObjectui64v was not loaded") }
    pub extern "C" fn GetQueryObjectui64vEXT(_: GLuint, _: GLenum, _: *GLuint64) -> c_void { fail!("GetQueryObjectui64vEXT was not loaded") }
    pub extern "C" fn GetQueryObjectuiv(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetQueryObjectuiv was not loaded") }
    pub extern "C" fn GetQueryObjectuivARB(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetQueryObjectuivARB was not loaded") }
    pub extern "C" fn GetQueryObjectuivEXT(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetQueryObjectuivEXT was not loaded") }
    pub extern "C" fn GetQueryiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryiv was not loaded") }
    pub extern "C" fn GetQueryivARB(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryivARB was not loaded") }
    pub extern "C" fn GetQueryivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryivEXT was not loaded") }
    pub extern "C" fn GetRenderbufferParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetRenderbufferParameteriv was not loaded") }
    pub extern "C" fn GetRenderbufferParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetRenderbufferParameterivEXT was not loaded") }
    pub extern "C" fn GetRenderbufferParameterivOES(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetRenderbufferParameterivOES was not loaded") }
    pub extern "C" fn GetSamplerParameterIiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetSamplerParameterIiv was not loaded") }
    pub extern "C" fn GetSamplerParameterIuiv(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetSamplerParameterIuiv was not loaded") }
    pub extern "C" fn GetSamplerParameterfv(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetSamplerParameterfv was not loaded") }
    pub extern "C" fn GetSamplerParameteriv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetSamplerParameteriv was not loaded") }
    pub extern "C" fn GetSeparableFilter(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid, _: *GLvoid, _: *GLvoid) -> c_void { fail!("GetSeparableFilter was not loaded") }
    pub extern "C" fn GetSeparableFilterEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid, _: *GLvoid, _: *GLvoid) -> c_void { fail!("GetSeparableFilterEXT was not loaded") }
    pub extern "C" fn GetShaderInfoLog(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetShaderInfoLog was not loaded") }
    pub extern "C" fn GetShaderPrecisionFormat(_: GLenum, _: GLenum, _: *GLint, _: *GLint) -> c_void { fail!("GetShaderPrecisionFormat was not loaded") }
    pub extern "C" fn GetShaderSource(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetShaderSource was not loaded") }
    pub extern "C" fn GetShaderSourceARB(_: GLhandleARB, _: GLsizei, _: *GLsizei, _: *GLcharARB) -> c_void { fail!("GetShaderSourceARB was not loaded") }
    pub extern "C" fn GetShaderiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetShaderiv was not loaded") }
    pub extern "C" fn GetSharpenTexFuncSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("GetSharpenTexFuncSGIS was not loaded") }
    pub extern "C" fn GetString(_: GLenum) -> *GLubyte { fail!("GetString was not loaded") }
    pub extern "C" fn GetStringi(_: GLenum, _: GLuint) -> *GLubyte { fail!("GetStringi was not loaded") }
    pub extern "C" fn GetSubroutineIndex(_: GLuint, _: GLenum, _: *GLchar) -> GLuint { fail!("GetSubroutineIndex was not loaded") }
    pub extern "C" fn GetSubroutineUniformLocation(_: GLuint, _: GLenum, _: *GLchar) -> GLint { fail!("GetSubroutineUniformLocation was not loaded") }
    pub extern "C" fn GetSynciv(_: GLsync, _: GLenum, _: GLsizei, _: *GLsizei, _: *GLint) -> c_void { fail!("GetSynciv was not loaded") }
    pub extern "C" fn GetSyncivAPPLE(_: GLsync, _: GLenum, _: GLsizei, _: *GLsizei, _: *GLint) -> c_void { fail!("GetSyncivAPPLE was not loaded") }
    pub extern "C" fn GetTexBumpParameterfvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("GetTexBumpParameterfvATI was not loaded") }
    pub extern "C" fn GetTexBumpParameterivATI(_: GLenum, _: *GLint) -> c_void { fail!("GetTexBumpParameterivATI was not loaded") }
    pub extern "C" fn GetTexEnvfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexEnvfv was not loaded") }
    pub extern "C" fn GetTexEnviv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexEnviv was not loaded") }
    pub extern "C" fn GetTexEnvxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexEnvxv was not loaded") }
    pub extern "C" fn GetTexEnvxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexEnvxvOES was not loaded") }
    pub extern "C" fn GetTexFilterFuncSGIS(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexFilterFuncSGIS was not loaded") }
    pub extern "C" fn GetTexGendv(_: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("GetTexGendv was not loaded") }
    pub extern "C" fn GetTexGenfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexGenfv was not loaded") }
    pub extern "C" fn GetTexGenfvOES(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexGenfvOES was not loaded") }
    pub extern "C" fn GetTexGeniv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexGeniv was not loaded") }
    pub extern "C" fn GetTexGenivOES(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexGenivOES was not loaded") }
    pub extern "C" fn GetTexGenxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexGenxvOES was not loaded") }
    pub extern "C" fn GetTexImage(_: GLenum, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetTexImage was not loaded") }
    pub extern "C" fn GetTexLevelParameterfv(_: GLenum, _: GLint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexLevelParameterfv was not loaded") }
    pub extern "C" fn GetTexLevelParameteriv(_: GLenum, _: GLint, _: GLenum, _: *GLint) -> c_void { fail!("GetTexLevelParameteriv was not loaded") }
    pub extern "C" fn GetTexLevelParameterxvOES(_: GLenum, _: GLint, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexLevelParameterxvOES was not loaded") }
    pub extern "C" fn GetTexParameterIiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexParameterIiv was not loaded") }
    pub extern "C" fn GetTexParameterIivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexParameterIivEXT was not loaded") }
    pub extern "C" fn GetTexParameterIuiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("GetTexParameterIuiv was not loaded") }
    pub extern "C" fn GetTexParameterIuivEXT(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("GetTexParameterIuivEXT was not loaded") }
    pub extern "C" fn GetTexParameterPointervAPPLE(_: GLenum, _: GLenum, _: **GLvoid) -> c_void { fail!("GetTexParameterPointervAPPLE was not loaded") }
    pub extern "C" fn GetTexParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexParameterfv was not loaded") }
    pub extern "C" fn GetTexParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexParameteriv was not loaded") }
    pub extern "C" fn GetTexParameterxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexParameterxv was not loaded") }
    pub extern "C" fn GetTexParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexParameterxvOES was not loaded") }
    pub extern "C" fn GetTextureHandleARB(_: GLuint) -> GLuint64 { fail!("GetTextureHandleARB was not loaded") }
    pub extern "C" fn GetTextureHandleNV(_: GLuint) -> GLuint64 { fail!("GetTextureHandleNV was not loaded") }
    pub extern "C" fn GetTextureImageEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetTextureImageEXT was not loaded") }
    pub extern "C" fn GetTextureLevelParameterfvEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTextureLevelParameterfvEXT was not loaded") }
    pub extern "C" fn GetTextureLevelParameterivEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: *GLint) -> c_void { fail!("GetTextureLevelParameterivEXT was not loaded") }
    pub extern "C" fn GetTextureParameterIivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTextureParameterIivEXT was not loaded") }
    pub extern "C" fn GetTextureParameterIuivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("GetTextureParameterIuivEXT was not loaded") }
    pub extern "C" fn GetTextureParameterfvEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTextureParameterfvEXT was not loaded") }
    pub extern "C" fn GetTextureParameterivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTextureParameterivEXT was not loaded") }
    pub extern "C" fn GetTextureSamplerHandleARB(_: GLuint, _: GLuint) -> GLuint64 { fail!("GetTextureSamplerHandleARB was not loaded") }
    pub extern "C" fn GetTextureSamplerHandleNV(_: GLuint, _: GLuint) -> GLuint64 { fail!("GetTextureSamplerHandleNV was not loaded") }
    pub extern "C" fn GetTrackMatrixivNV(_: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetTrackMatrixivNV was not loaded") }
    pub extern "C" fn GetTransformFeedbackVarying(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLsizei, _: *GLenum, _: *GLchar) -> c_void { fail!("GetTransformFeedbackVarying was not loaded") }
    pub extern "C" fn GetTransformFeedbackVaryingEXT(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLsizei, _: *GLenum, _: *GLchar) -> c_void { fail!("GetTransformFeedbackVaryingEXT was not loaded") }
    pub extern "C" fn GetTransformFeedbackVaryingNV(_: GLuint, _: GLuint, _: *GLint) -> c_void { fail!("GetTransformFeedbackVaryingNV was not loaded") }
    pub extern "C" fn GetTranslatedShaderSourceANGLE(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetTranslatedShaderSourceANGLE was not loaded") }
    pub extern "C" fn GetUniformBlockIndex(_: GLuint, _: *GLchar) -> GLuint { fail!("GetUniformBlockIndex was not loaded") }
    pub extern "C" fn GetUniformBufferSizeEXT(_: GLuint, _: GLint) -> GLint { fail!("GetUniformBufferSizeEXT was not loaded") }
    pub extern "C" fn GetUniformIndices(_: GLuint, _: GLsizei, _: **GLchar, _: *GLuint) -> c_void { fail!("GetUniformIndices was not loaded") }
    pub extern "C" fn GetUniformLocation(_: GLuint, _: *GLchar) -> GLint { fail!("GetUniformLocation was not loaded") }
    pub extern "C" fn GetUniformLocationARB(_: GLhandleARB, _: *GLcharARB) -> GLint { fail!("GetUniformLocationARB was not loaded") }
    pub extern "C" fn GetUniformOffsetEXT(_: GLuint, _: GLint) -> GLintptr { fail!("GetUniformOffsetEXT was not loaded") }
    pub extern "C" fn GetUniformSubroutineuiv(_: GLenum, _: GLint, _: *GLuint) -> c_void { fail!("GetUniformSubroutineuiv was not loaded") }
    pub extern "C" fn GetUniformdv(_: GLuint, _: GLint, _: *GLdouble) -> c_void { fail!("GetUniformdv was not loaded") }
    pub extern "C" fn GetUniformfv(_: GLuint, _: GLint, _: *GLfloat) -> c_void { fail!("GetUniformfv was not loaded") }
    pub extern "C" fn GetUniformfvARB(_: GLhandleARB, _: GLint, _: *GLfloat) -> c_void { fail!("GetUniformfvARB was not loaded") }
    pub extern "C" fn GetUniformi64vNV(_: GLuint, _: GLint, _: *GLint64EXT) -> c_void { fail!("GetUniformi64vNV was not loaded") }
    pub extern "C" fn GetUniformiv(_: GLuint, _: GLint, _: *GLint) -> c_void { fail!("GetUniformiv was not loaded") }
    pub extern "C" fn GetUniformivARB(_: GLhandleARB, _: GLint, _: *GLint) -> c_void { fail!("GetUniformivARB was not loaded") }
    pub extern "C" fn GetUniformui64vNV(_: GLuint, _: GLint, _: *GLuint64EXT) -> c_void { fail!("GetUniformui64vNV was not loaded") }
    pub extern "C" fn GetUniformuiv(_: GLuint, _: GLint, _: *GLuint) -> c_void { fail!("GetUniformuiv was not loaded") }
    pub extern "C" fn GetUniformuivEXT(_: GLuint, _: GLint, _: *GLuint) -> c_void { fail!("GetUniformuivEXT was not loaded") }
    pub extern "C" fn GetVariantArrayObjectfvATI(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVariantArrayObjectfvATI was not loaded") }
    pub extern "C" fn GetVariantArrayObjectivATI(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVariantArrayObjectivATI was not loaded") }
    pub extern "C" fn GetVariantBooleanvEXT(_: GLuint, _: GLenum, _: *GLboolean) -> c_void { fail!("GetVariantBooleanvEXT was not loaded") }
    pub extern "C" fn GetVariantFloatvEXT(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVariantFloatvEXT was not loaded") }
    pub extern "C" fn GetVariantIntegervEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVariantIntegervEXT was not loaded") }
    pub extern "C" fn GetVariantPointervEXT(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVariantPointervEXT was not loaded") }
    pub extern "C" fn GetVaryingLocationNV(_: GLuint, _: *GLchar) -> GLint { fail!("GetVaryingLocationNV was not loaded") }
    pub extern "C" fn GetVertexArrayIntegeri_vEXT(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexArrayIntegeri_vEXT was not loaded") }
    pub extern "C" fn GetVertexArrayIntegervEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexArrayIntegervEXT was not loaded") }
    pub extern "C" fn GetVertexArrayPointeri_vEXT(_: GLuint, _: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexArrayPointeri_vEXT was not loaded") }
    pub extern "C" fn GetVertexArrayPointervEXT(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexArrayPointervEXT was not loaded") }
    pub extern "C" fn GetVertexAttribArrayObjectfvATI(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVertexAttribArrayObjectfvATI was not loaded") }
    pub extern "C" fn GetVertexAttribArrayObjectivATI(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribArrayObjectivATI was not loaded") }
    pub extern "C" fn GetVertexAttribIiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribIiv was not loaded") }
    pub extern "C" fn GetVertexAttribIivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribIivEXT was not loaded") }
    pub extern "C" fn GetVertexAttribIuiv(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetVertexAttribIuiv was not loaded") }
    pub extern "C" fn GetVertexAttribIuivEXT(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetVertexAttribIuivEXT was not loaded") }
    pub extern "C" fn GetVertexAttribLdv(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribLdv was not loaded") }
    pub extern "C" fn GetVertexAttribLdvEXT(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribLdvEXT was not loaded") }
    pub extern "C" fn GetVertexAttribLi64vNV(_: GLuint, _: GLenum, _: *GLint64EXT) -> c_void { fail!("GetVertexAttribLi64vNV was not loaded") }
    pub extern "C" fn GetVertexAttribLui64vARB(_: GLuint, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetVertexAttribLui64vARB was not loaded") }
    pub extern "C" fn GetVertexAttribLui64vNV(_: GLuint, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetVertexAttribLui64vNV was not loaded") }
    pub extern "C" fn GetVertexAttribPointerv(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexAttribPointerv was not loaded") }
    pub extern "C" fn GetVertexAttribPointervARB(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexAttribPointervARB was not loaded") }
    pub extern "C" fn GetVertexAttribPointervNV(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexAttribPointervNV was not loaded") }
    pub extern "C" fn GetVertexAttribdv(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribdv was not loaded") }
    pub extern "C" fn GetVertexAttribdvARB(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribdvARB was not loaded") }
    pub extern "C" fn GetVertexAttribdvNV(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribdvNV was not loaded") }
    pub extern "C" fn GetVertexAttribfv(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVertexAttribfv was not loaded") }
    pub extern "C" fn GetVertexAttribfvARB(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVertexAttribfvARB was not loaded") }
    pub extern "C" fn GetVertexAttribfvNV(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVertexAttribfvNV was not loaded") }
    pub extern "C" fn GetVertexAttribiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribiv was not loaded") }
    pub extern "C" fn GetVertexAttribivARB(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribivARB was not loaded") }
    pub extern "C" fn GetVertexAttribivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribivNV was not loaded") }
    pub extern "C" fn GetVideoCaptureStreamdvNV(_: GLuint, _: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVideoCaptureStreamdvNV was not loaded") }
    pub extern "C" fn GetVideoCaptureStreamfvNV(_: GLuint, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVideoCaptureStreamfvNV was not loaded") }
    pub extern "C" fn GetVideoCaptureStreamivNV(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVideoCaptureStreamivNV was not loaded") }
    pub extern "C" fn GetVideoCaptureivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVideoCaptureivNV was not loaded") }
    pub extern "C" fn GetVideoi64vNV(_: GLuint, _: GLenum, _: *GLint64EXT) -> c_void { fail!("GetVideoi64vNV was not loaded") }
    pub extern "C" fn GetVideoivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVideoivNV was not loaded") }
    pub extern "C" fn GetVideoui64vNV(_: GLuint, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetVideoui64vNV was not loaded") }
    pub extern "C" fn GetVideouivNV(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetVideouivNV was not loaded") }
    pub extern "C" fn GetnColorTableARB(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnColorTableARB was not loaded") }
    pub extern "C" fn GetnCompressedTexImageARB(_: GLenum, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnCompressedTexImageARB was not loaded") }
    pub extern "C" fn GetnConvolutionFilterARB(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnConvolutionFilterARB was not loaded") }
    pub extern "C" fn GetnHistogramARB(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnHistogramARB was not loaded") }
    pub extern "C" fn GetnMapdvARB(_: GLenum, _: GLenum, _: GLsizei, _: *GLdouble) -> c_void { fail!("GetnMapdvARB was not loaded") }
    pub extern "C" fn GetnMapfvARB(_: GLenum, _: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetnMapfvARB was not loaded") }
    pub extern "C" fn GetnMapivARB(_: GLenum, _: GLenum, _: GLsizei, _: *GLint) -> c_void { fail!("GetnMapivARB was not loaded") }
    pub extern "C" fn GetnMinmaxARB(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnMinmaxARB was not loaded") }
    pub extern "C" fn GetnPixelMapfvARB(_: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetnPixelMapfvARB was not loaded") }
    pub extern "C" fn GetnPixelMapuivARB(_: GLenum, _: GLsizei, _: *GLuint) -> c_void { fail!("GetnPixelMapuivARB was not loaded") }
    pub extern "C" fn GetnPixelMapusvARB(_: GLenum, _: GLsizei, _: *GLushort) -> c_void { fail!("GetnPixelMapusvARB was not loaded") }
    pub extern "C" fn GetnPolygonStippleARB(_: GLsizei, _: *GLubyte) -> c_void { fail!("GetnPolygonStippleARB was not loaded") }
    pub extern "C" fn GetnSeparableFilterARB(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid, _: GLsizei, _: *GLvoid, _: *GLvoid) -> c_void { fail!("GetnSeparableFilterARB was not loaded") }
    pub extern "C" fn GetnTexImageARB(_: GLenum, _: GLint, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnTexImageARB was not loaded") }
    pub extern "C" fn GetnUniformdvARB(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("GetnUniformdvARB was not loaded") }
    pub extern "C" fn GetnUniformfvARB(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetnUniformfvARB was not loaded") }
    pub extern "C" fn GetnUniformfvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetnUniformfvEXT was not loaded") }
    pub extern "C" fn GetnUniformivARB(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("GetnUniformivARB was not loaded") }
    pub extern "C" fn GetnUniformivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("GetnUniformivEXT was not loaded") }
    pub extern "C" fn GetnUniformuivARB(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("GetnUniformuivARB was not loaded") }
    pub extern "C" fn GlobalAlphaFactorbSUN(_: GLbyte) -> c_void { fail!("GlobalAlphaFactorbSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactordSUN(_: GLdouble) -> c_void { fail!("GlobalAlphaFactordSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactorfSUN(_: GLfloat) -> c_void { fail!("GlobalAlphaFactorfSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactoriSUN(_: GLint) -> c_void { fail!("GlobalAlphaFactoriSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactorsSUN(_: GLshort) -> c_void { fail!("GlobalAlphaFactorsSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactorubSUN(_: GLubyte) -> c_void { fail!("GlobalAlphaFactorubSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactoruiSUN(_: GLuint) -> c_void { fail!("GlobalAlphaFactoruiSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactorusSUN(_: GLushort) -> c_void { fail!("GlobalAlphaFactorusSUN was not loaded") }
    pub extern "C" fn Hint(_: GLenum, _: GLenum) -> c_void { fail!("Hint was not loaded") }
    pub extern "C" fn HintPGI(_: GLenum, _: GLint) -> c_void { fail!("HintPGI was not loaded") }
    pub extern "C" fn Histogram(_: GLenum, _: GLsizei, _: GLenum, _: GLboolean) -> c_void { fail!("Histogram was not loaded") }
    pub extern "C" fn HistogramEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLboolean) -> c_void { fail!("HistogramEXT was not loaded") }
    pub extern "C" fn IglooInterfaceSGIX(_: GLenum, _: *GLvoid) -> c_void { fail!("IglooInterfaceSGIX was not loaded") }
    pub extern "C" fn ImageTransformParameterfHP(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("ImageTransformParameterfHP was not loaded") }
    pub extern "C" fn ImageTransformParameterfvHP(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ImageTransformParameterfvHP was not loaded") }
    pub extern "C" fn ImageTransformParameteriHP(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("ImageTransformParameteriHP was not loaded") }
    pub extern "C" fn ImageTransformParameterivHP(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ImageTransformParameterivHP was not loaded") }
    pub extern "C" fn ImportSyncEXT(_: GLenum, _: GLintptr, _: GLbitfield) -> GLsync { fail!("ImportSyncEXT was not loaded") }
    pub extern "C" fn IndexFormatNV(_: GLenum, _: GLsizei) -> c_void { fail!("IndexFormatNV was not loaded") }
    pub extern "C" fn IndexFuncEXT(_: GLenum, _: GLclampf) -> c_void { fail!("IndexFuncEXT was not loaded") }
    pub extern "C" fn IndexMask(_: GLuint) -> c_void { fail!("IndexMask was not loaded") }
    pub extern "C" fn IndexMaterialEXT(_: GLenum, _: GLenum) -> c_void { fail!("IndexMaterialEXT was not loaded") }
    pub extern "C" fn IndexPointer(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("IndexPointer was not loaded") }
    pub extern "C" fn IndexPointerEXT(_: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("IndexPointerEXT was not loaded") }
    pub extern "C" fn IndexPointerListIBM(_: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("IndexPointerListIBM was not loaded") }
    pub extern "C" fn Indexd(_: GLdouble) -> c_void { fail!("Indexd was not loaded") }
    pub extern "C" fn Indexdv(_: *GLdouble) -> c_void { fail!("Indexdv was not loaded") }
    pub extern "C" fn Indexf(_: GLfloat) -> c_void { fail!("Indexf was not loaded") }
    pub extern "C" fn Indexfv(_: *GLfloat) -> c_void { fail!("Indexfv was not loaded") }
    pub extern "C" fn Indexi(_: GLint) -> c_void { fail!("Indexi was not loaded") }
    pub extern "C" fn Indexiv(_: *GLint) -> c_void { fail!("Indexiv was not loaded") }
    pub extern "C" fn Indexs(_: GLshort) -> c_void { fail!("Indexs was not loaded") }
    pub extern "C" fn Indexsv(_: *GLshort) -> c_void { fail!("Indexsv was not loaded") }
    pub extern "C" fn Indexub(_: GLubyte) -> c_void { fail!("Indexub was not loaded") }
    pub extern "C" fn Indexubv(_: *GLubyte) -> c_void { fail!("Indexubv was not loaded") }
    pub extern "C" fn IndexxOES(_: GLfixed) -> c_void { fail!("IndexxOES was not loaded") }
    pub extern "C" fn IndexxvOES(_: *GLfixed) -> c_void { fail!("IndexxvOES was not loaded") }
    pub extern "C" fn InitNames() -> c_void { fail!("InitNames was not loaded") }
    pub extern "C" fn InsertComponentEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("InsertComponentEXT was not loaded") }
    pub extern "C" fn InsertEventMarkerEXT(_: GLsizei, _: *GLchar) -> c_void { fail!("InsertEventMarkerEXT was not loaded") }
    pub extern "C" fn InstrumentsBufferSGIX(_: GLsizei, _: *GLint) -> c_void { fail!("InstrumentsBufferSGIX was not loaded") }
    pub extern "C" fn InterleavedArrays(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("InterleavedArrays was not loaded") }
    pub extern "C" fn InterpolatePathsNV(_: GLuint, _: GLuint, _: GLuint, _: GLfloat) -> c_void { fail!("InterpolatePathsNV was not loaded") }
    pub extern "C" fn InvalidateBufferData(_: GLuint) -> c_void { fail!("InvalidateBufferData was not loaded") }
    pub extern "C" fn InvalidateBufferSubData(_: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("InvalidateBufferSubData was not loaded") }
    pub extern "C" fn InvalidateFramebuffer(_: GLenum, _: GLsizei, _: *GLenum) -> c_void { fail!("InvalidateFramebuffer was not loaded") }
    pub extern "C" fn InvalidateSubFramebuffer(_: GLenum, _: GLsizei, _: *GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("InvalidateSubFramebuffer was not loaded") }
    pub extern "C" fn InvalidateTexImage(_: GLuint, _: GLint) -> c_void { fail!("InvalidateTexImage was not loaded") }
    pub extern "C" fn InvalidateTexSubImage(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("InvalidateTexSubImage was not loaded") }
    pub extern "C" fn IsAsyncMarkerSGIX(_: GLuint) -> GLboolean { fail!("IsAsyncMarkerSGIX was not loaded") }
    pub extern "C" fn IsBuffer(_: GLuint) -> GLboolean { fail!("IsBuffer was not loaded") }
    pub extern "C" fn IsBufferARB(_: GLuint) -> GLboolean { fail!("IsBufferARB was not loaded") }
    pub extern "C" fn IsBufferResidentNV(_: GLenum) -> GLboolean { fail!("IsBufferResidentNV was not loaded") }
    pub extern "C" fn IsEnabled(_: GLenum) -> GLboolean { fail!("IsEnabled was not loaded") }
    pub extern "C" fn IsEnabledIndexedEXT(_: GLenum, _: GLuint) -> GLboolean { fail!("IsEnabledIndexedEXT was not loaded") }
    pub extern "C" fn IsEnabledi(_: GLenum, _: GLuint) -> GLboolean { fail!("IsEnabledi was not loaded") }
    pub extern "C" fn IsFenceAPPLE(_: GLuint) -> GLboolean { fail!("IsFenceAPPLE was not loaded") }
    pub extern "C" fn IsFenceNV(_: GLuint) -> GLboolean { fail!("IsFenceNV was not loaded") }
    pub extern "C" fn IsFramebuffer(_: GLuint) -> GLboolean { fail!("IsFramebuffer was not loaded") }
    pub extern "C" fn IsFramebufferEXT(_: GLuint) -> GLboolean { fail!("IsFramebufferEXT was not loaded") }
    pub extern "C" fn IsFramebufferOES(_: GLuint) -> GLboolean { fail!("IsFramebufferOES was not loaded") }
    pub extern "C" fn IsImageHandleResidentARB(_: GLuint64) -> GLboolean { fail!("IsImageHandleResidentARB was not loaded") }
    pub extern "C" fn IsImageHandleResidentNV(_: GLuint64) -> GLboolean { fail!("IsImageHandleResidentNV was not loaded") }
    pub extern "C" fn IsList(_: GLuint) -> GLboolean { fail!("IsList was not loaded") }
    pub extern "C" fn IsNameAMD(_: GLenum, _: GLuint) -> GLboolean { fail!("IsNameAMD was not loaded") }
    pub extern "C" fn IsNamedBufferResidentNV(_: GLuint) -> GLboolean { fail!("IsNamedBufferResidentNV was not loaded") }
    pub extern "C" fn IsNamedStringARB(_: GLint, _: *GLchar) -> GLboolean { fail!("IsNamedStringARB was not loaded") }
    pub extern "C" fn IsObjectBufferATI(_: GLuint) -> GLboolean { fail!("IsObjectBufferATI was not loaded") }
    pub extern "C" fn IsOcclusionQueryNV(_: GLuint) -> GLboolean { fail!("IsOcclusionQueryNV was not loaded") }
    pub extern "C" fn IsPathNV(_: GLuint) -> GLboolean { fail!("IsPathNV was not loaded") }
    pub extern "C" fn IsPointInFillPathNV(_: GLuint, _: GLuint, _: GLfloat, _: GLfloat) -> GLboolean { fail!("IsPointInFillPathNV was not loaded") }
    pub extern "C" fn IsPointInStrokePathNV(_: GLuint, _: GLfloat, _: GLfloat) -> GLboolean { fail!("IsPointInStrokePathNV was not loaded") }
    pub extern "C" fn IsProgram(_: GLuint) -> GLboolean { fail!("IsProgram was not loaded") }
    pub extern "C" fn IsProgramARB(_: GLuint) -> GLboolean { fail!("IsProgramARB was not loaded") }
    pub extern "C" fn IsProgramNV(_: GLuint) -> GLboolean { fail!("IsProgramNV was not loaded") }
    pub extern "C" fn IsProgramPipeline(_: GLuint) -> GLboolean { fail!("IsProgramPipeline was not loaded") }
    pub extern "C" fn IsProgramPipelineEXT(_: GLuint) -> GLboolean { fail!("IsProgramPipelineEXT was not loaded") }
    pub extern "C" fn IsQuery(_: GLuint) -> GLboolean { fail!("IsQuery was not loaded") }
    pub extern "C" fn IsQueryARB(_: GLuint) -> GLboolean { fail!("IsQueryARB was not loaded") }
    pub extern "C" fn IsQueryEXT(_: GLuint) -> GLboolean { fail!("IsQueryEXT was not loaded") }
    pub extern "C" fn IsRenderbuffer(_: GLuint) -> GLboolean { fail!("IsRenderbuffer was not loaded") }
    pub extern "C" fn IsRenderbufferEXT(_: GLuint) -> GLboolean { fail!("IsRenderbufferEXT was not loaded") }
    pub extern "C" fn IsRenderbufferOES(_: GLuint) -> GLboolean { fail!("IsRenderbufferOES was not loaded") }
    pub extern "C" fn IsSampler(_: GLuint) -> GLboolean { fail!("IsSampler was not loaded") }
    pub extern "C" fn IsShader(_: GLuint) -> GLboolean { fail!("IsShader was not loaded") }
    pub extern "C" fn IsSync(_: GLsync) -> GLboolean { fail!("IsSync was not loaded") }
    pub extern "C" fn IsSyncAPPLE(_: GLsync) -> GLboolean { fail!("IsSyncAPPLE was not loaded") }
    pub extern "C" fn IsTexture(_: GLuint) -> GLboolean { fail!("IsTexture was not loaded") }
    pub extern "C" fn IsTextureEXT(_: GLuint) -> GLboolean { fail!("IsTextureEXT was not loaded") }
    pub extern "C" fn IsTextureHandleResidentARB(_: GLuint64) -> GLboolean { fail!("IsTextureHandleResidentARB was not loaded") }
    pub extern "C" fn IsTextureHandleResidentNV(_: GLuint64) -> GLboolean { fail!("IsTextureHandleResidentNV was not loaded") }
    pub extern "C" fn IsTransformFeedback(_: GLuint) -> GLboolean { fail!("IsTransformFeedback was not loaded") }
    pub extern "C" fn IsTransformFeedbackNV(_: GLuint) -> GLboolean { fail!("IsTransformFeedbackNV was not loaded") }
    pub extern "C" fn IsVariantEnabledEXT(_: GLuint, _: GLenum) -> GLboolean { fail!("IsVariantEnabledEXT was not loaded") }
    pub extern "C" fn IsVertexArray(_: GLuint) -> GLboolean { fail!("IsVertexArray was not loaded") }
    pub extern "C" fn IsVertexArrayAPPLE(_: GLuint) -> GLboolean { fail!("IsVertexArrayAPPLE was not loaded") }
    pub extern "C" fn IsVertexArrayOES(_: GLuint) -> GLboolean { fail!("IsVertexArrayOES was not loaded") }
    pub extern "C" fn IsVertexAttribEnabledAPPLE(_: GLuint, _: GLenum) -> GLboolean { fail!("IsVertexAttribEnabledAPPLE was not loaded") }
    pub extern "C" fn LabelObjectEXT(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("LabelObjectEXT was not loaded") }
    pub extern "C" fn LightEnviSGIX(_: GLenum, _: GLint) -> c_void { fail!("LightEnviSGIX was not loaded") }
    pub extern "C" fn LightModelf(_: GLenum, _: GLfloat) -> c_void { fail!("LightModelf was not loaded") }
    pub extern "C" fn LightModelfv(_: GLenum, _: *GLfloat) -> c_void { fail!("LightModelfv was not loaded") }
    pub extern "C" fn LightModeli(_: GLenum, _: GLint) -> c_void { fail!("LightModeli was not loaded") }
    pub extern "C" fn LightModeliv(_: GLenum, _: *GLint) -> c_void { fail!("LightModeliv was not loaded") }
    pub extern "C" fn LightModelx(_: GLenum, _: GLfixed) -> c_void { fail!("LightModelx was not loaded") }
    pub extern "C" fn LightModelxOES(_: GLenum, _: GLfixed) -> c_void { fail!("LightModelxOES was not loaded") }
    pub extern "C" fn LightModelxv(_: GLenum, _: *GLfixed) -> c_void { fail!("LightModelxv was not loaded") }
    pub extern "C" fn LightModelxvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("LightModelxvOES was not loaded") }
    pub extern "C" fn Lightf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("Lightf was not loaded") }
    pub extern "C" fn Lightfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("Lightfv was not loaded") }
    pub extern "C" fn Lighti(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("Lighti was not loaded") }
    pub extern "C" fn Lightiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("Lightiv was not loaded") }
    pub extern "C" fn Lightx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("Lightx was not loaded") }
    pub extern "C" fn LightxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("LightxOES was not loaded") }
    pub extern "C" fn Lightxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("Lightxv was not loaded") }
    pub extern "C" fn LightxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("LightxvOES was not loaded") }
    pub extern "C" fn LineStipple(_: GLint, _: GLushort) -> c_void { fail!("LineStipple was not loaded") }
    pub extern "C" fn LineWidth(_: GLfloat) -> c_void { fail!("LineWidth was not loaded") }
    pub extern "C" fn LineWidthx(_: GLfixed) -> c_void { fail!("LineWidthx was not loaded") }
    pub extern "C" fn LineWidthxOES(_: GLfixed) -> c_void { fail!("LineWidthxOES was not loaded") }
    pub extern "C" fn LinkProgram(_: GLuint) -> c_void { fail!("LinkProgram was not loaded") }
    pub extern "C" fn LinkProgramARB(_: GLhandleARB) -> c_void { fail!("LinkProgramARB was not loaded") }
    pub extern "C" fn ListBase(_: GLuint) -> c_void { fail!("ListBase was not loaded") }
    pub extern "C" fn ListParameterfSGIX(_: GLuint, _: GLenum, _: GLfloat) -> c_void { fail!("ListParameterfSGIX was not loaded") }
    pub extern "C" fn ListParameterfvSGIX(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("ListParameterfvSGIX was not loaded") }
    pub extern "C" fn ListParameteriSGIX(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("ListParameteriSGIX was not loaded") }
    pub extern "C" fn ListParameterivSGIX(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("ListParameterivSGIX was not loaded") }
    pub extern "C" fn LoadIdentity() -> c_void { fail!("LoadIdentity was not loaded") }
    pub extern "C" fn LoadIdentityDeformationMapSGIX(_: GLbitfield) -> c_void { fail!("LoadIdentityDeformationMapSGIX was not loaded") }
    pub extern "C" fn LoadMatrixd(_: *GLdouble) -> c_void { fail!("LoadMatrixd was not loaded") }
    pub extern "C" fn LoadMatrixf(_: *GLfloat) -> c_void { fail!("LoadMatrixf was not loaded") }
    pub extern "C" fn LoadMatrixx(_: *GLfixed) -> c_void { fail!("LoadMatrixx was not loaded") }
    pub extern "C" fn LoadMatrixxOES(_: *GLfixed) -> c_void { fail!("LoadMatrixxOES was not loaded") }
    pub extern "C" fn LoadName(_: GLuint) -> c_void { fail!("LoadName was not loaded") }
    pub extern "C" fn LoadPaletteFromModelViewMatrixOES() -> c_void { fail!("LoadPaletteFromModelViewMatrixOES was not loaded") }
    pub extern "C" fn LoadProgramNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLubyte) -> c_void { fail!("LoadProgramNV was not loaded") }
    pub extern "C" fn LoadTransposeMatrixd(_: *GLdouble) -> c_void { fail!("LoadTransposeMatrixd was not loaded") }
    pub extern "C" fn LoadTransposeMatrixdARB(_: *GLdouble) -> c_void { fail!("LoadTransposeMatrixdARB was not loaded") }
    pub extern "C" fn LoadTransposeMatrixf(_: *GLfloat) -> c_void { fail!("LoadTransposeMatrixf was not loaded") }
    pub extern "C" fn LoadTransposeMatrixfARB(_: *GLfloat) -> c_void { fail!("LoadTransposeMatrixfARB was not loaded") }
    pub extern "C" fn LoadTransposeMatrixxOES(_: *GLfixed) -> c_void { fail!("LoadTransposeMatrixxOES was not loaded") }
    pub extern "C" fn LockArraysEXT(_: GLint, _: GLsizei) -> c_void { fail!("LockArraysEXT was not loaded") }
    pub extern "C" fn LogicOp(_: GLenum) -> c_void { fail!("LogicOp was not loaded") }
    pub extern "C" fn MakeBufferNonResidentNV(_: GLenum) -> c_void { fail!("MakeBufferNonResidentNV was not loaded") }
    pub extern "C" fn MakeBufferResidentNV(_: GLenum, _: GLenum) -> c_void { fail!("MakeBufferResidentNV was not loaded") }
    pub extern "C" fn MakeImageHandleNonResidentARB(_: GLuint64) -> c_void { fail!("MakeImageHandleNonResidentARB was not loaded") }
    pub extern "C" fn MakeImageHandleNonResidentNV(_: GLuint64) -> c_void { fail!("MakeImageHandleNonResidentNV was not loaded") }
    pub extern "C" fn MakeImageHandleResidentARB(_: GLuint64, _: GLenum) -> c_void { fail!("MakeImageHandleResidentARB was not loaded") }
    pub extern "C" fn MakeImageHandleResidentNV(_: GLuint64, _: GLenum) -> c_void { fail!("MakeImageHandleResidentNV was not loaded") }
    pub extern "C" fn MakeNamedBufferNonResidentNV(_: GLuint) -> c_void { fail!("MakeNamedBufferNonResidentNV was not loaded") }
    pub extern "C" fn MakeNamedBufferResidentNV(_: GLuint, _: GLenum) -> c_void { fail!("MakeNamedBufferResidentNV was not loaded") }
    pub extern "C" fn MakeTextureHandleNonResidentARB(_: GLuint64) -> c_void { fail!("MakeTextureHandleNonResidentARB was not loaded") }
    pub extern "C" fn MakeTextureHandleNonResidentNV(_: GLuint64) -> c_void { fail!("MakeTextureHandleNonResidentNV was not loaded") }
    pub extern "C" fn MakeTextureHandleResidentARB(_: GLuint64) -> c_void { fail!("MakeTextureHandleResidentARB was not loaded") }
    pub extern "C" fn MakeTextureHandleResidentNV(_: GLuint64) -> c_void { fail!("MakeTextureHandleResidentNV was not loaded") }
    pub extern "C" fn Map1d(_: GLenum, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("Map1d was not loaded") }
    pub extern "C" fn Map1f(_: GLenum, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("Map1f was not loaded") }
    pub extern "C" fn Map1xOES(_: GLenum, _: GLfixed, _: GLfixed, _: GLint, _: GLint, _: GLfixed) -> c_void { fail!("Map1xOES was not loaded") }
    pub extern "C" fn Map2d(_: GLenum, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("Map2d was not loaded") }
    pub extern "C" fn Map2f(_: GLenum, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("Map2f was not loaded") }
    pub extern "C" fn Map2xOES(_: GLenum, _: GLfixed, _: GLfixed, _: GLint, _: GLint, _: GLfixed, _: GLfixed, _: GLint, _: GLint, _: GLfixed) -> c_void { fail!("Map2xOES was not loaded") }
    pub extern "C" fn MapBuffer(_: GLenum, _: GLenum) -> *c_void { fail!("MapBuffer was not loaded") }
    pub extern "C" fn MapBufferARB(_: GLenum, _: GLenum) -> *c_void { fail!("MapBufferARB was not loaded") }
    pub extern "C" fn MapBufferOES(_: GLenum, _: GLenum) -> *c_void { fail!("MapBufferOES was not loaded") }
    pub extern "C" fn MapBufferRange(_: GLenum, _: GLintptr, _: GLsizeiptr, _: GLbitfield) -> *c_void { fail!("MapBufferRange was not loaded") }
    pub extern "C" fn MapBufferRangeEXT(_: GLenum, _: GLintptr, _: GLsizeiptr, _: GLbitfield) -> *c_void { fail!("MapBufferRangeEXT was not loaded") }
    pub extern "C" fn MapControlPointsNV(_: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLint, _: GLboolean, _: *GLvoid) -> c_void { fail!("MapControlPointsNV was not loaded") }
    pub extern "C" fn MapGrid1d(_: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("MapGrid1d was not loaded") }
    pub extern "C" fn MapGrid1f(_: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("MapGrid1f was not loaded") }
    pub extern "C" fn MapGrid1xOES(_: GLint, _: GLfixed, _: GLfixed) -> c_void { fail!("MapGrid1xOES was not loaded") }
    pub extern "C" fn MapGrid2d(_: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("MapGrid2d was not loaded") }
    pub extern "C" fn MapGrid2f(_: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("MapGrid2f was not loaded") }
    pub extern "C" fn MapGrid2xOES(_: GLint, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("MapGrid2xOES was not loaded") }
    pub extern "C" fn MapNamedBufferEXT(_: GLuint, _: GLenum) -> *c_void { fail!("MapNamedBufferEXT was not loaded") }
    pub extern "C" fn MapNamedBufferRangeEXT(_: GLuint, _: GLintptr, _: GLsizeiptr, _: GLbitfield) -> *c_void { fail!("MapNamedBufferRangeEXT was not loaded") }
    pub extern "C" fn MapObjectBufferATI(_: GLuint) -> *c_void { fail!("MapObjectBufferATI was not loaded") }
    pub extern "C" fn MapParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("MapParameterfvNV was not loaded") }
    pub extern "C" fn MapParameterivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MapParameterivNV was not loaded") }
    pub extern "C" fn MapTexture2DINTEL(_: GLuint, _: GLint, _: GLbitfield, _: *GLint, _: *GLenum) -> *c_void { fail!("MapTexture2DINTEL was not loaded") }
    pub extern "C" fn MapVertexAttrib1dAPPLE(_: GLuint, _: GLuint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("MapVertexAttrib1dAPPLE was not loaded") }
    pub extern "C" fn MapVertexAttrib1fAPPLE(_: GLuint, _: GLuint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("MapVertexAttrib1fAPPLE was not loaded") }
    pub extern "C" fn MapVertexAttrib2dAPPLE(_: GLuint, _: GLuint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("MapVertexAttrib2dAPPLE was not loaded") }
    pub extern "C" fn MapVertexAttrib2fAPPLE(_: GLuint, _: GLuint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("MapVertexAttrib2fAPPLE was not loaded") }
    pub extern "C" fn Materialf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("Materialf was not loaded") }
    pub extern "C" fn Materialfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("Materialfv was not loaded") }
    pub extern "C" fn Materiali(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("Materiali was not loaded") }
    pub extern "C" fn Materialiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("Materialiv was not loaded") }
    pub extern "C" fn Materialx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("Materialx was not loaded") }
    pub extern "C" fn MaterialxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("MaterialxOES was not loaded") }
    pub extern "C" fn Materialxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("Materialxv was not loaded") }
    pub extern "C" fn MaterialxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("MaterialxvOES was not loaded") }
    pub extern "C" fn MatrixFrustumEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixFrustumEXT was not loaded") }
    pub extern "C" fn MatrixIndexPointerARB(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("MatrixIndexPointerARB was not loaded") }
    pub extern "C" fn MatrixIndexPointerOES(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("MatrixIndexPointerOES was not loaded") }
    pub extern "C" fn MatrixIndexubvARB(_: GLint, _: *GLubyte) -> c_void { fail!("MatrixIndexubvARB was not loaded") }
    pub extern "C" fn MatrixIndexuivARB(_: GLint, _: *GLuint) -> c_void { fail!("MatrixIndexuivARB was not loaded") }
    pub extern "C" fn MatrixIndexusvARB(_: GLint, _: *GLushort) -> c_void { fail!("MatrixIndexusvARB was not loaded") }
    pub extern "C" fn MatrixLoadIdentityEXT(_: GLenum) -> c_void { fail!("MatrixLoadIdentityEXT was not loaded") }
    pub extern "C" fn MatrixLoadTransposedEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("MatrixLoadTransposedEXT was not loaded") }
    pub extern "C" fn MatrixLoadTransposefEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("MatrixLoadTransposefEXT was not loaded") }
    pub extern "C" fn MatrixLoaddEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("MatrixLoaddEXT was not loaded") }
    pub extern "C" fn MatrixLoadfEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("MatrixLoadfEXT was not loaded") }
    pub extern "C" fn MatrixMode(_: GLenum) -> c_void { fail!("MatrixMode was not loaded") }
    pub extern "C" fn MatrixMultTransposedEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("MatrixMultTransposedEXT was not loaded") }
    pub extern "C" fn MatrixMultTransposefEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("MatrixMultTransposefEXT was not loaded") }
    pub extern "C" fn MatrixMultdEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("MatrixMultdEXT was not loaded") }
    pub extern "C" fn MatrixMultfEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("MatrixMultfEXT was not loaded") }
    pub extern "C" fn MatrixOrthoEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixOrthoEXT was not loaded") }
    pub extern "C" fn MatrixPopEXT(_: GLenum) -> c_void { fail!("MatrixPopEXT was not loaded") }
    pub extern "C" fn MatrixPushEXT(_: GLenum) -> c_void { fail!("MatrixPushEXT was not loaded") }
    pub extern "C" fn MatrixRotatedEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixRotatedEXT was not loaded") }
    pub extern "C" fn MatrixRotatefEXT(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MatrixRotatefEXT was not loaded") }
    pub extern "C" fn MatrixScaledEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixScaledEXT was not loaded") }
    pub extern "C" fn MatrixScalefEXT(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MatrixScalefEXT was not loaded") }
    pub extern "C" fn MatrixTranslatedEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixTranslatedEXT was not loaded") }
    pub extern "C" fn MatrixTranslatefEXT(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MatrixTranslatefEXT was not loaded") }
    pub extern "C" fn MemoryBarrier(_: GLbitfield) -> c_void { fail!("MemoryBarrier was not loaded") }
    pub extern "C" fn MemoryBarrierEXT(_: GLbitfield) -> c_void { fail!("MemoryBarrierEXT was not loaded") }
    pub extern "C" fn MinSampleShading(_: GLfloat) -> c_void { fail!("MinSampleShading was not loaded") }
    pub extern "C" fn MinSampleShadingARB(_: GLfloat) -> c_void { fail!("MinSampleShadingARB was not loaded") }
    pub extern "C" fn Minmax(_: GLenum, _: GLenum, _: GLboolean) -> c_void { fail!("Minmax was not loaded") }
    pub extern "C" fn MinmaxEXT(_: GLenum, _: GLenum, _: GLboolean) -> c_void { fail!("MinmaxEXT was not loaded") }
    pub extern "C" fn MultMatrixd(_: *GLdouble) -> c_void { fail!("MultMatrixd was not loaded") }
    pub extern "C" fn MultMatrixf(_: *GLfloat) -> c_void { fail!("MultMatrixf was not loaded") }
    pub extern "C" fn MultMatrixx(_: *GLfixed) -> c_void { fail!("MultMatrixx was not loaded") }
    pub extern "C" fn MultMatrixxOES(_: *GLfixed) -> c_void { fail!("MultMatrixxOES was not loaded") }
    pub extern "C" fn MultTransposeMatrixd(_: *GLdouble) -> c_void { fail!("MultTransposeMatrixd was not loaded") }
    pub extern "C" fn MultTransposeMatrixdARB(_: *GLdouble) -> c_void { fail!("MultTransposeMatrixdARB was not loaded") }
    pub extern "C" fn MultTransposeMatrixf(_: *GLfloat) -> c_void { fail!("MultTransposeMatrixf was not loaded") }
    pub extern "C" fn MultTransposeMatrixfARB(_: *GLfloat) -> c_void { fail!("MultTransposeMatrixfARB was not loaded") }
    pub extern "C" fn MultTransposeMatrixxOES(_: *GLfixed) -> c_void { fail!("MultTransposeMatrixxOES was not loaded") }
    pub extern "C" fn MultiDrawArrays(_: GLenum, _: *GLint, _: *GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArrays was not loaded") }
    pub extern "C" fn MultiDrawArraysEXT(_: GLenum, _: *GLint, _: *GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArraysEXT was not loaded") }
    pub extern "C" fn MultiDrawArraysIndirect(_: GLenum, _: *c_void, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArraysIndirect was not loaded") }
    pub extern "C" fn MultiDrawArraysIndirectAMD(_: GLenum, _: *GLvoid, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArraysIndirectAMD was not loaded") }
    pub extern "C" fn MultiDrawArraysIndirectBindlessNV(_: GLenum, _: *GLvoid, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("MultiDrawArraysIndirectBindlessNV was not loaded") }
    pub extern "C" fn MultiDrawElementsIndirectBindlessNV(_: GLenum, _: GLenum, _: *GLvoid, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("MultiDrawElementsIndirectBindlessNV was not loaded") }
    pub extern "C" fn MultiDrawArraysIndirectCountARB(_: GLenum, _: GLintptr, _: GLintptr, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArraysIndirectCountARB was not loaded") }
    pub extern "C" fn MultiDrawElementArrayAPPLE(_: GLenum, _: *GLint, _: *GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawElementArrayAPPLE was not loaded") }
    pub extern "C" fn MultiDrawElements(_: GLenum, _: *GLsizei, _: GLenum, _: **GLvoid, _: GLsizei) -> c_void { fail!("MultiDrawElements was not loaded") }
    pub extern "C" fn MultiDrawElementsBaseVertex(_: GLenum, _: *GLsizei, _: GLenum, _: **GLvoid, _: GLsizei, _: *GLint) -> c_void { fail!("MultiDrawElementsBaseVertex was not loaded") }
    pub extern "C" fn MultiDrawElementsEXT(_: GLenum, _: *GLsizei, _: GLenum, _: **GLvoid, _: GLsizei) -> c_void { fail!("MultiDrawElementsEXT was not loaded") }
    pub extern "C" fn MultiDrawElementsIndirect(_: GLenum, _: GLenum, _: *c_void, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawElementsIndirect was not loaded") }
    pub extern "C" fn MultiDrawElementsIndirectAMD(_: GLenum, _: GLenum, _: *GLvoid, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawElementsIndirectAMD was not loaded") }
    pub extern "C" fn MultiDrawElementsIndirectCountARB(_: GLenum, _: GLenum, _: GLintptr, _: GLintptr, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawElementsIndirectCountARB was not loaded") }
    pub extern "C" fn MultiDrawRangeElementArrayAPPLE(_: GLenum, _: GLuint, _: GLuint, _: *GLint, _: *GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawRangeElementArrayAPPLE was not loaded") }
    pub extern "C" fn MultiModeDrawArraysIBM(_: *GLenum, _: *GLint, _: *GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("MultiModeDrawArraysIBM was not loaded") }
    pub extern "C" fn MultiModeDrawElementsIBM(_: *GLenum, _: *GLsizei, _: GLenum, _: **GLvoid, _: GLsizei, _: GLint) -> c_void { fail!("MultiModeDrawElementsIBM was not loaded") }
    pub extern "C" fn MultiTexBufferEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexBufferEXT was not loaded") }
    pub extern "C" fn MultiTexCoord1bOES(_: GLenum, _: GLbyte) -> c_void { fail!("MultiTexCoord1bOES was not loaded") }
    pub extern "C" fn MultiTexCoord1bvOES(_: GLenum, _: *GLbyte) -> c_void { fail!("MultiTexCoord1bvOES was not loaded") }
    pub extern "C" fn MultiTexCoord1d(_: GLenum, _: GLdouble) -> c_void { fail!("MultiTexCoord1d was not loaded") }
    pub extern "C" fn MultiTexCoord1dARB(_: GLenum, _: GLdouble) -> c_void { fail!("MultiTexCoord1dARB was not loaded") }
    pub extern "C" fn MultiTexCoord1dv(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord1dv was not loaded") }
    pub extern "C" fn MultiTexCoord1dvARB(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord1dvARB was not loaded") }
    pub extern "C" fn MultiTexCoord1f(_: GLenum, _: GLfloat) -> c_void { fail!("MultiTexCoord1f was not loaded") }
    pub extern "C" fn MultiTexCoord1fARB(_: GLenum, _: GLfloat) -> c_void { fail!("MultiTexCoord1fARB was not loaded") }
    pub extern "C" fn MultiTexCoord1fv(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord1fv was not loaded") }
    pub extern "C" fn MultiTexCoord1fvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord1fvARB was not loaded") }
    pub extern "C" fn MultiTexCoord1hNV(_: GLenum, _: GLhalfNV) -> c_void { fail!("MultiTexCoord1hNV was not loaded") }
    pub extern "C" fn MultiTexCoord1hvNV(_: GLenum, _: *GLhalfNV) -> c_void { fail!("MultiTexCoord1hvNV was not loaded") }
    pub extern "C" fn MultiTexCoord1i(_: GLenum, _: GLint) -> c_void { fail!("MultiTexCoord1i was not loaded") }
    pub extern "C" fn MultiTexCoord1iARB(_: GLenum, _: GLint) -> c_void { fail!("MultiTexCoord1iARB was not loaded") }
    pub extern "C" fn MultiTexCoord1iv(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord1iv was not loaded") }
    pub extern "C" fn MultiTexCoord1ivARB(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord1ivARB was not loaded") }
    pub extern "C" fn MultiTexCoord1s(_: GLenum, _: GLshort) -> c_void { fail!("MultiTexCoord1s was not loaded") }
    pub extern "C" fn MultiTexCoord1sARB(_: GLenum, _: GLshort) -> c_void { fail!("MultiTexCoord1sARB was not loaded") }
    pub extern "C" fn MultiTexCoord1sv(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord1sv was not loaded") }
    pub extern "C" fn MultiTexCoord1svARB(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord1svARB was not loaded") }
    pub extern "C" fn MultiTexCoord1xOES(_: GLenum, _: GLfixed) -> c_void { fail!("MultiTexCoord1xOES was not loaded") }
    pub extern "C" fn MultiTexCoord1xvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("MultiTexCoord1xvOES was not loaded") }
    pub extern "C" fn MultiTexCoord2bOES(_: GLenum, _: GLbyte, _: GLbyte) -> c_void { fail!("MultiTexCoord2bOES was not loaded") }
    pub extern "C" fn MultiTexCoord2bvOES(_: GLenum, _: *GLbyte) -> c_void { fail!("MultiTexCoord2bvOES was not loaded") }
    pub extern "C" fn MultiTexCoord2d(_: GLenum, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord2d was not loaded") }
    pub extern "C" fn MultiTexCoord2dARB(_: GLenum, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord2dARB was not loaded") }
    pub extern "C" fn MultiTexCoord2dv(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord2dv was not loaded") }
    pub extern "C" fn MultiTexCoord2dvARB(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord2dvARB was not loaded") }
    pub extern "C" fn MultiTexCoord2f(_: GLenum, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord2f was not loaded") }
    pub extern "C" fn MultiTexCoord2fARB(_: GLenum, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord2fARB was not loaded") }
    pub extern "C" fn MultiTexCoord2fv(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord2fv was not loaded") }
    pub extern "C" fn MultiTexCoord2fvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord2fvARB was not loaded") }
    pub extern "C" fn MultiTexCoord2hNV(_: GLenum, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("MultiTexCoord2hNV was not loaded") }
    pub extern "C" fn MultiTexCoord2hvNV(_: GLenum, _: *GLhalfNV) -> c_void { fail!("MultiTexCoord2hvNV was not loaded") }
    pub extern "C" fn MultiTexCoord2i(_: GLenum, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord2i was not loaded") }
    pub extern "C" fn MultiTexCoord2iARB(_: GLenum, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord2iARB was not loaded") }
    pub extern "C" fn MultiTexCoord2iv(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord2iv was not loaded") }
    pub extern "C" fn MultiTexCoord2ivARB(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord2ivARB was not loaded") }
    pub extern "C" fn MultiTexCoord2s(_: GLenum, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord2s was not loaded") }
    pub extern "C" fn MultiTexCoord2sARB(_: GLenum, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord2sARB was not loaded") }
    pub extern "C" fn MultiTexCoord2sv(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord2sv was not loaded") }
    pub extern "C" fn MultiTexCoord2svARB(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord2svARB was not loaded") }
    pub extern "C" fn MultiTexCoord2xOES(_: GLenum, _: GLfixed, _: GLfixed) -> c_void { fail!("MultiTexCoord2xOES was not loaded") }
    pub extern "C" fn MultiTexCoord2xvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("MultiTexCoord2xvOES was not loaded") }
    pub extern "C" fn MultiTexCoord3bOES(_: GLenum, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("MultiTexCoord3bOES was not loaded") }
    pub extern "C" fn MultiTexCoord3bvOES(_: GLenum, _: *GLbyte) -> c_void { fail!("MultiTexCoord3bvOES was not loaded") }
    pub extern "C" fn MultiTexCoord3d(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord3d was not loaded") }
    pub extern "C" fn MultiTexCoord3dARB(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord3dARB was not loaded") }
    pub extern "C" fn MultiTexCoord3dv(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord3dv was not loaded") }
    pub extern "C" fn MultiTexCoord3dvARB(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord3dvARB was not loaded") }
    pub extern "C" fn MultiTexCoord3f(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord3f was not loaded") }
    pub extern "C" fn MultiTexCoord3fARB(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord3fARB was not loaded") }
    pub extern "C" fn MultiTexCoord3fv(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord3fv was not loaded") }
    pub extern "C" fn MultiTexCoord3fvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord3fvARB was not loaded") }
    pub extern "C" fn MultiTexCoord3hNV(_: GLenum, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("MultiTexCoord3hNV was not loaded") }
    pub extern "C" fn MultiTexCoord3hvNV(_: GLenum, _: *GLhalfNV) -> c_void { fail!("MultiTexCoord3hvNV was not loaded") }
    pub extern "C" fn MultiTexCoord3i(_: GLenum, _: GLint, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord3i was not loaded") }
    pub extern "C" fn MultiTexCoord3iARB(_: GLenum, _: GLint, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord3iARB was not loaded") }
    pub extern "C" fn MultiTexCoord3iv(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord3iv was not loaded") }
    pub extern "C" fn MultiTexCoord3ivARB(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord3ivARB was not loaded") }
    pub extern "C" fn MultiTexCoord3s(_: GLenum, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord3s was not loaded") }
    pub extern "C" fn MultiTexCoord3sARB(_: GLenum, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord3sARB was not loaded") }
    pub extern "C" fn MultiTexCoord3sv(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord3sv was not loaded") }
    pub extern "C" fn MultiTexCoord3svARB(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord3svARB was not loaded") }
    pub extern "C" fn MultiTexCoord3xOES(_: GLenum, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("MultiTexCoord3xOES was not loaded") }
    pub extern "C" fn MultiTexCoord3xvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("MultiTexCoord3xvOES was not loaded") }
    pub extern "C" fn MultiTexCoord4bOES(_: GLenum, _: GLbyte, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("MultiTexCoord4bOES was not loaded") }
    pub extern "C" fn MultiTexCoord4bvOES(_: GLenum, _: *GLbyte) -> c_void { fail!("MultiTexCoord4bvOES was not loaded") }
    pub extern "C" fn MultiTexCoord4d(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord4d was not loaded") }
    pub extern "C" fn MultiTexCoord4dARB(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord4dARB was not loaded") }
    pub extern "C" fn MultiTexCoord4dv(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord4dv was not loaded") }
    pub extern "C" fn MultiTexCoord4dvARB(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord4dvARB was not loaded") }
    pub extern "C" fn MultiTexCoord4f(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord4f was not loaded") }
    pub extern "C" fn MultiTexCoord4fARB(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord4fARB was not loaded") }
    pub extern "C" fn MultiTexCoord4fv(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord4fv was not loaded") }
    pub extern "C" fn MultiTexCoord4fvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord4fvARB was not loaded") }
    pub extern "C" fn MultiTexCoord4hNV(_: GLenum, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("MultiTexCoord4hNV was not loaded") }
    pub extern "C" fn MultiTexCoord4hvNV(_: GLenum, _: *GLhalfNV) -> c_void { fail!("MultiTexCoord4hvNV was not loaded") }
    pub extern "C" fn MultiTexCoord4i(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord4i was not loaded") }
    pub extern "C" fn MultiTexCoord4iARB(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord4iARB was not loaded") }
    pub extern "C" fn MultiTexCoord4iv(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord4iv was not loaded") }
    pub extern "C" fn MultiTexCoord4ivARB(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord4ivARB was not loaded") }
    pub extern "C" fn MultiTexCoord4s(_: GLenum, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord4s was not loaded") }
    pub extern "C" fn MultiTexCoord4sARB(_: GLenum, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord4sARB was not loaded") }
    pub extern "C" fn MultiTexCoord4sv(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord4sv was not loaded") }
    pub extern "C" fn MultiTexCoord4svARB(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord4svARB was not loaded") }
    pub extern "C" fn MultiTexCoord4x(_: GLenum, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("MultiTexCoord4x was not loaded") }
    pub extern "C" fn MultiTexCoord4xOES(_: GLenum, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("MultiTexCoord4xOES was not loaded") }
    pub extern "C" fn MultiTexCoord4xvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("MultiTexCoord4xvOES was not loaded") }
    pub extern "C" fn MultiTexCoordP1ui(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexCoordP1ui was not loaded") }
    pub extern "C" fn MultiTexCoordP1uiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexCoordP1uiv was not loaded") }
    pub extern "C" fn MultiTexCoordP2ui(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexCoordP2ui was not loaded") }
    pub extern "C" fn MultiTexCoordP2uiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexCoordP2uiv was not loaded") }
    pub extern "C" fn MultiTexCoordP3ui(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexCoordP3ui was not loaded") }
    pub extern "C" fn MultiTexCoordP3uiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexCoordP3uiv was not loaded") }
    pub extern "C" fn MultiTexCoordP4ui(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexCoordP4ui was not loaded") }
    pub extern "C" fn MultiTexCoordP4uiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexCoordP4uiv was not loaded") }
    pub extern "C" fn MultiTexCoordPointerEXT(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("MultiTexCoordPointerEXT was not loaded") }
    pub extern "C" fn MultiTexEnvfEXT(_: GLenum, _: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("MultiTexEnvfEXT was not loaded") }
    pub extern "C" fn MultiTexEnvfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexEnvfvEXT was not loaded") }
    pub extern "C" fn MultiTexEnviEXT(_: GLenum, _: GLenum, _: GLenum, _: GLint) -> c_void { fail!("MultiTexEnviEXT was not loaded") }
    pub extern "C" fn MultiTexEnvivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MultiTexEnvivEXT was not loaded") }
    pub extern "C" fn MultiTexGendEXT(_: GLenum, _: GLenum, _: GLenum, _: GLdouble) -> c_void { fail!("MultiTexGendEXT was not loaded") }
    pub extern "C" fn MultiTexGendvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexGendvEXT was not loaded") }
    pub extern "C" fn MultiTexGenfEXT(_: GLenum, _: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("MultiTexGenfEXT was not loaded") }
    pub extern "C" fn MultiTexGenfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexGenfvEXT was not loaded") }
    pub extern "C" fn MultiTexGeniEXT(_: GLenum, _: GLenum, _: GLenum, _: GLint) -> c_void { fail!("MultiTexGeniEXT was not loaded") }
    pub extern "C" fn MultiTexGenivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MultiTexGenivEXT was not loaded") }
    pub extern "C" fn MultiTexImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexImage1DEXT was not loaded") }
    pub extern "C" fn MultiTexImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexImage2DEXT was not loaded") }
    pub extern "C" fn MultiTexImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexImage3DEXT was not loaded") }
    pub extern "C" fn MultiTexParameterIivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MultiTexParameterIivEXT was not loaded") }
    pub extern "C" fn MultiTexParameterIuivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexParameterIuivEXT was not loaded") }
    pub extern "C" fn MultiTexParameterfEXT(_: GLenum, _: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("MultiTexParameterfEXT was not loaded") }
    pub extern "C" fn MultiTexParameterfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexParameterfvEXT was not loaded") }
    pub extern "C" fn MultiTexParameteriEXT(_: GLenum, _: GLenum, _: GLenum, _: GLint) -> c_void { fail!("MultiTexParameteriEXT was not loaded") }
    pub extern "C" fn MultiTexParameterivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MultiTexParameterivEXT was not loaded") }
    pub extern "C" fn MultiTexRenderbufferEXT(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexRenderbufferEXT was not loaded") }
    pub extern "C" fn MultiTexSubImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexSubImage1DEXT was not loaded") }
    pub extern "C" fn MultiTexSubImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexSubImage2DEXT was not loaded") }
    pub extern "C" fn MultiTexSubImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexSubImage3DEXT was not loaded") }
    pub extern "C" fn NamedBufferDataEXT(_: GLuint, _: GLsizeiptr, _: *GLvoid, _: GLenum) -> c_void { fail!("NamedBufferDataEXT was not loaded") }
    pub extern "C" fn NamedBufferStorageEXT(_: GLuint, _: GLsizeiptr, _: *c_void, _: GLbitfield) -> c_void { fail!("NamedBufferStorageEXT was not loaded") }
    pub extern "C" fn NamedBufferSubDataEXT(_: GLuint, _: GLintptr, _: GLsizeiptr, _: *GLvoid) -> c_void { fail!("NamedBufferSubDataEXT was not loaded") }
    pub extern "C" fn NamedCopyBufferSubDataEXT(_: GLuint, _: GLuint, _: GLintptr, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("NamedCopyBufferSubDataEXT was not loaded") }
    pub extern "C" fn NamedFramebufferParameteriEXT(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("NamedFramebufferParameteriEXT was not loaded") }
    pub extern "C" fn NamedFramebufferRenderbufferEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("NamedFramebufferRenderbufferEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTexture1DEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("NamedFramebufferTexture1DEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTexture2DEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("NamedFramebufferTexture2DEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTexture3DEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("NamedFramebufferTexture3DEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTextureEXT(_: GLuint, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("NamedFramebufferTextureEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTextureFaceEXT(_: GLuint, _: GLenum, _: GLuint, _: GLint, _: GLenum) -> c_void { fail!("NamedFramebufferTextureFaceEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTextureLayerEXT(_: GLuint, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("NamedFramebufferTextureLayerEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameter4dEXT(_: GLuint, _: GLenum, _: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("NamedProgramLocalParameter4dEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameter4dvEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("NamedProgramLocalParameter4dvEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameter4fEXT(_: GLuint, _: GLenum, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("NamedProgramLocalParameter4fEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameter4fvEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("NamedProgramLocalParameter4fvEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameterI4iEXT(_: GLuint, _: GLenum, _: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("NamedProgramLocalParameterI4iEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameterI4ivEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("NamedProgramLocalParameterI4ivEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameterI4uiEXT(_: GLuint, _: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("NamedProgramLocalParameterI4uiEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameterI4uivEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("NamedProgramLocalParameterI4uivEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameters4fvEXT(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("NamedProgramLocalParameters4fvEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParametersI4ivEXT(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("NamedProgramLocalParametersI4ivEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParametersI4uivEXT(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("NamedProgramLocalParametersI4uivEXT was not loaded") }
    pub extern "C" fn NamedProgramStringEXT(_: GLuint, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("NamedProgramStringEXT was not loaded") }
    pub extern "C" fn NamedRenderbufferStorageEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("NamedRenderbufferStorageEXT was not loaded") }
    pub extern "C" fn NamedRenderbufferStorageMultisampleCoverageEXT(_: GLuint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("NamedRenderbufferStorageMultisampleCoverageEXT was not loaded") }
    pub extern "C" fn NamedRenderbufferStorageMultisampleEXT(_: GLuint, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("NamedRenderbufferStorageMultisampleEXT was not loaded") }
    pub extern "C" fn NamedStringARB(_: GLenum, _: GLint, _: *GLchar, _: GLint, _: *GLchar) -> c_void { fail!("NamedStringARB was not loaded") }
    pub extern "C" fn NewList(_: GLuint, _: GLenum) -> c_void { fail!("NewList was not loaded") }
    pub extern "C" fn NewObjectBufferATI(_: GLsizei, _: *GLvoid, _: GLenum) -> GLuint { fail!("NewObjectBufferATI was not loaded") }
    pub extern "C" fn Normal3b(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Normal3b was not loaded") }
    pub extern "C" fn Normal3bv(_: *GLbyte) -> c_void { fail!("Normal3bv was not loaded") }
    pub extern "C" fn Normal3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Normal3d was not loaded") }
    pub extern "C" fn Normal3dv(_: *GLdouble) -> c_void { fail!("Normal3dv was not loaded") }
    pub extern "C" fn Normal3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Normal3f was not loaded") }
    pub extern "C" fn Normal3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Normal3fVertex3fSUN was not loaded") }
    pub extern "C" fn Normal3fVertex3fvSUN(_: *GLfloat, _: *GLfloat) -> c_void { fail!("Normal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn Normal3fv(_: *GLfloat) -> c_void { fail!("Normal3fv was not loaded") }
    pub extern "C" fn Normal3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Normal3hNV was not loaded") }
    pub extern "C" fn Normal3hvNV(_: *GLhalfNV) -> c_void { fail!("Normal3hvNV was not loaded") }
    pub extern "C" fn Normal3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Normal3i was not loaded") }
    pub extern "C" fn Normal3iv(_: *GLint) -> c_void { fail!("Normal3iv was not loaded") }
    pub extern "C" fn Normal3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Normal3s was not loaded") }
    pub extern "C" fn Normal3sv(_: *GLshort) -> c_void { fail!("Normal3sv was not loaded") }
    pub extern "C" fn Normal3x(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Normal3x was not loaded") }
    pub extern "C" fn Normal3xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Normal3xOES was not loaded") }
    pub extern "C" fn Normal3xvOES(_: *GLfixed) -> c_void { fail!("Normal3xvOES was not loaded") }
    pub extern "C" fn NormalFormatNV(_: GLenum, _: GLsizei) -> c_void { fail!("NormalFormatNV was not loaded") }
    pub extern "C" fn NormalP3ui(_: GLenum, _: GLuint) -> c_void { fail!("NormalP3ui was not loaded") }
    pub extern "C" fn NormalP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("NormalP3uiv was not loaded") }
    pub extern "C" fn NormalPointer(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("NormalPointer was not loaded") }
    pub extern "C" fn NormalPointerEXT(_: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("NormalPointerEXT was not loaded") }
    pub extern "C" fn NormalPointerListIBM(_: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("NormalPointerListIBM was not loaded") }
    pub extern "C" fn NormalPointervINTEL(_: GLenum, _: **GLvoid) -> c_void { fail!("NormalPointervINTEL was not loaded") }
    pub extern "C" fn NormalStream3bATI(_: GLenum, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("NormalStream3bATI was not loaded") }
    pub extern "C" fn NormalStream3bvATI(_: GLenum, _: *GLbyte) -> c_void { fail!("NormalStream3bvATI was not loaded") }
    pub extern "C" fn NormalStream3dATI(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("NormalStream3dATI was not loaded") }
    pub extern "C" fn NormalStream3dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("NormalStream3dvATI was not loaded") }
    pub extern "C" fn NormalStream3fATI(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("NormalStream3fATI was not loaded") }
    pub extern "C" fn NormalStream3fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("NormalStream3fvATI was not loaded") }
    pub extern "C" fn NormalStream3iATI(_: GLenum, _: GLint, _: GLint, _: GLint) -> c_void { fail!("NormalStream3iATI was not loaded") }
    pub extern "C" fn NormalStream3ivATI(_: GLenum, _: *GLint) -> c_void { fail!("NormalStream3ivATI was not loaded") }
    pub extern "C" fn NormalStream3sATI(_: GLenum, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("NormalStream3sATI was not loaded") }
    pub extern "C" fn NormalStream3svATI(_: GLenum, _: *GLshort) -> c_void { fail!("NormalStream3svATI was not loaded") }
    pub extern "C" fn ObjectLabel(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("ObjectLabel was not loaded") }
    pub extern "C" fn ObjectLabelKHR(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("ObjectLabelKHR was not loaded") }
    pub extern "C" fn ObjectPtrLabel(_: *c_void, _: GLsizei, _: *GLchar) -> c_void { fail!("ObjectPtrLabel was not loaded") }
    pub extern "C" fn ObjectPtrLabelKHR(_: *c_void, _: GLsizei, _: *GLchar) -> c_void { fail!("ObjectPtrLabelKHR was not loaded") }
    pub extern "C" fn ObjectPurgeableAPPLE(_: GLenum, _: GLuint, _: GLenum) -> GLenum { fail!("ObjectPurgeableAPPLE was not loaded") }
    pub extern "C" fn ObjectUnpurgeableAPPLE(_: GLenum, _: GLuint, _: GLenum) -> GLenum { fail!("ObjectUnpurgeableAPPLE was not loaded") }
    pub extern "C" fn Ortho(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Ortho was not loaded") }
    pub extern "C" fn Orthof(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Orthof was not loaded") }
    pub extern "C" fn OrthofOES(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("OrthofOES was not loaded") }
    pub extern "C" fn Orthox(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Orthox was not loaded") }
    pub extern "C" fn OrthoxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("OrthoxOES was not loaded") }
    pub extern "C" fn PNTrianglesfATI(_: GLenum, _: GLfloat) -> c_void { fail!("PNTrianglesfATI was not loaded") }
    pub extern "C" fn PNTrianglesiATI(_: GLenum, _: GLint) -> c_void { fail!("PNTrianglesiATI was not loaded") }
    pub extern "C" fn PassTexCoordATI(_: GLuint, _: GLuint, _: GLenum) -> c_void { fail!("PassTexCoordATI was not loaded") }
    pub extern "C" fn PassThrough(_: GLfloat) -> c_void { fail!("PassThrough was not loaded") }
    pub extern "C" fn PassThroughxOES(_: GLfixed) -> c_void { fail!("PassThroughxOES was not loaded") }
    pub extern "C" fn PatchParameterfv(_: GLenum, _: *GLfloat) -> c_void { fail!("PatchParameterfv was not loaded") }
    pub extern "C" fn PatchParameteri(_: GLenum, _: GLint) -> c_void { fail!("PatchParameteri was not loaded") }
    pub extern "C" fn PathColorGenNV(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("PathColorGenNV was not loaded") }
    pub extern "C" fn PathCommandsNV(_: GLuint, _: GLsizei, _: *GLubyte, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("PathCommandsNV was not loaded") }
    pub extern "C" fn PathCoordsNV(_: GLuint, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("PathCoordsNV was not loaded") }
    pub extern "C" fn PathCoverDepthFuncNV(_: GLenum) -> c_void { fail!("PathCoverDepthFuncNV was not loaded") }
    pub extern "C" fn PathDashArrayNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("PathDashArrayNV was not loaded") }
    pub extern "C" fn PathFogGenNV(_: GLenum) -> c_void { fail!("PathFogGenNV was not loaded") }
    pub extern "C" fn PathGlyphRangeNV(_: GLuint, _: GLenum, _: *GLvoid, _: GLbitfield, _: GLuint, _: GLsizei, _: GLenum, _: GLuint, _: GLfloat) -> c_void { fail!("PathGlyphRangeNV was not loaded") }
    pub extern "C" fn PathGlyphsNV(_: GLuint, _: GLenum, _: *GLvoid, _: GLbitfield, _: GLsizei, _: GLenum, _: *GLvoid, _: GLenum, _: GLuint, _: GLfloat) -> c_void { fail!("PathGlyphsNV was not loaded") }
    pub extern "C" fn PathParameterfNV(_: GLuint, _: GLenum, _: GLfloat) -> c_void { fail!("PathParameterfNV was not loaded") }
    pub extern "C" fn PathParameterfvNV(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("PathParameterfvNV was not loaded") }
    pub extern "C" fn PathParameteriNV(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("PathParameteriNV was not loaded") }
    pub extern "C" fn PathParameterivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("PathParameterivNV was not loaded") }
    pub extern "C" fn PathStencilDepthOffsetNV(_: GLfloat, _: GLfloat) -> c_void { fail!("PathStencilDepthOffsetNV was not loaded") }
    pub extern "C" fn PathStencilFuncNV(_: GLenum, _: GLint, _: GLuint) -> c_void { fail!("PathStencilFuncNV was not loaded") }
    pub extern "C" fn PathStringNV(_: GLuint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("PathStringNV was not loaded") }
    pub extern "C" fn PathSubCommandsNV(_: GLuint, _: GLsizei, _: GLsizei, _: GLsizei, _: *GLubyte, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("PathSubCommandsNV was not loaded") }
    pub extern "C" fn PathSubCoordsNV(_: GLuint, _: GLsizei, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("PathSubCoordsNV was not loaded") }
    pub extern "C" fn PathTexGenNV(_: GLenum, _: GLenum, _: GLint, _: *GLfloat) -> c_void { fail!("PathTexGenNV was not loaded") }
    pub extern "C" fn PauseTransformFeedback() -> c_void { fail!("PauseTransformFeedback was not loaded") }
    pub extern "C" fn PauseTransformFeedbackNV() -> c_void { fail!("PauseTransformFeedbackNV was not loaded") }
    pub extern "C" fn PixelDataRangeNV(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("PixelDataRangeNV was not loaded") }
    pub extern "C" fn PixelMapfv(_: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("PixelMapfv was not loaded") }
    pub extern "C" fn PixelMapuiv(_: GLenum, _: GLsizei, _: *GLuint) -> c_void { fail!("PixelMapuiv was not loaded") }
    pub extern "C" fn PixelMapusv(_: GLenum, _: GLsizei, _: *GLushort) -> c_void { fail!("PixelMapusv was not loaded") }
    pub extern "C" fn PixelMapx(_: GLenum, _: GLint, _: *GLfixed) -> c_void { fail!("PixelMapx was not loaded") }
    pub extern "C" fn PixelStoref(_: GLenum, _: GLfloat) -> c_void { fail!("PixelStoref was not loaded") }
    pub extern "C" fn PixelStorei(_: GLenum, _: GLint) -> c_void { fail!("PixelStorei was not loaded") }
    pub extern "C" fn PixelStorex(_: GLenum, _: GLfixed) -> c_void { fail!("PixelStorex was not loaded") }
    pub extern "C" fn PixelTexGenParameterfSGIS(_: GLenum, _: GLfloat) -> c_void { fail!("PixelTexGenParameterfSGIS was not loaded") }
    pub extern "C" fn PixelTexGenParameterfvSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("PixelTexGenParameterfvSGIS was not loaded") }
    pub extern "C" fn PixelTexGenParameteriSGIS(_: GLenum, _: GLint) -> c_void { fail!("PixelTexGenParameteriSGIS was not loaded") }
    pub extern "C" fn PixelTexGenParameterivSGIS(_: GLenum, _: *GLint) -> c_void { fail!("PixelTexGenParameterivSGIS was not loaded") }
    pub extern "C" fn PixelTexGenSGIX(_: GLenum) -> c_void { fail!("PixelTexGenSGIX was not loaded") }
    pub extern "C" fn PixelTransferf(_: GLenum, _: GLfloat) -> c_void { fail!("PixelTransferf was not loaded") }
    pub extern "C" fn PixelTransferi(_: GLenum, _: GLint) -> c_void { fail!("PixelTransferi was not loaded") }
    pub extern "C" fn PixelTransferxOES(_: GLenum, _: GLfixed) -> c_void { fail!("PixelTransferxOES was not loaded") }
    pub extern "C" fn PixelTransformParameterfEXT(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("PixelTransformParameterfEXT was not loaded") }
    pub extern "C" fn PixelTransformParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("PixelTransformParameterfvEXT was not loaded") }
    pub extern "C" fn PixelTransformParameteriEXT(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("PixelTransformParameteriEXT was not loaded") }
    pub extern "C" fn PixelTransformParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("PixelTransformParameterivEXT was not loaded") }
    pub extern "C" fn PixelZoom(_: GLfloat, _: GLfloat) -> c_void { fail!("PixelZoom was not loaded") }
    pub extern "C" fn PixelZoomxOES(_: GLfixed, _: GLfixed) -> c_void { fail!("PixelZoomxOES was not loaded") }
    pub extern "C" fn PointAlongPathNV(_: GLuint, _: GLsizei, _: GLsizei, _: GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> GLboolean { fail!("PointAlongPathNV was not loaded") }
    pub extern "C" fn PointParameterf(_: GLenum, _: GLfloat) -> c_void { fail!("PointParameterf was not loaded") }
    pub extern "C" fn PointParameterfARB(_: GLenum, _: GLfloat) -> c_void { fail!("PointParameterfARB was not loaded") }
    pub extern "C" fn PointParameterfEXT(_: GLenum, _: GLfloat) -> c_void { fail!("PointParameterfEXT was not loaded") }
    pub extern "C" fn PointParameterfSGIS(_: GLenum, _: GLfloat) -> c_void { fail!("PointParameterfSGIS was not loaded") }
    pub extern "C" fn PointParameterfv(_: GLenum, _: *GLfloat) -> c_void { fail!("PointParameterfv was not loaded") }
    pub extern "C" fn PointParameterfvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("PointParameterfvARB was not loaded") }
    pub extern "C" fn PointParameterfvEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("PointParameterfvEXT was not loaded") }
    pub extern "C" fn PointParameterfvSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("PointParameterfvSGIS was not loaded") }
    pub extern "C" fn PointParameteri(_: GLenum, _: GLint) -> c_void { fail!("PointParameteri was not loaded") }
    pub extern "C" fn PointParameteriNV(_: GLenum, _: GLint) -> c_void { fail!("PointParameteriNV was not loaded") }
    pub extern "C" fn PointParameteriv(_: GLenum, _: *GLint) -> c_void { fail!("PointParameteriv was not loaded") }
    pub extern "C" fn PointParameterivNV(_: GLenum, _: *GLint) -> c_void { fail!("PointParameterivNV was not loaded") }
    pub extern "C" fn PointParameterx(_: GLenum, _: GLfixed) -> c_void { fail!("PointParameterx was not loaded") }
    pub extern "C" fn PointParameterxOES(_: GLenum, _: GLfixed) -> c_void { fail!("PointParameterxOES was not loaded") }
    pub extern "C" fn PointParameterxv(_: GLenum, _: *GLfixed) -> c_void { fail!("PointParameterxv was not loaded") }
    pub extern "C" fn PointParameterxvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("PointParameterxvOES was not loaded") }
    pub extern "C" fn PointSize(_: GLfloat) -> c_void { fail!("PointSize was not loaded") }
    pub extern "C" fn PointSizePointerOES(_: GLenum, _: GLsizei, _: *c_void) -> c_void { fail!("PointSizePointerOES was not loaded") }
    pub extern "C" fn PointSizex(_: GLfixed) -> c_void { fail!("PointSizex was not loaded") }
    pub extern "C" fn PointSizexOES(_: GLfixed) -> c_void { fail!("PointSizexOES was not loaded") }
    pub extern "C" fn PollAsyncSGIX(_: *GLuint) -> GLint { fail!("PollAsyncSGIX was not loaded") }
    pub extern "C" fn PollInstrumentsSGIX(_: *GLint) -> GLint { fail!("PollInstrumentsSGIX was not loaded") }
    pub extern "C" fn PolygonMode(_: GLenum, _: GLenum) -> c_void { fail!("PolygonMode was not loaded") }
    pub extern "C" fn PolygonOffset(_: GLfloat, _: GLfloat) -> c_void { fail!("PolygonOffset was not loaded") }
    pub extern "C" fn PolygonOffsetEXT(_: GLfloat, _: GLfloat) -> c_void { fail!("PolygonOffsetEXT was not loaded") }
    pub extern "C" fn PolygonOffsetx(_: GLfixed, _: GLfixed) -> c_void { fail!("PolygonOffsetx was not loaded") }
    pub extern "C" fn PolygonOffsetxOES(_: GLfixed, _: GLfixed) -> c_void { fail!("PolygonOffsetxOES was not loaded") }
    pub extern "C" fn PolygonStipple(_: *GLubyte) -> c_void { fail!("PolygonStipple was not loaded") }
    pub extern "C" fn PopAttrib() -> c_void { fail!("PopAttrib was not loaded") }
    pub extern "C" fn PopClientAttrib() -> c_void { fail!("PopClientAttrib was not loaded") }
    pub extern "C" fn PopDebugGroup() -> c_void { fail!("PopDebugGroup was not loaded") }
    pub extern "C" fn PopDebugGroupKHR() -> c_void { fail!("PopDebugGroupKHR was not loaded") }
    pub extern "C" fn PopGroupMarkerEXT() -> c_void { fail!("PopGroupMarkerEXT was not loaded") }
    pub extern "C" fn PopMatrix() -> c_void { fail!("PopMatrix was not loaded") }
    pub extern "C" fn PopName() -> c_void { fail!("PopName was not loaded") }
    pub extern "C" fn PresentFrameDualFillNV(_: GLuint, _: GLuint64EXT, _: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLenum, _: GLuint, _: GLenum, _: GLuint, _: GLenum, _: GLuint) -> c_void { fail!("PresentFrameDualFillNV was not loaded") }
    pub extern "C" fn PresentFrameKeyedNV(_: GLuint, _: GLuint64EXT, _: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLuint, _: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("PresentFrameKeyedNV was not loaded") }
    pub extern "C" fn PrimitiveRestartIndex(_: GLuint) -> c_void { fail!("PrimitiveRestartIndex was not loaded") }
    pub extern "C" fn PrimitiveRestartIndexNV(_: GLuint) -> c_void { fail!("PrimitiveRestartIndexNV was not loaded") }
    pub extern "C" fn PrimitiveRestartNV() -> c_void { fail!("PrimitiveRestartNV was not loaded") }
    pub extern "C" fn PrioritizeTextures(_: GLsizei, _: *GLuint, _: *GLfloat) -> c_void { fail!("PrioritizeTextures was not loaded") }
    pub extern "C" fn PrioritizeTexturesEXT(_: GLsizei, _: *GLuint, _: *GLclampf) -> c_void { fail!("PrioritizeTexturesEXT was not loaded") }
    pub extern "C" fn PrioritizeTexturesxOES(_: GLsizei, _: *GLuint, _: *GLfixed) -> c_void { fail!("PrioritizeTexturesxOES was not loaded") }
    pub extern "C" fn ProgramBinary(_: GLuint, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("ProgramBinary was not loaded") }
    pub extern "C" fn ProgramBinaryOES(_: GLuint, _: GLenum, _: *GLvoid, _: GLint) -> c_void { fail!("ProgramBinaryOES was not loaded") }
    pub extern "C" fn ProgramBufferParametersIivNV(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramBufferParametersIivNV was not loaded") }
    pub extern "C" fn ProgramBufferParametersIuivNV(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramBufferParametersIuivNV was not loaded") }
    pub extern "C" fn ProgramBufferParametersfvNV(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramBufferParametersfvNV was not loaded") }
    pub extern "C" fn ProgramEnvParameter4dARB(_: GLenum, _: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramEnvParameter4dARB was not loaded") }
    pub extern "C" fn ProgramEnvParameter4dvARB(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("ProgramEnvParameter4dvARB was not loaded") }
    pub extern "C" fn ProgramEnvParameter4fARB(_: GLenum, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramEnvParameter4fARB was not loaded") }
    pub extern "C" fn ProgramEnvParameter4fvARB(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("ProgramEnvParameter4fvARB was not loaded") }
    pub extern "C" fn ProgramEnvParameterI4iNV(_: GLenum, _: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramEnvParameterI4iNV was not loaded") }
    pub extern "C" fn ProgramEnvParameterI4ivNV(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("ProgramEnvParameterI4ivNV was not loaded") }
    pub extern "C" fn ProgramEnvParameterI4uiNV(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramEnvParameterI4uiNV was not loaded") }
    pub extern "C" fn ProgramEnvParameterI4uivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("ProgramEnvParameterI4uivNV was not loaded") }
    pub extern "C" fn ProgramEnvParameters4fvEXT(_: GLenum, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramEnvParameters4fvEXT was not loaded") }
    pub extern "C" fn ProgramEnvParametersI4ivNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramEnvParametersI4ivNV was not loaded") }
    pub extern "C" fn ProgramEnvParametersI4uivNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramEnvParametersI4uivNV was not loaded") }
    pub extern "C" fn ProgramLocalParameter4dARB(_: GLenum, _: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramLocalParameter4dARB was not loaded") }
    pub extern "C" fn ProgramLocalParameter4dvARB(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("ProgramLocalParameter4dvARB was not loaded") }
    pub extern "C" fn ProgramLocalParameter4fARB(_: GLenum, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramLocalParameter4fARB was not loaded") }
    pub extern "C" fn ProgramLocalParameter4fvARB(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("ProgramLocalParameter4fvARB was not loaded") }
    pub extern "C" fn ProgramLocalParameterI4iNV(_: GLenum, _: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramLocalParameterI4iNV was not loaded") }
    pub extern "C" fn ProgramLocalParameterI4ivNV(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("ProgramLocalParameterI4ivNV was not loaded") }
    pub extern "C" fn ProgramLocalParameterI4uiNV(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramLocalParameterI4uiNV was not loaded") }
    pub extern "C" fn ProgramLocalParameterI4uivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("ProgramLocalParameterI4uivNV was not loaded") }
    pub extern "C" fn ProgramLocalParameters4fvEXT(_: GLenum, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramLocalParameters4fvEXT was not loaded") }
    pub extern "C" fn ProgramLocalParametersI4ivNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramLocalParametersI4ivNV was not loaded") }
    pub extern "C" fn ProgramLocalParametersI4uivNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramLocalParametersI4uivNV was not loaded") }
    pub extern "C" fn ProgramNamedParameter4dNV(_: GLuint, _: GLsizei, _: *GLubyte, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramNamedParameter4dNV was not loaded") }
    pub extern "C" fn ProgramNamedParameter4dvNV(_: GLuint, _: GLsizei, _: *GLubyte, _: *GLdouble) -> c_void { fail!("ProgramNamedParameter4dvNV was not loaded") }
    pub extern "C" fn ProgramNamedParameter4fNV(_: GLuint, _: GLsizei, _: *GLubyte, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramNamedParameter4fNV was not loaded") }
    pub extern "C" fn ProgramNamedParameter4fvNV(_: GLuint, _: GLsizei, _: *GLubyte, _: *GLfloat) -> c_void { fail!("ProgramNamedParameter4fvNV was not loaded") }
    pub extern "C" fn ProgramParameter4dNV(_: GLenum, _: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramParameter4dNV was not loaded") }
    pub extern "C" fn ProgramParameter4dvNV(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("ProgramParameter4dvNV was not loaded") }
    pub extern "C" fn ProgramParameter4fNV(_: GLenum, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramParameter4fNV was not loaded") }
    pub extern "C" fn ProgramParameter4fvNV(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("ProgramParameter4fvNV was not loaded") }
    pub extern "C" fn ProgramParameteri(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("ProgramParameteri was not loaded") }
    pub extern "C" fn ProgramParameteriARB(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("ProgramParameteriARB was not loaded") }
    pub extern "C" fn ProgramParameteriEXT(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("ProgramParameteriEXT was not loaded") }
    pub extern "C" fn ProgramParameters4dvNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramParameters4dvNV was not loaded") }
    pub extern "C" fn ProgramParameters4fvNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramParameters4fvNV was not loaded") }
    pub extern "C" fn ProgramStringARB(_: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("ProgramStringARB was not loaded") }
    pub extern "C" fn ProgramSubroutineParametersuivNV(_: GLenum, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramSubroutineParametersuivNV was not loaded") }
    pub extern "C" fn ProgramUniform1d(_: GLuint, _: GLint, _: GLdouble) -> c_void { fail!("ProgramUniform1d was not loaded") }
    pub extern "C" fn ProgramUniform1dEXT(_: GLuint, _: GLint, _: GLdouble) -> c_void { fail!("ProgramUniform1dEXT was not loaded") }
    pub extern "C" fn ProgramUniform1dv(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform1dv was not loaded") }
    pub extern "C" fn ProgramUniform1dvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform1dvEXT was not loaded") }
    pub extern "C" fn ProgramUniform1f(_: GLuint, _: GLint, _: GLfloat) -> c_void { fail!("ProgramUniform1f was not loaded") }
    pub extern "C" fn ProgramUniform1fEXT(_: GLuint, _: GLint, _: GLfloat) -> c_void { fail!("ProgramUniform1fEXT was not loaded") }
    pub extern "C" fn ProgramUniform1fv(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform1fv was not loaded") }
    pub extern "C" fn ProgramUniform1fvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform1fvEXT was not loaded") }
    pub extern "C" fn ProgramUniform1i(_: GLuint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform1i was not loaded") }
    pub extern "C" fn ProgramUniform1i64NV(_: GLuint, _: GLint, _: GLint64EXT) -> c_void { fail!("ProgramUniform1i64NV was not loaded") }
    pub extern "C" fn ProgramUniform1i64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("ProgramUniform1i64vNV was not loaded") }
    pub extern "C" fn ProgramUniform1iEXT(_: GLuint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform1iEXT was not loaded") }
    pub extern "C" fn ProgramUniform1iv(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform1iv was not loaded") }
    pub extern "C" fn ProgramUniform1ivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform1ivEXT was not loaded") }
    pub extern "C" fn ProgramUniform1ui(_: GLuint, _: GLint, _: GLuint) -> c_void { fail!("ProgramUniform1ui was not loaded") }
    pub extern "C" fn ProgramUniform1ui64NV(_: GLuint, _: GLint, _: GLuint64EXT) -> c_void { fail!("ProgramUniform1ui64NV was not loaded") }
    pub extern "C" fn ProgramUniform1ui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniform1ui64vNV was not loaded") }
    pub extern "C" fn ProgramUniform1uiEXT(_: GLuint, _: GLint, _: GLuint) -> c_void { fail!("ProgramUniform1uiEXT was not loaded") }
    pub extern "C" fn ProgramUniform1uiv(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform1uiv was not loaded") }
    pub extern "C" fn ProgramUniform1uivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform1uivEXT was not loaded") }
    pub extern "C" fn ProgramUniform2d(_: GLuint, _: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform2d was not loaded") }
    pub extern "C" fn ProgramUniform2dEXT(_: GLuint, _: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform2dEXT was not loaded") }
    pub extern "C" fn ProgramUniform2dv(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform2dv was not loaded") }
    pub extern "C" fn ProgramUniform2dvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform2dvEXT was not loaded") }
    pub extern "C" fn ProgramUniform2f(_: GLuint, _: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform2f was not loaded") }
    pub extern "C" fn ProgramUniform2fEXT(_: GLuint, _: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform2fEXT was not loaded") }
    pub extern "C" fn ProgramUniform2fv(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform2fv was not loaded") }
    pub extern "C" fn ProgramUniform2fvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform2fvEXT was not loaded") }
    pub extern "C" fn ProgramUniform2i(_: GLuint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform2i was not loaded") }
    pub extern "C" fn ProgramUniform2i64NV(_: GLuint, _: GLint, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("ProgramUniform2i64NV was not loaded") }
    pub extern "C" fn ProgramUniform2i64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("ProgramUniform2i64vNV was not loaded") }
    pub extern "C" fn ProgramUniform2iEXT(_: GLuint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform2iEXT was not loaded") }
    pub extern "C" fn ProgramUniform2iv(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform2iv was not loaded") }
    pub extern "C" fn ProgramUniform2ivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform2ivEXT was not loaded") }
    pub extern "C" fn ProgramUniform2ui(_: GLuint, _: GLint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform2ui was not loaded") }
    pub extern "C" fn ProgramUniform2ui64NV(_: GLuint, _: GLint, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("ProgramUniform2ui64NV was not loaded") }
    pub extern "C" fn ProgramUniform2ui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniform2ui64vNV was not loaded") }
    pub extern "C" fn ProgramUniform2uiEXT(_: GLuint, _: GLint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform2uiEXT was not loaded") }
    pub extern "C" fn ProgramUniform2uiv(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform2uiv was not loaded") }
    pub extern "C" fn ProgramUniform2uivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform2uivEXT was not loaded") }
    pub extern "C" fn ProgramUniform3d(_: GLuint, _: GLint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform3d was not loaded") }
    pub extern "C" fn ProgramUniform3dEXT(_: GLuint, _: GLint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform3dEXT was not loaded") }
    pub extern "C" fn ProgramUniform3dv(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform3dv was not loaded") }
    pub extern "C" fn ProgramUniform3dvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform3dvEXT was not loaded") }
    pub extern "C" fn ProgramUniform3f(_: GLuint, _: GLint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform3f was not loaded") }
    pub extern "C" fn ProgramUniform3fEXT(_: GLuint, _: GLint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform3fEXT was not loaded") }
    pub extern "C" fn ProgramUniform3fv(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform3fv was not loaded") }
    pub extern "C" fn ProgramUniform3fvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform3fvEXT was not loaded") }
    pub extern "C" fn ProgramUniform3i(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform3i was not loaded") }
    pub extern "C" fn ProgramUniform3i64NV(_: GLuint, _: GLint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("ProgramUniform3i64NV was not loaded") }
    pub extern "C" fn ProgramUniform3i64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("ProgramUniform3i64vNV was not loaded") }
    pub extern "C" fn ProgramUniform3iEXT(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform3iEXT was not loaded") }
    pub extern "C" fn ProgramUniform3iv(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform3iv was not loaded") }
    pub extern "C" fn ProgramUniform3ivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform3ivEXT was not loaded") }
    pub extern "C" fn ProgramUniform3ui(_: GLuint, _: GLint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform3ui was not loaded") }
    pub extern "C" fn ProgramUniform3ui64NV(_: GLuint, _: GLint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("ProgramUniform3ui64NV was not loaded") }
    pub extern "C" fn ProgramUniform3ui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniform3ui64vNV was not loaded") }
    pub extern "C" fn ProgramUniform3uiEXT(_: GLuint, _: GLint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform3uiEXT was not loaded") }
    pub extern "C" fn ProgramUniform3uiv(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform3uiv was not loaded") }
    pub extern "C" fn ProgramUniform3uivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform3uivEXT was not loaded") }
    pub extern "C" fn ProgramUniform4d(_: GLuint, _: GLint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform4d was not loaded") }
    pub extern "C" fn ProgramUniform4dEXT(_: GLuint, _: GLint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform4dEXT was not loaded") }
    pub extern "C" fn ProgramUniform4dv(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform4dv was not loaded") }
    pub extern "C" fn ProgramUniform4dvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform4dvEXT was not loaded") }
    pub extern "C" fn ProgramUniform4f(_: GLuint, _: GLint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform4f was not loaded") }
    pub extern "C" fn ProgramUniform4fEXT(_: GLuint, _: GLint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform4fEXT was not loaded") }
    pub extern "C" fn ProgramUniform4fv(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform4fv was not loaded") }
    pub extern "C" fn ProgramUniform4fvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform4fvEXT was not loaded") }
    pub extern "C" fn ProgramUniform4i(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform4i was not loaded") }
    pub extern "C" fn ProgramUniform4i64NV(_: GLuint, _: GLint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("ProgramUniform4i64NV was not loaded") }
    pub extern "C" fn ProgramUniform4i64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("ProgramUniform4i64vNV was not loaded") }
    pub extern "C" fn ProgramUniform4iEXT(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform4iEXT was not loaded") }
    pub extern "C" fn ProgramUniform4iv(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform4iv was not loaded") }
    pub extern "C" fn ProgramUniform4ivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform4ivEXT was not loaded") }
    pub extern "C" fn ProgramUniform4ui(_: GLuint, _: GLint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform4ui was not loaded") }
    pub extern "C" fn ProgramUniform4ui64NV(_: GLuint, _: GLint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("ProgramUniform4ui64NV was not loaded") }
    pub extern "C" fn ProgramUniform4ui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniform4ui64vNV was not loaded") }
    pub extern "C" fn ProgramUniform4uiEXT(_: GLuint, _: GLint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform4uiEXT was not loaded") }
    pub extern "C" fn ProgramUniform4uiv(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform4uiv was not loaded") }
    pub extern "C" fn ProgramUniform4uivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform4uivEXT was not loaded") }
    pub extern "C" fn ProgramUniformHandleui64ARB(_: GLuint, _: GLint, _: GLuint64) -> c_void { fail!("ProgramUniformHandleui64ARB was not loaded") }
    pub extern "C" fn ProgramUniformHandleui64NV(_: GLuint, _: GLint, _: GLuint64) -> c_void { fail!("ProgramUniformHandleui64NV was not loaded") }
    pub extern "C" fn ProgramUniformHandleui64vARB(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64) -> c_void { fail!("ProgramUniformHandleui64vARB was not loaded") }
    pub extern "C" fn ProgramUniformHandleui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64) -> c_void { fail!("ProgramUniformHandleui64vNV was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x3dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2x3dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x3dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2x3dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x3fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2x3fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x3fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2x3fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x4dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2x4dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x4dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2x4dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x4fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2x4fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x4fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2x4fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x2dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3x2dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x2dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3x2dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x2fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3x2fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x2fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3x2fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x4dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3x4dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x4dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3x4dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x4fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3x4fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x4fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3x4fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x2dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4x2dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x2dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4x2dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x2fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4x2fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x2fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4x2fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x3dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4x3dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x3dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4x3dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x3fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4x3fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x3fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4x3fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformui64NV(_: GLuint, _: GLint, _: GLuint64EXT) -> c_void { fail!("ProgramUniformui64NV was not loaded") }
    pub extern "C" fn ProgramUniformui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniformui64vNV was not loaded") }
    pub extern "C" fn ProgramVertexLimitNV(_: GLenum, _: GLint) -> c_void { fail!("ProgramVertexLimitNV was not loaded") }
    pub extern "C" fn ProvokingVertex(_: GLenum) -> c_void { fail!("ProvokingVertex was not loaded") }
    pub extern "C" fn ProvokingVertexEXT(_: GLenum) -> c_void { fail!("ProvokingVertexEXT was not loaded") }
    pub extern "C" fn PushAttrib(_: GLbitfield) -> c_void { fail!("PushAttrib was not loaded") }
    pub extern "C" fn PushClientAttrib(_: GLbitfield) -> c_void { fail!("PushClientAttrib was not loaded") }
    pub extern "C" fn PushClientAttribDefaultEXT(_: GLbitfield) -> c_void { fail!("PushClientAttribDefaultEXT was not loaded") }
    pub extern "C" fn PushDebugGroup(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("PushDebugGroup was not loaded") }
    pub extern "C" fn PushDebugGroupKHR(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("PushDebugGroupKHR was not loaded") }
    pub extern "C" fn PushGroupMarkerEXT(_: GLsizei, _: *GLchar) -> c_void { fail!("PushGroupMarkerEXT was not loaded") }
    pub extern "C" fn PushMatrix() -> c_void { fail!("PushMatrix was not loaded") }
    pub extern "C" fn PushName(_: GLuint) -> c_void { fail!("PushName was not loaded") }
    pub extern "C" fn QueryCounter(_: GLuint, _: GLenum) -> c_void { fail!("QueryCounter was not loaded") }
    pub extern "C" fn QueryCounterEXT(_: GLuint, _: GLenum) -> c_void { fail!("QueryCounterEXT was not loaded") }
    pub extern "C" fn QueryMatrixxOES(_: *GLfixed, _: *GLint) -> GLbitfield { fail!("QueryMatrixxOES was not loaded") }
    pub extern "C" fn RasterPos2d(_: GLdouble, _: GLdouble) -> c_void { fail!("RasterPos2d was not loaded") }
    pub extern "C" fn RasterPos2dv(_: *GLdouble) -> c_void { fail!("RasterPos2dv was not loaded") }
    pub extern "C" fn RasterPos2f(_: GLfloat, _: GLfloat) -> c_void { fail!("RasterPos2f was not loaded") }
    pub extern "C" fn RasterPos2fv(_: *GLfloat) -> c_void { fail!("RasterPos2fv was not loaded") }
    pub extern "C" fn RasterPos2i(_: GLint, _: GLint) -> c_void { fail!("RasterPos2i was not loaded") }
    pub extern "C" fn RasterPos2iv(_: *GLint) -> c_void { fail!("RasterPos2iv was not loaded") }
    pub extern "C" fn RasterPos2s(_: GLshort, _: GLshort) -> c_void { fail!("RasterPos2s was not loaded") }
    pub extern "C" fn RasterPos2sv(_: *GLshort) -> c_void { fail!("RasterPos2sv was not loaded") }
    pub extern "C" fn RasterPos2xOES(_: GLfixed, _: GLfixed) -> c_void { fail!("RasterPos2xOES was not loaded") }
    pub extern "C" fn RasterPos2xvOES(_: *GLfixed) -> c_void { fail!("RasterPos2xvOES was not loaded") }
    pub extern "C" fn RasterPos3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("RasterPos3d was not loaded") }
    pub extern "C" fn RasterPos3dv(_: *GLdouble) -> c_void { fail!("RasterPos3dv was not loaded") }
    pub extern "C" fn RasterPos3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("RasterPos3f was not loaded") }
    pub extern "C" fn RasterPos3fv(_: *GLfloat) -> c_void { fail!("RasterPos3fv was not loaded") }
    pub extern "C" fn RasterPos3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("RasterPos3i was not loaded") }
    pub extern "C" fn RasterPos3iv(_: *GLint) -> c_void { fail!("RasterPos3iv was not loaded") }
    pub extern "C" fn RasterPos3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("RasterPos3s was not loaded") }
    pub extern "C" fn RasterPos3sv(_: *GLshort) -> c_void { fail!("RasterPos3sv was not loaded") }
    pub extern "C" fn RasterPos3xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("RasterPos3xOES was not loaded") }
    pub extern "C" fn RasterPos3xvOES(_: *GLfixed) -> c_void { fail!("RasterPos3xvOES was not loaded") }
    pub extern "C" fn RasterPos4d(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("RasterPos4d was not loaded") }
    pub extern "C" fn RasterPos4dv(_: *GLdouble) -> c_void { fail!("RasterPos4dv was not loaded") }
    pub extern "C" fn RasterPos4f(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("RasterPos4f was not loaded") }
    pub extern "C" fn RasterPos4fv(_: *GLfloat) -> c_void { fail!("RasterPos4fv was not loaded") }
    pub extern "C" fn RasterPos4i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("RasterPos4i was not loaded") }
    pub extern "C" fn RasterPos4iv(_: *GLint) -> c_void { fail!("RasterPos4iv was not loaded") }
    pub extern "C" fn RasterPos4s(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("RasterPos4s was not loaded") }
    pub extern "C" fn RasterPos4sv(_: *GLshort) -> c_void { fail!("RasterPos4sv was not loaded") }
    pub extern "C" fn RasterPos4xOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("RasterPos4xOES was not loaded") }
    pub extern "C" fn RasterPos4xvOES(_: *GLfixed) -> c_void { fail!("RasterPos4xvOES was not loaded") }
    pub extern "C" fn ReadBuffer(_: GLenum) -> c_void { fail!("ReadBuffer was not loaded") }
    pub extern "C" fn ReadBufferIndexedEXT(_: GLenum, _: GLint) -> c_void { fail!("ReadBufferIndexedEXT was not loaded") }
    pub extern "C" fn ReadBufferNV(_: GLenum) -> c_void { fail!("ReadBufferNV was not loaded") }
    pub extern "C" fn ReadInstrumentsSGIX(_: GLint) -> c_void { fail!("ReadInstrumentsSGIX was not loaded") }
    pub extern "C" fn ReadPixels(_: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ReadPixels was not loaded") }
    pub extern "C" fn ReadnPixelsARB(_: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("ReadnPixelsARB was not loaded") }
    pub extern "C" fn ReadnPixelsEXT(_: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("ReadnPixelsEXT was not loaded") }
    pub extern "C" fn Rectd(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Rectd was not loaded") }
    pub extern "C" fn Rectdv(_: *GLdouble, _: *GLdouble) -> c_void { fail!("Rectdv was not loaded") }
    pub extern "C" fn Rectf(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Rectf was not loaded") }
    pub extern "C" fn Rectfv(_: *GLfloat, _: *GLfloat) -> c_void { fail!("Rectfv was not loaded") }
    pub extern "C" fn Recti(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Recti was not loaded") }
    pub extern "C" fn Rectiv(_: *GLint, _: *GLint) -> c_void { fail!("Rectiv was not loaded") }
    pub extern "C" fn Rects(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Rects was not loaded") }
    pub extern "C" fn Rectsv(_: *GLshort, _: *GLshort) -> c_void { fail!("Rectsv was not loaded") }
    pub extern "C" fn RectxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("RectxOES was not loaded") }
    pub extern "C" fn RectxvOES(_: *GLfixed, _: *GLfixed) -> c_void { fail!("RectxvOES was not loaded") }
    pub extern "C" fn ReferencePlaneSGIX(_: *GLdouble) -> c_void { fail!("ReferencePlaneSGIX was not loaded") }
    pub extern "C" fn ReleaseShaderCompiler() -> c_void { fail!("ReleaseShaderCompiler was not loaded") }
    pub extern "C" fn RenderMode(_: GLenum) -> GLint { fail!("RenderMode was not loaded") }
    pub extern "C" fn RenderbufferStorage(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorage was not loaded") }
    pub extern "C" fn RenderbufferStorageEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageEXT was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisample(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisample was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleANGLE(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleANGLE was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleAPPLE(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleAPPLE was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleCoverageNV(_: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleCoverageNV was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleEXT was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleIMG(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleIMG was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleNV(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleNV was not loaded") }
    pub extern "C" fn RenderbufferStorageOES(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageOES was not loaded") }
    pub extern "C" fn ReplacementCodePointerSUN(_: GLenum, _: GLsizei, _: **GLvoid) -> c_void { fail!("ReplacementCodePointerSUN was not loaded") }
    pub extern "C" fn ReplacementCodeubSUN(_: GLubyte) -> c_void { fail!("ReplacementCodeubSUN was not loaded") }
    pub extern "C" fn ReplacementCodeubvSUN(_: *GLubyte) -> c_void { fail!("ReplacementCodeubvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiColor3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiColor3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor4fNormal3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiColor4fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor4fNormal3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiColor4fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor4ubVertex3fSUN(_: GLuint, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiColor4ubVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor4ubVertex3fvSUN(_: *GLuint, _: *GLubyte, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiColor4ubVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiNormal3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiNormal3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiSUN(_: GLuint) -> c_void { fail!("ReplacementCodeuiSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiVertex3fvSUN(_: *GLuint, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuivSUN(_: *GLuint) -> c_void { fail!("ReplacementCodeuivSUN was not loaded") }
    pub extern "C" fn ReplacementCodeusSUN(_: GLushort) -> c_void { fail!("ReplacementCodeusSUN was not loaded") }
    pub extern "C" fn ReplacementCodeusvSUN(_: *GLushort) -> c_void { fail!("ReplacementCodeusvSUN was not loaded") }
    pub extern "C" fn RequestResidentProgramsNV(_: GLsizei, _: *GLuint) -> c_void { fail!("RequestResidentProgramsNV was not loaded") }
    pub extern "C" fn ResetHistogram(_: GLenum) -> c_void { fail!("ResetHistogram was not loaded") }
    pub extern "C" fn ResetHistogramEXT(_: GLenum) -> c_void { fail!("ResetHistogramEXT was not loaded") }
    pub extern "C" fn ResetMinmax(_: GLenum) -> c_void { fail!("ResetMinmax was not loaded") }
    pub extern "C" fn ResetMinmaxEXT(_: GLenum) -> c_void { fail!("ResetMinmaxEXT was not loaded") }
    pub extern "C" fn ResizeBuffersMESA() -> c_void { fail!("ResizeBuffersMESA was not loaded") }
    pub extern "C" fn ResolveMultisampleFramebufferAPPLE() -> c_void { fail!("ResolveMultisampleFramebufferAPPLE was not loaded") }
    pub extern "C" fn ResumeTransformFeedback() -> c_void { fail!("ResumeTransformFeedback was not loaded") }
    pub extern "C" fn ResumeTransformFeedbackNV() -> c_void { fail!("ResumeTransformFeedbackNV was not loaded") }
    pub extern "C" fn Rotated(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Rotated was not loaded") }
    pub extern "C" fn Rotatef(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Rotatef was not loaded") }
    pub extern "C" fn Rotatex(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Rotatex was not loaded") }
    pub extern "C" fn RotatexOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("RotatexOES was not loaded") }
    pub extern "C" fn SampleCoverage(_: GLfloat, _: GLboolean) -> c_void { fail!("SampleCoverage was not loaded") }
    pub extern "C" fn SampleCoverageARB(_: GLfloat, _: GLboolean) -> c_void { fail!("SampleCoverageARB was not loaded") }
    pub extern "C" fn SampleCoverageOES(_: GLfixed, _: GLboolean) -> c_void { fail!("SampleCoverageOES was not loaded") }
    pub extern "C" fn SampleCoveragex(_: GLclampx, _: GLboolean) -> c_void { fail!("SampleCoveragex was not loaded") }
    pub extern "C" fn SampleCoveragexOES(_: GLclampx, _: GLboolean) -> c_void { fail!("SampleCoveragexOES was not loaded") }
    pub extern "C" fn SampleMapATI(_: GLuint, _: GLuint, _: GLenum) -> c_void { fail!("SampleMapATI was not loaded") }
    pub extern "C" fn SampleMaskEXT(_: GLclampf, _: GLboolean) -> c_void { fail!("SampleMaskEXT was not loaded") }
    pub extern "C" fn SampleMaskIndexedNV(_: GLuint, _: GLbitfield) -> c_void { fail!("SampleMaskIndexedNV was not loaded") }
    pub extern "C" fn SampleMaskSGIS(_: GLclampf, _: GLboolean) -> c_void { fail!("SampleMaskSGIS was not loaded") }
    pub extern "C" fn SampleMaski(_: GLuint, _: GLbitfield) -> c_void { fail!("SampleMaski was not loaded") }
    pub extern "C" fn SamplePatternEXT(_: GLenum) -> c_void { fail!("SamplePatternEXT was not loaded") }
    pub extern "C" fn SamplePatternSGIS(_: GLenum) -> c_void { fail!("SamplePatternSGIS was not loaded") }
    pub extern "C" fn SamplerParameterIiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("SamplerParameterIiv was not loaded") }
    pub extern "C" fn SamplerParameterIuiv(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("SamplerParameterIuiv was not loaded") }
    pub extern "C" fn SamplerParameterf(_: GLuint, _: GLenum, _: GLfloat) -> c_void { fail!("SamplerParameterf was not loaded") }
    pub extern "C" fn SamplerParameterfv(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("SamplerParameterfv was not loaded") }
    pub extern "C" fn SamplerParameteri(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("SamplerParameteri was not loaded") }
    pub extern "C" fn SamplerParameteriv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("SamplerParameteriv was not loaded") }
    pub extern "C" fn Scaled(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Scaled was not loaded") }
    pub extern "C" fn Scalef(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Scalef was not loaded") }
    pub extern "C" fn Scalex(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Scalex was not loaded") }
    pub extern "C" fn ScalexOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("ScalexOES was not loaded") }
    pub extern "C" fn Scissor(_: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("Scissor was not loaded") }
    pub extern "C" fn ScissorArrayv(_: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("ScissorArrayv was not loaded") }
    pub extern "C" fn ScissorIndexed(_: GLuint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("ScissorIndexed was not loaded") }
    pub extern "C" fn ScissorIndexedv(_: GLuint, _: *GLint) -> c_void { fail!("ScissorIndexedv was not loaded") }
    pub extern "C" fn SecondaryColor3b(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("SecondaryColor3b was not loaded") }
    pub extern "C" fn SecondaryColor3bEXT(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("SecondaryColor3bEXT was not loaded") }
    pub extern "C" fn SecondaryColor3bv(_: *GLbyte) -> c_void { fail!("SecondaryColor3bv was not loaded") }
    pub extern "C" fn SecondaryColor3bvEXT(_: *GLbyte) -> c_void { fail!("SecondaryColor3bvEXT was not loaded") }
    pub extern "C" fn SecondaryColor3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("SecondaryColor3d was not loaded") }
    pub extern "C" fn SecondaryColor3dEXT(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("SecondaryColor3dEXT was not loaded") }
    pub extern "C" fn SecondaryColor3dv(_: *GLdouble) -> c_void { fail!("SecondaryColor3dv was not loaded") }
    pub extern "C" fn SecondaryColor3dvEXT(_: *GLdouble) -> c_void { fail!("SecondaryColor3dvEXT was not loaded") }
    pub extern "C" fn SecondaryColor3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("SecondaryColor3f was not loaded") }
    pub extern "C" fn SecondaryColor3fEXT(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("SecondaryColor3fEXT was not loaded") }
    pub extern "C" fn SecondaryColor3fv(_: *GLfloat) -> c_void { fail!("SecondaryColor3fv was not loaded") }
    pub extern "C" fn SecondaryColor3fvEXT(_: *GLfloat) -> c_void { fail!("SecondaryColor3fvEXT was not loaded") }
    pub extern "C" fn SecondaryColor3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("SecondaryColor3hNV was not loaded") }
    pub extern "C" fn SecondaryColor3hvNV(_: *GLhalfNV) -> c_void { fail!("SecondaryColor3hvNV was not loaded") }
    pub extern "C" fn SecondaryColor3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("SecondaryColor3i was not loaded") }
    pub extern "C" fn SecondaryColor3iEXT(_: GLint, _: GLint, _: GLint) -> c_void { fail!("SecondaryColor3iEXT was not loaded") }
    pub extern "C" fn SecondaryColor3iv(_: *GLint) -> c_void { fail!("SecondaryColor3iv was not loaded") }
    pub extern "C" fn SecondaryColor3ivEXT(_: *GLint) -> c_void { fail!("SecondaryColor3ivEXT was not loaded") }
    pub extern "C" fn SecondaryColor3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("SecondaryColor3s was not loaded") }
    pub extern "C" fn SecondaryColor3sEXT(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("SecondaryColor3sEXT was not loaded") }
    pub extern "C" fn SecondaryColor3sv(_: *GLshort) -> c_void { fail!("SecondaryColor3sv was not loaded") }
    pub extern "C" fn SecondaryColor3svEXT(_: *GLshort) -> c_void { fail!("SecondaryColor3svEXT was not loaded") }
    pub extern "C" fn SecondaryColor3ub(_: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("SecondaryColor3ub was not loaded") }
    pub extern "C" fn SecondaryColor3ubEXT(_: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("SecondaryColor3ubEXT was not loaded") }
    pub extern "C" fn SecondaryColor3ubv(_: *GLubyte) -> c_void { fail!("SecondaryColor3ubv was not loaded") }
    pub extern "C" fn SecondaryColor3ubvEXT(_: *GLubyte) -> c_void { fail!("SecondaryColor3ubvEXT was not loaded") }
    pub extern "C" fn SecondaryColor3ui(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("SecondaryColor3ui was not loaded") }
    pub extern "C" fn SecondaryColor3uiEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("SecondaryColor3uiEXT was not loaded") }
    pub extern "C" fn SecondaryColor3uiv(_: *GLuint) -> c_void { fail!("SecondaryColor3uiv was not loaded") }
    pub extern "C" fn SecondaryColor3uivEXT(_: *GLuint) -> c_void { fail!("SecondaryColor3uivEXT was not loaded") }
    pub extern "C" fn SecondaryColor3us(_: GLushort, _: GLushort, _: GLushort) -> c_void { fail!("SecondaryColor3us was not loaded") }
    pub extern "C" fn SecondaryColor3usEXT(_: GLushort, _: GLushort, _: GLushort) -> c_void { fail!("SecondaryColor3usEXT was not loaded") }
    pub extern "C" fn SecondaryColor3usv(_: *GLushort) -> c_void { fail!("SecondaryColor3usv was not loaded") }
    pub extern "C" fn SecondaryColor3usvEXT(_: *GLushort) -> c_void { fail!("SecondaryColor3usvEXT was not loaded") }
    pub extern "C" fn SecondaryColorFormatNV(_: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("SecondaryColorFormatNV was not loaded") }
    pub extern "C" fn SecondaryColorP3ui(_: GLenum, _: GLuint) -> c_void { fail!("SecondaryColorP3ui was not loaded") }
    pub extern "C" fn SecondaryColorP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("SecondaryColorP3uiv was not loaded") }
    pub extern "C" fn SecondaryColorPointer(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("SecondaryColorPointer was not loaded") }
    pub extern "C" fn SecondaryColorPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("SecondaryColorPointerEXT was not loaded") }
    pub extern "C" fn SecondaryColorPointerListIBM(_: GLint, _: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("SecondaryColorPointerListIBM was not loaded") }
    pub extern "C" fn SelectBuffer(_: GLsizei, _: *GLuint) -> c_void { fail!("SelectBuffer was not loaded") }
    pub extern "C" fn SelectPerfMonitorCountersAMD(_: GLuint, _: GLboolean, _: GLuint, _: GLint, _: *GLuint) -> c_void { fail!("SelectPerfMonitorCountersAMD was not loaded") }
    pub extern "C" fn SeparableFilter2D(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid, _: *GLvoid) -> c_void { fail!("SeparableFilter2D was not loaded") }
    pub extern "C" fn SeparableFilter2DEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid, _: *GLvoid) -> c_void { fail!("SeparableFilter2DEXT was not loaded") }
    pub extern "C" fn SetFenceAPPLE(_: GLuint) -> c_void { fail!("SetFenceAPPLE was not loaded") }
    pub extern "C" fn SetFenceNV(_: GLuint, _: GLenum) -> c_void { fail!("SetFenceNV was not loaded") }
    pub extern "C" fn SetFragmentShaderConstantATI(_: GLuint, _: *GLfloat) -> c_void { fail!("SetFragmentShaderConstantATI was not loaded") }
    pub extern "C" fn SetInvariantEXT(_: GLuint, _: GLenum, _: *GLvoid) -> c_void { fail!("SetInvariantEXT was not loaded") }
    pub extern "C" fn SetLocalConstantEXT(_: GLuint, _: GLenum, _: *GLvoid) -> c_void { fail!("SetLocalConstantEXT was not loaded") }
    pub extern "C" fn SetMultisamplefvAMD(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("SetMultisamplefvAMD was not loaded") }
    pub extern "C" fn ShadeModel(_: GLenum) -> c_void { fail!("ShadeModel was not loaded") }
    pub extern "C" fn ShaderBinary(_: GLsizei, _: *GLuint, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("ShaderBinary was not loaded") }
    pub extern "C" fn ShaderOp1EXT(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("ShaderOp1EXT was not loaded") }
    pub extern "C" fn ShaderOp2EXT(_: GLenum, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ShaderOp2EXT was not loaded") }
    pub extern "C" fn ShaderOp3EXT(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ShaderOp3EXT was not loaded") }
    pub extern "C" fn ShaderSource(_: GLuint, _: GLsizei, _: **GLchar, _: *GLint) -> c_void { fail!("ShaderSource was not loaded") }
    pub extern "C" fn ShaderSourceARB(_: GLhandleARB, _: GLsizei, _: **GLcharARB, _: *GLint) -> c_void { fail!("ShaderSourceARB was not loaded") }
    pub extern "C" fn ShaderStorageBlockBinding(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ShaderStorageBlockBinding was not loaded") }
    pub extern "C" fn SharpenTexFuncSGIS(_: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("SharpenTexFuncSGIS was not loaded") }
    pub extern "C" fn SpriteParameterfSGIX(_: GLenum, _: GLfloat) -> c_void { fail!("SpriteParameterfSGIX was not loaded") }
    pub extern "C" fn SpriteParameterfvSGIX(_: GLenum, _: *GLfloat) -> c_void { fail!("SpriteParameterfvSGIX was not loaded") }
    pub extern "C" fn SpriteParameteriSGIX(_: GLenum, _: GLint) -> c_void { fail!("SpriteParameteriSGIX was not loaded") }
    pub extern "C" fn SpriteParameterivSGIX(_: GLenum, _: *GLint) -> c_void { fail!("SpriteParameterivSGIX was not loaded") }
    pub extern "C" fn StartInstrumentsSGIX() -> c_void { fail!("StartInstrumentsSGIX was not loaded") }
    pub extern "C" fn StartTilingQCOM(_: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLbitfield) -> c_void { fail!("StartTilingQCOM was not loaded") }
    pub extern "C" fn StencilClearTagEXT(_: GLsizei, _: GLuint) -> c_void { fail!("StencilClearTagEXT was not loaded") }
    pub extern "C" fn StencilFillPathInstancedNV(_: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLenum, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("StencilFillPathInstancedNV was not loaded") }
    pub extern "C" fn StencilFillPathNV(_: GLuint, _: GLenum, _: GLuint) -> c_void { fail!("StencilFillPathNV was not loaded") }
    pub extern "C" fn StencilFunc(_: GLenum, _: GLint, _: GLuint) -> c_void { fail!("StencilFunc was not loaded") }
    pub extern "C" fn StencilFuncSeparate(_: GLenum, _: GLenum, _: GLint, _: GLuint) -> c_void { fail!("StencilFuncSeparate was not loaded") }
    pub extern "C" fn StencilFuncSeparateATI(_: GLenum, _: GLenum, _: GLint, _: GLuint) -> c_void { fail!("StencilFuncSeparateATI was not loaded") }
    pub extern "C" fn StencilMask(_: GLuint) -> c_void { fail!("StencilMask was not loaded") }
    pub extern "C" fn StencilMaskSeparate(_: GLenum, _: GLuint) -> c_void { fail!("StencilMaskSeparate was not loaded") }
    pub extern "C" fn StencilOp(_: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("StencilOp was not loaded") }
    pub extern "C" fn StencilOpSeparate(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("StencilOpSeparate was not loaded") }
    pub extern "C" fn StencilOpSeparateATI(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("StencilOpSeparateATI was not loaded") }
    pub extern "C" fn StencilOpValueAMD(_: GLenum, _: GLuint) -> c_void { fail!("StencilOpValueAMD was not loaded") }
    pub extern "C" fn StencilStrokePathInstancedNV(_: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLint, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("StencilStrokePathInstancedNV was not loaded") }
    pub extern "C" fn StencilStrokePathNV(_: GLuint, _: GLint, _: GLuint) -> c_void { fail!("StencilStrokePathNV was not loaded") }
    pub extern "C" fn StopInstrumentsSGIX(_: GLint) -> c_void { fail!("StopInstrumentsSGIX was not loaded") }
    pub extern "C" fn StringMarkerGREMEDY(_: GLsizei, _: *GLvoid) -> c_void { fail!("StringMarkerGREMEDY was not loaded") }
    pub extern "C" fn SwizzleEXT(_: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("SwizzleEXT was not loaded") }
    pub extern "C" fn SyncTextureINTEL(_: GLuint) -> c_void { fail!("SyncTextureINTEL was not loaded") }
    pub extern "C" fn TagSampleBufferSGIX() -> c_void { fail!("TagSampleBufferSGIX was not loaded") }
    pub extern "C" fn Tangent3bEXT(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Tangent3bEXT was not loaded") }
    pub extern "C" fn Tangent3bvEXT(_: *GLbyte) -> c_void { fail!("Tangent3bvEXT was not loaded") }
    pub extern "C" fn Tangent3dEXT(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Tangent3dEXT was not loaded") }
    pub extern "C" fn Tangent3dvEXT(_: *GLdouble) -> c_void { fail!("Tangent3dvEXT was not loaded") }
    pub extern "C" fn Tangent3fEXT(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Tangent3fEXT was not loaded") }
    pub extern "C" fn Tangent3fvEXT(_: *GLfloat) -> c_void { fail!("Tangent3fvEXT was not loaded") }
    pub extern "C" fn Tangent3iEXT(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Tangent3iEXT was not loaded") }
    pub extern "C" fn Tangent3ivEXT(_: *GLint) -> c_void { fail!("Tangent3ivEXT was not loaded") }
    pub extern "C" fn Tangent3sEXT(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Tangent3sEXT was not loaded") }
    pub extern "C" fn Tangent3svEXT(_: *GLshort) -> c_void { fail!("Tangent3svEXT was not loaded") }
    pub extern "C" fn TangentPointerEXT(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("TangentPointerEXT was not loaded") }
    pub extern "C" fn TbufferMask3DFX(_: GLuint) -> c_void { fail!("TbufferMask3DFX was not loaded") }
    pub extern "C" fn TessellationFactorAMD(_: GLfloat) -> c_void { fail!("TessellationFactorAMD was not loaded") }
    pub extern "C" fn TessellationModeAMD(_: GLenum) -> c_void { fail!("TessellationModeAMD was not loaded") }
    pub extern "C" fn TestFenceAPPLE(_: GLuint) -> GLboolean { fail!("TestFenceAPPLE was not loaded") }
    pub extern "C" fn TestFenceNV(_: GLuint) -> GLboolean { fail!("TestFenceNV was not loaded") }
    pub extern "C" fn TestObjectAPPLE(_: GLenum, _: GLuint) -> GLboolean { fail!("TestObjectAPPLE was not loaded") }
    pub extern "C" fn TexBuffer(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("TexBuffer was not loaded") }
    pub extern "C" fn TexBufferARB(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("TexBufferARB was not loaded") }
    pub extern "C" fn TexBufferEXT(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("TexBufferEXT was not loaded") }
    pub extern "C" fn TexBufferRange(_: GLenum, _: GLenum, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("TexBufferRange was not loaded") }
    pub extern "C" fn TexBumpParameterfvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("TexBumpParameterfvATI was not loaded") }
    pub extern "C" fn TexBumpParameterivATI(_: GLenum, _: *GLint) -> c_void { fail!("TexBumpParameterivATI was not loaded") }
    pub extern "C" fn TexCoord1bOES(_: GLbyte) -> c_void { fail!("TexCoord1bOES was not loaded") }
    pub extern "C" fn TexCoord1bvOES(_: *GLbyte) -> c_void { fail!("TexCoord1bvOES was not loaded") }
    pub extern "C" fn TexCoord1d(_: GLdouble) -> c_void { fail!("TexCoord1d was not loaded") }
    pub extern "C" fn TexCoord1dv(_: *GLdouble) -> c_void { fail!("TexCoord1dv was not loaded") }
    pub extern "C" fn TexCoord1f(_: GLfloat) -> c_void { fail!("TexCoord1f was not loaded") }
    pub extern "C" fn TexCoord1fv(_: *GLfloat) -> c_void { fail!("TexCoord1fv was not loaded") }
    pub extern "C" fn TexCoord1hNV(_: GLhalfNV) -> c_void { fail!("TexCoord1hNV was not loaded") }
    pub extern "C" fn TexCoord1hvNV(_: *GLhalfNV) -> c_void { fail!("TexCoord1hvNV was not loaded") }
    pub extern "C" fn TexCoord1i(_: GLint) -> c_void { fail!("TexCoord1i was not loaded") }
    pub extern "C" fn TexCoord1iv(_: *GLint) -> c_void { fail!("TexCoord1iv was not loaded") }
    pub extern "C" fn TexCoord1s(_: GLshort) -> c_void { fail!("TexCoord1s was not loaded") }
    pub extern "C" fn TexCoord1sv(_: *GLshort) -> c_void { fail!("TexCoord1sv was not loaded") }
    pub extern "C" fn TexCoord1xOES(_: GLfixed) -> c_void { fail!("TexCoord1xOES was not loaded") }
    pub extern "C" fn TexCoord1xvOES(_: *GLfixed) -> c_void { fail!("TexCoord1xvOES was not loaded") }
    pub extern "C" fn TexCoord2bOES(_: GLbyte, _: GLbyte) -> c_void { fail!("TexCoord2bOES was not loaded") }
    pub extern "C" fn TexCoord2bvOES(_: *GLbyte) -> c_void { fail!("TexCoord2bvOES was not loaded") }
    pub extern "C" fn TexCoord2d(_: GLdouble, _: GLdouble) -> c_void { fail!("TexCoord2d was not loaded") }
    pub extern "C" fn TexCoord2dv(_: *GLdouble) -> c_void { fail!("TexCoord2dv was not loaded") }
    pub extern "C" fn TexCoord2f(_: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2f was not loaded") }
    pub extern "C" fn TexCoord2fColor3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fColor3fVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor3fVertex3fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord2fColor3fVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor4fNormal3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fColor4fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor4fNormal3fVertex3fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord2fColor4fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor4ubVertex3fSUN(_: GLfloat, _: GLfloat, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fColor4ubVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor4ubVertex3fvSUN(_: *GLfloat, _: *GLubyte, _: *GLfloat) -> c_void { fail!("TexCoord2fColor4ubVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fNormal3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fNormal3fVertex3fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord2fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fVertex3fvSUN(_: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord2fVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fv(_: *GLfloat) -> c_void { fail!("TexCoord2fv was not loaded") }
    pub extern "C" fn TexCoord2hNV(_: GLhalfNV, _: GLhalfNV) -> c_void { fail!("TexCoord2hNV was not loaded") }
    pub extern "C" fn TexCoord2hvNV(_: *GLhalfNV) -> c_void { fail!("TexCoord2hvNV was not loaded") }
    pub extern "C" fn TexCoord2i(_: GLint, _: GLint) -> c_void { fail!("TexCoord2i was not loaded") }
    pub extern "C" fn TexCoord2iv(_: *GLint) -> c_void { fail!("TexCoord2iv was not loaded") }
    pub extern "C" fn TexCoord2s(_: GLshort, _: GLshort) -> c_void { fail!("TexCoord2s was not loaded") }
    pub extern "C" fn TexCoord2sv(_: *GLshort) -> c_void { fail!("TexCoord2sv was not loaded") }
    pub extern "C" fn TexCoord2xOES(_: GLfixed, _: GLfixed) -> c_void { fail!("TexCoord2xOES was not loaded") }
    pub extern "C" fn TexCoord2xvOES(_: *GLfixed) -> c_void { fail!("TexCoord2xvOES was not loaded") }
    pub extern "C" fn TexCoord3bOES(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("TexCoord3bOES was not loaded") }
    pub extern "C" fn TexCoord3bvOES(_: *GLbyte) -> c_void { fail!("TexCoord3bvOES was not loaded") }
    pub extern "C" fn TexCoord3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("TexCoord3d was not loaded") }
    pub extern "C" fn TexCoord3dv(_: *GLdouble) -> c_void { fail!("TexCoord3dv was not loaded") }
    pub extern "C" fn TexCoord3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord3f was not loaded") }
    pub extern "C" fn TexCoord3fv(_: *GLfloat) -> c_void { fail!("TexCoord3fv was not loaded") }
    pub extern "C" fn TexCoord3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("TexCoord3hNV was not loaded") }
    pub extern "C" fn TexCoord3hvNV(_: *GLhalfNV) -> c_void { fail!("TexCoord3hvNV was not loaded") }
    pub extern "C" fn TexCoord3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("TexCoord3i was not loaded") }
    pub extern "C" fn TexCoord3iv(_: *GLint) -> c_void { fail!("TexCoord3iv was not loaded") }
    pub extern "C" fn TexCoord3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("TexCoord3s was not loaded") }
    pub extern "C" fn TexCoord3sv(_: *GLshort) -> c_void { fail!("TexCoord3sv was not loaded") }
    pub extern "C" fn TexCoord3xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("TexCoord3xOES was not loaded") }
    pub extern "C" fn TexCoord3xvOES(_: *GLfixed) -> c_void { fail!("TexCoord3xvOES was not loaded") }
    pub extern "C" fn TexCoord4bOES(_: GLbyte, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("TexCoord4bOES was not loaded") }
    pub extern "C" fn TexCoord4bvOES(_: *GLbyte) -> c_void { fail!("TexCoord4bvOES was not loaded") }
    pub extern "C" fn TexCoord4d(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("TexCoord4d was not loaded") }
    pub extern "C" fn TexCoord4dv(_: *GLdouble) -> c_void { fail!("TexCoord4dv was not loaded") }
    pub extern "C" fn TexCoord4f(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord4f was not loaded") }
    pub extern "C" fn TexCoord4fColor4fNormal3fVertex4fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord4fColor4fNormal3fVertex4fSUN was not loaded") }
    pub extern "C" fn TexCoord4fColor4fNormal3fVertex4fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord4fColor4fNormal3fVertex4fvSUN was not loaded") }
    pub extern "C" fn TexCoord4fVertex4fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord4fVertex4fSUN was not loaded") }
    pub extern "C" fn TexCoord4fVertex4fvSUN(_: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord4fVertex4fvSUN was not loaded") }
    pub extern "C" fn TexCoord4fv(_: *GLfloat) -> c_void { fail!("TexCoord4fv was not loaded") }
    pub extern "C" fn TexCoord4hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("TexCoord4hNV was not loaded") }
    pub extern "C" fn TexCoord4hvNV(_: *GLhalfNV) -> c_void { fail!("TexCoord4hvNV was not loaded") }
    pub extern "C" fn TexCoord4i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("TexCoord4i was not loaded") }
    pub extern "C" fn TexCoord4iv(_: *GLint) -> c_void { fail!("TexCoord4iv was not loaded") }
    pub extern "C" fn TexCoord4s(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("TexCoord4s was not loaded") }
    pub extern "C" fn TexCoord4sv(_: *GLshort) -> c_void { fail!("TexCoord4sv was not loaded") }
    pub extern "C" fn TexCoord4xOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("TexCoord4xOES was not loaded") }
    pub extern "C" fn TexCoord4xvOES(_: *GLfixed) -> c_void { fail!("TexCoord4xvOES was not loaded") }
    pub extern "C" fn TexCoordFormatNV(_: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("TexCoordFormatNV was not loaded") }
    pub extern "C" fn TexCoordP1ui(_: GLenum, _: GLuint) -> c_void { fail!("TexCoordP1ui was not loaded") }
    pub extern "C" fn TexCoordP1uiv(_: GLenum, _: *GLuint) -> c_void { fail!("TexCoordP1uiv was not loaded") }
    pub extern "C" fn TexCoordP2ui(_: GLenum, _: GLuint) -> c_void { fail!("TexCoordP2ui was not loaded") }
    pub extern "C" fn TexCoordP2uiv(_: GLenum, _: *GLuint) -> c_void { fail!("TexCoordP2uiv was not loaded") }
    pub extern "C" fn TexCoordP3ui(_: GLenum, _: GLuint) -> c_void { fail!("TexCoordP3ui was not loaded") }
    pub extern "C" fn TexCoordP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("TexCoordP3uiv was not loaded") }
    pub extern "C" fn TexCoordP4ui(_: GLenum, _: GLuint) -> c_void { fail!("TexCoordP4ui was not loaded") }
    pub extern "C" fn TexCoordP4uiv(_: GLenum, _: *GLuint) -> c_void { fail!("TexCoordP4uiv was not loaded") }
    pub extern "C" fn TexCoordPointer(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("TexCoordPointer was not loaded") }
    pub extern "C" fn TexCoordPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("TexCoordPointerEXT was not loaded") }
    pub extern "C" fn TexCoordPointerListIBM(_: GLint, _: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("TexCoordPointerListIBM was not loaded") }
    pub extern "C" fn TexCoordPointervINTEL(_: GLint, _: GLenum, _: **GLvoid) -> c_void { fail!("TexCoordPointervINTEL was not loaded") }
    pub extern "C" fn TexEnvf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TexEnvf was not loaded") }
    pub extern "C" fn TexEnvfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TexEnvfv was not loaded") }
    pub extern "C" fn TexEnvi(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TexEnvi was not loaded") }
    pub extern "C" fn TexEnviv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexEnviv was not loaded") }
    pub extern "C" fn TexEnvx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexEnvx was not loaded") }
    pub extern "C" fn TexEnvxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexEnvxOES was not loaded") }
    pub extern "C" fn TexEnvxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexEnvxv was not loaded") }
    pub extern "C" fn TexEnvxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexEnvxvOES was not loaded") }
    pub extern "C" fn TexFilterFuncSGIS(_: GLenum, _: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("TexFilterFuncSGIS was not loaded") }
    pub extern "C" fn TexGend(_: GLenum, _: GLenum, _: GLdouble) -> c_void { fail!("TexGend was not loaded") }
    pub extern "C" fn TexGendv(_: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("TexGendv was not loaded") }
    pub extern "C" fn TexGenf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TexGenf was not loaded") }
    pub extern "C" fn TexGenfOES(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TexGenfOES was not loaded") }
    pub extern "C" fn TexGenfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TexGenfv was not loaded") }
    pub extern "C" fn TexGenfvOES(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TexGenfvOES was not loaded") }
    pub extern "C" fn TexGeni(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TexGeni was not loaded") }
    pub extern "C" fn TexGeniOES(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TexGeniOES was not loaded") }
    pub extern "C" fn TexGeniv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexGeniv was not loaded") }
    pub extern "C" fn TexGenivOES(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexGenivOES was not loaded") }
    pub extern "C" fn TexGenxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexGenxOES was not loaded") }
    pub extern "C" fn TexGenxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexGenxvOES was not loaded") }
    pub extern "C" fn TexImage1D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage1D was not loaded") }
    pub extern "C" fn TexImage2D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage2D was not loaded") }
    pub extern "C" fn TexImage2DMultisample(_: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexImage2DMultisample was not loaded") }
    pub extern "C" fn TexImage2DMultisampleCoverageNV(_: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexImage2DMultisampleCoverageNV was not loaded") }
    pub extern "C" fn TexImage3D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage3D was not loaded") }
    pub extern "C" fn TexImage3DEXT(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage3DEXT was not loaded") }
    pub extern "C" fn TexImage3DMultisample(_: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexImage3DMultisample was not loaded") }
    pub extern "C" fn TexImage3DMultisampleCoverageNV(_: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexImage3DMultisampleCoverageNV was not loaded") }
    pub extern "C" fn TexImage3DOES(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage3DOES was not loaded") }
    pub extern "C" fn TexImage4DSGIS(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage4DSGIS was not loaded") }
    pub extern "C" fn TexPageCommitmentARB(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexPageCommitmentARB was not loaded") }
    pub extern "C" fn TexParameterIiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexParameterIiv was not loaded") }
    pub extern "C" fn TexParameterIivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexParameterIivEXT was not loaded") }
    pub extern "C" fn TexParameterIuiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("TexParameterIuiv was not loaded") }
    pub extern "C" fn TexParameterIuivEXT(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("TexParameterIuivEXT was not loaded") }
    pub extern "C" fn TexParameterf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TexParameterf was not loaded") }
    pub extern "C" fn TexParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TexParameterfv was not loaded") }
    pub extern "C" fn TexParameteri(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TexParameteri was not loaded") }
    pub extern "C" fn TexParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexParameteriv was not loaded") }
    pub extern "C" fn TexParameterx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexParameterx was not loaded") }
    pub extern "C" fn TexParameterxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexParameterxOES was not loaded") }
    pub extern "C" fn TexParameterxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexParameterxv was not loaded") }
    pub extern "C" fn TexParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexParameterxvOES was not loaded") }
    pub extern "C" fn TexRenderbufferNV(_: GLenum, _: GLuint) -> c_void { fail!("TexRenderbufferNV was not loaded") }
    pub extern "C" fn TexStorage1D(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei) -> c_void { fail!("TexStorage1D was not loaded") }
    pub extern "C" fn TexStorage1DEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei) -> c_void { fail!("TexStorage1DEXT was not loaded") }
    pub extern "C" fn TexStorage2D(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("TexStorage2D was not loaded") }
    pub extern "C" fn TexStorage2DEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("TexStorage2DEXT was not loaded") }
    pub extern "C" fn TexStorage2DMultisample(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexStorage2DMultisample was not loaded") }
    pub extern "C" fn TexStorage3D(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("TexStorage3D was not loaded") }
    pub extern "C" fn TexStorage3DEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("TexStorage3DEXT was not loaded") }
    pub extern "C" fn TexStorage3DMultisample(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexStorage3DMultisample was not loaded") }
    pub extern "C" fn TexStorageSparseAMD(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLsizei, _: GLbitfield) -> c_void { fail!("TexStorageSparseAMD was not loaded") }
    pub extern "C" fn TexSubImage1D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage1D was not loaded") }
    pub extern "C" fn TexSubImage1DEXT(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage1DEXT was not loaded") }
    pub extern "C" fn TexSubImage2D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage2D was not loaded") }
    pub extern "C" fn TexSubImage2DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage2DEXT was not loaded") }
    pub extern "C" fn TexSubImage3D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage3D was not loaded") }
    pub extern "C" fn TexSubImage3DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage3DEXT was not loaded") }
    pub extern "C" fn TexSubImage3DOES(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage3DOES was not loaded") }
    pub extern "C" fn TexSubImage4DSGIS(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage4DSGIS was not loaded") }
    pub extern "C" fn TextureBarrierNV() -> c_void { fail!("TextureBarrierNV was not loaded") }
    pub extern "C" fn TextureBufferEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("TextureBufferEXT was not loaded") }
    pub extern "C" fn TextureBufferRangeEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("TextureBufferRangeEXT was not loaded") }
    pub extern "C" fn TextureColorMaskSGIS(_: GLboolean, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("TextureColorMaskSGIS was not loaded") }
    pub extern "C" fn TextureImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureImage1DEXT was not loaded") }
    pub extern "C" fn TextureImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureImage2DEXT was not loaded") }
    pub extern "C" fn TextureImage2DMultisampleCoverageNV(_: GLuint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureImage2DMultisampleCoverageNV was not loaded") }
    pub extern "C" fn TextureImage2DMultisampleNV(_: GLuint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureImage2DMultisampleNV was not loaded") }
    pub extern "C" fn TextureImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureImage3DEXT was not loaded") }
    pub extern "C" fn TextureImage3DMultisampleCoverageNV(_: GLuint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureImage3DMultisampleCoverageNV was not loaded") }
    pub extern "C" fn TextureImage3DMultisampleNV(_: GLuint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureImage3DMultisampleNV was not loaded") }
    pub extern "C" fn TextureLightEXT(_: GLenum) -> c_void { fail!("TextureLightEXT was not loaded") }
    pub extern "C" fn TextureMaterialEXT(_: GLenum, _: GLenum) -> c_void { fail!("TextureMaterialEXT was not loaded") }
    pub extern "C" fn TextureNormalEXT(_: GLenum) -> c_void { fail!("TextureNormalEXT was not loaded") }
    pub extern "C" fn TexturePageCommitmentEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexturePageCommitmentEXT was not loaded") }
    pub extern "C" fn TextureParameterIivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TextureParameterIivEXT was not loaded") }
    pub extern "C" fn TextureParameterIuivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("TextureParameterIuivEXT was not loaded") }
    pub extern "C" fn TextureParameterfEXT(_: GLuint, _: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TextureParameterfEXT was not loaded") }
    pub extern "C" fn TextureParameterfvEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TextureParameterfvEXT was not loaded") }
    pub extern "C" fn TextureParameteriEXT(_: GLuint, _: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TextureParameteriEXT was not loaded") }
    pub extern "C" fn TextureParameterivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TextureParameterivEXT was not loaded") }
    pub extern "C" fn TextureRangeAPPLE(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("TextureRangeAPPLE was not loaded") }
    pub extern "C" fn TextureRenderbufferEXT(_: GLuint, _: GLenum, _: GLuint) -> c_void { fail!("TextureRenderbufferEXT was not loaded") }
    pub extern "C" fn TextureStorage1DEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei) -> c_void { fail!("TextureStorage1DEXT was not loaded") }
    pub extern "C" fn TextureStorage2DEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("TextureStorage2DEXT was not loaded") }
    pub extern "C" fn TextureStorage2DMultisampleEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureStorage2DMultisampleEXT was not loaded") }
    pub extern "C" fn TextureStorage3DEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("TextureStorage3DEXT was not loaded") }
    pub extern "C" fn TextureStorage3DMultisampleEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureStorage3DMultisampleEXT was not loaded") }
    pub extern "C" fn TextureStorageSparseAMD(_: GLuint, _: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLsizei, _: GLbitfield) -> c_void { fail!("TextureStorageSparseAMD was not loaded") }
    pub extern "C" fn TextureSubImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureSubImage1DEXT was not loaded") }
    pub extern "C" fn TextureSubImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureSubImage2DEXT was not loaded") }
    pub extern "C" fn TextureSubImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureSubImage3DEXT was not loaded") }
    pub extern "C" fn TextureView(_: GLuint, _: GLenum, _: GLuint, _: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("TextureView was not loaded") }
    pub extern "C" fn TrackMatrixNV(_: GLenum, _: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("TrackMatrixNV was not loaded") }
    pub extern "C" fn TransformFeedbackAttribsNV(_: GLuint, _: *GLint, _: GLenum) -> c_void { fail!("TransformFeedbackAttribsNV was not loaded") }
    pub extern "C" fn TransformFeedbackStreamAttribsNV(_: GLsizei, _: *GLint, _: GLsizei, _: *GLint, _: GLenum) -> c_void { fail!("TransformFeedbackStreamAttribsNV was not loaded") }
    pub extern "C" fn TransformFeedbackVaryings(_: GLuint, _: GLsizei, _: **GLchar, _: GLenum) -> c_void { fail!("TransformFeedbackVaryings was not loaded") }
    pub extern "C" fn TransformFeedbackVaryingsEXT(_: GLuint, _: GLsizei, _: **GLchar, _: GLenum) -> c_void { fail!("TransformFeedbackVaryingsEXT was not loaded") }
    pub extern "C" fn TransformFeedbackVaryingsNV(_: GLuint, _: GLsizei, _: *GLint, _: GLenum) -> c_void { fail!("TransformFeedbackVaryingsNV was not loaded") }
    pub extern "C" fn TransformPathNV(_: GLuint, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("TransformPathNV was not loaded") }
    pub extern "C" fn Translated(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Translated was not loaded") }
    pub extern "C" fn Translatef(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Translatef was not loaded") }
    pub extern "C" fn Translatex(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Translatex was not loaded") }
    pub extern "C" fn TranslatexOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("TranslatexOES was not loaded") }
    pub extern "C" fn Uniform1d(_: GLint, _: GLdouble) -> c_void { fail!("Uniform1d was not loaded") }
    pub extern "C" fn Uniform1dv(_: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("Uniform1dv was not loaded") }
    pub extern "C" fn Uniform1f(_: GLint, _: GLfloat) -> c_void { fail!("Uniform1f was not loaded") }
    pub extern "C" fn Uniform1fARB(_: GLint, _: GLfloat) -> c_void { fail!("Uniform1fARB was not loaded") }
    pub extern "C" fn Uniform1fv(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform1fv was not loaded") }
    pub extern "C" fn Uniform1fvARB(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform1fvARB was not loaded") }
    pub extern "C" fn Uniform1i(_: GLint, _: GLint) -> c_void { fail!("Uniform1i was not loaded") }
    pub extern "C" fn Uniform1i64NV(_: GLint, _: GLint64EXT) -> c_void { fail!("Uniform1i64NV was not loaded") }
    pub extern "C" fn Uniform1i64vNV(_: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("Uniform1i64vNV was not loaded") }
    pub extern "C" fn Uniform1iARB(_: GLint, _: GLint) -> c_void { fail!("Uniform1iARB was not loaded") }
    pub extern "C" fn Uniform1iv(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform1iv was not loaded") }
    pub extern "C" fn Uniform1ivARB(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform1ivARB was not loaded") }
    pub extern "C" fn Uniform1ui(_: GLint, _: GLuint) -> c_void { fail!("Uniform1ui was not loaded") }
    pub extern "C" fn Uniform1ui64NV(_: GLint, _: GLuint64EXT) -> c_void { fail!("Uniform1ui64NV was not loaded") }
    pub extern "C" fn Uniform1ui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniform1ui64vNV was not loaded") }
    pub extern "C" fn Uniform1uiEXT(_: GLint, _: GLuint) -> c_void { fail!("Uniform1uiEXT was not loaded") }
    pub extern "C" fn Uniform1uiv(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform1uiv was not loaded") }
    pub extern "C" fn Uniform1uivEXT(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform1uivEXT was not loaded") }
    pub extern "C" fn Uniform2d(_: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("Uniform2d was not loaded") }
    pub extern "C" fn Uniform2dv(_: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("Uniform2dv was not loaded") }
    pub extern "C" fn Uniform2f(_: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform2f was not loaded") }
    pub extern "C" fn Uniform2fARB(_: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform2fARB was not loaded") }
    pub extern "C" fn Uniform2fv(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform2fv was not loaded") }
    pub extern "C" fn Uniform2fvARB(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform2fvARB was not loaded") }
    pub extern "C" fn Uniform2i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform2i was not loaded") }
    pub extern "C" fn Uniform2i64NV(_: GLint, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("Uniform2i64NV was not loaded") }
    pub extern "C" fn Uniform2i64vNV(_: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("Uniform2i64vNV was not loaded") }
    pub extern "C" fn Uniform2iARB(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform2iARB was not loaded") }
    pub extern "C" fn Uniform2iv(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform2iv was not loaded") }
    pub extern "C" fn Uniform2ivARB(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform2ivARB was not loaded") }
    pub extern "C" fn Uniform2ui(_: GLint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform2ui was not loaded") }
    pub extern "C" fn Uniform2ui64NV(_: GLint, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("Uniform2ui64NV was not loaded") }
    pub extern "C" fn Uniform2ui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniform2ui64vNV was not loaded") }
    pub extern "C" fn Uniform2uiEXT(_: GLint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform2uiEXT was not loaded") }
    pub extern "C" fn Uniform2uiv(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform2uiv was not loaded") }
    pub extern "C" fn Uniform2uivEXT(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform2uivEXT was not loaded") }
    pub extern "C" fn Uniform3d(_: GLint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Uniform3d was not loaded") }
    pub extern "C" fn Uniform3dv(_: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("Uniform3dv was not loaded") }
    pub extern "C" fn Uniform3f(_: GLint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform3f was not loaded") }
    pub extern "C" fn Uniform3fARB(_: GLint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform3fARB was not loaded") }
    pub extern "C" fn Uniform3fv(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform3fv was not loaded") }
    pub extern "C" fn Uniform3fvARB(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform3fvARB was not loaded") }
    pub extern "C" fn Uniform3i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform3i was not loaded") }
    pub extern "C" fn Uniform3i64NV(_: GLint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("Uniform3i64NV was not loaded") }
    pub extern "C" fn Uniform3i64vNV(_: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("Uniform3i64vNV was not loaded") }
    pub extern "C" fn Uniform3iARB(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform3iARB was not loaded") }
    pub extern "C" fn Uniform3iv(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform3iv was not loaded") }
    pub extern "C" fn Uniform3ivARB(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform3ivARB was not loaded") }
    pub extern "C" fn Uniform3ui(_: GLint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform3ui was not loaded") }
    pub extern "C" fn Uniform3ui64NV(_: GLint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("Uniform3ui64NV was not loaded") }
    pub extern "C" fn Uniform3ui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniform3ui64vNV was not loaded") }
    pub extern "C" fn Uniform3uiEXT(_: GLint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform3uiEXT was not loaded") }
    pub extern "C" fn Uniform3uiv(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform3uiv was not loaded") }
    pub extern "C" fn Uniform3uivEXT(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform3uivEXT was not loaded") }
    pub extern "C" fn Uniform4d(_: GLint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Uniform4d was not loaded") }
    pub extern "C" fn Uniform4dv(_: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("Uniform4dv was not loaded") }
    pub extern "C" fn Uniform4f(_: GLint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform4f was not loaded") }
    pub extern "C" fn Uniform4fARB(_: GLint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform4fARB was not loaded") }
    pub extern "C" fn Uniform4fv(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform4fv was not loaded") }
    pub extern "C" fn Uniform4fvARB(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform4fvARB was not loaded") }
    pub extern "C" fn Uniform4i(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform4i was not loaded") }
    pub extern "C" fn Uniform4i64NV(_: GLint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("Uniform4i64NV was not loaded") }
    pub extern "C" fn Uniform4i64vNV(_: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("Uniform4i64vNV was not loaded") }
    pub extern "C" fn Uniform4iARB(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform4iARB was not loaded") }
    pub extern "C" fn Uniform4iv(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform4iv was not loaded") }
    pub extern "C" fn Uniform4ivARB(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform4ivARB was not loaded") }
    pub extern "C" fn Uniform4ui(_: GLint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform4ui was not loaded") }
    pub extern "C" fn Uniform4ui64NV(_: GLint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("Uniform4ui64NV was not loaded") }
    pub extern "C" fn Uniform4ui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniform4ui64vNV was not loaded") }
    pub extern "C" fn Uniform4uiEXT(_: GLint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform4uiEXT was not loaded") }
    pub extern "C" fn Uniform4uiv(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform4uiv was not loaded") }
    pub extern "C" fn Uniform4uivEXT(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform4uivEXT was not loaded") }
    pub extern "C" fn UniformBlockBinding(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("UniformBlockBinding was not loaded") }
    pub extern "C" fn UniformBufferEXT(_: GLuint, _: GLint, _: GLuint) -> c_void { fail!("UniformBufferEXT was not loaded") }
    pub extern "C" fn UniformHandleui64ARB(_: GLint, _: GLuint64) -> c_void { fail!("UniformHandleui64ARB was not loaded") }
    pub extern "C" fn UniformHandleui64NV(_: GLint, _: GLuint64) -> c_void { fail!("UniformHandleui64NV was not loaded") }
    pub extern "C" fn UniformHandleui64vARB(_: GLint, _: GLsizei, _: *GLuint64) -> c_void { fail!("UniformHandleui64vARB was not loaded") }
    pub extern "C" fn UniformHandleui64vNV(_: GLint, _: GLsizei, _: *GLuint64) -> c_void { fail!("UniformHandleui64vNV was not loaded") }
    pub extern "C" fn UniformMatrix2dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix2dv was not loaded") }
    pub extern "C" fn UniformMatrix2fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix2fv was not loaded") }
    pub extern "C" fn UniformMatrix2fvARB(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix2fvARB was not loaded") }
    pub extern "C" fn UniformMatrix2x3dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix2x3dv was not loaded") }
    pub extern "C" fn UniformMatrix2x3fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix2x3fv was not loaded") }
    pub extern "C" fn UniformMatrix2x4dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix2x4dv was not loaded") }
    pub extern "C" fn UniformMatrix2x4fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix2x4fv was not loaded") }
    pub extern "C" fn UniformMatrix3dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix3dv was not loaded") }
    pub extern "C" fn UniformMatrix3fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix3fv was not loaded") }
    pub extern "C" fn UniformMatrix3fvARB(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix3fvARB was not loaded") }
    pub extern "C" fn UniformMatrix3x2dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix3x2dv was not loaded") }
    pub extern "C" fn UniformMatrix3x2fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix3x2fv was not loaded") }
    pub extern "C" fn UniformMatrix3x4dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix3x4dv was not loaded") }
    pub extern "C" fn UniformMatrix3x4fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix3x4fv was not loaded") }
    pub extern "C" fn UniformMatrix4dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix4dv was not loaded") }
    pub extern "C" fn UniformMatrix4fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix4fv was not loaded") }
    pub extern "C" fn UniformMatrix4fvARB(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix4fvARB was not loaded") }
    pub extern "C" fn UniformMatrix4x2dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix4x2dv was not loaded") }
    pub extern "C" fn UniformMatrix4x2fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix4x2fv was not loaded") }
    pub extern "C" fn UniformMatrix4x3dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix4x3dv was not loaded") }
    pub extern "C" fn UniformMatrix4x3fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix4x3fv was not loaded") }
    pub extern "C" fn UniformSubroutinesuiv(_: GLenum, _: GLsizei, _: *GLuint) -> c_void { fail!("UniformSubroutinesuiv was not loaded") }
    pub extern "C" fn Uniformui64NV(_: GLint, _: GLuint64EXT) -> c_void { fail!("Uniformui64NV was not loaded") }
    pub extern "C" fn Uniformui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniformui64vNV was not loaded") }
    pub extern "C" fn UnlockArraysEXT() -> c_void { fail!("UnlockArraysEXT was not loaded") }
    pub extern "C" fn UnmapBuffer(_: GLenum) -> GLboolean { fail!("UnmapBuffer was not loaded") }
    pub extern "C" fn UnmapBufferARB(_: GLenum) -> GLboolean { fail!("UnmapBufferARB was not loaded") }
    pub extern "C" fn UnmapBufferOES(_: GLenum) -> GLboolean { fail!("UnmapBufferOES was not loaded") }
    pub extern "C" fn UnmapNamedBufferEXT(_: GLuint) -> GLboolean { fail!("UnmapNamedBufferEXT was not loaded") }
    pub extern "C" fn UnmapObjectBufferATI(_: GLuint) -> c_void { fail!("UnmapObjectBufferATI was not loaded") }
    pub extern "C" fn UnmapTexture2DINTEL(_: GLuint, _: GLint) -> c_void { fail!("UnmapTexture2DINTEL was not loaded") }
    pub extern "C" fn UpdateObjectBufferATI(_: GLuint, _: GLuint, _: GLsizei, _: *GLvoid, _: GLenum) -> c_void { fail!("UpdateObjectBufferATI was not loaded") }
    pub extern "C" fn UseProgram(_: GLuint) -> c_void { fail!("UseProgram was not loaded") }
    pub extern "C" fn UseProgramObjectARB(_: GLhandleARB) -> c_void { fail!("UseProgramObjectARB was not loaded") }
    pub extern "C" fn UseProgramStages(_: GLuint, _: GLbitfield, _: GLuint) -> c_void { fail!("UseProgramStages was not loaded") }
    pub extern "C" fn UseProgramStagesEXT(_: GLuint, _: GLbitfield, _: GLuint) -> c_void { fail!("UseProgramStagesEXT was not loaded") }
    pub extern "C" fn UseShaderProgramEXT(_: GLenum, _: GLuint) -> c_void { fail!("UseShaderProgramEXT was not loaded") }
    pub extern "C" fn VDPAUFiniNV() -> c_void { fail!("VDPAUFiniNV was not loaded") }
    pub extern "C" fn VDPAUGetSurfaceivNV(_: GLvdpauSurfaceNV, _: GLenum, _: GLsizei, _: *GLsizei, _: *GLint) -> c_void { fail!("VDPAUGetSurfaceivNV was not loaded") }
    pub extern "C" fn VDPAUInitNV(_: *GLvoid, _: *GLvoid) -> c_void { fail!("VDPAUInitNV was not loaded") }
    pub extern "C" fn VDPAUIsSurfaceNV(_: GLvdpauSurfaceNV) -> c_void { fail!("VDPAUIsSurfaceNV was not loaded") }
    pub extern "C" fn VDPAUMapSurfacesNV(_: GLsizei, _: *GLvdpauSurfaceNV) -> c_void { fail!("VDPAUMapSurfacesNV was not loaded") }
    pub extern "C" fn VDPAURegisterOutputSurfaceNV(_: *GLvoid, _: GLenum, _: GLsizei, _: *GLuint) -> GLvdpauSurfaceNV { fail!("VDPAURegisterOutputSurfaceNV was not loaded") }
    pub extern "C" fn VDPAURegisterVideoSurfaceNV(_: *GLvoid, _: GLenum, _: GLsizei, _: *GLuint) -> GLvdpauSurfaceNV { fail!("VDPAURegisterVideoSurfaceNV was not loaded") }
    pub extern "C" fn VDPAUSurfaceAccessNV(_: GLvdpauSurfaceNV, _: GLenum) -> c_void { fail!("VDPAUSurfaceAccessNV was not loaded") }
    pub extern "C" fn VDPAUUnmapSurfacesNV(_: GLsizei, _: *GLvdpauSurfaceNV) -> c_void { fail!("VDPAUUnmapSurfacesNV was not loaded") }
    pub extern "C" fn VDPAUUnregisterSurfaceNV(_: GLvdpauSurfaceNV) -> c_void { fail!("VDPAUUnregisterSurfaceNV was not loaded") }
    pub extern "C" fn ValidateProgram(_: GLuint) -> c_void { fail!("ValidateProgram was not loaded") }
    pub extern "C" fn ValidateProgramARB(_: GLhandleARB) -> c_void { fail!("ValidateProgramARB was not loaded") }
    pub extern "C" fn ValidateProgramPipeline(_: GLuint) -> c_void { fail!("ValidateProgramPipeline was not loaded") }
    pub extern "C" fn ValidateProgramPipelineEXT(_: GLuint) -> c_void { fail!("ValidateProgramPipelineEXT was not loaded") }
    pub extern "C" fn VariantArrayObjectATI(_: GLuint, _: GLenum, _: GLsizei, _: GLuint, _: GLuint) -> c_void { fail!("VariantArrayObjectATI was not loaded") }
    pub extern "C" fn VariantPointerEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLvoid) -> c_void { fail!("VariantPointerEXT was not loaded") }
    pub extern "C" fn VariantbvEXT(_: GLuint, _: *GLbyte) -> c_void { fail!("VariantbvEXT was not loaded") }
    pub extern "C" fn VariantdvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VariantdvEXT was not loaded") }
    pub extern "C" fn VariantfvEXT(_: GLuint, _: *GLfloat) -> c_void { fail!("VariantfvEXT was not loaded") }
    pub extern "C" fn VariantivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VariantivEXT was not loaded") }
    pub extern "C" fn VariantsvEXT(_: GLuint, _: *GLshort) -> c_void { fail!("VariantsvEXT was not loaded") }
    pub extern "C" fn VariantubvEXT(_: GLuint, _: *GLubyte) -> c_void { fail!("VariantubvEXT was not loaded") }
    pub extern "C" fn VariantuivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VariantuivEXT was not loaded") }
    pub extern "C" fn VariantusvEXT(_: GLuint, _: *GLushort) -> c_void { fail!("VariantusvEXT was not loaded") }
    pub extern "C" fn Vertex2bOES(_: GLbyte) -> c_void { fail!("Vertex2bOES was not loaded") }
    pub extern "C" fn Vertex2bvOES(_: *GLbyte) -> c_void { fail!("Vertex2bvOES was not loaded") }
    pub extern "C" fn Vertex2d(_: GLdouble, _: GLdouble) -> c_void { fail!("Vertex2d was not loaded") }
    pub extern "C" fn Vertex2dv(_: *GLdouble) -> c_void { fail!("Vertex2dv was not loaded") }
    pub extern "C" fn Vertex2f(_: GLfloat, _: GLfloat) -> c_void { fail!("Vertex2f was not loaded") }
    pub extern "C" fn Vertex2fv(_: *GLfloat) -> c_void { fail!("Vertex2fv was not loaded") }
    pub extern "C" fn Vertex2hNV(_: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Vertex2hNV was not loaded") }
    pub extern "C" fn Vertex2hvNV(_: *GLhalfNV) -> c_void { fail!("Vertex2hvNV was not loaded") }
    pub extern "C" fn Vertex2i(_: GLint, _: GLint) -> c_void { fail!("Vertex2i was not loaded") }
    pub extern "C" fn Vertex2iv(_: *GLint) -> c_void { fail!("Vertex2iv was not loaded") }
    pub extern "C" fn Vertex2s(_: GLshort, _: GLshort) -> c_void { fail!("Vertex2s was not loaded") }
    pub extern "C" fn Vertex2sv(_: *GLshort) -> c_void { fail!("Vertex2sv was not loaded") }
    pub extern "C" fn Vertex2xOES(_: GLfixed) -> c_void { fail!("Vertex2xOES was not loaded") }
    pub extern "C" fn Vertex2xvOES(_: *GLfixed) -> c_void { fail!("Vertex2xvOES was not loaded") }
    pub extern "C" fn Vertex3bOES(_: GLbyte, _: GLbyte) -> c_void { fail!("Vertex3bOES was not loaded") }
    pub extern "C" fn Vertex3bvOES(_: *GLbyte) -> c_void { fail!("Vertex3bvOES was not loaded") }
    pub extern "C" fn Vertex3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Vertex3d was not loaded") }
    pub extern "C" fn Vertex3dv(_: *GLdouble) -> c_void { fail!("Vertex3dv was not loaded") }
    pub extern "C" fn Vertex3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Vertex3f was not loaded") }
    pub extern "C" fn Vertex3fv(_: *GLfloat) -> c_void { fail!("Vertex3fv was not loaded") }
    pub extern "C" fn Vertex3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Vertex3hNV was not loaded") }
    pub extern "C" fn Vertex3hvNV(_: *GLhalfNV) -> c_void { fail!("Vertex3hvNV was not loaded") }
    pub extern "C" fn Vertex3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Vertex3i was not loaded") }
    pub extern "C" fn Vertex3iv(_: *GLint) -> c_void { fail!("Vertex3iv was not loaded") }
    pub extern "C" fn Vertex3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Vertex3s was not loaded") }
    pub extern "C" fn Vertex3sv(_: *GLshort) -> c_void { fail!("Vertex3sv was not loaded") }
    pub extern "C" fn Vertex3xOES(_: GLfixed, _: GLfixed) -> c_void { fail!("Vertex3xOES was not loaded") }
    pub extern "C" fn Vertex3xvOES(_: *GLfixed) -> c_void { fail!("Vertex3xvOES was not loaded") }
    pub extern "C" fn Vertex4bOES(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Vertex4bOES was not loaded") }
    pub extern "C" fn Vertex4bvOES(_: *GLbyte) -> c_void { fail!("Vertex4bvOES was not loaded") }
    pub extern "C" fn Vertex4d(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Vertex4d was not loaded") }
    pub extern "C" fn Vertex4dv(_: *GLdouble) -> c_void { fail!("Vertex4dv was not loaded") }
    pub extern "C" fn Vertex4f(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Vertex4f was not loaded") }
    pub extern "C" fn Vertex4fv(_: *GLfloat) -> c_void { fail!("Vertex4fv was not loaded") }
    pub extern "C" fn Vertex4hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Vertex4hNV was not loaded") }
    pub extern "C" fn Vertex4hvNV(_: *GLhalfNV) -> c_void { fail!("Vertex4hvNV was not loaded") }
    pub extern "C" fn Vertex4i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Vertex4i was not loaded") }
    pub extern "C" fn Vertex4iv(_: *GLint) -> c_void { fail!("Vertex4iv was not loaded") }
    pub extern "C" fn Vertex4s(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Vertex4s was not loaded") }
    pub extern "C" fn Vertex4sv(_: *GLshort) -> c_void { fail!("Vertex4sv was not loaded") }
    pub extern "C" fn Vertex4xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Vertex4xOES was not loaded") }
    pub extern "C" fn Vertex4xvOES(_: *GLfixed) -> c_void { fail!("Vertex4xvOES was not loaded") }
    pub extern "C" fn VertexArrayBindVertexBufferEXT(_: GLuint, _: GLuint, _: GLuint, _: GLintptr, _: GLsizei) -> c_void { fail!("VertexArrayBindVertexBufferEXT was not loaded") }
    pub extern "C" fn VertexArrayColorOffsetEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayColorOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayEdgeFlagOffsetEXT(_: GLuint, _: GLuint, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayEdgeFlagOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayFogCoordOffsetEXT(_: GLuint, _: GLuint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayFogCoordOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayIndexOffsetEXT(_: GLuint, _: GLuint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayIndexOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayMultiTexCoordOffsetEXT(_: GLuint, _: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayMultiTexCoordOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayNormalOffsetEXT(_: GLuint, _: GLuint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayNormalOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayParameteriAPPLE(_: GLenum, _: GLint) -> c_void { fail!("VertexArrayParameteriAPPLE was not loaded") }
    pub extern "C" fn VertexArrayRangeAPPLE(_: GLsizei, _: *GLvoid) -> c_void { fail!("VertexArrayRangeAPPLE was not loaded") }
    pub extern "C" fn VertexArrayRangeNV(_: GLsizei, _: *GLvoid) -> c_void { fail!("VertexArrayRangeNV was not loaded") }
    pub extern "C" fn VertexArraySecondaryColorOffsetEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArraySecondaryColorOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayTexCoordOffsetEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayTexCoordOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribBindingEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexArrayVertexAttribBindingEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribFormatEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexArrayVertexAttribFormatEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribIFormatEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLuint) -> c_void { fail!("VertexArrayVertexAttribIFormatEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribIOffsetEXT(_: GLuint, _: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayVertexAttribIOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribLFormatEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLuint) -> c_void { fail!("VertexArrayVertexAttribLFormatEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribLOffsetEXT(_: GLuint, _: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayVertexAttribLOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribOffsetEXT(_: GLuint, _: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayVertexAttribOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexBindingDivisorEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexArrayVertexBindingDivisorEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexOffsetEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayVertexOffsetEXT was not loaded") }
    pub extern "C" fn VertexAttrib1d(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttrib1d was not loaded") }
    pub extern "C" fn VertexAttrib1dARB(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttrib1dARB was not loaded") }
    pub extern "C" fn VertexAttrib1dNV(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttrib1dNV was not loaded") }
    pub extern "C" fn VertexAttrib1dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib1dv was not loaded") }
    pub extern "C" fn VertexAttrib1dvARB(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib1dvARB was not loaded") }
    pub extern "C" fn VertexAttrib1dvNV(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib1dvNV was not loaded") }
    pub extern "C" fn VertexAttrib1f(_: GLuint, _: GLfloat) -> c_void { fail!("VertexAttrib1f was not loaded") }
    pub extern "C" fn VertexAttrib1fARB(_: GLuint, _: GLfloat) -> c_void { fail!("VertexAttrib1fARB was not loaded") }
    pub extern "C" fn VertexAttrib1fNV(_: GLuint, _: GLfloat) -> c_void { fail!("VertexAttrib1fNV was not loaded") }
    pub extern "C" fn VertexAttrib1fv(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib1fv was not loaded") }
    pub extern "C" fn VertexAttrib1fvARB(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib1fvARB was not loaded") }
    pub extern "C" fn VertexAttrib1fvNV(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib1fvNV was not loaded") }
    pub extern "C" fn VertexAttrib1hNV(_: GLuint, _: GLhalfNV) -> c_void { fail!("VertexAttrib1hNV was not loaded") }
    pub extern "C" fn VertexAttrib1hvNV(_: GLuint, _: *GLhalfNV) -> c_void { fail!("VertexAttrib1hvNV was not loaded") }
    pub extern "C" fn VertexAttrib1s(_: GLuint, _: GLshort) -> c_void { fail!("VertexAttrib1s was not loaded") }
    pub extern "C" fn VertexAttrib1sARB(_: GLuint, _: GLshort) -> c_void { fail!("VertexAttrib1sARB was not loaded") }
    pub extern "C" fn VertexAttrib1sNV(_: GLuint, _: GLshort) -> c_void { fail!("VertexAttrib1sNV was not loaded") }
    pub extern "C" fn VertexAttrib1sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib1sv was not loaded") }
    pub extern "C" fn VertexAttrib1svARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib1svARB was not loaded") }
    pub extern "C" fn VertexAttrib1svNV(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib1svNV was not loaded") }
    pub extern "C" fn VertexAttrib2d(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib2d was not loaded") }
    pub extern "C" fn VertexAttrib2dARB(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib2dARB was not loaded") }
    pub extern "C" fn VertexAttrib2dNV(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib2dNV was not loaded") }
    pub extern "C" fn VertexAttrib2dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib2dv was not loaded") }
    pub extern "C" fn VertexAttrib2dvARB(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib2dvARB was not loaded") }
    pub extern "C" fn VertexAttrib2dvNV(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib2dvNV was not loaded") }
    pub extern "C" fn VertexAttrib2f(_: GLuint, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib2f was not loaded") }
    pub extern "C" fn VertexAttrib2fARB(_: GLuint, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib2fARB was not loaded") }
    pub extern "C" fn VertexAttrib2fNV(_: GLuint, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib2fNV was not loaded") }
    pub extern "C" fn VertexAttrib2fv(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib2fv was not loaded") }
    pub extern "C" fn VertexAttrib2fvARB(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib2fvARB was not loaded") }
    pub extern "C" fn VertexAttrib2fvNV(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib2fvNV was not loaded") }
    pub extern "C" fn VertexAttrib2hNV(_: GLuint, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("VertexAttrib2hNV was not loaded") }
    pub extern "C" fn VertexAttrib2hvNV(_: GLuint, _: *GLhalfNV) -> c_void { fail!("VertexAttrib2hvNV was not loaded") }
    pub extern "C" fn VertexAttrib2s(_: GLuint, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib2s was not loaded") }
    pub extern "C" fn VertexAttrib2sARB(_: GLuint, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib2sARB was not loaded") }
    pub extern "C" fn VertexAttrib2sNV(_: GLuint, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib2sNV was not loaded") }
    pub extern "C" fn VertexAttrib2sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib2sv was not loaded") }
    pub extern "C" fn VertexAttrib2svARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib2svARB was not loaded") }
    pub extern "C" fn VertexAttrib2svNV(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib2svNV was not loaded") }
    pub extern "C" fn VertexAttrib3d(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib3d was not loaded") }
    pub extern "C" fn VertexAttrib3dARB(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib3dARB was not loaded") }
    pub extern "C" fn VertexAttrib3dNV(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib3dNV was not loaded") }
    pub extern "C" fn VertexAttrib3dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib3dv was not loaded") }
    pub extern "C" fn VertexAttrib3dvARB(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib3dvARB was not loaded") }
    pub extern "C" fn VertexAttrib3dvNV(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib3dvNV was not loaded") }
    pub extern "C" fn VertexAttrib3f(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib3f was not loaded") }
    pub extern "C" fn VertexAttrib3fARB(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib3fARB was not loaded") }
    pub extern "C" fn VertexAttrib3fNV(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib3fNV was not loaded") }
    pub extern "C" fn VertexAttrib3fv(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib3fv was not loaded") }
    pub extern "C" fn VertexAttrib3fvARB(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib3fvARB was not loaded") }
    pub extern "C" fn VertexAttrib3fvNV(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib3fvNV was not loaded") }
    pub extern "C" fn VertexAttrib3hNV(_: GLuint, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("VertexAttrib3hNV was not loaded") }
    pub extern "C" fn VertexAttrib3hvNV(_: GLuint, _: *GLhalfNV) -> c_void { fail!("VertexAttrib3hvNV was not loaded") }
    pub extern "C" fn VertexAttrib3s(_: GLuint, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib3s was not loaded") }
    pub extern "C" fn VertexAttrib3sARB(_: GLuint, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib3sARB was not loaded") }
    pub extern "C" fn VertexAttrib3sNV(_: GLuint, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib3sNV was not loaded") }
    pub extern "C" fn VertexAttrib3sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib3sv was not loaded") }
    pub extern "C" fn VertexAttrib3svARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib3svARB was not loaded") }
    pub extern "C" fn VertexAttrib3svNV(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib3svNV was not loaded") }
    pub extern "C" fn VertexAttrib4Nbv(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttrib4Nbv was not loaded") }
    pub extern "C" fn VertexAttrib4NbvARB(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttrib4NbvARB was not loaded") }
    pub extern "C" fn VertexAttrib4Niv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttrib4Niv was not loaded") }
    pub extern "C" fn VertexAttrib4NivARB(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttrib4NivARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nsv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4Nsv was not loaded") }
    pub extern "C" fn VertexAttrib4NsvARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4NsvARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nub(_: GLuint, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("VertexAttrib4Nub was not loaded") }
    pub extern "C" fn VertexAttrib4NubARB(_: GLuint, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("VertexAttrib4NubARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nubv(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4Nubv was not loaded") }
    pub extern "C" fn VertexAttrib4NubvARB(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4NubvARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nuiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttrib4Nuiv was not loaded") }
    pub extern "C" fn VertexAttrib4NuivARB(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttrib4NuivARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nusv(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttrib4Nusv was not loaded") }
    pub extern "C" fn VertexAttrib4NusvARB(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttrib4NusvARB was not loaded") }
    pub extern "C" fn VertexAttrib4bv(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttrib4bv was not loaded") }
    pub extern "C" fn VertexAttrib4bvARB(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttrib4bvARB was not loaded") }
    pub extern "C" fn VertexAttrib4d(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib4d was not loaded") }
    pub extern "C" fn VertexAttrib4dARB(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib4dARB was not loaded") }
    pub extern "C" fn VertexAttrib4dNV(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib4dNV was not loaded") }
    pub extern "C" fn VertexAttrib4dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib4dv was not loaded") }
    pub extern "C" fn VertexAttrib4dvARB(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib4dvARB was not loaded") }
    pub extern "C" fn VertexAttrib4dvNV(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib4dvNV was not loaded") }
    pub extern "C" fn VertexAttrib4f(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib4f was not loaded") }
    pub extern "C" fn VertexAttrib4fARB(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib4fARB was not loaded") }
    pub extern "C" fn VertexAttrib4fNV(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib4fNV was not loaded") }
    pub extern "C" fn VertexAttrib4fv(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib4fv was not loaded") }
    pub extern "C" fn VertexAttrib4fvARB(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib4fvARB was not loaded") }
    pub extern "C" fn VertexAttrib4fvNV(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib4fvNV was not loaded") }
    pub extern "C" fn VertexAttrib4hNV(_: GLuint, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("VertexAttrib4hNV was not loaded") }
    pub extern "C" fn VertexAttrib4hvNV(_: GLuint, _: *GLhalfNV) -> c_void { fail!("VertexAttrib4hvNV was not loaded") }
    pub extern "C" fn VertexAttrib4iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttrib4iv was not loaded") }
    pub extern "C" fn VertexAttrib4ivARB(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttrib4ivARB was not loaded") }
    pub extern "C" fn VertexAttrib4s(_: GLuint, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib4s was not loaded") }
    pub extern "C" fn VertexAttrib4sARB(_: GLuint, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib4sARB was not loaded") }
    pub extern "C" fn VertexAttrib4sNV(_: GLuint, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib4sNV was not loaded") }
    pub extern "C" fn VertexAttrib4sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4sv was not loaded") }
    pub extern "C" fn VertexAttrib4svARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4svARB was not loaded") }
    pub extern "C" fn VertexAttrib4svNV(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4svNV was not loaded") }
    pub extern "C" fn VertexAttrib4ubNV(_: GLuint, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("VertexAttrib4ubNV was not loaded") }
    pub extern "C" fn VertexAttrib4ubv(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4ubv was not loaded") }
    pub extern "C" fn VertexAttrib4ubvARB(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4ubvARB was not loaded") }
    pub extern "C" fn VertexAttrib4ubvNV(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4ubvNV was not loaded") }
    pub extern "C" fn VertexAttrib4uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttrib4uiv was not loaded") }
    pub extern "C" fn VertexAttrib4uivARB(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttrib4uivARB was not loaded") }
    pub extern "C" fn VertexAttrib4usv(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttrib4usv was not loaded") }
    pub extern "C" fn VertexAttrib4usvARB(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttrib4usvARB was not loaded") }
    pub extern "C" fn VertexAttribArrayObjectATI(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribArrayObjectATI was not loaded") }
    pub extern "C" fn VertexAttribBinding(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribBinding was not loaded") }
    pub extern "C" fn VertexAttribDivisor(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribDivisor was not loaded") }
    pub extern "C" fn VertexAttribDivisorANGLE(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribDivisorANGLE was not loaded") }
    pub extern "C" fn VertexAttribDivisorARB(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribDivisorARB was not loaded") }
    pub extern "C" fn VertexAttribDivisorNV(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribDivisorNV was not loaded") }
    pub extern "C" fn VertexAttribFormat(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribFormat was not loaded") }
    pub extern "C" fn VertexAttribFormatNV(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei) -> c_void { fail!("VertexAttribFormatNV was not loaded") }
    pub extern "C" fn VertexAttribI1i(_: GLuint, _: GLint) -> c_void { fail!("VertexAttribI1i was not loaded") }
    pub extern "C" fn VertexAttribI1iEXT(_: GLuint, _: GLint) -> c_void { fail!("VertexAttribI1iEXT was not loaded") }
    pub extern "C" fn VertexAttribI1iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI1iv was not loaded") }
    pub extern "C" fn VertexAttribI1ivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI1ivEXT was not loaded") }
    pub extern "C" fn VertexAttribI1ui(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI1ui was not loaded") }
    pub extern "C" fn VertexAttribI1uiEXT(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI1uiEXT was not loaded") }
    pub extern "C" fn VertexAttribI1uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI1uiv was not loaded") }
    pub extern "C" fn VertexAttribI1uivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI1uivEXT was not loaded") }
    pub extern "C" fn VertexAttribI2i(_: GLuint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI2i was not loaded") }
    pub extern "C" fn VertexAttribI2iEXT(_: GLuint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI2iEXT was not loaded") }
    pub extern "C" fn VertexAttribI2iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI2iv was not loaded") }
    pub extern "C" fn VertexAttribI2ivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI2ivEXT was not loaded") }
    pub extern "C" fn VertexAttribI2ui(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI2ui was not loaded") }
    pub extern "C" fn VertexAttribI2uiEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI2uiEXT was not loaded") }
    pub extern "C" fn VertexAttribI2uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI2uiv was not loaded") }
    pub extern "C" fn VertexAttribI2uivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI2uivEXT was not loaded") }
    pub extern "C" fn VertexAttribI3i(_: GLuint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI3i was not loaded") }
    pub extern "C" fn VertexAttribI3iEXT(_: GLuint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI3iEXT was not loaded") }
    pub extern "C" fn VertexAttribI3iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI3iv was not loaded") }
    pub extern "C" fn VertexAttribI3ivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI3ivEXT was not loaded") }
    pub extern "C" fn VertexAttribI3ui(_: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI3ui was not loaded") }
    pub extern "C" fn VertexAttribI3uiEXT(_: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI3uiEXT was not loaded") }
    pub extern "C" fn VertexAttribI3uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI3uiv was not loaded") }
    pub extern "C" fn VertexAttribI3uivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI3uivEXT was not loaded") }
    pub extern "C" fn VertexAttribI4bv(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttribI4bv was not loaded") }
    pub extern "C" fn VertexAttribI4bvEXT(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttribI4bvEXT was not loaded") }
    pub extern "C" fn VertexAttribI4i(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI4i was not loaded") }
    pub extern "C" fn VertexAttribI4iEXT(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI4iEXT was not loaded") }
    pub extern "C" fn VertexAttribI4iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI4iv was not loaded") }
    pub extern "C" fn VertexAttribI4ivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI4ivEXT was not loaded") }
    pub extern "C" fn VertexAttribI4sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttribI4sv was not loaded") }
    pub extern "C" fn VertexAttribI4svEXT(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttribI4svEXT was not loaded") }
    pub extern "C" fn VertexAttribI4ubv(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttribI4ubv was not loaded") }
    pub extern "C" fn VertexAttribI4ubvEXT(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttribI4ubvEXT was not loaded") }
    pub extern "C" fn VertexAttribI4ui(_: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI4ui was not loaded") }
    pub extern "C" fn VertexAttribI4uiEXT(_: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI4uiEXT was not loaded") }
    pub extern "C" fn VertexAttribI4uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI4uiv was not loaded") }
    pub extern "C" fn VertexAttribI4uivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI4uivEXT was not loaded") }
    pub extern "C" fn VertexAttribI4usv(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttribI4usv was not loaded") }
    pub extern "C" fn VertexAttribI4usvEXT(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttribI4usvEXT was not loaded") }
    pub extern "C" fn VertexAttribIFormat(_: GLuint, _: GLint, _: GLenum, _: GLuint) -> c_void { fail!("VertexAttribIFormat was not loaded") }
    pub extern "C" fn VertexAttribIFormatNV(_: GLuint, _: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("VertexAttribIFormatNV was not loaded") }
    pub extern "C" fn VertexAttribIPointer(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribIPointer was not loaded") }
    pub extern "C" fn VertexAttribIPointerEXT(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribIPointerEXT was not loaded") }
    pub extern "C" fn VertexAttribL1d(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttribL1d was not loaded") }
    pub extern "C" fn VertexAttribL1dEXT(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttribL1dEXT was not loaded") }
    pub extern "C" fn VertexAttribL1dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL1dv was not loaded") }
    pub extern "C" fn VertexAttribL1dvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL1dvEXT was not loaded") }
    pub extern "C" fn VertexAttribL1i64NV(_: GLuint, _: GLint64EXT) -> c_void { fail!("VertexAttribL1i64NV was not loaded") }
    pub extern "C" fn VertexAttribL1i64vNV(_: GLuint, _: *GLint64EXT) -> c_void { fail!("VertexAttribL1i64vNV was not loaded") }
    pub extern "C" fn VertexAttribL1ui64ARB(_: GLuint, _: GLuint64EXT) -> c_void { fail!("VertexAttribL1ui64ARB was not loaded") }
    pub extern "C" fn VertexAttribL1ui64NV(_: GLuint, _: GLuint64EXT) -> c_void { fail!("VertexAttribL1ui64NV was not loaded") }
    pub extern "C" fn VertexAttribL1ui64vARB(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL1ui64vARB was not loaded") }
    pub extern "C" fn VertexAttribL1ui64vNV(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL1ui64vNV was not loaded") }
    pub extern "C" fn VertexAttribL2d(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL2d was not loaded") }
    pub extern "C" fn VertexAttribL2dEXT(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL2dEXT was not loaded") }
    pub extern "C" fn VertexAttribL2dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL2dv was not loaded") }
    pub extern "C" fn VertexAttribL2dvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL2dvEXT was not loaded") }
    pub extern "C" fn VertexAttribL2i64NV(_: GLuint, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("VertexAttribL2i64NV was not loaded") }
    pub extern "C" fn VertexAttribL2i64vNV(_: GLuint, _: *GLint64EXT) -> c_void { fail!("VertexAttribL2i64vNV was not loaded") }
    pub extern "C" fn VertexAttribL2ui64NV(_: GLuint, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("VertexAttribL2ui64NV was not loaded") }
    pub extern "C" fn VertexAttribL2ui64vNV(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL2ui64vNV was not loaded") }
    pub extern "C" fn VertexAttribL3d(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL3d was not loaded") }
    pub extern "C" fn VertexAttribL3dEXT(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL3dEXT was not loaded") }
    pub extern "C" fn VertexAttribL3dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL3dv was not loaded") }
    pub extern "C" fn VertexAttribL3dvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL3dvEXT was not loaded") }
    pub extern "C" fn VertexAttribL3i64NV(_: GLuint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("VertexAttribL3i64NV was not loaded") }
    pub extern "C" fn VertexAttribL3i64vNV(_: GLuint, _: *GLint64EXT) -> c_void { fail!("VertexAttribL3i64vNV was not loaded") }
    pub extern "C" fn VertexAttribL3ui64NV(_: GLuint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("VertexAttribL3ui64NV was not loaded") }
    pub extern "C" fn VertexAttribL3ui64vNV(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL3ui64vNV was not loaded") }
    pub extern "C" fn VertexAttribL4d(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL4d was not loaded") }
    pub extern "C" fn VertexAttribL4dEXT(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL4dEXT was not loaded") }
    pub extern "C" fn VertexAttribL4dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL4dv was not loaded") }
    pub extern "C" fn VertexAttribL4dvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL4dvEXT was not loaded") }
    pub extern "C" fn VertexAttribL4i64NV(_: GLuint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("VertexAttribL4i64NV was not loaded") }
    pub extern "C" fn VertexAttribL4i64vNV(_: GLuint, _: *GLint64EXT) -> c_void { fail!("VertexAttribL4i64vNV was not loaded") }
    pub extern "C" fn VertexAttribL4ui64NV(_: GLuint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("VertexAttribL4ui64NV was not loaded") }
    pub extern "C" fn VertexAttribL4ui64vNV(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL4ui64vNV was not loaded") }
    pub extern "C" fn VertexAttribLFormat(_: GLuint, _: GLint, _: GLenum, _: GLuint) -> c_void { fail!("VertexAttribLFormat was not loaded") }
    pub extern "C" fn VertexAttribLFormatNV(_: GLuint, _: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("VertexAttribLFormatNV was not loaded") }
    pub extern "C" fn VertexAttribLPointer(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribLPointer was not loaded") }
    pub extern "C" fn VertexAttribLPointerEXT(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribLPointerEXT was not loaded") }
    pub extern "C" fn VertexAttribP1ui(_: GLuint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribP1ui was not loaded") }
    pub extern "C" fn VertexAttribP1uiv(_: GLuint, _: GLenum, _: GLboolean, _: *GLuint) -> c_void { fail!("VertexAttribP1uiv was not loaded") }
    pub extern "C" fn VertexAttribP2ui(_: GLuint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribP2ui was not loaded") }
    pub extern "C" fn VertexAttribP2uiv(_: GLuint, _: GLenum, _: GLboolean, _: *GLuint) -> c_void { fail!("VertexAttribP2uiv was not loaded") }
    pub extern "C" fn VertexAttribP3ui(_: GLuint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribP3ui was not loaded") }
    pub extern "C" fn VertexAttribP3uiv(_: GLuint, _: GLenum, _: GLboolean, _: *GLuint) -> c_void { fail!("VertexAttribP3uiv was not loaded") }
    pub extern "C" fn VertexAttribP4ui(_: GLuint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribP4ui was not loaded") }
    pub extern "C" fn VertexAttribP4uiv(_: GLuint, _: GLenum, _: GLboolean, _: *GLuint) -> c_void { fail!("VertexAttribP4uiv was not loaded") }
    pub extern "C" fn VertexAttribParameteriAMD(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("VertexAttribParameteriAMD was not loaded") }
    pub extern "C" fn VertexAttribPointer(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribPointer was not loaded") }
    pub extern "C" fn VertexAttribPointerARB(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribPointerARB was not loaded") }
    pub extern "C" fn VertexAttribPointerNV(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribPointerNV was not loaded") }
    pub extern "C" fn VertexAttribs1dvNV(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("VertexAttribs1dvNV was not loaded") }
    pub extern "C" fn VertexAttribs1fvNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("VertexAttribs1fvNV was not loaded") }
    pub extern "C" fn VertexAttribs1hvNV(_: GLuint, _: GLsizei, _: *GLhalfNV) -> c_void { fail!("VertexAttribs1hvNV was not loaded") }
    pub extern "C" fn VertexAttribs1svNV(_: GLuint, _: GLsizei, _: *GLshort) -> c_void { fail!("VertexAttribs1svNV was not loaded") }
    pub extern "C" fn VertexAttribs2dvNV(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("VertexAttribs2dvNV was not loaded") }
    pub extern "C" fn VertexAttribs2fvNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("VertexAttribs2fvNV was not loaded") }
    pub extern "C" fn VertexAttribs2hvNV(_: GLuint, _: GLsizei, _: *GLhalfNV) -> c_void { fail!("VertexAttribs2hvNV was not loaded") }
    pub extern "C" fn VertexAttribs2svNV(_: GLuint, _: GLsizei, _: *GLshort) -> c_void { fail!("VertexAttribs2svNV was not loaded") }
    pub extern "C" fn VertexAttribs3dvNV(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("VertexAttribs3dvNV was not loaded") }
    pub extern "C" fn VertexAttribs3fvNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("VertexAttribs3fvNV was not loaded") }
    pub extern "C" fn VertexAttribs3hvNV(_: GLuint, _: GLsizei, _: *GLhalfNV) -> c_void { fail!("VertexAttribs3hvNV was not loaded") }
    pub extern "C" fn VertexAttribs3svNV(_: GLuint, _: GLsizei, _: *GLshort) -> c_void { fail!("VertexAttribs3svNV was not loaded") }
    pub extern "C" fn VertexAttribs4dvNV(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("VertexAttribs4dvNV was not loaded") }
    pub extern "C" fn VertexAttribs4fvNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("VertexAttribs4fvNV was not loaded") }
    pub extern "C" fn VertexAttribs4hvNV(_: GLuint, _: GLsizei, _: *GLhalfNV) -> c_void { fail!("VertexAttribs4hvNV was not loaded") }
    pub extern "C" fn VertexAttribs4svNV(_: GLuint, _: GLsizei, _: *GLshort) -> c_void { fail!("VertexAttribs4svNV was not loaded") }
    pub extern "C" fn VertexAttribs4ubvNV(_: GLuint, _: GLsizei, _: *GLubyte) -> c_void { fail!("VertexAttribs4ubvNV was not loaded") }
    pub extern "C" fn VertexBindingDivisor(_: GLuint, _: GLuint) -> c_void { fail!("VertexBindingDivisor was not loaded") }
    pub extern "C" fn VertexBlendARB(_: GLint) -> c_void { fail!("VertexBlendARB was not loaded") }
    pub extern "C" fn VertexBlendEnvfATI(_: GLenum, _: GLfloat) -> c_void { fail!("VertexBlendEnvfATI was not loaded") }
    pub extern "C" fn VertexBlendEnviATI(_: GLenum, _: GLint) -> c_void { fail!("VertexBlendEnviATI was not loaded") }
    pub extern "C" fn VertexFormatNV(_: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("VertexFormatNV was not loaded") }
    pub extern "C" fn VertexP2ui(_: GLenum, _: GLuint) -> c_void { fail!("VertexP2ui was not loaded") }
    pub extern "C" fn VertexP2uiv(_: GLenum, _: *GLuint) -> c_void { fail!("VertexP2uiv was not loaded") }
    pub extern "C" fn VertexP3ui(_: GLenum, _: GLuint) -> c_void { fail!("VertexP3ui was not loaded") }
    pub extern "C" fn VertexP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("VertexP3uiv was not loaded") }
    pub extern "C" fn VertexP4ui(_: GLenum, _: GLuint) -> c_void { fail!("VertexP4ui was not loaded") }
    pub extern "C" fn VertexP4uiv(_: GLenum, _: *GLuint) -> c_void { fail!("VertexP4uiv was not loaded") }
    pub extern "C" fn VertexPointer(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexPointer was not loaded") }
    pub extern "C" fn VertexPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexPointerEXT was not loaded") }
    pub extern "C" fn VertexPointerListIBM(_: GLint, _: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("VertexPointerListIBM was not loaded") }
    pub extern "C" fn VertexPointervINTEL(_: GLint, _: GLenum, _: **GLvoid) -> c_void { fail!("VertexPointervINTEL was not loaded") }
    pub extern "C" fn VertexStream1dATI(_: GLenum, _: GLdouble) -> c_void { fail!("VertexStream1dATI was not loaded") }
    pub extern "C" fn VertexStream1dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("VertexStream1dvATI was not loaded") }
    pub extern "C" fn VertexStream1fATI(_: GLenum, _: GLfloat) -> c_void { fail!("VertexStream1fATI was not loaded") }
    pub extern "C" fn VertexStream1fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("VertexStream1fvATI was not loaded") }
    pub extern "C" fn VertexStream1iATI(_: GLenum, _: GLint) -> c_void { fail!("VertexStream1iATI was not loaded") }
    pub extern "C" fn VertexStream1ivATI(_: GLenum, _: *GLint) -> c_void { fail!("VertexStream1ivATI was not loaded") }
    pub extern "C" fn VertexStream1sATI(_: GLenum, _: GLshort) -> c_void { fail!("VertexStream1sATI was not loaded") }
    pub extern "C" fn VertexStream1svATI(_: GLenum, _: *GLshort) -> c_void { fail!("VertexStream1svATI was not loaded") }
    pub extern "C" fn VertexStream2dATI(_: GLenum, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexStream2dATI was not loaded") }
    pub extern "C" fn VertexStream2dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("VertexStream2dvATI was not loaded") }
    pub extern "C" fn VertexStream2fATI(_: GLenum, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexStream2fATI was not loaded") }
    pub extern "C" fn VertexStream2fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("VertexStream2fvATI was not loaded") }
    pub extern "C" fn VertexStream2iATI(_: GLenum, _: GLint, _: GLint) -> c_void { fail!("VertexStream2iATI was not loaded") }
    pub extern "C" fn VertexStream2ivATI(_: GLenum, _: *GLint) -> c_void { fail!("VertexStream2ivATI was not loaded") }
    pub extern "C" fn VertexStream2sATI(_: GLenum, _: GLshort, _: GLshort) -> c_void { fail!("VertexStream2sATI was not loaded") }
    pub extern "C" fn VertexStream2svATI(_: GLenum, _: *GLshort) -> c_void { fail!("VertexStream2svATI was not loaded") }
    pub extern "C" fn VertexStream3dATI(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexStream3dATI was not loaded") }
    pub extern "C" fn VertexStream3dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("VertexStream3dvATI was not loaded") }
    pub extern "C" fn VertexStream3fATI(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexStream3fATI was not loaded") }
    pub extern "C" fn VertexStream3fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("VertexStream3fvATI was not loaded") }
    pub extern "C" fn VertexStream3iATI(_: GLenum, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexStream3iATI was not loaded") }
    pub extern "C" fn VertexStream3ivATI(_: GLenum, _: *GLint) -> c_void { fail!("VertexStream3ivATI was not loaded") }
    pub extern "C" fn VertexStream3sATI(_: GLenum, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexStream3sATI was not loaded") }
    pub extern "C" fn VertexStream3svATI(_: GLenum, _: *GLshort) -> c_void { fail!("VertexStream3svATI was not loaded") }
    pub extern "C" fn VertexStream4dATI(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexStream4dATI was not loaded") }
    pub extern "C" fn VertexStream4dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("VertexStream4dvATI was not loaded") }
    pub extern "C" fn VertexStream4fATI(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexStream4fATI was not loaded") }
    pub extern "C" fn VertexStream4fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("VertexStream4fvATI was not loaded") }
    pub extern "C" fn VertexStream4iATI(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexStream4iATI was not loaded") }
    pub extern "C" fn VertexStream4ivATI(_: GLenum, _: *GLint) -> c_void { fail!("VertexStream4ivATI was not loaded") }
    pub extern "C" fn VertexStream4sATI(_: GLenum, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexStream4sATI was not loaded") }
    pub extern "C" fn VertexStream4svATI(_: GLenum, _: *GLshort) -> c_void { fail!("VertexStream4svATI was not loaded") }
    pub extern "C" fn VertexWeightPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexWeightPointerEXT was not loaded") }
    pub extern "C" fn VertexWeightfEXT(_: GLfloat) -> c_void { fail!("VertexWeightfEXT was not loaded") }
    pub extern "C" fn VertexWeightfvEXT(_: *GLfloat) -> c_void { fail!("VertexWeightfvEXT was not loaded") }
    pub extern "C" fn VertexWeighthNV(_: GLhalfNV) -> c_void { fail!("VertexWeighthNV was not loaded") }
    pub extern "C" fn VertexWeighthvNV(_: *GLhalfNV) -> c_void { fail!("VertexWeighthvNV was not loaded") }
    pub extern "C" fn VideoCaptureNV(_: GLuint, _: *GLuint, _: *GLuint64EXT) -> GLenum { fail!("VideoCaptureNV was not loaded") }
    pub extern "C" fn VideoCaptureStreamParameterdvNV(_: GLuint, _: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("VideoCaptureStreamParameterdvNV was not loaded") }
    pub extern "C" fn VideoCaptureStreamParameterfvNV(_: GLuint, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("VideoCaptureStreamParameterfvNV was not loaded") }
    pub extern "C" fn VideoCaptureStreamParameterivNV(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("VideoCaptureStreamParameterivNV was not loaded") }
    pub extern "C" fn Viewport(_: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("Viewport was not loaded") }
    pub extern "C" fn ViewportArrayv(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ViewportArrayv was not loaded") }
    pub extern "C" fn ViewportIndexedf(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ViewportIndexedf was not loaded") }
    pub extern "C" fn ViewportIndexedfv(_: GLuint, _: *GLfloat) -> c_void { fail!("ViewportIndexedfv was not loaded") }
    pub extern "C" fn WaitSync(_: GLsync, _: GLbitfield, _: GLuint64) -> c_void { fail!("WaitSync was not loaded") }
    pub extern "C" fn WaitSyncAPPLE(_: GLsync, _: GLbitfield, _: GLuint64) -> c_void { fail!("WaitSyncAPPLE was not loaded") }
    pub extern "C" fn WeightPathsNV(_: GLuint, _: GLsizei, _: *GLuint, _: *GLfloat) -> c_void { fail!("WeightPathsNV was not loaded") }
    pub extern "C" fn WeightPointerARB(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("WeightPointerARB was not loaded") }
    pub extern "C" fn WeightPointerOES(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("WeightPointerOES was not loaded") }
    pub extern "C" fn WeightbvARB(_: GLint, _: *GLbyte) -> c_void { fail!("WeightbvARB was not loaded") }
    pub extern "C" fn WeightdvARB(_: GLint, _: *GLdouble) -> c_void { fail!("WeightdvARB was not loaded") }
    pub extern "C" fn WeightfvARB(_: GLint, _: *GLfloat) -> c_void { fail!("WeightfvARB was not loaded") }
    pub extern "C" fn WeightivARB(_: GLint, _: *GLint) -> c_void { fail!("WeightivARB was not loaded") }
    pub extern "C" fn WeightsvARB(_: GLint, _: *GLshort) -> c_void { fail!("WeightsvARB was not loaded") }
    pub extern "C" fn WeightubvARB(_: GLint, _: *GLubyte) -> c_void { fail!("WeightubvARB was not loaded") }
    pub extern "C" fn WeightuivARB(_: GLint, _: *GLuint) -> c_void { fail!("WeightuivARB was not loaded") }
    pub extern "C" fn WeightusvARB(_: GLint, _: *GLushort) -> c_void { fail!("WeightusvARB was not loaded") }
    pub extern "C" fn WindowPos2d(_: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos2d was not loaded") }
    pub extern "C" fn WindowPos2dARB(_: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos2dARB was not loaded") }
    pub extern "C" fn WindowPos2dMESA(_: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos2dMESA was not loaded") }
    pub extern "C" fn WindowPos2dv(_: *GLdouble) -> c_void { fail!("WindowPos2dv was not loaded") }
    pub extern "C" fn WindowPos2dvARB(_: *GLdouble) -> c_void { fail!("WindowPos2dvARB was not loaded") }
    pub extern "C" fn WindowPos2dvMESA(_: *GLdouble) -> c_void { fail!("WindowPos2dvMESA was not loaded") }
    pub extern "C" fn WindowPos2f(_: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos2f was not loaded") }
    pub extern "C" fn WindowPos2fARB(_: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos2fARB was not loaded") }
    pub extern "C" fn WindowPos2fMESA(_: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos2fMESA was not loaded") }
    pub extern "C" fn WindowPos2fv(_: *GLfloat) -> c_void { fail!("WindowPos2fv was not loaded") }
    pub extern "C" fn WindowPos2fvARB(_: *GLfloat) -> c_void { fail!("WindowPos2fvARB was not loaded") }
    pub extern "C" fn WindowPos2fvMESA(_: *GLfloat) -> c_void { fail!("WindowPos2fvMESA was not loaded") }
    pub extern "C" fn WindowPos2i(_: GLint, _: GLint) -> c_void { fail!("WindowPos2i was not loaded") }
    pub extern "C" fn WindowPos2iARB(_: GLint, _: GLint) -> c_void { fail!("WindowPos2iARB was not loaded") }
    pub extern "C" fn WindowPos2iMESA(_: GLint, _: GLint) -> c_void { fail!("WindowPos2iMESA was not loaded") }
    pub extern "C" fn WindowPos2iv(_: *GLint) -> c_void { fail!("WindowPos2iv was not loaded") }
    pub extern "C" fn WindowPos2ivARB(_: *GLint) -> c_void { fail!("WindowPos2ivARB was not loaded") }
    pub extern "C" fn WindowPos2ivMESA(_: *GLint) -> c_void { fail!("WindowPos2ivMESA was not loaded") }
    pub extern "C" fn WindowPos2s(_: GLshort, _: GLshort) -> c_void { fail!("WindowPos2s was not loaded") }
    pub extern "C" fn WindowPos2sARB(_: GLshort, _: GLshort) -> c_void { fail!("WindowPos2sARB was not loaded") }
    pub extern "C" fn WindowPos2sMESA(_: GLshort, _: GLshort) -> c_void { fail!("WindowPos2sMESA was not loaded") }
    pub extern "C" fn WindowPos2sv(_: *GLshort) -> c_void { fail!("WindowPos2sv was not loaded") }
    pub extern "C" fn WindowPos2svARB(_: *GLshort) -> c_void { fail!("WindowPos2svARB was not loaded") }
    pub extern "C" fn WindowPos2svMESA(_: *GLshort) -> c_void { fail!("WindowPos2svMESA was not loaded") }
    pub extern "C" fn WindowPos3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos3d was not loaded") }
    pub extern "C" fn WindowPos3dARB(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos3dARB was not loaded") }
    pub extern "C" fn WindowPos3dMESA(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos3dMESA was not loaded") }
    pub extern "C" fn WindowPos3dv(_: *GLdouble) -> c_void { fail!("WindowPos3dv was not loaded") }
    pub extern "C" fn WindowPos3dvARB(_: *GLdouble) -> c_void { fail!("WindowPos3dvARB was not loaded") }
    pub extern "C" fn WindowPos3dvMESA(_: *GLdouble) -> c_void { fail!("WindowPos3dvMESA was not loaded") }
    pub extern "C" fn WindowPos3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos3f was not loaded") }
    pub extern "C" fn WindowPos3fARB(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos3fARB was not loaded") }
    pub extern "C" fn WindowPos3fMESA(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos3fMESA was not loaded") }
    pub extern "C" fn WindowPos3fv(_: *GLfloat) -> c_void { fail!("WindowPos3fv was not loaded") }
    pub extern "C" fn WindowPos3fvARB(_: *GLfloat) -> c_void { fail!("WindowPos3fvARB was not loaded") }
    pub extern "C" fn WindowPos3fvMESA(_: *GLfloat) -> c_void { fail!("WindowPos3fvMESA was not loaded") }
    pub extern "C" fn WindowPos3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("WindowPos3i was not loaded") }
    pub extern "C" fn WindowPos3iARB(_: GLint, _: GLint, _: GLint) -> c_void { fail!("WindowPos3iARB was not loaded") }
    pub extern "C" fn WindowPos3iMESA(_: GLint, _: GLint, _: GLint) -> c_void { fail!("WindowPos3iMESA was not loaded") }
    pub extern "C" fn WindowPos3iv(_: *GLint) -> c_void { fail!("WindowPos3iv was not loaded") }
    pub extern "C" fn WindowPos3ivARB(_: *GLint) -> c_void { fail!("WindowPos3ivARB was not loaded") }
    pub extern "C" fn WindowPos3ivMESA(_: *GLint) -> c_void { fail!("WindowPos3ivMESA was not loaded") }
    pub extern "C" fn WindowPos3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("WindowPos3s was not loaded") }
    pub extern "C" fn WindowPos3sARB(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("WindowPos3sARB was not loaded") }
    pub extern "C" fn WindowPos3sMESA(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("WindowPos3sMESA was not loaded") }
    pub extern "C" fn WindowPos3sv(_: *GLshort) -> c_void { fail!("WindowPos3sv was not loaded") }
    pub extern "C" fn WindowPos3svARB(_: *GLshort) -> c_void { fail!("WindowPos3svARB was not loaded") }
    pub extern "C" fn WindowPos3svMESA(_: *GLshort) -> c_void { fail!("WindowPos3svMESA was not loaded") }
    pub extern "C" fn WindowPos4dMESA(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos4dMESA was not loaded") }
    pub extern "C" fn WindowPos4dvMESA(_: *GLdouble) -> c_void { fail!("WindowPos4dvMESA was not loaded") }
    pub extern "C" fn WindowPos4fMESA(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos4fMESA was not loaded") }
    pub extern "C" fn WindowPos4fvMESA(_: *GLfloat) -> c_void { fail!("WindowPos4fvMESA was not loaded") }
    pub extern "C" fn WindowPos4iMESA(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("WindowPos4iMESA was not loaded") }
    pub extern "C" fn WindowPos4ivMESA(_: *GLint) -> c_void { fail!("WindowPos4ivMESA was not loaded") }
    pub extern "C" fn WindowPos4sMESA(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("WindowPos4sMESA was not loaded") }
    pub extern "C" fn WindowPos4svMESA(_: *GLshort) -> c_void { fail!("WindowPos4svMESA was not loaded") }
    pub extern "C" fn WriteMaskEXT(_: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("WriteMaskEXT was not loaded") }
}

/// Load each OpenGL symbol using a custom load function. This allows for the
/// use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.
///
/// ~~~
/// let gl = gl::load_with(glfw::get_proc_address);
/// ~~~
pub fn load_with(loadfn: &fn(symbol: &str) -> *c_void) {
    use std::cast::transmute;
    
    match loadfn("Accum") { ptr if !ptr.is_null() => unsafe { storage::Accum.f = transmute(ptr); storage::Accum.is_loaded = true; }, _ => unsafe { storage::Accum.f = transmute(failing::Accum); storage::Accum.is_loaded = false; } }
    match loadfn("AccumxOES") { ptr if !ptr.is_null() => unsafe { storage::AccumxOES.f = transmute(ptr); storage::AccumxOES.is_loaded = true; }, _ => unsafe { storage::AccumxOES.f = transmute(failing::AccumxOES); storage::AccumxOES.is_loaded = false; } }
    match loadfn("ActiveProgramEXT") { ptr if !ptr.is_null() => unsafe { storage::ActiveProgramEXT.f = transmute(ptr); storage::ActiveProgramEXT.is_loaded = true; }, _ => unsafe { storage::ActiveProgramEXT.f = transmute(failing::ActiveProgramEXT); storage::ActiveProgramEXT.is_loaded = false; } }
    match loadfn("ActiveShaderProgram") { ptr if !ptr.is_null() => unsafe { storage::ActiveShaderProgram.f = transmute(ptr); storage::ActiveShaderProgram.is_loaded = true; }, _ => unsafe { storage::ActiveShaderProgram.f = transmute(failing::ActiveShaderProgram); storage::ActiveShaderProgram.is_loaded = false; } }
    match loadfn("ActiveShaderProgramEXT") { ptr if !ptr.is_null() => unsafe { storage::ActiveShaderProgramEXT.f = transmute(ptr); storage::ActiveShaderProgramEXT.is_loaded = true; }, _ => unsafe { storage::ActiveShaderProgramEXT.f = transmute(failing::ActiveShaderProgramEXT); storage::ActiveShaderProgramEXT.is_loaded = false; } }
    match loadfn("ActiveStencilFaceEXT") { ptr if !ptr.is_null() => unsafe { storage::ActiveStencilFaceEXT.f = transmute(ptr); storage::ActiveStencilFaceEXT.is_loaded = true; }, _ => unsafe { storage::ActiveStencilFaceEXT.f = transmute(failing::ActiveStencilFaceEXT); storage::ActiveStencilFaceEXT.is_loaded = false; } }
    match loadfn("ActiveTexture") { ptr if !ptr.is_null() => unsafe { storage::ActiveTexture.f = transmute(ptr); storage::ActiveTexture.is_loaded = true; }, _ => unsafe { storage::ActiveTexture.f = transmute(failing::ActiveTexture); storage::ActiveTexture.is_loaded = false; } }
    match loadfn("ActiveTextureARB") { ptr if !ptr.is_null() => unsafe { storage::ActiveTextureARB.f = transmute(ptr); storage::ActiveTextureARB.is_loaded = true; }, _ => unsafe { storage::ActiveTextureARB.f = transmute(failing::ActiveTextureARB); storage::ActiveTextureARB.is_loaded = false; } }
    match loadfn("ActiveVaryingNV") { ptr if !ptr.is_null() => unsafe { storage::ActiveVaryingNV.f = transmute(ptr); storage::ActiveVaryingNV.is_loaded = true; }, _ => unsafe { storage::ActiveVaryingNV.f = transmute(failing::ActiveVaryingNV); storage::ActiveVaryingNV.is_loaded = false; } }
    match loadfn("AlphaFragmentOp1ATI") { ptr if !ptr.is_null() => unsafe { storage::AlphaFragmentOp1ATI.f = transmute(ptr); storage::AlphaFragmentOp1ATI.is_loaded = true; }, _ => unsafe { storage::AlphaFragmentOp1ATI.f = transmute(failing::AlphaFragmentOp1ATI); storage::AlphaFragmentOp1ATI.is_loaded = false; } }
    match loadfn("AlphaFragmentOp2ATI") { ptr if !ptr.is_null() => unsafe { storage::AlphaFragmentOp2ATI.f = transmute(ptr); storage::AlphaFragmentOp2ATI.is_loaded = true; }, _ => unsafe { storage::AlphaFragmentOp2ATI.f = transmute(failing::AlphaFragmentOp2ATI); storage::AlphaFragmentOp2ATI.is_loaded = false; } }
    match loadfn("AlphaFragmentOp3ATI") { ptr if !ptr.is_null() => unsafe { storage::AlphaFragmentOp3ATI.f = transmute(ptr); storage::AlphaFragmentOp3ATI.is_loaded = true; }, _ => unsafe { storage::AlphaFragmentOp3ATI.f = transmute(failing::AlphaFragmentOp3ATI); storage::AlphaFragmentOp3ATI.is_loaded = false; } }
    match loadfn("AlphaFunc") { ptr if !ptr.is_null() => unsafe { storage::AlphaFunc.f = transmute(ptr); storage::AlphaFunc.is_loaded = true; }, _ => unsafe { storage::AlphaFunc.f = transmute(failing::AlphaFunc); storage::AlphaFunc.is_loaded = false; } }
    match loadfn("AlphaFuncQCOM") { ptr if !ptr.is_null() => unsafe { storage::AlphaFuncQCOM.f = transmute(ptr); storage::AlphaFuncQCOM.is_loaded = true; }, _ => unsafe { storage::AlphaFuncQCOM.f = transmute(failing::AlphaFuncQCOM); storage::AlphaFuncQCOM.is_loaded = false; } }
    match loadfn("AlphaFuncx") { ptr if !ptr.is_null() => unsafe { storage::AlphaFuncx.f = transmute(ptr); storage::AlphaFuncx.is_loaded = true; }, _ => unsafe { storage::AlphaFuncx.f = transmute(failing::AlphaFuncx); storage::AlphaFuncx.is_loaded = false; } }
    match loadfn("AlphaFuncxOES") { ptr if !ptr.is_null() => unsafe { storage::AlphaFuncxOES.f = transmute(ptr); storage::AlphaFuncxOES.is_loaded = true; }, _ => unsafe { storage::AlphaFuncxOES.f = transmute(failing::AlphaFuncxOES); storage::AlphaFuncxOES.is_loaded = false; } }
    match loadfn("ApplyTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::ApplyTextureEXT.f = transmute(ptr); storage::ApplyTextureEXT.is_loaded = true; }, _ => unsafe { storage::ApplyTextureEXT.f = transmute(failing::ApplyTextureEXT); storage::ApplyTextureEXT.is_loaded = false; } }
    match loadfn("AreProgramsResidentNV") { ptr if !ptr.is_null() => unsafe { storage::AreProgramsResidentNV.f = transmute(ptr); storage::AreProgramsResidentNV.is_loaded = true; }, _ => unsafe { storage::AreProgramsResidentNV.f = transmute(failing::AreProgramsResidentNV); storage::AreProgramsResidentNV.is_loaded = false; } }
    match loadfn("AreTexturesResident") { ptr if !ptr.is_null() => unsafe { storage::AreTexturesResident.f = transmute(ptr); storage::AreTexturesResident.is_loaded = true; }, _ => unsafe { storage::AreTexturesResident.f = transmute(failing::AreTexturesResident); storage::AreTexturesResident.is_loaded = false; } }
    match loadfn("AreTexturesResidentEXT") { ptr if !ptr.is_null() => unsafe { storage::AreTexturesResidentEXT.f = transmute(ptr); storage::AreTexturesResidentEXT.is_loaded = true; }, _ => unsafe { storage::AreTexturesResidentEXT.f = transmute(failing::AreTexturesResidentEXT); storage::AreTexturesResidentEXT.is_loaded = false; } }
    match loadfn("ArrayElement") { ptr if !ptr.is_null() => unsafe { storage::ArrayElement.f = transmute(ptr); storage::ArrayElement.is_loaded = true; }, _ => unsafe { storage::ArrayElement.f = transmute(failing::ArrayElement); storage::ArrayElement.is_loaded = false; } }
    match loadfn("ArrayElementEXT") { ptr if !ptr.is_null() => unsafe { storage::ArrayElementEXT.f = transmute(ptr); storage::ArrayElementEXT.is_loaded = true; }, _ => unsafe { storage::ArrayElementEXT.f = transmute(failing::ArrayElementEXT); storage::ArrayElementEXT.is_loaded = false; } }
    match loadfn("ArrayObjectATI") { ptr if !ptr.is_null() => unsafe { storage::ArrayObjectATI.f = transmute(ptr); storage::ArrayObjectATI.is_loaded = true; }, _ => unsafe { storage::ArrayObjectATI.f = transmute(failing::ArrayObjectATI); storage::ArrayObjectATI.is_loaded = false; } }
    match loadfn("AsyncMarkerSGIX") { ptr if !ptr.is_null() => unsafe { storage::AsyncMarkerSGIX.f = transmute(ptr); storage::AsyncMarkerSGIX.is_loaded = true; }, _ => unsafe { storage::AsyncMarkerSGIX.f = transmute(failing::AsyncMarkerSGIX); storage::AsyncMarkerSGIX.is_loaded = false; } }
    match loadfn("AttachObjectARB") { ptr if !ptr.is_null() => unsafe { storage::AttachObjectARB.f = transmute(ptr); storage::AttachObjectARB.is_loaded = true; }, _ => unsafe { storage::AttachObjectARB.f = transmute(failing::AttachObjectARB); storage::AttachObjectARB.is_loaded = false; } }
    match loadfn("AttachShader") { ptr if !ptr.is_null() => unsafe { storage::AttachShader.f = transmute(ptr); storage::AttachShader.is_loaded = true; }, _ => unsafe { storage::AttachShader.f = transmute(failing::AttachShader); storage::AttachShader.is_loaded = false; } }
    match loadfn("Begin") { ptr if !ptr.is_null() => unsafe { storage::Begin.f = transmute(ptr); storage::Begin.is_loaded = true; }, _ => unsafe { storage::Begin.f = transmute(failing::Begin); storage::Begin.is_loaded = false; } }
    match loadfn("BeginConditionalRender") { ptr if !ptr.is_null() => unsafe { storage::BeginConditionalRender.f = transmute(ptr); storage::BeginConditionalRender.is_loaded = true; }, _ => unsafe { storage::BeginConditionalRender.f = transmute(failing::BeginConditionalRender); storage::BeginConditionalRender.is_loaded = false; } }
    match loadfn("BeginConditionalRenderNV") { ptr if !ptr.is_null() => unsafe { storage::BeginConditionalRenderNV.f = transmute(ptr); storage::BeginConditionalRenderNV.is_loaded = true; }, _ => unsafe { storage::BeginConditionalRenderNV.f = transmute(failing::BeginConditionalRenderNV); storage::BeginConditionalRenderNV.is_loaded = false; } }
    match loadfn("BeginConditionalRenderNVX") { ptr if !ptr.is_null() => unsafe { storage::BeginConditionalRenderNVX.f = transmute(ptr); storage::BeginConditionalRenderNVX.is_loaded = true; }, _ => unsafe { storage::BeginConditionalRenderNVX.f = transmute(failing::BeginConditionalRenderNVX); storage::BeginConditionalRenderNVX.is_loaded = false; } }
    match loadfn("BeginFragmentShaderATI") { ptr if !ptr.is_null() => unsafe { storage::BeginFragmentShaderATI.f = transmute(ptr); storage::BeginFragmentShaderATI.is_loaded = true; }, _ => unsafe { storage::BeginFragmentShaderATI.f = transmute(failing::BeginFragmentShaderATI); storage::BeginFragmentShaderATI.is_loaded = false; } }
    match loadfn("BeginOcclusionQueryNV") { ptr if !ptr.is_null() => unsafe { storage::BeginOcclusionQueryNV.f = transmute(ptr); storage::BeginOcclusionQueryNV.is_loaded = true; }, _ => unsafe { storage::BeginOcclusionQueryNV.f = transmute(failing::BeginOcclusionQueryNV); storage::BeginOcclusionQueryNV.is_loaded = false; } }
    match loadfn("BeginPerfMonitorAMD") { ptr if !ptr.is_null() => unsafe { storage::BeginPerfMonitorAMD.f = transmute(ptr); storage::BeginPerfMonitorAMD.is_loaded = true; }, _ => unsafe { storage::BeginPerfMonitorAMD.f = transmute(failing::BeginPerfMonitorAMD); storage::BeginPerfMonitorAMD.is_loaded = false; } }
    match loadfn("BeginQuery") { ptr if !ptr.is_null() => unsafe { storage::BeginQuery.f = transmute(ptr); storage::BeginQuery.is_loaded = true; }, _ => unsafe { storage::BeginQuery.f = transmute(failing::BeginQuery); storage::BeginQuery.is_loaded = false; } }
    match loadfn("BeginQueryARB") { ptr if !ptr.is_null() => unsafe { storage::BeginQueryARB.f = transmute(ptr); storage::BeginQueryARB.is_loaded = true; }, _ => unsafe { storage::BeginQueryARB.f = transmute(failing::BeginQueryARB); storage::BeginQueryARB.is_loaded = false; } }
    match loadfn("BeginQueryEXT") { ptr if !ptr.is_null() => unsafe { storage::BeginQueryEXT.f = transmute(ptr); storage::BeginQueryEXT.is_loaded = true; }, _ => unsafe { storage::BeginQueryEXT.f = transmute(failing::BeginQueryEXT); storage::BeginQueryEXT.is_loaded = false; } }
    match loadfn("BeginQueryIndexed") { ptr if !ptr.is_null() => unsafe { storage::BeginQueryIndexed.f = transmute(ptr); storage::BeginQueryIndexed.is_loaded = true; }, _ => unsafe { storage::BeginQueryIndexed.f = transmute(failing::BeginQueryIndexed); storage::BeginQueryIndexed.is_loaded = false; } }
    match loadfn("BeginTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::BeginTransformFeedback.f = transmute(ptr); storage::BeginTransformFeedback.is_loaded = true; }, _ => unsafe { storage::BeginTransformFeedback.f = transmute(failing::BeginTransformFeedback); storage::BeginTransformFeedback.is_loaded = false; } }
    match loadfn("BeginTransformFeedbackEXT") { ptr if !ptr.is_null() => unsafe { storage::BeginTransformFeedbackEXT.f = transmute(ptr); storage::BeginTransformFeedbackEXT.is_loaded = true; }, _ => unsafe { storage::BeginTransformFeedbackEXT.f = transmute(failing::BeginTransformFeedbackEXT); storage::BeginTransformFeedbackEXT.is_loaded = false; } }
    match loadfn("BeginTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::BeginTransformFeedbackNV.f = transmute(ptr); storage::BeginTransformFeedbackNV.is_loaded = true; }, _ => unsafe { storage::BeginTransformFeedbackNV.f = transmute(failing::BeginTransformFeedbackNV); storage::BeginTransformFeedbackNV.is_loaded = false; } }
    match loadfn("BeginVertexShaderEXT") { ptr if !ptr.is_null() => unsafe { storage::BeginVertexShaderEXT.f = transmute(ptr); storage::BeginVertexShaderEXT.is_loaded = true; }, _ => unsafe { storage::BeginVertexShaderEXT.f = transmute(failing::BeginVertexShaderEXT); storage::BeginVertexShaderEXT.is_loaded = false; } }
    match loadfn("BeginVideoCaptureNV") { ptr if !ptr.is_null() => unsafe { storage::BeginVideoCaptureNV.f = transmute(ptr); storage::BeginVideoCaptureNV.is_loaded = true; }, _ => unsafe { storage::BeginVideoCaptureNV.f = transmute(failing::BeginVideoCaptureNV); storage::BeginVideoCaptureNV.is_loaded = false; } }
    match loadfn("BindAttribLocation") { ptr if !ptr.is_null() => unsafe { storage::BindAttribLocation.f = transmute(ptr); storage::BindAttribLocation.is_loaded = true; }, _ => unsafe { storage::BindAttribLocation.f = transmute(failing::BindAttribLocation); storage::BindAttribLocation.is_loaded = false; } }
    match loadfn("BindAttribLocationARB") { ptr if !ptr.is_null() => unsafe { storage::BindAttribLocationARB.f = transmute(ptr); storage::BindAttribLocationARB.is_loaded = true; }, _ => unsafe { storage::BindAttribLocationARB.f = transmute(failing::BindAttribLocationARB); storage::BindAttribLocationARB.is_loaded = false; } }
    match loadfn("BindBuffer") { ptr if !ptr.is_null() => unsafe { storage::BindBuffer.f = transmute(ptr); storage::BindBuffer.is_loaded = true; }, _ => unsafe { storage::BindBuffer.f = transmute(failing::BindBuffer); storage::BindBuffer.is_loaded = false; } }
    match loadfn("BindBufferARB") { ptr if !ptr.is_null() => unsafe { storage::BindBufferARB.f = transmute(ptr); storage::BindBufferARB.is_loaded = true; }, _ => unsafe { storage::BindBufferARB.f = transmute(failing::BindBufferARB); storage::BindBufferARB.is_loaded = false; } }
    match loadfn("BindBufferBase") { ptr if !ptr.is_null() => unsafe { storage::BindBufferBase.f = transmute(ptr); storage::BindBufferBase.is_loaded = true; }, _ => unsafe { storage::BindBufferBase.f = transmute(failing::BindBufferBase); storage::BindBufferBase.is_loaded = false; } }
    match loadfn("BindBufferBaseEXT") { ptr if !ptr.is_null() => unsafe { storage::BindBufferBaseEXT.f = transmute(ptr); storage::BindBufferBaseEXT.is_loaded = true; }, _ => unsafe { storage::BindBufferBaseEXT.f = transmute(failing::BindBufferBaseEXT); storage::BindBufferBaseEXT.is_loaded = false; } }
    match loadfn("BindBufferBaseNV") { ptr if !ptr.is_null() => unsafe { storage::BindBufferBaseNV.f = transmute(ptr); storage::BindBufferBaseNV.is_loaded = true; }, _ => unsafe { storage::BindBufferBaseNV.f = transmute(failing::BindBufferBaseNV); storage::BindBufferBaseNV.is_loaded = false; } }
    match loadfn("BindBufferOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::BindBufferOffsetEXT.f = transmute(ptr); storage::BindBufferOffsetEXT.is_loaded = true; }, _ => unsafe { storage::BindBufferOffsetEXT.f = transmute(failing::BindBufferOffsetEXT); storage::BindBufferOffsetEXT.is_loaded = false; } }
    match loadfn("BindBufferOffsetNV") { ptr if !ptr.is_null() => unsafe { storage::BindBufferOffsetNV.f = transmute(ptr); storage::BindBufferOffsetNV.is_loaded = true; }, _ => unsafe { storage::BindBufferOffsetNV.f = transmute(failing::BindBufferOffsetNV); storage::BindBufferOffsetNV.is_loaded = false; } }
    match loadfn("BindBufferRange") { ptr if !ptr.is_null() => unsafe { storage::BindBufferRange.f = transmute(ptr); storage::BindBufferRange.is_loaded = true; }, _ => unsafe { storage::BindBufferRange.f = transmute(failing::BindBufferRange); storage::BindBufferRange.is_loaded = false; } }
    match loadfn("BindBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::BindBufferRangeEXT.f = transmute(ptr); storage::BindBufferRangeEXT.is_loaded = true; }, _ => unsafe { storage::BindBufferRangeEXT.f = transmute(failing::BindBufferRangeEXT); storage::BindBufferRangeEXT.is_loaded = false; } }
    match loadfn("BindBufferRangeNV") { ptr if !ptr.is_null() => unsafe { storage::BindBufferRangeNV.f = transmute(ptr); storage::BindBufferRangeNV.is_loaded = true; }, _ => unsafe { storage::BindBufferRangeNV.f = transmute(failing::BindBufferRangeNV); storage::BindBufferRangeNV.is_loaded = false; } }
    match loadfn("BindBuffersBase") { ptr if !ptr.is_null() => unsafe { storage::BindBuffersBase.f = transmute(ptr); storage::BindBuffersBase.is_loaded = true; }, _ => unsafe { storage::BindBuffersBase.f = transmute(failing::BindBuffersBase); storage::BindBuffersBase.is_loaded = false; } }
    match loadfn("BindBuffersRange") { ptr if !ptr.is_null() => unsafe { storage::BindBuffersRange.f = transmute(ptr); storage::BindBuffersRange.is_loaded = true; }, _ => unsafe { storage::BindBuffersRange.f = transmute(failing::BindBuffersRange); storage::BindBuffersRange.is_loaded = false; } }
    match loadfn("BindFragDataLocation") { ptr if !ptr.is_null() => unsafe { storage::BindFragDataLocation.f = transmute(ptr); storage::BindFragDataLocation.is_loaded = true; }, _ => unsafe { storage::BindFragDataLocation.f = transmute(failing::BindFragDataLocation); storage::BindFragDataLocation.is_loaded = false; } }
    match loadfn("BindFragDataLocationEXT") { ptr if !ptr.is_null() => unsafe { storage::BindFragDataLocationEXT.f = transmute(ptr); storage::BindFragDataLocationEXT.is_loaded = true; }, _ => unsafe { storage::BindFragDataLocationEXT.f = transmute(failing::BindFragDataLocationEXT); storage::BindFragDataLocationEXT.is_loaded = false; } }
    match loadfn("BindFragDataLocationIndexed") { ptr if !ptr.is_null() => unsafe { storage::BindFragDataLocationIndexed.f = transmute(ptr); storage::BindFragDataLocationIndexed.is_loaded = true; }, _ => unsafe { storage::BindFragDataLocationIndexed.f = transmute(failing::BindFragDataLocationIndexed); storage::BindFragDataLocationIndexed.is_loaded = false; } }
    match loadfn("BindFragmentShaderATI") { ptr if !ptr.is_null() => unsafe { storage::BindFragmentShaderATI.f = transmute(ptr); storage::BindFragmentShaderATI.is_loaded = true; }, _ => unsafe { storage::BindFragmentShaderATI.f = transmute(failing::BindFragmentShaderATI); storage::BindFragmentShaderATI.is_loaded = false; } }
    match loadfn("BindFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::BindFramebuffer.f = transmute(ptr); storage::BindFramebuffer.is_loaded = true; }, _ => unsafe { storage::BindFramebuffer.f = transmute(failing::BindFramebuffer); storage::BindFramebuffer.is_loaded = false; } }
    match loadfn("BindFramebufferEXT") { ptr if !ptr.is_null() => unsafe { storage::BindFramebufferEXT.f = transmute(ptr); storage::BindFramebufferEXT.is_loaded = true; }, _ => unsafe { storage::BindFramebufferEXT.f = transmute(failing::BindFramebufferEXT); storage::BindFramebufferEXT.is_loaded = false; } }
    match loadfn("BindFramebufferOES") { ptr if !ptr.is_null() => unsafe { storage::BindFramebufferOES.f = transmute(ptr); storage::BindFramebufferOES.is_loaded = true; }, _ => unsafe { storage::BindFramebufferOES.f = transmute(failing::BindFramebufferOES); storage::BindFramebufferOES.is_loaded = false; } }
    match loadfn("BindImageTexture") { ptr if !ptr.is_null() => unsafe { storage::BindImageTexture.f = transmute(ptr); storage::BindImageTexture.is_loaded = true; }, _ => unsafe { storage::BindImageTexture.f = transmute(failing::BindImageTexture); storage::BindImageTexture.is_loaded = false; } }
    match loadfn("BindImageTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::BindImageTextureEXT.f = transmute(ptr); storage::BindImageTextureEXT.is_loaded = true; }, _ => unsafe { storage::BindImageTextureEXT.f = transmute(failing::BindImageTextureEXT); storage::BindImageTextureEXT.is_loaded = false; } }
    match loadfn("BindImageTextures") { ptr if !ptr.is_null() => unsafe { storage::BindImageTextures.f = transmute(ptr); storage::BindImageTextures.is_loaded = true; }, _ => unsafe { storage::BindImageTextures.f = transmute(failing::BindImageTextures); storage::BindImageTextures.is_loaded = false; } }
    match loadfn("BindLightParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindLightParameterEXT.f = transmute(ptr); storage::BindLightParameterEXT.is_loaded = true; }, _ => unsafe { storage::BindLightParameterEXT.f = transmute(failing::BindLightParameterEXT); storage::BindLightParameterEXT.is_loaded = false; } }
    match loadfn("BindMaterialParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindMaterialParameterEXT.f = transmute(ptr); storage::BindMaterialParameterEXT.is_loaded = true; }, _ => unsafe { storage::BindMaterialParameterEXT.f = transmute(failing::BindMaterialParameterEXT); storage::BindMaterialParameterEXT.is_loaded = false; } }
    match loadfn("BindMultiTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::BindMultiTextureEXT.f = transmute(ptr); storage::BindMultiTextureEXT.is_loaded = true; }, _ => unsafe { storage::BindMultiTextureEXT.f = transmute(failing::BindMultiTextureEXT); storage::BindMultiTextureEXT.is_loaded = false; } }
    match loadfn("BindParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindParameterEXT.f = transmute(ptr); storage::BindParameterEXT.is_loaded = true; }, _ => unsafe { storage::BindParameterEXT.f = transmute(failing::BindParameterEXT); storage::BindParameterEXT.is_loaded = false; } }
    match loadfn("BindProgramARB") { ptr if !ptr.is_null() => unsafe { storage::BindProgramARB.f = transmute(ptr); storage::BindProgramARB.is_loaded = true; }, _ => unsafe { storage::BindProgramARB.f = transmute(failing::BindProgramARB); storage::BindProgramARB.is_loaded = false; } }
    match loadfn("BindProgramNV") { ptr if !ptr.is_null() => unsafe { storage::BindProgramNV.f = transmute(ptr); storage::BindProgramNV.is_loaded = true; }, _ => unsafe { storage::BindProgramNV.f = transmute(failing::BindProgramNV); storage::BindProgramNV.is_loaded = false; } }
    match loadfn("BindProgramPipeline") { ptr if !ptr.is_null() => unsafe { storage::BindProgramPipeline.f = transmute(ptr); storage::BindProgramPipeline.is_loaded = true; }, _ => unsafe { storage::BindProgramPipeline.f = transmute(failing::BindProgramPipeline); storage::BindProgramPipeline.is_loaded = false; } }
    match loadfn("BindProgramPipelineEXT") { ptr if !ptr.is_null() => unsafe { storage::BindProgramPipelineEXT.f = transmute(ptr); storage::BindProgramPipelineEXT.is_loaded = true; }, _ => unsafe { storage::BindProgramPipelineEXT.f = transmute(failing::BindProgramPipelineEXT); storage::BindProgramPipelineEXT.is_loaded = false; } }
    match loadfn("BindRenderbuffer") { ptr if !ptr.is_null() => unsafe { storage::BindRenderbuffer.f = transmute(ptr); storage::BindRenderbuffer.is_loaded = true; }, _ => unsafe { storage::BindRenderbuffer.f = transmute(failing::BindRenderbuffer); storage::BindRenderbuffer.is_loaded = false; } }
    match loadfn("BindRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::BindRenderbufferEXT.f = transmute(ptr); storage::BindRenderbufferEXT.is_loaded = true; }, _ => unsafe { storage::BindRenderbufferEXT.f = transmute(failing::BindRenderbufferEXT); storage::BindRenderbufferEXT.is_loaded = false; } }
    match loadfn("BindRenderbufferOES") { ptr if !ptr.is_null() => unsafe { storage::BindRenderbufferOES.f = transmute(ptr); storage::BindRenderbufferOES.is_loaded = true; }, _ => unsafe { storage::BindRenderbufferOES.f = transmute(failing::BindRenderbufferOES); storage::BindRenderbufferOES.is_loaded = false; } }
    match loadfn("BindSampler") { ptr if !ptr.is_null() => unsafe { storage::BindSampler.f = transmute(ptr); storage::BindSampler.is_loaded = true; }, _ => unsafe { storage::BindSampler.f = transmute(failing::BindSampler); storage::BindSampler.is_loaded = false; } }
    match loadfn("BindSamplers") { ptr if !ptr.is_null() => unsafe { storage::BindSamplers.f = transmute(ptr); storage::BindSamplers.is_loaded = true; }, _ => unsafe { storage::BindSamplers.f = transmute(failing::BindSamplers); storage::BindSamplers.is_loaded = false; } }
    match loadfn("BindTexGenParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindTexGenParameterEXT.f = transmute(ptr); storage::BindTexGenParameterEXT.is_loaded = true; }, _ => unsafe { storage::BindTexGenParameterEXT.f = transmute(failing::BindTexGenParameterEXT); storage::BindTexGenParameterEXT.is_loaded = false; } }
    match loadfn("BindTexture") { ptr if !ptr.is_null() => unsafe { storage::BindTexture.f = transmute(ptr); storage::BindTexture.is_loaded = true; }, _ => unsafe { storage::BindTexture.f = transmute(failing::BindTexture); storage::BindTexture.is_loaded = false; } }
    match loadfn("BindTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::BindTextureEXT.f = transmute(ptr); storage::BindTextureEXT.is_loaded = true; }, _ => unsafe { storage::BindTextureEXT.f = transmute(failing::BindTextureEXT); storage::BindTextureEXT.is_loaded = false; } }
    match loadfn("BindTextureUnitParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindTextureUnitParameterEXT.f = transmute(ptr); storage::BindTextureUnitParameterEXT.is_loaded = true; }, _ => unsafe { storage::BindTextureUnitParameterEXT.f = transmute(failing::BindTextureUnitParameterEXT); storage::BindTextureUnitParameterEXT.is_loaded = false; } }
    match loadfn("BindTextures") { ptr if !ptr.is_null() => unsafe { storage::BindTextures.f = transmute(ptr); storage::BindTextures.is_loaded = true; }, _ => unsafe { storage::BindTextures.f = transmute(failing::BindTextures); storage::BindTextures.is_loaded = false; } }
    match loadfn("BindTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::BindTransformFeedback.f = transmute(ptr); storage::BindTransformFeedback.is_loaded = true; }, _ => unsafe { storage::BindTransformFeedback.f = transmute(failing::BindTransformFeedback); storage::BindTransformFeedback.is_loaded = false; } }
    match loadfn("BindTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::BindTransformFeedbackNV.f = transmute(ptr); storage::BindTransformFeedbackNV.is_loaded = true; }, _ => unsafe { storage::BindTransformFeedbackNV.f = transmute(failing::BindTransformFeedbackNV); storage::BindTransformFeedbackNV.is_loaded = false; } }
    match loadfn("BindVertexArray") { ptr if !ptr.is_null() => unsafe { storage::BindVertexArray.f = transmute(ptr); storage::BindVertexArray.is_loaded = true; }, _ => unsafe { storage::BindVertexArray.f = transmute(failing::BindVertexArray); storage::BindVertexArray.is_loaded = false; } }
    match loadfn("BindVertexArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::BindVertexArrayAPPLE.f = transmute(ptr); storage::BindVertexArrayAPPLE.is_loaded = true; }, _ => unsafe { storage::BindVertexArrayAPPLE.f = transmute(failing::BindVertexArrayAPPLE); storage::BindVertexArrayAPPLE.is_loaded = false; } }
    match loadfn("BindVertexArrayOES") { ptr if !ptr.is_null() => unsafe { storage::BindVertexArrayOES.f = transmute(ptr); storage::BindVertexArrayOES.is_loaded = true; }, _ => unsafe { storage::BindVertexArrayOES.f = transmute(failing::BindVertexArrayOES); storage::BindVertexArrayOES.is_loaded = false; } }
    match loadfn("BindVertexBuffer") { ptr if !ptr.is_null() => unsafe { storage::BindVertexBuffer.f = transmute(ptr); storage::BindVertexBuffer.is_loaded = true; }, _ => unsafe { storage::BindVertexBuffer.f = transmute(failing::BindVertexBuffer); storage::BindVertexBuffer.is_loaded = false; } }
    match loadfn("BindVertexBuffers") { ptr if !ptr.is_null() => unsafe { storage::BindVertexBuffers.f = transmute(ptr); storage::BindVertexBuffers.is_loaded = true; }, _ => unsafe { storage::BindVertexBuffers.f = transmute(failing::BindVertexBuffers); storage::BindVertexBuffers.is_loaded = false; } }
    match loadfn("BindVertexShaderEXT") { ptr if !ptr.is_null() => unsafe { storage::BindVertexShaderEXT.f = transmute(ptr); storage::BindVertexShaderEXT.is_loaded = true; }, _ => unsafe { storage::BindVertexShaderEXT.f = transmute(failing::BindVertexShaderEXT); storage::BindVertexShaderEXT.is_loaded = false; } }
    match loadfn("BindVideoCaptureStreamBufferNV") { ptr if !ptr.is_null() => unsafe { storage::BindVideoCaptureStreamBufferNV.f = transmute(ptr); storage::BindVideoCaptureStreamBufferNV.is_loaded = true; }, _ => unsafe { storage::BindVideoCaptureStreamBufferNV.f = transmute(failing::BindVideoCaptureStreamBufferNV); storage::BindVideoCaptureStreamBufferNV.is_loaded = false; } }
    match loadfn("BindVideoCaptureStreamTextureNV") { ptr if !ptr.is_null() => unsafe { storage::BindVideoCaptureStreamTextureNV.f = transmute(ptr); storage::BindVideoCaptureStreamTextureNV.is_loaded = true; }, _ => unsafe { storage::BindVideoCaptureStreamTextureNV.f = transmute(failing::BindVideoCaptureStreamTextureNV); storage::BindVideoCaptureStreamTextureNV.is_loaded = false; } }
    match loadfn("Binormal3bEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3bEXT.f = transmute(ptr); storage::Binormal3bEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3bEXT.f = transmute(failing::Binormal3bEXT); storage::Binormal3bEXT.is_loaded = false; } }
    match loadfn("Binormal3bvEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3bvEXT.f = transmute(ptr); storage::Binormal3bvEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3bvEXT.f = transmute(failing::Binormal3bvEXT); storage::Binormal3bvEXT.is_loaded = false; } }
    match loadfn("Binormal3dEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3dEXT.f = transmute(ptr); storage::Binormal3dEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3dEXT.f = transmute(failing::Binormal3dEXT); storage::Binormal3dEXT.is_loaded = false; } }
    match loadfn("Binormal3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3dvEXT.f = transmute(ptr); storage::Binormal3dvEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3dvEXT.f = transmute(failing::Binormal3dvEXT); storage::Binormal3dvEXT.is_loaded = false; } }
    match loadfn("Binormal3fEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3fEXT.f = transmute(ptr); storage::Binormal3fEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3fEXT.f = transmute(failing::Binormal3fEXT); storage::Binormal3fEXT.is_loaded = false; } }
    match loadfn("Binormal3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3fvEXT.f = transmute(ptr); storage::Binormal3fvEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3fvEXT.f = transmute(failing::Binormal3fvEXT); storage::Binormal3fvEXT.is_loaded = false; } }
    match loadfn("Binormal3iEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3iEXT.f = transmute(ptr); storage::Binormal3iEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3iEXT.f = transmute(failing::Binormal3iEXT); storage::Binormal3iEXT.is_loaded = false; } }
    match loadfn("Binormal3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3ivEXT.f = transmute(ptr); storage::Binormal3ivEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3ivEXT.f = transmute(failing::Binormal3ivEXT); storage::Binormal3ivEXT.is_loaded = false; } }
    match loadfn("Binormal3sEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3sEXT.f = transmute(ptr); storage::Binormal3sEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3sEXT.f = transmute(failing::Binormal3sEXT); storage::Binormal3sEXT.is_loaded = false; } }
    match loadfn("Binormal3svEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3svEXT.f = transmute(ptr); storage::Binormal3svEXT.is_loaded = true; }, _ => unsafe { storage::Binormal3svEXT.f = transmute(failing::Binormal3svEXT); storage::Binormal3svEXT.is_loaded = false; } }
    match loadfn("BinormalPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::BinormalPointerEXT.f = transmute(ptr); storage::BinormalPointerEXT.is_loaded = true; }, _ => unsafe { storage::BinormalPointerEXT.f = transmute(failing::BinormalPointerEXT); storage::BinormalPointerEXT.is_loaded = false; } }
    match loadfn("Bitmap") { ptr if !ptr.is_null() => unsafe { storage::Bitmap.f = transmute(ptr); storage::Bitmap.is_loaded = true; }, _ => unsafe { storage::Bitmap.f = transmute(failing::Bitmap); storage::Bitmap.is_loaded = false; } }
    match loadfn("BitmapxOES") { ptr if !ptr.is_null() => unsafe { storage::BitmapxOES.f = transmute(ptr); storage::BitmapxOES.is_loaded = true; }, _ => unsafe { storage::BitmapxOES.f = transmute(failing::BitmapxOES); storage::BitmapxOES.is_loaded = false; } }
    match loadfn("BlendColor") { ptr if !ptr.is_null() => unsafe { storage::BlendColor.f = transmute(ptr); storage::BlendColor.is_loaded = true; }, _ => unsafe { storage::BlendColor.f = transmute(failing::BlendColor); storage::BlendColor.is_loaded = false; } }
    match loadfn("BlendColorEXT") { ptr if !ptr.is_null() => unsafe { storage::BlendColorEXT.f = transmute(ptr); storage::BlendColorEXT.is_loaded = true; }, _ => unsafe { storage::BlendColorEXT.f = transmute(failing::BlendColorEXT); storage::BlendColorEXT.is_loaded = false; } }
    match loadfn("BlendColorxOES") { ptr if !ptr.is_null() => unsafe { storage::BlendColorxOES.f = transmute(ptr); storage::BlendColorxOES.is_loaded = true; }, _ => unsafe { storage::BlendColorxOES.f = transmute(failing::BlendColorxOES); storage::BlendColorxOES.is_loaded = false; } }
    match loadfn("BlendEquation") { ptr if !ptr.is_null() => unsafe { storage::BlendEquation.f = transmute(ptr); storage::BlendEquation.is_loaded = true; }, _ => unsafe { storage::BlendEquation.f = transmute(failing::BlendEquation); storage::BlendEquation.is_loaded = false; } }
    match loadfn("BlendEquationEXT") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationEXT.f = transmute(ptr); storage::BlendEquationEXT.is_loaded = true; }, _ => unsafe { storage::BlendEquationEXT.f = transmute(failing::BlendEquationEXT); storage::BlendEquationEXT.is_loaded = false; } }
    match loadfn("BlendEquationIndexedAMD") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationIndexedAMD.f = transmute(ptr); storage::BlendEquationIndexedAMD.is_loaded = true; }, _ => unsafe { storage::BlendEquationIndexedAMD.f = transmute(failing::BlendEquationIndexedAMD); storage::BlendEquationIndexedAMD.is_loaded = false; } }
    match loadfn("BlendEquationOES") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationOES.f = transmute(ptr); storage::BlendEquationOES.is_loaded = true; }, _ => unsafe { storage::BlendEquationOES.f = transmute(failing::BlendEquationOES); storage::BlendEquationOES.is_loaded = false; } }
    match loadfn("BlendEquationSeparate") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparate.f = transmute(ptr); storage::BlendEquationSeparate.is_loaded = true; }, _ => unsafe { storage::BlendEquationSeparate.f = transmute(failing::BlendEquationSeparate); storage::BlendEquationSeparate.is_loaded = false; } }
    match loadfn("BlendEquationSeparateEXT") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparateEXT.f = transmute(ptr); storage::BlendEquationSeparateEXT.is_loaded = true; }, _ => unsafe { storage::BlendEquationSeparateEXT.f = transmute(failing::BlendEquationSeparateEXT); storage::BlendEquationSeparateEXT.is_loaded = false; } }
    match loadfn("BlendEquationSeparateIndexedAMD") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparateIndexedAMD.f = transmute(ptr); storage::BlendEquationSeparateIndexedAMD.is_loaded = true; }, _ => unsafe { storage::BlendEquationSeparateIndexedAMD.f = transmute(failing::BlendEquationSeparateIndexedAMD); storage::BlendEquationSeparateIndexedAMD.is_loaded = false; } }
    match loadfn("BlendEquationSeparateOES") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparateOES.f = transmute(ptr); storage::BlendEquationSeparateOES.is_loaded = true; }, _ => unsafe { storage::BlendEquationSeparateOES.f = transmute(failing::BlendEquationSeparateOES); storage::BlendEquationSeparateOES.is_loaded = false; } }
    match loadfn("BlendEquationSeparatei") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparatei.f = transmute(ptr); storage::BlendEquationSeparatei.is_loaded = true; }, _ => unsafe { storage::BlendEquationSeparatei.f = transmute(failing::BlendEquationSeparatei); storage::BlendEquationSeparatei.is_loaded = false; } }
    match loadfn("BlendEquationSeparateiARB") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparateiARB.f = transmute(ptr); storage::BlendEquationSeparateiARB.is_loaded = true; }, _ => unsafe { storage::BlendEquationSeparateiARB.f = transmute(failing::BlendEquationSeparateiARB); storage::BlendEquationSeparateiARB.is_loaded = false; } }
    match loadfn("BlendEquationi") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationi.f = transmute(ptr); storage::BlendEquationi.is_loaded = true; }, _ => unsafe { storage::BlendEquationi.f = transmute(failing::BlendEquationi); storage::BlendEquationi.is_loaded = false; } }
    match loadfn("BlendEquationiARB") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationiARB.f = transmute(ptr); storage::BlendEquationiARB.is_loaded = true; }, _ => unsafe { storage::BlendEquationiARB.f = transmute(failing::BlendEquationiARB); storage::BlendEquationiARB.is_loaded = false; } }
    match loadfn("BlendFunc") { ptr if !ptr.is_null() => unsafe { storage::BlendFunc.f = transmute(ptr); storage::BlendFunc.is_loaded = true; }, _ => unsafe { storage::BlendFunc.f = transmute(failing::BlendFunc); storage::BlendFunc.is_loaded = false; } }
    match loadfn("BlendFuncIndexedAMD") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncIndexedAMD.f = transmute(ptr); storage::BlendFuncIndexedAMD.is_loaded = true; }, _ => unsafe { storage::BlendFuncIndexedAMD.f = transmute(failing::BlendFuncIndexedAMD); storage::BlendFuncIndexedAMD.is_loaded = false; } }
    match loadfn("BlendFuncSeparate") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparate.f = transmute(ptr); storage::BlendFuncSeparate.is_loaded = true; }, _ => unsafe { storage::BlendFuncSeparate.f = transmute(failing::BlendFuncSeparate); storage::BlendFuncSeparate.is_loaded = false; } }
    match loadfn("BlendFuncSeparateEXT") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateEXT.f = transmute(ptr); storage::BlendFuncSeparateEXT.is_loaded = true; }, _ => unsafe { storage::BlendFuncSeparateEXT.f = transmute(failing::BlendFuncSeparateEXT); storage::BlendFuncSeparateEXT.is_loaded = false; } }
    match loadfn("BlendFuncSeparateINGR") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateINGR.f = transmute(ptr); storage::BlendFuncSeparateINGR.is_loaded = true; }, _ => unsafe { storage::BlendFuncSeparateINGR.f = transmute(failing::BlendFuncSeparateINGR); storage::BlendFuncSeparateINGR.is_loaded = false; } }
    match loadfn("BlendFuncSeparateIndexedAMD") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateIndexedAMD.f = transmute(ptr); storage::BlendFuncSeparateIndexedAMD.is_loaded = true; }, _ => unsafe { storage::BlendFuncSeparateIndexedAMD.f = transmute(failing::BlendFuncSeparateIndexedAMD); storage::BlendFuncSeparateIndexedAMD.is_loaded = false; } }
    match loadfn("BlendFuncSeparateOES") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateOES.f = transmute(ptr); storage::BlendFuncSeparateOES.is_loaded = true; }, _ => unsafe { storage::BlendFuncSeparateOES.f = transmute(failing::BlendFuncSeparateOES); storage::BlendFuncSeparateOES.is_loaded = false; } }
    match loadfn("BlendFuncSeparatei") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparatei.f = transmute(ptr); storage::BlendFuncSeparatei.is_loaded = true; }, _ => unsafe { storage::BlendFuncSeparatei.f = transmute(failing::BlendFuncSeparatei); storage::BlendFuncSeparatei.is_loaded = false; } }
    match loadfn("BlendFuncSeparateiARB") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateiARB.f = transmute(ptr); storage::BlendFuncSeparateiARB.is_loaded = true; }, _ => unsafe { storage::BlendFuncSeparateiARB.f = transmute(failing::BlendFuncSeparateiARB); storage::BlendFuncSeparateiARB.is_loaded = false; } }
    match loadfn("BlendFunci") { ptr if !ptr.is_null() => unsafe { storage::BlendFunci.f = transmute(ptr); storage::BlendFunci.is_loaded = true; }, _ => unsafe { storage::BlendFunci.f = transmute(failing::BlendFunci); storage::BlendFunci.is_loaded = false; } }
    match loadfn("BlendFunciARB") { ptr if !ptr.is_null() => unsafe { storage::BlendFunciARB.f = transmute(ptr); storage::BlendFunciARB.is_loaded = true; }, _ => unsafe { storage::BlendFunciARB.f = transmute(failing::BlendFunciARB); storage::BlendFunciARB.is_loaded = false; } }
    match loadfn("BlendParameteriNV") { ptr if !ptr.is_null() => unsafe { storage::BlendParameteriNV.f = transmute(ptr); storage::BlendParameteriNV.is_loaded = true; }, _ => unsafe { storage::BlendParameteriNV.f = transmute(failing::BlendParameteriNV); storage::BlendParameteriNV.is_loaded = false; } }
    match loadfn("BlendBarrierNV") { ptr if !ptr.is_null() => unsafe { storage::BlendBarrierNV.f = transmute(ptr); storage::BlendBarrierNV.is_loaded = true; }, _ => unsafe { storage::BlendBarrierNV.f = transmute(failing::BlendBarrierNV); storage::BlendBarrierNV.is_loaded = false; } }
    match loadfn("BlitFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::BlitFramebuffer.f = transmute(ptr); storage::BlitFramebuffer.is_loaded = true; }, _ => unsafe { storage::BlitFramebuffer.f = transmute(failing::BlitFramebuffer); storage::BlitFramebuffer.is_loaded = false; } }
    match loadfn("BlitFramebufferANGLE") { ptr if !ptr.is_null() => unsafe { storage::BlitFramebufferANGLE.f = transmute(ptr); storage::BlitFramebufferANGLE.is_loaded = true; }, _ => unsafe { storage::BlitFramebufferANGLE.f = transmute(failing::BlitFramebufferANGLE); storage::BlitFramebufferANGLE.is_loaded = false; } }
    match loadfn("BlitFramebufferEXT") { ptr if !ptr.is_null() => unsafe { storage::BlitFramebufferEXT.f = transmute(ptr); storage::BlitFramebufferEXT.is_loaded = true; }, _ => unsafe { storage::BlitFramebufferEXT.f = transmute(failing::BlitFramebufferEXT); storage::BlitFramebufferEXT.is_loaded = false; } }
    match loadfn("BlitFramebufferNV") { ptr if !ptr.is_null() => unsafe { storage::BlitFramebufferNV.f = transmute(ptr); storage::BlitFramebufferNV.is_loaded = true; }, _ => unsafe { storage::BlitFramebufferNV.f = transmute(failing::BlitFramebufferNV); storage::BlitFramebufferNV.is_loaded = false; } }
    match loadfn("BufferAddressRangeNV") { ptr if !ptr.is_null() => unsafe { storage::BufferAddressRangeNV.f = transmute(ptr); storage::BufferAddressRangeNV.is_loaded = true; }, _ => unsafe { storage::BufferAddressRangeNV.f = transmute(failing::BufferAddressRangeNV); storage::BufferAddressRangeNV.is_loaded = false; } }
    match loadfn("BufferData") { ptr if !ptr.is_null() => unsafe { storage::BufferData.f = transmute(ptr); storage::BufferData.is_loaded = true; }, _ => unsafe { storage::BufferData.f = transmute(failing::BufferData); storage::BufferData.is_loaded = false; } }
    match loadfn("BufferDataARB") { ptr if !ptr.is_null() => unsafe { storage::BufferDataARB.f = transmute(ptr); storage::BufferDataARB.is_loaded = true; }, _ => unsafe { storage::BufferDataARB.f = transmute(failing::BufferDataARB); storage::BufferDataARB.is_loaded = false; } }
    match loadfn("BufferParameteriAPPLE") { ptr if !ptr.is_null() => unsafe { storage::BufferParameteriAPPLE.f = transmute(ptr); storage::BufferParameteriAPPLE.is_loaded = true; }, _ => unsafe { storage::BufferParameteriAPPLE.f = transmute(failing::BufferParameteriAPPLE); storage::BufferParameteriAPPLE.is_loaded = false; } }
    match loadfn("BufferStorage") { ptr if !ptr.is_null() => unsafe { storage::BufferStorage.f = transmute(ptr); storage::BufferStorage.is_loaded = true; }, _ => unsafe { storage::BufferStorage.f = transmute(failing::BufferStorage); storage::BufferStorage.is_loaded = false; } }
    match loadfn("BufferSubData") { ptr if !ptr.is_null() => unsafe { storage::BufferSubData.f = transmute(ptr); storage::BufferSubData.is_loaded = true; }, _ => unsafe { storage::BufferSubData.f = transmute(failing::BufferSubData); storage::BufferSubData.is_loaded = false; } }
    match loadfn("BufferSubDataARB") { ptr if !ptr.is_null() => unsafe { storage::BufferSubDataARB.f = transmute(ptr); storage::BufferSubDataARB.is_loaded = true; }, _ => unsafe { storage::BufferSubDataARB.f = transmute(failing::BufferSubDataARB); storage::BufferSubDataARB.is_loaded = false; } }
    match loadfn("CallList") { ptr if !ptr.is_null() => unsafe { storage::CallList.f = transmute(ptr); storage::CallList.is_loaded = true; }, _ => unsafe { storage::CallList.f = transmute(failing::CallList); storage::CallList.is_loaded = false; } }
    match loadfn("CallLists") { ptr if !ptr.is_null() => unsafe { storage::CallLists.f = transmute(ptr); storage::CallLists.is_loaded = true; }, _ => unsafe { storage::CallLists.f = transmute(failing::CallLists); storage::CallLists.is_loaded = false; } }
    match loadfn("CheckFramebufferStatus") { ptr if !ptr.is_null() => unsafe { storage::CheckFramebufferStatus.f = transmute(ptr); storage::CheckFramebufferStatus.is_loaded = true; }, _ => unsafe { storage::CheckFramebufferStatus.f = transmute(failing::CheckFramebufferStatus); storage::CheckFramebufferStatus.is_loaded = false; } }
    match loadfn("CheckFramebufferStatusEXT") { ptr if !ptr.is_null() => unsafe { storage::CheckFramebufferStatusEXT.f = transmute(ptr); storage::CheckFramebufferStatusEXT.is_loaded = true; }, _ => unsafe { storage::CheckFramebufferStatusEXT.f = transmute(failing::CheckFramebufferStatusEXT); storage::CheckFramebufferStatusEXT.is_loaded = false; } }
    match loadfn("CheckFramebufferStatusOES") { ptr if !ptr.is_null() => unsafe { storage::CheckFramebufferStatusOES.f = transmute(ptr); storage::CheckFramebufferStatusOES.is_loaded = true; }, _ => unsafe { storage::CheckFramebufferStatusOES.f = transmute(failing::CheckFramebufferStatusOES); storage::CheckFramebufferStatusOES.is_loaded = false; } }
    match loadfn("CheckNamedFramebufferStatusEXT") { ptr if !ptr.is_null() => unsafe { storage::CheckNamedFramebufferStatusEXT.f = transmute(ptr); storage::CheckNamedFramebufferStatusEXT.is_loaded = true; }, _ => unsafe { storage::CheckNamedFramebufferStatusEXT.f = transmute(failing::CheckNamedFramebufferStatusEXT); storage::CheckNamedFramebufferStatusEXT.is_loaded = false; } }
    match loadfn("ClampColor") { ptr if !ptr.is_null() => unsafe { storage::ClampColor.f = transmute(ptr); storage::ClampColor.is_loaded = true; }, _ => unsafe { storage::ClampColor.f = transmute(failing::ClampColor); storage::ClampColor.is_loaded = false; } }
    match loadfn("ClampColorARB") { ptr if !ptr.is_null() => unsafe { storage::ClampColorARB.f = transmute(ptr); storage::ClampColorARB.is_loaded = true; }, _ => unsafe { storage::ClampColorARB.f = transmute(failing::ClampColorARB); storage::ClampColorARB.is_loaded = false; } }
    match loadfn("Clear") { ptr if !ptr.is_null() => unsafe { storage::Clear.f = transmute(ptr); storage::Clear.is_loaded = true; }, _ => unsafe { storage::Clear.f = transmute(failing::Clear); storage::Clear.is_loaded = false; } }
    match loadfn("ClearAccum") { ptr if !ptr.is_null() => unsafe { storage::ClearAccum.f = transmute(ptr); storage::ClearAccum.is_loaded = true; }, _ => unsafe { storage::ClearAccum.f = transmute(failing::ClearAccum); storage::ClearAccum.is_loaded = false; } }
    match loadfn("ClearAccumxOES") { ptr if !ptr.is_null() => unsafe { storage::ClearAccumxOES.f = transmute(ptr); storage::ClearAccumxOES.is_loaded = true; }, _ => unsafe { storage::ClearAccumxOES.f = transmute(failing::ClearAccumxOES); storage::ClearAccumxOES.is_loaded = false; } }
    match loadfn("ClearBufferData") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferData.f = transmute(ptr); storage::ClearBufferData.is_loaded = true; }, _ => unsafe { storage::ClearBufferData.f = transmute(failing::ClearBufferData); storage::ClearBufferData.is_loaded = false; } }
    match loadfn("ClearBufferSubData") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferSubData.f = transmute(ptr); storage::ClearBufferSubData.is_loaded = true; }, _ => unsafe { storage::ClearBufferSubData.f = transmute(failing::ClearBufferSubData); storage::ClearBufferSubData.is_loaded = false; } }
    match loadfn("ClearBufferfi") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferfi.f = transmute(ptr); storage::ClearBufferfi.is_loaded = true; }, _ => unsafe { storage::ClearBufferfi.f = transmute(failing::ClearBufferfi); storage::ClearBufferfi.is_loaded = false; } }
    match loadfn("ClearBufferfv") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferfv.f = transmute(ptr); storage::ClearBufferfv.is_loaded = true; }, _ => unsafe { storage::ClearBufferfv.f = transmute(failing::ClearBufferfv); storage::ClearBufferfv.is_loaded = false; } }
    match loadfn("ClearBufferiv") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferiv.f = transmute(ptr); storage::ClearBufferiv.is_loaded = true; }, _ => unsafe { storage::ClearBufferiv.f = transmute(failing::ClearBufferiv); storage::ClearBufferiv.is_loaded = false; } }
    match loadfn("ClearBufferuiv") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferuiv.f = transmute(ptr); storage::ClearBufferuiv.is_loaded = true; }, _ => unsafe { storage::ClearBufferuiv.f = transmute(failing::ClearBufferuiv); storage::ClearBufferuiv.is_loaded = false; } }
    match loadfn("ClearColor") { ptr if !ptr.is_null() => unsafe { storage::ClearColor.f = transmute(ptr); storage::ClearColor.is_loaded = true; }, _ => unsafe { storage::ClearColor.f = transmute(failing::ClearColor); storage::ClearColor.is_loaded = false; } }
    match loadfn("ClearColorIiEXT") { ptr if !ptr.is_null() => unsafe { storage::ClearColorIiEXT.f = transmute(ptr); storage::ClearColorIiEXT.is_loaded = true; }, _ => unsafe { storage::ClearColorIiEXT.f = transmute(failing::ClearColorIiEXT); storage::ClearColorIiEXT.is_loaded = false; } }
    match loadfn("ClearColorIuiEXT") { ptr if !ptr.is_null() => unsafe { storage::ClearColorIuiEXT.f = transmute(ptr); storage::ClearColorIuiEXT.is_loaded = true; }, _ => unsafe { storage::ClearColorIuiEXT.f = transmute(failing::ClearColorIuiEXT); storage::ClearColorIuiEXT.is_loaded = false; } }
    match loadfn("ClearColorx") { ptr if !ptr.is_null() => unsafe { storage::ClearColorx.f = transmute(ptr); storage::ClearColorx.is_loaded = true; }, _ => unsafe { storage::ClearColorx.f = transmute(failing::ClearColorx); storage::ClearColorx.is_loaded = false; } }
    match loadfn("ClearColorxOES") { ptr if !ptr.is_null() => unsafe { storage::ClearColorxOES.f = transmute(ptr); storage::ClearColorxOES.is_loaded = true; }, _ => unsafe { storage::ClearColorxOES.f = transmute(failing::ClearColorxOES); storage::ClearColorxOES.is_loaded = false; } }
    match loadfn("ClearDepth") { ptr if !ptr.is_null() => unsafe { storage::ClearDepth.f = transmute(ptr); storage::ClearDepth.is_loaded = true; }, _ => unsafe { storage::ClearDepth.f = transmute(failing::ClearDepth); storage::ClearDepth.is_loaded = false; } }
    match loadfn("ClearDepthdNV") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthdNV.f = transmute(ptr); storage::ClearDepthdNV.is_loaded = true; }, _ => unsafe { storage::ClearDepthdNV.f = transmute(failing::ClearDepthdNV); storage::ClearDepthdNV.is_loaded = false; } }
    match loadfn("ClearDepthf") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthf.f = transmute(ptr); storage::ClearDepthf.is_loaded = true; }, _ => unsafe { storage::ClearDepthf.f = transmute(failing::ClearDepthf); storage::ClearDepthf.is_loaded = false; } }
    match loadfn("ClearDepthfOES") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthfOES.f = transmute(ptr); storage::ClearDepthfOES.is_loaded = true; }, _ => unsafe { storage::ClearDepthfOES.f = transmute(failing::ClearDepthfOES); storage::ClearDepthfOES.is_loaded = false; } }
    match loadfn("ClearDepthx") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthx.f = transmute(ptr); storage::ClearDepthx.is_loaded = true; }, _ => unsafe { storage::ClearDepthx.f = transmute(failing::ClearDepthx); storage::ClearDepthx.is_loaded = false; } }
    match loadfn("ClearDepthxOES") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthxOES.f = transmute(ptr); storage::ClearDepthxOES.is_loaded = true; }, _ => unsafe { storage::ClearDepthxOES.f = transmute(failing::ClearDepthxOES); storage::ClearDepthxOES.is_loaded = false; } }
    match loadfn("ClearIndex") { ptr if !ptr.is_null() => unsafe { storage::ClearIndex.f = transmute(ptr); storage::ClearIndex.is_loaded = true; }, _ => unsafe { storage::ClearIndex.f = transmute(failing::ClearIndex); storage::ClearIndex.is_loaded = false; } }
    match loadfn("ClearNamedBufferDataEXT") { ptr if !ptr.is_null() => unsafe { storage::ClearNamedBufferDataEXT.f = transmute(ptr); storage::ClearNamedBufferDataEXT.is_loaded = true; }, _ => unsafe { storage::ClearNamedBufferDataEXT.f = transmute(failing::ClearNamedBufferDataEXT); storage::ClearNamedBufferDataEXT.is_loaded = false; } }
    match loadfn("ClearNamedBufferSubDataEXT") { ptr if !ptr.is_null() => unsafe { storage::ClearNamedBufferSubDataEXT.f = transmute(ptr); storage::ClearNamedBufferSubDataEXT.is_loaded = true; }, _ => unsafe { storage::ClearNamedBufferSubDataEXT.f = transmute(failing::ClearNamedBufferSubDataEXT); storage::ClearNamedBufferSubDataEXT.is_loaded = false; } }
    match loadfn("ClearStencil") { ptr if !ptr.is_null() => unsafe { storage::ClearStencil.f = transmute(ptr); storage::ClearStencil.is_loaded = true; }, _ => unsafe { storage::ClearStencil.f = transmute(failing::ClearStencil); storage::ClearStencil.is_loaded = false; } }
    match loadfn("ClearTexImage") { ptr if !ptr.is_null() => unsafe { storage::ClearTexImage.f = transmute(ptr); storage::ClearTexImage.is_loaded = true; }, _ => unsafe { storage::ClearTexImage.f = transmute(failing::ClearTexImage); storage::ClearTexImage.is_loaded = false; } }
    match loadfn("ClearTexSubImage") { ptr if !ptr.is_null() => unsafe { storage::ClearTexSubImage.f = transmute(ptr); storage::ClearTexSubImage.is_loaded = true; }, _ => unsafe { storage::ClearTexSubImage.f = transmute(failing::ClearTexSubImage); storage::ClearTexSubImage.is_loaded = false; } }
    match loadfn("ClientActiveTexture") { ptr if !ptr.is_null() => unsafe { storage::ClientActiveTexture.f = transmute(ptr); storage::ClientActiveTexture.is_loaded = true; }, _ => unsafe { storage::ClientActiveTexture.f = transmute(failing::ClientActiveTexture); storage::ClientActiveTexture.is_loaded = false; } }
    match loadfn("ClientActiveTextureARB") { ptr if !ptr.is_null() => unsafe { storage::ClientActiveTextureARB.f = transmute(ptr); storage::ClientActiveTextureARB.is_loaded = true; }, _ => unsafe { storage::ClientActiveTextureARB.f = transmute(failing::ClientActiveTextureARB); storage::ClientActiveTextureARB.is_loaded = false; } }
    match loadfn("ClientActiveVertexStreamATI") { ptr if !ptr.is_null() => unsafe { storage::ClientActiveVertexStreamATI.f = transmute(ptr); storage::ClientActiveVertexStreamATI.is_loaded = true; }, _ => unsafe { storage::ClientActiveVertexStreamATI.f = transmute(failing::ClientActiveVertexStreamATI); storage::ClientActiveVertexStreamATI.is_loaded = false; } }
    match loadfn("ClientAttribDefaultEXT") { ptr if !ptr.is_null() => unsafe { storage::ClientAttribDefaultEXT.f = transmute(ptr); storage::ClientAttribDefaultEXT.is_loaded = true; }, _ => unsafe { storage::ClientAttribDefaultEXT.f = transmute(failing::ClientAttribDefaultEXT); storage::ClientAttribDefaultEXT.is_loaded = false; } }
    match loadfn("ClientWaitSync") { ptr if !ptr.is_null() => unsafe { storage::ClientWaitSync.f = transmute(ptr); storage::ClientWaitSync.is_loaded = true; }, _ => unsafe { storage::ClientWaitSync.f = transmute(failing::ClientWaitSync); storage::ClientWaitSync.is_loaded = false; } }
    match loadfn("ClientWaitSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ClientWaitSyncAPPLE.f = transmute(ptr); storage::ClientWaitSyncAPPLE.is_loaded = true; }, _ => unsafe { storage::ClientWaitSyncAPPLE.f = transmute(failing::ClientWaitSyncAPPLE); storage::ClientWaitSyncAPPLE.is_loaded = false; } }
    match loadfn("ClipControlARB") { ptr if !ptr.is_null() => unsafe { storage::ClipControlARB.f = transmute(ptr); storage::ClipControlARB.is_loaded = true; }, _ => unsafe { storage::ClipControlARB.f = transmute(failing::ClipControlARB); storage::ClipControlARB.is_loaded = false; } }
    match loadfn("ClipPlane") { ptr if !ptr.is_null() => unsafe { storage::ClipPlane.f = transmute(ptr); storage::ClipPlane.is_loaded = true; }, _ => unsafe { storage::ClipPlane.f = transmute(failing::ClipPlane); storage::ClipPlane.is_loaded = false; } }
    match loadfn("ClipPlanef") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanef.f = transmute(ptr); storage::ClipPlanef.is_loaded = true; }, _ => unsafe { storage::ClipPlanef.f = transmute(failing::ClipPlanef); storage::ClipPlanef.is_loaded = false; } }
    match loadfn("ClipPlanefIMG") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanefIMG.f = transmute(ptr); storage::ClipPlanefIMG.is_loaded = true; }, _ => unsafe { storage::ClipPlanefIMG.f = transmute(failing::ClipPlanefIMG); storage::ClipPlanefIMG.is_loaded = false; } }
    match loadfn("ClipPlanefOES") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanefOES.f = transmute(ptr); storage::ClipPlanefOES.is_loaded = true; }, _ => unsafe { storage::ClipPlanefOES.f = transmute(failing::ClipPlanefOES); storage::ClipPlanefOES.is_loaded = false; } }
    match loadfn("ClipPlanex") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanex.f = transmute(ptr); storage::ClipPlanex.is_loaded = true; }, _ => unsafe { storage::ClipPlanex.f = transmute(failing::ClipPlanex); storage::ClipPlanex.is_loaded = false; } }
    match loadfn("ClipPlanexIMG") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanexIMG.f = transmute(ptr); storage::ClipPlanexIMG.is_loaded = true; }, _ => unsafe { storage::ClipPlanexIMG.f = transmute(failing::ClipPlanexIMG); storage::ClipPlanexIMG.is_loaded = false; } }
    match loadfn("ClipPlanexOES") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanexOES.f = transmute(ptr); storage::ClipPlanexOES.is_loaded = true; }, _ => unsafe { storage::ClipPlanexOES.f = transmute(failing::ClipPlanexOES); storage::ClipPlanexOES.is_loaded = false; } }
    match loadfn("Color3b") { ptr if !ptr.is_null() => unsafe { storage::Color3b.f = transmute(ptr); storage::Color3b.is_loaded = true; }, _ => unsafe { storage::Color3b.f = transmute(failing::Color3b); storage::Color3b.is_loaded = false; } }
    match loadfn("Color3bv") { ptr if !ptr.is_null() => unsafe { storage::Color3bv.f = transmute(ptr); storage::Color3bv.is_loaded = true; }, _ => unsafe { storage::Color3bv.f = transmute(failing::Color3bv); storage::Color3bv.is_loaded = false; } }
    match loadfn("Color3d") { ptr if !ptr.is_null() => unsafe { storage::Color3d.f = transmute(ptr); storage::Color3d.is_loaded = true; }, _ => unsafe { storage::Color3d.f = transmute(failing::Color3d); storage::Color3d.is_loaded = false; } }
    match loadfn("Color3dv") { ptr if !ptr.is_null() => unsafe { storage::Color3dv.f = transmute(ptr); storage::Color3dv.is_loaded = true; }, _ => unsafe { storage::Color3dv.f = transmute(failing::Color3dv); storage::Color3dv.is_loaded = false; } }
    match loadfn("Color3f") { ptr if !ptr.is_null() => unsafe { storage::Color3f.f = transmute(ptr); storage::Color3f.is_loaded = true; }, _ => unsafe { storage::Color3f.f = transmute(failing::Color3f); storage::Color3f.is_loaded = false; } }
    match loadfn("Color3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::Color3fVertex3fSUN.f = transmute(ptr); storage::Color3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::Color3fVertex3fSUN.f = transmute(failing::Color3fVertex3fSUN); storage::Color3fVertex3fSUN.is_loaded = false; } }
    match loadfn("Color3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Color3fVertex3fvSUN.f = transmute(ptr); storage::Color3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::Color3fVertex3fvSUN.f = transmute(failing::Color3fVertex3fvSUN); storage::Color3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("Color3fv") { ptr if !ptr.is_null() => unsafe { storage::Color3fv.f = transmute(ptr); storage::Color3fv.is_loaded = true; }, _ => unsafe { storage::Color3fv.f = transmute(failing::Color3fv); storage::Color3fv.is_loaded = false; } }
    match loadfn("Color3hNV") { ptr if !ptr.is_null() => unsafe { storage::Color3hNV.f = transmute(ptr); storage::Color3hNV.is_loaded = true; }, _ => unsafe { storage::Color3hNV.f = transmute(failing::Color3hNV); storage::Color3hNV.is_loaded = false; } }
    match loadfn("Color3hvNV") { ptr if !ptr.is_null() => unsafe { storage::Color3hvNV.f = transmute(ptr); storage::Color3hvNV.is_loaded = true; }, _ => unsafe { storage::Color3hvNV.f = transmute(failing::Color3hvNV); storage::Color3hvNV.is_loaded = false; } }
    match loadfn("Color3i") { ptr if !ptr.is_null() => unsafe { storage::Color3i.f = transmute(ptr); storage::Color3i.is_loaded = true; }, _ => unsafe { storage::Color3i.f = transmute(failing::Color3i); storage::Color3i.is_loaded = false; } }
    match loadfn("Color3iv") { ptr if !ptr.is_null() => unsafe { storage::Color3iv.f = transmute(ptr); storage::Color3iv.is_loaded = true; }, _ => unsafe { storage::Color3iv.f = transmute(failing::Color3iv); storage::Color3iv.is_loaded = false; } }
    match loadfn("Color3s") { ptr if !ptr.is_null() => unsafe { storage::Color3s.f = transmute(ptr); storage::Color3s.is_loaded = true; }, _ => unsafe { storage::Color3s.f = transmute(failing::Color3s); storage::Color3s.is_loaded = false; } }
    match loadfn("Color3sv") { ptr if !ptr.is_null() => unsafe { storage::Color3sv.f = transmute(ptr); storage::Color3sv.is_loaded = true; }, _ => unsafe { storage::Color3sv.f = transmute(failing::Color3sv); storage::Color3sv.is_loaded = false; } }
    match loadfn("Color3ub") { ptr if !ptr.is_null() => unsafe { storage::Color3ub.f = transmute(ptr); storage::Color3ub.is_loaded = true; }, _ => unsafe { storage::Color3ub.f = transmute(failing::Color3ub); storage::Color3ub.is_loaded = false; } }
    match loadfn("Color3ubv") { ptr if !ptr.is_null() => unsafe { storage::Color3ubv.f = transmute(ptr); storage::Color3ubv.is_loaded = true; }, _ => unsafe { storage::Color3ubv.f = transmute(failing::Color3ubv); storage::Color3ubv.is_loaded = false; } }
    match loadfn("Color3ui") { ptr if !ptr.is_null() => unsafe { storage::Color3ui.f = transmute(ptr); storage::Color3ui.is_loaded = true; }, _ => unsafe { storage::Color3ui.f = transmute(failing::Color3ui); storage::Color3ui.is_loaded = false; } }
    match loadfn("Color3uiv") { ptr if !ptr.is_null() => unsafe { storage::Color3uiv.f = transmute(ptr); storage::Color3uiv.is_loaded = true; }, _ => unsafe { storage::Color3uiv.f = transmute(failing::Color3uiv); storage::Color3uiv.is_loaded = false; } }
    match loadfn("Color3us") { ptr if !ptr.is_null() => unsafe { storage::Color3us.f = transmute(ptr); storage::Color3us.is_loaded = true; }, _ => unsafe { storage::Color3us.f = transmute(failing::Color3us); storage::Color3us.is_loaded = false; } }
    match loadfn("Color3usv") { ptr if !ptr.is_null() => unsafe { storage::Color3usv.f = transmute(ptr); storage::Color3usv.is_loaded = true; }, _ => unsafe { storage::Color3usv.f = transmute(failing::Color3usv); storage::Color3usv.is_loaded = false; } }
    match loadfn("Color3xOES") { ptr if !ptr.is_null() => unsafe { storage::Color3xOES.f = transmute(ptr); storage::Color3xOES.is_loaded = true; }, _ => unsafe { storage::Color3xOES.f = transmute(failing::Color3xOES); storage::Color3xOES.is_loaded = false; } }
    match loadfn("Color3xvOES") { ptr if !ptr.is_null() => unsafe { storage::Color3xvOES.f = transmute(ptr); storage::Color3xvOES.is_loaded = true; }, _ => unsafe { storage::Color3xvOES.f = transmute(failing::Color3xvOES); storage::Color3xvOES.is_loaded = false; } }
    match loadfn("Color4b") { ptr if !ptr.is_null() => unsafe { storage::Color4b.f = transmute(ptr); storage::Color4b.is_loaded = true; }, _ => unsafe { storage::Color4b.f = transmute(failing::Color4b); storage::Color4b.is_loaded = false; } }
    match loadfn("Color4bv") { ptr if !ptr.is_null() => unsafe { storage::Color4bv.f = transmute(ptr); storage::Color4bv.is_loaded = true; }, _ => unsafe { storage::Color4bv.f = transmute(failing::Color4bv); storage::Color4bv.is_loaded = false; } }
    match loadfn("Color4d") { ptr if !ptr.is_null() => unsafe { storage::Color4d.f = transmute(ptr); storage::Color4d.is_loaded = true; }, _ => unsafe { storage::Color4d.f = transmute(failing::Color4d); storage::Color4d.is_loaded = false; } }
    match loadfn("Color4dv") { ptr if !ptr.is_null() => unsafe { storage::Color4dv.f = transmute(ptr); storage::Color4dv.is_loaded = true; }, _ => unsafe { storage::Color4dv.f = transmute(failing::Color4dv); storage::Color4dv.is_loaded = false; } }
    match loadfn("Color4f") { ptr if !ptr.is_null() => unsafe { storage::Color4f.f = transmute(ptr); storage::Color4f.is_loaded = true; }, _ => unsafe { storage::Color4f.f = transmute(failing::Color4f); storage::Color4f.is_loaded = false; } }
    match loadfn("Color4fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4fNormal3fVertex3fSUN.f = transmute(ptr); storage::Color4fNormal3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::Color4fNormal3fVertex3fSUN.f = transmute(failing::Color4fNormal3fVertex3fSUN); storage::Color4fNormal3fVertex3fSUN.is_loaded = false; } }
    match loadfn("Color4fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4fNormal3fVertex3fvSUN.f = transmute(ptr); storage::Color4fNormal3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::Color4fNormal3fVertex3fvSUN.f = transmute(failing::Color4fNormal3fVertex3fvSUN); storage::Color4fNormal3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("Color4fv") { ptr if !ptr.is_null() => unsafe { storage::Color4fv.f = transmute(ptr); storage::Color4fv.is_loaded = true; }, _ => unsafe { storage::Color4fv.f = transmute(failing::Color4fv); storage::Color4fv.is_loaded = false; } }
    match loadfn("Color4hNV") { ptr if !ptr.is_null() => unsafe { storage::Color4hNV.f = transmute(ptr); storage::Color4hNV.is_loaded = true; }, _ => unsafe { storage::Color4hNV.f = transmute(failing::Color4hNV); storage::Color4hNV.is_loaded = false; } }
    match loadfn("Color4hvNV") { ptr if !ptr.is_null() => unsafe { storage::Color4hvNV.f = transmute(ptr); storage::Color4hvNV.is_loaded = true; }, _ => unsafe { storage::Color4hvNV.f = transmute(failing::Color4hvNV); storage::Color4hvNV.is_loaded = false; } }
    match loadfn("Color4i") { ptr if !ptr.is_null() => unsafe { storage::Color4i.f = transmute(ptr); storage::Color4i.is_loaded = true; }, _ => unsafe { storage::Color4i.f = transmute(failing::Color4i); storage::Color4i.is_loaded = false; } }
    match loadfn("Color4iv") { ptr if !ptr.is_null() => unsafe { storage::Color4iv.f = transmute(ptr); storage::Color4iv.is_loaded = true; }, _ => unsafe { storage::Color4iv.f = transmute(failing::Color4iv); storage::Color4iv.is_loaded = false; } }
    match loadfn("Color4s") { ptr if !ptr.is_null() => unsafe { storage::Color4s.f = transmute(ptr); storage::Color4s.is_loaded = true; }, _ => unsafe { storage::Color4s.f = transmute(failing::Color4s); storage::Color4s.is_loaded = false; } }
    match loadfn("Color4sv") { ptr if !ptr.is_null() => unsafe { storage::Color4sv.f = transmute(ptr); storage::Color4sv.is_loaded = true; }, _ => unsafe { storage::Color4sv.f = transmute(failing::Color4sv); storage::Color4sv.is_loaded = false; } }
    match loadfn("Color4ub") { ptr if !ptr.is_null() => unsafe { storage::Color4ub.f = transmute(ptr); storage::Color4ub.is_loaded = true; }, _ => unsafe { storage::Color4ub.f = transmute(failing::Color4ub); storage::Color4ub.is_loaded = false; } }
    match loadfn("Color4ubVertex2fSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4ubVertex2fSUN.f = transmute(ptr); storage::Color4ubVertex2fSUN.is_loaded = true; }, _ => unsafe { storage::Color4ubVertex2fSUN.f = transmute(failing::Color4ubVertex2fSUN); storage::Color4ubVertex2fSUN.is_loaded = false; } }
    match loadfn("Color4ubVertex2fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4ubVertex2fvSUN.f = transmute(ptr); storage::Color4ubVertex2fvSUN.is_loaded = true; }, _ => unsafe { storage::Color4ubVertex2fvSUN.f = transmute(failing::Color4ubVertex2fvSUN); storage::Color4ubVertex2fvSUN.is_loaded = false; } }
    match loadfn("Color4ubVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4ubVertex3fSUN.f = transmute(ptr); storage::Color4ubVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::Color4ubVertex3fSUN.f = transmute(failing::Color4ubVertex3fSUN); storage::Color4ubVertex3fSUN.is_loaded = false; } }
    match loadfn("Color4ubVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4ubVertex3fvSUN.f = transmute(ptr); storage::Color4ubVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::Color4ubVertex3fvSUN.f = transmute(failing::Color4ubVertex3fvSUN); storage::Color4ubVertex3fvSUN.is_loaded = false; } }
    match loadfn("Color4ubv") { ptr if !ptr.is_null() => unsafe { storage::Color4ubv.f = transmute(ptr); storage::Color4ubv.is_loaded = true; }, _ => unsafe { storage::Color4ubv.f = transmute(failing::Color4ubv); storage::Color4ubv.is_loaded = false; } }
    match loadfn("Color4ui") { ptr if !ptr.is_null() => unsafe { storage::Color4ui.f = transmute(ptr); storage::Color4ui.is_loaded = true; }, _ => unsafe { storage::Color4ui.f = transmute(failing::Color4ui); storage::Color4ui.is_loaded = false; } }
    match loadfn("Color4uiv") { ptr if !ptr.is_null() => unsafe { storage::Color4uiv.f = transmute(ptr); storage::Color4uiv.is_loaded = true; }, _ => unsafe { storage::Color4uiv.f = transmute(failing::Color4uiv); storage::Color4uiv.is_loaded = false; } }
    match loadfn("Color4us") { ptr if !ptr.is_null() => unsafe { storage::Color4us.f = transmute(ptr); storage::Color4us.is_loaded = true; }, _ => unsafe { storage::Color4us.f = transmute(failing::Color4us); storage::Color4us.is_loaded = false; } }
    match loadfn("Color4usv") { ptr if !ptr.is_null() => unsafe { storage::Color4usv.f = transmute(ptr); storage::Color4usv.is_loaded = true; }, _ => unsafe { storage::Color4usv.f = transmute(failing::Color4usv); storage::Color4usv.is_loaded = false; } }
    match loadfn("Color4x") { ptr if !ptr.is_null() => unsafe { storage::Color4x.f = transmute(ptr); storage::Color4x.is_loaded = true; }, _ => unsafe { storage::Color4x.f = transmute(failing::Color4x); storage::Color4x.is_loaded = false; } }
    match loadfn("Color4xOES") { ptr if !ptr.is_null() => unsafe { storage::Color4xOES.f = transmute(ptr); storage::Color4xOES.is_loaded = true; }, _ => unsafe { storage::Color4xOES.f = transmute(failing::Color4xOES); storage::Color4xOES.is_loaded = false; } }
    match loadfn("Color4xvOES") { ptr if !ptr.is_null() => unsafe { storage::Color4xvOES.f = transmute(ptr); storage::Color4xvOES.is_loaded = true; }, _ => unsafe { storage::Color4xvOES.f = transmute(failing::Color4xvOES); storage::Color4xvOES.is_loaded = false; } }
    match loadfn("ColorFormatNV") { ptr if !ptr.is_null() => unsafe { storage::ColorFormatNV.f = transmute(ptr); storage::ColorFormatNV.is_loaded = true; }, _ => unsafe { storage::ColorFormatNV.f = transmute(failing::ColorFormatNV); storage::ColorFormatNV.is_loaded = false; } }
    match loadfn("ColorFragmentOp1ATI") { ptr if !ptr.is_null() => unsafe { storage::ColorFragmentOp1ATI.f = transmute(ptr); storage::ColorFragmentOp1ATI.is_loaded = true; }, _ => unsafe { storage::ColorFragmentOp1ATI.f = transmute(failing::ColorFragmentOp1ATI); storage::ColorFragmentOp1ATI.is_loaded = false; } }
    match loadfn("ColorFragmentOp2ATI") { ptr if !ptr.is_null() => unsafe { storage::ColorFragmentOp2ATI.f = transmute(ptr); storage::ColorFragmentOp2ATI.is_loaded = true; }, _ => unsafe { storage::ColorFragmentOp2ATI.f = transmute(failing::ColorFragmentOp2ATI); storage::ColorFragmentOp2ATI.is_loaded = false; } }
    match loadfn("ColorFragmentOp3ATI") { ptr if !ptr.is_null() => unsafe { storage::ColorFragmentOp3ATI.f = transmute(ptr); storage::ColorFragmentOp3ATI.is_loaded = true; }, _ => unsafe { storage::ColorFragmentOp3ATI.f = transmute(failing::ColorFragmentOp3ATI); storage::ColorFragmentOp3ATI.is_loaded = false; } }
    match loadfn("ColorMask") { ptr if !ptr.is_null() => unsafe { storage::ColorMask.f = transmute(ptr); storage::ColorMask.is_loaded = true; }, _ => unsafe { storage::ColorMask.f = transmute(failing::ColorMask); storage::ColorMask.is_loaded = false; } }
    match loadfn("ColorMaskIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::ColorMaskIndexedEXT.f = transmute(ptr); storage::ColorMaskIndexedEXT.is_loaded = true; }, _ => unsafe { storage::ColorMaskIndexedEXT.f = transmute(failing::ColorMaskIndexedEXT); storage::ColorMaskIndexedEXT.is_loaded = false; } }
    match loadfn("ColorMaski") { ptr if !ptr.is_null() => unsafe { storage::ColorMaski.f = transmute(ptr); storage::ColorMaski.is_loaded = true; }, _ => unsafe { storage::ColorMaski.f = transmute(failing::ColorMaski); storage::ColorMaski.is_loaded = false; } }
    match loadfn("ColorMaterial") { ptr if !ptr.is_null() => unsafe { storage::ColorMaterial.f = transmute(ptr); storage::ColorMaterial.is_loaded = true; }, _ => unsafe { storage::ColorMaterial.f = transmute(failing::ColorMaterial); storage::ColorMaterial.is_loaded = false; } }
    match loadfn("ColorP3ui") { ptr if !ptr.is_null() => unsafe { storage::ColorP3ui.f = transmute(ptr); storage::ColorP3ui.is_loaded = true; }, _ => unsafe { storage::ColorP3ui.f = transmute(failing::ColorP3ui); storage::ColorP3ui.is_loaded = false; } }
    match loadfn("ColorP3uiv") { ptr if !ptr.is_null() => unsafe { storage::ColorP3uiv.f = transmute(ptr); storage::ColorP3uiv.is_loaded = true; }, _ => unsafe { storage::ColorP3uiv.f = transmute(failing::ColorP3uiv); storage::ColorP3uiv.is_loaded = false; } }
    match loadfn("ColorP4ui") { ptr if !ptr.is_null() => unsafe { storage::ColorP4ui.f = transmute(ptr); storage::ColorP4ui.is_loaded = true; }, _ => unsafe { storage::ColorP4ui.f = transmute(failing::ColorP4ui); storage::ColorP4ui.is_loaded = false; } }
    match loadfn("ColorP4uiv") { ptr if !ptr.is_null() => unsafe { storage::ColorP4uiv.f = transmute(ptr); storage::ColorP4uiv.is_loaded = true; }, _ => unsafe { storage::ColorP4uiv.f = transmute(failing::ColorP4uiv); storage::ColorP4uiv.is_loaded = false; } }
    match loadfn("ColorPointer") { ptr if !ptr.is_null() => unsafe { storage::ColorPointer.f = transmute(ptr); storage::ColorPointer.is_loaded = true; }, _ => unsafe { storage::ColorPointer.f = transmute(failing::ColorPointer); storage::ColorPointer.is_loaded = false; } }
    match loadfn("ColorPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::ColorPointerEXT.f = transmute(ptr); storage::ColorPointerEXT.is_loaded = true; }, _ => unsafe { storage::ColorPointerEXT.f = transmute(failing::ColorPointerEXT); storage::ColorPointerEXT.is_loaded = false; } }
    match loadfn("ColorPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::ColorPointerListIBM.f = transmute(ptr); storage::ColorPointerListIBM.is_loaded = true; }, _ => unsafe { storage::ColorPointerListIBM.f = transmute(failing::ColorPointerListIBM); storage::ColorPointerListIBM.is_loaded = false; } }
    match loadfn("ColorPointervINTEL") { ptr if !ptr.is_null() => unsafe { storage::ColorPointervINTEL.f = transmute(ptr); storage::ColorPointervINTEL.is_loaded = true; }, _ => unsafe { storage::ColorPointervINTEL.f = transmute(failing::ColorPointervINTEL); storage::ColorPointervINTEL.is_loaded = false; } }
    match loadfn("ColorSubTable") { ptr if !ptr.is_null() => unsafe { storage::ColorSubTable.f = transmute(ptr); storage::ColorSubTable.is_loaded = true; }, _ => unsafe { storage::ColorSubTable.f = transmute(failing::ColorSubTable); storage::ColorSubTable.is_loaded = false; } }
    match loadfn("ColorSubTableEXT") { ptr if !ptr.is_null() => unsafe { storage::ColorSubTableEXT.f = transmute(ptr); storage::ColorSubTableEXT.is_loaded = true; }, _ => unsafe { storage::ColorSubTableEXT.f = transmute(failing::ColorSubTableEXT); storage::ColorSubTableEXT.is_loaded = false; } }
    match loadfn("ColorTable") { ptr if !ptr.is_null() => unsafe { storage::ColorTable.f = transmute(ptr); storage::ColorTable.is_loaded = true; }, _ => unsafe { storage::ColorTable.f = transmute(failing::ColorTable); storage::ColorTable.is_loaded = false; } }
    match loadfn("ColorTableEXT") { ptr if !ptr.is_null() => unsafe { storage::ColorTableEXT.f = transmute(ptr); storage::ColorTableEXT.is_loaded = true; }, _ => unsafe { storage::ColorTableEXT.f = transmute(failing::ColorTableEXT); storage::ColorTableEXT.is_loaded = false; } }
    match loadfn("ColorTableParameterfv") { ptr if !ptr.is_null() => unsafe { storage::ColorTableParameterfv.f = transmute(ptr); storage::ColorTableParameterfv.is_loaded = true; }, _ => unsafe { storage::ColorTableParameterfv.f = transmute(failing::ColorTableParameterfv); storage::ColorTableParameterfv.is_loaded = false; } }
    match loadfn("ColorTableParameterfvSGI") { ptr if !ptr.is_null() => unsafe { storage::ColorTableParameterfvSGI.f = transmute(ptr); storage::ColorTableParameterfvSGI.is_loaded = true; }, _ => unsafe { storage::ColorTableParameterfvSGI.f = transmute(failing::ColorTableParameterfvSGI); storage::ColorTableParameterfvSGI.is_loaded = false; } }
    match loadfn("ColorTableParameteriv") { ptr if !ptr.is_null() => unsafe { storage::ColorTableParameteriv.f = transmute(ptr); storage::ColorTableParameteriv.is_loaded = true; }, _ => unsafe { storage::ColorTableParameteriv.f = transmute(failing::ColorTableParameteriv); storage::ColorTableParameteriv.is_loaded = false; } }
    match loadfn("ColorTableParameterivSGI") { ptr if !ptr.is_null() => unsafe { storage::ColorTableParameterivSGI.f = transmute(ptr); storage::ColorTableParameterivSGI.is_loaded = true; }, _ => unsafe { storage::ColorTableParameterivSGI.f = transmute(failing::ColorTableParameterivSGI); storage::ColorTableParameterivSGI.is_loaded = false; } }
    match loadfn("ColorTableSGI") { ptr if !ptr.is_null() => unsafe { storage::ColorTableSGI.f = transmute(ptr); storage::ColorTableSGI.is_loaded = true; }, _ => unsafe { storage::ColorTableSGI.f = transmute(failing::ColorTableSGI); storage::ColorTableSGI.is_loaded = false; } }
    match loadfn("CombinerInputNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerInputNV.f = transmute(ptr); storage::CombinerInputNV.is_loaded = true; }, _ => unsafe { storage::CombinerInputNV.f = transmute(failing::CombinerInputNV); storage::CombinerInputNV.is_loaded = false; } }
    match loadfn("CombinerOutputNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerOutputNV.f = transmute(ptr); storage::CombinerOutputNV.is_loaded = true; }, _ => unsafe { storage::CombinerOutputNV.f = transmute(failing::CombinerOutputNV); storage::CombinerOutputNV.is_loaded = false; } }
    match loadfn("CombinerParameterfNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerParameterfNV.f = transmute(ptr); storage::CombinerParameterfNV.is_loaded = true; }, _ => unsafe { storage::CombinerParameterfNV.f = transmute(failing::CombinerParameterfNV); storage::CombinerParameterfNV.is_loaded = false; } }
    match loadfn("CombinerParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerParameterfvNV.f = transmute(ptr); storage::CombinerParameterfvNV.is_loaded = true; }, _ => unsafe { storage::CombinerParameterfvNV.f = transmute(failing::CombinerParameterfvNV); storage::CombinerParameterfvNV.is_loaded = false; } }
    match loadfn("CombinerParameteriNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerParameteriNV.f = transmute(ptr); storage::CombinerParameteriNV.is_loaded = true; }, _ => unsafe { storage::CombinerParameteriNV.f = transmute(failing::CombinerParameteriNV); storage::CombinerParameteriNV.is_loaded = false; } }
    match loadfn("CombinerParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerParameterivNV.f = transmute(ptr); storage::CombinerParameterivNV.is_loaded = true; }, _ => unsafe { storage::CombinerParameterivNV.f = transmute(failing::CombinerParameterivNV); storage::CombinerParameterivNV.is_loaded = false; } }
    match loadfn("CombinerStageParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerStageParameterfvNV.f = transmute(ptr); storage::CombinerStageParameterfvNV.is_loaded = true; }, _ => unsafe { storage::CombinerStageParameterfvNV.f = transmute(failing::CombinerStageParameterfvNV); storage::CombinerStageParameterfvNV.is_loaded = false; } }
    match loadfn("CompileShader") { ptr if !ptr.is_null() => unsafe { storage::CompileShader.f = transmute(ptr); storage::CompileShader.is_loaded = true; }, _ => unsafe { storage::CompileShader.f = transmute(failing::CompileShader); storage::CompileShader.is_loaded = false; } }
    match loadfn("CompileShaderARB") { ptr if !ptr.is_null() => unsafe { storage::CompileShaderARB.f = transmute(ptr); storage::CompileShaderARB.is_loaded = true; }, _ => unsafe { storage::CompileShaderARB.f = transmute(failing::CompileShaderARB); storage::CompileShaderARB.is_loaded = false; } }
    match loadfn("CompileShaderIncludeARB") { ptr if !ptr.is_null() => unsafe { storage::CompileShaderIncludeARB.f = transmute(ptr); storage::CompileShaderIncludeARB.is_loaded = true; }, _ => unsafe { storage::CompileShaderIncludeARB.f = transmute(failing::CompileShaderIncludeARB); storage::CompileShaderIncludeARB.is_loaded = false; } }
    match loadfn("CompressedMultiTexImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexImage1DEXT.f = transmute(ptr); storage::CompressedMultiTexImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedMultiTexImage1DEXT.f = transmute(failing::CompressedMultiTexImage1DEXT); storage::CompressedMultiTexImage1DEXT.is_loaded = false; } }
    match loadfn("CompressedMultiTexImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexImage2DEXT.f = transmute(ptr); storage::CompressedMultiTexImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedMultiTexImage2DEXT.f = transmute(failing::CompressedMultiTexImage2DEXT); storage::CompressedMultiTexImage2DEXT.is_loaded = false; } }
    match loadfn("CompressedMultiTexImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexImage3DEXT.f = transmute(ptr); storage::CompressedMultiTexImage3DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedMultiTexImage3DEXT.f = transmute(failing::CompressedMultiTexImage3DEXT); storage::CompressedMultiTexImage3DEXT.is_loaded = false; } }
    match loadfn("CompressedMultiTexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexSubImage1DEXT.f = transmute(ptr); storage::CompressedMultiTexSubImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedMultiTexSubImage1DEXT.f = transmute(failing::CompressedMultiTexSubImage1DEXT); storage::CompressedMultiTexSubImage1DEXT.is_loaded = false; } }
    match loadfn("CompressedMultiTexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexSubImage2DEXT.f = transmute(ptr); storage::CompressedMultiTexSubImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedMultiTexSubImage2DEXT.f = transmute(failing::CompressedMultiTexSubImage2DEXT); storage::CompressedMultiTexSubImage2DEXT.is_loaded = false; } }
    match loadfn("CompressedMultiTexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexSubImage3DEXT.f = transmute(ptr); storage::CompressedMultiTexSubImage3DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedMultiTexSubImage3DEXT.f = transmute(failing::CompressedMultiTexSubImage3DEXT); storage::CompressedMultiTexSubImage3DEXT.is_loaded = false; } }
    match loadfn("CompressedTexImage1D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage1D.f = transmute(ptr); storage::CompressedTexImage1D.is_loaded = true; }, _ => unsafe { storage::CompressedTexImage1D.f = transmute(failing::CompressedTexImage1D); storage::CompressedTexImage1D.is_loaded = false; } }
    match loadfn("CompressedTexImage1DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage1DARB.f = transmute(ptr); storage::CompressedTexImage1DARB.is_loaded = true; }, _ => unsafe { storage::CompressedTexImage1DARB.f = transmute(failing::CompressedTexImage1DARB); storage::CompressedTexImage1DARB.is_loaded = false; } }
    match loadfn("CompressedTexImage2D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage2D.f = transmute(ptr); storage::CompressedTexImage2D.is_loaded = true; }, _ => unsafe { storage::CompressedTexImage2D.f = transmute(failing::CompressedTexImage2D); storage::CompressedTexImage2D.is_loaded = false; } }
    match loadfn("CompressedTexImage2DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage2DARB.f = transmute(ptr); storage::CompressedTexImage2DARB.is_loaded = true; }, _ => unsafe { storage::CompressedTexImage2DARB.f = transmute(failing::CompressedTexImage2DARB); storage::CompressedTexImage2DARB.is_loaded = false; } }
    match loadfn("CompressedTexImage3D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage3D.f = transmute(ptr); storage::CompressedTexImage3D.is_loaded = true; }, _ => unsafe { storage::CompressedTexImage3D.f = transmute(failing::CompressedTexImage3D); storage::CompressedTexImage3D.is_loaded = false; } }
    match loadfn("CompressedTexImage3DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage3DARB.f = transmute(ptr); storage::CompressedTexImage3DARB.is_loaded = true; }, _ => unsafe { storage::CompressedTexImage3DARB.f = transmute(failing::CompressedTexImage3DARB); storage::CompressedTexImage3DARB.is_loaded = false; } }
    match loadfn("CompressedTexImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage3DOES.f = transmute(ptr); storage::CompressedTexImage3DOES.is_loaded = true; }, _ => unsafe { storage::CompressedTexImage3DOES.f = transmute(failing::CompressedTexImage3DOES); storage::CompressedTexImage3DOES.is_loaded = false; } }
    match loadfn("CompressedTexSubImage1D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage1D.f = transmute(ptr); storage::CompressedTexSubImage1D.is_loaded = true; }, _ => unsafe { storage::CompressedTexSubImage1D.f = transmute(failing::CompressedTexSubImage1D); storage::CompressedTexSubImage1D.is_loaded = false; } }
    match loadfn("CompressedTexSubImage1DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage1DARB.f = transmute(ptr); storage::CompressedTexSubImage1DARB.is_loaded = true; }, _ => unsafe { storage::CompressedTexSubImage1DARB.f = transmute(failing::CompressedTexSubImage1DARB); storage::CompressedTexSubImage1DARB.is_loaded = false; } }
    match loadfn("CompressedTexSubImage2D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage2D.f = transmute(ptr); storage::CompressedTexSubImage2D.is_loaded = true; }, _ => unsafe { storage::CompressedTexSubImage2D.f = transmute(failing::CompressedTexSubImage2D); storage::CompressedTexSubImage2D.is_loaded = false; } }
    match loadfn("CompressedTexSubImage2DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage2DARB.f = transmute(ptr); storage::CompressedTexSubImage2DARB.is_loaded = true; }, _ => unsafe { storage::CompressedTexSubImage2DARB.f = transmute(failing::CompressedTexSubImage2DARB); storage::CompressedTexSubImage2DARB.is_loaded = false; } }
    match loadfn("CompressedTexSubImage3D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage3D.f = transmute(ptr); storage::CompressedTexSubImage3D.is_loaded = true; }, _ => unsafe { storage::CompressedTexSubImage3D.f = transmute(failing::CompressedTexSubImage3D); storage::CompressedTexSubImage3D.is_loaded = false; } }
    match loadfn("CompressedTexSubImage3DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage3DARB.f = transmute(ptr); storage::CompressedTexSubImage3DARB.is_loaded = true; }, _ => unsafe { storage::CompressedTexSubImage3DARB.f = transmute(failing::CompressedTexSubImage3DARB); storage::CompressedTexSubImage3DARB.is_loaded = false; } }
    match loadfn("CompressedTexSubImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage3DOES.f = transmute(ptr); storage::CompressedTexSubImage3DOES.is_loaded = true; }, _ => unsafe { storage::CompressedTexSubImage3DOES.f = transmute(failing::CompressedTexSubImage3DOES); storage::CompressedTexSubImage3DOES.is_loaded = false; } }
    match loadfn("CompressedTextureImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureImage1DEXT.f = transmute(ptr); storage::CompressedTextureImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedTextureImage1DEXT.f = transmute(failing::CompressedTextureImage1DEXT); storage::CompressedTextureImage1DEXT.is_loaded = false; } }
    match loadfn("CompressedTextureImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureImage2DEXT.f = transmute(ptr); storage::CompressedTextureImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedTextureImage2DEXT.f = transmute(failing::CompressedTextureImage2DEXT); storage::CompressedTextureImage2DEXT.is_loaded = false; } }
    match loadfn("CompressedTextureImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureImage3DEXT.f = transmute(ptr); storage::CompressedTextureImage3DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedTextureImage3DEXT.f = transmute(failing::CompressedTextureImage3DEXT); storage::CompressedTextureImage3DEXT.is_loaded = false; } }
    match loadfn("CompressedTextureSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureSubImage1DEXT.f = transmute(ptr); storage::CompressedTextureSubImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedTextureSubImage1DEXT.f = transmute(failing::CompressedTextureSubImage1DEXT); storage::CompressedTextureSubImage1DEXT.is_loaded = false; } }
    match loadfn("CompressedTextureSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureSubImage2DEXT.f = transmute(ptr); storage::CompressedTextureSubImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedTextureSubImage2DEXT.f = transmute(failing::CompressedTextureSubImage2DEXT); storage::CompressedTextureSubImage2DEXT.is_loaded = false; } }
    match loadfn("CompressedTextureSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureSubImage3DEXT.f = transmute(ptr); storage::CompressedTextureSubImage3DEXT.is_loaded = true; }, _ => unsafe { storage::CompressedTextureSubImage3DEXT.f = transmute(failing::CompressedTextureSubImage3DEXT); storage::CompressedTextureSubImage3DEXT.is_loaded = false; } }
    match loadfn("ConvolutionFilter1D") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionFilter1D.f = transmute(ptr); storage::ConvolutionFilter1D.is_loaded = true; }, _ => unsafe { storage::ConvolutionFilter1D.f = transmute(failing::ConvolutionFilter1D); storage::ConvolutionFilter1D.is_loaded = false; } }
    match loadfn("ConvolutionFilter1DEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionFilter1DEXT.f = transmute(ptr); storage::ConvolutionFilter1DEXT.is_loaded = true; }, _ => unsafe { storage::ConvolutionFilter1DEXT.f = transmute(failing::ConvolutionFilter1DEXT); storage::ConvolutionFilter1DEXT.is_loaded = false; } }
    match loadfn("ConvolutionFilter2D") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionFilter2D.f = transmute(ptr); storage::ConvolutionFilter2D.is_loaded = true; }, _ => unsafe { storage::ConvolutionFilter2D.f = transmute(failing::ConvolutionFilter2D); storage::ConvolutionFilter2D.is_loaded = false; } }
    match loadfn("ConvolutionFilter2DEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionFilter2DEXT.f = transmute(ptr); storage::ConvolutionFilter2DEXT.is_loaded = true; }, _ => unsafe { storage::ConvolutionFilter2DEXT.f = transmute(failing::ConvolutionFilter2DEXT); storage::ConvolutionFilter2DEXT.is_loaded = false; } }
    match loadfn("ConvolutionParameterf") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterf.f = transmute(ptr); storage::ConvolutionParameterf.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameterf.f = transmute(failing::ConvolutionParameterf); storage::ConvolutionParameterf.is_loaded = false; } }
    match loadfn("ConvolutionParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterfEXT.f = transmute(ptr); storage::ConvolutionParameterfEXT.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameterfEXT.f = transmute(failing::ConvolutionParameterfEXT); storage::ConvolutionParameterfEXT.is_loaded = false; } }
    match loadfn("ConvolutionParameterfv") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterfv.f = transmute(ptr); storage::ConvolutionParameterfv.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameterfv.f = transmute(failing::ConvolutionParameterfv); storage::ConvolutionParameterfv.is_loaded = false; } }
    match loadfn("ConvolutionParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterfvEXT.f = transmute(ptr); storage::ConvolutionParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameterfvEXT.f = transmute(failing::ConvolutionParameterfvEXT); storage::ConvolutionParameterfvEXT.is_loaded = false; } }
    match loadfn("ConvolutionParameteri") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameteri.f = transmute(ptr); storage::ConvolutionParameteri.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameteri.f = transmute(failing::ConvolutionParameteri); storage::ConvolutionParameteri.is_loaded = false; } }
    match loadfn("ConvolutionParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameteriEXT.f = transmute(ptr); storage::ConvolutionParameteriEXT.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameteriEXT.f = transmute(failing::ConvolutionParameteriEXT); storage::ConvolutionParameteriEXT.is_loaded = false; } }
    match loadfn("ConvolutionParameteriv") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameteriv.f = transmute(ptr); storage::ConvolutionParameteriv.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameteriv.f = transmute(failing::ConvolutionParameteriv); storage::ConvolutionParameteriv.is_loaded = false; } }
    match loadfn("ConvolutionParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterivEXT.f = transmute(ptr); storage::ConvolutionParameterivEXT.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameterivEXT.f = transmute(failing::ConvolutionParameterivEXT); storage::ConvolutionParameterivEXT.is_loaded = false; } }
    match loadfn("ConvolutionParameterxOES") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterxOES.f = transmute(ptr); storage::ConvolutionParameterxOES.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameterxOES.f = transmute(failing::ConvolutionParameterxOES); storage::ConvolutionParameterxOES.is_loaded = false; } }
    match loadfn("ConvolutionParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterxvOES.f = transmute(ptr); storage::ConvolutionParameterxvOES.is_loaded = true; }, _ => unsafe { storage::ConvolutionParameterxvOES.f = transmute(failing::ConvolutionParameterxvOES); storage::ConvolutionParameterxvOES.is_loaded = false; } }
    match loadfn("CopyBufferSubData") { ptr if !ptr.is_null() => unsafe { storage::CopyBufferSubData.f = transmute(ptr); storage::CopyBufferSubData.is_loaded = true; }, _ => unsafe { storage::CopyBufferSubData.f = transmute(failing::CopyBufferSubData); storage::CopyBufferSubData.is_loaded = false; } }
    match loadfn("CopyColorSubTable") { ptr if !ptr.is_null() => unsafe { storage::CopyColorSubTable.f = transmute(ptr); storage::CopyColorSubTable.is_loaded = true; }, _ => unsafe { storage::CopyColorSubTable.f = transmute(failing::CopyColorSubTable); storage::CopyColorSubTable.is_loaded = false; } }
    match loadfn("CopyColorSubTableEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyColorSubTableEXT.f = transmute(ptr); storage::CopyColorSubTableEXT.is_loaded = true; }, _ => unsafe { storage::CopyColorSubTableEXT.f = transmute(failing::CopyColorSubTableEXT); storage::CopyColorSubTableEXT.is_loaded = false; } }
    match loadfn("CopyColorTable") { ptr if !ptr.is_null() => unsafe { storage::CopyColorTable.f = transmute(ptr); storage::CopyColorTable.is_loaded = true; }, _ => unsafe { storage::CopyColorTable.f = transmute(failing::CopyColorTable); storage::CopyColorTable.is_loaded = false; } }
    match loadfn("CopyColorTableSGI") { ptr if !ptr.is_null() => unsafe { storage::CopyColorTableSGI.f = transmute(ptr); storage::CopyColorTableSGI.is_loaded = true; }, _ => unsafe { storage::CopyColorTableSGI.f = transmute(failing::CopyColorTableSGI); storage::CopyColorTableSGI.is_loaded = false; } }
    match loadfn("CopyConvolutionFilter1D") { ptr if !ptr.is_null() => unsafe { storage::CopyConvolutionFilter1D.f = transmute(ptr); storage::CopyConvolutionFilter1D.is_loaded = true; }, _ => unsafe { storage::CopyConvolutionFilter1D.f = transmute(failing::CopyConvolutionFilter1D); storage::CopyConvolutionFilter1D.is_loaded = false; } }
    match loadfn("CopyConvolutionFilter1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyConvolutionFilter1DEXT.f = transmute(ptr); storage::CopyConvolutionFilter1DEXT.is_loaded = true; }, _ => unsafe { storage::CopyConvolutionFilter1DEXT.f = transmute(failing::CopyConvolutionFilter1DEXT); storage::CopyConvolutionFilter1DEXT.is_loaded = false; } }
    match loadfn("CopyConvolutionFilter2D") { ptr if !ptr.is_null() => unsafe { storage::CopyConvolutionFilter2D.f = transmute(ptr); storage::CopyConvolutionFilter2D.is_loaded = true; }, _ => unsafe { storage::CopyConvolutionFilter2D.f = transmute(failing::CopyConvolutionFilter2D); storage::CopyConvolutionFilter2D.is_loaded = false; } }
    match loadfn("CopyConvolutionFilter2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyConvolutionFilter2DEXT.f = transmute(ptr); storage::CopyConvolutionFilter2DEXT.is_loaded = true; }, _ => unsafe { storage::CopyConvolutionFilter2DEXT.f = transmute(failing::CopyConvolutionFilter2DEXT); storage::CopyConvolutionFilter2DEXT.is_loaded = false; } }
    match loadfn("CopyImageSubData") { ptr if !ptr.is_null() => unsafe { storage::CopyImageSubData.f = transmute(ptr); storage::CopyImageSubData.is_loaded = true; }, _ => unsafe { storage::CopyImageSubData.f = transmute(failing::CopyImageSubData); storage::CopyImageSubData.is_loaded = false; } }
    match loadfn("CopyImageSubDataNV") { ptr if !ptr.is_null() => unsafe { storage::CopyImageSubDataNV.f = transmute(ptr); storage::CopyImageSubDataNV.is_loaded = true; }, _ => unsafe { storage::CopyImageSubDataNV.f = transmute(failing::CopyImageSubDataNV); storage::CopyImageSubDataNV.is_loaded = false; } }
    match loadfn("CopyMultiTexImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexImage1DEXT.f = transmute(ptr); storage::CopyMultiTexImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CopyMultiTexImage1DEXT.f = transmute(failing::CopyMultiTexImage1DEXT); storage::CopyMultiTexImage1DEXT.is_loaded = false; } }
    match loadfn("CopyMultiTexImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexImage2DEXT.f = transmute(ptr); storage::CopyMultiTexImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CopyMultiTexImage2DEXT.f = transmute(failing::CopyMultiTexImage2DEXT); storage::CopyMultiTexImage2DEXT.is_loaded = false; } }
    match loadfn("CopyMultiTexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexSubImage1DEXT.f = transmute(ptr); storage::CopyMultiTexSubImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CopyMultiTexSubImage1DEXT.f = transmute(failing::CopyMultiTexSubImage1DEXT); storage::CopyMultiTexSubImage1DEXT.is_loaded = false; } }
    match loadfn("CopyMultiTexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexSubImage2DEXT.f = transmute(ptr); storage::CopyMultiTexSubImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CopyMultiTexSubImage2DEXT.f = transmute(failing::CopyMultiTexSubImage2DEXT); storage::CopyMultiTexSubImage2DEXT.is_loaded = false; } }
    match loadfn("CopyMultiTexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexSubImage3DEXT.f = transmute(ptr); storage::CopyMultiTexSubImage3DEXT.is_loaded = true; }, _ => unsafe { storage::CopyMultiTexSubImage3DEXT.f = transmute(failing::CopyMultiTexSubImage3DEXT); storage::CopyMultiTexSubImage3DEXT.is_loaded = false; } }
    match loadfn("CopyPathNV") { ptr if !ptr.is_null() => unsafe { storage::CopyPathNV.f = transmute(ptr); storage::CopyPathNV.is_loaded = true; }, _ => unsafe { storage::CopyPathNV.f = transmute(failing::CopyPathNV); storage::CopyPathNV.is_loaded = false; } }
    match loadfn("CopyPixels") { ptr if !ptr.is_null() => unsafe { storage::CopyPixels.f = transmute(ptr); storage::CopyPixels.is_loaded = true; }, _ => unsafe { storage::CopyPixels.f = transmute(failing::CopyPixels); storage::CopyPixels.is_loaded = false; } }
    match loadfn("CopyTexImage1D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexImage1D.f = transmute(ptr); storage::CopyTexImage1D.is_loaded = true; }, _ => unsafe { storage::CopyTexImage1D.f = transmute(failing::CopyTexImage1D); storage::CopyTexImage1D.is_loaded = false; } }
    match loadfn("CopyTexImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexImage1DEXT.f = transmute(ptr); storage::CopyTexImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTexImage1DEXT.f = transmute(failing::CopyTexImage1DEXT); storage::CopyTexImage1DEXT.is_loaded = false; } }
    match loadfn("CopyTexImage2D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexImage2D.f = transmute(ptr); storage::CopyTexImage2D.is_loaded = true; }, _ => unsafe { storage::CopyTexImage2D.f = transmute(failing::CopyTexImage2D); storage::CopyTexImage2D.is_loaded = false; } }
    match loadfn("CopyTexImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexImage2DEXT.f = transmute(ptr); storage::CopyTexImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTexImage2DEXT.f = transmute(failing::CopyTexImage2DEXT); storage::CopyTexImage2DEXT.is_loaded = false; } }
    match loadfn("CopyTexSubImage1D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage1D.f = transmute(ptr); storage::CopyTexSubImage1D.is_loaded = true; }, _ => unsafe { storage::CopyTexSubImage1D.f = transmute(failing::CopyTexSubImage1D); storage::CopyTexSubImage1D.is_loaded = false; } }
    match loadfn("CopyTexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage1DEXT.f = transmute(ptr); storage::CopyTexSubImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTexSubImage1DEXT.f = transmute(failing::CopyTexSubImage1DEXT); storage::CopyTexSubImage1DEXT.is_loaded = false; } }
    match loadfn("CopyTexSubImage2D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage2D.f = transmute(ptr); storage::CopyTexSubImage2D.is_loaded = true; }, _ => unsafe { storage::CopyTexSubImage2D.f = transmute(failing::CopyTexSubImage2D); storage::CopyTexSubImage2D.is_loaded = false; } }
    match loadfn("CopyTexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage2DEXT.f = transmute(ptr); storage::CopyTexSubImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTexSubImage2DEXT.f = transmute(failing::CopyTexSubImage2DEXT); storage::CopyTexSubImage2DEXT.is_loaded = false; } }
    match loadfn("CopyTexSubImage3D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage3D.f = transmute(ptr); storage::CopyTexSubImage3D.is_loaded = true; }, _ => unsafe { storage::CopyTexSubImage3D.f = transmute(failing::CopyTexSubImage3D); storage::CopyTexSubImage3D.is_loaded = false; } }
    match loadfn("CopyTexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage3DEXT.f = transmute(ptr); storage::CopyTexSubImage3DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTexSubImage3DEXT.f = transmute(failing::CopyTexSubImage3DEXT); storage::CopyTexSubImage3DEXT.is_loaded = false; } }
    match loadfn("CopyTexSubImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage3DOES.f = transmute(ptr); storage::CopyTexSubImage3DOES.is_loaded = true; }, _ => unsafe { storage::CopyTexSubImage3DOES.f = transmute(failing::CopyTexSubImage3DOES); storage::CopyTexSubImage3DOES.is_loaded = false; } }
    match loadfn("CopyTextureImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureImage1DEXT.f = transmute(ptr); storage::CopyTextureImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTextureImage1DEXT.f = transmute(failing::CopyTextureImage1DEXT); storage::CopyTextureImage1DEXT.is_loaded = false; } }
    match loadfn("CopyTextureImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureImage2DEXT.f = transmute(ptr); storage::CopyTextureImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTextureImage2DEXT.f = transmute(failing::CopyTextureImage2DEXT); storage::CopyTextureImage2DEXT.is_loaded = false; } }
    match loadfn("CopyTextureLevelsAPPLE") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureLevelsAPPLE.f = transmute(ptr); storage::CopyTextureLevelsAPPLE.is_loaded = true; }, _ => unsafe { storage::CopyTextureLevelsAPPLE.f = transmute(failing::CopyTextureLevelsAPPLE); storage::CopyTextureLevelsAPPLE.is_loaded = false; } }
    match loadfn("CopyTextureSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureSubImage1DEXT.f = transmute(ptr); storage::CopyTextureSubImage1DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTextureSubImage1DEXT.f = transmute(failing::CopyTextureSubImage1DEXT); storage::CopyTextureSubImage1DEXT.is_loaded = false; } }
    match loadfn("CopyTextureSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureSubImage2DEXT.f = transmute(ptr); storage::CopyTextureSubImage2DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTextureSubImage2DEXT.f = transmute(failing::CopyTextureSubImage2DEXT); storage::CopyTextureSubImage2DEXT.is_loaded = false; } }
    match loadfn("CopyTextureSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureSubImage3DEXT.f = transmute(ptr); storage::CopyTextureSubImage3DEXT.is_loaded = true; }, _ => unsafe { storage::CopyTextureSubImage3DEXT.f = transmute(failing::CopyTextureSubImage3DEXT); storage::CopyTextureSubImage3DEXT.is_loaded = false; } }
    match loadfn("CoverFillPathInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::CoverFillPathInstancedNV.f = transmute(ptr); storage::CoverFillPathInstancedNV.is_loaded = true; }, _ => unsafe { storage::CoverFillPathInstancedNV.f = transmute(failing::CoverFillPathInstancedNV); storage::CoverFillPathInstancedNV.is_loaded = false; } }
    match loadfn("CoverFillPathNV") { ptr if !ptr.is_null() => unsafe { storage::CoverFillPathNV.f = transmute(ptr); storage::CoverFillPathNV.is_loaded = true; }, _ => unsafe { storage::CoverFillPathNV.f = transmute(failing::CoverFillPathNV); storage::CoverFillPathNV.is_loaded = false; } }
    match loadfn("CoverStrokePathInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::CoverStrokePathInstancedNV.f = transmute(ptr); storage::CoverStrokePathInstancedNV.is_loaded = true; }, _ => unsafe { storage::CoverStrokePathInstancedNV.f = transmute(failing::CoverStrokePathInstancedNV); storage::CoverStrokePathInstancedNV.is_loaded = false; } }
    match loadfn("CoverStrokePathNV") { ptr if !ptr.is_null() => unsafe { storage::CoverStrokePathNV.f = transmute(ptr); storage::CoverStrokePathNV.is_loaded = true; }, _ => unsafe { storage::CoverStrokePathNV.f = transmute(failing::CoverStrokePathNV); storage::CoverStrokePathNV.is_loaded = false; } }
    match loadfn("CoverageMaskNV") { ptr if !ptr.is_null() => unsafe { storage::CoverageMaskNV.f = transmute(ptr); storage::CoverageMaskNV.is_loaded = true; }, _ => unsafe { storage::CoverageMaskNV.f = transmute(failing::CoverageMaskNV); storage::CoverageMaskNV.is_loaded = false; } }
    match loadfn("CoverageOperationNV") { ptr if !ptr.is_null() => unsafe { storage::CoverageOperationNV.f = transmute(ptr); storage::CoverageOperationNV.is_loaded = true; }, _ => unsafe { storage::CoverageOperationNV.f = transmute(failing::CoverageOperationNV); storage::CoverageOperationNV.is_loaded = false; } }
    match loadfn("CreateProgram") { ptr if !ptr.is_null() => unsafe { storage::CreateProgram.f = transmute(ptr); storage::CreateProgram.is_loaded = true; }, _ => unsafe { storage::CreateProgram.f = transmute(failing::CreateProgram); storage::CreateProgram.is_loaded = false; } }
    match loadfn("CreateProgramObjectARB") { ptr if !ptr.is_null() => unsafe { storage::CreateProgramObjectARB.f = transmute(ptr); storage::CreateProgramObjectARB.is_loaded = true; }, _ => unsafe { storage::CreateProgramObjectARB.f = transmute(failing::CreateProgramObjectARB); storage::CreateProgramObjectARB.is_loaded = false; } }
    match loadfn("CreateShader") { ptr if !ptr.is_null() => unsafe { storage::CreateShader.f = transmute(ptr); storage::CreateShader.is_loaded = true; }, _ => unsafe { storage::CreateShader.f = transmute(failing::CreateShader); storage::CreateShader.is_loaded = false; } }
    match loadfn("CreateShaderObjectARB") { ptr if !ptr.is_null() => unsafe { storage::CreateShaderObjectARB.f = transmute(ptr); storage::CreateShaderObjectARB.is_loaded = true; }, _ => unsafe { storage::CreateShaderObjectARB.f = transmute(failing::CreateShaderObjectARB); storage::CreateShaderObjectARB.is_loaded = false; } }
    match loadfn("CreateShaderProgramEXT") { ptr if !ptr.is_null() => unsafe { storage::CreateShaderProgramEXT.f = transmute(ptr); storage::CreateShaderProgramEXT.is_loaded = true; }, _ => unsafe { storage::CreateShaderProgramEXT.f = transmute(failing::CreateShaderProgramEXT); storage::CreateShaderProgramEXT.is_loaded = false; } }
    match loadfn("CreateShaderProgramv") { ptr if !ptr.is_null() => unsafe { storage::CreateShaderProgramv.f = transmute(ptr); storage::CreateShaderProgramv.is_loaded = true; }, _ => unsafe { storage::CreateShaderProgramv.f = transmute(failing::CreateShaderProgramv); storage::CreateShaderProgramv.is_loaded = false; } }
    match loadfn("CreateShaderProgramvEXT") { ptr if !ptr.is_null() => unsafe { storage::CreateShaderProgramvEXT.f = transmute(ptr); storage::CreateShaderProgramvEXT.is_loaded = true; }, _ => unsafe { storage::CreateShaderProgramvEXT.f = transmute(failing::CreateShaderProgramvEXT); storage::CreateShaderProgramvEXT.is_loaded = false; } }
    match loadfn("CreateSyncFromCLeventARB") { ptr if !ptr.is_null() => unsafe { storage::CreateSyncFromCLeventARB.f = transmute(ptr); storage::CreateSyncFromCLeventARB.is_loaded = true; }, _ => unsafe { storage::CreateSyncFromCLeventARB.f = transmute(failing::CreateSyncFromCLeventARB); storage::CreateSyncFromCLeventARB.is_loaded = false; } }
    match loadfn("CullFace") { ptr if !ptr.is_null() => unsafe { storage::CullFace.f = transmute(ptr); storage::CullFace.is_loaded = true; }, _ => unsafe { storage::CullFace.f = transmute(failing::CullFace); storage::CullFace.is_loaded = false; } }
    match loadfn("CullParameterdvEXT") { ptr if !ptr.is_null() => unsafe { storage::CullParameterdvEXT.f = transmute(ptr); storage::CullParameterdvEXT.is_loaded = true; }, _ => unsafe { storage::CullParameterdvEXT.f = transmute(failing::CullParameterdvEXT); storage::CullParameterdvEXT.is_loaded = false; } }
    match loadfn("CullParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::CullParameterfvEXT.f = transmute(ptr); storage::CullParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::CullParameterfvEXT.f = transmute(failing::CullParameterfvEXT); storage::CullParameterfvEXT.is_loaded = false; } }
    match loadfn("CurrentPaletteMatrixARB") { ptr if !ptr.is_null() => unsafe { storage::CurrentPaletteMatrixARB.f = transmute(ptr); storage::CurrentPaletteMatrixARB.is_loaded = true; }, _ => unsafe { storage::CurrentPaletteMatrixARB.f = transmute(failing::CurrentPaletteMatrixARB); storage::CurrentPaletteMatrixARB.is_loaded = false; } }
    match loadfn("CurrentPaletteMatrixOES") { ptr if !ptr.is_null() => unsafe { storage::CurrentPaletteMatrixOES.f = transmute(ptr); storage::CurrentPaletteMatrixOES.is_loaded = true; }, _ => unsafe { storage::CurrentPaletteMatrixOES.f = transmute(failing::CurrentPaletteMatrixOES); storage::CurrentPaletteMatrixOES.is_loaded = false; } }
    match loadfn("DebugMessageCallback") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageCallback.f = transmute(ptr); storage::DebugMessageCallback.is_loaded = true; }, _ => unsafe { storage::DebugMessageCallback.f = transmute(failing::DebugMessageCallback); storage::DebugMessageCallback.is_loaded = false; } }
    match loadfn("DebugMessageCallbackAMD") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageCallbackAMD.f = transmute(ptr); storage::DebugMessageCallbackAMD.is_loaded = true; }, _ => unsafe { storage::DebugMessageCallbackAMD.f = transmute(failing::DebugMessageCallbackAMD); storage::DebugMessageCallbackAMD.is_loaded = false; } }
    match loadfn("DebugMessageCallbackARB") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageCallbackARB.f = transmute(ptr); storage::DebugMessageCallbackARB.is_loaded = true; }, _ => unsafe { storage::DebugMessageCallbackARB.f = transmute(failing::DebugMessageCallbackARB); storage::DebugMessageCallbackARB.is_loaded = false; } }
    match loadfn("DebugMessageCallbackKHR") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageCallbackKHR.f = transmute(ptr); storage::DebugMessageCallbackKHR.is_loaded = true; }, _ => unsafe { storage::DebugMessageCallbackKHR.f = transmute(failing::DebugMessageCallbackKHR); storage::DebugMessageCallbackKHR.is_loaded = false; } }
    match loadfn("DebugMessageControl") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageControl.f = transmute(ptr); storage::DebugMessageControl.is_loaded = true; }, _ => unsafe { storage::DebugMessageControl.f = transmute(failing::DebugMessageControl); storage::DebugMessageControl.is_loaded = false; } }
    match loadfn("DebugMessageControlARB") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageControlARB.f = transmute(ptr); storage::DebugMessageControlARB.is_loaded = true; }, _ => unsafe { storage::DebugMessageControlARB.f = transmute(failing::DebugMessageControlARB); storage::DebugMessageControlARB.is_loaded = false; } }
    match loadfn("DebugMessageControlKHR") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageControlKHR.f = transmute(ptr); storage::DebugMessageControlKHR.is_loaded = true; }, _ => unsafe { storage::DebugMessageControlKHR.f = transmute(failing::DebugMessageControlKHR); storage::DebugMessageControlKHR.is_loaded = false; } }
    match loadfn("DebugMessageEnableAMD") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageEnableAMD.f = transmute(ptr); storage::DebugMessageEnableAMD.is_loaded = true; }, _ => unsafe { storage::DebugMessageEnableAMD.f = transmute(failing::DebugMessageEnableAMD); storage::DebugMessageEnableAMD.is_loaded = false; } }
    match loadfn("DebugMessageInsert") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageInsert.f = transmute(ptr); storage::DebugMessageInsert.is_loaded = true; }, _ => unsafe { storage::DebugMessageInsert.f = transmute(failing::DebugMessageInsert); storage::DebugMessageInsert.is_loaded = false; } }
    match loadfn("DebugMessageInsertAMD") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageInsertAMD.f = transmute(ptr); storage::DebugMessageInsertAMD.is_loaded = true; }, _ => unsafe { storage::DebugMessageInsertAMD.f = transmute(failing::DebugMessageInsertAMD); storage::DebugMessageInsertAMD.is_loaded = false; } }
    match loadfn("DebugMessageInsertARB") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageInsertARB.f = transmute(ptr); storage::DebugMessageInsertARB.is_loaded = true; }, _ => unsafe { storage::DebugMessageInsertARB.f = transmute(failing::DebugMessageInsertARB); storage::DebugMessageInsertARB.is_loaded = false; } }
    match loadfn("DebugMessageInsertKHR") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageInsertKHR.f = transmute(ptr); storage::DebugMessageInsertKHR.is_loaded = true; }, _ => unsafe { storage::DebugMessageInsertKHR.f = transmute(failing::DebugMessageInsertKHR); storage::DebugMessageInsertKHR.is_loaded = false; } }
    match loadfn("DeformSGIX") { ptr if !ptr.is_null() => unsafe { storage::DeformSGIX.f = transmute(ptr); storage::DeformSGIX.is_loaded = true; }, _ => unsafe { storage::DeformSGIX.f = transmute(failing::DeformSGIX); storage::DeformSGIX.is_loaded = false; } }
    match loadfn("DeformationMap3dSGIX") { ptr if !ptr.is_null() => unsafe { storage::DeformationMap3dSGIX.f = transmute(ptr); storage::DeformationMap3dSGIX.is_loaded = true; }, _ => unsafe { storage::DeformationMap3dSGIX.f = transmute(failing::DeformationMap3dSGIX); storage::DeformationMap3dSGIX.is_loaded = false; } }
    match loadfn("DeformationMap3fSGIX") { ptr if !ptr.is_null() => unsafe { storage::DeformationMap3fSGIX.f = transmute(ptr); storage::DeformationMap3fSGIX.is_loaded = true; }, _ => unsafe { storage::DeformationMap3fSGIX.f = transmute(failing::DeformationMap3fSGIX); storage::DeformationMap3fSGIX.is_loaded = false; } }
    match loadfn("DeleteAsyncMarkersSGIX") { ptr if !ptr.is_null() => unsafe { storage::DeleteAsyncMarkersSGIX.f = transmute(ptr); storage::DeleteAsyncMarkersSGIX.is_loaded = true; }, _ => unsafe { storage::DeleteAsyncMarkersSGIX.f = transmute(failing::DeleteAsyncMarkersSGIX); storage::DeleteAsyncMarkersSGIX.is_loaded = false; } }
    match loadfn("DeleteBuffers") { ptr if !ptr.is_null() => unsafe { storage::DeleteBuffers.f = transmute(ptr); storage::DeleteBuffers.is_loaded = true; }, _ => unsafe { storage::DeleteBuffers.f = transmute(failing::DeleteBuffers); storage::DeleteBuffers.is_loaded = false; } }
    match loadfn("DeleteBuffersARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteBuffersARB.f = transmute(ptr); storage::DeleteBuffersARB.is_loaded = true; }, _ => unsafe { storage::DeleteBuffersARB.f = transmute(failing::DeleteBuffersARB); storage::DeleteBuffersARB.is_loaded = false; } }
    match loadfn("DeleteFencesAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DeleteFencesAPPLE.f = transmute(ptr); storage::DeleteFencesAPPLE.is_loaded = true; }, _ => unsafe { storage::DeleteFencesAPPLE.f = transmute(failing::DeleteFencesAPPLE); storage::DeleteFencesAPPLE.is_loaded = false; } }
    match loadfn("DeleteFencesNV") { ptr if !ptr.is_null() => unsafe { storage::DeleteFencesNV.f = transmute(ptr); storage::DeleteFencesNV.is_loaded = true; }, _ => unsafe { storage::DeleteFencesNV.f = transmute(failing::DeleteFencesNV); storage::DeleteFencesNV.is_loaded = false; } }
    match loadfn("DeleteFragmentShaderATI") { ptr if !ptr.is_null() => unsafe { storage::DeleteFragmentShaderATI.f = transmute(ptr); storage::DeleteFragmentShaderATI.is_loaded = true; }, _ => unsafe { storage::DeleteFragmentShaderATI.f = transmute(failing::DeleteFragmentShaderATI); storage::DeleteFragmentShaderATI.is_loaded = false; } }
    match loadfn("DeleteFramebuffers") { ptr if !ptr.is_null() => unsafe { storage::DeleteFramebuffers.f = transmute(ptr); storage::DeleteFramebuffers.is_loaded = true; }, _ => unsafe { storage::DeleteFramebuffers.f = transmute(failing::DeleteFramebuffers); storage::DeleteFramebuffers.is_loaded = false; } }
    match loadfn("DeleteFramebuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteFramebuffersEXT.f = transmute(ptr); storage::DeleteFramebuffersEXT.is_loaded = true; }, _ => unsafe { storage::DeleteFramebuffersEXT.f = transmute(failing::DeleteFramebuffersEXT); storage::DeleteFramebuffersEXT.is_loaded = false; } }
    match loadfn("DeleteFramebuffersOES") { ptr if !ptr.is_null() => unsafe { storage::DeleteFramebuffersOES.f = transmute(ptr); storage::DeleteFramebuffersOES.is_loaded = true; }, _ => unsafe { storage::DeleteFramebuffersOES.f = transmute(failing::DeleteFramebuffersOES); storage::DeleteFramebuffersOES.is_loaded = false; } }
    match loadfn("DeleteLists") { ptr if !ptr.is_null() => unsafe { storage::DeleteLists.f = transmute(ptr); storage::DeleteLists.is_loaded = true; }, _ => unsafe { storage::DeleteLists.f = transmute(failing::DeleteLists); storage::DeleteLists.is_loaded = false; } }
    match loadfn("DeleteNamedStringARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteNamedStringARB.f = transmute(ptr); storage::DeleteNamedStringARB.is_loaded = true; }, _ => unsafe { storage::DeleteNamedStringARB.f = transmute(failing::DeleteNamedStringARB); storage::DeleteNamedStringARB.is_loaded = false; } }
    match loadfn("DeleteNamesAMD") { ptr if !ptr.is_null() => unsafe { storage::DeleteNamesAMD.f = transmute(ptr); storage::DeleteNamesAMD.is_loaded = true; }, _ => unsafe { storage::DeleteNamesAMD.f = transmute(failing::DeleteNamesAMD); storage::DeleteNamesAMD.is_loaded = false; } }
    match loadfn("DeleteObjectARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteObjectARB.f = transmute(ptr); storage::DeleteObjectARB.is_loaded = true; }, _ => unsafe { storage::DeleteObjectARB.f = transmute(failing::DeleteObjectARB); storage::DeleteObjectARB.is_loaded = false; } }
    match loadfn("DeleteOcclusionQueriesNV") { ptr if !ptr.is_null() => unsafe { storage::DeleteOcclusionQueriesNV.f = transmute(ptr); storage::DeleteOcclusionQueriesNV.is_loaded = true; }, _ => unsafe { storage::DeleteOcclusionQueriesNV.f = transmute(failing::DeleteOcclusionQueriesNV); storage::DeleteOcclusionQueriesNV.is_loaded = false; } }
    match loadfn("DeletePathsNV") { ptr if !ptr.is_null() => unsafe { storage::DeletePathsNV.f = transmute(ptr); storage::DeletePathsNV.is_loaded = true; }, _ => unsafe { storage::DeletePathsNV.f = transmute(failing::DeletePathsNV); storage::DeletePathsNV.is_loaded = false; } }
    match loadfn("DeletePerfMonitorsAMD") { ptr if !ptr.is_null() => unsafe { storage::DeletePerfMonitorsAMD.f = transmute(ptr); storage::DeletePerfMonitorsAMD.is_loaded = true; }, _ => unsafe { storage::DeletePerfMonitorsAMD.f = transmute(failing::DeletePerfMonitorsAMD); storage::DeletePerfMonitorsAMD.is_loaded = false; } }
    match loadfn("DeleteProgram") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgram.f = transmute(ptr); storage::DeleteProgram.is_loaded = true; }, _ => unsafe { storage::DeleteProgram.f = transmute(failing::DeleteProgram); storage::DeleteProgram.is_loaded = false; } }
    match loadfn("DeleteProgramPipelines") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgramPipelines.f = transmute(ptr); storage::DeleteProgramPipelines.is_loaded = true; }, _ => unsafe { storage::DeleteProgramPipelines.f = transmute(failing::DeleteProgramPipelines); storage::DeleteProgramPipelines.is_loaded = false; } }
    match loadfn("DeleteProgramPipelinesEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgramPipelinesEXT.f = transmute(ptr); storage::DeleteProgramPipelinesEXT.is_loaded = true; }, _ => unsafe { storage::DeleteProgramPipelinesEXT.f = transmute(failing::DeleteProgramPipelinesEXT); storage::DeleteProgramPipelinesEXT.is_loaded = false; } }
    match loadfn("DeleteProgramsARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgramsARB.f = transmute(ptr); storage::DeleteProgramsARB.is_loaded = true; }, _ => unsafe { storage::DeleteProgramsARB.f = transmute(failing::DeleteProgramsARB); storage::DeleteProgramsARB.is_loaded = false; } }
    match loadfn("DeleteProgramsNV") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgramsNV.f = transmute(ptr); storage::DeleteProgramsNV.is_loaded = true; }, _ => unsafe { storage::DeleteProgramsNV.f = transmute(failing::DeleteProgramsNV); storage::DeleteProgramsNV.is_loaded = false; } }
    match loadfn("DeleteQueries") { ptr if !ptr.is_null() => unsafe { storage::DeleteQueries.f = transmute(ptr); storage::DeleteQueries.is_loaded = true; }, _ => unsafe { storage::DeleteQueries.f = transmute(failing::DeleteQueries); storage::DeleteQueries.is_loaded = false; } }
    match loadfn("DeleteQueriesARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteQueriesARB.f = transmute(ptr); storage::DeleteQueriesARB.is_loaded = true; }, _ => unsafe { storage::DeleteQueriesARB.f = transmute(failing::DeleteQueriesARB); storage::DeleteQueriesARB.is_loaded = false; } }
    match loadfn("DeleteQueriesEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteQueriesEXT.f = transmute(ptr); storage::DeleteQueriesEXT.is_loaded = true; }, _ => unsafe { storage::DeleteQueriesEXT.f = transmute(failing::DeleteQueriesEXT); storage::DeleteQueriesEXT.is_loaded = false; } }
    match loadfn("DeleteRenderbuffers") { ptr if !ptr.is_null() => unsafe { storage::DeleteRenderbuffers.f = transmute(ptr); storage::DeleteRenderbuffers.is_loaded = true; }, _ => unsafe { storage::DeleteRenderbuffers.f = transmute(failing::DeleteRenderbuffers); storage::DeleteRenderbuffers.is_loaded = false; } }
    match loadfn("DeleteRenderbuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteRenderbuffersEXT.f = transmute(ptr); storage::DeleteRenderbuffersEXT.is_loaded = true; }, _ => unsafe { storage::DeleteRenderbuffersEXT.f = transmute(failing::DeleteRenderbuffersEXT); storage::DeleteRenderbuffersEXT.is_loaded = false; } }
    match loadfn("DeleteRenderbuffersOES") { ptr if !ptr.is_null() => unsafe { storage::DeleteRenderbuffersOES.f = transmute(ptr); storage::DeleteRenderbuffersOES.is_loaded = true; }, _ => unsafe { storage::DeleteRenderbuffersOES.f = transmute(failing::DeleteRenderbuffersOES); storage::DeleteRenderbuffersOES.is_loaded = false; } }
    match loadfn("DeleteSamplers") { ptr if !ptr.is_null() => unsafe { storage::DeleteSamplers.f = transmute(ptr); storage::DeleteSamplers.is_loaded = true; }, _ => unsafe { storage::DeleteSamplers.f = transmute(failing::DeleteSamplers); storage::DeleteSamplers.is_loaded = false; } }
    match loadfn("DeleteShader") { ptr if !ptr.is_null() => unsafe { storage::DeleteShader.f = transmute(ptr); storage::DeleteShader.is_loaded = true; }, _ => unsafe { storage::DeleteShader.f = transmute(failing::DeleteShader); storage::DeleteShader.is_loaded = false; } }
    match loadfn("DeleteSync") { ptr if !ptr.is_null() => unsafe { storage::DeleteSync.f = transmute(ptr); storage::DeleteSync.is_loaded = true; }, _ => unsafe { storage::DeleteSync.f = transmute(failing::DeleteSync); storage::DeleteSync.is_loaded = false; } }
    match loadfn("DeleteSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DeleteSyncAPPLE.f = transmute(ptr); storage::DeleteSyncAPPLE.is_loaded = true; }, _ => unsafe { storage::DeleteSyncAPPLE.f = transmute(failing::DeleteSyncAPPLE); storage::DeleteSyncAPPLE.is_loaded = false; } }
    match loadfn("DeleteTextures") { ptr if !ptr.is_null() => unsafe { storage::DeleteTextures.f = transmute(ptr); storage::DeleteTextures.is_loaded = true; }, _ => unsafe { storage::DeleteTextures.f = transmute(failing::DeleteTextures); storage::DeleteTextures.is_loaded = false; } }
    match loadfn("DeleteTexturesEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteTexturesEXT.f = transmute(ptr); storage::DeleteTexturesEXT.is_loaded = true; }, _ => unsafe { storage::DeleteTexturesEXT.f = transmute(failing::DeleteTexturesEXT); storage::DeleteTexturesEXT.is_loaded = false; } }
    match loadfn("DeleteTransformFeedbacks") { ptr if !ptr.is_null() => unsafe { storage::DeleteTransformFeedbacks.f = transmute(ptr); storage::DeleteTransformFeedbacks.is_loaded = true; }, _ => unsafe { storage::DeleteTransformFeedbacks.f = transmute(failing::DeleteTransformFeedbacks); storage::DeleteTransformFeedbacks.is_loaded = false; } }
    match loadfn("DeleteTransformFeedbacksNV") { ptr if !ptr.is_null() => unsafe { storage::DeleteTransformFeedbacksNV.f = transmute(ptr); storage::DeleteTransformFeedbacksNV.is_loaded = true; }, _ => unsafe { storage::DeleteTransformFeedbacksNV.f = transmute(failing::DeleteTransformFeedbacksNV); storage::DeleteTransformFeedbacksNV.is_loaded = false; } }
    match loadfn("DeleteVertexArrays") { ptr if !ptr.is_null() => unsafe { storage::DeleteVertexArrays.f = transmute(ptr); storage::DeleteVertexArrays.is_loaded = true; }, _ => unsafe { storage::DeleteVertexArrays.f = transmute(failing::DeleteVertexArrays); storage::DeleteVertexArrays.is_loaded = false; } }
    match loadfn("DeleteVertexArraysAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DeleteVertexArraysAPPLE.f = transmute(ptr); storage::DeleteVertexArraysAPPLE.is_loaded = true; }, _ => unsafe { storage::DeleteVertexArraysAPPLE.f = transmute(failing::DeleteVertexArraysAPPLE); storage::DeleteVertexArraysAPPLE.is_loaded = false; } }
    match loadfn("DeleteVertexArraysOES") { ptr if !ptr.is_null() => unsafe { storage::DeleteVertexArraysOES.f = transmute(ptr); storage::DeleteVertexArraysOES.is_loaded = true; }, _ => unsafe { storage::DeleteVertexArraysOES.f = transmute(failing::DeleteVertexArraysOES); storage::DeleteVertexArraysOES.is_loaded = false; } }
    match loadfn("DeleteVertexShaderEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteVertexShaderEXT.f = transmute(ptr); storage::DeleteVertexShaderEXT.is_loaded = true; }, _ => unsafe { storage::DeleteVertexShaderEXT.f = transmute(failing::DeleteVertexShaderEXT); storage::DeleteVertexShaderEXT.is_loaded = false; } }
    match loadfn("DepthBoundsEXT") { ptr if !ptr.is_null() => unsafe { storage::DepthBoundsEXT.f = transmute(ptr); storage::DepthBoundsEXT.is_loaded = true; }, _ => unsafe { storage::DepthBoundsEXT.f = transmute(failing::DepthBoundsEXT); storage::DepthBoundsEXT.is_loaded = false; } }
    match loadfn("DepthBoundsdNV") { ptr if !ptr.is_null() => unsafe { storage::DepthBoundsdNV.f = transmute(ptr); storage::DepthBoundsdNV.is_loaded = true; }, _ => unsafe { storage::DepthBoundsdNV.f = transmute(failing::DepthBoundsdNV); storage::DepthBoundsdNV.is_loaded = false; } }
    match loadfn("DepthFunc") { ptr if !ptr.is_null() => unsafe { storage::DepthFunc.f = transmute(ptr); storage::DepthFunc.is_loaded = true; }, _ => unsafe { storage::DepthFunc.f = transmute(failing::DepthFunc); storage::DepthFunc.is_loaded = false; } }
    match loadfn("DepthMask") { ptr if !ptr.is_null() => unsafe { storage::DepthMask.f = transmute(ptr); storage::DepthMask.is_loaded = true; }, _ => unsafe { storage::DepthMask.f = transmute(failing::DepthMask); storage::DepthMask.is_loaded = false; } }
    match loadfn("DepthRange") { ptr if !ptr.is_null() => unsafe { storage::DepthRange.f = transmute(ptr); storage::DepthRange.is_loaded = true; }, _ => unsafe { storage::DepthRange.f = transmute(failing::DepthRange); storage::DepthRange.is_loaded = false; } }
    match loadfn("DepthRangeArrayv") { ptr if !ptr.is_null() => unsafe { storage::DepthRangeArrayv.f = transmute(ptr); storage::DepthRangeArrayv.is_loaded = true; }, _ => unsafe { storage::DepthRangeArrayv.f = transmute(failing::DepthRangeArrayv); storage::DepthRangeArrayv.is_loaded = false; } }
    match loadfn("DepthRangeIndexed") { ptr if !ptr.is_null() => unsafe { storage::DepthRangeIndexed.f = transmute(ptr); storage::DepthRangeIndexed.is_loaded = true; }, _ => unsafe { storage::DepthRangeIndexed.f = transmute(failing::DepthRangeIndexed); storage::DepthRangeIndexed.is_loaded = false; } }
    match loadfn("DepthRangedNV") { ptr if !ptr.is_null() => unsafe { storage::DepthRangedNV.f = transmute(ptr); storage::DepthRangedNV.is_loaded = true; }, _ => unsafe { storage::DepthRangedNV.f = transmute(failing::DepthRangedNV); storage::DepthRangedNV.is_loaded = false; } }
    match loadfn("DepthRangef") { ptr if !ptr.is_null() => unsafe { storage::DepthRangef.f = transmute(ptr); storage::DepthRangef.is_loaded = true; }, _ => unsafe { storage::DepthRangef.f = transmute(failing::DepthRangef); storage::DepthRangef.is_loaded = false; } }
    match loadfn("DepthRangefOES") { ptr if !ptr.is_null() => unsafe { storage::DepthRangefOES.f = transmute(ptr); storage::DepthRangefOES.is_loaded = true; }, _ => unsafe { storage::DepthRangefOES.f = transmute(failing::DepthRangefOES); storage::DepthRangefOES.is_loaded = false; } }
    match loadfn("DepthRangex") { ptr if !ptr.is_null() => unsafe { storage::DepthRangex.f = transmute(ptr); storage::DepthRangex.is_loaded = true; }, _ => unsafe { storage::DepthRangex.f = transmute(failing::DepthRangex); storage::DepthRangex.is_loaded = false; } }
    match loadfn("DepthRangexOES") { ptr if !ptr.is_null() => unsafe { storage::DepthRangexOES.f = transmute(ptr); storage::DepthRangexOES.is_loaded = true; }, _ => unsafe { storage::DepthRangexOES.f = transmute(failing::DepthRangexOES); storage::DepthRangexOES.is_loaded = false; } }
    match loadfn("DetachObjectARB") { ptr if !ptr.is_null() => unsafe { storage::DetachObjectARB.f = transmute(ptr); storage::DetachObjectARB.is_loaded = true; }, _ => unsafe { storage::DetachObjectARB.f = transmute(failing::DetachObjectARB); storage::DetachObjectARB.is_loaded = false; } }
    match loadfn("DetachShader") { ptr if !ptr.is_null() => unsafe { storage::DetachShader.f = transmute(ptr); storage::DetachShader.is_loaded = true; }, _ => unsafe { storage::DetachShader.f = transmute(failing::DetachShader); storage::DetachShader.is_loaded = false; } }
    match loadfn("DetailTexFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::DetailTexFuncSGIS.f = transmute(ptr); storage::DetailTexFuncSGIS.is_loaded = true; }, _ => unsafe { storage::DetailTexFuncSGIS.f = transmute(failing::DetailTexFuncSGIS); storage::DetailTexFuncSGIS.is_loaded = false; } }
    match loadfn("Disable") { ptr if !ptr.is_null() => unsafe { storage::Disable.f = transmute(ptr); storage::Disable.is_loaded = true; }, _ => unsafe { storage::Disable.f = transmute(failing::Disable); storage::Disable.is_loaded = false; } }
    match loadfn("DisableClientState") { ptr if !ptr.is_null() => unsafe { storage::DisableClientState.f = transmute(ptr); storage::DisableClientState.is_loaded = true; }, _ => unsafe { storage::DisableClientState.f = transmute(failing::DisableClientState); storage::DisableClientState.is_loaded = false; } }
    match loadfn("DisableClientStateIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableClientStateIndexedEXT.f = transmute(ptr); storage::DisableClientStateIndexedEXT.is_loaded = true; }, _ => unsafe { storage::DisableClientStateIndexedEXT.f = transmute(failing::DisableClientStateIndexedEXT); storage::DisableClientStateIndexedEXT.is_loaded = false; } }
    match loadfn("DisableClientStateiEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableClientStateiEXT.f = transmute(ptr); storage::DisableClientStateiEXT.is_loaded = true; }, _ => unsafe { storage::DisableClientStateiEXT.f = transmute(failing::DisableClientStateiEXT); storage::DisableClientStateiEXT.is_loaded = false; } }
    match loadfn("DisableDriverControlQCOM") { ptr if !ptr.is_null() => unsafe { storage::DisableDriverControlQCOM.f = transmute(ptr); storage::DisableDriverControlQCOM.is_loaded = true; }, _ => unsafe { storage::DisableDriverControlQCOM.f = transmute(failing::DisableDriverControlQCOM); storage::DisableDriverControlQCOM.is_loaded = false; } }
    match loadfn("DisableIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableIndexedEXT.f = transmute(ptr); storage::DisableIndexedEXT.is_loaded = true; }, _ => unsafe { storage::DisableIndexedEXT.f = transmute(failing::DisableIndexedEXT); storage::DisableIndexedEXT.is_loaded = false; } }
    match loadfn("DisableVariantClientStateEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableVariantClientStateEXT.f = transmute(ptr); storage::DisableVariantClientStateEXT.is_loaded = true; }, _ => unsafe { storage::DisableVariantClientStateEXT.f = transmute(failing::DisableVariantClientStateEXT); storage::DisableVariantClientStateEXT.is_loaded = false; } }
    match loadfn("DisableVertexArrayAttribEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexArrayAttribEXT.f = transmute(ptr); storage::DisableVertexArrayAttribEXT.is_loaded = true; }, _ => unsafe { storage::DisableVertexArrayAttribEXT.f = transmute(failing::DisableVertexArrayAttribEXT); storage::DisableVertexArrayAttribEXT.is_loaded = false; } }
    match loadfn("DisableVertexArrayEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexArrayEXT.f = transmute(ptr); storage::DisableVertexArrayEXT.is_loaded = true; }, _ => unsafe { storage::DisableVertexArrayEXT.f = transmute(failing::DisableVertexArrayEXT); storage::DisableVertexArrayEXT.is_loaded = false; } }
    match loadfn("DisableVertexAttribAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexAttribAPPLE.f = transmute(ptr); storage::DisableVertexAttribAPPLE.is_loaded = true; }, _ => unsafe { storage::DisableVertexAttribAPPLE.f = transmute(failing::DisableVertexAttribAPPLE); storage::DisableVertexAttribAPPLE.is_loaded = false; } }
    match loadfn("DisableVertexAttribArray") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexAttribArray.f = transmute(ptr); storage::DisableVertexAttribArray.is_loaded = true; }, _ => unsafe { storage::DisableVertexAttribArray.f = transmute(failing::DisableVertexAttribArray); storage::DisableVertexAttribArray.is_loaded = false; } }
    match loadfn("DisableVertexAttribArrayARB") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexAttribArrayARB.f = transmute(ptr); storage::DisableVertexAttribArrayARB.is_loaded = true; }, _ => unsafe { storage::DisableVertexAttribArrayARB.f = transmute(failing::DisableVertexAttribArrayARB); storage::DisableVertexAttribArrayARB.is_loaded = false; } }
    match loadfn("Disablei") { ptr if !ptr.is_null() => unsafe { storage::Disablei.f = transmute(ptr); storage::Disablei.is_loaded = true; }, _ => unsafe { storage::Disablei.f = transmute(failing::Disablei); storage::Disablei.is_loaded = false; } }
    match loadfn("DiscardFramebufferEXT") { ptr if !ptr.is_null() => unsafe { storage::DiscardFramebufferEXT.f = transmute(ptr); storage::DiscardFramebufferEXT.is_loaded = true; }, _ => unsafe { storage::DiscardFramebufferEXT.f = transmute(failing::DiscardFramebufferEXT); storage::DiscardFramebufferEXT.is_loaded = false; } }
    match loadfn("DispatchCompute") { ptr if !ptr.is_null() => unsafe { storage::DispatchCompute.f = transmute(ptr); storage::DispatchCompute.is_loaded = true; }, _ => unsafe { storage::DispatchCompute.f = transmute(failing::DispatchCompute); storage::DispatchCompute.is_loaded = false; } }
    match loadfn("DispatchComputeGroupSizeARB") { ptr if !ptr.is_null() => unsafe { storage::DispatchComputeGroupSizeARB.f = transmute(ptr); storage::DispatchComputeGroupSizeARB.is_loaded = true; }, _ => unsafe { storage::DispatchComputeGroupSizeARB.f = transmute(failing::DispatchComputeGroupSizeARB); storage::DispatchComputeGroupSizeARB.is_loaded = false; } }
    match loadfn("DispatchComputeIndirect") { ptr if !ptr.is_null() => unsafe { storage::DispatchComputeIndirect.f = transmute(ptr); storage::DispatchComputeIndirect.is_loaded = true; }, _ => unsafe { storage::DispatchComputeIndirect.f = transmute(failing::DispatchComputeIndirect); storage::DispatchComputeIndirect.is_loaded = false; } }
    match loadfn("DrawArrays") { ptr if !ptr.is_null() => unsafe { storage::DrawArrays.f = transmute(ptr); storage::DrawArrays.is_loaded = true; }, _ => unsafe { storage::DrawArrays.f = transmute(failing::DrawArrays); storage::DrawArrays.is_loaded = false; } }
    match loadfn("DrawArraysEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysEXT.f = transmute(ptr); storage::DrawArraysEXT.is_loaded = true; }, _ => unsafe { storage::DrawArraysEXT.f = transmute(failing::DrawArraysEXT); storage::DrawArraysEXT.is_loaded = false; } }
    match loadfn("DrawArraysIndirect") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysIndirect.f = transmute(ptr); storage::DrawArraysIndirect.is_loaded = true; }, _ => unsafe { storage::DrawArraysIndirect.f = transmute(failing::DrawArraysIndirect); storage::DrawArraysIndirect.is_loaded = false; } }
    match loadfn("DrawArraysInstanced") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstanced.f = transmute(ptr); storage::DrawArraysInstanced.is_loaded = true; }, _ => unsafe { storage::DrawArraysInstanced.f = transmute(failing::DrawArraysInstanced); storage::DrawArraysInstanced.is_loaded = false; } }
    match loadfn("DrawArraysInstancedANGLE") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedANGLE.f = transmute(ptr); storage::DrawArraysInstancedANGLE.is_loaded = true; }, _ => unsafe { storage::DrawArraysInstancedANGLE.f = transmute(failing::DrawArraysInstancedANGLE); storage::DrawArraysInstancedANGLE.is_loaded = false; } }
    match loadfn("DrawArraysInstancedARB") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedARB.f = transmute(ptr); storage::DrawArraysInstancedARB.is_loaded = true; }, _ => unsafe { storage::DrawArraysInstancedARB.f = transmute(failing::DrawArraysInstancedARB); storage::DrawArraysInstancedARB.is_loaded = false; } }
    match loadfn("DrawArraysInstancedBaseInstance") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedBaseInstance.f = transmute(ptr); storage::DrawArraysInstancedBaseInstance.is_loaded = true; }, _ => unsafe { storage::DrawArraysInstancedBaseInstance.f = transmute(failing::DrawArraysInstancedBaseInstance); storage::DrawArraysInstancedBaseInstance.is_loaded = false; } }
    match loadfn("DrawArraysInstancedEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedEXT.f = transmute(ptr); storage::DrawArraysInstancedEXT.is_loaded = true; }, _ => unsafe { storage::DrawArraysInstancedEXT.f = transmute(failing::DrawArraysInstancedEXT); storage::DrawArraysInstancedEXT.is_loaded = false; } }
    match loadfn("DrawArraysInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedNV.f = transmute(ptr); storage::DrawArraysInstancedNV.is_loaded = true; }, _ => unsafe { storage::DrawArraysInstancedNV.f = transmute(failing::DrawArraysInstancedNV); storage::DrawArraysInstancedNV.is_loaded = false; } }
    match loadfn("DrawBuffer") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffer.f = transmute(ptr); storage::DrawBuffer.is_loaded = true; }, _ => unsafe { storage::DrawBuffer.f = transmute(failing::DrawBuffer); storage::DrawBuffer.is_loaded = false; } }
    match loadfn("DrawBuffers") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffers.f = transmute(ptr); storage::DrawBuffers.is_loaded = true; }, _ => unsafe { storage::DrawBuffers.f = transmute(failing::DrawBuffers); storage::DrawBuffers.is_loaded = false; } }
    match loadfn("DrawBuffersARB") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersARB.f = transmute(ptr); storage::DrawBuffersARB.is_loaded = true; }, _ => unsafe { storage::DrawBuffersARB.f = transmute(failing::DrawBuffersARB); storage::DrawBuffersARB.is_loaded = false; } }
    match loadfn("DrawBuffersATI") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersATI.f = transmute(ptr); storage::DrawBuffersATI.is_loaded = true; }, _ => unsafe { storage::DrawBuffersATI.f = transmute(failing::DrawBuffersATI); storage::DrawBuffersATI.is_loaded = false; } }
    match loadfn("DrawBuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersEXT.f = transmute(ptr); storage::DrawBuffersEXT.is_loaded = true; }, _ => unsafe { storage::DrawBuffersEXT.f = transmute(failing::DrawBuffersEXT); storage::DrawBuffersEXT.is_loaded = false; } }
    match loadfn("DrawBuffersIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersIndexedEXT.f = transmute(ptr); storage::DrawBuffersIndexedEXT.is_loaded = true; }, _ => unsafe { storage::DrawBuffersIndexedEXT.f = transmute(failing::DrawBuffersIndexedEXT); storage::DrawBuffersIndexedEXT.is_loaded = false; } }
    match loadfn("DrawBuffersNV") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersNV.f = transmute(ptr); storage::DrawBuffersNV.is_loaded = true; }, _ => unsafe { storage::DrawBuffersNV.f = transmute(failing::DrawBuffersNV); storage::DrawBuffersNV.is_loaded = false; } }
    match loadfn("DrawElementArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DrawElementArrayAPPLE.f = transmute(ptr); storage::DrawElementArrayAPPLE.is_loaded = true; }, _ => unsafe { storage::DrawElementArrayAPPLE.f = transmute(failing::DrawElementArrayAPPLE); storage::DrawElementArrayAPPLE.is_loaded = false; } }
    match loadfn("DrawElementArrayATI") { ptr if !ptr.is_null() => unsafe { storage::DrawElementArrayATI.f = transmute(ptr); storage::DrawElementArrayATI.is_loaded = true; }, _ => unsafe { storage::DrawElementArrayATI.f = transmute(failing::DrawElementArrayATI); storage::DrawElementArrayATI.is_loaded = false; } }
    match loadfn("DrawElements") { ptr if !ptr.is_null() => unsafe { storage::DrawElements.f = transmute(ptr); storage::DrawElements.is_loaded = true; }, _ => unsafe { storage::DrawElements.f = transmute(failing::DrawElements); storage::DrawElements.is_loaded = false; } }
    match loadfn("DrawElementsBaseVertex") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsBaseVertex.f = transmute(ptr); storage::DrawElementsBaseVertex.is_loaded = true; }, _ => unsafe { storage::DrawElementsBaseVertex.f = transmute(failing::DrawElementsBaseVertex); storage::DrawElementsBaseVertex.is_loaded = false; } }
    match loadfn("DrawElementsIndirect") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsIndirect.f = transmute(ptr); storage::DrawElementsIndirect.is_loaded = true; }, _ => unsafe { storage::DrawElementsIndirect.f = transmute(failing::DrawElementsIndirect); storage::DrawElementsIndirect.is_loaded = false; } }
    match loadfn("DrawElementsInstanced") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstanced.f = transmute(ptr); storage::DrawElementsInstanced.is_loaded = true; }, _ => unsafe { storage::DrawElementsInstanced.f = transmute(failing::DrawElementsInstanced); storage::DrawElementsInstanced.is_loaded = false; } }
    match loadfn("DrawElementsInstancedANGLE") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedANGLE.f = transmute(ptr); storage::DrawElementsInstancedANGLE.is_loaded = true; }, _ => unsafe { storage::DrawElementsInstancedANGLE.f = transmute(failing::DrawElementsInstancedANGLE); storage::DrawElementsInstancedANGLE.is_loaded = false; } }
    match loadfn("DrawElementsInstancedARB") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedARB.f = transmute(ptr); storage::DrawElementsInstancedARB.is_loaded = true; }, _ => unsafe { storage::DrawElementsInstancedARB.f = transmute(failing::DrawElementsInstancedARB); storage::DrawElementsInstancedARB.is_loaded = false; } }
    match loadfn("DrawElementsInstancedBaseInstance") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedBaseInstance.f = transmute(ptr); storage::DrawElementsInstancedBaseInstance.is_loaded = true; }, _ => unsafe { storage::DrawElementsInstancedBaseInstance.f = transmute(failing::DrawElementsInstancedBaseInstance); storage::DrawElementsInstancedBaseInstance.is_loaded = false; } }
    match loadfn("DrawElementsInstancedBaseVertex") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedBaseVertex.f = transmute(ptr); storage::DrawElementsInstancedBaseVertex.is_loaded = true; }, _ => unsafe { storage::DrawElementsInstancedBaseVertex.f = transmute(failing::DrawElementsInstancedBaseVertex); storage::DrawElementsInstancedBaseVertex.is_loaded = false; } }
    match loadfn("DrawElementsInstancedBaseVertexBaseInstance") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedBaseVertexBaseInstance.f = transmute(ptr); storage::DrawElementsInstancedBaseVertexBaseInstance.is_loaded = true; }, _ => unsafe { storage::DrawElementsInstancedBaseVertexBaseInstance.f = transmute(failing::DrawElementsInstancedBaseVertexBaseInstance); storage::DrawElementsInstancedBaseVertexBaseInstance.is_loaded = false; } }
    match loadfn("DrawElementsInstancedEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedEXT.f = transmute(ptr); storage::DrawElementsInstancedEXT.is_loaded = true; }, _ => unsafe { storage::DrawElementsInstancedEXT.f = transmute(failing::DrawElementsInstancedEXT); storage::DrawElementsInstancedEXT.is_loaded = false; } }
    match loadfn("DrawElementsInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedNV.f = transmute(ptr); storage::DrawElementsInstancedNV.is_loaded = true; }, _ => unsafe { storage::DrawElementsInstancedNV.f = transmute(failing::DrawElementsInstancedNV); storage::DrawElementsInstancedNV.is_loaded = false; } }
    match loadfn("DrawMeshArraysSUN") { ptr if !ptr.is_null() => unsafe { storage::DrawMeshArraysSUN.f = transmute(ptr); storage::DrawMeshArraysSUN.is_loaded = true; }, _ => unsafe { storage::DrawMeshArraysSUN.f = transmute(failing::DrawMeshArraysSUN); storage::DrawMeshArraysSUN.is_loaded = false; } }
    match loadfn("DrawPixels") { ptr if !ptr.is_null() => unsafe { storage::DrawPixels.f = transmute(ptr); storage::DrawPixels.is_loaded = true; }, _ => unsafe { storage::DrawPixels.f = transmute(failing::DrawPixels); storage::DrawPixels.is_loaded = false; } }
    match loadfn("DrawRangeElementArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElementArrayAPPLE.f = transmute(ptr); storage::DrawRangeElementArrayAPPLE.is_loaded = true; }, _ => unsafe { storage::DrawRangeElementArrayAPPLE.f = transmute(failing::DrawRangeElementArrayAPPLE); storage::DrawRangeElementArrayAPPLE.is_loaded = false; } }
    match loadfn("DrawRangeElementArrayATI") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElementArrayATI.f = transmute(ptr); storage::DrawRangeElementArrayATI.is_loaded = true; }, _ => unsafe { storage::DrawRangeElementArrayATI.f = transmute(failing::DrawRangeElementArrayATI); storage::DrawRangeElementArrayATI.is_loaded = false; } }
    match loadfn("DrawRangeElements") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElements.f = transmute(ptr); storage::DrawRangeElements.is_loaded = true; }, _ => unsafe { storage::DrawRangeElements.f = transmute(failing::DrawRangeElements); storage::DrawRangeElements.is_loaded = false; } }
    match loadfn("DrawRangeElementsBaseVertex") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElementsBaseVertex.f = transmute(ptr); storage::DrawRangeElementsBaseVertex.is_loaded = true; }, _ => unsafe { storage::DrawRangeElementsBaseVertex.f = transmute(failing::DrawRangeElementsBaseVertex); storage::DrawRangeElementsBaseVertex.is_loaded = false; } }
    match loadfn("DrawRangeElementsEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElementsEXT.f = transmute(ptr); storage::DrawRangeElementsEXT.is_loaded = true; }, _ => unsafe { storage::DrawRangeElementsEXT.f = transmute(failing::DrawRangeElementsEXT); storage::DrawRangeElementsEXT.is_loaded = false; } }
    match loadfn("DrawTexfOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexfOES.f = transmute(ptr); storage::DrawTexfOES.is_loaded = true; }, _ => unsafe { storage::DrawTexfOES.f = transmute(failing::DrawTexfOES); storage::DrawTexfOES.is_loaded = false; } }
    match loadfn("DrawTexfvOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexfvOES.f = transmute(ptr); storage::DrawTexfvOES.is_loaded = true; }, _ => unsafe { storage::DrawTexfvOES.f = transmute(failing::DrawTexfvOES); storage::DrawTexfvOES.is_loaded = false; } }
    match loadfn("DrawTexiOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexiOES.f = transmute(ptr); storage::DrawTexiOES.is_loaded = true; }, _ => unsafe { storage::DrawTexiOES.f = transmute(failing::DrawTexiOES); storage::DrawTexiOES.is_loaded = false; } }
    match loadfn("DrawTexivOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexivOES.f = transmute(ptr); storage::DrawTexivOES.is_loaded = true; }, _ => unsafe { storage::DrawTexivOES.f = transmute(failing::DrawTexivOES); storage::DrawTexivOES.is_loaded = false; } }
    match loadfn("DrawTexsOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexsOES.f = transmute(ptr); storage::DrawTexsOES.is_loaded = true; }, _ => unsafe { storage::DrawTexsOES.f = transmute(failing::DrawTexsOES); storage::DrawTexsOES.is_loaded = false; } }
    match loadfn("DrawTexsvOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexsvOES.f = transmute(ptr); storage::DrawTexsvOES.is_loaded = true; }, _ => unsafe { storage::DrawTexsvOES.f = transmute(failing::DrawTexsvOES); storage::DrawTexsvOES.is_loaded = false; } }
    match loadfn("DrawTextureNV") { ptr if !ptr.is_null() => unsafe { storage::DrawTextureNV.f = transmute(ptr); storage::DrawTextureNV.is_loaded = true; }, _ => unsafe { storage::DrawTextureNV.f = transmute(failing::DrawTextureNV); storage::DrawTextureNV.is_loaded = false; } }
    match loadfn("DrawTexxOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexxOES.f = transmute(ptr); storage::DrawTexxOES.is_loaded = true; }, _ => unsafe { storage::DrawTexxOES.f = transmute(failing::DrawTexxOES); storage::DrawTexxOES.is_loaded = false; } }
    match loadfn("DrawTexxvOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexxvOES.f = transmute(ptr); storage::DrawTexxvOES.is_loaded = true; }, _ => unsafe { storage::DrawTexxvOES.f = transmute(failing::DrawTexxvOES); storage::DrawTexxvOES.is_loaded = false; } }
    match loadfn("DrawTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedback.f = transmute(ptr); storage::DrawTransformFeedback.is_loaded = true; }, _ => unsafe { storage::DrawTransformFeedback.f = transmute(failing::DrawTransformFeedback); storage::DrawTransformFeedback.is_loaded = false; } }
    match loadfn("DrawTransformFeedbackInstanced") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedbackInstanced.f = transmute(ptr); storage::DrawTransformFeedbackInstanced.is_loaded = true; }, _ => unsafe { storage::DrawTransformFeedbackInstanced.f = transmute(failing::DrawTransformFeedbackInstanced); storage::DrawTransformFeedbackInstanced.is_loaded = false; } }
    match loadfn("DrawTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedbackNV.f = transmute(ptr); storage::DrawTransformFeedbackNV.is_loaded = true; }, _ => unsafe { storage::DrawTransformFeedbackNV.f = transmute(failing::DrawTransformFeedbackNV); storage::DrawTransformFeedbackNV.is_loaded = false; } }
    match loadfn("DrawTransformFeedbackStream") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedbackStream.f = transmute(ptr); storage::DrawTransformFeedbackStream.is_loaded = true; }, _ => unsafe { storage::DrawTransformFeedbackStream.f = transmute(failing::DrawTransformFeedbackStream); storage::DrawTransformFeedbackStream.is_loaded = false; } }
    match loadfn("DrawTransformFeedbackStreamInstanced") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedbackStreamInstanced.f = transmute(ptr); storage::DrawTransformFeedbackStreamInstanced.is_loaded = true; }, _ => unsafe { storage::DrawTransformFeedbackStreamInstanced.f = transmute(failing::DrawTransformFeedbackStreamInstanced); storage::DrawTransformFeedbackStreamInstanced.is_loaded = false; } }
    match loadfn("EGLImageTargetRenderbufferStorageOES") { ptr if !ptr.is_null() => unsafe { storage::EGLImageTargetRenderbufferStorageOES.f = transmute(ptr); storage::EGLImageTargetRenderbufferStorageOES.is_loaded = true; }, _ => unsafe { storage::EGLImageTargetRenderbufferStorageOES.f = transmute(failing::EGLImageTargetRenderbufferStorageOES); storage::EGLImageTargetRenderbufferStorageOES.is_loaded = false; } }
    match loadfn("EGLImageTargetTexture2DOES") { ptr if !ptr.is_null() => unsafe { storage::EGLImageTargetTexture2DOES.f = transmute(ptr); storage::EGLImageTargetTexture2DOES.is_loaded = true; }, _ => unsafe { storage::EGLImageTargetTexture2DOES.f = transmute(failing::EGLImageTargetTexture2DOES); storage::EGLImageTargetTexture2DOES.is_loaded = false; } }
    match loadfn("EdgeFlag") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlag.f = transmute(ptr); storage::EdgeFlag.is_loaded = true; }, _ => unsafe { storage::EdgeFlag.f = transmute(failing::EdgeFlag); storage::EdgeFlag.is_loaded = false; } }
    match loadfn("EdgeFlagFormatNV") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagFormatNV.f = transmute(ptr); storage::EdgeFlagFormatNV.is_loaded = true; }, _ => unsafe { storage::EdgeFlagFormatNV.f = transmute(failing::EdgeFlagFormatNV); storage::EdgeFlagFormatNV.is_loaded = false; } }
    match loadfn("EdgeFlagPointer") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagPointer.f = transmute(ptr); storage::EdgeFlagPointer.is_loaded = true; }, _ => unsafe { storage::EdgeFlagPointer.f = transmute(failing::EdgeFlagPointer); storage::EdgeFlagPointer.is_loaded = false; } }
    match loadfn("EdgeFlagPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagPointerEXT.f = transmute(ptr); storage::EdgeFlagPointerEXT.is_loaded = true; }, _ => unsafe { storage::EdgeFlagPointerEXT.f = transmute(failing::EdgeFlagPointerEXT); storage::EdgeFlagPointerEXT.is_loaded = false; } }
    match loadfn("EdgeFlagPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagPointerListIBM.f = transmute(ptr); storage::EdgeFlagPointerListIBM.is_loaded = true; }, _ => unsafe { storage::EdgeFlagPointerListIBM.f = transmute(failing::EdgeFlagPointerListIBM); storage::EdgeFlagPointerListIBM.is_loaded = false; } }
    match loadfn("EdgeFlagv") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagv.f = transmute(ptr); storage::EdgeFlagv.is_loaded = true; }, _ => unsafe { storage::EdgeFlagv.f = transmute(failing::EdgeFlagv); storage::EdgeFlagv.is_loaded = false; } }
    match loadfn("ElementPointerAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ElementPointerAPPLE.f = transmute(ptr); storage::ElementPointerAPPLE.is_loaded = true; }, _ => unsafe { storage::ElementPointerAPPLE.f = transmute(failing::ElementPointerAPPLE); storage::ElementPointerAPPLE.is_loaded = false; } }
    match loadfn("ElementPointerATI") { ptr if !ptr.is_null() => unsafe { storage::ElementPointerATI.f = transmute(ptr); storage::ElementPointerATI.is_loaded = true; }, _ => unsafe { storage::ElementPointerATI.f = transmute(failing::ElementPointerATI); storage::ElementPointerATI.is_loaded = false; } }
    match loadfn("Enable") { ptr if !ptr.is_null() => unsafe { storage::Enable.f = transmute(ptr); storage::Enable.is_loaded = true; }, _ => unsafe { storage::Enable.f = transmute(failing::Enable); storage::Enable.is_loaded = false; } }
    match loadfn("EnableClientState") { ptr if !ptr.is_null() => unsafe { storage::EnableClientState.f = transmute(ptr); storage::EnableClientState.is_loaded = true; }, _ => unsafe { storage::EnableClientState.f = transmute(failing::EnableClientState); storage::EnableClientState.is_loaded = false; } }
    match loadfn("EnableClientStateIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableClientStateIndexedEXT.f = transmute(ptr); storage::EnableClientStateIndexedEXT.is_loaded = true; }, _ => unsafe { storage::EnableClientStateIndexedEXT.f = transmute(failing::EnableClientStateIndexedEXT); storage::EnableClientStateIndexedEXT.is_loaded = false; } }
    match loadfn("EnableClientStateiEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableClientStateiEXT.f = transmute(ptr); storage::EnableClientStateiEXT.is_loaded = true; }, _ => unsafe { storage::EnableClientStateiEXT.f = transmute(failing::EnableClientStateiEXT); storage::EnableClientStateiEXT.is_loaded = false; } }
    match loadfn("EnableDriverControlQCOM") { ptr if !ptr.is_null() => unsafe { storage::EnableDriverControlQCOM.f = transmute(ptr); storage::EnableDriverControlQCOM.is_loaded = true; }, _ => unsafe { storage::EnableDriverControlQCOM.f = transmute(failing::EnableDriverControlQCOM); storage::EnableDriverControlQCOM.is_loaded = false; } }
    match loadfn("EnableIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableIndexedEXT.f = transmute(ptr); storage::EnableIndexedEXT.is_loaded = true; }, _ => unsafe { storage::EnableIndexedEXT.f = transmute(failing::EnableIndexedEXT); storage::EnableIndexedEXT.is_loaded = false; } }
    match loadfn("EnableVariantClientStateEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableVariantClientStateEXT.f = transmute(ptr); storage::EnableVariantClientStateEXT.is_loaded = true; }, _ => unsafe { storage::EnableVariantClientStateEXT.f = transmute(failing::EnableVariantClientStateEXT); storage::EnableVariantClientStateEXT.is_loaded = false; } }
    match loadfn("EnableVertexArrayAttribEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexArrayAttribEXT.f = transmute(ptr); storage::EnableVertexArrayAttribEXT.is_loaded = true; }, _ => unsafe { storage::EnableVertexArrayAttribEXT.f = transmute(failing::EnableVertexArrayAttribEXT); storage::EnableVertexArrayAttribEXT.is_loaded = false; } }
    match loadfn("EnableVertexArrayEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexArrayEXT.f = transmute(ptr); storage::EnableVertexArrayEXT.is_loaded = true; }, _ => unsafe { storage::EnableVertexArrayEXT.f = transmute(failing::EnableVertexArrayEXT); storage::EnableVertexArrayEXT.is_loaded = false; } }
    match loadfn("EnableVertexAttribAPPLE") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexAttribAPPLE.f = transmute(ptr); storage::EnableVertexAttribAPPLE.is_loaded = true; }, _ => unsafe { storage::EnableVertexAttribAPPLE.f = transmute(failing::EnableVertexAttribAPPLE); storage::EnableVertexAttribAPPLE.is_loaded = false; } }
    match loadfn("EnableVertexAttribArray") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexAttribArray.f = transmute(ptr); storage::EnableVertexAttribArray.is_loaded = true; }, _ => unsafe { storage::EnableVertexAttribArray.f = transmute(failing::EnableVertexAttribArray); storage::EnableVertexAttribArray.is_loaded = false; } }
    match loadfn("EnableVertexAttribArrayARB") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexAttribArrayARB.f = transmute(ptr); storage::EnableVertexAttribArrayARB.is_loaded = true; }, _ => unsafe { storage::EnableVertexAttribArrayARB.f = transmute(failing::EnableVertexAttribArrayARB); storage::EnableVertexAttribArrayARB.is_loaded = false; } }
    match loadfn("Enablei") { ptr if !ptr.is_null() => unsafe { storage::Enablei.f = transmute(ptr); storage::Enablei.is_loaded = true; }, _ => unsafe { storage::Enablei.f = transmute(failing::Enablei); storage::Enablei.is_loaded = false; } }
    match loadfn("End") { ptr if !ptr.is_null() => unsafe { storage::End.f = transmute(ptr); storage::End.is_loaded = true; }, _ => unsafe { storage::End.f = transmute(failing::End); storage::End.is_loaded = false; } }
    match loadfn("EndConditionalRender") { ptr if !ptr.is_null() => unsafe { storage::EndConditionalRender.f = transmute(ptr); storage::EndConditionalRender.is_loaded = true; }, _ => unsafe { storage::EndConditionalRender.f = transmute(failing::EndConditionalRender); storage::EndConditionalRender.is_loaded = false; } }
    match loadfn("EndConditionalRenderNV") { ptr if !ptr.is_null() => unsafe { storage::EndConditionalRenderNV.f = transmute(ptr); storage::EndConditionalRenderNV.is_loaded = true; }, _ => unsafe { storage::EndConditionalRenderNV.f = transmute(failing::EndConditionalRenderNV); storage::EndConditionalRenderNV.is_loaded = false; } }
    match loadfn("EndConditionalRenderNVX") { ptr if !ptr.is_null() => unsafe { storage::EndConditionalRenderNVX.f = transmute(ptr); storage::EndConditionalRenderNVX.is_loaded = true; }, _ => unsafe { storage::EndConditionalRenderNVX.f = transmute(failing::EndConditionalRenderNVX); storage::EndConditionalRenderNVX.is_loaded = false; } }
    match loadfn("EndFragmentShaderATI") { ptr if !ptr.is_null() => unsafe { storage::EndFragmentShaderATI.f = transmute(ptr); storage::EndFragmentShaderATI.is_loaded = true; }, _ => unsafe { storage::EndFragmentShaderATI.f = transmute(failing::EndFragmentShaderATI); storage::EndFragmentShaderATI.is_loaded = false; } }
    match loadfn("EndList") { ptr if !ptr.is_null() => unsafe { storage::EndList.f = transmute(ptr); storage::EndList.is_loaded = true; }, _ => unsafe { storage::EndList.f = transmute(failing::EndList); storage::EndList.is_loaded = false; } }
    match loadfn("EndOcclusionQueryNV") { ptr if !ptr.is_null() => unsafe { storage::EndOcclusionQueryNV.f = transmute(ptr); storage::EndOcclusionQueryNV.is_loaded = true; }, _ => unsafe { storage::EndOcclusionQueryNV.f = transmute(failing::EndOcclusionQueryNV); storage::EndOcclusionQueryNV.is_loaded = false; } }
    match loadfn("EndPerfMonitorAMD") { ptr if !ptr.is_null() => unsafe { storage::EndPerfMonitorAMD.f = transmute(ptr); storage::EndPerfMonitorAMD.is_loaded = true; }, _ => unsafe { storage::EndPerfMonitorAMD.f = transmute(failing::EndPerfMonitorAMD); storage::EndPerfMonitorAMD.is_loaded = false; } }
    match loadfn("EndQuery") { ptr if !ptr.is_null() => unsafe { storage::EndQuery.f = transmute(ptr); storage::EndQuery.is_loaded = true; }, _ => unsafe { storage::EndQuery.f = transmute(failing::EndQuery); storage::EndQuery.is_loaded = false; } }
    match loadfn("EndQueryARB") { ptr if !ptr.is_null() => unsafe { storage::EndQueryARB.f = transmute(ptr); storage::EndQueryARB.is_loaded = true; }, _ => unsafe { storage::EndQueryARB.f = transmute(failing::EndQueryARB); storage::EndQueryARB.is_loaded = false; } }
    match loadfn("EndQueryEXT") { ptr if !ptr.is_null() => unsafe { storage::EndQueryEXT.f = transmute(ptr); storage::EndQueryEXT.is_loaded = true; }, _ => unsafe { storage::EndQueryEXT.f = transmute(failing::EndQueryEXT); storage::EndQueryEXT.is_loaded = false; } }
    match loadfn("EndQueryIndexed") { ptr if !ptr.is_null() => unsafe { storage::EndQueryIndexed.f = transmute(ptr); storage::EndQueryIndexed.is_loaded = true; }, _ => unsafe { storage::EndQueryIndexed.f = transmute(failing::EndQueryIndexed); storage::EndQueryIndexed.is_loaded = false; } }
    match loadfn("EndTilingQCOM") { ptr if !ptr.is_null() => unsafe { storage::EndTilingQCOM.f = transmute(ptr); storage::EndTilingQCOM.is_loaded = true; }, _ => unsafe { storage::EndTilingQCOM.f = transmute(failing::EndTilingQCOM); storage::EndTilingQCOM.is_loaded = false; } }
    match loadfn("EndTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::EndTransformFeedback.f = transmute(ptr); storage::EndTransformFeedback.is_loaded = true; }, _ => unsafe { storage::EndTransformFeedback.f = transmute(failing::EndTransformFeedback); storage::EndTransformFeedback.is_loaded = false; } }
    match loadfn("EndTransformFeedbackEXT") { ptr if !ptr.is_null() => unsafe { storage::EndTransformFeedbackEXT.f = transmute(ptr); storage::EndTransformFeedbackEXT.is_loaded = true; }, _ => unsafe { storage::EndTransformFeedbackEXT.f = transmute(failing::EndTransformFeedbackEXT); storage::EndTransformFeedbackEXT.is_loaded = false; } }
    match loadfn("EndTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::EndTransformFeedbackNV.f = transmute(ptr); storage::EndTransformFeedbackNV.is_loaded = true; }, _ => unsafe { storage::EndTransformFeedbackNV.f = transmute(failing::EndTransformFeedbackNV); storage::EndTransformFeedbackNV.is_loaded = false; } }
    match loadfn("EndVertexShaderEXT") { ptr if !ptr.is_null() => unsafe { storage::EndVertexShaderEXT.f = transmute(ptr); storage::EndVertexShaderEXT.is_loaded = true; }, _ => unsafe { storage::EndVertexShaderEXT.f = transmute(failing::EndVertexShaderEXT); storage::EndVertexShaderEXT.is_loaded = false; } }
    match loadfn("EndVideoCaptureNV") { ptr if !ptr.is_null() => unsafe { storage::EndVideoCaptureNV.f = transmute(ptr); storage::EndVideoCaptureNV.is_loaded = true; }, _ => unsafe { storage::EndVideoCaptureNV.f = transmute(failing::EndVideoCaptureNV); storage::EndVideoCaptureNV.is_loaded = false; } }
    match loadfn("EvalCoord1d") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1d.f = transmute(ptr); storage::EvalCoord1d.is_loaded = true; }, _ => unsafe { storage::EvalCoord1d.f = transmute(failing::EvalCoord1d); storage::EvalCoord1d.is_loaded = false; } }
    match loadfn("EvalCoord1dv") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1dv.f = transmute(ptr); storage::EvalCoord1dv.is_loaded = true; }, _ => unsafe { storage::EvalCoord1dv.f = transmute(failing::EvalCoord1dv); storage::EvalCoord1dv.is_loaded = false; } }
    match loadfn("EvalCoord1f") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1f.f = transmute(ptr); storage::EvalCoord1f.is_loaded = true; }, _ => unsafe { storage::EvalCoord1f.f = transmute(failing::EvalCoord1f); storage::EvalCoord1f.is_loaded = false; } }
    match loadfn("EvalCoord1fv") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1fv.f = transmute(ptr); storage::EvalCoord1fv.is_loaded = true; }, _ => unsafe { storage::EvalCoord1fv.f = transmute(failing::EvalCoord1fv); storage::EvalCoord1fv.is_loaded = false; } }
    match loadfn("EvalCoord1xOES") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1xOES.f = transmute(ptr); storage::EvalCoord1xOES.is_loaded = true; }, _ => unsafe { storage::EvalCoord1xOES.f = transmute(failing::EvalCoord1xOES); storage::EvalCoord1xOES.is_loaded = false; } }
    match loadfn("EvalCoord1xvOES") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1xvOES.f = transmute(ptr); storage::EvalCoord1xvOES.is_loaded = true; }, _ => unsafe { storage::EvalCoord1xvOES.f = transmute(failing::EvalCoord1xvOES); storage::EvalCoord1xvOES.is_loaded = false; } }
    match loadfn("EvalCoord2d") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2d.f = transmute(ptr); storage::EvalCoord2d.is_loaded = true; }, _ => unsafe { storage::EvalCoord2d.f = transmute(failing::EvalCoord2d); storage::EvalCoord2d.is_loaded = false; } }
    match loadfn("EvalCoord2dv") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2dv.f = transmute(ptr); storage::EvalCoord2dv.is_loaded = true; }, _ => unsafe { storage::EvalCoord2dv.f = transmute(failing::EvalCoord2dv); storage::EvalCoord2dv.is_loaded = false; } }
    match loadfn("EvalCoord2f") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2f.f = transmute(ptr); storage::EvalCoord2f.is_loaded = true; }, _ => unsafe { storage::EvalCoord2f.f = transmute(failing::EvalCoord2f); storage::EvalCoord2f.is_loaded = false; } }
    match loadfn("EvalCoord2fv") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2fv.f = transmute(ptr); storage::EvalCoord2fv.is_loaded = true; }, _ => unsafe { storage::EvalCoord2fv.f = transmute(failing::EvalCoord2fv); storage::EvalCoord2fv.is_loaded = false; } }
    match loadfn("EvalCoord2xOES") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2xOES.f = transmute(ptr); storage::EvalCoord2xOES.is_loaded = true; }, _ => unsafe { storage::EvalCoord2xOES.f = transmute(failing::EvalCoord2xOES); storage::EvalCoord2xOES.is_loaded = false; } }
    match loadfn("EvalCoord2xvOES") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2xvOES.f = transmute(ptr); storage::EvalCoord2xvOES.is_loaded = true; }, _ => unsafe { storage::EvalCoord2xvOES.f = transmute(failing::EvalCoord2xvOES); storage::EvalCoord2xvOES.is_loaded = false; } }
    match loadfn("EvalMapsNV") { ptr if !ptr.is_null() => unsafe { storage::EvalMapsNV.f = transmute(ptr); storage::EvalMapsNV.is_loaded = true; }, _ => unsafe { storage::EvalMapsNV.f = transmute(failing::EvalMapsNV); storage::EvalMapsNV.is_loaded = false; } }
    match loadfn("EvalMesh1") { ptr if !ptr.is_null() => unsafe { storage::EvalMesh1.f = transmute(ptr); storage::EvalMesh1.is_loaded = true; }, _ => unsafe { storage::EvalMesh1.f = transmute(failing::EvalMesh1); storage::EvalMesh1.is_loaded = false; } }
    match loadfn("EvalMesh2") { ptr if !ptr.is_null() => unsafe { storage::EvalMesh2.f = transmute(ptr); storage::EvalMesh2.is_loaded = true; }, _ => unsafe { storage::EvalMesh2.f = transmute(failing::EvalMesh2); storage::EvalMesh2.is_loaded = false; } }
    match loadfn("EvalPoint1") { ptr if !ptr.is_null() => unsafe { storage::EvalPoint1.f = transmute(ptr); storage::EvalPoint1.is_loaded = true; }, _ => unsafe { storage::EvalPoint1.f = transmute(failing::EvalPoint1); storage::EvalPoint1.is_loaded = false; } }
    match loadfn("EvalPoint2") { ptr if !ptr.is_null() => unsafe { storage::EvalPoint2.f = transmute(ptr); storage::EvalPoint2.is_loaded = true; }, _ => unsafe { storage::EvalPoint2.f = transmute(failing::EvalPoint2); storage::EvalPoint2.is_loaded = false; } }
    match loadfn("ExecuteProgramNV") { ptr if !ptr.is_null() => unsafe { storage::ExecuteProgramNV.f = transmute(ptr); storage::ExecuteProgramNV.is_loaded = true; }, _ => unsafe { storage::ExecuteProgramNV.f = transmute(failing::ExecuteProgramNV); storage::ExecuteProgramNV.is_loaded = false; } }
    match loadfn("ExtGetBufferPointervQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetBufferPointervQCOM.f = transmute(ptr); storage::ExtGetBufferPointervQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetBufferPointervQCOM.f = transmute(failing::ExtGetBufferPointervQCOM); storage::ExtGetBufferPointervQCOM.is_loaded = false; } }
    match loadfn("ExtGetBuffersQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetBuffersQCOM.f = transmute(ptr); storage::ExtGetBuffersQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetBuffersQCOM.f = transmute(failing::ExtGetBuffersQCOM); storage::ExtGetBuffersQCOM.is_loaded = false; } }
    match loadfn("ExtGetFramebuffersQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetFramebuffersQCOM.f = transmute(ptr); storage::ExtGetFramebuffersQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetFramebuffersQCOM.f = transmute(failing::ExtGetFramebuffersQCOM); storage::ExtGetFramebuffersQCOM.is_loaded = false; } }
    match loadfn("ExtGetProgramBinarySourceQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetProgramBinarySourceQCOM.f = transmute(ptr); storage::ExtGetProgramBinarySourceQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetProgramBinarySourceQCOM.f = transmute(failing::ExtGetProgramBinarySourceQCOM); storage::ExtGetProgramBinarySourceQCOM.is_loaded = false; } }
    match loadfn("ExtGetProgramsQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetProgramsQCOM.f = transmute(ptr); storage::ExtGetProgramsQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetProgramsQCOM.f = transmute(failing::ExtGetProgramsQCOM); storage::ExtGetProgramsQCOM.is_loaded = false; } }
    match loadfn("ExtGetRenderbuffersQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetRenderbuffersQCOM.f = transmute(ptr); storage::ExtGetRenderbuffersQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetRenderbuffersQCOM.f = transmute(failing::ExtGetRenderbuffersQCOM); storage::ExtGetRenderbuffersQCOM.is_loaded = false; } }
    match loadfn("ExtGetShadersQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetShadersQCOM.f = transmute(ptr); storage::ExtGetShadersQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetShadersQCOM.f = transmute(failing::ExtGetShadersQCOM); storage::ExtGetShadersQCOM.is_loaded = false; } }
    match loadfn("ExtGetTexLevelParameterivQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetTexLevelParameterivQCOM.f = transmute(ptr); storage::ExtGetTexLevelParameterivQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetTexLevelParameterivQCOM.f = transmute(failing::ExtGetTexLevelParameterivQCOM); storage::ExtGetTexLevelParameterivQCOM.is_loaded = false; } }
    match loadfn("ExtGetTexSubImageQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetTexSubImageQCOM.f = transmute(ptr); storage::ExtGetTexSubImageQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetTexSubImageQCOM.f = transmute(failing::ExtGetTexSubImageQCOM); storage::ExtGetTexSubImageQCOM.is_loaded = false; } }
    match loadfn("ExtGetTexturesQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetTexturesQCOM.f = transmute(ptr); storage::ExtGetTexturesQCOM.is_loaded = true; }, _ => unsafe { storage::ExtGetTexturesQCOM.f = transmute(failing::ExtGetTexturesQCOM); storage::ExtGetTexturesQCOM.is_loaded = false; } }
    match loadfn("ExtIsProgramBinaryQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtIsProgramBinaryQCOM.f = transmute(ptr); storage::ExtIsProgramBinaryQCOM.is_loaded = true; }, _ => unsafe { storage::ExtIsProgramBinaryQCOM.f = transmute(failing::ExtIsProgramBinaryQCOM); storage::ExtIsProgramBinaryQCOM.is_loaded = false; } }
    match loadfn("ExtTexObjectStateOverrideiQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtTexObjectStateOverrideiQCOM.f = transmute(ptr); storage::ExtTexObjectStateOverrideiQCOM.is_loaded = true; }, _ => unsafe { storage::ExtTexObjectStateOverrideiQCOM.f = transmute(failing::ExtTexObjectStateOverrideiQCOM); storage::ExtTexObjectStateOverrideiQCOM.is_loaded = false; } }
    match loadfn("ExtractComponentEXT") { ptr if !ptr.is_null() => unsafe { storage::ExtractComponentEXT.f = transmute(ptr); storage::ExtractComponentEXT.is_loaded = true; }, _ => unsafe { storage::ExtractComponentEXT.f = transmute(failing::ExtractComponentEXT); storage::ExtractComponentEXT.is_loaded = false; } }
    match loadfn("FeedbackBuffer") { ptr if !ptr.is_null() => unsafe { storage::FeedbackBuffer.f = transmute(ptr); storage::FeedbackBuffer.is_loaded = true; }, _ => unsafe { storage::FeedbackBuffer.f = transmute(failing::FeedbackBuffer); storage::FeedbackBuffer.is_loaded = false; } }
    match loadfn("FeedbackBufferxOES") { ptr if !ptr.is_null() => unsafe { storage::FeedbackBufferxOES.f = transmute(ptr); storage::FeedbackBufferxOES.is_loaded = true; }, _ => unsafe { storage::FeedbackBufferxOES.f = transmute(failing::FeedbackBufferxOES); storage::FeedbackBufferxOES.is_loaded = false; } }
    match loadfn("FenceSync") { ptr if !ptr.is_null() => unsafe { storage::FenceSync.f = transmute(ptr); storage::FenceSync.is_loaded = true; }, _ => unsafe { storage::FenceSync.f = transmute(failing::FenceSync); storage::FenceSync.is_loaded = false; } }
    match loadfn("FenceSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FenceSyncAPPLE.f = transmute(ptr); storage::FenceSyncAPPLE.is_loaded = true; }, _ => unsafe { storage::FenceSyncAPPLE.f = transmute(failing::FenceSyncAPPLE); storage::FenceSyncAPPLE.is_loaded = false; } }
    match loadfn("FinalCombinerInputNV") { ptr if !ptr.is_null() => unsafe { storage::FinalCombinerInputNV.f = transmute(ptr); storage::FinalCombinerInputNV.is_loaded = true; }, _ => unsafe { storage::FinalCombinerInputNV.f = transmute(failing::FinalCombinerInputNV); storage::FinalCombinerInputNV.is_loaded = false; } }
    match loadfn("Finish") { ptr if !ptr.is_null() => unsafe { storage::Finish.f = transmute(ptr); storage::Finish.is_loaded = true; }, _ => unsafe { storage::Finish.f = transmute(failing::Finish); storage::Finish.is_loaded = false; } }
    match loadfn("FinishAsyncSGIX") { ptr if !ptr.is_null() => unsafe { storage::FinishAsyncSGIX.f = transmute(ptr); storage::FinishAsyncSGIX.is_loaded = true; }, _ => unsafe { storage::FinishAsyncSGIX.f = transmute(failing::FinishAsyncSGIX); storage::FinishAsyncSGIX.is_loaded = false; } }
    match loadfn("FinishFenceAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FinishFenceAPPLE.f = transmute(ptr); storage::FinishFenceAPPLE.is_loaded = true; }, _ => unsafe { storage::FinishFenceAPPLE.f = transmute(failing::FinishFenceAPPLE); storage::FinishFenceAPPLE.is_loaded = false; } }
    match loadfn("FinishFenceNV") { ptr if !ptr.is_null() => unsafe { storage::FinishFenceNV.f = transmute(ptr); storage::FinishFenceNV.is_loaded = true; }, _ => unsafe { storage::FinishFenceNV.f = transmute(failing::FinishFenceNV); storage::FinishFenceNV.is_loaded = false; } }
    match loadfn("FinishObjectAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FinishObjectAPPLE.f = transmute(ptr); storage::FinishObjectAPPLE.is_loaded = true; }, _ => unsafe { storage::FinishObjectAPPLE.f = transmute(failing::FinishObjectAPPLE); storage::FinishObjectAPPLE.is_loaded = false; } }
    match loadfn("FinishTextureSUNX") { ptr if !ptr.is_null() => unsafe { storage::FinishTextureSUNX.f = transmute(ptr); storage::FinishTextureSUNX.is_loaded = true; }, _ => unsafe { storage::FinishTextureSUNX.f = transmute(failing::FinishTextureSUNX); storage::FinishTextureSUNX.is_loaded = false; } }
    match loadfn("Flush") { ptr if !ptr.is_null() => unsafe { storage::Flush.f = transmute(ptr); storage::Flush.is_loaded = true; }, _ => unsafe { storage::Flush.f = transmute(failing::Flush); storage::Flush.is_loaded = false; } }
    match loadfn("FlushMappedBufferRange") { ptr if !ptr.is_null() => unsafe { storage::FlushMappedBufferRange.f = transmute(ptr); storage::FlushMappedBufferRange.is_loaded = true; }, _ => unsafe { storage::FlushMappedBufferRange.f = transmute(failing::FlushMappedBufferRange); storage::FlushMappedBufferRange.is_loaded = false; } }
    match loadfn("FlushMappedBufferRangeAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FlushMappedBufferRangeAPPLE.f = transmute(ptr); storage::FlushMappedBufferRangeAPPLE.is_loaded = true; }, _ => unsafe { storage::FlushMappedBufferRangeAPPLE.f = transmute(failing::FlushMappedBufferRangeAPPLE); storage::FlushMappedBufferRangeAPPLE.is_loaded = false; } }
    match loadfn("FlushMappedBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::FlushMappedBufferRangeEXT.f = transmute(ptr); storage::FlushMappedBufferRangeEXT.is_loaded = true; }, _ => unsafe { storage::FlushMappedBufferRangeEXT.f = transmute(failing::FlushMappedBufferRangeEXT); storage::FlushMappedBufferRangeEXT.is_loaded = false; } }
    match loadfn("FlushMappedNamedBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::FlushMappedNamedBufferRangeEXT.f = transmute(ptr); storage::FlushMappedNamedBufferRangeEXT.is_loaded = true; }, _ => unsafe { storage::FlushMappedNamedBufferRangeEXT.f = transmute(failing::FlushMappedNamedBufferRangeEXT); storage::FlushMappedNamedBufferRangeEXT.is_loaded = false; } }
    match loadfn("FlushPixelDataRangeNV") { ptr if !ptr.is_null() => unsafe { storage::FlushPixelDataRangeNV.f = transmute(ptr); storage::FlushPixelDataRangeNV.is_loaded = true; }, _ => unsafe { storage::FlushPixelDataRangeNV.f = transmute(failing::FlushPixelDataRangeNV); storage::FlushPixelDataRangeNV.is_loaded = false; } }
    match loadfn("FlushRasterSGIX") { ptr if !ptr.is_null() => unsafe { storage::FlushRasterSGIX.f = transmute(ptr); storage::FlushRasterSGIX.is_loaded = true; }, _ => unsafe { storage::FlushRasterSGIX.f = transmute(failing::FlushRasterSGIX); storage::FlushRasterSGIX.is_loaded = false; } }
    match loadfn("FlushStaticDataIBM") { ptr if !ptr.is_null() => unsafe { storage::FlushStaticDataIBM.f = transmute(ptr); storage::FlushStaticDataIBM.is_loaded = true; }, _ => unsafe { storage::FlushStaticDataIBM.f = transmute(failing::FlushStaticDataIBM); storage::FlushStaticDataIBM.is_loaded = false; } }
    match loadfn("FlushVertexArrayRangeAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FlushVertexArrayRangeAPPLE.f = transmute(ptr); storage::FlushVertexArrayRangeAPPLE.is_loaded = true; }, _ => unsafe { storage::FlushVertexArrayRangeAPPLE.f = transmute(failing::FlushVertexArrayRangeAPPLE); storage::FlushVertexArrayRangeAPPLE.is_loaded = false; } }
    match loadfn("FlushVertexArrayRangeNV") { ptr if !ptr.is_null() => unsafe { storage::FlushVertexArrayRangeNV.f = transmute(ptr); storage::FlushVertexArrayRangeNV.is_loaded = true; }, _ => unsafe { storage::FlushVertexArrayRangeNV.f = transmute(failing::FlushVertexArrayRangeNV); storage::FlushVertexArrayRangeNV.is_loaded = false; } }
    match loadfn("FogCoordFormatNV") { ptr if !ptr.is_null() => unsafe { storage::FogCoordFormatNV.f = transmute(ptr); storage::FogCoordFormatNV.is_loaded = true; }, _ => unsafe { storage::FogCoordFormatNV.f = transmute(failing::FogCoordFormatNV); storage::FogCoordFormatNV.is_loaded = false; } }
    match loadfn("FogCoordPointer") { ptr if !ptr.is_null() => unsafe { storage::FogCoordPointer.f = transmute(ptr); storage::FogCoordPointer.is_loaded = true; }, _ => unsafe { storage::FogCoordPointer.f = transmute(failing::FogCoordPointer); storage::FogCoordPointer.is_loaded = false; } }
    match loadfn("FogCoordPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoordPointerEXT.f = transmute(ptr); storage::FogCoordPointerEXT.is_loaded = true; }, _ => unsafe { storage::FogCoordPointerEXT.f = transmute(failing::FogCoordPointerEXT); storage::FogCoordPointerEXT.is_loaded = false; } }
    match loadfn("FogCoordPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::FogCoordPointerListIBM.f = transmute(ptr); storage::FogCoordPointerListIBM.is_loaded = true; }, _ => unsafe { storage::FogCoordPointerListIBM.f = transmute(failing::FogCoordPointerListIBM); storage::FogCoordPointerListIBM.is_loaded = false; } }
    match loadfn("FogCoordd") { ptr if !ptr.is_null() => unsafe { storage::FogCoordd.f = transmute(ptr); storage::FogCoordd.is_loaded = true; }, _ => unsafe { storage::FogCoordd.f = transmute(failing::FogCoordd); storage::FogCoordd.is_loaded = false; } }
    match loadfn("FogCoorddEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoorddEXT.f = transmute(ptr); storage::FogCoorddEXT.is_loaded = true; }, _ => unsafe { storage::FogCoorddEXT.f = transmute(failing::FogCoorddEXT); storage::FogCoorddEXT.is_loaded = false; } }
    match loadfn("FogCoorddv") { ptr if !ptr.is_null() => unsafe { storage::FogCoorddv.f = transmute(ptr); storage::FogCoorddv.is_loaded = true; }, _ => unsafe { storage::FogCoorddv.f = transmute(failing::FogCoorddv); storage::FogCoorddv.is_loaded = false; } }
    match loadfn("FogCoorddvEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoorddvEXT.f = transmute(ptr); storage::FogCoorddvEXT.is_loaded = true; }, _ => unsafe { storage::FogCoorddvEXT.f = transmute(failing::FogCoorddvEXT); storage::FogCoorddvEXT.is_loaded = false; } }
    match loadfn("FogCoordf") { ptr if !ptr.is_null() => unsafe { storage::FogCoordf.f = transmute(ptr); storage::FogCoordf.is_loaded = true; }, _ => unsafe { storage::FogCoordf.f = transmute(failing::FogCoordf); storage::FogCoordf.is_loaded = false; } }
    match loadfn("FogCoordfEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoordfEXT.f = transmute(ptr); storage::FogCoordfEXT.is_loaded = true; }, _ => unsafe { storage::FogCoordfEXT.f = transmute(failing::FogCoordfEXT); storage::FogCoordfEXT.is_loaded = false; } }
    match loadfn("FogCoordfv") { ptr if !ptr.is_null() => unsafe { storage::FogCoordfv.f = transmute(ptr); storage::FogCoordfv.is_loaded = true; }, _ => unsafe { storage::FogCoordfv.f = transmute(failing::FogCoordfv); storage::FogCoordfv.is_loaded = false; } }
    match loadfn("FogCoordfvEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoordfvEXT.f = transmute(ptr); storage::FogCoordfvEXT.is_loaded = true; }, _ => unsafe { storage::FogCoordfvEXT.f = transmute(failing::FogCoordfvEXT); storage::FogCoordfvEXT.is_loaded = false; } }
    match loadfn("FogCoordhNV") { ptr if !ptr.is_null() => unsafe { storage::FogCoordhNV.f = transmute(ptr); storage::FogCoordhNV.is_loaded = true; }, _ => unsafe { storage::FogCoordhNV.f = transmute(failing::FogCoordhNV); storage::FogCoordhNV.is_loaded = false; } }
    match loadfn("FogCoordhvNV") { ptr if !ptr.is_null() => unsafe { storage::FogCoordhvNV.f = transmute(ptr); storage::FogCoordhvNV.is_loaded = true; }, _ => unsafe { storage::FogCoordhvNV.f = transmute(failing::FogCoordhvNV); storage::FogCoordhvNV.is_loaded = false; } }
    match loadfn("FogFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::FogFuncSGIS.f = transmute(ptr); storage::FogFuncSGIS.is_loaded = true; }, _ => unsafe { storage::FogFuncSGIS.f = transmute(failing::FogFuncSGIS); storage::FogFuncSGIS.is_loaded = false; } }
    match loadfn("Fogf") { ptr if !ptr.is_null() => unsafe { storage::Fogf.f = transmute(ptr); storage::Fogf.is_loaded = true; }, _ => unsafe { storage::Fogf.f = transmute(failing::Fogf); storage::Fogf.is_loaded = false; } }
    match loadfn("Fogfv") { ptr if !ptr.is_null() => unsafe { storage::Fogfv.f = transmute(ptr); storage::Fogfv.is_loaded = true; }, _ => unsafe { storage::Fogfv.f = transmute(failing::Fogfv); storage::Fogfv.is_loaded = false; } }
    match loadfn("Fogi") { ptr if !ptr.is_null() => unsafe { storage::Fogi.f = transmute(ptr); storage::Fogi.is_loaded = true; }, _ => unsafe { storage::Fogi.f = transmute(failing::Fogi); storage::Fogi.is_loaded = false; } }
    match loadfn("Fogiv") { ptr if !ptr.is_null() => unsafe { storage::Fogiv.f = transmute(ptr); storage::Fogiv.is_loaded = true; }, _ => unsafe { storage::Fogiv.f = transmute(failing::Fogiv); storage::Fogiv.is_loaded = false; } }
    match loadfn("Fogx") { ptr if !ptr.is_null() => unsafe { storage::Fogx.f = transmute(ptr); storage::Fogx.is_loaded = true; }, _ => unsafe { storage::Fogx.f = transmute(failing::Fogx); storage::Fogx.is_loaded = false; } }
    match loadfn("FogxOES") { ptr if !ptr.is_null() => unsafe { storage::FogxOES.f = transmute(ptr); storage::FogxOES.is_loaded = true; }, _ => unsafe { storage::FogxOES.f = transmute(failing::FogxOES); storage::FogxOES.is_loaded = false; } }
    match loadfn("Fogxv") { ptr if !ptr.is_null() => unsafe { storage::Fogxv.f = transmute(ptr); storage::Fogxv.is_loaded = true; }, _ => unsafe { storage::Fogxv.f = transmute(failing::Fogxv); storage::Fogxv.is_loaded = false; } }
    match loadfn("FogxvOES") { ptr if !ptr.is_null() => unsafe { storage::FogxvOES.f = transmute(ptr); storage::FogxvOES.is_loaded = true; }, _ => unsafe { storage::FogxvOES.f = transmute(failing::FogxvOES); storage::FogxvOES.is_loaded = false; } }
    match loadfn("FragmentColorMaterialSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentColorMaterialSGIX.f = transmute(ptr); storage::FragmentColorMaterialSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentColorMaterialSGIX.f = transmute(failing::FragmentColorMaterialSGIX); storage::FragmentColorMaterialSGIX.is_loaded = false; } }
    match loadfn("FragmentLightModelfSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightModelfSGIX.f = transmute(ptr); storage::FragmentLightModelfSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentLightModelfSGIX.f = transmute(failing::FragmentLightModelfSGIX); storage::FragmentLightModelfSGIX.is_loaded = false; } }
    match loadfn("FragmentLightModelfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightModelfvSGIX.f = transmute(ptr); storage::FragmentLightModelfvSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentLightModelfvSGIX.f = transmute(failing::FragmentLightModelfvSGIX); storage::FragmentLightModelfvSGIX.is_loaded = false; } }
    match loadfn("FragmentLightModeliSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightModeliSGIX.f = transmute(ptr); storage::FragmentLightModeliSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentLightModeliSGIX.f = transmute(failing::FragmentLightModeliSGIX); storage::FragmentLightModeliSGIX.is_loaded = false; } }
    match loadfn("FragmentLightModelivSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightModelivSGIX.f = transmute(ptr); storage::FragmentLightModelivSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentLightModelivSGIX.f = transmute(failing::FragmentLightModelivSGIX); storage::FragmentLightModelivSGIX.is_loaded = false; } }
    match loadfn("FragmentLightfSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightfSGIX.f = transmute(ptr); storage::FragmentLightfSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentLightfSGIX.f = transmute(failing::FragmentLightfSGIX); storage::FragmentLightfSGIX.is_loaded = false; } }
    match loadfn("FragmentLightfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightfvSGIX.f = transmute(ptr); storage::FragmentLightfvSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentLightfvSGIX.f = transmute(failing::FragmentLightfvSGIX); storage::FragmentLightfvSGIX.is_loaded = false; } }
    match loadfn("FragmentLightiSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightiSGIX.f = transmute(ptr); storage::FragmentLightiSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentLightiSGIX.f = transmute(failing::FragmentLightiSGIX); storage::FragmentLightiSGIX.is_loaded = false; } }
    match loadfn("FragmentLightivSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightivSGIX.f = transmute(ptr); storage::FragmentLightivSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentLightivSGIX.f = transmute(failing::FragmentLightivSGIX); storage::FragmentLightivSGIX.is_loaded = false; } }
    match loadfn("FragmentMaterialfSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentMaterialfSGIX.f = transmute(ptr); storage::FragmentMaterialfSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentMaterialfSGIX.f = transmute(failing::FragmentMaterialfSGIX); storage::FragmentMaterialfSGIX.is_loaded = false; } }
    match loadfn("FragmentMaterialfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentMaterialfvSGIX.f = transmute(ptr); storage::FragmentMaterialfvSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentMaterialfvSGIX.f = transmute(failing::FragmentMaterialfvSGIX); storage::FragmentMaterialfvSGIX.is_loaded = false; } }
    match loadfn("FragmentMaterialiSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentMaterialiSGIX.f = transmute(ptr); storage::FragmentMaterialiSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentMaterialiSGIX.f = transmute(failing::FragmentMaterialiSGIX); storage::FragmentMaterialiSGIX.is_loaded = false; } }
    match loadfn("FragmentMaterialivSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentMaterialivSGIX.f = transmute(ptr); storage::FragmentMaterialivSGIX.is_loaded = true; }, _ => unsafe { storage::FragmentMaterialivSGIX.f = transmute(failing::FragmentMaterialivSGIX); storage::FragmentMaterialivSGIX.is_loaded = false; } }
    match loadfn("FrameTerminatorGREMEDY") { ptr if !ptr.is_null() => unsafe { storage::FrameTerminatorGREMEDY.f = transmute(ptr); storage::FrameTerminatorGREMEDY.is_loaded = true; }, _ => unsafe { storage::FrameTerminatorGREMEDY.f = transmute(failing::FrameTerminatorGREMEDY); storage::FrameTerminatorGREMEDY.is_loaded = false; } }
    match loadfn("FrameZoomSGIX") { ptr if !ptr.is_null() => unsafe { storage::FrameZoomSGIX.f = transmute(ptr); storage::FrameZoomSGIX.is_loaded = true; }, _ => unsafe { storage::FrameZoomSGIX.f = transmute(failing::FrameZoomSGIX); storage::FrameZoomSGIX.is_loaded = false; } }
    match loadfn("FramebufferDrawBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferDrawBufferEXT.f = transmute(ptr); storage::FramebufferDrawBufferEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferDrawBufferEXT.f = transmute(failing::FramebufferDrawBufferEXT); storage::FramebufferDrawBufferEXT.is_loaded = false; } }
    match loadfn("FramebufferDrawBuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferDrawBuffersEXT.f = transmute(ptr); storage::FramebufferDrawBuffersEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferDrawBuffersEXT.f = transmute(failing::FramebufferDrawBuffersEXT); storage::FramebufferDrawBuffersEXT.is_loaded = false; } }
    match loadfn("FramebufferParameteri") { ptr if !ptr.is_null() => unsafe { storage::FramebufferParameteri.f = transmute(ptr); storage::FramebufferParameteri.is_loaded = true; }, _ => unsafe { storage::FramebufferParameteri.f = transmute(failing::FramebufferParameteri); storage::FramebufferParameteri.is_loaded = false; } }
    match loadfn("FramebufferReadBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferReadBufferEXT.f = transmute(ptr); storage::FramebufferReadBufferEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferReadBufferEXT.f = transmute(failing::FramebufferReadBufferEXT); storage::FramebufferReadBufferEXT.is_loaded = false; } }
    match loadfn("FramebufferRenderbuffer") { ptr if !ptr.is_null() => unsafe { storage::FramebufferRenderbuffer.f = transmute(ptr); storage::FramebufferRenderbuffer.is_loaded = true; }, _ => unsafe { storage::FramebufferRenderbuffer.f = transmute(failing::FramebufferRenderbuffer); storage::FramebufferRenderbuffer.is_loaded = false; } }
    match loadfn("FramebufferRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferRenderbufferEXT.f = transmute(ptr); storage::FramebufferRenderbufferEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferRenderbufferEXT.f = transmute(failing::FramebufferRenderbufferEXT); storage::FramebufferRenderbufferEXT.is_loaded = false; } }
    match loadfn("FramebufferRenderbufferOES") { ptr if !ptr.is_null() => unsafe { storage::FramebufferRenderbufferOES.f = transmute(ptr); storage::FramebufferRenderbufferOES.is_loaded = true; }, _ => unsafe { storage::FramebufferRenderbufferOES.f = transmute(failing::FramebufferRenderbufferOES); storage::FramebufferRenderbufferOES.is_loaded = false; } }
    match loadfn("FramebufferTexture") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture.f = transmute(ptr); storage::FramebufferTexture.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture.f = transmute(failing::FramebufferTexture); storage::FramebufferTexture.is_loaded = false; } }
    match loadfn("FramebufferTexture1D") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture1D.f = transmute(ptr); storage::FramebufferTexture1D.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture1D.f = transmute(failing::FramebufferTexture1D); storage::FramebufferTexture1D.is_loaded = false; } }
    match loadfn("FramebufferTexture1DEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture1DEXT.f = transmute(ptr); storage::FramebufferTexture1DEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture1DEXT.f = transmute(failing::FramebufferTexture1DEXT); storage::FramebufferTexture1DEXT.is_loaded = false; } }
    match loadfn("FramebufferTexture2D") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2D.f = transmute(ptr); storage::FramebufferTexture2D.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture2D.f = transmute(failing::FramebufferTexture2D); storage::FramebufferTexture2D.is_loaded = false; } }
    match loadfn("FramebufferTexture2DEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2DEXT.f = transmute(ptr); storage::FramebufferTexture2DEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture2DEXT.f = transmute(failing::FramebufferTexture2DEXT); storage::FramebufferTexture2DEXT.is_loaded = false; } }
    match loadfn("FramebufferTexture2DMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2DMultisampleEXT.f = transmute(ptr); storage::FramebufferTexture2DMultisampleEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture2DMultisampleEXT.f = transmute(failing::FramebufferTexture2DMultisampleEXT); storage::FramebufferTexture2DMultisampleEXT.is_loaded = false; } }
    match loadfn("FramebufferTexture2DMultisampleIMG") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2DMultisampleIMG.f = transmute(ptr); storage::FramebufferTexture2DMultisampleIMG.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture2DMultisampleIMG.f = transmute(failing::FramebufferTexture2DMultisampleIMG); storage::FramebufferTexture2DMultisampleIMG.is_loaded = false; } }
    match loadfn("FramebufferTexture2DOES") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2DOES.f = transmute(ptr); storage::FramebufferTexture2DOES.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture2DOES.f = transmute(failing::FramebufferTexture2DOES); storage::FramebufferTexture2DOES.is_loaded = false; } }
    match loadfn("FramebufferTexture3D") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture3D.f = transmute(ptr); storage::FramebufferTexture3D.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture3D.f = transmute(failing::FramebufferTexture3D); storage::FramebufferTexture3D.is_loaded = false; } }
    match loadfn("FramebufferTexture3DEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture3DEXT.f = transmute(ptr); storage::FramebufferTexture3DEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture3DEXT.f = transmute(failing::FramebufferTexture3DEXT); storage::FramebufferTexture3DEXT.is_loaded = false; } }
    match loadfn("FramebufferTexture3DOES") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture3DOES.f = transmute(ptr); storage::FramebufferTexture3DOES.is_loaded = true; }, _ => unsafe { storage::FramebufferTexture3DOES.f = transmute(failing::FramebufferTexture3DOES); storage::FramebufferTexture3DOES.is_loaded = false; } }
    match loadfn("FramebufferTextureARB") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureARB.f = transmute(ptr); storage::FramebufferTextureARB.is_loaded = true; }, _ => unsafe { storage::FramebufferTextureARB.f = transmute(failing::FramebufferTextureARB); storage::FramebufferTextureARB.is_loaded = false; } }
    match loadfn("FramebufferTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureEXT.f = transmute(ptr); storage::FramebufferTextureEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferTextureEXT.f = transmute(failing::FramebufferTextureEXT); storage::FramebufferTextureEXT.is_loaded = false; } }
    match loadfn("FramebufferTextureFaceARB") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureFaceARB.f = transmute(ptr); storage::FramebufferTextureFaceARB.is_loaded = true; }, _ => unsafe { storage::FramebufferTextureFaceARB.f = transmute(failing::FramebufferTextureFaceARB); storage::FramebufferTextureFaceARB.is_loaded = false; } }
    match loadfn("FramebufferTextureFaceEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureFaceEXT.f = transmute(ptr); storage::FramebufferTextureFaceEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferTextureFaceEXT.f = transmute(failing::FramebufferTextureFaceEXT); storage::FramebufferTextureFaceEXT.is_loaded = false; } }
    match loadfn("FramebufferTextureLayer") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureLayer.f = transmute(ptr); storage::FramebufferTextureLayer.is_loaded = true; }, _ => unsafe { storage::FramebufferTextureLayer.f = transmute(failing::FramebufferTextureLayer); storage::FramebufferTextureLayer.is_loaded = false; } }
    match loadfn("FramebufferTextureLayerARB") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureLayerARB.f = transmute(ptr); storage::FramebufferTextureLayerARB.is_loaded = true; }, _ => unsafe { storage::FramebufferTextureLayerARB.f = transmute(failing::FramebufferTextureLayerARB); storage::FramebufferTextureLayerARB.is_loaded = false; } }
    match loadfn("FramebufferTextureLayerEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureLayerEXT.f = transmute(ptr); storage::FramebufferTextureLayerEXT.is_loaded = true; }, _ => unsafe { storage::FramebufferTextureLayerEXT.f = transmute(failing::FramebufferTextureLayerEXT); storage::FramebufferTextureLayerEXT.is_loaded = false; } }
    match loadfn("FreeObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::FreeObjectBufferATI.f = transmute(ptr); storage::FreeObjectBufferATI.is_loaded = true; }, _ => unsafe { storage::FreeObjectBufferATI.f = transmute(failing::FreeObjectBufferATI); storage::FreeObjectBufferATI.is_loaded = false; } }
    match loadfn("FrontFace") { ptr if !ptr.is_null() => unsafe { storage::FrontFace.f = transmute(ptr); storage::FrontFace.is_loaded = true; }, _ => unsafe { storage::FrontFace.f = transmute(failing::FrontFace); storage::FrontFace.is_loaded = false; } }
    match loadfn("Frustum") { ptr if !ptr.is_null() => unsafe { storage::Frustum.f = transmute(ptr); storage::Frustum.is_loaded = true; }, _ => unsafe { storage::Frustum.f = transmute(failing::Frustum); storage::Frustum.is_loaded = false; } }
    match loadfn("Frustumf") { ptr if !ptr.is_null() => unsafe { storage::Frustumf.f = transmute(ptr); storage::Frustumf.is_loaded = true; }, _ => unsafe { storage::Frustumf.f = transmute(failing::Frustumf); storage::Frustumf.is_loaded = false; } }
    match loadfn("FrustumfOES") { ptr if !ptr.is_null() => unsafe { storage::FrustumfOES.f = transmute(ptr); storage::FrustumfOES.is_loaded = true; }, _ => unsafe { storage::FrustumfOES.f = transmute(failing::FrustumfOES); storage::FrustumfOES.is_loaded = false; } }
    match loadfn("Frustumx") { ptr if !ptr.is_null() => unsafe { storage::Frustumx.f = transmute(ptr); storage::Frustumx.is_loaded = true; }, _ => unsafe { storage::Frustumx.f = transmute(failing::Frustumx); storage::Frustumx.is_loaded = false; } }
    match loadfn("FrustumxOES") { ptr if !ptr.is_null() => unsafe { storage::FrustumxOES.f = transmute(ptr); storage::FrustumxOES.is_loaded = true; }, _ => unsafe { storage::FrustumxOES.f = transmute(failing::FrustumxOES); storage::FrustumxOES.is_loaded = false; } }
    match loadfn("GenAsyncMarkersSGIX") { ptr if !ptr.is_null() => unsafe { storage::GenAsyncMarkersSGIX.f = transmute(ptr); storage::GenAsyncMarkersSGIX.is_loaded = true; }, _ => unsafe { storage::GenAsyncMarkersSGIX.f = transmute(failing::GenAsyncMarkersSGIX); storage::GenAsyncMarkersSGIX.is_loaded = false; } }
    match loadfn("GenBuffers") { ptr if !ptr.is_null() => unsafe { storage::GenBuffers.f = transmute(ptr); storage::GenBuffers.is_loaded = true; }, _ => unsafe { storage::GenBuffers.f = transmute(failing::GenBuffers); storage::GenBuffers.is_loaded = false; } }
    match loadfn("GenBuffersARB") { ptr if !ptr.is_null() => unsafe { storage::GenBuffersARB.f = transmute(ptr); storage::GenBuffersARB.is_loaded = true; }, _ => unsafe { storage::GenBuffersARB.f = transmute(failing::GenBuffersARB); storage::GenBuffersARB.is_loaded = false; } }
    match loadfn("GenFencesAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GenFencesAPPLE.f = transmute(ptr); storage::GenFencesAPPLE.is_loaded = true; }, _ => unsafe { storage::GenFencesAPPLE.f = transmute(failing::GenFencesAPPLE); storage::GenFencesAPPLE.is_loaded = false; } }
    match loadfn("GenFencesNV") { ptr if !ptr.is_null() => unsafe { storage::GenFencesNV.f = transmute(ptr); storage::GenFencesNV.is_loaded = true; }, _ => unsafe { storage::GenFencesNV.f = transmute(failing::GenFencesNV); storage::GenFencesNV.is_loaded = false; } }
    match loadfn("GenFragmentShadersATI") { ptr if !ptr.is_null() => unsafe { storage::GenFragmentShadersATI.f = transmute(ptr); storage::GenFragmentShadersATI.is_loaded = true; }, _ => unsafe { storage::GenFragmentShadersATI.f = transmute(failing::GenFragmentShadersATI); storage::GenFragmentShadersATI.is_loaded = false; } }
    match loadfn("GenFramebuffers") { ptr if !ptr.is_null() => unsafe { storage::GenFramebuffers.f = transmute(ptr); storage::GenFramebuffers.is_loaded = true; }, _ => unsafe { storage::GenFramebuffers.f = transmute(failing::GenFramebuffers); storage::GenFramebuffers.is_loaded = false; } }
    match loadfn("GenFramebuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::GenFramebuffersEXT.f = transmute(ptr); storage::GenFramebuffersEXT.is_loaded = true; }, _ => unsafe { storage::GenFramebuffersEXT.f = transmute(failing::GenFramebuffersEXT); storage::GenFramebuffersEXT.is_loaded = false; } }
    match loadfn("GenFramebuffersOES") { ptr if !ptr.is_null() => unsafe { storage::GenFramebuffersOES.f = transmute(ptr); storage::GenFramebuffersOES.is_loaded = true; }, _ => unsafe { storage::GenFramebuffersOES.f = transmute(failing::GenFramebuffersOES); storage::GenFramebuffersOES.is_loaded = false; } }
    match loadfn("GenLists") { ptr if !ptr.is_null() => unsafe { storage::GenLists.f = transmute(ptr); storage::GenLists.is_loaded = true; }, _ => unsafe { storage::GenLists.f = transmute(failing::GenLists); storage::GenLists.is_loaded = false; } }
    match loadfn("GenNamesAMD") { ptr if !ptr.is_null() => unsafe { storage::GenNamesAMD.f = transmute(ptr); storage::GenNamesAMD.is_loaded = true; }, _ => unsafe { storage::GenNamesAMD.f = transmute(failing::GenNamesAMD); storage::GenNamesAMD.is_loaded = false; } }
    match loadfn("GenOcclusionQueriesNV") { ptr if !ptr.is_null() => unsafe { storage::GenOcclusionQueriesNV.f = transmute(ptr); storage::GenOcclusionQueriesNV.is_loaded = true; }, _ => unsafe { storage::GenOcclusionQueriesNV.f = transmute(failing::GenOcclusionQueriesNV); storage::GenOcclusionQueriesNV.is_loaded = false; } }
    match loadfn("GenPathsNV") { ptr if !ptr.is_null() => unsafe { storage::GenPathsNV.f = transmute(ptr); storage::GenPathsNV.is_loaded = true; }, _ => unsafe { storage::GenPathsNV.f = transmute(failing::GenPathsNV); storage::GenPathsNV.is_loaded = false; } }
    match loadfn("GenPerfMonitorsAMD") { ptr if !ptr.is_null() => unsafe { storage::GenPerfMonitorsAMD.f = transmute(ptr); storage::GenPerfMonitorsAMD.is_loaded = true; }, _ => unsafe { storage::GenPerfMonitorsAMD.f = transmute(failing::GenPerfMonitorsAMD); storage::GenPerfMonitorsAMD.is_loaded = false; } }
    match loadfn("GenProgramPipelines") { ptr if !ptr.is_null() => unsafe { storage::GenProgramPipelines.f = transmute(ptr); storage::GenProgramPipelines.is_loaded = true; }, _ => unsafe { storage::GenProgramPipelines.f = transmute(failing::GenProgramPipelines); storage::GenProgramPipelines.is_loaded = false; } }
    match loadfn("GenProgramPipelinesEXT") { ptr if !ptr.is_null() => unsafe { storage::GenProgramPipelinesEXT.f = transmute(ptr); storage::GenProgramPipelinesEXT.is_loaded = true; }, _ => unsafe { storage::GenProgramPipelinesEXT.f = transmute(failing::GenProgramPipelinesEXT); storage::GenProgramPipelinesEXT.is_loaded = false; } }
    match loadfn("GenProgramsARB") { ptr if !ptr.is_null() => unsafe { storage::GenProgramsARB.f = transmute(ptr); storage::GenProgramsARB.is_loaded = true; }, _ => unsafe { storage::GenProgramsARB.f = transmute(failing::GenProgramsARB); storage::GenProgramsARB.is_loaded = false; } }
    match loadfn("GenProgramsNV") { ptr if !ptr.is_null() => unsafe { storage::GenProgramsNV.f = transmute(ptr); storage::GenProgramsNV.is_loaded = true; }, _ => unsafe { storage::GenProgramsNV.f = transmute(failing::GenProgramsNV); storage::GenProgramsNV.is_loaded = false; } }
    match loadfn("GenQueries") { ptr if !ptr.is_null() => unsafe { storage::GenQueries.f = transmute(ptr); storage::GenQueries.is_loaded = true; }, _ => unsafe { storage::GenQueries.f = transmute(failing::GenQueries); storage::GenQueries.is_loaded = false; } }
    match loadfn("GenQueriesARB") { ptr if !ptr.is_null() => unsafe { storage::GenQueriesARB.f = transmute(ptr); storage::GenQueriesARB.is_loaded = true; }, _ => unsafe { storage::GenQueriesARB.f = transmute(failing::GenQueriesARB); storage::GenQueriesARB.is_loaded = false; } }
    match loadfn("GenQueriesEXT") { ptr if !ptr.is_null() => unsafe { storage::GenQueriesEXT.f = transmute(ptr); storage::GenQueriesEXT.is_loaded = true; }, _ => unsafe { storage::GenQueriesEXT.f = transmute(failing::GenQueriesEXT); storage::GenQueriesEXT.is_loaded = false; } }
    match loadfn("GenRenderbuffers") { ptr if !ptr.is_null() => unsafe { storage::GenRenderbuffers.f = transmute(ptr); storage::GenRenderbuffers.is_loaded = true; }, _ => unsafe { storage::GenRenderbuffers.f = transmute(failing::GenRenderbuffers); storage::GenRenderbuffers.is_loaded = false; } }
    match loadfn("GenRenderbuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::GenRenderbuffersEXT.f = transmute(ptr); storage::GenRenderbuffersEXT.is_loaded = true; }, _ => unsafe { storage::GenRenderbuffersEXT.f = transmute(failing::GenRenderbuffersEXT); storage::GenRenderbuffersEXT.is_loaded = false; } }
    match loadfn("GenRenderbuffersOES") { ptr if !ptr.is_null() => unsafe { storage::GenRenderbuffersOES.f = transmute(ptr); storage::GenRenderbuffersOES.is_loaded = true; }, _ => unsafe { storage::GenRenderbuffersOES.f = transmute(failing::GenRenderbuffersOES); storage::GenRenderbuffersOES.is_loaded = false; } }
    match loadfn("GenSamplers") { ptr if !ptr.is_null() => unsafe { storage::GenSamplers.f = transmute(ptr); storage::GenSamplers.is_loaded = true; }, _ => unsafe { storage::GenSamplers.f = transmute(failing::GenSamplers); storage::GenSamplers.is_loaded = false; } }
    match loadfn("GenSymbolsEXT") { ptr if !ptr.is_null() => unsafe { storage::GenSymbolsEXT.f = transmute(ptr); storage::GenSymbolsEXT.is_loaded = true; }, _ => unsafe { storage::GenSymbolsEXT.f = transmute(failing::GenSymbolsEXT); storage::GenSymbolsEXT.is_loaded = false; } }
    match loadfn("GenTextures") { ptr if !ptr.is_null() => unsafe { storage::GenTextures.f = transmute(ptr); storage::GenTextures.is_loaded = true; }, _ => unsafe { storage::GenTextures.f = transmute(failing::GenTextures); storage::GenTextures.is_loaded = false; } }
    match loadfn("GenTexturesEXT") { ptr if !ptr.is_null() => unsafe { storage::GenTexturesEXT.f = transmute(ptr); storage::GenTexturesEXT.is_loaded = true; }, _ => unsafe { storage::GenTexturesEXT.f = transmute(failing::GenTexturesEXT); storage::GenTexturesEXT.is_loaded = false; } }
    match loadfn("GenTransformFeedbacks") { ptr if !ptr.is_null() => unsafe { storage::GenTransformFeedbacks.f = transmute(ptr); storage::GenTransformFeedbacks.is_loaded = true; }, _ => unsafe { storage::GenTransformFeedbacks.f = transmute(failing::GenTransformFeedbacks); storage::GenTransformFeedbacks.is_loaded = false; } }
    match loadfn("GenTransformFeedbacksNV") { ptr if !ptr.is_null() => unsafe { storage::GenTransformFeedbacksNV.f = transmute(ptr); storage::GenTransformFeedbacksNV.is_loaded = true; }, _ => unsafe { storage::GenTransformFeedbacksNV.f = transmute(failing::GenTransformFeedbacksNV); storage::GenTransformFeedbacksNV.is_loaded = false; } }
    match loadfn("GenVertexArrays") { ptr if !ptr.is_null() => unsafe { storage::GenVertexArrays.f = transmute(ptr); storage::GenVertexArrays.is_loaded = true; }, _ => unsafe { storage::GenVertexArrays.f = transmute(failing::GenVertexArrays); storage::GenVertexArrays.is_loaded = false; } }
    match loadfn("GenVertexArraysAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GenVertexArraysAPPLE.f = transmute(ptr); storage::GenVertexArraysAPPLE.is_loaded = true; }, _ => unsafe { storage::GenVertexArraysAPPLE.f = transmute(failing::GenVertexArraysAPPLE); storage::GenVertexArraysAPPLE.is_loaded = false; } }
    match loadfn("GenVertexArraysOES") { ptr if !ptr.is_null() => unsafe { storage::GenVertexArraysOES.f = transmute(ptr); storage::GenVertexArraysOES.is_loaded = true; }, _ => unsafe { storage::GenVertexArraysOES.f = transmute(failing::GenVertexArraysOES); storage::GenVertexArraysOES.is_loaded = false; } }
    match loadfn("GenVertexShadersEXT") { ptr if !ptr.is_null() => unsafe { storage::GenVertexShadersEXT.f = transmute(ptr); storage::GenVertexShadersEXT.is_loaded = true; }, _ => unsafe { storage::GenVertexShadersEXT.f = transmute(failing::GenVertexShadersEXT); storage::GenVertexShadersEXT.is_loaded = false; } }
    match loadfn("GenerateMipmap") { ptr if !ptr.is_null() => unsafe { storage::GenerateMipmap.f = transmute(ptr); storage::GenerateMipmap.is_loaded = true; }, _ => unsafe { storage::GenerateMipmap.f = transmute(failing::GenerateMipmap); storage::GenerateMipmap.is_loaded = false; } }
    match loadfn("GenerateMipmapEXT") { ptr if !ptr.is_null() => unsafe { storage::GenerateMipmapEXT.f = transmute(ptr); storage::GenerateMipmapEXT.is_loaded = true; }, _ => unsafe { storage::GenerateMipmapEXT.f = transmute(failing::GenerateMipmapEXT); storage::GenerateMipmapEXT.is_loaded = false; } }
    match loadfn("GenerateMipmapOES") { ptr if !ptr.is_null() => unsafe { storage::GenerateMipmapOES.f = transmute(ptr); storage::GenerateMipmapOES.is_loaded = true; }, _ => unsafe { storage::GenerateMipmapOES.f = transmute(failing::GenerateMipmapOES); storage::GenerateMipmapOES.is_loaded = false; } }
    match loadfn("GenerateMultiTexMipmapEXT") { ptr if !ptr.is_null() => unsafe { storage::GenerateMultiTexMipmapEXT.f = transmute(ptr); storage::GenerateMultiTexMipmapEXT.is_loaded = true; }, _ => unsafe { storage::GenerateMultiTexMipmapEXT.f = transmute(failing::GenerateMultiTexMipmapEXT); storage::GenerateMultiTexMipmapEXT.is_loaded = false; } }
    match loadfn("GenerateTextureMipmapEXT") { ptr if !ptr.is_null() => unsafe { storage::GenerateTextureMipmapEXT.f = transmute(ptr); storage::GenerateTextureMipmapEXT.is_loaded = true; }, _ => unsafe { storage::GenerateTextureMipmapEXT.f = transmute(failing::GenerateTextureMipmapEXT); storage::GenerateTextureMipmapEXT.is_loaded = false; } }
    match loadfn("GetActiveAtomicCounterBufferiv") { ptr if !ptr.is_null() => unsafe { storage::GetActiveAtomicCounterBufferiv.f = transmute(ptr); storage::GetActiveAtomicCounterBufferiv.is_loaded = true; }, _ => unsafe { storage::GetActiveAtomicCounterBufferiv.f = transmute(failing::GetActiveAtomicCounterBufferiv); storage::GetActiveAtomicCounterBufferiv.is_loaded = false; } }
    match loadfn("GetActiveAttrib") { ptr if !ptr.is_null() => unsafe { storage::GetActiveAttrib.f = transmute(ptr); storage::GetActiveAttrib.is_loaded = true; }, _ => unsafe { storage::GetActiveAttrib.f = transmute(failing::GetActiveAttrib); storage::GetActiveAttrib.is_loaded = false; } }
    match loadfn("GetActiveAttribARB") { ptr if !ptr.is_null() => unsafe { storage::GetActiveAttribARB.f = transmute(ptr); storage::GetActiveAttribARB.is_loaded = true; }, _ => unsafe { storage::GetActiveAttribARB.f = transmute(failing::GetActiveAttribARB); storage::GetActiveAttribARB.is_loaded = false; } }
    match loadfn("GetActiveSubroutineName") { ptr if !ptr.is_null() => unsafe { storage::GetActiveSubroutineName.f = transmute(ptr); storage::GetActiveSubroutineName.is_loaded = true; }, _ => unsafe { storage::GetActiveSubroutineName.f = transmute(failing::GetActiveSubroutineName); storage::GetActiveSubroutineName.is_loaded = false; } }
    match loadfn("GetActiveSubroutineUniformName") { ptr if !ptr.is_null() => unsafe { storage::GetActiveSubroutineUniformName.f = transmute(ptr); storage::GetActiveSubroutineUniformName.is_loaded = true; }, _ => unsafe { storage::GetActiveSubroutineUniformName.f = transmute(failing::GetActiveSubroutineUniformName); storage::GetActiveSubroutineUniformName.is_loaded = false; } }
    match loadfn("GetActiveSubroutineUniformiv") { ptr if !ptr.is_null() => unsafe { storage::GetActiveSubroutineUniformiv.f = transmute(ptr); storage::GetActiveSubroutineUniformiv.is_loaded = true; }, _ => unsafe { storage::GetActiveSubroutineUniformiv.f = transmute(failing::GetActiveSubroutineUniformiv); storage::GetActiveSubroutineUniformiv.is_loaded = false; } }
    match loadfn("GetActiveUniform") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniform.f = transmute(ptr); storage::GetActiveUniform.is_loaded = true; }, _ => unsafe { storage::GetActiveUniform.f = transmute(failing::GetActiveUniform); storage::GetActiveUniform.is_loaded = false; } }
    match loadfn("GetActiveUniformARB") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformARB.f = transmute(ptr); storage::GetActiveUniformARB.is_loaded = true; }, _ => unsafe { storage::GetActiveUniformARB.f = transmute(failing::GetActiveUniformARB); storage::GetActiveUniformARB.is_loaded = false; } }
    match loadfn("GetActiveUniformBlockName") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformBlockName.f = transmute(ptr); storage::GetActiveUniformBlockName.is_loaded = true; }, _ => unsafe { storage::GetActiveUniformBlockName.f = transmute(failing::GetActiveUniformBlockName); storage::GetActiveUniformBlockName.is_loaded = false; } }
    match loadfn("GetActiveUniformBlockiv") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformBlockiv.f = transmute(ptr); storage::GetActiveUniformBlockiv.is_loaded = true; }, _ => unsafe { storage::GetActiveUniformBlockiv.f = transmute(failing::GetActiveUniformBlockiv); storage::GetActiveUniformBlockiv.is_loaded = false; } }
    match loadfn("GetActiveUniformName") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformName.f = transmute(ptr); storage::GetActiveUniformName.is_loaded = true; }, _ => unsafe { storage::GetActiveUniformName.f = transmute(failing::GetActiveUniformName); storage::GetActiveUniformName.is_loaded = false; } }
    match loadfn("GetActiveUniformsiv") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformsiv.f = transmute(ptr); storage::GetActiveUniformsiv.is_loaded = true; }, _ => unsafe { storage::GetActiveUniformsiv.f = transmute(failing::GetActiveUniformsiv); storage::GetActiveUniformsiv.is_loaded = false; } }
    match loadfn("GetActiveVaryingNV") { ptr if !ptr.is_null() => unsafe { storage::GetActiveVaryingNV.f = transmute(ptr); storage::GetActiveVaryingNV.is_loaded = true; }, _ => unsafe { storage::GetActiveVaryingNV.f = transmute(failing::GetActiveVaryingNV); storage::GetActiveVaryingNV.is_loaded = false; } }
    match loadfn("GetArrayObjectfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetArrayObjectfvATI.f = transmute(ptr); storage::GetArrayObjectfvATI.is_loaded = true; }, _ => unsafe { storage::GetArrayObjectfvATI.f = transmute(failing::GetArrayObjectfvATI); storage::GetArrayObjectfvATI.is_loaded = false; } }
    match loadfn("GetArrayObjectivATI") { ptr if !ptr.is_null() => unsafe { storage::GetArrayObjectivATI.f = transmute(ptr); storage::GetArrayObjectivATI.is_loaded = true; }, _ => unsafe { storage::GetArrayObjectivATI.f = transmute(failing::GetArrayObjectivATI); storage::GetArrayObjectivATI.is_loaded = false; } }
    match loadfn("GetAttachedObjectsARB") { ptr if !ptr.is_null() => unsafe { storage::GetAttachedObjectsARB.f = transmute(ptr); storage::GetAttachedObjectsARB.is_loaded = true; }, _ => unsafe { storage::GetAttachedObjectsARB.f = transmute(failing::GetAttachedObjectsARB); storage::GetAttachedObjectsARB.is_loaded = false; } }
    match loadfn("GetAttachedShaders") { ptr if !ptr.is_null() => unsafe { storage::GetAttachedShaders.f = transmute(ptr); storage::GetAttachedShaders.is_loaded = true; }, _ => unsafe { storage::GetAttachedShaders.f = transmute(failing::GetAttachedShaders); storage::GetAttachedShaders.is_loaded = false; } }
    match loadfn("GetAttribLocation") { ptr if !ptr.is_null() => unsafe { storage::GetAttribLocation.f = transmute(ptr); storage::GetAttribLocation.is_loaded = true; }, _ => unsafe { storage::GetAttribLocation.f = transmute(failing::GetAttribLocation); storage::GetAttribLocation.is_loaded = false; } }
    match loadfn("GetAttribLocationARB") { ptr if !ptr.is_null() => unsafe { storage::GetAttribLocationARB.f = transmute(ptr); storage::GetAttribLocationARB.is_loaded = true; }, _ => unsafe { storage::GetAttribLocationARB.f = transmute(failing::GetAttribLocationARB); storage::GetAttribLocationARB.is_loaded = false; } }
    match loadfn("GetBooleanIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetBooleanIndexedvEXT.f = transmute(ptr); storage::GetBooleanIndexedvEXT.is_loaded = true; }, _ => unsafe { storage::GetBooleanIndexedvEXT.f = transmute(failing::GetBooleanIndexedvEXT); storage::GetBooleanIndexedvEXT.is_loaded = false; } }
    match loadfn("GetBooleani_v") { ptr if !ptr.is_null() => unsafe { storage::GetBooleani_v.f = transmute(ptr); storage::GetBooleani_v.is_loaded = true; }, _ => unsafe { storage::GetBooleani_v.f = transmute(failing::GetBooleani_v); storage::GetBooleani_v.is_loaded = false; } }
    match loadfn("GetBooleanv") { ptr if !ptr.is_null() => unsafe { storage::GetBooleanv.f = transmute(ptr); storage::GetBooleanv.is_loaded = true; }, _ => unsafe { storage::GetBooleanv.f = transmute(failing::GetBooleanv); storage::GetBooleanv.is_loaded = false; } }
    match loadfn("GetBufferParameteri64v") { ptr if !ptr.is_null() => unsafe { storage::GetBufferParameteri64v.f = transmute(ptr); storage::GetBufferParameteri64v.is_loaded = true; }, _ => unsafe { storage::GetBufferParameteri64v.f = transmute(failing::GetBufferParameteri64v); storage::GetBufferParameteri64v.is_loaded = false; } }
    match loadfn("GetBufferParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetBufferParameteriv.f = transmute(ptr); storage::GetBufferParameteriv.is_loaded = true; }, _ => unsafe { storage::GetBufferParameteriv.f = transmute(failing::GetBufferParameteriv); storage::GetBufferParameteriv.is_loaded = false; } }
    match loadfn("GetBufferParameterivARB") { ptr if !ptr.is_null() => unsafe { storage::GetBufferParameterivARB.f = transmute(ptr); storage::GetBufferParameterivARB.is_loaded = true; }, _ => unsafe { storage::GetBufferParameterivARB.f = transmute(failing::GetBufferParameterivARB); storage::GetBufferParameterivARB.is_loaded = false; } }
    match loadfn("GetBufferParameterui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetBufferParameterui64vNV.f = transmute(ptr); storage::GetBufferParameterui64vNV.is_loaded = true; }, _ => unsafe { storage::GetBufferParameterui64vNV.f = transmute(failing::GetBufferParameterui64vNV); storage::GetBufferParameterui64vNV.is_loaded = false; } }
    match loadfn("GetBufferPointerv") { ptr if !ptr.is_null() => unsafe { storage::GetBufferPointerv.f = transmute(ptr); storage::GetBufferPointerv.is_loaded = true; }, _ => unsafe { storage::GetBufferPointerv.f = transmute(failing::GetBufferPointerv); storage::GetBufferPointerv.is_loaded = false; } }
    match loadfn("GetBufferPointervARB") { ptr if !ptr.is_null() => unsafe { storage::GetBufferPointervARB.f = transmute(ptr); storage::GetBufferPointervARB.is_loaded = true; }, _ => unsafe { storage::GetBufferPointervARB.f = transmute(failing::GetBufferPointervARB); storage::GetBufferPointervARB.is_loaded = false; } }
    match loadfn("GetBufferPointervOES") { ptr if !ptr.is_null() => unsafe { storage::GetBufferPointervOES.f = transmute(ptr); storage::GetBufferPointervOES.is_loaded = true; }, _ => unsafe { storage::GetBufferPointervOES.f = transmute(failing::GetBufferPointervOES); storage::GetBufferPointervOES.is_loaded = false; } }
    match loadfn("GetBufferSubData") { ptr if !ptr.is_null() => unsafe { storage::GetBufferSubData.f = transmute(ptr); storage::GetBufferSubData.is_loaded = true; }, _ => unsafe { storage::GetBufferSubData.f = transmute(failing::GetBufferSubData); storage::GetBufferSubData.is_loaded = false; } }
    match loadfn("GetBufferSubDataARB") { ptr if !ptr.is_null() => unsafe { storage::GetBufferSubDataARB.f = transmute(ptr); storage::GetBufferSubDataARB.is_loaded = true; }, _ => unsafe { storage::GetBufferSubDataARB.f = transmute(failing::GetBufferSubDataARB); storage::GetBufferSubDataARB.is_loaded = false; } }
    match loadfn("GetClipPlane") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlane.f = transmute(ptr); storage::GetClipPlane.is_loaded = true; }, _ => unsafe { storage::GetClipPlane.f = transmute(failing::GetClipPlane); storage::GetClipPlane.is_loaded = false; } }
    match loadfn("GetClipPlanef") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlanef.f = transmute(ptr); storage::GetClipPlanef.is_loaded = true; }, _ => unsafe { storage::GetClipPlanef.f = transmute(failing::GetClipPlanef); storage::GetClipPlanef.is_loaded = false; } }
    match loadfn("GetClipPlanefOES") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlanefOES.f = transmute(ptr); storage::GetClipPlanefOES.is_loaded = true; }, _ => unsafe { storage::GetClipPlanefOES.f = transmute(failing::GetClipPlanefOES); storage::GetClipPlanefOES.is_loaded = false; } }
    match loadfn("GetClipPlanex") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlanex.f = transmute(ptr); storage::GetClipPlanex.is_loaded = true; }, _ => unsafe { storage::GetClipPlanex.f = transmute(failing::GetClipPlanex); storage::GetClipPlanex.is_loaded = false; } }
    match loadfn("GetClipPlanexOES") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlanexOES.f = transmute(ptr); storage::GetClipPlanexOES.is_loaded = true; }, _ => unsafe { storage::GetClipPlanexOES.f = transmute(failing::GetClipPlanexOES); storage::GetClipPlanexOES.is_loaded = false; } }
    match loadfn("GetColorTable") { ptr if !ptr.is_null() => unsafe { storage::GetColorTable.f = transmute(ptr); storage::GetColorTable.is_loaded = true; }, _ => unsafe { storage::GetColorTable.f = transmute(failing::GetColorTable); storage::GetColorTable.is_loaded = false; } }
    match loadfn("GetColorTableEXT") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableEXT.f = transmute(ptr); storage::GetColorTableEXT.is_loaded = true; }, _ => unsafe { storage::GetColorTableEXT.f = transmute(failing::GetColorTableEXT); storage::GetColorTableEXT.is_loaded = false; } }
    match loadfn("GetColorTableParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterfv.f = transmute(ptr); storage::GetColorTableParameterfv.is_loaded = true; }, _ => unsafe { storage::GetColorTableParameterfv.f = transmute(failing::GetColorTableParameterfv); storage::GetColorTableParameterfv.is_loaded = false; } }
    match loadfn("GetColorTableParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterfvEXT.f = transmute(ptr); storage::GetColorTableParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetColorTableParameterfvEXT.f = transmute(failing::GetColorTableParameterfvEXT); storage::GetColorTableParameterfvEXT.is_loaded = false; } }
    match loadfn("GetColorTableParameterfvSGI") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterfvSGI.f = transmute(ptr); storage::GetColorTableParameterfvSGI.is_loaded = true; }, _ => unsafe { storage::GetColorTableParameterfvSGI.f = transmute(failing::GetColorTableParameterfvSGI); storage::GetColorTableParameterfvSGI.is_loaded = false; } }
    match loadfn("GetColorTableParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameteriv.f = transmute(ptr); storage::GetColorTableParameteriv.is_loaded = true; }, _ => unsafe { storage::GetColorTableParameteriv.f = transmute(failing::GetColorTableParameteriv); storage::GetColorTableParameteriv.is_loaded = false; } }
    match loadfn("GetColorTableParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterivEXT.f = transmute(ptr); storage::GetColorTableParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetColorTableParameterivEXT.f = transmute(failing::GetColorTableParameterivEXT); storage::GetColorTableParameterivEXT.is_loaded = false; } }
    match loadfn("GetColorTableParameterivSGI") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterivSGI.f = transmute(ptr); storage::GetColorTableParameterivSGI.is_loaded = true; }, _ => unsafe { storage::GetColorTableParameterivSGI.f = transmute(failing::GetColorTableParameterivSGI); storage::GetColorTableParameterivSGI.is_loaded = false; } }
    match loadfn("GetColorTableSGI") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableSGI.f = transmute(ptr); storage::GetColorTableSGI.is_loaded = true; }, _ => unsafe { storage::GetColorTableSGI.f = transmute(failing::GetColorTableSGI); storage::GetColorTableSGI.is_loaded = false; } }
    match loadfn("GetCombinerInputParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerInputParameterfvNV.f = transmute(ptr); storage::GetCombinerInputParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetCombinerInputParameterfvNV.f = transmute(failing::GetCombinerInputParameterfvNV); storage::GetCombinerInputParameterfvNV.is_loaded = false; } }
    match loadfn("GetCombinerInputParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerInputParameterivNV.f = transmute(ptr); storage::GetCombinerInputParameterivNV.is_loaded = true; }, _ => unsafe { storage::GetCombinerInputParameterivNV.f = transmute(failing::GetCombinerInputParameterivNV); storage::GetCombinerInputParameterivNV.is_loaded = false; } }
    match loadfn("GetCombinerOutputParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerOutputParameterfvNV.f = transmute(ptr); storage::GetCombinerOutputParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetCombinerOutputParameterfvNV.f = transmute(failing::GetCombinerOutputParameterfvNV); storage::GetCombinerOutputParameterfvNV.is_loaded = false; } }
    match loadfn("GetCombinerOutputParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerOutputParameterivNV.f = transmute(ptr); storage::GetCombinerOutputParameterivNV.is_loaded = true; }, _ => unsafe { storage::GetCombinerOutputParameterivNV.f = transmute(failing::GetCombinerOutputParameterivNV); storage::GetCombinerOutputParameterivNV.is_loaded = false; } }
    match loadfn("GetCombinerStageParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerStageParameterfvNV.f = transmute(ptr); storage::GetCombinerStageParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetCombinerStageParameterfvNV.f = transmute(failing::GetCombinerStageParameterfvNV); storage::GetCombinerStageParameterfvNV.is_loaded = false; } }
    match loadfn("GetCompressedMultiTexImageEXT") { ptr if !ptr.is_null() => unsafe { storage::GetCompressedMultiTexImageEXT.f = transmute(ptr); storage::GetCompressedMultiTexImageEXT.is_loaded = true; }, _ => unsafe { storage::GetCompressedMultiTexImageEXT.f = transmute(failing::GetCompressedMultiTexImageEXT); storage::GetCompressedMultiTexImageEXT.is_loaded = false; } }
    match loadfn("GetCompressedTexImage") { ptr if !ptr.is_null() => unsafe { storage::GetCompressedTexImage.f = transmute(ptr); storage::GetCompressedTexImage.is_loaded = true; }, _ => unsafe { storage::GetCompressedTexImage.f = transmute(failing::GetCompressedTexImage); storage::GetCompressedTexImage.is_loaded = false; } }
    match loadfn("GetCompressedTexImageARB") { ptr if !ptr.is_null() => unsafe { storage::GetCompressedTexImageARB.f = transmute(ptr); storage::GetCompressedTexImageARB.is_loaded = true; }, _ => unsafe { storage::GetCompressedTexImageARB.f = transmute(failing::GetCompressedTexImageARB); storage::GetCompressedTexImageARB.is_loaded = false; } }
    match loadfn("GetCompressedTextureImageEXT") { ptr if !ptr.is_null() => unsafe { storage::GetCompressedTextureImageEXT.f = transmute(ptr); storage::GetCompressedTextureImageEXT.is_loaded = true; }, _ => unsafe { storage::GetCompressedTextureImageEXT.f = transmute(failing::GetCompressedTextureImageEXT); storage::GetCompressedTextureImageEXT.is_loaded = false; } }
    match loadfn("GetConvolutionFilter") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionFilter.f = transmute(ptr); storage::GetConvolutionFilter.is_loaded = true; }, _ => unsafe { storage::GetConvolutionFilter.f = transmute(failing::GetConvolutionFilter); storage::GetConvolutionFilter.is_loaded = false; } }
    match loadfn("GetConvolutionFilterEXT") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionFilterEXT.f = transmute(ptr); storage::GetConvolutionFilterEXT.is_loaded = true; }, _ => unsafe { storage::GetConvolutionFilterEXT.f = transmute(failing::GetConvolutionFilterEXT); storage::GetConvolutionFilterEXT.is_loaded = false; } }
    match loadfn("GetConvolutionParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameterfv.f = transmute(ptr); storage::GetConvolutionParameterfv.is_loaded = true; }, _ => unsafe { storage::GetConvolutionParameterfv.f = transmute(failing::GetConvolutionParameterfv); storage::GetConvolutionParameterfv.is_loaded = false; } }
    match loadfn("GetConvolutionParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameterfvEXT.f = transmute(ptr); storage::GetConvolutionParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetConvolutionParameterfvEXT.f = transmute(failing::GetConvolutionParameterfvEXT); storage::GetConvolutionParameterfvEXT.is_loaded = false; } }
    match loadfn("GetConvolutionParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameteriv.f = transmute(ptr); storage::GetConvolutionParameteriv.is_loaded = true; }, _ => unsafe { storage::GetConvolutionParameteriv.f = transmute(failing::GetConvolutionParameteriv); storage::GetConvolutionParameteriv.is_loaded = false; } }
    match loadfn("GetConvolutionParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameterivEXT.f = transmute(ptr); storage::GetConvolutionParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetConvolutionParameterivEXT.f = transmute(failing::GetConvolutionParameterivEXT); storage::GetConvolutionParameterivEXT.is_loaded = false; } }
    match loadfn("GetConvolutionParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameterxvOES.f = transmute(ptr); storage::GetConvolutionParameterxvOES.is_loaded = true; }, _ => unsafe { storage::GetConvolutionParameterxvOES.f = transmute(failing::GetConvolutionParameterxvOES); storage::GetConvolutionParameterxvOES.is_loaded = false; } }
    match loadfn("GetDebugMessageLog") { ptr if !ptr.is_null() => unsafe { storage::GetDebugMessageLog.f = transmute(ptr); storage::GetDebugMessageLog.is_loaded = true; }, _ => unsafe { storage::GetDebugMessageLog.f = transmute(failing::GetDebugMessageLog); storage::GetDebugMessageLog.is_loaded = false; } }
    match loadfn("GetDebugMessageLogAMD") { ptr if !ptr.is_null() => unsafe { storage::GetDebugMessageLogAMD.f = transmute(ptr); storage::GetDebugMessageLogAMD.is_loaded = true; }, _ => unsafe { storage::GetDebugMessageLogAMD.f = transmute(failing::GetDebugMessageLogAMD); storage::GetDebugMessageLogAMD.is_loaded = false; } }
    match loadfn("GetDebugMessageLogARB") { ptr if !ptr.is_null() => unsafe { storage::GetDebugMessageLogARB.f = transmute(ptr); storage::GetDebugMessageLogARB.is_loaded = true; }, _ => unsafe { storage::GetDebugMessageLogARB.f = transmute(failing::GetDebugMessageLogARB); storage::GetDebugMessageLogARB.is_loaded = false; } }
    match loadfn("GetDebugMessageLogKHR") { ptr if !ptr.is_null() => unsafe { storage::GetDebugMessageLogKHR.f = transmute(ptr); storage::GetDebugMessageLogKHR.is_loaded = true; }, _ => unsafe { storage::GetDebugMessageLogKHR.f = transmute(failing::GetDebugMessageLogKHR); storage::GetDebugMessageLogKHR.is_loaded = false; } }
    match loadfn("GetDetailTexFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetDetailTexFuncSGIS.f = transmute(ptr); storage::GetDetailTexFuncSGIS.is_loaded = true; }, _ => unsafe { storage::GetDetailTexFuncSGIS.f = transmute(failing::GetDetailTexFuncSGIS); storage::GetDetailTexFuncSGIS.is_loaded = false; } }
    match loadfn("GetDoubleIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetDoubleIndexedvEXT.f = transmute(ptr); storage::GetDoubleIndexedvEXT.is_loaded = true; }, _ => unsafe { storage::GetDoubleIndexedvEXT.f = transmute(failing::GetDoubleIndexedvEXT); storage::GetDoubleIndexedvEXT.is_loaded = false; } }
    match loadfn("GetDoublei_v") { ptr if !ptr.is_null() => unsafe { storage::GetDoublei_v.f = transmute(ptr); storage::GetDoublei_v.is_loaded = true; }, _ => unsafe { storage::GetDoublei_v.f = transmute(failing::GetDoublei_v); storage::GetDoublei_v.is_loaded = false; } }
    match loadfn("GetDoublei_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetDoublei_vEXT.f = transmute(ptr); storage::GetDoublei_vEXT.is_loaded = true; }, _ => unsafe { storage::GetDoublei_vEXT.f = transmute(failing::GetDoublei_vEXT); storage::GetDoublei_vEXT.is_loaded = false; } }
    match loadfn("GetDoublev") { ptr if !ptr.is_null() => unsafe { storage::GetDoublev.f = transmute(ptr); storage::GetDoublev.is_loaded = true; }, _ => unsafe { storage::GetDoublev.f = transmute(failing::GetDoublev); storage::GetDoublev.is_loaded = false; } }
    match loadfn("GetDriverControlStringQCOM") { ptr if !ptr.is_null() => unsafe { storage::GetDriverControlStringQCOM.f = transmute(ptr); storage::GetDriverControlStringQCOM.is_loaded = true; }, _ => unsafe { storage::GetDriverControlStringQCOM.f = transmute(failing::GetDriverControlStringQCOM); storage::GetDriverControlStringQCOM.is_loaded = false; } }
    match loadfn("GetDriverControlsQCOM") { ptr if !ptr.is_null() => unsafe { storage::GetDriverControlsQCOM.f = transmute(ptr); storage::GetDriverControlsQCOM.is_loaded = true; }, _ => unsafe { storage::GetDriverControlsQCOM.f = transmute(failing::GetDriverControlsQCOM); storage::GetDriverControlsQCOM.is_loaded = false; } }
    match loadfn("GetError") { ptr if !ptr.is_null() => unsafe { storage::GetError.f = transmute(ptr); storage::GetError.is_loaded = true; }, _ => unsafe { storage::GetError.f = transmute(failing::GetError); storage::GetError.is_loaded = false; } }
    match loadfn("GetFenceivNV") { ptr if !ptr.is_null() => unsafe { storage::GetFenceivNV.f = transmute(ptr); storage::GetFenceivNV.is_loaded = true; }, _ => unsafe { storage::GetFenceivNV.f = transmute(failing::GetFenceivNV); storage::GetFenceivNV.is_loaded = false; } }
    match loadfn("GetFinalCombinerInputParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetFinalCombinerInputParameterfvNV.f = transmute(ptr); storage::GetFinalCombinerInputParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetFinalCombinerInputParameterfvNV.f = transmute(failing::GetFinalCombinerInputParameterfvNV); storage::GetFinalCombinerInputParameterfvNV.is_loaded = false; } }
    match loadfn("GetFinalCombinerInputParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetFinalCombinerInputParameterivNV.f = transmute(ptr); storage::GetFinalCombinerInputParameterivNV.is_loaded = true; }, _ => unsafe { storage::GetFinalCombinerInputParameterivNV.f = transmute(failing::GetFinalCombinerInputParameterivNV); storage::GetFinalCombinerInputParameterivNV.is_loaded = false; } }
    match loadfn("GetFixedv") { ptr if !ptr.is_null() => unsafe { storage::GetFixedv.f = transmute(ptr); storage::GetFixedv.is_loaded = true; }, _ => unsafe { storage::GetFixedv.f = transmute(failing::GetFixedv); storage::GetFixedv.is_loaded = false; } }
    match loadfn("GetFixedvOES") { ptr if !ptr.is_null() => unsafe { storage::GetFixedvOES.f = transmute(ptr); storage::GetFixedvOES.is_loaded = true; }, _ => unsafe { storage::GetFixedvOES.f = transmute(failing::GetFixedvOES); storage::GetFixedvOES.is_loaded = false; } }
    match loadfn("GetFloatIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFloatIndexedvEXT.f = transmute(ptr); storage::GetFloatIndexedvEXT.is_loaded = true; }, _ => unsafe { storage::GetFloatIndexedvEXT.f = transmute(failing::GetFloatIndexedvEXT); storage::GetFloatIndexedvEXT.is_loaded = false; } }
    match loadfn("GetFloati_v") { ptr if !ptr.is_null() => unsafe { storage::GetFloati_v.f = transmute(ptr); storage::GetFloati_v.is_loaded = true; }, _ => unsafe { storage::GetFloati_v.f = transmute(failing::GetFloati_v); storage::GetFloati_v.is_loaded = false; } }
    match loadfn("GetFloati_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFloati_vEXT.f = transmute(ptr); storage::GetFloati_vEXT.is_loaded = true; }, _ => unsafe { storage::GetFloati_vEXT.f = transmute(failing::GetFloati_vEXT); storage::GetFloati_vEXT.is_loaded = false; } }
    match loadfn("GetFloatv") { ptr if !ptr.is_null() => unsafe { storage::GetFloatv.f = transmute(ptr); storage::GetFloatv.is_loaded = true; }, _ => unsafe { storage::GetFloatv.f = transmute(failing::GetFloatv); storage::GetFloatv.is_loaded = false; } }
    match loadfn("GetFogFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetFogFuncSGIS.f = transmute(ptr); storage::GetFogFuncSGIS.is_loaded = true; }, _ => unsafe { storage::GetFogFuncSGIS.f = transmute(failing::GetFogFuncSGIS); storage::GetFogFuncSGIS.is_loaded = false; } }
    match loadfn("GetFragDataIndex") { ptr if !ptr.is_null() => unsafe { storage::GetFragDataIndex.f = transmute(ptr); storage::GetFragDataIndex.is_loaded = true; }, _ => unsafe { storage::GetFragDataIndex.f = transmute(failing::GetFragDataIndex); storage::GetFragDataIndex.is_loaded = false; } }
    match loadfn("GetFragDataLocation") { ptr if !ptr.is_null() => unsafe { storage::GetFragDataLocation.f = transmute(ptr); storage::GetFragDataLocation.is_loaded = true; }, _ => unsafe { storage::GetFragDataLocation.f = transmute(failing::GetFragDataLocation); storage::GetFragDataLocation.is_loaded = false; } }
    match loadfn("GetFragDataLocationEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFragDataLocationEXT.f = transmute(ptr); storage::GetFragDataLocationEXT.is_loaded = true; }, _ => unsafe { storage::GetFragDataLocationEXT.f = transmute(failing::GetFragDataLocationEXT); storage::GetFragDataLocationEXT.is_loaded = false; } }
    match loadfn("GetFragmentLightfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetFragmentLightfvSGIX.f = transmute(ptr); storage::GetFragmentLightfvSGIX.is_loaded = true; }, _ => unsafe { storage::GetFragmentLightfvSGIX.f = transmute(failing::GetFragmentLightfvSGIX); storage::GetFragmentLightfvSGIX.is_loaded = false; } }
    match loadfn("GetFragmentLightivSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetFragmentLightivSGIX.f = transmute(ptr); storage::GetFragmentLightivSGIX.is_loaded = true; }, _ => unsafe { storage::GetFragmentLightivSGIX.f = transmute(failing::GetFragmentLightivSGIX); storage::GetFragmentLightivSGIX.is_loaded = false; } }
    match loadfn("GetFragmentMaterialfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetFragmentMaterialfvSGIX.f = transmute(ptr); storage::GetFragmentMaterialfvSGIX.is_loaded = true; }, _ => unsafe { storage::GetFragmentMaterialfvSGIX.f = transmute(failing::GetFragmentMaterialfvSGIX); storage::GetFragmentMaterialfvSGIX.is_loaded = false; } }
    match loadfn("GetFragmentMaterialivSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetFragmentMaterialivSGIX.f = transmute(ptr); storage::GetFragmentMaterialivSGIX.is_loaded = true; }, _ => unsafe { storage::GetFragmentMaterialivSGIX.f = transmute(failing::GetFragmentMaterialivSGIX); storage::GetFragmentMaterialivSGIX.is_loaded = false; } }
    match loadfn("GetFramebufferAttachmentParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferAttachmentParameteriv.f = transmute(ptr); storage::GetFramebufferAttachmentParameteriv.is_loaded = true; }, _ => unsafe { storage::GetFramebufferAttachmentParameteriv.f = transmute(failing::GetFramebufferAttachmentParameteriv); storage::GetFramebufferAttachmentParameteriv.is_loaded = false; } }
    match loadfn("GetFramebufferAttachmentParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferAttachmentParameterivEXT.f = transmute(ptr); storage::GetFramebufferAttachmentParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetFramebufferAttachmentParameterivEXT.f = transmute(failing::GetFramebufferAttachmentParameterivEXT); storage::GetFramebufferAttachmentParameterivEXT.is_loaded = false; } }
    match loadfn("GetFramebufferAttachmentParameterivOES") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferAttachmentParameterivOES.f = transmute(ptr); storage::GetFramebufferAttachmentParameterivOES.is_loaded = true; }, _ => unsafe { storage::GetFramebufferAttachmentParameterivOES.f = transmute(failing::GetFramebufferAttachmentParameterivOES); storage::GetFramebufferAttachmentParameterivOES.is_loaded = false; } }
    match loadfn("GetFramebufferParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferParameteriv.f = transmute(ptr); storage::GetFramebufferParameteriv.is_loaded = true; }, _ => unsafe { storage::GetFramebufferParameteriv.f = transmute(failing::GetFramebufferParameteriv); storage::GetFramebufferParameteriv.is_loaded = false; } }
    match loadfn("GetFramebufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferParameterivEXT.f = transmute(ptr); storage::GetFramebufferParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetFramebufferParameterivEXT.f = transmute(failing::GetFramebufferParameterivEXT); storage::GetFramebufferParameterivEXT.is_loaded = false; } }
    match loadfn("GetGraphicsResetStatusARB") { ptr if !ptr.is_null() => unsafe { storage::GetGraphicsResetStatusARB.f = transmute(ptr); storage::GetGraphicsResetStatusARB.is_loaded = true; }, _ => unsafe { storage::GetGraphicsResetStatusARB.f = transmute(failing::GetGraphicsResetStatusARB); storage::GetGraphicsResetStatusARB.is_loaded = false; } }
    match loadfn("GetGraphicsResetStatusEXT") { ptr if !ptr.is_null() => unsafe { storage::GetGraphicsResetStatusEXT.f = transmute(ptr); storage::GetGraphicsResetStatusEXT.is_loaded = true; }, _ => unsafe { storage::GetGraphicsResetStatusEXT.f = transmute(failing::GetGraphicsResetStatusEXT); storage::GetGraphicsResetStatusEXT.is_loaded = false; } }
    match loadfn("GetHandleARB") { ptr if !ptr.is_null() => unsafe { storage::GetHandleARB.f = transmute(ptr); storage::GetHandleARB.is_loaded = true; }, _ => unsafe { storage::GetHandleARB.f = transmute(failing::GetHandleARB); storage::GetHandleARB.is_loaded = false; } }
    match loadfn("GetHistogram") { ptr if !ptr.is_null() => unsafe { storage::GetHistogram.f = transmute(ptr); storage::GetHistogram.is_loaded = true; }, _ => unsafe { storage::GetHistogram.f = transmute(failing::GetHistogram); storage::GetHistogram.is_loaded = false; } }
    match loadfn("GetHistogramEXT") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramEXT.f = transmute(ptr); storage::GetHistogramEXT.is_loaded = true; }, _ => unsafe { storage::GetHistogramEXT.f = transmute(failing::GetHistogramEXT); storage::GetHistogramEXT.is_loaded = false; } }
    match loadfn("GetHistogramParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameterfv.f = transmute(ptr); storage::GetHistogramParameterfv.is_loaded = true; }, _ => unsafe { storage::GetHistogramParameterfv.f = transmute(failing::GetHistogramParameterfv); storage::GetHistogramParameterfv.is_loaded = false; } }
    match loadfn("GetHistogramParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameterfvEXT.f = transmute(ptr); storage::GetHistogramParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetHistogramParameterfvEXT.f = transmute(failing::GetHistogramParameterfvEXT); storage::GetHistogramParameterfvEXT.is_loaded = false; } }
    match loadfn("GetHistogramParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameteriv.f = transmute(ptr); storage::GetHistogramParameteriv.is_loaded = true; }, _ => unsafe { storage::GetHistogramParameteriv.f = transmute(failing::GetHistogramParameteriv); storage::GetHistogramParameteriv.is_loaded = false; } }
    match loadfn("GetHistogramParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameterivEXT.f = transmute(ptr); storage::GetHistogramParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetHistogramParameterivEXT.f = transmute(failing::GetHistogramParameterivEXT); storage::GetHistogramParameterivEXT.is_loaded = false; } }
    match loadfn("GetHistogramParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameterxvOES.f = transmute(ptr); storage::GetHistogramParameterxvOES.is_loaded = true; }, _ => unsafe { storage::GetHistogramParameterxvOES.f = transmute(failing::GetHistogramParameterxvOES); storage::GetHistogramParameterxvOES.is_loaded = false; } }
    match loadfn("GetImageHandleARB") { ptr if !ptr.is_null() => unsafe { storage::GetImageHandleARB.f = transmute(ptr); storage::GetImageHandleARB.is_loaded = true; }, _ => unsafe { storage::GetImageHandleARB.f = transmute(failing::GetImageHandleARB); storage::GetImageHandleARB.is_loaded = false; } }
    match loadfn("GetImageHandleNV") { ptr if !ptr.is_null() => unsafe { storage::GetImageHandleNV.f = transmute(ptr); storage::GetImageHandleNV.is_loaded = true; }, _ => unsafe { storage::GetImageHandleNV.f = transmute(failing::GetImageHandleNV); storage::GetImageHandleNV.is_loaded = false; } }
    match loadfn("GetImageTransformParameterfvHP") { ptr if !ptr.is_null() => unsafe { storage::GetImageTransformParameterfvHP.f = transmute(ptr); storage::GetImageTransformParameterfvHP.is_loaded = true; }, _ => unsafe { storage::GetImageTransformParameterfvHP.f = transmute(failing::GetImageTransformParameterfvHP); storage::GetImageTransformParameterfvHP.is_loaded = false; } }
    match loadfn("GetImageTransformParameterivHP") { ptr if !ptr.is_null() => unsafe { storage::GetImageTransformParameterivHP.f = transmute(ptr); storage::GetImageTransformParameterivHP.is_loaded = true; }, _ => unsafe { storage::GetImageTransformParameterivHP.f = transmute(failing::GetImageTransformParameterivHP); storage::GetImageTransformParameterivHP.is_loaded = false; } }
    match loadfn("GetInfoLogARB") { ptr if !ptr.is_null() => unsafe { storage::GetInfoLogARB.f = transmute(ptr); storage::GetInfoLogARB.is_loaded = true; }, _ => unsafe { storage::GetInfoLogARB.f = transmute(failing::GetInfoLogARB); storage::GetInfoLogARB.is_loaded = false; } }
    match loadfn("GetInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetInstrumentsSGIX.f = transmute(ptr); storage::GetInstrumentsSGIX.is_loaded = true; }, _ => unsafe { storage::GetInstrumentsSGIX.f = transmute(failing::GetInstrumentsSGIX); storage::GetInstrumentsSGIX.is_loaded = false; } }
    match loadfn("GetInteger64i_v") { ptr if !ptr.is_null() => unsafe { storage::GetInteger64i_v.f = transmute(ptr); storage::GetInteger64i_v.is_loaded = true; }, _ => unsafe { storage::GetInteger64i_v.f = transmute(failing::GetInteger64i_v); storage::GetInteger64i_v.is_loaded = false; } }
    match loadfn("GetInteger64v") { ptr if !ptr.is_null() => unsafe { storage::GetInteger64v.f = transmute(ptr); storage::GetInteger64v.is_loaded = true; }, _ => unsafe { storage::GetInteger64v.f = transmute(failing::GetInteger64v); storage::GetInteger64v.is_loaded = false; } }
    match loadfn("GetInteger64vAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GetInteger64vAPPLE.f = transmute(ptr); storage::GetInteger64vAPPLE.is_loaded = true; }, _ => unsafe { storage::GetInteger64vAPPLE.f = transmute(failing::GetInteger64vAPPLE); storage::GetInteger64vAPPLE.is_loaded = false; } }
    match loadfn("GetIntegerIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetIntegerIndexedvEXT.f = transmute(ptr); storage::GetIntegerIndexedvEXT.is_loaded = true; }, _ => unsafe { storage::GetIntegerIndexedvEXT.f = transmute(failing::GetIntegerIndexedvEXT); storage::GetIntegerIndexedvEXT.is_loaded = false; } }
    match loadfn("GetIntegeri_v") { ptr if !ptr.is_null() => unsafe { storage::GetIntegeri_v.f = transmute(ptr); storage::GetIntegeri_v.is_loaded = true; }, _ => unsafe { storage::GetIntegeri_v.f = transmute(failing::GetIntegeri_v); storage::GetIntegeri_v.is_loaded = false; } }
    match loadfn("GetIntegeri_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetIntegeri_vEXT.f = transmute(ptr); storage::GetIntegeri_vEXT.is_loaded = true; }, _ => unsafe { storage::GetIntegeri_vEXT.f = transmute(failing::GetIntegeri_vEXT); storage::GetIntegeri_vEXT.is_loaded = false; } }
    match loadfn("GetIntegerui64i_vNV") { ptr if !ptr.is_null() => unsafe { storage::GetIntegerui64i_vNV.f = transmute(ptr); storage::GetIntegerui64i_vNV.is_loaded = true; }, _ => unsafe { storage::GetIntegerui64i_vNV.f = transmute(failing::GetIntegerui64i_vNV); storage::GetIntegerui64i_vNV.is_loaded = false; } }
    match loadfn("GetIntegerui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetIntegerui64vNV.f = transmute(ptr); storage::GetIntegerui64vNV.is_loaded = true; }, _ => unsafe { storage::GetIntegerui64vNV.f = transmute(failing::GetIntegerui64vNV); storage::GetIntegerui64vNV.is_loaded = false; } }
    match loadfn("GetIntegerv") { ptr if !ptr.is_null() => unsafe { storage::GetIntegerv.f = transmute(ptr); storage::GetIntegerv.is_loaded = true; }, _ => unsafe { storage::GetIntegerv.f = transmute(failing::GetIntegerv); storage::GetIntegerv.is_loaded = false; } }
    match loadfn("GetInternalformati64v") { ptr if !ptr.is_null() => unsafe { storage::GetInternalformati64v.f = transmute(ptr); storage::GetInternalformati64v.is_loaded = true; }, _ => unsafe { storage::GetInternalformati64v.f = transmute(failing::GetInternalformati64v); storage::GetInternalformati64v.is_loaded = false; } }
    match loadfn("GetInternalformativ") { ptr if !ptr.is_null() => unsafe { storage::GetInternalformativ.f = transmute(ptr); storage::GetInternalformativ.is_loaded = true; }, _ => unsafe { storage::GetInternalformativ.f = transmute(failing::GetInternalformativ); storage::GetInternalformativ.is_loaded = false; } }
    match loadfn("GetInvariantBooleanvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetInvariantBooleanvEXT.f = transmute(ptr); storage::GetInvariantBooleanvEXT.is_loaded = true; }, _ => unsafe { storage::GetInvariantBooleanvEXT.f = transmute(failing::GetInvariantBooleanvEXT); storage::GetInvariantBooleanvEXT.is_loaded = false; } }
    match loadfn("GetInvariantFloatvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetInvariantFloatvEXT.f = transmute(ptr); storage::GetInvariantFloatvEXT.is_loaded = true; }, _ => unsafe { storage::GetInvariantFloatvEXT.f = transmute(failing::GetInvariantFloatvEXT); storage::GetInvariantFloatvEXT.is_loaded = false; } }
    match loadfn("GetInvariantIntegervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetInvariantIntegervEXT.f = transmute(ptr); storage::GetInvariantIntegervEXT.is_loaded = true; }, _ => unsafe { storage::GetInvariantIntegervEXT.f = transmute(failing::GetInvariantIntegervEXT); storage::GetInvariantIntegervEXT.is_loaded = false; } }
    match loadfn("GetLightfv") { ptr if !ptr.is_null() => unsafe { storage::GetLightfv.f = transmute(ptr); storage::GetLightfv.is_loaded = true; }, _ => unsafe { storage::GetLightfv.f = transmute(failing::GetLightfv); storage::GetLightfv.is_loaded = false; } }
    match loadfn("GetLightiv") { ptr if !ptr.is_null() => unsafe { storage::GetLightiv.f = transmute(ptr); storage::GetLightiv.is_loaded = true; }, _ => unsafe { storage::GetLightiv.f = transmute(failing::GetLightiv); storage::GetLightiv.is_loaded = false; } }
    match loadfn("GetLightx") { ptr if !ptr.is_null() => unsafe { storage::GetLightx.f = transmute(ptr); storage::GetLightx.is_loaded = true; }, _ => unsafe { storage::GetLightx.f = transmute(failing::GetLightx); storage::GetLightx.is_loaded = false; } }
    match loadfn("GetLightxOES") { ptr if !ptr.is_null() => unsafe { storage::GetLightxOES.f = transmute(ptr); storage::GetLightxOES.is_loaded = true; }, _ => unsafe { storage::GetLightxOES.f = transmute(failing::GetLightxOES); storage::GetLightxOES.is_loaded = false; } }
    match loadfn("GetLightxv") { ptr if !ptr.is_null() => unsafe { storage::GetLightxv.f = transmute(ptr); storage::GetLightxv.is_loaded = true; }, _ => unsafe { storage::GetLightxv.f = transmute(failing::GetLightxv); storage::GetLightxv.is_loaded = false; } }
    match loadfn("GetLightxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetLightxvOES.f = transmute(ptr); storage::GetLightxvOES.is_loaded = true; }, _ => unsafe { storage::GetLightxvOES.f = transmute(failing::GetLightxvOES); storage::GetLightxvOES.is_loaded = false; } }
    match loadfn("GetListParameterfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetListParameterfvSGIX.f = transmute(ptr); storage::GetListParameterfvSGIX.is_loaded = true; }, _ => unsafe { storage::GetListParameterfvSGIX.f = transmute(failing::GetListParameterfvSGIX); storage::GetListParameterfvSGIX.is_loaded = false; } }
    match loadfn("GetListParameterivSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetListParameterivSGIX.f = transmute(ptr); storage::GetListParameterivSGIX.is_loaded = true; }, _ => unsafe { storage::GetListParameterivSGIX.f = transmute(failing::GetListParameterivSGIX); storage::GetListParameterivSGIX.is_loaded = false; } }
    match loadfn("GetLocalConstantBooleanvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetLocalConstantBooleanvEXT.f = transmute(ptr); storage::GetLocalConstantBooleanvEXT.is_loaded = true; }, _ => unsafe { storage::GetLocalConstantBooleanvEXT.f = transmute(failing::GetLocalConstantBooleanvEXT); storage::GetLocalConstantBooleanvEXT.is_loaded = false; } }
    match loadfn("GetLocalConstantFloatvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetLocalConstantFloatvEXT.f = transmute(ptr); storage::GetLocalConstantFloatvEXT.is_loaded = true; }, _ => unsafe { storage::GetLocalConstantFloatvEXT.f = transmute(failing::GetLocalConstantFloatvEXT); storage::GetLocalConstantFloatvEXT.is_loaded = false; } }
    match loadfn("GetLocalConstantIntegervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetLocalConstantIntegervEXT.f = transmute(ptr); storage::GetLocalConstantIntegervEXT.is_loaded = true; }, _ => unsafe { storage::GetLocalConstantIntegervEXT.f = transmute(failing::GetLocalConstantIntegervEXT); storage::GetLocalConstantIntegervEXT.is_loaded = false; } }
    match loadfn("GetMapAttribParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapAttribParameterfvNV.f = transmute(ptr); storage::GetMapAttribParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetMapAttribParameterfvNV.f = transmute(failing::GetMapAttribParameterfvNV); storage::GetMapAttribParameterfvNV.is_loaded = false; } }
    match loadfn("GetMapAttribParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapAttribParameterivNV.f = transmute(ptr); storage::GetMapAttribParameterivNV.is_loaded = true; }, _ => unsafe { storage::GetMapAttribParameterivNV.f = transmute(failing::GetMapAttribParameterivNV); storage::GetMapAttribParameterivNV.is_loaded = false; } }
    match loadfn("GetMapControlPointsNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapControlPointsNV.f = transmute(ptr); storage::GetMapControlPointsNV.is_loaded = true; }, _ => unsafe { storage::GetMapControlPointsNV.f = transmute(failing::GetMapControlPointsNV); storage::GetMapControlPointsNV.is_loaded = false; } }
    match loadfn("GetMapParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapParameterfvNV.f = transmute(ptr); storage::GetMapParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetMapParameterfvNV.f = transmute(failing::GetMapParameterfvNV); storage::GetMapParameterfvNV.is_loaded = false; } }
    match loadfn("GetMapParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapParameterivNV.f = transmute(ptr); storage::GetMapParameterivNV.is_loaded = true; }, _ => unsafe { storage::GetMapParameterivNV.f = transmute(failing::GetMapParameterivNV); storage::GetMapParameterivNV.is_loaded = false; } }
    match loadfn("GetMapdv") { ptr if !ptr.is_null() => unsafe { storage::GetMapdv.f = transmute(ptr); storage::GetMapdv.is_loaded = true; }, _ => unsafe { storage::GetMapdv.f = transmute(failing::GetMapdv); storage::GetMapdv.is_loaded = false; } }
    match loadfn("GetMapfv") { ptr if !ptr.is_null() => unsafe { storage::GetMapfv.f = transmute(ptr); storage::GetMapfv.is_loaded = true; }, _ => unsafe { storage::GetMapfv.f = transmute(failing::GetMapfv); storage::GetMapfv.is_loaded = false; } }
    match loadfn("GetMapiv") { ptr if !ptr.is_null() => unsafe { storage::GetMapiv.f = transmute(ptr); storage::GetMapiv.is_loaded = true; }, _ => unsafe { storage::GetMapiv.f = transmute(failing::GetMapiv); storage::GetMapiv.is_loaded = false; } }
    match loadfn("GetMapxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetMapxvOES.f = transmute(ptr); storage::GetMapxvOES.is_loaded = true; }, _ => unsafe { storage::GetMapxvOES.f = transmute(failing::GetMapxvOES); storage::GetMapxvOES.is_loaded = false; } }
    match loadfn("GetMaterialfv") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialfv.f = transmute(ptr); storage::GetMaterialfv.is_loaded = true; }, _ => unsafe { storage::GetMaterialfv.f = transmute(failing::GetMaterialfv); storage::GetMaterialfv.is_loaded = false; } }
    match loadfn("GetMaterialiv") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialiv.f = transmute(ptr); storage::GetMaterialiv.is_loaded = true; }, _ => unsafe { storage::GetMaterialiv.f = transmute(failing::GetMaterialiv); storage::GetMaterialiv.is_loaded = false; } }
    match loadfn("GetMaterialx") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialx.f = transmute(ptr); storage::GetMaterialx.is_loaded = true; }, _ => unsafe { storage::GetMaterialx.f = transmute(failing::GetMaterialx); storage::GetMaterialx.is_loaded = false; } }
    match loadfn("GetMaterialxOES") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialxOES.f = transmute(ptr); storage::GetMaterialxOES.is_loaded = true; }, _ => unsafe { storage::GetMaterialxOES.f = transmute(failing::GetMaterialxOES); storage::GetMaterialxOES.is_loaded = false; } }
    match loadfn("GetMaterialxv") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialxv.f = transmute(ptr); storage::GetMaterialxv.is_loaded = true; }, _ => unsafe { storage::GetMaterialxv.f = transmute(failing::GetMaterialxv); storage::GetMaterialxv.is_loaded = false; } }
    match loadfn("GetMaterialxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialxvOES.f = transmute(ptr); storage::GetMaterialxvOES.is_loaded = true; }, _ => unsafe { storage::GetMaterialxvOES.f = transmute(failing::GetMaterialxvOES); storage::GetMaterialxvOES.is_loaded = false; } }
    match loadfn("GetMinmax") { ptr if !ptr.is_null() => unsafe { storage::GetMinmax.f = transmute(ptr); storage::GetMinmax.is_loaded = true; }, _ => unsafe { storage::GetMinmax.f = transmute(failing::GetMinmax); storage::GetMinmax.is_loaded = false; } }
    match loadfn("GetMinmaxEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxEXT.f = transmute(ptr); storage::GetMinmaxEXT.is_loaded = true; }, _ => unsafe { storage::GetMinmaxEXT.f = transmute(failing::GetMinmaxEXT); storage::GetMinmaxEXT.is_loaded = false; } }
    match loadfn("GetMinmaxParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxParameterfv.f = transmute(ptr); storage::GetMinmaxParameterfv.is_loaded = true; }, _ => unsafe { storage::GetMinmaxParameterfv.f = transmute(failing::GetMinmaxParameterfv); storage::GetMinmaxParameterfv.is_loaded = false; } }
    match loadfn("GetMinmaxParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxParameterfvEXT.f = transmute(ptr); storage::GetMinmaxParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetMinmaxParameterfvEXT.f = transmute(failing::GetMinmaxParameterfvEXT); storage::GetMinmaxParameterfvEXT.is_loaded = false; } }
    match loadfn("GetMinmaxParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxParameteriv.f = transmute(ptr); storage::GetMinmaxParameteriv.is_loaded = true; }, _ => unsafe { storage::GetMinmaxParameteriv.f = transmute(failing::GetMinmaxParameteriv); storage::GetMinmaxParameteriv.is_loaded = false; } }
    match loadfn("GetMinmaxParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxParameterivEXT.f = transmute(ptr); storage::GetMinmaxParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetMinmaxParameterivEXT.f = transmute(failing::GetMinmaxParameterivEXT); storage::GetMinmaxParameterivEXT.is_loaded = false; } }
    match loadfn("GetMultiTexEnvfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexEnvfvEXT.f = transmute(ptr); storage::GetMultiTexEnvfvEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexEnvfvEXT.f = transmute(failing::GetMultiTexEnvfvEXT); storage::GetMultiTexEnvfvEXT.is_loaded = false; } }
    match loadfn("GetMultiTexEnvivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexEnvivEXT.f = transmute(ptr); storage::GetMultiTexEnvivEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexEnvivEXT.f = transmute(failing::GetMultiTexEnvivEXT); storage::GetMultiTexEnvivEXT.is_loaded = false; } }
    match loadfn("GetMultiTexGendvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexGendvEXT.f = transmute(ptr); storage::GetMultiTexGendvEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexGendvEXT.f = transmute(failing::GetMultiTexGendvEXT); storage::GetMultiTexGendvEXT.is_loaded = false; } }
    match loadfn("GetMultiTexGenfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexGenfvEXT.f = transmute(ptr); storage::GetMultiTexGenfvEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexGenfvEXT.f = transmute(failing::GetMultiTexGenfvEXT); storage::GetMultiTexGenfvEXT.is_loaded = false; } }
    match loadfn("GetMultiTexGenivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexGenivEXT.f = transmute(ptr); storage::GetMultiTexGenivEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexGenivEXT.f = transmute(failing::GetMultiTexGenivEXT); storage::GetMultiTexGenivEXT.is_loaded = false; } }
    match loadfn("GetMultiTexImageEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexImageEXT.f = transmute(ptr); storage::GetMultiTexImageEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexImageEXT.f = transmute(failing::GetMultiTexImageEXT); storage::GetMultiTexImageEXT.is_loaded = false; } }
    match loadfn("GetMultiTexLevelParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexLevelParameterfvEXT.f = transmute(ptr); storage::GetMultiTexLevelParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexLevelParameterfvEXT.f = transmute(failing::GetMultiTexLevelParameterfvEXT); storage::GetMultiTexLevelParameterfvEXT.is_loaded = false; } }
    match loadfn("GetMultiTexLevelParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexLevelParameterivEXT.f = transmute(ptr); storage::GetMultiTexLevelParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexLevelParameterivEXT.f = transmute(failing::GetMultiTexLevelParameterivEXT); storage::GetMultiTexLevelParameterivEXT.is_loaded = false; } }
    match loadfn("GetMultiTexParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexParameterIivEXT.f = transmute(ptr); storage::GetMultiTexParameterIivEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexParameterIivEXT.f = transmute(failing::GetMultiTexParameterIivEXT); storage::GetMultiTexParameterIivEXT.is_loaded = false; } }
    match loadfn("GetMultiTexParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexParameterIuivEXT.f = transmute(ptr); storage::GetMultiTexParameterIuivEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexParameterIuivEXT.f = transmute(failing::GetMultiTexParameterIuivEXT); storage::GetMultiTexParameterIuivEXT.is_loaded = false; } }
    match loadfn("GetMultiTexParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexParameterfvEXT.f = transmute(ptr); storage::GetMultiTexParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexParameterfvEXT.f = transmute(failing::GetMultiTexParameterfvEXT); storage::GetMultiTexParameterfvEXT.is_loaded = false; } }
    match loadfn("GetMultiTexParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexParameterivEXT.f = transmute(ptr); storage::GetMultiTexParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetMultiTexParameterivEXT.f = transmute(failing::GetMultiTexParameterivEXT); storage::GetMultiTexParameterivEXT.is_loaded = false; } }
    match loadfn("GetMultisamplefv") { ptr if !ptr.is_null() => unsafe { storage::GetMultisamplefv.f = transmute(ptr); storage::GetMultisamplefv.is_loaded = true; }, _ => unsafe { storage::GetMultisamplefv.f = transmute(failing::GetMultisamplefv); storage::GetMultisamplefv.is_loaded = false; } }
    match loadfn("GetMultisamplefvNV") { ptr if !ptr.is_null() => unsafe { storage::GetMultisamplefvNV.f = transmute(ptr); storage::GetMultisamplefvNV.is_loaded = true; }, _ => unsafe { storage::GetMultisamplefvNV.f = transmute(failing::GetMultisamplefvNV); storage::GetMultisamplefvNV.is_loaded = false; } }
    match loadfn("GetNamedBufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedBufferParameterivEXT.f = transmute(ptr); storage::GetNamedBufferParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedBufferParameterivEXT.f = transmute(failing::GetNamedBufferParameterivEXT); storage::GetNamedBufferParameterivEXT.is_loaded = false; } }
    match loadfn("GetNamedBufferParameterui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetNamedBufferParameterui64vNV.f = transmute(ptr); storage::GetNamedBufferParameterui64vNV.is_loaded = true; }, _ => unsafe { storage::GetNamedBufferParameterui64vNV.f = transmute(failing::GetNamedBufferParameterui64vNV); storage::GetNamedBufferParameterui64vNV.is_loaded = false; } }
    match loadfn("GetNamedBufferPointervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedBufferPointervEXT.f = transmute(ptr); storage::GetNamedBufferPointervEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedBufferPointervEXT.f = transmute(failing::GetNamedBufferPointervEXT); storage::GetNamedBufferPointervEXT.is_loaded = false; } }
    match loadfn("GetNamedBufferSubDataEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedBufferSubDataEXT.f = transmute(ptr); storage::GetNamedBufferSubDataEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedBufferSubDataEXT.f = transmute(failing::GetNamedBufferSubDataEXT); storage::GetNamedBufferSubDataEXT.is_loaded = false; } }
    match loadfn("GetNamedFramebufferAttachmentParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedFramebufferAttachmentParameterivEXT.f = transmute(ptr); storage::GetNamedFramebufferAttachmentParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedFramebufferAttachmentParameterivEXT.f = transmute(failing::GetNamedFramebufferAttachmentParameterivEXT); storage::GetNamedFramebufferAttachmentParameterivEXT.is_loaded = false; } }
    match loadfn("GetNamedFramebufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedFramebufferParameterivEXT.f = transmute(ptr); storage::GetNamedFramebufferParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedFramebufferParameterivEXT.f = transmute(failing::GetNamedFramebufferParameterivEXT); storage::GetNamedFramebufferParameterivEXT.is_loaded = false; } }
    match loadfn("GetNamedProgramLocalParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramLocalParameterIivEXT.f = transmute(ptr); storage::GetNamedProgramLocalParameterIivEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedProgramLocalParameterIivEXT.f = transmute(failing::GetNamedProgramLocalParameterIivEXT); storage::GetNamedProgramLocalParameterIivEXT.is_loaded = false; } }
    match loadfn("GetNamedProgramLocalParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramLocalParameterIuivEXT.f = transmute(ptr); storage::GetNamedProgramLocalParameterIuivEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedProgramLocalParameterIuivEXT.f = transmute(failing::GetNamedProgramLocalParameterIuivEXT); storage::GetNamedProgramLocalParameterIuivEXT.is_loaded = false; } }
    match loadfn("GetNamedProgramLocalParameterdvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramLocalParameterdvEXT.f = transmute(ptr); storage::GetNamedProgramLocalParameterdvEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedProgramLocalParameterdvEXT.f = transmute(failing::GetNamedProgramLocalParameterdvEXT); storage::GetNamedProgramLocalParameterdvEXT.is_loaded = false; } }
    match loadfn("GetNamedProgramLocalParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramLocalParameterfvEXT.f = transmute(ptr); storage::GetNamedProgramLocalParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedProgramLocalParameterfvEXT.f = transmute(failing::GetNamedProgramLocalParameterfvEXT); storage::GetNamedProgramLocalParameterfvEXT.is_loaded = false; } }
    match loadfn("GetNamedProgramStringEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramStringEXT.f = transmute(ptr); storage::GetNamedProgramStringEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedProgramStringEXT.f = transmute(failing::GetNamedProgramStringEXT); storage::GetNamedProgramStringEXT.is_loaded = false; } }
    match loadfn("GetNamedProgramivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramivEXT.f = transmute(ptr); storage::GetNamedProgramivEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedProgramivEXT.f = transmute(failing::GetNamedProgramivEXT); storage::GetNamedProgramivEXT.is_loaded = false; } }
    match loadfn("GetNamedRenderbufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedRenderbufferParameterivEXT.f = transmute(ptr); storage::GetNamedRenderbufferParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetNamedRenderbufferParameterivEXT.f = transmute(failing::GetNamedRenderbufferParameterivEXT); storage::GetNamedRenderbufferParameterivEXT.is_loaded = false; } }
    match loadfn("GetNamedStringARB") { ptr if !ptr.is_null() => unsafe { storage::GetNamedStringARB.f = transmute(ptr); storage::GetNamedStringARB.is_loaded = true; }, _ => unsafe { storage::GetNamedStringARB.f = transmute(failing::GetNamedStringARB); storage::GetNamedStringARB.is_loaded = false; } }
    match loadfn("GetNamedStringivARB") { ptr if !ptr.is_null() => unsafe { storage::GetNamedStringivARB.f = transmute(ptr); storage::GetNamedStringivARB.is_loaded = true; }, _ => unsafe { storage::GetNamedStringivARB.f = transmute(failing::GetNamedStringivARB); storage::GetNamedStringivARB.is_loaded = false; } }
    match loadfn("GetObjectBufferfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetObjectBufferfvATI.f = transmute(ptr); storage::GetObjectBufferfvATI.is_loaded = true; }, _ => unsafe { storage::GetObjectBufferfvATI.f = transmute(failing::GetObjectBufferfvATI); storage::GetObjectBufferfvATI.is_loaded = false; } }
    match loadfn("GetObjectBufferivATI") { ptr if !ptr.is_null() => unsafe { storage::GetObjectBufferivATI.f = transmute(ptr); storage::GetObjectBufferivATI.is_loaded = true; }, _ => unsafe { storage::GetObjectBufferivATI.f = transmute(failing::GetObjectBufferivATI); storage::GetObjectBufferivATI.is_loaded = false; } }
    match loadfn("GetObjectLabel") { ptr if !ptr.is_null() => unsafe { storage::GetObjectLabel.f = transmute(ptr); storage::GetObjectLabel.is_loaded = true; }, _ => unsafe { storage::GetObjectLabel.f = transmute(failing::GetObjectLabel); storage::GetObjectLabel.is_loaded = false; } }
    match loadfn("GetObjectLabelEXT") { ptr if !ptr.is_null() => unsafe { storage::GetObjectLabelEXT.f = transmute(ptr); storage::GetObjectLabelEXT.is_loaded = true; }, _ => unsafe { storage::GetObjectLabelEXT.f = transmute(failing::GetObjectLabelEXT); storage::GetObjectLabelEXT.is_loaded = false; } }
    match loadfn("GetObjectLabelKHR") { ptr if !ptr.is_null() => unsafe { storage::GetObjectLabelKHR.f = transmute(ptr); storage::GetObjectLabelKHR.is_loaded = true; }, _ => unsafe { storage::GetObjectLabelKHR.f = transmute(failing::GetObjectLabelKHR); storage::GetObjectLabelKHR.is_loaded = false; } }
    match loadfn("GetObjectParameterfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetObjectParameterfvARB.f = transmute(ptr); storage::GetObjectParameterfvARB.is_loaded = true; }, _ => unsafe { storage::GetObjectParameterfvARB.f = transmute(failing::GetObjectParameterfvARB); storage::GetObjectParameterfvARB.is_loaded = false; } }
    match loadfn("GetObjectParameterivAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GetObjectParameterivAPPLE.f = transmute(ptr); storage::GetObjectParameterivAPPLE.is_loaded = true; }, _ => unsafe { storage::GetObjectParameterivAPPLE.f = transmute(failing::GetObjectParameterivAPPLE); storage::GetObjectParameterivAPPLE.is_loaded = false; } }
    match loadfn("GetObjectParameterivARB") { ptr if !ptr.is_null() => unsafe { storage::GetObjectParameterivARB.f = transmute(ptr); storage::GetObjectParameterivARB.is_loaded = true; }, _ => unsafe { storage::GetObjectParameterivARB.f = transmute(failing::GetObjectParameterivARB); storage::GetObjectParameterivARB.is_loaded = false; } }
    match loadfn("GetObjectPtrLabel") { ptr if !ptr.is_null() => unsafe { storage::GetObjectPtrLabel.f = transmute(ptr); storage::GetObjectPtrLabel.is_loaded = true; }, _ => unsafe { storage::GetObjectPtrLabel.f = transmute(failing::GetObjectPtrLabel); storage::GetObjectPtrLabel.is_loaded = false; } }
    match loadfn("GetObjectPtrLabelKHR") { ptr if !ptr.is_null() => unsafe { storage::GetObjectPtrLabelKHR.f = transmute(ptr); storage::GetObjectPtrLabelKHR.is_loaded = true; }, _ => unsafe { storage::GetObjectPtrLabelKHR.f = transmute(failing::GetObjectPtrLabelKHR); storage::GetObjectPtrLabelKHR.is_loaded = false; } }
    match loadfn("GetOcclusionQueryivNV") { ptr if !ptr.is_null() => unsafe { storage::GetOcclusionQueryivNV.f = transmute(ptr); storage::GetOcclusionQueryivNV.is_loaded = true; }, _ => unsafe { storage::GetOcclusionQueryivNV.f = transmute(failing::GetOcclusionQueryivNV); storage::GetOcclusionQueryivNV.is_loaded = false; } }
    match loadfn("GetOcclusionQueryuivNV") { ptr if !ptr.is_null() => unsafe { storage::GetOcclusionQueryuivNV.f = transmute(ptr); storage::GetOcclusionQueryuivNV.is_loaded = true; }, _ => unsafe { storage::GetOcclusionQueryuivNV.f = transmute(failing::GetOcclusionQueryuivNV); storage::GetOcclusionQueryuivNV.is_loaded = false; } }
    match loadfn("GetPathColorGenfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathColorGenfvNV.f = transmute(ptr); storage::GetPathColorGenfvNV.is_loaded = true; }, _ => unsafe { storage::GetPathColorGenfvNV.f = transmute(failing::GetPathColorGenfvNV); storage::GetPathColorGenfvNV.is_loaded = false; } }
    match loadfn("GetPathColorGenivNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathColorGenivNV.f = transmute(ptr); storage::GetPathColorGenivNV.is_loaded = true; }, _ => unsafe { storage::GetPathColorGenivNV.f = transmute(failing::GetPathColorGenivNV); storage::GetPathColorGenivNV.is_loaded = false; } }
    match loadfn("GetPathCommandsNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathCommandsNV.f = transmute(ptr); storage::GetPathCommandsNV.is_loaded = true; }, _ => unsafe { storage::GetPathCommandsNV.f = transmute(failing::GetPathCommandsNV); storage::GetPathCommandsNV.is_loaded = false; } }
    match loadfn("GetPathCoordsNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathCoordsNV.f = transmute(ptr); storage::GetPathCoordsNV.is_loaded = true; }, _ => unsafe { storage::GetPathCoordsNV.f = transmute(failing::GetPathCoordsNV); storage::GetPathCoordsNV.is_loaded = false; } }
    match loadfn("GetPathDashArrayNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathDashArrayNV.f = transmute(ptr); storage::GetPathDashArrayNV.is_loaded = true; }, _ => unsafe { storage::GetPathDashArrayNV.f = transmute(failing::GetPathDashArrayNV); storage::GetPathDashArrayNV.is_loaded = false; } }
    match loadfn("GetPathLengthNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathLengthNV.f = transmute(ptr); storage::GetPathLengthNV.is_loaded = true; }, _ => unsafe { storage::GetPathLengthNV.f = transmute(failing::GetPathLengthNV); storage::GetPathLengthNV.is_loaded = false; } }
    match loadfn("GetPathMetricRangeNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathMetricRangeNV.f = transmute(ptr); storage::GetPathMetricRangeNV.is_loaded = true; }, _ => unsafe { storage::GetPathMetricRangeNV.f = transmute(failing::GetPathMetricRangeNV); storage::GetPathMetricRangeNV.is_loaded = false; } }
    match loadfn("GetPathMetricsNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathMetricsNV.f = transmute(ptr); storage::GetPathMetricsNV.is_loaded = true; }, _ => unsafe { storage::GetPathMetricsNV.f = transmute(failing::GetPathMetricsNV); storage::GetPathMetricsNV.is_loaded = false; } }
    match loadfn("GetPathParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathParameterfvNV.f = transmute(ptr); storage::GetPathParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetPathParameterfvNV.f = transmute(failing::GetPathParameterfvNV); storage::GetPathParameterfvNV.is_loaded = false; } }
    match loadfn("GetPathParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathParameterivNV.f = transmute(ptr); storage::GetPathParameterivNV.is_loaded = true; }, _ => unsafe { storage::GetPathParameterivNV.f = transmute(failing::GetPathParameterivNV); storage::GetPathParameterivNV.is_loaded = false; } }
    match loadfn("GetPathSpacingNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathSpacingNV.f = transmute(ptr); storage::GetPathSpacingNV.is_loaded = true; }, _ => unsafe { storage::GetPathSpacingNV.f = transmute(failing::GetPathSpacingNV); storage::GetPathSpacingNV.is_loaded = false; } }
    match loadfn("GetPathTexGenfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathTexGenfvNV.f = transmute(ptr); storage::GetPathTexGenfvNV.is_loaded = true; }, _ => unsafe { storage::GetPathTexGenfvNV.f = transmute(failing::GetPathTexGenfvNV); storage::GetPathTexGenfvNV.is_loaded = false; } }
    match loadfn("GetPathTexGenivNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathTexGenivNV.f = transmute(ptr); storage::GetPathTexGenivNV.is_loaded = true; }, _ => unsafe { storage::GetPathTexGenivNV.f = transmute(failing::GetPathTexGenivNV); storage::GetPathTexGenivNV.is_loaded = false; } }
    match loadfn("GetPerfMonitorCounterDataAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorCounterDataAMD.f = transmute(ptr); storage::GetPerfMonitorCounterDataAMD.is_loaded = true; }, _ => unsafe { storage::GetPerfMonitorCounterDataAMD.f = transmute(failing::GetPerfMonitorCounterDataAMD); storage::GetPerfMonitorCounterDataAMD.is_loaded = false; } }
    match loadfn("GetPerfMonitorCounterInfoAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorCounterInfoAMD.f = transmute(ptr); storage::GetPerfMonitorCounterInfoAMD.is_loaded = true; }, _ => unsafe { storage::GetPerfMonitorCounterInfoAMD.f = transmute(failing::GetPerfMonitorCounterInfoAMD); storage::GetPerfMonitorCounterInfoAMD.is_loaded = false; } }
    match loadfn("GetPerfMonitorCounterStringAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorCounterStringAMD.f = transmute(ptr); storage::GetPerfMonitorCounterStringAMD.is_loaded = true; }, _ => unsafe { storage::GetPerfMonitorCounterStringAMD.f = transmute(failing::GetPerfMonitorCounterStringAMD); storage::GetPerfMonitorCounterStringAMD.is_loaded = false; } }
    match loadfn("GetPerfMonitorCountersAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorCountersAMD.f = transmute(ptr); storage::GetPerfMonitorCountersAMD.is_loaded = true; }, _ => unsafe { storage::GetPerfMonitorCountersAMD.f = transmute(failing::GetPerfMonitorCountersAMD); storage::GetPerfMonitorCountersAMD.is_loaded = false; } }
    match loadfn("GetPerfMonitorGroupStringAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorGroupStringAMD.f = transmute(ptr); storage::GetPerfMonitorGroupStringAMD.is_loaded = true; }, _ => unsafe { storage::GetPerfMonitorGroupStringAMD.f = transmute(failing::GetPerfMonitorGroupStringAMD); storage::GetPerfMonitorGroupStringAMD.is_loaded = false; } }
    match loadfn("GetPerfMonitorGroupsAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorGroupsAMD.f = transmute(ptr); storage::GetPerfMonitorGroupsAMD.is_loaded = true; }, _ => unsafe { storage::GetPerfMonitorGroupsAMD.f = transmute(failing::GetPerfMonitorGroupsAMD); storage::GetPerfMonitorGroupsAMD.is_loaded = false; } }
    match loadfn("GetPixelMapfv") { ptr if !ptr.is_null() => unsafe { storage::GetPixelMapfv.f = transmute(ptr); storage::GetPixelMapfv.is_loaded = true; }, _ => unsafe { storage::GetPixelMapfv.f = transmute(failing::GetPixelMapfv); storage::GetPixelMapfv.is_loaded = false; } }
    match loadfn("GetPixelMapuiv") { ptr if !ptr.is_null() => unsafe { storage::GetPixelMapuiv.f = transmute(ptr); storage::GetPixelMapuiv.is_loaded = true; }, _ => unsafe { storage::GetPixelMapuiv.f = transmute(failing::GetPixelMapuiv); storage::GetPixelMapuiv.is_loaded = false; } }
    match loadfn("GetPixelMapusv") { ptr if !ptr.is_null() => unsafe { storage::GetPixelMapusv.f = transmute(ptr); storage::GetPixelMapusv.is_loaded = true; }, _ => unsafe { storage::GetPixelMapusv.f = transmute(failing::GetPixelMapusv); storage::GetPixelMapusv.is_loaded = false; } }
    match loadfn("GetPixelMapxv") { ptr if !ptr.is_null() => unsafe { storage::GetPixelMapxv.f = transmute(ptr); storage::GetPixelMapxv.is_loaded = true; }, _ => unsafe { storage::GetPixelMapxv.f = transmute(failing::GetPixelMapxv); storage::GetPixelMapxv.is_loaded = false; } }
    match loadfn("GetPixelTexGenParameterfvSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetPixelTexGenParameterfvSGIS.f = transmute(ptr); storage::GetPixelTexGenParameterfvSGIS.is_loaded = true; }, _ => unsafe { storage::GetPixelTexGenParameterfvSGIS.f = transmute(failing::GetPixelTexGenParameterfvSGIS); storage::GetPixelTexGenParameterfvSGIS.is_loaded = false; } }
    match loadfn("GetPixelTexGenParameterivSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetPixelTexGenParameterivSGIS.f = transmute(ptr); storage::GetPixelTexGenParameterivSGIS.is_loaded = true; }, _ => unsafe { storage::GetPixelTexGenParameterivSGIS.f = transmute(failing::GetPixelTexGenParameterivSGIS); storage::GetPixelTexGenParameterivSGIS.is_loaded = false; } }
    match loadfn("GetPixelTransformParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPixelTransformParameterfvEXT.f = transmute(ptr); storage::GetPixelTransformParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetPixelTransformParameterfvEXT.f = transmute(failing::GetPixelTransformParameterfvEXT); storage::GetPixelTransformParameterfvEXT.is_loaded = false; } }
    match loadfn("GetPixelTransformParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPixelTransformParameterivEXT.f = transmute(ptr); storage::GetPixelTransformParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetPixelTransformParameterivEXT.f = transmute(failing::GetPixelTransformParameterivEXT); storage::GetPixelTransformParameterivEXT.is_loaded = false; } }
    match loadfn("GetPointerIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPointerIndexedvEXT.f = transmute(ptr); storage::GetPointerIndexedvEXT.is_loaded = true; }, _ => unsafe { storage::GetPointerIndexedvEXT.f = transmute(failing::GetPointerIndexedvEXT); storage::GetPointerIndexedvEXT.is_loaded = false; } }
    match loadfn("GetPointeri_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPointeri_vEXT.f = transmute(ptr); storage::GetPointeri_vEXT.is_loaded = true; }, _ => unsafe { storage::GetPointeri_vEXT.f = transmute(failing::GetPointeri_vEXT); storage::GetPointeri_vEXT.is_loaded = false; } }
    match loadfn("GetPointerv") { ptr if !ptr.is_null() => unsafe { storage::GetPointerv.f = transmute(ptr); storage::GetPointerv.is_loaded = true; }, _ => unsafe { storage::GetPointerv.f = transmute(failing::GetPointerv); storage::GetPointerv.is_loaded = false; } }
    match loadfn("GetPointervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPointervEXT.f = transmute(ptr); storage::GetPointervEXT.is_loaded = true; }, _ => unsafe { storage::GetPointervEXT.f = transmute(failing::GetPointervEXT); storage::GetPointervEXT.is_loaded = false; } }
    match loadfn("GetPointervKHR") { ptr if !ptr.is_null() => unsafe { storage::GetPointervKHR.f = transmute(ptr); storage::GetPointervKHR.is_loaded = true; }, _ => unsafe { storage::GetPointervKHR.f = transmute(failing::GetPointervKHR); storage::GetPointervKHR.is_loaded = false; } }
    match loadfn("GetPolygonStipple") { ptr if !ptr.is_null() => unsafe { storage::GetPolygonStipple.f = transmute(ptr); storage::GetPolygonStipple.is_loaded = true; }, _ => unsafe { storage::GetPolygonStipple.f = transmute(failing::GetPolygonStipple); storage::GetPolygonStipple.is_loaded = false; } }
    match loadfn("GetProgramBinary") { ptr if !ptr.is_null() => unsafe { storage::GetProgramBinary.f = transmute(ptr); storage::GetProgramBinary.is_loaded = true; }, _ => unsafe { storage::GetProgramBinary.f = transmute(failing::GetProgramBinary); storage::GetProgramBinary.is_loaded = false; } }
    match loadfn("GetProgramBinaryOES") { ptr if !ptr.is_null() => unsafe { storage::GetProgramBinaryOES.f = transmute(ptr); storage::GetProgramBinaryOES.is_loaded = true; }, _ => unsafe { storage::GetProgramBinaryOES.f = transmute(failing::GetProgramBinaryOES); storage::GetProgramBinaryOES.is_loaded = false; } }
    match loadfn("GetProgramEnvParameterIivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramEnvParameterIivNV.f = transmute(ptr); storage::GetProgramEnvParameterIivNV.is_loaded = true; }, _ => unsafe { storage::GetProgramEnvParameterIivNV.f = transmute(failing::GetProgramEnvParameterIivNV); storage::GetProgramEnvParameterIivNV.is_loaded = false; } }
    match loadfn("GetProgramEnvParameterIuivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramEnvParameterIuivNV.f = transmute(ptr); storage::GetProgramEnvParameterIuivNV.is_loaded = true; }, _ => unsafe { storage::GetProgramEnvParameterIuivNV.f = transmute(failing::GetProgramEnvParameterIuivNV); storage::GetProgramEnvParameterIuivNV.is_loaded = false; } }
    match loadfn("GetProgramEnvParameterdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramEnvParameterdvARB.f = transmute(ptr); storage::GetProgramEnvParameterdvARB.is_loaded = true; }, _ => unsafe { storage::GetProgramEnvParameterdvARB.f = transmute(failing::GetProgramEnvParameterdvARB); storage::GetProgramEnvParameterdvARB.is_loaded = false; } }
    match loadfn("GetProgramEnvParameterfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramEnvParameterfvARB.f = transmute(ptr); storage::GetProgramEnvParameterfvARB.is_loaded = true; }, _ => unsafe { storage::GetProgramEnvParameterfvARB.f = transmute(failing::GetProgramEnvParameterfvARB); storage::GetProgramEnvParameterfvARB.is_loaded = false; } }
    match loadfn("GetProgramInfoLog") { ptr if !ptr.is_null() => unsafe { storage::GetProgramInfoLog.f = transmute(ptr); storage::GetProgramInfoLog.is_loaded = true; }, _ => unsafe { storage::GetProgramInfoLog.f = transmute(failing::GetProgramInfoLog); storage::GetProgramInfoLog.is_loaded = false; } }
    match loadfn("GetProgramInterfaceiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramInterfaceiv.f = transmute(ptr); storage::GetProgramInterfaceiv.is_loaded = true; }, _ => unsafe { storage::GetProgramInterfaceiv.f = transmute(failing::GetProgramInterfaceiv); storage::GetProgramInterfaceiv.is_loaded = false; } }
    match loadfn("GetProgramLocalParameterIivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramLocalParameterIivNV.f = transmute(ptr); storage::GetProgramLocalParameterIivNV.is_loaded = true; }, _ => unsafe { storage::GetProgramLocalParameterIivNV.f = transmute(failing::GetProgramLocalParameterIivNV); storage::GetProgramLocalParameterIivNV.is_loaded = false; } }
    match loadfn("GetProgramLocalParameterIuivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramLocalParameterIuivNV.f = transmute(ptr); storage::GetProgramLocalParameterIuivNV.is_loaded = true; }, _ => unsafe { storage::GetProgramLocalParameterIuivNV.f = transmute(failing::GetProgramLocalParameterIuivNV); storage::GetProgramLocalParameterIuivNV.is_loaded = false; } }
    match loadfn("GetProgramLocalParameterdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramLocalParameterdvARB.f = transmute(ptr); storage::GetProgramLocalParameterdvARB.is_loaded = true; }, _ => unsafe { storage::GetProgramLocalParameterdvARB.f = transmute(failing::GetProgramLocalParameterdvARB); storage::GetProgramLocalParameterdvARB.is_loaded = false; } }
    match loadfn("GetProgramLocalParameterfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramLocalParameterfvARB.f = transmute(ptr); storage::GetProgramLocalParameterfvARB.is_loaded = true; }, _ => unsafe { storage::GetProgramLocalParameterfvARB.f = transmute(failing::GetProgramLocalParameterfvARB); storage::GetProgramLocalParameterfvARB.is_loaded = false; } }
    match loadfn("GetProgramNamedParameterdvNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramNamedParameterdvNV.f = transmute(ptr); storage::GetProgramNamedParameterdvNV.is_loaded = true; }, _ => unsafe { storage::GetProgramNamedParameterdvNV.f = transmute(failing::GetProgramNamedParameterdvNV); storage::GetProgramNamedParameterdvNV.is_loaded = false; } }
    match loadfn("GetProgramNamedParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramNamedParameterfvNV.f = transmute(ptr); storage::GetProgramNamedParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetProgramNamedParameterfvNV.f = transmute(failing::GetProgramNamedParameterfvNV); storage::GetProgramNamedParameterfvNV.is_loaded = false; } }
    match loadfn("GetProgramParameterdvNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramParameterdvNV.f = transmute(ptr); storage::GetProgramParameterdvNV.is_loaded = true; }, _ => unsafe { storage::GetProgramParameterdvNV.f = transmute(failing::GetProgramParameterdvNV); storage::GetProgramParameterdvNV.is_loaded = false; } }
    match loadfn("GetProgramParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramParameterfvNV.f = transmute(ptr); storage::GetProgramParameterfvNV.is_loaded = true; }, _ => unsafe { storage::GetProgramParameterfvNV.f = transmute(failing::GetProgramParameterfvNV); storage::GetProgramParameterfvNV.is_loaded = false; } }
    match loadfn("GetProgramPipelineInfoLog") { ptr if !ptr.is_null() => unsafe { storage::GetProgramPipelineInfoLog.f = transmute(ptr); storage::GetProgramPipelineInfoLog.is_loaded = true; }, _ => unsafe { storage::GetProgramPipelineInfoLog.f = transmute(failing::GetProgramPipelineInfoLog); storage::GetProgramPipelineInfoLog.is_loaded = false; } }
    match loadfn("GetProgramPipelineInfoLogEXT") { ptr if !ptr.is_null() => unsafe { storage::GetProgramPipelineInfoLogEXT.f = transmute(ptr); storage::GetProgramPipelineInfoLogEXT.is_loaded = true; }, _ => unsafe { storage::GetProgramPipelineInfoLogEXT.f = transmute(failing::GetProgramPipelineInfoLogEXT); storage::GetProgramPipelineInfoLogEXT.is_loaded = false; } }
    match loadfn("GetProgramPipelineiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramPipelineiv.f = transmute(ptr); storage::GetProgramPipelineiv.is_loaded = true; }, _ => unsafe { storage::GetProgramPipelineiv.f = transmute(failing::GetProgramPipelineiv); storage::GetProgramPipelineiv.is_loaded = false; } }
    match loadfn("GetProgramPipelineivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetProgramPipelineivEXT.f = transmute(ptr); storage::GetProgramPipelineivEXT.is_loaded = true; }, _ => unsafe { storage::GetProgramPipelineivEXT.f = transmute(failing::GetProgramPipelineivEXT); storage::GetProgramPipelineivEXT.is_loaded = false; } }
    match loadfn("GetProgramResourceIndex") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceIndex.f = transmute(ptr); storage::GetProgramResourceIndex.is_loaded = true; }, _ => unsafe { storage::GetProgramResourceIndex.f = transmute(failing::GetProgramResourceIndex); storage::GetProgramResourceIndex.is_loaded = false; } }
    match loadfn("GetProgramResourceLocation") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceLocation.f = transmute(ptr); storage::GetProgramResourceLocation.is_loaded = true; }, _ => unsafe { storage::GetProgramResourceLocation.f = transmute(failing::GetProgramResourceLocation); storage::GetProgramResourceLocation.is_loaded = false; } }
    match loadfn("GetProgramResourceLocationIndex") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceLocationIndex.f = transmute(ptr); storage::GetProgramResourceLocationIndex.is_loaded = true; }, _ => unsafe { storage::GetProgramResourceLocationIndex.f = transmute(failing::GetProgramResourceLocationIndex); storage::GetProgramResourceLocationIndex.is_loaded = false; } }
    match loadfn("GetProgramResourceName") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceName.f = transmute(ptr); storage::GetProgramResourceName.is_loaded = true; }, _ => unsafe { storage::GetProgramResourceName.f = transmute(failing::GetProgramResourceName); storage::GetProgramResourceName.is_loaded = false; } }
    match loadfn("GetProgramResourceiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceiv.f = transmute(ptr); storage::GetProgramResourceiv.is_loaded = true; }, _ => unsafe { storage::GetProgramResourceiv.f = transmute(failing::GetProgramResourceiv); storage::GetProgramResourceiv.is_loaded = false; } }
    match loadfn("GetProgramStageiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramStageiv.f = transmute(ptr); storage::GetProgramStageiv.is_loaded = true; }, _ => unsafe { storage::GetProgramStageiv.f = transmute(failing::GetProgramStageiv); storage::GetProgramStageiv.is_loaded = false; } }
    match loadfn("GetProgramStringARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramStringARB.f = transmute(ptr); storage::GetProgramStringARB.is_loaded = true; }, _ => unsafe { storage::GetProgramStringARB.f = transmute(failing::GetProgramStringARB); storage::GetProgramStringARB.is_loaded = false; } }
    match loadfn("GetProgramStringNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramStringNV.f = transmute(ptr); storage::GetProgramStringNV.is_loaded = true; }, _ => unsafe { storage::GetProgramStringNV.f = transmute(failing::GetProgramStringNV); storage::GetProgramStringNV.is_loaded = false; } }
    match loadfn("GetProgramSubroutineParameteruivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramSubroutineParameteruivNV.f = transmute(ptr); storage::GetProgramSubroutineParameteruivNV.is_loaded = true; }, _ => unsafe { storage::GetProgramSubroutineParameteruivNV.f = transmute(failing::GetProgramSubroutineParameteruivNV); storage::GetProgramSubroutineParameteruivNV.is_loaded = false; } }
    match loadfn("GetProgramiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramiv.f = transmute(ptr); storage::GetProgramiv.is_loaded = true; }, _ => unsafe { storage::GetProgramiv.f = transmute(failing::GetProgramiv); storage::GetProgramiv.is_loaded = false; } }
    match loadfn("GetProgramivARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramivARB.f = transmute(ptr); storage::GetProgramivARB.is_loaded = true; }, _ => unsafe { storage::GetProgramivARB.f = transmute(failing::GetProgramivARB); storage::GetProgramivARB.is_loaded = false; } }
    match loadfn("GetProgramivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramivNV.f = transmute(ptr); storage::GetProgramivNV.is_loaded = true; }, _ => unsafe { storage::GetProgramivNV.f = transmute(failing::GetProgramivNV); storage::GetProgramivNV.is_loaded = false; } }
    match loadfn("GetQueryIndexediv") { ptr if !ptr.is_null() => unsafe { storage::GetQueryIndexediv.f = transmute(ptr); storage::GetQueryIndexediv.is_loaded = true; }, _ => unsafe { storage::GetQueryIndexediv.f = transmute(failing::GetQueryIndexediv); storage::GetQueryIndexediv.is_loaded = false; } }
    match loadfn("GetQueryObjecti64v") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjecti64v.f = transmute(ptr); storage::GetQueryObjecti64v.is_loaded = true; }, _ => unsafe { storage::GetQueryObjecti64v.f = transmute(failing::GetQueryObjecti64v); storage::GetQueryObjecti64v.is_loaded = false; } }
    match loadfn("GetQueryObjecti64vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjecti64vEXT.f = transmute(ptr); storage::GetQueryObjecti64vEXT.is_loaded = true; }, _ => unsafe { storage::GetQueryObjecti64vEXT.f = transmute(failing::GetQueryObjecti64vEXT); storage::GetQueryObjecti64vEXT.is_loaded = false; } }
    match loadfn("GetQueryObjectiv") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectiv.f = transmute(ptr); storage::GetQueryObjectiv.is_loaded = true; }, _ => unsafe { storage::GetQueryObjectiv.f = transmute(failing::GetQueryObjectiv); storage::GetQueryObjectiv.is_loaded = false; } }
    match loadfn("GetQueryObjectivARB") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectivARB.f = transmute(ptr); storage::GetQueryObjectivARB.is_loaded = true; }, _ => unsafe { storage::GetQueryObjectivARB.f = transmute(failing::GetQueryObjectivARB); storage::GetQueryObjectivARB.is_loaded = false; } }
    match loadfn("GetQueryObjectivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectivEXT.f = transmute(ptr); storage::GetQueryObjectivEXT.is_loaded = true; }, _ => unsafe { storage::GetQueryObjectivEXT.f = transmute(failing::GetQueryObjectivEXT); storage::GetQueryObjectivEXT.is_loaded = false; } }
    match loadfn("GetQueryObjectui64v") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectui64v.f = transmute(ptr); storage::GetQueryObjectui64v.is_loaded = true; }, _ => unsafe { storage::GetQueryObjectui64v.f = transmute(failing::GetQueryObjectui64v); storage::GetQueryObjectui64v.is_loaded = false; } }
    match loadfn("GetQueryObjectui64vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectui64vEXT.f = transmute(ptr); storage::GetQueryObjectui64vEXT.is_loaded = true; }, _ => unsafe { storage::GetQueryObjectui64vEXT.f = transmute(failing::GetQueryObjectui64vEXT); storage::GetQueryObjectui64vEXT.is_loaded = false; } }
    match loadfn("GetQueryObjectuiv") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectuiv.f = transmute(ptr); storage::GetQueryObjectuiv.is_loaded = true; }, _ => unsafe { storage::GetQueryObjectuiv.f = transmute(failing::GetQueryObjectuiv); storage::GetQueryObjectuiv.is_loaded = false; } }
    match loadfn("GetQueryObjectuivARB") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectuivARB.f = transmute(ptr); storage::GetQueryObjectuivARB.is_loaded = true; }, _ => unsafe { storage::GetQueryObjectuivARB.f = transmute(failing::GetQueryObjectuivARB); storage::GetQueryObjectuivARB.is_loaded = false; } }
    match loadfn("GetQueryObjectuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectuivEXT.f = transmute(ptr); storage::GetQueryObjectuivEXT.is_loaded = true; }, _ => unsafe { storage::GetQueryObjectuivEXT.f = transmute(failing::GetQueryObjectuivEXT); storage::GetQueryObjectuivEXT.is_loaded = false; } }
    match loadfn("GetQueryiv") { ptr if !ptr.is_null() => unsafe { storage::GetQueryiv.f = transmute(ptr); storage::GetQueryiv.is_loaded = true; }, _ => unsafe { storage::GetQueryiv.f = transmute(failing::GetQueryiv); storage::GetQueryiv.is_loaded = false; } }
    match loadfn("GetQueryivARB") { ptr if !ptr.is_null() => unsafe { storage::GetQueryivARB.f = transmute(ptr); storage::GetQueryivARB.is_loaded = true; }, _ => unsafe { storage::GetQueryivARB.f = transmute(failing::GetQueryivARB); storage::GetQueryivARB.is_loaded = false; } }
    match loadfn("GetQueryivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryivEXT.f = transmute(ptr); storage::GetQueryivEXT.is_loaded = true; }, _ => unsafe { storage::GetQueryivEXT.f = transmute(failing::GetQueryivEXT); storage::GetQueryivEXT.is_loaded = false; } }
    match loadfn("GetRenderbufferParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetRenderbufferParameteriv.f = transmute(ptr); storage::GetRenderbufferParameteriv.is_loaded = true; }, _ => unsafe { storage::GetRenderbufferParameteriv.f = transmute(failing::GetRenderbufferParameteriv); storage::GetRenderbufferParameteriv.is_loaded = false; } }
    match loadfn("GetRenderbufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetRenderbufferParameterivEXT.f = transmute(ptr); storage::GetRenderbufferParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetRenderbufferParameterivEXT.f = transmute(failing::GetRenderbufferParameterivEXT); storage::GetRenderbufferParameterivEXT.is_loaded = false; } }
    match loadfn("GetRenderbufferParameterivOES") { ptr if !ptr.is_null() => unsafe { storage::GetRenderbufferParameterivOES.f = transmute(ptr); storage::GetRenderbufferParameterivOES.is_loaded = true; }, _ => unsafe { storage::GetRenderbufferParameterivOES.f = transmute(failing::GetRenderbufferParameterivOES); storage::GetRenderbufferParameterivOES.is_loaded = false; } }
    match loadfn("GetSamplerParameterIiv") { ptr if !ptr.is_null() => unsafe { storage::GetSamplerParameterIiv.f = transmute(ptr); storage::GetSamplerParameterIiv.is_loaded = true; }, _ => unsafe { storage::GetSamplerParameterIiv.f = transmute(failing::GetSamplerParameterIiv); storage::GetSamplerParameterIiv.is_loaded = false; } }
    match loadfn("GetSamplerParameterIuiv") { ptr if !ptr.is_null() => unsafe { storage::GetSamplerParameterIuiv.f = transmute(ptr); storage::GetSamplerParameterIuiv.is_loaded = true; }, _ => unsafe { storage::GetSamplerParameterIuiv.f = transmute(failing::GetSamplerParameterIuiv); storage::GetSamplerParameterIuiv.is_loaded = false; } }
    match loadfn("GetSamplerParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetSamplerParameterfv.f = transmute(ptr); storage::GetSamplerParameterfv.is_loaded = true; }, _ => unsafe { storage::GetSamplerParameterfv.f = transmute(failing::GetSamplerParameterfv); storage::GetSamplerParameterfv.is_loaded = false; } }
    match loadfn("GetSamplerParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetSamplerParameteriv.f = transmute(ptr); storage::GetSamplerParameteriv.is_loaded = true; }, _ => unsafe { storage::GetSamplerParameteriv.f = transmute(failing::GetSamplerParameteriv); storage::GetSamplerParameteriv.is_loaded = false; } }
    match loadfn("GetSeparableFilter") { ptr if !ptr.is_null() => unsafe { storage::GetSeparableFilter.f = transmute(ptr); storage::GetSeparableFilter.is_loaded = true; }, _ => unsafe { storage::GetSeparableFilter.f = transmute(failing::GetSeparableFilter); storage::GetSeparableFilter.is_loaded = false; } }
    match loadfn("GetSeparableFilterEXT") { ptr if !ptr.is_null() => unsafe { storage::GetSeparableFilterEXT.f = transmute(ptr); storage::GetSeparableFilterEXT.is_loaded = true; }, _ => unsafe { storage::GetSeparableFilterEXT.f = transmute(failing::GetSeparableFilterEXT); storage::GetSeparableFilterEXT.is_loaded = false; } }
    match loadfn("GetShaderInfoLog") { ptr if !ptr.is_null() => unsafe { storage::GetShaderInfoLog.f = transmute(ptr); storage::GetShaderInfoLog.is_loaded = true; }, _ => unsafe { storage::GetShaderInfoLog.f = transmute(failing::GetShaderInfoLog); storage::GetShaderInfoLog.is_loaded = false; } }
    match loadfn("GetShaderPrecisionFormat") { ptr if !ptr.is_null() => unsafe { storage::GetShaderPrecisionFormat.f = transmute(ptr); storage::GetShaderPrecisionFormat.is_loaded = true; }, _ => unsafe { storage::GetShaderPrecisionFormat.f = transmute(failing::GetShaderPrecisionFormat); storage::GetShaderPrecisionFormat.is_loaded = false; } }
    match loadfn("GetShaderSource") { ptr if !ptr.is_null() => unsafe { storage::GetShaderSource.f = transmute(ptr); storage::GetShaderSource.is_loaded = true; }, _ => unsafe { storage::GetShaderSource.f = transmute(failing::GetShaderSource); storage::GetShaderSource.is_loaded = false; } }
    match loadfn("GetShaderSourceARB") { ptr if !ptr.is_null() => unsafe { storage::GetShaderSourceARB.f = transmute(ptr); storage::GetShaderSourceARB.is_loaded = true; }, _ => unsafe { storage::GetShaderSourceARB.f = transmute(failing::GetShaderSourceARB); storage::GetShaderSourceARB.is_loaded = false; } }
    match loadfn("GetShaderiv") { ptr if !ptr.is_null() => unsafe { storage::GetShaderiv.f = transmute(ptr); storage::GetShaderiv.is_loaded = true; }, _ => unsafe { storage::GetShaderiv.f = transmute(failing::GetShaderiv); storage::GetShaderiv.is_loaded = false; } }
    match loadfn("GetSharpenTexFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetSharpenTexFuncSGIS.f = transmute(ptr); storage::GetSharpenTexFuncSGIS.is_loaded = true; }, _ => unsafe { storage::GetSharpenTexFuncSGIS.f = transmute(failing::GetSharpenTexFuncSGIS); storage::GetSharpenTexFuncSGIS.is_loaded = false; } }
    match loadfn("GetString") { ptr if !ptr.is_null() => unsafe { storage::GetString.f = transmute(ptr); storage::GetString.is_loaded = true; }, _ => unsafe { storage::GetString.f = transmute(failing::GetString); storage::GetString.is_loaded = false; } }
    match loadfn("GetStringi") { ptr if !ptr.is_null() => unsafe { storage::GetStringi.f = transmute(ptr); storage::GetStringi.is_loaded = true; }, _ => unsafe { storage::GetStringi.f = transmute(failing::GetStringi); storage::GetStringi.is_loaded = false; } }
    match loadfn("GetSubroutineIndex") { ptr if !ptr.is_null() => unsafe { storage::GetSubroutineIndex.f = transmute(ptr); storage::GetSubroutineIndex.is_loaded = true; }, _ => unsafe { storage::GetSubroutineIndex.f = transmute(failing::GetSubroutineIndex); storage::GetSubroutineIndex.is_loaded = false; } }
    match loadfn("GetSubroutineUniformLocation") { ptr if !ptr.is_null() => unsafe { storage::GetSubroutineUniformLocation.f = transmute(ptr); storage::GetSubroutineUniformLocation.is_loaded = true; }, _ => unsafe { storage::GetSubroutineUniformLocation.f = transmute(failing::GetSubroutineUniformLocation); storage::GetSubroutineUniformLocation.is_loaded = false; } }
    match loadfn("GetSynciv") { ptr if !ptr.is_null() => unsafe { storage::GetSynciv.f = transmute(ptr); storage::GetSynciv.is_loaded = true; }, _ => unsafe { storage::GetSynciv.f = transmute(failing::GetSynciv); storage::GetSynciv.is_loaded = false; } }
    match loadfn("GetSyncivAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GetSyncivAPPLE.f = transmute(ptr); storage::GetSyncivAPPLE.is_loaded = true; }, _ => unsafe { storage::GetSyncivAPPLE.f = transmute(failing::GetSyncivAPPLE); storage::GetSyncivAPPLE.is_loaded = false; } }
    match loadfn("GetTexBumpParameterfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetTexBumpParameterfvATI.f = transmute(ptr); storage::GetTexBumpParameterfvATI.is_loaded = true; }, _ => unsafe { storage::GetTexBumpParameterfvATI.f = transmute(failing::GetTexBumpParameterfvATI); storage::GetTexBumpParameterfvATI.is_loaded = false; } }
    match loadfn("GetTexBumpParameterivATI") { ptr if !ptr.is_null() => unsafe { storage::GetTexBumpParameterivATI.f = transmute(ptr); storage::GetTexBumpParameterivATI.is_loaded = true; }, _ => unsafe { storage::GetTexBumpParameterivATI.f = transmute(failing::GetTexBumpParameterivATI); storage::GetTexBumpParameterivATI.is_loaded = false; } }
    match loadfn("GetTexEnvfv") { ptr if !ptr.is_null() => unsafe { storage::GetTexEnvfv.f = transmute(ptr); storage::GetTexEnvfv.is_loaded = true; }, _ => unsafe { storage::GetTexEnvfv.f = transmute(failing::GetTexEnvfv); storage::GetTexEnvfv.is_loaded = false; } }
    match loadfn("GetTexEnviv") { ptr if !ptr.is_null() => unsafe { storage::GetTexEnviv.f = transmute(ptr); storage::GetTexEnviv.is_loaded = true; }, _ => unsafe { storage::GetTexEnviv.f = transmute(failing::GetTexEnviv); storage::GetTexEnviv.is_loaded = false; } }
    match loadfn("GetTexEnvxv") { ptr if !ptr.is_null() => unsafe { storage::GetTexEnvxv.f = transmute(ptr); storage::GetTexEnvxv.is_loaded = true; }, _ => unsafe { storage::GetTexEnvxv.f = transmute(failing::GetTexEnvxv); storage::GetTexEnvxv.is_loaded = false; } }
    match loadfn("GetTexEnvxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexEnvxvOES.f = transmute(ptr); storage::GetTexEnvxvOES.is_loaded = true; }, _ => unsafe { storage::GetTexEnvxvOES.f = transmute(failing::GetTexEnvxvOES); storage::GetTexEnvxvOES.is_loaded = false; } }
    match loadfn("GetTexFilterFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetTexFilterFuncSGIS.f = transmute(ptr); storage::GetTexFilterFuncSGIS.is_loaded = true; }, _ => unsafe { storage::GetTexFilterFuncSGIS.f = transmute(failing::GetTexFilterFuncSGIS); storage::GetTexFilterFuncSGIS.is_loaded = false; } }
    match loadfn("GetTexGendv") { ptr if !ptr.is_null() => unsafe { storage::GetTexGendv.f = transmute(ptr); storage::GetTexGendv.is_loaded = true; }, _ => unsafe { storage::GetTexGendv.f = transmute(failing::GetTexGendv); storage::GetTexGendv.is_loaded = false; } }
    match loadfn("GetTexGenfv") { ptr if !ptr.is_null() => unsafe { storage::GetTexGenfv.f = transmute(ptr); storage::GetTexGenfv.is_loaded = true; }, _ => unsafe { storage::GetTexGenfv.f = transmute(failing::GetTexGenfv); storage::GetTexGenfv.is_loaded = false; } }
    match loadfn("GetTexGenfvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexGenfvOES.f = transmute(ptr); storage::GetTexGenfvOES.is_loaded = true; }, _ => unsafe { storage::GetTexGenfvOES.f = transmute(failing::GetTexGenfvOES); storage::GetTexGenfvOES.is_loaded = false; } }
    match loadfn("GetTexGeniv") { ptr if !ptr.is_null() => unsafe { storage::GetTexGeniv.f = transmute(ptr); storage::GetTexGeniv.is_loaded = true; }, _ => unsafe { storage::GetTexGeniv.f = transmute(failing::GetTexGeniv); storage::GetTexGeniv.is_loaded = false; } }
    match loadfn("GetTexGenivOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexGenivOES.f = transmute(ptr); storage::GetTexGenivOES.is_loaded = true; }, _ => unsafe { storage::GetTexGenivOES.f = transmute(failing::GetTexGenivOES); storage::GetTexGenivOES.is_loaded = false; } }
    match loadfn("GetTexGenxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexGenxvOES.f = transmute(ptr); storage::GetTexGenxvOES.is_loaded = true; }, _ => unsafe { storage::GetTexGenxvOES.f = transmute(failing::GetTexGenxvOES); storage::GetTexGenxvOES.is_loaded = false; } }
    match loadfn("GetTexImage") { ptr if !ptr.is_null() => unsafe { storage::GetTexImage.f = transmute(ptr); storage::GetTexImage.is_loaded = true; }, _ => unsafe { storage::GetTexImage.f = transmute(failing::GetTexImage); storage::GetTexImage.is_loaded = false; } }
    match loadfn("GetTexLevelParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetTexLevelParameterfv.f = transmute(ptr); storage::GetTexLevelParameterfv.is_loaded = true; }, _ => unsafe { storage::GetTexLevelParameterfv.f = transmute(failing::GetTexLevelParameterfv); storage::GetTexLevelParameterfv.is_loaded = false; } }
    match loadfn("GetTexLevelParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetTexLevelParameteriv.f = transmute(ptr); storage::GetTexLevelParameteriv.is_loaded = true; }, _ => unsafe { storage::GetTexLevelParameteriv.f = transmute(failing::GetTexLevelParameteriv); storage::GetTexLevelParameteriv.is_loaded = false; } }
    match loadfn("GetTexLevelParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexLevelParameterxvOES.f = transmute(ptr); storage::GetTexLevelParameterxvOES.is_loaded = true; }, _ => unsafe { storage::GetTexLevelParameterxvOES.f = transmute(failing::GetTexLevelParameterxvOES); storage::GetTexLevelParameterxvOES.is_loaded = false; } }
    match loadfn("GetTexParameterIiv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterIiv.f = transmute(ptr); storage::GetTexParameterIiv.is_loaded = true; }, _ => unsafe { storage::GetTexParameterIiv.f = transmute(failing::GetTexParameterIiv); storage::GetTexParameterIiv.is_loaded = false; } }
    match loadfn("GetTexParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterIivEXT.f = transmute(ptr); storage::GetTexParameterIivEXT.is_loaded = true; }, _ => unsafe { storage::GetTexParameterIivEXT.f = transmute(failing::GetTexParameterIivEXT); storage::GetTexParameterIivEXT.is_loaded = false; } }
    match loadfn("GetTexParameterIuiv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterIuiv.f = transmute(ptr); storage::GetTexParameterIuiv.is_loaded = true; }, _ => unsafe { storage::GetTexParameterIuiv.f = transmute(failing::GetTexParameterIuiv); storage::GetTexParameterIuiv.is_loaded = false; } }
    match loadfn("GetTexParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterIuivEXT.f = transmute(ptr); storage::GetTexParameterIuivEXT.is_loaded = true; }, _ => unsafe { storage::GetTexParameterIuivEXT.f = transmute(failing::GetTexParameterIuivEXT); storage::GetTexParameterIuivEXT.is_loaded = false; } }
    match loadfn("GetTexParameterPointervAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterPointervAPPLE.f = transmute(ptr); storage::GetTexParameterPointervAPPLE.is_loaded = true; }, _ => unsafe { storage::GetTexParameterPointervAPPLE.f = transmute(failing::GetTexParameterPointervAPPLE); storage::GetTexParameterPointervAPPLE.is_loaded = false; } }
    match loadfn("GetTexParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterfv.f = transmute(ptr); storage::GetTexParameterfv.is_loaded = true; }, _ => unsafe { storage::GetTexParameterfv.f = transmute(failing::GetTexParameterfv); storage::GetTexParameterfv.is_loaded = false; } }
    match loadfn("GetTexParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameteriv.f = transmute(ptr); storage::GetTexParameteriv.is_loaded = true; }, _ => unsafe { storage::GetTexParameteriv.f = transmute(failing::GetTexParameteriv); storage::GetTexParameteriv.is_loaded = false; } }
    match loadfn("GetTexParameterxv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterxv.f = transmute(ptr); storage::GetTexParameterxv.is_loaded = true; }, _ => unsafe { storage::GetTexParameterxv.f = transmute(failing::GetTexParameterxv); storage::GetTexParameterxv.is_loaded = false; } }
    match loadfn("GetTexParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterxvOES.f = transmute(ptr); storage::GetTexParameterxvOES.is_loaded = true; }, _ => unsafe { storage::GetTexParameterxvOES.f = transmute(failing::GetTexParameterxvOES); storage::GetTexParameterxvOES.is_loaded = false; } }
    match loadfn("GetTextureHandleARB") { ptr if !ptr.is_null() => unsafe { storage::GetTextureHandleARB.f = transmute(ptr); storage::GetTextureHandleARB.is_loaded = true; }, _ => unsafe { storage::GetTextureHandleARB.f = transmute(failing::GetTextureHandleARB); storage::GetTextureHandleARB.is_loaded = false; } }
    match loadfn("GetTextureHandleNV") { ptr if !ptr.is_null() => unsafe { storage::GetTextureHandleNV.f = transmute(ptr); storage::GetTextureHandleNV.is_loaded = true; }, _ => unsafe { storage::GetTextureHandleNV.f = transmute(failing::GetTextureHandleNV); storage::GetTextureHandleNV.is_loaded = false; } }
    match loadfn("GetTextureImageEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureImageEXT.f = transmute(ptr); storage::GetTextureImageEXT.is_loaded = true; }, _ => unsafe { storage::GetTextureImageEXT.f = transmute(failing::GetTextureImageEXT); storage::GetTextureImageEXT.is_loaded = false; } }
    match loadfn("GetTextureLevelParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureLevelParameterfvEXT.f = transmute(ptr); storage::GetTextureLevelParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetTextureLevelParameterfvEXT.f = transmute(failing::GetTextureLevelParameterfvEXT); storage::GetTextureLevelParameterfvEXT.is_loaded = false; } }
    match loadfn("GetTextureLevelParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureLevelParameterivEXT.f = transmute(ptr); storage::GetTextureLevelParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetTextureLevelParameterivEXT.f = transmute(failing::GetTextureLevelParameterivEXT); storage::GetTextureLevelParameterivEXT.is_loaded = false; } }
    match loadfn("GetTextureParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureParameterIivEXT.f = transmute(ptr); storage::GetTextureParameterIivEXT.is_loaded = true; }, _ => unsafe { storage::GetTextureParameterIivEXT.f = transmute(failing::GetTextureParameterIivEXT); storage::GetTextureParameterIivEXT.is_loaded = false; } }
    match loadfn("GetTextureParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureParameterIuivEXT.f = transmute(ptr); storage::GetTextureParameterIuivEXT.is_loaded = true; }, _ => unsafe { storage::GetTextureParameterIuivEXT.f = transmute(failing::GetTextureParameterIuivEXT); storage::GetTextureParameterIuivEXT.is_loaded = false; } }
    match loadfn("GetTextureParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureParameterfvEXT.f = transmute(ptr); storage::GetTextureParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::GetTextureParameterfvEXT.f = transmute(failing::GetTextureParameterfvEXT); storage::GetTextureParameterfvEXT.is_loaded = false; } }
    match loadfn("GetTextureParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureParameterivEXT.f = transmute(ptr); storage::GetTextureParameterivEXT.is_loaded = true; }, _ => unsafe { storage::GetTextureParameterivEXT.f = transmute(failing::GetTextureParameterivEXT); storage::GetTextureParameterivEXT.is_loaded = false; } }
    match loadfn("GetTextureSamplerHandleARB") { ptr if !ptr.is_null() => unsafe { storage::GetTextureSamplerHandleARB.f = transmute(ptr); storage::GetTextureSamplerHandleARB.is_loaded = true; }, _ => unsafe { storage::GetTextureSamplerHandleARB.f = transmute(failing::GetTextureSamplerHandleARB); storage::GetTextureSamplerHandleARB.is_loaded = false; } }
    match loadfn("GetTextureSamplerHandleNV") { ptr if !ptr.is_null() => unsafe { storage::GetTextureSamplerHandleNV.f = transmute(ptr); storage::GetTextureSamplerHandleNV.is_loaded = true; }, _ => unsafe { storage::GetTextureSamplerHandleNV.f = transmute(failing::GetTextureSamplerHandleNV); storage::GetTextureSamplerHandleNV.is_loaded = false; } }
    match loadfn("GetTrackMatrixivNV") { ptr if !ptr.is_null() => unsafe { storage::GetTrackMatrixivNV.f = transmute(ptr); storage::GetTrackMatrixivNV.is_loaded = true; }, _ => unsafe { storage::GetTrackMatrixivNV.f = transmute(failing::GetTrackMatrixivNV); storage::GetTrackMatrixivNV.is_loaded = false; } }
    match loadfn("GetTransformFeedbackVarying") { ptr if !ptr.is_null() => unsafe { storage::GetTransformFeedbackVarying.f = transmute(ptr); storage::GetTransformFeedbackVarying.is_loaded = true; }, _ => unsafe { storage::GetTransformFeedbackVarying.f = transmute(failing::GetTransformFeedbackVarying); storage::GetTransformFeedbackVarying.is_loaded = false; } }
    match loadfn("GetTransformFeedbackVaryingEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTransformFeedbackVaryingEXT.f = transmute(ptr); storage::GetTransformFeedbackVaryingEXT.is_loaded = true; }, _ => unsafe { storage::GetTransformFeedbackVaryingEXT.f = transmute(failing::GetTransformFeedbackVaryingEXT); storage::GetTransformFeedbackVaryingEXT.is_loaded = false; } }
    match loadfn("GetTransformFeedbackVaryingNV") { ptr if !ptr.is_null() => unsafe { storage::GetTransformFeedbackVaryingNV.f = transmute(ptr); storage::GetTransformFeedbackVaryingNV.is_loaded = true; }, _ => unsafe { storage::GetTransformFeedbackVaryingNV.f = transmute(failing::GetTransformFeedbackVaryingNV); storage::GetTransformFeedbackVaryingNV.is_loaded = false; } }
    match loadfn("GetTranslatedShaderSourceANGLE") { ptr if !ptr.is_null() => unsafe { storage::GetTranslatedShaderSourceANGLE.f = transmute(ptr); storage::GetTranslatedShaderSourceANGLE.is_loaded = true; }, _ => unsafe { storage::GetTranslatedShaderSourceANGLE.f = transmute(failing::GetTranslatedShaderSourceANGLE); storage::GetTranslatedShaderSourceANGLE.is_loaded = false; } }
    match loadfn("GetUniformBlockIndex") { ptr if !ptr.is_null() => unsafe { storage::GetUniformBlockIndex.f = transmute(ptr); storage::GetUniformBlockIndex.is_loaded = true; }, _ => unsafe { storage::GetUniformBlockIndex.f = transmute(failing::GetUniformBlockIndex); storage::GetUniformBlockIndex.is_loaded = false; } }
    match loadfn("GetUniformBufferSizeEXT") { ptr if !ptr.is_null() => unsafe { storage::GetUniformBufferSizeEXT.f = transmute(ptr); storage::GetUniformBufferSizeEXT.is_loaded = true; }, _ => unsafe { storage::GetUniformBufferSizeEXT.f = transmute(failing::GetUniformBufferSizeEXT); storage::GetUniformBufferSizeEXT.is_loaded = false; } }
    match loadfn("GetUniformIndices") { ptr if !ptr.is_null() => unsafe { storage::GetUniformIndices.f = transmute(ptr); storage::GetUniformIndices.is_loaded = true; }, _ => unsafe { storage::GetUniformIndices.f = transmute(failing::GetUniformIndices); storage::GetUniformIndices.is_loaded = false; } }
    match loadfn("GetUniformLocation") { ptr if !ptr.is_null() => unsafe { storage::GetUniformLocation.f = transmute(ptr); storage::GetUniformLocation.is_loaded = true; }, _ => unsafe { storage::GetUniformLocation.f = transmute(failing::GetUniformLocation); storage::GetUniformLocation.is_loaded = false; } }
    match loadfn("GetUniformLocationARB") { ptr if !ptr.is_null() => unsafe { storage::GetUniformLocationARB.f = transmute(ptr); storage::GetUniformLocationARB.is_loaded = true; }, _ => unsafe { storage::GetUniformLocationARB.f = transmute(failing::GetUniformLocationARB); storage::GetUniformLocationARB.is_loaded = false; } }
    match loadfn("GetUniformOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::GetUniformOffsetEXT.f = transmute(ptr); storage::GetUniformOffsetEXT.is_loaded = true; }, _ => unsafe { storage::GetUniformOffsetEXT.f = transmute(failing::GetUniformOffsetEXT); storage::GetUniformOffsetEXT.is_loaded = false; } }
    match loadfn("GetUniformSubroutineuiv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformSubroutineuiv.f = transmute(ptr); storage::GetUniformSubroutineuiv.is_loaded = true; }, _ => unsafe { storage::GetUniformSubroutineuiv.f = transmute(failing::GetUniformSubroutineuiv); storage::GetUniformSubroutineuiv.is_loaded = false; } }
    match loadfn("GetUniformdv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformdv.f = transmute(ptr); storage::GetUniformdv.is_loaded = true; }, _ => unsafe { storage::GetUniformdv.f = transmute(failing::GetUniformdv); storage::GetUniformdv.is_loaded = false; } }
    match loadfn("GetUniformfv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformfv.f = transmute(ptr); storage::GetUniformfv.is_loaded = true; }, _ => unsafe { storage::GetUniformfv.f = transmute(failing::GetUniformfv); storage::GetUniformfv.is_loaded = false; } }
    match loadfn("GetUniformfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetUniformfvARB.f = transmute(ptr); storage::GetUniformfvARB.is_loaded = true; }, _ => unsafe { storage::GetUniformfvARB.f = transmute(failing::GetUniformfvARB); storage::GetUniformfvARB.is_loaded = false; } }
    match loadfn("GetUniformi64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetUniformi64vNV.f = transmute(ptr); storage::GetUniformi64vNV.is_loaded = true; }, _ => unsafe { storage::GetUniformi64vNV.f = transmute(failing::GetUniformi64vNV); storage::GetUniformi64vNV.is_loaded = false; } }
    match loadfn("GetUniformiv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformiv.f = transmute(ptr); storage::GetUniformiv.is_loaded = true; }, _ => unsafe { storage::GetUniformiv.f = transmute(failing::GetUniformiv); storage::GetUniformiv.is_loaded = false; } }
    match loadfn("GetUniformivARB") { ptr if !ptr.is_null() => unsafe { storage::GetUniformivARB.f = transmute(ptr); storage::GetUniformivARB.is_loaded = true; }, _ => unsafe { storage::GetUniformivARB.f = transmute(failing::GetUniformivARB); storage::GetUniformivARB.is_loaded = false; } }
    match loadfn("GetUniformui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetUniformui64vNV.f = transmute(ptr); storage::GetUniformui64vNV.is_loaded = true; }, _ => unsafe { storage::GetUniformui64vNV.f = transmute(failing::GetUniformui64vNV); storage::GetUniformui64vNV.is_loaded = false; } }
    match loadfn("GetUniformuiv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformuiv.f = transmute(ptr); storage::GetUniformuiv.is_loaded = true; }, _ => unsafe { storage::GetUniformuiv.f = transmute(failing::GetUniformuiv); storage::GetUniformuiv.is_loaded = false; } }
    match loadfn("GetUniformuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetUniformuivEXT.f = transmute(ptr); storage::GetUniformuivEXT.is_loaded = true; }, _ => unsafe { storage::GetUniformuivEXT.f = transmute(failing::GetUniformuivEXT); storage::GetUniformuivEXT.is_loaded = false; } }
    match loadfn("GetVariantArrayObjectfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetVariantArrayObjectfvATI.f = transmute(ptr); storage::GetVariantArrayObjectfvATI.is_loaded = true; }, _ => unsafe { storage::GetVariantArrayObjectfvATI.f = transmute(failing::GetVariantArrayObjectfvATI); storage::GetVariantArrayObjectfvATI.is_loaded = false; } }
    match loadfn("GetVariantArrayObjectivATI") { ptr if !ptr.is_null() => unsafe { storage::GetVariantArrayObjectivATI.f = transmute(ptr); storage::GetVariantArrayObjectivATI.is_loaded = true; }, _ => unsafe { storage::GetVariantArrayObjectivATI.f = transmute(failing::GetVariantArrayObjectivATI); storage::GetVariantArrayObjectivATI.is_loaded = false; } }
    match loadfn("GetVariantBooleanvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVariantBooleanvEXT.f = transmute(ptr); storage::GetVariantBooleanvEXT.is_loaded = true; }, _ => unsafe { storage::GetVariantBooleanvEXT.f = transmute(failing::GetVariantBooleanvEXT); storage::GetVariantBooleanvEXT.is_loaded = false; } }
    match loadfn("GetVariantFloatvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVariantFloatvEXT.f = transmute(ptr); storage::GetVariantFloatvEXT.is_loaded = true; }, _ => unsafe { storage::GetVariantFloatvEXT.f = transmute(failing::GetVariantFloatvEXT); storage::GetVariantFloatvEXT.is_loaded = false; } }
    match loadfn("GetVariantIntegervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVariantIntegervEXT.f = transmute(ptr); storage::GetVariantIntegervEXT.is_loaded = true; }, _ => unsafe { storage::GetVariantIntegervEXT.f = transmute(failing::GetVariantIntegervEXT); storage::GetVariantIntegervEXT.is_loaded = false; } }
    match loadfn("GetVariantPointervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVariantPointervEXT.f = transmute(ptr); storage::GetVariantPointervEXT.is_loaded = true; }, _ => unsafe { storage::GetVariantPointervEXT.f = transmute(failing::GetVariantPointervEXT); storage::GetVariantPointervEXT.is_loaded = false; } }
    match loadfn("GetVaryingLocationNV") { ptr if !ptr.is_null() => unsafe { storage::GetVaryingLocationNV.f = transmute(ptr); storage::GetVaryingLocationNV.is_loaded = true; }, _ => unsafe { storage::GetVaryingLocationNV.f = transmute(failing::GetVaryingLocationNV); storage::GetVaryingLocationNV.is_loaded = false; } }
    match loadfn("GetVertexArrayIntegeri_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexArrayIntegeri_vEXT.f = transmute(ptr); storage::GetVertexArrayIntegeri_vEXT.is_loaded = true; }, _ => unsafe { storage::GetVertexArrayIntegeri_vEXT.f = transmute(failing::GetVertexArrayIntegeri_vEXT); storage::GetVertexArrayIntegeri_vEXT.is_loaded = false; } }
    match loadfn("GetVertexArrayIntegervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexArrayIntegervEXT.f = transmute(ptr); storage::GetVertexArrayIntegervEXT.is_loaded = true; }, _ => unsafe { storage::GetVertexArrayIntegervEXT.f = transmute(failing::GetVertexArrayIntegervEXT); storage::GetVertexArrayIntegervEXT.is_loaded = false; } }
    match loadfn("GetVertexArrayPointeri_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexArrayPointeri_vEXT.f = transmute(ptr); storage::GetVertexArrayPointeri_vEXT.is_loaded = true; }, _ => unsafe { storage::GetVertexArrayPointeri_vEXT.f = transmute(failing::GetVertexArrayPointeri_vEXT); storage::GetVertexArrayPointeri_vEXT.is_loaded = false; } }
    match loadfn("GetVertexArrayPointervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexArrayPointervEXT.f = transmute(ptr); storage::GetVertexArrayPointervEXT.is_loaded = true; }, _ => unsafe { storage::GetVertexArrayPointervEXT.f = transmute(failing::GetVertexArrayPointervEXT); storage::GetVertexArrayPointervEXT.is_loaded = false; } }
    match loadfn("GetVertexAttribArrayObjectfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribArrayObjectfvATI.f = transmute(ptr); storage::GetVertexAttribArrayObjectfvATI.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribArrayObjectfvATI.f = transmute(failing::GetVertexAttribArrayObjectfvATI); storage::GetVertexAttribArrayObjectfvATI.is_loaded = false; } }
    match loadfn("GetVertexAttribArrayObjectivATI") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribArrayObjectivATI.f = transmute(ptr); storage::GetVertexAttribArrayObjectivATI.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribArrayObjectivATI.f = transmute(failing::GetVertexAttribArrayObjectivATI); storage::GetVertexAttribArrayObjectivATI.is_loaded = false; } }
    match loadfn("GetVertexAttribIiv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribIiv.f = transmute(ptr); storage::GetVertexAttribIiv.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribIiv.f = transmute(failing::GetVertexAttribIiv); storage::GetVertexAttribIiv.is_loaded = false; } }
    match loadfn("GetVertexAttribIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribIivEXT.f = transmute(ptr); storage::GetVertexAttribIivEXT.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribIivEXT.f = transmute(failing::GetVertexAttribIivEXT); storage::GetVertexAttribIivEXT.is_loaded = false; } }
    match loadfn("GetVertexAttribIuiv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribIuiv.f = transmute(ptr); storage::GetVertexAttribIuiv.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribIuiv.f = transmute(failing::GetVertexAttribIuiv); storage::GetVertexAttribIuiv.is_loaded = false; } }
    match loadfn("GetVertexAttribIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribIuivEXT.f = transmute(ptr); storage::GetVertexAttribIuivEXT.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribIuivEXT.f = transmute(failing::GetVertexAttribIuivEXT); storage::GetVertexAttribIuivEXT.is_loaded = false; } }
    match loadfn("GetVertexAttribLdv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLdv.f = transmute(ptr); storage::GetVertexAttribLdv.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribLdv.f = transmute(failing::GetVertexAttribLdv); storage::GetVertexAttribLdv.is_loaded = false; } }
    match loadfn("GetVertexAttribLdvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLdvEXT.f = transmute(ptr); storage::GetVertexAttribLdvEXT.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribLdvEXT.f = transmute(failing::GetVertexAttribLdvEXT); storage::GetVertexAttribLdvEXT.is_loaded = false; } }
    match loadfn("GetVertexAttribLi64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLi64vNV.f = transmute(ptr); storage::GetVertexAttribLi64vNV.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribLi64vNV.f = transmute(failing::GetVertexAttribLi64vNV); storage::GetVertexAttribLi64vNV.is_loaded = false; } }
    match loadfn("GetVertexAttribLui64vARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLui64vARB.f = transmute(ptr); storage::GetVertexAttribLui64vARB.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribLui64vARB.f = transmute(failing::GetVertexAttribLui64vARB); storage::GetVertexAttribLui64vARB.is_loaded = false; } }
    match loadfn("GetVertexAttribLui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLui64vNV.f = transmute(ptr); storage::GetVertexAttribLui64vNV.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribLui64vNV.f = transmute(failing::GetVertexAttribLui64vNV); storage::GetVertexAttribLui64vNV.is_loaded = false; } }
    match loadfn("GetVertexAttribPointerv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribPointerv.f = transmute(ptr); storage::GetVertexAttribPointerv.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribPointerv.f = transmute(failing::GetVertexAttribPointerv); storage::GetVertexAttribPointerv.is_loaded = false; } }
    match loadfn("GetVertexAttribPointervARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribPointervARB.f = transmute(ptr); storage::GetVertexAttribPointervARB.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribPointervARB.f = transmute(failing::GetVertexAttribPointervARB); storage::GetVertexAttribPointervARB.is_loaded = false; } }
    match loadfn("GetVertexAttribPointervNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribPointervNV.f = transmute(ptr); storage::GetVertexAttribPointervNV.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribPointervNV.f = transmute(failing::GetVertexAttribPointervNV); storage::GetVertexAttribPointervNV.is_loaded = false; } }
    match loadfn("GetVertexAttribdv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribdv.f = transmute(ptr); storage::GetVertexAttribdv.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribdv.f = transmute(failing::GetVertexAttribdv); storage::GetVertexAttribdv.is_loaded = false; } }
    match loadfn("GetVertexAttribdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribdvARB.f = transmute(ptr); storage::GetVertexAttribdvARB.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribdvARB.f = transmute(failing::GetVertexAttribdvARB); storage::GetVertexAttribdvARB.is_loaded = false; } }
    match loadfn("GetVertexAttribdvNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribdvNV.f = transmute(ptr); storage::GetVertexAttribdvNV.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribdvNV.f = transmute(failing::GetVertexAttribdvNV); storage::GetVertexAttribdvNV.is_loaded = false; } }
    match loadfn("GetVertexAttribfv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribfv.f = transmute(ptr); storage::GetVertexAttribfv.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribfv.f = transmute(failing::GetVertexAttribfv); storage::GetVertexAttribfv.is_loaded = false; } }
    match loadfn("GetVertexAttribfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribfvARB.f = transmute(ptr); storage::GetVertexAttribfvARB.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribfvARB.f = transmute(failing::GetVertexAttribfvARB); storage::GetVertexAttribfvARB.is_loaded = false; } }
    match loadfn("GetVertexAttribfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribfvNV.f = transmute(ptr); storage::GetVertexAttribfvNV.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribfvNV.f = transmute(failing::GetVertexAttribfvNV); storage::GetVertexAttribfvNV.is_loaded = false; } }
    match loadfn("GetVertexAttribiv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribiv.f = transmute(ptr); storage::GetVertexAttribiv.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribiv.f = transmute(failing::GetVertexAttribiv); storage::GetVertexAttribiv.is_loaded = false; } }
    match loadfn("GetVertexAttribivARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribivARB.f = transmute(ptr); storage::GetVertexAttribivARB.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribivARB.f = transmute(failing::GetVertexAttribivARB); storage::GetVertexAttribivARB.is_loaded = false; } }
    match loadfn("GetVertexAttribivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribivNV.f = transmute(ptr); storage::GetVertexAttribivNV.is_loaded = true; }, _ => unsafe { storage::GetVertexAttribivNV.f = transmute(failing::GetVertexAttribivNV); storage::GetVertexAttribivNV.is_loaded = false; } }
    match loadfn("GetVideoCaptureStreamdvNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoCaptureStreamdvNV.f = transmute(ptr); storage::GetVideoCaptureStreamdvNV.is_loaded = true; }, _ => unsafe { storage::GetVideoCaptureStreamdvNV.f = transmute(failing::GetVideoCaptureStreamdvNV); storage::GetVideoCaptureStreamdvNV.is_loaded = false; } }
    match loadfn("GetVideoCaptureStreamfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoCaptureStreamfvNV.f = transmute(ptr); storage::GetVideoCaptureStreamfvNV.is_loaded = true; }, _ => unsafe { storage::GetVideoCaptureStreamfvNV.f = transmute(failing::GetVideoCaptureStreamfvNV); storage::GetVideoCaptureStreamfvNV.is_loaded = false; } }
    match loadfn("GetVideoCaptureStreamivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoCaptureStreamivNV.f = transmute(ptr); storage::GetVideoCaptureStreamivNV.is_loaded = true; }, _ => unsafe { storage::GetVideoCaptureStreamivNV.f = transmute(failing::GetVideoCaptureStreamivNV); storage::GetVideoCaptureStreamivNV.is_loaded = false; } }
    match loadfn("GetVideoCaptureivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoCaptureivNV.f = transmute(ptr); storage::GetVideoCaptureivNV.is_loaded = true; }, _ => unsafe { storage::GetVideoCaptureivNV.f = transmute(failing::GetVideoCaptureivNV); storage::GetVideoCaptureivNV.is_loaded = false; } }
    match loadfn("GetVideoi64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoi64vNV.f = transmute(ptr); storage::GetVideoi64vNV.is_loaded = true; }, _ => unsafe { storage::GetVideoi64vNV.f = transmute(failing::GetVideoi64vNV); storage::GetVideoi64vNV.is_loaded = false; } }
    match loadfn("GetVideoivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoivNV.f = transmute(ptr); storage::GetVideoivNV.is_loaded = true; }, _ => unsafe { storage::GetVideoivNV.f = transmute(failing::GetVideoivNV); storage::GetVideoivNV.is_loaded = false; } }
    match loadfn("GetVideoui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoui64vNV.f = transmute(ptr); storage::GetVideoui64vNV.is_loaded = true; }, _ => unsafe { storage::GetVideoui64vNV.f = transmute(failing::GetVideoui64vNV); storage::GetVideoui64vNV.is_loaded = false; } }
    match loadfn("GetVideouivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideouivNV.f = transmute(ptr); storage::GetVideouivNV.is_loaded = true; }, _ => unsafe { storage::GetVideouivNV.f = transmute(failing::GetVideouivNV); storage::GetVideouivNV.is_loaded = false; } }
    match loadfn("GetnColorTableARB") { ptr if !ptr.is_null() => unsafe { storage::GetnColorTableARB.f = transmute(ptr); storage::GetnColorTableARB.is_loaded = true; }, _ => unsafe { storage::GetnColorTableARB.f = transmute(failing::GetnColorTableARB); storage::GetnColorTableARB.is_loaded = false; } }
    match loadfn("GetnCompressedTexImageARB") { ptr if !ptr.is_null() => unsafe { storage::GetnCompressedTexImageARB.f = transmute(ptr); storage::GetnCompressedTexImageARB.is_loaded = true; }, _ => unsafe { storage::GetnCompressedTexImageARB.f = transmute(failing::GetnCompressedTexImageARB); storage::GetnCompressedTexImageARB.is_loaded = false; } }
    match loadfn("GetnConvolutionFilterARB") { ptr if !ptr.is_null() => unsafe { storage::GetnConvolutionFilterARB.f = transmute(ptr); storage::GetnConvolutionFilterARB.is_loaded = true; }, _ => unsafe { storage::GetnConvolutionFilterARB.f = transmute(failing::GetnConvolutionFilterARB); storage::GetnConvolutionFilterARB.is_loaded = false; } }
    match loadfn("GetnHistogramARB") { ptr if !ptr.is_null() => unsafe { storage::GetnHistogramARB.f = transmute(ptr); storage::GetnHistogramARB.is_loaded = true; }, _ => unsafe { storage::GetnHistogramARB.f = transmute(failing::GetnHistogramARB); storage::GetnHistogramARB.is_loaded = false; } }
    match loadfn("GetnMapdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnMapdvARB.f = transmute(ptr); storage::GetnMapdvARB.is_loaded = true; }, _ => unsafe { storage::GetnMapdvARB.f = transmute(failing::GetnMapdvARB); storage::GetnMapdvARB.is_loaded = false; } }
    match loadfn("GetnMapfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnMapfvARB.f = transmute(ptr); storage::GetnMapfvARB.is_loaded = true; }, _ => unsafe { storage::GetnMapfvARB.f = transmute(failing::GetnMapfvARB); storage::GetnMapfvARB.is_loaded = false; } }
    match loadfn("GetnMapivARB") { ptr if !ptr.is_null() => unsafe { storage::GetnMapivARB.f = transmute(ptr); storage::GetnMapivARB.is_loaded = true; }, _ => unsafe { storage::GetnMapivARB.f = transmute(failing::GetnMapivARB); storage::GetnMapivARB.is_loaded = false; } }
    match loadfn("GetnMinmaxARB") { ptr if !ptr.is_null() => unsafe { storage::GetnMinmaxARB.f = transmute(ptr); storage::GetnMinmaxARB.is_loaded = true; }, _ => unsafe { storage::GetnMinmaxARB.f = transmute(failing::GetnMinmaxARB); storage::GetnMinmaxARB.is_loaded = false; } }
    match loadfn("GetnPixelMapfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnPixelMapfvARB.f = transmute(ptr); storage::GetnPixelMapfvARB.is_loaded = true; }, _ => unsafe { storage::GetnPixelMapfvARB.f = transmute(failing::GetnPixelMapfvARB); storage::GetnPixelMapfvARB.is_loaded = false; } }
    match loadfn("GetnPixelMapuivARB") { ptr if !ptr.is_null() => unsafe { storage::GetnPixelMapuivARB.f = transmute(ptr); storage::GetnPixelMapuivARB.is_loaded = true; }, _ => unsafe { storage::GetnPixelMapuivARB.f = transmute(failing::GetnPixelMapuivARB); storage::GetnPixelMapuivARB.is_loaded = false; } }
    match loadfn("GetnPixelMapusvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnPixelMapusvARB.f = transmute(ptr); storage::GetnPixelMapusvARB.is_loaded = true; }, _ => unsafe { storage::GetnPixelMapusvARB.f = transmute(failing::GetnPixelMapusvARB); storage::GetnPixelMapusvARB.is_loaded = false; } }
    match loadfn("GetnPolygonStippleARB") { ptr if !ptr.is_null() => unsafe { storage::GetnPolygonStippleARB.f = transmute(ptr); storage::GetnPolygonStippleARB.is_loaded = true; }, _ => unsafe { storage::GetnPolygonStippleARB.f = transmute(failing::GetnPolygonStippleARB); storage::GetnPolygonStippleARB.is_loaded = false; } }
    match loadfn("GetnSeparableFilterARB") { ptr if !ptr.is_null() => unsafe { storage::GetnSeparableFilterARB.f = transmute(ptr); storage::GetnSeparableFilterARB.is_loaded = true; }, _ => unsafe { storage::GetnSeparableFilterARB.f = transmute(failing::GetnSeparableFilterARB); storage::GetnSeparableFilterARB.is_loaded = false; } }
    match loadfn("GetnTexImageARB") { ptr if !ptr.is_null() => unsafe { storage::GetnTexImageARB.f = transmute(ptr); storage::GetnTexImageARB.is_loaded = true; }, _ => unsafe { storage::GetnTexImageARB.f = transmute(failing::GetnTexImageARB); storage::GetnTexImageARB.is_loaded = false; } }
    match loadfn("GetnUniformdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformdvARB.f = transmute(ptr); storage::GetnUniformdvARB.is_loaded = true; }, _ => unsafe { storage::GetnUniformdvARB.f = transmute(failing::GetnUniformdvARB); storage::GetnUniformdvARB.is_loaded = false; } }
    match loadfn("GetnUniformfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformfvARB.f = transmute(ptr); storage::GetnUniformfvARB.is_loaded = true; }, _ => unsafe { storage::GetnUniformfvARB.f = transmute(failing::GetnUniformfvARB); storage::GetnUniformfvARB.is_loaded = false; } }
    match loadfn("GetnUniformfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformfvEXT.f = transmute(ptr); storage::GetnUniformfvEXT.is_loaded = true; }, _ => unsafe { storage::GetnUniformfvEXT.f = transmute(failing::GetnUniformfvEXT); storage::GetnUniformfvEXT.is_loaded = false; } }
    match loadfn("GetnUniformivARB") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformivARB.f = transmute(ptr); storage::GetnUniformivARB.is_loaded = true; }, _ => unsafe { storage::GetnUniformivARB.f = transmute(failing::GetnUniformivARB); storage::GetnUniformivARB.is_loaded = false; } }
    match loadfn("GetnUniformivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformivEXT.f = transmute(ptr); storage::GetnUniformivEXT.is_loaded = true; }, _ => unsafe { storage::GetnUniformivEXT.f = transmute(failing::GetnUniformivEXT); storage::GetnUniformivEXT.is_loaded = false; } }
    match loadfn("GetnUniformuivARB") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformuivARB.f = transmute(ptr); storage::GetnUniformuivARB.is_loaded = true; }, _ => unsafe { storage::GetnUniformuivARB.f = transmute(failing::GetnUniformuivARB); storage::GetnUniformuivARB.is_loaded = false; } }
    match loadfn("GlobalAlphaFactorbSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorbSUN.f = transmute(ptr); storage::GlobalAlphaFactorbSUN.is_loaded = true; }, _ => unsafe { storage::GlobalAlphaFactorbSUN.f = transmute(failing::GlobalAlphaFactorbSUN); storage::GlobalAlphaFactorbSUN.is_loaded = false; } }
    match loadfn("GlobalAlphaFactordSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactordSUN.f = transmute(ptr); storage::GlobalAlphaFactordSUN.is_loaded = true; }, _ => unsafe { storage::GlobalAlphaFactordSUN.f = transmute(failing::GlobalAlphaFactordSUN); storage::GlobalAlphaFactordSUN.is_loaded = false; } }
    match loadfn("GlobalAlphaFactorfSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorfSUN.f = transmute(ptr); storage::GlobalAlphaFactorfSUN.is_loaded = true; }, _ => unsafe { storage::GlobalAlphaFactorfSUN.f = transmute(failing::GlobalAlphaFactorfSUN); storage::GlobalAlphaFactorfSUN.is_loaded = false; } }
    match loadfn("GlobalAlphaFactoriSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactoriSUN.f = transmute(ptr); storage::GlobalAlphaFactoriSUN.is_loaded = true; }, _ => unsafe { storage::GlobalAlphaFactoriSUN.f = transmute(failing::GlobalAlphaFactoriSUN); storage::GlobalAlphaFactoriSUN.is_loaded = false; } }
    match loadfn("GlobalAlphaFactorsSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorsSUN.f = transmute(ptr); storage::GlobalAlphaFactorsSUN.is_loaded = true; }, _ => unsafe { storage::GlobalAlphaFactorsSUN.f = transmute(failing::GlobalAlphaFactorsSUN); storage::GlobalAlphaFactorsSUN.is_loaded = false; } }
    match loadfn("GlobalAlphaFactorubSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorubSUN.f = transmute(ptr); storage::GlobalAlphaFactorubSUN.is_loaded = true; }, _ => unsafe { storage::GlobalAlphaFactorubSUN.f = transmute(failing::GlobalAlphaFactorubSUN); storage::GlobalAlphaFactorubSUN.is_loaded = false; } }
    match loadfn("GlobalAlphaFactoruiSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactoruiSUN.f = transmute(ptr); storage::GlobalAlphaFactoruiSUN.is_loaded = true; }, _ => unsafe { storage::GlobalAlphaFactoruiSUN.f = transmute(failing::GlobalAlphaFactoruiSUN); storage::GlobalAlphaFactoruiSUN.is_loaded = false; } }
    match loadfn("GlobalAlphaFactorusSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorusSUN.f = transmute(ptr); storage::GlobalAlphaFactorusSUN.is_loaded = true; }, _ => unsafe { storage::GlobalAlphaFactorusSUN.f = transmute(failing::GlobalAlphaFactorusSUN); storage::GlobalAlphaFactorusSUN.is_loaded = false; } }
    match loadfn("Hint") { ptr if !ptr.is_null() => unsafe { storage::Hint.f = transmute(ptr); storage::Hint.is_loaded = true; }, _ => unsafe { storage::Hint.f = transmute(failing::Hint); storage::Hint.is_loaded = false; } }
    match loadfn("HintPGI") { ptr if !ptr.is_null() => unsafe { storage::HintPGI.f = transmute(ptr); storage::HintPGI.is_loaded = true; }, _ => unsafe { storage::HintPGI.f = transmute(failing::HintPGI); storage::HintPGI.is_loaded = false; } }
    match loadfn("Histogram") { ptr if !ptr.is_null() => unsafe { storage::Histogram.f = transmute(ptr); storage::Histogram.is_loaded = true; }, _ => unsafe { storage::Histogram.f = transmute(failing::Histogram); storage::Histogram.is_loaded = false; } }
    match loadfn("HistogramEXT") { ptr if !ptr.is_null() => unsafe { storage::HistogramEXT.f = transmute(ptr); storage::HistogramEXT.is_loaded = true; }, _ => unsafe { storage::HistogramEXT.f = transmute(failing::HistogramEXT); storage::HistogramEXT.is_loaded = false; } }
    match loadfn("IglooInterfaceSGIX") { ptr if !ptr.is_null() => unsafe { storage::IglooInterfaceSGIX.f = transmute(ptr); storage::IglooInterfaceSGIX.is_loaded = true; }, _ => unsafe { storage::IglooInterfaceSGIX.f = transmute(failing::IglooInterfaceSGIX); storage::IglooInterfaceSGIX.is_loaded = false; } }
    match loadfn("ImageTransformParameterfHP") { ptr if !ptr.is_null() => unsafe { storage::ImageTransformParameterfHP.f = transmute(ptr); storage::ImageTransformParameterfHP.is_loaded = true; }, _ => unsafe { storage::ImageTransformParameterfHP.f = transmute(failing::ImageTransformParameterfHP); storage::ImageTransformParameterfHP.is_loaded = false; } }
    match loadfn("ImageTransformParameterfvHP") { ptr if !ptr.is_null() => unsafe { storage::ImageTransformParameterfvHP.f = transmute(ptr); storage::ImageTransformParameterfvHP.is_loaded = true; }, _ => unsafe { storage::ImageTransformParameterfvHP.f = transmute(failing::ImageTransformParameterfvHP); storage::ImageTransformParameterfvHP.is_loaded = false; } }
    match loadfn("ImageTransformParameteriHP") { ptr if !ptr.is_null() => unsafe { storage::ImageTransformParameteriHP.f = transmute(ptr); storage::ImageTransformParameteriHP.is_loaded = true; }, _ => unsafe { storage::ImageTransformParameteriHP.f = transmute(failing::ImageTransformParameteriHP); storage::ImageTransformParameteriHP.is_loaded = false; } }
    match loadfn("ImageTransformParameterivHP") { ptr if !ptr.is_null() => unsafe { storage::ImageTransformParameterivHP.f = transmute(ptr); storage::ImageTransformParameterivHP.is_loaded = true; }, _ => unsafe { storage::ImageTransformParameterivHP.f = transmute(failing::ImageTransformParameterivHP); storage::ImageTransformParameterivHP.is_loaded = false; } }
    match loadfn("ImportSyncEXT") { ptr if !ptr.is_null() => unsafe { storage::ImportSyncEXT.f = transmute(ptr); storage::ImportSyncEXT.is_loaded = true; }, _ => unsafe { storage::ImportSyncEXT.f = transmute(failing::ImportSyncEXT); storage::ImportSyncEXT.is_loaded = false; } }
    match loadfn("IndexFormatNV") { ptr if !ptr.is_null() => unsafe { storage::IndexFormatNV.f = transmute(ptr); storage::IndexFormatNV.is_loaded = true; }, _ => unsafe { storage::IndexFormatNV.f = transmute(failing::IndexFormatNV); storage::IndexFormatNV.is_loaded = false; } }
    match loadfn("IndexFuncEXT") { ptr if !ptr.is_null() => unsafe { storage::IndexFuncEXT.f = transmute(ptr); storage::IndexFuncEXT.is_loaded = true; }, _ => unsafe { storage::IndexFuncEXT.f = transmute(failing::IndexFuncEXT); storage::IndexFuncEXT.is_loaded = false; } }
    match loadfn("IndexMask") { ptr if !ptr.is_null() => unsafe { storage::IndexMask.f = transmute(ptr); storage::IndexMask.is_loaded = true; }, _ => unsafe { storage::IndexMask.f = transmute(failing::IndexMask); storage::IndexMask.is_loaded = false; } }
    match loadfn("IndexMaterialEXT") { ptr if !ptr.is_null() => unsafe { storage::IndexMaterialEXT.f = transmute(ptr); storage::IndexMaterialEXT.is_loaded = true; }, _ => unsafe { storage::IndexMaterialEXT.f = transmute(failing::IndexMaterialEXT); storage::IndexMaterialEXT.is_loaded = false; } }
    match loadfn("IndexPointer") { ptr if !ptr.is_null() => unsafe { storage::IndexPointer.f = transmute(ptr); storage::IndexPointer.is_loaded = true; }, _ => unsafe { storage::IndexPointer.f = transmute(failing::IndexPointer); storage::IndexPointer.is_loaded = false; } }
    match loadfn("IndexPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::IndexPointerEXT.f = transmute(ptr); storage::IndexPointerEXT.is_loaded = true; }, _ => unsafe { storage::IndexPointerEXT.f = transmute(failing::IndexPointerEXT); storage::IndexPointerEXT.is_loaded = false; } }
    match loadfn("IndexPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::IndexPointerListIBM.f = transmute(ptr); storage::IndexPointerListIBM.is_loaded = true; }, _ => unsafe { storage::IndexPointerListIBM.f = transmute(failing::IndexPointerListIBM); storage::IndexPointerListIBM.is_loaded = false; } }
    match loadfn("Indexd") { ptr if !ptr.is_null() => unsafe { storage::Indexd.f = transmute(ptr); storage::Indexd.is_loaded = true; }, _ => unsafe { storage::Indexd.f = transmute(failing::Indexd); storage::Indexd.is_loaded = false; } }
    match loadfn("Indexdv") { ptr if !ptr.is_null() => unsafe { storage::Indexdv.f = transmute(ptr); storage::Indexdv.is_loaded = true; }, _ => unsafe { storage::Indexdv.f = transmute(failing::Indexdv); storage::Indexdv.is_loaded = false; } }
    match loadfn("Indexf") { ptr if !ptr.is_null() => unsafe { storage::Indexf.f = transmute(ptr); storage::Indexf.is_loaded = true; }, _ => unsafe { storage::Indexf.f = transmute(failing::Indexf); storage::Indexf.is_loaded = false; } }
    match loadfn("Indexfv") { ptr if !ptr.is_null() => unsafe { storage::Indexfv.f = transmute(ptr); storage::Indexfv.is_loaded = true; }, _ => unsafe { storage::Indexfv.f = transmute(failing::Indexfv); storage::Indexfv.is_loaded = false; } }
    match loadfn("Indexi") { ptr if !ptr.is_null() => unsafe { storage::Indexi.f = transmute(ptr); storage::Indexi.is_loaded = true; }, _ => unsafe { storage::Indexi.f = transmute(failing::Indexi); storage::Indexi.is_loaded = false; } }
    match loadfn("Indexiv") { ptr if !ptr.is_null() => unsafe { storage::Indexiv.f = transmute(ptr); storage::Indexiv.is_loaded = true; }, _ => unsafe { storage::Indexiv.f = transmute(failing::Indexiv); storage::Indexiv.is_loaded = false; } }
    match loadfn("Indexs") { ptr if !ptr.is_null() => unsafe { storage::Indexs.f = transmute(ptr); storage::Indexs.is_loaded = true; }, _ => unsafe { storage::Indexs.f = transmute(failing::Indexs); storage::Indexs.is_loaded = false; } }
    match loadfn("Indexsv") { ptr if !ptr.is_null() => unsafe { storage::Indexsv.f = transmute(ptr); storage::Indexsv.is_loaded = true; }, _ => unsafe { storage::Indexsv.f = transmute(failing::Indexsv); storage::Indexsv.is_loaded = false; } }
    match loadfn("Indexub") { ptr if !ptr.is_null() => unsafe { storage::Indexub.f = transmute(ptr); storage::Indexub.is_loaded = true; }, _ => unsafe { storage::Indexub.f = transmute(failing::Indexub); storage::Indexub.is_loaded = false; } }
    match loadfn("Indexubv") { ptr if !ptr.is_null() => unsafe { storage::Indexubv.f = transmute(ptr); storage::Indexubv.is_loaded = true; }, _ => unsafe { storage::Indexubv.f = transmute(failing::Indexubv); storage::Indexubv.is_loaded = false; } }
    match loadfn("IndexxOES") { ptr if !ptr.is_null() => unsafe { storage::IndexxOES.f = transmute(ptr); storage::IndexxOES.is_loaded = true; }, _ => unsafe { storage::IndexxOES.f = transmute(failing::IndexxOES); storage::IndexxOES.is_loaded = false; } }
    match loadfn("IndexxvOES") { ptr if !ptr.is_null() => unsafe { storage::IndexxvOES.f = transmute(ptr); storage::IndexxvOES.is_loaded = true; }, _ => unsafe { storage::IndexxvOES.f = transmute(failing::IndexxvOES); storage::IndexxvOES.is_loaded = false; } }
    match loadfn("InitNames") { ptr if !ptr.is_null() => unsafe { storage::InitNames.f = transmute(ptr); storage::InitNames.is_loaded = true; }, _ => unsafe { storage::InitNames.f = transmute(failing::InitNames); storage::InitNames.is_loaded = false; } }
    match loadfn("InsertComponentEXT") { ptr if !ptr.is_null() => unsafe { storage::InsertComponentEXT.f = transmute(ptr); storage::InsertComponentEXT.is_loaded = true; }, _ => unsafe { storage::InsertComponentEXT.f = transmute(failing::InsertComponentEXT); storage::InsertComponentEXT.is_loaded = false; } }
    match loadfn("InsertEventMarkerEXT") { ptr if !ptr.is_null() => unsafe { storage::InsertEventMarkerEXT.f = transmute(ptr); storage::InsertEventMarkerEXT.is_loaded = true; }, _ => unsafe { storage::InsertEventMarkerEXT.f = transmute(failing::InsertEventMarkerEXT); storage::InsertEventMarkerEXT.is_loaded = false; } }
    match loadfn("InstrumentsBufferSGIX") { ptr if !ptr.is_null() => unsafe { storage::InstrumentsBufferSGIX.f = transmute(ptr); storage::InstrumentsBufferSGIX.is_loaded = true; }, _ => unsafe { storage::InstrumentsBufferSGIX.f = transmute(failing::InstrumentsBufferSGIX); storage::InstrumentsBufferSGIX.is_loaded = false; } }
    match loadfn("InterleavedArrays") { ptr if !ptr.is_null() => unsafe { storage::InterleavedArrays.f = transmute(ptr); storage::InterleavedArrays.is_loaded = true; }, _ => unsafe { storage::InterleavedArrays.f = transmute(failing::InterleavedArrays); storage::InterleavedArrays.is_loaded = false; } }
    match loadfn("InterpolatePathsNV") { ptr if !ptr.is_null() => unsafe { storage::InterpolatePathsNV.f = transmute(ptr); storage::InterpolatePathsNV.is_loaded = true; }, _ => unsafe { storage::InterpolatePathsNV.f = transmute(failing::InterpolatePathsNV); storage::InterpolatePathsNV.is_loaded = false; } }
    match loadfn("InvalidateBufferData") { ptr if !ptr.is_null() => unsafe { storage::InvalidateBufferData.f = transmute(ptr); storage::InvalidateBufferData.is_loaded = true; }, _ => unsafe { storage::InvalidateBufferData.f = transmute(failing::InvalidateBufferData); storage::InvalidateBufferData.is_loaded = false; } }
    match loadfn("InvalidateBufferSubData") { ptr if !ptr.is_null() => unsafe { storage::InvalidateBufferSubData.f = transmute(ptr); storage::InvalidateBufferSubData.is_loaded = true; }, _ => unsafe { storage::InvalidateBufferSubData.f = transmute(failing::InvalidateBufferSubData); storage::InvalidateBufferSubData.is_loaded = false; } }
    match loadfn("InvalidateFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::InvalidateFramebuffer.f = transmute(ptr); storage::InvalidateFramebuffer.is_loaded = true; }, _ => unsafe { storage::InvalidateFramebuffer.f = transmute(failing::InvalidateFramebuffer); storage::InvalidateFramebuffer.is_loaded = false; } }
    match loadfn("InvalidateSubFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::InvalidateSubFramebuffer.f = transmute(ptr); storage::InvalidateSubFramebuffer.is_loaded = true; }, _ => unsafe { storage::InvalidateSubFramebuffer.f = transmute(failing::InvalidateSubFramebuffer); storage::InvalidateSubFramebuffer.is_loaded = false; } }
    match loadfn("InvalidateTexImage") { ptr if !ptr.is_null() => unsafe { storage::InvalidateTexImage.f = transmute(ptr); storage::InvalidateTexImage.is_loaded = true; }, _ => unsafe { storage::InvalidateTexImage.f = transmute(failing::InvalidateTexImage); storage::InvalidateTexImage.is_loaded = false; } }
    match loadfn("InvalidateTexSubImage") { ptr if !ptr.is_null() => unsafe { storage::InvalidateTexSubImage.f = transmute(ptr); storage::InvalidateTexSubImage.is_loaded = true; }, _ => unsafe { storage::InvalidateTexSubImage.f = transmute(failing::InvalidateTexSubImage); storage::InvalidateTexSubImage.is_loaded = false; } }
    match loadfn("IsAsyncMarkerSGIX") { ptr if !ptr.is_null() => unsafe { storage::IsAsyncMarkerSGIX.f = transmute(ptr); storage::IsAsyncMarkerSGIX.is_loaded = true; }, _ => unsafe { storage::IsAsyncMarkerSGIX.f = transmute(failing::IsAsyncMarkerSGIX); storage::IsAsyncMarkerSGIX.is_loaded = false; } }
    match loadfn("IsBuffer") { ptr if !ptr.is_null() => unsafe { storage::IsBuffer.f = transmute(ptr); storage::IsBuffer.is_loaded = true; }, _ => unsafe { storage::IsBuffer.f = transmute(failing::IsBuffer); storage::IsBuffer.is_loaded = false; } }
    match loadfn("IsBufferARB") { ptr if !ptr.is_null() => unsafe { storage::IsBufferARB.f = transmute(ptr); storage::IsBufferARB.is_loaded = true; }, _ => unsafe { storage::IsBufferARB.f = transmute(failing::IsBufferARB); storage::IsBufferARB.is_loaded = false; } }
    match loadfn("IsBufferResidentNV") { ptr if !ptr.is_null() => unsafe { storage::IsBufferResidentNV.f = transmute(ptr); storage::IsBufferResidentNV.is_loaded = true; }, _ => unsafe { storage::IsBufferResidentNV.f = transmute(failing::IsBufferResidentNV); storage::IsBufferResidentNV.is_loaded = false; } }
    match loadfn("IsEnabled") { ptr if !ptr.is_null() => unsafe { storage::IsEnabled.f = transmute(ptr); storage::IsEnabled.is_loaded = true; }, _ => unsafe { storage::IsEnabled.f = transmute(failing::IsEnabled); storage::IsEnabled.is_loaded = false; } }
    match loadfn("IsEnabledIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::IsEnabledIndexedEXT.f = transmute(ptr); storage::IsEnabledIndexedEXT.is_loaded = true; }, _ => unsafe { storage::IsEnabledIndexedEXT.f = transmute(failing::IsEnabledIndexedEXT); storage::IsEnabledIndexedEXT.is_loaded = false; } }
    match loadfn("IsEnabledi") { ptr if !ptr.is_null() => unsafe { storage::IsEnabledi.f = transmute(ptr); storage::IsEnabledi.is_loaded = true; }, _ => unsafe { storage::IsEnabledi.f = transmute(failing::IsEnabledi); storage::IsEnabledi.is_loaded = false; } }
    match loadfn("IsFenceAPPLE") { ptr if !ptr.is_null() => unsafe { storage::IsFenceAPPLE.f = transmute(ptr); storage::IsFenceAPPLE.is_loaded = true; }, _ => unsafe { storage::IsFenceAPPLE.f = transmute(failing::IsFenceAPPLE); storage::IsFenceAPPLE.is_loaded = false; } }
    match loadfn("IsFenceNV") { ptr if !ptr.is_null() => unsafe { storage::IsFenceNV.f = transmute(ptr); storage::IsFenceNV.is_loaded = true; }, _ => unsafe { storage::IsFenceNV.f = transmute(failing::IsFenceNV); storage::IsFenceNV.is_loaded = false; } }
    match loadfn("IsFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::IsFramebuffer.f = transmute(ptr); storage::IsFramebuffer.is_loaded = true; }, _ => unsafe { storage::IsFramebuffer.f = transmute(failing::IsFramebuffer); storage::IsFramebuffer.is_loaded = false; } }
    match loadfn("IsFramebufferEXT") { ptr if !ptr.is_null() => unsafe { storage::IsFramebufferEXT.f = transmute(ptr); storage::IsFramebufferEXT.is_loaded = true; }, _ => unsafe { storage::IsFramebufferEXT.f = transmute(failing::IsFramebufferEXT); storage::IsFramebufferEXT.is_loaded = false; } }
    match loadfn("IsFramebufferOES") { ptr if !ptr.is_null() => unsafe { storage::IsFramebufferOES.f = transmute(ptr); storage::IsFramebufferOES.is_loaded = true; }, _ => unsafe { storage::IsFramebufferOES.f = transmute(failing::IsFramebufferOES); storage::IsFramebufferOES.is_loaded = false; } }
    match loadfn("IsImageHandleResidentARB") { ptr if !ptr.is_null() => unsafe { storage::IsImageHandleResidentARB.f = transmute(ptr); storage::IsImageHandleResidentARB.is_loaded = true; }, _ => unsafe { storage::IsImageHandleResidentARB.f = transmute(failing::IsImageHandleResidentARB); storage::IsImageHandleResidentARB.is_loaded = false; } }
    match loadfn("IsImageHandleResidentNV") { ptr if !ptr.is_null() => unsafe { storage::IsImageHandleResidentNV.f = transmute(ptr); storage::IsImageHandleResidentNV.is_loaded = true; }, _ => unsafe { storage::IsImageHandleResidentNV.f = transmute(failing::IsImageHandleResidentNV); storage::IsImageHandleResidentNV.is_loaded = false; } }
    match loadfn("IsList") { ptr if !ptr.is_null() => unsafe { storage::IsList.f = transmute(ptr); storage::IsList.is_loaded = true; }, _ => unsafe { storage::IsList.f = transmute(failing::IsList); storage::IsList.is_loaded = false; } }
    match loadfn("IsNameAMD") { ptr if !ptr.is_null() => unsafe { storage::IsNameAMD.f = transmute(ptr); storage::IsNameAMD.is_loaded = true; }, _ => unsafe { storage::IsNameAMD.f = transmute(failing::IsNameAMD); storage::IsNameAMD.is_loaded = false; } }
    match loadfn("IsNamedBufferResidentNV") { ptr if !ptr.is_null() => unsafe { storage::IsNamedBufferResidentNV.f = transmute(ptr); storage::IsNamedBufferResidentNV.is_loaded = true; }, _ => unsafe { storage::IsNamedBufferResidentNV.f = transmute(failing::IsNamedBufferResidentNV); storage::IsNamedBufferResidentNV.is_loaded = false; } }
    match loadfn("IsNamedStringARB") { ptr if !ptr.is_null() => unsafe { storage::IsNamedStringARB.f = transmute(ptr); storage::IsNamedStringARB.is_loaded = true; }, _ => unsafe { storage::IsNamedStringARB.f = transmute(failing::IsNamedStringARB); storage::IsNamedStringARB.is_loaded = false; } }
    match loadfn("IsObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::IsObjectBufferATI.f = transmute(ptr); storage::IsObjectBufferATI.is_loaded = true; }, _ => unsafe { storage::IsObjectBufferATI.f = transmute(failing::IsObjectBufferATI); storage::IsObjectBufferATI.is_loaded = false; } }
    match loadfn("IsOcclusionQueryNV") { ptr if !ptr.is_null() => unsafe { storage::IsOcclusionQueryNV.f = transmute(ptr); storage::IsOcclusionQueryNV.is_loaded = true; }, _ => unsafe { storage::IsOcclusionQueryNV.f = transmute(failing::IsOcclusionQueryNV); storage::IsOcclusionQueryNV.is_loaded = false; } }
    match loadfn("IsPathNV") { ptr if !ptr.is_null() => unsafe { storage::IsPathNV.f = transmute(ptr); storage::IsPathNV.is_loaded = true; }, _ => unsafe { storage::IsPathNV.f = transmute(failing::IsPathNV); storage::IsPathNV.is_loaded = false; } }
    match loadfn("IsPointInFillPathNV") { ptr if !ptr.is_null() => unsafe { storage::IsPointInFillPathNV.f = transmute(ptr); storage::IsPointInFillPathNV.is_loaded = true; }, _ => unsafe { storage::IsPointInFillPathNV.f = transmute(failing::IsPointInFillPathNV); storage::IsPointInFillPathNV.is_loaded = false; } }
    match loadfn("IsPointInStrokePathNV") { ptr if !ptr.is_null() => unsafe { storage::IsPointInStrokePathNV.f = transmute(ptr); storage::IsPointInStrokePathNV.is_loaded = true; }, _ => unsafe { storage::IsPointInStrokePathNV.f = transmute(failing::IsPointInStrokePathNV); storage::IsPointInStrokePathNV.is_loaded = false; } }
    match loadfn("IsProgram") { ptr if !ptr.is_null() => unsafe { storage::IsProgram.f = transmute(ptr); storage::IsProgram.is_loaded = true; }, _ => unsafe { storage::IsProgram.f = transmute(failing::IsProgram); storage::IsProgram.is_loaded = false; } }
    match loadfn("IsProgramARB") { ptr if !ptr.is_null() => unsafe { storage::IsProgramARB.f = transmute(ptr); storage::IsProgramARB.is_loaded = true; }, _ => unsafe { storage::IsProgramARB.f = transmute(failing::IsProgramARB); storage::IsProgramARB.is_loaded = false; } }
    match loadfn("IsProgramNV") { ptr if !ptr.is_null() => unsafe { storage::IsProgramNV.f = transmute(ptr); storage::IsProgramNV.is_loaded = true; }, _ => unsafe { storage::IsProgramNV.f = transmute(failing::IsProgramNV); storage::IsProgramNV.is_loaded = false; } }
    match loadfn("IsProgramPipeline") { ptr if !ptr.is_null() => unsafe { storage::IsProgramPipeline.f = transmute(ptr); storage::IsProgramPipeline.is_loaded = true; }, _ => unsafe { storage::IsProgramPipeline.f = transmute(failing::IsProgramPipeline); storage::IsProgramPipeline.is_loaded = false; } }
    match loadfn("IsProgramPipelineEXT") { ptr if !ptr.is_null() => unsafe { storage::IsProgramPipelineEXT.f = transmute(ptr); storage::IsProgramPipelineEXT.is_loaded = true; }, _ => unsafe { storage::IsProgramPipelineEXT.f = transmute(failing::IsProgramPipelineEXT); storage::IsProgramPipelineEXT.is_loaded = false; } }
    match loadfn("IsQuery") { ptr if !ptr.is_null() => unsafe { storage::IsQuery.f = transmute(ptr); storage::IsQuery.is_loaded = true; }, _ => unsafe { storage::IsQuery.f = transmute(failing::IsQuery); storage::IsQuery.is_loaded = false; } }
    match loadfn("IsQueryARB") { ptr if !ptr.is_null() => unsafe { storage::IsQueryARB.f = transmute(ptr); storage::IsQueryARB.is_loaded = true; }, _ => unsafe { storage::IsQueryARB.f = transmute(failing::IsQueryARB); storage::IsQueryARB.is_loaded = false; } }
    match loadfn("IsQueryEXT") { ptr if !ptr.is_null() => unsafe { storage::IsQueryEXT.f = transmute(ptr); storage::IsQueryEXT.is_loaded = true; }, _ => unsafe { storage::IsQueryEXT.f = transmute(failing::IsQueryEXT); storage::IsQueryEXT.is_loaded = false; } }
    match loadfn("IsRenderbuffer") { ptr if !ptr.is_null() => unsafe { storage::IsRenderbuffer.f = transmute(ptr); storage::IsRenderbuffer.is_loaded = true; }, _ => unsafe { storage::IsRenderbuffer.f = transmute(failing::IsRenderbuffer); storage::IsRenderbuffer.is_loaded = false; } }
    match loadfn("IsRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::IsRenderbufferEXT.f = transmute(ptr); storage::IsRenderbufferEXT.is_loaded = true; }, _ => unsafe { storage::IsRenderbufferEXT.f = transmute(failing::IsRenderbufferEXT); storage::IsRenderbufferEXT.is_loaded = false; } }
    match loadfn("IsRenderbufferOES") { ptr if !ptr.is_null() => unsafe { storage::IsRenderbufferOES.f = transmute(ptr); storage::IsRenderbufferOES.is_loaded = true; }, _ => unsafe { storage::IsRenderbufferOES.f = transmute(failing::IsRenderbufferOES); storage::IsRenderbufferOES.is_loaded = false; } }
    match loadfn("IsSampler") { ptr if !ptr.is_null() => unsafe { storage::IsSampler.f = transmute(ptr); storage::IsSampler.is_loaded = true; }, _ => unsafe { storage::IsSampler.f = transmute(failing::IsSampler); storage::IsSampler.is_loaded = false; } }
    match loadfn("IsShader") { ptr if !ptr.is_null() => unsafe { storage::IsShader.f = transmute(ptr); storage::IsShader.is_loaded = true; }, _ => unsafe { storage::IsShader.f = transmute(failing::IsShader); storage::IsShader.is_loaded = false; } }
    match loadfn("IsSync") { ptr if !ptr.is_null() => unsafe { storage::IsSync.f = transmute(ptr); storage::IsSync.is_loaded = true; }, _ => unsafe { storage::IsSync.f = transmute(failing::IsSync); storage::IsSync.is_loaded = false; } }
    match loadfn("IsSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::IsSyncAPPLE.f = transmute(ptr); storage::IsSyncAPPLE.is_loaded = true; }, _ => unsafe { storage::IsSyncAPPLE.f = transmute(failing::IsSyncAPPLE); storage::IsSyncAPPLE.is_loaded = false; } }
    match loadfn("IsTexture") { ptr if !ptr.is_null() => unsafe { storage::IsTexture.f = transmute(ptr); storage::IsTexture.is_loaded = true; }, _ => unsafe { storage::IsTexture.f = transmute(failing::IsTexture); storage::IsTexture.is_loaded = false; } }
    match loadfn("IsTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::IsTextureEXT.f = transmute(ptr); storage::IsTextureEXT.is_loaded = true; }, _ => unsafe { storage::IsTextureEXT.f = transmute(failing::IsTextureEXT); storage::IsTextureEXT.is_loaded = false; } }
    match loadfn("IsTextureHandleResidentARB") { ptr if !ptr.is_null() => unsafe { storage::IsTextureHandleResidentARB.f = transmute(ptr); storage::IsTextureHandleResidentARB.is_loaded = true; }, _ => unsafe { storage::IsTextureHandleResidentARB.f = transmute(failing::IsTextureHandleResidentARB); storage::IsTextureHandleResidentARB.is_loaded = false; } }
    match loadfn("IsTextureHandleResidentNV") { ptr if !ptr.is_null() => unsafe { storage::IsTextureHandleResidentNV.f = transmute(ptr); storage::IsTextureHandleResidentNV.is_loaded = true; }, _ => unsafe { storage::IsTextureHandleResidentNV.f = transmute(failing::IsTextureHandleResidentNV); storage::IsTextureHandleResidentNV.is_loaded = false; } }
    match loadfn("IsTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::IsTransformFeedback.f = transmute(ptr); storage::IsTransformFeedback.is_loaded = true; }, _ => unsafe { storage::IsTransformFeedback.f = transmute(failing::IsTransformFeedback); storage::IsTransformFeedback.is_loaded = false; } }
    match loadfn("IsTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::IsTransformFeedbackNV.f = transmute(ptr); storage::IsTransformFeedbackNV.is_loaded = true; }, _ => unsafe { storage::IsTransformFeedbackNV.f = transmute(failing::IsTransformFeedbackNV); storage::IsTransformFeedbackNV.is_loaded = false; } }
    match loadfn("IsVariantEnabledEXT") { ptr if !ptr.is_null() => unsafe { storage::IsVariantEnabledEXT.f = transmute(ptr); storage::IsVariantEnabledEXT.is_loaded = true; }, _ => unsafe { storage::IsVariantEnabledEXT.f = transmute(failing::IsVariantEnabledEXT); storage::IsVariantEnabledEXT.is_loaded = false; } }
    match loadfn("IsVertexArray") { ptr if !ptr.is_null() => unsafe { storage::IsVertexArray.f = transmute(ptr); storage::IsVertexArray.is_loaded = true; }, _ => unsafe { storage::IsVertexArray.f = transmute(failing::IsVertexArray); storage::IsVertexArray.is_loaded = false; } }
    match loadfn("IsVertexArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::IsVertexArrayAPPLE.f = transmute(ptr); storage::IsVertexArrayAPPLE.is_loaded = true; }, _ => unsafe { storage::IsVertexArrayAPPLE.f = transmute(failing::IsVertexArrayAPPLE); storage::IsVertexArrayAPPLE.is_loaded = false; } }
    match loadfn("IsVertexArrayOES") { ptr if !ptr.is_null() => unsafe { storage::IsVertexArrayOES.f = transmute(ptr); storage::IsVertexArrayOES.is_loaded = true; }, _ => unsafe { storage::IsVertexArrayOES.f = transmute(failing::IsVertexArrayOES); storage::IsVertexArrayOES.is_loaded = false; } }
    match loadfn("IsVertexAttribEnabledAPPLE") { ptr if !ptr.is_null() => unsafe { storage::IsVertexAttribEnabledAPPLE.f = transmute(ptr); storage::IsVertexAttribEnabledAPPLE.is_loaded = true; }, _ => unsafe { storage::IsVertexAttribEnabledAPPLE.f = transmute(failing::IsVertexAttribEnabledAPPLE); storage::IsVertexAttribEnabledAPPLE.is_loaded = false; } }
    match loadfn("LabelObjectEXT") { ptr if !ptr.is_null() => unsafe { storage::LabelObjectEXT.f = transmute(ptr); storage::LabelObjectEXT.is_loaded = true; }, _ => unsafe { storage::LabelObjectEXT.f = transmute(failing::LabelObjectEXT); storage::LabelObjectEXT.is_loaded = false; } }
    match loadfn("LightEnviSGIX") { ptr if !ptr.is_null() => unsafe { storage::LightEnviSGIX.f = transmute(ptr); storage::LightEnviSGIX.is_loaded = true; }, _ => unsafe { storage::LightEnviSGIX.f = transmute(failing::LightEnviSGIX); storage::LightEnviSGIX.is_loaded = false; } }
    match loadfn("LightModelf") { ptr if !ptr.is_null() => unsafe { storage::LightModelf.f = transmute(ptr); storage::LightModelf.is_loaded = true; }, _ => unsafe { storage::LightModelf.f = transmute(failing::LightModelf); storage::LightModelf.is_loaded = false; } }
    match loadfn("LightModelfv") { ptr if !ptr.is_null() => unsafe { storage::LightModelfv.f = transmute(ptr); storage::LightModelfv.is_loaded = true; }, _ => unsafe { storage::LightModelfv.f = transmute(failing::LightModelfv); storage::LightModelfv.is_loaded = false; } }
    match loadfn("LightModeli") { ptr if !ptr.is_null() => unsafe { storage::LightModeli.f = transmute(ptr); storage::LightModeli.is_loaded = true; }, _ => unsafe { storage::LightModeli.f = transmute(failing::LightModeli); storage::LightModeli.is_loaded = false; } }
    match loadfn("LightModeliv") { ptr if !ptr.is_null() => unsafe { storage::LightModeliv.f = transmute(ptr); storage::LightModeliv.is_loaded = true; }, _ => unsafe { storage::LightModeliv.f = transmute(failing::LightModeliv); storage::LightModeliv.is_loaded = false; } }
    match loadfn("LightModelx") { ptr if !ptr.is_null() => unsafe { storage::LightModelx.f = transmute(ptr); storage::LightModelx.is_loaded = true; }, _ => unsafe { storage::LightModelx.f = transmute(failing::LightModelx); storage::LightModelx.is_loaded = false; } }
    match loadfn("LightModelxOES") { ptr if !ptr.is_null() => unsafe { storage::LightModelxOES.f = transmute(ptr); storage::LightModelxOES.is_loaded = true; }, _ => unsafe { storage::LightModelxOES.f = transmute(failing::LightModelxOES); storage::LightModelxOES.is_loaded = false; } }
    match loadfn("LightModelxv") { ptr if !ptr.is_null() => unsafe { storage::LightModelxv.f = transmute(ptr); storage::LightModelxv.is_loaded = true; }, _ => unsafe { storage::LightModelxv.f = transmute(failing::LightModelxv); storage::LightModelxv.is_loaded = false; } }
    match loadfn("LightModelxvOES") { ptr if !ptr.is_null() => unsafe { storage::LightModelxvOES.f = transmute(ptr); storage::LightModelxvOES.is_loaded = true; }, _ => unsafe { storage::LightModelxvOES.f = transmute(failing::LightModelxvOES); storage::LightModelxvOES.is_loaded = false; } }
    match loadfn("Lightf") { ptr if !ptr.is_null() => unsafe { storage::Lightf.f = transmute(ptr); storage::Lightf.is_loaded = true; }, _ => unsafe { storage::Lightf.f = transmute(failing::Lightf); storage::Lightf.is_loaded = false; } }
    match loadfn("Lightfv") { ptr if !ptr.is_null() => unsafe { storage::Lightfv.f = transmute(ptr); storage::Lightfv.is_loaded = true; }, _ => unsafe { storage::Lightfv.f = transmute(failing::Lightfv); storage::Lightfv.is_loaded = false; } }
    match loadfn("Lighti") { ptr if !ptr.is_null() => unsafe { storage::Lighti.f = transmute(ptr); storage::Lighti.is_loaded = true; }, _ => unsafe { storage::Lighti.f = transmute(failing::Lighti); storage::Lighti.is_loaded = false; } }
    match loadfn("Lightiv") { ptr if !ptr.is_null() => unsafe { storage::Lightiv.f = transmute(ptr); storage::Lightiv.is_loaded = true; }, _ => unsafe { storage::Lightiv.f = transmute(failing::Lightiv); storage::Lightiv.is_loaded = false; } }
    match loadfn("Lightx") { ptr if !ptr.is_null() => unsafe { storage::Lightx.f = transmute(ptr); storage::Lightx.is_loaded = true; }, _ => unsafe { storage::Lightx.f = transmute(failing::Lightx); storage::Lightx.is_loaded = false; } }
    match loadfn("LightxOES") { ptr if !ptr.is_null() => unsafe { storage::LightxOES.f = transmute(ptr); storage::LightxOES.is_loaded = true; }, _ => unsafe { storage::LightxOES.f = transmute(failing::LightxOES); storage::LightxOES.is_loaded = false; } }
    match loadfn("Lightxv") { ptr if !ptr.is_null() => unsafe { storage::Lightxv.f = transmute(ptr); storage::Lightxv.is_loaded = true; }, _ => unsafe { storage::Lightxv.f = transmute(failing::Lightxv); storage::Lightxv.is_loaded = false; } }
    match loadfn("LightxvOES") { ptr if !ptr.is_null() => unsafe { storage::LightxvOES.f = transmute(ptr); storage::LightxvOES.is_loaded = true; }, _ => unsafe { storage::LightxvOES.f = transmute(failing::LightxvOES); storage::LightxvOES.is_loaded = false; } }
    match loadfn("LineStipple") { ptr if !ptr.is_null() => unsafe { storage::LineStipple.f = transmute(ptr); storage::LineStipple.is_loaded = true; }, _ => unsafe { storage::LineStipple.f = transmute(failing::LineStipple); storage::LineStipple.is_loaded = false; } }
    match loadfn("LineWidth") { ptr if !ptr.is_null() => unsafe { storage::LineWidth.f = transmute(ptr); storage::LineWidth.is_loaded = true; }, _ => unsafe { storage::LineWidth.f = transmute(failing::LineWidth); storage::LineWidth.is_loaded = false; } }
    match loadfn("LineWidthx") { ptr if !ptr.is_null() => unsafe { storage::LineWidthx.f = transmute(ptr); storage::LineWidthx.is_loaded = true; }, _ => unsafe { storage::LineWidthx.f = transmute(failing::LineWidthx); storage::LineWidthx.is_loaded = false; } }
    match loadfn("LineWidthxOES") { ptr if !ptr.is_null() => unsafe { storage::LineWidthxOES.f = transmute(ptr); storage::LineWidthxOES.is_loaded = true; }, _ => unsafe { storage::LineWidthxOES.f = transmute(failing::LineWidthxOES); storage::LineWidthxOES.is_loaded = false; } }
    match loadfn("LinkProgram") { ptr if !ptr.is_null() => unsafe { storage::LinkProgram.f = transmute(ptr); storage::LinkProgram.is_loaded = true; }, _ => unsafe { storage::LinkProgram.f = transmute(failing::LinkProgram); storage::LinkProgram.is_loaded = false; } }
    match loadfn("LinkProgramARB") { ptr if !ptr.is_null() => unsafe { storage::LinkProgramARB.f = transmute(ptr); storage::LinkProgramARB.is_loaded = true; }, _ => unsafe { storage::LinkProgramARB.f = transmute(failing::LinkProgramARB); storage::LinkProgramARB.is_loaded = false; } }
    match loadfn("ListBase") { ptr if !ptr.is_null() => unsafe { storage::ListBase.f = transmute(ptr); storage::ListBase.is_loaded = true; }, _ => unsafe { storage::ListBase.f = transmute(failing::ListBase); storage::ListBase.is_loaded = false; } }
    match loadfn("ListParameterfSGIX") { ptr if !ptr.is_null() => unsafe { storage::ListParameterfSGIX.f = transmute(ptr); storage::ListParameterfSGIX.is_loaded = true; }, _ => unsafe { storage::ListParameterfSGIX.f = transmute(failing::ListParameterfSGIX); storage::ListParameterfSGIX.is_loaded = false; } }
    match loadfn("ListParameterfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::ListParameterfvSGIX.f = transmute(ptr); storage::ListParameterfvSGIX.is_loaded = true; }, _ => unsafe { storage::ListParameterfvSGIX.f = transmute(failing::ListParameterfvSGIX); storage::ListParameterfvSGIX.is_loaded = false; } }
    match loadfn("ListParameteriSGIX") { ptr if !ptr.is_null() => unsafe { storage::ListParameteriSGIX.f = transmute(ptr); storage::ListParameteriSGIX.is_loaded = true; }, _ => unsafe { storage::ListParameteriSGIX.f = transmute(failing::ListParameteriSGIX); storage::ListParameteriSGIX.is_loaded = false; } }
    match loadfn("ListParameterivSGIX") { ptr if !ptr.is_null() => unsafe { storage::ListParameterivSGIX.f = transmute(ptr); storage::ListParameterivSGIX.is_loaded = true; }, _ => unsafe { storage::ListParameterivSGIX.f = transmute(failing::ListParameterivSGIX); storage::ListParameterivSGIX.is_loaded = false; } }
    match loadfn("LoadIdentity") { ptr if !ptr.is_null() => unsafe { storage::LoadIdentity.f = transmute(ptr); storage::LoadIdentity.is_loaded = true; }, _ => unsafe { storage::LoadIdentity.f = transmute(failing::LoadIdentity); storage::LoadIdentity.is_loaded = false; } }
    match loadfn("LoadIdentityDeformationMapSGIX") { ptr if !ptr.is_null() => unsafe { storage::LoadIdentityDeformationMapSGIX.f = transmute(ptr); storage::LoadIdentityDeformationMapSGIX.is_loaded = true; }, _ => unsafe { storage::LoadIdentityDeformationMapSGIX.f = transmute(failing::LoadIdentityDeformationMapSGIX); storage::LoadIdentityDeformationMapSGIX.is_loaded = false; } }
    match loadfn("LoadMatrixd") { ptr if !ptr.is_null() => unsafe { storage::LoadMatrixd.f = transmute(ptr); storage::LoadMatrixd.is_loaded = true; }, _ => unsafe { storage::LoadMatrixd.f = transmute(failing::LoadMatrixd); storage::LoadMatrixd.is_loaded = false; } }
    match loadfn("LoadMatrixf") { ptr if !ptr.is_null() => unsafe { storage::LoadMatrixf.f = transmute(ptr); storage::LoadMatrixf.is_loaded = true; }, _ => unsafe { storage::LoadMatrixf.f = transmute(failing::LoadMatrixf); storage::LoadMatrixf.is_loaded = false; } }
    match loadfn("LoadMatrixx") { ptr if !ptr.is_null() => unsafe { storage::LoadMatrixx.f = transmute(ptr); storage::LoadMatrixx.is_loaded = true; }, _ => unsafe { storage::LoadMatrixx.f = transmute(failing::LoadMatrixx); storage::LoadMatrixx.is_loaded = false; } }
    match loadfn("LoadMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::LoadMatrixxOES.f = transmute(ptr); storage::LoadMatrixxOES.is_loaded = true; }, _ => unsafe { storage::LoadMatrixxOES.f = transmute(failing::LoadMatrixxOES); storage::LoadMatrixxOES.is_loaded = false; } }
    match loadfn("LoadName") { ptr if !ptr.is_null() => unsafe { storage::LoadName.f = transmute(ptr); storage::LoadName.is_loaded = true; }, _ => unsafe { storage::LoadName.f = transmute(failing::LoadName); storage::LoadName.is_loaded = false; } }
    match loadfn("LoadPaletteFromModelViewMatrixOES") { ptr if !ptr.is_null() => unsafe { storage::LoadPaletteFromModelViewMatrixOES.f = transmute(ptr); storage::LoadPaletteFromModelViewMatrixOES.is_loaded = true; }, _ => unsafe { storage::LoadPaletteFromModelViewMatrixOES.f = transmute(failing::LoadPaletteFromModelViewMatrixOES); storage::LoadPaletteFromModelViewMatrixOES.is_loaded = false; } }
    match loadfn("LoadProgramNV") { ptr if !ptr.is_null() => unsafe { storage::LoadProgramNV.f = transmute(ptr); storage::LoadProgramNV.is_loaded = true; }, _ => unsafe { storage::LoadProgramNV.f = transmute(failing::LoadProgramNV); storage::LoadProgramNV.is_loaded = false; } }
    match loadfn("LoadTransposeMatrixd") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixd.f = transmute(ptr); storage::LoadTransposeMatrixd.is_loaded = true; }, _ => unsafe { storage::LoadTransposeMatrixd.f = transmute(failing::LoadTransposeMatrixd); storage::LoadTransposeMatrixd.is_loaded = false; } }
    match loadfn("LoadTransposeMatrixdARB") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixdARB.f = transmute(ptr); storage::LoadTransposeMatrixdARB.is_loaded = true; }, _ => unsafe { storage::LoadTransposeMatrixdARB.f = transmute(failing::LoadTransposeMatrixdARB); storage::LoadTransposeMatrixdARB.is_loaded = false; } }
    match loadfn("LoadTransposeMatrixf") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixf.f = transmute(ptr); storage::LoadTransposeMatrixf.is_loaded = true; }, _ => unsafe { storage::LoadTransposeMatrixf.f = transmute(failing::LoadTransposeMatrixf); storage::LoadTransposeMatrixf.is_loaded = false; } }
    match loadfn("LoadTransposeMatrixfARB") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixfARB.f = transmute(ptr); storage::LoadTransposeMatrixfARB.is_loaded = true; }, _ => unsafe { storage::LoadTransposeMatrixfARB.f = transmute(failing::LoadTransposeMatrixfARB); storage::LoadTransposeMatrixfARB.is_loaded = false; } }
    match loadfn("LoadTransposeMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixxOES.f = transmute(ptr); storage::LoadTransposeMatrixxOES.is_loaded = true; }, _ => unsafe { storage::LoadTransposeMatrixxOES.f = transmute(failing::LoadTransposeMatrixxOES); storage::LoadTransposeMatrixxOES.is_loaded = false; } }
    match loadfn("LockArraysEXT") { ptr if !ptr.is_null() => unsafe { storage::LockArraysEXT.f = transmute(ptr); storage::LockArraysEXT.is_loaded = true; }, _ => unsafe { storage::LockArraysEXT.f = transmute(failing::LockArraysEXT); storage::LockArraysEXT.is_loaded = false; } }
    match loadfn("LogicOp") { ptr if !ptr.is_null() => unsafe { storage::LogicOp.f = transmute(ptr); storage::LogicOp.is_loaded = true; }, _ => unsafe { storage::LogicOp.f = transmute(failing::LogicOp); storage::LogicOp.is_loaded = false; } }
    match loadfn("MakeBufferNonResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeBufferNonResidentNV.f = transmute(ptr); storage::MakeBufferNonResidentNV.is_loaded = true; }, _ => unsafe { storage::MakeBufferNonResidentNV.f = transmute(failing::MakeBufferNonResidentNV); storage::MakeBufferNonResidentNV.is_loaded = false; } }
    match loadfn("MakeBufferResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeBufferResidentNV.f = transmute(ptr); storage::MakeBufferResidentNV.is_loaded = true; }, _ => unsafe { storage::MakeBufferResidentNV.f = transmute(failing::MakeBufferResidentNV); storage::MakeBufferResidentNV.is_loaded = false; } }
    match loadfn("MakeImageHandleNonResidentARB") { ptr if !ptr.is_null() => unsafe { storage::MakeImageHandleNonResidentARB.f = transmute(ptr); storage::MakeImageHandleNonResidentARB.is_loaded = true; }, _ => unsafe { storage::MakeImageHandleNonResidentARB.f = transmute(failing::MakeImageHandleNonResidentARB); storage::MakeImageHandleNonResidentARB.is_loaded = false; } }
    match loadfn("MakeImageHandleNonResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeImageHandleNonResidentNV.f = transmute(ptr); storage::MakeImageHandleNonResidentNV.is_loaded = true; }, _ => unsafe { storage::MakeImageHandleNonResidentNV.f = transmute(failing::MakeImageHandleNonResidentNV); storage::MakeImageHandleNonResidentNV.is_loaded = false; } }
    match loadfn("MakeImageHandleResidentARB") { ptr if !ptr.is_null() => unsafe { storage::MakeImageHandleResidentARB.f = transmute(ptr); storage::MakeImageHandleResidentARB.is_loaded = true; }, _ => unsafe { storage::MakeImageHandleResidentARB.f = transmute(failing::MakeImageHandleResidentARB); storage::MakeImageHandleResidentARB.is_loaded = false; } }
    match loadfn("MakeImageHandleResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeImageHandleResidentNV.f = transmute(ptr); storage::MakeImageHandleResidentNV.is_loaded = true; }, _ => unsafe { storage::MakeImageHandleResidentNV.f = transmute(failing::MakeImageHandleResidentNV); storage::MakeImageHandleResidentNV.is_loaded = false; } }
    match loadfn("MakeNamedBufferNonResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeNamedBufferNonResidentNV.f = transmute(ptr); storage::MakeNamedBufferNonResidentNV.is_loaded = true; }, _ => unsafe { storage::MakeNamedBufferNonResidentNV.f = transmute(failing::MakeNamedBufferNonResidentNV); storage::MakeNamedBufferNonResidentNV.is_loaded = false; } }
    match loadfn("MakeNamedBufferResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeNamedBufferResidentNV.f = transmute(ptr); storage::MakeNamedBufferResidentNV.is_loaded = true; }, _ => unsafe { storage::MakeNamedBufferResidentNV.f = transmute(failing::MakeNamedBufferResidentNV); storage::MakeNamedBufferResidentNV.is_loaded = false; } }
    match loadfn("MakeTextureHandleNonResidentARB") { ptr if !ptr.is_null() => unsafe { storage::MakeTextureHandleNonResidentARB.f = transmute(ptr); storage::MakeTextureHandleNonResidentARB.is_loaded = true; }, _ => unsafe { storage::MakeTextureHandleNonResidentARB.f = transmute(failing::MakeTextureHandleNonResidentARB); storage::MakeTextureHandleNonResidentARB.is_loaded = false; } }
    match loadfn("MakeTextureHandleNonResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeTextureHandleNonResidentNV.f = transmute(ptr); storage::MakeTextureHandleNonResidentNV.is_loaded = true; }, _ => unsafe { storage::MakeTextureHandleNonResidentNV.f = transmute(failing::MakeTextureHandleNonResidentNV); storage::MakeTextureHandleNonResidentNV.is_loaded = false; } }
    match loadfn("MakeTextureHandleResidentARB") { ptr if !ptr.is_null() => unsafe { storage::MakeTextureHandleResidentARB.f = transmute(ptr); storage::MakeTextureHandleResidentARB.is_loaded = true; }, _ => unsafe { storage::MakeTextureHandleResidentARB.f = transmute(failing::MakeTextureHandleResidentARB); storage::MakeTextureHandleResidentARB.is_loaded = false; } }
    match loadfn("MakeTextureHandleResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeTextureHandleResidentNV.f = transmute(ptr); storage::MakeTextureHandleResidentNV.is_loaded = true; }, _ => unsafe { storage::MakeTextureHandleResidentNV.f = transmute(failing::MakeTextureHandleResidentNV); storage::MakeTextureHandleResidentNV.is_loaded = false; } }
    match loadfn("Map1d") { ptr if !ptr.is_null() => unsafe { storage::Map1d.f = transmute(ptr); storage::Map1d.is_loaded = true; }, _ => unsafe { storage::Map1d.f = transmute(failing::Map1d); storage::Map1d.is_loaded = false; } }
    match loadfn("Map1f") { ptr if !ptr.is_null() => unsafe { storage::Map1f.f = transmute(ptr); storage::Map1f.is_loaded = true; }, _ => unsafe { storage::Map1f.f = transmute(failing::Map1f); storage::Map1f.is_loaded = false; } }
    match loadfn("Map1xOES") { ptr if !ptr.is_null() => unsafe { storage::Map1xOES.f = transmute(ptr); storage::Map1xOES.is_loaded = true; }, _ => unsafe { storage::Map1xOES.f = transmute(failing::Map1xOES); storage::Map1xOES.is_loaded = false; } }
    match loadfn("Map2d") { ptr if !ptr.is_null() => unsafe { storage::Map2d.f = transmute(ptr); storage::Map2d.is_loaded = true; }, _ => unsafe { storage::Map2d.f = transmute(failing::Map2d); storage::Map2d.is_loaded = false; } }
    match loadfn("Map2f") { ptr if !ptr.is_null() => unsafe { storage::Map2f.f = transmute(ptr); storage::Map2f.is_loaded = true; }, _ => unsafe { storage::Map2f.f = transmute(failing::Map2f); storage::Map2f.is_loaded = false; } }
    match loadfn("Map2xOES") { ptr if !ptr.is_null() => unsafe { storage::Map2xOES.f = transmute(ptr); storage::Map2xOES.is_loaded = true; }, _ => unsafe { storage::Map2xOES.f = transmute(failing::Map2xOES); storage::Map2xOES.is_loaded = false; } }
    match loadfn("MapBuffer") { ptr if !ptr.is_null() => unsafe { storage::MapBuffer.f = transmute(ptr); storage::MapBuffer.is_loaded = true; }, _ => unsafe { storage::MapBuffer.f = transmute(failing::MapBuffer); storage::MapBuffer.is_loaded = false; } }
    match loadfn("MapBufferARB") { ptr if !ptr.is_null() => unsafe { storage::MapBufferARB.f = transmute(ptr); storage::MapBufferARB.is_loaded = true; }, _ => unsafe { storage::MapBufferARB.f = transmute(failing::MapBufferARB); storage::MapBufferARB.is_loaded = false; } }
    match loadfn("MapBufferOES") { ptr if !ptr.is_null() => unsafe { storage::MapBufferOES.f = transmute(ptr); storage::MapBufferOES.is_loaded = true; }, _ => unsafe { storage::MapBufferOES.f = transmute(failing::MapBufferOES); storage::MapBufferOES.is_loaded = false; } }
    match loadfn("MapBufferRange") { ptr if !ptr.is_null() => unsafe { storage::MapBufferRange.f = transmute(ptr); storage::MapBufferRange.is_loaded = true; }, _ => unsafe { storage::MapBufferRange.f = transmute(failing::MapBufferRange); storage::MapBufferRange.is_loaded = false; } }
    match loadfn("MapBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::MapBufferRangeEXT.f = transmute(ptr); storage::MapBufferRangeEXT.is_loaded = true; }, _ => unsafe { storage::MapBufferRangeEXT.f = transmute(failing::MapBufferRangeEXT); storage::MapBufferRangeEXT.is_loaded = false; } }
    match loadfn("MapControlPointsNV") { ptr if !ptr.is_null() => unsafe { storage::MapControlPointsNV.f = transmute(ptr); storage::MapControlPointsNV.is_loaded = true; }, _ => unsafe { storage::MapControlPointsNV.f = transmute(failing::MapControlPointsNV); storage::MapControlPointsNV.is_loaded = false; } }
    match loadfn("MapGrid1d") { ptr if !ptr.is_null() => unsafe { storage::MapGrid1d.f = transmute(ptr); storage::MapGrid1d.is_loaded = true; }, _ => unsafe { storage::MapGrid1d.f = transmute(failing::MapGrid1d); storage::MapGrid1d.is_loaded = false; } }
    match loadfn("MapGrid1f") { ptr if !ptr.is_null() => unsafe { storage::MapGrid1f.f = transmute(ptr); storage::MapGrid1f.is_loaded = true; }, _ => unsafe { storage::MapGrid1f.f = transmute(failing::MapGrid1f); storage::MapGrid1f.is_loaded = false; } }
    match loadfn("MapGrid1xOES") { ptr if !ptr.is_null() => unsafe { storage::MapGrid1xOES.f = transmute(ptr); storage::MapGrid1xOES.is_loaded = true; }, _ => unsafe { storage::MapGrid1xOES.f = transmute(failing::MapGrid1xOES); storage::MapGrid1xOES.is_loaded = false; } }
    match loadfn("MapGrid2d") { ptr if !ptr.is_null() => unsafe { storage::MapGrid2d.f = transmute(ptr); storage::MapGrid2d.is_loaded = true; }, _ => unsafe { storage::MapGrid2d.f = transmute(failing::MapGrid2d); storage::MapGrid2d.is_loaded = false; } }
    match loadfn("MapGrid2f") { ptr if !ptr.is_null() => unsafe { storage::MapGrid2f.f = transmute(ptr); storage::MapGrid2f.is_loaded = true; }, _ => unsafe { storage::MapGrid2f.f = transmute(failing::MapGrid2f); storage::MapGrid2f.is_loaded = false; } }
    match loadfn("MapGrid2xOES") { ptr if !ptr.is_null() => unsafe { storage::MapGrid2xOES.f = transmute(ptr); storage::MapGrid2xOES.is_loaded = true; }, _ => unsafe { storage::MapGrid2xOES.f = transmute(failing::MapGrid2xOES); storage::MapGrid2xOES.is_loaded = false; } }
    match loadfn("MapNamedBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::MapNamedBufferEXT.f = transmute(ptr); storage::MapNamedBufferEXT.is_loaded = true; }, _ => unsafe { storage::MapNamedBufferEXT.f = transmute(failing::MapNamedBufferEXT); storage::MapNamedBufferEXT.is_loaded = false; } }
    match loadfn("MapNamedBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::MapNamedBufferRangeEXT.f = transmute(ptr); storage::MapNamedBufferRangeEXT.is_loaded = true; }, _ => unsafe { storage::MapNamedBufferRangeEXT.f = transmute(failing::MapNamedBufferRangeEXT); storage::MapNamedBufferRangeEXT.is_loaded = false; } }
    match loadfn("MapObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::MapObjectBufferATI.f = transmute(ptr); storage::MapObjectBufferATI.is_loaded = true; }, _ => unsafe { storage::MapObjectBufferATI.f = transmute(failing::MapObjectBufferATI); storage::MapObjectBufferATI.is_loaded = false; } }
    match loadfn("MapParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::MapParameterfvNV.f = transmute(ptr); storage::MapParameterfvNV.is_loaded = true; }, _ => unsafe { storage::MapParameterfvNV.f = transmute(failing::MapParameterfvNV); storage::MapParameterfvNV.is_loaded = false; } }
    match loadfn("MapParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::MapParameterivNV.f = transmute(ptr); storage::MapParameterivNV.is_loaded = true; }, _ => unsafe { storage::MapParameterivNV.f = transmute(failing::MapParameterivNV); storage::MapParameterivNV.is_loaded = false; } }
    match loadfn("MapTexture2DINTEL") { ptr if !ptr.is_null() => unsafe { storage::MapTexture2DINTEL.f = transmute(ptr); storage::MapTexture2DINTEL.is_loaded = true; }, _ => unsafe { storage::MapTexture2DINTEL.f = transmute(failing::MapTexture2DINTEL); storage::MapTexture2DINTEL.is_loaded = false; } }
    match loadfn("MapVertexAttrib1dAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MapVertexAttrib1dAPPLE.f = transmute(ptr); storage::MapVertexAttrib1dAPPLE.is_loaded = true; }, _ => unsafe { storage::MapVertexAttrib1dAPPLE.f = transmute(failing::MapVertexAttrib1dAPPLE); storage::MapVertexAttrib1dAPPLE.is_loaded = false; } }
    match loadfn("MapVertexAttrib1fAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MapVertexAttrib1fAPPLE.f = transmute(ptr); storage::MapVertexAttrib1fAPPLE.is_loaded = true; }, _ => unsafe { storage::MapVertexAttrib1fAPPLE.f = transmute(failing::MapVertexAttrib1fAPPLE); storage::MapVertexAttrib1fAPPLE.is_loaded = false; } }
    match loadfn("MapVertexAttrib2dAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MapVertexAttrib2dAPPLE.f = transmute(ptr); storage::MapVertexAttrib2dAPPLE.is_loaded = true; }, _ => unsafe { storage::MapVertexAttrib2dAPPLE.f = transmute(failing::MapVertexAttrib2dAPPLE); storage::MapVertexAttrib2dAPPLE.is_loaded = false; } }
    match loadfn("MapVertexAttrib2fAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MapVertexAttrib2fAPPLE.f = transmute(ptr); storage::MapVertexAttrib2fAPPLE.is_loaded = true; }, _ => unsafe { storage::MapVertexAttrib2fAPPLE.f = transmute(failing::MapVertexAttrib2fAPPLE); storage::MapVertexAttrib2fAPPLE.is_loaded = false; } }
    match loadfn("Materialf") { ptr if !ptr.is_null() => unsafe { storage::Materialf.f = transmute(ptr); storage::Materialf.is_loaded = true; }, _ => unsafe { storage::Materialf.f = transmute(failing::Materialf); storage::Materialf.is_loaded = false; } }
    match loadfn("Materialfv") { ptr if !ptr.is_null() => unsafe { storage::Materialfv.f = transmute(ptr); storage::Materialfv.is_loaded = true; }, _ => unsafe { storage::Materialfv.f = transmute(failing::Materialfv); storage::Materialfv.is_loaded = false; } }
    match loadfn("Materiali") { ptr if !ptr.is_null() => unsafe { storage::Materiali.f = transmute(ptr); storage::Materiali.is_loaded = true; }, _ => unsafe { storage::Materiali.f = transmute(failing::Materiali); storage::Materiali.is_loaded = false; } }
    match loadfn("Materialiv") { ptr if !ptr.is_null() => unsafe { storage::Materialiv.f = transmute(ptr); storage::Materialiv.is_loaded = true; }, _ => unsafe { storage::Materialiv.f = transmute(failing::Materialiv); storage::Materialiv.is_loaded = false; } }
    match loadfn("Materialx") { ptr if !ptr.is_null() => unsafe { storage::Materialx.f = transmute(ptr); storage::Materialx.is_loaded = true; }, _ => unsafe { storage::Materialx.f = transmute(failing::Materialx); storage::Materialx.is_loaded = false; } }
    match loadfn("MaterialxOES") { ptr if !ptr.is_null() => unsafe { storage::MaterialxOES.f = transmute(ptr); storage::MaterialxOES.is_loaded = true; }, _ => unsafe { storage::MaterialxOES.f = transmute(failing::MaterialxOES); storage::MaterialxOES.is_loaded = false; } }
    match loadfn("Materialxv") { ptr if !ptr.is_null() => unsafe { storage::Materialxv.f = transmute(ptr); storage::Materialxv.is_loaded = true; }, _ => unsafe { storage::Materialxv.f = transmute(failing::Materialxv); storage::Materialxv.is_loaded = false; } }
    match loadfn("MaterialxvOES") { ptr if !ptr.is_null() => unsafe { storage::MaterialxvOES.f = transmute(ptr); storage::MaterialxvOES.is_loaded = true; }, _ => unsafe { storage::MaterialxvOES.f = transmute(failing::MaterialxvOES); storage::MaterialxvOES.is_loaded = false; } }
    match loadfn("MatrixFrustumEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixFrustumEXT.f = transmute(ptr); storage::MatrixFrustumEXT.is_loaded = true; }, _ => unsafe { storage::MatrixFrustumEXT.f = transmute(failing::MatrixFrustumEXT); storage::MatrixFrustumEXT.is_loaded = false; } }
    match loadfn("MatrixIndexPointerARB") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexPointerARB.f = transmute(ptr); storage::MatrixIndexPointerARB.is_loaded = true; }, _ => unsafe { storage::MatrixIndexPointerARB.f = transmute(failing::MatrixIndexPointerARB); storage::MatrixIndexPointerARB.is_loaded = false; } }
    match loadfn("MatrixIndexPointerOES") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexPointerOES.f = transmute(ptr); storage::MatrixIndexPointerOES.is_loaded = true; }, _ => unsafe { storage::MatrixIndexPointerOES.f = transmute(failing::MatrixIndexPointerOES); storage::MatrixIndexPointerOES.is_loaded = false; } }
    match loadfn("MatrixIndexubvARB") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexubvARB.f = transmute(ptr); storage::MatrixIndexubvARB.is_loaded = true; }, _ => unsafe { storage::MatrixIndexubvARB.f = transmute(failing::MatrixIndexubvARB); storage::MatrixIndexubvARB.is_loaded = false; } }
    match loadfn("MatrixIndexuivARB") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexuivARB.f = transmute(ptr); storage::MatrixIndexuivARB.is_loaded = true; }, _ => unsafe { storage::MatrixIndexuivARB.f = transmute(failing::MatrixIndexuivARB); storage::MatrixIndexuivARB.is_loaded = false; } }
    match loadfn("MatrixIndexusvARB") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexusvARB.f = transmute(ptr); storage::MatrixIndexusvARB.is_loaded = true; }, _ => unsafe { storage::MatrixIndexusvARB.f = transmute(failing::MatrixIndexusvARB); storage::MatrixIndexusvARB.is_loaded = false; } }
    match loadfn("MatrixLoadIdentityEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoadIdentityEXT.f = transmute(ptr); storage::MatrixLoadIdentityEXT.is_loaded = true; }, _ => unsafe { storage::MatrixLoadIdentityEXT.f = transmute(failing::MatrixLoadIdentityEXT); storage::MatrixLoadIdentityEXT.is_loaded = false; } }
    match loadfn("MatrixLoadTransposedEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoadTransposedEXT.f = transmute(ptr); storage::MatrixLoadTransposedEXT.is_loaded = true; }, _ => unsafe { storage::MatrixLoadTransposedEXT.f = transmute(failing::MatrixLoadTransposedEXT); storage::MatrixLoadTransposedEXT.is_loaded = false; } }
    match loadfn("MatrixLoadTransposefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoadTransposefEXT.f = transmute(ptr); storage::MatrixLoadTransposefEXT.is_loaded = true; }, _ => unsafe { storage::MatrixLoadTransposefEXT.f = transmute(failing::MatrixLoadTransposefEXT); storage::MatrixLoadTransposefEXT.is_loaded = false; } }
    match loadfn("MatrixLoaddEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoaddEXT.f = transmute(ptr); storage::MatrixLoaddEXT.is_loaded = true; }, _ => unsafe { storage::MatrixLoaddEXT.f = transmute(failing::MatrixLoaddEXT); storage::MatrixLoaddEXT.is_loaded = false; } }
    match loadfn("MatrixLoadfEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoadfEXT.f = transmute(ptr); storage::MatrixLoadfEXT.is_loaded = true; }, _ => unsafe { storage::MatrixLoadfEXT.f = transmute(failing::MatrixLoadfEXT); storage::MatrixLoadfEXT.is_loaded = false; } }
    match loadfn("MatrixMode") { ptr if !ptr.is_null() => unsafe { storage::MatrixMode.f = transmute(ptr); storage::MatrixMode.is_loaded = true; }, _ => unsafe { storage::MatrixMode.f = transmute(failing::MatrixMode); storage::MatrixMode.is_loaded = false; } }
    match loadfn("MatrixMultTransposedEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixMultTransposedEXT.f = transmute(ptr); storage::MatrixMultTransposedEXT.is_loaded = true; }, _ => unsafe { storage::MatrixMultTransposedEXT.f = transmute(failing::MatrixMultTransposedEXT); storage::MatrixMultTransposedEXT.is_loaded = false; } }
    match loadfn("MatrixMultTransposefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixMultTransposefEXT.f = transmute(ptr); storage::MatrixMultTransposefEXT.is_loaded = true; }, _ => unsafe { storage::MatrixMultTransposefEXT.f = transmute(failing::MatrixMultTransposefEXT); storage::MatrixMultTransposefEXT.is_loaded = false; } }
    match loadfn("MatrixMultdEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixMultdEXT.f = transmute(ptr); storage::MatrixMultdEXT.is_loaded = true; }, _ => unsafe { storage::MatrixMultdEXT.f = transmute(failing::MatrixMultdEXT); storage::MatrixMultdEXT.is_loaded = false; } }
    match loadfn("MatrixMultfEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixMultfEXT.f = transmute(ptr); storage::MatrixMultfEXT.is_loaded = true; }, _ => unsafe { storage::MatrixMultfEXT.f = transmute(failing::MatrixMultfEXT); storage::MatrixMultfEXT.is_loaded = false; } }
    match loadfn("MatrixOrthoEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixOrthoEXT.f = transmute(ptr); storage::MatrixOrthoEXT.is_loaded = true; }, _ => unsafe { storage::MatrixOrthoEXT.f = transmute(failing::MatrixOrthoEXT); storage::MatrixOrthoEXT.is_loaded = false; } }
    match loadfn("MatrixPopEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixPopEXT.f = transmute(ptr); storage::MatrixPopEXT.is_loaded = true; }, _ => unsafe { storage::MatrixPopEXT.f = transmute(failing::MatrixPopEXT); storage::MatrixPopEXT.is_loaded = false; } }
    match loadfn("MatrixPushEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixPushEXT.f = transmute(ptr); storage::MatrixPushEXT.is_loaded = true; }, _ => unsafe { storage::MatrixPushEXT.f = transmute(failing::MatrixPushEXT); storage::MatrixPushEXT.is_loaded = false; } }
    match loadfn("MatrixRotatedEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixRotatedEXT.f = transmute(ptr); storage::MatrixRotatedEXT.is_loaded = true; }, _ => unsafe { storage::MatrixRotatedEXT.f = transmute(failing::MatrixRotatedEXT); storage::MatrixRotatedEXT.is_loaded = false; } }
    match loadfn("MatrixRotatefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixRotatefEXT.f = transmute(ptr); storage::MatrixRotatefEXT.is_loaded = true; }, _ => unsafe { storage::MatrixRotatefEXT.f = transmute(failing::MatrixRotatefEXT); storage::MatrixRotatefEXT.is_loaded = false; } }
    match loadfn("MatrixScaledEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixScaledEXT.f = transmute(ptr); storage::MatrixScaledEXT.is_loaded = true; }, _ => unsafe { storage::MatrixScaledEXT.f = transmute(failing::MatrixScaledEXT); storage::MatrixScaledEXT.is_loaded = false; } }
    match loadfn("MatrixScalefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixScalefEXT.f = transmute(ptr); storage::MatrixScalefEXT.is_loaded = true; }, _ => unsafe { storage::MatrixScalefEXT.f = transmute(failing::MatrixScalefEXT); storage::MatrixScalefEXT.is_loaded = false; } }
    match loadfn("MatrixTranslatedEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixTranslatedEXT.f = transmute(ptr); storage::MatrixTranslatedEXT.is_loaded = true; }, _ => unsafe { storage::MatrixTranslatedEXT.f = transmute(failing::MatrixTranslatedEXT); storage::MatrixTranslatedEXT.is_loaded = false; } }
    match loadfn("MatrixTranslatefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixTranslatefEXT.f = transmute(ptr); storage::MatrixTranslatefEXT.is_loaded = true; }, _ => unsafe { storage::MatrixTranslatefEXT.f = transmute(failing::MatrixTranslatefEXT); storage::MatrixTranslatefEXT.is_loaded = false; } }
    match loadfn("MemoryBarrier") { ptr if !ptr.is_null() => unsafe { storage::MemoryBarrier.f = transmute(ptr); storage::MemoryBarrier.is_loaded = true; }, _ => unsafe { storage::MemoryBarrier.f = transmute(failing::MemoryBarrier); storage::MemoryBarrier.is_loaded = false; } }
    match loadfn("MemoryBarrierEXT") { ptr if !ptr.is_null() => unsafe { storage::MemoryBarrierEXT.f = transmute(ptr); storage::MemoryBarrierEXT.is_loaded = true; }, _ => unsafe { storage::MemoryBarrierEXT.f = transmute(failing::MemoryBarrierEXT); storage::MemoryBarrierEXT.is_loaded = false; } }
    match loadfn("MinSampleShading") { ptr if !ptr.is_null() => unsafe { storage::MinSampleShading.f = transmute(ptr); storage::MinSampleShading.is_loaded = true; }, _ => unsafe { storage::MinSampleShading.f = transmute(failing::MinSampleShading); storage::MinSampleShading.is_loaded = false; } }
    match loadfn("MinSampleShadingARB") { ptr if !ptr.is_null() => unsafe { storage::MinSampleShadingARB.f = transmute(ptr); storage::MinSampleShadingARB.is_loaded = true; }, _ => unsafe { storage::MinSampleShadingARB.f = transmute(failing::MinSampleShadingARB); storage::MinSampleShadingARB.is_loaded = false; } }
    match loadfn("Minmax") { ptr if !ptr.is_null() => unsafe { storage::Minmax.f = transmute(ptr); storage::Minmax.is_loaded = true; }, _ => unsafe { storage::Minmax.f = transmute(failing::Minmax); storage::Minmax.is_loaded = false; } }
    match loadfn("MinmaxEXT") { ptr if !ptr.is_null() => unsafe { storage::MinmaxEXT.f = transmute(ptr); storage::MinmaxEXT.is_loaded = true; }, _ => unsafe { storage::MinmaxEXT.f = transmute(failing::MinmaxEXT); storage::MinmaxEXT.is_loaded = false; } }
    match loadfn("MultMatrixd") { ptr if !ptr.is_null() => unsafe { storage::MultMatrixd.f = transmute(ptr); storage::MultMatrixd.is_loaded = true; }, _ => unsafe { storage::MultMatrixd.f = transmute(failing::MultMatrixd); storage::MultMatrixd.is_loaded = false; } }
    match loadfn("MultMatrixf") { ptr if !ptr.is_null() => unsafe { storage::MultMatrixf.f = transmute(ptr); storage::MultMatrixf.is_loaded = true; }, _ => unsafe { storage::MultMatrixf.f = transmute(failing::MultMatrixf); storage::MultMatrixf.is_loaded = false; } }
    match loadfn("MultMatrixx") { ptr if !ptr.is_null() => unsafe { storage::MultMatrixx.f = transmute(ptr); storage::MultMatrixx.is_loaded = true; }, _ => unsafe { storage::MultMatrixx.f = transmute(failing::MultMatrixx); storage::MultMatrixx.is_loaded = false; } }
    match loadfn("MultMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::MultMatrixxOES.f = transmute(ptr); storage::MultMatrixxOES.is_loaded = true; }, _ => unsafe { storage::MultMatrixxOES.f = transmute(failing::MultMatrixxOES); storage::MultMatrixxOES.is_loaded = false; } }
    match loadfn("MultTransposeMatrixd") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixd.f = transmute(ptr); storage::MultTransposeMatrixd.is_loaded = true; }, _ => unsafe { storage::MultTransposeMatrixd.f = transmute(failing::MultTransposeMatrixd); storage::MultTransposeMatrixd.is_loaded = false; } }
    match loadfn("MultTransposeMatrixdARB") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixdARB.f = transmute(ptr); storage::MultTransposeMatrixdARB.is_loaded = true; }, _ => unsafe { storage::MultTransposeMatrixdARB.f = transmute(failing::MultTransposeMatrixdARB); storage::MultTransposeMatrixdARB.is_loaded = false; } }
    match loadfn("MultTransposeMatrixf") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixf.f = transmute(ptr); storage::MultTransposeMatrixf.is_loaded = true; }, _ => unsafe { storage::MultTransposeMatrixf.f = transmute(failing::MultTransposeMatrixf); storage::MultTransposeMatrixf.is_loaded = false; } }
    match loadfn("MultTransposeMatrixfARB") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixfARB.f = transmute(ptr); storage::MultTransposeMatrixfARB.is_loaded = true; }, _ => unsafe { storage::MultTransposeMatrixfARB.f = transmute(failing::MultTransposeMatrixfARB); storage::MultTransposeMatrixfARB.is_loaded = false; } }
    match loadfn("MultTransposeMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixxOES.f = transmute(ptr); storage::MultTransposeMatrixxOES.is_loaded = true; }, _ => unsafe { storage::MultTransposeMatrixxOES.f = transmute(failing::MultTransposeMatrixxOES); storage::MultTransposeMatrixxOES.is_loaded = false; } }
    match loadfn("MultiDrawArrays") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArrays.f = transmute(ptr); storage::MultiDrawArrays.is_loaded = true; }, _ => unsafe { storage::MultiDrawArrays.f = transmute(failing::MultiDrawArrays); storage::MultiDrawArrays.is_loaded = false; } }
    match loadfn("MultiDrawArraysEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysEXT.f = transmute(ptr); storage::MultiDrawArraysEXT.is_loaded = true; }, _ => unsafe { storage::MultiDrawArraysEXT.f = transmute(failing::MultiDrawArraysEXT); storage::MultiDrawArraysEXT.is_loaded = false; } }
    match loadfn("MultiDrawArraysIndirect") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysIndirect.f = transmute(ptr); storage::MultiDrawArraysIndirect.is_loaded = true; }, _ => unsafe { storage::MultiDrawArraysIndirect.f = transmute(failing::MultiDrawArraysIndirect); storage::MultiDrawArraysIndirect.is_loaded = false; } }
    match loadfn("MultiDrawArraysIndirectAMD") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysIndirectAMD.f = transmute(ptr); storage::MultiDrawArraysIndirectAMD.is_loaded = true; }, _ => unsafe { storage::MultiDrawArraysIndirectAMD.f = transmute(failing::MultiDrawArraysIndirectAMD); storage::MultiDrawArraysIndirectAMD.is_loaded = false; } }
    match loadfn("MultiDrawArraysIndirectBindlessNV") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysIndirectBindlessNV.f = transmute(ptr); storage::MultiDrawArraysIndirectBindlessNV.is_loaded = true; }, _ => unsafe { storage::MultiDrawArraysIndirectBindlessNV.f = transmute(failing::MultiDrawArraysIndirectBindlessNV); storage::MultiDrawArraysIndirectBindlessNV.is_loaded = false; } }
    match loadfn("MultiDrawElementsIndirectBindlessNV") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsIndirectBindlessNV.f = transmute(ptr); storage::MultiDrawElementsIndirectBindlessNV.is_loaded = true; }, _ => unsafe { storage::MultiDrawElementsIndirectBindlessNV.f = transmute(failing::MultiDrawElementsIndirectBindlessNV); storage::MultiDrawElementsIndirectBindlessNV.is_loaded = false; } }
    match loadfn("MultiDrawArraysIndirectCountARB") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysIndirectCountARB.f = transmute(ptr); storage::MultiDrawArraysIndirectCountARB.is_loaded = true; }, _ => unsafe { storage::MultiDrawArraysIndirectCountARB.f = transmute(failing::MultiDrawArraysIndirectCountARB); storage::MultiDrawArraysIndirectCountARB.is_loaded = false; } }
    match loadfn("MultiDrawElementArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementArrayAPPLE.f = transmute(ptr); storage::MultiDrawElementArrayAPPLE.is_loaded = true; }, _ => unsafe { storage::MultiDrawElementArrayAPPLE.f = transmute(failing::MultiDrawElementArrayAPPLE); storage::MultiDrawElementArrayAPPLE.is_loaded = false; } }
    match loadfn("MultiDrawElements") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElements.f = transmute(ptr); storage::MultiDrawElements.is_loaded = true; }, _ => unsafe { storage::MultiDrawElements.f = transmute(failing::MultiDrawElements); storage::MultiDrawElements.is_loaded = false; } }
    match loadfn("MultiDrawElementsBaseVertex") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsBaseVertex.f = transmute(ptr); storage::MultiDrawElementsBaseVertex.is_loaded = true; }, _ => unsafe { storage::MultiDrawElementsBaseVertex.f = transmute(failing::MultiDrawElementsBaseVertex); storage::MultiDrawElementsBaseVertex.is_loaded = false; } }
    match loadfn("MultiDrawElementsEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsEXT.f = transmute(ptr); storage::MultiDrawElementsEXT.is_loaded = true; }, _ => unsafe { storage::MultiDrawElementsEXT.f = transmute(failing::MultiDrawElementsEXT); storage::MultiDrawElementsEXT.is_loaded = false; } }
    match loadfn("MultiDrawElementsIndirect") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsIndirect.f = transmute(ptr); storage::MultiDrawElementsIndirect.is_loaded = true; }, _ => unsafe { storage::MultiDrawElementsIndirect.f = transmute(failing::MultiDrawElementsIndirect); storage::MultiDrawElementsIndirect.is_loaded = false; } }
    match loadfn("MultiDrawElementsIndirectAMD") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsIndirectAMD.f = transmute(ptr); storage::MultiDrawElementsIndirectAMD.is_loaded = true; }, _ => unsafe { storage::MultiDrawElementsIndirectAMD.f = transmute(failing::MultiDrawElementsIndirectAMD); storage::MultiDrawElementsIndirectAMD.is_loaded = false; } }
    match loadfn("MultiDrawElementsIndirectCountARB") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsIndirectCountARB.f = transmute(ptr); storage::MultiDrawElementsIndirectCountARB.is_loaded = true; }, _ => unsafe { storage::MultiDrawElementsIndirectCountARB.f = transmute(failing::MultiDrawElementsIndirectCountARB); storage::MultiDrawElementsIndirectCountARB.is_loaded = false; } }
    match loadfn("MultiDrawRangeElementArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawRangeElementArrayAPPLE.f = transmute(ptr); storage::MultiDrawRangeElementArrayAPPLE.is_loaded = true; }, _ => unsafe { storage::MultiDrawRangeElementArrayAPPLE.f = transmute(failing::MultiDrawRangeElementArrayAPPLE); storage::MultiDrawRangeElementArrayAPPLE.is_loaded = false; } }
    match loadfn("MultiModeDrawArraysIBM") { ptr if !ptr.is_null() => unsafe { storage::MultiModeDrawArraysIBM.f = transmute(ptr); storage::MultiModeDrawArraysIBM.is_loaded = true; }, _ => unsafe { storage::MultiModeDrawArraysIBM.f = transmute(failing::MultiModeDrawArraysIBM); storage::MultiModeDrawArraysIBM.is_loaded = false; } }
    match loadfn("MultiModeDrawElementsIBM") { ptr if !ptr.is_null() => unsafe { storage::MultiModeDrawElementsIBM.f = transmute(ptr); storage::MultiModeDrawElementsIBM.is_loaded = true; }, _ => unsafe { storage::MultiModeDrawElementsIBM.f = transmute(failing::MultiModeDrawElementsIBM); storage::MultiModeDrawElementsIBM.is_loaded = false; } }
    match loadfn("MultiTexBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexBufferEXT.f = transmute(ptr); storage::MultiTexBufferEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexBufferEXT.f = transmute(failing::MultiTexBufferEXT); storage::MultiTexBufferEXT.is_loaded = false; } }
    match loadfn("MultiTexCoord1bOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1bOES.f = transmute(ptr); storage::MultiTexCoord1bOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1bOES.f = transmute(failing::MultiTexCoord1bOES); storage::MultiTexCoord1bOES.is_loaded = false; } }
    match loadfn("MultiTexCoord1bvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1bvOES.f = transmute(ptr); storage::MultiTexCoord1bvOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1bvOES.f = transmute(failing::MultiTexCoord1bvOES); storage::MultiTexCoord1bvOES.is_loaded = false; } }
    match loadfn("MultiTexCoord1d") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1d.f = transmute(ptr); storage::MultiTexCoord1d.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1d.f = transmute(failing::MultiTexCoord1d); storage::MultiTexCoord1d.is_loaded = false; } }
    match loadfn("MultiTexCoord1dARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1dARB.f = transmute(ptr); storage::MultiTexCoord1dARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1dARB.f = transmute(failing::MultiTexCoord1dARB); storage::MultiTexCoord1dARB.is_loaded = false; } }
    match loadfn("MultiTexCoord1dv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1dv.f = transmute(ptr); storage::MultiTexCoord1dv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1dv.f = transmute(failing::MultiTexCoord1dv); storage::MultiTexCoord1dv.is_loaded = false; } }
    match loadfn("MultiTexCoord1dvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1dvARB.f = transmute(ptr); storage::MultiTexCoord1dvARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1dvARB.f = transmute(failing::MultiTexCoord1dvARB); storage::MultiTexCoord1dvARB.is_loaded = false; } }
    match loadfn("MultiTexCoord1f") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1f.f = transmute(ptr); storage::MultiTexCoord1f.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1f.f = transmute(failing::MultiTexCoord1f); storage::MultiTexCoord1f.is_loaded = false; } }
    match loadfn("MultiTexCoord1fARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1fARB.f = transmute(ptr); storage::MultiTexCoord1fARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1fARB.f = transmute(failing::MultiTexCoord1fARB); storage::MultiTexCoord1fARB.is_loaded = false; } }
    match loadfn("MultiTexCoord1fv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1fv.f = transmute(ptr); storage::MultiTexCoord1fv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1fv.f = transmute(failing::MultiTexCoord1fv); storage::MultiTexCoord1fv.is_loaded = false; } }
    match loadfn("MultiTexCoord1fvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1fvARB.f = transmute(ptr); storage::MultiTexCoord1fvARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1fvARB.f = transmute(failing::MultiTexCoord1fvARB); storage::MultiTexCoord1fvARB.is_loaded = false; } }
    match loadfn("MultiTexCoord1hNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1hNV.f = transmute(ptr); storage::MultiTexCoord1hNV.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1hNV.f = transmute(failing::MultiTexCoord1hNV); storage::MultiTexCoord1hNV.is_loaded = false; } }
    match loadfn("MultiTexCoord1hvNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1hvNV.f = transmute(ptr); storage::MultiTexCoord1hvNV.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1hvNV.f = transmute(failing::MultiTexCoord1hvNV); storage::MultiTexCoord1hvNV.is_loaded = false; } }
    match loadfn("MultiTexCoord1i") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1i.f = transmute(ptr); storage::MultiTexCoord1i.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1i.f = transmute(failing::MultiTexCoord1i); storage::MultiTexCoord1i.is_loaded = false; } }
    match loadfn("MultiTexCoord1iARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1iARB.f = transmute(ptr); storage::MultiTexCoord1iARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1iARB.f = transmute(failing::MultiTexCoord1iARB); storage::MultiTexCoord1iARB.is_loaded = false; } }
    match loadfn("MultiTexCoord1iv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1iv.f = transmute(ptr); storage::MultiTexCoord1iv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1iv.f = transmute(failing::MultiTexCoord1iv); storage::MultiTexCoord1iv.is_loaded = false; } }
    match loadfn("MultiTexCoord1ivARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1ivARB.f = transmute(ptr); storage::MultiTexCoord1ivARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1ivARB.f = transmute(failing::MultiTexCoord1ivARB); storage::MultiTexCoord1ivARB.is_loaded = false; } }
    match loadfn("MultiTexCoord1s") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1s.f = transmute(ptr); storage::MultiTexCoord1s.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1s.f = transmute(failing::MultiTexCoord1s); storage::MultiTexCoord1s.is_loaded = false; } }
    match loadfn("MultiTexCoord1sARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1sARB.f = transmute(ptr); storage::MultiTexCoord1sARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1sARB.f = transmute(failing::MultiTexCoord1sARB); storage::MultiTexCoord1sARB.is_loaded = false; } }
    match loadfn("MultiTexCoord1sv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1sv.f = transmute(ptr); storage::MultiTexCoord1sv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1sv.f = transmute(failing::MultiTexCoord1sv); storage::MultiTexCoord1sv.is_loaded = false; } }
    match loadfn("MultiTexCoord1svARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1svARB.f = transmute(ptr); storage::MultiTexCoord1svARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1svARB.f = transmute(failing::MultiTexCoord1svARB); storage::MultiTexCoord1svARB.is_loaded = false; } }
    match loadfn("MultiTexCoord1xOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1xOES.f = transmute(ptr); storage::MultiTexCoord1xOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1xOES.f = transmute(failing::MultiTexCoord1xOES); storage::MultiTexCoord1xOES.is_loaded = false; } }
    match loadfn("MultiTexCoord1xvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1xvOES.f = transmute(ptr); storage::MultiTexCoord1xvOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord1xvOES.f = transmute(failing::MultiTexCoord1xvOES); storage::MultiTexCoord1xvOES.is_loaded = false; } }
    match loadfn("MultiTexCoord2bOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2bOES.f = transmute(ptr); storage::MultiTexCoord2bOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2bOES.f = transmute(failing::MultiTexCoord2bOES); storage::MultiTexCoord2bOES.is_loaded = false; } }
    match loadfn("MultiTexCoord2bvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2bvOES.f = transmute(ptr); storage::MultiTexCoord2bvOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2bvOES.f = transmute(failing::MultiTexCoord2bvOES); storage::MultiTexCoord2bvOES.is_loaded = false; } }
    match loadfn("MultiTexCoord2d") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2d.f = transmute(ptr); storage::MultiTexCoord2d.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2d.f = transmute(failing::MultiTexCoord2d); storage::MultiTexCoord2d.is_loaded = false; } }
    match loadfn("MultiTexCoord2dARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2dARB.f = transmute(ptr); storage::MultiTexCoord2dARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2dARB.f = transmute(failing::MultiTexCoord2dARB); storage::MultiTexCoord2dARB.is_loaded = false; } }
    match loadfn("MultiTexCoord2dv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2dv.f = transmute(ptr); storage::MultiTexCoord2dv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2dv.f = transmute(failing::MultiTexCoord2dv); storage::MultiTexCoord2dv.is_loaded = false; } }
    match loadfn("MultiTexCoord2dvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2dvARB.f = transmute(ptr); storage::MultiTexCoord2dvARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2dvARB.f = transmute(failing::MultiTexCoord2dvARB); storage::MultiTexCoord2dvARB.is_loaded = false; } }
    match loadfn("MultiTexCoord2f") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2f.f = transmute(ptr); storage::MultiTexCoord2f.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2f.f = transmute(failing::MultiTexCoord2f); storage::MultiTexCoord2f.is_loaded = false; } }
    match loadfn("MultiTexCoord2fARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2fARB.f = transmute(ptr); storage::MultiTexCoord2fARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2fARB.f = transmute(failing::MultiTexCoord2fARB); storage::MultiTexCoord2fARB.is_loaded = false; } }
    match loadfn("MultiTexCoord2fv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2fv.f = transmute(ptr); storage::MultiTexCoord2fv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2fv.f = transmute(failing::MultiTexCoord2fv); storage::MultiTexCoord2fv.is_loaded = false; } }
    match loadfn("MultiTexCoord2fvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2fvARB.f = transmute(ptr); storage::MultiTexCoord2fvARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2fvARB.f = transmute(failing::MultiTexCoord2fvARB); storage::MultiTexCoord2fvARB.is_loaded = false; } }
    match loadfn("MultiTexCoord2hNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2hNV.f = transmute(ptr); storage::MultiTexCoord2hNV.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2hNV.f = transmute(failing::MultiTexCoord2hNV); storage::MultiTexCoord2hNV.is_loaded = false; } }
    match loadfn("MultiTexCoord2hvNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2hvNV.f = transmute(ptr); storage::MultiTexCoord2hvNV.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2hvNV.f = transmute(failing::MultiTexCoord2hvNV); storage::MultiTexCoord2hvNV.is_loaded = false; } }
    match loadfn("MultiTexCoord2i") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2i.f = transmute(ptr); storage::MultiTexCoord2i.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2i.f = transmute(failing::MultiTexCoord2i); storage::MultiTexCoord2i.is_loaded = false; } }
    match loadfn("MultiTexCoord2iARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2iARB.f = transmute(ptr); storage::MultiTexCoord2iARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2iARB.f = transmute(failing::MultiTexCoord2iARB); storage::MultiTexCoord2iARB.is_loaded = false; } }
    match loadfn("MultiTexCoord2iv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2iv.f = transmute(ptr); storage::MultiTexCoord2iv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2iv.f = transmute(failing::MultiTexCoord2iv); storage::MultiTexCoord2iv.is_loaded = false; } }
    match loadfn("MultiTexCoord2ivARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2ivARB.f = transmute(ptr); storage::MultiTexCoord2ivARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2ivARB.f = transmute(failing::MultiTexCoord2ivARB); storage::MultiTexCoord2ivARB.is_loaded = false; } }
    match loadfn("MultiTexCoord2s") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2s.f = transmute(ptr); storage::MultiTexCoord2s.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2s.f = transmute(failing::MultiTexCoord2s); storage::MultiTexCoord2s.is_loaded = false; } }
    match loadfn("MultiTexCoord2sARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2sARB.f = transmute(ptr); storage::MultiTexCoord2sARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2sARB.f = transmute(failing::MultiTexCoord2sARB); storage::MultiTexCoord2sARB.is_loaded = false; } }
    match loadfn("MultiTexCoord2sv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2sv.f = transmute(ptr); storage::MultiTexCoord2sv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2sv.f = transmute(failing::MultiTexCoord2sv); storage::MultiTexCoord2sv.is_loaded = false; } }
    match loadfn("MultiTexCoord2svARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2svARB.f = transmute(ptr); storage::MultiTexCoord2svARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2svARB.f = transmute(failing::MultiTexCoord2svARB); storage::MultiTexCoord2svARB.is_loaded = false; } }
    match loadfn("MultiTexCoord2xOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2xOES.f = transmute(ptr); storage::MultiTexCoord2xOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2xOES.f = transmute(failing::MultiTexCoord2xOES); storage::MultiTexCoord2xOES.is_loaded = false; } }
    match loadfn("MultiTexCoord2xvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2xvOES.f = transmute(ptr); storage::MultiTexCoord2xvOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord2xvOES.f = transmute(failing::MultiTexCoord2xvOES); storage::MultiTexCoord2xvOES.is_loaded = false; } }
    match loadfn("MultiTexCoord3bOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3bOES.f = transmute(ptr); storage::MultiTexCoord3bOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3bOES.f = transmute(failing::MultiTexCoord3bOES); storage::MultiTexCoord3bOES.is_loaded = false; } }
    match loadfn("MultiTexCoord3bvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3bvOES.f = transmute(ptr); storage::MultiTexCoord3bvOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3bvOES.f = transmute(failing::MultiTexCoord3bvOES); storage::MultiTexCoord3bvOES.is_loaded = false; } }
    match loadfn("MultiTexCoord3d") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3d.f = transmute(ptr); storage::MultiTexCoord3d.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3d.f = transmute(failing::MultiTexCoord3d); storage::MultiTexCoord3d.is_loaded = false; } }
    match loadfn("MultiTexCoord3dARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3dARB.f = transmute(ptr); storage::MultiTexCoord3dARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3dARB.f = transmute(failing::MultiTexCoord3dARB); storage::MultiTexCoord3dARB.is_loaded = false; } }
    match loadfn("MultiTexCoord3dv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3dv.f = transmute(ptr); storage::MultiTexCoord3dv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3dv.f = transmute(failing::MultiTexCoord3dv); storage::MultiTexCoord3dv.is_loaded = false; } }
    match loadfn("MultiTexCoord3dvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3dvARB.f = transmute(ptr); storage::MultiTexCoord3dvARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3dvARB.f = transmute(failing::MultiTexCoord3dvARB); storage::MultiTexCoord3dvARB.is_loaded = false; } }
    match loadfn("MultiTexCoord3f") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3f.f = transmute(ptr); storage::MultiTexCoord3f.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3f.f = transmute(failing::MultiTexCoord3f); storage::MultiTexCoord3f.is_loaded = false; } }
    match loadfn("MultiTexCoord3fARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3fARB.f = transmute(ptr); storage::MultiTexCoord3fARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3fARB.f = transmute(failing::MultiTexCoord3fARB); storage::MultiTexCoord3fARB.is_loaded = false; } }
    match loadfn("MultiTexCoord3fv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3fv.f = transmute(ptr); storage::MultiTexCoord3fv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3fv.f = transmute(failing::MultiTexCoord3fv); storage::MultiTexCoord3fv.is_loaded = false; } }
    match loadfn("MultiTexCoord3fvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3fvARB.f = transmute(ptr); storage::MultiTexCoord3fvARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3fvARB.f = transmute(failing::MultiTexCoord3fvARB); storage::MultiTexCoord3fvARB.is_loaded = false; } }
    match loadfn("MultiTexCoord3hNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3hNV.f = transmute(ptr); storage::MultiTexCoord3hNV.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3hNV.f = transmute(failing::MultiTexCoord3hNV); storage::MultiTexCoord3hNV.is_loaded = false; } }
    match loadfn("MultiTexCoord3hvNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3hvNV.f = transmute(ptr); storage::MultiTexCoord3hvNV.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3hvNV.f = transmute(failing::MultiTexCoord3hvNV); storage::MultiTexCoord3hvNV.is_loaded = false; } }
    match loadfn("MultiTexCoord3i") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3i.f = transmute(ptr); storage::MultiTexCoord3i.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3i.f = transmute(failing::MultiTexCoord3i); storage::MultiTexCoord3i.is_loaded = false; } }
    match loadfn("MultiTexCoord3iARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3iARB.f = transmute(ptr); storage::MultiTexCoord3iARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3iARB.f = transmute(failing::MultiTexCoord3iARB); storage::MultiTexCoord3iARB.is_loaded = false; } }
    match loadfn("MultiTexCoord3iv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3iv.f = transmute(ptr); storage::MultiTexCoord3iv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3iv.f = transmute(failing::MultiTexCoord3iv); storage::MultiTexCoord3iv.is_loaded = false; } }
    match loadfn("MultiTexCoord3ivARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3ivARB.f = transmute(ptr); storage::MultiTexCoord3ivARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3ivARB.f = transmute(failing::MultiTexCoord3ivARB); storage::MultiTexCoord3ivARB.is_loaded = false; } }
    match loadfn("MultiTexCoord3s") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3s.f = transmute(ptr); storage::MultiTexCoord3s.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3s.f = transmute(failing::MultiTexCoord3s); storage::MultiTexCoord3s.is_loaded = false; } }
    match loadfn("MultiTexCoord3sARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3sARB.f = transmute(ptr); storage::MultiTexCoord3sARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3sARB.f = transmute(failing::MultiTexCoord3sARB); storage::MultiTexCoord3sARB.is_loaded = false; } }
    match loadfn("MultiTexCoord3sv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3sv.f = transmute(ptr); storage::MultiTexCoord3sv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3sv.f = transmute(failing::MultiTexCoord3sv); storage::MultiTexCoord3sv.is_loaded = false; } }
    match loadfn("MultiTexCoord3svARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3svARB.f = transmute(ptr); storage::MultiTexCoord3svARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3svARB.f = transmute(failing::MultiTexCoord3svARB); storage::MultiTexCoord3svARB.is_loaded = false; } }
    match loadfn("MultiTexCoord3xOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3xOES.f = transmute(ptr); storage::MultiTexCoord3xOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3xOES.f = transmute(failing::MultiTexCoord3xOES); storage::MultiTexCoord3xOES.is_loaded = false; } }
    match loadfn("MultiTexCoord3xvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3xvOES.f = transmute(ptr); storage::MultiTexCoord3xvOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord3xvOES.f = transmute(failing::MultiTexCoord3xvOES); storage::MultiTexCoord3xvOES.is_loaded = false; } }
    match loadfn("MultiTexCoord4bOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4bOES.f = transmute(ptr); storage::MultiTexCoord4bOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4bOES.f = transmute(failing::MultiTexCoord4bOES); storage::MultiTexCoord4bOES.is_loaded = false; } }
    match loadfn("MultiTexCoord4bvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4bvOES.f = transmute(ptr); storage::MultiTexCoord4bvOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4bvOES.f = transmute(failing::MultiTexCoord4bvOES); storage::MultiTexCoord4bvOES.is_loaded = false; } }
    match loadfn("MultiTexCoord4d") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4d.f = transmute(ptr); storage::MultiTexCoord4d.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4d.f = transmute(failing::MultiTexCoord4d); storage::MultiTexCoord4d.is_loaded = false; } }
    match loadfn("MultiTexCoord4dARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4dARB.f = transmute(ptr); storage::MultiTexCoord4dARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4dARB.f = transmute(failing::MultiTexCoord4dARB); storage::MultiTexCoord4dARB.is_loaded = false; } }
    match loadfn("MultiTexCoord4dv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4dv.f = transmute(ptr); storage::MultiTexCoord4dv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4dv.f = transmute(failing::MultiTexCoord4dv); storage::MultiTexCoord4dv.is_loaded = false; } }
    match loadfn("MultiTexCoord4dvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4dvARB.f = transmute(ptr); storage::MultiTexCoord4dvARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4dvARB.f = transmute(failing::MultiTexCoord4dvARB); storage::MultiTexCoord4dvARB.is_loaded = false; } }
    match loadfn("MultiTexCoord4f") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4f.f = transmute(ptr); storage::MultiTexCoord4f.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4f.f = transmute(failing::MultiTexCoord4f); storage::MultiTexCoord4f.is_loaded = false; } }
    match loadfn("MultiTexCoord4fARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4fARB.f = transmute(ptr); storage::MultiTexCoord4fARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4fARB.f = transmute(failing::MultiTexCoord4fARB); storage::MultiTexCoord4fARB.is_loaded = false; } }
    match loadfn("MultiTexCoord4fv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4fv.f = transmute(ptr); storage::MultiTexCoord4fv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4fv.f = transmute(failing::MultiTexCoord4fv); storage::MultiTexCoord4fv.is_loaded = false; } }
    match loadfn("MultiTexCoord4fvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4fvARB.f = transmute(ptr); storage::MultiTexCoord4fvARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4fvARB.f = transmute(failing::MultiTexCoord4fvARB); storage::MultiTexCoord4fvARB.is_loaded = false; } }
    match loadfn("MultiTexCoord4hNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4hNV.f = transmute(ptr); storage::MultiTexCoord4hNV.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4hNV.f = transmute(failing::MultiTexCoord4hNV); storage::MultiTexCoord4hNV.is_loaded = false; } }
    match loadfn("MultiTexCoord4hvNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4hvNV.f = transmute(ptr); storage::MultiTexCoord4hvNV.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4hvNV.f = transmute(failing::MultiTexCoord4hvNV); storage::MultiTexCoord4hvNV.is_loaded = false; } }
    match loadfn("MultiTexCoord4i") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4i.f = transmute(ptr); storage::MultiTexCoord4i.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4i.f = transmute(failing::MultiTexCoord4i); storage::MultiTexCoord4i.is_loaded = false; } }
    match loadfn("MultiTexCoord4iARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4iARB.f = transmute(ptr); storage::MultiTexCoord4iARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4iARB.f = transmute(failing::MultiTexCoord4iARB); storage::MultiTexCoord4iARB.is_loaded = false; } }
    match loadfn("MultiTexCoord4iv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4iv.f = transmute(ptr); storage::MultiTexCoord4iv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4iv.f = transmute(failing::MultiTexCoord4iv); storage::MultiTexCoord4iv.is_loaded = false; } }
    match loadfn("MultiTexCoord4ivARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4ivARB.f = transmute(ptr); storage::MultiTexCoord4ivARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4ivARB.f = transmute(failing::MultiTexCoord4ivARB); storage::MultiTexCoord4ivARB.is_loaded = false; } }
    match loadfn("MultiTexCoord4s") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4s.f = transmute(ptr); storage::MultiTexCoord4s.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4s.f = transmute(failing::MultiTexCoord4s); storage::MultiTexCoord4s.is_loaded = false; } }
    match loadfn("MultiTexCoord4sARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4sARB.f = transmute(ptr); storage::MultiTexCoord4sARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4sARB.f = transmute(failing::MultiTexCoord4sARB); storage::MultiTexCoord4sARB.is_loaded = false; } }
    match loadfn("MultiTexCoord4sv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4sv.f = transmute(ptr); storage::MultiTexCoord4sv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4sv.f = transmute(failing::MultiTexCoord4sv); storage::MultiTexCoord4sv.is_loaded = false; } }
    match loadfn("MultiTexCoord4svARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4svARB.f = transmute(ptr); storage::MultiTexCoord4svARB.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4svARB.f = transmute(failing::MultiTexCoord4svARB); storage::MultiTexCoord4svARB.is_loaded = false; } }
    match loadfn("MultiTexCoord4x") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4x.f = transmute(ptr); storage::MultiTexCoord4x.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4x.f = transmute(failing::MultiTexCoord4x); storage::MultiTexCoord4x.is_loaded = false; } }
    match loadfn("MultiTexCoord4xOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4xOES.f = transmute(ptr); storage::MultiTexCoord4xOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4xOES.f = transmute(failing::MultiTexCoord4xOES); storage::MultiTexCoord4xOES.is_loaded = false; } }
    match loadfn("MultiTexCoord4xvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4xvOES.f = transmute(ptr); storage::MultiTexCoord4xvOES.is_loaded = true; }, _ => unsafe { storage::MultiTexCoord4xvOES.f = transmute(failing::MultiTexCoord4xvOES); storage::MultiTexCoord4xvOES.is_loaded = false; } }
    match loadfn("MultiTexCoordP1ui") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP1ui.f = transmute(ptr); storage::MultiTexCoordP1ui.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordP1ui.f = transmute(failing::MultiTexCoordP1ui); storage::MultiTexCoordP1ui.is_loaded = false; } }
    match loadfn("MultiTexCoordP1uiv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP1uiv.f = transmute(ptr); storage::MultiTexCoordP1uiv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordP1uiv.f = transmute(failing::MultiTexCoordP1uiv); storage::MultiTexCoordP1uiv.is_loaded = false; } }
    match loadfn("MultiTexCoordP2ui") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP2ui.f = transmute(ptr); storage::MultiTexCoordP2ui.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordP2ui.f = transmute(failing::MultiTexCoordP2ui); storage::MultiTexCoordP2ui.is_loaded = false; } }
    match loadfn("MultiTexCoordP2uiv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP2uiv.f = transmute(ptr); storage::MultiTexCoordP2uiv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordP2uiv.f = transmute(failing::MultiTexCoordP2uiv); storage::MultiTexCoordP2uiv.is_loaded = false; } }
    match loadfn("MultiTexCoordP3ui") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP3ui.f = transmute(ptr); storage::MultiTexCoordP3ui.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordP3ui.f = transmute(failing::MultiTexCoordP3ui); storage::MultiTexCoordP3ui.is_loaded = false; } }
    match loadfn("MultiTexCoordP3uiv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP3uiv.f = transmute(ptr); storage::MultiTexCoordP3uiv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordP3uiv.f = transmute(failing::MultiTexCoordP3uiv); storage::MultiTexCoordP3uiv.is_loaded = false; } }
    match loadfn("MultiTexCoordP4ui") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP4ui.f = transmute(ptr); storage::MultiTexCoordP4ui.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordP4ui.f = transmute(failing::MultiTexCoordP4ui); storage::MultiTexCoordP4ui.is_loaded = false; } }
    match loadfn("MultiTexCoordP4uiv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP4uiv.f = transmute(ptr); storage::MultiTexCoordP4uiv.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordP4uiv.f = transmute(failing::MultiTexCoordP4uiv); storage::MultiTexCoordP4uiv.is_loaded = false; } }
    match loadfn("MultiTexCoordPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordPointerEXT.f = transmute(ptr); storage::MultiTexCoordPointerEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexCoordPointerEXT.f = transmute(failing::MultiTexCoordPointerEXT); storage::MultiTexCoordPointerEXT.is_loaded = false; } }
    match loadfn("MultiTexEnvfEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexEnvfEXT.f = transmute(ptr); storage::MultiTexEnvfEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexEnvfEXT.f = transmute(failing::MultiTexEnvfEXT); storage::MultiTexEnvfEXT.is_loaded = false; } }
    match loadfn("MultiTexEnvfvEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexEnvfvEXT.f = transmute(ptr); storage::MultiTexEnvfvEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexEnvfvEXT.f = transmute(failing::MultiTexEnvfvEXT); storage::MultiTexEnvfvEXT.is_loaded = false; } }
    match loadfn("MultiTexEnviEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexEnviEXT.f = transmute(ptr); storage::MultiTexEnviEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexEnviEXT.f = transmute(failing::MultiTexEnviEXT); storage::MultiTexEnviEXT.is_loaded = false; } }
    match loadfn("MultiTexEnvivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexEnvivEXT.f = transmute(ptr); storage::MultiTexEnvivEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexEnvivEXT.f = transmute(failing::MultiTexEnvivEXT); storage::MultiTexEnvivEXT.is_loaded = false; } }
    match loadfn("MultiTexGendEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGendEXT.f = transmute(ptr); storage::MultiTexGendEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexGendEXT.f = transmute(failing::MultiTexGendEXT); storage::MultiTexGendEXT.is_loaded = false; } }
    match loadfn("MultiTexGendvEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGendvEXT.f = transmute(ptr); storage::MultiTexGendvEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexGendvEXT.f = transmute(failing::MultiTexGendvEXT); storage::MultiTexGendvEXT.is_loaded = false; } }
    match loadfn("MultiTexGenfEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGenfEXT.f = transmute(ptr); storage::MultiTexGenfEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexGenfEXT.f = transmute(failing::MultiTexGenfEXT); storage::MultiTexGenfEXT.is_loaded = false; } }
    match loadfn("MultiTexGenfvEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGenfvEXT.f = transmute(ptr); storage::MultiTexGenfvEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexGenfvEXT.f = transmute(failing::MultiTexGenfvEXT); storage::MultiTexGenfvEXT.is_loaded = false; } }
    match loadfn("MultiTexGeniEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGeniEXT.f = transmute(ptr); storage::MultiTexGeniEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexGeniEXT.f = transmute(failing::MultiTexGeniEXT); storage::MultiTexGeniEXT.is_loaded = false; } }
    match loadfn("MultiTexGenivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGenivEXT.f = transmute(ptr); storage::MultiTexGenivEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexGenivEXT.f = transmute(failing::MultiTexGenivEXT); storage::MultiTexGenivEXT.is_loaded = false; } }
    match loadfn("MultiTexImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexImage1DEXT.f = transmute(ptr); storage::MultiTexImage1DEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexImage1DEXT.f = transmute(failing::MultiTexImage1DEXT); storage::MultiTexImage1DEXT.is_loaded = false; } }
    match loadfn("MultiTexImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexImage2DEXT.f = transmute(ptr); storage::MultiTexImage2DEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexImage2DEXT.f = transmute(failing::MultiTexImage2DEXT); storage::MultiTexImage2DEXT.is_loaded = false; } }
    match loadfn("MultiTexImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexImage3DEXT.f = transmute(ptr); storage::MultiTexImage3DEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexImage3DEXT.f = transmute(failing::MultiTexImage3DEXT); storage::MultiTexImage3DEXT.is_loaded = false; } }
    match loadfn("MultiTexParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterIivEXT.f = transmute(ptr); storage::MultiTexParameterIivEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexParameterIivEXT.f = transmute(failing::MultiTexParameterIivEXT); storage::MultiTexParameterIivEXT.is_loaded = false; } }
    match loadfn("MultiTexParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterIuivEXT.f = transmute(ptr); storage::MultiTexParameterIuivEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexParameterIuivEXT.f = transmute(failing::MultiTexParameterIuivEXT); storage::MultiTexParameterIuivEXT.is_loaded = false; } }
    match loadfn("MultiTexParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterfEXT.f = transmute(ptr); storage::MultiTexParameterfEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexParameterfEXT.f = transmute(failing::MultiTexParameterfEXT); storage::MultiTexParameterfEXT.is_loaded = false; } }
    match loadfn("MultiTexParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterfvEXT.f = transmute(ptr); storage::MultiTexParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexParameterfvEXT.f = transmute(failing::MultiTexParameterfvEXT); storage::MultiTexParameterfvEXT.is_loaded = false; } }
    match loadfn("MultiTexParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameteriEXT.f = transmute(ptr); storage::MultiTexParameteriEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexParameteriEXT.f = transmute(failing::MultiTexParameteriEXT); storage::MultiTexParameteriEXT.is_loaded = false; } }
    match loadfn("MultiTexParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterivEXT.f = transmute(ptr); storage::MultiTexParameterivEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexParameterivEXT.f = transmute(failing::MultiTexParameterivEXT); storage::MultiTexParameterivEXT.is_loaded = false; } }
    match loadfn("MultiTexRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexRenderbufferEXT.f = transmute(ptr); storage::MultiTexRenderbufferEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexRenderbufferEXT.f = transmute(failing::MultiTexRenderbufferEXT); storage::MultiTexRenderbufferEXT.is_loaded = false; } }
    match loadfn("MultiTexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexSubImage1DEXT.f = transmute(ptr); storage::MultiTexSubImage1DEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexSubImage1DEXT.f = transmute(failing::MultiTexSubImage1DEXT); storage::MultiTexSubImage1DEXT.is_loaded = false; } }
    match loadfn("MultiTexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexSubImage2DEXT.f = transmute(ptr); storage::MultiTexSubImage2DEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexSubImage2DEXT.f = transmute(failing::MultiTexSubImage2DEXT); storage::MultiTexSubImage2DEXT.is_loaded = false; } }
    match loadfn("MultiTexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexSubImage3DEXT.f = transmute(ptr); storage::MultiTexSubImage3DEXT.is_loaded = true; }, _ => unsafe { storage::MultiTexSubImage3DEXT.f = transmute(failing::MultiTexSubImage3DEXT); storage::MultiTexSubImage3DEXT.is_loaded = false; } }
    match loadfn("NamedBufferDataEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedBufferDataEXT.f = transmute(ptr); storage::NamedBufferDataEXT.is_loaded = true; }, _ => unsafe { storage::NamedBufferDataEXT.f = transmute(failing::NamedBufferDataEXT); storage::NamedBufferDataEXT.is_loaded = false; } }
    match loadfn("NamedBufferStorageEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedBufferStorageEXT.f = transmute(ptr); storage::NamedBufferStorageEXT.is_loaded = true; }, _ => unsafe { storage::NamedBufferStorageEXT.f = transmute(failing::NamedBufferStorageEXT); storage::NamedBufferStorageEXT.is_loaded = false; } }
    match loadfn("NamedBufferSubDataEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedBufferSubDataEXT.f = transmute(ptr); storage::NamedBufferSubDataEXT.is_loaded = true; }, _ => unsafe { storage::NamedBufferSubDataEXT.f = transmute(failing::NamedBufferSubDataEXT); storage::NamedBufferSubDataEXT.is_loaded = false; } }
    match loadfn("NamedCopyBufferSubDataEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedCopyBufferSubDataEXT.f = transmute(ptr); storage::NamedCopyBufferSubDataEXT.is_loaded = true; }, _ => unsafe { storage::NamedCopyBufferSubDataEXT.f = transmute(failing::NamedCopyBufferSubDataEXT); storage::NamedCopyBufferSubDataEXT.is_loaded = false; } }
    match loadfn("NamedFramebufferParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferParameteriEXT.f = transmute(ptr); storage::NamedFramebufferParameteriEXT.is_loaded = true; }, _ => unsafe { storage::NamedFramebufferParameteriEXT.f = transmute(failing::NamedFramebufferParameteriEXT); storage::NamedFramebufferParameteriEXT.is_loaded = false; } }
    match loadfn("NamedFramebufferRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferRenderbufferEXT.f = transmute(ptr); storage::NamedFramebufferRenderbufferEXT.is_loaded = true; }, _ => unsafe { storage::NamedFramebufferRenderbufferEXT.f = transmute(failing::NamedFramebufferRenderbufferEXT); storage::NamedFramebufferRenderbufferEXT.is_loaded = false; } }
    match loadfn("NamedFramebufferTexture1DEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTexture1DEXT.f = transmute(ptr); storage::NamedFramebufferTexture1DEXT.is_loaded = true; }, _ => unsafe { storage::NamedFramebufferTexture1DEXT.f = transmute(failing::NamedFramebufferTexture1DEXT); storage::NamedFramebufferTexture1DEXT.is_loaded = false; } }
    match loadfn("NamedFramebufferTexture2DEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTexture2DEXT.f = transmute(ptr); storage::NamedFramebufferTexture2DEXT.is_loaded = true; }, _ => unsafe { storage::NamedFramebufferTexture2DEXT.f = transmute(failing::NamedFramebufferTexture2DEXT); storage::NamedFramebufferTexture2DEXT.is_loaded = false; } }
    match loadfn("NamedFramebufferTexture3DEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTexture3DEXT.f = transmute(ptr); storage::NamedFramebufferTexture3DEXT.is_loaded = true; }, _ => unsafe { storage::NamedFramebufferTexture3DEXT.f = transmute(failing::NamedFramebufferTexture3DEXT); storage::NamedFramebufferTexture3DEXT.is_loaded = false; } }
    match loadfn("NamedFramebufferTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTextureEXT.f = transmute(ptr); storage::NamedFramebufferTextureEXT.is_loaded = true; }, _ => unsafe { storage::NamedFramebufferTextureEXT.f = transmute(failing::NamedFramebufferTextureEXT); storage::NamedFramebufferTextureEXT.is_loaded = false; } }
    match loadfn("NamedFramebufferTextureFaceEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTextureFaceEXT.f = transmute(ptr); storage::NamedFramebufferTextureFaceEXT.is_loaded = true; }, _ => unsafe { storage::NamedFramebufferTextureFaceEXT.f = transmute(failing::NamedFramebufferTextureFaceEXT); storage::NamedFramebufferTextureFaceEXT.is_loaded = false; } }
    match loadfn("NamedFramebufferTextureLayerEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTextureLayerEXT.f = transmute(ptr); storage::NamedFramebufferTextureLayerEXT.is_loaded = true; }, _ => unsafe { storage::NamedFramebufferTextureLayerEXT.f = transmute(failing::NamedFramebufferTextureLayerEXT); storage::NamedFramebufferTextureLayerEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameter4dEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameter4dEXT.f = transmute(ptr); storage::NamedProgramLocalParameter4dEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameter4dEXT.f = transmute(failing::NamedProgramLocalParameter4dEXT); storage::NamedProgramLocalParameter4dEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameter4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameter4dvEXT.f = transmute(ptr); storage::NamedProgramLocalParameter4dvEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameter4dvEXT.f = transmute(failing::NamedProgramLocalParameter4dvEXT); storage::NamedProgramLocalParameter4dvEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameter4fEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameter4fEXT.f = transmute(ptr); storage::NamedProgramLocalParameter4fEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameter4fEXT.f = transmute(failing::NamedProgramLocalParameter4fEXT); storage::NamedProgramLocalParameter4fEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameter4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameter4fvEXT.f = transmute(ptr); storage::NamedProgramLocalParameter4fvEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameter4fvEXT.f = transmute(failing::NamedProgramLocalParameter4fvEXT); storage::NamedProgramLocalParameter4fvEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameterI4iEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameterI4iEXT.f = transmute(ptr); storage::NamedProgramLocalParameterI4iEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameterI4iEXT.f = transmute(failing::NamedProgramLocalParameterI4iEXT); storage::NamedProgramLocalParameterI4iEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameterI4ivEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameterI4ivEXT.f = transmute(ptr); storage::NamedProgramLocalParameterI4ivEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameterI4ivEXT.f = transmute(failing::NamedProgramLocalParameterI4ivEXT); storage::NamedProgramLocalParameterI4ivEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameterI4uiEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameterI4uiEXT.f = transmute(ptr); storage::NamedProgramLocalParameterI4uiEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameterI4uiEXT.f = transmute(failing::NamedProgramLocalParameterI4uiEXT); storage::NamedProgramLocalParameterI4uiEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameterI4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameterI4uivEXT.f = transmute(ptr); storage::NamedProgramLocalParameterI4uivEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameterI4uivEXT.f = transmute(failing::NamedProgramLocalParameterI4uivEXT); storage::NamedProgramLocalParameterI4uivEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParameters4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameters4fvEXT.f = transmute(ptr); storage::NamedProgramLocalParameters4fvEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParameters4fvEXT.f = transmute(failing::NamedProgramLocalParameters4fvEXT); storage::NamedProgramLocalParameters4fvEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParametersI4ivEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParametersI4ivEXT.f = transmute(ptr); storage::NamedProgramLocalParametersI4ivEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParametersI4ivEXT.f = transmute(failing::NamedProgramLocalParametersI4ivEXT); storage::NamedProgramLocalParametersI4ivEXT.is_loaded = false; } }
    match loadfn("NamedProgramLocalParametersI4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParametersI4uivEXT.f = transmute(ptr); storage::NamedProgramLocalParametersI4uivEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramLocalParametersI4uivEXT.f = transmute(failing::NamedProgramLocalParametersI4uivEXT); storage::NamedProgramLocalParametersI4uivEXT.is_loaded = false; } }
    match loadfn("NamedProgramStringEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramStringEXT.f = transmute(ptr); storage::NamedProgramStringEXT.is_loaded = true; }, _ => unsafe { storage::NamedProgramStringEXT.f = transmute(failing::NamedProgramStringEXT); storage::NamedProgramStringEXT.is_loaded = false; } }
    match loadfn("NamedRenderbufferStorageEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedRenderbufferStorageEXT.f = transmute(ptr); storage::NamedRenderbufferStorageEXT.is_loaded = true; }, _ => unsafe { storage::NamedRenderbufferStorageEXT.f = transmute(failing::NamedRenderbufferStorageEXT); storage::NamedRenderbufferStorageEXT.is_loaded = false; } }
    match loadfn("NamedRenderbufferStorageMultisampleCoverageEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedRenderbufferStorageMultisampleCoverageEXT.f = transmute(ptr); storage::NamedRenderbufferStorageMultisampleCoverageEXT.is_loaded = true; }, _ => unsafe { storage::NamedRenderbufferStorageMultisampleCoverageEXT.f = transmute(failing::NamedRenderbufferStorageMultisampleCoverageEXT); storage::NamedRenderbufferStorageMultisampleCoverageEXT.is_loaded = false; } }
    match loadfn("NamedRenderbufferStorageMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedRenderbufferStorageMultisampleEXT.f = transmute(ptr); storage::NamedRenderbufferStorageMultisampleEXT.is_loaded = true; }, _ => unsafe { storage::NamedRenderbufferStorageMultisampleEXT.f = transmute(failing::NamedRenderbufferStorageMultisampleEXT); storage::NamedRenderbufferStorageMultisampleEXT.is_loaded = false; } }
    match loadfn("NamedStringARB") { ptr if !ptr.is_null() => unsafe { storage::NamedStringARB.f = transmute(ptr); storage::NamedStringARB.is_loaded = true; }, _ => unsafe { storage::NamedStringARB.f = transmute(failing::NamedStringARB); storage::NamedStringARB.is_loaded = false; } }
    match loadfn("NewList") { ptr if !ptr.is_null() => unsafe { storage::NewList.f = transmute(ptr); storage::NewList.is_loaded = true; }, _ => unsafe { storage::NewList.f = transmute(failing::NewList); storage::NewList.is_loaded = false; } }
    match loadfn("NewObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::NewObjectBufferATI.f = transmute(ptr); storage::NewObjectBufferATI.is_loaded = true; }, _ => unsafe { storage::NewObjectBufferATI.f = transmute(failing::NewObjectBufferATI); storage::NewObjectBufferATI.is_loaded = false; } }
    match loadfn("Normal3b") { ptr if !ptr.is_null() => unsafe { storage::Normal3b.f = transmute(ptr); storage::Normal3b.is_loaded = true; }, _ => unsafe { storage::Normal3b.f = transmute(failing::Normal3b); storage::Normal3b.is_loaded = false; } }
    match loadfn("Normal3bv") { ptr if !ptr.is_null() => unsafe { storage::Normal3bv.f = transmute(ptr); storage::Normal3bv.is_loaded = true; }, _ => unsafe { storage::Normal3bv.f = transmute(failing::Normal3bv); storage::Normal3bv.is_loaded = false; } }
    match loadfn("Normal3d") { ptr if !ptr.is_null() => unsafe { storage::Normal3d.f = transmute(ptr); storage::Normal3d.is_loaded = true; }, _ => unsafe { storage::Normal3d.f = transmute(failing::Normal3d); storage::Normal3d.is_loaded = false; } }
    match loadfn("Normal3dv") { ptr if !ptr.is_null() => unsafe { storage::Normal3dv.f = transmute(ptr); storage::Normal3dv.is_loaded = true; }, _ => unsafe { storage::Normal3dv.f = transmute(failing::Normal3dv); storage::Normal3dv.is_loaded = false; } }
    match loadfn("Normal3f") { ptr if !ptr.is_null() => unsafe { storage::Normal3f.f = transmute(ptr); storage::Normal3f.is_loaded = true; }, _ => unsafe { storage::Normal3f.f = transmute(failing::Normal3f); storage::Normal3f.is_loaded = false; } }
    match loadfn("Normal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::Normal3fVertex3fSUN.f = transmute(ptr); storage::Normal3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::Normal3fVertex3fSUN.f = transmute(failing::Normal3fVertex3fSUN); storage::Normal3fVertex3fSUN.is_loaded = false; } }
    match loadfn("Normal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Normal3fVertex3fvSUN.f = transmute(ptr); storage::Normal3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::Normal3fVertex3fvSUN.f = transmute(failing::Normal3fVertex3fvSUN); storage::Normal3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("Normal3fv") { ptr if !ptr.is_null() => unsafe { storage::Normal3fv.f = transmute(ptr); storage::Normal3fv.is_loaded = true; }, _ => unsafe { storage::Normal3fv.f = transmute(failing::Normal3fv); storage::Normal3fv.is_loaded = false; } }
    match loadfn("Normal3hNV") { ptr if !ptr.is_null() => unsafe { storage::Normal3hNV.f = transmute(ptr); storage::Normal3hNV.is_loaded = true; }, _ => unsafe { storage::Normal3hNV.f = transmute(failing::Normal3hNV); storage::Normal3hNV.is_loaded = false; } }
    match loadfn("Normal3hvNV") { ptr if !ptr.is_null() => unsafe { storage::Normal3hvNV.f = transmute(ptr); storage::Normal3hvNV.is_loaded = true; }, _ => unsafe { storage::Normal3hvNV.f = transmute(failing::Normal3hvNV); storage::Normal3hvNV.is_loaded = false; } }
    match loadfn("Normal3i") { ptr if !ptr.is_null() => unsafe { storage::Normal3i.f = transmute(ptr); storage::Normal3i.is_loaded = true; }, _ => unsafe { storage::Normal3i.f = transmute(failing::Normal3i); storage::Normal3i.is_loaded = false; } }
    match loadfn("Normal3iv") { ptr if !ptr.is_null() => unsafe { storage::Normal3iv.f = transmute(ptr); storage::Normal3iv.is_loaded = true; }, _ => unsafe { storage::Normal3iv.f = transmute(failing::Normal3iv); storage::Normal3iv.is_loaded = false; } }
    match loadfn("Normal3s") { ptr if !ptr.is_null() => unsafe { storage::Normal3s.f = transmute(ptr); storage::Normal3s.is_loaded = true; }, _ => unsafe { storage::Normal3s.f = transmute(failing::Normal3s); storage::Normal3s.is_loaded = false; } }
    match loadfn("Normal3sv") { ptr if !ptr.is_null() => unsafe { storage::Normal3sv.f = transmute(ptr); storage::Normal3sv.is_loaded = true; }, _ => unsafe { storage::Normal3sv.f = transmute(failing::Normal3sv); storage::Normal3sv.is_loaded = false; } }
    match loadfn("Normal3x") { ptr if !ptr.is_null() => unsafe { storage::Normal3x.f = transmute(ptr); storage::Normal3x.is_loaded = true; }, _ => unsafe { storage::Normal3x.f = transmute(failing::Normal3x); storage::Normal3x.is_loaded = false; } }
    match loadfn("Normal3xOES") { ptr if !ptr.is_null() => unsafe { storage::Normal3xOES.f = transmute(ptr); storage::Normal3xOES.is_loaded = true; }, _ => unsafe { storage::Normal3xOES.f = transmute(failing::Normal3xOES); storage::Normal3xOES.is_loaded = false; } }
    match loadfn("Normal3xvOES") { ptr if !ptr.is_null() => unsafe { storage::Normal3xvOES.f = transmute(ptr); storage::Normal3xvOES.is_loaded = true; }, _ => unsafe { storage::Normal3xvOES.f = transmute(failing::Normal3xvOES); storage::Normal3xvOES.is_loaded = false; } }
    match loadfn("NormalFormatNV") { ptr if !ptr.is_null() => unsafe { storage::NormalFormatNV.f = transmute(ptr); storage::NormalFormatNV.is_loaded = true; }, _ => unsafe { storage::NormalFormatNV.f = transmute(failing::NormalFormatNV); storage::NormalFormatNV.is_loaded = false; } }
    match loadfn("NormalP3ui") { ptr if !ptr.is_null() => unsafe { storage::NormalP3ui.f = transmute(ptr); storage::NormalP3ui.is_loaded = true; }, _ => unsafe { storage::NormalP3ui.f = transmute(failing::NormalP3ui); storage::NormalP3ui.is_loaded = false; } }
    match loadfn("NormalP3uiv") { ptr if !ptr.is_null() => unsafe { storage::NormalP3uiv.f = transmute(ptr); storage::NormalP3uiv.is_loaded = true; }, _ => unsafe { storage::NormalP3uiv.f = transmute(failing::NormalP3uiv); storage::NormalP3uiv.is_loaded = false; } }
    match loadfn("NormalPointer") { ptr if !ptr.is_null() => unsafe { storage::NormalPointer.f = transmute(ptr); storage::NormalPointer.is_loaded = true; }, _ => unsafe { storage::NormalPointer.f = transmute(failing::NormalPointer); storage::NormalPointer.is_loaded = false; } }
    match loadfn("NormalPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::NormalPointerEXT.f = transmute(ptr); storage::NormalPointerEXT.is_loaded = true; }, _ => unsafe { storage::NormalPointerEXT.f = transmute(failing::NormalPointerEXT); storage::NormalPointerEXT.is_loaded = false; } }
    match loadfn("NormalPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::NormalPointerListIBM.f = transmute(ptr); storage::NormalPointerListIBM.is_loaded = true; }, _ => unsafe { storage::NormalPointerListIBM.f = transmute(failing::NormalPointerListIBM); storage::NormalPointerListIBM.is_loaded = false; } }
    match loadfn("NormalPointervINTEL") { ptr if !ptr.is_null() => unsafe { storage::NormalPointervINTEL.f = transmute(ptr); storage::NormalPointervINTEL.is_loaded = true; }, _ => unsafe { storage::NormalPointervINTEL.f = transmute(failing::NormalPointervINTEL); storage::NormalPointervINTEL.is_loaded = false; } }
    match loadfn("NormalStream3bATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3bATI.f = transmute(ptr); storage::NormalStream3bATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3bATI.f = transmute(failing::NormalStream3bATI); storage::NormalStream3bATI.is_loaded = false; } }
    match loadfn("NormalStream3bvATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3bvATI.f = transmute(ptr); storage::NormalStream3bvATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3bvATI.f = transmute(failing::NormalStream3bvATI); storage::NormalStream3bvATI.is_loaded = false; } }
    match loadfn("NormalStream3dATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3dATI.f = transmute(ptr); storage::NormalStream3dATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3dATI.f = transmute(failing::NormalStream3dATI); storage::NormalStream3dATI.is_loaded = false; } }
    match loadfn("NormalStream3dvATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3dvATI.f = transmute(ptr); storage::NormalStream3dvATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3dvATI.f = transmute(failing::NormalStream3dvATI); storage::NormalStream3dvATI.is_loaded = false; } }
    match loadfn("NormalStream3fATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3fATI.f = transmute(ptr); storage::NormalStream3fATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3fATI.f = transmute(failing::NormalStream3fATI); storage::NormalStream3fATI.is_loaded = false; } }
    match loadfn("NormalStream3fvATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3fvATI.f = transmute(ptr); storage::NormalStream3fvATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3fvATI.f = transmute(failing::NormalStream3fvATI); storage::NormalStream3fvATI.is_loaded = false; } }
    match loadfn("NormalStream3iATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3iATI.f = transmute(ptr); storage::NormalStream3iATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3iATI.f = transmute(failing::NormalStream3iATI); storage::NormalStream3iATI.is_loaded = false; } }
    match loadfn("NormalStream3ivATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3ivATI.f = transmute(ptr); storage::NormalStream3ivATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3ivATI.f = transmute(failing::NormalStream3ivATI); storage::NormalStream3ivATI.is_loaded = false; } }
    match loadfn("NormalStream3sATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3sATI.f = transmute(ptr); storage::NormalStream3sATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3sATI.f = transmute(failing::NormalStream3sATI); storage::NormalStream3sATI.is_loaded = false; } }
    match loadfn("NormalStream3svATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3svATI.f = transmute(ptr); storage::NormalStream3svATI.is_loaded = true; }, _ => unsafe { storage::NormalStream3svATI.f = transmute(failing::NormalStream3svATI); storage::NormalStream3svATI.is_loaded = false; } }
    match loadfn("ObjectLabel") { ptr if !ptr.is_null() => unsafe { storage::ObjectLabel.f = transmute(ptr); storage::ObjectLabel.is_loaded = true; }, _ => unsafe { storage::ObjectLabel.f = transmute(failing::ObjectLabel); storage::ObjectLabel.is_loaded = false; } }
    match loadfn("ObjectLabelKHR") { ptr if !ptr.is_null() => unsafe { storage::ObjectLabelKHR.f = transmute(ptr); storage::ObjectLabelKHR.is_loaded = true; }, _ => unsafe { storage::ObjectLabelKHR.f = transmute(failing::ObjectLabelKHR); storage::ObjectLabelKHR.is_loaded = false; } }
    match loadfn("ObjectPtrLabel") { ptr if !ptr.is_null() => unsafe { storage::ObjectPtrLabel.f = transmute(ptr); storage::ObjectPtrLabel.is_loaded = true; }, _ => unsafe { storage::ObjectPtrLabel.f = transmute(failing::ObjectPtrLabel); storage::ObjectPtrLabel.is_loaded = false; } }
    match loadfn("ObjectPtrLabelKHR") { ptr if !ptr.is_null() => unsafe { storage::ObjectPtrLabelKHR.f = transmute(ptr); storage::ObjectPtrLabelKHR.is_loaded = true; }, _ => unsafe { storage::ObjectPtrLabelKHR.f = transmute(failing::ObjectPtrLabelKHR); storage::ObjectPtrLabelKHR.is_loaded = false; } }
    match loadfn("ObjectPurgeableAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ObjectPurgeableAPPLE.f = transmute(ptr); storage::ObjectPurgeableAPPLE.is_loaded = true; }, _ => unsafe { storage::ObjectPurgeableAPPLE.f = transmute(failing::ObjectPurgeableAPPLE); storage::ObjectPurgeableAPPLE.is_loaded = false; } }
    match loadfn("ObjectUnpurgeableAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ObjectUnpurgeableAPPLE.f = transmute(ptr); storage::ObjectUnpurgeableAPPLE.is_loaded = true; }, _ => unsafe { storage::ObjectUnpurgeableAPPLE.f = transmute(failing::ObjectUnpurgeableAPPLE); storage::ObjectUnpurgeableAPPLE.is_loaded = false; } }
    match loadfn("Ortho") { ptr if !ptr.is_null() => unsafe { storage::Ortho.f = transmute(ptr); storage::Ortho.is_loaded = true; }, _ => unsafe { storage::Ortho.f = transmute(failing::Ortho); storage::Ortho.is_loaded = false; } }
    match loadfn("Orthof") { ptr if !ptr.is_null() => unsafe { storage::Orthof.f = transmute(ptr); storage::Orthof.is_loaded = true; }, _ => unsafe { storage::Orthof.f = transmute(failing::Orthof); storage::Orthof.is_loaded = false; } }
    match loadfn("OrthofOES") { ptr if !ptr.is_null() => unsafe { storage::OrthofOES.f = transmute(ptr); storage::OrthofOES.is_loaded = true; }, _ => unsafe { storage::OrthofOES.f = transmute(failing::OrthofOES); storage::OrthofOES.is_loaded = false; } }
    match loadfn("Orthox") { ptr if !ptr.is_null() => unsafe { storage::Orthox.f = transmute(ptr); storage::Orthox.is_loaded = true; }, _ => unsafe { storage::Orthox.f = transmute(failing::Orthox); storage::Orthox.is_loaded = false; } }
    match loadfn("OrthoxOES") { ptr if !ptr.is_null() => unsafe { storage::OrthoxOES.f = transmute(ptr); storage::OrthoxOES.is_loaded = true; }, _ => unsafe { storage::OrthoxOES.f = transmute(failing::OrthoxOES); storage::OrthoxOES.is_loaded = false; } }
    match loadfn("PNTrianglesfATI") { ptr if !ptr.is_null() => unsafe { storage::PNTrianglesfATI.f = transmute(ptr); storage::PNTrianglesfATI.is_loaded = true; }, _ => unsafe { storage::PNTrianglesfATI.f = transmute(failing::PNTrianglesfATI); storage::PNTrianglesfATI.is_loaded = false; } }
    match loadfn("PNTrianglesiATI") { ptr if !ptr.is_null() => unsafe { storage::PNTrianglesiATI.f = transmute(ptr); storage::PNTrianglesiATI.is_loaded = true; }, _ => unsafe { storage::PNTrianglesiATI.f = transmute(failing::PNTrianglesiATI); storage::PNTrianglesiATI.is_loaded = false; } }
    match loadfn("PassTexCoordATI") { ptr if !ptr.is_null() => unsafe { storage::PassTexCoordATI.f = transmute(ptr); storage::PassTexCoordATI.is_loaded = true; }, _ => unsafe { storage::PassTexCoordATI.f = transmute(failing::PassTexCoordATI); storage::PassTexCoordATI.is_loaded = false; } }
    match loadfn("PassThrough") { ptr if !ptr.is_null() => unsafe { storage::PassThrough.f = transmute(ptr); storage::PassThrough.is_loaded = true; }, _ => unsafe { storage::PassThrough.f = transmute(failing::PassThrough); storage::PassThrough.is_loaded = false; } }
    match loadfn("PassThroughxOES") { ptr if !ptr.is_null() => unsafe { storage::PassThroughxOES.f = transmute(ptr); storage::PassThroughxOES.is_loaded = true; }, _ => unsafe { storage::PassThroughxOES.f = transmute(failing::PassThroughxOES); storage::PassThroughxOES.is_loaded = false; } }
    match loadfn("PatchParameterfv") { ptr if !ptr.is_null() => unsafe { storage::PatchParameterfv.f = transmute(ptr); storage::PatchParameterfv.is_loaded = true; }, _ => unsafe { storage::PatchParameterfv.f = transmute(failing::PatchParameterfv); storage::PatchParameterfv.is_loaded = false; } }
    match loadfn("PatchParameteri") { ptr if !ptr.is_null() => unsafe { storage::PatchParameteri.f = transmute(ptr); storage::PatchParameteri.is_loaded = true; }, _ => unsafe { storage::PatchParameteri.f = transmute(failing::PatchParameteri); storage::PatchParameteri.is_loaded = false; } }
    match loadfn("PathColorGenNV") { ptr if !ptr.is_null() => unsafe { storage::PathColorGenNV.f = transmute(ptr); storage::PathColorGenNV.is_loaded = true; }, _ => unsafe { storage::PathColorGenNV.f = transmute(failing::PathColorGenNV); storage::PathColorGenNV.is_loaded = false; } }
    match loadfn("PathCommandsNV") { ptr if !ptr.is_null() => unsafe { storage::PathCommandsNV.f = transmute(ptr); storage::PathCommandsNV.is_loaded = true; }, _ => unsafe { storage::PathCommandsNV.f = transmute(failing::PathCommandsNV); storage::PathCommandsNV.is_loaded = false; } }
    match loadfn("PathCoordsNV") { ptr if !ptr.is_null() => unsafe { storage::PathCoordsNV.f = transmute(ptr); storage::PathCoordsNV.is_loaded = true; }, _ => unsafe { storage::PathCoordsNV.f = transmute(failing::PathCoordsNV); storage::PathCoordsNV.is_loaded = false; } }
    match loadfn("PathCoverDepthFuncNV") { ptr if !ptr.is_null() => unsafe { storage::PathCoverDepthFuncNV.f = transmute(ptr); storage::PathCoverDepthFuncNV.is_loaded = true; }, _ => unsafe { storage::PathCoverDepthFuncNV.f = transmute(failing::PathCoverDepthFuncNV); storage::PathCoverDepthFuncNV.is_loaded = false; } }
    match loadfn("PathDashArrayNV") { ptr if !ptr.is_null() => unsafe { storage::PathDashArrayNV.f = transmute(ptr); storage::PathDashArrayNV.is_loaded = true; }, _ => unsafe { storage::PathDashArrayNV.f = transmute(failing::PathDashArrayNV); storage::PathDashArrayNV.is_loaded = false; } }
    match loadfn("PathFogGenNV") { ptr if !ptr.is_null() => unsafe { storage::PathFogGenNV.f = transmute(ptr); storage::PathFogGenNV.is_loaded = true; }, _ => unsafe { storage::PathFogGenNV.f = transmute(failing::PathFogGenNV); storage::PathFogGenNV.is_loaded = false; } }
    match loadfn("PathGlyphRangeNV") { ptr if !ptr.is_null() => unsafe { storage::PathGlyphRangeNV.f = transmute(ptr); storage::PathGlyphRangeNV.is_loaded = true; }, _ => unsafe { storage::PathGlyphRangeNV.f = transmute(failing::PathGlyphRangeNV); storage::PathGlyphRangeNV.is_loaded = false; } }
    match loadfn("PathGlyphsNV") { ptr if !ptr.is_null() => unsafe { storage::PathGlyphsNV.f = transmute(ptr); storage::PathGlyphsNV.is_loaded = true; }, _ => unsafe { storage::PathGlyphsNV.f = transmute(failing::PathGlyphsNV); storage::PathGlyphsNV.is_loaded = false; } }
    match loadfn("PathParameterfNV") { ptr if !ptr.is_null() => unsafe { storage::PathParameterfNV.f = transmute(ptr); storage::PathParameterfNV.is_loaded = true; }, _ => unsafe { storage::PathParameterfNV.f = transmute(failing::PathParameterfNV); storage::PathParameterfNV.is_loaded = false; } }
    match loadfn("PathParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::PathParameterfvNV.f = transmute(ptr); storage::PathParameterfvNV.is_loaded = true; }, _ => unsafe { storage::PathParameterfvNV.f = transmute(failing::PathParameterfvNV); storage::PathParameterfvNV.is_loaded = false; } }
    match loadfn("PathParameteriNV") { ptr if !ptr.is_null() => unsafe { storage::PathParameteriNV.f = transmute(ptr); storage::PathParameteriNV.is_loaded = true; }, _ => unsafe { storage::PathParameteriNV.f = transmute(failing::PathParameteriNV); storage::PathParameteriNV.is_loaded = false; } }
    match loadfn("PathParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::PathParameterivNV.f = transmute(ptr); storage::PathParameterivNV.is_loaded = true; }, _ => unsafe { storage::PathParameterivNV.f = transmute(failing::PathParameterivNV); storage::PathParameterivNV.is_loaded = false; } }
    match loadfn("PathStencilDepthOffsetNV") { ptr if !ptr.is_null() => unsafe { storage::PathStencilDepthOffsetNV.f = transmute(ptr); storage::PathStencilDepthOffsetNV.is_loaded = true; }, _ => unsafe { storage::PathStencilDepthOffsetNV.f = transmute(failing::PathStencilDepthOffsetNV); storage::PathStencilDepthOffsetNV.is_loaded = false; } }
    match loadfn("PathStencilFuncNV") { ptr if !ptr.is_null() => unsafe { storage::PathStencilFuncNV.f = transmute(ptr); storage::PathStencilFuncNV.is_loaded = true; }, _ => unsafe { storage::PathStencilFuncNV.f = transmute(failing::PathStencilFuncNV); storage::PathStencilFuncNV.is_loaded = false; } }
    match loadfn("PathStringNV") { ptr if !ptr.is_null() => unsafe { storage::PathStringNV.f = transmute(ptr); storage::PathStringNV.is_loaded = true; }, _ => unsafe { storage::PathStringNV.f = transmute(failing::PathStringNV); storage::PathStringNV.is_loaded = false; } }
    match loadfn("PathSubCommandsNV") { ptr if !ptr.is_null() => unsafe { storage::PathSubCommandsNV.f = transmute(ptr); storage::PathSubCommandsNV.is_loaded = true; }, _ => unsafe { storage::PathSubCommandsNV.f = transmute(failing::PathSubCommandsNV); storage::PathSubCommandsNV.is_loaded = false; } }
    match loadfn("PathSubCoordsNV") { ptr if !ptr.is_null() => unsafe { storage::PathSubCoordsNV.f = transmute(ptr); storage::PathSubCoordsNV.is_loaded = true; }, _ => unsafe { storage::PathSubCoordsNV.f = transmute(failing::PathSubCoordsNV); storage::PathSubCoordsNV.is_loaded = false; } }
    match loadfn("PathTexGenNV") { ptr if !ptr.is_null() => unsafe { storage::PathTexGenNV.f = transmute(ptr); storage::PathTexGenNV.is_loaded = true; }, _ => unsafe { storage::PathTexGenNV.f = transmute(failing::PathTexGenNV); storage::PathTexGenNV.is_loaded = false; } }
    match loadfn("PauseTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::PauseTransformFeedback.f = transmute(ptr); storage::PauseTransformFeedback.is_loaded = true; }, _ => unsafe { storage::PauseTransformFeedback.f = transmute(failing::PauseTransformFeedback); storage::PauseTransformFeedback.is_loaded = false; } }
    match loadfn("PauseTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::PauseTransformFeedbackNV.f = transmute(ptr); storage::PauseTransformFeedbackNV.is_loaded = true; }, _ => unsafe { storage::PauseTransformFeedbackNV.f = transmute(failing::PauseTransformFeedbackNV); storage::PauseTransformFeedbackNV.is_loaded = false; } }
    match loadfn("PixelDataRangeNV") { ptr if !ptr.is_null() => unsafe { storage::PixelDataRangeNV.f = transmute(ptr); storage::PixelDataRangeNV.is_loaded = true; }, _ => unsafe { storage::PixelDataRangeNV.f = transmute(failing::PixelDataRangeNV); storage::PixelDataRangeNV.is_loaded = false; } }
    match loadfn("PixelMapfv") { ptr if !ptr.is_null() => unsafe { storage::PixelMapfv.f = transmute(ptr); storage::PixelMapfv.is_loaded = true; }, _ => unsafe { storage::PixelMapfv.f = transmute(failing::PixelMapfv); storage::PixelMapfv.is_loaded = false; } }
    match loadfn("PixelMapuiv") { ptr if !ptr.is_null() => unsafe { storage::PixelMapuiv.f = transmute(ptr); storage::PixelMapuiv.is_loaded = true; }, _ => unsafe { storage::PixelMapuiv.f = transmute(failing::PixelMapuiv); storage::PixelMapuiv.is_loaded = false; } }
    match loadfn("PixelMapusv") { ptr if !ptr.is_null() => unsafe { storage::PixelMapusv.f = transmute(ptr); storage::PixelMapusv.is_loaded = true; }, _ => unsafe { storage::PixelMapusv.f = transmute(failing::PixelMapusv); storage::PixelMapusv.is_loaded = false; } }
    match loadfn("PixelMapx") { ptr if !ptr.is_null() => unsafe { storage::PixelMapx.f = transmute(ptr); storage::PixelMapx.is_loaded = true; }, _ => unsafe { storage::PixelMapx.f = transmute(failing::PixelMapx); storage::PixelMapx.is_loaded = false; } }
    match loadfn("PixelStoref") { ptr if !ptr.is_null() => unsafe { storage::PixelStoref.f = transmute(ptr); storage::PixelStoref.is_loaded = true; }, _ => unsafe { storage::PixelStoref.f = transmute(failing::PixelStoref); storage::PixelStoref.is_loaded = false; } }
    match loadfn("PixelStorei") { ptr if !ptr.is_null() => unsafe { storage::PixelStorei.f = transmute(ptr); storage::PixelStorei.is_loaded = true; }, _ => unsafe { storage::PixelStorei.f = transmute(failing::PixelStorei); storage::PixelStorei.is_loaded = false; } }
    match loadfn("PixelStorex") { ptr if !ptr.is_null() => unsafe { storage::PixelStorex.f = transmute(ptr); storage::PixelStorex.is_loaded = true; }, _ => unsafe { storage::PixelStorex.f = transmute(failing::PixelStorex); storage::PixelStorex.is_loaded = false; } }
    match loadfn("PixelTexGenParameterfSGIS") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenParameterfSGIS.f = transmute(ptr); storage::PixelTexGenParameterfSGIS.is_loaded = true; }, _ => unsafe { storage::PixelTexGenParameterfSGIS.f = transmute(failing::PixelTexGenParameterfSGIS); storage::PixelTexGenParameterfSGIS.is_loaded = false; } }
    match loadfn("PixelTexGenParameterfvSGIS") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenParameterfvSGIS.f = transmute(ptr); storage::PixelTexGenParameterfvSGIS.is_loaded = true; }, _ => unsafe { storage::PixelTexGenParameterfvSGIS.f = transmute(failing::PixelTexGenParameterfvSGIS); storage::PixelTexGenParameterfvSGIS.is_loaded = false; } }
    match loadfn("PixelTexGenParameteriSGIS") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenParameteriSGIS.f = transmute(ptr); storage::PixelTexGenParameteriSGIS.is_loaded = true; }, _ => unsafe { storage::PixelTexGenParameteriSGIS.f = transmute(failing::PixelTexGenParameteriSGIS); storage::PixelTexGenParameteriSGIS.is_loaded = false; } }
    match loadfn("PixelTexGenParameterivSGIS") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenParameterivSGIS.f = transmute(ptr); storage::PixelTexGenParameterivSGIS.is_loaded = true; }, _ => unsafe { storage::PixelTexGenParameterivSGIS.f = transmute(failing::PixelTexGenParameterivSGIS); storage::PixelTexGenParameterivSGIS.is_loaded = false; } }
    match loadfn("PixelTexGenSGIX") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenSGIX.f = transmute(ptr); storage::PixelTexGenSGIX.is_loaded = true; }, _ => unsafe { storage::PixelTexGenSGIX.f = transmute(failing::PixelTexGenSGIX); storage::PixelTexGenSGIX.is_loaded = false; } }
    match loadfn("PixelTransferf") { ptr if !ptr.is_null() => unsafe { storage::PixelTransferf.f = transmute(ptr); storage::PixelTransferf.is_loaded = true; }, _ => unsafe { storage::PixelTransferf.f = transmute(failing::PixelTransferf); storage::PixelTransferf.is_loaded = false; } }
    match loadfn("PixelTransferi") { ptr if !ptr.is_null() => unsafe { storage::PixelTransferi.f = transmute(ptr); storage::PixelTransferi.is_loaded = true; }, _ => unsafe { storage::PixelTransferi.f = transmute(failing::PixelTransferi); storage::PixelTransferi.is_loaded = false; } }
    match loadfn("PixelTransferxOES") { ptr if !ptr.is_null() => unsafe { storage::PixelTransferxOES.f = transmute(ptr); storage::PixelTransferxOES.is_loaded = true; }, _ => unsafe { storage::PixelTransferxOES.f = transmute(failing::PixelTransferxOES); storage::PixelTransferxOES.is_loaded = false; } }
    match loadfn("PixelTransformParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::PixelTransformParameterfEXT.f = transmute(ptr); storage::PixelTransformParameterfEXT.is_loaded = true; }, _ => unsafe { storage::PixelTransformParameterfEXT.f = transmute(failing::PixelTransformParameterfEXT); storage::PixelTransformParameterfEXT.is_loaded = false; } }
    match loadfn("PixelTransformParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::PixelTransformParameterfvEXT.f = transmute(ptr); storage::PixelTransformParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::PixelTransformParameterfvEXT.f = transmute(failing::PixelTransformParameterfvEXT); storage::PixelTransformParameterfvEXT.is_loaded = false; } }
    match loadfn("PixelTransformParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::PixelTransformParameteriEXT.f = transmute(ptr); storage::PixelTransformParameteriEXT.is_loaded = true; }, _ => unsafe { storage::PixelTransformParameteriEXT.f = transmute(failing::PixelTransformParameteriEXT); storage::PixelTransformParameteriEXT.is_loaded = false; } }
    match loadfn("PixelTransformParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::PixelTransformParameterivEXT.f = transmute(ptr); storage::PixelTransformParameterivEXT.is_loaded = true; }, _ => unsafe { storage::PixelTransformParameterivEXT.f = transmute(failing::PixelTransformParameterivEXT); storage::PixelTransformParameterivEXT.is_loaded = false; } }
    match loadfn("PixelZoom") { ptr if !ptr.is_null() => unsafe { storage::PixelZoom.f = transmute(ptr); storage::PixelZoom.is_loaded = true; }, _ => unsafe { storage::PixelZoom.f = transmute(failing::PixelZoom); storage::PixelZoom.is_loaded = false; } }
    match loadfn("PixelZoomxOES") { ptr if !ptr.is_null() => unsafe { storage::PixelZoomxOES.f = transmute(ptr); storage::PixelZoomxOES.is_loaded = true; }, _ => unsafe { storage::PixelZoomxOES.f = transmute(failing::PixelZoomxOES); storage::PixelZoomxOES.is_loaded = false; } }
    match loadfn("PointAlongPathNV") { ptr if !ptr.is_null() => unsafe { storage::PointAlongPathNV.f = transmute(ptr); storage::PointAlongPathNV.is_loaded = true; }, _ => unsafe { storage::PointAlongPathNV.f = transmute(failing::PointAlongPathNV); storage::PointAlongPathNV.is_loaded = false; } }
    match loadfn("PointParameterf") { ptr if !ptr.is_null() => unsafe { storage::PointParameterf.f = transmute(ptr); storage::PointParameterf.is_loaded = true; }, _ => unsafe { storage::PointParameterf.f = transmute(failing::PointParameterf); storage::PointParameterf.is_loaded = false; } }
    match loadfn("PointParameterfARB") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfARB.f = transmute(ptr); storage::PointParameterfARB.is_loaded = true; }, _ => unsafe { storage::PointParameterfARB.f = transmute(failing::PointParameterfARB); storage::PointParameterfARB.is_loaded = false; } }
    match loadfn("PointParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfEXT.f = transmute(ptr); storage::PointParameterfEXT.is_loaded = true; }, _ => unsafe { storage::PointParameterfEXT.f = transmute(failing::PointParameterfEXT); storage::PointParameterfEXT.is_loaded = false; } }
    match loadfn("PointParameterfSGIS") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfSGIS.f = transmute(ptr); storage::PointParameterfSGIS.is_loaded = true; }, _ => unsafe { storage::PointParameterfSGIS.f = transmute(failing::PointParameterfSGIS); storage::PointParameterfSGIS.is_loaded = false; } }
    match loadfn("PointParameterfv") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfv.f = transmute(ptr); storage::PointParameterfv.is_loaded = true; }, _ => unsafe { storage::PointParameterfv.f = transmute(failing::PointParameterfv); storage::PointParameterfv.is_loaded = false; } }
    match loadfn("PointParameterfvARB") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfvARB.f = transmute(ptr); storage::PointParameterfvARB.is_loaded = true; }, _ => unsafe { storage::PointParameterfvARB.f = transmute(failing::PointParameterfvARB); storage::PointParameterfvARB.is_loaded = false; } }
    match loadfn("PointParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfvEXT.f = transmute(ptr); storage::PointParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::PointParameterfvEXT.f = transmute(failing::PointParameterfvEXT); storage::PointParameterfvEXT.is_loaded = false; } }
    match loadfn("PointParameterfvSGIS") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfvSGIS.f = transmute(ptr); storage::PointParameterfvSGIS.is_loaded = true; }, _ => unsafe { storage::PointParameterfvSGIS.f = transmute(failing::PointParameterfvSGIS); storage::PointParameterfvSGIS.is_loaded = false; } }
    match loadfn("PointParameteri") { ptr if !ptr.is_null() => unsafe { storage::PointParameteri.f = transmute(ptr); storage::PointParameteri.is_loaded = true; }, _ => unsafe { storage::PointParameteri.f = transmute(failing::PointParameteri); storage::PointParameteri.is_loaded = false; } }
    match loadfn("PointParameteriNV") { ptr if !ptr.is_null() => unsafe { storage::PointParameteriNV.f = transmute(ptr); storage::PointParameteriNV.is_loaded = true; }, _ => unsafe { storage::PointParameteriNV.f = transmute(failing::PointParameteriNV); storage::PointParameteriNV.is_loaded = false; } }
    match loadfn("PointParameteriv") { ptr if !ptr.is_null() => unsafe { storage::PointParameteriv.f = transmute(ptr); storage::PointParameteriv.is_loaded = true; }, _ => unsafe { storage::PointParameteriv.f = transmute(failing::PointParameteriv); storage::PointParameteriv.is_loaded = false; } }
    match loadfn("PointParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::PointParameterivNV.f = transmute(ptr); storage::PointParameterivNV.is_loaded = true; }, _ => unsafe { storage::PointParameterivNV.f = transmute(failing::PointParameterivNV); storage::PointParameterivNV.is_loaded = false; } }
    match loadfn("PointParameterx") { ptr if !ptr.is_null() => unsafe { storage::PointParameterx.f = transmute(ptr); storage::PointParameterx.is_loaded = true; }, _ => unsafe { storage::PointParameterx.f = transmute(failing::PointParameterx); storage::PointParameterx.is_loaded = false; } }
    match loadfn("PointParameterxOES") { ptr if !ptr.is_null() => unsafe { storage::PointParameterxOES.f = transmute(ptr); storage::PointParameterxOES.is_loaded = true; }, _ => unsafe { storage::PointParameterxOES.f = transmute(failing::PointParameterxOES); storage::PointParameterxOES.is_loaded = false; } }
    match loadfn("PointParameterxv") { ptr if !ptr.is_null() => unsafe { storage::PointParameterxv.f = transmute(ptr); storage::PointParameterxv.is_loaded = true; }, _ => unsafe { storage::PointParameterxv.f = transmute(failing::PointParameterxv); storage::PointParameterxv.is_loaded = false; } }
    match loadfn("PointParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::PointParameterxvOES.f = transmute(ptr); storage::PointParameterxvOES.is_loaded = true; }, _ => unsafe { storage::PointParameterxvOES.f = transmute(failing::PointParameterxvOES); storage::PointParameterxvOES.is_loaded = false; } }
    match loadfn("PointSize") { ptr if !ptr.is_null() => unsafe { storage::PointSize.f = transmute(ptr); storage::PointSize.is_loaded = true; }, _ => unsafe { storage::PointSize.f = transmute(failing::PointSize); storage::PointSize.is_loaded = false; } }
    match loadfn("PointSizePointerOES") { ptr if !ptr.is_null() => unsafe { storage::PointSizePointerOES.f = transmute(ptr); storage::PointSizePointerOES.is_loaded = true; }, _ => unsafe { storage::PointSizePointerOES.f = transmute(failing::PointSizePointerOES); storage::PointSizePointerOES.is_loaded = false; } }
    match loadfn("PointSizex") { ptr if !ptr.is_null() => unsafe { storage::PointSizex.f = transmute(ptr); storage::PointSizex.is_loaded = true; }, _ => unsafe { storage::PointSizex.f = transmute(failing::PointSizex); storage::PointSizex.is_loaded = false; } }
    match loadfn("PointSizexOES") { ptr if !ptr.is_null() => unsafe { storage::PointSizexOES.f = transmute(ptr); storage::PointSizexOES.is_loaded = true; }, _ => unsafe { storage::PointSizexOES.f = transmute(failing::PointSizexOES); storage::PointSizexOES.is_loaded = false; } }
    match loadfn("PollAsyncSGIX") { ptr if !ptr.is_null() => unsafe { storage::PollAsyncSGIX.f = transmute(ptr); storage::PollAsyncSGIX.is_loaded = true; }, _ => unsafe { storage::PollAsyncSGIX.f = transmute(failing::PollAsyncSGIX); storage::PollAsyncSGIX.is_loaded = false; } }
    match loadfn("PollInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::PollInstrumentsSGIX.f = transmute(ptr); storage::PollInstrumentsSGIX.is_loaded = true; }, _ => unsafe { storage::PollInstrumentsSGIX.f = transmute(failing::PollInstrumentsSGIX); storage::PollInstrumentsSGIX.is_loaded = false; } }
    match loadfn("PolygonMode") { ptr if !ptr.is_null() => unsafe { storage::PolygonMode.f = transmute(ptr); storage::PolygonMode.is_loaded = true; }, _ => unsafe { storage::PolygonMode.f = transmute(failing::PolygonMode); storage::PolygonMode.is_loaded = false; } }
    match loadfn("PolygonOffset") { ptr if !ptr.is_null() => unsafe { storage::PolygonOffset.f = transmute(ptr); storage::PolygonOffset.is_loaded = true; }, _ => unsafe { storage::PolygonOffset.f = transmute(failing::PolygonOffset); storage::PolygonOffset.is_loaded = false; } }
    match loadfn("PolygonOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::PolygonOffsetEXT.f = transmute(ptr); storage::PolygonOffsetEXT.is_loaded = true; }, _ => unsafe { storage::PolygonOffsetEXT.f = transmute(failing::PolygonOffsetEXT); storage::PolygonOffsetEXT.is_loaded = false; } }
    match loadfn("PolygonOffsetx") { ptr if !ptr.is_null() => unsafe { storage::PolygonOffsetx.f = transmute(ptr); storage::PolygonOffsetx.is_loaded = true; }, _ => unsafe { storage::PolygonOffsetx.f = transmute(failing::PolygonOffsetx); storage::PolygonOffsetx.is_loaded = false; } }
    match loadfn("PolygonOffsetxOES") { ptr if !ptr.is_null() => unsafe { storage::PolygonOffsetxOES.f = transmute(ptr); storage::PolygonOffsetxOES.is_loaded = true; }, _ => unsafe { storage::PolygonOffsetxOES.f = transmute(failing::PolygonOffsetxOES); storage::PolygonOffsetxOES.is_loaded = false; } }
    match loadfn("PolygonStipple") { ptr if !ptr.is_null() => unsafe { storage::PolygonStipple.f = transmute(ptr); storage::PolygonStipple.is_loaded = true; }, _ => unsafe { storage::PolygonStipple.f = transmute(failing::PolygonStipple); storage::PolygonStipple.is_loaded = false; } }
    match loadfn("PopAttrib") { ptr if !ptr.is_null() => unsafe { storage::PopAttrib.f = transmute(ptr); storage::PopAttrib.is_loaded = true; }, _ => unsafe { storage::PopAttrib.f = transmute(failing::PopAttrib); storage::PopAttrib.is_loaded = false; } }
    match loadfn("PopClientAttrib") { ptr if !ptr.is_null() => unsafe { storage::PopClientAttrib.f = transmute(ptr); storage::PopClientAttrib.is_loaded = true; }, _ => unsafe { storage::PopClientAttrib.f = transmute(failing::PopClientAttrib); storage::PopClientAttrib.is_loaded = false; } }
    match loadfn("PopDebugGroup") { ptr if !ptr.is_null() => unsafe { storage::PopDebugGroup.f = transmute(ptr); storage::PopDebugGroup.is_loaded = true; }, _ => unsafe { storage::PopDebugGroup.f = transmute(failing::PopDebugGroup); storage::PopDebugGroup.is_loaded = false; } }
    match loadfn("PopDebugGroupKHR") { ptr if !ptr.is_null() => unsafe { storage::PopDebugGroupKHR.f = transmute(ptr); storage::PopDebugGroupKHR.is_loaded = true; }, _ => unsafe { storage::PopDebugGroupKHR.f = transmute(failing::PopDebugGroupKHR); storage::PopDebugGroupKHR.is_loaded = false; } }
    match loadfn("PopGroupMarkerEXT") { ptr if !ptr.is_null() => unsafe { storage::PopGroupMarkerEXT.f = transmute(ptr); storage::PopGroupMarkerEXT.is_loaded = true; }, _ => unsafe { storage::PopGroupMarkerEXT.f = transmute(failing::PopGroupMarkerEXT); storage::PopGroupMarkerEXT.is_loaded = false; } }
    match loadfn("PopMatrix") { ptr if !ptr.is_null() => unsafe { storage::PopMatrix.f = transmute(ptr); storage::PopMatrix.is_loaded = true; }, _ => unsafe { storage::PopMatrix.f = transmute(failing::PopMatrix); storage::PopMatrix.is_loaded = false; } }
    match loadfn("PopName") { ptr if !ptr.is_null() => unsafe { storage::PopName.f = transmute(ptr); storage::PopName.is_loaded = true; }, _ => unsafe { storage::PopName.f = transmute(failing::PopName); storage::PopName.is_loaded = false; } }
    match loadfn("PresentFrameDualFillNV") { ptr if !ptr.is_null() => unsafe { storage::PresentFrameDualFillNV.f = transmute(ptr); storage::PresentFrameDualFillNV.is_loaded = true; }, _ => unsafe { storage::PresentFrameDualFillNV.f = transmute(failing::PresentFrameDualFillNV); storage::PresentFrameDualFillNV.is_loaded = false; } }
    match loadfn("PresentFrameKeyedNV") { ptr if !ptr.is_null() => unsafe { storage::PresentFrameKeyedNV.f = transmute(ptr); storage::PresentFrameKeyedNV.is_loaded = true; }, _ => unsafe { storage::PresentFrameKeyedNV.f = transmute(failing::PresentFrameKeyedNV); storage::PresentFrameKeyedNV.is_loaded = false; } }
    match loadfn("PrimitiveRestartIndex") { ptr if !ptr.is_null() => unsafe { storage::PrimitiveRestartIndex.f = transmute(ptr); storage::PrimitiveRestartIndex.is_loaded = true; }, _ => unsafe { storage::PrimitiveRestartIndex.f = transmute(failing::PrimitiveRestartIndex); storage::PrimitiveRestartIndex.is_loaded = false; } }
    match loadfn("PrimitiveRestartIndexNV") { ptr if !ptr.is_null() => unsafe { storage::PrimitiveRestartIndexNV.f = transmute(ptr); storage::PrimitiveRestartIndexNV.is_loaded = true; }, _ => unsafe { storage::PrimitiveRestartIndexNV.f = transmute(failing::PrimitiveRestartIndexNV); storage::PrimitiveRestartIndexNV.is_loaded = false; } }
    match loadfn("PrimitiveRestartNV") { ptr if !ptr.is_null() => unsafe { storage::PrimitiveRestartNV.f = transmute(ptr); storage::PrimitiveRestartNV.is_loaded = true; }, _ => unsafe { storage::PrimitiveRestartNV.f = transmute(failing::PrimitiveRestartNV); storage::PrimitiveRestartNV.is_loaded = false; } }
    match loadfn("PrioritizeTextures") { ptr if !ptr.is_null() => unsafe { storage::PrioritizeTextures.f = transmute(ptr); storage::PrioritizeTextures.is_loaded = true; }, _ => unsafe { storage::PrioritizeTextures.f = transmute(failing::PrioritizeTextures); storage::PrioritizeTextures.is_loaded = false; } }
    match loadfn("PrioritizeTexturesEXT") { ptr if !ptr.is_null() => unsafe { storage::PrioritizeTexturesEXT.f = transmute(ptr); storage::PrioritizeTexturesEXT.is_loaded = true; }, _ => unsafe { storage::PrioritizeTexturesEXT.f = transmute(failing::PrioritizeTexturesEXT); storage::PrioritizeTexturesEXT.is_loaded = false; } }
    match loadfn("PrioritizeTexturesxOES") { ptr if !ptr.is_null() => unsafe { storage::PrioritizeTexturesxOES.f = transmute(ptr); storage::PrioritizeTexturesxOES.is_loaded = true; }, _ => unsafe { storage::PrioritizeTexturesxOES.f = transmute(failing::PrioritizeTexturesxOES); storage::PrioritizeTexturesxOES.is_loaded = false; } }
    match loadfn("ProgramBinary") { ptr if !ptr.is_null() => unsafe { storage::ProgramBinary.f = transmute(ptr); storage::ProgramBinary.is_loaded = true; }, _ => unsafe { storage::ProgramBinary.f = transmute(failing::ProgramBinary); storage::ProgramBinary.is_loaded = false; } }
    match loadfn("ProgramBinaryOES") { ptr if !ptr.is_null() => unsafe { storage::ProgramBinaryOES.f = transmute(ptr); storage::ProgramBinaryOES.is_loaded = true; }, _ => unsafe { storage::ProgramBinaryOES.f = transmute(failing::ProgramBinaryOES); storage::ProgramBinaryOES.is_loaded = false; } }
    match loadfn("ProgramBufferParametersIivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramBufferParametersIivNV.f = transmute(ptr); storage::ProgramBufferParametersIivNV.is_loaded = true; }, _ => unsafe { storage::ProgramBufferParametersIivNV.f = transmute(failing::ProgramBufferParametersIivNV); storage::ProgramBufferParametersIivNV.is_loaded = false; } }
    match loadfn("ProgramBufferParametersIuivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramBufferParametersIuivNV.f = transmute(ptr); storage::ProgramBufferParametersIuivNV.is_loaded = true; }, _ => unsafe { storage::ProgramBufferParametersIuivNV.f = transmute(failing::ProgramBufferParametersIuivNV); storage::ProgramBufferParametersIuivNV.is_loaded = false; } }
    match loadfn("ProgramBufferParametersfvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramBufferParametersfvNV.f = transmute(ptr); storage::ProgramBufferParametersfvNV.is_loaded = true; }, _ => unsafe { storage::ProgramBufferParametersfvNV.f = transmute(failing::ProgramBufferParametersfvNV); storage::ProgramBufferParametersfvNV.is_loaded = false; } }
    match loadfn("ProgramEnvParameter4dARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameter4dARB.f = transmute(ptr); storage::ProgramEnvParameter4dARB.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameter4dARB.f = transmute(failing::ProgramEnvParameter4dARB); storage::ProgramEnvParameter4dARB.is_loaded = false; } }
    match loadfn("ProgramEnvParameter4dvARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameter4dvARB.f = transmute(ptr); storage::ProgramEnvParameter4dvARB.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameter4dvARB.f = transmute(failing::ProgramEnvParameter4dvARB); storage::ProgramEnvParameter4dvARB.is_loaded = false; } }
    match loadfn("ProgramEnvParameter4fARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameter4fARB.f = transmute(ptr); storage::ProgramEnvParameter4fARB.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameter4fARB.f = transmute(failing::ProgramEnvParameter4fARB); storage::ProgramEnvParameter4fARB.is_loaded = false; } }
    match loadfn("ProgramEnvParameter4fvARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameter4fvARB.f = transmute(ptr); storage::ProgramEnvParameter4fvARB.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameter4fvARB.f = transmute(failing::ProgramEnvParameter4fvARB); storage::ProgramEnvParameter4fvARB.is_loaded = false; } }
    match loadfn("ProgramEnvParameterI4iNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameterI4iNV.f = transmute(ptr); storage::ProgramEnvParameterI4iNV.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameterI4iNV.f = transmute(failing::ProgramEnvParameterI4iNV); storage::ProgramEnvParameterI4iNV.is_loaded = false; } }
    match loadfn("ProgramEnvParameterI4ivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameterI4ivNV.f = transmute(ptr); storage::ProgramEnvParameterI4ivNV.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameterI4ivNV.f = transmute(failing::ProgramEnvParameterI4ivNV); storage::ProgramEnvParameterI4ivNV.is_loaded = false; } }
    match loadfn("ProgramEnvParameterI4uiNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameterI4uiNV.f = transmute(ptr); storage::ProgramEnvParameterI4uiNV.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameterI4uiNV.f = transmute(failing::ProgramEnvParameterI4uiNV); storage::ProgramEnvParameterI4uiNV.is_loaded = false; } }
    match loadfn("ProgramEnvParameterI4uivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameterI4uivNV.f = transmute(ptr); storage::ProgramEnvParameterI4uivNV.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameterI4uivNV.f = transmute(failing::ProgramEnvParameterI4uivNV); storage::ProgramEnvParameterI4uivNV.is_loaded = false; } }
    match loadfn("ProgramEnvParameters4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameters4fvEXT.f = transmute(ptr); storage::ProgramEnvParameters4fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParameters4fvEXT.f = transmute(failing::ProgramEnvParameters4fvEXT); storage::ProgramEnvParameters4fvEXT.is_loaded = false; } }
    match loadfn("ProgramEnvParametersI4ivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParametersI4ivNV.f = transmute(ptr); storage::ProgramEnvParametersI4ivNV.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParametersI4ivNV.f = transmute(failing::ProgramEnvParametersI4ivNV); storage::ProgramEnvParametersI4ivNV.is_loaded = false; } }
    match loadfn("ProgramEnvParametersI4uivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParametersI4uivNV.f = transmute(ptr); storage::ProgramEnvParametersI4uivNV.is_loaded = true; }, _ => unsafe { storage::ProgramEnvParametersI4uivNV.f = transmute(failing::ProgramEnvParametersI4uivNV); storage::ProgramEnvParametersI4uivNV.is_loaded = false; } }
    match loadfn("ProgramLocalParameter4dARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameter4dARB.f = transmute(ptr); storage::ProgramLocalParameter4dARB.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameter4dARB.f = transmute(failing::ProgramLocalParameter4dARB); storage::ProgramLocalParameter4dARB.is_loaded = false; } }
    match loadfn("ProgramLocalParameter4dvARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameter4dvARB.f = transmute(ptr); storage::ProgramLocalParameter4dvARB.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameter4dvARB.f = transmute(failing::ProgramLocalParameter4dvARB); storage::ProgramLocalParameter4dvARB.is_loaded = false; } }
    match loadfn("ProgramLocalParameter4fARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameter4fARB.f = transmute(ptr); storage::ProgramLocalParameter4fARB.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameter4fARB.f = transmute(failing::ProgramLocalParameter4fARB); storage::ProgramLocalParameter4fARB.is_loaded = false; } }
    match loadfn("ProgramLocalParameter4fvARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameter4fvARB.f = transmute(ptr); storage::ProgramLocalParameter4fvARB.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameter4fvARB.f = transmute(failing::ProgramLocalParameter4fvARB); storage::ProgramLocalParameter4fvARB.is_loaded = false; } }
    match loadfn("ProgramLocalParameterI4iNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameterI4iNV.f = transmute(ptr); storage::ProgramLocalParameterI4iNV.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameterI4iNV.f = transmute(failing::ProgramLocalParameterI4iNV); storage::ProgramLocalParameterI4iNV.is_loaded = false; } }
    match loadfn("ProgramLocalParameterI4ivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameterI4ivNV.f = transmute(ptr); storage::ProgramLocalParameterI4ivNV.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameterI4ivNV.f = transmute(failing::ProgramLocalParameterI4ivNV); storage::ProgramLocalParameterI4ivNV.is_loaded = false; } }
    match loadfn("ProgramLocalParameterI4uiNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameterI4uiNV.f = transmute(ptr); storage::ProgramLocalParameterI4uiNV.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameterI4uiNV.f = transmute(failing::ProgramLocalParameterI4uiNV); storage::ProgramLocalParameterI4uiNV.is_loaded = false; } }
    match loadfn("ProgramLocalParameterI4uivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameterI4uivNV.f = transmute(ptr); storage::ProgramLocalParameterI4uivNV.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameterI4uivNV.f = transmute(failing::ProgramLocalParameterI4uivNV); storage::ProgramLocalParameterI4uivNV.is_loaded = false; } }
    match loadfn("ProgramLocalParameters4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameters4fvEXT.f = transmute(ptr); storage::ProgramLocalParameters4fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParameters4fvEXT.f = transmute(failing::ProgramLocalParameters4fvEXT); storage::ProgramLocalParameters4fvEXT.is_loaded = false; } }
    match loadfn("ProgramLocalParametersI4ivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParametersI4ivNV.f = transmute(ptr); storage::ProgramLocalParametersI4ivNV.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParametersI4ivNV.f = transmute(failing::ProgramLocalParametersI4ivNV); storage::ProgramLocalParametersI4ivNV.is_loaded = false; } }
    match loadfn("ProgramLocalParametersI4uivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParametersI4uivNV.f = transmute(ptr); storage::ProgramLocalParametersI4uivNV.is_loaded = true; }, _ => unsafe { storage::ProgramLocalParametersI4uivNV.f = transmute(failing::ProgramLocalParametersI4uivNV); storage::ProgramLocalParametersI4uivNV.is_loaded = false; } }
    match loadfn("ProgramNamedParameter4dNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramNamedParameter4dNV.f = transmute(ptr); storage::ProgramNamedParameter4dNV.is_loaded = true; }, _ => unsafe { storage::ProgramNamedParameter4dNV.f = transmute(failing::ProgramNamedParameter4dNV); storage::ProgramNamedParameter4dNV.is_loaded = false; } }
    match loadfn("ProgramNamedParameter4dvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramNamedParameter4dvNV.f = transmute(ptr); storage::ProgramNamedParameter4dvNV.is_loaded = true; }, _ => unsafe { storage::ProgramNamedParameter4dvNV.f = transmute(failing::ProgramNamedParameter4dvNV); storage::ProgramNamedParameter4dvNV.is_loaded = false; } }
    match loadfn("ProgramNamedParameter4fNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramNamedParameter4fNV.f = transmute(ptr); storage::ProgramNamedParameter4fNV.is_loaded = true; }, _ => unsafe { storage::ProgramNamedParameter4fNV.f = transmute(failing::ProgramNamedParameter4fNV); storage::ProgramNamedParameter4fNV.is_loaded = false; } }
    match loadfn("ProgramNamedParameter4fvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramNamedParameter4fvNV.f = transmute(ptr); storage::ProgramNamedParameter4fvNV.is_loaded = true; }, _ => unsafe { storage::ProgramNamedParameter4fvNV.f = transmute(failing::ProgramNamedParameter4fvNV); storage::ProgramNamedParameter4fvNV.is_loaded = false; } }
    match loadfn("ProgramParameter4dNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameter4dNV.f = transmute(ptr); storage::ProgramParameter4dNV.is_loaded = true; }, _ => unsafe { storage::ProgramParameter4dNV.f = transmute(failing::ProgramParameter4dNV); storage::ProgramParameter4dNV.is_loaded = false; } }
    match loadfn("ProgramParameter4dvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameter4dvNV.f = transmute(ptr); storage::ProgramParameter4dvNV.is_loaded = true; }, _ => unsafe { storage::ProgramParameter4dvNV.f = transmute(failing::ProgramParameter4dvNV); storage::ProgramParameter4dvNV.is_loaded = false; } }
    match loadfn("ProgramParameter4fNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameter4fNV.f = transmute(ptr); storage::ProgramParameter4fNV.is_loaded = true; }, _ => unsafe { storage::ProgramParameter4fNV.f = transmute(failing::ProgramParameter4fNV); storage::ProgramParameter4fNV.is_loaded = false; } }
    match loadfn("ProgramParameter4fvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameter4fvNV.f = transmute(ptr); storage::ProgramParameter4fvNV.is_loaded = true; }, _ => unsafe { storage::ProgramParameter4fvNV.f = transmute(failing::ProgramParameter4fvNV); storage::ProgramParameter4fvNV.is_loaded = false; } }
    match loadfn("ProgramParameteri") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameteri.f = transmute(ptr); storage::ProgramParameteri.is_loaded = true; }, _ => unsafe { storage::ProgramParameteri.f = transmute(failing::ProgramParameteri); storage::ProgramParameteri.is_loaded = false; } }
    match loadfn("ProgramParameteriARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameteriARB.f = transmute(ptr); storage::ProgramParameteriARB.is_loaded = true; }, _ => unsafe { storage::ProgramParameteriARB.f = transmute(failing::ProgramParameteriARB); storage::ProgramParameteriARB.is_loaded = false; } }
    match loadfn("ProgramParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameteriEXT.f = transmute(ptr); storage::ProgramParameteriEXT.is_loaded = true; }, _ => unsafe { storage::ProgramParameteriEXT.f = transmute(failing::ProgramParameteriEXT); storage::ProgramParameteriEXT.is_loaded = false; } }
    match loadfn("ProgramParameters4dvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameters4dvNV.f = transmute(ptr); storage::ProgramParameters4dvNV.is_loaded = true; }, _ => unsafe { storage::ProgramParameters4dvNV.f = transmute(failing::ProgramParameters4dvNV); storage::ProgramParameters4dvNV.is_loaded = false; } }
    match loadfn("ProgramParameters4fvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameters4fvNV.f = transmute(ptr); storage::ProgramParameters4fvNV.is_loaded = true; }, _ => unsafe { storage::ProgramParameters4fvNV.f = transmute(failing::ProgramParameters4fvNV); storage::ProgramParameters4fvNV.is_loaded = false; } }
    match loadfn("ProgramStringARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramStringARB.f = transmute(ptr); storage::ProgramStringARB.is_loaded = true; }, _ => unsafe { storage::ProgramStringARB.f = transmute(failing::ProgramStringARB); storage::ProgramStringARB.is_loaded = false; } }
    match loadfn("ProgramSubroutineParametersuivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramSubroutineParametersuivNV.f = transmute(ptr); storage::ProgramSubroutineParametersuivNV.is_loaded = true; }, _ => unsafe { storage::ProgramSubroutineParametersuivNV.f = transmute(failing::ProgramSubroutineParametersuivNV); storage::ProgramSubroutineParametersuivNV.is_loaded = false; } }
    match loadfn("ProgramUniform1d") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1d.f = transmute(ptr); storage::ProgramUniform1d.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1d.f = transmute(failing::ProgramUniform1d); storage::ProgramUniform1d.is_loaded = false; } }
    match loadfn("ProgramUniform1dEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1dEXT.f = transmute(ptr); storage::ProgramUniform1dEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1dEXT.f = transmute(failing::ProgramUniform1dEXT); storage::ProgramUniform1dEXT.is_loaded = false; } }
    match loadfn("ProgramUniform1dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1dv.f = transmute(ptr); storage::ProgramUniform1dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1dv.f = transmute(failing::ProgramUniform1dv); storage::ProgramUniform1dv.is_loaded = false; } }
    match loadfn("ProgramUniform1dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1dvEXT.f = transmute(ptr); storage::ProgramUniform1dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1dvEXT.f = transmute(failing::ProgramUniform1dvEXT); storage::ProgramUniform1dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniform1f") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1f.f = transmute(ptr); storage::ProgramUniform1f.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1f.f = transmute(failing::ProgramUniform1f); storage::ProgramUniform1f.is_loaded = false; } }
    match loadfn("ProgramUniform1fEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1fEXT.f = transmute(ptr); storage::ProgramUniform1fEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1fEXT.f = transmute(failing::ProgramUniform1fEXT); storage::ProgramUniform1fEXT.is_loaded = false; } }
    match loadfn("ProgramUniform1fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1fv.f = transmute(ptr); storage::ProgramUniform1fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1fv.f = transmute(failing::ProgramUniform1fv); storage::ProgramUniform1fv.is_loaded = false; } }
    match loadfn("ProgramUniform1fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1fvEXT.f = transmute(ptr); storage::ProgramUniform1fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1fvEXT.f = transmute(failing::ProgramUniform1fvEXT); storage::ProgramUniform1fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniform1i") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1i.f = transmute(ptr); storage::ProgramUniform1i.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1i.f = transmute(failing::ProgramUniform1i); storage::ProgramUniform1i.is_loaded = false; } }
    match loadfn("ProgramUniform1i64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1i64NV.f = transmute(ptr); storage::ProgramUniform1i64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1i64NV.f = transmute(failing::ProgramUniform1i64NV); storage::ProgramUniform1i64NV.is_loaded = false; } }
    match loadfn("ProgramUniform1i64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1i64vNV.f = transmute(ptr); storage::ProgramUniform1i64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1i64vNV.f = transmute(failing::ProgramUniform1i64vNV); storage::ProgramUniform1i64vNV.is_loaded = false; } }
    match loadfn("ProgramUniform1iEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1iEXT.f = transmute(ptr); storage::ProgramUniform1iEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1iEXT.f = transmute(failing::ProgramUniform1iEXT); storage::ProgramUniform1iEXT.is_loaded = false; } }
    match loadfn("ProgramUniform1iv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1iv.f = transmute(ptr); storage::ProgramUniform1iv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1iv.f = transmute(failing::ProgramUniform1iv); storage::ProgramUniform1iv.is_loaded = false; } }
    match loadfn("ProgramUniform1ivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1ivEXT.f = transmute(ptr); storage::ProgramUniform1ivEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1ivEXT.f = transmute(failing::ProgramUniform1ivEXT); storage::ProgramUniform1ivEXT.is_loaded = false; } }
    match loadfn("ProgramUniform1ui") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1ui.f = transmute(ptr); storage::ProgramUniform1ui.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1ui.f = transmute(failing::ProgramUniform1ui); storage::ProgramUniform1ui.is_loaded = false; } }
    match loadfn("ProgramUniform1ui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1ui64NV.f = transmute(ptr); storage::ProgramUniform1ui64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1ui64NV.f = transmute(failing::ProgramUniform1ui64NV); storage::ProgramUniform1ui64NV.is_loaded = false; } }
    match loadfn("ProgramUniform1ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1ui64vNV.f = transmute(ptr); storage::ProgramUniform1ui64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1ui64vNV.f = transmute(failing::ProgramUniform1ui64vNV); storage::ProgramUniform1ui64vNV.is_loaded = false; } }
    match loadfn("ProgramUniform1uiEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1uiEXT.f = transmute(ptr); storage::ProgramUniform1uiEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1uiEXT.f = transmute(failing::ProgramUniform1uiEXT); storage::ProgramUniform1uiEXT.is_loaded = false; } }
    match loadfn("ProgramUniform1uiv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1uiv.f = transmute(ptr); storage::ProgramUniform1uiv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1uiv.f = transmute(failing::ProgramUniform1uiv); storage::ProgramUniform1uiv.is_loaded = false; } }
    match loadfn("ProgramUniform1uivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1uivEXT.f = transmute(ptr); storage::ProgramUniform1uivEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform1uivEXT.f = transmute(failing::ProgramUniform1uivEXT); storage::ProgramUniform1uivEXT.is_loaded = false; } }
    match loadfn("ProgramUniform2d") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2d.f = transmute(ptr); storage::ProgramUniform2d.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2d.f = transmute(failing::ProgramUniform2d); storage::ProgramUniform2d.is_loaded = false; } }
    match loadfn("ProgramUniform2dEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2dEXT.f = transmute(ptr); storage::ProgramUniform2dEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2dEXT.f = transmute(failing::ProgramUniform2dEXT); storage::ProgramUniform2dEXT.is_loaded = false; } }
    match loadfn("ProgramUniform2dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2dv.f = transmute(ptr); storage::ProgramUniform2dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2dv.f = transmute(failing::ProgramUniform2dv); storage::ProgramUniform2dv.is_loaded = false; } }
    match loadfn("ProgramUniform2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2dvEXT.f = transmute(ptr); storage::ProgramUniform2dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2dvEXT.f = transmute(failing::ProgramUniform2dvEXT); storage::ProgramUniform2dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniform2f") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2f.f = transmute(ptr); storage::ProgramUniform2f.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2f.f = transmute(failing::ProgramUniform2f); storage::ProgramUniform2f.is_loaded = false; } }
    match loadfn("ProgramUniform2fEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2fEXT.f = transmute(ptr); storage::ProgramUniform2fEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2fEXT.f = transmute(failing::ProgramUniform2fEXT); storage::ProgramUniform2fEXT.is_loaded = false; } }
    match loadfn("ProgramUniform2fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2fv.f = transmute(ptr); storage::ProgramUniform2fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2fv.f = transmute(failing::ProgramUniform2fv); storage::ProgramUniform2fv.is_loaded = false; } }
    match loadfn("ProgramUniform2fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2fvEXT.f = transmute(ptr); storage::ProgramUniform2fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2fvEXT.f = transmute(failing::ProgramUniform2fvEXT); storage::ProgramUniform2fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniform2i") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2i.f = transmute(ptr); storage::ProgramUniform2i.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2i.f = transmute(failing::ProgramUniform2i); storage::ProgramUniform2i.is_loaded = false; } }
    match loadfn("ProgramUniform2i64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2i64NV.f = transmute(ptr); storage::ProgramUniform2i64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2i64NV.f = transmute(failing::ProgramUniform2i64NV); storage::ProgramUniform2i64NV.is_loaded = false; } }
    match loadfn("ProgramUniform2i64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2i64vNV.f = transmute(ptr); storage::ProgramUniform2i64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2i64vNV.f = transmute(failing::ProgramUniform2i64vNV); storage::ProgramUniform2i64vNV.is_loaded = false; } }
    match loadfn("ProgramUniform2iEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2iEXT.f = transmute(ptr); storage::ProgramUniform2iEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2iEXT.f = transmute(failing::ProgramUniform2iEXT); storage::ProgramUniform2iEXT.is_loaded = false; } }
    match loadfn("ProgramUniform2iv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2iv.f = transmute(ptr); storage::ProgramUniform2iv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2iv.f = transmute(failing::ProgramUniform2iv); storage::ProgramUniform2iv.is_loaded = false; } }
    match loadfn("ProgramUniform2ivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2ivEXT.f = transmute(ptr); storage::ProgramUniform2ivEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2ivEXT.f = transmute(failing::ProgramUniform2ivEXT); storage::ProgramUniform2ivEXT.is_loaded = false; } }
    match loadfn("ProgramUniform2ui") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2ui.f = transmute(ptr); storage::ProgramUniform2ui.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2ui.f = transmute(failing::ProgramUniform2ui); storage::ProgramUniform2ui.is_loaded = false; } }
    match loadfn("ProgramUniform2ui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2ui64NV.f = transmute(ptr); storage::ProgramUniform2ui64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2ui64NV.f = transmute(failing::ProgramUniform2ui64NV); storage::ProgramUniform2ui64NV.is_loaded = false; } }
    match loadfn("ProgramUniform2ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2ui64vNV.f = transmute(ptr); storage::ProgramUniform2ui64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2ui64vNV.f = transmute(failing::ProgramUniform2ui64vNV); storage::ProgramUniform2ui64vNV.is_loaded = false; } }
    match loadfn("ProgramUniform2uiEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2uiEXT.f = transmute(ptr); storage::ProgramUniform2uiEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2uiEXT.f = transmute(failing::ProgramUniform2uiEXT); storage::ProgramUniform2uiEXT.is_loaded = false; } }
    match loadfn("ProgramUniform2uiv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2uiv.f = transmute(ptr); storage::ProgramUniform2uiv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2uiv.f = transmute(failing::ProgramUniform2uiv); storage::ProgramUniform2uiv.is_loaded = false; } }
    match loadfn("ProgramUniform2uivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2uivEXT.f = transmute(ptr); storage::ProgramUniform2uivEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform2uivEXT.f = transmute(failing::ProgramUniform2uivEXT); storage::ProgramUniform2uivEXT.is_loaded = false; } }
    match loadfn("ProgramUniform3d") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3d.f = transmute(ptr); storage::ProgramUniform3d.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3d.f = transmute(failing::ProgramUniform3d); storage::ProgramUniform3d.is_loaded = false; } }
    match loadfn("ProgramUniform3dEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3dEXT.f = transmute(ptr); storage::ProgramUniform3dEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3dEXT.f = transmute(failing::ProgramUniform3dEXT); storage::ProgramUniform3dEXT.is_loaded = false; } }
    match loadfn("ProgramUniform3dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3dv.f = transmute(ptr); storage::ProgramUniform3dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3dv.f = transmute(failing::ProgramUniform3dv); storage::ProgramUniform3dv.is_loaded = false; } }
    match loadfn("ProgramUniform3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3dvEXT.f = transmute(ptr); storage::ProgramUniform3dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3dvEXT.f = transmute(failing::ProgramUniform3dvEXT); storage::ProgramUniform3dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniform3f") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3f.f = transmute(ptr); storage::ProgramUniform3f.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3f.f = transmute(failing::ProgramUniform3f); storage::ProgramUniform3f.is_loaded = false; } }
    match loadfn("ProgramUniform3fEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3fEXT.f = transmute(ptr); storage::ProgramUniform3fEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3fEXT.f = transmute(failing::ProgramUniform3fEXT); storage::ProgramUniform3fEXT.is_loaded = false; } }
    match loadfn("ProgramUniform3fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3fv.f = transmute(ptr); storage::ProgramUniform3fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3fv.f = transmute(failing::ProgramUniform3fv); storage::ProgramUniform3fv.is_loaded = false; } }
    match loadfn("ProgramUniform3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3fvEXT.f = transmute(ptr); storage::ProgramUniform3fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3fvEXT.f = transmute(failing::ProgramUniform3fvEXT); storage::ProgramUniform3fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniform3i") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3i.f = transmute(ptr); storage::ProgramUniform3i.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3i.f = transmute(failing::ProgramUniform3i); storage::ProgramUniform3i.is_loaded = false; } }
    match loadfn("ProgramUniform3i64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3i64NV.f = transmute(ptr); storage::ProgramUniform3i64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3i64NV.f = transmute(failing::ProgramUniform3i64NV); storage::ProgramUniform3i64NV.is_loaded = false; } }
    match loadfn("ProgramUniform3i64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3i64vNV.f = transmute(ptr); storage::ProgramUniform3i64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3i64vNV.f = transmute(failing::ProgramUniform3i64vNV); storage::ProgramUniform3i64vNV.is_loaded = false; } }
    match loadfn("ProgramUniform3iEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3iEXT.f = transmute(ptr); storage::ProgramUniform3iEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3iEXT.f = transmute(failing::ProgramUniform3iEXT); storage::ProgramUniform3iEXT.is_loaded = false; } }
    match loadfn("ProgramUniform3iv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3iv.f = transmute(ptr); storage::ProgramUniform3iv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3iv.f = transmute(failing::ProgramUniform3iv); storage::ProgramUniform3iv.is_loaded = false; } }
    match loadfn("ProgramUniform3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3ivEXT.f = transmute(ptr); storage::ProgramUniform3ivEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3ivEXT.f = transmute(failing::ProgramUniform3ivEXT); storage::ProgramUniform3ivEXT.is_loaded = false; } }
    match loadfn("ProgramUniform3ui") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3ui.f = transmute(ptr); storage::ProgramUniform3ui.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3ui.f = transmute(failing::ProgramUniform3ui); storage::ProgramUniform3ui.is_loaded = false; } }
    match loadfn("ProgramUniform3ui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3ui64NV.f = transmute(ptr); storage::ProgramUniform3ui64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3ui64NV.f = transmute(failing::ProgramUniform3ui64NV); storage::ProgramUniform3ui64NV.is_loaded = false; } }
    match loadfn("ProgramUniform3ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3ui64vNV.f = transmute(ptr); storage::ProgramUniform3ui64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3ui64vNV.f = transmute(failing::ProgramUniform3ui64vNV); storage::ProgramUniform3ui64vNV.is_loaded = false; } }
    match loadfn("ProgramUniform3uiEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3uiEXT.f = transmute(ptr); storage::ProgramUniform3uiEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3uiEXT.f = transmute(failing::ProgramUniform3uiEXT); storage::ProgramUniform3uiEXT.is_loaded = false; } }
    match loadfn("ProgramUniform3uiv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3uiv.f = transmute(ptr); storage::ProgramUniform3uiv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3uiv.f = transmute(failing::ProgramUniform3uiv); storage::ProgramUniform3uiv.is_loaded = false; } }
    match loadfn("ProgramUniform3uivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3uivEXT.f = transmute(ptr); storage::ProgramUniform3uivEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform3uivEXT.f = transmute(failing::ProgramUniform3uivEXT); storage::ProgramUniform3uivEXT.is_loaded = false; } }
    match loadfn("ProgramUniform4d") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4d.f = transmute(ptr); storage::ProgramUniform4d.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4d.f = transmute(failing::ProgramUniform4d); storage::ProgramUniform4d.is_loaded = false; } }
    match loadfn("ProgramUniform4dEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4dEXT.f = transmute(ptr); storage::ProgramUniform4dEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4dEXT.f = transmute(failing::ProgramUniform4dEXT); storage::ProgramUniform4dEXT.is_loaded = false; } }
    match loadfn("ProgramUniform4dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4dv.f = transmute(ptr); storage::ProgramUniform4dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4dv.f = transmute(failing::ProgramUniform4dv); storage::ProgramUniform4dv.is_loaded = false; } }
    match loadfn("ProgramUniform4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4dvEXT.f = transmute(ptr); storage::ProgramUniform4dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4dvEXT.f = transmute(failing::ProgramUniform4dvEXT); storage::ProgramUniform4dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniform4f") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4f.f = transmute(ptr); storage::ProgramUniform4f.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4f.f = transmute(failing::ProgramUniform4f); storage::ProgramUniform4f.is_loaded = false; } }
    match loadfn("ProgramUniform4fEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4fEXT.f = transmute(ptr); storage::ProgramUniform4fEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4fEXT.f = transmute(failing::ProgramUniform4fEXT); storage::ProgramUniform4fEXT.is_loaded = false; } }
    match loadfn("ProgramUniform4fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4fv.f = transmute(ptr); storage::ProgramUniform4fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4fv.f = transmute(failing::ProgramUniform4fv); storage::ProgramUniform4fv.is_loaded = false; } }
    match loadfn("ProgramUniform4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4fvEXT.f = transmute(ptr); storage::ProgramUniform4fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4fvEXT.f = transmute(failing::ProgramUniform4fvEXT); storage::ProgramUniform4fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniform4i") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4i.f = transmute(ptr); storage::ProgramUniform4i.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4i.f = transmute(failing::ProgramUniform4i); storage::ProgramUniform4i.is_loaded = false; } }
    match loadfn("ProgramUniform4i64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4i64NV.f = transmute(ptr); storage::ProgramUniform4i64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4i64NV.f = transmute(failing::ProgramUniform4i64NV); storage::ProgramUniform4i64NV.is_loaded = false; } }
    match loadfn("ProgramUniform4i64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4i64vNV.f = transmute(ptr); storage::ProgramUniform4i64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4i64vNV.f = transmute(failing::ProgramUniform4i64vNV); storage::ProgramUniform4i64vNV.is_loaded = false; } }
    match loadfn("ProgramUniform4iEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4iEXT.f = transmute(ptr); storage::ProgramUniform4iEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4iEXT.f = transmute(failing::ProgramUniform4iEXT); storage::ProgramUniform4iEXT.is_loaded = false; } }
    match loadfn("ProgramUniform4iv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4iv.f = transmute(ptr); storage::ProgramUniform4iv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4iv.f = transmute(failing::ProgramUniform4iv); storage::ProgramUniform4iv.is_loaded = false; } }
    match loadfn("ProgramUniform4ivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4ivEXT.f = transmute(ptr); storage::ProgramUniform4ivEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4ivEXT.f = transmute(failing::ProgramUniform4ivEXT); storage::ProgramUniform4ivEXT.is_loaded = false; } }
    match loadfn("ProgramUniform4ui") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4ui.f = transmute(ptr); storage::ProgramUniform4ui.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4ui.f = transmute(failing::ProgramUniform4ui); storage::ProgramUniform4ui.is_loaded = false; } }
    match loadfn("ProgramUniform4ui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4ui64NV.f = transmute(ptr); storage::ProgramUniform4ui64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4ui64NV.f = transmute(failing::ProgramUniform4ui64NV); storage::ProgramUniform4ui64NV.is_loaded = false; } }
    match loadfn("ProgramUniform4ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4ui64vNV.f = transmute(ptr); storage::ProgramUniform4ui64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4ui64vNV.f = transmute(failing::ProgramUniform4ui64vNV); storage::ProgramUniform4ui64vNV.is_loaded = false; } }
    match loadfn("ProgramUniform4uiEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4uiEXT.f = transmute(ptr); storage::ProgramUniform4uiEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4uiEXT.f = transmute(failing::ProgramUniform4uiEXT); storage::ProgramUniform4uiEXT.is_loaded = false; } }
    match loadfn("ProgramUniform4uiv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4uiv.f = transmute(ptr); storage::ProgramUniform4uiv.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4uiv.f = transmute(failing::ProgramUniform4uiv); storage::ProgramUniform4uiv.is_loaded = false; } }
    match loadfn("ProgramUniform4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4uivEXT.f = transmute(ptr); storage::ProgramUniform4uivEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniform4uivEXT.f = transmute(failing::ProgramUniform4uivEXT); storage::ProgramUniform4uivEXT.is_loaded = false; } }
    match loadfn("ProgramUniformHandleui64ARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformHandleui64ARB.f = transmute(ptr); storage::ProgramUniformHandleui64ARB.is_loaded = true; }, _ => unsafe { storage::ProgramUniformHandleui64ARB.f = transmute(failing::ProgramUniformHandleui64ARB); storage::ProgramUniformHandleui64ARB.is_loaded = false; } }
    match loadfn("ProgramUniformHandleui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformHandleui64NV.f = transmute(ptr); storage::ProgramUniformHandleui64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniformHandleui64NV.f = transmute(failing::ProgramUniformHandleui64NV); storage::ProgramUniformHandleui64NV.is_loaded = false; } }
    match loadfn("ProgramUniformHandleui64vARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformHandleui64vARB.f = transmute(ptr); storage::ProgramUniformHandleui64vARB.is_loaded = true; }, _ => unsafe { storage::ProgramUniformHandleui64vARB.f = transmute(failing::ProgramUniformHandleui64vARB); storage::ProgramUniformHandleui64vARB.is_loaded = false; } }
    match loadfn("ProgramUniformHandleui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformHandleui64vNV.f = transmute(ptr); storage::ProgramUniformHandleui64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniformHandleui64vNV.f = transmute(failing::ProgramUniformHandleui64vNV); storage::ProgramUniformHandleui64vNV.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2dv.f = transmute(ptr); storage::ProgramUniformMatrix2dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2dv.f = transmute(failing::ProgramUniformMatrix2dv); storage::ProgramUniformMatrix2dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix2dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2dvEXT.f = transmute(failing::ProgramUniformMatrix2dvEXT); storage::ProgramUniformMatrix2dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2fv.f = transmute(ptr); storage::ProgramUniformMatrix2fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2fv.f = transmute(failing::ProgramUniformMatrix2fv); storage::ProgramUniformMatrix2fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix2fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2fvEXT.f = transmute(failing::ProgramUniformMatrix2fvEXT); storage::ProgramUniformMatrix2fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x3dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x3dv.f = transmute(ptr); storage::ProgramUniformMatrix2x3dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2x3dv.f = transmute(failing::ProgramUniformMatrix2x3dv); storage::ProgramUniformMatrix2x3dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x3dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix2x3dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2x3dvEXT.f = transmute(failing::ProgramUniformMatrix2x3dvEXT); storage::ProgramUniformMatrix2x3dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x3fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x3fv.f = transmute(ptr); storage::ProgramUniformMatrix2x3fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2x3fv.f = transmute(failing::ProgramUniformMatrix2x3fv); storage::ProgramUniformMatrix2x3fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x3fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix2x3fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2x3fvEXT.f = transmute(failing::ProgramUniformMatrix2x3fvEXT); storage::ProgramUniformMatrix2x3fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x4dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x4dv.f = transmute(ptr); storage::ProgramUniformMatrix2x4dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2x4dv.f = transmute(failing::ProgramUniformMatrix2x4dv); storage::ProgramUniformMatrix2x4dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x4dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix2x4dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2x4dvEXT.f = transmute(failing::ProgramUniformMatrix2x4dvEXT); storage::ProgramUniformMatrix2x4dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x4fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x4fv.f = transmute(ptr); storage::ProgramUniformMatrix2x4fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2x4fv.f = transmute(failing::ProgramUniformMatrix2x4fv); storage::ProgramUniformMatrix2x4fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x4fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix2x4fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix2x4fvEXT.f = transmute(failing::ProgramUniformMatrix2x4fvEXT); storage::ProgramUniformMatrix2x4fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3dv.f = transmute(ptr); storage::ProgramUniformMatrix3dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3dv.f = transmute(failing::ProgramUniformMatrix3dv); storage::ProgramUniformMatrix3dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix3dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3dvEXT.f = transmute(failing::ProgramUniformMatrix3dvEXT); storage::ProgramUniformMatrix3dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3fv.f = transmute(ptr); storage::ProgramUniformMatrix3fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3fv.f = transmute(failing::ProgramUniformMatrix3fv); storage::ProgramUniformMatrix3fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix3fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3fvEXT.f = transmute(failing::ProgramUniformMatrix3fvEXT); storage::ProgramUniformMatrix3fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x2dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x2dv.f = transmute(ptr); storage::ProgramUniformMatrix3x2dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3x2dv.f = transmute(failing::ProgramUniformMatrix3x2dv); storage::ProgramUniformMatrix3x2dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x2dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix3x2dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3x2dvEXT.f = transmute(failing::ProgramUniformMatrix3x2dvEXT); storage::ProgramUniformMatrix3x2dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x2fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x2fv.f = transmute(ptr); storage::ProgramUniformMatrix3x2fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3x2fv.f = transmute(failing::ProgramUniformMatrix3x2fv); storage::ProgramUniformMatrix3x2fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x2fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x2fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix3x2fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3x2fvEXT.f = transmute(failing::ProgramUniformMatrix3x2fvEXT); storage::ProgramUniformMatrix3x2fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x4dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x4dv.f = transmute(ptr); storage::ProgramUniformMatrix3x4dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3x4dv.f = transmute(failing::ProgramUniformMatrix3x4dv); storage::ProgramUniformMatrix3x4dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x4dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix3x4dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3x4dvEXT.f = transmute(failing::ProgramUniformMatrix3x4dvEXT); storage::ProgramUniformMatrix3x4dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x4fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x4fv.f = transmute(ptr); storage::ProgramUniformMatrix3x4fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3x4fv.f = transmute(failing::ProgramUniformMatrix3x4fv); storage::ProgramUniformMatrix3x4fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x4fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix3x4fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix3x4fvEXT.f = transmute(failing::ProgramUniformMatrix3x4fvEXT); storage::ProgramUniformMatrix3x4fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4dv.f = transmute(ptr); storage::ProgramUniformMatrix4dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4dv.f = transmute(failing::ProgramUniformMatrix4dv); storage::ProgramUniformMatrix4dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix4dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4dvEXT.f = transmute(failing::ProgramUniformMatrix4dvEXT); storage::ProgramUniformMatrix4dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4fv.f = transmute(ptr); storage::ProgramUniformMatrix4fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4fv.f = transmute(failing::ProgramUniformMatrix4fv); storage::ProgramUniformMatrix4fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix4fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4fvEXT.f = transmute(failing::ProgramUniformMatrix4fvEXT); storage::ProgramUniformMatrix4fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x2dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x2dv.f = transmute(ptr); storage::ProgramUniformMatrix4x2dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4x2dv.f = transmute(failing::ProgramUniformMatrix4x2dv); storage::ProgramUniformMatrix4x2dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x2dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix4x2dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4x2dvEXT.f = transmute(failing::ProgramUniformMatrix4x2dvEXT); storage::ProgramUniformMatrix4x2dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x2fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x2fv.f = transmute(ptr); storage::ProgramUniformMatrix4x2fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4x2fv.f = transmute(failing::ProgramUniformMatrix4x2fv); storage::ProgramUniformMatrix4x2fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x2fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x2fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix4x2fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4x2fvEXT.f = transmute(failing::ProgramUniformMatrix4x2fvEXT); storage::ProgramUniformMatrix4x2fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x3dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x3dv.f = transmute(ptr); storage::ProgramUniformMatrix4x3dv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4x3dv.f = transmute(failing::ProgramUniformMatrix4x3dv); storage::ProgramUniformMatrix4x3dv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x3dvEXT.f = transmute(ptr); storage::ProgramUniformMatrix4x3dvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4x3dvEXT.f = transmute(failing::ProgramUniformMatrix4x3dvEXT); storage::ProgramUniformMatrix4x3dvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x3fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x3fv.f = transmute(ptr); storage::ProgramUniformMatrix4x3fv.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4x3fv.f = transmute(failing::ProgramUniformMatrix4x3fv); storage::ProgramUniformMatrix4x3fv.is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x3fvEXT.f = transmute(ptr); storage::ProgramUniformMatrix4x3fvEXT.is_loaded = true; }, _ => unsafe { storage::ProgramUniformMatrix4x3fvEXT.f = transmute(failing::ProgramUniformMatrix4x3fvEXT); storage::ProgramUniformMatrix4x3fvEXT.is_loaded = false; } }
    match loadfn("ProgramUniformui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformui64NV.f = transmute(ptr); storage::ProgramUniformui64NV.is_loaded = true; }, _ => unsafe { storage::ProgramUniformui64NV.f = transmute(failing::ProgramUniformui64NV); storage::ProgramUniformui64NV.is_loaded = false; } }
    match loadfn("ProgramUniformui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformui64vNV.f = transmute(ptr); storage::ProgramUniformui64vNV.is_loaded = true; }, _ => unsafe { storage::ProgramUniformui64vNV.f = transmute(failing::ProgramUniformui64vNV); storage::ProgramUniformui64vNV.is_loaded = false; } }
    match loadfn("ProgramVertexLimitNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramVertexLimitNV.f = transmute(ptr); storage::ProgramVertexLimitNV.is_loaded = true; }, _ => unsafe { storage::ProgramVertexLimitNV.f = transmute(failing::ProgramVertexLimitNV); storage::ProgramVertexLimitNV.is_loaded = false; } }
    match loadfn("ProvokingVertex") { ptr if !ptr.is_null() => unsafe { storage::ProvokingVertex.f = transmute(ptr); storage::ProvokingVertex.is_loaded = true; }, _ => unsafe { storage::ProvokingVertex.f = transmute(failing::ProvokingVertex); storage::ProvokingVertex.is_loaded = false; } }
    match loadfn("ProvokingVertexEXT") { ptr if !ptr.is_null() => unsafe { storage::ProvokingVertexEXT.f = transmute(ptr); storage::ProvokingVertexEXT.is_loaded = true; }, _ => unsafe { storage::ProvokingVertexEXT.f = transmute(failing::ProvokingVertexEXT); storage::ProvokingVertexEXT.is_loaded = false; } }
    match loadfn("PushAttrib") { ptr if !ptr.is_null() => unsafe { storage::PushAttrib.f = transmute(ptr); storage::PushAttrib.is_loaded = true; }, _ => unsafe { storage::PushAttrib.f = transmute(failing::PushAttrib); storage::PushAttrib.is_loaded = false; } }
    match loadfn("PushClientAttrib") { ptr if !ptr.is_null() => unsafe { storage::PushClientAttrib.f = transmute(ptr); storage::PushClientAttrib.is_loaded = true; }, _ => unsafe { storage::PushClientAttrib.f = transmute(failing::PushClientAttrib); storage::PushClientAttrib.is_loaded = false; } }
    match loadfn("PushClientAttribDefaultEXT") { ptr if !ptr.is_null() => unsafe { storage::PushClientAttribDefaultEXT.f = transmute(ptr); storage::PushClientAttribDefaultEXT.is_loaded = true; }, _ => unsafe { storage::PushClientAttribDefaultEXT.f = transmute(failing::PushClientAttribDefaultEXT); storage::PushClientAttribDefaultEXT.is_loaded = false; } }
    match loadfn("PushDebugGroup") { ptr if !ptr.is_null() => unsafe { storage::PushDebugGroup.f = transmute(ptr); storage::PushDebugGroup.is_loaded = true; }, _ => unsafe { storage::PushDebugGroup.f = transmute(failing::PushDebugGroup); storage::PushDebugGroup.is_loaded = false; } }
    match loadfn("PushDebugGroupKHR") { ptr if !ptr.is_null() => unsafe { storage::PushDebugGroupKHR.f = transmute(ptr); storage::PushDebugGroupKHR.is_loaded = true; }, _ => unsafe { storage::PushDebugGroupKHR.f = transmute(failing::PushDebugGroupKHR); storage::PushDebugGroupKHR.is_loaded = false; } }
    match loadfn("PushGroupMarkerEXT") { ptr if !ptr.is_null() => unsafe { storage::PushGroupMarkerEXT.f = transmute(ptr); storage::PushGroupMarkerEXT.is_loaded = true; }, _ => unsafe { storage::PushGroupMarkerEXT.f = transmute(failing::PushGroupMarkerEXT); storage::PushGroupMarkerEXT.is_loaded = false; } }
    match loadfn("PushMatrix") { ptr if !ptr.is_null() => unsafe { storage::PushMatrix.f = transmute(ptr); storage::PushMatrix.is_loaded = true; }, _ => unsafe { storage::PushMatrix.f = transmute(failing::PushMatrix); storage::PushMatrix.is_loaded = false; } }
    match loadfn("PushName") { ptr if !ptr.is_null() => unsafe { storage::PushName.f = transmute(ptr); storage::PushName.is_loaded = true; }, _ => unsafe { storage::PushName.f = transmute(failing::PushName); storage::PushName.is_loaded = false; } }
    match loadfn("QueryCounter") { ptr if !ptr.is_null() => unsafe { storage::QueryCounter.f = transmute(ptr); storage::QueryCounter.is_loaded = true; }, _ => unsafe { storage::QueryCounter.f = transmute(failing::QueryCounter); storage::QueryCounter.is_loaded = false; } }
    match loadfn("QueryCounterEXT") { ptr if !ptr.is_null() => unsafe { storage::QueryCounterEXT.f = transmute(ptr); storage::QueryCounterEXT.is_loaded = true; }, _ => unsafe { storage::QueryCounterEXT.f = transmute(failing::QueryCounterEXT); storage::QueryCounterEXT.is_loaded = false; } }
    match loadfn("QueryMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::QueryMatrixxOES.f = transmute(ptr); storage::QueryMatrixxOES.is_loaded = true; }, _ => unsafe { storage::QueryMatrixxOES.f = transmute(failing::QueryMatrixxOES); storage::QueryMatrixxOES.is_loaded = false; } }
    match loadfn("RasterPos2d") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2d.f = transmute(ptr); storage::RasterPos2d.is_loaded = true; }, _ => unsafe { storage::RasterPos2d.f = transmute(failing::RasterPos2d); storage::RasterPos2d.is_loaded = false; } }
    match loadfn("RasterPos2dv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2dv.f = transmute(ptr); storage::RasterPos2dv.is_loaded = true; }, _ => unsafe { storage::RasterPos2dv.f = transmute(failing::RasterPos2dv); storage::RasterPos2dv.is_loaded = false; } }
    match loadfn("RasterPos2f") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2f.f = transmute(ptr); storage::RasterPos2f.is_loaded = true; }, _ => unsafe { storage::RasterPos2f.f = transmute(failing::RasterPos2f); storage::RasterPos2f.is_loaded = false; } }
    match loadfn("RasterPos2fv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2fv.f = transmute(ptr); storage::RasterPos2fv.is_loaded = true; }, _ => unsafe { storage::RasterPos2fv.f = transmute(failing::RasterPos2fv); storage::RasterPos2fv.is_loaded = false; } }
    match loadfn("RasterPos2i") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2i.f = transmute(ptr); storage::RasterPos2i.is_loaded = true; }, _ => unsafe { storage::RasterPos2i.f = transmute(failing::RasterPos2i); storage::RasterPos2i.is_loaded = false; } }
    match loadfn("RasterPos2iv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2iv.f = transmute(ptr); storage::RasterPos2iv.is_loaded = true; }, _ => unsafe { storage::RasterPos2iv.f = transmute(failing::RasterPos2iv); storage::RasterPos2iv.is_loaded = false; } }
    match loadfn("RasterPos2s") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2s.f = transmute(ptr); storage::RasterPos2s.is_loaded = true; }, _ => unsafe { storage::RasterPos2s.f = transmute(failing::RasterPos2s); storage::RasterPos2s.is_loaded = false; } }
    match loadfn("RasterPos2sv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2sv.f = transmute(ptr); storage::RasterPos2sv.is_loaded = true; }, _ => unsafe { storage::RasterPos2sv.f = transmute(failing::RasterPos2sv); storage::RasterPos2sv.is_loaded = false; } }
    match loadfn("RasterPos2xOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2xOES.f = transmute(ptr); storage::RasterPos2xOES.is_loaded = true; }, _ => unsafe { storage::RasterPos2xOES.f = transmute(failing::RasterPos2xOES); storage::RasterPos2xOES.is_loaded = false; } }
    match loadfn("RasterPos2xvOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2xvOES.f = transmute(ptr); storage::RasterPos2xvOES.is_loaded = true; }, _ => unsafe { storage::RasterPos2xvOES.f = transmute(failing::RasterPos2xvOES); storage::RasterPos2xvOES.is_loaded = false; } }
    match loadfn("RasterPos3d") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3d.f = transmute(ptr); storage::RasterPos3d.is_loaded = true; }, _ => unsafe { storage::RasterPos3d.f = transmute(failing::RasterPos3d); storage::RasterPos3d.is_loaded = false; } }
    match loadfn("RasterPos3dv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3dv.f = transmute(ptr); storage::RasterPos3dv.is_loaded = true; }, _ => unsafe { storage::RasterPos3dv.f = transmute(failing::RasterPos3dv); storage::RasterPos3dv.is_loaded = false; } }
    match loadfn("RasterPos3f") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3f.f = transmute(ptr); storage::RasterPos3f.is_loaded = true; }, _ => unsafe { storage::RasterPos3f.f = transmute(failing::RasterPos3f); storage::RasterPos3f.is_loaded = false; } }
    match loadfn("RasterPos3fv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3fv.f = transmute(ptr); storage::RasterPos3fv.is_loaded = true; }, _ => unsafe { storage::RasterPos3fv.f = transmute(failing::RasterPos3fv); storage::RasterPos3fv.is_loaded = false; } }
    match loadfn("RasterPos3i") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3i.f = transmute(ptr); storage::RasterPos3i.is_loaded = true; }, _ => unsafe { storage::RasterPos3i.f = transmute(failing::RasterPos3i); storage::RasterPos3i.is_loaded = false; } }
    match loadfn("RasterPos3iv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3iv.f = transmute(ptr); storage::RasterPos3iv.is_loaded = true; }, _ => unsafe { storage::RasterPos3iv.f = transmute(failing::RasterPos3iv); storage::RasterPos3iv.is_loaded = false; } }
    match loadfn("RasterPos3s") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3s.f = transmute(ptr); storage::RasterPos3s.is_loaded = true; }, _ => unsafe { storage::RasterPos3s.f = transmute(failing::RasterPos3s); storage::RasterPos3s.is_loaded = false; } }
    match loadfn("RasterPos3sv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3sv.f = transmute(ptr); storage::RasterPos3sv.is_loaded = true; }, _ => unsafe { storage::RasterPos3sv.f = transmute(failing::RasterPos3sv); storage::RasterPos3sv.is_loaded = false; } }
    match loadfn("RasterPos3xOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3xOES.f = transmute(ptr); storage::RasterPos3xOES.is_loaded = true; }, _ => unsafe { storage::RasterPos3xOES.f = transmute(failing::RasterPos3xOES); storage::RasterPos3xOES.is_loaded = false; } }
    match loadfn("RasterPos3xvOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3xvOES.f = transmute(ptr); storage::RasterPos3xvOES.is_loaded = true; }, _ => unsafe { storage::RasterPos3xvOES.f = transmute(failing::RasterPos3xvOES); storage::RasterPos3xvOES.is_loaded = false; } }
    match loadfn("RasterPos4d") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4d.f = transmute(ptr); storage::RasterPos4d.is_loaded = true; }, _ => unsafe { storage::RasterPos4d.f = transmute(failing::RasterPos4d); storage::RasterPos4d.is_loaded = false; } }
    match loadfn("RasterPos4dv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4dv.f = transmute(ptr); storage::RasterPos4dv.is_loaded = true; }, _ => unsafe { storage::RasterPos4dv.f = transmute(failing::RasterPos4dv); storage::RasterPos4dv.is_loaded = false; } }
    match loadfn("RasterPos4f") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4f.f = transmute(ptr); storage::RasterPos4f.is_loaded = true; }, _ => unsafe { storage::RasterPos4f.f = transmute(failing::RasterPos4f); storage::RasterPos4f.is_loaded = false; } }
    match loadfn("RasterPos4fv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4fv.f = transmute(ptr); storage::RasterPos4fv.is_loaded = true; }, _ => unsafe { storage::RasterPos4fv.f = transmute(failing::RasterPos4fv); storage::RasterPos4fv.is_loaded = false; } }
    match loadfn("RasterPos4i") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4i.f = transmute(ptr); storage::RasterPos4i.is_loaded = true; }, _ => unsafe { storage::RasterPos4i.f = transmute(failing::RasterPos4i); storage::RasterPos4i.is_loaded = false; } }
    match loadfn("RasterPos4iv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4iv.f = transmute(ptr); storage::RasterPos4iv.is_loaded = true; }, _ => unsafe { storage::RasterPos4iv.f = transmute(failing::RasterPos4iv); storage::RasterPos4iv.is_loaded = false; } }
    match loadfn("RasterPos4s") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4s.f = transmute(ptr); storage::RasterPos4s.is_loaded = true; }, _ => unsafe { storage::RasterPos4s.f = transmute(failing::RasterPos4s); storage::RasterPos4s.is_loaded = false; } }
    match loadfn("RasterPos4sv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4sv.f = transmute(ptr); storage::RasterPos4sv.is_loaded = true; }, _ => unsafe { storage::RasterPos4sv.f = transmute(failing::RasterPos4sv); storage::RasterPos4sv.is_loaded = false; } }
    match loadfn("RasterPos4xOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4xOES.f = transmute(ptr); storage::RasterPos4xOES.is_loaded = true; }, _ => unsafe { storage::RasterPos4xOES.f = transmute(failing::RasterPos4xOES); storage::RasterPos4xOES.is_loaded = false; } }
    match loadfn("RasterPos4xvOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4xvOES.f = transmute(ptr); storage::RasterPos4xvOES.is_loaded = true; }, _ => unsafe { storage::RasterPos4xvOES.f = transmute(failing::RasterPos4xvOES); storage::RasterPos4xvOES.is_loaded = false; } }
    match loadfn("ReadBuffer") { ptr if !ptr.is_null() => unsafe { storage::ReadBuffer.f = transmute(ptr); storage::ReadBuffer.is_loaded = true; }, _ => unsafe { storage::ReadBuffer.f = transmute(failing::ReadBuffer); storage::ReadBuffer.is_loaded = false; } }
    match loadfn("ReadBufferIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::ReadBufferIndexedEXT.f = transmute(ptr); storage::ReadBufferIndexedEXT.is_loaded = true; }, _ => unsafe { storage::ReadBufferIndexedEXT.f = transmute(failing::ReadBufferIndexedEXT); storage::ReadBufferIndexedEXT.is_loaded = false; } }
    match loadfn("ReadBufferNV") { ptr if !ptr.is_null() => unsafe { storage::ReadBufferNV.f = transmute(ptr); storage::ReadBufferNV.is_loaded = true; }, _ => unsafe { storage::ReadBufferNV.f = transmute(failing::ReadBufferNV); storage::ReadBufferNV.is_loaded = false; } }
    match loadfn("ReadInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::ReadInstrumentsSGIX.f = transmute(ptr); storage::ReadInstrumentsSGIX.is_loaded = true; }, _ => unsafe { storage::ReadInstrumentsSGIX.f = transmute(failing::ReadInstrumentsSGIX); storage::ReadInstrumentsSGIX.is_loaded = false; } }
    match loadfn("ReadPixels") { ptr if !ptr.is_null() => unsafe { storage::ReadPixels.f = transmute(ptr); storage::ReadPixels.is_loaded = true; }, _ => unsafe { storage::ReadPixels.f = transmute(failing::ReadPixels); storage::ReadPixels.is_loaded = false; } }
    match loadfn("ReadnPixelsARB") { ptr if !ptr.is_null() => unsafe { storage::ReadnPixelsARB.f = transmute(ptr); storage::ReadnPixelsARB.is_loaded = true; }, _ => unsafe { storage::ReadnPixelsARB.f = transmute(failing::ReadnPixelsARB); storage::ReadnPixelsARB.is_loaded = false; } }
    match loadfn("ReadnPixelsEXT") { ptr if !ptr.is_null() => unsafe { storage::ReadnPixelsEXT.f = transmute(ptr); storage::ReadnPixelsEXT.is_loaded = true; }, _ => unsafe { storage::ReadnPixelsEXT.f = transmute(failing::ReadnPixelsEXT); storage::ReadnPixelsEXT.is_loaded = false; } }
    match loadfn("Rectd") { ptr if !ptr.is_null() => unsafe { storage::Rectd.f = transmute(ptr); storage::Rectd.is_loaded = true; }, _ => unsafe { storage::Rectd.f = transmute(failing::Rectd); storage::Rectd.is_loaded = false; } }
    match loadfn("Rectdv") { ptr if !ptr.is_null() => unsafe { storage::Rectdv.f = transmute(ptr); storage::Rectdv.is_loaded = true; }, _ => unsafe { storage::Rectdv.f = transmute(failing::Rectdv); storage::Rectdv.is_loaded = false; } }
    match loadfn("Rectf") { ptr if !ptr.is_null() => unsafe { storage::Rectf.f = transmute(ptr); storage::Rectf.is_loaded = true; }, _ => unsafe { storage::Rectf.f = transmute(failing::Rectf); storage::Rectf.is_loaded = false; } }
    match loadfn("Rectfv") { ptr if !ptr.is_null() => unsafe { storage::Rectfv.f = transmute(ptr); storage::Rectfv.is_loaded = true; }, _ => unsafe { storage::Rectfv.f = transmute(failing::Rectfv); storage::Rectfv.is_loaded = false; } }
    match loadfn("Recti") { ptr if !ptr.is_null() => unsafe { storage::Recti.f = transmute(ptr); storage::Recti.is_loaded = true; }, _ => unsafe { storage::Recti.f = transmute(failing::Recti); storage::Recti.is_loaded = false; } }
    match loadfn("Rectiv") { ptr if !ptr.is_null() => unsafe { storage::Rectiv.f = transmute(ptr); storage::Rectiv.is_loaded = true; }, _ => unsafe { storage::Rectiv.f = transmute(failing::Rectiv); storage::Rectiv.is_loaded = false; } }
    match loadfn("Rects") { ptr if !ptr.is_null() => unsafe { storage::Rects.f = transmute(ptr); storage::Rects.is_loaded = true; }, _ => unsafe { storage::Rects.f = transmute(failing::Rects); storage::Rects.is_loaded = false; } }
    match loadfn("Rectsv") { ptr if !ptr.is_null() => unsafe { storage::Rectsv.f = transmute(ptr); storage::Rectsv.is_loaded = true; }, _ => unsafe { storage::Rectsv.f = transmute(failing::Rectsv); storage::Rectsv.is_loaded = false; } }
    match loadfn("RectxOES") { ptr if !ptr.is_null() => unsafe { storage::RectxOES.f = transmute(ptr); storage::RectxOES.is_loaded = true; }, _ => unsafe { storage::RectxOES.f = transmute(failing::RectxOES); storage::RectxOES.is_loaded = false; } }
    match loadfn("RectxvOES") { ptr if !ptr.is_null() => unsafe { storage::RectxvOES.f = transmute(ptr); storage::RectxvOES.is_loaded = true; }, _ => unsafe { storage::RectxvOES.f = transmute(failing::RectxvOES); storage::RectxvOES.is_loaded = false; } }
    match loadfn("ReferencePlaneSGIX") { ptr if !ptr.is_null() => unsafe { storage::ReferencePlaneSGIX.f = transmute(ptr); storage::ReferencePlaneSGIX.is_loaded = true; }, _ => unsafe { storage::ReferencePlaneSGIX.f = transmute(failing::ReferencePlaneSGIX); storage::ReferencePlaneSGIX.is_loaded = false; } }
    match loadfn("ReleaseShaderCompiler") { ptr if !ptr.is_null() => unsafe { storage::ReleaseShaderCompiler.f = transmute(ptr); storage::ReleaseShaderCompiler.is_loaded = true; }, _ => unsafe { storage::ReleaseShaderCompiler.f = transmute(failing::ReleaseShaderCompiler); storage::ReleaseShaderCompiler.is_loaded = false; } }
    match loadfn("RenderMode") { ptr if !ptr.is_null() => unsafe { storage::RenderMode.f = transmute(ptr); storage::RenderMode.is_loaded = true; }, _ => unsafe { storage::RenderMode.f = transmute(failing::RenderMode); storage::RenderMode.is_loaded = false; } }
    match loadfn("RenderbufferStorage") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorage.f = transmute(ptr); storage::RenderbufferStorage.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorage.f = transmute(failing::RenderbufferStorage); storage::RenderbufferStorage.is_loaded = false; } }
    match loadfn("RenderbufferStorageEXT") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageEXT.f = transmute(ptr); storage::RenderbufferStorageEXT.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageEXT.f = transmute(failing::RenderbufferStorageEXT); storage::RenderbufferStorageEXT.is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisample") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisample.f = transmute(ptr); storage::RenderbufferStorageMultisample.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageMultisample.f = transmute(failing::RenderbufferStorageMultisample); storage::RenderbufferStorageMultisample.is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleANGLE") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleANGLE.f = transmute(ptr); storage::RenderbufferStorageMultisampleANGLE.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageMultisampleANGLE.f = transmute(failing::RenderbufferStorageMultisampleANGLE); storage::RenderbufferStorageMultisampleANGLE.is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleAPPLE") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleAPPLE.f = transmute(ptr); storage::RenderbufferStorageMultisampleAPPLE.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageMultisampleAPPLE.f = transmute(failing::RenderbufferStorageMultisampleAPPLE); storage::RenderbufferStorageMultisampleAPPLE.is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleCoverageNV.f = transmute(ptr); storage::RenderbufferStorageMultisampleCoverageNV.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageMultisampleCoverageNV.f = transmute(failing::RenderbufferStorageMultisampleCoverageNV); storage::RenderbufferStorageMultisampleCoverageNV.is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleEXT.f = transmute(ptr); storage::RenderbufferStorageMultisampleEXT.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageMultisampleEXT.f = transmute(failing::RenderbufferStorageMultisampleEXT); storage::RenderbufferStorageMultisampleEXT.is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleIMG") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleIMG.f = transmute(ptr); storage::RenderbufferStorageMultisampleIMG.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageMultisampleIMG.f = transmute(failing::RenderbufferStorageMultisampleIMG); storage::RenderbufferStorageMultisampleIMG.is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleNV") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleNV.f = transmute(ptr); storage::RenderbufferStorageMultisampleNV.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageMultisampleNV.f = transmute(failing::RenderbufferStorageMultisampleNV); storage::RenderbufferStorageMultisampleNV.is_loaded = false; } }
    match loadfn("RenderbufferStorageOES") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageOES.f = transmute(ptr); storage::RenderbufferStorageOES.is_loaded = true; }, _ => unsafe { storage::RenderbufferStorageOES.f = transmute(failing::RenderbufferStorageOES); storage::RenderbufferStorageOES.is_loaded = false; } }
    match loadfn("ReplacementCodePointerSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodePointerSUN.f = transmute(ptr); storage::ReplacementCodePointerSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodePointerSUN.f = transmute(failing::ReplacementCodePointerSUN); storage::ReplacementCodePointerSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeubSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeubSUN.f = transmute(ptr); storage::ReplacementCodeubSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeubSUN.f = transmute(failing::ReplacementCodeubSUN); storage::ReplacementCodeubSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeubvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeubvSUN.f = transmute(ptr); storage::ReplacementCodeubvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeubvSUN.f = transmute(failing::ReplacementCodeubvSUN); storage::ReplacementCodeubvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor3fVertex3fSUN.f = transmute(ptr); storage::ReplacementCodeuiColor3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiColor3fVertex3fSUN.f = transmute(failing::ReplacementCodeuiColor3fVertex3fSUN); storage::ReplacementCodeuiColor3fVertex3fSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor3fVertex3fvSUN.f = transmute(ptr); storage::ReplacementCodeuiColor3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiColor3fVertex3fvSUN.f = transmute(failing::ReplacementCodeuiColor3fVertex3fvSUN); storage::ReplacementCodeuiColor3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor4fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN.f = transmute(ptr); storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN.f = transmute(failing::ReplacementCodeuiColor4fNormal3fVertex3fSUN); storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor4fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN.f = transmute(ptr); storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN.f = transmute(failing::ReplacementCodeuiColor4fNormal3fVertex3fvSUN); storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor4ubVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor4ubVertex3fSUN.f = transmute(ptr); storage::ReplacementCodeuiColor4ubVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiColor4ubVertex3fSUN.f = transmute(failing::ReplacementCodeuiColor4ubVertex3fSUN); storage::ReplacementCodeuiColor4ubVertex3fSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor4ubVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor4ubVertex3fvSUN.f = transmute(ptr); storage::ReplacementCodeuiColor4ubVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiColor4ubVertex3fvSUN.f = transmute(failing::ReplacementCodeuiColor4ubVertex3fvSUN); storage::ReplacementCodeuiColor4ubVertex3fvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiNormal3fVertex3fSUN.f = transmute(ptr); storage::ReplacementCodeuiNormal3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiNormal3fVertex3fSUN.f = transmute(failing::ReplacementCodeuiNormal3fVertex3fSUN); storage::ReplacementCodeuiNormal3fVertex3fSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiNormal3fVertex3fvSUN.f = transmute(ptr); storage::ReplacementCodeuiNormal3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiNormal3fVertex3fvSUN.f = transmute(failing::ReplacementCodeuiNormal3fVertex3fvSUN); storage::ReplacementCodeuiNormal3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiSUN.f = transmute(ptr); storage::ReplacementCodeuiSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiSUN.f = transmute(failing::ReplacementCodeuiSUN); storage::ReplacementCodeuiSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.f = transmute(ptr); storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.f = transmute(failing::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN); storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.f = transmute(ptr); storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.f = transmute(failing::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN); storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.f = transmute(ptr); storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.f = transmute(failing::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN); storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.f = transmute(ptr); storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.f = transmute(failing::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN); storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fVertex3fSUN.f = transmute(ptr); storage::ReplacementCodeuiTexCoord2fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiTexCoord2fVertex3fSUN.f = transmute(failing::ReplacementCodeuiTexCoord2fVertex3fSUN); storage::ReplacementCodeuiTexCoord2fVertex3fSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fVertex3fvSUN.f = transmute(ptr); storage::ReplacementCodeuiTexCoord2fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiTexCoord2fVertex3fvSUN.f = transmute(failing::ReplacementCodeuiTexCoord2fVertex3fvSUN); storage::ReplacementCodeuiTexCoord2fVertex3fvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiVertex3fSUN.f = transmute(ptr); storage::ReplacementCodeuiVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiVertex3fSUN.f = transmute(failing::ReplacementCodeuiVertex3fSUN); storage::ReplacementCodeuiVertex3fSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuiVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiVertex3fvSUN.f = transmute(ptr); storage::ReplacementCodeuiVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuiVertex3fvSUN.f = transmute(failing::ReplacementCodeuiVertex3fvSUN); storage::ReplacementCodeuiVertex3fvSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeuivSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuivSUN.f = transmute(ptr); storage::ReplacementCodeuivSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeuivSUN.f = transmute(failing::ReplacementCodeuivSUN); storage::ReplacementCodeuivSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeusSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeusSUN.f = transmute(ptr); storage::ReplacementCodeusSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeusSUN.f = transmute(failing::ReplacementCodeusSUN); storage::ReplacementCodeusSUN.is_loaded = false; } }
    match loadfn("ReplacementCodeusvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeusvSUN.f = transmute(ptr); storage::ReplacementCodeusvSUN.is_loaded = true; }, _ => unsafe { storage::ReplacementCodeusvSUN.f = transmute(failing::ReplacementCodeusvSUN); storage::ReplacementCodeusvSUN.is_loaded = false; } }
    match loadfn("RequestResidentProgramsNV") { ptr if !ptr.is_null() => unsafe { storage::RequestResidentProgramsNV.f = transmute(ptr); storage::RequestResidentProgramsNV.is_loaded = true; }, _ => unsafe { storage::RequestResidentProgramsNV.f = transmute(failing::RequestResidentProgramsNV); storage::RequestResidentProgramsNV.is_loaded = false; } }
    match loadfn("ResetHistogram") { ptr if !ptr.is_null() => unsafe { storage::ResetHistogram.f = transmute(ptr); storage::ResetHistogram.is_loaded = true; }, _ => unsafe { storage::ResetHistogram.f = transmute(failing::ResetHistogram); storage::ResetHistogram.is_loaded = false; } }
    match loadfn("ResetHistogramEXT") { ptr if !ptr.is_null() => unsafe { storage::ResetHistogramEXT.f = transmute(ptr); storage::ResetHistogramEXT.is_loaded = true; }, _ => unsafe { storage::ResetHistogramEXT.f = transmute(failing::ResetHistogramEXT); storage::ResetHistogramEXT.is_loaded = false; } }
    match loadfn("ResetMinmax") { ptr if !ptr.is_null() => unsafe { storage::ResetMinmax.f = transmute(ptr); storage::ResetMinmax.is_loaded = true; }, _ => unsafe { storage::ResetMinmax.f = transmute(failing::ResetMinmax); storage::ResetMinmax.is_loaded = false; } }
    match loadfn("ResetMinmaxEXT") { ptr if !ptr.is_null() => unsafe { storage::ResetMinmaxEXT.f = transmute(ptr); storage::ResetMinmaxEXT.is_loaded = true; }, _ => unsafe { storage::ResetMinmaxEXT.f = transmute(failing::ResetMinmaxEXT); storage::ResetMinmaxEXT.is_loaded = false; } }
    match loadfn("ResizeBuffersMESA") { ptr if !ptr.is_null() => unsafe { storage::ResizeBuffersMESA.f = transmute(ptr); storage::ResizeBuffersMESA.is_loaded = true; }, _ => unsafe { storage::ResizeBuffersMESA.f = transmute(failing::ResizeBuffersMESA); storage::ResizeBuffersMESA.is_loaded = false; } }
    match loadfn("ResolveMultisampleFramebufferAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ResolveMultisampleFramebufferAPPLE.f = transmute(ptr); storage::ResolveMultisampleFramebufferAPPLE.is_loaded = true; }, _ => unsafe { storage::ResolveMultisampleFramebufferAPPLE.f = transmute(failing::ResolveMultisampleFramebufferAPPLE); storage::ResolveMultisampleFramebufferAPPLE.is_loaded = false; } }
    match loadfn("ResumeTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::ResumeTransformFeedback.f = transmute(ptr); storage::ResumeTransformFeedback.is_loaded = true; }, _ => unsafe { storage::ResumeTransformFeedback.f = transmute(failing::ResumeTransformFeedback); storage::ResumeTransformFeedback.is_loaded = false; } }
    match loadfn("ResumeTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::ResumeTransformFeedbackNV.f = transmute(ptr); storage::ResumeTransformFeedbackNV.is_loaded = true; }, _ => unsafe { storage::ResumeTransformFeedbackNV.f = transmute(failing::ResumeTransformFeedbackNV); storage::ResumeTransformFeedbackNV.is_loaded = false; } }
    match loadfn("Rotated") { ptr if !ptr.is_null() => unsafe { storage::Rotated.f = transmute(ptr); storage::Rotated.is_loaded = true; }, _ => unsafe { storage::Rotated.f = transmute(failing::Rotated); storage::Rotated.is_loaded = false; } }
    match loadfn("Rotatef") { ptr if !ptr.is_null() => unsafe { storage::Rotatef.f = transmute(ptr); storage::Rotatef.is_loaded = true; }, _ => unsafe { storage::Rotatef.f = transmute(failing::Rotatef); storage::Rotatef.is_loaded = false; } }
    match loadfn("Rotatex") { ptr if !ptr.is_null() => unsafe { storage::Rotatex.f = transmute(ptr); storage::Rotatex.is_loaded = true; }, _ => unsafe { storage::Rotatex.f = transmute(failing::Rotatex); storage::Rotatex.is_loaded = false; } }
    match loadfn("RotatexOES") { ptr if !ptr.is_null() => unsafe { storage::RotatexOES.f = transmute(ptr); storage::RotatexOES.is_loaded = true; }, _ => unsafe { storage::RotatexOES.f = transmute(failing::RotatexOES); storage::RotatexOES.is_loaded = false; } }
    match loadfn("SampleCoverage") { ptr if !ptr.is_null() => unsafe { storage::SampleCoverage.f = transmute(ptr); storage::SampleCoverage.is_loaded = true; }, _ => unsafe { storage::SampleCoverage.f = transmute(failing::SampleCoverage); storage::SampleCoverage.is_loaded = false; } }
    match loadfn("SampleCoverageARB") { ptr if !ptr.is_null() => unsafe { storage::SampleCoverageARB.f = transmute(ptr); storage::SampleCoverageARB.is_loaded = true; }, _ => unsafe { storage::SampleCoverageARB.f = transmute(failing::SampleCoverageARB); storage::SampleCoverageARB.is_loaded = false; } }
    match loadfn("SampleCoverageOES") { ptr if !ptr.is_null() => unsafe { storage::SampleCoverageOES.f = transmute(ptr); storage::SampleCoverageOES.is_loaded = true; }, _ => unsafe { storage::SampleCoverageOES.f = transmute(failing::SampleCoverageOES); storage::SampleCoverageOES.is_loaded = false; } }
    match loadfn("SampleCoveragex") { ptr if !ptr.is_null() => unsafe { storage::SampleCoveragex.f = transmute(ptr); storage::SampleCoveragex.is_loaded = true; }, _ => unsafe { storage::SampleCoveragex.f = transmute(failing::SampleCoveragex); storage::SampleCoveragex.is_loaded = false; } }
    match loadfn("SampleCoveragexOES") { ptr if !ptr.is_null() => unsafe { storage::SampleCoveragexOES.f = transmute(ptr); storage::SampleCoveragexOES.is_loaded = true; }, _ => unsafe { storage::SampleCoveragexOES.f = transmute(failing::SampleCoveragexOES); storage::SampleCoveragexOES.is_loaded = false; } }
    match loadfn("SampleMapATI") { ptr if !ptr.is_null() => unsafe { storage::SampleMapATI.f = transmute(ptr); storage::SampleMapATI.is_loaded = true; }, _ => unsafe { storage::SampleMapATI.f = transmute(failing::SampleMapATI); storage::SampleMapATI.is_loaded = false; } }
    match loadfn("SampleMaskEXT") { ptr if !ptr.is_null() => unsafe { storage::SampleMaskEXT.f = transmute(ptr); storage::SampleMaskEXT.is_loaded = true; }, _ => unsafe { storage::SampleMaskEXT.f = transmute(failing::SampleMaskEXT); storage::SampleMaskEXT.is_loaded = false; } }
    match loadfn("SampleMaskIndexedNV") { ptr if !ptr.is_null() => unsafe { storage::SampleMaskIndexedNV.f = transmute(ptr); storage::SampleMaskIndexedNV.is_loaded = true; }, _ => unsafe { storage::SampleMaskIndexedNV.f = transmute(failing::SampleMaskIndexedNV); storage::SampleMaskIndexedNV.is_loaded = false; } }
    match loadfn("SampleMaskSGIS") { ptr if !ptr.is_null() => unsafe { storage::SampleMaskSGIS.f = transmute(ptr); storage::SampleMaskSGIS.is_loaded = true; }, _ => unsafe { storage::SampleMaskSGIS.f = transmute(failing::SampleMaskSGIS); storage::SampleMaskSGIS.is_loaded = false; } }
    match loadfn("SampleMaski") { ptr if !ptr.is_null() => unsafe { storage::SampleMaski.f = transmute(ptr); storage::SampleMaski.is_loaded = true; }, _ => unsafe { storage::SampleMaski.f = transmute(failing::SampleMaski); storage::SampleMaski.is_loaded = false; } }
    match loadfn("SamplePatternEXT") { ptr if !ptr.is_null() => unsafe { storage::SamplePatternEXT.f = transmute(ptr); storage::SamplePatternEXT.is_loaded = true; }, _ => unsafe { storage::SamplePatternEXT.f = transmute(failing::SamplePatternEXT); storage::SamplePatternEXT.is_loaded = false; } }
    match loadfn("SamplePatternSGIS") { ptr if !ptr.is_null() => unsafe { storage::SamplePatternSGIS.f = transmute(ptr); storage::SamplePatternSGIS.is_loaded = true; }, _ => unsafe { storage::SamplePatternSGIS.f = transmute(failing::SamplePatternSGIS); storage::SamplePatternSGIS.is_loaded = false; } }
    match loadfn("SamplerParameterIiv") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameterIiv.f = transmute(ptr); storage::SamplerParameterIiv.is_loaded = true; }, _ => unsafe { storage::SamplerParameterIiv.f = transmute(failing::SamplerParameterIiv); storage::SamplerParameterIiv.is_loaded = false; } }
    match loadfn("SamplerParameterIuiv") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameterIuiv.f = transmute(ptr); storage::SamplerParameterIuiv.is_loaded = true; }, _ => unsafe { storage::SamplerParameterIuiv.f = transmute(failing::SamplerParameterIuiv); storage::SamplerParameterIuiv.is_loaded = false; } }
    match loadfn("SamplerParameterf") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameterf.f = transmute(ptr); storage::SamplerParameterf.is_loaded = true; }, _ => unsafe { storage::SamplerParameterf.f = transmute(failing::SamplerParameterf); storage::SamplerParameterf.is_loaded = false; } }
    match loadfn("SamplerParameterfv") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameterfv.f = transmute(ptr); storage::SamplerParameterfv.is_loaded = true; }, _ => unsafe { storage::SamplerParameterfv.f = transmute(failing::SamplerParameterfv); storage::SamplerParameterfv.is_loaded = false; } }
    match loadfn("SamplerParameteri") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameteri.f = transmute(ptr); storage::SamplerParameteri.is_loaded = true; }, _ => unsafe { storage::SamplerParameteri.f = transmute(failing::SamplerParameteri); storage::SamplerParameteri.is_loaded = false; } }
    match loadfn("SamplerParameteriv") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameteriv.f = transmute(ptr); storage::SamplerParameteriv.is_loaded = true; }, _ => unsafe { storage::SamplerParameteriv.f = transmute(failing::SamplerParameteriv); storage::SamplerParameteriv.is_loaded = false; } }
    match loadfn("Scaled") { ptr if !ptr.is_null() => unsafe { storage::Scaled.f = transmute(ptr); storage::Scaled.is_loaded = true; }, _ => unsafe { storage::Scaled.f = transmute(failing::Scaled); storage::Scaled.is_loaded = false; } }
    match loadfn("Scalef") { ptr if !ptr.is_null() => unsafe { storage::Scalef.f = transmute(ptr); storage::Scalef.is_loaded = true; }, _ => unsafe { storage::Scalef.f = transmute(failing::Scalef); storage::Scalef.is_loaded = false; } }
    match loadfn("Scalex") { ptr if !ptr.is_null() => unsafe { storage::Scalex.f = transmute(ptr); storage::Scalex.is_loaded = true; }, _ => unsafe { storage::Scalex.f = transmute(failing::Scalex); storage::Scalex.is_loaded = false; } }
    match loadfn("ScalexOES") { ptr if !ptr.is_null() => unsafe { storage::ScalexOES.f = transmute(ptr); storage::ScalexOES.is_loaded = true; }, _ => unsafe { storage::ScalexOES.f = transmute(failing::ScalexOES); storage::ScalexOES.is_loaded = false; } }
    match loadfn("Scissor") { ptr if !ptr.is_null() => unsafe { storage::Scissor.f = transmute(ptr); storage::Scissor.is_loaded = true; }, _ => unsafe { storage::Scissor.f = transmute(failing::Scissor); storage::Scissor.is_loaded = false; } }
    match loadfn("ScissorArrayv") { ptr if !ptr.is_null() => unsafe { storage::ScissorArrayv.f = transmute(ptr); storage::ScissorArrayv.is_loaded = true; }, _ => unsafe { storage::ScissorArrayv.f = transmute(failing::ScissorArrayv); storage::ScissorArrayv.is_loaded = false; } }
    match loadfn("ScissorIndexed") { ptr if !ptr.is_null() => unsafe { storage::ScissorIndexed.f = transmute(ptr); storage::ScissorIndexed.is_loaded = true; }, _ => unsafe { storage::ScissorIndexed.f = transmute(failing::ScissorIndexed); storage::ScissorIndexed.is_loaded = false; } }
    match loadfn("ScissorIndexedv") { ptr if !ptr.is_null() => unsafe { storage::ScissorIndexedv.f = transmute(ptr); storage::ScissorIndexedv.is_loaded = true; }, _ => unsafe { storage::ScissorIndexedv.f = transmute(failing::ScissorIndexedv); storage::ScissorIndexedv.is_loaded = false; } }
    match loadfn("SecondaryColor3b") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3b.f = transmute(ptr); storage::SecondaryColor3b.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3b.f = transmute(failing::SecondaryColor3b); storage::SecondaryColor3b.is_loaded = false; } }
    match loadfn("SecondaryColor3bEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3bEXT.f = transmute(ptr); storage::SecondaryColor3bEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3bEXT.f = transmute(failing::SecondaryColor3bEXT); storage::SecondaryColor3bEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3bv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3bv.f = transmute(ptr); storage::SecondaryColor3bv.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3bv.f = transmute(failing::SecondaryColor3bv); storage::SecondaryColor3bv.is_loaded = false; } }
    match loadfn("SecondaryColor3bvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3bvEXT.f = transmute(ptr); storage::SecondaryColor3bvEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3bvEXT.f = transmute(failing::SecondaryColor3bvEXT); storage::SecondaryColor3bvEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3d") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3d.f = transmute(ptr); storage::SecondaryColor3d.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3d.f = transmute(failing::SecondaryColor3d); storage::SecondaryColor3d.is_loaded = false; } }
    match loadfn("SecondaryColor3dEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3dEXT.f = transmute(ptr); storage::SecondaryColor3dEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3dEXT.f = transmute(failing::SecondaryColor3dEXT); storage::SecondaryColor3dEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3dv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3dv.f = transmute(ptr); storage::SecondaryColor3dv.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3dv.f = transmute(failing::SecondaryColor3dv); storage::SecondaryColor3dv.is_loaded = false; } }
    match loadfn("SecondaryColor3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3dvEXT.f = transmute(ptr); storage::SecondaryColor3dvEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3dvEXT.f = transmute(failing::SecondaryColor3dvEXT); storage::SecondaryColor3dvEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3f") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3f.f = transmute(ptr); storage::SecondaryColor3f.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3f.f = transmute(failing::SecondaryColor3f); storage::SecondaryColor3f.is_loaded = false; } }
    match loadfn("SecondaryColor3fEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3fEXT.f = transmute(ptr); storage::SecondaryColor3fEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3fEXT.f = transmute(failing::SecondaryColor3fEXT); storage::SecondaryColor3fEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3fv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3fv.f = transmute(ptr); storage::SecondaryColor3fv.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3fv.f = transmute(failing::SecondaryColor3fv); storage::SecondaryColor3fv.is_loaded = false; } }
    match loadfn("SecondaryColor3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3fvEXT.f = transmute(ptr); storage::SecondaryColor3fvEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3fvEXT.f = transmute(failing::SecondaryColor3fvEXT); storage::SecondaryColor3fvEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3hNV") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3hNV.f = transmute(ptr); storage::SecondaryColor3hNV.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3hNV.f = transmute(failing::SecondaryColor3hNV); storage::SecondaryColor3hNV.is_loaded = false; } }
    match loadfn("SecondaryColor3hvNV") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3hvNV.f = transmute(ptr); storage::SecondaryColor3hvNV.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3hvNV.f = transmute(failing::SecondaryColor3hvNV); storage::SecondaryColor3hvNV.is_loaded = false; } }
    match loadfn("SecondaryColor3i") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3i.f = transmute(ptr); storage::SecondaryColor3i.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3i.f = transmute(failing::SecondaryColor3i); storage::SecondaryColor3i.is_loaded = false; } }
    match loadfn("SecondaryColor3iEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3iEXT.f = transmute(ptr); storage::SecondaryColor3iEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3iEXT.f = transmute(failing::SecondaryColor3iEXT); storage::SecondaryColor3iEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3iv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3iv.f = transmute(ptr); storage::SecondaryColor3iv.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3iv.f = transmute(failing::SecondaryColor3iv); storage::SecondaryColor3iv.is_loaded = false; } }
    match loadfn("SecondaryColor3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ivEXT.f = transmute(ptr); storage::SecondaryColor3ivEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3ivEXT.f = transmute(failing::SecondaryColor3ivEXT); storage::SecondaryColor3ivEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3s") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3s.f = transmute(ptr); storage::SecondaryColor3s.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3s.f = transmute(failing::SecondaryColor3s); storage::SecondaryColor3s.is_loaded = false; } }
    match loadfn("SecondaryColor3sEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3sEXT.f = transmute(ptr); storage::SecondaryColor3sEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3sEXT.f = transmute(failing::SecondaryColor3sEXT); storage::SecondaryColor3sEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3sv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3sv.f = transmute(ptr); storage::SecondaryColor3sv.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3sv.f = transmute(failing::SecondaryColor3sv); storage::SecondaryColor3sv.is_loaded = false; } }
    match loadfn("SecondaryColor3svEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3svEXT.f = transmute(ptr); storage::SecondaryColor3svEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3svEXT.f = transmute(failing::SecondaryColor3svEXT); storage::SecondaryColor3svEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3ub") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ub.f = transmute(ptr); storage::SecondaryColor3ub.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3ub.f = transmute(failing::SecondaryColor3ub); storage::SecondaryColor3ub.is_loaded = false; } }
    match loadfn("SecondaryColor3ubEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ubEXT.f = transmute(ptr); storage::SecondaryColor3ubEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3ubEXT.f = transmute(failing::SecondaryColor3ubEXT); storage::SecondaryColor3ubEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3ubv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ubv.f = transmute(ptr); storage::SecondaryColor3ubv.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3ubv.f = transmute(failing::SecondaryColor3ubv); storage::SecondaryColor3ubv.is_loaded = false; } }
    match loadfn("SecondaryColor3ubvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ubvEXT.f = transmute(ptr); storage::SecondaryColor3ubvEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3ubvEXT.f = transmute(failing::SecondaryColor3ubvEXT); storage::SecondaryColor3ubvEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3ui") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ui.f = transmute(ptr); storage::SecondaryColor3ui.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3ui.f = transmute(failing::SecondaryColor3ui); storage::SecondaryColor3ui.is_loaded = false; } }
    match loadfn("SecondaryColor3uiEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3uiEXT.f = transmute(ptr); storage::SecondaryColor3uiEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3uiEXT.f = transmute(failing::SecondaryColor3uiEXT); storage::SecondaryColor3uiEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3uiv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3uiv.f = transmute(ptr); storage::SecondaryColor3uiv.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3uiv.f = transmute(failing::SecondaryColor3uiv); storage::SecondaryColor3uiv.is_loaded = false; } }
    match loadfn("SecondaryColor3uivEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3uivEXT.f = transmute(ptr); storage::SecondaryColor3uivEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3uivEXT.f = transmute(failing::SecondaryColor3uivEXT); storage::SecondaryColor3uivEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3us") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3us.f = transmute(ptr); storage::SecondaryColor3us.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3us.f = transmute(failing::SecondaryColor3us); storage::SecondaryColor3us.is_loaded = false; } }
    match loadfn("SecondaryColor3usEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3usEXT.f = transmute(ptr); storage::SecondaryColor3usEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3usEXT.f = transmute(failing::SecondaryColor3usEXT); storage::SecondaryColor3usEXT.is_loaded = false; } }
    match loadfn("SecondaryColor3usv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3usv.f = transmute(ptr); storage::SecondaryColor3usv.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3usv.f = transmute(failing::SecondaryColor3usv); storage::SecondaryColor3usv.is_loaded = false; } }
    match loadfn("SecondaryColor3usvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3usvEXT.f = transmute(ptr); storage::SecondaryColor3usvEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColor3usvEXT.f = transmute(failing::SecondaryColor3usvEXT); storage::SecondaryColor3usvEXT.is_loaded = false; } }
    match loadfn("SecondaryColorFormatNV") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorFormatNV.f = transmute(ptr); storage::SecondaryColorFormatNV.is_loaded = true; }, _ => unsafe { storage::SecondaryColorFormatNV.f = transmute(failing::SecondaryColorFormatNV); storage::SecondaryColorFormatNV.is_loaded = false; } }
    match loadfn("SecondaryColorP3ui") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorP3ui.f = transmute(ptr); storage::SecondaryColorP3ui.is_loaded = true; }, _ => unsafe { storage::SecondaryColorP3ui.f = transmute(failing::SecondaryColorP3ui); storage::SecondaryColorP3ui.is_loaded = false; } }
    match loadfn("SecondaryColorP3uiv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorP3uiv.f = transmute(ptr); storage::SecondaryColorP3uiv.is_loaded = true; }, _ => unsafe { storage::SecondaryColorP3uiv.f = transmute(failing::SecondaryColorP3uiv); storage::SecondaryColorP3uiv.is_loaded = false; } }
    match loadfn("SecondaryColorPointer") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorPointer.f = transmute(ptr); storage::SecondaryColorPointer.is_loaded = true; }, _ => unsafe { storage::SecondaryColorPointer.f = transmute(failing::SecondaryColorPointer); storage::SecondaryColorPointer.is_loaded = false; } }
    match loadfn("SecondaryColorPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorPointerEXT.f = transmute(ptr); storage::SecondaryColorPointerEXT.is_loaded = true; }, _ => unsafe { storage::SecondaryColorPointerEXT.f = transmute(failing::SecondaryColorPointerEXT); storage::SecondaryColorPointerEXT.is_loaded = false; } }
    match loadfn("SecondaryColorPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorPointerListIBM.f = transmute(ptr); storage::SecondaryColorPointerListIBM.is_loaded = true; }, _ => unsafe { storage::SecondaryColorPointerListIBM.f = transmute(failing::SecondaryColorPointerListIBM); storage::SecondaryColorPointerListIBM.is_loaded = false; } }
    match loadfn("SelectBuffer") { ptr if !ptr.is_null() => unsafe { storage::SelectBuffer.f = transmute(ptr); storage::SelectBuffer.is_loaded = true; }, _ => unsafe { storage::SelectBuffer.f = transmute(failing::SelectBuffer); storage::SelectBuffer.is_loaded = false; } }
    match loadfn("SelectPerfMonitorCountersAMD") { ptr if !ptr.is_null() => unsafe { storage::SelectPerfMonitorCountersAMD.f = transmute(ptr); storage::SelectPerfMonitorCountersAMD.is_loaded = true; }, _ => unsafe { storage::SelectPerfMonitorCountersAMD.f = transmute(failing::SelectPerfMonitorCountersAMD); storage::SelectPerfMonitorCountersAMD.is_loaded = false; } }
    match loadfn("SeparableFilter2D") { ptr if !ptr.is_null() => unsafe { storage::SeparableFilter2D.f = transmute(ptr); storage::SeparableFilter2D.is_loaded = true; }, _ => unsafe { storage::SeparableFilter2D.f = transmute(failing::SeparableFilter2D); storage::SeparableFilter2D.is_loaded = false; } }
    match loadfn("SeparableFilter2DEXT") { ptr if !ptr.is_null() => unsafe { storage::SeparableFilter2DEXT.f = transmute(ptr); storage::SeparableFilter2DEXT.is_loaded = true; }, _ => unsafe { storage::SeparableFilter2DEXT.f = transmute(failing::SeparableFilter2DEXT); storage::SeparableFilter2DEXT.is_loaded = false; } }
    match loadfn("SetFenceAPPLE") { ptr if !ptr.is_null() => unsafe { storage::SetFenceAPPLE.f = transmute(ptr); storage::SetFenceAPPLE.is_loaded = true; }, _ => unsafe { storage::SetFenceAPPLE.f = transmute(failing::SetFenceAPPLE); storage::SetFenceAPPLE.is_loaded = false; } }
    match loadfn("SetFenceNV") { ptr if !ptr.is_null() => unsafe { storage::SetFenceNV.f = transmute(ptr); storage::SetFenceNV.is_loaded = true; }, _ => unsafe { storage::SetFenceNV.f = transmute(failing::SetFenceNV); storage::SetFenceNV.is_loaded = false; } }
    match loadfn("SetFragmentShaderConstantATI") { ptr if !ptr.is_null() => unsafe { storage::SetFragmentShaderConstantATI.f = transmute(ptr); storage::SetFragmentShaderConstantATI.is_loaded = true; }, _ => unsafe { storage::SetFragmentShaderConstantATI.f = transmute(failing::SetFragmentShaderConstantATI); storage::SetFragmentShaderConstantATI.is_loaded = false; } }
    match loadfn("SetInvariantEXT") { ptr if !ptr.is_null() => unsafe { storage::SetInvariantEXT.f = transmute(ptr); storage::SetInvariantEXT.is_loaded = true; }, _ => unsafe { storage::SetInvariantEXT.f = transmute(failing::SetInvariantEXT); storage::SetInvariantEXT.is_loaded = false; } }
    match loadfn("SetLocalConstantEXT") { ptr if !ptr.is_null() => unsafe { storage::SetLocalConstantEXT.f = transmute(ptr); storage::SetLocalConstantEXT.is_loaded = true; }, _ => unsafe { storage::SetLocalConstantEXT.f = transmute(failing::SetLocalConstantEXT); storage::SetLocalConstantEXT.is_loaded = false; } }
    match loadfn("SetMultisamplefvAMD") { ptr if !ptr.is_null() => unsafe { storage::SetMultisamplefvAMD.f = transmute(ptr); storage::SetMultisamplefvAMD.is_loaded = true; }, _ => unsafe { storage::SetMultisamplefvAMD.f = transmute(failing::SetMultisamplefvAMD); storage::SetMultisamplefvAMD.is_loaded = false; } }
    match loadfn("ShadeModel") { ptr if !ptr.is_null() => unsafe { storage::ShadeModel.f = transmute(ptr); storage::ShadeModel.is_loaded = true; }, _ => unsafe { storage::ShadeModel.f = transmute(failing::ShadeModel); storage::ShadeModel.is_loaded = false; } }
    match loadfn("ShaderBinary") { ptr if !ptr.is_null() => unsafe { storage::ShaderBinary.f = transmute(ptr); storage::ShaderBinary.is_loaded = true; }, _ => unsafe { storage::ShaderBinary.f = transmute(failing::ShaderBinary); storage::ShaderBinary.is_loaded = false; } }
    match loadfn("ShaderOp1EXT") { ptr if !ptr.is_null() => unsafe { storage::ShaderOp1EXT.f = transmute(ptr); storage::ShaderOp1EXT.is_loaded = true; }, _ => unsafe { storage::ShaderOp1EXT.f = transmute(failing::ShaderOp1EXT); storage::ShaderOp1EXT.is_loaded = false; } }
    match loadfn("ShaderOp2EXT") { ptr if !ptr.is_null() => unsafe { storage::ShaderOp2EXT.f = transmute(ptr); storage::ShaderOp2EXT.is_loaded = true; }, _ => unsafe { storage::ShaderOp2EXT.f = transmute(failing::ShaderOp2EXT); storage::ShaderOp2EXT.is_loaded = false; } }
    match loadfn("ShaderOp3EXT") { ptr if !ptr.is_null() => unsafe { storage::ShaderOp3EXT.f = transmute(ptr); storage::ShaderOp3EXT.is_loaded = true; }, _ => unsafe { storage::ShaderOp3EXT.f = transmute(failing::ShaderOp3EXT); storage::ShaderOp3EXT.is_loaded = false; } }
    match loadfn("ShaderSource") { ptr if !ptr.is_null() => unsafe { storage::ShaderSource.f = transmute(ptr); storage::ShaderSource.is_loaded = true; }, _ => unsafe { storage::ShaderSource.f = transmute(failing::ShaderSource); storage::ShaderSource.is_loaded = false; } }
    match loadfn("ShaderSourceARB") { ptr if !ptr.is_null() => unsafe { storage::ShaderSourceARB.f = transmute(ptr); storage::ShaderSourceARB.is_loaded = true; }, _ => unsafe { storage::ShaderSourceARB.f = transmute(failing::ShaderSourceARB); storage::ShaderSourceARB.is_loaded = false; } }
    match loadfn("ShaderStorageBlockBinding") { ptr if !ptr.is_null() => unsafe { storage::ShaderStorageBlockBinding.f = transmute(ptr); storage::ShaderStorageBlockBinding.is_loaded = true; }, _ => unsafe { storage::ShaderStorageBlockBinding.f = transmute(failing::ShaderStorageBlockBinding); storage::ShaderStorageBlockBinding.is_loaded = false; } }
    match loadfn("SharpenTexFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::SharpenTexFuncSGIS.f = transmute(ptr); storage::SharpenTexFuncSGIS.is_loaded = true; }, _ => unsafe { storage::SharpenTexFuncSGIS.f = transmute(failing::SharpenTexFuncSGIS); storage::SharpenTexFuncSGIS.is_loaded = false; } }
    match loadfn("SpriteParameterfSGIX") { ptr if !ptr.is_null() => unsafe { storage::SpriteParameterfSGIX.f = transmute(ptr); storage::SpriteParameterfSGIX.is_loaded = true; }, _ => unsafe { storage::SpriteParameterfSGIX.f = transmute(failing::SpriteParameterfSGIX); storage::SpriteParameterfSGIX.is_loaded = false; } }
    match loadfn("SpriteParameterfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::SpriteParameterfvSGIX.f = transmute(ptr); storage::SpriteParameterfvSGIX.is_loaded = true; }, _ => unsafe { storage::SpriteParameterfvSGIX.f = transmute(failing::SpriteParameterfvSGIX); storage::SpriteParameterfvSGIX.is_loaded = false; } }
    match loadfn("SpriteParameteriSGIX") { ptr if !ptr.is_null() => unsafe { storage::SpriteParameteriSGIX.f = transmute(ptr); storage::SpriteParameteriSGIX.is_loaded = true; }, _ => unsafe { storage::SpriteParameteriSGIX.f = transmute(failing::SpriteParameteriSGIX); storage::SpriteParameteriSGIX.is_loaded = false; } }
    match loadfn("SpriteParameterivSGIX") { ptr if !ptr.is_null() => unsafe { storage::SpriteParameterivSGIX.f = transmute(ptr); storage::SpriteParameterivSGIX.is_loaded = true; }, _ => unsafe { storage::SpriteParameterivSGIX.f = transmute(failing::SpriteParameterivSGIX); storage::SpriteParameterivSGIX.is_loaded = false; } }
    match loadfn("StartInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::StartInstrumentsSGIX.f = transmute(ptr); storage::StartInstrumentsSGIX.is_loaded = true; }, _ => unsafe { storage::StartInstrumentsSGIX.f = transmute(failing::StartInstrumentsSGIX); storage::StartInstrumentsSGIX.is_loaded = false; } }
    match loadfn("StartTilingQCOM") { ptr if !ptr.is_null() => unsafe { storage::StartTilingQCOM.f = transmute(ptr); storage::StartTilingQCOM.is_loaded = true; }, _ => unsafe { storage::StartTilingQCOM.f = transmute(failing::StartTilingQCOM); storage::StartTilingQCOM.is_loaded = false; } }
    match loadfn("StencilClearTagEXT") { ptr if !ptr.is_null() => unsafe { storage::StencilClearTagEXT.f = transmute(ptr); storage::StencilClearTagEXT.is_loaded = true; }, _ => unsafe { storage::StencilClearTagEXT.f = transmute(failing::StencilClearTagEXT); storage::StencilClearTagEXT.is_loaded = false; } }
    match loadfn("StencilFillPathInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::StencilFillPathInstancedNV.f = transmute(ptr); storage::StencilFillPathInstancedNV.is_loaded = true; }, _ => unsafe { storage::StencilFillPathInstancedNV.f = transmute(failing::StencilFillPathInstancedNV); storage::StencilFillPathInstancedNV.is_loaded = false; } }
    match loadfn("StencilFillPathNV") { ptr if !ptr.is_null() => unsafe { storage::StencilFillPathNV.f = transmute(ptr); storage::StencilFillPathNV.is_loaded = true; }, _ => unsafe { storage::StencilFillPathNV.f = transmute(failing::StencilFillPathNV); storage::StencilFillPathNV.is_loaded = false; } }
    match loadfn("StencilFunc") { ptr if !ptr.is_null() => unsafe { storage::StencilFunc.f = transmute(ptr); storage::StencilFunc.is_loaded = true; }, _ => unsafe { storage::StencilFunc.f = transmute(failing::StencilFunc); storage::StencilFunc.is_loaded = false; } }
    match loadfn("StencilFuncSeparate") { ptr if !ptr.is_null() => unsafe { storage::StencilFuncSeparate.f = transmute(ptr); storage::StencilFuncSeparate.is_loaded = true; }, _ => unsafe { storage::StencilFuncSeparate.f = transmute(failing::StencilFuncSeparate); storage::StencilFuncSeparate.is_loaded = false; } }
    match loadfn("StencilFuncSeparateATI") { ptr if !ptr.is_null() => unsafe { storage::StencilFuncSeparateATI.f = transmute(ptr); storage::StencilFuncSeparateATI.is_loaded = true; }, _ => unsafe { storage::StencilFuncSeparateATI.f = transmute(failing::StencilFuncSeparateATI); storage::StencilFuncSeparateATI.is_loaded = false; } }
    match loadfn("StencilMask") { ptr if !ptr.is_null() => unsafe { storage::StencilMask.f = transmute(ptr); storage::StencilMask.is_loaded = true; }, _ => unsafe { storage::StencilMask.f = transmute(failing::StencilMask); storage::StencilMask.is_loaded = false; } }
    match loadfn("StencilMaskSeparate") { ptr if !ptr.is_null() => unsafe { storage::StencilMaskSeparate.f = transmute(ptr); storage::StencilMaskSeparate.is_loaded = true; }, _ => unsafe { storage::StencilMaskSeparate.f = transmute(failing::StencilMaskSeparate); storage::StencilMaskSeparate.is_loaded = false; } }
    match loadfn("StencilOp") { ptr if !ptr.is_null() => unsafe { storage::StencilOp.f = transmute(ptr); storage::StencilOp.is_loaded = true; }, _ => unsafe { storage::StencilOp.f = transmute(failing::StencilOp); storage::StencilOp.is_loaded = false; } }
    match loadfn("StencilOpSeparate") { ptr if !ptr.is_null() => unsafe { storage::StencilOpSeparate.f = transmute(ptr); storage::StencilOpSeparate.is_loaded = true; }, _ => unsafe { storage::StencilOpSeparate.f = transmute(failing::StencilOpSeparate); storage::StencilOpSeparate.is_loaded = false; } }
    match loadfn("StencilOpSeparateATI") { ptr if !ptr.is_null() => unsafe { storage::StencilOpSeparateATI.f = transmute(ptr); storage::StencilOpSeparateATI.is_loaded = true; }, _ => unsafe { storage::StencilOpSeparateATI.f = transmute(failing::StencilOpSeparateATI); storage::StencilOpSeparateATI.is_loaded = false; } }
    match loadfn("StencilOpValueAMD") { ptr if !ptr.is_null() => unsafe { storage::StencilOpValueAMD.f = transmute(ptr); storage::StencilOpValueAMD.is_loaded = true; }, _ => unsafe { storage::StencilOpValueAMD.f = transmute(failing::StencilOpValueAMD); storage::StencilOpValueAMD.is_loaded = false; } }
    match loadfn("StencilStrokePathInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::StencilStrokePathInstancedNV.f = transmute(ptr); storage::StencilStrokePathInstancedNV.is_loaded = true; }, _ => unsafe { storage::StencilStrokePathInstancedNV.f = transmute(failing::StencilStrokePathInstancedNV); storage::StencilStrokePathInstancedNV.is_loaded = false; } }
    match loadfn("StencilStrokePathNV") { ptr if !ptr.is_null() => unsafe { storage::StencilStrokePathNV.f = transmute(ptr); storage::StencilStrokePathNV.is_loaded = true; }, _ => unsafe { storage::StencilStrokePathNV.f = transmute(failing::StencilStrokePathNV); storage::StencilStrokePathNV.is_loaded = false; } }
    match loadfn("StopInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::StopInstrumentsSGIX.f = transmute(ptr); storage::StopInstrumentsSGIX.is_loaded = true; }, _ => unsafe { storage::StopInstrumentsSGIX.f = transmute(failing::StopInstrumentsSGIX); storage::StopInstrumentsSGIX.is_loaded = false; } }
    match loadfn("StringMarkerGREMEDY") { ptr if !ptr.is_null() => unsafe { storage::StringMarkerGREMEDY.f = transmute(ptr); storage::StringMarkerGREMEDY.is_loaded = true; }, _ => unsafe { storage::StringMarkerGREMEDY.f = transmute(failing::StringMarkerGREMEDY); storage::StringMarkerGREMEDY.is_loaded = false; } }
    match loadfn("SwizzleEXT") { ptr if !ptr.is_null() => unsafe { storage::SwizzleEXT.f = transmute(ptr); storage::SwizzleEXT.is_loaded = true; }, _ => unsafe { storage::SwizzleEXT.f = transmute(failing::SwizzleEXT); storage::SwizzleEXT.is_loaded = false; } }
    match loadfn("SyncTextureINTEL") { ptr if !ptr.is_null() => unsafe { storage::SyncTextureINTEL.f = transmute(ptr); storage::SyncTextureINTEL.is_loaded = true; }, _ => unsafe { storage::SyncTextureINTEL.f = transmute(failing::SyncTextureINTEL); storage::SyncTextureINTEL.is_loaded = false; } }
    match loadfn("TagSampleBufferSGIX") { ptr if !ptr.is_null() => unsafe { storage::TagSampleBufferSGIX.f = transmute(ptr); storage::TagSampleBufferSGIX.is_loaded = true; }, _ => unsafe { storage::TagSampleBufferSGIX.f = transmute(failing::TagSampleBufferSGIX); storage::TagSampleBufferSGIX.is_loaded = false; } }
    match loadfn("Tangent3bEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3bEXT.f = transmute(ptr); storage::Tangent3bEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3bEXT.f = transmute(failing::Tangent3bEXT); storage::Tangent3bEXT.is_loaded = false; } }
    match loadfn("Tangent3bvEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3bvEXT.f = transmute(ptr); storage::Tangent3bvEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3bvEXT.f = transmute(failing::Tangent3bvEXT); storage::Tangent3bvEXT.is_loaded = false; } }
    match loadfn("Tangent3dEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3dEXT.f = transmute(ptr); storage::Tangent3dEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3dEXT.f = transmute(failing::Tangent3dEXT); storage::Tangent3dEXT.is_loaded = false; } }
    match loadfn("Tangent3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3dvEXT.f = transmute(ptr); storage::Tangent3dvEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3dvEXT.f = transmute(failing::Tangent3dvEXT); storage::Tangent3dvEXT.is_loaded = false; } }
    match loadfn("Tangent3fEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3fEXT.f = transmute(ptr); storage::Tangent3fEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3fEXT.f = transmute(failing::Tangent3fEXT); storage::Tangent3fEXT.is_loaded = false; } }
    match loadfn("Tangent3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3fvEXT.f = transmute(ptr); storage::Tangent3fvEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3fvEXT.f = transmute(failing::Tangent3fvEXT); storage::Tangent3fvEXT.is_loaded = false; } }
    match loadfn("Tangent3iEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3iEXT.f = transmute(ptr); storage::Tangent3iEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3iEXT.f = transmute(failing::Tangent3iEXT); storage::Tangent3iEXT.is_loaded = false; } }
    match loadfn("Tangent3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3ivEXT.f = transmute(ptr); storage::Tangent3ivEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3ivEXT.f = transmute(failing::Tangent3ivEXT); storage::Tangent3ivEXT.is_loaded = false; } }
    match loadfn("Tangent3sEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3sEXT.f = transmute(ptr); storage::Tangent3sEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3sEXT.f = transmute(failing::Tangent3sEXT); storage::Tangent3sEXT.is_loaded = false; } }
    match loadfn("Tangent3svEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3svEXT.f = transmute(ptr); storage::Tangent3svEXT.is_loaded = true; }, _ => unsafe { storage::Tangent3svEXT.f = transmute(failing::Tangent3svEXT); storage::Tangent3svEXT.is_loaded = false; } }
    match loadfn("TangentPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::TangentPointerEXT.f = transmute(ptr); storage::TangentPointerEXT.is_loaded = true; }, _ => unsafe { storage::TangentPointerEXT.f = transmute(failing::TangentPointerEXT); storage::TangentPointerEXT.is_loaded = false; } }
    match loadfn("TbufferMask3DFX") { ptr if !ptr.is_null() => unsafe { storage::TbufferMask3DFX.f = transmute(ptr); storage::TbufferMask3DFX.is_loaded = true; }, _ => unsafe { storage::TbufferMask3DFX.f = transmute(failing::TbufferMask3DFX); storage::TbufferMask3DFX.is_loaded = false; } }
    match loadfn("TessellationFactorAMD") { ptr if !ptr.is_null() => unsafe { storage::TessellationFactorAMD.f = transmute(ptr); storage::TessellationFactorAMD.is_loaded = true; }, _ => unsafe { storage::TessellationFactorAMD.f = transmute(failing::TessellationFactorAMD); storage::TessellationFactorAMD.is_loaded = false; } }
    match loadfn("TessellationModeAMD") { ptr if !ptr.is_null() => unsafe { storage::TessellationModeAMD.f = transmute(ptr); storage::TessellationModeAMD.is_loaded = true; }, _ => unsafe { storage::TessellationModeAMD.f = transmute(failing::TessellationModeAMD); storage::TessellationModeAMD.is_loaded = false; } }
    match loadfn("TestFenceAPPLE") { ptr if !ptr.is_null() => unsafe { storage::TestFenceAPPLE.f = transmute(ptr); storage::TestFenceAPPLE.is_loaded = true; }, _ => unsafe { storage::TestFenceAPPLE.f = transmute(failing::TestFenceAPPLE); storage::TestFenceAPPLE.is_loaded = false; } }
    match loadfn("TestFenceNV") { ptr if !ptr.is_null() => unsafe { storage::TestFenceNV.f = transmute(ptr); storage::TestFenceNV.is_loaded = true; }, _ => unsafe { storage::TestFenceNV.f = transmute(failing::TestFenceNV); storage::TestFenceNV.is_loaded = false; } }
    match loadfn("TestObjectAPPLE") { ptr if !ptr.is_null() => unsafe { storage::TestObjectAPPLE.f = transmute(ptr); storage::TestObjectAPPLE.is_loaded = true; }, _ => unsafe { storage::TestObjectAPPLE.f = transmute(failing::TestObjectAPPLE); storage::TestObjectAPPLE.is_loaded = false; } }
    match loadfn("TexBuffer") { ptr if !ptr.is_null() => unsafe { storage::TexBuffer.f = transmute(ptr); storage::TexBuffer.is_loaded = true; }, _ => unsafe { storage::TexBuffer.f = transmute(failing::TexBuffer); storage::TexBuffer.is_loaded = false; } }
    match loadfn("TexBufferARB") { ptr if !ptr.is_null() => unsafe { storage::TexBufferARB.f = transmute(ptr); storage::TexBufferARB.is_loaded = true; }, _ => unsafe { storage::TexBufferARB.f = transmute(failing::TexBufferARB); storage::TexBufferARB.is_loaded = false; } }
    match loadfn("TexBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::TexBufferEXT.f = transmute(ptr); storage::TexBufferEXT.is_loaded = true; }, _ => unsafe { storage::TexBufferEXT.f = transmute(failing::TexBufferEXT); storage::TexBufferEXT.is_loaded = false; } }
    match loadfn("TexBufferRange") { ptr if !ptr.is_null() => unsafe { storage::TexBufferRange.f = transmute(ptr); storage::TexBufferRange.is_loaded = true; }, _ => unsafe { storage::TexBufferRange.f = transmute(failing::TexBufferRange); storage::TexBufferRange.is_loaded = false; } }
    match loadfn("TexBumpParameterfvATI") { ptr if !ptr.is_null() => unsafe { storage::TexBumpParameterfvATI.f = transmute(ptr); storage::TexBumpParameterfvATI.is_loaded = true; }, _ => unsafe { storage::TexBumpParameterfvATI.f = transmute(failing::TexBumpParameterfvATI); storage::TexBumpParameterfvATI.is_loaded = false; } }
    match loadfn("TexBumpParameterivATI") { ptr if !ptr.is_null() => unsafe { storage::TexBumpParameterivATI.f = transmute(ptr); storage::TexBumpParameterivATI.is_loaded = true; }, _ => unsafe { storage::TexBumpParameterivATI.f = transmute(failing::TexBumpParameterivATI); storage::TexBumpParameterivATI.is_loaded = false; } }
    match loadfn("TexCoord1bOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1bOES.f = transmute(ptr); storage::TexCoord1bOES.is_loaded = true; }, _ => unsafe { storage::TexCoord1bOES.f = transmute(failing::TexCoord1bOES); storage::TexCoord1bOES.is_loaded = false; } }
    match loadfn("TexCoord1bvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1bvOES.f = transmute(ptr); storage::TexCoord1bvOES.is_loaded = true; }, _ => unsafe { storage::TexCoord1bvOES.f = transmute(failing::TexCoord1bvOES); storage::TexCoord1bvOES.is_loaded = false; } }
    match loadfn("TexCoord1d") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1d.f = transmute(ptr); storage::TexCoord1d.is_loaded = true; }, _ => unsafe { storage::TexCoord1d.f = transmute(failing::TexCoord1d); storage::TexCoord1d.is_loaded = false; } }
    match loadfn("TexCoord1dv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1dv.f = transmute(ptr); storage::TexCoord1dv.is_loaded = true; }, _ => unsafe { storage::TexCoord1dv.f = transmute(failing::TexCoord1dv); storage::TexCoord1dv.is_loaded = false; } }
    match loadfn("TexCoord1f") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1f.f = transmute(ptr); storage::TexCoord1f.is_loaded = true; }, _ => unsafe { storage::TexCoord1f.f = transmute(failing::TexCoord1f); storage::TexCoord1f.is_loaded = false; } }
    match loadfn("TexCoord1fv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1fv.f = transmute(ptr); storage::TexCoord1fv.is_loaded = true; }, _ => unsafe { storage::TexCoord1fv.f = transmute(failing::TexCoord1fv); storage::TexCoord1fv.is_loaded = false; } }
    match loadfn("TexCoord1hNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1hNV.f = transmute(ptr); storage::TexCoord1hNV.is_loaded = true; }, _ => unsafe { storage::TexCoord1hNV.f = transmute(failing::TexCoord1hNV); storage::TexCoord1hNV.is_loaded = false; } }
    match loadfn("TexCoord1hvNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1hvNV.f = transmute(ptr); storage::TexCoord1hvNV.is_loaded = true; }, _ => unsafe { storage::TexCoord1hvNV.f = transmute(failing::TexCoord1hvNV); storage::TexCoord1hvNV.is_loaded = false; } }
    match loadfn("TexCoord1i") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1i.f = transmute(ptr); storage::TexCoord1i.is_loaded = true; }, _ => unsafe { storage::TexCoord1i.f = transmute(failing::TexCoord1i); storage::TexCoord1i.is_loaded = false; } }
    match loadfn("TexCoord1iv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1iv.f = transmute(ptr); storage::TexCoord1iv.is_loaded = true; }, _ => unsafe { storage::TexCoord1iv.f = transmute(failing::TexCoord1iv); storage::TexCoord1iv.is_loaded = false; } }
    match loadfn("TexCoord1s") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1s.f = transmute(ptr); storage::TexCoord1s.is_loaded = true; }, _ => unsafe { storage::TexCoord1s.f = transmute(failing::TexCoord1s); storage::TexCoord1s.is_loaded = false; } }
    match loadfn("TexCoord1sv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1sv.f = transmute(ptr); storage::TexCoord1sv.is_loaded = true; }, _ => unsafe { storage::TexCoord1sv.f = transmute(failing::TexCoord1sv); storage::TexCoord1sv.is_loaded = false; } }
    match loadfn("TexCoord1xOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1xOES.f = transmute(ptr); storage::TexCoord1xOES.is_loaded = true; }, _ => unsafe { storage::TexCoord1xOES.f = transmute(failing::TexCoord1xOES); storage::TexCoord1xOES.is_loaded = false; } }
    match loadfn("TexCoord1xvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1xvOES.f = transmute(ptr); storage::TexCoord1xvOES.is_loaded = true; }, _ => unsafe { storage::TexCoord1xvOES.f = transmute(failing::TexCoord1xvOES); storage::TexCoord1xvOES.is_loaded = false; } }
    match loadfn("TexCoord2bOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2bOES.f = transmute(ptr); storage::TexCoord2bOES.is_loaded = true; }, _ => unsafe { storage::TexCoord2bOES.f = transmute(failing::TexCoord2bOES); storage::TexCoord2bOES.is_loaded = false; } }
    match loadfn("TexCoord2bvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2bvOES.f = transmute(ptr); storage::TexCoord2bvOES.is_loaded = true; }, _ => unsafe { storage::TexCoord2bvOES.f = transmute(failing::TexCoord2bvOES); storage::TexCoord2bvOES.is_loaded = false; } }
    match loadfn("TexCoord2d") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2d.f = transmute(ptr); storage::TexCoord2d.is_loaded = true; }, _ => unsafe { storage::TexCoord2d.f = transmute(failing::TexCoord2d); storage::TexCoord2d.is_loaded = false; } }
    match loadfn("TexCoord2dv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2dv.f = transmute(ptr); storage::TexCoord2dv.is_loaded = true; }, _ => unsafe { storage::TexCoord2dv.f = transmute(failing::TexCoord2dv); storage::TexCoord2dv.is_loaded = false; } }
    match loadfn("TexCoord2f") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2f.f = transmute(ptr); storage::TexCoord2f.is_loaded = true; }, _ => unsafe { storage::TexCoord2f.f = transmute(failing::TexCoord2f); storage::TexCoord2f.is_loaded = false; } }
    match loadfn("TexCoord2fColor3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor3fVertex3fSUN.f = transmute(ptr); storage::TexCoord2fColor3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fColor3fVertex3fSUN.f = transmute(failing::TexCoord2fColor3fVertex3fSUN); storage::TexCoord2fColor3fVertex3fSUN.is_loaded = false; } }
    match loadfn("TexCoord2fColor3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor3fVertex3fvSUN.f = transmute(ptr); storage::TexCoord2fColor3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fColor3fVertex3fvSUN.f = transmute(failing::TexCoord2fColor3fVertex3fvSUN); storage::TexCoord2fColor3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("TexCoord2fColor4fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor4fNormal3fVertex3fSUN.f = transmute(ptr); storage::TexCoord2fColor4fNormal3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fColor4fNormal3fVertex3fSUN.f = transmute(failing::TexCoord2fColor4fNormal3fVertex3fSUN); storage::TexCoord2fColor4fNormal3fVertex3fSUN.is_loaded = false; } }
    match loadfn("TexCoord2fColor4fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor4fNormal3fVertex3fvSUN.f = transmute(ptr); storage::TexCoord2fColor4fNormal3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fColor4fNormal3fVertex3fvSUN.f = transmute(failing::TexCoord2fColor4fNormal3fVertex3fvSUN); storage::TexCoord2fColor4fNormal3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("TexCoord2fColor4ubVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor4ubVertex3fSUN.f = transmute(ptr); storage::TexCoord2fColor4ubVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fColor4ubVertex3fSUN.f = transmute(failing::TexCoord2fColor4ubVertex3fSUN); storage::TexCoord2fColor4ubVertex3fSUN.is_loaded = false; } }
    match loadfn("TexCoord2fColor4ubVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor4ubVertex3fvSUN.f = transmute(ptr); storage::TexCoord2fColor4ubVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fColor4ubVertex3fvSUN.f = transmute(failing::TexCoord2fColor4ubVertex3fvSUN); storage::TexCoord2fColor4ubVertex3fvSUN.is_loaded = false; } }
    match loadfn("TexCoord2fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fNormal3fVertex3fSUN.f = transmute(ptr); storage::TexCoord2fNormal3fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fNormal3fVertex3fSUN.f = transmute(failing::TexCoord2fNormal3fVertex3fSUN); storage::TexCoord2fNormal3fVertex3fSUN.is_loaded = false; } }
    match loadfn("TexCoord2fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fNormal3fVertex3fvSUN.f = transmute(ptr); storage::TexCoord2fNormal3fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fNormal3fVertex3fvSUN.f = transmute(failing::TexCoord2fNormal3fVertex3fvSUN); storage::TexCoord2fNormal3fVertex3fvSUN.is_loaded = false; } }
    match loadfn("TexCoord2fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fVertex3fSUN.f = transmute(ptr); storage::TexCoord2fVertex3fSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fVertex3fSUN.f = transmute(failing::TexCoord2fVertex3fSUN); storage::TexCoord2fVertex3fSUN.is_loaded = false; } }
    match loadfn("TexCoord2fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fVertex3fvSUN.f = transmute(ptr); storage::TexCoord2fVertex3fvSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord2fVertex3fvSUN.f = transmute(failing::TexCoord2fVertex3fvSUN); storage::TexCoord2fVertex3fvSUN.is_loaded = false; } }
    match loadfn("TexCoord2fv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fv.f = transmute(ptr); storage::TexCoord2fv.is_loaded = true; }, _ => unsafe { storage::TexCoord2fv.f = transmute(failing::TexCoord2fv); storage::TexCoord2fv.is_loaded = false; } }
    match loadfn("TexCoord2hNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2hNV.f = transmute(ptr); storage::TexCoord2hNV.is_loaded = true; }, _ => unsafe { storage::TexCoord2hNV.f = transmute(failing::TexCoord2hNV); storage::TexCoord2hNV.is_loaded = false; } }
    match loadfn("TexCoord2hvNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2hvNV.f = transmute(ptr); storage::TexCoord2hvNV.is_loaded = true; }, _ => unsafe { storage::TexCoord2hvNV.f = transmute(failing::TexCoord2hvNV); storage::TexCoord2hvNV.is_loaded = false; } }
    match loadfn("TexCoord2i") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2i.f = transmute(ptr); storage::TexCoord2i.is_loaded = true; }, _ => unsafe { storage::TexCoord2i.f = transmute(failing::TexCoord2i); storage::TexCoord2i.is_loaded = false; } }
    match loadfn("TexCoord2iv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2iv.f = transmute(ptr); storage::TexCoord2iv.is_loaded = true; }, _ => unsafe { storage::TexCoord2iv.f = transmute(failing::TexCoord2iv); storage::TexCoord2iv.is_loaded = false; } }
    match loadfn("TexCoord2s") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2s.f = transmute(ptr); storage::TexCoord2s.is_loaded = true; }, _ => unsafe { storage::TexCoord2s.f = transmute(failing::TexCoord2s); storage::TexCoord2s.is_loaded = false; } }
    match loadfn("TexCoord2sv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2sv.f = transmute(ptr); storage::TexCoord2sv.is_loaded = true; }, _ => unsafe { storage::TexCoord2sv.f = transmute(failing::TexCoord2sv); storage::TexCoord2sv.is_loaded = false; } }
    match loadfn("TexCoord2xOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2xOES.f = transmute(ptr); storage::TexCoord2xOES.is_loaded = true; }, _ => unsafe { storage::TexCoord2xOES.f = transmute(failing::TexCoord2xOES); storage::TexCoord2xOES.is_loaded = false; } }
    match loadfn("TexCoord2xvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2xvOES.f = transmute(ptr); storage::TexCoord2xvOES.is_loaded = true; }, _ => unsafe { storage::TexCoord2xvOES.f = transmute(failing::TexCoord2xvOES); storage::TexCoord2xvOES.is_loaded = false; } }
    match loadfn("TexCoord3bOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3bOES.f = transmute(ptr); storage::TexCoord3bOES.is_loaded = true; }, _ => unsafe { storage::TexCoord3bOES.f = transmute(failing::TexCoord3bOES); storage::TexCoord3bOES.is_loaded = false; } }
    match loadfn("TexCoord3bvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3bvOES.f = transmute(ptr); storage::TexCoord3bvOES.is_loaded = true; }, _ => unsafe { storage::TexCoord3bvOES.f = transmute(failing::TexCoord3bvOES); storage::TexCoord3bvOES.is_loaded = false; } }
    match loadfn("TexCoord3d") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3d.f = transmute(ptr); storage::TexCoord3d.is_loaded = true; }, _ => unsafe { storage::TexCoord3d.f = transmute(failing::TexCoord3d); storage::TexCoord3d.is_loaded = false; } }
    match loadfn("TexCoord3dv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3dv.f = transmute(ptr); storage::TexCoord3dv.is_loaded = true; }, _ => unsafe { storage::TexCoord3dv.f = transmute(failing::TexCoord3dv); storage::TexCoord3dv.is_loaded = false; } }
    match loadfn("TexCoord3f") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3f.f = transmute(ptr); storage::TexCoord3f.is_loaded = true; }, _ => unsafe { storage::TexCoord3f.f = transmute(failing::TexCoord3f); storage::TexCoord3f.is_loaded = false; } }
    match loadfn("TexCoord3fv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3fv.f = transmute(ptr); storage::TexCoord3fv.is_loaded = true; }, _ => unsafe { storage::TexCoord3fv.f = transmute(failing::TexCoord3fv); storage::TexCoord3fv.is_loaded = false; } }
    match loadfn("TexCoord3hNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3hNV.f = transmute(ptr); storage::TexCoord3hNV.is_loaded = true; }, _ => unsafe { storage::TexCoord3hNV.f = transmute(failing::TexCoord3hNV); storage::TexCoord3hNV.is_loaded = false; } }
    match loadfn("TexCoord3hvNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3hvNV.f = transmute(ptr); storage::TexCoord3hvNV.is_loaded = true; }, _ => unsafe { storage::TexCoord3hvNV.f = transmute(failing::TexCoord3hvNV); storage::TexCoord3hvNV.is_loaded = false; } }
    match loadfn("TexCoord3i") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3i.f = transmute(ptr); storage::TexCoord3i.is_loaded = true; }, _ => unsafe { storage::TexCoord3i.f = transmute(failing::TexCoord3i); storage::TexCoord3i.is_loaded = false; } }
    match loadfn("TexCoord3iv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3iv.f = transmute(ptr); storage::TexCoord3iv.is_loaded = true; }, _ => unsafe { storage::TexCoord3iv.f = transmute(failing::TexCoord3iv); storage::TexCoord3iv.is_loaded = false; } }
    match loadfn("TexCoord3s") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3s.f = transmute(ptr); storage::TexCoord3s.is_loaded = true; }, _ => unsafe { storage::TexCoord3s.f = transmute(failing::TexCoord3s); storage::TexCoord3s.is_loaded = false; } }
    match loadfn("TexCoord3sv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3sv.f = transmute(ptr); storage::TexCoord3sv.is_loaded = true; }, _ => unsafe { storage::TexCoord3sv.f = transmute(failing::TexCoord3sv); storage::TexCoord3sv.is_loaded = false; } }
    match loadfn("TexCoord3xOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3xOES.f = transmute(ptr); storage::TexCoord3xOES.is_loaded = true; }, _ => unsafe { storage::TexCoord3xOES.f = transmute(failing::TexCoord3xOES); storage::TexCoord3xOES.is_loaded = false; } }
    match loadfn("TexCoord3xvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3xvOES.f = transmute(ptr); storage::TexCoord3xvOES.is_loaded = true; }, _ => unsafe { storage::TexCoord3xvOES.f = transmute(failing::TexCoord3xvOES); storage::TexCoord3xvOES.is_loaded = false; } }
    match loadfn("TexCoord4bOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4bOES.f = transmute(ptr); storage::TexCoord4bOES.is_loaded = true; }, _ => unsafe { storage::TexCoord4bOES.f = transmute(failing::TexCoord4bOES); storage::TexCoord4bOES.is_loaded = false; } }
    match loadfn("TexCoord4bvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4bvOES.f = transmute(ptr); storage::TexCoord4bvOES.is_loaded = true; }, _ => unsafe { storage::TexCoord4bvOES.f = transmute(failing::TexCoord4bvOES); storage::TexCoord4bvOES.is_loaded = false; } }
    match loadfn("TexCoord4d") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4d.f = transmute(ptr); storage::TexCoord4d.is_loaded = true; }, _ => unsafe { storage::TexCoord4d.f = transmute(failing::TexCoord4d); storage::TexCoord4d.is_loaded = false; } }
    match loadfn("TexCoord4dv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4dv.f = transmute(ptr); storage::TexCoord4dv.is_loaded = true; }, _ => unsafe { storage::TexCoord4dv.f = transmute(failing::TexCoord4dv); storage::TexCoord4dv.is_loaded = false; } }
    match loadfn("TexCoord4f") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4f.f = transmute(ptr); storage::TexCoord4f.is_loaded = true; }, _ => unsafe { storage::TexCoord4f.f = transmute(failing::TexCoord4f); storage::TexCoord4f.is_loaded = false; } }
    match loadfn("TexCoord4fColor4fNormal3fVertex4fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fColor4fNormal3fVertex4fSUN.f = transmute(ptr); storage::TexCoord4fColor4fNormal3fVertex4fSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord4fColor4fNormal3fVertex4fSUN.f = transmute(failing::TexCoord4fColor4fNormal3fVertex4fSUN); storage::TexCoord4fColor4fNormal3fVertex4fSUN.is_loaded = false; } }
    match loadfn("TexCoord4fColor4fNormal3fVertex4fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fColor4fNormal3fVertex4fvSUN.f = transmute(ptr); storage::TexCoord4fColor4fNormal3fVertex4fvSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord4fColor4fNormal3fVertex4fvSUN.f = transmute(failing::TexCoord4fColor4fNormal3fVertex4fvSUN); storage::TexCoord4fColor4fNormal3fVertex4fvSUN.is_loaded = false; } }
    match loadfn("TexCoord4fVertex4fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fVertex4fSUN.f = transmute(ptr); storage::TexCoord4fVertex4fSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord4fVertex4fSUN.f = transmute(failing::TexCoord4fVertex4fSUN); storage::TexCoord4fVertex4fSUN.is_loaded = false; } }
    match loadfn("TexCoord4fVertex4fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fVertex4fvSUN.f = transmute(ptr); storage::TexCoord4fVertex4fvSUN.is_loaded = true; }, _ => unsafe { storage::TexCoord4fVertex4fvSUN.f = transmute(failing::TexCoord4fVertex4fvSUN); storage::TexCoord4fVertex4fvSUN.is_loaded = false; } }
    match loadfn("TexCoord4fv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fv.f = transmute(ptr); storage::TexCoord4fv.is_loaded = true; }, _ => unsafe { storage::TexCoord4fv.f = transmute(failing::TexCoord4fv); storage::TexCoord4fv.is_loaded = false; } }
    match loadfn("TexCoord4hNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4hNV.f = transmute(ptr); storage::TexCoord4hNV.is_loaded = true; }, _ => unsafe { storage::TexCoord4hNV.f = transmute(failing::TexCoord4hNV); storage::TexCoord4hNV.is_loaded = false; } }
    match loadfn("TexCoord4hvNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4hvNV.f = transmute(ptr); storage::TexCoord4hvNV.is_loaded = true; }, _ => unsafe { storage::TexCoord4hvNV.f = transmute(failing::TexCoord4hvNV); storage::TexCoord4hvNV.is_loaded = false; } }
    match loadfn("TexCoord4i") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4i.f = transmute(ptr); storage::TexCoord4i.is_loaded = true; }, _ => unsafe { storage::TexCoord4i.f = transmute(failing::TexCoord4i); storage::TexCoord4i.is_loaded = false; } }
    match loadfn("TexCoord4iv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4iv.f = transmute(ptr); storage::TexCoord4iv.is_loaded = true; }, _ => unsafe { storage::TexCoord4iv.f = transmute(failing::TexCoord4iv); storage::TexCoord4iv.is_loaded = false; } }
    match loadfn("TexCoord4s") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4s.f = transmute(ptr); storage::TexCoord4s.is_loaded = true; }, _ => unsafe { storage::TexCoord4s.f = transmute(failing::TexCoord4s); storage::TexCoord4s.is_loaded = false; } }
    match loadfn("TexCoord4sv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4sv.f = transmute(ptr); storage::TexCoord4sv.is_loaded = true; }, _ => unsafe { storage::TexCoord4sv.f = transmute(failing::TexCoord4sv); storage::TexCoord4sv.is_loaded = false; } }
    match loadfn("TexCoord4xOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4xOES.f = transmute(ptr); storage::TexCoord4xOES.is_loaded = true; }, _ => unsafe { storage::TexCoord4xOES.f = transmute(failing::TexCoord4xOES); storage::TexCoord4xOES.is_loaded = false; } }
    match loadfn("TexCoord4xvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4xvOES.f = transmute(ptr); storage::TexCoord4xvOES.is_loaded = true; }, _ => unsafe { storage::TexCoord4xvOES.f = transmute(failing::TexCoord4xvOES); storage::TexCoord4xvOES.is_loaded = false; } }
    match loadfn("TexCoordFormatNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoordFormatNV.f = transmute(ptr); storage::TexCoordFormatNV.is_loaded = true; }, _ => unsafe { storage::TexCoordFormatNV.f = transmute(failing::TexCoordFormatNV); storage::TexCoordFormatNV.is_loaded = false; } }
    match loadfn("TexCoordP1ui") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP1ui.f = transmute(ptr); storage::TexCoordP1ui.is_loaded = true; }, _ => unsafe { storage::TexCoordP1ui.f = transmute(failing::TexCoordP1ui); storage::TexCoordP1ui.is_loaded = false; } }
    match loadfn("TexCoordP1uiv") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP1uiv.f = transmute(ptr); storage::TexCoordP1uiv.is_loaded = true; }, _ => unsafe { storage::TexCoordP1uiv.f = transmute(failing::TexCoordP1uiv); storage::TexCoordP1uiv.is_loaded = false; } }
    match loadfn("TexCoordP2ui") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP2ui.f = transmute(ptr); storage::TexCoordP2ui.is_loaded = true; }, _ => unsafe { storage::TexCoordP2ui.f = transmute(failing::TexCoordP2ui); storage::TexCoordP2ui.is_loaded = false; } }
    match loadfn("TexCoordP2uiv") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP2uiv.f = transmute(ptr); storage::TexCoordP2uiv.is_loaded = true; }, _ => unsafe { storage::TexCoordP2uiv.f = transmute(failing::TexCoordP2uiv); storage::TexCoordP2uiv.is_loaded = false; } }
    match loadfn("TexCoordP3ui") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP3ui.f = transmute(ptr); storage::TexCoordP3ui.is_loaded = true; }, _ => unsafe { storage::TexCoordP3ui.f = transmute(failing::TexCoordP3ui); storage::TexCoordP3ui.is_loaded = false; } }
    match loadfn("TexCoordP3uiv") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP3uiv.f = transmute(ptr); storage::TexCoordP3uiv.is_loaded = true; }, _ => unsafe { storage::TexCoordP3uiv.f = transmute(failing::TexCoordP3uiv); storage::TexCoordP3uiv.is_loaded = false; } }
    match loadfn("TexCoordP4ui") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP4ui.f = transmute(ptr); storage::TexCoordP4ui.is_loaded = true; }, _ => unsafe { storage::TexCoordP4ui.f = transmute(failing::TexCoordP4ui); storage::TexCoordP4ui.is_loaded = false; } }
    match loadfn("TexCoordP4uiv") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP4uiv.f = transmute(ptr); storage::TexCoordP4uiv.is_loaded = true; }, _ => unsafe { storage::TexCoordP4uiv.f = transmute(failing::TexCoordP4uiv); storage::TexCoordP4uiv.is_loaded = false; } }
    match loadfn("TexCoordPointer") { ptr if !ptr.is_null() => unsafe { storage::TexCoordPointer.f = transmute(ptr); storage::TexCoordPointer.is_loaded = true; }, _ => unsafe { storage::TexCoordPointer.f = transmute(failing::TexCoordPointer); storage::TexCoordPointer.is_loaded = false; } }
    match loadfn("TexCoordPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::TexCoordPointerEXT.f = transmute(ptr); storage::TexCoordPointerEXT.is_loaded = true; }, _ => unsafe { storage::TexCoordPointerEXT.f = transmute(failing::TexCoordPointerEXT); storage::TexCoordPointerEXT.is_loaded = false; } }
    match loadfn("TexCoordPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::TexCoordPointerListIBM.f = transmute(ptr); storage::TexCoordPointerListIBM.is_loaded = true; }, _ => unsafe { storage::TexCoordPointerListIBM.f = transmute(failing::TexCoordPointerListIBM); storage::TexCoordPointerListIBM.is_loaded = false; } }
    match loadfn("TexCoordPointervINTEL") { ptr if !ptr.is_null() => unsafe { storage::TexCoordPointervINTEL.f = transmute(ptr); storage::TexCoordPointervINTEL.is_loaded = true; }, _ => unsafe { storage::TexCoordPointervINTEL.f = transmute(failing::TexCoordPointervINTEL); storage::TexCoordPointervINTEL.is_loaded = false; } }
    match loadfn("TexEnvf") { ptr if !ptr.is_null() => unsafe { storage::TexEnvf.f = transmute(ptr); storage::TexEnvf.is_loaded = true; }, _ => unsafe { storage::TexEnvf.f = transmute(failing::TexEnvf); storage::TexEnvf.is_loaded = false; } }
    match loadfn("TexEnvfv") { ptr if !ptr.is_null() => unsafe { storage::TexEnvfv.f = transmute(ptr); storage::TexEnvfv.is_loaded = true; }, _ => unsafe { storage::TexEnvfv.f = transmute(failing::TexEnvfv); storage::TexEnvfv.is_loaded = false; } }
    match loadfn("TexEnvi") { ptr if !ptr.is_null() => unsafe { storage::TexEnvi.f = transmute(ptr); storage::TexEnvi.is_loaded = true; }, _ => unsafe { storage::TexEnvi.f = transmute(failing::TexEnvi); storage::TexEnvi.is_loaded = false; } }
    match loadfn("TexEnviv") { ptr if !ptr.is_null() => unsafe { storage::TexEnviv.f = transmute(ptr); storage::TexEnviv.is_loaded = true; }, _ => unsafe { storage::TexEnviv.f = transmute(failing::TexEnviv); storage::TexEnviv.is_loaded = false; } }
    match loadfn("TexEnvx") { ptr if !ptr.is_null() => unsafe { storage::TexEnvx.f = transmute(ptr); storage::TexEnvx.is_loaded = true; }, _ => unsafe { storage::TexEnvx.f = transmute(failing::TexEnvx); storage::TexEnvx.is_loaded = false; } }
    match loadfn("TexEnvxOES") { ptr if !ptr.is_null() => unsafe { storage::TexEnvxOES.f = transmute(ptr); storage::TexEnvxOES.is_loaded = true; }, _ => unsafe { storage::TexEnvxOES.f = transmute(failing::TexEnvxOES); storage::TexEnvxOES.is_loaded = false; } }
    match loadfn("TexEnvxv") { ptr if !ptr.is_null() => unsafe { storage::TexEnvxv.f = transmute(ptr); storage::TexEnvxv.is_loaded = true; }, _ => unsafe { storage::TexEnvxv.f = transmute(failing::TexEnvxv); storage::TexEnvxv.is_loaded = false; } }
    match loadfn("TexEnvxvOES") { ptr if !ptr.is_null() => unsafe { storage::TexEnvxvOES.f = transmute(ptr); storage::TexEnvxvOES.is_loaded = true; }, _ => unsafe { storage::TexEnvxvOES.f = transmute(failing::TexEnvxvOES); storage::TexEnvxvOES.is_loaded = false; } }
    match loadfn("TexFilterFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::TexFilterFuncSGIS.f = transmute(ptr); storage::TexFilterFuncSGIS.is_loaded = true; }, _ => unsafe { storage::TexFilterFuncSGIS.f = transmute(failing::TexFilterFuncSGIS); storage::TexFilterFuncSGIS.is_loaded = false; } }
    match loadfn("TexGend") { ptr if !ptr.is_null() => unsafe { storage::TexGend.f = transmute(ptr); storage::TexGend.is_loaded = true; }, _ => unsafe { storage::TexGend.f = transmute(failing::TexGend); storage::TexGend.is_loaded = false; } }
    match loadfn("TexGendv") { ptr if !ptr.is_null() => unsafe { storage::TexGendv.f = transmute(ptr); storage::TexGendv.is_loaded = true; }, _ => unsafe { storage::TexGendv.f = transmute(failing::TexGendv); storage::TexGendv.is_loaded = false; } }
    match loadfn("TexGenf") { ptr if !ptr.is_null() => unsafe { storage::TexGenf.f = transmute(ptr); storage::TexGenf.is_loaded = true; }, _ => unsafe { storage::TexGenf.f = transmute(failing::TexGenf); storage::TexGenf.is_loaded = false; } }
    match loadfn("TexGenfOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenfOES.f = transmute(ptr); storage::TexGenfOES.is_loaded = true; }, _ => unsafe { storage::TexGenfOES.f = transmute(failing::TexGenfOES); storage::TexGenfOES.is_loaded = false; } }
    match loadfn("TexGenfv") { ptr if !ptr.is_null() => unsafe { storage::TexGenfv.f = transmute(ptr); storage::TexGenfv.is_loaded = true; }, _ => unsafe { storage::TexGenfv.f = transmute(failing::TexGenfv); storage::TexGenfv.is_loaded = false; } }
    match loadfn("TexGenfvOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenfvOES.f = transmute(ptr); storage::TexGenfvOES.is_loaded = true; }, _ => unsafe { storage::TexGenfvOES.f = transmute(failing::TexGenfvOES); storage::TexGenfvOES.is_loaded = false; } }
    match loadfn("TexGeni") { ptr if !ptr.is_null() => unsafe { storage::TexGeni.f = transmute(ptr); storage::TexGeni.is_loaded = true; }, _ => unsafe { storage::TexGeni.f = transmute(failing::TexGeni); storage::TexGeni.is_loaded = false; } }
    match loadfn("TexGeniOES") { ptr if !ptr.is_null() => unsafe { storage::TexGeniOES.f = transmute(ptr); storage::TexGeniOES.is_loaded = true; }, _ => unsafe { storage::TexGeniOES.f = transmute(failing::TexGeniOES); storage::TexGeniOES.is_loaded = false; } }
    match loadfn("TexGeniv") { ptr if !ptr.is_null() => unsafe { storage::TexGeniv.f = transmute(ptr); storage::TexGeniv.is_loaded = true; }, _ => unsafe { storage::TexGeniv.f = transmute(failing::TexGeniv); storage::TexGeniv.is_loaded = false; } }
    match loadfn("TexGenivOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenivOES.f = transmute(ptr); storage::TexGenivOES.is_loaded = true; }, _ => unsafe { storage::TexGenivOES.f = transmute(failing::TexGenivOES); storage::TexGenivOES.is_loaded = false; } }
    match loadfn("TexGenxOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenxOES.f = transmute(ptr); storage::TexGenxOES.is_loaded = true; }, _ => unsafe { storage::TexGenxOES.f = transmute(failing::TexGenxOES); storage::TexGenxOES.is_loaded = false; } }
    match loadfn("TexGenxvOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenxvOES.f = transmute(ptr); storage::TexGenxvOES.is_loaded = true; }, _ => unsafe { storage::TexGenxvOES.f = transmute(failing::TexGenxvOES); storage::TexGenxvOES.is_loaded = false; } }
    match loadfn("TexImage1D") { ptr if !ptr.is_null() => unsafe { storage::TexImage1D.f = transmute(ptr); storage::TexImage1D.is_loaded = true; }, _ => unsafe { storage::TexImage1D.f = transmute(failing::TexImage1D); storage::TexImage1D.is_loaded = false; } }
    match loadfn("TexImage2D") { ptr if !ptr.is_null() => unsafe { storage::TexImage2D.f = transmute(ptr); storage::TexImage2D.is_loaded = true; }, _ => unsafe { storage::TexImage2D.f = transmute(failing::TexImage2D); storage::TexImage2D.is_loaded = false; } }
    match loadfn("TexImage2DMultisample") { ptr if !ptr.is_null() => unsafe { storage::TexImage2DMultisample.f = transmute(ptr); storage::TexImage2DMultisample.is_loaded = true; }, _ => unsafe { storage::TexImage2DMultisample.f = transmute(failing::TexImage2DMultisample); storage::TexImage2DMultisample.is_loaded = false; } }
    match loadfn("TexImage2DMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::TexImage2DMultisampleCoverageNV.f = transmute(ptr); storage::TexImage2DMultisampleCoverageNV.is_loaded = true; }, _ => unsafe { storage::TexImage2DMultisampleCoverageNV.f = transmute(failing::TexImage2DMultisampleCoverageNV); storage::TexImage2DMultisampleCoverageNV.is_loaded = false; } }
    match loadfn("TexImage3D") { ptr if !ptr.is_null() => unsafe { storage::TexImage3D.f = transmute(ptr); storage::TexImage3D.is_loaded = true; }, _ => unsafe { storage::TexImage3D.f = transmute(failing::TexImage3D); storage::TexImage3D.is_loaded = false; } }
    match loadfn("TexImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexImage3DEXT.f = transmute(ptr); storage::TexImage3DEXT.is_loaded = true; }, _ => unsafe { storage::TexImage3DEXT.f = transmute(failing::TexImage3DEXT); storage::TexImage3DEXT.is_loaded = false; } }
    match loadfn("TexImage3DMultisample") { ptr if !ptr.is_null() => unsafe { storage::TexImage3DMultisample.f = transmute(ptr); storage::TexImage3DMultisample.is_loaded = true; }, _ => unsafe { storage::TexImage3DMultisample.f = transmute(failing::TexImage3DMultisample); storage::TexImage3DMultisample.is_loaded = false; } }
    match loadfn("TexImage3DMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::TexImage3DMultisampleCoverageNV.f = transmute(ptr); storage::TexImage3DMultisampleCoverageNV.is_loaded = true; }, _ => unsafe { storage::TexImage3DMultisampleCoverageNV.f = transmute(failing::TexImage3DMultisampleCoverageNV); storage::TexImage3DMultisampleCoverageNV.is_loaded = false; } }
    match loadfn("TexImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::TexImage3DOES.f = transmute(ptr); storage::TexImage3DOES.is_loaded = true; }, _ => unsafe { storage::TexImage3DOES.f = transmute(failing::TexImage3DOES); storage::TexImage3DOES.is_loaded = false; } }
    match loadfn("TexImage4DSGIS") { ptr if !ptr.is_null() => unsafe { storage::TexImage4DSGIS.f = transmute(ptr); storage::TexImage4DSGIS.is_loaded = true; }, _ => unsafe { storage::TexImage4DSGIS.f = transmute(failing::TexImage4DSGIS); storage::TexImage4DSGIS.is_loaded = false; } }
    match loadfn("TexPageCommitmentARB") { ptr if !ptr.is_null() => unsafe { storage::TexPageCommitmentARB.f = transmute(ptr); storage::TexPageCommitmentARB.is_loaded = true; }, _ => unsafe { storage::TexPageCommitmentARB.f = transmute(failing::TexPageCommitmentARB); storage::TexPageCommitmentARB.is_loaded = false; } }
    match loadfn("TexParameterIiv") { ptr if !ptr.is_null() => unsafe { storage::TexParameterIiv.f = transmute(ptr); storage::TexParameterIiv.is_loaded = true; }, _ => unsafe { storage::TexParameterIiv.f = transmute(failing::TexParameterIiv); storage::TexParameterIiv.is_loaded = false; } }
    match loadfn("TexParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::TexParameterIivEXT.f = transmute(ptr); storage::TexParameterIivEXT.is_loaded = true; }, _ => unsafe { storage::TexParameterIivEXT.f = transmute(failing::TexParameterIivEXT); storage::TexParameterIivEXT.is_loaded = false; } }
    match loadfn("TexParameterIuiv") { ptr if !ptr.is_null() => unsafe { storage::TexParameterIuiv.f = transmute(ptr); storage::TexParameterIuiv.is_loaded = true; }, _ => unsafe { storage::TexParameterIuiv.f = transmute(failing::TexParameterIuiv); storage::TexParameterIuiv.is_loaded = false; } }
    match loadfn("TexParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::TexParameterIuivEXT.f = transmute(ptr); storage::TexParameterIuivEXT.is_loaded = true; }, _ => unsafe { storage::TexParameterIuivEXT.f = transmute(failing::TexParameterIuivEXT); storage::TexParameterIuivEXT.is_loaded = false; } }
    match loadfn("TexParameterf") { ptr if !ptr.is_null() => unsafe { storage::TexParameterf.f = transmute(ptr); storage::TexParameterf.is_loaded = true; }, _ => unsafe { storage::TexParameterf.f = transmute(failing::TexParameterf); storage::TexParameterf.is_loaded = false; } }
    match loadfn("TexParameterfv") { ptr if !ptr.is_null() => unsafe { storage::TexParameterfv.f = transmute(ptr); storage::TexParameterfv.is_loaded = true; }, _ => unsafe { storage::TexParameterfv.f = transmute(failing::TexParameterfv); storage::TexParameterfv.is_loaded = false; } }
    match loadfn("TexParameteri") { ptr if !ptr.is_null() => unsafe { storage::TexParameteri.f = transmute(ptr); storage::TexParameteri.is_loaded = true; }, _ => unsafe { storage::TexParameteri.f = transmute(failing::TexParameteri); storage::TexParameteri.is_loaded = false; } }
    match loadfn("TexParameteriv") { ptr if !ptr.is_null() => unsafe { storage::TexParameteriv.f = transmute(ptr); storage::TexParameteriv.is_loaded = true; }, _ => unsafe { storage::TexParameteriv.f = transmute(failing::TexParameteriv); storage::TexParameteriv.is_loaded = false; } }
    match loadfn("TexParameterx") { ptr if !ptr.is_null() => unsafe { storage::TexParameterx.f = transmute(ptr); storage::TexParameterx.is_loaded = true; }, _ => unsafe { storage::TexParameterx.f = transmute(failing::TexParameterx); storage::TexParameterx.is_loaded = false; } }
    match loadfn("TexParameterxOES") { ptr if !ptr.is_null() => unsafe { storage::TexParameterxOES.f = transmute(ptr); storage::TexParameterxOES.is_loaded = true; }, _ => unsafe { storage::TexParameterxOES.f = transmute(failing::TexParameterxOES); storage::TexParameterxOES.is_loaded = false; } }
    match loadfn("TexParameterxv") { ptr if !ptr.is_null() => unsafe { storage::TexParameterxv.f = transmute(ptr); storage::TexParameterxv.is_loaded = true; }, _ => unsafe { storage::TexParameterxv.f = transmute(failing::TexParameterxv); storage::TexParameterxv.is_loaded = false; } }
    match loadfn("TexParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::TexParameterxvOES.f = transmute(ptr); storage::TexParameterxvOES.is_loaded = true; }, _ => unsafe { storage::TexParameterxvOES.f = transmute(failing::TexParameterxvOES); storage::TexParameterxvOES.is_loaded = false; } }
    match loadfn("TexRenderbufferNV") { ptr if !ptr.is_null() => unsafe { storage::TexRenderbufferNV.f = transmute(ptr); storage::TexRenderbufferNV.is_loaded = true; }, _ => unsafe { storage::TexRenderbufferNV.f = transmute(failing::TexRenderbufferNV); storage::TexRenderbufferNV.is_loaded = false; } }
    match loadfn("TexStorage1D") { ptr if !ptr.is_null() => unsafe { storage::TexStorage1D.f = transmute(ptr); storage::TexStorage1D.is_loaded = true; }, _ => unsafe { storage::TexStorage1D.f = transmute(failing::TexStorage1D); storage::TexStorage1D.is_loaded = false; } }
    match loadfn("TexStorage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexStorage1DEXT.f = transmute(ptr); storage::TexStorage1DEXT.is_loaded = true; }, _ => unsafe { storage::TexStorage1DEXT.f = transmute(failing::TexStorage1DEXT); storage::TexStorage1DEXT.is_loaded = false; } }
    match loadfn("TexStorage2D") { ptr if !ptr.is_null() => unsafe { storage::TexStorage2D.f = transmute(ptr); storage::TexStorage2D.is_loaded = true; }, _ => unsafe { storage::TexStorage2D.f = transmute(failing::TexStorage2D); storage::TexStorage2D.is_loaded = false; } }
    match loadfn("TexStorage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexStorage2DEXT.f = transmute(ptr); storage::TexStorage2DEXT.is_loaded = true; }, _ => unsafe { storage::TexStorage2DEXT.f = transmute(failing::TexStorage2DEXT); storage::TexStorage2DEXT.is_loaded = false; } }
    match loadfn("TexStorage2DMultisample") { ptr if !ptr.is_null() => unsafe { storage::TexStorage2DMultisample.f = transmute(ptr); storage::TexStorage2DMultisample.is_loaded = true; }, _ => unsafe { storage::TexStorage2DMultisample.f = transmute(failing::TexStorage2DMultisample); storage::TexStorage2DMultisample.is_loaded = false; } }
    match loadfn("TexStorage3D") { ptr if !ptr.is_null() => unsafe { storage::TexStorage3D.f = transmute(ptr); storage::TexStorage3D.is_loaded = true; }, _ => unsafe { storage::TexStorage3D.f = transmute(failing::TexStorage3D); storage::TexStorage3D.is_loaded = false; } }
    match loadfn("TexStorage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexStorage3DEXT.f = transmute(ptr); storage::TexStorage3DEXT.is_loaded = true; }, _ => unsafe { storage::TexStorage3DEXT.f = transmute(failing::TexStorage3DEXT); storage::TexStorage3DEXT.is_loaded = false; } }
    match loadfn("TexStorage3DMultisample") { ptr if !ptr.is_null() => unsafe { storage::TexStorage3DMultisample.f = transmute(ptr); storage::TexStorage3DMultisample.is_loaded = true; }, _ => unsafe { storage::TexStorage3DMultisample.f = transmute(failing::TexStorage3DMultisample); storage::TexStorage3DMultisample.is_loaded = false; } }
    match loadfn("TexStorageSparseAMD") { ptr if !ptr.is_null() => unsafe { storage::TexStorageSparseAMD.f = transmute(ptr); storage::TexStorageSparseAMD.is_loaded = true; }, _ => unsafe { storage::TexStorageSparseAMD.f = transmute(failing::TexStorageSparseAMD); storage::TexStorageSparseAMD.is_loaded = false; } }
    match loadfn("TexSubImage1D") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage1D.f = transmute(ptr); storage::TexSubImage1D.is_loaded = true; }, _ => unsafe { storage::TexSubImage1D.f = transmute(failing::TexSubImage1D); storage::TexSubImage1D.is_loaded = false; } }
    match loadfn("TexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage1DEXT.f = transmute(ptr); storage::TexSubImage1DEXT.is_loaded = true; }, _ => unsafe { storage::TexSubImage1DEXT.f = transmute(failing::TexSubImage1DEXT); storage::TexSubImage1DEXT.is_loaded = false; } }
    match loadfn("TexSubImage2D") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage2D.f = transmute(ptr); storage::TexSubImage2D.is_loaded = true; }, _ => unsafe { storage::TexSubImage2D.f = transmute(failing::TexSubImage2D); storage::TexSubImage2D.is_loaded = false; } }
    match loadfn("TexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage2DEXT.f = transmute(ptr); storage::TexSubImage2DEXT.is_loaded = true; }, _ => unsafe { storage::TexSubImage2DEXT.f = transmute(failing::TexSubImage2DEXT); storage::TexSubImage2DEXT.is_loaded = false; } }
    match loadfn("TexSubImage3D") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage3D.f = transmute(ptr); storage::TexSubImage3D.is_loaded = true; }, _ => unsafe { storage::TexSubImage3D.f = transmute(failing::TexSubImage3D); storage::TexSubImage3D.is_loaded = false; } }
    match loadfn("TexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage3DEXT.f = transmute(ptr); storage::TexSubImage3DEXT.is_loaded = true; }, _ => unsafe { storage::TexSubImage3DEXT.f = transmute(failing::TexSubImage3DEXT); storage::TexSubImage3DEXT.is_loaded = false; } }
    match loadfn("TexSubImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage3DOES.f = transmute(ptr); storage::TexSubImage3DOES.is_loaded = true; }, _ => unsafe { storage::TexSubImage3DOES.f = transmute(failing::TexSubImage3DOES); storage::TexSubImage3DOES.is_loaded = false; } }
    match loadfn("TexSubImage4DSGIS") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage4DSGIS.f = transmute(ptr); storage::TexSubImage4DSGIS.is_loaded = true; }, _ => unsafe { storage::TexSubImage4DSGIS.f = transmute(failing::TexSubImage4DSGIS); storage::TexSubImage4DSGIS.is_loaded = false; } }
    match loadfn("TextureBarrierNV") { ptr if !ptr.is_null() => unsafe { storage::TextureBarrierNV.f = transmute(ptr); storage::TextureBarrierNV.is_loaded = true; }, _ => unsafe { storage::TextureBarrierNV.f = transmute(failing::TextureBarrierNV); storage::TextureBarrierNV.is_loaded = false; } }
    match loadfn("TextureBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureBufferEXT.f = transmute(ptr); storage::TextureBufferEXT.is_loaded = true; }, _ => unsafe { storage::TextureBufferEXT.f = transmute(failing::TextureBufferEXT); storage::TextureBufferEXT.is_loaded = false; } }
    match loadfn("TextureBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureBufferRangeEXT.f = transmute(ptr); storage::TextureBufferRangeEXT.is_loaded = true; }, _ => unsafe { storage::TextureBufferRangeEXT.f = transmute(failing::TextureBufferRangeEXT); storage::TextureBufferRangeEXT.is_loaded = false; } }
    match loadfn("TextureColorMaskSGIS") { ptr if !ptr.is_null() => unsafe { storage::TextureColorMaskSGIS.f = transmute(ptr); storage::TextureColorMaskSGIS.is_loaded = true; }, _ => unsafe { storage::TextureColorMaskSGIS.f = transmute(failing::TextureColorMaskSGIS); storage::TextureColorMaskSGIS.is_loaded = false; } }
    match loadfn("TextureImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureImage1DEXT.f = transmute(ptr); storage::TextureImage1DEXT.is_loaded = true; }, _ => unsafe { storage::TextureImage1DEXT.f = transmute(failing::TextureImage1DEXT); storage::TextureImage1DEXT.is_loaded = false; } }
    match loadfn("TextureImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureImage2DEXT.f = transmute(ptr); storage::TextureImage2DEXT.is_loaded = true; }, _ => unsafe { storage::TextureImage2DEXT.f = transmute(failing::TextureImage2DEXT); storage::TextureImage2DEXT.is_loaded = false; } }
    match loadfn("TextureImage2DMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::TextureImage2DMultisampleCoverageNV.f = transmute(ptr); storage::TextureImage2DMultisampleCoverageNV.is_loaded = true; }, _ => unsafe { storage::TextureImage2DMultisampleCoverageNV.f = transmute(failing::TextureImage2DMultisampleCoverageNV); storage::TextureImage2DMultisampleCoverageNV.is_loaded = false; } }
    match loadfn("TextureImage2DMultisampleNV") { ptr if !ptr.is_null() => unsafe { storage::TextureImage2DMultisampleNV.f = transmute(ptr); storage::TextureImage2DMultisampleNV.is_loaded = true; }, _ => unsafe { storage::TextureImage2DMultisampleNV.f = transmute(failing::TextureImage2DMultisampleNV); storage::TextureImage2DMultisampleNV.is_loaded = false; } }
    match loadfn("TextureImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureImage3DEXT.f = transmute(ptr); storage::TextureImage3DEXT.is_loaded = true; }, _ => unsafe { storage::TextureImage3DEXT.f = transmute(failing::TextureImage3DEXT); storage::TextureImage3DEXT.is_loaded = false; } }
    match loadfn("TextureImage3DMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::TextureImage3DMultisampleCoverageNV.f = transmute(ptr); storage::TextureImage3DMultisampleCoverageNV.is_loaded = true; }, _ => unsafe { storage::TextureImage3DMultisampleCoverageNV.f = transmute(failing::TextureImage3DMultisampleCoverageNV); storage::TextureImage3DMultisampleCoverageNV.is_loaded = false; } }
    match loadfn("TextureImage3DMultisampleNV") { ptr if !ptr.is_null() => unsafe { storage::TextureImage3DMultisampleNV.f = transmute(ptr); storage::TextureImage3DMultisampleNV.is_loaded = true; }, _ => unsafe { storage::TextureImage3DMultisampleNV.f = transmute(failing::TextureImage3DMultisampleNV); storage::TextureImage3DMultisampleNV.is_loaded = false; } }
    match loadfn("TextureLightEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureLightEXT.f = transmute(ptr); storage::TextureLightEXT.is_loaded = true; }, _ => unsafe { storage::TextureLightEXT.f = transmute(failing::TextureLightEXT); storage::TextureLightEXT.is_loaded = false; } }
    match loadfn("TextureMaterialEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureMaterialEXT.f = transmute(ptr); storage::TextureMaterialEXT.is_loaded = true; }, _ => unsafe { storage::TextureMaterialEXT.f = transmute(failing::TextureMaterialEXT); storage::TextureMaterialEXT.is_loaded = false; } }
    match loadfn("TextureNormalEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureNormalEXT.f = transmute(ptr); storage::TextureNormalEXT.is_loaded = true; }, _ => unsafe { storage::TextureNormalEXT.f = transmute(failing::TextureNormalEXT); storage::TextureNormalEXT.is_loaded = false; } }
    match loadfn("TexturePageCommitmentEXT") { ptr if !ptr.is_null() => unsafe { storage::TexturePageCommitmentEXT.f = transmute(ptr); storage::TexturePageCommitmentEXT.is_loaded = true; }, _ => unsafe { storage::TexturePageCommitmentEXT.f = transmute(failing::TexturePageCommitmentEXT); storage::TexturePageCommitmentEXT.is_loaded = false; } }
    match loadfn("TextureParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterIivEXT.f = transmute(ptr); storage::TextureParameterIivEXT.is_loaded = true; }, _ => unsafe { storage::TextureParameterIivEXT.f = transmute(failing::TextureParameterIivEXT); storage::TextureParameterIivEXT.is_loaded = false; } }
    match loadfn("TextureParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterIuivEXT.f = transmute(ptr); storage::TextureParameterIuivEXT.is_loaded = true; }, _ => unsafe { storage::TextureParameterIuivEXT.f = transmute(failing::TextureParameterIuivEXT); storage::TextureParameterIuivEXT.is_loaded = false; } }
    match loadfn("TextureParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterfEXT.f = transmute(ptr); storage::TextureParameterfEXT.is_loaded = true; }, _ => unsafe { storage::TextureParameterfEXT.f = transmute(failing::TextureParameterfEXT); storage::TextureParameterfEXT.is_loaded = false; } }
    match loadfn("TextureParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterfvEXT.f = transmute(ptr); storage::TextureParameterfvEXT.is_loaded = true; }, _ => unsafe { storage::TextureParameterfvEXT.f = transmute(failing::TextureParameterfvEXT); storage::TextureParameterfvEXT.is_loaded = false; } }
    match loadfn("TextureParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameteriEXT.f = transmute(ptr); storage::TextureParameteriEXT.is_loaded = true; }, _ => unsafe { storage::TextureParameteriEXT.f = transmute(failing::TextureParameteriEXT); storage::TextureParameteriEXT.is_loaded = false; } }
    match loadfn("TextureParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterivEXT.f = transmute(ptr); storage::TextureParameterivEXT.is_loaded = true; }, _ => unsafe { storage::TextureParameterivEXT.f = transmute(failing::TextureParameterivEXT); storage::TextureParameterivEXT.is_loaded = false; } }
    match loadfn("TextureRangeAPPLE") { ptr if !ptr.is_null() => unsafe { storage::TextureRangeAPPLE.f = transmute(ptr); storage::TextureRangeAPPLE.is_loaded = true; }, _ => unsafe { storage::TextureRangeAPPLE.f = transmute(failing::TextureRangeAPPLE); storage::TextureRangeAPPLE.is_loaded = false; } }
    match loadfn("TextureRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureRenderbufferEXT.f = transmute(ptr); storage::TextureRenderbufferEXT.is_loaded = true; }, _ => unsafe { storage::TextureRenderbufferEXT.f = transmute(failing::TextureRenderbufferEXT); storage::TextureRenderbufferEXT.is_loaded = false; } }
    match loadfn("TextureStorage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage1DEXT.f = transmute(ptr); storage::TextureStorage1DEXT.is_loaded = true; }, _ => unsafe { storage::TextureStorage1DEXT.f = transmute(failing::TextureStorage1DEXT); storage::TextureStorage1DEXT.is_loaded = false; } }
    match loadfn("TextureStorage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage2DEXT.f = transmute(ptr); storage::TextureStorage2DEXT.is_loaded = true; }, _ => unsafe { storage::TextureStorage2DEXT.f = transmute(failing::TextureStorage2DEXT); storage::TextureStorage2DEXT.is_loaded = false; } }
    match loadfn("TextureStorage2DMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage2DMultisampleEXT.f = transmute(ptr); storage::TextureStorage2DMultisampleEXT.is_loaded = true; }, _ => unsafe { storage::TextureStorage2DMultisampleEXT.f = transmute(failing::TextureStorage2DMultisampleEXT); storage::TextureStorage2DMultisampleEXT.is_loaded = false; } }
    match loadfn("TextureStorage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage3DEXT.f = transmute(ptr); storage::TextureStorage3DEXT.is_loaded = true; }, _ => unsafe { storage::TextureStorage3DEXT.f = transmute(failing::TextureStorage3DEXT); storage::TextureStorage3DEXT.is_loaded = false; } }
    match loadfn("TextureStorage3DMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage3DMultisampleEXT.f = transmute(ptr); storage::TextureStorage3DMultisampleEXT.is_loaded = true; }, _ => unsafe { storage::TextureStorage3DMultisampleEXT.f = transmute(failing::TextureStorage3DMultisampleEXT); storage::TextureStorage3DMultisampleEXT.is_loaded = false; } }
    match loadfn("TextureStorageSparseAMD") { ptr if !ptr.is_null() => unsafe { storage::TextureStorageSparseAMD.f = transmute(ptr); storage::TextureStorageSparseAMD.is_loaded = true; }, _ => unsafe { storage::TextureStorageSparseAMD.f = transmute(failing::TextureStorageSparseAMD); storage::TextureStorageSparseAMD.is_loaded = false; } }
    match loadfn("TextureSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureSubImage1DEXT.f = transmute(ptr); storage::TextureSubImage1DEXT.is_loaded = true; }, _ => unsafe { storage::TextureSubImage1DEXT.f = transmute(failing::TextureSubImage1DEXT); storage::TextureSubImage1DEXT.is_loaded = false; } }
    match loadfn("TextureSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureSubImage2DEXT.f = transmute(ptr); storage::TextureSubImage2DEXT.is_loaded = true; }, _ => unsafe { storage::TextureSubImage2DEXT.f = transmute(failing::TextureSubImage2DEXT); storage::TextureSubImage2DEXT.is_loaded = false; } }
    match loadfn("TextureSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureSubImage3DEXT.f = transmute(ptr); storage::TextureSubImage3DEXT.is_loaded = true; }, _ => unsafe { storage::TextureSubImage3DEXT.f = transmute(failing::TextureSubImage3DEXT); storage::TextureSubImage3DEXT.is_loaded = false; } }
    match loadfn("TextureView") { ptr if !ptr.is_null() => unsafe { storage::TextureView.f = transmute(ptr); storage::TextureView.is_loaded = true; }, _ => unsafe { storage::TextureView.f = transmute(failing::TextureView); storage::TextureView.is_loaded = false; } }
    match loadfn("TrackMatrixNV") { ptr if !ptr.is_null() => unsafe { storage::TrackMatrixNV.f = transmute(ptr); storage::TrackMatrixNV.is_loaded = true; }, _ => unsafe { storage::TrackMatrixNV.f = transmute(failing::TrackMatrixNV); storage::TrackMatrixNV.is_loaded = false; } }
    match loadfn("TransformFeedbackAttribsNV") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackAttribsNV.f = transmute(ptr); storage::TransformFeedbackAttribsNV.is_loaded = true; }, _ => unsafe { storage::TransformFeedbackAttribsNV.f = transmute(failing::TransformFeedbackAttribsNV); storage::TransformFeedbackAttribsNV.is_loaded = false; } }
    match loadfn("TransformFeedbackStreamAttribsNV") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackStreamAttribsNV.f = transmute(ptr); storage::TransformFeedbackStreamAttribsNV.is_loaded = true; }, _ => unsafe { storage::TransformFeedbackStreamAttribsNV.f = transmute(failing::TransformFeedbackStreamAttribsNV); storage::TransformFeedbackStreamAttribsNV.is_loaded = false; } }
    match loadfn("TransformFeedbackVaryings") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackVaryings.f = transmute(ptr); storage::TransformFeedbackVaryings.is_loaded = true; }, _ => unsafe { storage::TransformFeedbackVaryings.f = transmute(failing::TransformFeedbackVaryings); storage::TransformFeedbackVaryings.is_loaded = false; } }
    match loadfn("TransformFeedbackVaryingsEXT") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackVaryingsEXT.f = transmute(ptr); storage::TransformFeedbackVaryingsEXT.is_loaded = true; }, _ => unsafe { storage::TransformFeedbackVaryingsEXT.f = transmute(failing::TransformFeedbackVaryingsEXT); storage::TransformFeedbackVaryingsEXT.is_loaded = false; } }
    match loadfn("TransformFeedbackVaryingsNV") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackVaryingsNV.f = transmute(ptr); storage::TransformFeedbackVaryingsNV.is_loaded = true; }, _ => unsafe { storage::TransformFeedbackVaryingsNV.f = transmute(failing::TransformFeedbackVaryingsNV); storage::TransformFeedbackVaryingsNV.is_loaded = false; } }
    match loadfn("TransformPathNV") { ptr if !ptr.is_null() => unsafe { storage::TransformPathNV.f = transmute(ptr); storage::TransformPathNV.is_loaded = true; }, _ => unsafe { storage::TransformPathNV.f = transmute(failing::TransformPathNV); storage::TransformPathNV.is_loaded = false; } }
    match loadfn("Translated") { ptr if !ptr.is_null() => unsafe { storage::Translated.f = transmute(ptr); storage::Translated.is_loaded = true; }, _ => unsafe { storage::Translated.f = transmute(failing::Translated); storage::Translated.is_loaded = false; } }
    match loadfn("Translatef") { ptr if !ptr.is_null() => unsafe { storage::Translatef.f = transmute(ptr); storage::Translatef.is_loaded = true; }, _ => unsafe { storage::Translatef.f = transmute(failing::Translatef); storage::Translatef.is_loaded = false; } }
    match loadfn("Translatex") { ptr if !ptr.is_null() => unsafe { storage::Translatex.f = transmute(ptr); storage::Translatex.is_loaded = true; }, _ => unsafe { storage::Translatex.f = transmute(failing::Translatex); storage::Translatex.is_loaded = false; } }
    match loadfn("TranslatexOES") { ptr if !ptr.is_null() => unsafe { storage::TranslatexOES.f = transmute(ptr); storage::TranslatexOES.is_loaded = true; }, _ => unsafe { storage::TranslatexOES.f = transmute(failing::TranslatexOES); storage::TranslatexOES.is_loaded = false; } }
    match loadfn("Uniform1d") { ptr if !ptr.is_null() => unsafe { storage::Uniform1d.f = transmute(ptr); storage::Uniform1d.is_loaded = true; }, _ => unsafe { storage::Uniform1d.f = transmute(failing::Uniform1d); storage::Uniform1d.is_loaded = false; } }
    match loadfn("Uniform1dv") { ptr if !ptr.is_null() => unsafe { storage::Uniform1dv.f = transmute(ptr); storage::Uniform1dv.is_loaded = true; }, _ => unsafe { storage::Uniform1dv.f = transmute(failing::Uniform1dv); storage::Uniform1dv.is_loaded = false; } }
    match loadfn("Uniform1f") { ptr if !ptr.is_null() => unsafe { storage::Uniform1f.f = transmute(ptr); storage::Uniform1f.is_loaded = true; }, _ => unsafe { storage::Uniform1f.f = transmute(failing::Uniform1f); storage::Uniform1f.is_loaded = false; } }
    match loadfn("Uniform1fARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform1fARB.f = transmute(ptr); storage::Uniform1fARB.is_loaded = true; }, _ => unsafe { storage::Uniform1fARB.f = transmute(failing::Uniform1fARB); storage::Uniform1fARB.is_loaded = false; } }
    match loadfn("Uniform1fv") { ptr if !ptr.is_null() => unsafe { storage::Uniform1fv.f = transmute(ptr); storage::Uniform1fv.is_loaded = true; }, _ => unsafe { storage::Uniform1fv.f = transmute(failing::Uniform1fv); storage::Uniform1fv.is_loaded = false; } }
    match loadfn("Uniform1fvARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform1fvARB.f = transmute(ptr); storage::Uniform1fvARB.is_loaded = true; }, _ => unsafe { storage::Uniform1fvARB.f = transmute(failing::Uniform1fvARB); storage::Uniform1fvARB.is_loaded = false; } }
    match loadfn("Uniform1i") { ptr if !ptr.is_null() => unsafe { storage::Uniform1i.f = transmute(ptr); storage::Uniform1i.is_loaded = true; }, _ => unsafe { storage::Uniform1i.f = transmute(failing::Uniform1i); storage::Uniform1i.is_loaded = false; } }
    match loadfn("Uniform1i64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform1i64NV.f = transmute(ptr); storage::Uniform1i64NV.is_loaded = true; }, _ => unsafe { storage::Uniform1i64NV.f = transmute(failing::Uniform1i64NV); storage::Uniform1i64NV.is_loaded = false; } }
    match loadfn("Uniform1i64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform1i64vNV.f = transmute(ptr); storage::Uniform1i64vNV.is_loaded = true; }, _ => unsafe { storage::Uniform1i64vNV.f = transmute(failing::Uniform1i64vNV); storage::Uniform1i64vNV.is_loaded = false; } }
    match loadfn("Uniform1iARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform1iARB.f = transmute(ptr); storage::Uniform1iARB.is_loaded = true; }, _ => unsafe { storage::Uniform1iARB.f = transmute(failing::Uniform1iARB); storage::Uniform1iARB.is_loaded = false; } }
    match loadfn("Uniform1iv") { ptr if !ptr.is_null() => unsafe { storage::Uniform1iv.f = transmute(ptr); storage::Uniform1iv.is_loaded = true; }, _ => unsafe { storage::Uniform1iv.f = transmute(failing::Uniform1iv); storage::Uniform1iv.is_loaded = false; } }
    match loadfn("Uniform1ivARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform1ivARB.f = transmute(ptr); storage::Uniform1ivARB.is_loaded = true; }, _ => unsafe { storage::Uniform1ivARB.f = transmute(failing::Uniform1ivARB); storage::Uniform1ivARB.is_loaded = false; } }
    match loadfn("Uniform1ui") { ptr if !ptr.is_null() => unsafe { storage::Uniform1ui.f = transmute(ptr); storage::Uniform1ui.is_loaded = true; }, _ => unsafe { storage::Uniform1ui.f = transmute(failing::Uniform1ui); storage::Uniform1ui.is_loaded = false; } }
    match loadfn("Uniform1ui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform1ui64NV.f = transmute(ptr); storage::Uniform1ui64NV.is_loaded = true; }, _ => unsafe { storage::Uniform1ui64NV.f = transmute(failing::Uniform1ui64NV); storage::Uniform1ui64NV.is_loaded = false; } }
    match loadfn("Uniform1ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform1ui64vNV.f = transmute(ptr); storage::Uniform1ui64vNV.is_loaded = true; }, _ => unsafe { storage::Uniform1ui64vNV.f = transmute(failing::Uniform1ui64vNV); storage::Uniform1ui64vNV.is_loaded = false; } }
    match loadfn("Uniform1uiEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform1uiEXT.f = transmute(ptr); storage::Uniform1uiEXT.is_loaded = true; }, _ => unsafe { storage::Uniform1uiEXT.f = transmute(failing::Uniform1uiEXT); storage::Uniform1uiEXT.is_loaded = false; } }
    match loadfn("Uniform1uiv") { ptr if !ptr.is_null() => unsafe { storage::Uniform1uiv.f = transmute(ptr); storage::Uniform1uiv.is_loaded = true; }, _ => unsafe { storage::Uniform1uiv.f = transmute(failing::Uniform1uiv); storage::Uniform1uiv.is_loaded = false; } }
    match loadfn("Uniform1uivEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform1uivEXT.f = transmute(ptr); storage::Uniform1uivEXT.is_loaded = true; }, _ => unsafe { storage::Uniform1uivEXT.f = transmute(failing::Uniform1uivEXT); storage::Uniform1uivEXT.is_loaded = false; } }
    match loadfn("Uniform2d") { ptr if !ptr.is_null() => unsafe { storage::Uniform2d.f = transmute(ptr); storage::Uniform2d.is_loaded = true; }, _ => unsafe { storage::Uniform2d.f = transmute(failing::Uniform2d); storage::Uniform2d.is_loaded = false; } }
    match loadfn("Uniform2dv") { ptr if !ptr.is_null() => unsafe { storage::Uniform2dv.f = transmute(ptr); storage::Uniform2dv.is_loaded = true; }, _ => unsafe { storage::Uniform2dv.f = transmute(failing::Uniform2dv); storage::Uniform2dv.is_loaded = false; } }
    match loadfn("Uniform2f") { ptr if !ptr.is_null() => unsafe { storage::Uniform2f.f = transmute(ptr); storage::Uniform2f.is_loaded = true; }, _ => unsafe { storage::Uniform2f.f = transmute(failing::Uniform2f); storage::Uniform2f.is_loaded = false; } }
    match loadfn("Uniform2fARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform2fARB.f = transmute(ptr); storage::Uniform2fARB.is_loaded = true; }, _ => unsafe { storage::Uniform2fARB.f = transmute(failing::Uniform2fARB); storage::Uniform2fARB.is_loaded = false; } }
    match loadfn("Uniform2fv") { ptr if !ptr.is_null() => unsafe { storage::Uniform2fv.f = transmute(ptr); storage::Uniform2fv.is_loaded = true; }, _ => unsafe { storage::Uniform2fv.f = transmute(failing::Uniform2fv); storage::Uniform2fv.is_loaded = false; } }
    match loadfn("Uniform2fvARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform2fvARB.f = transmute(ptr); storage::Uniform2fvARB.is_loaded = true; }, _ => unsafe { storage::Uniform2fvARB.f = transmute(failing::Uniform2fvARB); storage::Uniform2fvARB.is_loaded = false; } }
    match loadfn("Uniform2i") { ptr if !ptr.is_null() => unsafe { storage::Uniform2i.f = transmute(ptr); storage::Uniform2i.is_loaded = true; }, _ => unsafe { storage::Uniform2i.f = transmute(failing::Uniform2i); storage::Uniform2i.is_loaded = false; } }
    match loadfn("Uniform2i64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform2i64NV.f = transmute(ptr); storage::Uniform2i64NV.is_loaded = true; }, _ => unsafe { storage::Uniform2i64NV.f = transmute(failing::Uniform2i64NV); storage::Uniform2i64NV.is_loaded = false; } }
    match loadfn("Uniform2i64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform2i64vNV.f = transmute(ptr); storage::Uniform2i64vNV.is_loaded = true; }, _ => unsafe { storage::Uniform2i64vNV.f = transmute(failing::Uniform2i64vNV); storage::Uniform2i64vNV.is_loaded = false; } }
    match loadfn("Uniform2iARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform2iARB.f = transmute(ptr); storage::Uniform2iARB.is_loaded = true; }, _ => unsafe { storage::Uniform2iARB.f = transmute(failing::Uniform2iARB); storage::Uniform2iARB.is_loaded = false; } }
    match loadfn("Uniform2iv") { ptr if !ptr.is_null() => unsafe { storage::Uniform2iv.f = transmute(ptr); storage::Uniform2iv.is_loaded = true; }, _ => unsafe { storage::Uniform2iv.f = transmute(failing::Uniform2iv); storage::Uniform2iv.is_loaded = false; } }
    match loadfn("Uniform2ivARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform2ivARB.f = transmute(ptr); storage::Uniform2ivARB.is_loaded = true; }, _ => unsafe { storage::Uniform2ivARB.f = transmute(failing::Uniform2ivARB); storage::Uniform2ivARB.is_loaded = false; } }
    match loadfn("Uniform2ui") { ptr if !ptr.is_null() => unsafe { storage::Uniform2ui.f = transmute(ptr); storage::Uniform2ui.is_loaded = true; }, _ => unsafe { storage::Uniform2ui.f = transmute(failing::Uniform2ui); storage::Uniform2ui.is_loaded = false; } }
    match loadfn("Uniform2ui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform2ui64NV.f = transmute(ptr); storage::Uniform2ui64NV.is_loaded = true; }, _ => unsafe { storage::Uniform2ui64NV.f = transmute(failing::Uniform2ui64NV); storage::Uniform2ui64NV.is_loaded = false; } }
    match loadfn("Uniform2ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform2ui64vNV.f = transmute(ptr); storage::Uniform2ui64vNV.is_loaded = true; }, _ => unsafe { storage::Uniform2ui64vNV.f = transmute(failing::Uniform2ui64vNV); storage::Uniform2ui64vNV.is_loaded = false; } }
    match loadfn("Uniform2uiEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform2uiEXT.f = transmute(ptr); storage::Uniform2uiEXT.is_loaded = true; }, _ => unsafe { storage::Uniform2uiEXT.f = transmute(failing::Uniform2uiEXT); storage::Uniform2uiEXT.is_loaded = false; } }
    match loadfn("Uniform2uiv") { ptr if !ptr.is_null() => unsafe { storage::Uniform2uiv.f = transmute(ptr); storage::Uniform2uiv.is_loaded = true; }, _ => unsafe { storage::Uniform2uiv.f = transmute(failing::Uniform2uiv); storage::Uniform2uiv.is_loaded = false; } }
    match loadfn("Uniform2uivEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform2uivEXT.f = transmute(ptr); storage::Uniform2uivEXT.is_loaded = true; }, _ => unsafe { storage::Uniform2uivEXT.f = transmute(failing::Uniform2uivEXT); storage::Uniform2uivEXT.is_loaded = false; } }
    match loadfn("Uniform3d") { ptr if !ptr.is_null() => unsafe { storage::Uniform3d.f = transmute(ptr); storage::Uniform3d.is_loaded = true; }, _ => unsafe { storage::Uniform3d.f = transmute(failing::Uniform3d); storage::Uniform3d.is_loaded = false; } }
    match loadfn("Uniform3dv") { ptr if !ptr.is_null() => unsafe { storage::Uniform3dv.f = transmute(ptr); storage::Uniform3dv.is_loaded = true; }, _ => unsafe { storage::Uniform3dv.f = transmute(failing::Uniform3dv); storage::Uniform3dv.is_loaded = false; } }
    match loadfn("Uniform3f") { ptr if !ptr.is_null() => unsafe { storage::Uniform3f.f = transmute(ptr); storage::Uniform3f.is_loaded = true; }, _ => unsafe { storage::Uniform3f.f = transmute(failing::Uniform3f); storage::Uniform3f.is_loaded = false; } }
    match loadfn("Uniform3fARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform3fARB.f = transmute(ptr); storage::Uniform3fARB.is_loaded = true; }, _ => unsafe { storage::Uniform3fARB.f = transmute(failing::Uniform3fARB); storage::Uniform3fARB.is_loaded = false; } }
    match loadfn("Uniform3fv") { ptr if !ptr.is_null() => unsafe { storage::Uniform3fv.f = transmute(ptr); storage::Uniform3fv.is_loaded = true; }, _ => unsafe { storage::Uniform3fv.f = transmute(failing::Uniform3fv); storage::Uniform3fv.is_loaded = false; } }
    match loadfn("Uniform3fvARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform3fvARB.f = transmute(ptr); storage::Uniform3fvARB.is_loaded = true; }, _ => unsafe { storage::Uniform3fvARB.f = transmute(failing::Uniform3fvARB); storage::Uniform3fvARB.is_loaded = false; } }
    match loadfn("Uniform3i") { ptr if !ptr.is_null() => unsafe { storage::Uniform3i.f = transmute(ptr); storage::Uniform3i.is_loaded = true; }, _ => unsafe { storage::Uniform3i.f = transmute(failing::Uniform3i); storage::Uniform3i.is_loaded = false; } }
    match loadfn("Uniform3i64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform3i64NV.f = transmute(ptr); storage::Uniform3i64NV.is_loaded = true; }, _ => unsafe { storage::Uniform3i64NV.f = transmute(failing::Uniform3i64NV); storage::Uniform3i64NV.is_loaded = false; } }
    match loadfn("Uniform3i64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform3i64vNV.f = transmute(ptr); storage::Uniform3i64vNV.is_loaded = true; }, _ => unsafe { storage::Uniform3i64vNV.f = transmute(failing::Uniform3i64vNV); storage::Uniform3i64vNV.is_loaded = false; } }
    match loadfn("Uniform3iARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform3iARB.f = transmute(ptr); storage::Uniform3iARB.is_loaded = true; }, _ => unsafe { storage::Uniform3iARB.f = transmute(failing::Uniform3iARB); storage::Uniform3iARB.is_loaded = false; } }
    match loadfn("Uniform3iv") { ptr if !ptr.is_null() => unsafe { storage::Uniform3iv.f = transmute(ptr); storage::Uniform3iv.is_loaded = true; }, _ => unsafe { storage::Uniform3iv.f = transmute(failing::Uniform3iv); storage::Uniform3iv.is_loaded = false; } }
    match loadfn("Uniform3ivARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform3ivARB.f = transmute(ptr); storage::Uniform3ivARB.is_loaded = true; }, _ => unsafe { storage::Uniform3ivARB.f = transmute(failing::Uniform3ivARB); storage::Uniform3ivARB.is_loaded = false; } }
    match loadfn("Uniform3ui") { ptr if !ptr.is_null() => unsafe { storage::Uniform3ui.f = transmute(ptr); storage::Uniform3ui.is_loaded = true; }, _ => unsafe { storage::Uniform3ui.f = transmute(failing::Uniform3ui); storage::Uniform3ui.is_loaded = false; } }
    match loadfn("Uniform3ui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform3ui64NV.f = transmute(ptr); storage::Uniform3ui64NV.is_loaded = true; }, _ => unsafe { storage::Uniform3ui64NV.f = transmute(failing::Uniform3ui64NV); storage::Uniform3ui64NV.is_loaded = false; } }
    match loadfn("Uniform3ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform3ui64vNV.f = transmute(ptr); storage::Uniform3ui64vNV.is_loaded = true; }, _ => unsafe { storage::Uniform3ui64vNV.f = transmute(failing::Uniform3ui64vNV); storage::Uniform3ui64vNV.is_loaded = false; } }
    match loadfn("Uniform3uiEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform3uiEXT.f = transmute(ptr); storage::Uniform3uiEXT.is_loaded = true; }, _ => unsafe { storage::Uniform3uiEXT.f = transmute(failing::Uniform3uiEXT); storage::Uniform3uiEXT.is_loaded = false; } }
    match loadfn("Uniform3uiv") { ptr if !ptr.is_null() => unsafe { storage::Uniform3uiv.f = transmute(ptr); storage::Uniform3uiv.is_loaded = true; }, _ => unsafe { storage::Uniform3uiv.f = transmute(failing::Uniform3uiv); storage::Uniform3uiv.is_loaded = false; } }
    match loadfn("Uniform3uivEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform3uivEXT.f = transmute(ptr); storage::Uniform3uivEXT.is_loaded = true; }, _ => unsafe { storage::Uniform3uivEXT.f = transmute(failing::Uniform3uivEXT); storage::Uniform3uivEXT.is_loaded = false; } }
    match loadfn("Uniform4d") { ptr if !ptr.is_null() => unsafe { storage::Uniform4d.f = transmute(ptr); storage::Uniform4d.is_loaded = true; }, _ => unsafe { storage::Uniform4d.f = transmute(failing::Uniform4d); storage::Uniform4d.is_loaded = false; } }
    match loadfn("Uniform4dv") { ptr if !ptr.is_null() => unsafe { storage::Uniform4dv.f = transmute(ptr); storage::Uniform4dv.is_loaded = true; }, _ => unsafe { storage::Uniform4dv.f = transmute(failing::Uniform4dv); storage::Uniform4dv.is_loaded = false; } }
    match loadfn("Uniform4f") { ptr if !ptr.is_null() => unsafe { storage::Uniform4f.f = transmute(ptr); storage::Uniform4f.is_loaded = true; }, _ => unsafe { storage::Uniform4f.f = transmute(failing::Uniform4f); storage::Uniform4f.is_loaded = false; } }
    match loadfn("Uniform4fARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform4fARB.f = transmute(ptr); storage::Uniform4fARB.is_loaded = true; }, _ => unsafe { storage::Uniform4fARB.f = transmute(failing::Uniform4fARB); storage::Uniform4fARB.is_loaded = false; } }
    match loadfn("Uniform4fv") { ptr if !ptr.is_null() => unsafe { storage::Uniform4fv.f = transmute(ptr); storage::Uniform4fv.is_loaded = true; }, _ => unsafe { storage::Uniform4fv.f = transmute(failing::Uniform4fv); storage::Uniform4fv.is_loaded = false; } }
    match loadfn("Uniform4fvARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform4fvARB.f = transmute(ptr); storage::Uniform4fvARB.is_loaded = true; }, _ => unsafe { storage::Uniform4fvARB.f = transmute(failing::Uniform4fvARB); storage::Uniform4fvARB.is_loaded = false; } }
    match loadfn("Uniform4i") { ptr if !ptr.is_null() => unsafe { storage::Uniform4i.f = transmute(ptr); storage::Uniform4i.is_loaded = true; }, _ => unsafe { storage::Uniform4i.f = transmute(failing::Uniform4i); storage::Uniform4i.is_loaded = false; } }
    match loadfn("Uniform4i64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform4i64NV.f = transmute(ptr); storage::Uniform4i64NV.is_loaded = true; }, _ => unsafe { storage::Uniform4i64NV.f = transmute(failing::Uniform4i64NV); storage::Uniform4i64NV.is_loaded = false; } }
    match loadfn("Uniform4i64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform4i64vNV.f = transmute(ptr); storage::Uniform4i64vNV.is_loaded = true; }, _ => unsafe { storage::Uniform4i64vNV.f = transmute(failing::Uniform4i64vNV); storage::Uniform4i64vNV.is_loaded = false; } }
    match loadfn("Uniform4iARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform4iARB.f = transmute(ptr); storage::Uniform4iARB.is_loaded = true; }, _ => unsafe { storage::Uniform4iARB.f = transmute(failing::Uniform4iARB); storage::Uniform4iARB.is_loaded = false; } }
    match loadfn("Uniform4iv") { ptr if !ptr.is_null() => unsafe { storage::Uniform4iv.f = transmute(ptr); storage::Uniform4iv.is_loaded = true; }, _ => unsafe { storage::Uniform4iv.f = transmute(failing::Uniform4iv); storage::Uniform4iv.is_loaded = false; } }
    match loadfn("Uniform4ivARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform4ivARB.f = transmute(ptr); storage::Uniform4ivARB.is_loaded = true; }, _ => unsafe { storage::Uniform4ivARB.f = transmute(failing::Uniform4ivARB); storage::Uniform4ivARB.is_loaded = false; } }
    match loadfn("Uniform4ui") { ptr if !ptr.is_null() => unsafe { storage::Uniform4ui.f = transmute(ptr); storage::Uniform4ui.is_loaded = true; }, _ => unsafe { storage::Uniform4ui.f = transmute(failing::Uniform4ui); storage::Uniform4ui.is_loaded = false; } }
    match loadfn("Uniform4ui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform4ui64NV.f = transmute(ptr); storage::Uniform4ui64NV.is_loaded = true; }, _ => unsafe { storage::Uniform4ui64NV.f = transmute(failing::Uniform4ui64NV); storage::Uniform4ui64NV.is_loaded = false; } }
    match loadfn("Uniform4ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform4ui64vNV.f = transmute(ptr); storage::Uniform4ui64vNV.is_loaded = true; }, _ => unsafe { storage::Uniform4ui64vNV.f = transmute(failing::Uniform4ui64vNV); storage::Uniform4ui64vNV.is_loaded = false; } }
    match loadfn("Uniform4uiEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform4uiEXT.f = transmute(ptr); storage::Uniform4uiEXT.is_loaded = true; }, _ => unsafe { storage::Uniform4uiEXT.f = transmute(failing::Uniform4uiEXT); storage::Uniform4uiEXT.is_loaded = false; } }
    match loadfn("Uniform4uiv") { ptr if !ptr.is_null() => unsafe { storage::Uniform4uiv.f = transmute(ptr); storage::Uniform4uiv.is_loaded = true; }, _ => unsafe { storage::Uniform4uiv.f = transmute(failing::Uniform4uiv); storage::Uniform4uiv.is_loaded = false; } }
    match loadfn("Uniform4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform4uivEXT.f = transmute(ptr); storage::Uniform4uivEXT.is_loaded = true; }, _ => unsafe { storage::Uniform4uivEXT.f = transmute(failing::Uniform4uivEXT); storage::Uniform4uivEXT.is_loaded = false; } }
    match loadfn("UniformBlockBinding") { ptr if !ptr.is_null() => unsafe { storage::UniformBlockBinding.f = transmute(ptr); storage::UniformBlockBinding.is_loaded = true; }, _ => unsafe { storage::UniformBlockBinding.f = transmute(failing::UniformBlockBinding); storage::UniformBlockBinding.is_loaded = false; } }
    match loadfn("UniformBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::UniformBufferEXT.f = transmute(ptr); storage::UniformBufferEXT.is_loaded = true; }, _ => unsafe { storage::UniformBufferEXT.f = transmute(failing::UniformBufferEXT); storage::UniformBufferEXT.is_loaded = false; } }
    match loadfn("UniformHandleui64ARB") { ptr if !ptr.is_null() => unsafe { storage::UniformHandleui64ARB.f = transmute(ptr); storage::UniformHandleui64ARB.is_loaded = true; }, _ => unsafe { storage::UniformHandleui64ARB.f = transmute(failing::UniformHandleui64ARB); storage::UniformHandleui64ARB.is_loaded = false; } }
    match loadfn("UniformHandleui64NV") { ptr if !ptr.is_null() => unsafe { storage::UniformHandleui64NV.f = transmute(ptr); storage::UniformHandleui64NV.is_loaded = true; }, _ => unsafe { storage::UniformHandleui64NV.f = transmute(failing::UniformHandleui64NV); storage::UniformHandleui64NV.is_loaded = false; } }
    match loadfn("UniformHandleui64vARB") { ptr if !ptr.is_null() => unsafe { storage::UniformHandleui64vARB.f = transmute(ptr); storage::UniformHandleui64vARB.is_loaded = true; }, _ => unsafe { storage::UniformHandleui64vARB.f = transmute(failing::UniformHandleui64vARB); storage::UniformHandleui64vARB.is_loaded = false; } }
    match loadfn("UniformHandleui64vNV") { ptr if !ptr.is_null() => unsafe { storage::UniformHandleui64vNV.f = transmute(ptr); storage::UniformHandleui64vNV.is_loaded = true; }, _ => unsafe { storage::UniformHandleui64vNV.f = transmute(failing::UniformHandleui64vNV); storage::UniformHandleui64vNV.is_loaded = false; } }
    match loadfn("UniformMatrix2dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2dv.f = transmute(ptr); storage::UniformMatrix2dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix2dv.f = transmute(failing::UniformMatrix2dv); storage::UniformMatrix2dv.is_loaded = false; } }
    match loadfn("UniformMatrix2fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2fv.f = transmute(ptr); storage::UniformMatrix2fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix2fv.f = transmute(failing::UniformMatrix2fv); storage::UniformMatrix2fv.is_loaded = false; } }
    match loadfn("UniformMatrix2fvARB") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2fvARB.f = transmute(ptr); storage::UniformMatrix2fvARB.is_loaded = true; }, _ => unsafe { storage::UniformMatrix2fvARB.f = transmute(failing::UniformMatrix2fvARB); storage::UniformMatrix2fvARB.is_loaded = false; } }
    match loadfn("UniformMatrix2x3dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2x3dv.f = transmute(ptr); storage::UniformMatrix2x3dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix2x3dv.f = transmute(failing::UniformMatrix2x3dv); storage::UniformMatrix2x3dv.is_loaded = false; } }
    match loadfn("UniformMatrix2x3fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2x3fv.f = transmute(ptr); storage::UniformMatrix2x3fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix2x3fv.f = transmute(failing::UniformMatrix2x3fv); storage::UniformMatrix2x3fv.is_loaded = false; } }
    match loadfn("UniformMatrix2x4dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2x4dv.f = transmute(ptr); storage::UniformMatrix2x4dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix2x4dv.f = transmute(failing::UniformMatrix2x4dv); storage::UniformMatrix2x4dv.is_loaded = false; } }
    match loadfn("UniformMatrix2x4fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2x4fv.f = transmute(ptr); storage::UniformMatrix2x4fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix2x4fv.f = transmute(failing::UniformMatrix2x4fv); storage::UniformMatrix2x4fv.is_loaded = false; } }
    match loadfn("UniformMatrix3dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3dv.f = transmute(ptr); storage::UniformMatrix3dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix3dv.f = transmute(failing::UniformMatrix3dv); storage::UniformMatrix3dv.is_loaded = false; } }
    match loadfn("UniformMatrix3fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3fv.f = transmute(ptr); storage::UniformMatrix3fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix3fv.f = transmute(failing::UniformMatrix3fv); storage::UniformMatrix3fv.is_loaded = false; } }
    match loadfn("UniformMatrix3fvARB") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3fvARB.f = transmute(ptr); storage::UniformMatrix3fvARB.is_loaded = true; }, _ => unsafe { storage::UniformMatrix3fvARB.f = transmute(failing::UniformMatrix3fvARB); storage::UniformMatrix3fvARB.is_loaded = false; } }
    match loadfn("UniformMatrix3x2dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3x2dv.f = transmute(ptr); storage::UniformMatrix3x2dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix3x2dv.f = transmute(failing::UniformMatrix3x2dv); storage::UniformMatrix3x2dv.is_loaded = false; } }
    match loadfn("UniformMatrix3x2fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3x2fv.f = transmute(ptr); storage::UniformMatrix3x2fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix3x2fv.f = transmute(failing::UniformMatrix3x2fv); storage::UniformMatrix3x2fv.is_loaded = false; } }
    match loadfn("UniformMatrix3x4dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3x4dv.f = transmute(ptr); storage::UniformMatrix3x4dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix3x4dv.f = transmute(failing::UniformMatrix3x4dv); storage::UniformMatrix3x4dv.is_loaded = false; } }
    match loadfn("UniformMatrix3x4fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3x4fv.f = transmute(ptr); storage::UniformMatrix3x4fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix3x4fv.f = transmute(failing::UniformMatrix3x4fv); storage::UniformMatrix3x4fv.is_loaded = false; } }
    match loadfn("UniformMatrix4dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4dv.f = transmute(ptr); storage::UniformMatrix4dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix4dv.f = transmute(failing::UniformMatrix4dv); storage::UniformMatrix4dv.is_loaded = false; } }
    match loadfn("UniformMatrix4fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4fv.f = transmute(ptr); storage::UniformMatrix4fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix4fv.f = transmute(failing::UniformMatrix4fv); storage::UniformMatrix4fv.is_loaded = false; } }
    match loadfn("UniformMatrix4fvARB") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4fvARB.f = transmute(ptr); storage::UniformMatrix4fvARB.is_loaded = true; }, _ => unsafe { storage::UniformMatrix4fvARB.f = transmute(failing::UniformMatrix4fvARB); storage::UniformMatrix4fvARB.is_loaded = false; } }
    match loadfn("UniformMatrix4x2dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4x2dv.f = transmute(ptr); storage::UniformMatrix4x2dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix4x2dv.f = transmute(failing::UniformMatrix4x2dv); storage::UniformMatrix4x2dv.is_loaded = false; } }
    match loadfn("UniformMatrix4x2fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4x2fv.f = transmute(ptr); storage::UniformMatrix4x2fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix4x2fv.f = transmute(failing::UniformMatrix4x2fv); storage::UniformMatrix4x2fv.is_loaded = false; } }
    match loadfn("UniformMatrix4x3dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4x3dv.f = transmute(ptr); storage::UniformMatrix4x3dv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix4x3dv.f = transmute(failing::UniformMatrix4x3dv); storage::UniformMatrix4x3dv.is_loaded = false; } }
    match loadfn("UniformMatrix4x3fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4x3fv.f = transmute(ptr); storage::UniformMatrix4x3fv.is_loaded = true; }, _ => unsafe { storage::UniformMatrix4x3fv.f = transmute(failing::UniformMatrix4x3fv); storage::UniformMatrix4x3fv.is_loaded = false; } }
    match loadfn("UniformSubroutinesuiv") { ptr if !ptr.is_null() => unsafe { storage::UniformSubroutinesuiv.f = transmute(ptr); storage::UniformSubroutinesuiv.is_loaded = true; }, _ => unsafe { storage::UniformSubroutinesuiv.f = transmute(failing::UniformSubroutinesuiv); storage::UniformSubroutinesuiv.is_loaded = false; } }
    match loadfn("Uniformui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniformui64NV.f = transmute(ptr); storage::Uniformui64NV.is_loaded = true; }, _ => unsafe { storage::Uniformui64NV.f = transmute(failing::Uniformui64NV); storage::Uniformui64NV.is_loaded = false; } }
    match loadfn("Uniformui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniformui64vNV.f = transmute(ptr); storage::Uniformui64vNV.is_loaded = true; }, _ => unsafe { storage::Uniformui64vNV.f = transmute(failing::Uniformui64vNV); storage::Uniformui64vNV.is_loaded = false; } }
    match loadfn("UnlockArraysEXT") { ptr if !ptr.is_null() => unsafe { storage::UnlockArraysEXT.f = transmute(ptr); storage::UnlockArraysEXT.is_loaded = true; }, _ => unsafe { storage::UnlockArraysEXT.f = transmute(failing::UnlockArraysEXT); storage::UnlockArraysEXT.is_loaded = false; } }
    match loadfn("UnmapBuffer") { ptr if !ptr.is_null() => unsafe { storage::UnmapBuffer.f = transmute(ptr); storage::UnmapBuffer.is_loaded = true; }, _ => unsafe { storage::UnmapBuffer.f = transmute(failing::UnmapBuffer); storage::UnmapBuffer.is_loaded = false; } }
    match loadfn("UnmapBufferARB") { ptr if !ptr.is_null() => unsafe { storage::UnmapBufferARB.f = transmute(ptr); storage::UnmapBufferARB.is_loaded = true; }, _ => unsafe { storage::UnmapBufferARB.f = transmute(failing::UnmapBufferARB); storage::UnmapBufferARB.is_loaded = false; } }
    match loadfn("UnmapBufferOES") { ptr if !ptr.is_null() => unsafe { storage::UnmapBufferOES.f = transmute(ptr); storage::UnmapBufferOES.is_loaded = true; }, _ => unsafe { storage::UnmapBufferOES.f = transmute(failing::UnmapBufferOES); storage::UnmapBufferOES.is_loaded = false; } }
    match loadfn("UnmapNamedBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::UnmapNamedBufferEXT.f = transmute(ptr); storage::UnmapNamedBufferEXT.is_loaded = true; }, _ => unsafe { storage::UnmapNamedBufferEXT.f = transmute(failing::UnmapNamedBufferEXT); storage::UnmapNamedBufferEXT.is_loaded = false; } }
    match loadfn("UnmapObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::UnmapObjectBufferATI.f = transmute(ptr); storage::UnmapObjectBufferATI.is_loaded = true; }, _ => unsafe { storage::UnmapObjectBufferATI.f = transmute(failing::UnmapObjectBufferATI); storage::UnmapObjectBufferATI.is_loaded = false; } }
    match loadfn("UnmapTexture2DINTEL") { ptr if !ptr.is_null() => unsafe { storage::UnmapTexture2DINTEL.f = transmute(ptr); storage::UnmapTexture2DINTEL.is_loaded = true; }, _ => unsafe { storage::UnmapTexture2DINTEL.f = transmute(failing::UnmapTexture2DINTEL); storage::UnmapTexture2DINTEL.is_loaded = false; } }
    match loadfn("UpdateObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::UpdateObjectBufferATI.f = transmute(ptr); storage::UpdateObjectBufferATI.is_loaded = true; }, _ => unsafe { storage::UpdateObjectBufferATI.f = transmute(failing::UpdateObjectBufferATI); storage::UpdateObjectBufferATI.is_loaded = false; } }
    match loadfn("UseProgram") { ptr if !ptr.is_null() => unsafe { storage::UseProgram.f = transmute(ptr); storage::UseProgram.is_loaded = true; }, _ => unsafe { storage::UseProgram.f = transmute(failing::UseProgram); storage::UseProgram.is_loaded = false; } }
    match loadfn("UseProgramObjectARB") { ptr if !ptr.is_null() => unsafe { storage::UseProgramObjectARB.f = transmute(ptr); storage::UseProgramObjectARB.is_loaded = true; }, _ => unsafe { storage::UseProgramObjectARB.f = transmute(failing::UseProgramObjectARB); storage::UseProgramObjectARB.is_loaded = false; } }
    match loadfn("UseProgramStages") { ptr if !ptr.is_null() => unsafe { storage::UseProgramStages.f = transmute(ptr); storage::UseProgramStages.is_loaded = true; }, _ => unsafe { storage::UseProgramStages.f = transmute(failing::UseProgramStages); storage::UseProgramStages.is_loaded = false; } }
    match loadfn("UseProgramStagesEXT") { ptr if !ptr.is_null() => unsafe { storage::UseProgramStagesEXT.f = transmute(ptr); storage::UseProgramStagesEXT.is_loaded = true; }, _ => unsafe { storage::UseProgramStagesEXT.f = transmute(failing::UseProgramStagesEXT); storage::UseProgramStagesEXT.is_loaded = false; } }
    match loadfn("UseShaderProgramEXT") { ptr if !ptr.is_null() => unsafe { storage::UseShaderProgramEXT.f = transmute(ptr); storage::UseShaderProgramEXT.is_loaded = true; }, _ => unsafe { storage::UseShaderProgramEXT.f = transmute(failing::UseShaderProgramEXT); storage::UseShaderProgramEXT.is_loaded = false; } }
    match loadfn("VDPAUFiniNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUFiniNV.f = transmute(ptr); storage::VDPAUFiniNV.is_loaded = true; }, _ => unsafe { storage::VDPAUFiniNV.f = transmute(failing::VDPAUFiniNV); storage::VDPAUFiniNV.is_loaded = false; } }
    match loadfn("VDPAUGetSurfaceivNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUGetSurfaceivNV.f = transmute(ptr); storage::VDPAUGetSurfaceivNV.is_loaded = true; }, _ => unsafe { storage::VDPAUGetSurfaceivNV.f = transmute(failing::VDPAUGetSurfaceivNV); storage::VDPAUGetSurfaceivNV.is_loaded = false; } }
    match loadfn("VDPAUInitNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUInitNV.f = transmute(ptr); storage::VDPAUInitNV.is_loaded = true; }, _ => unsafe { storage::VDPAUInitNV.f = transmute(failing::VDPAUInitNV); storage::VDPAUInitNV.is_loaded = false; } }
    match loadfn("VDPAUIsSurfaceNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUIsSurfaceNV.f = transmute(ptr); storage::VDPAUIsSurfaceNV.is_loaded = true; }, _ => unsafe { storage::VDPAUIsSurfaceNV.f = transmute(failing::VDPAUIsSurfaceNV); storage::VDPAUIsSurfaceNV.is_loaded = false; } }
    match loadfn("VDPAUMapSurfacesNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUMapSurfacesNV.f = transmute(ptr); storage::VDPAUMapSurfacesNV.is_loaded = true; }, _ => unsafe { storage::VDPAUMapSurfacesNV.f = transmute(failing::VDPAUMapSurfacesNV); storage::VDPAUMapSurfacesNV.is_loaded = false; } }
    match loadfn("VDPAURegisterOutputSurfaceNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAURegisterOutputSurfaceNV.f = transmute(ptr); storage::VDPAURegisterOutputSurfaceNV.is_loaded = true; }, _ => unsafe { storage::VDPAURegisterOutputSurfaceNV.f = transmute(failing::VDPAURegisterOutputSurfaceNV); storage::VDPAURegisterOutputSurfaceNV.is_loaded = false; } }
    match loadfn("VDPAURegisterVideoSurfaceNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAURegisterVideoSurfaceNV.f = transmute(ptr); storage::VDPAURegisterVideoSurfaceNV.is_loaded = true; }, _ => unsafe { storage::VDPAURegisterVideoSurfaceNV.f = transmute(failing::VDPAURegisterVideoSurfaceNV); storage::VDPAURegisterVideoSurfaceNV.is_loaded = false; } }
    match loadfn("VDPAUSurfaceAccessNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUSurfaceAccessNV.f = transmute(ptr); storage::VDPAUSurfaceAccessNV.is_loaded = true; }, _ => unsafe { storage::VDPAUSurfaceAccessNV.f = transmute(failing::VDPAUSurfaceAccessNV); storage::VDPAUSurfaceAccessNV.is_loaded = false; } }
    match loadfn("VDPAUUnmapSurfacesNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUUnmapSurfacesNV.f = transmute(ptr); storage::VDPAUUnmapSurfacesNV.is_loaded = true; }, _ => unsafe { storage::VDPAUUnmapSurfacesNV.f = transmute(failing::VDPAUUnmapSurfacesNV); storage::VDPAUUnmapSurfacesNV.is_loaded = false; } }
    match loadfn("VDPAUUnregisterSurfaceNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUUnregisterSurfaceNV.f = transmute(ptr); storage::VDPAUUnregisterSurfaceNV.is_loaded = true; }, _ => unsafe { storage::VDPAUUnregisterSurfaceNV.f = transmute(failing::VDPAUUnregisterSurfaceNV); storage::VDPAUUnregisterSurfaceNV.is_loaded = false; } }
    match loadfn("ValidateProgram") { ptr if !ptr.is_null() => unsafe { storage::ValidateProgram.f = transmute(ptr); storage::ValidateProgram.is_loaded = true; }, _ => unsafe { storage::ValidateProgram.f = transmute(failing::ValidateProgram); storage::ValidateProgram.is_loaded = false; } }
    match loadfn("ValidateProgramARB") { ptr if !ptr.is_null() => unsafe { storage::ValidateProgramARB.f = transmute(ptr); storage::ValidateProgramARB.is_loaded = true; }, _ => unsafe { storage::ValidateProgramARB.f = transmute(failing::ValidateProgramARB); storage::ValidateProgramARB.is_loaded = false; } }
    match loadfn("ValidateProgramPipeline") { ptr if !ptr.is_null() => unsafe { storage::ValidateProgramPipeline.f = transmute(ptr); storage::ValidateProgramPipeline.is_loaded = true; }, _ => unsafe { storage::ValidateProgramPipeline.f = transmute(failing::ValidateProgramPipeline); storage::ValidateProgramPipeline.is_loaded = false; } }
    match loadfn("ValidateProgramPipelineEXT") { ptr if !ptr.is_null() => unsafe { storage::ValidateProgramPipelineEXT.f = transmute(ptr); storage::ValidateProgramPipelineEXT.is_loaded = true; }, _ => unsafe { storage::ValidateProgramPipelineEXT.f = transmute(failing::ValidateProgramPipelineEXT); storage::ValidateProgramPipelineEXT.is_loaded = false; } }
    match loadfn("VariantArrayObjectATI") { ptr if !ptr.is_null() => unsafe { storage::VariantArrayObjectATI.f = transmute(ptr); storage::VariantArrayObjectATI.is_loaded = true; }, _ => unsafe { storage::VariantArrayObjectATI.f = transmute(failing::VariantArrayObjectATI); storage::VariantArrayObjectATI.is_loaded = false; } }
    match loadfn("VariantPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantPointerEXT.f = transmute(ptr); storage::VariantPointerEXT.is_loaded = true; }, _ => unsafe { storage::VariantPointerEXT.f = transmute(failing::VariantPointerEXT); storage::VariantPointerEXT.is_loaded = false; } }
    match loadfn("VariantbvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantbvEXT.f = transmute(ptr); storage::VariantbvEXT.is_loaded = true; }, _ => unsafe { storage::VariantbvEXT.f = transmute(failing::VariantbvEXT); storage::VariantbvEXT.is_loaded = false; } }
    match loadfn("VariantdvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantdvEXT.f = transmute(ptr); storage::VariantdvEXT.is_loaded = true; }, _ => unsafe { storage::VariantdvEXT.f = transmute(failing::VariantdvEXT); storage::VariantdvEXT.is_loaded = false; } }
    match loadfn("VariantfvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantfvEXT.f = transmute(ptr); storage::VariantfvEXT.is_loaded = true; }, _ => unsafe { storage::VariantfvEXT.f = transmute(failing::VariantfvEXT); storage::VariantfvEXT.is_loaded = false; } }
    match loadfn("VariantivEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantivEXT.f = transmute(ptr); storage::VariantivEXT.is_loaded = true; }, _ => unsafe { storage::VariantivEXT.f = transmute(failing::VariantivEXT); storage::VariantivEXT.is_loaded = false; } }
    match loadfn("VariantsvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantsvEXT.f = transmute(ptr); storage::VariantsvEXT.is_loaded = true; }, _ => unsafe { storage::VariantsvEXT.f = transmute(failing::VariantsvEXT); storage::VariantsvEXT.is_loaded = false; } }
    match loadfn("VariantubvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantubvEXT.f = transmute(ptr); storage::VariantubvEXT.is_loaded = true; }, _ => unsafe { storage::VariantubvEXT.f = transmute(failing::VariantubvEXT); storage::VariantubvEXT.is_loaded = false; } }
    match loadfn("VariantuivEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantuivEXT.f = transmute(ptr); storage::VariantuivEXT.is_loaded = true; }, _ => unsafe { storage::VariantuivEXT.f = transmute(failing::VariantuivEXT); storage::VariantuivEXT.is_loaded = false; } }
    match loadfn("VariantusvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantusvEXT.f = transmute(ptr); storage::VariantusvEXT.is_loaded = true; }, _ => unsafe { storage::VariantusvEXT.f = transmute(failing::VariantusvEXT); storage::VariantusvEXT.is_loaded = false; } }
    match loadfn("Vertex2bOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex2bOES.f = transmute(ptr); storage::Vertex2bOES.is_loaded = true; }, _ => unsafe { storage::Vertex2bOES.f = transmute(failing::Vertex2bOES); storage::Vertex2bOES.is_loaded = false; } }
    match loadfn("Vertex2bvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex2bvOES.f = transmute(ptr); storage::Vertex2bvOES.is_loaded = true; }, _ => unsafe { storage::Vertex2bvOES.f = transmute(failing::Vertex2bvOES); storage::Vertex2bvOES.is_loaded = false; } }
    match loadfn("Vertex2d") { ptr if !ptr.is_null() => unsafe { storage::Vertex2d.f = transmute(ptr); storage::Vertex2d.is_loaded = true; }, _ => unsafe { storage::Vertex2d.f = transmute(failing::Vertex2d); storage::Vertex2d.is_loaded = false; } }
    match loadfn("Vertex2dv") { ptr if !ptr.is_null() => unsafe { storage::Vertex2dv.f = transmute(ptr); storage::Vertex2dv.is_loaded = true; }, _ => unsafe { storage::Vertex2dv.f = transmute(failing::Vertex2dv); storage::Vertex2dv.is_loaded = false; } }
    match loadfn("Vertex2f") { ptr if !ptr.is_null() => unsafe { storage::Vertex2f.f = transmute(ptr); storage::Vertex2f.is_loaded = true; }, _ => unsafe { storage::Vertex2f.f = transmute(failing::Vertex2f); storage::Vertex2f.is_loaded = false; } }
    match loadfn("Vertex2fv") { ptr if !ptr.is_null() => unsafe { storage::Vertex2fv.f = transmute(ptr); storage::Vertex2fv.is_loaded = true; }, _ => unsafe { storage::Vertex2fv.f = transmute(failing::Vertex2fv); storage::Vertex2fv.is_loaded = false; } }
    match loadfn("Vertex2hNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex2hNV.f = transmute(ptr); storage::Vertex2hNV.is_loaded = true; }, _ => unsafe { storage::Vertex2hNV.f = transmute(failing::Vertex2hNV); storage::Vertex2hNV.is_loaded = false; } }
    match loadfn("Vertex2hvNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex2hvNV.f = transmute(ptr); storage::Vertex2hvNV.is_loaded = true; }, _ => unsafe { storage::Vertex2hvNV.f = transmute(failing::Vertex2hvNV); storage::Vertex2hvNV.is_loaded = false; } }
    match loadfn("Vertex2i") { ptr if !ptr.is_null() => unsafe { storage::Vertex2i.f = transmute(ptr); storage::Vertex2i.is_loaded = true; }, _ => unsafe { storage::Vertex2i.f = transmute(failing::Vertex2i); storage::Vertex2i.is_loaded = false; } }
    match loadfn("Vertex2iv") { ptr if !ptr.is_null() => unsafe { storage::Vertex2iv.f = transmute(ptr); storage::Vertex2iv.is_loaded = true; }, _ => unsafe { storage::Vertex2iv.f = transmute(failing::Vertex2iv); storage::Vertex2iv.is_loaded = false; } }
    match loadfn("Vertex2s") { ptr if !ptr.is_null() => unsafe { storage::Vertex2s.f = transmute(ptr); storage::Vertex2s.is_loaded = true; }, _ => unsafe { storage::Vertex2s.f = transmute(failing::Vertex2s); storage::Vertex2s.is_loaded = false; } }
    match loadfn("Vertex2sv") { ptr if !ptr.is_null() => unsafe { storage::Vertex2sv.f = transmute(ptr); storage::Vertex2sv.is_loaded = true; }, _ => unsafe { storage::Vertex2sv.f = transmute(failing::Vertex2sv); storage::Vertex2sv.is_loaded = false; } }
    match loadfn("Vertex2xOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex2xOES.f = transmute(ptr); storage::Vertex2xOES.is_loaded = true; }, _ => unsafe { storage::Vertex2xOES.f = transmute(failing::Vertex2xOES); storage::Vertex2xOES.is_loaded = false; } }
    match loadfn("Vertex2xvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex2xvOES.f = transmute(ptr); storage::Vertex2xvOES.is_loaded = true; }, _ => unsafe { storage::Vertex2xvOES.f = transmute(failing::Vertex2xvOES); storage::Vertex2xvOES.is_loaded = false; } }
    match loadfn("Vertex3bOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex3bOES.f = transmute(ptr); storage::Vertex3bOES.is_loaded = true; }, _ => unsafe { storage::Vertex3bOES.f = transmute(failing::Vertex3bOES); storage::Vertex3bOES.is_loaded = false; } }
    match loadfn("Vertex3bvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex3bvOES.f = transmute(ptr); storage::Vertex3bvOES.is_loaded = true; }, _ => unsafe { storage::Vertex3bvOES.f = transmute(failing::Vertex3bvOES); storage::Vertex3bvOES.is_loaded = false; } }
    match loadfn("Vertex3d") { ptr if !ptr.is_null() => unsafe { storage::Vertex3d.f = transmute(ptr); storage::Vertex3d.is_loaded = true; }, _ => unsafe { storage::Vertex3d.f = transmute(failing::Vertex3d); storage::Vertex3d.is_loaded = false; } }
    match loadfn("Vertex3dv") { ptr if !ptr.is_null() => unsafe { storage::Vertex3dv.f = transmute(ptr); storage::Vertex3dv.is_loaded = true; }, _ => unsafe { storage::Vertex3dv.f = transmute(failing::Vertex3dv); storage::Vertex3dv.is_loaded = false; } }
    match loadfn("Vertex3f") { ptr if !ptr.is_null() => unsafe { storage::Vertex3f.f = transmute(ptr); storage::Vertex3f.is_loaded = true; }, _ => unsafe { storage::Vertex3f.f = transmute(failing::Vertex3f); storage::Vertex3f.is_loaded = false; } }
    match loadfn("Vertex3fv") { ptr if !ptr.is_null() => unsafe { storage::Vertex3fv.f = transmute(ptr); storage::Vertex3fv.is_loaded = true; }, _ => unsafe { storage::Vertex3fv.f = transmute(failing::Vertex3fv); storage::Vertex3fv.is_loaded = false; } }
    match loadfn("Vertex3hNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex3hNV.f = transmute(ptr); storage::Vertex3hNV.is_loaded = true; }, _ => unsafe { storage::Vertex3hNV.f = transmute(failing::Vertex3hNV); storage::Vertex3hNV.is_loaded = false; } }
    match loadfn("Vertex3hvNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex3hvNV.f = transmute(ptr); storage::Vertex3hvNV.is_loaded = true; }, _ => unsafe { storage::Vertex3hvNV.f = transmute(failing::Vertex3hvNV); storage::Vertex3hvNV.is_loaded = false; } }
    match loadfn("Vertex3i") { ptr if !ptr.is_null() => unsafe { storage::Vertex3i.f = transmute(ptr); storage::Vertex3i.is_loaded = true; }, _ => unsafe { storage::Vertex3i.f = transmute(failing::Vertex3i); storage::Vertex3i.is_loaded = false; } }
    match loadfn("Vertex3iv") { ptr if !ptr.is_null() => unsafe { storage::Vertex3iv.f = transmute(ptr); storage::Vertex3iv.is_loaded = true; }, _ => unsafe { storage::Vertex3iv.f = transmute(failing::Vertex3iv); storage::Vertex3iv.is_loaded = false; } }
    match loadfn("Vertex3s") { ptr if !ptr.is_null() => unsafe { storage::Vertex3s.f = transmute(ptr); storage::Vertex3s.is_loaded = true; }, _ => unsafe { storage::Vertex3s.f = transmute(failing::Vertex3s); storage::Vertex3s.is_loaded = false; } }
    match loadfn("Vertex3sv") { ptr if !ptr.is_null() => unsafe { storage::Vertex3sv.f = transmute(ptr); storage::Vertex3sv.is_loaded = true; }, _ => unsafe { storage::Vertex3sv.f = transmute(failing::Vertex3sv); storage::Vertex3sv.is_loaded = false; } }
    match loadfn("Vertex3xOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex3xOES.f = transmute(ptr); storage::Vertex3xOES.is_loaded = true; }, _ => unsafe { storage::Vertex3xOES.f = transmute(failing::Vertex3xOES); storage::Vertex3xOES.is_loaded = false; } }
    match loadfn("Vertex3xvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex3xvOES.f = transmute(ptr); storage::Vertex3xvOES.is_loaded = true; }, _ => unsafe { storage::Vertex3xvOES.f = transmute(failing::Vertex3xvOES); storage::Vertex3xvOES.is_loaded = false; } }
    match loadfn("Vertex4bOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex4bOES.f = transmute(ptr); storage::Vertex4bOES.is_loaded = true; }, _ => unsafe { storage::Vertex4bOES.f = transmute(failing::Vertex4bOES); storage::Vertex4bOES.is_loaded = false; } }
    match loadfn("Vertex4bvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex4bvOES.f = transmute(ptr); storage::Vertex4bvOES.is_loaded = true; }, _ => unsafe { storage::Vertex4bvOES.f = transmute(failing::Vertex4bvOES); storage::Vertex4bvOES.is_loaded = false; } }
    match loadfn("Vertex4d") { ptr if !ptr.is_null() => unsafe { storage::Vertex4d.f = transmute(ptr); storage::Vertex4d.is_loaded = true; }, _ => unsafe { storage::Vertex4d.f = transmute(failing::Vertex4d); storage::Vertex4d.is_loaded = false; } }
    match loadfn("Vertex4dv") { ptr if !ptr.is_null() => unsafe { storage::Vertex4dv.f = transmute(ptr); storage::Vertex4dv.is_loaded = true; }, _ => unsafe { storage::Vertex4dv.f = transmute(failing::Vertex4dv); storage::Vertex4dv.is_loaded = false; } }
    match loadfn("Vertex4f") { ptr if !ptr.is_null() => unsafe { storage::Vertex4f.f = transmute(ptr); storage::Vertex4f.is_loaded = true; }, _ => unsafe { storage::Vertex4f.f = transmute(failing::Vertex4f); storage::Vertex4f.is_loaded = false; } }
    match loadfn("Vertex4fv") { ptr if !ptr.is_null() => unsafe { storage::Vertex4fv.f = transmute(ptr); storage::Vertex4fv.is_loaded = true; }, _ => unsafe { storage::Vertex4fv.f = transmute(failing::Vertex4fv); storage::Vertex4fv.is_loaded = false; } }
    match loadfn("Vertex4hNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex4hNV.f = transmute(ptr); storage::Vertex4hNV.is_loaded = true; }, _ => unsafe { storage::Vertex4hNV.f = transmute(failing::Vertex4hNV); storage::Vertex4hNV.is_loaded = false; } }
    match loadfn("Vertex4hvNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex4hvNV.f = transmute(ptr); storage::Vertex4hvNV.is_loaded = true; }, _ => unsafe { storage::Vertex4hvNV.f = transmute(failing::Vertex4hvNV); storage::Vertex4hvNV.is_loaded = false; } }
    match loadfn("Vertex4i") { ptr if !ptr.is_null() => unsafe { storage::Vertex4i.f = transmute(ptr); storage::Vertex4i.is_loaded = true; }, _ => unsafe { storage::Vertex4i.f = transmute(failing::Vertex4i); storage::Vertex4i.is_loaded = false; } }
    match loadfn("Vertex4iv") { ptr if !ptr.is_null() => unsafe { storage::Vertex4iv.f = transmute(ptr); storage::Vertex4iv.is_loaded = true; }, _ => unsafe { storage::Vertex4iv.f = transmute(failing::Vertex4iv); storage::Vertex4iv.is_loaded = false; } }
    match loadfn("Vertex4s") { ptr if !ptr.is_null() => unsafe { storage::Vertex4s.f = transmute(ptr); storage::Vertex4s.is_loaded = true; }, _ => unsafe { storage::Vertex4s.f = transmute(failing::Vertex4s); storage::Vertex4s.is_loaded = false; } }
    match loadfn("Vertex4sv") { ptr if !ptr.is_null() => unsafe { storage::Vertex4sv.f = transmute(ptr); storage::Vertex4sv.is_loaded = true; }, _ => unsafe { storage::Vertex4sv.f = transmute(failing::Vertex4sv); storage::Vertex4sv.is_loaded = false; } }
    match loadfn("Vertex4xOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex4xOES.f = transmute(ptr); storage::Vertex4xOES.is_loaded = true; }, _ => unsafe { storage::Vertex4xOES.f = transmute(failing::Vertex4xOES); storage::Vertex4xOES.is_loaded = false; } }
    match loadfn("Vertex4xvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex4xvOES.f = transmute(ptr); storage::Vertex4xvOES.is_loaded = true; }, _ => unsafe { storage::Vertex4xvOES.f = transmute(failing::Vertex4xvOES); storage::Vertex4xvOES.is_loaded = false; } }
    match loadfn("VertexArrayBindVertexBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayBindVertexBufferEXT.f = transmute(ptr); storage::VertexArrayBindVertexBufferEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayBindVertexBufferEXT.f = transmute(failing::VertexArrayBindVertexBufferEXT); storage::VertexArrayBindVertexBufferEXT.is_loaded = false; } }
    match loadfn("VertexArrayColorOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayColorOffsetEXT.f = transmute(ptr); storage::VertexArrayColorOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayColorOffsetEXT.f = transmute(failing::VertexArrayColorOffsetEXT); storage::VertexArrayColorOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayEdgeFlagOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayEdgeFlagOffsetEXT.f = transmute(ptr); storage::VertexArrayEdgeFlagOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayEdgeFlagOffsetEXT.f = transmute(failing::VertexArrayEdgeFlagOffsetEXT); storage::VertexArrayEdgeFlagOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayFogCoordOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayFogCoordOffsetEXT.f = transmute(ptr); storage::VertexArrayFogCoordOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayFogCoordOffsetEXT.f = transmute(failing::VertexArrayFogCoordOffsetEXT); storage::VertexArrayFogCoordOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayIndexOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayIndexOffsetEXT.f = transmute(ptr); storage::VertexArrayIndexOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayIndexOffsetEXT.f = transmute(failing::VertexArrayIndexOffsetEXT); storage::VertexArrayIndexOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayMultiTexCoordOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayMultiTexCoordOffsetEXT.f = transmute(ptr); storage::VertexArrayMultiTexCoordOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayMultiTexCoordOffsetEXT.f = transmute(failing::VertexArrayMultiTexCoordOffsetEXT); storage::VertexArrayMultiTexCoordOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayNormalOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayNormalOffsetEXT.f = transmute(ptr); storage::VertexArrayNormalOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayNormalOffsetEXT.f = transmute(failing::VertexArrayNormalOffsetEXT); storage::VertexArrayNormalOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayParameteriAPPLE") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayParameteriAPPLE.f = transmute(ptr); storage::VertexArrayParameteriAPPLE.is_loaded = true; }, _ => unsafe { storage::VertexArrayParameteriAPPLE.f = transmute(failing::VertexArrayParameteriAPPLE); storage::VertexArrayParameteriAPPLE.is_loaded = false; } }
    match loadfn("VertexArrayRangeAPPLE") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayRangeAPPLE.f = transmute(ptr); storage::VertexArrayRangeAPPLE.is_loaded = true; }, _ => unsafe { storage::VertexArrayRangeAPPLE.f = transmute(failing::VertexArrayRangeAPPLE); storage::VertexArrayRangeAPPLE.is_loaded = false; } }
    match loadfn("VertexArrayRangeNV") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayRangeNV.f = transmute(ptr); storage::VertexArrayRangeNV.is_loaded = true; }, _ => unsafe { storage::VertexArrayRangeNV.f = transmute(failing::VertexArrayRangeNV); storage::VertexArrayRangeNV.is_loaded = false; } }
    match loadfn("VertexArraySecondaryColorOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArraySecondaryColorOffsetEXT.f = transmute(ptr); storage::VertexArraySecondaryColorOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArraySecondaryColorOffsetEXT.f = transmute(failing::VertexArraySecondaryColorOffsetEXT); storage::VertexArraySecondaryColorOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayTexCoordOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayTexCoordOffsetEXT.f = transmute(ptr); storage::VertexArrayTexCoordOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayTexCoordOffsetEXT.f = transmute(failing::VertexArrayTexCoordOffsetEXT); storage::VertexArrayTexCoordOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribBindingEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribBindingEXT.f = transmute(ptr); storage::VertexArrayVertexAttribBindingEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexAttribBindingEXT.f = transmute(failing::VertexArrayVertexAttribBindingEXT); storage::VertexArrayVertexAttribBindingEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribFormatEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribFormatEXT.f = transmute(ptr); storage::VertexArrayVertexAttribFormatEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexAttribFormatEXT.f = transmute(failing::VertexArrayVertexAttribFormatEXT); storage::VertexArrayVertexAttribFormatEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribIFormatEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribIFormatEXT.f = transmute(ptr); storage::VertexArrayVertexAttribIFormatEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexAttribIFormatEXT.f = transmute(failing::VertexArrayVertexAttribIFormatEXT); storage::VertexArrayVertexAttribIFormatEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribIOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribIOffsetEXT.f = transmute(ptr); storage::VertexArrayVertexAttribIOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexAttribIOffsetEXT.f = transmute(failing::VertexArrayVertexAttribIOffsetEXT); storage::VertexArrayVertexAttribIOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribLFormatEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribLFormatEXT.f = transmute(ptr); storage::VertexArrayVertexAttribLFormatEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexAttribLFormatEXT.f = transmute(failing::VertexArrayVertexAttribLFormatEXT); storage::VertexArrayVertexAttribLFormatEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribLOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribLOffsetEXT.f = transmute(ptr); storage::VertexArrayVertexAttribLOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexAttribLOffsetEXT.f = transmute(failing::VertexArrayVertexAttribLOffsetEXT); storage::VertexArrayVertexAttribLOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribOffsetEXT.f = transmute(ptr); storage::VertexArrayVertexAttribOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexAttribOffsetEXT.f = transmute(failing::VertexArrayVertexAttribOffsetEXT); storage::VertexArrayVertexAttribOffsetEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexBindingDivisorEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexBindingDivisorEXT.f = transmute(ptr); storage::VertexArrayVertexBindingDivisorEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexBindingDivisorEXT.f = transmute(failing::VertexArrayVertexBindingDivisorEXT); storage::VertexArrayVertexBindingDivisorEXT.is_loaded = false; } }
    match loadfn("VertexArrayVertexOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexOffsetEXT.f = transmute(ptr); storage::VertexArrayVertexOffsetEXT.is_loaded = true; }, _ => unsafe { storage::VertexArrayVertexOffsetEXT.f = transmute(failing::VertexArrayVertexOffsetEXT); storage::VertexArrayVertexOffsetEXT.is_loaded = false; } }
    match loadfn("VertexAttrib1d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1d.f = transmute(ptr); storage::VertexAttrib1d.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1d.f = transmute(failing::VertexAttrib1d); storage::VertexAttrib1d.is_loaded = false; } }
    match loadfn("VertexAttrib1dARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dARB.f = transmute(ptr); storage::VertexAttrib1dARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1dARB.f = transmute(failing::VertexAttrib1dARB); storage::VertexAttrib1dARB.is_loaded = false; } }
    match loadfn("VertexAttrib1dNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dNV.f = transmute(ptr); storage::VertexAttrib1dNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1dNV.f = transmute(failing::VertexAttrib1dNV); storage::VertexAttrib1dNV.is_loaded = false; } }
    match loadfn("VertexAttrib1dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dv.f = transmute(ptr); storage::VertexAttrib1dv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1dv.f = transmute(failing::VertexAttrib1dv); storage::VertexAttrib1dv.is_loaded = false; } }
    match loadfn("VertexAttrib1dvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dvARB.f = transmute(ptr); storage::VertexAttrib1dvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1dvARB.f = transmute(failing::VertexAttrib1dvARB); storage::VertexAttrib1dvARB.is_loaded = false; } }
    match loadfn("VertexAttrib1dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dvNV.f = transmute(ptr); storage::VertexAttrib1dvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1dvNV.f = transmute(failing::VertexAttrib1dvNV); storage::VertexAttrib1dvNV.is_loaded = false; } }
    match loadfn("VertexAttrib1f") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1f.f = transmute(ptr); storage::VertexAttrib1f.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1f.f = transmute(failing::VertexAttrib1f); storage::VertexAttrib1f.is_loaded = false; } }
    match loadfn("VertexAttrib1fARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fARB.f = transmute(ptr); storage::VertexAttrib1fARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1fARB.f = transmute(failing::VertexAttrib1fARB); storage::VertexAttrib1fARB.is_loaded = false; } }
    match loadfn("VertexAttrib1fNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fNV.f = transmute(ptr); storage::VertexAttrib1fNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1fNV.f = transmute(failing::VertexAttrib1fNV); storage::VertexAttrib1fNV.is_loaded = false; } }
    match loadfn("VertexAttrib1fv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fv.f = transmute(ptr); storage::VertexAttrib1fv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1fv.f = transmute(failing::VertexAttrib1fv); storage::VertexAttrib1fv.is_loaded = false; } }
    match loadfn("VertexAttrib1fvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fvARB.f = transmute(ptr); storage::VertexAttrib1fvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1fvARB.f = transmute(failing::VertexAttrib1fvARB); storage::VertexAttrib1fvARB.is_loaded = false; } }
    match loadfn("VertexAttrib1fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fvNV.f = transmute(ptr); storage::VertexAttrib1fvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1fvNV.f = transmute(failing::VertexAttrib1fvNV); storage::VertexAttrib1fvNV.is_loaded = false; } }
    match loadfn("VertexAttrib1hNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1hNV.f = transmute(ptr); storage::VertexAttrib1hNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1hNV.f = transmute(failing::VertexAttrib1hNV); storage::VertexAttrib1hNV.is_loaded = false; } }
    match loadfn("VertexAttrib1hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1hvNV.f = transmute(ptr); storage::VertexAttrib1hvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1hvNV.f = transmute(failing::VertexAttrib1hvNV); storage::VertexAttrib1hvNV.is_loaded = false; } }
    match loadfn("VertexAttrib1s") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1s.f = transmute(ptr); storage::VertexAttrib1s.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1s.f = transmute(failing::VertexAttrib1s); storage::VertexAttrib1s.is_loaded = false; } }
    match loadfn("VertexAttrib1sARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1sARB.f = transmute(ptr); storage::VertexAttrib1sARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1sARB.f = transmute(failing::VertexAttrib1sARB); storage::VertexAttrib1sARB.is_loaded = false; } }
    match loadfn("VertexAttrib1sNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1sNV.f = transmute(ptr); storage::VertexAttrib1sNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1sNV.f = transmute(failing::VertexAttrib1sNV); storage::VertexAttrib1sNV.is_loaded = false; } }
    match loadfn("VertexAttrib1sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1sv.f = transmute(ptr); storage::VertexAttrib1sv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1sv.f = transmute(failing::VertexAttrib1sv); storage::VertexAttrib1sv.is_loaded = false; } }
    match loadfn("VertexAttrib1svARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1svARB.f = transmute(ptr); storage::VertexAttrib1svARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1svARB.f = transmute(failing::VertexAttrib1svARB); storage::VertexAttrib1svARB.is_loaded = false; } }
    match loadfn("VertexAttrib1svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1svNV.f = transmute(ptr); storage::VertexAttrib1svNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib1svNV.f = transmute(failing::VertexAttrib1svNV); storage::VertexAttrib1svNV.is_loaded = false; } }
    match loadfn("VertexAttrib2d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2d.f = transmute(ptr); storage::VertexAttrib2d.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2d.f = transmute(failing::VertexAttrib2d); storage::VertexAttrib2d.is_loaded = false; } }
    match loadfn("VertexAttrib2dARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dARB.f = transmute(ptr); storage::VertexAttrib2dARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2dARB.f = transmute(failing::VertexAttrib2dARB); storage::VertexAttrib2dARB.is_loaded = false; } }
    match loadfn("VertexAttrib2dNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dNV.f = transmute(ptr); storage::VertexAttrib2dNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2dNV.f = transmute(failing::VertexAttrib2dNV); storage::VertexAttrib2dNV.is_loaded = false; } }
    match loadfn("VertexAttrib2dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dv.f = transmute(ptr); storage::VertexAttrib2dv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2dv.f = transmute(failing::VertexAttrib2dv); storage::VertexAttrib2dv.is_loaded = false; } }
    match loadfn("VertexAttrib2dvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dvARB.f = transmute(ptr); storage::VertexAttrib2dvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2dvARB.f = transmute(failing::VertexAttrib2dvARB); storage::VertexAttrib2dvARB.is_loaded = false; } }
    match loadfn("VertexAttrib2dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dvNV.f = transmute(ptr); storage::VertexAttrib2dvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2dvNV.f = transmute(failing::VertexAttrib2dvNV); storage::VertexAttrib2dvNV.is_loaded = false; } }
    match loadfn("VertexAttrib2f") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2f.f = transmute(ptr); storage::VertexAttrib2f.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2f.f = transmute(failing::VertexAttrib2f); storage::VertexAttrib2f.is_loaded = false; } }
    match loadfn("VertexAttrib2fARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fARB.f = transmute(ptr); storage::VertexAttrib2fARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2fARB.f = transmute(failing::VertexAttrib2fARB); storage::VertexAttrib2fARB.is_loaded = false; } }
    match loadfn("VertexAttrib2fNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fNV.f = transmute(ptr); storage::VertexAttrib2fNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2fNV.f = transmute(failing::VertexAttrib2fNV); storage::VertexAttrib2fNV.is_loaded = false; } }
    match loadfn("VertexAttrib2fv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fv.f = transmute(ptr); storage::VertexAttrib2fv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2fv.f = transmute(failing::VertexAttrib2fv); storage::VertexAttrib2fv.is_loaded = false; } }
    match loadfn("VertexAttrib2fvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fvARB.f = transmute(ptr); storage::VertexAttrib2fvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2fvARB.f = transmute(failing::VertexAttrib2fvARB); storage::VertexAttrib2fvARB.is_loaded = false; } }
    match loadfn("VertexAttrib2fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fvNV.f = transmute(ptr); storage::VertexAttrib2fvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2fvNV.f = transmute(failing::VertexAttrib2fvNV); storage::VertexAttrib2fvNV.is_loaded = false; } }
    match loadfn("VertexAttrib2hNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2hNV.f = transmute(ptr); storage::VertexAttrib2hNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2hNV.f = transmute(failing::VertexAttrib2hNV); storage::VertexAttrib2hNV.is_loaded = false; } }
    match loadfn("VertexAttrib2hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2hvNV.f = transmute(ptr); storage::VertexAttrib2hvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2hvNV.f = transmute(failing::VertexAttrib2hvNV); storage::VertexAttrib2hvNV.is_loaded = false; } }
    match loadfn("VertexAttrib2s") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2s.f = transmute(ptr); storage::VertexAttrib2s.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2s.f = transmute(failing::VertexAttrib2s); storage::VertexAttrib2s.is_loaded = false; } }
    match loadfn("VertexAttrib2sARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2sARB.f = transmute(ptr); storage::VertexAttrib2sARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2sARB.f = transmute(failing::VertexAttrib2sARB); storage::VertexAttrib2sARB.is_loaded = false; } }
    match loadfn("VertexAttrib2sNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2sNV.f = transmute(ptr); storage::VertexAttrib2sNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2sNV.f = transmute(failing::VertexAttrib2sNV); storage::VertexAttrib2sNV.is_loaded = false; } }
    match loadfn("VertexAttrib2sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2sv.f = transmute(ptr); storage::VertexAttrib2sv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2sv.f = transmute(failing::VertexAttrib2sv); storage::VertexAttrib2sv.is_loaded = false; } }
    match loadfn("VertexAttrib2svARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2svARB.f = transmute(ptr); storage::VertexAttrib2svARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2svARB.f = transmute(failing::VertexAttrib2svARB); storage::VertexAttrib2svARB.is_loaded = false; } }
    match loadfn("VertexAttrib2svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2svNV.f = transmute(ptr); storage::VertexAttrib2svNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib2svNV.f = transmute(failing::VertexAttrib2svNV); storage::VertexAttrib2svNV.is_loaded = false; } }
    match loadfn("VertexAttrib3d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3d.f = transmute(ptr); storage::VertexAttrib3d.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3d.f = transmute(failing::VertexAttrib3d); storage::VertexAttrib3d.is_loaded = false; } }
    match loadfn("VertexAttrib3dARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dARB.f = transmute(ptr); storage::VertexAttrib3dARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3dARB.f = transmute(failing::VertexAttrib3dARB); storage::VertexAttrib3dARB.is_loaded = false; } }
    match loadfn("VertexAttrib3dNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dNV.f = transmute(ptr); storage::VertexAttrib3dNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3dNV.f = transmute(failing::VertexAttrib3dNV); storage::VertexAttrib3dNV.is_loaded = false; } }
    match loadfn("VertexAttrib3dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dv.f = transmute(ptr); storage::VertexAttrib3dv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3dv.f = transmute(failing::VertexAttrib3dv); storage::VertexAttrib3dv.is_loaded = false; } }
    match loadfn("VertexAttrib3dvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dvARB.f = transmute(ptr); storage::VertexAttrib3dvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3dvARB.f = transmute(failing::VertexAttrib3dvARB); storage::VertexAttrib3dvARB.is_loaded = false; } }
    match loadfn("VertexAttrib3dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dvNV.f = transmute(ptr); storage::VertexAttrib3dvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3dvNV.f = transmute(failing::VertexAttrib3dvNV); storage::VertexAttrib3dvNV.is_loaded = false; } }
    match loadfn("VertexAttrib3f") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3f.f = transmute(ptr); storage::VertexAttrib3f.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3f.f = transmute(failing::VertexAttrib3f); storage::VertexAttrib3f.is_loaded = false; } }
    match loadfn("VertexAttrib3fARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fARB.f = transmute(ptr); storage::VertexAttrib3fARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3fARB.f = transmute(failing::VertexAttrib3fARB); storage::VertexAttrib3fARB.is_loaded = false; } }
    match loadfn("VertexAttrib3fNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fNV.f = transmute(ptr); storage::VertexAttrib3fNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3fNV.f = transmute(failing::VertexAttrib3fNV); storage::VertexAttrib3fNV.is_loaded = false; } }
    match loadfn("VertexAttrib3fv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fv.f = transmute(ptr); storage::VertexAttrib3fv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3fv.f = transmute(failing::VertexAttrib3fv); storage::VertexAttrib3fv.is_loaded = false; } }
    match loadfn("VertexAttrib3fvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fvARB.f = transmute(ptr); storage::VertexAttrib3fvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3fvARB.f = transmute(failing::VertexAttrib3fvARB); storage::VertexAttrib3fvARB.is_loaded = false; } }
    match loadfn("VertexAttrib3fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fvNV.f = transmute(ptr); storage::VertexAttrib3fvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3fvNV.f = transmute(failing::VertexAttrib3fvNV); storage::VertexAttrib3fvNV.is_loaded = false; } }
    match loadfn("VertexAttrib3hNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3hNV.f = transmute(ptr); storage::VertexAttrib3hNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3hNV.f = transmute(failing::VertexAttrib3hNV); storage::VertexAttrib3hNV.is_loaded = false; } }
    match loadfn("VertexAttrib3hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3hvNV.f = transmute(ptr); storage::VertexAttrib3hvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3hvNV.f = transmute(failing::VertexAttrib3hvNV); storage::VertexAttrib3hvNV.is_loaded = false; } }
    match loadfn("VertexAttrib3s") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3s.f = transmute(ptr); storage::VertexAttrib3s.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3s.f = transmute(failing::VertexAttrib3s); storage::VertexAttrib3s.is_loaded = false; } }
    match loadfn("VertexAttrib3sARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3sARB.f = transmute(ptr); storage::VertexAttrib3sARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3sARB.f = transmute(failing::VertexAttrib3sARB); storage::VertexAttrib3sARB.is_loaded = false; } }
    match loadfn("VertexAttrib3sNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3sNV.f = transmute(ptr); storage::VertexAttrib3sNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3sNV.f = transmute(failing::VertexAttrib3sNV); storage::VertexAttrib3sNV.is_loaded = false; } }
    match loadfn("VertexAttrib3sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3sv.f = transmute(ptr); storage::VertexAttrib3sv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3sv.f = transmute(failing::VertexAttrib3sv); storage::VertexAttrib3sv.is_loaded = false; } }
    match loadfn("VertexAttrib3svARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3svARB.f = transmute(ptr); storage::VertexAttrib3svARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3svARB.f = transmute(failing::VertexAttrib3svARB); storage::VertexAttrib3svARB.is_loaded = false; } }
    match loadfn("VertexAttrib3svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3svNV.f = transmute(ptr); storage::VertexAttrib3svNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib3svNV.f = transmute(failing::VertexAttrib3svNV); storage::VertexAttrib3svNV.is_loaded = false; } }
    match loadfn("VertexAttrib4Nbv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nbv.f = transmute(ptr); storage::VertexAttrib4Nbv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4Nbv.f = transmute(failing::VertexAttrib4Nbv); storage::VertexAttrib4Nbv.is_loaded = false; } }
    match loadfn("VertexAttrib4NbvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NbvARB.f = transmute(ptr); storage::VertexAttrib4NbvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4NbvARB.f = transmute(failing::VertexAttrib4NbvARB); storage::VertexAttrib4NbvARB.is_loaded = false; } }
    match loadfn("VertexAttrib4Niv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Niv.f = transmute(ptr); storage::VertexAttrib4Niv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4Niv.f = transmute(failing::VertexAttrib4Niv); storage::VertexAttrib4Niv.is_loaded = false; } }
    match loadfn("VertexAttrib4NivARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NivARB.f = transmute(ptr); storage::VertexAttrib4NivARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4NivARB.f = transmute(failing::VertexAttrib4NivARB); storage::VertexAttrib4NivARB.is_loaded = false; } }
    match loadfn("VertexAttrib4Nsv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nsv.f = transmute(ptr); storage::VertexAttrib4Nsv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4Nsv.f = transmute(failing::VertexAttrib4Nsv); storage::VertexAttrib4Nsv.is_loaded = false; } }
    match loadfn("VertexAttrib4NsvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NsvARB.f = transmute(ptr); storage::VertexAttrib4NsvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4NsvARB.f = transmute(failing::VertexAttrib4NsvARB); storage::VertexAttrib4NsvARB.is_loaded = false; } }
    match loadfn("VertexAttrib4Nub") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nub.f = transmute(ptr); storage::VertexAttrib4Nub.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4Nub.f = transmute(failing::VertexAttrib4Nub); storage::VertexAttrib4Nub.is_loaded = false; } }
    match loadfn("VertexAttrib4NubARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NubARB.f = transmute(ptr); storage::VertexAttrib4NubARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4NubARB.f = transmute(failing::VertexAttrib4NubARB); storage::VertexAttrib4NubARB.is_loaded = false; } }
    match loadfn("VertexAttrib4Nubv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nubv.f = transmute(ptr); storage::VertexAttrib4Nubv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4Nubv.f = transmute(failing::VertexAttrib4Nubv); storage::VertexAttrib4Nubv.is_loaded = false; } }
    match loadfn("VertexAttrib4NubvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NubvARB.f = transmute(ptr); storage::VertexAttrib4NubvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4NubvARB.f = transmute(failing::VertexAttrib4NubvARB); storage::VertexAttrib4NubvARB.is_loaded = false; } }
    match loadfn("VertexAttrib4Nuiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nuiv.f = transmute(ptr); storage::VertexAttrib4Nuiv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4Nuiv.f = transmute(failing::VertexAttrib4Nuiv); storage::VertexAttrib4Nuiv.is_loaded = false; } }
    match loadfn("VertexAttrib4NuivARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NuivARB.f = transmute(ptr); storage::VertexAttrib4NuivARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4NuivARB.f = transmute(failing::VertexAttrib4NuivARB); storage::VertexAttrib4NuivARB.is_loaded = false; } }
    match loadfn("VertexAttrib4Nusv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nusv.f = transmute(ptr); storage::VertexAttrib4Nusv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4Nusv.f = transmute(failing::VertexAttrib4Nusv); storage::VertexAttrib4Nusv.is_loaded = false; } }
    match loadfn("VertexAttrib4NusvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NusvARB.f = transmute(ptr); storage::VertexAttrib4NusvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4NusvARB.f = transmute(failing::VertexAttrib4NusvARB); storage::VertexAttrib4NusvARB.is_loaded = false; } }
    match loadfn("VertexAttrib4bv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4bv.f = transmute(ptr); storage::VertexAttrib4bv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4bv.f = transmute(failing::VertexAttrib4bv); storage::VertexAttrib4bv.is_loaded = false; } }
    match loadfn("VertexAttrib4bvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4bvARB.f = transmute(ptr); storage::VertexAttrib4bvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4bvARB.f = transmute(failing::VertexAttrib4bvARB); storage::VertexAttrib4bvARB.is_loaded = false; } }
    match loadfn("VertexAttrib4d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4d.f = transmute(ptr); storage::VertexAttrib4d.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4d.f = transmute(failing::VertexAttrib4d); storage::VertexAttrib4d.is_loaded = false; } }
    match loadfn("VertexAttrib4dARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dARB.f = transmute(ptr); storage::VertexAttrib4dARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4dARB.f = transmute(failing::VertexAttrib4dARB); storage::VertexAttrib4dARB.is_loaded = false; } }
    match loadfn("VertexAttrib4dNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dNV.f = transmute(ptr); storage::VertexAttrib4dNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4dNV.f = transmute(failing::VertexAttrib4dNV); storage::VertexAttrib4dNV.is_loaded = false; } }
    match loadfn("VertexAttrib4dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dv.f = transmute(ptr); storage::VertexAttrib4dv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4dv.f = transmute(failing::VertexAttrib4dv); storage::VertexAttrib4dv.is_loaded = false; } }
    match loadfn("VertexAttrib4dvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dvARB.f = transmute(ptr); storage::VertexAttrib4dvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4dvARB.f = transmute(failing::VertexAttrib4dvARB); storage::VertexAttrib4dvARB.is_loaded = false; } }
    match loadfn("VertexAttrib4dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dvNV.f = transmute(ptr); storage::VertexAttrib4dvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4dvNV.f = transmute(failing::VertexAttrib4dvNV); storage::VertexAttrib4dvNV.is_loaded = false; } }
    match loadfn("VertexAttrib4f") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4f.f = transmute(ptr); storage::VertexAttrib4f.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4f.f = transmute(failing::VertexAttrib4f); storage::VertexAttrib4f.is_loaded = false; } }
    match loadfn("VertexAttrib4fARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fARB.f = transmute(ptr); storage::VertexAttrib4fARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4fARB.f = transmute(failing::VertexAttrib4fARB); storage::VertexAttrib4fARB.is_loaded = false; } }
    match loadfn("VertexAttrib4fNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fNV.f = transmute(ptr); storage::VertexAttrib4fNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4fNV.f = transmute(failing::VertexAttrib4fNV); storage::VertexAttrib4fNV.is_loaded = false; } }
    match loadfn("VertexAttrib4fv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fv.f = transmute(ptr); storage::VertexAttrib4fv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4fv.f = transmute(failing::VertexAttrib4fv); storage::VertexAttrib4fv.is_loaded = false; } }
    match loadfn("VertexAttrib4fvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fvARB.f = transmute(ptr); storage::VertexAttrib4fvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4fvARB.f = transmute(failing::VertexAttrib4fvARB); storage::VertexAttrib4fvARB.is_loaded = false; } }
    match loadfn("VertexAttrib4fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fvNV.f = transmute(ptr); storage::VertexAttrib4fvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4fvNV.f = transmute(failing::VertexAttrib4fvNV); storage::VertexAttrib4fvNV.is_loaded = false; } }
    match loadfn("VertexAttrib4hNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4hNV.f = transmute(ptr); storage::VertexAttrib4hNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4hNV.f = transmute(failing::VertexAttrib4hNV); storage::VertexAttrib4hNV.is_loaded = false; } }
    match loadfn("VertexAttrib4hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4hvNV.f = transmute(ptr); storage::VertexAttrib4hvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4hvNV.f = transmute(failing::VertexAttrib4hvNV); storage::VertexAttrib4hvNV.is_loaded = false; } }
    match loadfn("VertexAttrib4iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4iv.f = transmute(ptr); storage::VertexAttrib4iv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4iv.f = transmute(failing::VertexAttrib4iv); storage::VertexAttrib4iv.is_loaded = false; } }
    match loadfn("VertexAttrib4ivARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ivARB.f = transmute(ptr); storage::VertexAttrib4ivARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4ivARB.f = transmute(failing::VertexAttrib4ivARB); storage::VertexAttrib4ivARB.is_loaded = false; } }
    match loadfn("VertexAttrib4s") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4s.f = transmute(ptr); storage::VertexAttrib4s.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4s.f = transmute(failing::VertexAttrib4s); storage::VertexAttrib4s.is_loaded = false; } }
    match loadfn("VertexAttrib4sARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4sARB.f = transmute(ptr); storage::VertexAttrib4sARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4sARB.f = transmute(failing::VertexAttrib4sARB); storage::VertexAttrib4sARB.is_loaded = false; } }
    match loadfn("VertexAttrib4sNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4sNV.f = transmute(ptr); storage::VertexAttrib4sNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4sNV.f = transmute(failing::VertexAttrib4sNV); storage::VertexAttrib4sNV.is_loaded = false; } }
    match loadfn("VertexAttrib4sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4sv.f = transmute(ptr); storage::VertexAttrib4sv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4sv.f = transmute(failing::VertexAttrib4sv); storage::VertexAttrib4sv.is_loaded = false; } }
    match loadfn("VertexAttrib4svARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4svARB.f = transmute(ptr); storage::VertexAttrib4svARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4svARB.f = transmute(failing::VertexAttrib4svARB); storage::VertexAttrib4svARB.is_loaded = false; } }
    match loadfn("VertexAttrib4svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4svNV.f = transmute(ptr); storage::VertexAttrib4svNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4svNV.f = transmute(failing::VertexAttrib4svNV); storage::VertexAttrib4svNV.is_loaded = false; } }
    match loadfn("VertexAttrib4ubNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ubNV.f = transmute(ptr); storage::VertexAttrib4ubNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4ubNV.f = transmute(failing::VertexAttrib4ubNV); storage::VertexAttrib4ubNV.is_loaded = false; } }
    match loadfn("VertexAttrib4ubv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ubv.f = transmute(ptr); storage::VertexAttrib4ubv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4ubv.f = transmute(failing::VertexAttrib4ubv); storage::VertexAttrib4ubv.is_loaded = false; } }
    match loadfn("VertexAttrib4ubvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ubvARB.f = transmute(ptr); storage::VertexAttrib4ubvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4ubvARB.f = transmute(failing::VertexAttrib4ubvARB); storage::VertexAttrib4ubvARB.is_loaded = false; } }
    match loadfn("VertexAttrib4ubvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ubvNV.f = transmute(ptr); storage::VertexAttrib4ubvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4ubvNV.f = transmute(failing::VertexAttrib4ubvNV); storage::VertexAttrib4ubvNV.is_loaded = false; } }
    match loadfn("VertexAttrib4uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4uiv.f = transmute(ptr); storage::VertexAttrib4uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4uiv.f = transmute(failing::VertexAttrib4uiv); storage::VertexAttrib4uiv.is_loaded = false; } }
    match loadfn("VertexAttrib4uivARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4uivARB.f = transmute(ptr); storage::VertexAttrib4uivARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4uivARB.f = transmute(failing::VertexAttrib4uivARB); storage::VertexAttrib4uivARB.is_loaded = false; } }
    match loadfn("VertexAttrib4usv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4usv.f = transmute(ptr); storage::VertexAttrib4usv.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4usv.f = transmute(failing::VertexAttrib4usv); storage::VertexAttrib4usv.is_loaded = false; } }
    match loadfn("VertexAttrib4usvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4usvARB.f = transmute(ptr); storage::VertexAttrib4usvARB.is_loaded = true; }, _ => unsafe { storage::VertexAttrib4usvARB.f = transmute(failing::VertexAttrib4usvARB); storage::VertexAttrib4usvARB.is_loaded = false; } }
    match loadfn("VertexAttribArrayObjectATI") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribArrayObjectATI.f = transmute(ptr); storage::VertexAttribArrayObjectATI.is_loaded = true; }, _ => unsafe { storage::VertexAttribArrayObjectATI.f = transmute(failing::VertexAttribArrayObjectATI); storage::VertexAttribArrayObjectATI.is_loaded = false; } }
    match loadfn("VertexAttribBinding") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribBinding.f = transmute(ptr); storage::VertexAttribBinding.is_loaded = true; }, _ => unsafe { storage::VertexAttribBinding.f = transmute(failing::VertexAttribBinding); storage::VertexAttribBinding.is_loaded = false; } }
    match loadfn("VertexAttribDivisor") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribDivisor.f = transmute(ptr); storage::VertexAttribDivisor.is_loaded = true; }, _ => unsafe { storage::VertexAttribDivisor.f = transmute(failing::VertexAttribDivisor); storage::VertexAttribDivisor.is_loaded = false; } }
    match loadfn("VertexAttribDivisorANGLE") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribDivisorANGLE.f = transmute(ptr); storage::VertexAttribDivisorANGLE.is_loaded = true; }, _ => unsafe { storage::VertexAttribDivisorANGLE.f = transmute(failing::VertexAttribDivisorANGLE); storage::VertexAttribDivisorANGLE.is_loaded = false; } }
    match loadfn("VertexAttribDivisorARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribDivisorARB.f = transmute(ptr); storage::VertexAttribDivisorARB.is_loaded = true; }, _ => unsafe { storage::VertexAttribDivisorARB.f = transmute(failing::VertexAttribDivisorARB); storage::VertexAttribDivisorARB.is_loaded = false; } }
    match loadfn("VertexAttribDivisorNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribDivisorNV.f = transmute(ptr); storage::VertexAttribDivisorNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribDivisorNV.f = transmute(failing::VertexAttribDivisorNV); storage::VertexAttribDivisorNV.is_loaded = false; } }
    match loadfn("VertexAttribFormat") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribFormat.f = transmute(ptr); storage::VertexAttribFormat.is_loaded = true; }, _ => unsafe { storage::VertexAttribFormat.f = transmute(failing::VertexAttribFormat); storage::VertexAttribFormat.is_loaded = false; } }
    match loadfn("VertexAttribFormatNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribFormatNV.f = transmute(ptr); storage::VertexAttribFormatNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribFormatNV.f = transmute(failing::VertexAttribFormatNV); storage::VertexAttribFormatNV.is_loaded = false; } }
    match loadfn("VertexAttribI1i") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1i.f = transmute(ptr); storage::VertexAttribI1i.is_loaded = true; }, _ => unsafe { storage::VertexAttribI1i.f = transmute(failing::VertexAttribI1i); storage::VertexAttribI1i.is_loaded = false; } }
    match loadfn("VertexAttribI1iEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1iEXT.f = transmute(ptr); storage::VertexAttribI1iEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI1iEXT.f = transmute(failing::VertexAttribI1iEXT); storage::VertexAttribI1iEXT.is_loaded = false; } }
    match loadfn("VertexAttribI1iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1iv.f = transmute(ptr); storage::VertexAttribI1iv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI1iv.f = transmute(failing::VertexAttribI1iv); storage::VertexAttribI1iv.is_loaded = false; } }
    match loadfn("VertexAttribI1ivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1ivEXT.f = transmute(ptr); storage::VertexAttribI1ivEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI1ivEXT.f = transmute(failing::VertexAttribI1ivEXT); storage::VertexAttribI1ivEXT.is_loaded = false; } }
    match loadfn("VertexAttribI1ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1ui.f = transmute(ptr); storage::VertexAttribI1ui.is_loaded = true; }, _ => unsafe { storage::VertexAttribI1ui.f = transmute(failing::VertexAttribI1ui); storage::VertexAttribI1ui.is_loaded = false; } }
    match loadfn("VertexAttribI1uiEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1uiEXT.f = transmute(ptr); storage::VertexAttribI1uiEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI1uiEXT.f = transmute(failing::VertexAttribI1uiEXT); storage::VertexAttribI1uiEXT.is_loaded = false; } }
    match loadfn("VertexAttribI1uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1uiv.f = transmute(ptr); storage::VertexAttribI1uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI1uiv.f = transmute(failing::VertexAttribI1uiv); storage::VertexAttribI1uiv.is_loaded = false; } }
    match loadfn("VertexAttribI1uivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1uivEXT.f = transmute(ptr); storage::VertexAttribI1uivEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI1uivEXT.f = transmute(failing::VertexAttribI1uivEXT); storage::VertexAttribI1uivEXT.is_loaded = false; } }
    match loadfn("VertexAttribI2i") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2i.f = transmute(ptr); storage::VertexAttribI2i.is_loaded = true; }, _ => unsafe { storage::VertexAttribI2i.f = transmute(failing::VertexAttribI2i); storage::VertexAttribI2i.is_loaded = false; } }
    match loadfn("VertexAttribI2iEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2iEXT.f = transmute(ptr); storage::VertexAttribI2iEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI2iEXT.f = transmute(failing::VertexAttribI2iEXT); storage::VertexAttribI2iEXT.is_loaded = false; } }
    match loadfn("VertexAttribI2iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2iv.f = transmute(ptr); storage::VertexAttribI2iv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI2iv.f = transmute(failing::VertexAttribI2iv); storage::VertexAttribI2iv.is_loaded = false; } }
    match loadfn("VertexAttribI2ivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2ivEXT.f = transmute(ptr); storage::VertexAttribI2ivEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI2ivEXT.f = transmute(failing::VertexAttribI2ivEXT); storage::VertexAttribI2ivEXT.is_loaded = false; } }
    match loadfn("VertexAttribI2ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2ui.f = transmute(ptr); storage::VertexAttribI2ui.is_loaded = true; }, _ => unsafe { storage::VertexAttribI2ui.f = transmute(failing::VertexAttribI2ui); storage::VertexAttribI2ui.is_loaded = false; } }
    match loadfn("VertexAttribI2uiEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2uiEXT.f = transmute(ptr); storage::VertexAttribI2uiEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI2uiEXT.f = transmute(failing::VertexAttribI2uiEXT); storage::VertexAttribI2uiEXT.is_loaded = false; } }
    match loadfn("VertexAttribI2uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2uiv.f = transmute(ptr); storage::VertexAttribI2uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI2uiv.f = transmute(failing::VertexAttribI2uiv); storage::VertexAttribI2uiv.is_loaded = false; } }
    match loadfn("VertexAttribI2uivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2uivEXT.f = transmute(ptr); storage::VertexAttribI2uivEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI2uivEXT.f = transmute(failing::VertexAttribI2uivEXT); storage::VertexAttribI2uivEXT.is_loaded = false; } }
    match loadfn("VertexAttribI3i") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3i.f = transmute(ptr); storage::VertexAttribI3i.is_loaded = true; }, _ => unsafe { storage::VertexAttribI3i.f = transmute(failing::VertexAttribI3i); storage::VertexAttribI3i.is_loaded = false; } }
    match loadfn("VertexAttribI3iEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3iEXT.f = transmute(ptr); storage::VertexAttribI3iEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI3iEXT.f = transmute(failing::VertexAttribI3iEXT); storage::VertexAttribI3iEXT.is_loaded = false; } }
    match loadfn("VertexAttribI3iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3iv.f = transmute(ptr); storage::VertexAttribI3iv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI3iv.f = transmute(failing::VertexAttribI3iv); storage::VertexAttribI3iv.is_loaded = false; } }
    match loadfn("VertexAttribI3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3ivEXT.f = transmute(ptr); storage::VertexAttribI3ivEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI3ivEXT.f = transmute(failing::VertexAttribI3ivEXT); storage::VertexAttribI3ivEXT.is_loaded = false; } }
    match loadfn("VertexAttribI3ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3ui.f = transmute(ptr); storage::VertexAttribI3ui.is_loaded = true; }, _ => unsafe { storage::VertexAttribI3ui.f = transmute(failing::VertexAttribI3ui); storage::VertexAttribI3ui.is_loaded = false; } }
    match loadfn("VertexAttribI3uiEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3uiEXT.f = transmute(ptr); storage::VertexAttribI3uiEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI3uiEXT.f = transmute(failing::VertexAttribI3uiEXT); storage::VertexAttribI3uiEXT.is_loaded = false; } }
    match loadfn("VertexAttribI3uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3uiv.f = transmute(ptr); storage::VertexAttribI3uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI3uiv.f = transmute(failing::VertexAttribI3uiv); storage::VertexAttribI3uiv.is_loaded = false; } }
    match loadfn("VertexAttribI3uivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3uivEXT.f = transmute(ptr); storage::VertexAttribI3uivEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI3uivEXT.f = transmute(failing::VertexAttribI3uivEXT); storage::VertexAttribI3uivEXT.is_loaded = false; } }
    match loadfn("VertexAttribI4bv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4bv.f = transmute(ptr); storage::VertexAttribI4bv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4bv.f = transmute(failing::VertexAttribI4bv); storage::VertexAttribI4bv.is_loaded = false; } }
    match loadfn("VertexAttribI4bvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4bvEXT.f = transmute(ptr); storage::VertexAttribI4bvEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4bvEXT.f = transmute(failing::VertexAttribI4bvEXT); storage::VertexAttribI4bvEXT.is_loaded = false; } }
    match loadfn("VertexAttribI4i") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4i.f = transmute(ptr); storage::VertexAttribI4i.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4i.f = transmute(failing::VertexAttribI4i); storage::VertexAttribI4i.is_loaded = false; } }
    match loadfn("VertexAttribI4iEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4iEXT.f = transmute(ptr); storage::VertexAttribI4iEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4iEXT.f = transmute(failing::VertexAttribI4iEXT); storage::VertexAttribI4iEXT.is_loaded = false; } }
    match loadfn("VertexAttribI4iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4iv.f = transmute(ptr); storage::VertexAttribI4iv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4iv.f = transmute(failing::VertexAttribI4iv); storage::VertexAttribI4iv.is_loaded = false; } }
    match loadfn("VertexAttribI4ivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4ivEXT.f = transmute(ptr); storage::VertexAttribI4ivEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4ivEXT.f = transmute(failing::VertexAttribI4ivEXT); storage::VertexAttribI4ivEXT.is_loaded = false; } }
    match loadfn("VertexAttribI4sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4sv.f = transmute(ptr); storage::VertexAttribI4sv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4sv.f = transmute(failing::VertexAttribI4sv); storage::VertexAttribI4sv.is_loaded = false; } }
    match loadfn("VertexAttribI4svEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4svEXT.f = transmute(ptr); storage::VertexAttribI4svEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4svEXT.f = transmute(failing::VertexAttribI4svEXT); storage::VertexAttribI4svEXT.is_loaded = false; } }
    match loadfn("VertexAttribI4ubv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4ubv.f = transmute(ptr); storage::VertexAttribI4ubv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4ubv.f = transmute(failing::VertexAttribI4ubv); storage::VertexAttribI4ubv.is_loaded = false; } }
    match loadfn("VertexAttribI4ubvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4ubvEXT.f = transmute(ptr); storage::VertexAttribI4ubvEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4ubvEXT.f = transmute(failing::VertexAttribI4ubvEXT); storage::VertexAttribI4ubvEXT.is_loaded = false; } }
    match loadfn("VertexAttribI4ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4ui.f = transmute(ptr); storage::VertexAttribI4ui.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4ui.f = transmute(failing::VertexAttribI4ui); storage::VertexAttribI4ui.is_loaded = false; } }
    match loadfn("VertexAttribI4uiEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4uiEXT.f = transmute(ptr); storage::VertexAttribI4uiEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4uiEXT.f = transmute(failing::VertexAttribI4uiEXT); storage::VertexAttribI4uiEXT.is_loaded = false; } }
    match loadfn("VertexAttribI4uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4uiv.f = transmute(ptr); storage::VertexAttribI4uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4uiv.f = transmute(failing::VertexAttribI4uiv); storage::VertexAttribI4uiv.is_loaded = false; } }
    match loadfn("VertexAttribI4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4uivEXT.f = transmute(ptr); storage::VertexAttribI4uivEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4uivEXT.f = transmute(failing::VertexAttribI4uivEXT); storage::VertexAttribI4uivEXT.is_loaded = false; } }
    match loadfn("VertexAttribI4usv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4usv.f = transmute(ptr); storage::VertexAttribI4usv.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4usv.f = transmute(failing::VertexAttribI4usv); storage::VertexAttribI4usv.is_loaded = false; } }
    match loadfn("VertexAttribI4usvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4usvEXT.f = transmute(ptr); storage::VertexAttribI4usvEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribI4usvEXT.f = transmute(failing::VertexAttribI4usvEXT); storage::VertexAttribI4usvEXT.is_loaded = false; } }
    match loadfn("VertexAttribIFormat") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribIFormat.f = transmute(ptr); storage::VertexAttribIFormat.is_loaded = true; }, _ => unsafe { storage::VertexAttribIFormat.f = transmute(failing::VertexAttribIFormat); storage::VertexAttribIFormat.is_loaded = false; } }
    match loadfn("VertexAttribIFormatNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribIFormatNV.f = transmute(ptr); storage::VertexAttribIFormatNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribIFormatNV.f = transmute(failing::VertexAttribIFormatNV); storage::VertexAttribIFormatNV.is_loaded = false; } }
    match loadfn("VertexAttribIPointer") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribIPointer.f = transmute(ptr); storage::VertexAttribIPointer.is_loaded = true; }, _ => unsafe { storage::VertexAttribIPointer.f = transmute(failing::VertexAttribIPointer); storage::VertexAttribIPointer.is_loaded = false; } }
    match loadfn("VertexAttribIPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribIPointerEXT.f = transmute(ptr); storage::VertexAttribIPointerEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribIPointerEXT.f = transmute(failing::VertexAttribIPointerEXT); storage::VertexAttribIPointerEXT.is_loaded = false; } }
    match loadfn("VertexAttribL1d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1d.f = transmute(ptr); storage::VertexAttribL1d.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1d.f = transmute(failing::VertexAttribL1d); storage::VertexAttribL1d.is_loaded = false; } }
    match loadfn("VertexAttribL1dEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1dEXT.f = transmute(ptr); storage::VertexAttribL1dEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1dEXT.f = transmute(failing::VertexAttribL1dEXT); storage::VertexAttribL1dEXT.is_loaded = false; } }
    match loadfn("VertexAttribL1dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1dv.f = transmute(ptr); storage::VertexAttribL1dv.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1dv.f = transmute(failing::VertexAttribL1dv); storage::VertexAttribL1dv.is_loaded = false; } }
    match loadfn("VertexAttribL1dvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1dvEXT.f = transmute(ptr); storage::VertexAttribL1dvEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1dvEXT.f = transmute(failing::VertexAttribL1dvEXT); storage::VertexAttribL1dvEXT.is_loaded = false; } }
    match loadfn("VertexAttribL1i64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1i64NV.f = transmute(ptr); storage::VertexAttribL1i64NV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1i64NV.f = transmute(failing::VertexAttribL1i64NV); storage::VertexAttribL1i64NV.is_loaded = false; } }
    match loadfn("VertexAttribL1i64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1i64vNV.f = transmute(ptr); storage::VertexAttribL1i64vNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1i64vNV.f = transmute(failing::VertexAttribL1i64vNV); storage::VertexAttribL1i64vNV.is_loaded = false; } }
    match loadfn("VertexAttribL1ui64ARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1ui64ARB.f = transmute(ptr); storage::VertexAttribL1ui64ARB.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1ui64ARB.f = transmute(failing::VertexAttribL1ui64ARB); storage::VertexAttribL1ui64ARB.is_loaded = false; } }
    match loadfn("VertexAttribL1ui64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1ui64NV.f = transmute(ptr); storage::VertexAttribL1ui64NV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1ui64NV.f = transmute(failing::VertexAttribL1ui64NV); storage::VertexAttribL1ui64NV.is_loaded = false; } }
    match loadfn("VertexAttribL1ui64vARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1ui64vARB.f = transmute(ptr); storage::VertexAttribL1ui64vARB.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1ui64vARB.f = transmute(failing::VertexAttribL1ui64vARB); storage::VertexAttribL1ui64vARB.is_loaded = false; } }
    match loadfn("VertexAttribL1ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1ui64vNV.f = transmute(ptr); storage::VertexAttribL1ui64vNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL1ui64vNV.f = transmute(failing::VertexAttribL1ui64vNV); storage::VertexAttribL1ui64vNV.is_loaded = false; } }
    match loadfn("VertexAttribL2d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2d.f = transmute(ptr); storage::VertexAttribL2d.is_loaded = true; }, _ => unsafe { storage::VertexAttribL2d.f = transmute(failing::VertexAttribL2d); storage::VertexAttribL2d.is_loaded = false; } }
    match loadfn("VertexAttribL2dEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2dEXT.f = transmute(ptr); storage::VertexAttribL2dEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribL2dEXT.f = transmute(failing::VertexAttribL2dEXT); storage::VertexAttribL2dEXT.is_loaded = false; } }
    match loadfn("VertexAttribL2dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2dv.f = transmute(ptr); storage::VertexAttribL2dv.is_loaded = true; }, _ => unsafe { storage::VertexAttribL2dv.f = transmute(failing::VertexAttribL2dv); storage::VertexAttribL2dv.is_loaded = false; } }
    match loadfn("VertexAttribL2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2dvEXT.f = transmute(ptr); storage::VertexAttribL2dvEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribL2dvEXT.f = transmute(failing::VertexAttribL2dvEXT); storage::VertexAttribL2dvEXT.is_loaded = false; } }
    match loadfn("VertexAttribL2i64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2i64NV.f = transmute(ptr); storage::VertexAttribL2i64NV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL2i64NV.f = transmute(failing::VertexAttribL2i64NV); storage::VertexAttribL2i64NV.is_loaded = false; } }
    match loadfn("VertexAttribL2i64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2i64vNV.f = transmute(ptr); storage::VertexAttribL2i64vNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL2i64vNV.f = transmute(failing::VertexAttribL2i64vNV); storage::VertexAttribL2i64vNV.is_loaded = false; } }
    match loadfn("VertexAttribL2ui64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2ui64NV.f = transmute(ptr); storage::VertexAttribL2ui64NV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL2ui64NV.f = transmute(failing::VertexAttribL2ui64NV); storage::VertexAttribL2ui64NV.is_loaded = false; } }
    match loadfn("VertexAttribL2ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2ui64vNV.f = transmute(ptr); storage::VertexAttribL2ui64vNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL2ui64vNV.f = transmute(failing::VertexAttribL2ui64vNV); storage::VertexAttribL2ui64vNV.is_loaded = false; } }
    match loadfn("VertexAttribL3d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3d.f = transmute(ptr); storage::VertexAttribL3d.is_loaded = true; }, _ => unsafe { storage::VertexAttribL3d.f = transmute(failing::VertexAttribL3d); storage::VertexAttribL3d.is_loaded = false; } }
    match loadfn("VertexAttribL3dEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3dEXT.f = transmute(ptr); storage::VertexAttribL3dEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribL3dEXT.f = transmute(failing::VertexAttribL3dEXT); storage::VertexAttribL3dEXT.is_loaded = false; } }
    match loadfn("VertexAttribL3dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3dv.f = transmute(ptr); storage::VertexAttribL3dv.is_loaded = true; }, _ => unsafe { storage::VertexAttribL3dv.f = transmute(failing::VertexAttribL3dv); storage::VertexAttribL3dv.is_loaded = false; } }
    match loadfn("VertexAttribL3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3dvEXT.f = transmute(ptr); storage::VertexAttribL3dvEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribL3dvEXT.f = transmute(failing::VertexAttribL3dvEXT); storage::VertexAttribL3dvEXT.is_loaded = false; } }
    match loadfn("VertexAttribL3i64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3i64NV.f = transmute(ptr); storage::VertexAttribL3i64NV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL3i64NV.f = transmute(failing::VertexAttribL3i64NV); storage::VertexAttribL3i64NV.is_loaded = false; } }
    match loadfn("VertexAttribL3i64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3i64vNV.f = transmute(ptr); storage::VertexAttribL3i64vNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL3i64vNV.f = transmute(failing::VertexAttribL3i64vNV); storage::VertexAttribL3i64vNV.is_loaded = false; } }
    match loadfn("VertexAttribL3ui64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3ui64NV.f = transmute(ptr); storage::VertexAttribL3ui64NV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL3ui64NV.f = transmute(failing::VertexAttribL3ui64NV); storage::VertexAttribL3ui64NV.is_loaded = false; } }
    match loadfn("VertexAttribL3ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3ui64vNV.f = transmute(ptr); storage::VertexAttribL3ui64vNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL3ui64vNV.f = transmute(failing::VertexAttribL3ui64vNV); storage::VertexAttribL3ui64vNV.is_loaded = false; } }
    match loadfn("VertexAttribL4d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4d.f = transmute(ptr); storage::VertexAttribL4d.is_loaded = true; }, _ => unsafe { storage::VertexAttribL4d.f = transmute(failing::VertexAttribL4d); storage::VertexAttribL4d.is_loaded = false; } }
    match loadfn("VertexAttribL4dEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4dEXT.f = transmute(ptr); storage::VertexAttribL4dEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribL4dEXT.f = transmute(failing::VertexAttribL4dEXT); storage::VertexAttribL4dEXT.is_loaded = false; } }
    match loadfn("VertexAttribL4dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4dv.f = transmute(ptr); storage::VertexAttribL4dv.is_loaded = true; }, _ => unsafe { storage::VertexAttribL4dv.f = transmute(failing::VertexAttribL4dv); storage::VertexAttribL4dv.is_loaded = false; } }
    match loadfn("VertexAttribL4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4dvEXT.f = transmute(ptr); storage::VertexAttribL4dvEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribL4dvEXT.f = transmute(failing::VertexAttribL4dvEXT); storage::VertexAttribL4dvEXT.is_loaded = false; } }
    match loadfn("VertexAttribL4i64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4i64NV.f = transmute(ptr); storage::VertexAttribL4i64NV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL4i64NV.f = transmute(failing::VertexAttribL4i64NV); storage::VertexAttribL4i64NV.is_loaded = false; } }
    match loadfn("VertexAttribL4i64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4i64vNV.f = transmute(ptr); storage::VertexAttribL4i64vNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL4i64vNV.f = transmute(failing::VertexAttribL4i64vNV); storage::VertexAttribL4i64vNV.is_loaded = false; } }
    match loadfn("VertexAttribL4ui64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4ui64NV.f = transmute(ptr); storage::VertexAttribL4ui64NV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL4ui64NV.f = transmute(failing::VertexAttribL4ui64NV); storage::VertexAttribL4ui64NV.is_loaded = false; } }
    match loadfn("VertexAttribL4ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4ui64vNV.f = transmute(ptr); storage::VertexAttribL4ui64vNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribL4ui64vNV.f = transmute(failing::VertexAttribL4ui64vNV); storage::VertexAttribL4ui64vNV.is_loaded = false; } }
    match loadfn("VertexAttribLFormat") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribLFormat.f = transmute(ptr); storage::VertexAttribLFormat.is_loaded = true; }, _ => unsafe { storage::VertexAttribLFormat.f = transmute(failing::VertexAttribLFormat); storage::VertexAttribLFormat.is_loaded = false; } }
    match loadfn("VertexAttribLFormatNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribLFormatNV.f = transmute(ptr); storage::VertexAttribLFormatNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribLFormatNV.f = transmute(failing::VertexAttribLFormatNV); storage::VertexAttribLFormatNV.is_loaded = false; } }
    match loadfn("VertexAttribLPointer") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribLPointer.f = transmute(ptr); storage::VertexAttribLPointer.is_loaded = true; }, _ => unsafe { storage::VertexAttribLPointer.f = transmute(failing::VertexAttribLPointer); storage::VertexAttribLPointer.is_loaded = false; } }
    match loadfn("VertexAttribLPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribLPointerEXT.f = transmute(ptr); storage::VertexAttribLPointerEXT.is_loaded = true; }, _ => unsafe { storage::VertexAttribLPointerEXT.f = transmute(failing::VertexAttribLPointerEXT); storage::VertexAttribLPointerEXT.is_loaded = false; } }
    match loadfn("VertexAttribP1ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP1ui.f = transmute(ptr); storage::VertexAttribP1ui.is_loaded = true; }, _ => unsafe { storage::VertexAttribP1ui.f = transmute(failing::VertexAttribP1ui); storage::VertexAttribP1ui.is_loaded = false; } }
    match loadfn("VertexAttribP1uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP1uiv.f = transmute(ptr); storage::VertexAttribP1uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttribP1uiv.f = transmute(failing::VertexAttribP1uiv); storage::VertexAttribP1uiv.is_loaded = false; } }
    match loadfn("VertexAttribP2ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP2ui.f = transmute(ptr); storage::VertexAttribP2ui.is_loaded = true; }, _ => unsafe { storage::VertexAttribP2ui.f = transmute(failing::VertexAttribP2ui); storage::VertexAttribP2ui.is_loaded = false; } }
    match loadfn("VertexAttribP2uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP2uiv.f = transmute(ptr); storage::VertexAttribP2uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttribP2uiv.f = transmute(failing::VertexAttribP2uiv); storage::VertexAttribP2uiv.is_loaded = false; } }
    match loadfn("VertexAttribP3ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP3ui.f = transmute(ptr); storage::VertexAttribP3ui.is_loaded = true; }, _ => unsafe { storage::VertexAttribP3ui.f = transmute(failing::VertexAttribP3ui); storage::VertexAttribP3ui.is_loaded = false; } }
    match loadfn("VertexAttribP3uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP3uiv.f = transmute(ptr); storage::VertexAttribP3uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttribP3uiv.f = transmute(failing::VertexAttribP3uiv); storage::VertexAttribP3uiv.is_loaded = false; } }
    match loadfn("VertexAttribP4ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP4ui.f = transmute(ptr); storage::VertexAttribP4ui.is_loaded = true; }, _ => unsafe { storage::VertexAttribP4ui.f = transmute(failing::VertexAttribP4ui); storage::VertexAttribP4ui.is_loaded = false; } }
    match loadfn("VertexAttribP4uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP4uiv.f = transmute(ptr); storage::VertexAttribP4uiv.is_loaded = true; }, _ => unsafe { storage::VertexAttribP4uiv.f = transmute(failing::VertexAttribP4uiv); storage::VertexAttribP4uiv.is_loaded = false; } }
    match loadfn("VertexAttribParameteriAMD") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribParameteriAMD.f = transmute(ptr); storage::VertexAttribParameteriAMD.is_loaded = true; }, _ => unsafe { storage::VertexAttribParameteriAMD.f = transmute(failing::VertexAttribParameteriAMD); storage::VertexAttribParameteriAMD.is_loaded = false; } }
    match loadfn("VertexAttribPointer") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribPointer.f = transmute(ptr); storage::VertexAttribPointer.is_loaded = true; }, _ => unsafe { storage::VertexAttribPointer.f = transmute(failing::VertexAttribPointer); storage::VertexAttribPointer.is_loaded = false; } }
    match loadfn("VertexAttribPointerARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribPointerARB.f = transmute(ptr); storage::VertexAttribPointerARB.is_loaded = true; }, _ => unsafe { storage::VertexAttribPointerARB.f = transmute(failing::VertexAttribPointerARB); storage::VertexAttribPointerARB.is_loaded = false; } }
    match loadfn("VertexAttribPointerNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribPointerNV.f = transmute(ptr); storage::VertexAttribPointerNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribPointerNV.f = transmute(failing::VertexAttribPointerNV); storage::VertexAttribPointerNV.is_loaded = false; } }
    match loadfn("VertexAttribs1dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs1dvNV.f = transmute(ptr); storage::VertexAttribs1dvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs1dvNV.f = transmute(failing::VertexAttribs1dvNV); storage::VertexAttribs1dvNV.is_loaded = false; } }
    match loadfn("VertexAttribs1fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs1fvNV.f = transmute(ptr); storage::VertexAttribs1fvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs1fvNV.f = transmute(failing::VertexAttribs1fvNV); storage::VertexAttribs1fvNV.is_loaded = false; } }
    match loadfn("VertexAttribs1hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs1hvNV.f = transmute(ptr); storage::VertexAttribs1hvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs1hvNV.f = transmute(failing::VertexAttribs1hvNV); storage::VertexAttribs1hvNV.is_loaded = false; } }
    match loadfn("VertexAttribs1svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs1svNV.f = transmute(ptr); storage::VertexAttribs1svNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs1svNV.f = transmute(failing::VertexAttribs1svNV); storage::VertexAttribs1svNV.is_loaded = false; } }
    match loadfn("VertexAttribs2dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs2dvNV.f = transmute(ptr); storage::VertexAttribs2dvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs2dvNV.f = transmute(failing::VertexAttribs2dvNV); storage::VertexAttribs2dvNV.is_loaded = false; } }
    match loadfn("VertexAttribs2fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs2fvNV.f = transmute(ptr); storage::VertexAttribs2fvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs2fvNV.f = transmute(failing::VertexAttribs2fvNV); storage::VertexAttribs2fvNV.is_loaded = false; } }
    match loadfn("VertexAttribs2hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs2hvNV.f = transmute(ptr); storage::VertexAttribs2hvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs2hvNV.f = transmute(failing::VertexAttribs2hvNV); storage::VertexAttribs2hvNV.is_loaded = false; } }
    match loadfn("VertexAttribs2svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs2svNV.f = transmute(ptr); storage::VertexAttribs2svNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs2svNV.f = transmute(failing::VertexAttribs2svNV); storage::VertexAttribs2svNV.is_loaded = false; } }
    match loadfn("VertexAttribs3dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs3dvNV.f = transmute(ptr); storage::VertexAttribs3dvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs3dvNV.f = transmute(failing::VertexAttribs3dvNV); storage::VertexAttribs3dvNV.is_loaded = false; } }
    match loadfn("VertexAttribs3fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs3fvNV.f = transmute(ptr); storage::VertexAttribs3fvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs3fvNV.f = transmute(failing::VertexAttribs3fvNV); storage::VertexAttribs3fvNV.is_loaded = false; } }
    match loadfn("VertexAttribs3hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs3hvNV.f = transmute(ptr); storage::VertexAttribs3hvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs3hvNV.f = transmute(failing::VertexAttribs3hvNV); storage::VertexAttribs3hvNV.is_loaded = false; } }
    match loadfn("VertexAttribs3svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs3svNV.f = transmute(ptr); storage::VertexAttribs3svNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs3svNV.f = transmute(failing::VertexAttribs3svNV); storage::VertexAttribs3svNV.is_loaded = false; } }
    match loadfn("VertexAttribs4dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4dvNV.f = transmute(ptr); storage::VertexAttribs4dvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs4dvNV.f = transmute(failing::VertexAttribs4dvNV); storage::VertexAttribs4dvNV.is_loaded = false; } }
    match loadfn("VertexAttribs4fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4fvNV.f = transmute(ptr); storage::VertexAttribs4fvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs4fvNV.f = transmute(failing::VertexAttribs4fvNV); storage::VertexAttribs4fvNV.is_loaded = false; } }
    match loadfn("VertexAttribs4hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4hvNV.f = transmute(ptr); storage::VertexAttribs4hvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs4hvNV.f = transmute(failing::VertexAttribs4hvNV); storage::VertexAttribs4hvNV.is_loaded = false; } }
    match loadfn("VertexAttribs4svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4svNV.f = transmute(ptr); storage::VertexAttribs4svNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs4svNV.f = transmute(failing::VertexAttribs4svNV); storage::VertexAttribs4svNV.is_loaded = false; } }
    match loadfn("VertexAttribs4ubvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4ubvNV.f = transmute(ptr); storage::VertexAttribs4ubvNV.is_loaded = true; }, _ => unsafe { storage::VertexAttribs4ubvNV.f = transmute(failing::VertexAttribs4ubvNV); storage::VertexAttribs4ubvNV.is_loaded = false; } }
    match loadfn("VertexBindingDivisor") { ptr if !ptr.is_null() => unsafe { storage::VertexBindingDivisor.f = transmute(ptr); storage::VertexBindingDivisor.is_loaded = true; }, _ => unsafe { storage::VertexBindingDivisor.f = transmute(failing::VertexBindingDivisor); storage::VertexBindingDivisor.is_loaded = false; } }
    match loadfn("VertexBlendARB") { ptr if !ptr.is_null() => unsafe { storage::VertexBlendARB.f = transmute(ptr); storage::VertexBlendARB.is_loaded = true; }, _ => unsafe { storage::VertexBlendARB.f = transmute(failing::VertexBlendARB); storage::VertexBlendARB.is_loaded = false; } }
    match loadfn("VertexBlendEnvfATI") { ptr if !ptr.is_null() => unsafe { storage::VertexBlendEnvfATI.f = transmute(ptr); storage::VertexBlendEnvfATI.is_loaded = true; }, _ => unsafe { storage::VertexBlendEnvfATI.f = transmute(failing::VertexBlendEnvfATI); storage::VertexBlendEnvfATI.is_loaded = false; } }
    match loadfn("VertexBlendEnviATI") { ptr if !ptr.is_null() => unsafe { storage::VertexBlendEnviATI.f = transmute(ptr); storage::VertexBlendEnviATI.is_loaded = true; }, _ => unsafe { storage::VertexBlendEnviATI.f = transmute(failing::VertexBlendEnviATI); storage::VertexBlendEnviATI.is_loaded = false; } }
    match loadfn("VertexFormatNV") { ptr if !ptr.is_null() => unsafe { storage::VertexFormatNV.f = transmute(ptr); storage::VertexFormatNV.is_loaded = true; }, _ => unsafe { storage::VertexFormatNV.f = transmute(failing::VertexFormatNV); storage::VertexFormatNV.is_loaded = false; } }
    match loadfn("VertexP2ui") { ptr if !ptr.is_null() => unsafe { storage::VertexP2ui.f = transmute(ptr); storage::VertexP2ui.is_loaded = true; }, _ => unsafe { storage::VertexP2ui.f = transmute(failing::VertexP2ui); storage::VertexP2ui.is_loaded = false; } }
    match loadfn("VertexP2uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexP2uiv.f = transmute(ptr); storage::VertexP2uiv.is_loaded = true; }, _ => unsafe { storage::VertexP2uiv.f = transmute(failing::VertexP2uiv); storage::VertexP2uiv.is_loaded = false; } }
    match loadfn("VertexP3ui") { ptr if !ptr.is_null() => unsafe { storage::VertexP3ui.f = transmute(ptr); storage::VertexP3ui.is_loaded = true; }, _ => unsafe { storage::VertexP3ui.f = transmute(failing::VertexP3ui); storage::VertexP3ui.is_loaded = false; } }
    match loadfn("VertexP3uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexP3uiv.f = transmute(ptr); storage::VertexP3uiv.is_loaded = true; }, _ => unsafe { storage::VertexP3uiv.f = transmute(failing::VertexP3uiv); storage::VertexP3uiv.is_loaded = false; } }
    match loadfn("VertexP4ui") { ptr if !ptr.is_null() => unsafe { storage::VertexP4ui.f = transmute(ptr); storage::VertexP4ui.is_loaded = true; }, _ => unsafe { storage::VertexP4ui.f = transmute(failing::VertexP4ui); storage::VertexP4ui.is_loaded = false; } }
    match loadfn("VertexP4uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexP4uiv.f = transmute(ptr); storage::VertexP4uiv.is_loaded = true; }, _ => unsafe { storage::VertexP4uiv.f = transmute(failing::VertexP4uiv); storage::VertexP4uiv.is_loaded = false; } }
    match loadfn("VertexPointer") { ptr if !ptr.is_null() => unsafe { storage::VertexPointer.f = transmute(ptr); storage::VertexPointer.is_loaded = true; }, _ => unsafe { storage::VertexPointer.f = transmute(failing::VertexPointer); storage::VertexPointer.is_loaded = false; } }
    match loadfn("VertexPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexPointerEXT.f = transmute(ptr); storage::VertexPointerEXT.is_loaded = true; }, _ => unsafe { storage::VertexPointerEXT.f = transmute(failing::VertexPointerEXT); storage::VertexPointerEXT.is_loaded = false; } }
    match loadfn("VertexPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::VertexPointerListIBM.f = transmute(ptr); storage::VertexPointerListIBM.is_loaded = true; }, _ => unsafe { storage::VertexPointerListIBM.f = transmute(failing::VertexPointerListIBM); storage::VertexPointerListIBM.is_loaded = false; } }
    match loadfn("VertexPointervINTEL") { ptr if !ptr.is_null() => unsafe { storage::VertexPointervINTEL.f = transmute(ptr); storage::VertexPointervINTEL.is_loaded = true; }, _ => unsafe { storage::VertexPointervINTEL.f = transmute(failing::VertexPointervINTEL); storage::VertexPointervINTEL.is_loaded = false; } }
    match loadfn("VertexStream1dATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1dATI.f = transmute(ptr); storage::VertexStream1dATI.is_loaded = true; }, _ => unsafe { storage::VertexStream1dATI.f = transmute(failing::VertexStream1dATI); storage::VertexStream1dATI.is_loaded = false; } }
    match loadfn("VertexStream1dvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1dvATI.f = transmute(ptr); storage::VertexStream1dvATI.is_loaded = true; }, _ => unsafe { storage::VertexStream1dvATI.f = transmute(failing::VertexStream1dvATI); storage::VertexStream1dvATI.is_loaded = false; } }
    match loadfn("VertexStream1fATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1fATI.f = transmute(ptr); storage::VertexStream1fATI.is_loaded = true; }, _ => unsafe { storage::VertexStream1fATI.f = transmute(failing::VertexStream1fATI); storage::VertexStream1fATI.is_loaded = false; } }
    match loadfn("VertexStream1fvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1fvATI.f = transmute(ptr); storage::VertexStream1fvATI.is_loaded = true; }, _ => unsafe { storage::VertexStream1fvATI.f = transmute(failing::VertexStream1fvATI); storage::VertexStream1fvATI.is_loaded = false; } }
    match loadfn("VertexStream1iATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1iATI.f = transmute(ptr); storage::VertexStream1iATI.is_loaded = true; }, _ => unsafe { storage::VertexStream1iATI.f = transmute(failing::VertexStream1iATI); storage::VertexStream1iATI.is_loaded = false; } }
    match loadfn("VertexStream1ivATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1ivATI.f = transmute(ptr); storage::VertexStream1ivATI.is_loaded = true; }, _ => unsafe { storage::VertexStream1ivATI.f = transmute(failing::VertexStream1ivATI); storage::VertexStream1ivATI.is_loaded = false; } }
    match loadfn("VertexStream1sATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1sATI.f = transmute(ptr); storage::VertexStream1sATI.is_loaded = true; }, _ => unsafe { storage::VertexStream1sATI.f = transmute(failing::VertexStream1sATI); storage::VertexStream1sATI.is_loaded = false; } }
    match loadfn("VertexStream1svATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1svATI.f = transmute(ptr); storage::VertexStream1svATI.is_loaded = true; }, _ => unsafe { storage::VertexStream1svATI.f = transmute(failing::VertexStream1svATI); storage::VertexStream1svATI.is_loaded = false; } }
    match loadfn("VertexStream2dATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2dATI.f = transmute(ptr); storage::VertexStream2dATI.is_loaded = true; }, _ => unsafe { storage::VertexStream2dATI.f = transmute(failing::VertexStream2dATI); storage::VertexStream2dATI.is_loaded = false; } }
    match loadfn("VertexStream2dvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2dvATI.f = transmute(ptr); storage::VertexStream2dvATI.is_loaded = true; }, _ => unsafe { storage::VertexStream2dvATI.f = transmute(failing::VertexStream2dvATI); storage::VertexStream2dvATI.is_loaded = false; } }
    match loadfn("VertexStream2fATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2fATI.f = transmute(ptr); storage::VertexStream2fATI.is_loaded = true; }, _ => unsafe { storage::VertexStream2fATI.f = transmute(failing::VertexStream2fATI); storage::VertexStream2fATI.is_loaded = false; } }
    match loadfn("VertexStream2fvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2fvATI.f = transmute(ptr); storage::VertexStream2fvATI.is_loaded = true; }, _ => unsafe { storage::VertexStream2fvATI.f = transmute(failing::VertexStream2fvATI); storage::VertexStream2fvATI.is_loaded = false; } }
    match loadfn("VertexStream2iATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2iATI.f = transmute(ptr); storage::VertexStream2iATI.is_loaded = true; }, _ => unsafe { storage::VertexStream2iATI.f = transmute(failing::VertexStream2iATI); storage::VertexStream2iATI.is_loaded = false; } }
    match loadfn("VertexStream2ivATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2ivATI.f = transmute(ptr); storage::VertexStream2ivATI.is_loaded = true; }, _ => unsafe { storage::VertexStream2ivATI.f = transmute(failing::VertexStream2ivATI); storage::VertexStream2ivATI.is_loaded = false; } }
    match loadfn("VertexStream2sATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2sATI.f = transmute(ptr); storage::VertexStream2sATI.is_loaded = true; }, _ => unsafe { storage::VertexStream2sATI.f = transmute(failing::VertexStream2sATI); storage::VertexStream2sATI.is_loaded = false; } }
    match loadfn("VertexStream2svATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2svATI.f = transmute(ptr); storage::VertexStream2svATI.is_loaded = true; }, _ => unsafe { storage::VertexStream2svATI.f = transmute(failing::VertexStream2svATI); storage::VertexStream2svATI.is_loaded = false; } }
    match loadfn("VertexStream3dATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3dATI.f = transmute(ptr); storage::VertexStream3dATI.is_loaded = true; }, _ => unsafe { storage::VertexStream3dATI.f = transmute(failing::VertexStream3dATI); storage::VertexStream3dATI.is_loaded = false; } }
    match loadfn("VertexStream3dvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3dvATI.f = transmute(ptr); storage::VertexStream3dvATI.is_loaded = true; }, _ => unsafe { storage::VertexStream3dvATI.f = transmute(failing::VertexStream3dvATI); storage::VertexStream3dvATI.is_loaded = false; } }
    match loadfn("VertexStream3fATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3fATI.f = transmute(ptr); storage::VertexStream3fATI.is_loaded = true; }, _ => unsafe { storage::VertexStream3fATI.f = transmute(failing::VertexStream3fATI); storage::VertexStream3fATI.is_loaded = false; } }
    match loadfn("VertexStream3fvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3fvATI.f = transmute(ptr); storage::VertexStream3fvATI.is_loaded = true; }, _ => unsafe { storage::VertexStream3fvATI.f = transmute(failing::VertexStream3fvATI); storage::VertexStream3fvATI.is_loaded = false; } }
    match loadfn("VertexStream3iATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3iATI.f = transmute(ptr); storage::VertexStream3iATI.is_loaded = true; }, _ => unsafe { storage::VertexStream3iATI.f = transmute(failing::VertexStream3iATI); storage::VertexStream3iATI.is_loaded = false; } }
    match loadfn("VertexStream3ivATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3ivATI.f = transmute(ptr); storage::VertexStream3ivATI.is_loaded = true; }, _ => unsafe { storage::VertexStream3ivATI.f = transmute(failing::VertexStream3ivATI); storage::VertexStream3ivATI.is_loaded = false; } }
    match loadfn("VertexStream3sATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3sATI.f = transmute(ptr); storage::VertexStream3sATI.is_loaded = true; }, _ => unsafe { storage::VertexStream3sATI.f = transmute(failing::VertexStream3sATI); storage::VertexStream3sATI.is_loaded = false; } }
    match loadfn("VertexStream3svATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3svATI.f = transmute(ptr); storage::VertexStream3svATI.is_loaded = true; }, _ => unsafe { storage::VertexStream3svATI.f = transmute(failing::VertexStream3svATI); storage::VertexStream3svATI.is_loaded = false; } }
    match loadfn("VertexStream4dATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4dATI.f = transmute(ptr); storage::VertexStream4dATI.is_loaded = true; }, _ => unsafe { storage::VertexStream4dATI.f = transmute(failing::VertexStream4dATI); storage::VertexStream4dATI.is_loaded = false; } }
    match loadfn("VertexStream4dvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4dvATI.f = transmute(ptr); storage::VertexStream4dvATI.is_loaded = true; }, _ => unsafe { storage::VertexStream4dvATI.f = transmute(failing::VertexStream4dvATI); storage::VertexStream4dvATI.is_loaded = false; } }
    match loadfn("VertexStream4fATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4fATI.f = transmute(ptr); storage::VertexStream4fATI.is_loaded = true; }, _ => unsafe { storage::VertexStream4fATI.f = transmute(failing::VertexStream4fATI); storage::VertexStream4fATI.is_loaded = false; } }
    match loadfn("VertexStream4fvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4fvATI.f = transmute(ptr); storage::VertexStream4fvATI.is_loaded = true; }, _ => unsafe { storage::VertexStream4fvATI.f = transmute(failing::VertexStream4fvATI); storage::VertexStream4fvATI.is_loaded = false; } }
    match loadfn("VertexStream4iATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4iATI.f = transmute(ptr); storage::VertexStream4iATI.is_loaded = true; }, _ => unsafe { storage::VertexStream4iATI.f = transmute(failing::VertexStream4iATI); storage::VertexStream4iATI.is_loaded = false; } }
    match loadfn("VertexStream4ivATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4ivATI.f = transmute(ptr); storage::VertexStream4ivATI.is_loaded = true; }, _ => unsafe { storage::VertexStream4ivATI.f = transmute(failing::VertexStream4ivATI); storage::VertexStream4ivATI.is_loaded = false; } }
    match loadfn("VertexStream4sATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4sATI.f = transmute(ptr); storage::VertexStream4sATI.is_loaded = true; }, _ => unsafe { storage::VertexStream4sATI.f = transmute(failing::VertexStream4sATI); storage::VertexStream4sATI.is_loaded = false; } }
    match loadfn("VertexStream4svATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4svATI.f = transmute(ptr); storage::VertexStream4svATI.is_loaded = true; }, _ => unsafe { storage::VertexStream4svATI.f = transmute(failing::VertexStream4svATI); storage::VertexStream4svATI.is_loaded = false; } }
    match loadfn("VertexWeightPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexWeightPointerEXT.f = transmute(ptr); storage::VertexWeightPointerEXT.is_loaded = true; }, _ => unsafe { storage::VertexWeightPointerEXT.f = transmute(failing::VertexWeightPointerEXT); storage::VertexWeightPointerEXT.is_loaded = false; } }
    match loadfn("VertexWeightfEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexWeightfEXT.f = transmute(ptr); storage::VertexWeightfEXT.is_loaded = true; }, _ => unsafe { storage::VertexWeightfEXT.f = transmute(failing::VertexWeightfEXT); storage::VertexWeightfEXT.is_loaded = false; } }
    match loadfn("VertexWeightfvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexWeightfvEXT.f = transmute(ptr); storage::VertexWeightfvEXT.is_loaded = true; }, _ => unsafe { storage::VertexWeightfvEXT.f = transmute(failing::VertexWeightfvEXT); storage::VertexWeightfvEXT.is_loaded = false; } }
    match loadfn("VertexWeighthNV") { ptr if !ptr.is_null() => unsafe { storage::VertexWeighthNV.f = transmute(ptr); storage::VertexWeighthNV.is_loaded = true; }, _ => unsafe { storage::VertexWeighthNV.f = transmute(failing::VertexWeighthNV); storage::VertexWeighthNV.is_loaded = false; } }
    match loadfn("VertexWeighthvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexWeighthvNV.f = transmute(ptr); storage::VertexWeighthvNV.is_loaded = true; }, _ => unsafe { storage::VertexWeighthvNV.f = transmute(failing::VertexWeighthvNV); storage::VertexWeighthvNV.is_loaded = false; } }
    match loadfn("VideoCaptureNV") { ptr if !ptr.is_null() => unsafe { storage::VideoCaptureNV.f = transmute(ptr); storage::VideoCaptureNV.is_loaded = true; }, _ => unsafe { storage::VideoCaptureNV.f = transmute(failing::VideoCaptureNV); storage::VideoCaptureNV.is_loaded = false; } }
    match loadfn("VideoCaptureStreamParameterdvNV") { ptr if !ptr.is_null() => unsafe { storage::VideoCaptureStreamParameterdvNV.f = transmute(ptr); storage::VideoCaptureStreamParameterdvNV.is_loaded = true; }, _ => unsafe { storage::VideoCaptureStreamParameterdvNV.f = transmute(failing::VideoCaptureStreamParameterdvNV); storage::VideoCaptureStreamParameterdvNV.is_loaded = false; } }
    match loadfn("VideoCaptureStreamParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::VideoCaptureStreamParameterfvNV.f = transmute(ptr); storage::VideoCaptureStreamParameterfvNV.is_loaded = true; }, _ => unsafe { storage::VideoCaptureStreamParameterfvNV.f = transmute(failing::VideoCaptureStreamParameterfvNV); storage::VideoCaptureStreamParameterfvNV.is_loaded = false; } }
    match loadfn("VideoCaptureStreamParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::VideoCaptureStreamParameterivNV.f = transmute(ptr); storage::VideoCaptureStreamParameterivNV.is_loaded = true; }, _ => unsafe { storage::VideoCaptureStreamParameterivNV.f = transmute(failing::VideoCaptureStreamParameterivNV); storage::VideoCaptureStreamParameterivNV.is_loaded = false; } }
    match loadfn("Viewport") { ptr if !ptr.is_null() => unsafe { storage::Viewport.f = transmute(ptr); storage::Viewport.is_loaded = true; }, _ => unsafe { storage::Viewport.f = transmute(failing::Viewport); storage::Viewport.is_loaded = false; } }
    match loadfn("ViewportArrayv") { ptr if !ptr.is_null() => unsafe { storage::ViewportArrayv.f = transmute(ptr); storage::ViewportArrayv.is_loaded = true; }, _ => unsafe { storage::ViewportArrayv.f = transmute(failing::ViewportArrayv); storage::ViewportArrayv.is_loaded = false; } }
    match loadfn("ViewportIndexedf") { ptr if !ptr.is_null() => unsafe { storage::ViewportIndexedf.f = transmute(ptr); storage::ViewportIndexedf.is_loaded = true; }, _ => unsafe { storage::ViewportIndexedf.f = transmute(failing::ViewportIndexedf); storage::ViewportIndexedf.is_loaded = false; } }
    match loadfn("ViewportIndexedfv") { ptr if !ptr.is_null() => unsafe { storage::ViewportIndexedfv.f = transmute(ptr); storage::ViewportIndexedfv.is_loaded = true; }, _ => unsafe { storage::ViewportIndexedfv.f = transmute(failing::ViewportIndexedfv); storage::ViewportIndexedfv.is_loaded = false; } }
    match loadfn("WaitSync") { ptr if !ptr.is_null() => unsafe { storage::WaitSync.f = transmute(ptr); storage::WaitSync.is_loaded = true; }, _ => unsafe { storage::WaitSync.f = transmute(failing::WaitSync); storage::WaitSync.is_loaded = false; } }
    match loadfn("WaitSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::WaitSyncAPPLE.f = transmute(ptr); storage::WaitSyncAPPLE.is_loaded = true; }, _ => unsafe { storage::WaitSyncAPPLE.f = transmute(failing::WaitSyncAPPLE); storage::WaitSyncAPPLE.is_loaded = false; } }
    match loadfn("WeightPathsNV") { ptr if !ptr.is_null() => unsafe { storage::WeightPathsNV.f = transmute(ptr); storage::WeightPathsNV.is_loaded = true; }, _ => unsafe { storage::WeightPathsNV.f = transmute(failing::WeightPathsNV); storage::WeightPathsNV.is_loaded = false; } }
    match loadfn("WeightPointerARB") { ptr if !ptr.is_null() => unsafe { storage::WeightPointerARB.f = transmute(ptr); storage::WeightPointerARB.is_loaded = true; }, _ => unsafe { storage::WeightPointerARB.f = transmute(failing::WeightPointerARB); storage::WeightPointerARB.is_loaded = false; } }
    match loadfn("WeightPointerOES") { ptr if !ptr.is_null() => unsafe { storage::WeightPointerOES.f = transmute(ptr); storage::WeightPointerOES.is_loaded = true; }, _ => unsafe { storage::WeightPointerOES.f = transmute(failing::WeightPointerOES); storage::WeightPointerOES.is_loaded = false; } }
    match loadfn("WeightbvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightbvARB.f = transmute(ptr); storage::WeightbvARB.is_loaded = true; }, _ => unsafe { storage::WeightbvARB.f = transmute(failing::WeightbvARB); storage::WeightbvARB.is_loaded = false; } }
    match loadfn("WeightdvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightdvARB.f = transmute(ptr); storage::WeightdvARB.is_loaded = true; }, _ => unsafe { storage::WeightdvARB.f = transmute(failing::WeightdvARB); storage::WeightdvARB.is_loaded = false; } }
    match loadfn("WeightfvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightfvARB.f = transmute(ptr); storage::WeightfvARB.is_loaded = true; }, _ => unsafe { storage::WeightfvARB.f = transmute(failing::WeightfvARB); storage::WeightfvARB.is_loaded = false; } }
    match loadfn("WeightivARB") { ptr if !ptr.is_null() => unsafe { storage::WeightivARB.f = transmute(ptr); storage::WeightivARB.is_loaded = true; }, _ => unsafe { storage::WeightivARB.f = transmute(failing::WeightivARB); storage::WeightivARB.is_loaded = false; } }
    match loadfn("WeightsvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightsvARB.f = transmute(ptr); storage::WeightsvARB.is_loaded = true; }, _ => unsafe { storage::WeightsvARB.f = transmute(failing::WeightsvARB); storage::WeightsvARB.is_loaded = false; } }
    match loadfn("WeightubvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightubvARB.f = transmute(ptr); storage::WeightubvARB.is_loaded = true; }, _ => unsafe { storage::WeightubvARB.f = transmute(failing::WeightubvARB); storage::WeightubvARB.is_loaded = false; } }
    match loadfn("WeightuivARB") { ptr if !ptr.is_null() => unsafe { storage::WeightuivARB.f = transmute(ptr); storage::WeightuivARB.is_loaded = true; }, _ => unsafe { storage::WeightuivARB.f = transmute(failing::WeightuivARB); storage::WeightuivARB.is_loaded = false; } }
    match loadfn("WeightusvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightusvARB.f = transmute(ptr); storage::WeightusvARB.is_loaded = true; }, _ => unsafe { storage::WeightusvARB.f = transmute(failing::WeightusvARB); storage::WeightusvARB.is_loaded = false; } }
    match loadfn("WindowPos2d") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2d.f = transmute(ptr); storage::WindowPos2d.is_loaded = true; }, _ => unsafe { storage::WindowPos2d.f = transmute(failing::WindowPos2d); storage::WindowPos2d.is_loaded = false; } }
    match loadfn("WindowPos2dARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dARB.f = transmute(ptr); storage::WindowPos2dARB.is_loaded = true; }, _ => unsafe { storage::WindowPos2dARB.f = transmute(failing::WindowPos2dARB); storage::WindowPos2dARB.is_loaded = false; } }
    match loadfn("WindowPos2dMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dMESA.f = transmute(ptr); storage::WindowPos2dMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos2dMESA.f = transmute(failing::WindowPos2dMESA); storage::WindowPos2dMESA.is_loaded = false; } }
    match loadfn("WindowPos2dv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dv.f = transmute(ptr); storage::WindowPos2dv.is_loaded = true; }, _ => unsafe { storage::WindowPos2dv.f = transmute(failing::WindowPos2dv); storage::WindowPos2dv.is_loaded = false; } }
    match loadfn("WindowPos2dvARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dvARB.f = transmute(ptr); storage::WindowPos2dvARB.is_loaded = true; }, _ => unsafe { storage::WindowPos2dvARB.f = transmute(failing::WindowPos2dvARB); storage::WindowPos2dvARB.is_loaded = false; } }
    match loadfn("WindowPos2dvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dvMESA.f = transmute(ptr); storage::WindowPos2dvMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos2dvMESA.f = transmute(failing::WindowPos2dvMESA); storage::WindowPos2dvMESA.is_loaded = false; } }
    match loadfn("WindowPos2f") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2f.f = transmute(ptr); storage::WindowPos2f.is_loaded = true; }, _ => unsafe { storage::WindowPos2f.f = transmute(failing::WindowPos2f); storage::WindowPos2f.is_loaded = false; } }
    match loadfn("WindowPos2fARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fARB.f = transmute(ptr); storage::WindowPos2fARB.is_loaded = true; }, _ => unsafe { storage::WindowPos2fARB.f = transmute(failing::WindowPos2fARB); storage::WindowPos2fARB.is_loaded = false; } }
    match loadfn("WindowPos2fMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fMESA.f = transmute(ptr); storage::WindowPos2fMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos2fMESA.f = transmute(failing::WindowPos2fMESA); storage::WindowPos2fMESA.is_loaded = false; } }
    match loadfn("WindowPos2fv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fv.f = transmute(ptr); storage::WindowPos2fv.is_loaded = true; }, _ => unsafe { storage::WindowPos2fv.f = transmute(failing::WindowPos2fv); storage::WindowPos2fv.is_loaded = false; } }
    match loadfn("WindowPos2fvARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fvARB.f = transmute(ptr); storage::WindowPos2fvARB.is_loaded = true; }, _ => unsafe { storage::WindowPos2fvARB.f = transmute(failing::WindowPos2fvARB); storage::WindowPos2fvARB.is_loaded = false; } }
    match loadfn("WindowPos2fvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fvMESA.f = transmute(ptr); storage::WindowPos2fvMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos2fvMESA.f = transmute(failing::WindowPos2fvMESA); storage::WindowPos2fvMESA.is_loaded = false; } }
    match loadfn("WindowPos2i") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2i.f = transmute(ptr); storage::WindowPos2i.is_loaded = true; }, _ => unsafe { storage::WindowPos2i.f = transmute(failing::WindowPos2i); storage::WindowPos2i.is_loaded = false; } }
    match loadfn("WindowPos2iARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2iARB.f = transmute(ptr); storage::WindowPos2iARB.is_loaded = true; }, _ => unsafe { storage::WindowPos2iARB.f = transmute(failing::WindowPos2iARB); storage::WindowPos2iARB.is_loaded = false; } }
    match loadfn("WindowPos2iMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2iMESA.f = transmute(ptr); storage::WindowPos2iMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos2iMESA.f = transmute(failing::WindowPos2iMESA); storage::WindowPos2iMESA.is_loaded = false; } }
    match loadfn("WindowPos2iv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2iv.f = transmute(ptr); storage::WindowPos2iv.is_loaded = true; }, _ => unsafe { storage::WindowPos2iv.f = transmute(failing::WindowPos2iv); storage::WindowPos2iv.is_loaded = false; } }
    match loadfn("WindowPos2ivARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2ivARB.f = transmute(ptr); storage::WindowPos2ivARB.is_loaded = true; }, _ => unsafe { storage::WindowPos2ivARB.f = transmute(failing::WindowPos2ivARB); storage::WindowPos2ivARB.is_loaded = false; } }
    match loadfn("WindowPos2ivMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2ivMESA.f = transmute(ptr); storage::WindowPos2ivMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos2ivMESA.f = transmute(failing::WindowPos2ivMESA); storage::WindowPos2ivMESA.is_loaded = false; } }
    match loadfn("WindowPos2s") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2s.f = transmute(ptr); storage::WindowPos2s.is_loaded = true; }, _ => unsafe { storage::WindowPos2s.f = transmute(failing::WindowPos2s); storage::WindowPos2s.is_loaded = false; } }
    match loadfn("WindowPos2sARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2sARB.f = transmute(ptr); storage::WindowPos2sARB.is_loaded = true; }, _ => unsafe { storage::WindowPos2sARB.f = transmute(failing::WindowPos2sARB); storage::WindowPos2sARB.is_loaded = false; } }
    match loadfn("WindowPos2sMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2sMESA.f = transmute(ptr); storage::WindowPos2sMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos2sMESA.f = transmute(failing::WindowPos2sMESA); storage::WindowPos2sMESA.is_loaded = false; } }
    match loadfn("WindowPos2sv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2sv.f = transmute(ptr); storage::WindowPos2sv.is_loaded = true; }, _ => unsafe { storage::WindowPos2sv.f = transmute(failing::WindowPos2sv); storage::WindowPos2sv.is_loaded = false; } }
    match loadfn("WindowPos2svARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2svARB.f = transmute(ptr); storage::WindowPos2svARB.is_loaded = true; }, _ => unsafe { storage::WindowPos2svARB.f = transmute(failing::WindowPos2svARB); storage::WindowPos2svARB.is_loaded = false; } }
    match loadfn("WindowPos2svMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2svMESA.f = transmute(ptr); storage::WindowPos2svMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos2svMESA.f = transmute(failing::WindowPos2svMESA); storage::WindowPos2svMESA.is_loaded = false; } }
    match loadfn("WindowPos3d") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3d.f = transmute(ptr); storage::WindowPos3d.is_loaded = true; }, _ => unsafe { storage::WindowPos3d.f = transmute(failing::WindowPos3d); storage::WindowPos3d.is_loaded = false; } }
    match loadfn("WindowPos3dARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dARB.f = transmute(ptr); storage::WindowPos3dARB.is_loaded = true; }, _ => unsafe { storage::WindowPos3dARB.f = transmute(failing::WindowPos3dARB); storage::WindowPos3dARB.is_loaded = false; } }
    match loadfn("WindowPos3dMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dMESA.f = transmute(ptr); storage::WindowPos3dMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos3dMESA.f = transmute(failing::WindowPos3dMESA); storage::WindowPos3dMESA.is_loaded = false; } }
    match loadfn("WindowPos3dv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dv.f = transmute(ptr); storage::WindowPos3dv.is_loaded = true; }, _ => unsafe { storage::WindowPos3dv.f = transmute(failing::WindowPos3dv); storage::WindowPos3dv.is_loaded = false; } }
    match loadfn("WindowPos3dvARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dvARB.f = transmute(ptr); storage::WindowPos3dvARB.is_loaded = true; }, _ => unsafe { storage::WindowPos3dvARB.f = transmute(failing::WindowPos3dvARB); storage::WindowPos3dvARB.is_loaded = false; } }
    match loadfn("WindowPos3dvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dvMESA.f = transmute(ptr); storage::WindowPos3dvMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos3dvMESA.f = transmute(failing::WindowPos3dvMESA); storage::WindowPos3dvMESA.is_loaded = false; } }
    match loadfn("WindowPos3f") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3f.f = transmute(ptr); storage::WindowPos3f.is_loaded = true; }, _ => unsafe { storage::WindowPos3f.f = transmute(failing::WindowPos3f); storage::WindowPos3f.is_loaded = false; } }
    match loadfn("WindowPos3fARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fARB.f = transmute(ptr); storage::WindowPos3fARB.is_loaded = true; }, _ => unsafe { storage::WindowPos3fARB.f = transmute(failing::WindowPos3fARB); storage::WindowPos3fARB.is_loaded = false; } }
    match loadfn("WindowPos3fMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fMESA.f = transmute(ptr); storage::WindowPos3fMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos3fMESA.f = transmute(failing::WindowPos3fMESA); storage::WindowPos3fMESA.is_loaded = false; } }
    match loadfn("WindowPos3fv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fv.f = transmute(ptr); storage::WindowPos3fv.is_loaded = true; }, _ => unsafe { storage::WindowPos3fv.f = transmute(failing::WindowPos3fv); storage::WindowPos3fv.is_loaded = false; } }
    match loadfn("WindowPos3fvARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fvARB.f = transmute(ptr); storage::WindowPos3fvARB.is_loaded = true; }, _ => unsafe { storage::WindowPos3fvARB.f = transmute(failing::WindowPos3fvARB); storage::WindowPos3fvARB.is_loaded = false; } }
    match loadfn("WindowPos3fvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fvMESA.f = transmute(ptr); storage::WindowPos3fvMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos3fvMESA.f = transmute(failing::WindowPos3fvMESA); storage::WindowPos3fvMESA.is_loaded = false; } }
    match loadfn("WindowPos3i") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3i.f = transmute(ptr); storage::WindowPos3i.is_loaded = true; }, _ => unsafe { storage::WindowPos3i.f = transmute(failing::WindowPos3i); storage::WindowPos3i.is_loaded = false; } }
    match loadfn("WindowPos3iARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3iARB.f = transmute(ptr); storage::WindowPos3iARB.is_loaded = true; }, _ => unsafe { storage::WindowPos3iARB.f = transmute(failing::WindowPos3iARB); storage::WindowPos3iARB.is_loaded = false; } }
    match loadfn("WindowPos3iMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3iMESA.f = transmute(ptr); storage::WindowPos3iMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos3iMESA.f = transmute(failing::WindowPos3iMESA); storage::WindowPos3iMESA.is_loaded = false; } }
    match loadfn("WindowPos3iv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3iv.f = transmute(ptr); storage::WindowPos3iv.is_loaded = true; }, _ => unsafe { storage::WindowPos3iv.f = transmute(failing::WindowPos3iv); storage::WindowPos3iv.is_loaded = false; } }
    match loadfn("WindowPos3ivARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3ivARB.f = transmute(ptr); storage::WindowPos3ivARB.is_loaded = true; }, _ => unsafe { storage::WindowPos3ivARB.f = transmute(failing::WindowPos3ivARB); storage::WindowPos3ivARB.is_loaded = false; } }
    match loadfn("WindowPos3ivMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3ivMESA.f = transmute(ptr); storage::WindowPos3ivMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos3ivMESA.f = transmute(failing::WindowPos3ivMESA); storage::WindowPos3ivMESA.is_loaded = false; } }
    match loadfn("WindowPos3s") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3s.f = transmute(ptr); storage::WindowPos3s.is_loaded = true; }, _ => unsafe { storage::WindowPos3s.f = transmute(failing::WindowPos3s); storage::WindowPos3s.is_loaded = false; } }
    match loadfn("WindowPos3sARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3sARB.f = transmute(ptr); storage::WindowPos3sARB.is_loaded = true; }, _ => unsafe { storage::WindowPos3sARB.f = transmute(failing::WindowPos3sARB); storage::WindowPos3sARB.is_loaded = false; } }
    match loadfn("WindowPos3sMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3sMESA.f = transmute(ptr); storage::WindowPos3sMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos3sMESA.f = transmute(failing::WindowPos3sMESA); storage::WindowPos3sMESA.is_loaded = false; } }
    match loadfn("WindowPos3sv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3sv.f = transmute(ptr); storage::WindowPos3sv.is_loaded = true; }, _ => unsafe { storage::WindowPos3sv.f = transmute(failing::WindowPos3sv); storage::WindowPos3sv.is_loaded = false; } }
    match loadfn("WindowPos3svARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3svARB.f = transmute(ptr); storage::WindowPos3svARB.is_loaded = true; }, _ => unsafe { storage::WindowPos3svARB.f = transmute(failing::WindowPos3svARB); storage::WindowPos3svARB.is_loaded = false; } }
    match loadfn("WindowPos3svMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3svMESA.f = transmute(ptr); storage::WindowPos3svMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos3svMESA.f = transmute(failing::WindowPos3svMESA); storage::WindowPos3svMESA.is_loaded = false; } }
    match loadfn("WindowPos4dMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4dMESA.f = transmute(ptr); storage::WindowPos4dMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos4dMESA.f = transmute(failing::WindowPos4dMESA); storage::WindowPos4dMESA.is_loaded = false; } }
    match loadfn("WindowPos4dvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4dvMESA.f = transmute(ptr); storage::WindowPos4dvMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos4dvMESA.f = transmute(failing::WindowPos4dvMESA); storage::WindowPos4dvMESA.is_loaded = false; } }
    match loadfn("WindowPos4fMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4fMESA.f = transmute(ptr); storage::WindowPos4fMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos4fMESA.f = transmute(failing::WindowPos4fMESA); storage::WindowPos4fMESA.is_loaded = false; } }
    match loadfn("WindowPos4fvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4fvMESA.f = transmute(ptr); storage::WindowPos4fvMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos4fvMESA.f = transmute(failing::WindowPos4fvMESA); storage::WindowPos4fvMESA.is_loaded = false; } }
    match loadfn("WindowPos4iMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4iMESA.f = transmute(ptr); storage::WindowPos4iMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos4iMESA.f = transmute(failing::WindowPos4iMESA); storage::WindowPos4iMESA.is_loaded = false; } }
    match loadfn("WindowPos4ivMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4ivMESA.f = transmute(ptr); storage::WindowPos4ivMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos4ivMESA.f = transmute(failing::WindowPos4ivMESA); storage::WindowPos4ivMESA.is_loaded = false; } }
    match loadfn("WindowPos4sMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4sMESA.f = transmute(ptr); storage::WindowPos4sMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos4sMESA.f = transmute(failing::WindowPos4sMESA); storage::WindowPos4sMESA.is_loaded = false; } }
    match loadfn("WindowPos4svMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4svMESA.f = transmute(ptr); storage::WindowPos4svMESA.is_loaded = true; }, _ => unsafe { storage::WindowPos4svMESA.f = transmute(failing::WindowPos4svMESA); storage::WindowPos4svMESA.is_loaded = false; } }
    match loadfn("WriteMaskEXT") { ptr if !ptr.is_null() => unsafe { storage::WriteMaskEXT.f = transmute(ptr); storage::WriteMaskEXT.is_loaded = true; }, _ => unsafe { storage::WriteMaskEXT.f = transmute(failing::WriteMaskEXT); storage::WriteMaskEXT.is_loaded = false; } }
}

