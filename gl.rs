// Copyright 2013 The gl-rs developers. For a full listing of the authors,
// refer to the AUTHORS file at the top-level directory of this distribution.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#[link(name = "gl",
       author = "Brendan Zabarauskas",
       url = "https://github.com/bjz/gl-rs",
       vers = "0.1")];
#[comment = "An OpenGL function loader."];
#[license = "ASL2"];
#[crate_type = "lib"];

use std::libc::*;
use self::types::*;

mod types {
    use std::libc::*;
    
    // Common types from OpenGL 1.1
    pub type GLenum = c_uint;
    pub type GLboolean = c_uchar;
    pub type GLbitfield = c_uint;
    pub type GLvoid = c_void;
    pub type GLbyte = c_char;
    pub type GLshort = c_short;
    pub type GLint = c_int;
    pub type GLclampx = c_int;
    pub type GLubyte = c_uchar;
    pub type GLushort = c_ushort;
    pub type GLuint = c_uint;
    pub type GLsizei = c_int;
    pub type GLfloat = c_float;
    pub type GLclampf = c_float;
    pub type GLdouble = c_double;
    pub type GLclampd = c_double;
    pub type GLeglImageOES = *c_void;
    pub type GLchar = c_char;
    pub type GLcharARB = c_char;
    
    #[cfg(target_os = "macos")]
    pub type GLhandleARB = *c_void;
    #[cfg(not(target_os = "macos"))]
    pub type GLhandleARB = c_uint;
    
    pub type GLhalfARB = c_ushort;
    pub type GLhalf = c_ushort;
    
    // Must be 32 bits
    pub type GLfixed = GLint;
    
    pub type GLintptr = ptrdiff_t;
    pub type GLsizeiptr = ptrdiff_t;
    pub type GLint64 = i64;
    pub type GLuint64 = u64;
    pub type GLintptrARB = ptrdiff_t;
    pub type GLsizeiptrARB = ptrdiff_t;
    pub type GLint64EXT = i64;
    pub type GLuint64EXT = u64;
    
    pub struct __GLsync;
    pub type GLsync = *__GLsync;
    
    // compatible with OpenCL cl_context
    pub struct _cl_context;
    pub struct _cl_event;
    
    pub type GLDEBUGPROC = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLDEBUGPROCARB = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLDEBUGPROCKHR = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    
    // Vendor extension types
    pub type GLDEBUGPROCAMD = extern "C" fn(id: GLuint, category: GLenum, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLhalfNV = c_ushort;
    pub type GLvdpauSurfaceNV = GLintptr;
}

pub static CURRENT_BIT: GLenum = 0x00000001;
pub static POINT_BIT: GLenum = 0x00000002;
pub static LINE_BIT: GLenum = 0x00000004;
pub static POLYGON_BIT: GLenum = 0x00000008;
pub static POLYGON_STIPPLE_BIT: GLenum = 0x00000010;
pub static PIXEL_MODE_BIT: GLenum = 0x00000020;
pub static LIGHTING_BIT: GLenum = 0x00000040;
pub static FOG_BIT: GLenum = 0x00000080;
pub static DEPTH_BUFFER_BIT: GLenum = 0x00000100;
pub static ACCUM_BUFFER_BIT: GLenum = 0x00000200;
pub static STENCIL_BUFFER_BIT: GLenum = 0x00000400;
pub static VIEWPORT_BIT: GLenum = 0x00000800;
pub static TRANSFORM_BIT: GLenum = 0x00001000;
pub static ENABLE_BIT: GLenum = 0x00002000;
pub static COLOR_BUFFER_BIT: GLenum = 0x00004000;
pub static HINT_BIT: GLenum = 0x00008000;
pub static EVAL_BIT: GLenum = 0x00010000;
pub static LIST_BIT: GLenum = 0x00020000;
pub static TEXTURE_BIT: GLenum = 0x00040000;
pub static SCISSOR_BIT: GLenum = 0x00080000;
pub static MULTISAMPLE_BIT: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_ARB: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_EXT: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_3DFX: GLenum = 0x20000000;
pub static ALL_ATTRIB_BITS: GLenum = 0xFFFFFFFF;
pub static COVERAGE_BUFFER_BIT_NV: GLenum = 0x00008000;
pub static CLIENT_PIXEL_STORE_BIT: GLenum = 0x00000001;
pub static CLIENT_VERTEX_ARRAY_BIT: GLenum = 0x00000002;
pub static CLIENT_ALL_ATTRIB_BITS: GLenum = 0xFFFFFFFF;
pub static CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: GLenum = 0x00000001;
pub static CONTEXT_FLAG_DEBUG_BIT: GLenum = 0x00000002;
pub static CONTEXT_FLAG_DEBUG_BIT_KHR: GLenum = 0x00000002;
pub static CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: GLenum = 0x00000004;
pub static CONTEXT_CORE_PROFILE_BIT: GLenum = 0x00000001;
pub static CONTEXT_COMPATIBILITY_PROFILE_BIT: GLenum = 0x00000002;
pub static MAP_READ_BIT: GLenum = 0x0001;
pub static MAP_READ_BIT_EXT: GLenum = 0x0001;
pub static MAP_WRITE_BIT: GLenum = 0x0002;
pub static MAP_WRITE_BIT_EXT: GLenum = 0x0002;
pub static MAP_INVALIDATE_RANGE_BIT: GLenum = 0x0004;
pub static MAP_INVALIDATE_RANGE_BIT_EXT: GLenum = 0x0004;
pub static MAP_INVALIDATE_BUFFER_BIT: GLenum = 0x0008;
pub static MAP_INVALIDATE_BUFFER_BIT_EXT: GLenum = 0x0008;
pub static MAP_FLUSH_EXPLICIT_BIT: GLenum = 0x0010;
pub static MAP_FLUSH_EXPLICIT_BIT_EXT: GLenum = 0x0010;
pub static MAP_UNSYNCHRONIZED_BIT: GLenum = 0x0020;
pub static MAP_UNSYNCHRONIZED_BIT_EXT: GLenum = 0x0020;
pub static MAP_PERSISTENT_BIT: GLenum = 0x0040;
pub static MAP_COHERENT_BIT: GLenum = 0x0080;
pub static DYNAMIC_STORAGE_BIT: GLenum = 0x0100;
pub static CLIENT_STORAGE_BIT: GLenum = 0x0200;
pub static VERTEX_ATTRIB_ARRAY_BARRIER_BIT: GLenum = 0x00000001;
pub static VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT: GLenum = 0x00000001;
pub static ELEMENT_ARRAY_BARRIER_BIT: GLenum = 0x00000002;
pub static ELEMENT_ARRAY_BARRIER_BIT_EXT: GLenum = 0x00000002;
pub static UNIFORM_BARRIER_BIT: GLenum = 0x00000004;
pub static UNIFORM_BARRIER_BIT_EXT: GLenum = 0x00000004;
pub static TEXTURE_FETCH_BARRIER_BIT: GLenum = 0x00000008;
pub static TEXTURE_FETCH_BARRIER_BIT_EXT: GLenum = 0x00000008;
pub static SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: GLenum = 0x00000010;
pub static SHADER_IMAGE_ACCESS_BARRIER_BIT: GLenum = 0x00000020;
pub static SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT: GLenum = 0x00000020;
pub static COMMAND_BARRIER_BIT: GLenum = 0x00000040;
pub static COMMAND_BARRIER_BIT_EXT: GLenum = 0x00000040;
pub static PIXEL_BUFFER_BARRIER_BIT: GLenum = 0x00000080;
pub static PIXEL_BUFFER_BARRIER_BIT_EXT: GLenum = 0x00000080;
pub static TEXTURE_UPDATE_BARRIER_BIT: GLenum = 0x00000100;
pub static TEXTURE_UPDATE_BARRIER_BIT_EXT: GLenum = 0x00000100;
pub static BUFFER_UPDATE_BARRIER_BIT: GLenum = 0x00000200;
pub static BUFFER_UPDATE_BARRIER_BIT_EXT: GLenum = 0x00000200;
pub static FRAMEBUFFER_BARRIER_BIT: GLenum = 0x00000400;
pub static FRAMEBUFFER_BARRIER_BIT_EXT: GLenum = 0x00000400;
pub static TRANSFORM_FEEDBACK_BARRIER_BIT: GLenum = 0x00000800;
pub static TRANSFORM_FEEDBACK_BARRIER_BIT_EXT: GLenum = 0x00000800;
pub static ATOMIC_COUNTER_BARRIER_BIT: GLenum = 0x00001000;
pub static ATOMIC_COUNTER_BARRIER_BIT_EXT: GLenum = 0x00001000;
pub static SHADER_STORAGE_BARRIER_BIT: GLenum = 0x00002000;
pub static CLIENT_MAPPED_BUFFER_BARRIER_BIT: GLenum = 0x00004000;
pub static QUERY_BUFFER_BARRIER_BIT: GLenum = 0x00008000;
pub static ALL_BARRIER_BITS: GLenum = 0xFFFFFFFF;
pub static ALL_BARRIER_BITS_EXT: GLenum = 0xFFFFFFFF;
pub static SYNC_FLUSH_COMMANDS_BIT: GLenum = 0x00000001;
pub static SYNC_FLUSH_COMMANDS_BIT_APPLE: GLenum = 0x00000001;
pub static VERTEX_SHADER_BIT: GLenum = 0x00000001;
pub static VERTEX_SHADER_BIT_EXT: GLenum = 0x00000001;
pub static FRAGMENT_SHADER_BIT: GLenum = 0x00000002;
pub static FRAGMENT_SHADER_BIT_EXT: GLenum = 0x00000002;
pub static GEOMETRY_SHADER_BIT: GLenum = 0x00000004;
pub static TESS_CONTROL_SHADER_BIT: GLenum = 0x00000008;
pub static TESS_EVALUATION_SHADER_BIT: GLenum = 0x00000010;
pub static COMPUTE_SHADER_BIT: GLenum = 0x00000020;
pub static ALL_SHADER_BITS: GLenum = 0xFFFFFFFF;
pub static ALL_SHADER_BITS_EXT: GLenum = 0xFFFFFFFF;
pub static TEXTURE_STORAGE_SPARSE_BIT_AMD: GLenum = 0x00000001;
pub static RED_BIT_ATI: GLenum = 0x00000001;
pub static GREEN_BIT_ATI: GLenum = 0x00000002;
pub static BLUE_BIT_ATI: GLenum = 0x00000004;
pub static _2X_BIT_ATI: GLenum = 0x00000001;
pub static _4X_BIT_ATI: GLenum = 0x00000002;
pub static _8X_BIT_ATI: GLenum = 0x00000004;
pub static HALF_BIT_ATI: GLenum = 0x00000008;
pub static QUARTER_BIT_ATI: GLenum = 0x00000010;
pub static EIGHTH_BIT_ATI: GLenum = 0x00000020;
pub static SATURATE_BIT_ATI: GLenum = 0x00000040;
pub static COMP_BIT_ATI: GLenum = 0x00000002;
pub static NEGATE_BIT_ATI: GLenum = 0x00000004;
pub static BIAS_BIT_ATI: GLenum = 0x00000008;
pub static TRACE_OPERATIONS_BIT_MESA: GLenum = 0x0001;
pub static TRACE_PRIMITIVES_BIT_MESA: GLenum = 0x0002;
pub static TRACE_ARRAYS_BIT_MESA: GLenum = 0x0004;
pub static TRACE_TEXTURES_BIT_MESA: GLenum = 0x0008;
pub static TRACE_PIXELS_BIT_MESA: GLenum = 0x0010;
pub static TRACE_ERRORS_BIT_MESA: GLenum = 0x0020;
pub static TRACE_ALL_BITS_MESA: GLenum = 0xFFFF;
pub static BOLD_BIT_NV: GLenum = 0x01;
pub static ITALIC_BIT_NV: GLenum = 0x02;
pub static GLYPH_WIDTH_BIT_NV: GLenum = 0x01;
pub static GLYPH_HEIGHT_BIT_NV: GLenum = 0x02;
pub static GLYPH_HORIZONTAL_BEARING_X_BIT_NV: GLenum = 0x04;
pub static GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: GLenum = 0x08;
pub static GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: GLenum = 0x10;
pub static GLYPH_VERTICAL_BEARING_X_BIT_NV: GLenum = 0x20;
pub static GLYPH_VERTICAL_BEARING_Y_BIT_NV: GLenum = 0x40;
pub static GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: GLenum = 0x80;
pub static GLYPH_HAS_KERNING_BIT_NV: GLenum = 0x100;
pub static FONT_X_MIN_BOUNDS_BIT_NV: GLenum = 0x00010000;
pub static FONT_Y_MIN_BOUNDS_BIT_NV: GLenum = 0x00020000;
pub static FONT_X_MAX_BOUNDS_BIT_NV: GLenum = 0x00040000;
pub static FONT_Y_MAX_BOUNDS_BIT_NV: GLenum = 0x00080000;
pub static FONT_UNITS_PER_EM_BIT_NV: GLenum = 0x00100000;
pub static FONT_ASCENDER_BIT_NV: GLenum = 0x00200000;
pub static FONT_DESCENDER_BIT_NV: GLenum = 0x00400000;
pub static FONT_HEIGHT_BIT_NV: GLenum = 0x00800000;
pub static FONT_MAX_ADVANCE_WIDTH_BIT_NV: GLenum = 0x01000000;
pub static FONT_MAX_ADVANCE_HEIGHT_BIT_NV: GLenum = 0x02000000;
pub static FONT_UNDERLINE_POSITION_BIT_NV: GLenum = 0x04000000;
pub static FONT_UNDERLINE_THICKNESS_BIT_NV: GLenum = 0x08000000;
pub static FONT_HAS_KERNING_BIT_NV: GLenum = 0x10000000;
pub static VERTEX23_BIT_PGI: GLenum = 0x00000004;
pub static VERTEX4_BIT_PGI: GLenum = 0x00000008;
pub static COLOR3_BIT_PGI: GLenum = 0x00010000;
pub static COLOR4_BIT_PGI: GLenum = 0x00020000;
pub static EDGEFLAG_BIT_PGI: GLenum = 0x00040000;
pub static INDEX_BIT_PGI: GLenum = 0x00080000;
pub static MAT_AMBIENT_BIT_PGI: GLenum = 0x00100000;
pub static MAT_AMBIENT_AND_DIFFUSE_BIT_PGI: GLenum = 0x00200000;
pub static MAT_DIFFUSE_BIT_PGI: GLenum = 0x00400000;
pub static MAT_EMISSION_BIT_PGI: GLenum = 0x00800000;
pub static MAT_COLOR_INDEXES_BIT_PGI: GLenum = 0x01000000;
pub static MAT_SHININESS_BIT_PGI: GLenum = 0x02000000;
pub static MAT_SPECULAR_BIT_PGI: GLenum = 0x04000000;
pub static NORMAL_BIT_PGI: GLenum = 0x08000000;
pub static TEXCOORD1_BIT_PGI: GLenum = 0x10000000;
pub static TEXCOORD2_BIT_PGI: GLenum = 0x20000000;
pub static TEXCOORD3_BIT_PGI: GLenum = 0x40000000;
pub static TEXCOORD4_BIT_PGI: GLenum = 0x80000000;
pub static COLOR_BUFFER_BIT0_QCOM: GLenum = 0x00000001;
pub static COLOR_BUFFER_BIT1_QCOM: GLenum = 0x00000002;
pub static COLOR_BUFFER_BIT2_QCOM: GLenum = 0x00000004;
pub static COLOR_BUFFER_BIT3_QCOM: GLenum = 0x00000008;
pub static COLOR_BUFFER_BIT4_QCOM: GLenum = 0x00000010;
pub static COLOR_BUFFER_BIT5_QCOM: GLenum = 0x00000020;
pub static COLOR_BUFFER_BIT6_QCOM: GLenum = 0x00000040;
pub static COLOR_BUFFER_BIT7_QCOM: GLenum = 0x00000080;
pub static DEPTH_BUFFER_BIT0_QCOM: GLenum = 0x00000100;
pub static DEPTH_BUFFER_BIT1_QCOM: GLenum = 0x00000200;
pub static DEPTH_BUFFER_BIT2_QCOM: GLenum = 0x00000400;
pub static DEPTH_BUFFER_BIT3_QCOM: GLenum = 0x00000800;
pub static DEPTH_BUFFER_BIT4_QCOM: GLenum = 0x00001000;
pub static DEPTH_BUFFER_BIT5_QCOM: GLenum = 0x00002000;
pub static DEPTH_BUFFER_BIT6_QCOM: GLenum = 0x00004000;
pub static DEPTH_BUFFER_BIT7_QCOM: GLenum = 0x00008000;
pub static STENCIL_BUFFER_BIT0_QCOM: GLenum = 0x00010000;
pub static STENCIL_BUFFER_BIT1_QCOM: GLenum = 0x00020000;
pub static STENCIL_BUFFER_BIT2_QCOM: GLenum = 0x00040000;
pub static STENCIL_BUFFER_BIT3_QCOM: GLenum = 0x00080000;
pub static STENCIL_BUFFER_BIT4_QCOM: GLenum = 0x00100000;
pub static STENCIL_BUFFER_BIT5_QCOM: GLenum = 0x00200000;
pub static STENCIL_BUFFER_BIT6_QCOM: GLenum = 0x00400000;
pub static STENCIL_BUFFER_BIT7_QCOM: GLenum = 0x00800000;
pub static MULTISAMPLE_BUFFER_BIT0_QCOM: GLenum = 0x01000000;
pub static MULTISAMPLE_BUFFER_BIT1_QCOM: GLenum = 0x02000000;
pub static MULTISAMPLE_BUFFER_BIT2_QCOM: GLenum = 0x04000000;
pub static MULTISAMPLE_BUFFER_BIT3_QCOM: GLenum = 0x08000000;
pub static MULTISAMPLE_BUFFER_BIT4_QCOM: GLenum = 0x10000000;
pub static MULTISAMPLE_BUFFER_BIT5_QCOM: GLenum = 0x20000000;
pub static MULTISAMPLE_BUFFER_BIT6_QCOM: GLenum = 0x40000000;
pub static MULTISAMPLE_BUFFER_BIT7_QCOM: GLenum = 0x80000000;
pub static TEXTURE_DEFORMATION_BIT_SGIX: GLenum = 0x00000001;
pub static GEOMETRY_DEFORMATION_BIT_SGIX: GLenum = 0x00000002;
pub static RESTART_SUN: GLenum = 0x0001;
pub static REPLACE_MIDDLE_SUN: GLenum = 0x0002;
pub static REPLACE_OLDEST_SUN: GLenum = 0x0003;
pub static LAYOUT_DEFAULT_INTEL: GLenum = 0;
pub static LAYOUT_LINEAR_INTEL: GLenum = 1;
pub static LAYOUT_LINEAR_CPU_CACHED_INTEL: GLenum = 2;
pub static NEXT_BUFFER_NV: GLenum = -2;
pub static SKIP_COMPONENTS4_NV: GLenum = -3;
pub static SKIP_COMPONENTS3_NV: GLenum = -4;
pub static SKIP_COMPONENTS2_NV: GLenum = -5;
pub static SKIP_COMPONENTS1_NV: GLenum = -6;
pub static CLOSE_PATH_NV: GLenum = 0x00;
pub static MOVE_TO_NV: GLenum = 0x02;
pub static RELATIVE_MOVE_TO_NV: GLenum = 0x03;
pub static LINE_TO_NV: GLenum = 0x04;
pub static RELATIVE_LINE_TO_NV: GLenum = 0x05;
pub static HORIZONTAL_LINE_TO_NV: GLenum = 0x06;
pub static RELATIVE_HORIZONTAL_LINE_TO_NV: GLenum = 0x07;
pub static VERTICAL_LINE_TO_NV: GLenum = 0x08;
pub static RELATIVE_VERTICAL_LINE_TO_NV: GLenum = 0x09;
pub static QUADRATIC_CURVE_TO_NV: GLenum = 0x0A;
pub static RELATIVE_QUADRATIC_CURVE_TO_NV: GLenum = 0x0B;
pub static CUBIC_CURVE_TO_NV: GLenum = 0x0C;
pub static RELATIVE_CUBIC_CURVE_TO_NV: GLenum = 0x0D;
pub static SMOOTH_QUADRATIC_CURVE_TO_NV: GLenum = 0x0E;
pub static RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: GLenum = 0x0F;
pub static SMOOTH_CUBIC_CURVE_TO_NV: GLenum = 0x10;
pub static RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: GLenum = 0x11;
pub static SMALL_CCW_ARC_TO_NV: GLenum = 0x12;
pub static RELATIVE_SMALL_CCW_ARC_TO_NV: GLenum = 0x13;
pub static SMALL_CW_ARC_TO_NV: GLenum = 0x14;
pub static RELATIVE_SMALL_CW_ARC_TO_NV: GLenum = 0x15;
pub static LARGE_CCW_ARC_TO_NV: GLenum = 0x16;
pub static RELATIVE_LARGE_CCW_ARC_TO_NV: GLenum = 0x17;
pub static LARGE_CW_ARC_TO_NV: GLenum = 0x18;
pub static RELATIVE_LARGE_CW_ARC_TO_NV: GLenum = 0x19;
pub static RESTART_PATH_NV: GLenum = 0xF0;
pub static DUP_FIRST_CUBIC_CURVE_TO_NV: GLenum = 0xF2;
pub static DUP_LAST_CUBIC_CURVE_TO_NV: GLenum = 0xF4;
pub static RECT_NV: GLenum = 0xF6;
pub static CIRCULAR_CCW_ARC_TO_NV: GLenum = 0xF8;
pub static CIRCULAR_CW_ARC_TO_NV: GLenum = 0xFA;
pub static CIRCULAR_TANGENT_ARC_TO_NV: GLenum = 0xFC;
pub static ARC_TO_NV: GLenum = 0xFE;
pub static RELATIVE_ARC_TO_NV: GLenum = 0xFF;
pub static FALSE: GLenum = 0;
pub static NO_ERROR: GLenum = 0;
pub static ZERO: GLenum = 0;
pub static NONE: GLenum = 0;
pub static TRUE: GLenum = 1;
pub static ONE: GLenum = 1;
pub static INVALID_INDEX: GLenum = 0xFFFFFFFF;
pub static TIMEOUT_IGNORED: GLenum = 0xFFFFFFFFFFFFFFFF;
pub static TIMEOUT_IGNORED_APPLE: GLenum = 0xFFFFFFFFFFFFFFFF;
pub static VERSION_ES_CL_1_0: GLenum = 1;
pub static VERSION_ES_CM_1_1: GLenum = 1;
pub static VERSION_ES_CL_1_1: GLenum = 1;
pub static POINTS: GLenum = 0x0000;
pub static LINES: GLenum = 0x0001;
pub static LINE_LOOP: GLenum = 0x0002;
pub static LINE_STRIP: GLenum = 0x0003;
pub static TRIANGLES: GLenum = 0x0004;
pub static TRIANGLE_STRIP: GLenum = 0x0005;
pub static TRIANGLE_FAN: GLenum = 0x0006;
pub static QUADS: GLenum = 0x0007;
pub static QUAD_STRIP: GLenum = 0x0008;
pub static POLYGON: GLenum = 0x0009;
pub static LINES_ADJACENCY: GLenum = 0x000A;
pub static LINES_ADJACENCY_ARB: GLenum = 0x000A;
pub static LINES_ADJACENCY_EXT: GLenum = 0x000A;
pub static LINE_STRIP_ADJACENCY: GLenum = 0x000B;
pub static LINE_STRIP_ADJACENCY_ARB: GLenum = 0x000B;
pub static LINE_STRIP_ADJACENCY_EXT: GLenum = 0x000B;
pub static TRIANGLES_ADJACENCY: GLenum = 0x000C;
pub static TRIANGLES_ADJACENCY_ARB: GLenum = 0x000C;
pub static TRIANGLES_ADJACENCY_EXT: GLenum = 0x000C;
pub static TRIANGLE_STRIP_ADJACENCY: GLenum = 0x000D;
pub static TRIANGLE_STRIP_ADJACENCY_ARB: GLenum = 0x000D;
pub static TRIANGLE_STRIP_ADJACENCY_EXT: GLenum = 0x000D;
pub static PATCHES: GLenum = 0x000E;
pub static ACCUM: GLenum = 0x0100;
pub static LOAD: GLenum = 0x0101;
pub static RETURN: GLenum = 0x0102;
pub static MULT: GLenum = 0x0103;
pub static ADD: GLenum = 0x0104;
pub static NEVER: GLenum = 0x0200;
pub static LESS: GLenum = 0x0201;
pub static EQUAL: GLenum = 0x0202;
pub static LEQUAL: GLenum = 0x0203;
pub static GREATER: GLenum = 0x0204;
pub static NOTEQUAL: GLenum = 0x0205;
pub static GEQUAL: GLenum = 0x0206;
pub static ALWAYS: GLenum = 0x0207;
pub static SRC_COLOR: GLenum = 0x0300;
pub static ONE_MINUS_SRC_COLOR: GLenum = 0x0301;
pub static SRC_ALPHA: GLenum = 0x0302;
pub static ONE_MINUS_SRC_ALPHA: GLenum = 0x0303;
pub static DST_ALPHA: GLenum = 0x0304;
pub static ONE_MINUS_DST_ALPHA: GLenum = 0x0305;
pub static DST_COLOR: GLenum = 0x0306;
pub static ONE_MINUS_DST_COLOR: GLenum = 0x0307;
pub static SRC_ALPHA_SATURATE: GLenum = 0x0308;
pub static FRONT_LEFT: GLenum = 0x0400;
pub static FRONT_RIGHT: GLenum = 0x0401;
pub static BACK_LEFT: GLenum = 0x0402;
pub static BACK_RIGHT: GLenum = 0x0403;
pub static FRONT: GLenum = 0x0404;
pub static BACK: GLenum = 0x0405;
pub static LEFT: GLenum = 0x0406;
pub static RIGHT: GLenum = 0x0407;
pub static FRONT_AND_BACK: GLenum = 0x0408;
pub static AUX0: GLenum = 0x0409;
pub static AUX1: GLenum = 0x040A;
pub static AUX2: GLenum = 0x040B;
pub static AUX3: GLenum = 0x040C;
pub static INVALID_ENUM: GLenum = 0x0500;
pub static INVALID_VALUE: GLenum = 0x0501;
pub static INVALID_OPERATION: GLenum = 0x0502;
pub static STACK_OVERFLOW: GLenum = 0x0503;
pub static STACK_OVERFLOW_KHR: GLenum = 0x0503;
pub static STACK_UNDERFLOW: GLenum = 0x0504;
pub static STACK_UNDERFLOW_KHR: GLenum = 0x0504;
pub static OUT_OF_MEMORY: GLenum = 0x0505;
pub static INVALID_FRAMEBUFFER_OPERATION: GLenum = 0x0506;
pub static INVALID_FRAMEBUFFER_OPERATION_EXT: GLenum = 0x0506;
pub static INVALID_FRAMEBUFFER_OPERATION_OES: GLenum = 0x0506;
pub static _2D: GLenum = 0x0600;
pub static _3D: GLenum = 0x0601;
pub static _3D_COLOR: GLenum = 0x0602;
pub static _3D_COLOR_TEXTURE: GLenum = 0x0603;
pub static _4D_COLOR_TEXTURE: GLenum = 0x0604;
pub static PASS_THROUGH_TOKEN: GLenum = 0x0700;
pub static POINT_TOKEN: GLenum = 0x0701;
pub static LINE_TOKEN: GLenum = 0x0702;
pub static POLYGON_TOKEN: GLenum = 0x0703;
pub static BITMAP_TOKEN: GLenum = 0x0704;
pub static DRAW_PIXEL_TOKEN: GLenum = 0x0705;
pub static COPY_PIXEL_TOKEN: GLenum = 0x0706;
pub static LINE_RESET_TOKEN: GLenum = 0x0707;
pub static EXP: GLenum = 0x0800;
pub static EXP2: GLenum = 0x0801;
pub static CW: GLenum = 0x0900;
pub static CCW: GLenum = 0x0901;
pub static COEFF: GLenum = 0x0A00;
pub static ORDER: GLenum = 0x0A01;
pub static DOMAIN: GLenum = 0x0A02;
pub static CURRENT_COLOR: GLenum = 0x0B00;
pub static CURRENT_INDEX: GLenum = 0x0B01;
pub static CURRENT_NORMAL: GLenum = 0x0B02;
pub static CURRENT_TEXTURE_COORDS: GLenum = 0x0B03;
pub static CURRENT_RASTER_COLOR: GLenum = 0x0B04;
pub static CURRENT_RASTER_INDEX: GLenum = 0x0B05;
pub static CURRENT_RASTER_TEXTURE_COORDS: GLenum = 0x0B06;
pub static CURRENT_RASTER_POSITION: GLenum = 0x0B07;
pub static CURRENT_RASTER_POSITION_VALID: GLenum = 0x0B08;
pub static CURRENT_RASTER_DISTANCE: GLenum = 0x0B09;
pub static POINT_SMOOTH: GLenum = 0x0B10;
pub static POINT_SIZE: GLenum = 0x0B11;
pub static POINT_SIZE_RANGE: GLenum = 0x0B12;
pub static SMOOTH_POINT_SIZE_RANGE: GLenum = 0x0B12;
pub static POINT_SIZE_GRANULARITY: GLenum = 0x0B13;
pub static SMOOTH_POINT_SIZE_GRANULARITY: GLenum = 0x0B13;
pub static LINE_SMOOTH: GLenum = 0x0B20;
pub static LINE_WIDTH: GLenum = 0x0B21;
pub static LINE_WIDTH_RANGE: GLenum = 0x0B22;
pub static SMOOTH_LINE_WIDTH_RANGE: GLenum = 0x0B22;
pub static LINE_WIDTH_GRANULARITY: GLenum = 0x0B23;
pub static SMOOTH_LINE_WIDTH_GRANULARITY: GLenum = 0x0B23;
pub static LINE_STIPPLE: GLenum = 0x0B24;
pub static LINE_STIPPLE_PATTERN: GLenum = 0x0B25;
pub static LINE_STIPPLE_REPEAT: GLenum = 0x0B26;
pub static LIST_MODE: GLenum = 0x0B30;
pub static MAX_LIST_NESTING: GLenum = 0x0B31;
pub static LIST_BASE: GLenum = 0x0B32;
pub static LIST_INDEX: GLenum = 0x0B33;
pub static POLYGON_MODE: GLenum = 0x0B40;
pub static POLYGON_SMOOTH: GLenum = 0x0B41;
pub static POLYGON_STIPPLE: GLenum = 0x0B42;
pub static EDGE_FLAG: GLenum = 0x0B43;
pub static CULL_FACE: GLenum = 0x0B44;
pub static CULL_FACE_MODE: GLenum = 0x0B45;
pub static FRONT_FACE: GLenum = 0x0B46;
pub static LIGHTING: GLenum = 0x0B50;
pub static LIGHT_MODEL_LOCAL_VIEWER: GLenum = 0x0B51;
pub static LIGHT_MODEL_TWO_SIDE: GLenum = 0x0B52;
pub static LIGHT_MODEL_AMBIENT: GLenum = 0x0B53;
pub static SHADE_MODEL: GLenum = 0x0B54;
pub static COLOR_MATERIAL_FACE: GLenum = 0x0B55;
pub static COLOR_MATERIAL_PARAMETER: GLenum = 0x0B56;
pub static COLOR_MATERIAL: GLenum = 0x0B57;
pub static FOG: GLenum = 0x0B60;
pub static FOG_INDEX: GLenum = 0x0B61;
pub static FOG_DENSITY: GLenum = 0x0B62;
pub static FOG_START: GLenum = 0x0B63;
pub static FOG_END: GLenum = 0x0B64;
pub static FOG_MODE: GLenum = 0x0B65;
pub static FOG_COLOR: GLenum = 0x0B66;
pub static DEPTH_RANGE: GLenum = 0x0B70;
pub static DEPTH_TEST: GLenum = 0x0B71;
pub static DEPTH_WRITEMASK: GLenum = 0x0B72;
pub static DEPTH_CLEAR_VALUE: GLenum = 0x0B73;
pub static DEPTH_FUNC: GLenum = 0x0B74;
pub static ACCUM_CLEAR_VALUE: GLenum = 0x0B80;
pub static STENCIL_TEST: GLenum = 0x0B90;
pub static STENCIL_CLEAR_VALUE: GLenum = 0x0B91;
pub static STENCIL_FUNC: GLenum = 0x0B92;
pub static STENCIL_VALUE_MASK: GLenum = 0x0B93;
pub static STENCIL_FAIL: GLenum = 0x0B94;
pub static STENCIL_PASS_DEPTH_FAIL: GLenum = 0x0B95;
pub static STENCIL_PASS_DEPTH_PASS: GLenum = 0x0B96;
pub static STENCIL_REF: GLenum = 0x0B97;
pub static STENCIL_WRITEMASK: GLenum = 0x0B98;
pub static MATRIX_MODE: GLenum = 0x0BA0;
pub static NORMALIZE: GLenum = 0x0BA1;
pub static VIEWPORT: GLenum = 0x0BA2;
pub static MODELVIEW_STACK_DEPTH: GLenum = 0x0BA3;
pub static MODELVIEW0_STACK_DEPTH_EXT: GLenum = 0x0BA3;
pub static PROJECTION_STACK_DEPTH: GLenum = 0x0BA4;
pub static TEXTURE_STACK_DEPTH: GLenum = 0x0BA5;
pub static MODELVIEW_MATRIX: GLenum = 0x0BA6;
pub static MODELVIEW0_MATRIX_EXT: GLenum = 0x0BA6;
pub static PROJECTION_MATRIX: GLenum = 0x0BA7;
pub static TEXTURE_MATRIX: GLenum = 0x0BA8;
pub static ATTRIB_STACK_DEPTH: GLenum = 0x0BB0;
pub static CLIENT_ATTRIB_STACK_DEPTH: GLenum = 0x0BB1;
pub static ALPHA_TEST: GLenum = 0x0BC0;
pub static ALPHA_TEST_QCOM: GLenum = 0x0BC0;
pub static ALPHA_TEST_FUNC: GLenum = 0x0BC1;
pub static ALPHA_TEST_FUNC_QCOM: GLenum = 0x0BC1;
pub static ALPHA_TEST_REF: GLenum = 0x0BC2;
pub static ALPHA_TEST_REF_QCOM: GLenum = 0x0BC2;
pub static DITHER: GLenum = 0x0BD0;
pub static BLEND_DST: GLenum = 0x0BE0;
pub static BLEND_SRC: GLenum = 0x0BE1;
pub static BLEND: GLenum = 0x0BE2;
pub static LOGIC_OP_MODE: GLenum = 0x0BF0;
pub static INDEX_LOGIC_OP: GLenum = 0x0BF1;
pub static LOGIC_OP: GLenum = 0x0BF1;
pub static COLOR_LOGIC_OP: GLenum = 0x0BF2;
pub static AUX_BUFFERS: GLenum = 0x0C00;
pub static DRAW_BUFFER: GLenum = 0x0C01;
pub static DRAW_BUFFER_EXT: GLenum = 0x0C01;
pub static READ_BUFFER: GLenum = 0x0C02;
pub static READ_BUFFER_EXT: GLenum = 0x0C02;
pub static READ_BUFFER_NV: GLenum = 0x0C02;
pub static SCISSOR_BOX: GLenum = 0x0C10;
pub static SCISSOR_TEST: GLenum = 0x0C11;
pub static INDEX_CLEAR_VALUE: GLenum = 0x0C20;
pub static INDEX_WRITEMASK: GLenum = 0x0C21;
pub static COLOR_CLEAR_VALUE: GLenum = 0x0C22;
pub static COLOR_WRITEMASK: GLenum = 0x0C23;
pub static INDEX_MODE: GLenum = 0x0C30;
pub static RGBA_MODE: GLenum = 0x0C31;
pub static DOUBLEBUFFER: GLenum = 0x0C32;
pub static STEREO: GLenum = 0x0C33;
pub static RENDER_MODE: GLenum = 0x0C40;
pub static PERSPECTIVE_CORRECTION_HINT: GLenum = 0x0C50;
pub static POINT_SMOOTH_HINT: GLenum = 0x0C51;
pub static LINE_SMOOTH_HINT: GLenum = 0x0C52;
pub static POLYGON_SMOOTH_HINT: GLenum = 0x0C53;
pub static FOG_HINT: GLenum = 0x0C54;
pub static TEXTURE_GEN_S: GLenum = 0x0C60;
pub static TEXTURE_GEN_T: GLenum = 0x0C61;
pub static TEXTURE_GEN_R: GLenum = 0x0C62;
pub static TEXTURE_GEN_Q: GLenum = 0x0C63;
pub static PIXEL_MAP_I_TO_I: GLenum = 0x0C70;
pub static PIXEL_MAP_S_TO_S: GLenum = 0x0C71;
pub static PIXEL_MAP_I_TO_R: GLenum = 0x0C72;
pub static PIXEL_MAP_I_TO_G: GLenum = 0x0C73;
pub static PIXEL_MAP_I_TO_B: GLenum = 0x0C74;
pub static PIXEL_MAP_I_TO_A: GLenum = 0x0C75;
pub static PIXEL_MAP_R_TO_R: GLenum = 0x0C76;
pub static PIXEL_MAP_G_TO_G: GLenum = 0x0C77;
pub static PIXEL_MAP_B_TO_B: GLenum = 0x0C78;
pub static PIXEL_MAP_A_TO_A: GLenum = 0x0C79;
pub static PIXEL_MAP_I_TO_I_SIZE: GLenum = 0x0CB0;
pub static PIXEL_MAP_S_TO_S_SIZE: GLenum = 0x0CB1;
pub static PIXEL_MAP_I_TO_R_SIZE: GLenum = 0x0CB2;
pub static PIXEL_MAP_I_TO_G_SIZE: GLenum = 0x0CB3;
pub static PIXEL_MAP_I_TO_B_SIZE: GLenum = 0x0CB4;
pub static PIXEL_MAP_I_TO_A_SIZE: GLenum = 0x0CB5;
pub static PIXEL_MAP_R_TO_R_SIZE: GLenum = 0x0CB6;
pub static PIXEL_MAP_G_TO_G_SIZE: GLenum = 0x0CB7;
pub static PIXEL_MAP_B_TO_B_SIZE: GLenum = 0x0CB8;
pub static PIXEL_MAP_A_TO_A_SIZE: GLenum = 0x0CB9;
pub static UNPACK_SWAP_BYTES: GLenum = 0x0CF0;
pub static UNPACK_LSB_FIRST: GLenum = 0x0CF1;
pub static UNPACK_ROW_LENGTH: GLenum = 0x0CF2;
pub static UNPACK_ROW_LENGTH_EXT: GLenum = 0x0CF2;
pub static UNPACK_SKIP_ROWS: GLenum = 0x0CF3;
pub static UNPACK_SKIP_ROWS_EXT: GLenum = 0x0CF3;
pub static UNPACK_SKIP_PIXELS: GLenum = 0x0CF4;
pub static UNPACK_SKIP_PIXELS_EXT: GLenum = 0x0CF4;
pub static UNPACK_ALIGNMENT: GLenum = 0x0CF5;
pub static PACK_SWAP_BYTES: GLenum = 0x0D00;
pub static PACK_LSB_FIRST: GLenum = 0x0D01;
pub static PACK_ROW_LENGTH: GLenum = 0x0D02;
pub static PACK_SKIP_ROWS: GLenum = 0x0D03;
pub static PACK_SKIP_PIXELS: GLenum = 0x0D04;
pub static PACK_ALIGNMENT: GLenum = 0x0D05;
pub static MAP_COLOR: GLenum = 0x0D10;
pub static MAP_STENCIL: GLenum = 0x0D11;
pub static INDEX_SHIFT: GLenum = 0x0D12;
pub static INDEX_OFFSET: GLenum = 0x0D13;
pub static RED_SCALE: GLenum = 0x0D14;
pub static RED_BIAS: GLenum = 0x0D15;
pub static ZOOM_X: GLenum = 0x0D16;
pub static ZOOM_Y: GLenum = 0x0D17;
pub static GREEN_SCALE: GLenum = 0x0D18;
pub static GREEN_BIAS: GLenum = 0x0D19;
pub static BLUE_SCALE: GLenum = 0x0D1A;
pub static BLUE_BIAS: GLenum = 0x0D1B;
pub static ALPHA_SCALE: GLenum = 0x0D1C;
pub static ALPHA_BIAS: GLenum = 0x0D1D;
pub static DEPTH_SCALE: GLenum = 0x0D1E;
pub static DEPTH_BIAS: GLenum = 0x0D1F;
pub static MAX_EVAL_ORDER: GLenum = 0x0D30;
pub static MAX_LIGHTS: GLenum = 0x0D31;
pub static MAX_CLIP_PLANES: GLenum = 0x0D32;
pub static MAX_CLIP_DISTANCES: GLenum = 0x0D32;
pub static MAX_TEXTURE_SIZE: GLenum = 0x0D33;
pub static MAX_PIXEL_MAP_TABLE: GLenum = 0x0D34;
pub static MAX_ATTRIB_STACK_DEPTH: GLenum = 0x0D35;
pub static MAX_MODELVIEW_STACK_DEPTH: GLenum = 0x0D36;
pub static MAX_NAME_STACK_DEPTH: GLenum = 0x0D37;
pub static MAX_PROJECTION_STACK_DEPTH: GLenum = 0x0D38;
pub static MAX_TEXTURE_STACK_DEPTH: GLenum = 0x0D39;
pub static MAX_VIEWPORT_DIMS: GLenum = 0x0D3A;
pub static MAX_CLIENT_ATTRIB_STACK_DEPTH: GLenum = 0x0D3B;
pub static SUBPIXEL_BITS: GLenum = 0x0D50;
pub static INDEX_BITS: GLenum = 0x0D51;
pub static RED_BITS: GLenum = 0x0D52;
pub static GREEN_BITS: GLenum = 0x0D53;
pub static BLUE_BITS: GLenum = 0x0D54;
pub static ALPHA_BITS: GLenum = 0x0D55;
pub static DEPTH_BITS: GLenum = 0x0D56;
pub static STENCIL_BITS: GLenum = 0x0D57;
pub static ACCUM_RED_BITS: GLenum = 0x0D58;
pub static ACCUM_GREEN_BITS: GLenum = 0x0D59;
pub static ACCUM_BLUE_BITS: GLenum = 0x0D5A;
pub static ACCUM_ALPHA_BITS: GLenum = 0x0D5B;
pub static NAME_STACK_DEPTH: GLenum = 0x0D70;
pub static AUTO_NORMAL: GLenum = 0x0D80;
pub static MAP1_COLOR_4: GLenum = 0x0D90;
pub static MAP1_INDEX: GLenum = 0x0D91;
pub static MAP1_NORMAL: GLenum = 0x0D92;
pub static MAP1_TEXTURE_COORD_1: GLenum = 0x0D93;
pub static MAP1_TEXTURE_COORD_2: GLenum = 0x0D94;
pub static MAP1_TEXTURE_COORD_3: GLenum = 0x0D95;
pub static MAP1_TEXTURE_COORD_4: GLenum = 0x0D96;
pub static MAP1_VERTEX_3: GLenum = 0x0D97;
pub static MAP1_VERTEX_4: GLenum = 0x0D98;
pub static MAP2_COLOR_4: GLenum = 0x0DB0;
pub static MAP2_INDEX: GLenum = 0x0DB1;
pub static MAP2_NORMAL: GLenum = 0x0DB2;
pub static MAP2_TEXTURE_COORD_1: GLenum = 0x0DB3;
pub static MAP2_TEXTURE_COORD_2: GLenum = 0x0DB4;
pub static MAP2_TEXTURE_COORD_3: GLenum = 0x0DB5;
pub static MAP2_TEXTURE_COORD_4: GLenum = 0x0DB6;
pub static MAP2_VERTEX_3: GLenum = 0x0DB7;
pub static MAP2_VERTEX_4: GLenum = 0x0DB8;
pub static MAP1_GRID_DOMAIN: GLenum = 0x0DD0;
pub static MAP1_GRID_SEGMENTS: GLenum = 0x0DD1;
pub static MAP2_GRID_DOMAIN: GLenum = 0x0DD2;
pub static MAP2_GRID_SEGMENTS: GLenum = 0x0DD3;
pub static TEXTURE_1D: GLenum = 0x0DE0;
pub static TEXTURE_2D: GLenum = 0x0DE1;
pub static FEEDBACK_BUFFER_POINTER: GLenum = 0x0DF0;
pub static FEEDBACK_BUFFER_SIZE: GLenum = 0x0DF1;
pub static FEEDBACK_BUFFER_TYPE: GLenum = 0x0DF2;
pub static SELECTION_BUFFER_POINTER: GLenum = 0x0DF3;
pub static SELECTION_BUFFER_SIZE: GLenum = 0x0DF4;
pub static TEXTURE_WIDTH: GLenum = 0x1000;
pub static TEXTURE_HEIGHT: GLenum = 0x1001;
pub static TEXTURE_INTERNAL_FORMAT: GLenum = 0x1003;
pub static TEXTURE_COMPONENTS: GLenum = 0x1003;
pub static TEXTURE_BORDER_COLOR: GLenum = 0x1004;
pub static TEXTURE_BORDER_COLOR_NV: GLenum = 0x1004;
pub static TEXTURE_BORDER: GLenum = 0x1005;
pub static DONT_CARE: GLenum = 0x1100;
pub static FASTEST: GLenum = 0x1101;
pub static NICEST: GLenum = 0x1102;
pub static AMBIENT: GLenum = 0x1200;
pub static DIFFUSE: GLenum = 0x1201;
pub static SPECULAR: GLenum = 0x1202;
pub static POSITION: GLenum = 0x1203;
pub static SPOT_DIRECTION: GLenum = 0x1204;
pub static SPOT_EXPONENT: GLenum = 0x1205;
pub static SPOT_CUTOFF: GLenum = 0x1206;
pub static CONSTANT_ATTENUATION: GLenum = 0x1207;
pub static LINEAR_ATTENUATION: GLenum = 0x1208;
pub static QUADRATIC_ATTENUATION: GLenum = 0x1209;
pub static COMPILE: GLenum = 0x1300;
pub static COMPILE_AND_EXECUTE: GLenum = 0x1301;
pub static BYTE: GLenum = 0x1400;
pub static UNSIGNED_BYTE: GLenum = 0x1401;
pub static SHORT: GLenum = 0x1402;
pub static UNSIGNED_SHORT: GLenum = 0x1403;
pub static INT: GLenum = 0x1404;
pub static UNSIGNED_INT: GLenum = 0x1405;
pub static FLOAT: GLenum = 0x1406;
pub static _2_BYTES: GLenum = 0x1407;
pub static _3_BYTES: GLenum = 0x1408;
pub static _4_BYTES: GLenum = 0x1409;
pub static DOUBLE: GLenum = 0x140A;
pub static DOUBLE_EXT: GLenum = 0x140A;
pub static HALF_FLOAT: GLenum = 0x140B;
pub static HALF_FLOAT_ARB: GLenum = 0x140B;
pub static HALF_FLOAT_NV: GLenum = 0x140B;
pub static HALF_APPLE: GLenum = 0x140B;
pub static FIXED: GLenum = 0x140C;
pub static FIXED_OES: GLenum = 0x140C;
pub static INT64_NV: GLenum = 0x140E;
pub static UNSIGNED_INT64_ARB: GLenum = 0x140F;
pub static UNSIGNED_INT64_NV: GLenum = 0x140F;
pub static CLEAR: GLenum = 0x1500;
pub static AND: GLenum = 0x1501;
pub static AND_REVERSE: GLenum = 0x1502;
pub static COPY: GLenum = 0x1503;
pub static AND_INVERTED: GLenum = 0x1504;
pub static NOOP: GLenum = 0x1505;
pub static XOR: GLenum = 0x1506;
pub static OR: GLenum = 0x1507;
pub static NOR: GLenum = 0x1508;
pub static EQUIV: GLenum = 0x1509;
pub static INVERT: GLenum = 0x150A;
pub static OR_REVERSE: GLenum = 0x150B;
pub static COPY_INVERTED: GLenum = 0x150C;
pub static OR_INVERTED: GLenum = 0x150D;
pub static NAND: GLenum = 0x150E;
pub static SET: GLenum = 0x150F;
pub static EMISSION: GLenum = 0x1600;
pub static SHININESS: GLenum = 0x1601;
pub static AMBIENT_AND_DIFFUSE: GLenum = 0x1602;
pub static COLOR_INDEXES: GLenum = 0x1603;
pub static MODELVIEW: GLenum = 0x1700;
pub static MODELVIEW0_ARB: GLenum = 0x1700;
pub static MODELVIEW0_EXT: GLenum = 0x1700;
pub static PROJECTION: GLenum = 0x1701;
pub static TEXTURE: GLenum = 0x1702;
pub static COLOR: GLenum = 0x1800;
pub static COLOR_EXT: GLenum = 0x1800;
pub static DEPTH: GLenum = 0x1801;
pub static DEPTH_EXT: GLenum = 0x1801;
pub static STENCIL: GLenum = 0x1802;
pub static STENCIL_EXT: GLenum = 0x1802;
pub static COLOR_INDEX: GLenum = 0x1900;
pub static STENCIL_INDEX: GLenum = 0x1901;
pub static DEPTH_COMPONENT: GLenum = 0x1902;
pub static RED: GLenum = 0x1903;
pub static RED_EXT: GLenum = 0x1903;
pub static GREEN: GLenum = 0x1904;
pub static BLUE: GLenum = 0x1905;
pub static ALPHA: GLenum = 0x1906;
pub static RGB: GLenum = 0x1907;
pub static RGBA: GLenum = 0x1908;
pub static LUMINANCE: GLenum = 0x1909;
pub static LUMINANCE_ALPHA: GLenum = 0x190A;
pub static BITMAP: GLenum = 0x1A00;
pub static POINT: GLenum = 0x1B00;
pub static LINE: GLenum = 0x1B01;
pub static FILL: GLenum = 0x1B02;
pub static RENDER: GLenum = 0x1C00;
pub static FEEDBACK: GLenum = 0x1C01;
pub static SELECT: GLenum = 0x1C02;
pub static FLAT: GLenum = 0x1D00;
pub static SMOOTH: GLenum = 0x1D01;
pub static KEEP: GLenum = 0x1E00;
pub static REPLACE: GLenum = 0x1E01;
pub static INCR: GLenum = 0x1E02;
pub static DECR: GLenum = 0x1E03;
pub static VENDOR: GLenum = 0x1F00;
pub static RENDERER: GLenum = 0x1F01;
pub static VERSION: GLenum = 0x1F02;
pub static EXTENSIONS: GLenum = 0x1F03;
pub static S: GLenum = 0x2000;
pub static T: GLenum = 0x2001;
pub static R: GLenum = 0x2002;
pub static Q: GLenum = 0x2003;
pub static MODULATE: GLenum = 0x2100;
pub static DECAL: GLenum = 0x2101;
pub static TEXTURE_ENV_MODE: GLenum = 0x2200;
pub static TEXTURE_ENV_COLOR: GLenum = 0x2201;
pub static TEXTURE_ENV: GLenum = 0x2300;
pub static EYE_LINEAR: GLenum = 0x2400;
pub static OBJECT_LINEAR: GLenum = 0x2401;
pub static SPHERE_MAP: GLenum = 0x2402;
pub static TEXTURE_GEN_MODE: GLenum = 0x2500;
pub static OBJECT_PLANE: GLenum = 0x2501;
pub static EYE_PLANE: GLenum = 0x2502;
pub static NEAREST: GLenum = 0x2600;
pub static LINEAR: GLenum = 0x2601;
pub static NEAREST_MIPMAP_NEAREST: GLenum = 0x2700;
pub static LINEAR_MIPMAP_NEAREST: GLenum = 0x2701;
pub static NEAREST_MIPMAP_LINEAR: GLenum = 0x2702;
pub static LINEAR_MIPMAP_LINEAR: GLenum = 0x2703;
pub static TEXTURE_MAG_FILTER: GLenum = 0x2800;
pub static TEXTURE_MIN_FILTER: GLenum = 0x2801;
pub static TEXTURE_WRAP_S: GLenum = 0x2802;
pub static TEXTURE_WRAP_T: GLenum = 0x2803;
pub static CLAMP: GLenum = 0x2900;
pub static REPEAT: GLenum = 0x2901;
pub static POLYGON_OFFSET_UNITS: GLenum = 0x2A00;
pub static POLYGON_OFFSET_POINT: GLenum = 0x2A01;
pub static POLYGON_OFFSET_LINE: GLenum = 0x2A02;
pub static R3_G3_B2: GLenum = 0x2A10;
pub static V2F: GLenum = 0x2A20;
pub static V3F: GLenum = 0x2A21;
pub static C4UB_V2F: GLenum = 0x2A22;
pub static C4UB_V3F: GLenum = 0x2A23;
pub static C3F_V3F: GLenum = 0x2A24;
pub static N3F_V3F: GLenum = 0x2A25;
pub static C4F_N3F_V3F: GLenum = 0x2A26;
pub static T2F_V3F: GLenum = 0x2A27;
pub static T4F_V4F: GLenum = 0x2A28;
pub static T2F_C4UB_V3F: GLenum = 0x2A29;
pub static T2F_C3F_V3F: GLenum = 0x2A2A;
pub static T2F_N3F_V3F: GLenum = 0x2A2B;
pub static T2F_C4F_N3F_V3F: GLenum = 0x2A2C;
pub static T4F_C4F_N3F_V4F: GLenum = 0x2A2D;
pub static CLIP_PLANE0: GLenum = 0x3000;
pub static CLIP_DISTANCE0: GLenum = 0x3000;
pub static CLIP_PLANE1: GLenum = 0x3001;
pub static CLIP_DISTANCE1: GLenum = 0x3001;
pub static CLIP_PLANE2: GLenum = 0x3002;
pub static CLIP_DISTANCE2: GLenum = 0x3002;
pub static CLIP_PLANE3: GLenum = 0x3003;
pub static CLIP_DISTANCE3: GLenum = 0x3003;
pub static CLIP_PLANE4: GLenum = 0x3004;
pub static CLIP_DISTANCE4: GLenum = 0x3004;
pub static CLIP_PLANE5: GLenum = 0x3005;
pub static CLIP_DISTANCE5: GLenum = 0x3005;
pub static CLIP_DISTANCE6: GLenum = 0x3006;
pub static CLIP_DISTANCE7: GLenum = 0x3007;
pub static LIGHT0: GLenum = 0x4000;
pub static LIGHT1: GLenum = 0x4001;
pub static LIGHT2: GLenum = 0x4002;
pub static LIGHT3: GLenum = 0x4003;
pub static LIGHT4: GLenum = 0x4004;
pub static LIGHT5: GLenum = 0x4005;
pub static LIGHT6: GLenum = 0x4006;
pub static LIGHT7: GLenum = 0x4007;
pub static ABGR_EXT: GLenum = 0x8000;
pub static CONSTANT_COLOR: GLenum = 0x8001;
pub static CONSTANT_COLOR_EXT: GLenum = 0x8001;
pub static ONE_MINUS_CONSTANT_COLOR: GLenum = 0x8002;
pub static ONE_MINUS_CONSTANT_COLOR_EXT: GLenum = 0x8002;
pub static CONSTANT_ALPHA: GLenum = 0x8003;
pub static CONSTANT_ALPHA_EXT: GLenum = 0x8003;
pub static ONE_MINUS_CONSTANT_ALPHA: GLenum = 0x8004;
pub static ONE_MINUS_CONSTANT_ALPHA_EXT: GLenum = 0x8004;
pub static BLEND_COLOR: GLenum = 0x8005;
pub static BLEND_COLOR_EXT: GLenum = 0x8005;
pub static FUNC_ADD: GLenum = 0x8006;
pub static FUNC_ADD_EXT: GLenum = 0x8006;
pub static FUNC_ADD_OES: GLenum = 0x8006;
pub static MIN: GLenum = 0x8007;
pub static MIN_EXT: GLenum = 0x8007;
pub static MAX: GLenum = 0x8008;
pub static MAX_EXT: GLenum = 0x8008;
pub static BLEND_EQUATION: GLenum = 0x8009;
pub static BLEND_EQUATION_EXT: GLenum = 0x8009;
pub static BLEND_EQUATION_OES: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB_EXT: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB_OES: GLenum = 0x8009;
pub static FUNC_SUBTRACT: GLenum = 0x800A;
pub static FUNC_SUBTRACT_EXT: GLenum = 0x800A;
pub static FUNC_SUBTRACT_OES: GLenum = 0x800A;
pub static FUNC_REVERSE_SUBTRACT: GLenum = 0x800B;
pub static FUNC_REVERSE_SUBTRACT_EXT: GLenum = 0x800B;
pub static FUNC_REVERSE_SUBTRACT_OES: GLenum = 0x800B;
pub static CMYK_EXT: GLenum = 0x800C;
pub static CMYKA_EXT: GLenum = 0x800D;
pub static PACK_CMYK_HINT_EXT: GLenum = 0x800E;
pub static UNPACK_CMYK_HINT_EXT: GLenum = 0x800F;
pub static CONVOLUTION_1D: GLenum = 0x8010;
pub static CONVOLUTION_1D_EXT: GLenum = 0x8010;
pub static CONVOLUTION_2D: GLenum = 0x8011;
pub static CONVOLUTION_2D_EXT: GLenum = 0x8011;
pub static SEPARABLE_2D: GLenum = 0x8012;
pub static SEPARABLE_2D_EXT: GLenum = 0x8012;
pub static CONVOLUTION_BORDER_MODE: GLenum = 0x8013;
pub static CONVOLUTION_BORDER_MODE_EXT: GLenum = 0x8013;
pub static CONVOLUTION_FILTER_SCALE: GLenum = 0x8014;
pub static CONVOLUTION_FILTER_SCALE_EXT: GLenum = 0x8014;
pub static CONVOLUTION_FILTER_BIAS: GLenum = 0x8015;
pub static CONVOLUTION_FILTER_BIAS_EXT: GLenum = 0x8015;
pub static REDUCE: GLenum = 0x8016;
pub static REDUCE_EXT: GLenum = 0x8016;
pub static CONVOLUTION_FORMAT: GLenum = 0x8017;
pub static CONVOLUTION_FORMAT_EXT: GLenum = 0x8017;
pub static CONVOLUTION_WIDTH: GLenum = 0x8018;
pub static CONVOLUTION_WIDTH_EXT: GLenum = 0x8018;
pub static CONVOLUTION_HEIGHT: GLenum = 0x8019;
pub static CONVOLUTION_HEIGHT_EXT: GLenum = 0x8019;
pub static MAX_CONVOLUTION_WIDTH: GLenum = 0x801A;
pub static MAX_CONVOLUTION_WIDTH_EXT: GLenum = 0x801A;
pub static MAX_CONVOLUTION_HEIGHT: GLenum = 0x801B;
pub static MAX_CONVOLUTION_HEIGHT_EXT: GLenum = 0x801B;
pub static POST_CONVOLUTION_RED_SCALE: GLenum = 0x801C;
pub static POST_CONVOLUTION_RED_SCALE_EXT: GLenum = 0x801C;
pub static POST_CONVOLUTION_GREEN_SCALE: GLenum = 0x801D;
pub static POST_CONVOLUTION_GREEN_SCALE_EXT: GLenum = 0x801D;
pub static POST_CONVOLUTION_BLUE_SCALE: GLenum = 0x801E;
pub static POST_CONVOLUTION_BLUE_SCALE_EXT: GLenum = 0x801E;
pub static POST_CONVOLUTION_ALPHA_SCALE: GLenum = 0x801F;
pub static POST_CONVOLUTION_ALPHA_SCALE_EXT: GLenum = 0x801F;
pub static POST_CONVOLUTION_RED_BIAS: GLenum = 0x8020;
pub static POST_CONVOLUTION_RED_BIAS_EXT: GLenum = 0x8020;
pub static POST_CONVOLUTION_GREEN_BIAS: GLenum = 0x8021;
pub static POST_CONVOLUTION_GREEN_BIAS_EXT: GLenum = 0x8021;
pub static POST_CONVOLUTION_BLUE_BIAS: GLenum = 0x8022;
pub static POST_CONVOLUTION_BLUE_BIAS_EXT: GLenum = 0x8022;
pub static POST_CONVOLUTION_ALPHA_BIAS: GLenum = 0x8023;
pub static POST_CONVOLUTION_ALPHA_BIAS_EXT: GLenum = 0x8023;
pub static HISTOGRAM: GLenum = 0x8024;
pub static HISTOGRAM_EXT: GLenum = 0x8024;
pub static PROXY_HISTOGRAM: GLenum = 0x8025;
pub static PROXY_HISTOGRAM_EXT: GLenum = 0x8025;
pub static HISTOGRAM_WIDTH: GLenum = 0x8026;
pub static HISTOGRAM_WIDTH_EXT: GLenum = 0x8026;
pub static HISTOGRAM_FORMAT: GLenum = 0x8027;
pub static HISTOGRAM_FORMAT_EXT: GLenum = 0x8027;
pub static HISTOGRAM_RED_SIZE: GLenum = 0x8028;
pub static HISTOGRAM_RED_SIZE_EXT: GLenum = 0x8028;
pub static HISTOGRAM_GREEN_SIZE: GLenum = 0x8029;
pub static HISTOGRAM_GREEN_SIZE_EXT: GLenum = 0x8029;
pub static HISTOGRAM_BLUE_SIZE: GLenum = 0x802A;
pub static HISTOGRAM_BLUE_SIZE_EXT: GLenum = 0x802A;
pub static HISTOGRAM_ALPHA_SIZE: GLenum = 0x802B;
pub static HISTOGRAM_ALPHA_SIZE_EXT: GLenum = 0x802B;
pub static HISTOGRAM_LUMINANCE_SIZE: GLenum = 0x802C;
pub static HISTOGRAM_LUMINANCE_SIZE_EXT: GLenum = 0x802C;
pub static HISTOGRAM_SINK: GLenum = 0x802D;
pub static HISTOGRAM_SINK_EXT: GLenum = 0x802D;
pub static MINMAX: GLenum = 0x802E;
pub static MINMAX_EXT: GLenum = 0x802E;
pub static MINMAX_FORMAT: GLenum = 0x802F;
pub static MINMAX_FORMAT_EXT: GLenum = 0x802F;
pub static MINMAX_SINK: GLenum = 0x8030;
pub static MINMAX_SINK_EXT: GLenum = 0x8030;
pub static TABLE_TOO_LARGE_EXT: GLenum = 0x8031;
pub static TABLE_TOO_LARGE: GLenum = 0x8031;
pub static UNSIGNED_BYTE_3_3_2: GLenum = 0x8032;
pub static UNSIGNED_BYTE_3_3_2_EXT: GLenum = 0x8032;
pub static UNSIGNED_SHORT_4_4_4_4: GLenum = 0x8033;
pub static UNSIGNED_SHORT_4_4_4_4_EXT: GLenum = 0x8033;
pub static UNSIGNED_SHORT_5_5_5_1: GLenum = 0x8034;
pub static UNSIGNED_SHORT_5_5_5_1_EXT: GLenum = 0x8034;
pub static UNSIGNED_INT_8_8_8_8: GLenum = 0x8035;
pub static UNSIGNED_INT_8_8_8_8_EXT: GLenum = 0x8035;
pub static UNSIGNED_INT_10_10_10_2: GLenum = 0x8036;
pub static UNSIGNED_INT_10_10_10_2_EXT: GLenum = 0x8036;
pub static POLYGON_OFFSET_EXT: GLenum = 0x8037;
pub static POLYGON_OFFSET_FILL: GLenum = 0x8037;
pub static POLYGON_OFFSET_FACTOR: GLenum = 0x8038;
pub static POLYGON_OFFSET_FACTOR_EXT: GLenum = 0x8038;
pub static POLYGON_OFFSET_BIAS_EXT: GLenum = 0x8039;
pub static RESCALE_NORMAL: GLenum = 0x803A;
pub static RESCALE_NORMAL_EXT: GLenum = 0x803A;
pub static ALPHA4: GLenum = 0x803B;
pub static ALPHA4_EXT: GLenum = 0x803B;
pub static ALPHA8: GLenum = 0x803C;
pub static ALPHA8_EXT: GLenum = 0x803C;
pub static ALPHA12: GLenum = 0x803D;
pub static ALPHA12_EXT: GLenum = 0x803D;
pub static ALPHA16: GLenum = 0x803E;
pub static ALPHA16_EXT: GLenum = 0x803E;
pub static LUMINANCE4: GLenum = 0x803F;
pub static LUMINANCE4_EXT: GLenum = 0x803F;
pub static LUMINANCE8: GLenum = 0x8040;
pub static LUMINANCE8_EXT: GLenum = 0x8040;
pub static LUMINANCE12: GLenum = 0x8041;
pub static LUMINANCE12_EXT: GLenum = 0x8041;
pub static LUMINANCE16: GLenum = 0x8042;
pub static LUMINANCE16_EXT: GLenum = 0x8042;
pub static LUMINANCE4_ALPHA4: GLenum = 0x8043;
pub static LUMINANCE4_ALPHA4_EXT: GLenum = 0x8043;
pub static LUMINANCE6_ALPHA2: GLenum = 0x8044;
pub static LUMINANCE6_ALPHA2_EXT: GLenum = 0x8044;
pub static LUMINANCE8_ALPHA8: GLenum = 0x8045;
pub static LUMINANCE8_ALPHA8_EXT: GLenum = 0x8045;
pub static LUMINANCE12_ALPHA4: GLenum = 0x8046;
pub static LUMINANCE12_ALPHA4_EXT: GLenum = 0x8046;
pub static LUMINANCE12_ALPHA12: GLenum = 0x8047;
pub static LUMINANCE12_ALPHA12_EXT: GLenum = 0x8047;
pub static LUMINANCE16_ALPHA16: GLenum = 0x8048;
pub static LUMINANCE16_ALPHA16_EXT: GLenum = 0x8048;
pub static INTENSITY: GLenum = 0x8049;
pub static INTENSITY_EXT: GLenum = 0x8049;
pub static INTENSITY4: GLenum = 0x804A;
pub static INTENSITY4_EXT: GLenum = 0x804A;
pub static INTENSITY8: GLenum = 0x804B;
pub static INTENSITY8_EXT: GLenum = 0x804B;
pub static INTENSITY12: GLenum = 0x804C;
pub static INTENSITY12_EXT: GLenum = 0x804C;
pub static INTENSITY16: GLenum = 0x804D;
pub static INTENSITY16_EXT: GLenum = 0x804D;
pub static RGB2_EXT: GLenum = 0x804E;
pub static RGB4: GLenum = 0x804F;
pub static RGB4_EXT: GLenum = 0x804F;
pub static RGB5: GLenum = 0x8050;
pub static RGB5_EXT: GLenum = 0x8050;
pub static RGB8: GLenum = 0x8051;
pub static RGB8_EXT: GLenum = 0x8051;
pub static RGB10: GLenum = 0x8052;
pub static RGB10_EXT: GLenum = 0x8052;
pub static RGB12: GLenum = 0x8053;
pub static RGB12_EXT: GLenum = 0x8053;
pub static RGB16: GLenum = 0x8054;
pub static RGB16_EXT: GLenum = 0x8054;
pub static RGBA2: GLenum = 0x8055;
pub static RGBA2_EXT: GLenum = 0x8055;
pub static RGBA4: GLenum = 0x8056;
pub static RGBA4_EXT: GLenum = 0x8056;
pub static RGBA4_OES: GLenum = 0x8056;
pub static RGB5_A1: GLenum = 0x8057;
pub static RGB5_A1_EXT: GLenum = 0x8057;
pub static RGB5_A1_OES: GLenum = 0x8057;
pub static RGBA8: GLenum = 0x8058;
pub static RGBA8_EXT: GLenum = 0x8058;
pub static RGBA8_OES: GLenum = 0x8058;
pub static RGB10_A2: GLenum = 0x8059;
pub static RGB10_A2_EXT: GLenum = 0x8059;
pub static RGBA12: GLenum = 0x805A;
pub static RGBA12_EXT: GLenum = 0x805A;
pub static RGBA16: GLenum = 0x805B;
pub static RGBA16_EXT: GLenum = 0x805B;
pub static TEXTURE_RED_SIZE: GLenum = 0x805C;
pub static TEXTURE_RED_SIZE_EXT: GLenum = 0x805C;
pub static TEXTURE_GREEN_SIZE: GLenum = 0x805D;
pub static TEXTURE_GREEN_SIZE_EXT: GLenum = 0x805D;
pub static TEXTURE_BLUE_SIZE: GLenum = 0x805E;
pub static TEXTURE_BLUE_SIZE_EXT: GLenum = 0x805E;
pub static TEXTURE_ALPHA_SIZE: GLenum = 0x805F;
pub static TEXTURE_ALPHA_SIZE_EXT: GLenum = 0x805F;
pub static TEXTURE_LUMINANCE_SIZE: GLenum = 0x8060;
pub static TEXTURE_LUMINANCE_SIZE_EXT: GLenum = 0x8060;
pub static TEXTURE_INTENSITY_SIZE: GLenum = 0x8061;
pub static TEXTURE_INTENSITY_SIZE_EXT: GLenum = 0x8061;
pub static REPLACE_EXT: GLenum = 0x8062;
pub static PROXY_TEXTURE_1D: GLenum = 0x8063;
pub static PROXY_TEXTURE_1D_EXT: GLenum = 0x8063;
pub static PROXY_TEXTURE_2D: GLenum = 0x8064;
pub static PROXY_TEXTURE_2D_EXT: GLenum = 0x8064;
pub static TEXTURE_TOO_LARGE_EXT: GLenum = 0x8065;
pub static TEXTURE_PRIORITY: GLenum = 0x8066;
pub static TEXTURE_PRIORITY_EXT: GLenum = 0x8066;
pub static TEXTURE_RESIDENT: GLenum = 0x8067;
pub static TEXTURE_RESIDENT_EXT: GLenum = 0x8067;
pub static TEXTURE_1D_BINDING_EXT: GLenum = 0x8068;
pub static TEXTURE_BINDING_1D: GLenum = 0x8068;
pub static TEXTURE_2D_BINDING_EXT: GLenum = 0x8069;
pub static TEXTURE_BINDING_2D: GLenum = 0x8069;
pub static TEXTURE_3D_BINDING_EXT: GLenum = 0x806A;
pub static TEXTURE_3D_BINDING_OES: GLenum = 0x806A;
pub static TEXTURE_BINDING_3D: GLenum = 0x806A;
pub static PACK_SKIP_IMAGES: GLenum = 0x806B;
pub static PACK_SKIP_IMAGES_EXT: GLenum = 0x806B;
pub static PACK_IMAGE_HEIGHT: GLenum = 0x806C;
pub static PACK_IMAGE_HEIGHT_EXT: GLenum = 0x806C;
pub static UNPACK_SKIP_IMAGES: GLenum = 0x806D;
pub static UNPACK_SKIP_IMAGES_EXT: GLenum = 0x806D;
pub static UNPACK_IMAGE_HEIGHT: GLenum = 0x806E;
pub static UNPACK_IMAGE_HEIGHT_EXT: GLenum = 0x806E;
pub static TEXTURE_3D: GLenum = 0x806F;
pub static TEXTURE_3D_EXT: GLenum = 0x806F;
pub static TEXTURE_3D_OES: GLenum = 0x806F;
pub static PROXY_TEXTURE_3D: GLenum = 0x8070;
pub static PROXY_TEXTURE_3D_EXT: GLenum = 0x8070;
pub static TEXTURE_DEPTH: GLenum = 0x8071;
pub static TEXTURE_DEPTH_EXT: GLenum = 0x8071;
pub static TEXTURE_WRAP_R: GLenum = 0x8072;
pub static TEXTURE_WRAP_R_EXT: GLenum = 0x8072;
pub static TEXTURE_WRAP_R_OES: GLenum = 0x8072;
pub static MAX_3D_TEXTURE_SIZE: GLenum = 0x8073;
pub static MAX_3D_TEXTURE_SIZE_EXT: GLenum = 0x8073;
pub static MAX_3D_TEXTURE_SIZE_OES: GLenum = 0x8073;
pub static VERTEX_ARRAY: GLenum = 0x8074;
pub static VERTEX_ARRAY_EXT: GLenum = 0x8074;
pub static NORMAL_ARRAY: GLenum = 0x8075;
pub static NORMAL_ARRAY_EXT: GLenum = 0x8075;
pub static COLOR_ARRAY: GLenum = 0x8076;
pub static COLOR_ARRAY_EXT: GLenum = 0x8076;
pub static INDEX_ARRAY: GLenum = 0x8077;
pub static INDEX_ARRAY_EXT: GLenum = 0x8077;
pub static TEXTURE_COORD_ARRAY: GLenum = 0x8078;
pub static TEXTURE_COORD_ARRAY_EXT: GLenum = 0x8078;
pub static EDGE_FLAG_ARRAY: GLenum = 0x8079;
pub static EDGE_FLAG_ARRAY_EXT: GLenum = 0x8079;
pub static VERTEX_ARRAY_SIZE: GLenum = 0x807A;
pub static VERTEX_ARRAY_SIZE_EXT: GLenum = 0x807A;
pub static VERTEX_ARRAY_TYPE: GLenum = 0x807B;
pub static VERTEX_ARRAY_TYPE_EXT: GLenum = 0x807B;
pub static VERTEX_ARRAY_STRIDE: GLenum = 0x807C;
pub static VERTEX_ARRAY_STRIDE_EXT: GLenum = 0x807C;
pub static VERTEX_ARRAY_COUNT_EXT: GLenum = 0x807D;
pub static NORMAL_ARRAY_TYPE: GLenum = 0x807E;
pub static NORMAL_ARRAY_TYPE_EXT: GLenum = 0x807E;
pub static NORMAL_ARRAY_STRIDE: GLenum = 0x807F;
pub static NORMAL_ARRAY_STRIDE_EXT: GLenum = 0x807F;
pub static NORMAL_ARRAY_COUNT_EXT: GLenum = 0x8080;
pub static COLOR_ARRAY_SIZE: GLenum = 0x8081;
pub static COLOR_ARRAY_SIZE_EXT: GLenum = 0x8081;
pub static COLOR_ARRAY_TYPE: GLenum = 0x8082;
pub static COLOR_ARRAY_TYPE_EXT: GLenum = 0x8082;
pub static COLOR_ARRAY_STRIDE: GLenum = 0x8083;
pub static COLOR_ARRAY_STRIDE_EXT: GLenum = 0x8083;
pub static COLOR_ARRAY_COUNT_EXT: GLenum = 0x8084;
pub static INDEX_ARRAY_TYPE: GLenum = 0x8085;
pub static INDEX_ARRAY_TYPE_EXT: GLenum = 0x8085;
pub static INDEX_ARRAY_STRIDE: GLenum = 0x8086;
pub static INDEX_ARRAY_STRIDE_EXT: GLenum = 0x8086;
pub static INDEX_ARRAY_COUNT_EXT: GLenum = 0x8087;
pub static TEXTURE_COORD_ARRAY_SIZE: GLenum = 0x8088;
pub static TEXTURE_COORD_ARRAY_SIZE_EXT: GLenum = 0x8088;
pub static TEXTURE_COORD_ARRAY_TYPE: GLenum = 0x8089;
pub static TEXTURE_COORD_ARRAY_TYPE_EXT: GLenum = 0x8089;
pub static TEXTURE_COORD_ARRAY_STRIDE: GLenum = 0x808A;
pub static TEXTURE_COORD_ARRAY_STRIDE_EXT: GLenum = 0x808A;
pub static TEXTURE_COORD_ARRAY_COUNT_EXT: GLenum = 0x808B;
pub static EDGE_FLAG_ARRAY_STRIDE: GLenum = 0x808C;
pub static EDGE_FLAG_ARRAY_STRIDE_EXT: GLenum = 0x808C;
pub static EDGE_FLAG_ARRAY_COUNT_EXT: GLenum = 0x808D;
pub static VERTEX_ARRAY_POINTER: GLenum = 0x808E;
pub static VERTEX_ARRAY_POINTER_EXT: GLenum = 0x808E;
pub static NORMAL_ARRAY_POINTER: GLenum = 0x808F;
pub static NORMAL_ARRAY_POINTER_EXT: GLenum = 0x808F;
pub static COLOR_ARRAY_POINTER: GLenum = 0x8090;
pub static COLOR_ARRAY_POINTER_EXT: GLenum = 0x8090;
pub static INDEX_ARRAY_POINTER: GLenum = 0x8091;
pub static INDEX_ARRAY_POINTER_EXT: GLenum = 0x8091;
pub static TEXTURE_COORD_ARRAY_POINTER: GLenum = 0x8092;
pub static TEXTURE_COORD_ARRAY_POINTER_EXT: GLenum = 0x8092;
pub static EDGE_FLAG_ARRAY_POINTER: GLenum = 0x8093;
pub static EDGE_FLAG_ARRAY_POINTER_EXT: GLenum = 0x8093;
pub static INTERLACE_SGIX: GLenum = 0x8094;
pub static DETAIL_TEXTURE_2D_SGIS: GLenum = 0x8095;
pub static DETAIL_TEXTURE_2D_BINDING_SGIS: GLenum = 0x8096;
pub static LINEAR_DETAIL_SGIS: GLenum = 0x8097;
pub static LINEAR_DETAIL_ALPHA_SGIS: GLenum = 0x8098;
pub static LINEAR_DETAIL_COLOR_SGIS: GLenum = 0x8099;
pub static DETAIL_TEXTURE_LEVEL_SGIS: GLenum = 0x809A;
pub static DETAIL_TEXTURE_MODE_SGIS: GLenum = 0x809B;
pub static DETAIL_TEXTURE_FUNC_POINTS_SGIS: GLenum = 0x809C;
pub static MULTISAMPLE: GLenum = 0x809D;
pub static MULTISAMPLE_ARB: GLenum = 0x809D;
pub static MULTISAMPLE_EXT: GLenum = 0x809D;
pub static MULTISAMPLE_SGIS: GLenum = 0x809D;
pub static SAMPLE_ALPHA_TO_COVERAGE: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_COVERAGE_ARB: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_MASK_EXT: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_MASK_SGIS: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_ONE: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_ARB: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_EXT: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_SGIS: GLenum = 0x809F;
pub static SAMPLE_COVERAGE: GLenum = 0x80A0;
pub static SAMPLE_COVERAGE_ARB: GLenum = 0x80A0;
pub static SAMPLE_MASK_EXT: GLenum = 0x80A0;
pub static SAMPLE_MASK_SGIS: GLenum = 0x80A0;
pub static _1PASS_EXT: GLenum = 0x80A1;
pub static _1PASS_SGIS: GLenum = 0x80A1;
pub static _2PASS_0_EXT: GLenum = 0x80A2;
pub static _2PASS_0_SGIS: GLenum = 0x80A2;
pub static _2PASS_1_EXT: GLenum = 0x80A3;
pub static _2PASS_1_SGIS: GLenum = 0x80A3;
pub static _4PASS_0_EXT: GLenum = 0x80A4;
pub static _4PASS_0_SGIS: GLenum = 0x80A4;
pub static _4PASS_1_EXT: GLenum = 0x80A5;
pub static _4PASS_1_SGIS: GLenum = 0x80A5;
pub static _4PASS_2_EXT: GLenum = 0x80A6;
pub static _4PASS_2_SGIS: GLenum = 0x80A6;
pub static _4PASS_3_EXT: GLenum = 0x80A7;
pub static _4PASS_3_SGIS: GLenum = 0x80A7;
pub static SAMPLE_BUFFERS: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_ARB: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_EXT: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_SGIS: GLenum = 0x80A8;
pub static SAMPLES: GLenum = 0x80A9;
pub static SAMPLES_ARB: GLenum = 0x80A9;
pub static SAMPLES_EXT: GLenum = 0x80A9;
pub static SAMPLES_SGIS: GLenum = 0x80A9;
pub static SAMPLE_COVERAGE_VALUE: GLenum = 0x80AA;
pub static SAMPLE_COVERAGE_VALUE_ARB: GLenum = 0x80AA;
pub static SAMPLE_MASK_VALUE_EXT: GLenum = 0x80AA;
pub static SAMPLE_MASK_VALUE_SGIS: GLenum = 0x80AA;
pub static SAMPLE_COVERAGE_INVERT: GLenum = 0x80AB;
pub static SAMPLE_COVERAGE_INVERT_ARB: GLenum = 0x80AB;
pub static SAMPLE_MASK_INVERT_EXT: GLenum = 0x80AB;
pub static SAMPLE_MASK_INVERT_SGIS: GLenum = 0x80AB;
pub static SAMPLE_PATTERN_EXT: GLenum = 0x80AC;
pub static SAMPLE_PATTERN_SGIS: GLenum = 0x80AC;
pub static LINEAR_SHARPEN_SGIS: GLenum = 0x80AD;
pub static LINEAR_SHARPEN_ALPHA_SGIS: GLenum = 0x80AE;
pub static LINEAR_SHARPEN_COLOR_SGIS: GLenum = 0x80AF;
pub static SHARPEN_TEXTURE_FUNC_POINTS_SGIS: GLenum = 0x80B0;
pub static COLOR_MATRIX: GLenum = 0x80B1;
pub static COLOR_MATRIX_SGI: GLenum = 0x80B1;
pub static COLOR_MATRIX_STACK_DEPTH: GLenum = 0x80B2;
pub static COLOR_MATRIX_STACK_DEPTH_SGI: GLenum = 0x80B2;
pub static MAX_COLOR_MATRIX_STACK_DEPTH: GLenum = 0x80B3;
pub static MAX_COLOR_MATRIX_STACK_DEPTH_SGI: GLenum = 0x80B3;
pub static POST_COLOR_MATRIX_RED_SCALE: GLenum = 0x80B4;
pub static POST_COLOR_MATRIX_RED_SCALE_SGI: GLenum = 0x80B4;
pub static POST_COLOR_MATRIX_GREEN_SCALE: GLenum = 0x80B5;
pub static POST_COLOR_MATRIX_GREEN_SCALE_SGI: GLenum = 0x80B5;
pub static POST_COLOR_MATRIX_BLUE_SCALE: GLenum = 0x80B6;
pub static POST_COLOR_MATRIX_BLUE_SCALE_SGI: GLenum = 0x80B6;
pub static POST_COLOR_MATRIX_ALPHA_SCALE: GLenum = 0x80B7;
pub static POST_COLOR_MATRIX_ALPHA_SCALE_SGI: GLenum = 0x80B7;
pub static POST_COLOR_MATRIX_RED_BIAS: GLenum = 0x80B8;
pub static POST_COLOR_MATRIX_RED_BIAS_SGI: GLenum = 0x80B8;
pub static POST_COLOR_MATRIX_GREEN_BIAS: GLenum = 0x80B9;
pub static POST_COLOR_MATRIX_GREEN_BIAS_SGI: GLenum = 0x80B9;
pub static POST_COLOR_MATRIX_BLUE_BIAS: GLenum = 0x80BA;
pub static POST_COLOR_MATRIX_BLUE_BIAS_SGI: GLenum = 0x80BA;
pub static POST_COLOR_MATRIX_ALPHA_BIAS: GLenum = 0x80BB;
pub static POST_COLOR_MATRIX_ALPHA_BIAS_SGI: GLenum = 0x80BB;
pub static TEXTURE_COLOR_TABLE_SGI: GLenum = 0x80BC;
pub static PROXY_TEXTURE_COLOR_TABLE_SGI: GLenum = 0x80BD;
pub static TEXTURE_ENV_BIAS_SGIX: GLenum = 0x80BE;
pub static SHADOW_AMBIENT_SGIX: GLenum = 0x80BF;
pub static TEXTURE_COMPARE_FAIL_VALUE_ARB: GLenum = 0x80BF;
pub static BLEND_DST_RGB: GLenum = 0x80C8;
pub static BLEND_DST_RGB_EXT: GLenum = 0x80C8;
pub static BLEND_DST_RGB_OES: GLenum = 0x80C8;
pub static BLEND_SRC_RGB: GLenum = 0x80C9;
pub static BLEND_SRC_RGB_EXT: GLenum = 0x80C9;
pub static BLEND_SRC_RGB_OES: GLenum = 0x80C9;
pub static BLEND_DST_ALPHA: GLenum = 0x80CA;
pub static BLEND_DST_ALPHA_EXT: GLenum = 0x80CA;
pub static BLEND_DST_ALPHA_OES: GLenum = 0x80CA;
pub static BLEND_SRC_ALPHA: GLenum = 0x80CB;
pub static BLEND_SRC_ALPHA_EXT: GLenum = 0x80CB;
pub static BLEND_SRC_ALPHA_OES: GLenum = 0x80CB;
pub static _422_EXT: GLenum = 0x80CC;
pub static _422_REV_EXT: GLenum = 0x80CD;
pub static _422_AVERAGE_EXT: GLenum = 0x80CE;
pub static _422_REV_AVERAGE_EXT: GLenum = 0x80CF;
pub static COLOR_TABLE: GLenum = 0x80D0;
pub static COLOR_TABLE_SGI: GLenum = 0x80D0;
pub static POST_CONVOLUTION_COLOR_TABLE: GLenum = 0x80D1;
pub static POST_CONVOLUTION_COLOR_TABLE_SGI: GLenum = 0x80D1;
pub static POST_COLOR_MATRIX_COLOR_TABLE: GLenum = 0x80D2;
pub static POST_COLOR_MATRIX_COLOR_TABLE_SGI: GLenum = 0x80D2;
pub static PROXY_COLOR_TABLE: GLenum = 0x80D3;
pub static PROXY_COLOR_TABLE_SGI: GLenum = 0x80D3;
pub static PROXY_POST_CONVOLUTION_COLOR_TABLE: GLenum = 0x80D4;
pub static PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI: GLenum = 0x80D4;
pub static PROXY_POST_COLOR_MATRIX_COLOR_TABLE: GLenum = 0x80D5;
pub static PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI: GLenum = 0x80D5;
pub static COLOR_TABLE_SCALE: GLenum = 0x80D6;
pub static COLOR_TABLE_SCALE_SGI: GLenum = 0x80D6;
pub static COLOR_TABLE_BIAS: GLenum = 0x80D7;
pub static COLOR_TABLE_BIAS_SGI: GLenum = 0x80D7;
pub static COLOR_TABLE_FORMAT: GLenum = 0x80D8;
pub static COLOR_TABLE_FORMAT_SGI: GLenum = 0x80D8;
pub static COLOR_TABLE_WIDTH: GLenum = 0x80D9;
pub static COLOR_TABLE_WIDTH_SGI: GLenum = 0x80D9;
pub static COLOR_TABLE_RED_SIZE: GLenum = 0x80DA;
pub static COLOR_TABLE_RED_SIZE_SGI: GLenum = 0x80DA;
pub static COLOR_TABLE_GREEN_SIZE: GLenum = 0x80DB;
pub static COLOR_TABLE_GREEN_SIZE_SGI: GLenum = 0x80DB;
pub static COLOR_TABLE_BLUE_SIZE: GLenum = 0x80DC;
pub static COLOR_TABLE_BLUE_SIZE_SGI: GLenum = 0x80DC;
pub static COLOR_TABLE_ALPHA_SIZE: GLenum = 0x80DD;
pub static COLOR_TABLE_ALPHA_SIZE_SGI: GLenum = 0x80DD;
pub static COLOR_TABLE_LUMINANCE_SIZE: GLenum = 0x80DE;
pub static COLOR_TABLE_LUMINANCE_SIZE_SGI: GLenum = 0x80DE;
pub static COLOR_TABLE_INTENSITY_SIZE: GLenum = 0x80DF;
pub static COLOR_TABLE_INTENSITY_SIZE_SGI: GLenum = 0x80DF;
pub static BGR: GLenum = 0x80E0;
pub static BGR_EXT: GLenum = 0x80E0;
pub static BGRA: GLenum = 0x80E1;
pub static BGRA_EXT: GLenum = 0x80E1;
pub static COLOR_INDEX1_EXT: GLenum = 0x80E2;
pub static COLOR_INDEX2_EXT: GLenum = 0x80E3;
pub static COLOR_INDEX4_EXT: GLenum = 0x80E4;
pub static COLOR_INDEX8_EXT: GLenum = 0x80E5;
pub static COLOR_INDEX12_EXT: GLenum = 0x80E6;
pub static COLOR_INDEX16_EXT: GLenum = 0x80E7;
pub static MAX_ELEMENTS_VERTICES: GLenum = 0x80E8;
pub static MAX_ELEMENTS_VERTICES_EXT: GLenum = 0x80E8;
pub static MAX_ELEMENTS_INDICES: GLenum = 0x80E9;
pub static MAX_ELEMENTS_INDICES_EXT: GLenum = 0x80E9;
pub static PHONG_WIN: GLenum = 0x80EA;
pub static PHONG_HINT_WIN: GLenum = 0x80EB;
pub static FOG_SPECULAR_TEXTURE_WIN: GLenum = 0x80EC;
pub static TEXTURE_INDEX_SIZE_EXT: GLenum = 0x80ED;
pub static PARAMETER_BUFFER_ARB: GLenum = 0x80EE;
pub static PARAMETER_BUFFER_BINDING_ARB: GLenum = 0x80EF;
pub static CLIP_VOLUME_CLIPPING_HINT_EXT: GLenum = 0x80F0;
pub static DUAL_ALPHA4_SGIS: GLenum = 0x8110;
pub static DUAL_ALPHA8_SGIS: GLenum = 0x8111;
pub static DUAL_ALPHA12_SGIS: GLenum = 0x8112;
pub static DUAL_ALPHA16_SGIS: GLenum = 0x8113;
pub static DUAL_LUMINANCE4_SGIS: GLenum = 0x8114;
pub static DUAL_LUMINANCE8_SGIS: GLenum = 0x8115;
pub static DUAL_LUMINANCE12_SGIS: GLenum = 0x8116;
pub static DUAL_LUMINANCE16_SGIS: GLenum = 0x8117;
pub static DUAL_INTENSITY4_SGIS: GLenum = 0x8118;
pub static DUAL_INTENSITY8_SGIS: GLenum = 0x8119;
pub static DUAL_INTENSITY12_SGIS: GLenum = 0x811A;
pub static DUAL_INTENSITY16_SGIS: GLenum = 0x811B;
pub static DUAL_LUMINANCE_ALPHA4_SGIS: GLenum = 0x811C;
pub static DUAL_LUMINANCE_ALPHA8_SGIS: GLenum = 0x811D;
pub static QUAD_ALPHA4_SGIS: GLenum = 0x811E;
pub static QUAD_ALPHA8_SGIS: GLenum = 0x811F;
pub static QUAD_LUMINANCE4_SGIS: GLenum = 0x8120;
pub static QUAD_LUMINANCE8_SGIS: GLenum = 0x8121;
pub static QUAD_INTENSITY4_SGIS: GLenum = 0x8122;
pub static QUAD_INTENSITY8_SGIS: GLenum = 0x8123;
pub static DUAL_TEXTURE_SELECT_SGIS: GLenum = 0x8124;
pub static QUAD_TEXTURE_SELECT_SGIS: GLenum = 0x8125;
pub static POINT_SIZE_MIN: GLenum = 0x8126;
pub static POINT_SIZE_MIN_ARB: GLenum = 0x8126;
pub static POINT_SIZE_MIN_EXT: GLenum = 0x8126;
pub static POINT_SIZE_MIN_SGIS: GLenum = 0x8126;
pub static POINT_SIZE_MAX: GLenum = 0x8127;
pub static POINT_SIZE_MAX_ARB: GLenum = 0x8127;
pub static POINT_SIZE_MAX_EXT: GLenum = 0x8127;
pub static POINT_SIZE_MAX_SGIS: GLenum = 0x8127;
pub static POINT_FADE_THRESHOLD_SIZE: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_ARB: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_EXT: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_SGIS: GLenum = 0x8128;
pub static DISTANCE_ATTENUATION_EXT: GLenum = 0x8129;
pub static DISTANCE_ATTENUATION_SGIS: GLenum = 0x8129;
pub static POINT_DISTANCE_ATTENUATION: GLenum = 0x8129;
pub static POINT_DISTANCE_ATTENUATION_ARB: GLenum = 0x8129;
pub static FOG_FUNC_SGIS: GLenum = 0x812A;
pub static FOG_FUNC_POINTS_SGIS: GLenum = 0x812B;
pub static MAX_FOG_FUNC_POINTS_SGIS: GLenum = 0x812C;
pub static CLAMP_TO_BORDER: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_ARB: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_NV: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_SGIS: GLenum = 0x812D;
pub static TEXTURE_MULTI_BUFFER_HINT_SGIX: GLenum = 0x812E;
pub static CLAMP_TO_EDGE: GLenum = 0x812F;
pub static CLAMP_TO_EDGE_SGIS: GLenum = 0x812F;
pub static PACK_SKIP_VOLUMES_SGIS: GLenum = 0x8130;
pub static PACK_IMAGE_DEPTH_SGIS: GLenum = 0x8131;
pub static UNPACK_SKIP_VOLUMES_SGIS: GLenum = 0x8132;
pub static UNPACK_IMAGE_DEPTH_SGIS: GLenum = 0x8133;
pub static TEXTURE_4D_SGIS: GLenum = 0x8134;
pub static PROXY_TEXTURE_4D_SGIS: GLenum = 0x8135;
pub static TEXTURE_4DSIZE_SGIS: GLenum = 0x8136;
pub static TEXTURE_WRAP_Q_SGIS: GLenum = 0x8137;
pub static MAX_4D_TEXTURE_SIZE_SGIS: GLenum = 0x8138;
pub static PIXEL_TEX_GEN_SGIX: GLenum = 0x8139;
pub static TEXTURE_MIN_LOD: GLenum = 0x813A;
pub static TEXTURE_MIN_LOD_SGIS: GLenum = 0x813A;
pub static TEXTURE_MAX_LOD: GLenum = 0x813B;
pub static TEXTURE_MAX_LOD_SGIS: GLenum = 0x813B;
pub static TEXTURE_BASE_LEVEL: GLenum = 0x813C;
pub static TEXTURE_BASE_LEVEL_SGIS: GLenum = 0x813C;
pub static TEXTURE_MAX_LEVEL: GLenum = 0x813D;
pub static TEXTURE_MAX_LEVEL_SGIS: GLenum = 0x813D;
pub static PIXEL_TILE_BEST_ALIGNMENT_SGIX: GLenum = 0x813E;
pub static PIXEL_TILE_CACHE_INCREMENT_SGIX: GLenum = 0x813F;
pub static PIXEL_TILE_WIDTH_SGIX: GLenum = 0x8140;
pub static PIXEL_TILE_HEIGHT_SGIX: GLenum = 0x8141;
pub static PIXEL_TILE_GRID_WIDTH_SGIX: GLenum = 0x8142;
pub static PIXEL_TILE_GRID_HEIGHT_SGIX: GLenum = 0x8143;
pub static PIXEL_TILE_GRID_DEPTH_SGIX: GLenum = 0x8144;
pub static PIXEL_TILE_CACHE_SIZE_SGIX: GLenum = 0x8145;
pub static FILTER4_SGIS: GLenum = 0x8146;
pub static TEXTURE_FILTER4_SIZE_SGIS: GLenum = 0x8147;
pub static SPRITE_SGIX: GLenum = 0x8148;
pub static SPRITE_MODE_SGIX: GLenum = 0x8149;
pub static SPRITE_AXIS_SGIX: GLenum = 0x814A;
pub static SPRITE_TRANSLATION_SGIX: GLenum = 0x814B;
pub static SPRITE_AXIAL_SGIX: GLenum = 0x814C;
pub static SPRITE_OBJECT_ALIGNED_SGIX: GLenum = 0x814D;
pub static SPRITE_EYE_ALIGNED_SGIX: GLenum = 0x814E;
pub static TEXTURE_4D_BINDING_SGIS: GLenum = 0x814F;
pub static IGNORE_BORDER_HP: GLenum = 0x8150;
pub static CONSTANT_BORDER: GLenum = 0x8151;
pub static CONSTANT_BORDER_HP: GLenum = 0x8151;
pub static REPLICATE_BORDER: GLenum = 0x8153;
pub static REPLICATE_BORDER_HP: GLenum = 0x8153;
pub static CONVOLUTION_BORDER_COLOR: GLenum = 0x8154;
pub static CONVOLUTION_BORDER_COLOR_HP: GLenum = 0x8154;
pub static IMAGE_SCALE_X_HP: GLenum = 0x8155;
pub static IMAGE_SCALE_Y_HP: GLenum = 0x8156;
pub static IMAGE_TRANSLATE_X_HP: GLenum = 0x8157;
pub static IMAGE_TRANSLATE_Y_HP: GLenum = 0x8158;
pub static IMAGE_ROTATE_ANGLE_HP: GLenum = 0x8159;
pub static IMAGE_ROTATE_ORIGIN_X_HP: GLenum = 0x815A;
pub static IMAGE_ROTATE_ORIGIN_Y_HP: GLenum = 0x815B;
pub static IMAGE_MAG_FILTER_HP: GLenum = 0x815C;
pub static IMAGE_MIN_FILTER_HP: GLenum = 0x815D;
pub static IMAGE_CUBIC_WEIGHT_HP: GLenum = 0x815E;
pub static CUBIC_HP: GLenum = 0x815F;
pub static AVERAGE_HP: GLenum = 0x8160;
pub static IMAGE_TRANSFORM_2D_HP: GLenum = 0x8161;
pub static POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: GLenum = 0x8162;
pub static PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: GLenum = 0x8163;
pub static OCCLUSION_TEST_HP: GLenum = 0x8165;
pub static OCCLUSION_TEST_RESULT_HP: GLenum = 0x8166;
pub static TEXTURE_LIGHTING_MODE_HP: GLenum = 0x8167;
pub static TEXTURE_POST_SPECULAR_HP: GLenum = 0x8168;
pub static TEXTURE_PRE_SPECULAR_HP: GLenum = 0x8169;
pub static LINEAR_CLIPMAP_LINEAR_SGIX: GLenum = 0x8170;
pub static TEXTURE_CLIPMAP_CENTER_SGIX: GLenum = 0x8171;
pub static TEXTURE_CLIPMAP_FRAME_SGIX: GLenum = 0x8172;
pub static TEXTURE_CLIPMAP_OFFSET_SGIX: GLenum = 0x8173;
pub static TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: GLenum = 0x8174;
pub static TEXTURE_CLIPMAP_LOD_OFFSET_SGIX: GLenum = 0x8175;
pub static TEXTURE_CLIPMAP_DEPTH_SGIX: GLenum = 0x8176;
pub static MAX_CLIPMAP_DEPTH_SGIX: GLenum = 0x8177;
pub static MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: GLenum = 0x8178;
pub static POST_TEXTURE_FILTER_BIAS_SGIX: GLenum = 0x8179;
pub static POST_TEXTURE_FILTER_SCALE_SGIX: GLenum = 0x817A;
pub static POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: GLenum = 0x817B;
pub static POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: GLenum = 0x817C;
pub static REFERENCE_PLANE_SGIX: GLenum = 0x817D;
pub static REFERENCE_PLANE_EQUATION_SGIX: GLenum = 0x817E;
pub static IR_INSTRUMENT1_SGIX: GLenum = 0x817F;
pub static INSTRUMENT_BUFFER_POINTER_SGIX: GLenum = 0x8180;
pub static INSTRUMENT_MEASUREMENTS_SGIX: GLenum = 0x8181;
pub static LIST_PRIORITY_SGIX: GLenum = 0x8182;
pub static CALLIGRAPHIC_FRAGMENT_SGIX: GLenum = 0x8183;
pub static PIXEL_TEX_GEN_Q_CEILING_SGIX: GLenum = 0x8184;
pub static PIXEL_TEX_GEN_Q_ROUND_SGIX: GLenum = 0x8185;
pub static PIXEL_TEX_GEN_Q_FLOOR_SGIX: GLenum = 0x8186;
pub static PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX: GLenum = 0x8187;
pub static PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX: GLenum = 0x8188;
pub static PIXEL_TEX_GEN_ALPHA_LS_SGIX: GLenum = 0x8189;
pub static PIXEL_TEX_GEN_ALPHA_MS_SGIX: GLenum = 0x818A;
pub static FRAMEZOOM_SGIX: GLenum = 0x818B;
pub static FRAMEZOOM_FACTOR_SGIX: GLenum = 0x818C;
pub static MAX_FRAMEZOOM_FACTOR_SGIX: GLenum = 0x818D;
pub static TEXTURE_LOD_BIAS_S_SGIX: GLenum = 0x818E;
pub static TEXTURE_LOD_BIAS_T_SGIX: GLenum = 0x818F;
pub static TEXTURE_LOD_BIAS_R_SGIX: GLenum = 0x8190;
pub static GENERATE_MIPMAP: GLenum = 0x8191;
pub static GENERATE_MIPMAP_SGIS: GLenum = 0x8191;
pub static GENERATE_MIPMAP_HINT: GLenum = 0x8192;
pub static GENERATE_MIPMAP_HINT_SGIS: GLenum = 0x8192;
pub static GEOMETRY_DEFORMATION_SGIX: GLenum = 0x8194;
pub static TEXTURE_DEFORMATION_SGIX: GLenum = 0x8195;
pub static DEFORMATIONS_MASK_SGIX: GLenum = 0x8196;
pub static MAX_DEFORMATION_ORDER_SGIX: GLenum = 0x8197;
pub static FOG_OFFSET_SGIX: GLenum = 0x8198;
pub static FOG_OFFSET_VALUE_SGIX: GLenum = 0x8199;
pub static TEXTURE_COMPARE_SGIX: GLenum = 0x819A;
pub static TEXTURE_COMPARE_OPERATOR_SGIX: GLenum = 0x819B;
pub static TEXTURE_LEQUAL_R_SGIX: GLenum = 0x819C;
pub static TEXTURE_GEQUAL_R_SGIX: GLenum = 0x819D;
pub static DEPTH_COMPONENT16: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_ARB: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_OES: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_SGIX: GLenum = 0x81A5;
pub static DEPTH_COMPONENT24: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_ARB: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_OES: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_SGIX: GLenum = 0x81A6;
pub static DEPTH_COMPONENT32: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_ARB: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_OES: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_SGIX: GLenum = 0x81A7;
pub static ARRAY_ELEMENT_LOCK_FIRST_EXT: GLenum = 0x81A8;
pub static ARRAY_ELEMENT_LOCK_COUNT_EXT: GLenum = 0x81A9;
pub static CULL_VERTEX_EXT: GLenum = 0x81AA;
pub static CULL_VERTEX_EYE_POSITION_EXT: GLenum = 0x81AB;
pub static CULL_VERTEX_OBJECT_POSITION_EXT: GLenum = 0x81AC;
pub static IUI_V2F_EXT: GLenum = 0x81AD;
pub static IUI_V3F_EXT: GLenum = 0x81AE;
pub static IUI_N3F_V2F_EXT: GLenum = 0x81AF;
pub static IUI_N3F_V3F_EXT: GLenum = 0x81B0;
pub static T2F_IUI_V2F_EXT: GLenum = 0x81B1;
pub static T2F_IUI_V3F_EXT: GLenum = 0x81B2;
pub static T2F_IUI_N3F_V2F_EXT: GLenum = 0x81B3;
pub static T2F_IUI_N3F_V3F_EXT: GLenum = 0x81B4;
pub static INDEX_TEST_EXT: GLenum = 0x81B5;
pub static INDEX_TEST_FUNC_EXT: GLenum = 0x81B6;
pub static INDEX_TEST_REF_EXT: GLenum = 0x81B7;
pub static INDEX_MATERIAL_EXT: GLenum = 0x81B8;
pub static INDEX_MATERIAL_PARAMETER_EXT: GLenum = 0x81B9;
pub static INDEX_MATERIAL_FACE_EXT: GLenum = 0x81BA;
pub static YCRCB_422_SGIX: GLenum = 0x81BB;
pub static YCRCB_444_SGIX: GLenum = 0x81BC;
pub static WRAP_BORDER_SUN: GLenum = 0x81D4;
pub static UNPACK_CONSTANT_DATA_SUNX: GLenum = 0x81D5;
pub static TEXTURE_CONSTANT_DATA_SUNX: GLenum = 0x81D6;
pub static TRIANGLE_LIST_SUN: GLenum = 0x81D7;
pub static REPLACEMENT_CODE_SUN: GLenum = 0x81D8;
pub static GLOBAL_ALPHA_SUN: GLenum = 0x81D9;
pub static GLOBAL_ALPHA_FACTOR_SUN: GLenum = 0x81DA;
pub static TEXTURE_COLOR_WRITEMASK_SGIS: GLenum = 0x81EF;
pub static EYE_DISTANCE_TO_POINT_SGIS: GLenum = 0x81F0;
pub static OBJECT_DISTANCE_TO_POINT_SGIS: GLenum = 0x81F1;
pub static EYE_DISTANCE_TO_LINE_SGIS: GLenum = 0x81F2;
pub static OBJECT_DISTANCE_TO_LINE_SGIS: GLenum = 0x81F3;
pub static EYE_POINT_SGIS: GLenum = 0x81F4;
pub static OBJECT_POINT_SGIS: GLenum = 0x81F5;
pub static EYE_LINE_SGIS: GLenum = 0x81F6;
pub static OBJECT_LINE_SGIS: GLenum = 0x81F7;
pub static LIGHT_MODEL_COLOR_CONTROL: GLenum = 0x81F8;
pub static LIGHT_MODEL_COLOR_CONTROL_EXT: GLenum = 0x81F8;
pub static SINGLE_COLOR: GLenum = 0x81F9;
pub static SINGLE_COLOR_EXT: GLenum = 0x81F9;
pub static SEPARATE_SPECULAR_COLOR: GLenum = 0x81FA;
pub static SEPARATE_SPECULAR_COLOR_EXT: GLenum = 0x81FA;
pub static SHARED_TEXTURE_PALETTE_EXT: GLenum = 0x81FB;
pub static TEXT_FRAGMENT_SHADER_ATI: GLenum = 0x8200;
pub static FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum = 0x8210;
pub static FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum = 0x8211;
pub static FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum = 0x8211;
pub static FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum = 0x8212;
pub static FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum = 0x8213;
pub static FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum = 0x8214;
pub static FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum = 0x8215;
pub static FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum = 0x8216;
pub static FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum = 0x8217;
pub static FRAMEBUFFER_DEFAULT: GLenum = 0x8218;
pub static FRAMEBUFFER_UNDEFINED: GLenum = 0x8219;
pub static FRAMEBUFFER_UNDEFINED_OES: GLenum = 0x8219;
pub static DEPTH_STENCIL_ATTACHMENT: GLenum = 0x821A;
pub static MAJOR_VERSION: GLenum = 0x821B;
pub static MINOR_VERSION: GLenum = 0x821C;
pub static NUM_EXTENSIONS: GLenum = 0x821D;
pub static CONTEXT_FLAGS: GLenum = 0x821E;
pub static BUFFER_IMMUTABLE_STORAGE: GLenum = 0x821F;
pub static BUFFER_STORAGE_FLAGS: GLenum = 0x8220;
pub static INDEX: GLenum = 0x8222;
pub static COMPRESSED_RED: GLenum = 0x8225;
pub static COMPRESSED_RG: GLenum = 0x8226;
pub static RG: GLenum = 0x8227;
pub static RG_EXT: GLenum = 0x8227;
pub static RG_INTEGER: GLenum = 0x8228;
pub static R8: GLenum = 0x8229;
pub static R8_EXT: GLenum = 0x8229;
pub static R16: GLenum = 0x822A;
pub static RG8: GLenum = 0x822B;
pub static RG8_EXT: GLenum = 0x822B;
pub static RG16: GLenum = 0x822C;
pub static R16F: GLenum = 0x822D;
pub static R16F_EXT: GLenum = 0x822D;
pub static R32F: GLenum = 0x822E;
pub static RG16F: GLenum = 0x822F;
pub static RG16F_EXT: GLenum = 0x822F;
pub static RG32F: GLenum = 0x8230;
pub static R8I: GLenum = 0x8231;
pub static R8UI: GLenum = 0x8232;
pub static R16I: GLenum = 0x8233;
pub static R16UI: GLenum = 0x8234;
pub static R32I: GLenum = 0x8235;
pub static R32UI: GLenum = 0x8236;
pub static RG8I: GLenum = 0x8237;
pub static RG8UI: GLenum = 0x8238;
pub static RG16I: GLenum = 0x8239;
pub static RG16UI: GLenum = 0x823A;
pub static RG32I: GLenum = 0x823B;
pub static RG32UI: GLenum = 0x823C;
pub static SYNC_CL_EVENT_ARB: GLenum = 0x8240;
pub static SYNC_CL_EVENT_COMPLETE_ARB: GLenum = 0x8241;
pub static DEBUG_OUTPUT_SYNCHRONOUS: GLenum = 0x8242;
pub static DEBUG_OUTPUT_SYNCHRONOUS_ARB: GLenum = 0x8242;
pub static DEBUG_OUTPUT_SYNCHRONOUS_KHR: GLenum = 0x8242;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: GLenum = 0x8243;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: GLenum = 0x8243;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR: GLenum = 0x8243;
pub static DEBUG_CALLBACK_FUNCTION: GLenum = 0x8244;
pub static DEBUG_CALLBACK_FUNCTION_ARB: GLenum = 0x8244;
pub static DEBUG_CALLBACK_FUNCTION_KHR: GLenum = 0x8244;
pub static DEBUG_CALLBACK_USER_PARAM: GLenum = 0x8245;
pub static DEBUG_CALLBACK_USER_PARAM_ARB: GLenum = 0x8245;
pub static DEBUG_CALLBACK_USER_PARAM_KHR: GLenum = 0x8245;
pub static DEBUG_SOURCE_API: GLenum = 0x8246;
pub static DEBUG_SOURCE_API_ARB: GLenum = 0x8246;
pub static DEBUG_SOURCE_API_KHR: GLenum = 0x8246;
pub static DEBUG_SOURCE_WINDOW_SYSTEM: GLenum = 0x8247;
pub static DEBUG_SOURCE_WINDOW_SYSTEM_ARB: GLenum = 0x8247;
pub static DEBUG_SOURCE_WINDOW_SYSTEM_KHR: GLenum = 0x8247;
pub static DEBUG_SOURCE_SHADER_COMPILER: GLenum = 0x8248;
pub static DEBUG_SOURCE_SHADER_COMPILER_ARB: GLenum = 0x8248;
pub static DEBUG_SOURCE_SHADER_COMPILER_KHR: GLenum = 0x8248;
pub static DEBUG_SOURCE_THIRD_PARTY: GLenum = 0x8249;
pub static DEBUG_SOURCE_THIRD_PARTY_ARB: GLenum = 0x8249;
pub static DEBUG_SOURCE_THIRD_PARTY_KHR: GLenum = 0x8249;
pub static DEBUG_SOURCE_APPLICATION: GLenum = 0x824A;
pub static DEBUG_SOURCE_APPLICATION_ARB: GLenum = 0x824A;
pub static DEBUG_SOURCE_APPLICATION_KHR: GLenum = 0x824A;
pub static DEBUG_SOURCE_OTHER: GLenum = 0x824B;
pub static DEBUG_SOURCE_OTHER_ARB: GLenum = 0x824B;
pub static DEBUG_SOURCE_OTHER_KHR: GLenum = 0x824B;
pub static DEBUG_TYPE_ERROR: GLenum = 0x824C;
pub static DEBUG_TYPE_ERROR_ARB: GLenum = 0x824C;
pub static DEBUG_TYPE_ERROR_KHR: GLenum = 0x824C;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR: GLenum = 0x824D;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: GLenum = 0x824D;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR: GLenum = 0x824D;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR: GLenum = 0x824E;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: GLenum = 0x824E;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR: GLenum = 0x824E;
pub static DEBUG_TYPE_PORTABILITY: GLenum = 0x824F;
pub static DEBUG_TYPE_PORTABILITY_ARB: GLenum = 0x824F;
pub static DEBUG_TYPE_PORTABILITY_KHR: GLenum = 0x824F;
pub static DEBUG_TYPE_PERFORMANCE: GLenum = 0x8250;
pub static DEBUG_TYPE_PERFORMANCE_ARB: GLenum = 0x8250;
pub static DEBUG_TYPE_PERFORMANCE_KHR: GLenum = 0x8250;
pub static DEBUG_TYPE_OTHER: GLenum = 0x8251;
pub static DEBUG_TYPE_OTHER_ARB: GLenum = 0x8251;
pub static DEBUG_TYPE_OTHER_KHR: GLenum = 0x8251;
pub static LOSE_CONTEXT_ON_RESET_ARB: GLenum = 0x8252;
pub static GUILTY_CONTEXT_RESET_ARB: GLenum = 0x8253;
pub static INNOCENT_CONTEXT_RESET_ARB: GLenum = 0x8254;
pub static UNKNOWN_CONTEXT_RESET_ARB: GLenum = 0x8255;
pub static RESET_NOTIFICATION_STRATEGY_ARB: GLenum = 0x8256;
pub static PROGRAM_BINARY_RETRIEVABLE_HINT: GLenum = 0x8257;
pub static PROGRAM_SEPARABLE: GLenum = 0x8258;
pub static PROGRAM_SEPARABLE_EXT: GLenum = 0x8258;
pub static ACTIVE_PROGRAM: GLenum = 0x8259;
pub static ACTIVE_PROGRAM_EXT: GLenum = 0x8259;
pub static PROGRAM_PIPELINE_BINDING: GLenum = 0x825A;
pub static PROGRAM_PIPELINE_BINDING_EXT: GLenum = 0x825A;
pub static MAX_VIEWPORTS: GLenum = 0x825B;
pub static VIEWPORT_SUBPIXEL_BITS: GLenum = 0x825C;
pub static VIEWPORT_BOUNDS_RANGE: GLenum = 0x825D;
pub static LAYER_PROVOKING_VERTEX: GLenum = 0x825E;
pub static VIEWPORT_INDEX_PROVOKING_VERTEX: GLenum = 0x825F;
pub static UNDEFINED_VERTEX: GLenum = 0x8260;
pub static NO_RESET_NOTIFICATION_ARB: GLenum = 0x8261;
pub static MAX_COMPUTE_SHARED_MEMORY_SIZE: GLenum = 0x8262;
pub static MAX_COMPUTE_UNIFORM_COMPONENTS: GLenum = 0x8263;
pub static MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: GLenum = 0x8264;
pub static MAX_COMPUTE_ATOMIC_COUNTERS: GLenum = 0x8265;
pub static MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: GLenum = 0x8266;
pub static COMPUTE_LOCAL_WORK_SIZE: GLenum = 0x8267;
pub static DEBUG_TYPE_MARKER: GLenum = 0x8268;
pub static DEBUG_TYPE_MARKER_KHR: GLenum = 0x8268;
pub static DEBUG_TYPE_PUSH_GROUP: GLenum = 0x8269;
pub static DEBUG_TYPE_PUSH_GROUP_KHR: GLenum = 0x8269;
pub static DEBUG_TYPE_POP_GROUP: GLenum = 0x826A;
pub static DEBUG_TYPE_POP_GROUP_KHR: GLenum = 0x826A;
pub static DEBUG_SEVERITY_NOTIFICATION: GLenum = 0x826B;
pub static DEBUG_SEVERITY_NOTIFICATION_KHR: GLenum = 0x826B;
pub static MAX_DEBUG_GROUP_STACK_DEPTH: GLenum = 0x826C;
pub static MAX_DEBUG_GROUP_STACK_DEPTH_KHR: GLenum = 0x826C;
pub static DEBUG_GROUP_STACK_DEPTH: GLenum = 0x826D;
pub static DEBUG_GROUP_STACK_DEPTH_KHR: GLenum = 0x826D;
pub static MAX_UNIFORM_LOCATIONS: GLenum = 0x826E;
pub static INTERNALFORMAT_SUPPORTED: GLenum = 0x826F;
pub static INTERNALFORMAT_PREFERRED: GLenum = 0x8270;
pub static INTERNALFORMAT_RED_SIZE: GLenum = 0x8271;
pub static INTERNALFORMAT_GREEN_SIZE: GLenum = 0x8272;
pub static INTERNALFORMAT_BLUE_SIZE: GLenum = 0x8273;
pub static INTERNALFORMAT_ALPHA_SIZE: GLenum = 0x8274;
pub static INTERNALFORMAT_DEPTH_SIZE: GLenum = 0x8275;
pub static INTERNALFORMAT_STENCIL_SIZE: GLenum = 0x8276;
pub static INTERNALFORMAT_SHARED_SIZE: GLenum = 0x8277;
pub static INTERNALFORMAT_RED_TYPE: GLenum = 0x8278;
pub static INTERNALFORMAT_GREEN_TYPE: GLenum = 0x8279;
pub static INTERNALFORMAT_BLUE_TYPE: GLenum = 0x827A;
pub static INTERNALFORMAT_ALPHA_TYPE: GLenum = 0x827B;
pub static INTERNALFORMAT_DEPTH_TYPE: GLenum = 0x827C;
pub static INTERNALFORMAT_STENCIL_TYPE: GLenum = 0x827D;
pub static MAX_WIDTH: GLenum = 0x827E;
pub static MAX_HEIGHT: GLenum = 0x827F;
pub static MAX_DEPTH: GLenum = 0x8280;
pub static MAX_LAYERS: GLenum = 0x8281;
pub static MAX_COMBINED_DIMENSIONS: GLenum = 0x8282;
pub static COLOR_COMPONENTS: GLenum = 0x8283;
pub static DEPTH_COMPONENTS: GLenum = 0x8284;
pub static STENCIL_COMPONENTS: GLenum = 0x8285;
pub static COLOR_RENDERABLE: GLenum = 0x8286;
pub static DEPTH_RENDERABLE: GLenum = 0x8287;
pub static STENCIL_RENDERABLE: GLenum = 0x8288;
pub static FRAMEBUFFER_RENDERABLE: GLenum = 0x8289;
pub static FRAMEBUFFER_RENDERABLE_LAYERED: GLenum = 0x828A;
pub static FRAMEBUFFER_BLEND: GLenum = 0x828B;
pub static READ_PIXELS: GLenum = 0x828C;
pub static READ_PIXELS_FORMAT: GLenum = 0x828D;
pub static READ_PIXELS_TYPE: GLenum = 0x828E;
pub static TEXTURE_IMAGE_FORMAT: GLenum = 0x828F;
pub static TEXTURE_IMAGE_TYPE: GLenum = 0x8290;
pub static GET_TEXTURE_IMAGE_FORMAT: GLenum = 0x8291;
pub static GET_TEXTURE_IMAGE_TYPE: GLenum = 0x8292;
pub static MIPMAP: GLenum = 0x8293;
pub static MANUAL_GENERATE_MIPMAP: GLenum = 0x8294;
pub static AUTO_GENERATE_MIPMAP: GLenum = 0x8295;
pub static COLOR_ENCODING: GLenum = 0x8296;
pub static SRGB_READ: GLenum = 0x8297;
pub static SRGB_WRITE: GLenum = 0x8298;
pub static SRGB_DECODE_ARB: GLenum = 0x8299;
pub static FILTER: GLenum = 0x829A;
pub static VERTEX_TEXTURE: GLenum = 0x829B;
pub static TESS_CONTROL_TEXTURE: GLenum = 0x829C;
pub static TESS_EVALUATION_TEXTURE: GLenum = 0x829D;
pub static GEOMETRY_TEXTURE: GLenum = 0x829E;
pub static FRAGMENT_TEXTURE: GLenum = 0x829F;
pub static COMPUTE_TEXTURE: GLenum = 0x82A0;
pub static TEXTURE_SHADOW: GLenum = 0x82A1;
pub static TEXTURE_GATHER: GLenum = 0x82A2;
pub static TEXTURE_GATHER_SHADOW: GLenum = 0x82A3;
pub static SHADER_IMAGE_LOAD: GLenum = 0x82A4;
pub static SHADER_IMAGE_STORE: GLenum = 0x82A5;
pub static SHADER_IMAGE_ATOMIC: GLenum = 0x82A6;
pub static IMAGE_TEXEL_SIZE: GLenum = 0x82A7;
pub static IMAGE_COMPATIBILITY_CLASS: GLenum = 0x82A8;
pub static IMAGE_PIXEL_FORMAT: GLenum = 0x82A9;
pub static IMAGE_PIXEL_TYPE: GLenum = 0x82AA;
pub static SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: GLenum = 0x82AC;
pub static SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: GLenum = 0x82AD;
pub static SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: GLenum = 0x82AE;
pub static SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: GLenum = 0x82AF;
pub static TEXTURE_COMPRESSED_BLOCK_WIDTH: GLenum = 0x82B1;
pub static TEXTURE_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x82B2;
pub static TEXTURE_COMPRESSED_BLOCK_SIZE: GLenum = 0x82B3;
pub static CLEAR_BUFFER: GLenum = 0x82B4;
pub static TEXTURE_VIEW: GLenum = 0x82B5;
pub static VIEW_COMPATIBILITY_CLASS: GLenum = 0x82B6;
pub static FULL_SUPPORT: GLenum = 0x82B7;
pub static CAVEAT_SUPPORT: GLenum = 0x82B8;
pub static IMAGE_CLASS_4_X_32: GLenum = 0x82B9;
pub static IMAGE_CLASS_2_X_32: GLenum = 0x82BA;
pub static IMAGE_CLASS_1_X_32: GLenum = 0x82BB;
pub static IMAGE_CLASS_4_X_16: GLenum = 0x82BC;
pub static IMAGE_CLASS_2_X_16: GLenum = 0x82BD;
pub static IMAGE_CLASS_1_X_16: GLenum = 0x82BE;
pub static IMAGE_CLASS_4_X_8: GLenum = 0x82BF;
pub static IMAGE_CLASS_2_X_8: GLenum = 0x82C0;
pub static IMAGE_CLASS_1_X_8: GLenum = 0x82C1;
pub static IMAGE_CLASS_11_11_10: GLenum = 0x82C2;
pub static IMAGE_CLASS_10_10_10_2: GLenum = 0x82C3;
pub static VIEW_CLASS_128_BITS: GLenum = 0x82C4;
pub static VIEW_CLASS_96_BITS: GLenum = 0x82C5;
pub static VIEW_CLASS_64_BITS: GLenum = 0x82C6;
pub static VIEW_CLASS_48_BITS: GLenum = 0x82C7;
pub static VIEW_CLASS_32_BITS: GLenum = 0x82C8;
pub static VIEW_CLASS_24_BITS: GLenum = 0x82C9;
pub static VIEW_CLASS_16_BITS: GLenum = 0x82CA;
pub static VIEW_CLASS_8_BITS: GLenum = 0x82CB;
pub static VIEW_CLASS_S3TC_DXT1_RGB: GLenum = 0x82CC;
pub static VIEW_CLASS_S3TC_DXT1_RGBA: GLenum = 0x82CD;
pub static VIEW_CLASS_S3TC_DXT3_RGBA: GLenum = 0x82CE;
pub static VIEW_CLASS_S3TC_DXT5_RGBA: GLenum = 0x82CF;
pub static VIEW_CLASS_RGTC1_RED: GLenum = 0x82D0;
pub static VIEW_CLASS_RGTC2_RG: GLenum = 0x82D1;
pub static VIEW_CLASS_BPTC_UNORM: GLenum = 0x82D2;
pub static VIEW_CLASS_BPTC_FLOAT: GLenum = 0x82D3;
pub static VERTEX_ATTRIB_BINDING: GLenum = 0x82D4;
pub static VERTEX_ATTRIB_RELATIVE_OFFSET: GLenum = 0x82D5;
pub static VERTEX_BINDING_DIVISOR: GLenum = 0x82D6;
pub static VERTEX_BINDING_OFFSET: GLenum = 0x82D7;
pub static VERTEX_BINDING_STRIDE: GLenum = 0x82D8;
pub static MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: GLenum = 0x82D9;
pub static MAX_VERTEX_ATTRIB_BINDINGS: GLenum = 0x82DA;
pub static TEXTURE_VIEW_MIN_LEVEL: GLenum = 0x82DB;
pub static TEXTURE_VIEW_NUM_LEVELS: GLenum = 0x82DC;
pub static TEXTURE_VIEW_MIN_LAYER: GLenum = 0x82DD;
pub static TEXTURE_VIEW_NUM_LAYERS: GLenum = 0x82DE;
pub static TEXTURE_IMMUTABLE_LEVELS: GLenum = 0x82DF;
pub static BUFFER: GLenum = 0x82E0;
pub static BUFFER_KHR: GLenum = 0x82E0;
pub static SHADER: GLenum = 0x82E1;
pub static SHADER_KHR: GLenum = 0x82E1;
pub static PROGRAM: GLenum = 0x82E2;
pub static PROGRAM_KHR: GLenum = 0x82E2;
pub static QUERY: GLenum = 0x82E3;
pub static QUERY_KHR: GLenum = 0x82E3;
pub static PROGRAM_PIPELINE: GLenum = 0x82E4;
pub static MAX_VERTEX_ATTRIB_STRIDE: GLenum = 0x82E5;
pub static SAMPLER: GLenum = 0x82E6;
pub static SAMPLER_KHR: GLenum = 0x82E6;
pub static DISPLAY_LIST: GLenum = 0x82E7;
pub static MAX_LABEL_LENGTH: GLenum = 0x82E8;
pub static MAX_LABEL_LENGTH_KHR: GLenum = 0x82E8;
pub static NUM_SHADING_LANGUAGE_VERSIONS: GLenum = 0x82E9;
pub static DEPTH_PASS_INSTRUMENT_SGIX: GLenum = 0x8310;
pub static DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX: GLenum = 0x8311;
pub static DEPTH_PASS_INSTRUMENT_MAX_SGIX: GLenum = 0x8312;
pub static FRAGMENTS_INSTRUMENT_SGIX: GLenum = 0x8313;
pub static FRAGMENTS_INSTRUMENT_COUNTERS_SGIX: GLenum = 0x8314;
pub static FRAGMENTS_INSTRUMENT_MAX_SGIX: GLenum = 0x8315;
pub static CONVOLUTION_HINT_SGIX: GLenum = 0x8316;
pub static YCRCB_SGIX: GLenum = 0x8318;
pub static YCRCBA_SGIX: GLenum = 0x8319;
pub static UNPACK_COMPRESSED_SIZE_SGIX: GLenum = 0x831A;
pub static PACK_MAX_COMPRESSED_SIZE_SGIX: GLenum = 0x831B;
pub static PACK_COMPRESSED_SIZE_SGIX: GLenum = 0x831C;
pub static SLIM8U_SGIX: GLenum = 0x831D;
pub static SLIM10U_SGIX: GLenum = 0x831E;
pub static SLIM12S_SGIX: GLenum = 0x831F;
pub static ALPHA_MIN_SGIX: GLenum = 0x8320;
pub static ALPHA_MAX_SGIX: GLenum = 0x8321;
pub static SCALEBIAS_HINT_SGIX: GLenum = 0x8322;
pub static ASYNC_MARKER_SGIX: GLenum = 0x8329;
pub static PIXEL_TEX_GEN_MODE_SGIX: GLenum = 0x832B;
pub static ASYNC_HISTOGRAM_SGIX: GLenum = 0x832C;
pub static MAX_ASYNC_HISTOGRAM_SGIX: GLenum = 0x832D;
pub static PIXEL_TRANSFORM_2D_EXT: GLenum = 0x8330;
pub static PIXEL_MAG_FILTER_EXT: GLenum = 0x8331;
pub static PIXEL_MIN_FILTER_EXT: GLenum = 0x8332;
pub static PIXEL_CUBIC_WEIGHT_EXT: GLenum = 0x8333;
pub static CUBIC_EXT: GLenum = 0x8334;
pub static AVERAGE_EXT: GLenum = 0x8335;
pub static PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: GLenum = 0x8336;
pub static MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: GLenum = 0x8337;
pub static PIXEL_TRANSFORM_2D_MATRIX_EXT: GLenum = 0x8338;
pub static FRAGMENT_MATERIAL_EXT: GLenum = 0x8349;
pub static FRAGMENT_NORMAL_EXT: GLenum = 0x834A;
pub static FRAGMENT_COLOR_EXT: GLenum = 0x834C;
pub static ATTENUATION_EXT: GLenum = 0x834D;
pub static SHADOW_ATTENUATION_EXT: GLenum = 0x834E;
pub static TEXTURE_APPLICATION_MODE_EXT: GLenum = 0x834F;
pub static TEXTURE_LIGHT_EXT: GLenum = 0x8350;
pub static TEXTURE_MATERIAL_FACE_EXT: GLenum = 0x8351;
pub static TEXTURE_MATERIAL_PARAMETER_EXT: GLenum = 0x8352;
pub static PIXEL_TEXTURE_SGIS: GLenum = 0x8353;
pub static PIXEL_FRAGMENT_RGB_SOURCE_SGIS: GLenum = 0x8354;
pub static PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: GLenum = 0x8355;
pub static PIXEL_GROUP_COLOR_SGIS: GLenum = 0x8356;
pub static LINE_QUALITY_HINT_SGIX: GLenum = 0x835B;
pub static ASYNC_TEX_IMAGE_SGIX: GLenum = 0x835C;
pub static ASYNC_DRAW_PIXELS_SGIX: GLenum = 0x835D;
pub static ASYNC_READ_PIXELS_SGIX: GLenum = 0x835E;
pub static MAX_ASYNC_TEX_IMAGE_SGIX: GLenum = 0x835F;
pub static MAX_ASYNC_DRAW_PIXELS_SGIX: GLenum = 0x8360;
pub static MAX_ASYNC_READ_PIXELS_SGIX: GLenum = 0x8361;
pub static UNSIGNED_BYTE_2_3_3_REV: GLenum = 0x8362;
pub static UNSIGNED_BYTE_2_3_3_REV_EXT: GLenum = 0x8362;
pub static UNSIGNED_SHORT_5_6_5: GLenum = 0x8363;
pub static UNSIGNED_SHORT_5_6_5_EXT: GLenum = 0x8363;
pub static UNSIGNED_SHORT_5_6_5_REV: GLenum = 0x8364;
pub static UNSIGNED_SHORT_5_6_5_REV_EXT: GLenum = 0x8364;
pub static UNSIGNED_SHORT_4_4_4_4_REV: GLenum = 0x8365;
pub static UNSIGNED_SHORT_4_4_4_4_REV_EXT: GLenum = 0x8365;
pub static UNSIGNED_SHORT_1_5_5_5_REV: GLenum = 0x8366;
pub static UNSIGNED_SHORT_1_5_5_5_REV_EXT: GLenum = 0x8366;
pub static UNSIGNED_INT_8_8_8_8_REV: GLenum = 0x8367;
pub static UNSIGNED_INT_8_8_8_8_REV_EXT: GLenum = 0x8367;
pub static UNSIGNED_INT_2_10_10_10_REV: GLenum = 0x8368;
pub static UNSIGNED_INT_2_10_10_10_REV_EXT: GLenum = 0x8368;
pub static TEXTURE_MAX_CLAMP_S_SGIX: GLenum = 0x8369;
pub static TEXTURE_MAX_CLAMP_T_SGIX: GLenum = 0x836A;
pub static TEXTURE_MAX_CLAMP_R_SGIX: GLenum = 0x836B;
pub static MIRRORED_REPEAT: GLenum = 0x8370;
pub static MIRRORED_REPEAT_ARB: GLenum = 0x8370;
pub static MIRRORED_REPEAT_IBM: GLenum = 0x8370;
pub static MIRRORED_REPEAT_OES: GLenum = 0x8370;
pub static RGB_S3TC: GLenum = 0x83A0;
pub static RGB4_S3TC: GLenum = 0x83A1;
pub static RGBA_S3TC: GLenum = 0x83A2;
pub static RGBA4_S3TC: GLenum = 0x83A3;
pub static RGBA_DXT5_S3TC: GLenum = 0x83A4;
pub static RGBA4_DXT5_S3TC: GLenum = 0x83A5;
pub static VERTEX_PRECLIP_SGIX: GLenum = 0x83EE;
pub static VERTEX_PRECLIP_HINT_SGIX: GLenum = 0x83EF;
pub static COMPRESSED_RGB_S3TC_DXT1_EXT: GLenum = 0x83F0;
pub static COMPRESSED_RGBA_S3TC_DXT1_EXT: GLenum = 0x83F1;
pub static COMPRESSED_RGBA_S3TC_DXT3_ANGLE: GLenum = 0x83F2;
pub static COMPRESSED_RGBA_S3TC_DXT3_EXT: GLenum = 0x83F2;
pub static COMPRESSED_RGBA_S3TC_DXT5_ANGLE: GLenum = 0x83F3;
pub static COMPRESSED_RGBA_S3TC_DXT5_EXT: GLenum = 0x83F3;
pub static PARALLEL_ARRAYS_INTEL: GLenum = 0x83F4;
pub static VERTEX_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F5;
pub static NORMAL_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F6;
pub static COLOR_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F7;
pub static TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F8;
pub static TEXTURE_MEMORY_LAYOUT_INTEL: GLenum = 0x83FF;
pub static FRAGMENT_LIGHTING_SGIX: GLenum = 0x8400;
pub static FRAGMENT_COLOR_MATERIAL_SGIX: GLenum = 0x8401;
pub static FRAGMENT_COLOR_MATERIAL_FACE_SGIX: GLenum = 0x8402;
pub static FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: GLenum = 0x8403;
pub static MAX_FRAGMENT_LIGHTS_SGIX: GLenum = 0x8404;
pub static MAX_ACTIVE_LIGHTS_SGIX: GLenum = 0x8405;
pub static CURRENT_RASTER_NORMAL_SGIX: GLenum = 0x8406;
pub static LIGHT_ENV_MODE_SGIX: GLenum = 0x8407;
pub static FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: GLenum = 0x8408;
pub static FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: GLenum = 0x8409;
pub static FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: GLenum = 0x840A;
pub static FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: GLenum = 0x840B;
pub static FRAGMENT_LIGHT0_SGIX: GLenum = 0x840C;
pub static FRAGMENT_LIGHT1_SGIX: GLenum = 0x840D;
pub static FRAGMENT_LIGHT2_SGIX: GLenum = 0x840E;
pub static FRAGMENT_LIGHT3_SGIX: GLenum = 0x840F;
pub static FRAGMENT_LIGHT4_SGIX: GLenum = 0x8410;
pub static FRAGMENT_LIGHT5_SGIX: GLenum = 0x8411;
pub static FRAGMENT_LIGHT6_SGIX: GLenum = 0x8412;
pub static FRAGMENT_LIGHT7_SGIX: GLenum = 0x8413;
pub static PACK_RESAMPLE_SGIX: GLenum = 0x842C;
pub static UNPACK_RESAMPLE_SGIX: GLenum = 0x842D;
pub static RESAMPLE_REPLICATE_SGIX: GLenum = 0x842E;
pub static RESAMPLE_ZERO_FILL_SGIX: GLenum = 0x842F;
pub static RESAMPLE_DECIMATE_SGIX: GLenum = 0x8430;
pub static TANGENT_ARRAY_EXT: GLenum = 0x8439;
pub static BINORMAL_ARRAY_EXT: GLenum = 0x843A;
pub static CURRENT_TANGENT_EXT: GLenum = 0x843B;
pub static CURRENT_BINORMAL_EXT: GLenum = 0x843C;
pub static TANGENT_ARRAY_TYPE_EXT: GLenum = 0x843E;
pub static TANGENT_ARRAY_STRIDE_EXT: GLenum = 0x843F;
pub static BINORMAL_ARRAY_TYPE_EXT: GLenum = 0x8440;
pub static BINORMAL_ARRAY_STRIDE_EXT: GLenum = 0x8441;
pub static TANGENT_ARRAY_POINTER_EXT: GLenum = 0x8442;
pub static BINORMAL_ARRAY_POINTER_EXT: GLenum = 0x8443;
pub static MAP1_TANGENT_EXT: GLenum = 0x8444;
pub static MAP2_TANGENT_EXT: GLenum = 0x8445;
pub static MAP1_BINORMAL_EXT: GLenum = 0x8446;
pub static MAP2_BINORMAL_EXT: GLenum = 0x8447;
pub static NEAREST_CLIPMAP_NEAREST_SGIX: GLenum = 0x844D;
pub static NEAREST_CLIPMAP_LINEAR_SGIX: GLenum = 0x844E;
pub static LINEAR_CLIPMAP_NEAREST_SGIX: GLenum = 0x844F;
pub static FOG_COORDINATE_SOURCE: GLenum = 0x8450;
pub static FOG_COORDINATE_SOURCE_EXT: GLenum = 0x8450;
pub static FOG_COORD_SRC: GLenum = 0x8450;
pub static FOG_COORDINATE: GLenum = 0x8451;
pub static FOG_COORD: GLenum = 0x8451;
pub static FOG_COORDINATE_EXT: GLenum = 0x8451;
pub static FRAGMENT_DEPTH: GLenum = 0x8452;
pub static FRAGMENT_DEPTH_EXT: GLenum = 0x8452;
pub static CURRENT_FOG_COORDINATE: GLenum = 0x8453;
pub static CURRENT_FOG_COORD: GLenum = 0x8453;
pub static CURRENT_FOG_COORDINATE_EXT: GLenum = 0x8453;
pub static FOG_COORDINATE_ARRAY_TYPE: GLenum = 0x8454;
pub static FOG_COORDINATE_ARRAY_TYPE_EXT: GLenum = 0x8454;
pub static FOG_COORD_ARRAY_TYPE: GLenum = 0x8454;
pub static FOG_COORDINATE_ARRAY_STRIDE: GLenum = 0x8455;
pub static FOG_COORDINATE_ARRAY_STRIDE_EXT: GLenum = 0x8455;
pub static FOG_COORD_ARRAY_STRIDE: GLenum = 0x8455;
pub static FOG_COORDINATE_ARRAY_POINTER: GLenum = 0x8456;
pub static FOG_COORDINATE_ARRAY_POINTER_EXT: GLenum = 0x8456;
pub static FOG_COORD_ARRAY_POINTER: GLenum = 0x8456;
pub static FOG_COORDINATE_ARRAY: GLenum = 0x8457;
pub static FOG_COORDINATE_ARRAY_EXT: GLenum = 0x8457;
pub static FOG_COORD_ARRAY: GLenum = 0x8457;
pub static COLOR_SUM: GLenum = 0x8458;
pub static COLOR_SUM_ARB: GLenum = 0x8458;
pub static COLOR_SUM_EXT: GLenum = 0x8458;
pub static CURRENT_SECONDARY_COLOR: GLenum = 0x8459;
pub static CURRENT_SECONDARY_COLOR_EXT: GLenum = 0x8459;
pub static SECONDARY_COLOR_ARRAY_SIZE: GLenum = 0x845A;
pub static SECONDARY_COLOR_ARRAY_SIZE_EXT: GLenum = 0x845A;
pub static SECONDARY_COLOR_ARRAY_TYPE: GLenum = 0x845B;
pub static SECONDARY_COLOR_ARRAY_TYPE_EXT: GLenum = 0x845B;
pub static SECONDARY_COLOR_ARRAY_STRIDE: GLenum = 0x845C;
pub static SECONDARY_COLOR_ARRAY_STRIDE_EXT: GLenum = 0x845C;
pub static SECONDARY_COLOR_ARRAY_POINTER: GLenum = 0x845D;
pub static SECONDARY_COLOR_ARRAY_POINTER_EXT: GLenum = 0x845D;
pub static SECONDARY_COLOR_ARRAY: GLenum = 0x845E;
pub static SECONDARY_COLOR_ARRAY_EXT: GLenum = 0x845E;
pub static CURRENT_RASTER_SECONDARY_COLOR: GLenum = 0x845F;
pub static ALIASED_POINT_SIZE_RANGE: GLenum = 0x846D;
pub static ALIASED_LINE_WIDTH_RANGE: GLenum = 0x846E;
pub static SCREEN_COORDINATES_REND: GLenum = 0x8490;
pub static INVERTED_SCREEN_W_REND: GLenum = 0x8491;
pub static TEXTURE0: GLenum = 0x84C0;
pub static TEXTURE0_ARB: GLenum = 0x84C0;
pub static TEXTURE1: GLenum = 0x84C1;
pub static TEXTURE1_ARB: GLenum = 0x84C1;
pub static TEXTURE2: GLenum = 0x84C2;
pub static TEXTURE2_ARB: GLenum = 0x84C2;
pub static TEXTURE3: GLenum = 0x84C3;
pub static TEXTURE3_ARB: GLenum = 0x84C3;
pub static TEXTURE4: GLenum = 0x84C4;
pub static TEXTURE4_ARB: GLenum = 0x84C4;
pub static TEXTURE5: GLenum = 0x84C5;
pub static TEXTURE5_ARB: GLenum = 0x84C5;
pub static TEXTURE6: GLenum = 0x84C6;
pub static TEXTURE6_ARB: GLenum = 0x84C6;
pub static TEXTURE7: GLenum = 0x84C7;
pub static TEXTURE7_ARB: GLenum = 0x84C7;
pub static TEXTURE8: GLenum = 0x84C8;
pub static TEXTURE8_ARB: GLenum = 0x84C8;
pub static TEXTURE9: GLenum = 0x84C9;
pub static TEXTURE9_ARB: GLenum = 0x84C9;
pub static TEXTURE10: GLenum = 0x84CA;
pub static TEXTURE10_ARB: GLenum = 0x84CA;
pub static TEXTURE11: GLenum = 0x84CB;
pub static TEXTURE11_ARB: GLenum = 0x84CB;
pub static TEXTURE12: GLenum = 0x84CC;
pub static TEXTURE12_ARB: GLenum = 0x84CC;
pub static TEXTURE13: GLenum = 0x84CD;
pub static TEXTURE13_ARB: GLenum = 0x84CD;
pub static TEXTURE14: GLenum = 0x84CE;
pub static TEXTURE14_ARB: GLenum = 0x84CE;
pub static TEXTURE15: GLenum = 0x84CF;
pub static TEXTURE15_ARB: GLenum = 0x84CF;
pub static TEXTURE16: GLenum = 0x84D0;
pub static TEXTURE16_ARB: GLenum = 0x84D0;
pub static TEXTURE17: GLenum = 0x84D1;
pub static TEXTURE17_ARB: GLenum = 0x84D1;
pub static TEXTURE18: GLenum = 0x84D2;
pub static TEXTURE18_ARB: GLenum = 0x84D2;
pub static TEXTURE19: GLenum = 0x84D3;
pub static TEXTURE19_ARB: GLenum = 0x84D3;
pub static TEXTURE20: GLenum = 0x84D4;
pub static TEXTURE20_ARB: GLenum = 0x84D4;
pub static TEXTURE21: GLenum = 0x84D5;
pub static TEXTURE21_ARB: GLenum = 0x84D5;
pub static TEXTURE22: GLenum = 0x84D6;
pub static TEXTURE22_ARB: GLenum = 0x84D6;
pub static TEXTURE23: GLenum = 0x84D7;
pub static TEXTURE23_ARB: GLenum = 0x84D7;
pub static TEXTURE24: GLenum = 0x84D8;
pub static TEXTURE24_ARB: GLenum = 0x84D8;
pub static TEXTURE25: GLenum = 0x84D9;
pub static TEXTURE25_ARB: GLenum = 0x84D9;
pub static TEXTURE26: GLenum = 0x84DA;
pub static TEXTURE26_ARB: GLenum = 0x84DA;
pub static TEXTURE27: GLenum = 0x84DB;
pub static TEXTURE27_ARB: GLenum = 0x84DB;
pub static TEXTURE28: GLenum = 0x84DC;
pub static TEXTURE28_ARB: GLenum = 0x84DC;
pub static TEXTURE29: GLenum = 0x84DD;
pub static TEXTURE29_ARB: GLenum = 0x84DD;
pub static TEXTURE30: GLenum = 0x84DE;
pub static TEXTURE30_ARB: GLenum = 0x84DE;
pub static TEXTURE31: GLenum = 0x84DF;
pub static TEXTURE31_ARB: GLenum = 0x84DF;
pub static ACTIVE_TEXTURE: GLenum = 0x84E0;
pub static ACTIVE_TEXTURE_ARB: GLenum = 0x84E0;
pub static CLIENT_ACTIVE_TEXTURE: GLenum = 0x84E1;
pub static CLIENT_ACTIVE_TEXTURE_ARB: GLenum = 0x84E1;
pub static MAX_TEXTURE_UNITS: GLenum = 0x84E2;
pub static MAX_TEXTURE_UNITS_ARB: GLenum = 0x84E2;
pub static TRANSPOSE_MODELVIEW_MATRIX: GLenum = 0x84E3;
pub static TRANSPOSE_MODELVIEW_MATRIX_ARB: GLenum = 0x84E3;
pub static TRANSPOSE_PROJECTION_MATRIX: GLenum = 0x84E4;
pub static TRANSPOSE_PROJECTION_MATRIX_ARB: GLenum = 0x84E4;
pub static TRANSPOSE_TEXTURE_MATRIX: GLenum = 0x84E5;
pub static TRANSPOSE_TEXTURE_MATRIX_ARB: GLenum = 0x84E5;
pub static TRANSPOSE_COLOR_MATRIX: GLenum = 0x84E6;
pub static TRANSPOSE_COLOR_MATRIX_ARB: GLenum = 0x84E6;
pub static SUBTRACT: GLenum = 0x84E7;
pub static SUBTRACT_ARB: GLenum = 0x84E7;
pub static MAX_RENDERBUFFER_SIZE: GLenum = 0x84E8;
pub static MAX_RENDERBUFFER_SIZE_EXT: GLenum = 0x84E8;
pub static MAX_RENDERBUFFER_SIZE_OES: GLenum = 0x84E8;
pub static COMPRESSED_ALPHA: GLenum = 0x84E9;
pub static COMPRESSED_ALPHA_ARB: GLenum = 0x84E9;
pub static COMPRESSED_LUMINANCE: GLenum = 0x84EA;
pub static COMPRESSED_LUMINANCE_ARB: GLenum = 0x84EA;
pub static COMPRESSED_LUMINANCE_ALPHA: GLenum = 0x84EB;
pub static COMPRESSED_LUMINANCE_ALPHA_ARB: GLenum = 0x84EB;
pub static COMPRESSED_INTENSITY: GLenum = 0x84EC;
pub static COMPRESSED_INTENSITY_ARB: GLenum = 0x84EC;
pub static COMPRESSED_RGB: GLenum = 0x84ED;
pub static COMPRESSED_RGB_ARB: GLenum = 0x84ED;
pub static COMPRESSED_RGBA: GLenum = 0x84EE;
pub static COMPRESSED_RGBA_ARB: GLenum = 0x84EE;
pub static TEXTURE_COMPRESSION_HINT: GLenum = 0x84EF;
pub static TEXTURE_COMPRESSION_HINT_ARB: GLenum = 0x84EF;
pub static UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x84F0;
pub static UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x84F1;
pub static ALL_COMPLETED_NV: GLenum = 0x84F2;
pub static FENCE_STATUS_NV: GLenum = 0x84F3;
pub static FENCE_CONDITION_NV: GLenum = 0x84F4;
pub static TEXTURE_RECTANGLE: GLenum = 0x84F5;
pub static TEXTURE_RECTANGLE_ARB: GLenum = 0x84F5;
pub static TEXTURE_RECTANGLE_NV: GLenum = 0x84F5;
pub static TEXTURE_BINDING_RECTANGLE: GLenum = 0x84F6;
pub static TEXTURE_BINDING_RECTANGLE_ARB: GLenum = 0x84F6;
pub static TEXTURE_BINDING_RECTANGLE_NV: GLenum = 0x84F6;
pub static PROXY_TEXTURE_RECTANGLE: GLenum = 0x84F7;
pub static PROXY_TEXTURE_RECTANGLE_ARB: GLenum = 0x84F7;
pub static PROXY_TEXTURE_RECTANGLE_NV: GLenum = 0x84F7;
pub static MAX_RECTANGLE_TEXTURE_SIZE: GLenum = 0x84F8;
pub static MAX_RECTANGLE_TEXTURE_SIZE_ARB: GLenum = 0x84F8;
pub static MAX_RECTANGLE_TEXTURE_SIZE_NV: GLenum = 0x84F8;
pub static DEPTH_STENCIL: GLenum = 0x84F9;
pub static DEPTH_STENCIL_EXT: GLenum = 0x84F9;
pub static DEPTH_STENCIL_NV: GLenum = 0x84F9;
pub static DEPTH_STENCIL_OES: GLenum = 0x84F9;
pub static UNSIGNED_INT_24_8: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_EXT: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_NV: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_OES: GLenum = 0x84FA;
pub static MAX_TEXTURE_LOD_BIAS: GLenum = 0x84FD;
pub static MAX_TEXTURE_LOD_BIAS_EXT: GLenum = 0x84FD;
pub static TEXTURE_MAX_ANISOTROPY_EXT: GLenum = 0x84FE;
pub static MAX_TEXTURE_MAX_ANISOTROPY_EXT: GLenum = 0x84FF;
pub static TEXTURE_FILTER_CONTROL: GLenum = 0x8500;
pub static TEXTURE_FILTER_CONTROL_EXT: GLenum = 0x8500;
pub static TEXTURE_LOD_BIAS: GLenum = 0x8501;
pub static TEXTURE_LOD_BIAS_EXT: GLenum = 0x8501;
pub static MODELVIEW1_STACK_DEPTH_EXT: GLenum = 0x8502;
pub static COMBINE4_NV: GLenum = 0x8503;
pub static MAX_SHININESS_NV: GLenum = 0x8504;
pub static MAX_SPOT_EXPONENT_NV: GLenum = 0x8505;
pub static MODELVIEW1_MATRIX_EXT: GLenum = 0x8506;
pub static INCR_WRAP: GLenum = 0x8507;
pub static INCR_WRAP_EXT: GLenum = 0x8507;
pub static INCR_WRAP_OES: GLenum = 0x8507;
pub static DECR_WRAP: GLenum = 0x8508;
pub static DECR_WRAP_EXT: GLenum = 0x8508;
pub static DECR_WRAP_OES: GLenum = 0x8508;
pub static VERTEX_WEIGHTING_EXT: GLenum = 0x8509;
pub static MODELVIEW1_ARB: GLenum = 0x850A;
pub static MODELVIEW1_EXT: GLenum = 0x850A;
pub static CURRENT_VERTEX_WEIGHT_EXT: GLenum = 0x850B;
pub static VERTEX_WEIGHT_ARRAY_EXT: GLenum = 0x850C;
pub static VERTEX_WEIGHT_ARRAY_SIZE_EXT: GLenum = 0x850D;
pub static VERTEX_WEIGHT_ARRAY_TYPE_EXT: GLenum = 0x850E;
pub static VERTEX_WEIGHT_ARRAY_STRIDE_EXT: GLenum = 0x850F;
pub static VERTEX_WEIGHT_ARRAY_POINTER_EXT: GLenum = 0x8510;
pub static NORMAL_MAP: GLenum = 0x8511;
pub static NORMAL_MAP_ARB: GLenum = 0x8511;
pub static NORMAL_MAP_EXT: GLenum = 0x8511;
pub static NORMAL_MAP_NV: GLenum = 0x8511;
pub static NORMAL_MAP_OES: GLenum = 0x8511;
pub static REFLECTION_MAP: GLenum = 0x8512;
pub static REFLECTION_MAP_ARB: GLenum = 0x8512;
pub static REFLECTION_MAP_EXT: GLenum = 0x8512;
pub static REFLECTION_MAP_NV: GLenum = 0x8512;
pub static REFLECTION_MAP_OES: GLenum = 0x8512;
pub static TEXTURE_CUBE_MAP: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_ARB: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_EXT: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_OES: GLenum = 0x8513;
pub static TEXTURE_BINDING_CUBE_MAP: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_ARB: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_EXT: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_OES: GLenum = 0x8514;
pub static TEXTURE_CUBE_MAP_POSITIVE_X: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_ARB: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_EXT: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_OES: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_EXT: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_OES: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_EXT: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_OES: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_OES: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_EXT: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_OES: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_OES: GLenum = 0x851A;
pub static PROXY_TEXTURE_CUBE_MAP: GLenum = 0x851B;
pub static PROXY_TEXTURE_CUBE_MAP_ARB: GLenum = 0x851B;
pub static PROXY_TEXTURE_CUBE_MAP_EXT: GLenum = 0x851B;
pub static MAX_CUBE_MAP_TEXTURE_SIZE: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_ARB: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_EXT: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_OES: GLenum = 0x851C;
pub static VERTEX_ARRAY_RANGE_APPLE: GLenum = 0x851D;
pub static VERTEX_ARRAY_RANGE_NV: GLenum = 0x851D;
pub static VERTEX_ARRAY_RANGE_LENGTH_APPLE: GLenum = 0x851E;
pub static VERTEX_ARRAY_RANGE_LENGTH_NV: GLenum = 0x851E;
pub static VERTEX_ARRAY_RANGE_VALID_NV: GLenum = 0x851F;
pub static VERTEX_ARRAY_STORAGE_HINT_APPLE: GLenum = 0x851F;
pub static MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: GLenum = 0x8520;
pub static VERTEX_ARRAY_RANGE_POINTER_APPLE: GLenum = 0x8521;
pub static VERTEX_ARRAY_RANGE_POINTER_NV: GLenum = 0x8521;
pub static REGISTER_COMBINERS_NV: GLenum = 0x8522;
pub static VARIABLE_A_NV: GLenum = 0x8523;
pub static VARIABLE_B_NV: GLenum = 0x8524;
pub static VARIABLE_C_NV: GLenum = 0x8525;
pub static VARIABLE_D_NV: GLenum = 0x8526;
pub static VARIABLE_E_NV: GLenum = 0x8527;
pub static VARIABLE_F_NV: GLenum = 0x8528;
pub static VARIABLE_G_NV: GLenum = 0x8529;
pub static CONSTANT_COLOR0_NV: GLenum = 0x852A;
pub static CONSTANT_COLOR1_NV: GLenum = 0x852B;
pub static PRIMARY_COLOR_NV: GLenum = 0x852C;
pub static SECONDARY_COLOR_NV: GLenum = 0x852D;
pub static SPARE0_NV: GLenum = 0x852E;
pub static SPARE1_NV: GLenum = 0x852F;
pub static DISCARD_NV: GLenum = 0x8530;
pub static E_TIMES_F_NV: GLenum = 0x8531;
pub static SPARE0_PLUS_SECONDARY_COLOR_NV: GLenum = 0x8532;
pub static VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: GLenum = 0x8533;
pub static MULTISAMPLE_FILTER_HINT_NV: GLenum = 0x8534;
pub static PER_STAGE_CONSTANTS_NV: GLenum = 0x8535;
pub static UNSIGNED_IDENTITY_NV: GLenum = 0x8536;
pub static UNSIGNED_INVERT_NV: GLenum = 0x8537;
pub static EXPAND_NORMAL_NV: GLenum = 0x8538;
pub static EXPAND_NEGATE_NV: GLenum = 0x8539;
pub static HALF_BIAS_NORMAL_NV: GLenum = 0x853A;
pub static HALF_BIAS_NEGATE_NV: GLenum = 0x853B;
pub static SIGNED_IDENTITY_NV: GLenum = 0x853C;
pub static SIGNED_NEGATE_NV: GLenum = 0x853D;
pub static SCALE_BY_TWO_NV: GLenum = 0x853E;
pub static SCALE_BY_FOUR_NV: GLenum = 0x853F;
pub static SCALE_BY_ONE_HALF_NV: GLenum = 0x8540;
pub static BIAS_BY_NEGATIVE_ONE_HALF_NV: GLenum = 0x8541;
pub static COMBINER_INPUT_NV: GLenum = 0x8542;
pub static COMBINER_MAPPING_NV: GLenum = 0x8543;
pub static COMBINER_COMPONENT_USAGE_NV: GLenum = 0x8544;
pub static COMBINER_AB_DOT_PRODUCT_NV: GLenum = 0x8545;
pub static COMBINER_CD_DOT_PRODUCT_NV: GLenum = 0x8546;
pub static COMBINER_MUX_SUM_NV: GLenum = 0x8547;
pub static COMBINER_SCALE_NV: GLenum = 0x8548;
pub static COMBINER_BIAS_NV: GLenum = 0x8549;
pub static COMBINER_AB_OUTPUT_NV: GLenum = 0x854A;
pub static COMBINER_CD_OUTPUT_NV: GLenum = 0x854B;
pub static COMBINER_SUM_OUTPUT_NV: GLenum = 0x854C;
pub static MAX_GENERAL_COMBINERS_NV: GLenum = 0x854D;
pub static NUM_GENERAL_COMBINERS_NV: GLenum = 0x854E;
pub static COLOR_SUM_CLAMP_NV: GLenum = 0x854F;
pub static COMBINER0_NV: GLenum = 0x8550;
pub static COMBINER1_NV: GLenum = 0x8551;
pub static COMBINER2_NV: GLenum = 0x8552;
pub static COMBINER3_NV: GLenum = 0x8553;
pub static COMBINER4_NV: GLenum = 0x8554;
pub static COMBINER5_NV: GLenum = 0x8555;
pub static COMBINER6_NV: GLenum = 0x8556;
pub static COMBINER7_NV: GLenum = 0x8557;
pub static PRIMITIVE_RESTART_NV: GLenum = 0x8558;
pub static PRIMITIVE_RESTART_INDEX_NV: GLenum = 0x8559;
pub static FOG_DISTANCE_MODE_NV: GLenum = 0x855A;
pub static EYE_RADIAL_NV: GLenum = 0x855B;
pub static EYE_PLANE_ABSOLUTE_NV: GLenum = 0x855C;
pub static EMBOSS_LIGHT_NV: GLenum = 0x855D;
pub static EMBOSS_CONSTANT_NV: GLenum = 0x855E;
pub static EMBOSS_MAP_NV: GLenum = 0x855F;
pub static RED_MIN_CLAMP_INGR: GLenum = 0x8560;
pub static GREEN_MIN_CLAMP_INGR: GLenum = 0x8561;
pub static BLUE_MIN_CLAMP_INGR: GLenum = 0x8562;
pub static ALPHA_MIN_CLAMP_INGR: GLenum = 0x8563;
pub static RED_MAX_CLAMP_INGR: GLenum = 0x8564;
pub static GREEN_MAX_CLAMP_INGR: GLenum = 0x8565;
pub static BLUE_MAX_CLAMP_INGR: GLenum = 0x8566;
pub static ALPHA_MAX_CLAMP_INGR: GLenum = 0x8567;
pub static INTERLACE_READ_INGR: GLenum = 0x8568;
pub static COMBINE: GLenum = 0x8570;
pub static COMBINE_ARB: GLenum = 0x8570;
pub static COMBINE_EXT: GLenum = 0x8570;
pub static COMBINE_RGB: GLenum = 0x8571;
pub static COMBINE_RGB_ARB: GLenum = 0x8571;
pub static COMBINE_RGB_EXT: GLenum = 0x8571;
pub static COMBINE_ALPHA: GLenum = 0x8572;
pub static COMBINE_ALPHA_ARB: GLenum = 0x8572;
pub static COMBINE_ALPHA_EXT: GLenum = 0x8572;
pub static RGB_SCALE: GLenum = 0x8573;
pub static RGB_SCALE_ARB: GLenum = 0x8573;
pub static RGB_SCALE_EXT: GLenum = 0x8573;
pub static ADD_SIGNED: GLenum = 0x8574;
pub static ADD_SIGNED_ARB: GLenum = 0x8574;
pub static ADD_SIGNED_EXT: GLenum = 0x8574;
pub static INTERPOLATE: GLenum = 0x8575;
pub static INTERPOLATE_ARB: GLenum = 0x8575;
pub static INTERPOLATE_EXT: GLenum = 0x8575;
pub static CONSTANT: GLenum = 0x8576;
pub static CONSTANT_ARB: GLenum = 0x8576;
pub static CONSTANT_EXT: GLenum = 0x8576;
pub static PRIMARY_COLOR: GLenum = 0x8577;
pub static PRIMARY_COLOR_ARB: GLenum = 0x8577;
pub static PRIMARY_COLOR_EXT: GLenum = 0x8577;
pub static PREVIOUS: GLenum = 0x8578;
pub static PREVIOUS_ARB: GLenum = 0x8578;
pub static PREVIOUS_EXT: GLenum = 0x8578;
pub static SOURCE0_RGB: GLenum = 0x8580;
pub static SOURCE0_RGB_ARB: GLenum = 0x8580;
pub static SOURCE0_RGB_EXT: GLenum = 0x8580;
pub static SRC0_RGB: GLenum = 0x8580;
pub static SOURCE1_RGB: GLenum = 0x8581;
pub static SOURCE1_RGB_ARB: GLenum = 0x8581;
pub static SOURCE1_RGB_EXT: GLenum = 0x8581;
pub static SRC1_RGB: GLenum = 0x8581;
pub static SOURCE2_RGB: GLenum = 0x8582;
pub static SOURCE2_RGB_ARB: GLenum = 0x8582;
pub static SOURCE2_RGB_EXT: GLenum = 0x8582;
pub static SRC2_RGB: GLenum = 0x8582;
pub static SOURCE3_RGB_NV: GLenum = 0x8583;
pub static SOURCE0_ALPHA: GLenum = 0x8588;
pub static SOURCE0_ALPHA_ARB: GLenum = 0x8588;
pub static SOURCE0_ALPHA_EXT: GLenum = 0x8588;
pub static SRC0_ALPHA: GLenum = 0x8588;
pub static SOURCE1_ALPHA: GLenum = 0x8589;
pub static SOURCE1_ALPHA_ARB: GLenum = 0x8589;
pub static SOURCE1_ALPHA_EXT: GLenum = 0x8589;
pub static SRC1_ALPHA: GLenum = 0x8589;
pub static SOURCE2_ALPHA: GLenum = 0x858A;
pub static SOURCE2_ALPHA_ARB: GLenum = 0x858A;
pub static SOURCE2_ALPHA_EXT: GLenum = 0x858A;
pub static SRC2_ALPHA: GLenum = 0x858A;
pub static SOURCE3_ALPHA_NV: GLenum = 0x858B;
pub static OPERAND0_RGB: GLenum = 0x8590;
pub static OPERAND0_RGB_ARB: GLenum = 0x8590;
pub static OPERAND0_RGB_EXT: GLenum = 0x8590;
pub static OPERAND1_RGB: GLenum = 0x8591;
pub static OPERAND1_RGB_ARB: GLenum = 0x8591;
pub static OPERAND1_RGB_EXT: GLenum = 0x8591;
pub static OPERAND2_RGB: GLenum = 0x8592;
pub static OPERAND2_RGB_ARB: GLenum = 0x8592;
pub static OPERAND2_RGB_EXT: GLenum = 0x8592;
pub static OPERAND3_RGB_NV: GLenum = 0x8593;
pub static OPERAND0_ALPHA: GLenum = 0x8598;
pub static OPERAND0_ALPHA_ARB: GLenum = 0x8598;
pub static OPERAND0_ALPHA_EXT: GLenum = 0x8598;
pub static OPERAND1_ALPHA: GLenum = 0x8599;
pub static OPERAND1_ALPHA_ARB: GLenum = 0x8599;
pub static OPERAND1_ALPHA_EXT: GLenum = 0x8599;
pub static OPERAND2_ALPHA: GLenum = 0x859A;
pub static OPERAND2_ALPHA_ARB: GLenum = 0x859A;
pub static OPERAND2_ALPHA_EXT: GLenum = 0x859A;
pub static OPERAND3_ALPHA_NV: GLenum = 0x859B;
pub static PACK_SUBSAMPLE_RATE_SGIX: GLenum = 0x85A0;
pub static UNPACK_SUBSAMPLE_RATE_SGIX: GLenum = 0x85A1;
pub static PIXEL_SUBSAMPLE_4444_SGIX: GLenum = 0x85A2;
pub static PIXEL_SUBSAMPLE_2424_SGIX: GLenum = 0x85A3;
pub static PIXEL_SUBSAMPLE_4242_SGIX: GLenum = 0x85A4;
pub static PERTURB_EXT: GLenum = 0x85AE;
pub static TEXTURE_NORMAL_EXT: GLenum = 0x85AF;
pub static LIGHT_MODEL_SPECULAR_VECTOR_APPLE: GLenum = 0x85B0;
pub static TRANSFORM_HINT_APPLE: GLenum = 0x85B1;
pub static UNPACK_CLIENT_STORAGE_APPLE: GLenum = 0x85B2;
pub static BUFFER_OBJECT_APPLE: GLenum = 0x85B3;
pub static STORAGE_CLIENT_APPLE: GLenum = 0x85B4;
pub static VERTEX_ARRAY_BINDING: GLenum = 0x85B5;
pub static VERTEX_ARRAY_BINDING_APPLE: GLenum = 0x85B5;
pub static TEXTURE_RANGE_LENGTH_APPLE: GLenum = 0x85B7;
pub static TEXTURE_RANGE_POINTER_APPLE: GLenum = 0x85B8;
pub static YCBCR_422_APPLE: GLenum = 0x85B9;
pub static UNSIGNED_SHORT_8_8_APPLE: GLenum = 0x85BA;
pub static UNSIGNED_SHORT_8_8_MESA: GLenum = 0x85BA;
pub static UNSIGNED_SHORT_8_8_REV_APPLE: GLenum = 0x85BB;
pub static UNSIGNED_SHORT_8_8_REV_MESA: GLenum = 0x85BB;
pub static TEXTURE_STORAGE_HINT_APPLE: GLenum = 0x85BC;
pub static STORAGE_PRIVATE_APPLE: GLenum = 0x85BD;
pub static STORAGE_CACHED_APPLE: GLenum = 0x85BE;
pub static STORAGE_SHARED_APPLE: GLenum = 0x85BF;
pub static REPLACEMENT_CODE_ARRAY_SUN: GLenum = 0x85C0;
pub static REPLACEMENT_CODE_ARRAY_TYPE_SUN: GLenum = 0x85C1;
pub static REPLACEMENT_CODE_ARRAY_STRIDE_SUN: GLenum = 0x85C2;
pub static REPLACEMENT_CODE_ARRAY_POINTER_SUN: GLenum = 0x85C3;
pub static R1UI_V3F_SUN: GLenum = 0x85C4;
pub static R1UI_C4UB_V3F_SUN: GLenum = 0x85C5;
pub static R1UI_C3F_V3F_SUN: GLenum = 0x85C6;
pub static R1UI_N3F_V3F_SUN: GLenum = 0x85C7;
pub static R1UI_C4F_N3F_V3F_SUN: GLenum = 0x85C8;
pub static R1UI_T2F_V3F_SUN: GLenum = 0x85C9;
pub static R1UI_T2F_N3F_V3F_SUN: GLenum = 0x85CA;
pub static R1UI_T2F_C4F_N3F_V3F_SUN: GLenum = 0x85CB;
pub static SLICE_ACCUM_SUN: GLenum = 0x85CC;
pub static QUAD_MESH_SUN: GLenum = 0x8614;
pub static TRIANGLE_MESH_SUN: GLenum = 0x8615;
pub static VERTEX_PROGRAM_ARB: GLenum = 0x8620;
pub static VERTEX_PROGRAM_NV: GLenum = 0x8620;
pub static VERTEX_STATE_PROGRAM_NV: GLenum = 0x8621;
pub static VERTEX_ATTRIB_ARRAY_ENABLED: GLenum = 0x8622;
pub static VERTEX_ATTRIB_ARRAY_ENABLED_ARB: GLenum = 0x8622;
pub static ATTRIB_ARRAY_SIZE_NV: GLenum = 0x8623;
pub static VERTEX_ATTRIB_ARRAY_SIZE: GLenum = 0x8623;
pub static VERTEX_ATTRIB_ARRAY_SIZE_ARB: GLenum = 0x8623;
pub static ATTRIB_ARRAY_STRIDE_NV: GLenum = 0x8624;
pub static VERTEX_ATTRIB_ARRAY_STRIDE: GLenum = 0x8624;
pub static VERTEX_ATTRIB_ARRAY_STRIDE_ARB: GLenum = 0x8624;
pub static ATTRIB_ARRAY_TYPE_NV: GLenum = 0x8625;
pub static VERTEX_ATTRIB_ARRAY_TYPE: GLenum = 0x8625;
pub static VERTEX_ATTRIB_ARRAY_TYPE_ARB: GLenum = 0x8625;
pub static CURRENT_ATTRIB_NV: GLenum = 0x8626;
pub static CURRENT_VERTEX_ATTRIB: GLenum = 0x8626;
pub static CURRENT_VERTEX_ATTRIB_ARB: GLenum = 0x8626;
pub static PROGRAM_LENGTH_ARB: GLenum = 0x8627;
pub static PROGRAM_LENGTH_NV: GLenum = 0x8627;
pub static PROGRAM_STRING_ARB: GLenum = 0x8628;
pub static PROGRAM_STRING_NV: GLenum = 0x8628;
pub static MODELVIEW_PROJECTION_NV: GLenum = 0x8629;
pub static IDENTITY_NV: GLenum = 0x862A;
pub static INVERSE_NV: GLenum = 0x862B;
pub static TRANSPOSE_NV: GLenum = 0x862C;
pub static INVERSE_TRANSPOSE_NV: GLenum = 0x862D;
pub static MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: GLenum = 0x862E;
pub static MAX_TRACK_MATRIX_STACK_DEPTH_NV: GLenum = 0x862E;
pub static MAX_PROGRAM_MATRICES_ARB: GLenum = 0x862F;
pub static MAX_TRACK_MATRICES_NV: GLenum = 0x862F;
pub static MATRIX0_NV: GLenum = 0x8630;
pub static MATRIX1_NV: GLenum = 0x8631;
pub static MATRIX2_NV: GLenum = 0x8632;
pub static MATRIX3_NV: GLenum = 0x8633;
pub static MATRIX4_NV: GLenum = 0x8634;
pub static MATRIX5_NV: GLenum = 0x8635;
pub static MATRIX6_NV: GLenum = 0x8636;
pub static MATRIX7_NV: GLenum = 0x8637;
pub static CURRENT_MATRIX_STACK_DEPTH_ARB: GLenum = 0x8640;
pub static CURRENT_MATRIX_STACK_DEPTH_NV: GLenum = 0x8640;
pub static CURRENT_MATRIX_ARB: GLenum = 0x8641;
pub static CURRENT_MATRIX_NV: GLenum = 0x8641;
pub static VERTEX_PROGRAM_POINT_SIZE: GLenum = 0x8642;
pub static VERTEX_PROGRAM_POINT_SIZE_ARB: GLenum = 0x8642;
pub static VERTEX_PROGRAM_POINT_SIZE_NV: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE_ARB: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE_EXT: GLenum = 0x8642;
pub static VERTEX_PROGRAM_TWO_SIDE: GLenum = 0x8643;
pub static VERTEX_PROGRAM_TWO_SIDE_ARB: GLenum = 0x8643;
pub static VERTEX_PROGRAM_TWO_SIDE_NV: GLenum = 0x8643;
pub static PROGRAM_PARAMETER_NV: GLenum = 0x8644;
pub static ATTRIB_ARRAY_POINTER_NV: GLenum = 0x8645;
pub static VERTEX_ATTRIB_ARRAY_POINTER: GLenum = 0x8645;
pub static VERTEX_ATTRIB_ARRAY_POINTER_ARB: GLenum = 0x8645;
pub static PROGRAM_TARGET_NV: GLenum = 0x8646;
pub static PROGRAM_RESIDENT_NV: GLenum = 0x8647;
pub static TRACK_MATRIX_NV: GLenum = 0x8648;
pub static TRACK_MATRIX_TRANSFORM_NV: GLenum = 0x8649;
pub static VERTEX_PROGRAM_BINDING_NV: GLenum = 0x864A;
pub static PROGRAM_ERROR_POSITION_ARB: GLenum = 0x864B;
pub static PROGRAM_ERROR_POSITION_NV: GLenum = 0x864B;
pub static OFFSET_TEXTURE_RECTANGLE_NV: GLenum = 0x864C;
pub static OFFSET_TEXTURE_RECTANGLE_SCALE_NV: GLenum = 0x864D;
pub static DOT_PRODUCT_TEXTURE_RECTANGLE_NV: GLenum = 0x864E;
pub static DEPTH_CLAMP: GLenum = 0x864F;
pub static DEPTH_CLAMP_NV: GLenum = 0x864F;
pub static VERTEX_ATTRIB_ARRAY0_NV: GLenum = 0x8650;
pub static VERTEX_ATTRIB_ARRAY1_NV: GLenum = 0x8651;
pub static VERTEX_ATTRIB_ARRAY2_NV: GLenum = 0x8652;
pub static VERTEX_ATTRIB_ARRAY3_NV: GLenum = 0x8653;
pub static VERTEX_ATTRIB_ARRAY4_NV: GLenum = 0x8654;
pub static VERTEX_ATTRIB_ARRAY5_NV: GLenum = 0x8655;
pub static VERTEX_ATTRIB_ARRAY6_NV: GLenum = 0x8656;
pub static VERTEX_ATTRIB_ARRAY7_NV: GLenum = 0x8657;
pub static VERTEX_ATTRIB_ARRAY8_NV: GLenum = 0x8658;
pub static VERTEX_ATTRIB_ARRAY9_NV: GLenum = 0x8659;
pub static VERTEX_ATTRIB_ARRAY10_NV: GLenum = 0x865A;
pub static VERTEX_ATTRIB_ARRAY11_NV: GLenum = 0x865B;
pub static VERTEX_ATTRIB_ARRAY12_NV: GLenum = 0x865C;
pub static VERTEX_ATTRIB_ARRAY13_NV: GLenum = 0x865D;
pub static VERTEX_ATTRIB_ARRAY14_NV: GLenum = 0x865E;
pub static VERTEX_ATTRIB_ARRAY15_NV: GLenum = 0x865F;
pub static MAP1_VERTEX_ATTRIB0_4_NV: GLenum = 0x8660;
pub static MAP1_VERTEX_ATTRIB1_4_NV: GLenum = 0x8661;
pub static MAP1_VERTEX_ATTRIB2_4_NV: GLenum = 0x8662;
pub static MAP1_VERTEX_ATTRIB3_4_NV: GLenum = 0x8663;
pub static MAP1_VERTEX_ATTRIB4_4_NV: GLenum = 0x8664;
pub static MAP1_VERTEX_ATTRIB5_4_NV: GLenum = 0x8665;
pub static MAP1_VERTEX_ATTRIB6_4_NV: GLenum = 0x8666;
pub static MAP1_VERTEX_ATTRIB7_4_NV: GLenum = 0x8667;
pub static MAP1_VERTEX_ATTRIB8_4_NV: GLenum = 0x8668;
pub static MAP1_VERTEX_ATTRIB9_4_NV: GLenum = 0x8669;
pub static MAP1_VERTEX_ATTRIB10_4_NV: GLenum = 0x866A;
pub static MAP1_VERTEX_ATTRIB11_4_NV: GLenum = 0x866B;
pub static MAP1_VERTEX_ATTRIB12_4_NV: GLenum = 0x866C;
pub static MAP1_VERTEX_ATTRIB13_4_NV: GLenum = 0x866D;
pub static MAP1_VERTEX_ATTRIB14_4_NV: GLenum = 0x866E;
pub static MAP1_VERTEX_ATTRIB15_4_NV: GLenum = 0x866F;
pub static MAP2_VERTEX_ATTRIB0_4_NV: GLenum = 0x8670;
pub static MAP2_VERTEX_ATTRIB1_4_NV: GLenum = 0x8671;
pub static MAP2_VERTEX_ATTRIB2_4_NV: GLenum = 0x8672;
pub static MAP2_VERTEX_ATTRIB3_4_NV: GLenum = 0x8673;
pub static MAP2_VERTEX_ATTRIB4_4_NV: GLenum = 0x8674;
pub static MAP2_VERTEX_ATTRIB5_4_NV: GLenum = 0x8675;
pub static MAP2_VERTEX_ATTRIB6_4_NV: GLenum = 0x8676;
pub static MAP2_VERTEX_ATTRIB7_4_NV: GLenum = 0x8677;
pub static PROGRAM_BINDING_ARB: GLenum = 0x8677;
pub static MAP2_VERTEX_ATTRIB8_4_NV: GLenum = 0x8678;
pub static MAP2_VERTEX_ATTRIB9_4_NV: GLenum = 0x8679;
pub static MAP2_VERTEX_ATTRIB10_4_NV: GLenum = 0x867A;
pub static MAP2_VERTEX_ATTRIB11_4_NV: GLenum = 0x867B;
pub static MAP2_VERTEX_ATTRIB12_4_NV: GLenum = 0x867C;
pub static MAP2_VERTEX_ATTRIB13_4_NV: GLenum = 0x867D;
pub static MAP2_VERTEX_ATTRIB14_4_NV: GLenum = 0x867E;
pub static MAP2_VERTEX_ATTRIB15_4_NV: GLenum = 0x867F;
pub static TEXTURE_COMPRESSED_IMAGE_SIZE: GLenum = 0x86A0;
pub static TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: GLenum = 0x86A0;
pub static TEXTURE_COMPRESSED: GLenum = 0x86A1;
pub static TEXTURE_COMPRESSED_ARB: GLenum = 0x86A1;
pub static NUM_COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A2;
pub static NUM_COMPRESSED_TEXTURE_FORMATS_ARB: GLenum = 0x86A2;
pub static COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A3;
pub static COMPRESSED_TEXTURE_FORMATS_ARB: GLenum = 0x86A3;
pub static MAX_VERTEX_UNITS_ARB: GLenum = 0x86A4;
pub static MAX_VERTEX_UNITS_OES: GLenum = 0x86A4;
pub static ACTIVE_VERTEX_UNITS_ARB: GLenum = 0x86A5;
pub static WEIGHT_SUM_UNITY_ARB: GLenum = 0x86A6;
pub static VERTEX_BLEND_ARB: GLenum = 0x86A7;
pub static CURRENT_WEIGHT_ARB: GLenum = 0x86A8;
pub static WEIGHT_ARRAY_TYPE_ARB: GLenum = 0x86A9;
pub static WEIGHT_ARRAY_TYPE_OES: GLenum = 0x86A9;
pub static WEIGHT_ARRAY_STRIDE_ARB: GLenum = 0x86AA;
pub static WEIGHT_ARRAY_STRIDE_OES: GLenum = 0x86AA;
pub static WEIGHT_ARRAY_SIZE_ARB: GLenum = 0x86AB;
pub static WEIGHT_ARRAY_SIZE_OES: GLenum = 0x86AB;
pub static WEIGHT_ARRAY_POINTER_ARB: GLenum = 0x86AC;
pub static WEIGHT_ARRAY_POINTER_OES: GLenum = 0x86AC;
pub static WEIGHT_ARRAY_ARB: GLenum = 0x86AD;
pub static WEIGHT_ARRAY_OES: GLenum = 0x86AD;
pub static DOT3_RGB: GLenum = 0x86AE;
pub static DOT3_RGB_ARB: GLenum = 0x86AE;
pub static DOT3_RGBA: GLenum = 0x86AF;
pub static DOT3_RGBA_ARB: GLenum = 0x86AF;
pub static DOT3_RGBA_IMG: GLenum = 0x86AF;
pub static COMPRESSED_RGB_FXT1_3DFX: GLenum = 0x86B0;
pub static COMPRESSED_RGBA_FXT1_3DFX: GLenum = 0x86B1;
pub static MULTISAMPLE_3DFX: GLenum = 0x86B2;
pub static SAMPLE_BUFFERS_3DFX: GLenum = 0x86B3;
pub static SAMPLES_3DFX: GLenum = 0x86B4;
pub static EVAL_2D_NV: GLenum = 0x86C0;
pub static EVAL_TRIANGULAR_2D_NV: GLenum = 0x86C1;
pub static MAP_TESSELLATION_NV: GLenum = 0x86C2;
pub static MAP_ATTRIB_U_ORDER_NV: GLenum = 0x86C3;
pub static MAP_ATTRIB_V_ORDER_NV: GLenum = 0x86C4;
pub static EVAL_FRACTIONAL_TESSELLATION_NV: GLenum = 0x86C5;
pub static EVAL_VERTEX_ATTRIB0_NV: GLenum = 0x86C6;
pub static EVAL_VERTEX_ATTRIB1_NV: GLenum = 0x86C7;
pub static EVAL_VERTEX_ATTRIB2_NV: GLenum = 0x86C8;
pub static EVAL_VERTEX_ATTRIB3_NV: GLenum = 0x86C9;
pub static EVAL_VERTEX_ATTRIB4_NV: GLenum = 0x86CA;
pub static EVAL_VERTEX_ATTRIB5_NV: GLenum = 0x86CB;
pub static EVAL_VERTEX_ATTRIB6_NV: GLenum = 0x86CC;
pub static EVAL_VERTEX_ATTRIB7_NV: GLenum = 0x86CD;
pub static EVAL_VERTEX_ATTRIB8_NV: GLenum = 0x86CE;
pub static EVAL_VERTEX_ATTRIB9_NV: GLenum = 0x86CF;
pub static EVAL_VERTEX_ATTRIB10_NV: GLenum = 0x86D0;
pub static EVAL_VERTEX_ATTRIB11_NV: GLenum = 0x86D1;
pub static EVAL_VERTEX_ATTRIB12_NV: GLenum = 0x86D2;
pub static EVAL_VERTEX_ATTRIB13_NV: GLenum = 0x86D3;
pub static EVAL_VERTEX_ATTRIB14_NV: GLenum = 0x86D4;
pub static EVAL_VERTEX_ATTRIB15_NV: GLenum = 0x86D5;
pub static MAX_MAP_TESSELLATION_NV: GLenum = 0x86D6;
pub static MAX_RATIONAL_EVAL_ORDER_NV: GLenum = 0x86D7;
pub static MAX_PROGRAM_PATCH_ATTRIBS_NV: GLenum = 0x86D8;
pub static RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: GLenum = 0x86D9;
pub static UNSIGNED_INT_S8_S8_8_8_NV: GLenum = 0x86DA;
pub static UNSIGNED_INT_8_8_S8_S8_REV_NV: GLenum = 0x86DB;
pub static DSDT_MAG_INTENSITY_NV: GLenum = 0x86DC;
pub static SHADER_CONSISTENT_NV: GLenum = 0x86DD;
pub static TEXTURE_SHADER_NV: GLenum = 0x86DE;
pub static SHADER_OPERATION_NV: GLenum = 0x86DF;
pub static CULL_MODES_NV: GLenum = 0x86E0;
pub static OFFSET_TEXTURE_MATRIX_NV: GLenum = 0x86E1;
pub static OFFSET_TEXTURE_2D_MATRIX_NV: GLenum = 0x86E1;
pub static OFFSET_TEXTURE_SCALE_NV: GLenum = 0x86E2;
pub static OFFSET_TEXTURE_2D_SCALE_NV: GLenum = 0x86E2;
pub static OFFSET_TEXTURE_BIAS_NV: GLenum = 0x86E3;
pub static OFFSET_TEXTURE_2D_BIAS_NV: GLenum = 0x86E3;
pub static PREVIOUS_TEXTURE_INPUT_NV: GLenum = 0x86E4;
pub static CONST_EYE_NV: GLenum = 0x86E5;
pub static PASS_THROUGH_NV: GLenum = 0x86E6;
pub static CULL_FRAGMENT_NV: GLenum = 0x86E7;
pub static OFFSET_TEXTURE_2D_NV: GLenum = 0x86E8;
pub static DEPENDENT_AR_TEXTURE_2D_NV: GLenum = 0x86E9;
pub static DEPENDENT_GB_TEXTURE_2D_NV: GLenum = 0x86EA;
pub static SURFACE_STATE_NV: GLenum = 0x86EB;
pub static DOT_PRODUCT_NV: GLenum = 0x86EC;
pub static DOT_PRODUCT_DEPTH_REPLACE_NV: GLenum = 0x86ED;
pub static DOT_PRODUCT_TEXTURE_2D_NV: GLenum = 0x86EE;
pub static DOT_PRODUCT_TEXTURE_3D_NV: GLenum = 0x86EF;
pub static DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: GLenum = 0x86F0;
pub static DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: GLenum = 0x86F1;
pub static DOT_PRODUCT_REFLECT_CUBE_MAP_NV: GLenum = 0x86F2;
pub static DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: GLenum = 0x86F3;
pub static HILO_NV: GLenum = 0x86F4;
pub static DSDT_NV: GLenum = 0x86F5;
pub static DSDT_MAG_NV: GLenum = 0x86F6;
pub static DSDT_MAG_VIB_NV: GLenum = 0x86F7;
pub static HILO16_NV: GLenum = 0x86F8;
pub static SIGNED_HILO_NV: GLenum = 0x86F9;
pub static SIGNED_HILO16_NV: GLenum = 0x86FA;
pub static SIGNED_RGBA_NV: GLenum = 0x86FB;
pub static SIGNED_RGBA8_NV: GLenum = 0x86FC;
pub static SURFACE_REGISTERED_NV: GLenum = 0x86FD;
pub static SIGNED_RGB_NV: GLenum = 0x86FE;
pub static SIGNED_RGB8_NV: GLenum = 0x86FF;
pub static SURFACE_MAPPED_NV: GLenum = 0x8700;
pub static SIGNED_LUMINANCE_NV: GLenum = 0x8701;
pub static SIGNED_LUMINANCE8_NV: GLenum = 0x8702;
pub static SIGNED_LUMINANCE_ALPHA_NV: GLenum = 0x8703;
pub static SIGNED_LUMINANCE8_ALPHA8_NV: GLenum = 0x8704;
pub static SIGNED_ALPHA_NV: GLenum = 0x8705;
pub static SIGNED_ALPHA8_NV: GLenum = 0x8706;
pub static SIGNED_INTENSITY_NV: GLenum = 0x8707;
pub static SIGNED_INTENSITY8_NV: GLenum = 0x8708;
pub static DSDT8_NV: GLenum = 0x8709;
pub static DSDT8_MAG8_NV: GLenum = 0x870A;
pub static DSDT8_MAG8_INTENSITY8_NV: GLenum = 0x870B;
pub static SIGNED_RGB_UNSIGNED_ALPHA_NV: GLenum = 0x870C;
pub static SIGNED_RGB8_UNSIGNED_ALPHA8_NV: GLenum = 0x870D;
pub static HI_SCALE_NV: GLenum = 0x870E;
pub static LO_SCALE_NV: GLenum = 0x870F;
pub static DS_SCALE_NV: GLenum = 0x8710;
pub static DT_SCALE_NV: GLenum = 0x8711;
pub static MAGNITUDE_SCALE_NV: GLenum = 0x8712;
pub static VIBRANCE_SCALE_NV: GLenum = 0x8713;
pub static HI_BIAS_NV: GLenum = 0x8714;
pub static LO_BIAS_NV: GLenum = 0x8715;
pub static DS_BIAS_NV: GLenum = 0x8716;
pub static DT_BIAS_NV: GLenum = 0x8717;
pub static MAGNITUDE_BIAS_NV: GLenum = 0x8718;
pub static VIBRANCE_BIAS_NV: GLenum = 0x8719;
pub static TEXTURE_BORDER_VALUES_NV: GLenum = 0x871A;
pub static TEXTURE_HI_SIZE_NV: GLenum = 0x871B;
pub static TEXTURE_LO_SIZE_NV: GLenum = 0x871C;
pub static TEXTURE_DS_SIZE_NV: GLenum = 0x871D;
pub static TEXTURE_DT_SIZE_NV: GLenum = 0x871E;
pub static TEXTURE_MAG_SIZE_NV: GLenum = 0x871F;
pub static MODELVIEW2_ARB: GLenum = 0x8722;
pub static MODELVIEW3_ARB: GLenum = 0x8723;
pub static MODELVIEW4_ARB: GLenum = 0x8724;
pub static MODELVIEW5_ARB: GLenum = 0x8725;
pub static MODELVIEW6_ARB: GLenum = 0x8726;
pub static MODELVIEW7_ARB: GLenum = 0x8727;
pub static MODELVIEW8_ARB: GLenum = 0x8728;
pub static MODELVIEW9_ARB: GLenum = 0x8729;
pub static MODELVIEW10_ARB: GLenum = 0x872A;
pub static MODELVIEW11_ARB: GLenum = 0x872B;
pub static MODELVIEW12_ARB: GLenum = 0x872C;
pub static MODELVIEW13_ARB: GLenum = 0x872D;
pub static MODELVIEW14_ARB: GLenum = 0x872E;
pub static MODELVIEW15_ARB: GLenum = 0x872F;
pub static MODELVIEW16_ARB: GLenum = 0x8730;
pub static MODELVIEW17_ARB: GLenum = 0x8731;
pub static MODELVIEW18_ARB: GLenum = 0x8732;
pub static MODELVIEW19_ARB: GLenum = 0x8733;
pub static MODELVIEW20_ARB: GLenum = 0x8734;
pub static MODELVIEW21_ARB: GLenum = 0x8735;
pub static MODELVIEW22_ARB: GLenum = 0x8736;
pub static MODELVIEW23_ARB: GLenum = 0x8737;
pub static MODELVIEW24_ARB: GLenum = 0x8738;
pub static MODELVIEW25_ARB: GLenum = 0x8739;
pub static MODELVIEW26_ARB: GLenum = 0x873A;
pub static MODELVIEW27_ARB: GLenum = 0x873B;
pub static MODELVIEW28_ARB: GLenum = 0x873C;
pub static MODELVIEW29_ARB: GLenum = 0x873D;
pub static MODELVIEW30_ARB: GLenum = 0x873E;
pub static MODELVIEW31_ARB: GLenum = 0x873F;
pub static DOT3_RGB_EXT: GLenum = 0x8740;
pub static Z400_BINARY_AMD: GLenum = 0x8740;
pub static DOT3_RGBA_EXT: GLenum = 0x8741;
pub static PROGRAM_BINARY_LENGTH_OES: GLenum = 0x8741;
pub static PROGRAM_BINARY_LENGTH: GLenum = 0x8741;
pub static MIRROR_CLAMP_ATI: GLenum = 0x8742;
pub static MIRROR_CLAMP_EXT: GLenum = 0x8742;
pub static MIRROR_CLAMP_TO_EDGE: GLenum = 0x8743;
pub static MIRROR_CLAMP_TO_EDGE_ATI: GLenum = 0x8743;
pub static MIRROR_CLAMP_TO_EDGE_EXT: GLenum = 0x8743;
pub static MODULATE_ADD_ATI: GLenum = 0x8744;
pub static MODULATE_SIGNED_ADD_ATI: GLenum = 0x8745;
pub static MODULATE_SUBTRACT_ATI: GLenum = 0x8746;
pub static SET_AMD: GLenum = 0x874A;
pub static REPLACE_VALUE_AMD: GLenum = 0x874B;
pub static STENCIL_OP_VALUE_AMD: GLenum = 0x874C;
pub static STENCIL_BACK_OP_VALUE_AMD: GLenum = 0x874D;
pub static VERTEX_ATTRIB_ARRAY_LONG: GLenum = 0x874E;
pub static DEPTH_STENCIL_MESA: GLenum = 0x8750;
pub static UNSIGNED_INT_24_8_MESA: GLenum = 0x8751;
pub static UNSIGNED_INT_8_24_REV_MESA: GLenum = 0x8752;
pub static UNSIGNED_SHORT_15_1_MESA: GLenum = 0x8753;
pub static UNSIGNED_SHORT_1_15_REV_MESA: GLenum = 0x8754;
pub static TRACE_MASK_MESA: GLenum = 0x8755;
pub static TRACE_NAME_MESA: GLenum = 0x8756;
pub static YCBCR_MESA: GLenum = 0x8757;
pub static PACK_INVERT_MESA: GLenum = 0x8758;
pub static DEBUG_OBJECT_MESA: GLenum = 0x8759;
pub static TEXTURE_1D_STACK_MESAX: GLenum = 0x8759;
pub static DEBUG_PRINT_MESA: GLenum = 0x875A;
pub static TEXTURE_2D_STACK_MESAX: GLenum = 0x875A;
pub static DEBUG_ASSERT_MESA: GLenum = 0x875B;
pub static PROXY_TEXTURE_1D_STACK_MESAX: GLenum = 0x875B;
pub static PROXY_TEXTURE_2D_STACK_MESAX: GLenum = 0x875C;
pub static TEXTURE_1D_STACK_BINDING_MESAX: GLenum = 0x875D;
pub static TEXTURE_2D_STACK_BINDING_MESAX: GLenum = 0x875E;
pub static STATIC_ATI: GLenum = 0x8760;
pub static DYNAMIC_ATI: GLenum = 0x8761;
pub static PRESERVE_ATI: GLenum = 0x8762;
pub static DISCARD_ATI: GLenum = 0x8763;
pub static BUFFER_SIZE: GLenum = 0x8764;
pub static BUFFER_SIZE_ARB: GLenum = 0x8764;
pub static OBJECT_BUFFER_SIZE_ATI: GLenum = 0x8764;
pub static BUFFER_USAGE: GLenum = 0x8765;
pub static BUFFER_USAGE_ARB: GLenum = 0x8765;
pub static OBJECT_BUFFER_USAGE_ATI: GLenum = 0x8765;
pub static ARRAY_OBJECT_BUFFER_ATI: GLenum = 0x8766;
pub static ARRAY_OBJECT_OFFSET_ATI: GLenum = 0x8767;
pub static ELEMENT_ARRAY_ATI: GLenum = 0x8768;
pub static ELEMENT_ARRAY_TYPE_ATI: GLenum = 0x8769;
pub static ELEMENT_ARRAY_POINTER_ATI: GLenum = 0x876A;
pub static MAX_VERTEX_STREAMS_ATI: GLenum = 0x876B;
pub static VERTEX_STREAM0_ATI: GLenum = 0x876C;
pub static VERTEX_STREAM1_ATI: GLenum = 0x876D;
pub static VERTEX_STREAM2_ATI: GLenum = 0x876E;
pub static VERTEX_STREAM3_ATI: GLenum = 0x876F;
pub static VERTEX_STREAM4_ATI: GLenum = 0x8770;
pub static VERTEX_STREAM5_ATI: GLenum = 0x8771;
pub static VERTEX_STREAM6_ATI: GLenum = 0x8772;
pub static VERTEX_STREAM7_ATI: GLenum = 0x8773;
pub static VERTEX_SOURCE_ATI: GLenum = 0x8774;
pub static BUMP_ROT_MATRIX_ATI: GLenum = 0x8775;
pub static BUMP_ROT_MATRIX_SIZE_ATI: GLenum = 0x8776;
pub static BUMP_NUM_TEX_UNITS_ATI: GLenum = 0x8777;
pub static BUMP_TEX_UNITS_ATI: GLenum = 0x8778;
pub static DUDV_ATI: GLenum = 0x8779;
pub static DU8DV8_ATI: GLenum = 0x877A;
pub static BUMP_ENVMAP_ATI: GLenum = 0x877B;
pub static BUMP_TARGET_ATI: GLenum = 0x877C;
pub static VERTEX_SHADER_EXT: GLenum = 0x8780;
pub static VERTEX_SHADER_BINDING_EXT: GLenum = 0x8781;
pub static OP_INDEX_EXT: GLenum = 0x8782;
pub static OP_NEGATE_EXT: GLenum = 0x8783;
pub static OP_DOT3_EXT: GLenum = 0x8784;
pub static OP_DOT4_EXT: GLenum = 0x8785;
pub static OP_MUL_EXT: GLenum = 0x8786;
pub static OP_ADD_EXT: GLenum = 0x8787;
pub static OP_MADD_EXT: GLenum = 0x8788;
pub static OP_FRAC_EXT: GLenum = 0x8789;
pub static OP_MAX_EXT: GLenum = 0x878A;
pub static OP_MIN_EXT: GLenum = 0x878B;
pub static OP_SET_GE_EXT: GLenum = 0x878C;
pub static OP_SET_LT_EXT: GLenum = 0x878D;
pub static OP_CLAMP_EXT: GLenum = 0x878E;
pub static OP_FLOOR_EXT: GLenum = 0x878F;
pub static OP_ROUND_EXT: GLenum = 0x8790;
pub static OP_EXP_BASE_2_EXT: GLenum = 0x8791;
pub static OP_LOG_BASE_2_EXT: GLenum = 0x8792;
pub static OP_POWER_EXT: GLenum = 0x8793;
pub static OP_RECIP_EXT: GLenum = 0x8794;
pub static OP_RECIP_SQRT_EXT: GLenum = 0x8795;
pub static OP_SUB_EXT: GLenum = 0x8796;
pub static OP_CROSS_PRODUCT_EXT: GLenum = 0x8797;
pub static OP_MULTIPLY_MATRIX_EXT: GLenum = 0x8798;
pub static OP_MOV_EXT: GLenum = 0x8799;
pub static OUTPUT_VERTEX_EXT: GLenum = 0x879A;
pub static OUTPUT_COLOR0_EXT: GLenum = 0x879B;
pub static OUTPUT_COLOR1_EXT: GLenum = 0x879C;
pub static OUTPUT_TEXTURE_COORD0_EXT: GLenum = 0x879D;
pub static OUTPUT_TEXTURE_COORD1_EXT: GLenum = 0x879E;
pub static OUTPUT_TEXTURE_COORD2_EXT: GLenum = 0x879F;
pub static OUTPUT_TEXTURE_COORD3_EXT: GLenum = 0x87A0;
pub static OUTPUT_TEXTURE_COORD4_EXT: GLenum = 0x87A1;
pub static OUTPUT_TEXTURE_COORD5_EXT: GLenum = 0x87A2;
pub static OUTPUT_TEXTURE_COORD6_EXT: GLenum = 0x87A3;
pub static OUTPUT_TEXTURE_COORD7_EXT: GLenum = 0x87A4;
pub static OUTPUT_TEXTURE_COORD8_EXT: GLenum = 0x87A5;
pub static OUTPUT_TEXTURE_COORD9_EXT: GLenum = 0x87A6;
pub static OUTPUT_TEXTURE_COORD10_EXT: GLenum = 0x87A7;
pub static OUTPUT_TEXTURE_COORD11_EXT: GLenum = 0x87A8;
pub static OUTPUT_TEXTURE_COORD12_EXT: GLenum = 0x87A9;
pub static OUTPUT_TEXTURE_COORD13_EXT: GLenum = 0x87AA;
pub static OUTPUT_TEXTURE_COORD14_EXT: GLenum = 0x87AB;
pub static OUTPUT_TEXTURE_COORD15_EXT: GLenum = 0x87AC;
pub static OUTPUT_TEXTURE_COORD16_EXT: GLenum = 0x87AD;
pub static OUTPUT_TEXTURE_COORD17_EXT: GLenum = 0x87AE;
pub static OUTPUT_TEXTURE_COORD18_EXT: GLenum = 0x87AF;
pub static OUTPUT_TEXTURE_COORD19_EXT: GLenum = 0x87B0;
pub static OUTPUT_TEXTURE_COORD20_EXT: GLenum = 0x87B1;
pub static OUTPUT_TEXTURE_COORD21_EXT: GLenum = 0x87B2;
pub static OUTPUT_TEXTURE_COORD22_EXT: GLenum = 0x87B3;
pub static OUTPUT_TEXTURE_COORD23_EXT: GLenum = 0x87B4;
pub static OUTPUT_TEXTURE_COORD24_EXT: GLenum = 0x87B5;
pub static OUTPUT_TEXTURE_COORD25_EXT: GLenum = 0x87B6;
pub static OUTPUT_TEXTURE_COORD26_EXT: GLenum = 0x87B7;
pub static OUTPUT_TEXTURE_COORD27_EXT: GLenum = 0x87B8;
pub static OUTPUT_TEXTURE_COORD28_EXT: GLenum = 0x87B9;
pub static OUTPUT_TEXTURE_COORD29_EXT: GLenum = 0x87BA;
pub static OUTPUT_TEXTURE_COORD30_EXT: GLenum = 0x87BB;
pub static OUTPUT_TEXTURE_COORD31_EXT: GLenum = 0x87BC;
pub static OUTPUT_FOG_EXT: GLenum = 0x87BD;
pub static SCALAR_EXT: GLenum = 0x87BE;
pub static VECTOR_EXT: GLenum = 0x87BF;
pub static MATRIX_EXT: GLenum = 0x87C0;
pub static VARIANT_EXT: GLenum = 0x87C1;
pub static INVARIANT_EXT: GLenum = 0x87C2;
pub static LOCAL_CONSTANT_EXT: GLenum = 0x87C3;
pub static LOCAL_EXT: GLenum = 0x87C4;
pub static MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87C5;
pub static MAX_VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87C6;
pub static MAX_VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87C7;
pub static MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87C8;
pub static MAX_VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87C9;
pub static MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87CA;
pub static MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87CB;
pub static MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87CC;
pub static MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87CD;
pub static MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87CE;
pub static VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87CF;
pub static VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87D0;
pub static VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87D1;
pub static VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87D2;
pub static VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87D3;
pub static VERTEX_SHADER_OPTIMIZED_EXT: GLenum = 0x87D4;
pub static X_EXT: GLenum = 0x87D5;
pub static Y_EXT: GLenum = 0x87D6;
pub static Z_EXT: GLenum = 0x87D7;
pub static W_EXT: GLenum = 0x87D8;
pub static NEGATIVE_X_EXT: GLenum = 0x87D9;
pub static NEGATIVE_Y_EXT: GLenum = 0x87DA;
pub static NEGATIVE_Z_EXT: GLenum = 0x87DB;
pub static NEGATIVE_W_EXT: GLenum = 0x87DC;
pub static ZERO_EXT: GLenum = 0x87DD;
pub static ONE_EXT: GLenum = 0x87DE;
pub static NEGATIVE_ONE_EXT: GLenum = 0x87DF;
pub static NORMALIZED_RANGE_EXT: GLenum = 0x87E0;
pub static FULL_RANGE_EXT: GLenum = 0x87E1;
pub static CURRENT_VERTEX_EXT: GLenum = 0x87E2;
pub static MVP_MATRIX_EXT: GLenum = 0x87E3;
pub static VARIANT_VALUE_EXT: GLenum = 0x87E4;
pub static VARIANT_DATATYPE_EXT: GLenum = 0x87E5;
pub static VARIANT_ARRAY_STRIDE_EXT: GLenum = 0x87E6;
pub static VARIANT_ARRAY_TYPE_EXT: GLenum = 0x87E7;
pub static VARIANT_ARRAY_EXT: GLenum = 0x87E8;
pub static VARIANT_ARRAY_POINTER_EXT: GLenum = 0x87E9;
pub static INVARIANT_VALUE_EXT: GLenum = 0x87EA;
pub static INVARIANT_DATATYPE_EXT: GLenum = 0x87EB;
pub static LOCAL_CONSTANT_VALUE_EXT: GLenum = 0x87EC;
pub static LOCAL_CONSTANT_DATATYPE_EXT: GLenum = 0x87ED;
pub static ATC_RGBA_INTERPOLATED_ALPHA_AMD: GLenum = 0x87EE;
pub static PN_TRIANGLES_ATI: GLenum = 0x87F0;
pub static MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: GLenum = 0x87F1;
pub static PN_TRIANGLES_POINT_MODE_ATI: GLenum = 0x87F2;
pub static PN_TRIANGLES_NORMAL_MODE_ATI: GLenum = 0x87F3;
pub static PN_TRIANGLES_TESSELATION_LEVEL_ATI: GLenum = 0x87F4;
pub static PN_TRIANGLES_POINT_MODE_LINEAR_ATI: GLenum = 0x87F5;
pub static PN_TRIANGLES_POINT_MODE_CUBIC_ATI: GLenum = 0x87F6;
pub static PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: GLenum = 0x87F7;
pub static PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: GLenum = 0x87F8;
pub static _3DC_X_AMD: GLenum = 0x87F9;
pub static _3DC_XY_AMD: GLenum = 0x87FA;
pub static VBO_FREE_MEMORY_ATI: GLenum = 0x87FB;
pub static TEXTURE_FREE_MEMORY_ATI: GLenum = 0x87FC;
pub static RENDERBUFFER_FREE_MEMORY_ATI: GLenum = 0x87FD;
pub static NUM_PROGRAM_BINARY_FORMATS: GLenum = 0x87FE;
pub static NUM_PROGRAM_BINARY_FORMATS_OES: GLenum = 0x87FE;
pub static PROGRAM_BINARY_FORMATS: GLenum = 0x87FF;
pub static PROGRAM_BINARY_FORMATS_OES: GLenum = 0x87FF;
pub static STENCIL_BACK_FUNC: GLenum = 0x8800;
pub static STENCIL_BACK_FUNC_ATI: GLenum = 0x8800;
pub static STENCIL_BACK_FAIL: GLenum = 0x8801;
pub static STENCIL_BACK_FAIL_ATI: GLenum = 0x8801;
pub static STENCIL_BACK_PASS_DEPTH_FAIL: GLenum = 0x8802;
pub static STENCIL_BACK_PASS_DEPTH_FAIL_ATI: GLenum = 0x8802;
pub static STENCIL_BACK_PASS_DEPTH_PASS: GLenum = 0x8803;
pub static STENCIL_BACK_PASS_DEPTH_PASS_ATI: GLenum = 0x8803;
pub static FRAGMENT_PROGRAM_ARB: GLenum = 0x8804;
pub static PROGRAM_ALU_INSTRUCTIONS_ARB: GLenum = 0x8805;
pub static PROGRAM_TEX_INSTRUCTIONS_ARB: GLenum = 0x8806;
pub static PROGRAM_TEX_INDIRECTIONS_ARB: GLenum = 0x8807;
pub static PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: GLenum = 0x8808;
pub static PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: GLenum = 0x8809;
pub static PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: GLenum = 0x880A;
pub static MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: GLenum = 0x880B;
pub static MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: GLenum = 0x880C;
pub static MAX_PROGRAM_TEX_INDIRECTIONS_ARB: GLenum = 0x880D;
pub static MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: GLenum = 0x880E;
pub static MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: GLenum = 0x880F;
pub static MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: GLenum = 0x8810;
pub static RGBA32F: GLenum = 0x8814;
pub static RGBA32F_ARB: GLenum = 0x8814;
pub static RGBA_FLOAT32_APPLE: GLenum = 0x8814;
pub static RGBA_FLOAT32_ATI: GLenum = 0x8814;
pub static RGB32F: GLenum = 0x8815;
pub static RGB32F_ARB: GLenum = 0x8815;
pub static RGB_FLOAT32_APPLE: GLenum = 0x8815;
pub static RGB_FLOAT32_ATI: GLenum = 0x8815;
pub static ALPHA32F_ARB: GLenum = 0x8816;
pub static ALPHA_FLOAT32_APPLE: GLenum = 0x8816;
pub static ALPHA_FLOAT32_ATI: GLenum = 0x8816;
pub static INTENSITY32F_ARB: GLenum = 0x8817;
pub static INTENSITY_FLOAT32_APPLE: GLenum = 0x8817;
pub static INTENSITY_FLOAT32_ATI: GLenum = 0x8817;
pub static LUMINANCE32F_ARB: GLenum = 0x8818;
pub static LUMINANCE_FLOAT32_APPLE: GLenum = 0x8818;
pub static LUMINANCE_FLOAT32_ATI: GLenum = 0x8818;
pub static LUMINANCE_ALPHA32F_ARB: GLenum = 0x8819;
pub static LUMINANCE_ALPHA_FLOAT32_APPLE: GLenum = 0x8819;
pub static LUMINANCE_ALPHA_FLOAT32_ATI: GLenum = 0x8819;
pub static RGBA16F: GLenum = 0x881A;
pub static RGBA16F_ARB: GLenum = 0x881A;
pub static RGBA16F_EXT: GLenum = 0x881A;
pub static RGBA_FLOAT16_APPLE: GLenum = 0x881A;
pub static RGBA_FLOAT16_ATI: GLenum = 0x881A;
pub static RGB16F: GLenum = 0x881B;
pub static RGB16F_ARB: GLenum = 0x881B;
pub static RGB16F_EXT: GLenum = 0x881B;
pub static RGB_FLOAT16_APPLE: GLenum = 0x881B;
pub static RGB_FLOAT16_ATI: GLenum = 0x881B;
pub static ALPHA16F_ARB: GLenum = 0x881C;
pub static ALPHA_FLOAT16_APPLE: GLenum = 0x881C;
pub static ALPHA_FLOAT16_ATI: GLenum = 0x881C;
pub static INTENSITY16F_ARB: GLenum = 0x881D;
pub static INTENSITY_FLOAT16_APPLE: GLenum = 0x881D;
pub static INTENSITY_FLOAT16_ATI: GLenum = 0x881D;
pub static LUMINANCE16F_ARB: GLenum = 0x881E;
pub static LUMINANCE_FLOAT16_APPLE: GLenum = 0x881E;
pub static LUMINANCE_FLOAT16_ATI: GLenum = 0x881E;
pub static LUMINANCE_ALPHA16F_ARB: GLenum = 0x881F;
pub static LUMINANCE_ALPHA_FLOAT16_APPLE: GLenum = 0x881F;
pub static LUMINANCE_ALPHA_FLOAT16_ATI: GLenum = 0x881F;
pub static RGBA_FLOAT_MODE_ARB: GLenum = 0x8820;
pub static RGBA_FLOAT_MODE_ATI: GLenum = 0x8820;
pub static WRITEONLY_RENDERING_QCOM: GLenum = 0x8823;
pub static MAX_DRAW_BUFFERS: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_ARB: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_ATI: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_EXT: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_NV: GLenum = 0x8824;
pub static DRAW_BUFFER0: GLenum = 0x8825;
pub static DRAW_BUFFER0_ARB: GLenum = 0x8825;
pub static DRAW_BUFFER0_ATI: GLenum = 0x8825;
pub static DRAW_BUFFER0_EXT: GLenum = 0x8825;
pub static DRAW_BUFFER0_NV: GLenum = 0x8825;
pub static DRAW_BUFFER1: GLenum = 0x8826;
pub static DRAW_BUFFER1_ARB: GLenum = 0x8826;
pub static DRAW_BUFFER1_ATI: GLenum = 0x8826;
pub static DRAW_BUFFER1_EXT: GLenum = 0x8826;
pub static DRAW_BUFFER1_NV: GLenum = 0x8826;
pub static DRAW_BUFFER2: GLenum = 0x8827;
pub static DRAW_BUFFER2_ARB: GLenum = 0x8827;
pub static DRAW_BUFFER2_ATI: GLenum = 0x8827;
pub static DRAW_BUFFER2_EXT: GLenum = 0x8827;
pub static DRAW_BUFFER2_NV: GLenum = 0x8827;
pub static DRAW_BUFFER3: GLenum = 0x8828;
pub static DRAW_BUFFER3_ARB: GLenum = 0x8828;
pub static DRAW_BUFFER3_ATI: GLenum = 0x8828;
pub static DRAW_BUFFER3_EXT: GLenum = 0x8828;
pub static DRAW_BUFFER3_NV: GLenum = 0x8828;
pub static DRAW_BUFFER4: GLenum = 0x8829;
pub static DRAW_BUFFER4_ARB: GLenum = 0x8829;
pub static DRAW_BUFFER4_ATI: GLenum = 0x8829;
pub static DRAW_BUFFER4_EXT: GLenum = 0x8829;
pub static DRAW_BUFFER4_NV: GLenum = 0x8829;
pub static DRAW_BUFFER5: GLenum = 0x882A;
pub static DRAW_BUFFER5_ARB: GLenum = 0x882A;
pub static DRAW_BUFFER5_ATI: GLenum = 0x882A;
pub static DRAW_BUFFER5_EXT: GLenum = 0x882A;
pub static DRAW_BUFFER5_NV: GLenum = 0x882A;
pub static DRAW_BUFFER6: GLenum = 0x882B;
pub static DRAW_BUFFER6_ARB: GLenum = 0x882B;
pub static DRAW_BUFFER6_ATI: GLenum = 0x882B;
pub static DRAW_BUFFER6_EXT: GLenum = 0x882B;
pub static DRAW_BUFFER6_NV: GLenum = 0x882B;
pub static DRAW_BUFFER7: GLenum = 0x882C;
pub static DRAW_BUFFER7_ARB: GLenum = 0x882C;
pub static DRAW_BUFFER7_ATI: GLenum = 0x882C;
pub static DRAW_BUFFER7_EXT: GLenum = 0x882C;
pub static DRAW_BUFFER7_NV: GLenum = 0x882C;
pub static DRAW_BUFFER8: GLenum = 0x882D;
pub static DRAW_BUFFER8_ARB: GLenum = 0x882D;
pub static DRAW_BUFFER8_ATI: GLenum = 0x882D;
pub static DRAW_BUFFER8_EXT: GLenum = 0x882D;
pub static DRAW_BUFFER8_NV: GLenum = 0x882D;
pub static DRAW_BUFFER9: GLenum = 0x882E;
pub static DRAW_BUFFER9_ARB: GLenum = 0x882E;
pub static DRAW_BUFFER9_ATI: GLenum = 0x882E;
pub static DRAW_BUFFER9_EXT: GLenum = 0x882E;
pub static DRAW_BUFFER9_NV: GLenum = 0x882E;
pub static DRAW_BUFFER10: GLenum = 0x882F;
pub static DRAW_BUFFER10_ARB: GLenum = 0x882F;
pub static DRAW_BUFFER10_ATI: GLenum = 0x882F;
pub static DRAW_BUFFER10_EXT: GLenum = 0x882F;
pub static DRAW_BUFFER10_NV: GLenum = 0x882F;
pub static DRAW_BUFFER11: GLenum = 0x8830;
pub static DRAW_BUFFER11_ARB: GLenum = 0x8830;
pub static DRAW_BUFFER11_ATI: GLenum = 0x8830;
pub static DRAW_BUFFER11_EXT: GLenum = 0x8830;
pub static DRAW_BUFFER11_NV: GLenum = 0x8830;
pub static DRAW_BUFFER12: GLenum = 0x8831;
pub static DRAW_BUFFER12_ARB: GLenum = 0x8831;
pub static DRAW_BUFFER12_ATI: GLenum = 0x8831;
pub static DRAW_BUFFER12_EXT: GLenum = 0x8831;
pub static DRAW_BUFFER12_NV: GLenum = 0x8831;
pub static DRAW_BUFFER13: GLenum = 0x8832;
pub static DRAW_BUFFER13_ARB: GLenum = 0x8832;
pub static DRAW_BUFFER13_ATI: GLenum = 0x8832;
pub static DRAW_BUFFER13_EXT: GLenum = 0x8832;
pub static DRAW_BUFFER13_NV: GLenum = 0x8832;
pub static DRAW_BUFFER14: GLenum = 0x8833;
pub static DRAW_BUFFER14_ARB: GLenum = 0x8833;
pub static DRAW_BUFFER14_ATI: GLenum = 0x8833;
pub static DRAW_BUFFER14_EXT: GLenum = 0x8833;
pub static DRAW_BUFFER14_NV: GLenum = 0x8833;
pub static DRAW_BUFFER15: GLenum = 0x8834;
pub static DRAW_BUFFER15_ARB: GLenum = 0x8834;
pub static DRAW_BUFFER15_ATI: GLenum = 0x8834;
pub static DRAW_BUFFER15_EXT: GLenum = 0x8834;
pub static DRAW_BUFFER15_NV: GLenum = 0x8834;
pub static COLOR_CLEAR_UNCLAMPED_VALUE_ATI: GLenum = 0x8835;
pub static BLEND_EQUATION_ALPHA: GLenum = 0x883D;
pub static BLEND_EQUATION_ALPHA_EXT: GLenum = 0x883D;
pub static BLEND_EQUATION_ALPHA_OES: GLenum = 0x883D;
pub static SUBSAMPLE_DISTANCE_AMD: GLenum = 0x883F;
pub static MATRIX_PALETTE_ARB: GLenum = 0x8840;
pub static MATRIX_PALETTE_OES: GLenum = 0x8840;
pub static MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: GLenum = 0x8841;
pub static MAX_PALETTE_MATRICES_ARB: GLenum = 0x8842;
pub static MAX_PALETTE_MATRICES_OES: GLenum = 0x8842;
pub static CURRENT_PALETTE_MATRIX_ARB: GLenum = 0x8843;
pub static CURRENT_PALETTE_MATRIX_OES: GLenum = 0x8843;
pub static MATRIX_INDEX_ARRAY_ARB: GLenum = 0x8844;
pub static MATRIX_INDEX_ARRAY_OES: GLenum = 0x8844;
pub static CURRENT_MATRIX_INDEX_ARB: GLenum = 0x8845;
pub static MATRIX_INDEX_ARRAY_SIZE_ARB: GLenum = 0x8846;
pub static MATRIX_INDEX_ARRAY_SIZE_OES: GLenum = 0x8846;
pub static MATRIX_INDEX_ARRAY_TYPE_ARB: GLenum = 0x8847;
pub static MATRIX_INDEX_ARRAY_TYPE_OES: GLenum = 0x8847;
pub static MATRIX_INDEX_ARRAY_STRIDE_ARB: GLenum = 0x8848;
pub static MATRIX_INDEX_ARRAY_STRIDE_OES: GLenum = 0x8848;
pub static MATRIX_INDEX_ARRAY_POINTER_ARB: GLenum = 0x8849;
pub static MATRIX_INDEX_ARRAY_POINTER_OES: GLenum = 0x8849;
pub static TEXTURE_DEPTH_SIZE: GLenum = 0x884A;
pub static TEXTURE_DEPTH_SIZE_ARB: GLenum = 0x884A;
pub static DEPTH_TEXTURE_MODE: GLenum = 0x884B;
pub static DEPTH_TEXTURE_MODE_ARB: GLenum = 0x884B;
pub static TEXTURE_COMPARE_MODE: GLenum = 0x884C;
pub static TEXTURE_COMPARE_MODE_ARB: GLenum = 0x884C;
pub static TEXTURE_COMPARE_MODE_EXT: GLenum = 0x884C;
pub static TEXTURE_COMPARE_FUNC: GLenum = 0x884D;
pub static TEXTURE_COMPARE_FUNC_ARB: GLenum = 0x884D;
pub static TEXTURE_COMPARE_FUNC_EXT: GLenum = 0x884D;
pub static COMPARE_R_TO_TEXTURE: GLenum = 0x884E;
pub static COMPARE_R_TO_TEXTURE_ARB: GLenum = 0x884E;
pub static COMPARE_REF_DEPTH_TO_TEXTURE_EXT: GLenum = 0x884E;
pub static COMPARE_REF_TO_TEXTURE: GLenum = 0x884E;
pub static COMPARE_REF_TO_TEXTURE_EXT: GLenum = 0x884E;
pub static TEXTURE_CUBE_MAP_SEAMLESS: GLenum = 0x884F;
pub static OFFSET_PROJECTIVE_TEXTURE_2D_NV: GLenum = 0x8850;
pub static OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV: GLenum = 0x8851;
pub static OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV: GLenum = 0x8852;
pub static OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV: GLenum = 0x8853;
pub static OFFSET_HILO_TEXTURE_2D_NV: GLenum = 0x8854;
pub static OFFSET_HILO_TEXTURE_RECTANGLE_NV: GLenum = 0x8855;
pub static OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV: GLenum = 0x8856;
pub static OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV: GLenum = 0x8857;
pub static DEPENDENT_HILO_TEXTURE_2D_NV: GLenum = 0x8858;
pub static DEPENDENT_RGB_TEXTURE_3D_NV: GLenum = 0x8859;
pub static DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV: GLenum = 0x885A;
pub static DOT_PRODUCT_PASS_THROUGH_NV: GLenum = 0x885B;
pub static DOT_PRODUCT_TEXTURE_1D_NV: GLenum = 0x885C;
pub static DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV: GLenum = 0x885D;
pub static HILO8_NV: GLenum = 0x885E;
pub static SIGNED_HILO8_NV: GLenum = 0x885F;
pub static FORCE_BLUE_TO_ONE_NV: GLenum = 0x8860;
pub static POINT_SPRITE: GLenum = 0x8861;
pub static POINT_SPRITE_ARB: GLenum = 0x8861;
pub static POINT_SPRITE_NV: GLenum = 0x8861;
pub static POINT_SPRITE_OES: GLenum = 0x8861;
pub static COORD_REPLACE: GLenum = 0x8862;
pub static COORD_REPLACE_ARB: GLenum = 0x8862;
pub static COORD_REPLACE_NV: GLenum = 0x8862;
pub static COORD_REPLACE_OES: GLenum = 0x8862;
pub static POINT_SPRITE_R_MODE_NV: GLenum = 0x8863;
pub static PIXEL_COUNTER_BITS_NV: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS_ARB: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS_EXT: GLenum = 0x8864;
pub static CURRENT_OCCLUSION_QUERY_ID_NV: GLenum = 0x8865;
pub static CURRENT_QUERY: GLenum = 0x8865;
pub static CURRENT_QUERY_ARB: GLenum = 0x8865;
pub static CURRENT_QUERY_EXT: GLenum = 0x8865;
pub static PIXEL_COUNT_NV: GLenum = 0x8866;
pub static QUERY_RESULT: GLenum = 0x8866;
pub static QUERY_RESULT_ARB: GLenum = 0x8866;
pub static QUERY_RESULT_EXT: GLenum = 0x8866;
pub static PIXEL_COUNT_AVAILABLE_NV: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE_ARB: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE_EXT: GLenum = 0x8867;
pub static MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: GLenum = 0x8868;
pub static MAX_VERTEX_ATTRIBS: GLenum = 0x8869;
pub static MAX_VERTEX_ATTRIBS_ARB: GLenum = 0x8869;
pub static VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum = 0x886A;
pub static VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: GLenum = 0x886A;
pub static MAX_TESS_CONTROL_INPUT_COMPONENTS: GLenum = 0x886C;
pub static MAX_TESS_EVALUATION_INPUT_COMPONENTS: GLenum = 0x886D;
pub static DEPTH_STENCIL_TO_RGBA_NV: GLenum = 0x886E;
pub static DEPTH_STENCIL_TO_BGRA_NV: GLenum = 0x886F;
pub static FRAGMENT_PROGRAM_NV: GLenum = 0x8870;
pub static MAX_TEXTURE_COORDS: GLenum = 0x8871;
pub static MAX_TEXTURE_COORDS_ARB: GLenum = 0x8871;
pub static MAX_TEXTURE_COORDS_NV: GLenum = 0x8871;
pub static MAX_TEXTURE_IMAGE_UNITS: GLenum = 0x8872;
pub static MAX_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8872;
pub static MAX_TEXTURE_IMAGE_UNITS_NV: GLenum = 0x8872;
pub static FRAGMENT_PROGRAM_BINDING_NV: GLenum = 0x8873;
pub static PROGRAM_ERROR_STRING_ARB: GLenum = 0x8874;
pub static PROGRAM_ERROR_STRING_NV: GLenum = 0x8874;
pub static PROGRAM_FORMAT_ASCII_ARB: GLenum = 0x8875;
pub static PROGRAM_FORMAT_ARB: GLenum = 0x8876;
pub static WRITE_PIXEL_DATA_RANGE_NV: GLenum = 0x8878;
pub static READ_PIXEL_DATA_RANGE_NV: GLenum = 0x8879;
pub static WRITE_PIXEL_DATA_RANGE_LENGTH_NV: GLenum = 0x887A;
pub static READ_PIXEL_DATA_RANGE_LENGTH_NV: GLenum = 0x887B;
pub static WRITE_PIXEL_DATA_RANGE_POINTER_NV: GLenum = 0x887C;
pub static READ_PIXEL_DATA_RANGE_POINTER_NV: GLenum = 0x887D;
pub static GEOMETRY_SHADER_INVOCATIONS: GLenum = 0x887F;
pub static FLOAT_R_NV: GLenum = 0x8880;
pub static FLOAT_RG_NV: GLenum = 0x8881;
pub static FLOAT_RGB_NV: GLenum = 0x8882;
pub static FLOAT_RGBA_NV: GLenum = 0x8883;
pub static FLOAT_R16_NV: GLenum = 0x8884;
pub static FLOAT_R32_NV: GLenum = 0x8885;
pub static FLOAT_RG16_NV: GLenum = 0x8886;
pub static FLOAT_RG32_NV: GLenum = 0x8887;
pub static FLOAT_RGB16_NV: GLenum = 0x8888;
pub static FLOAT_RGB32_NV: GLenum = 0x8889;
pub static FLOAT_RGBA16_NV: GLenum = 0x888A;
pub static FLOAT_RGBA32_NV: GLenum = 0x888B;
pub static TEXTURE_FLOAT_COMPONENTS_NV: GLenum = 0x888C;
pub static FLOAT_CLEAR_COLOR_VALUE_NV: GLenum = 0x888D;
pub static FLOAT_RGBA_MODE_NV: GLenum = 0x888E;
pub static TEXTURE_UNSIGNED_REMAP_MODE_NV: GLenum = 0x888F;
pub static DEPTH_BOUNDS_TEST_EXT: GLenum = 0x8890;
pub static DEPTH_BOUNDS_EXT: GLenum = 0x8891;
pub static ARRAY_BUFFER: GLenum = 0x8892;
pub static ARRAY_BUFFER_ARB: GLenum = 0x8892;
pub static ELEMENT_ARRAY_BUFFER: GLenum = 0x8893;
pub static ELEMENT_ARRAY_BUFFER_ARB: GLenum = 0x8893;
pub static ARRAY_BUFFER_BINDING: GLenum = 0x8894;
pub static ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8894;
pub static ELEMENT_ARRAY_BUFFER_BINDING: GLenum = 0x8895;
pub static ELEMENT_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8895;
pub static VERTEX_ARRAY_BUFFER_BINDING: GLenum = 0x8896;
pub static VERTEX_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8896;
pub static NORMAL_ARRAY_BUFFER_BINDING: GLenum = 0x8897;
pub static NORMAL_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8897;
pub static COLOR_ARRAY_BUFFER_BINDING: GLenum = 0x8898;
pub static COLOR_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8898;
pub static INDEX_ARRAY_BUFFER_BINDING: GLenum = 0x8899;
pub static INDEX_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8899;
pub static TEXTURE_COORD_ARRAY_BUFFER_BINDING: GLenum = 0x889A;
pub static TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889A;
pub static EDGE_FLAG_ARRAY_BUFFER_BINDING: GLenum = 0x889B;
pub static EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889B;
pub static SECONDARY_COLOR_ARRAY_BUFFER_BINDING: GLenum = 0x889C;
pub static SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889C;
pub static FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889D;
pub static FOG_COORDINATE_ARRAY_BUFFER_BINDING: GLenum = 0x889D;
pub static FOG_COORD_ARRAY_BUFFER_BINDING: GLenum = 0x889D;
pub static WEIGHT_ARRAY_BUFFER_BINDING: GLenum = 0x889E;
pub static WEIGHT_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889E;
pub static WEIGHT_ARRAY_BUFFER_BINDING_OES: GLenum = 0x889E;
pub static VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = 0x889F;
pub static VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889F;
pub static PROGRAM_INSTRUCTIONS_ARB: GLenum = 0x88A0;
pub static MAX_PROGRAM_INSTRUCTIONS_ARB: GLenum = 0x88A1;
pub static PROGRAM_NATIVE_INSTRUCTIONS_ARB: GLenum = 0x88A2;
pub static MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: GLenum = 0x88A3;
pub static PROGRAM_TEMPORARIES_ARB: GLenum = 0x88A4;
pub static MAX_PROGRAM_TEMPORARIES_ARB: GLenum = 0x88A5;
pub static PROGRAM_NATIVE_TEMPORARIES_ARB: GLenum = 0x88A6;
pub static MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: GLenum = 0x88A7;
pub static PROGRAM_PARAMETERS_ARB: GLenum = 0x88A8;
pub static MAX_PROGRAM_PARAMETERS_ARB: GLenum = 0x88A9;
pub static PROGRAM_NATIVE_PARAMETERS_ARB: GLenum = 0x88AA;
pub static MAX_PROGRAM_NATIVE_PARAMETERS_ARB: GLenum = 0x88AB;
pub static PROGRAM_ATTRIBS_ARB: GLenum = 0x88AC;
pub static MAX_PROGRAM_ATTRIBS_ARB: GLenum = 0x88AD;
pub static PROGRAM_NATIVE_ATTRIBS_ARB: GLenum = 0x88AE;
pub static MAX_PROGRAM_NATIVE_ATTRIBS_ARB: GLenum = 0x88AF;
pub static PROGRAM_ADDRESS_REGISTERS_ARB: GLenum = 0x88B0;
pub static MAX_PROGRAM_ADDRESS_REGISTERS_ARB: GLenum = 0x88B1;
pub static PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: GLenum = 0x88B2;
pub static MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: GLenum = 0x88B3;
pub static MAX_PROGRAM_LOCAL_PARAMETERS_ARB: GLenum = 0x88B4;
pub static MAX_PROGRAM_ENV_PARAMETERS_ARB: GLenum = 0x88B5;
pub static PROGRAM_UNDER_NATIVE_LIMITS_ARB: GLenum = 0x88B6;
pub static TRANSPOSE_CURRENT_MATRIX_ARB: GLenum = 0x88B7;
pub static READ_ONLY: GLenum = 0x88B8;
pub static READ_ONLY_ARB: GLenum = 0x88B8;
pub static WRITE_ONLY: GLenum = 0x88B9;
pub static WRITE_ONLY_ARB: GLenum = 0x88B9;
pub static WRITE_ONLY_OES: GLenum = 0x88B9;
pub static READ_WRITE: GLenum = 0x88BA;
pub static READ_WRITE_ARB: GLenum = 0x88BA;
pub static BUFFER_ACCESS: GLenum = 0x88BB;
pub static BUFFER_ACCESS_ARB: GLenum = 0x88BB;
pub static BUFFER_ACCESS_OES: GLenum = 0x88BB;
pub static BUFFER_MAPPED: GLenum = 0x88BC;
pub static BUFFER_MAPPED_ARB: GLenum = 0x88BC;
pub static BUFFER_MAPPED_OES: GLenum = 0x88BC;
pub static BUFFER_MAP_POINTER: GLenum = 0x88BD;
pub static BUFFER_MAP_POINTER_ARB: GLenum = 0x88BD;
pub static BUFFER_MAP_POINTER_OES: GLenum = 0x88BD;
pub static WRITE_DISCARD_NV: GLenum = 0x88BE;
pub static TIME_ELAPSED: GLenum = 0x88BF;
pub static TIME_ELAPSED_EXT: GLenum = 0x88BF;
pub static MATRIX0_ARB: GLenum = 0x88C0;
pub static MATRIX1_ARB: GLenum = 0x88C1;
pub static MATRIX2_ARB: GLenum = 0x88C2;
pub static MATRIX3_ARB: GLenum = 0x88C3;
pub static MATRIX4_ARB: GLenum = 0x88C4;
pub static MATRIX5_ARB: GLenum = 0x88C5;
pub static MATRIX6_ARB: GLenum = 0x88C6;
pub static MATRIX7_ARB: GLenum = 0x88C7;
pub static MATRIX8_ARB: GLenum = 0x88C8;
pub static MATRIX9_ARB: GLenum = 0x88C9;
pub static MATRIX10_ARB: GLenum = 0x88CA;
pub static MATRIX11_ARB: GLenum = 0x88CB;
pub static MATRIX12_ARB: GLenum = 0x88CC;
pub static MATRIX13_ARB: GLenum = 0x88CD;
pub static MATRIX14_ARB: GLenum = 0x88CE;
pub static MATRIX15_ARB: GLenum = 0x88CF;
pub static MATRIX16_ARB: GLenum = 0x88D0;
pub static MATRIX17_ARB: GLenum = 0x88D1;
pub static MATRIX18_ARB: GLenum = 0x88D2;
pub static MATRIX19_ARB: GLenum = 0x88D3;
pub static MATRIX20_ARB: GLenum = 0x88D4;
pub static MATRIX21_ARB: GLenum = 0x88D5;
pub static MATRIX22_ARB: GLenum = 0x88D6;
pub static MATRIX23_ARB: GLenum = 0x88D7;
pub static MATRIX24_ARB: GLenum = 0x88D8;
pub static MATRIX25_ARB: GLenum = 0x88D9;
pub static MATRIX26_ARB: GLenum = 0x88DA;
pub static MATRIX27_ARB: GLenum = 0x88DB;
pub static MATRIX28_ARB: GLenum = 0x88DC;
pub static MATRIX29_ARB: GLenum = 0x88DD;
pub static MATRIX30_ARB: GLenum = 0x88DE;
pub static MATRIX31_ARB: GLenum = 0x88DF;
pub static STREAM_DRAW: GLenum = 0x88E0;
pub static STREAM_DRAW_ARB: GLenum = 0x88E0;
pub static STREAM_READ: GLenum = 0x88E1;
pub static STREAM_READ_ARB: GLenum = 0x88E1;
pub static STREAM_COPY: GLenum = 0x88E2;
pub static STREAM_COPY_ARB: GLenum = 0x88E2;
pub static STATIC_DRAW: GLenum = 0x88E4;
pub static STATIC_DRAW_ARB: GLenum = 0x88E4;
pub static STATIC_READ: GLenum = 0x88E5;
pub static STATIC_READ_ARB: GLenum = 0x88E5;
pub static STATIC_COPY: GLenum = 0x88E6;
pub static STATIC_COPY_ARB: GLenum = 0x88E6;
pub static DYNAMIC_DRAW: GLenum = 0x88E8;
pub static DYNAMIC_DRAW_ARB: GLenum = 0x88E8;
pub static DYNAMIC_READ: GLenum = 0x88E9;
pub static DYNAMIC_READ_ARB: GLenum = 0x88E9;
pub static DYNAMIC_COPY: GLenum = 0x88EA;
pub static DYNAMIC_COPY_ARB: GLenum = 0x88EA;
pub static PIXEL_PACK_BUFFER: GLenum = 0x88EB;
pub static PIXEL_PACK_BUFFER_ARB: GLenum = 0x88EB;
pub static PIXEL_PACK_BUFFER_EXT: GLenum = 0x88EB;
pub static PIXEL_UNPACK_BUFFER: GLenum = 0x88EC;
pub static PIXEL_UNPACK_BUFFER_ARB: GLenum = 0x88EC;
pub static PIXEL_UNPACK_BUFFER_EXT: GLenum = 0x88EC;
pub static PIXEL_PACK_BUFFER_BINDING: GLenum = 0x88ED;
pub static PIXEL_PACK_BUFFER_BINDING_ARB: GLenum = 0x88ED;
pub static PIXEL_PACK_BUFFER_BINDING_EXT: GLenum = 0x88ED;
pub static ETC1_SRGB8_NV: GLenum = 0x88EE;
pub static PIXEL_UNPACK_BUFFER_BINDING: GLenum = 0x88EF;
pub static PIXEL_UNPACK_BUFFER_BINDING_ARB: GLenum = 0x88EF;
pub static PIXEL_UNPACK_BUFFER_BINDING_EXT: GLenum = 0x88EF;
pub static DEPTH24_STENCIL8: GLenum = 0x88F0;
pub static DEPTH24_STENCIL8_EXT: GLenum = 0x88F0;
pub static DEPTH24_STENCIL8_OES: GLenum = 0x88F0;
pub static TEXTURE_STENCIL_SIZE: GLenum = 0x88F1;
pub static TEXTURE_STENCIL_SIZE_EXT: GLenum = 0x88F1;
pub static STENCIL_TAG_BITS_EXT: GLenum = 0x88F2;
pub static STENCIL_CLEAR_TAG_VALUE_EXT: GLenum = 0x88F3;
pub static MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: GLenum = 0x88F4;
pub static MAX_PROGRAM_CALL_DEPTH_NV: GLenum = 0x88F5;
pub static MAX_PROGRAM_IF_DEPTH_NV: GLenum = 0x88F6;
pub static MAX_PROGRAM_LOOP_DEPTH_NV: GLenum = 0x88F7;
pub static MAX_PROGRAM_LOOP_COUNT_NV: GLenum = 0x88F8;
pub static SRC1_COLOR: GLenum = 0x88F9;
pub static ONE_MINUS_SRC1_COLOR: GLenum = 0x88FA;
pub static ONE_MINUS_SRC1_ALPHA: GLenum = 0x88FB;
pub static MAX_DUAL_SOURCE_DRAW_BUFFERS: GLenum = 0x88FC;
pub static VERTEX_ATTRIB_ARRAY_INTEGER: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_INTEGER_EXT: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_INTEGER_NV: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_NV: GLenum = 0x88FE;
pub static MAX_ARRAY_TEXTURE_LAYERS: GLenum = 0x88FF;
pub static MAX_ARRAY_TEXTURE_LAYERS_EXT: GLenum = 0x88FF;
pub static MIN_PROGRAM_TEXEL_OFFSET: GLenum = 0x8904;
pub static MIN_PROGRAM_TEXEL_OFFSET_EXT: GLenum = 0x8904;
pub static MIN_PROGRAM_TEXEL_OFFSET_NV: GLenum = 0x8904;
pub static MAX_PROGRAM_TEXEL_OFFSET: GLenum = 0x8905;
pub static MAX_PROGRAM_TEXEL_OFFSET_EXT: GLenum = 0x8905;
pub static MAX_PROGRAM_TEXEL_OFFSET_NV: GLenum = 0x8905;
pub static PROGRAM_ATTRIB_COMPONENTS_NV: GLenum = 0x8906;
pub static PROGRAM_RESULT_COMPONENTS_NV: GLenum = 0x8907;
pub static MAX_PROGRAM_ATTRIB_COMPONENTS_NV: GLenum = 0x8908;
pub static MAX_PROGRAM_RESULT_COMPONENTS_NV: GLenum = 0x8909;
pub static STENCIL_TEST_TWO_SIDE_EXT: GLenum = 0x8910;
pub static ACTIVE_STENCIL_FACE_EXT: GLenum = 0x8911;
pub static MIRROR_CLAMP_TO_BORDER_EXT: GLenum = 0x8912;
pub static SAMPLES_PASSED: GLenum = 0x8914;
pub static SAMPLES_PASSED_ARB: GLenum = 0x8914;
pub static GEOMETRY_VERTICES_OUT: GLenum = 0x8916;
pub static GEOMETRY_INPUT_TYPE: GLenum = 0x8917;
pub static GEOMETRY_OUTPUT_TYPE: GLenum = 0x8918;
pub static SAMPLER_BINDING: GLenum = 0x8919;
pub static CLAMP_VERTEX_COLOR: GLenum = 0x891A;
pub static CLAMP_VERTEX_COLOR_ARB: GLenum = 0x891A;
pub static CLAMP_FRAGMENT_COLOR: GLenum = 0x891B;
pub static CLAMP_FRAGMENT_COLOR_ARB: GLenum = 0x891B;
pub static CLAMP_READ_COLOR: GLenum = 0x891C;
pub static CLAMP_READ_COLOR_ARB: GLenum = 0x891C;
pub static FIXED_ONLY: GLenum = 0x891D;
pub static FIXED_ONLY_ARB: GLenum = 0x891D;
pub static TESS_CONTROL_PROGRAM_NV: GLenum = 0x891E;
pub static TESS_EVALUATION_PROGRAM_NV: GLenum = 0x891F;
pub static FRAGMENT_SHADER_ATI: GLenum = 0x8920;
pub static REG_0_ATI: GLenum = 0x8921;
pub static REG_1_ATI: GLenum = 0x8922;
pub static REG_2_ATI: GLenum = 0x8923;
pub static REG_3_ATI: GLenum = 0x8924;
pub static REG_4_ATI: GLenum = 0x8925;
pub static REG_5_ATI: GLenum = 0x8926;
pub static REG_6_ATI: GLenum = 0x8927;
pub static REG_7_ATI: GLenum = 0x8928;
pub static REG_8_ATI: GLenum = 0x8929;
pub static REG_9_ATI: GLenum = 0x892A;
pub static REG_10_ATI: GLenum = 0x892B;
pub static REG_11_ATI: GLenum = 0x892C;
pub static REG_12_ATI: GLenum = 0x892D;
pub static REG_13_ATI: GLenum = 0x892E;
pub static REG_14_ATI: GLenum = 0x892F;
pub static REG_15_ATI: GLenum = 0x8930;
pub static REG_16_ATI: GLenum = 0x8931;
pub static REG_17_ATI: GLenum = 0x8932;
pub static REG_18_ATI: GLenum = 0x8933;
pub static REG_19_ATI: GLenum = 0x8934;
pub static REG_20_ATI: GLenum = 0x8935;
pub static REG_21_ATI: GLenum = 0x8936;
pub static REG_22_ATI: GLenum = 0x8937;
pub static REG_23_ATI: GLenum = 0x8938;
pub static REG_24_ATI: GLenum = 0x8939;
pub static REG_25_ATI: GLenum = 0x893A;
pub static REG_26_ATI: GLenum = 0x893B;
pub static REG_27_ATI: GLenum = 0x893C;
pub static REG_28_ATI: GLenum = 0x893D;
pub static REG_29_ATI: GLenum = 0x893E;
pub static REG_30_ATI: GLenum = 0x893F;
pub static REG_31_ATI: GLenum = 0x8940;
pub static CON_0_ATI: GLenum = 0x8941;
pub static CON_1_ATI: GLenum = 0x8942;
pub static CON_2_ATI: GLenum = 0x8943;
pub static CON_3_ATI: GLenum = 0x8944;
pub static CON_4_ATI: GLenum = 0x8945;
pub static CON_5_ATI: GLenum = 0x8946;
pub static CON_6_ATI: GLenum = 0x8947;
pub static CON_7_ATI: GLenum = 0x8948;
pub static CON_8_ATI: GLenum = 0x8949;
pub static CON_9_ATI: GLenum = 0x894A;
pub static CON_10_ATI: GLenum = 0x894B;
pub static CON_11_ATI: GLenum = 0x894C;
pub static CON_12_ATI: GLenum = 0x894D;
pub static CON_13_ATI: GLenum = 0x894E;
pub static CON_14_ATI: GLenum = 0x894F;
pub static CON_15_ATI: GLenum = 0x8950;
pub static CON_16_ATI: GLenum = 0x8951;
pub static CON_17_ATI: GLenum = 0x8952;
pub static CON_18_ATI: GLenum = 0x8953;
pub static CON_19_ATI: GLenum = 0x8954;
pub static CON_20_ATI: GLenum = 0x8955;
pub static CON_21_ATI: GLenum = 0x8956;
pub static CON_22_ATI: GLenum = 0x8957;
pub static CON_23_ATI: GLenum = 0x8958;
pub static CON_24_ATI: GLenum = 0x8959;
pub static CON_25_ATI: GLenum = 0x895A;
pub static CON_26_ATI: GLenum = 0x895B;
pub static CON_27_ATI: GLenum = 0x895C;
pub static CON_28_ATI: GLenum = 0x895D;
pub static CON_29_ATI: GLenum = 0x895E;
pub static CON_30_ATI: GLenum = 0x895F;
pub static CON_31_ATI: GLenum = 0x8960;
pub static MOV_ATI: GLenum = 0x8961;
pub static ADD_ATI: GLenum = 0x8963;
pub static MUL_ATI: GLenum = 0x8964;
pub static SUB_ATI: GLenum = 0x8965;
pub static DOT3_ATI: GLenum = 0x8966;
pub static DOT4_ATI: GLenum = 0x8967;
pub static MAD_ATI: GLenum = 0x8968;
pub static LERP_ATI: GLenum = 0x8969;
pub static CND_ATI: GLenum = 0x896A;
pub static CND0_ATI: GLenum = 0x896B;
pub static DOT2_ADD_ATI: GLenum = 0x896C;
pub static SECONDARY_INTERPOLATOR_ATI: GLenum = 0x896D;
pub static NUM_FRAGMENT_REGISTERS_ATI: GLenum = 0x896E;
pub static NUM_FRAGMENT_CONSTANTS_ATI: GLenum = 0x896F;
pub static NUM_PASSES_ATI: GLenum = 0x8970;
pub static NUM_INSTRUCTIONS_PER_PASS_ATI: GLenum = 0x8971;
pub static NUM_INSTRUCTIONS_TOTAL_ATI: GLenum = 0x8972;
pub static NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: GLenum = 0x8973;
pub static NUM_LOOPBACK_COMPONENTS_ATI: GLenum = 0x8974;
pub static COLOR_ALPHA_PAIRING_ATI: GLenum = 0x8975;
pub static SWIZZLE_STR_ATI: GLenum = 0x8976;
pub static SWIZZLE_STQ_ATI: GLenum = 0x8977;
pub static SWIZZLE_STR_DR_ATI: GLenum = 0x8978;
pub static SWIZZLE_STQ_DQ_ATI: GLenum = 0x8979;
pub static SWIZZLE_STRQ_ATI: GLenum = 0x897A;
pub static SWIZZLE_STRQ_DQ_ATI: GLenum = 0x897B;
pub static INTERLACE_OML: GLenum = 0x8980;
pub static INTERLACE_READ_OML: GLenum = 0x8981;
pub static FORMAT_SUBSAMPLE_24_24_OML: GLenum = 0x8982;
pub static FORMAT_SUBSAMPLE_244_244_OML: GLenum = 0x8983;
pub static PACK_RESAMPLE_OML: GLenum = 0x8984;
pub static UNPACK_RESAMPLE_OML: GLenum = 0x8985;
pub static RESAMPLE_REPLICATE_OML: GLenum = 0x8986;
pub static RESAMPLE_ZERO_FILL_OML: GLenum = 0x8987;
pub static RESAMPLE_AVERAGE_OML: GLenum = 0x8988;
pub static RESAMPLE_DECIMATE_OML: GLenum = 0x8989;
pub static POINT_SIZE_ARRAY_TYPE_OES: GLenum = 0x898A;
pub static POINT_SIZE_ARRAY_STRIDE_OES: GLenum = 0x898B;
pub static POINT_SIZE_ARRAY_POINTER_OES: GLenum = 0x898C;
pub static MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898D;
pub static PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898E;
pub static TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898F;
pub static VERTEX_ATTRIB_MAP1_APPLE: GLenum = 0x8A00;
pub static VERTEX_ATTRIB_MAP2_APPLE: GLenum = 0x8A01;
pub static VERTEX_ATTRIB_MAP1_SIZE_APPLE: GLenum = 0x8A02;
pub static VERTEX_ATTRIB_MAP1_COEFF_APPLE: GLenum = 0x8A03;
pub static VERTEX_ATTRIB_MAP1_ORDER_APPLE: GLenum = 0x8A04;
pub static VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: GLenum = 0x8A05;
pub static VERTEX_ATTRIB_MAP2_SIZE_APPLE: GLenum = 0x8A06;
pub static VERTEX_ATTRIB_MAP2_COEFF_APPLE: GLenum = 0x8A07;
pub static VERTEX_ATTRIB_MAP2_ORDER_APPLE: GLenum = 0x8A08;
pub static VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: GLenum = 0x8A09;
pub static DRAW_PIXELS_APPLE: GLenum = 0x8A0A;
pub static FENCE_APPLE: GLenum = 0x8A0B;
pub static ELEMENT_ARRAY_APPLE: GLenum = 0x8A0C;
pub static ELEMENT_ARRAY_TYPE_APPLE: GLenum = 0x8A0D;
pub static ELEMENT_ARRAY_POINTER_APPLE: GLenum = 0x8A0E;
pub static COLOR_FLOAT_APPLE: GLenum = 0x8A0F;
pub static UNIFORM_BUFFER: GLenum = 0x8A11;
pub static BUFFER_SERIALIZED_MODIFY_APPLE: GLenum = 0x8A12;
pub static BUFFER_FLUSHING_UNMAP_APPLE: GLenum = 0x8A13;
pub static AUX_DEPTH_STENCIL_APPLE: GLenum = 0x8A14;
pub static PACK_ROW_BYTES_APPLE: GLenum = 0x8A15;
pub static UNPACK_ROW_BYTES_APPLE: GLenum = 0x8A16;
pub static RELEASED_APPLE: GLenum = 0x8A19;
pub static VOLATILE_APPLE: GLenum = 0x8A1A;
pub static RETAINED_APPLE: GLenum = 0x8A1B;
pub static UNDEFINED_APPLE: GLenum = 0x8A1C;
pub static PURGEABLE_APPLE: GLenum = 0x8A1D;
pub static RGB_422_APPLE: GLenum = 0x8A1F;
pub static UNIFORM_BUFFER_BINDING: GLenum = 0x8A28;
pub static UNIFORM_BUFFER_START: GLenum = 0x8A29;
pub static UNIFORM_BUFFER_SIZE: GLenum = 0x8A2A;
pub static MAX_VERTEX_UNIFORM_BLOCKS: GLenum = 0x8A2B;
pub static MAX_GEOMETRY_UNIFORM_BLOCKS: GLenum = 0x8A2C;
pub static MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum = 0x8A2D;
pub static MAX_COMBINED_UNIFORM_BLOCKS: GLenum = 0x8A2E;
pub static MAX_UNIFORM_BUFFER_BINDINGS: GLenum = 0x8A2F;
pub static MAX_UNIFORM_BLOCK_SIZE: GLenum = 0x8A30;
pub static MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8A31;
pub static MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: GLenum = 0x8A32;
pub static MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8A33;
pub static UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x8A34;
pub static ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: GLenum = 0x8A35;
pub static ACTIVE_UNIFORM_BLOCKS: GLenum = 0x8A36;
pub static UNIFORM_TYPE: GLenum = 0x8A37;
pub static UNIFORM_SIZE: GLenum = 0x8A38;
pub static UNIFORM_NAME_LENGTH: GLenum = 0x8A39;
pub static UNIFORM_BLOCK_INDEX: GLenum = 0x8A3A;
pub static UNIFORM_OFFSET: GLenum = 0x8A3B;
pub static UNIFORM_ARRAY_STRIDE: GLenum = 0x8A3C;
pub static UNIFORM_MATRIX_STRIDE: GLenum = 0x8A3D;
pub static UNIFORM_IS_ROW_MAJOR: GLenum = 0x8A3E;
pub static UNIFORM_BLOCK_BINDING: GLenum = 0x8A3F;
pub static UNIFORM_BLOCK_DATA_SIZE: GLenum = 0x8A40;
pub static UNIFORM_BLOCK_NAME_LENGTH: GLenum = 0x8A41;
pub static UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum = 0x8A42;
pub static UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum = 0x8A43;
pub static UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x8A44;
pub static UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x8A45;
pub static UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x8A46;
pub static TEXTURE_SRGB_DECODE_EXT: GLenum = 0x8A48;
pub static DECODE_EXT: GLenum = 0x8A49;
pub static SKIP_DECODE_EXT: GLenum = 0x8A4A;
pub static PROGRAM_PIPELINE_OBJECT_EXT: GLenum = 0x8A4F;
pub static FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: GLenum = 0x8A52;
pub static SYNC_OBJECT_APPLE: GLenum = 0x8A53;
pub static FRAGMENT_SHADER: GLenum = 0x8B30;
pub static FRAGMENT_SHADER_ARB: GLenum = 0x8B30;
pub static VERTEX_SHADER: GLenum = 0x8B31;
pub static VERTEX_SHADER_ARB: GLenum = 0x8B31;
pub static PROGRAM_OBJECT_ARB: GLenum = 0x8B40;
pub static PROGRAM_OBJECT_EXT: GLenum = 0x8B40;
pub static SHADER_OBJECT_ARB: GLenum = 0x8B48;
pub static SHADER_OBJECT_EXT: GLenum = 0x8B48;
pub static MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8B49;
pub static MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: GLenum = 0x8B49;
pub static MAX_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8B4A;
pub static MAX_VERTEX_UNIFORM_COMPONENTS_ARB: GLenum = 0x8B4A;
pub static MAX_VARYING_FLOATS: GLenum = 0x8B4B;
pub static MAX_VARYING_COMPONENTS: GLenum = 0x8B4B;
pub static MAX_VARYING_COMPONENTS_EXT: GLenum = 0x8B4B;
pub static MAX_VARYING_FLOATS_ARB: GLenum = 0x8B4B;
pub static MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4C;
pub static MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8B4C;
pub static MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4D;
pub static MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8B4D;
pub static OBJECT_TYPE_ARB: GLenum = 0x8B4E;
pub static SHADER_TYPE: GLenum = 0x8B4F;
pub static OBJECT_SUBTYPE_ARB: GLenum = 0x8B4F;
pub static FLOAT_VEC2: GLenum = 0x8B50;
pub static FLOAT_VEC2_ARB: GLenum = 0x8B50;
pub static FLOAT_VEC3: GLenum = 0x8B51;
pub static FLOAT_VEC3_ARB: GLenum = 0x8B51;
pub static FLOAT_VEC4: GLenum = 0x8B52;
pub static FLOAT_VEC4_ARB: GLenum = 0x8B52;
pub static INT_VEC2: GLenum = 0x8B53;
pub static INT_VEC2_ARB: GLenum = 0x8B53;
pub static INT_VEC3: GLenum = 0x8B54;
pub static INT_VEC3_ARB: GLenum = 0x8B54;
pub static INT_VEC4: GLenum = 0x8B55;
pub static INT_VEC4_ARB: GLenum = 0x8B55;
pub static BOOL: GLenum = 0x8B56;
pub static BOOL_ARB: GLenum = 0x8B56;
pub static BOOL_VEC2: GLenum = 0x8B57;
pub static BOOL_VEC2_ARB: GLenum = 0x8B57;
pub static BOOL_VEC3: GLenum = 0x8B58;
pub static BOOL_VEC3_ARB: GLenum = 0x8B58;
pub static BOOL_VEC4: GLenum = 0x8B59;
pub static BOOL_VEC4_ARB: GLenum = 0x8B59;
pub static FLOAT_MAT2: GLenum = 0x8B5A;
pub static FLOAT_MAT2_ARB: GLenum = 0x8B5A;
pub static FLOAT_MAT3: GLenum = 0x8B5B;
pub static FLOAT_MAT3_ARB: GLenum = 0x8B5B;
pub static FLOAT_MAT4: GLenum = 0x8B5C;
pub static FLOAT_MAT4_ARB: GLenum = 0x8B5C;
pub static SAMPLER_1D: GLenum = 0x8B5D;
pub static SAMPLER_1D_ARB: GLenum = 0x8B5D;
pub static SAMPLER_2D: GLenum = 0x8B5E;
pub static SAMPLER_2D_ARB: GLenum = 0x8B5E;
pub static SAMPLER_3D: GLenum = 0x8B5F;
pub static SAMPLER_3D_ARB: GLenum = 0x8B5F;
pub static SAMPLER_3D_OES: GLenum = 0x8B5F;
pub static SAMPLER_CUBE: GLenum = 0x8B60;
pub static SAMPLER_CUBE_ARB: GLenum = 0x8B60;
pub static SAMPLER_1D_SHADOW: GLenum = 0x8B61;
pub static SAMPLER_1D_SHADOW_ARB: GLenum = 0x8B61;
pub static SAMPLER_2D_SHADOW: GLenum = 0x8B62;
pub static SAMPLER_2D_SHADOW_ARB: GLenum = 0x8B62;
pub static SAMPLER_2D_SHADOW_EXT: GLenum = 0x8B62;
pub static SAMPLER_2D_RECT: GLenum = 0x8B63;
pub static SAMPLER_2D_RECT_ARB: GLenum = 0x8B63;
pub static SAMPLER_2D_RECT_SHADOW: GLenum = 0x8B64;
pub static SAMPLER_2D_RECT_SHADOW_ARB: GLenum = 0x8B64;
pub static FLOAT_MAT2x3: GLenum = 0x8B65;
pub static FLOAT_MAT2x4: GLenum = 0x8B66;
pub static FLOAT_MAT3x2: GLenum = 0x8B67;
pub static FLOAT_MAT3x4: GLenum = 0x8B68;
pub static FLOAT_MAT4x2: GLenum = 0x8B69;
pub static FLOAT_MAT4x3: GLenum = 0x8B6A;
pub static DELETE_STATUS: GLenum = 0x8B80;
pub static OBJECT_DELETE_STATUS_ARB: GLenum = 0x8B80;
pub static COMPILE_STATUS: GLenum = 0x8B81;
pub static OBJECT_COMPILE_STATUS_ARB: GLenum = 0x8B81;
pub static LINK_STATUS: GLenum = 0x8B82;
pub static OBJECT_LINK_STATUS_ARB: GLenum = 0x8B82;
pub static VALIDATE_STATUS: GLenum = 0x8B83;
pub static OBJECT_VALIDATE_STATUS_ARB: GLenum = 0x8B83;
pub static INFO_LOG_LENGTH: GLenum = 0x8B84;
pub static OBJECT_INFO_LOG_LENGTH_ARB: GLenum = 0x8B84;
pub static ATTACHED_SHADERS: GLenum = 0x8B85;
pub static OBJECT_ATTACHED_OBJECTS_ARB: GLenum = 0x8B85;
pub static ACTIVE_UNIFORMS: GLenum = 0x8B86;
pub static OBJECT_ACTIVE_UNIFORMS_ARB: GLenum = 0x8B86;
pub static ACTIVE_UNIFORM_MAX_LENGTH: GLenum = 0x8B87;
pub static OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: GLenum = 0x8B87;
pub static SHADER_SOURCE_LENGTH: GLenum = 0x8B88;
pub static OBJECT_SHADER_SOURCE_LENGTH_ARB: GLenum = 0x8B88;
pub static ACTIVE_ATTRIBUTES: GLenum = 0x8B89;
pub static OBJECT_ACTIVE_ATTRIBUTES_ARB: GLenum = 0x8B89;
pub static ACTIVE_ATTRIBUTE_MAX_LENGTH: GLenum = 0x8B8A;
pub static OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: GLenum = 0x8B8A;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum = 0x8B8B;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: GLenum = 0x8B8B;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GLenum = 0x8B8B;
pub static SHADING_LANGUAGE_VERSION: GLenum = 0x8B8C;
pub static SHADING_LANGUAGE_VERSION_ARB: GLenum = 0x8B8C;
pub static CURRENT_PROGRAM: GLenum = 0x8B8D;
pub static PALETTE4_RGB8_OES: GLenum = 0x8B90;
pub static PALETTE4_RGBA8_OES: GLenum = 0x8B91;
pub static PALETTE4_R5_G6_B5_OES: GLenum = 0x8B92;
pub static PALETTE4_RGBA4_OES: GLenum = 0x8B93;
pub static PALETTE4_RGB5_A1_OES: GLenum = 0x8B94;
pub static PALETTE8_RGB8_OES: GLenum = 0x8B95;
pub static PALETTE8_RGBA8_OES: GLenum = 0x8B96;
pub static PALETTE8_R5_G6_B5_OES: GLenum = 0x8B97;
pub static PALETTE8_RGBA4_OES: GLenum = 0x8B98;
pub static PALETTE8_RGB5_A1_OES: GLenum = 0x8B99;
pub static IMPLEMENTATION_COLOR_READ_TYPE: GLenum = 0x8B9A;
pub static IMPLEMENTATION_COLOR_READ_TYPE_OES: GLenum = 0x8B9A;
pub static IMPLEMENTATION_COLOR_READ_FORMAT: GLenum = 0x8B9B;
pub static IMPLEMENTATION_COLOR_READ_FORMAT_OES: GLenum = 0x8B9B;
pub static POINT_SIZE_ARRAY_OES: GLenum = 0x8B9C;
pub static TEXTURE_CROP_RECT_OES: GLenum = 0x8B9D;
pub static MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES: GLenum = 0x8B9E;
pub static POINT_SIZE_ARRAY_BUFFER_BINDING_OES: GLenum = 0x8B9F;
pub static FRAGMENT_PROGRAM_POSITION_MESA: GLenum = 0x8BB0;
pub static FRAGMENT_PROGRAM_CALLBACK_MESA: GLenum = 0x8BB1;
pub static FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA: GLenum = 0x8BB2;
pub static FRAGMENT_PROGRAM_CALLBACK_DATA_MESA: GLenum = 0x8BB3;
pub static VERTEX_PROGRAM_CALLBACK_MESA: GLenum = 0x8BB4;
pub static VERTEX_PROGRAM_POSITION_MESA: GLenum = 0x8BB4;
pub static VERTEX_PROGRAM_CALLBACK_FUNC_MESA: GLenum = 0x8BB6;
pub static VERTEX_PROGRAM_CALLBACK_DATA_MESA: GLenum = 0x8BB7;
pub static COUNTER_TYPE_AMD: GLenum = 0x8BC0;
pub static COUNTER_RANGE_AMD: GLenum = 0x8BC1;
pub static UNSIGNED_INT64_AMD: GLenum = 0x8BC2;
pub static PERCENTAGE_AMD: GLenum = 0x8BC3;
pub static PERFMON_RESULT_AVAILABLE_AMD: GLenum = 0x8BC4;
pub static PERFMON_RESULT_SIZE_AMD: GLenum = 0x8BC5;
pub static PERFMON_RESULT_AMD: GLenum = 0x8BC6;
pub static TEXTURE_WIDTH_QCOM: GLenum = 0x8BD2;
pub static TEXTURE_HEIGHT_QCOM: GLenum = 0x8BD3;
pub static TEXTURE_DEPTH_QCOM: GLenum = 0x8BD4;
pub static TEXTURE_INTERNAL_FORMAT_QCOM: GLenum = 0x8BD5;
pub static TEXTURE_FORMAT_QCOM: GLenum = 0x8BD6;
pub static TEXTURE_TYPE_QCOM: GLenum = 0x8BD7;
pub static TEXTURE_IMAGE_VALID_QCOM: GLenum = 0x8BD8;
pub static TEXTURE_NUM_LEVELS_QCOM: GLenum = 0x8BD9;
pub static TEXTURE_TARGET_QCOM: GLenum = 0x8BDA;
pub static TEXTURE_OBJECT_VALID_QCOM: GLenum = 0x8BDB;
pub static STATE_RESTORE: GLenum = 0x8BDC;
pub static COMPRESSED_RGB_PVRTC_4BPPV1_IMG: GLenum = 0x8C00;
pub static COMPRESSED_RGB_PVRTC_2BPPV1_IMG: GLenum = 0x8C01;
pub static COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: GLenum = 0x8C02;
pub static COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: GLenum = 0x8C03;
pub static MODULATE_COLOR_IMG: GLenum = 0x8C04;
pub static RECIP_ADD_SIGNED_ALPHA_IMG: GLenum = 0x8C05;
pub static TEXTURE_ALPHA_MODULATE_IMG: GLenum = 0x8C06;
pub static FACTOR_ALPHA_MODULATE_IMG: GLenum = 0x8C07;
pub static FRAGMENT_ALPHA_MODULATE_IMG: GLenum = 0x8C08;
pub static ADD_BLEND_IMG: GLenum = 0x8C09;
pub static SGX_BINARY_IMG: GLenum = 0x8C0A;
pub static TEXTURE_RED_TYPE: GLenum = 0x8C10;
pub static TEXTURE_RED_TYPE_ARB: GLenum = 0x8C10;
pub static TEXTURE_GREEN_TYPE: GLenum = 0x8C11;
pub static TEXTURE_GREEN_TYPE_ARB: GLenum = 0x8C11;
pub static TEXTURE_BLUE_TYPE: GLenum = 0x8C12;
pub static TEXTURE_BLUE_TYPE_ARB: GLenum = 0x8C12;
pub static TEXTURE_ALPHA_TYPE: GLenum = 0x8C13;
pub static TEXTURE_ALPHA_TYPE_ARB: GLenum = 0x8C13;
pub static TEXTURE_LUMINANCE_TYPE: GLenum = 0x8C14;
pub static TEXTURE_LUMINANCE_TYPE_ARB: GLenum = 0x8C14;
pub static TEXTURE_INTENSITY_TYPE: GLenum = 0x8C15;
pub static TEXTURE_INTENSITY_TYPE_ARB: GLenum = 0x8C15;
pub static TEXTURE_DEPTH_TYPE: GLenum = 0x8C16;
pub static TEXTURE_DEPTH_TYPE_ARB: GLenum = 0x8C16;
pub static UNSIGNED_NORMALIZED: GLenum = 0x8C17;
pub static UNSIGNED_NORMALIZED_ARB: GLenum = 0x8C17;
pub static UNSIGNED_NORMALIZED_EXT: GLenum = 0x8C17;
pub static TEXTURE_1D_ARRAY: GLenum = 0x8C18;
pub static TEXTURE_1D_ARRAY_EXT: GLenum = 0x8C18;
pub static PROXY_TEXTURE_1D_ARRAY: GLenum = 0x8C19;
pub static PROXY_TEXTURE_1D_ARRAY_EXT: GLenum = 0x8C19;
pub static TEXTURE_2D_ARRAY: GLenum = 0x8C1A;
pub static TEXTURE_2D_ARRAY_EXT: GLenum = 0x8C1A;
pub static PROXY_TEXTURE_2D_ARRAY: GLenum = 0x8C1B;
pub static PROXY_TEXTURE_2D_ARRAY_EXT: GLenum = 0x8C1B;
pub static TEXTURE_BINDING_1D_ARRAY: GLenum = 0x8C1C;
pub static TEXTURE_BINDING_1D_ARRAY_EXT: GLenum = 0x8C1C;
pub static TEXTURE_BINDING_2D_ARRAY: GLenum = 0x8C1D;
pub static TEXTURE_BINDING_2D_ARRAY_EXT: GLenum = 0x8C1D;
pub static GEOMETRY_PROGRAM_NV: GLenum = 0x8C26;
pub static MAX_PROGRAM_OUTPUT_VERTICES_NV: GLenum = 0x8C27;
pub static MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: GLenum = 0x8C28;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: GLenum = 0x8C29;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8C29;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: GLenum = 0x8C29;
pub static TEXTURE_BUFFER: GLenum = 0x8C2A;
pub static TEXTURE_BUFFER_ARB: GLenum = 0x8C2A;
pub static TEXTURE_BUFFER_EXT: GLenum = 0x8C2A;
pub static MAX_TEXTURE_BUFFER_SIZE: GLenum = 0x8C2B;
pub static MAX_TEXTURE_BUFFER_SIZE_ARB: GLenum = 0x8C2B;
pub static MAX_TEXTURE_BUFFER_SIZE_EXT: GLenum = 0x8C2B;
pub static TEXTURE_BINDING_BUFFER: GLenum = 0x8C2C;
pub static TEXTURE_BINDING_BUFFER_ARB: GLenum = 0x8C2C;
pub static TEXTURE_BINDING_BUFFER_EXT: GLenum = 0x8C2C;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_FORMAT_ARB: GLenum = 0x8C2E;
pub static TEXTURE_BUFFER_FORMAT_EXT: GLenum = 0x8C2E;
pub static ANY_SAMPLES_PASSED: GLenum = 0x8C2F;
pub static ANY_SAMPLES_PASSED_EXT: GLenum = 0x8C2F;
pub static SAMPLE_SHADING: GLenum = 0x8C36;
pub static SAMPLE_SHADING_ARB: GLenum = 0x8C36;
pub static MIN_SAMPLE_SHADING_VALUE: GLenum = 0x8C37;
pub static MIN_SAMPLE_SHADING_VALUE_ARB: GLenum = 0x8C37;
pub static R11F_G11F_B10F: GLenum = 0x8C3A;
pub static R11F_G11F_B10F_EXT: GLenum = 0x8C3A;
pub static UNSIGNED_INT_10F_11F_11F_REV: GLenum = 0x8C3B;
pub static UNSIGNED_INT_10F_11F_11F_REV_EXT: GLenum = 0x8C3B;
pub static RGBA_SIGNED_COMPONENTS_EXT: GLenum = 0x8C3C;
pub static RGB9_E5: GLenum = 0x8C3D;
pub static RGB9_E5_EXT: GLenum = 0x8C3D;
pub static UNSIGNED_INT_5_9_9_9_REV: GLenum = 0x8C3E;
pub static UNSIGNED_INT_5_9_9_9_REV_EXT: GLenum = 0x8C3E;
pub static TEXTURE_SHARED_SIZE: GLenum = 0x8C3F;
pub static TEXTURE_SHARED_SIZE_EXT: GLenum = 0x8C3F;
pub static SRGB: GLenum = 0x8C40;
pub static SRGB_EXT: GLenum = 0x8C40;
pub static SRGB8: GLenum = 0x8C41;
pub static SRGB8_EXT: GLenum = 0x8C41;
pub static SRGB8_NV: GLenum = 0x8C41;
pub static SRGB_ALPHA: GLenum = 0x8C42;
pub static SRGB_ALPHA_EXT: GLenum = 0x8C42;
pub static SRGB8_ALPHA8: GLenum = 0x8C43;
pub static SRGB8_ALPHA8_EXT: GLenum = 0x8C43;
pub static SLUMINANCE_ALPHA: GLenum = 0x8C44;
pub static SLUMINANCE_ALPHA_EXT: GLenum = 0x8C44;
pub static SLUMINANCE_ALPHA_NV: GLenum = 0x8C44;
pub static SLUMINANCE8_ALPHA8: GLenum = 0x8C45;
pub static SLUMINANCE8_ALPHA8_EXT: GLenum = 0x8C45;
pub static SLUMINANCE8_ALPHA8_NV: GLenum = 0x8C45;
pub static SLUMINANCE: GLenum = 0x8C46;
pub static SLUMINANCE_EXT: GLenum = 0x8C46;
pub static SLUMINANCE_NV: GLenum = 0x8C46;
pub static SLUMINANCE8: GLenum = 0x8C47;
pub static SLUMINANCE8_EXT: GLenum = 0x8C47;
pub static SLUMINANCE8_NV: GLenum = 0x8C47;
pub static COMPRESSED_SRGB: GLenum = 0x8C48;
pub static COMPRESSED_SRGB_EXT: GLenum = 0x8C48;
pub static COMPRESSED_SRGB_ALPHA: GLenum = 0x8C49;
pub static COMPRESSED_SRGB_ALPHA_EXT: GLenum = 0x8C49;
pub static COMPRESSED_SLUMINANCE: GLenum = 0x8C4A;
pub static COMPRESSED_SLUMINANCE_EXT: GLenum = 0x8C4A;
pub static COMPRESSED_SLUMINANCE_ALPHA: GLenum = 0x8C4B;
pub static COMPRESSED_SLUMINANCE_ALPHA_EXT: GLenum = 0x8C4B;
pub static COMPRESSED_SRGB_S3TC_DXT1_EXT: GLenum = 0x8C4C;
pub static COMPRESSED_SRGB_S3TC_DXT1_NV: GLenum = 0x8C4C;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GLenum = 0x8C4D;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV: GLenum = 0x8C4D;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GLenum = 0x8C4E;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV: GLenum = 0x8C4E;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GLenum = 0x8C4F;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV: GLenum = 0x8C4F;
pub static COMPRESSED_LUMINANCE_LATC1_EXT: GLenum = 0x8C70;
pub static COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT: GLenum = 0x8C71;
pub static COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT: GLenum = 0x8C72;
pub static COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT: GLenum = 0x8C73;
pub static TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8C74;
pub static TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8C75;
pub static TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: GLenum = 0x8C76;
pub static TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: GLenum = 0x8C76;
pub static BACK_PRIMARY_COLOR_NV: GLenum = 0x8C77;
pub static BACK_SECONDARY_COLOR_NV: GLenum = 0x8C78;
pub static TEXTURE_COORD_NV: GLenum = 0x8C79;
pub static CLIP_DISTANCE_NV: GLenum = 0x8C7A;
pub static VERTEX_ID_NV: GLenum = 0x8C7B;
pub static PRIMITIVE_ID_NV: GLenum = 0x8C7C;
pub static GENERIC_ATTRIB_NV: GLenum = 0x8C7D;
pub static TRANSFORM_FEEDBACK_ATTRIBS_NV: GLenum = 0x8C7E;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum = 0x8C7F;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: GLenum = 0x8C7F;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE_NV: GLenum = 0x8C7F;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum = 0x8C80;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: GLenum = 0x8C80;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: GLenum = 0x8C80;
pub static ACTIVE_VARYINGS_NV: GLenum = 0x8C81;
pub static ACTIVE_VARYING_MAX_LENGTH_NV: GLenum = 0x8C82;
pub static TRANSFORM_FEEDBACK_VARYINGS: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_VARYINGS_EXT: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_VARYINGS_NV: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_BUFFER_START: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_START_EXT: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_START_NV: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_RECORD_NV: GLenum = 0x8C86;
pub static PRIMITIVES_GENERATED: GLenum = 0x8C87;
pub static PRIMITIVES_GENERATED_EXT: GLenum = 0x8C87;
pub static PRIMITIVES_GENERATED_NV: GLenum = 0x8C87;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum = 0x8C88;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: GLenum = 0x8C88;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: GLenum = 0x8C88;
pub static RASTERIZER_DISCARD: GLenum = 0x8C89;
pub static RASTERIZER_DISCARD_EXT: GLenum = 0x8C89;
pub static RASTERIZER_DISCARD_NV: GLenum = 0x8C89;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum = 0x8C8B;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: GLenum = 0x8C8B;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: GLenum = 0x8C8B;
pub static INTERLEAVED_ATTRIBS: GLenum = 0x8C8C;
pub static INTERLEAVED_ATTRIBS_EXT: GLenum = 0x8C8C;
pub static INTERLEAVED_ATTRIBS_NV: GLenum = 0x8C8C;
pub static SEPARATE_ATTRIBS: GLenum = 0x8C8D;
pub static SEPARATE_ATTRIBS_EXT: GLenum = 0x8C8D;
pub static SEPARATE_ATTRIBS_NV: GLenum = 0x8C8D;
pub static TRANSFORM_FEEDBACK_BUFFER: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_EXT: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_NV: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum = 0x8C8F;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: GLenum = 0x8C8F;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: GLenum = 0x8C8F;
pub static ATC_RGB_AMD: GLenum = 0x8C92;
pub static ATC_RGBA_EXPLICIT_ALPHA_AMD: GLenum = 0x8C93;
pub static POINT_SPRITE_COORD_ORIGIN: GLenum = 0x8CA0;
pub static LOWER_LEFT: GLenum = 0x8CA1;
pub static UPPER_LEFT: GLenum = 0x8CA2;
pub static STENCIL_BACK_REF: GLenum = 0x8CA3;
pub static STENCIL_BACK_VALUE_MASK: GLenum = 0x8CA4;
pub static STENCIL_BACK_WRITEMASK: GLenum = 0x8CA5;
pub static DRAW_FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_NV: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_OES: GLenum = 0x8CA6;
pub static RENDERBUFFER_BINDING: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_ANGLE: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_EXT: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_OES: GLenum = 0x8CA7;
pub static READ_FRAMEBUFFER: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_ANGLE: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_EXT: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_NV: GLenum = 0x8CA8;
pub static DRAW_FRAMEBUFFER: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_ANGLE: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_EXT: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_NV: GLenum = 0x8CA9;
pub static READ_FRAMEBUFFER_BINDING: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_NV: GLenum = 0x8CAA;
pub static RENDERBUFFER_COVERAGE_SAMPLES_NV: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_ANGLE: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_EXT: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_NV: GLenum = 0x8CAB;
pub static DEPTH_COMPONENT32F: GLenum = 0x8CAC;
pub static DEPTH32F_STENCIL8: GLenum = 0x8CAD;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: GLenum = 0x8CD4;
pub static FRAMEBUFFER_COMPLETE: GLenum = 0x8CD5;
pub static FRAMEBUFFER_COMPLETE_EXT: GLenum = 0x8CD5;
pub static FRAMEBUFFER_COMPLETE_OES: GLenum = 0x8CD5;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: GLenum = 0x8CDA;
pub static FRAMEBUFFER_INCOMPLETE_FORMATS_OES: GLenum = 0x8CDA;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER: GLenum = 0x8CDC;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: GLenum = 0x8CDC;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES: GLenum = 0x8CDC;
pub static FRAMEBUFFER_UNSUPPORTED: GLenum = 0x8CDD;
pub static FRAMEBUFFER_UNSUPPORTED_EXT: GLenum = 0x8CDD;
pub static FRAMEBUFFER_UNSUPPORTED_OES: GLenum = 0x8CDD;
pub static MAX_COLOR_ATTACHMENTS: GLenum = 0x8CDF;
pub static MAX_COLOR_ATTACHMENTS_EXT: GLenum = 0x8CDF;
pub static MAX_COLOR_ATTACHMENTS_NV: GLenum = 0x8CDF;
pub static COLOR_ATTACHMENT0: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_EXT: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_NV: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_OES: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT1: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT1_EXT: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT1_NV: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT2: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT2_EXT: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT2_NV: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT3: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT3_EXT: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT3_NV: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT4: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT4_EXT: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT4_NV: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT5: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT5_EXT: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT5_NV: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT6: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT6_EXT: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT6_NV: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT7: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT7_EXT: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT7_NV: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT8: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT8_EXT: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT8_NV: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT9: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT9_EXT: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT9_NV: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT10: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT10_EXT: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT10_NV: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT11: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT11_EXT: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT11_NV: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT12: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT12_EXT: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT12_NV: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT13: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT13_EXT: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT13_NV: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT14: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT14_EXT: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT14_NV: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT15: GLenum = 0x8CEF;
pub static COLOR_ATTACHMENT15_EXT: GLenum = 0x8CEF;
pub static COLOR_ATTACHMENT15_NV: GLenum = 0x8CEF;
pub static DEPTH_ATTACHMENT: GLenum = 0x8D00;
pub static DEPTH_ATTACHMENT_EXT: GLenum = 0x8D00;
pub static DEPTH_ATTACHMENT_OES: GLenum = 0x8D00;
pub static STENCIL_ATTACHMENT: GLenum = 0x8D20;
pub static STENCIL_ATTACHMENT_EXT: GLenum = 0x8D20;
pub static STENCIL_ATTACHMENT_OES: GLenum = 0x8D20;
pub static FRAMEBUFFER: GLenum = 0x8D40;
pub static FRAMEBUFFER_EXT: GLenum = 0x8D40;
pub static FRAMEBUFFER_OES: GLenum = 0x8D40;
pub static RENDERBUFFER: GLenum = 0x8D41;
pub static RENDERBUFFER_EXT: GLenum = 0x8D41;
pub static RENDERBUFFER_OES: GLenum = 0x8D41;
pub static RENDERBUFFER_WIDTH: GLenum = 0x8D42;
pub static RENDERBUFFER_WIDTH_EXT: GLenum = 0x8D42;
pub static RENDERBUFFER_WIDTH_OES: GLenum = 0x8D42;
pub static RENDERBUFFER_HEIGHT: GLenum = 0x8D43;
pub static RENDERBUFFER_HEIGHT_EXT: GLenum = 0x8D43;
pub static RENDERBUFFER_HEIGHT_OES: GLenum = 0x8D43;
pub static RENDERBUFFER_INTERNAL_FORMAT: GLenum = 0x8D44;
pub static RENDERBUFFER_INTERNAL_FORMAT_EXT: GLenum = 0x8D44;
pub static RENDERBUFFER_INTERNAL_FORMAT_OES: GLenum = 0x8D44;
pub static STENCIL_INDEX1: GLenum = 0x8D46;
pub static STENCIL_INDEX1_EXT: GLenum = 0x8D46;
pub static STENCIL_INDEX1_OES: GLenum = 0x8D46;
pub static STENCIL_INDEX4: GLenum = 0x8D47;
pub static STENCIL_INDEX4_EXT: GLenum = 0x8D47;
pub static STENCIL_INDEX4_OES: GLenum = 0x8D47;
pub static STENCIL_INDEX8: GLenum = 0x8D48;
pub static STENCIL_INDEX8_EXT: GLenum = 0x8D48;
pub static STENCIL_INDEX8_OES: GLenum = 0x8D48;
pub static STENCIL_INDEX16: GLenum = 0x8D49;
pub static STENCIL_INDEX16_EXT: GLenum = 0x8D49;
pub static RENDERBUFFER_RED_SIZE: GLenum = 0x8D50;
pub static RENDERBUFFER_RED_SIZE_EXT: GLenum = 0x8D50;
pub static RENDERBUFFER_RED_SIZE_OES: GLenum = 0x8D50;
pub static RENDERBUFFER_GREEN_SIZE: GLenum = 0x8D51;
pub static RENDERBUFFER_GREEN_SIZE_EXT: GLenum = 0x8D51;
pub static RENDERBUFFER_GREEN_SIZE_OES: GLenum = 0x8D51;
pub static RENDERBUFFER_BLUE_SIZE: GLenum = 0x8D52;
pub static RENDERBUFFER_BLUE_SIZE_EXT: GLenum = 0x8D52;
pub static RENDERBUFFER_BLUE_SIZE_OES: GLenum = 0x8D52;
pub static RENDERBUFFER_ALPHA_SIZE: GLenum = 0x8D53;
pub static RENDERBUFFER_ALPHA_SIZE_EXT: GLenum = 0x8D53;
pub static RENDERBUFFER_ALPHA_SIZE_OES: GLenum = 0x8D53;
pub static RENDERBUFFER_DEPTH_SIZE: GLenum = 0x8D54;
pub static RENDERBUFFER_DEPTH_SIZE_EXT: GLenum = 0x8D54;
pub static RENDERBUFFER_DEPTH_SIZE_OES: GLenum = 0x8D54;
pub static RENDERBUFFER_STENCIL_SIZE: GLenum = 0x8D55;
pub static RENDERBUFFER_STENCIL_SIZE_EXT: GLenum = 0x8D55;
pub static RENDERBUFFER_STENCIL_SIZE_OES: GLenum = 0x8D55;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV: GLenum = 0x8D56;
pub static MAX_SAMPLES: GLenum = 0x8D57;
pub static MAX_SAMPLES_ANGLE: GLenum = 0x8D57;
pub static MAX_SAMPLES_EXT: GLenum = 0x8D57;
pub static MAX_SAMPLES_NV: GLenum = 0x8D57;
pub static TEXTURE_GEN_STR_OES: GLenum = 0x8D60;
pub static HALF_FLOAT_OES: GLenum = 0x8D61;
pub static RGB565_OES: GLenum = 0x8D62;
pub static RGB565: GLenum = 0x8D62;
pub static ETC1_RGB8_OES: GLenum = 0x8D64;
pub static TEXTURE_EXTERNAL_OES: GLenum = 0x8D65;
pub static SAMPLER_EXTERNAL_OES: GLenum = 0x8D66;
pub static TEXTURE_BINDING_EXTERNAL_OES: GLenum = 0x8D67;
pub static REQUIRED_TEXTURE_IMAGE_UNITS_OES: GLenum = 0x8D68;
pub static PRIMITIVE_RESTART_FIXED_INDEX: GLenum = 0x8D69;
pub static ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum = 0x8D6A;
pub static ANY_SAMPLES_PASSED_CONSERVATIVE_EXT: GLenum = 0x8D6A;
pub static MAX_ELEMENT_INDEX: GLenum = 0x8D6B;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT: GLenum = 0x8D6C;
pub static RGBA32UI: GLenum = 0x8D70;
pub static RGBA32UI_EXT: GLenum = 0x8D70;
pub static RGB32UI: GLenum = 0x8D71;
pub static RGB32UI_EXT: GLenum = 0x8D71;
pub static ALPHA32UI_EXT: GLenum = 0x8D72;
pub static INTENSITY32UI_EXT: GLenum = 0x8D73;
pub static LUMINANCE32UI_EXT: GLenum = 0x8D74;
pub static LUMINANCE_ALPHA32UI_EXT: GLenum = 0x8D75;
pub static RGBA16UI: GLenum = 0x8D76;
pub static RGBA16UI_EXT: GLenum = 0x8D76;
pub static RGB16UI: GLenum = 0x8D77;
pub static RGB16UI_EXT: GLenum = 0x8D77;
pub static ALPHA16UI_EXT: GLenum = 0x8D78;
pub static INTENSITY16UI_EXT: GLenum = 0x8D79;
pub static LUMINANCE16UI_EXT: GLenum = 0x8D7A;
pub static LUMINANCE_ALPHA16UI_EXT: GLenum = 0x8D7B;
pub static RGBA8UI: GLenum = 0x8D7C;
pub static RGBA8UI_EXT: GLenum = 0x8D7C;
pub static RGB8UI: GLenum = 0x8D7D;
pub static RGB8UI_EXT: GLenum = 0x8D7D;
pub static ALPHA8UI_EXT: GLenum = 0x8D7E;
pub static INTENSITY8UI_EXT: GLenum = 0x8D7F;
pub static LUMINANCE8UI_EXT: GLenum = 0x8D80;
pub static LUMINANCE_ALPHA8UI_EXT: GLenum = 0x8D81;
pub static RGBA32I: GLenum = 0x8D82;
pub static RGBA32I_EXT: GLenum = 0x8D82;
pub static RGB32I: GLenum = 0x8D83;
pub static RGB32I_EXT: GLenum = 0x8D83;
pub static ALPHA32I_EXT: GLenum = 0x8D84;
pub static INTENSITY32I_EXT: GLenum = 0x8D85;
pub static LUMINANCE32I_EXT: GLenum = 0x8D86;
pub static LUMINANCE_ALPHA32I_EXT: GLenum = 0x8D87;
pub static RGBA16I: GLenum = 0x8D88;
pub static RGBA16I_EXT: GLenum = 0x8D88;
pub static RGB16I: GLenum = 0x8D89;
pub static RGB16I_EXT: GLenum = 0x8D89;
pub static ALPHA16I_EXT: GLenum = 0x8D8A;
pub static INTENSITY16I_EXT: GLenum = 0x8D8B;
pub static LUMINANCE16I_EXT: GLenum = 0x8D8C;
pub static LUMINANCE_ALPHA16I_EXT: GLenum = 0x8D8D;
pub static RGBA8I: GLenum = 0x8D8E;
pub static RGBA8I_EXT: GLenum = 0x8D8E;
pub static RGB8I: GLenum = 0x8D8F;
pub static RGB8I_EXT: GLenum = 0x8D8F;
pub static ALPHA8I_EXT: GLenum = 0x8D90;
pub static INTENSITY8I_EXT: GLenum = 0x8D91;
pub static LUMINANCE8I_EXT: GLenum = 0x8D92;
pub static LUMINANCE_ALPHA8I_EXT: GLenum = 0x8D93;
pub static RED_INTEGER: GLenum = 0x8D94;
pub static RED_INTEGER_EXT: GLenum = 0x8D94;
pub static GREEN_INTEGER: GLenum = 0x8D95;
pub static GREEN_INTEGER_EXT: GLenum = 0x8D95;
pub static BLUE_INTEGER: GLenum = 0x8D96;
pub static BLUE_INTEGER_EXT: GLenum = 0x8D96;
pub static ALPHA_INTEGER: GLenum = 0x8D97;
pub static ALPHA_INTEGER_EXT: GLenum = 0x8D97;
pub static RGB_INTEGER: GLenum = 0x8D98;
pub static RGB_INTEGER_EXT: GLenum = 0x8D98;
pub static RGBA_INTEGER: GLenum = 0x8D99;
pub static RGBA_INTEGER_EXT: GLenum = 0x8D99;
pub static BGR_INTEGER: GLenum = 0x8D9A;
pub static BGR_INTEGER_EXT: GLenum = 0x8D9A;
pub static BGRA_INTEGER: GLenum = 0x8D9B;
pub static BGRA_INTEGER_EXT: GLenum = 0x8D9B;
pub static LUMINANCE_INTEGER_EXT: GLenum = 0x8D9C;
pub static LUMINANCE_ALPHA_INTEGER_EXT: GLenum = 0x8D9D;
pub static RGBA_INTEGER_MODE_EXT: GLenum = 0x8D9E;
pub static INT_2_10_10_10_REV: GLenum = 0x8D9F;
pub static MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV: GLenum = 0x8DA0;
pub static MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV: GLenum = 0x8DA1;
pub static VERTEX_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA2;
pub static GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA3;
pub static FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA4;
pub static MAX_PROGRAM_GENERIC_ATTRIBS_NV: GLenum = 0x8DA5;
pub static MAX_PROGRAM_GENERIC_RESULTS_NV: GLenum = 0x8DA6;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED: GLenum = 0x8DA7;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: GLenum = 0x8DA7;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: GLenum = 0x8DA7;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: GLenum = 0x8DA9;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: GLenum = 0x8DA9;
pub static LAYER_NV: GLenum = 0x8DAA;
pub static DEPTH_COMPONENT32F_NV: GLenum = 0x8DAB;
pub static DEPTH32F_STENCIL8_NV: GLenum = 0x8DAC;
pub static FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum = 0x8DAD;
pub static FLOAT_32_UNSIGNED_INT_24_8_REV_NV: GLenum = 0x8DAD;
pub static SHADER_INCLUDE_ARB: GLenum = 0x8DAE;
pub static DEPTH_BUFFER_FLOAT_MODE_NV: GLenum = 0x8DAF;
pub static FRAMEBUFFER_SRGB: GLenum = 0x8DB9;
pub static FRAMEBUFFER_SRGB_EXT: GLenum = 0x8DB9;
pub static FRAMEBUFFER_SRGB_CAPABLE_EXT: GLenum = 0x8DBA;
pub static COMPRESSED_RED_RGTC1: GLenum = 0x8DBB;
pub static COMPRESSED_RED_RGTC1_EXT: GLenum = 0x8DBB;
pub static COMPRESSED_SIGNED_RED_RGTC1: GLenum = 0x8DBC;
pub static COMPRESSED_SIGNED_RED_RGTC1_EXT: GLenum = 0x8DBC;
pub static COMPRESSED_RED_GREEN_RGTC2_EXT: GLenum = 0x8DBD;
pub static COMPRESSED_RG_RGTC2: GLenum = 0x8DBD;
pub static COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: GLenum = 0x8DBE;
pub static COMPRESSED_SIGNED_RG_RGTC2: GLenum = 0x8DBE;
pub static SAMPLER_1D_ARRAY: GLenum = 0x8DC0;
pub static SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DC0;
pub static SAMPLER_2D_ARRAY: GLenum = 0x8DC1;
pub static SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DC1;
pub static SAMPLER_BUFFER: GLenum = 0x8DC2;
pub static SAMPLER_BUFFER_EXT: GLenum = 0x8DC2;
pub static SAMPLER_1D_ARRAY_SHADOW: GLenum = 0x8DC3;
pub static SAMPLER_1D_ARRAY_SHADOW_EXT: GLenum = 0x8DC3;
pub static SAMPLER_2D_ARRAY_SHADOW: GLenum = 0x8DC4;
pub static SAMPLER_2D_ARRAY_SHADOW_EXT: GLenum = 0x8DC4;
pub static SAMPLER_2D_ARRAY_SHADOW_NV: GLenum = 0x8DC4;
pub static SAMPLER_CUBE_SHADOW: GLenum = 0x8DC5;
pub static SAMPLER_CUBE_SHADOW_EXT: GLenum = 0x8DC5;
pub static SAMPLER_CUBE_SHADOW_NV: GLenum = 0x8DC5;
pub static UNSIGNED_INT_VEC2: GLenum = 0x8DC6;
pub static UNSIGNED_INT_VEC2_EXT: GLenum = 0x8DC6;
pub static UNSIGNED_INT_VEC3: GLenum = 0x8DC7;
pub static UNSIGNED_INT_VEC3_EXT: GLenum = 0x8DC7;
pub static UNSIGNED_INT_VEC4: GLenum = 0x8DC8;
pub static UNSIGNED_INT_VEC4_EXT: GLenum = 0x8DC8;
pub static INT_SAMPLER_1D: GLenum = 0x8DC9;
pub static INT_SAMPLER_1D_EXT: GLenum = 0x8DC9;
pub static INT_SAMPLER_2D: GLenum = 0x8DCA;
pub static INT_SAMPLER_2D_EXT: GLenum = 0x8DCA;
pub static INT_SAMPLER_3D: GLenum = 0x8DCB;
pub static INT_SAMPLER_3D_EXT: GLenum = 0x8DCB;
pub static INT_SAMPLER_CUBE: GLenum = 0x8DCC;
pub static INT_SAMPLER_CUBE_EXT: GLenum = 0x8DCC;
pub static INT_SAMPLER_2D_RECT: GLenum = 0x8DCD;
pub static INT_SAMPLER_2D_RECT_EXT: GLenum = 0x8DCD;
pub static INT_SAMPLER_1D_ARRAY: GLenum = 0x8DCE;
pub static INT_SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DCE;
pub static INT_SAMPLER_2D_ARRAY: GLenum = 0x8DCF;
pub static INT_SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DCF;
pub static INT_SAMPLER_BUFFER: GLenum = 0x8DD0;
pub static INT_SAMPLER_BUFFER_EXT: GLenum = 0x8DD0;
pub static UNSIGNED_INT_SAMPLER_1D: GLenum = 0x8DD1;
pub static UNSIGNED_INT_SAMPLER_1D_EXT: GLenum = 0x8DD1;
pub static UNSIGNED_INT_SAMPLER_2D: GLenum = 0x8DD2;
pub static UNSIGNED_INT_SAMPLER_2D_EXT: GLenum = 0x8DD2;
pub static UNSIGNED_INT_SAMPLER_3D: GLenum = 0x8DD3;
pub static UNSIGNED_INT_SAMPLER_3D_EXT: GLenum = 0x8DD3;
pub static UNSIGNED_INT_SAMPLER_CUBE: GLenum = 0x8DD4;
pub static UNSIGNED_INT_SAMPLER_CUBE_EXT: GLenum = 0x8DD4;
pub static UNSIGNED_INT_SAMPLER_2D_RECT: GLenum = 0x8DD5;
pub static UNSIGNED_INT_SAMPLER_2D_RECT_EXT: GLenum = 0x8DD5;
pub static UNSIGNED_INT_SAMPLER_1D_ARRAY: GLenum = 0x8DD6;
pub static UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DD6;
pub static UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum = 0x8DD7;
pub static UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DD7;
pub static UNSIGNED_INT_SAMPLER_BUFFER: GLenum = 0x8DD8;
pub static UNSIGNED_INT_SAMPLER_BUFFER_EXT: GLenum = 0x8DD8;
pub static GEOMETRY_SHADER: GLenum = 0x8DD9;
pub static GEOMETRY_SHADER_ARB: GLenum = 0x8DD9;
pub static GEOMETRY_SHADER_EXT: GLenum = 0x8DD9;
pub static GEOMETRY_VERTICES_OUT_ARB: GLenum = 0x8DDA;
pub static GEOMETRY_VERTICES_OUT_EXT: GLenum = 0x8DDA;
pub static GEOMETRY_INPUT_TYPE_ARB: GLenum = 0x8DDB;
pub static GEOMETRY_INPUT_TYPE_EXT: GLenum = 0x8DDB;
pub static GEOMETRY_OUTPUT_TYPE_ARB: GLenum = 0x8DDC;
pub static GEOMETRY_OUTPUT_TYPE_EXT: GLenum = 0x8DDC;
pub static MAX_GEOMETRY_VARYING_COMPONENTS_ARB: GLenum = 0x8DDD;
pub static MAX_GEOMETRY_VARYING_COMPONENTS_EXT: GLenum = 0x8DDD;
pub static MAX_VERTEX_VARYING_COMPONENTS_ARB: GLenum = 0x8DDE;
pub static MAX_VERTEX_VARYING_COMPONENTS_EXT: GLenum = 0x8DDE;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_OUTPUT_VERTICES: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_OUTPUT_VERTICES_ARB: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_OUTPUT_VERTICES_EXT: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: GLenum = 0x8DE1;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: GLenum = 0x8DE1;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: GLenum = 0x8DE1;
pub static MAX_VERTEX_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE2;
pub static MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE3;
pub static MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE4;
pub static ACTIVE_SUBROUTINES: GLenum = 0x8DE5;
pub static ACTIVE_SUBROUTINE_UNIFORMS: GLenum = 0x8DE6;
pub static MAX_SUBROUTINES: GLenum = 0x8DE7;
pub static MAX_SUBROUTINE_UNIFORM_LOCATIONS: GLenum = 0x8DE8;
pub static NAMED_STRING_LENGTH_ARB: GLenum = 0x8DE9;
pub static NAMED_STRING_TYPE_ARB: GLenum = 0x8DEA;
pub static MAX_BINDABLE_UNIFORM_SIZE_EXT: GLenum = 0x8DED;
pub static UNIFORM_BUFFER_EXT: GLenum = 0x8DEE;
pub static UNIFORM_BUFFER_BINDING_EXT: GLenum = 0x8DEF;
pub static LOW_FLOAT: GLenum = 0x8DF0;
pub static MEDIUM_FLOAT: GLenum = 0x8DF1;
pub static HIGH_FLOAT: GLenum = 0x8DF2;
pub static LOW_INT: GLenum = 0x8DF3;
pub static MEDIUM_INT: GLenum = 0x8DF4;
pub static HIGH_INT: GLenum = 0x8DF5;
pub static UNSIGNED_INT_10_10_10_2_OES: GLenum = 0x8DF6;
pub static INT_10_10_10_2_OES: GLenum = 0x8DF7;
pub static SHADER_BINARY_FORMATS: GLenum = 0x8DF8;
pub static NUM_SHADER_BINARY_FORMATS: GLenum = 0x8DF9;
pub static SHADER_COMPILER: GLenum = 0x8DFA;
pub static MAX_VERTEX_UNIFORM_VECTORS: GLenum = 0x8DFB;
pub static MAX_VARYING_VECTORS: GLenum = 0x8DFC;
pub static MAX_FRAGMENT_UNIFORM_VECTORS: GLenum = 0x8DFD;
pub static RENDERBUFFER_COLOR_SAMPLES_NV: GLenum = 0x8E10;
pub static MAX_MULTISAMPLE_COVERAGE_MODES_NV: GLenum = 0x8E11;
pub static MULTISAMPLE_COVERAGE_MODES_NV: GLenum = 0x8E12;
pub static QUERY_WAIT: GLenum = 0x8E13;
pub static QUERY_WAIT_NV: GLenum = 0x8E13;
pub static QUERY_NO_WAIT: GLenum = 0x8E14;
pub static QUERY_NO_WAIT_NV: GLenum = 0x8E14;
pub static QUERY_BY_REGION_WAIT: GLenum = 0x8E15;
pub static QUERY_BY_REGION_WAIT_NV: GLenum = 0x8E15;
pub static QUERY_BY_REGION_NO_WAIT: GLenum = 0x8E16;
pub static QUERY_BY_REGION_NO_WAIT_NV: GLenum = 0x8E16;
pub static MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: GLenum = 0x8E1E;
pub static MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: GLenum = 0x8E1F;
pub static COLOR_SAMPLES_NV: GLenum = 0x8E20;
pub static TRANSFORM_FEEDBACK: GLenum = 0x8E22;
pub static TRANSFORM_FEEDBACK_NV: GLenum = 0x8E22;
pub static TRANSFORM_FEEDBACK_BUFFER_PAUSED: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_PAUSED: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_BUFFER_ACTIVE: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_ACTIVE: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_BINDING: GLenum = 0x8E25;
pub static TRANSFORM_FEEDBACK_BINDING_NV: GLenum = 0x8E25;
pub static FRAME_NV: GLenum = 0x8E26;
pub static FIELDS_NV: GLenum = 0x8E27;
pub static CURRENT_TIME_NV: GLenum = 0x8E28;
pub static TIMESTAMP: GLenum = 0x8E28;
pub static TIMESTAMP_EXT: GLenum = 0x8E28;
pub static NUM_FILL_STREAMS_NV: GLenum = 0x8E29;
pub static PRESENT_TIME_NV: GLenum = 0x8E2A;
pub static PRESENT_DURATION_NV: GLenum = 0x8E2B;
pub static DEPTH_COMPONENT16_NONLINEAR_NV: GLenum = 0x8E2C;
pub static PROGRAM_MATRIX_EXT: GLenum = 0x8E2D;
pub static TRANSPOSE_PROGRAM_MATRIX_EXT: GLenum = 0x8E2E;
pub static PROGRAM_MATRIX_STACK_DEPTH_EXT: GLenum = 0x8E2F;
pub static TEXTURE_SWIZZLE_R: GLenum = 0x8E42;
pub static TEXTURE_SWIZZLE_R_EXT: GLenum = 0x8E42;
pub static TEXTURE_SWIZZLE_G: GLenum = 0x8E43;
pub static TEXTURE_SWIZZLE_G_EXT: GLenum = 0x8E43;
pub static TEXTURE_SWIZZLE_B: GLenum = 0x8E44;
pub static TEXTURE_SWIZZLE_B_EXT: GLenum = 0x8E44;
pub static TEXTURE_SWIZZLE_A: GLenum = 0x8E45;
pub static TEXTURE_SWIZZLE_A_EXT: GLenum = 0x8E45;
pub static TEXTURE_SWIZZLE_RGBA: GLenum = 0x8E46;
pub static TEXTURE_SWIZZLE_RGBA_EXT: GLenum = 0x8E46;
pub static ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: GLenum = 0x8E47;
pub static ACTIVE_SUBROUTINE_MAX_LENGTH: GLenum = 0x8E48;
pub static ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: GLenum = 0x8E49;
pub static NUM_COMPATIBLE_SUBROUTINES: GLenum = 0x8E4A;
pub static COMPATIBLE_SUBROUTINES: GLenum = 0x8E4B;
pub static QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: GLenum = 0x8E4C;
pub static QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: GLenum = 0x8E4C;
pub static FIRST_VERTEX_CONVENTION: GLenum = 0x8E4D;
pub static FIRST_VERTEX_CONVENTION_EXT: GLenum = 0x8E4D;
pub static LAST_VERTEX_CONVENTION: GLenum = 0x8E4E;
pub static LAST_VERTEX_CONVENTION_EXT: GLenum = 0x8E4E;
pub static PROVOKING_VERTEX: GLenum = 0x8E4F;
pub static PROVOKING_VERTEX_EXT: GLenum = 0x8E4F;
pub static SAMPLE_POSITION: GLenum = 0x8E50;
pub static SAMPLE_POSITION_NV: GLenum = 0x8E50;
pub static SAMPLE_MASK: GLenum = 0x8E51;
pub static SAMPLE_MASK_NV: GLenum = 0x8E51;
pub static SAMPLE_MASK_VALUE: GLenum = 0x8E52;
pub static SAMPLE_MASK_VALUE_NV: GLenum = 0x8E52;
pub static TEXTURE_BINDING_RENDERBUFFER_NV: GLenum = 0x8E53;
pub static TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: GLenum = 0x8E54;
pub static TEXTURE_RENDERBUFFER_NV: GLenum = 0x8E55;
pub static SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E56;
pub static INT_SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E57;
pub static UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E58;
pub static MAX_SAMPLE_MASK_WORDS: GLenum = 0x8E59;
pub static MAX_SAMPLE_MASK_WORDS_NV: GLenum = 0x8E59;
pub static MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV: GLenum = 0x8E5A;
pub static MAX_GEOMETRY_SHADER_INVOCATIONS: GLenum = 0x8E5A;
pub static MIN_FRAGMENT_INTERPOLATION_OFFSET: GLenum = 0x8E5B;
pub static MIN_FRAGMENT_INTERPOLATION_OFFSET_NV: GLenum = 0x8E5B;
pub static MAX_FRAGMENT_INTERPOLATION_OFFSET: GLenum = 0x8E5C;
pub static MAX_FRAGMENT_INTERPOLATION_OFFSET_NV: GLenum = 0x8E5C;
pub static FRAGMENT_INTERPOLATION_OFFSET_BITS: GLenum = 0x8E5D;
pub static FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV: GLenum = 0x8E5D;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET: GLenum = 0x8E5E;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: GLenum = 0x8E5E;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV: GLenum = 0x8E5E;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET: GLenum = 0x8E5F;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: GLenum = 0x8E5F;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV: GLenum = 0x8E5F;
pub static MAX_TRANSFORM_FEEDBACK_BUFFERS: GLenum = 0x8E70;
pub static MAX_VERTEX_STREAMS: GLenum = 0x8E71;
pub static PATCH_VERTICES: GLenum = 0x8E72;
pub static PATCH_DEFAULT_INNER_LEVEL: GLenum = 0x8E73;
pub static PATCH_DEFAULT_OUTER_LEVEL: GLenum = 0x8E74;
pub static TESS_CONTROL_OUTPUT_VERTICES: GLenum = 0x8E75;
pub static TESS_GEN_MODE: GLenum = 0x8E76;
pub static TESS_GEN_SPACING: GLenum = 0x8E77;
pub static TESS_GEN_VERTEX_ORDER: GLenum = 0x8E78;
pub static TESS_GEN_POINT_MODE: GLenum = 0x8E79;
pub static ISOLINES: GLenum = 0x8E7A;
pub static FRACTIONAL_ODD: GLenum = 0x8E7B;
pub static FRACTIONAL_EVEN: GLenum = 0x8E7C;
pub static MAX_PATCH_VERTICES: GLenum = 0x8E7D;
pub static MAX_TESS_GEN_LEVEL: GLenum = 0x8E7E;
pub static MAX_TESS_CONTROL_UNIFORM_COMPONENTS: GLenum = 0x8E7F;
pub static MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: GLenum = 0x8E80;
pub static MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: GLenum = 0x8E81;
pub static MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: GLenum = 0x8E82;
pub static MAX_TESS_CONTROL_OUTPUT_COMPONENTS: GLenum = 0x8E83;
pub static MAX_TESS_PATCH_COMPONENTS: GLenum = 0x8E84;
pub static MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: GLenum = 0x8E85;
pub static MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: GLenum = 0x8E86;
pub static TESS_EVALUATION_SHADER: GLenum = 0x8E87;
pub static TESS_CONTROL_SHADER: GLenum = 0x8E88;
pub static MAX_TESS_CONTROL_UNIFORM_BLOCKS: GLenum = 0x8E89;
pub static MAX_TESS_EVALUATION_UNIFORM_BLOCKS: GLenum = 0x8E8A;
pub static COMPRESSED_RGBA_BPTC_UNORM_ARB: GLenum = 0x8E8C;
pub static COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: GLenum = 0x8E8D;
pub static COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: GLenum = 0x8E8E;
pub static COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: GLenum = 0x8E8F;
pub static COVERAGE_COMPONENT_NV: GLenum = 0x8ED0;
pub static COVERAGE_COMPONENT4_NV: GLenum = 0x8ED1;
pub static COVERAGE_ATTACHMENT_NV: GLenum = 0x8ED2;
pub static COVERAGE_BUFFERS_NV: GLenum = 0x8ED3;
pub static COVERAGE_SAMPLES_NV: GLenum = 0x8ED4;
pub static COVERAGE_ALL_FRAGMENTS_NV: GLenum = 0x8ED5;
pub static COVERAGE_EDGE_FRAGMENTS_NV: GLenum = 0x8ED6;
pub static COVERAGE_AUTOMATIC_NV: GLenum = 0x8ED7;
pub static BUFFER_GPU_ADDRESS_NV: GLenum = 0x8F1D;
pub static VERTEX_ATTRIB_ARRAY_UNIFIED_NV: GLenum = 0x8F1E;
pub static ELEMENT_ARRAY_UNIFIED_NV: GLenum = 0x8F1F;
pub static VERTEX_ATTRIB_ARRAY_ADDRESS_NV: GLenum = 0x8F20;
pub static VERTEX_ARRAY_ADDRESS_NV: GLenum = 0x8F21;
pub static NORMAL_ARRAY_ADDRESS_NV: GLenum = 0x8F22;
pub static COLOR_ARRAY_ADDRESS_NV: GLenum = 0x8F23;
pub static INDEX_ARRAY_ADDRESS_NV: GLenum = 0x8F24;
pub static TEXTURE_COORD_ARRAY_ADDRESS_NV: GLenum = 0x8F25;
pub static EDGE_FLAG_ARRAY_ADDRESS_NV: GLenum = 0x8F26;
pub static SECONDARY_COLOR_ARRAY_ADDRESS_NV: GLenum = 0x8F27;
pub static FOG_COORD_ARRAY_ADDRESS_NV: GLenum = 0x8F28;
pub static ELEMENT_ARRAY_ADDRESS_NV: GLenum = 0x8F29;
pub static VERTEX_ATTRIB_ARRAY_LENGTH_NV: GLenum = 0x8F2A;
pub static VERTEX_ARRAY_LENGTH_NV: GLenum = 0x8F2B;
pub static NORMAL_ARRAY_LENGTH_NV: GLenum = 0x8F2C;
pub static COLOR_ARRAY_LENGTH_NV: GLenum = 0x8F2D;
pub static INDEX_ARRAY_LENGTH_NV: GLenum = 0x8F2E;
pub static TEXTURE_COORD_ARRAY_LENGTH_NV: GLenum = 0x8F2F;
pub static EDGE_FLAG_ARRAY_LENGTH_NV: GLenum = 0x8F30;
pub static SECONDARY_COLOR_ARRAY_LENGTH_NV: GLenum = 0x8F31;
pub static FOG_COORD_ARRAY_LENGTH_NV: GLenum = 0x8F32;
pub static ELEMENT_ARRAY_LENGTH_NV: GLenum = 0x8F33;
pub static GPU_ADDRESS_NV: GLenum = 0x8F34;
pub static MAX_SHADER_BUFFER_ADDRESS_NV: GLenum = 0x8F35;
pub static COPY_READ_BUFFER: GLenum = 0x8F36;
pub static COPY_READ_BUFFER_BINDING: GLenum = 0x8F36;
pub static COPY_WRITE_BUFFER: GLenum = 0x8F37;
pub static COPY_WRITE_BUFFER_BINDING: GLenum = 0x8F37;
pub static MAX_IMAGE_UNITS: GLenum = 0x8F38;
pub static MAX_IMAGE_UNITS_EXT: GLenum = 0x8F38;
pub static MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: GLenum = 0x8F39;
pub static MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT: GLenum = 0x8F39;
pub static MAX_COMBINED_SHADER_OUTPUT_RESOURCES: GLenum = 0x8F39;
pub static IMAGE_BINDING_NAME: GLenum = 0x8F3A;
pub static IMAGE_BINDING_NAME_EXT: GLenum = 0x8F3A;
pub static IMAGE_BINDING_LEVEL: GLenum = 0x8F3B;
pub static IMAGE_BINDING_LEVEL_EXT: GLenum = 0x8F3B;
pub static IMAGE_BINDING_LAYERED: GLenum = 0x8F3C;
pub static IMAGE_BINDING_LAYERED_EXT: GLenum = 0x8F3C;
pub static IMAGE_BINDING_LAYER: GLenum = 0x8F3D;
pub static IMAGE_BINDING_LAYER_EXT: GLenum = 0x8F3D;
pub static IMAGE_BINDING_ACCESS: GLenum = 0x8F3E;
pub static IMAGE_BINDING_ACCESS_EXT: GLenum = 0x8F3E;
pub static DRAW_INDIRECT_BUFFER: GLenum = 0x8F3F;
pub static DRAW_INDIRECT_UNIFIED_NV: GLenum = 0x8F40;
pub static DRAW_INDIRECT_ADDRESS_NV: GLenum = 0x8F41;
pub static DRAW_INDIRECT_LENGTH_NV: GLenum = 0x8F42;
pub static DRAW_INDIRECT_BUFFER_BINDING: GLenum = 0x8F43;
pub static MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV: GLenum = 0x8F44;
pub static MAX_PROGRAM_SUBROUTINE_NUM_NV: GLenum = 0x8F45;
pub static DOUBLE_MAT2: GLenum = 0x8F46;
pub static DOUBLE_MAT2_EXT: GLenum = 0x8F46;
pub static DOUBLE_MAT3: GLenum = 0x8F47;
pub static DOUBLE_MAT3_EXT: GLenum = 0x8F47;
pub static DOUBLE_MAT4: GLenum = 0x8F48;
pub static DOUBLE_MAT4_EXT: GLenum = 0x8F48;
pub static DOUBLE_MAT2x3: GLenum = 0x8F49;
pub static DOUBLE_MAT2x3_EXT: GLenum = 0x8F49;
pub static DOUBLE_MAT2x4: GLenum = 0x8F4A;
pub static DOUBLE_MAT2x4_EXT: GLenum = 0x8F4A;
pub static DOUBLE_MAT3x2: GLenum = 0x8F4B;
pub static DOUBLE_MAT3x2_EXT: GLenum = 0x8F4B;
pub static DOUBLE_MAT3x4: GLenum = 0x8F4C;
pub static DOUBLE_MAT3x4_EXT: GLenum = 0x8F4C;
pub static DOUBLE_MAT4x2: GLenum = 0x8F4D;
pub static DOUBLE_MAT4x2_EXT: GLenum = 0x8F4D;
pub static DOUBLE_MAT4x3: GLenum = 0x8F4E;
pub static DOUBLE_MAT4x3_EXT: GLenum = 0x8F4E;
pub static MALI_SHADER_BINARY_ARM: GLenum = 0x8F60;
pub static MALI_PROGRAM_BINARY_ARM: GLenum = 0x8F61;
pub static RED_SNORM: GLenum = 0x8F90;
pub static RG_SNORM: GLenum = 0x8F91;
pub static RGB_SNORM: GLenum = 0x8F92;
pub static RGBA_SNORM: GLenum = 0x8F93;
pub static R8_SNORM: GLenum = 0x8F94;
pub static RG8_SNORM: GLenum = 0x8F95;
pub static RGB8_SNORM: GLenum = 0x8F96;
pub static RGBA8_SNORM: GLenum = 0x8F97;
pub static R16_SNORM: GLenum = 0x8F98;
pub static RG16_SNORM: GLenum = 0x8F99;
pub static RGB16_SNORM: GLenum = 0x8F9A;
pub static RGBA16_SNORM: GLenum = 0x8F9B;
pub static SIGNED_NORMALIZED: GLenum = 0x8F9C;
pub static PRIMITIVE_RESTART: GLenum = 0x8F9D;
pub static PRIMITIVE_RESTART_INDEX: GLenum = 0x8F9E;
pub static MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: GLenum = 0x8F9F;
pub static PERFMON_GLOBAL_MODE_QCOM: GLenum = 0x8FA0;
pub static BINNING_CONTROL_HINT_QCOM: GLenum = 0x8FB0;
pub static CPU_OPTIMIZED_QCOM: GLenum = 0x8FB1;
pub static GPU_OPTIMIZED_QCOM: GLenum = 0x8FB2;
pub static RENDER_DIRECT_TO_FRAMEBUFFER_QCOM: GLenum = 0x8FB3;
pub static GPU_DISJOINT_EXT: GLenum = 0x8FBB;
pub static SHADER_BINARY_VIV: GLenum = 0x8FC4;
pub static INT8_NV: GLenum = 0x8FE0;
pub static INT8_VEC2_NV: GLenum = 0x8FE1;
pub static INT8_VEC3_NV: GLenum = 0x8FE2;
pub static INT8_VEC4_NV: GLenum = 0x8FE3;
pub static INT16_NV: GLenum = 0x8FE4;
pub static INT16_VEC2_NV: GLenum = 0x8FE5;
pub static INT16_VEC3_NV: GLenum = 0x8FE6;
pub static INT16_VEC4_NV: GLenum = 0x8FE7;
pub static INT64_VEC2_NV: GLenum = 0x8FE9;
pub static INT64_VEC3_NV: GLenum = 0x8FEA;
pub static INT64_VEC4_NV: GLenum = 0x8FEB;
pub static UNSIGNED_INT8_NV: GLenum = 0x8FEC;
pub static UNSIGNED_INT8_VEC2_NV: GLenum = 0x8FED;
pub static UNSIGNED_INT8_VEC3_NV: GLenum = 0x8FEE;
pub static UNSIGNED_INT8_VEC4_NV: GLenum = 0x8FEF;
pub static UNSIGNED_INT16_NV: GLenum = 0x8FF0;
pub static UNSIGNED_INT16_VEC2_NV: GLenum = 0x8FF1;
pub static UNSIGNED_INT16_VEC3_NV: GLenum = 0x8FF2;
pub static UNSIGNED_INT16_VEC4_NV: GLenum = 0x8FF3;
pub static UNSIGNED_INT64_VEC2_NV: GLenum = 0x8FF5;
pub static UNSIGNED_INT64_VEC3_NV: GLenum = 0x8FF6;
pub static UNSIGNED_INT64_VEC4_NV: GLenum = 0x8FF7;
pub static FLOAT16_NV: GLenum = 0x8FF8;
pub static FLOAT16_VEC2_NV: GLenum = 0x8FF9;
pub static FLOAT16_VEC3_NV: GLenum = 0x8FFA;
pub static FLOAT16_VEC4_NV: GLenum = 0x8FFB;
pub static DOUBLE_VEC2: GLenum = 0x8FFC;
pub static DOUBLE_VEC2_EXT: GLenum = 0x8FFC;
pub static DOUBLE_VEC3: GLenum = 0x8FFD;
pub static DOUBLE_VEC3_EXT: GLenum = 0x8FFD;
pub static DOUBLE_VEC4: GLenum = 0x8FFE;
pub static DOUBLE_VEC4_EXT: GLenum = 0x8FFE;
pub static SAMPLER_BUFFER_AMD: GLenum = 0x9001;
pub static INT_SAMPLER_BUFFER_AMD: GLenum = 0x9002;
pub static UNSIGNED_INT_SAMPLER_BUFFER_AMD: GLenum = 0x9003;
pub static TESSELLATION_MODE_AMD: GLenum = 0x9004;
pub static TESSELLATION_FACTOR_AMD: GLenum = 0x9005;
pub static DISCRETE_AMD: GLenum = 0x9006;
pub static CONTINUOUS_AMD: GLenum = 0x9007;
pub static TEXTURE_CUBE_MAP_ARRAY: GLenum = 0x9009;
pub static TEXTURE_CUBE_MAP_ARRAY_ARB: GLenum = 0x9009;
pub static TEXTURE_BINDING_CUBE_MAP_ARRAY: GLenum = 0x900A;
pub static TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: GLenum = 0x900A;
pub static PROXY_TEXTURE_CUBE_MAP_ARRAY: GLenum = 0x900B;
pub static PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: GLenum = 0x900B;
pub static SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900C;
pub static SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900C;
pub static SAMPLER_CUBE_MAP_ARRAY_SHADOW: GLenum = 0x900D;
pub static SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: GLenum = 0x900D;
pub static INT_SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900E;
pub static INT_SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900E;
pub static UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900F;
pub static UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900F;
pub static ALPHA_SNORM: GLenum = 0x9010;
pub static LUMINANCE_SNORM: GLenum = 0x9011;
pub static LUMINANCE_ALPHA_SNORM: GLenum = 0x9012;
pub static INTENSITY_SNORM: GLenum = 0x9013;
pub static ALPHA8_SNORM: GLenum = 0x9014;
pub static LUMINANCE8_SNORM: GLenum = 0x9015;
pub static LUMINANCE8_ALPHA8_SNORM: GLenum = 0x9016;
pub static INTENSITY8_SNORM: GLenum = 0x9017;
pub static ALPHA16_SNORM: GLenum = 0x9018;
pub static LUMINANCE16_SNORM: GLenum = 0x9019;
pub static LUMINANCE16_ALPHA16_SNORM: GLenum = 0x901A;
pub static INTENSITY16_SNORM: GLenum = 0x901B;
pub static FACTOR_MIN_AMD: GLenum = 0x901C;
pub static FACTOR_MAX_AMD: GLenum = 0x901D;
pub static DEPTH_CLAMP_NEAR_AMD: GLenum = 0x901E;
pub static DEPTH_CLAMP_FAR_AMD: GLenum = 0x901F;
pub static VIDEO_BUFFER_NV: GLenum = 0x9020;
pub static VIDEO_BUFFER_BINDING_NV: GLenum = 0x9021;
pub static FIELD_UPPER_NV: GLenum = 0x9022;
pub static FIELD_LOWER_NV: GLenum = 0x9023;
pub static NUM_VIDEO_CAPTURE_STREAMS_NV: GLenum = 0x9024;
pub static NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV: GLenum = 0x9025;
pub static VIDEO_CAPTURE_TO_422_SUPPORTED_NV: GLenum = 0x9026;
pub static LAST_VIDEO_CAPTURE_STATUS_NV: GLenum = 0x9027;
pub static VIDEO_BUFFER_PITCH_NV: GLenum = 0x9028;
pub static VIDEO_COLOR_CONVERSION_MATRIX_NV: GLenum = 0x9029;
pub static VIDEO_COLOR_CONVERSION_MAX_NV: GLenum = 0x902A;
pub static VIDEO_COLOR_CONVERSION_MIN_NV: GLenum = 0x902B;
pub static VIDEO_COLOR_CONVERSION_OFFSET_NV: GLenum = 0x902C;
pub static VIDEO_BUFFER_INTERNAL_FORMAT_NV: GLenum = 0x902D;
pub static PARTIAL_SUCCESS_NV: GLenum = 0x902E;
pub static SUCCESS_NV: GLenum = 0x902F;
pub static FAILURE_NV: GLenum = 0x9030;
pub static YCBYCR8_422_NV: GLenum = 0x9031;
pub static YCBAYCR8A_4224_NV: GLenum = 0x9032;
pub static Z6Y10Z6CB10Z6Y10Z6CR10_422_NV: GLenum = 0x9033;
pub static Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV: GLenum = 0x9034;
pub static Z4Y12Z4CB12Z4Y12Z4CR12_422_NV: GLenum = 0x9035;
pub static Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV: GLenum = 0x9036;
pub static Z4Y12Z4CB12Z4CR12_444_NV: GLenum = 0x9037;
pub static VIDEO_CAPTURE_FRAME_WIDTH_NV: GLenum = 0x9038;
pub static VIDEO_CAPTURE_FRAME_HEIGHT_NV: GLenum = 0x9039;
pub static VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV: GLenum = 0x903A;
pub static VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV: GLenum = 0x903B;
pub static VIDEO_CAPTURE_SURFACE_ORIGIN_NV: GLenum = 0x903C;
pub static TEXTURE_COVERAGE_SAMPLES_NV: GLenum = 0x9045;
pub static TEXTURE_COLOR_SAMPLES_NV: GLenum = 0x9046;
pub static IMAGE_1D: GLenum = 0x904C;
pub static IMAGE_1D_EXT: GLenum = 0x904C;
pub static IMAGE_2D: GLenum = 0x904D;
pub static IMAGE_2D_EXT: GLenum = 0x904D;
pub static IMAGE_3D: GLenum = 0x904E;
pub static IMAGE_3D_EXT: GLenum = 0x904E;
pub static IMAGE_2D_RECT: GLenum = 0x904F;
pub static IMAGE_2D_RECT_EXT: GLenum = 0x904F;
pub static IMAGE_CUBE: GLenum = 0x9050;
pub static IMAGE_CUBE_EXT: GLenum = 0x9050;
pub static IMAGE_BUFFER: GLenum = 0x9051;
pub static IMAGE_BUFFER_EXT: GLenum = 0x9051;
pub static IMAGE_1D_ARRAY: GLenum = 0x9052;
pub static IMAGE_1D_ARRAY_EXT: GLenum = 0x9052;
pub static IMAGE_2D_ARRAY: GLenum = 0x9053;
pub static IMAGE_2D_ARRAY_EXT: GLenum = 0x9053;
pub static IMAGE_CUBE_MAP_ARRAY: GLenum = 0x9054;
pub static IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x9054;
pub static IMAGE_2D_MULTISAMPLE: GLenum = 0x9055;
pub static IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x9055;
pub static IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9056;
pub static IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x9056;
pub static INT_IMAGE_1D: GLenum = 0x9057;
pub static INT_IMAGE_1D_EXT: GLenum = 0x9057;
pub static INT_IMAGE_2D: GLenum = 0x9058;
pub static INT_IMAGE_2D_EXT: GLenum = 0x9058;
pub static INT_IMAGE_3D: GLenum = 0x9059;
pub static INT_IMAGE_3D_EXT: GLenum = 0x9059;
pub static INT_IMAGE_2D_RECT: GLenum = 0x905A;
pub static INT_IMAGE_2D_RECT_EXT: GLenum = 0x905A;
pub static INT_IMAGE_CUBE: GLenum = 0x905B;
pub static INT_IMAGE_CUBE_EXT: GLenum = 0x905B;
pub static INT_IMAGE_BUFFER: GLenum = 0x905C;
pub static INT_IMAGE_BUFFER_EXT: GLenum = 0x905C;
pub static INT_IMAGE_1D_ARRAY: GLenum = 0x905D;
pub static INT_IMAGE_1D_ARRAY_EXT: GLenum = 0x905D;
pub static INT_IMAGE_2D_ARRAY: GLenum = 0x905E;
pub static INT_IMAGE_2D_ARRAY_EXT: GLenum = 0x905E;
pub static INT_IMAGE_CUBE_MAP_ARRAY: GLenum = 0x905F;
pub static INT_IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x905F;
pub static INT_IMAGE_2D_MULTISAMPLE: GLenum = 0x9060;
pub static INT_IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x9060;
pub static INT_IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9061;
pub static INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x9061;
pub static UNSIGNED_INT_IMAGE_1D: GLenum = 0x9062;
pub static UNSIGNED_INT_IMAGE_1D_EXT: GLenum = 0x9062;
pub static UNSIGNED_INT_IMAGE_2D: GLenum = 0x9063;
pub static UNSIGNED_INT_IMAGE_2D_EXT: GLenum = 0x9063;
pub static UNSIGNED_INT_IMAGE_3D: GLenum = 0x9064;
pub static UNSIGNED_INT_IMAGE_3D_EXT: GLenum = 0x9064;
pub static UNSIGNED_INT_IMAGE_2D_RECT: GLenum = 0x9065;
pub static UNSIGNED_INT_IMAGE_2D_RECT_EXT: GLenum = 0x9065;
pub static UNSIGNED_INT_IMAGE_CUBE: GLenum = 0x9066;
pub static UNSIGNED_INT_IMAGE_CUBE_EXT: GLenum = 0x9066;
pub static UNSIGNED_INT_IMAGE_BUFFER: GLenum = 0x9067;
pub static UNSIGNED_INT_IMAGE_BUFFER_EXT: GLenum = 0x9067;
pub static UNSIGNED_INT_IMAGE_1D_ARRAY: GLenum = 0x9068;
pub static UNSIGNED_INT_IMAGE_1D_ARRAY_EXT: GLenum = 0x9068;
pub static UNSIGNED_INT_IMAGE_2D_ARRAY: GLenum = 0x9069;
pub static UNSIGNED_INT_IMAGE_2D_ARRAY_EXT: GLenum = 0x9069;
pub static UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: GLenum = 0x906A;
pub static UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x906A;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: GLenum = 0x906B;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x906B;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x906C;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x906C;
pub static MAX_IMAGE_SAMPLES: GLenum = 0x906D;
pub static MAX_IMAGE_SAMPLES_EXT: GLenum = 0x906D;
pub static IMAGE_BINDING_FORMAT: GLenum = 0x906E;
pub static IMAGE_BINDING_FORMAT_EXT: GLenum = 0x906E;
pub static RGB10_A2UI: GLenum = 0x906F;
pub static PATH_FORMAT_SVG_NV: GLenum = 0x9070;
pub static PATH_FORMAT_PS_NV: GLenum = 0x9071;
pub static STANDARD_FONT_NAME_NV: GLenum = 0x9072;
pub static SYSTEM_FONT_NAME_NV: GLenum = 0x9073;
pub static FILE_NAME_NV: GLenum = 0x9074;
pub static PATH_STROKE_WIDTH_NV: GLenum = 0x9075;
pub static PATH_END_CAPS_NV: GLenum = 0x9076;
pub static PATH_INITIAL_END_CAP_NV: GLenum = 0x9077;
pub static PATH_TERMINAL_END_CAP_NV: GLenum = 0x9078;
pub static PATH_JOIN_STYLE_NV: GLenum = 0x9079;
pub static PATH_MITER_LIMIT_NV: GLenum = 0x907A;
pub static PATH_DASH_CAPS_NV: GLenum = 0x907B;
pub static PATH_INITIAL_DASH_CAP_NV: GLenum = 0x907C;
pub static PATH_TERMINAL_DASH_CAP_NV: GLenum = 0x907D;
pub static PATH_DASH_OFFSET_NV: GLenum = 0x907E;
pub static PATH_CLIENT_LENGTH_NV: GLenum = 0x907F;
pub static PATH_FILL_MODE_NV: GLenum = 0x9080;
pub static PATH_FILL_MASK_NV: GLenum = 0x9081;
pub static PATH_FILL_COVER_MODE_NV: GLenum = 0x9082;
pub static PATH_STROKE_COVER_MODE_NV: GLenum = 0x9083;
pub static PATH_STROKE_MASK_NV: GLenum = 0x9084;
pub static COUNT_UP_NV: GLenum = 0x9088;
pub static COUNT_DOWN_NV: GLenum = 0x9089;
pub static PATH_OBJECT_BOUNDING_BOX_NV: GLenum = 0x908A;
pub static CONVEX_HULL_NV: GLenum = 0x908B;
pub static BOUNDING_BOX_NV: GLenum = 0x908D;
pub static TRANSLATE_X_NV: GLenum = 0x908E;
pub static TRANSLATE_Y_NV: GLenum = 0x908F;
pub static TRANSLATE_2D_NV: GLenum = 0x9090;
pub static TRANSLATE_3D_NV: GLenum = 0x9091;
pub static AFFINE_2D_NV: GLenum = 0x9092;
pub static AFFINE_3D_NV: GLenum = 0x9094;
pub static TRANSPOSE_AFFINE_2D_NV: GLenum = 0x9096;
pub static TRANSPOSE_AFFINE_3D_NV: GLenum = 0x9098;
pub static UTF8_NV: GLenum = 0x909A;
pub static UTF16_NV: GLenum = 0x909B;
pub static BOUNDING_BOX_OF_BOUNDING_BOXES_NV: GLenum = 0x909C;
pub static PATH_COMMAND_COUNT_NV: GLenum = 0x909D;
pub static PATH_COORD_COUNT_NV: GLenum = 0x909E;
pub static PATH_DASH_ARRAY_COUNT_NV: GLenum = 0x909F;
pub static PATH_COMPUTED_LENGTH_NV: GLenum = 0x90A0;
pub static PATH_FILL_BOUNDING_BOX_NV: GLenum = 0x90A1;
pub static PATH_STROKE_BOUNDING_BOX_NV: GLenum = 0x90A2;
pub static SQUARE_NV: GLenum = 0x90A3;
pub static ROUND_NV: GLenum = 0x90A4;
pub static TRIANGULAR_NV: GLenum = 0x90A5;
pub static BEVEL_NV: GLenum = 0x90A6;
pub static MITER_REVERT_NV: GLenum = 0x90A7;
pub static MITER_TRUNCATE_NV: GLenum = 0x90A8;
pub static SKIP_MISSING_GLYPH_NV: GLenum = 0x90A9;
pub static USE_MISSING_GLYPH_NV: GLenum = 0x90AA;
pub static PATH_ERROR_POSITION_NV: GLenum = 0x90AB;
pub static PATH_FOG_GEN_MODE_NV: GLenum = 0x90AC;
pub static ACCUM_ADJACENT_PAIRS_NV: GLenum = 0x90AD;
pub static ADJACENT_PAIRS_NV: GLenum = 0x90AE;
pub static FIRST_TO_REST_NV: GLenum = 0x90AF;
pub static PATH_GEN_MODE_NV: GLenum = 0x90B0;
pub static PATH_GEN_COEFF_NV: GLenum = 0x90B1;
pub static PATH_GEN_COLOR_FORMAT_NV: GLenum = 0x90B2;
pub static PATH_GEN_COMPONENTS_NV: GLenum = 0x90B3;
pub static PATH_DASH_OFFSET_RESET_NV: GLenum = 0x90B4;
pub static MOVE_TO_RESETS_NV: GLenum = 0x90B5;
pub static MOVE_TO_CONTINUES_NV: GLenum = 0x90B6;
pub static PATH_STENCIL_FUNC_NV: GLenum = 0x90B7;
pub static PATH_STENCIL_REF_NV: GLenum = 0x90B8;
pub static PATH_STENCIL_VALUE_MASK_NV: GLenum = 0x90B9;
pub static SCALED_RESOLVE_FASTEST_EXT: GLenum = 0x90BA;
pub static SCALED_RESOLVE_NICEST_EXT: GLenum = 0x90BB;
pub static MIN_MAP_BUFFER_ALIGNMENT: GLenum = 0x90BC;
pub static PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: GLenum = 0x90BD;
pub static PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: GLenum = 0x90BE;
pub static PATH_COVER_DEPTH_FUNC_NV: GLenum = 0x90BF;
pub static IMAGE_FORMAT_COMPATIBILITY_TYPE: GLenum = 0x90C7;
pub static IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: GLenum = 0x90C8;
pub static IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: GLenum = 0x90C9;
pub static MAX_VERTEX_IMAGE_UNIFORMS: GLenum = 0x90CA;
pub static MAX_TESS_CONTROL_IMAGE_UNIFORMS: GLenum = 0x90CB;
pub static MAX_TESS_EVALUATION_IMAGE_UNIFORMS: GLenum = 0x90CC;
pub static MAX_GEOMETRY_IMAGE_UNIFORMS: GLenum = 0x90CD;
pub static MAX_FRAGMENT_IMAGE_UNIFORMS: GLenum = 0x90CE;
pub static MAX_COMBINED_IMAGE_UNIFORMS: GLenum = 0x90CF;
pub static MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV: GLenum = 0x90D0;
pub static MAX_DEEP_3D_TEXTURE_DEPTH_NV: GLenum = 0x90D1;
pub static SHADER_STORAGE_BUFFER: GLenum = 0x90D2;
pub static SHADER_STORAGE_BUFFER_BINDING: GLenum = 0x90D3;
pub static SHADER_STORAGE_BUFFER_START: GLenum = 0x90D4;
pub static SHADER_STORAGE_BUFFER_SIZE: GLenum = 0x90D5;
pub static MAX_VERTEX_SHADER_STORAGE_BLOCKS: GLenum = 0x90D6;
pub static MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: GLenum = 0x90D7;
pub static MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: GLenum = 0x90D8;
pub static MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: GLenum = 0x90D9;
pub static MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: GLenum = 0x90DA;
pub static MAX_COMPUTE_SHADER_STORAGE_BLOCKS: GLenum = 0x90DB;
pub static MAX_COMBINED_SHADER_STORAGE_BLOCKS: GLenum = 0x90DC;
pub static MAX_SHADER_STORAGE_BUFFER_BINDINGS: GLenum = 0x90DD;
pub static MAX_SHADER_STORAGE_BLOCK_SIZE: GLenum = 0x90DE;
pub static SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x90DF;
pub static SYNC_X11_FENCE_EXT: GLenum = 0x90E1;
pub static DEPTH_STENCIL_TEXTURE_MODE: GLenum = 0x90EA;
pub static MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: GLenum = 0x90EB;
pub static MAX_COMPUTE_LOCAL_INVOCATIONS: GLenum = 0x90EB;
pub static UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x90EC;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x90ED;
pub static DISPATCH_INDIRECT_BUFFER: GLenum = 0x90EE;
pub static DISPATCH_INDIRECT_BUFFER_BINDING: GLenum = 0x90EF;
pub static COLOR_ATTACHMENT_EXT: GLenum = 0x90F0;
pub static MULTIVIEW_EXT: GLenum = 0x90F1;
pub static MAX_MULTIVIEW_BUFFERS_EXT: GLenum = 0x90F2;
pub static COMPUTE_PROGRAM_NV: GLenum = 0x90FB;
pub static COMPUTE_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x90FC;
pub static TEXTURE_2D_MULTISAMPLE: GLenum = 0x9100;
pub static PROXY_TEXTURE_2D_MULTISAMPLE: GLenum = 0x9101;
pub static TEXTURE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9102;
pub static PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9103;
pub static TEXTURE_BINDING_2D_MULTISAMPLE: GLenum = 0x9104;
pub static TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: GLenum = 0x9105;
pub static TEXTURE_SAMPLES: GLenum = 0x9106;
pub static TEXTURE_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9107;
pub static SAMPLER_2D_MULTISAMPLE: GLenum = 0x9108;
pub static INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x9109;
pub static UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x910A;
pub static SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910B;
pub static INT_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910C;
pub static UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910D;
pub static MAX_COLOR_TEXTURE_SAMPLES: GLenum = 0x910E;
pub static MAX_DEPTH_TEXTURE_SAMPLES: GLenum = 0x910F;
pub static MAX_INTEGER_SAMPLES: GLenum = 0x9110;
pub static MAX_SERVER_WAIT_TIMEOUT: GLenum = 0x9111;
pub static MAX_SERVER_WAIT_TIMEOUT_APPLE: GLenum = 0x9111;
pub static OBJECT_TYPE: GLenum = 0x9112;
pub static OBJECT_TYPE_APPLE: GLenum = 0x9112;
pub static SYNC_CONDITION: GLenum = 0x9113;
pub static SYNC_CONDITION_APPLE: GLenum = 0x9113;
pub static SYNC_STATUS: GLenum = 0x9114;
pub static SYNC_STATUS_APPLE: GLenum = 0x9114;
pub static SYNC_FLAGS: GLenum = 0x9115;
pub static SYNC_FLAGS_APPLE: GLenum = 0x9115;
pub static SYNC_FENCE: GLenum = 0x9116;
pub static SYNC_FENCE_APPLE: GLenum = 0x9116;
pub static SYNC_GPU_COMMANDS_COMPLETE: GLenum = 0x9117;
pub static SYNC_GPU_COMMANDS_COMPLETE_APPLE: GLenum = 0x9117;
pub static UNSIGNALED: GLenum = 0x9118;
pub static UNSIGNALED_APPLE: GLenum = 0x9118;
pub static SIGNALED: GLenum = 0x9119;
pub static SIGNALED_APPLE: GLenum = 0x9119;
pub static ALREADY_SIGNALED: GLenum = 0x911A;
pub static ALREADY_SIGNALED_APPLE: GLenum = 0x911A;
pub static TIMEOUT_EXPIRED: GLenum = 0x911B;
pub static TIMEOUT_EXPIRED_APPLE: GLenum = 0x911B;
pub static CONDITION_SATISFIED: GLenum = 0x911C;
pub static CONDITION_SATISFIED_APPLE: GLenum = 0x911C;
pub static WAIT_FAILED: GLenum = 0x911D;
pub static WAIT_FAILED_APPLE: GLenum = 0x911D;
pub static BUFFER_ACCESS_FLAGS: GLenum = 0x911F;
pub static BUFFER_MAP_LENGTH: GLenum = 0x9120;
pub static BUFFER_MAP_OFFSET: GLenum = 0x9121;
pub static MAX_VERTEX_OUTPUT_COMPONENTS: GLenum = 0x9122;
pub static MAX_GEOMETRY_INPUT_COMPONENTS: GLenum = 0x9123;
pub static MAX_GEOMETRY_OUTPUT_COMPONENTS: GLenum = 0x9124;
pub static MAX_FRAGMENT_INPUT_COMPONENTS: GLenum = 0x9125;
pub static CONTEXT_PROFILE_MASK: GLenum = 0x9126;
pub static UNPACK_COMPRESSED_BLOCK_WIDTH: GLenum = 0x9127;
pub static UNPACK_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x9128;
pub static UNPACK_COMPRESSED_BLOCK_DEPTH: GLenum = 0x9129;
pub static UNPACK_COMPRESSED_BLOCK_SIZE: GLenum = 0x912A;
pub static PACK_COMPRESSED_BLOCK_WIDTH: GLenum = 0x912B;
pub static PACK_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x912C;
pub static PACK_COMPRESSED_BLOCK_DEPTH: GLenum = 0x912D;
pub static PACK_COMPRESSED_BLOCK_SIZE: GLenum = 0x912E;
pub static TEXTURE_IMMUTABLE_FORMAT: GLenum = 0x912F;
pub static SGX_PROGRAM_BINARY_IMG: GLenum = 0x9130;
pub static RENDERBUFFER_SAMPLES_IMG: GLenum = 0x9133;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG: GLenum = 0x9134;
pub static MAX_SAMPLES_IMG: GLenum = 0x9135;
pub static TEXTURE_SAMPLES_IMG: GLenum = 0x9136;
pub static COMPRESSED_RGBA_PVRTC_2BPPV2_IMG: GLenum = 0x9137;
pub static COMPRESSED_RGBA_PVRTC_4BPPV2_IMG: GLenum = 0x9138;
pub static MAX_DEBUG_MESSAGE_LENGTH: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_AMD: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_ARB: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_KHR: GLenum = 0x9143;
pub static MAX_DEBUG_LOGGED_MESSAGES: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_AMD: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_ARB: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_KHR: GLenum = 0x9144;
pub static DEBUG_LOGGED_MESSAGES: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_AMD: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_ARB: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_KHR: GLenum = 0x9145;
pub static DEBUG_SEVERITY_HIGH: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_AMD: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_ARB: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_KHR: GLenum = 0x9146;
pub static DEBUG_SEVERITY_MEDIUM: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_AMD: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_ARB: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_KHR: GLenum = 0x9147;
pub static DEBUG_SEVERITY_LOW: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_AMD: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_ARB: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_KHR: GLenum = 0x9148;
pub static DEBUG_CATEGORY_API_ERROR_AMD: GLenum = 0x9149;
pub static DEBUG_CATEGORY_WINDOW_SYSTEM_AMD: GLenum = 0x914A;
pub static DEBUG_CATEGORY_DEPRECATION_AMD: GLenum = 0x914B;
pub static DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD: GLenum = 0x914C;
pub static DEBUG_CATEGORY_PERFORMANCE_AMD: GLenum = 0x914D;
pub static DEBUG_CATEGORY_SHADER_COMPILER_AMD: GLenum = 0x914E;
pub static DEBUG_CATEGORY_APPLICATION_AMD: GLenum = 0x914F;
pub static DEBUG_CATEGORY_OTHER_AMD: GLenum = 0x9150;
pub static BUFFER_OBJECT_EXT: GLenum = 0x9151;
pub static DATA_BUFFER_AMD: GLenum = 0x9151;
pub static PERFORMANCE_MONITOR_AMD: GLenum = 0x9152;
pub static QUERY_OBJECT_AMD: GLenum = 0x9153;
pub static QUERY_OBJECT_EXT: GLenum = 0x9153;
pub static VERTEX_ARRAY_OBJECT_AMD: GLenum = 0x9154;
pub static VERTEX_ARRAY_OBJECT_EXT: GLenum = 0x9154;
pub static SAMPLER_OBJECT_AMD: GLenum = 0x9155;
pub static EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD: GLenum = 0x9160;
pub static QUERY_BUFFER: GLenum = 0x9192;
pub static QUERY_BUFFER_AMD: GLenum = 0x9192;
pub static QUERY_BUFFER_BINDING: GLenum = 0x9193;
pub static QUERY_BUFFER_BINDING_AMD: GLenum = 0x9193;
pub static QUERY_RESULT_NO_WAIT: GLenum = 0x9194;
pub static QUERY_RESULT_NO_WAIT_AMD: GLenum = 0x9194;
pub static VIRTUAL_PAGE_SIZE_X_ARB: GLenum = 0x9195;
pub static VIRTUAL_PAGE_SIZE_X_AMD: GLenum = 0x9195;
pub static VIRTUAL_PAGE_SIZE_Y_ARB: GLenum = 0x9196;
pub static VIRTUAL_PAGE_SIZE_Y_AMD: GLenum = 0x9196;
pub static VIRTUAL_PAGE_SIZE_Z_ARB: GLenum = 0x9197;
pub static VIRTUAL_PAGE_SIZE_Z_AMD: GLenum = 0x9197;
pub static MAX_SPARSE_TEXTURE_SIZE_ARB: GLenum = 0x9198;
pub static MAX_SPARSE_TEXTURE_SIZE_AMD: GLenum = 0x9198;
pub static MAX_SPARSE_3D_TEXTURE_SIZE_ARB: GLenum = 0x9199;
pub static MAX_SPARSE_3D_TEXTURE_SIZE_AMD: GLenum = 0x9199;
pub static MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: GLenum = 0x919A;
pub static MAX_SPARSE_ARRAY_TEXTURE_LAYERS: GLenum = 0x919A;
pub static MIN_SPARSE_LEVEL_ARB: GLenum = 0x919B;
pub static MIN_SPARSE_LEVEL_AMD: GLenum = 0x919B;
pub static MIN_LOD_WARNING_AMD: GLenum = 0x919C;
pub static TEXTURE_BUFFER_OFFSET: GLenum = 0x919D;
pub static TEXTURE_BUFFER_SIZE: GLenum = 0x919E;
pub static TEXTURE_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x919F;
pub static VERTEX_ELEMENT_SWIZZLE_AMD: GLenum = 0x91A4;
pub static VERTEX_ID_SWIZZLE_AMD: GLenum = 0x91A5;
pub static TEXTURE_SPARSE_ARB: GLenum = 0x91A6;
pub static VIRTUAL_PAGE_SIZE_INDEX_ARB: GLenum = 0x91A7;
pub static NUM_VIRTUAL_PAGE_SIZES_ARB: GLenum = 0x91A8;
pub static SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: GLenum = 0x91A9;
pub static COMPUTE_SHADER: GLenum = 0x91B9;
pub static MAX_COMPUTE_UNIFORM_BLOCKS: GLenum = 0x91BB;
pub static MAX_COMPUTE_TEXTURE_IMAGE_UNITS: GLenum = 0x91BC;
pub static MAX_COMPUTE_IMAGE_UNIFORMS: GLenum = 0x91BD;
pub static MAX_COMPUTE_WORK_GROUP_COUNT: GLenum = 0x91BE;
pub static MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: GLenum = 0x91BF;
pub static MAX_COMPUTE_WORK_GROUP_SIZE: GLenum = 0x91BF;
pub static UNPACK_FLIP_Y_WEBGL: GLenum = 0x9240;
pub static UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum = 0x9241;
pub static CONTEXT_LOST_WEBGL: GLenum = 0x9242;
pub static UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum = 0x9243;
pub static BROWSER_DEFAULT_WEBGL: GLenum = 0x9244;
pub static SHADER_BINARY_DMP: GLenum = 0x9250;
pub static GCCSO_SHADER_BINARY_FJ: GLenum = 0x9260;
pub static COMPRESSED_R11_EAC: GLenum = 0x9270;
pub static COMPRESSED_R11_EAC_OES: GLenum = 0x9270;
pub static COMPRESSED_SIGNED_R11_EAC: GLenum = 0x9271;
pub static COMPRESSED_SIGNED_R11_EAC_OES: GLenum = 0x9271;
pub static COMPRESSED_RG11_EAC: GLenum = 0x9272;
pub static COMPRESSED_RG11_EAC_OES: GLenum = 0x9272;
pub static COMPRESSED_SIGNED_RG11_EAC: GLenum = 0x9273;
pub static COMPRESSED_SIGNED_RG11_EAC_OES: GLenum = 0x9273;
pub static COMPRESSED_RGB8_ETC2: GLenum = 0x9274;
pub static COMPRESSED_RGB8_ETC2_OES: GLenum = 0x9274;
pub static COMPRESSED_SRGB8_ETC2: GLenum = 0x9275;
pub static COMPRESSED_SRGB8_ETC2_OES: GLenum = 0x9275;
pub static COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = 0x9276;
pub static COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES: GLenum = 0x9276;
pub static COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = 0x9277;
pub static COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES: GLenum = 0x9277;
pub static COMPRESSED_RGBA8_ETC2_EAC: GLenum = 0x9278;
pub static COMPRESSED_RGBA8_ETC2_EAC_OES: GLenum = 0x9278;
pub static COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GLenum = 0x9279;
pub static COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES: GLenum = 0x9279;
pub static BLEND_PREMULTIPLIED_SRC_NV: GLenum = 0x9280;
pub static BLEND_OVERLAP_NV: GLenum = 0x9281;
pub static UNCORRELATED_NV: GLenum = 0x9282;
pub static DISJOINT_NV: GLenum = 0x9283;
pub static CONJOINT_NV: GLenum = 0x9284;
pub static BLEND_ADVANCED_COHERENT_NV: GLenum = 0x9285;
pub static SRC_NV: GLenum = 0x9286;
pub static DST_NV: GLenum = 0x9287;
pub static SRC_OVER_NV: GLenum = 0x9288;
pub static DST_OVER_NV: GLenum = 0x9289;
pub static SRC_IN_NV: GLenum = 0x928A;
pub static DST_IN_NV: GLenum = 0x928B;
pub static SRC_OUT_NV: GLenum = 0x928C;
pub static DST_OUT_NV: GLenum = 0x928D;
pub static SRC_ATOP_NV: GLenum = 0x928E;
pub static DST_ATOP_NV: GLenum = 0x928F;
pub static PLUS_NV: GLenum = 0x9291;
pub static PLUS_DARKER_NV: GLenum = 0x9292;
pub static MULTIPLY_NV: GLenum = 0x9294;
pub static SCREEN_NV: GLenum = 0x9295;
pub static OVERLAY_NV: GLenum = 0x9296;
pub static DARKEN_NV: GLenum = 0x9297;
pub static LIGHTEN_NV: GLenum = 0x9298;
pub static COLORDODGE_NV: GLenum = 0x9299;
pub static COLORBURN_NV: GLenum = 0x929A;
pub static HARDLIGHT_NV: GLenum = 0x929B;
pub static SOFTLIGHT_NV: GLenum = 0x929C;
pub static DIFFERENCE_NV: GLenum = 0x929E;
pub static MINUS_NV: GLenum = 0x929F;
pub static EXCLUSION_NV: GLenum = 0x92A0;
pub static CONTRAST_NV: GLenum = 0x92A1;
pub static INVERT_RGB_NV: GLenum = 0x92A3;
pub static LINEARDODGE_NV: GLenum = 0x92A4;
pub static LINEARBURN_NV: GLenum = 0x92A5;
pub static VIVIDLIGHT_NV: GLenum = 0x92A6;
pub static LINEARLIGHT_NV: GLenum = 0x92A7;
pub static PINLIGHT_NV: GLenum = 0x92A8;
pub static HARDMIX_NV: GLenum = 0x92A9;
pub static HSL_HUE_NV: GLenum = 0x92AD;
pub static HSL_SATURATION_NV: GLenum = 0x92AE;
pub static HSL_COLOR_NV: GLenum = 0x92AF;
pub static HSL_LUMINOSITY_NV: GLenum = 0x92B0;
pub static PLUS_CLAMPED_NV: GLenum = 0x92B1;
pub static PLUS_CLAMPED_ALPHA_NV: GLenum = 0x92B2;
pub static MINUS_CLAMPED_NV: GLenum = 0x92B3;
pub static INVERT_OVG_NV: GLenum = 0x92B4;
pub static ATOMIC_COUNTER_BUFFER: GLenum = 0x92C0;
pub static ATOMIC_COUNTER_BUFFER_BINDING: GLenum = 0x92C1;
pub static ATOMIC_COUNTER_BUFFER_START: GLenum = 0x92C2;
pub static ATOMIC_COUNTER_BUFFER_SIZE: GLenum = 0x92C3;
pub static ATOMIC_COUNTER_BUFFER_DATA_SIZE: GLenum = 0x92C4;
pub static ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: GLenum = 0x92C5;
pub static ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: GLenum = 0x92C6;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x92C7;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x92C8;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x92C9;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x92CA;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x92CB;
pub static MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CC;
pub static MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CD;
pub static MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CE;
pub static MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CF;
pub static MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D0;
pub static MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D1;
pub static MAX_VERTEX_ATOMIC_COUNTERS: GLenum = 0x92D2;
pub static MAX_TESS_CONTROL_ATOMIC_COUNTERS: GLenum = 0x92D3;
pub static MAX_TESS_EVALUATION_ATOMIC_COUNTERS: GLenum = 0x92D4;
pub static MAX_GEOMETRY_ATOMIC_COUNTERS: GLenum = 0x92D5;
pub static MAX_FRAGMENT_ATOMIC_COUNTERS: GLenum = 0x92D6;
pub static MAX_COMBINED_ATOMIC_COUNTERS: GLenum = 0x92D7;
pub static MAX_ATOMIC_COUNTER_BUFFER_SIZE: GLenum = 0x92D8;
pub static ACTIVE_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D9;
pub static UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: GLenum = 0x92DA;
pub static UNSIGNED_INT_ATOMIC_COUNTER: GLenum = 0x92DB;
pub static MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: GLenum = 0x92DC;
pub static DEBUG_OUTPUT: GLenum = 0x92E0;
pub static DEBUG_OUTPUT_KHR: GLenum = 0x92E0;
pub static UNIFORM: GLenum = 0x92E1;
pub static UNIFORM_BLOCK: GLenum = 0x92E2;
pub static PROGRAM_INPUT: GLenum = 0x92E3;
pub static PROGRAM_OUTPUT: GLenum = 0x92E4;
pub static BUFFER_VARIABLE: GLenum = 0x92E5;
pub static SHADER_STORAGE_BLOCK: GLenum = 0x92E6;
pub static IS_PER_PATCH: GLenum = 0x92E7;
pub static VERTEX_SUBROUTINE: GLenum = 0x92E8;
pub static TESS_CONTROL_SUBROUTINE: GLenum = 0x92E9;
pub static TESS_EVALUATION_SUBROUTINE: GLenum = 0x92EA;
pub static GEOMETRY_SUBROUTINE: GLenum = 0x92EB;
pub static FRAGMENT_SUBROUTINE: GLenum = 0x92EC;
pub static COMPUTE_SUBROUTINE: GLenum = 0x92ED;
pub static VERTEX_SUBROUTINE_UNIFORM: GLenum = 0x92EE;
pub static TESS_CONTROL_SUBROUTINE_UNIFORM: GLenum = 0x92EF;
pub static TESS_EVALUATION_SUBROUTINE_UNIFORM: GLenum = 0x92F0;
pub static GEOMETRY_SUBROUTINE_UNIFORM: GLenum = 0x92F1;
pub static FRAGMENT_SUBROUTINE_UNIFORM: GLenum = 0x92F2;
pub static COMPUTE_SUBROUTINE_UNIFORM: GLenum = 0x92F3;
pub static TRANSFORM_FEEDBACK_VARYING: GLenum = 0x92F4;
pub static ACTIVE_RESOURCES: GLenum = 0x92F5;
pub static MAX_NAME_LENGTH: GLenum = 0x92F6;
pub static MAX_NUM_ACTIVE_VARIABLES: GLenum = 0x92F7;
pub static MAX_NUM_COMPATIBLE_SUBROUTINES: GLenum = 0x92F8;
pub static NAME_LENGTH: GLenum = 0x92F9;
pub static TYPE: GLenum = 0x92FA;
pub static ARRAY_SIZE: GLenum = 0x92FB;
pub static OFFSET: GLenum = 0x92FC;
pub static BLOCK_INDEX: GLenum = 0x92FD;
pub static ARRAY_STRIDE: GLenum = 0x92FE;
pub static MATRIX_STRIDE: GLenum = 0x92FF;
pub static IS_ROW_MAJOR: GLenum = 0x9300;
pub static ATOMIC_COUNTER_BUFFER_INDEX: GLenum = 0x9301;
pub static BUFFER_BINDING: GLenum = 0x9302;
pub static BUFFER_DATA_SIZE: GLenum = 0x9303;
pub static NUM_ACTIVE_VARIABLES: GLenum = 0x9304;
pub static ACTIVE_VARIABLES: GLenum = 0x9305;
pub static REFERENCED_BY_VERTEX_SHADER: GLenum = 0x9306;
pub static REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x9307;
pub static REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x9308;
pub static REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x9309;
pub static REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x930A;
pub static REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x930B;
pub static TOP_LEVEL_ARRAY_SIZE: GLenum = 0x930C;
pub static TOP_LEVEL_ARRAY_STRIDE: GLenum = 0x930D;
pub static LOCATION: GLenum = 0x930E;
pub static LOCATION_INDEX: GLenum = 0x930F;
pub static FRAMEBUFFER_DEFAULT_WIDTH: GLenum = 0x9310;
pub static FRAMEBUFFER_DEFAULT_HEIGHT: GLenum = 0x9311;
pub static FRAMEBUFFER_DEFAULT_LAYERS: GLenum = 0x9312;
pub static FRAMEBUFFER_DEFAULT_SAMPLES: GLenum = 0x9313;
pub static FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9314;
pub static MAX_FRAMEBUFFER_WIDTH: GLenum = 0x9315;
pub static MAX_FRAMEBUFFER_HEIGHT: GLenum = 0x9316;
pub static MAX_FRAMEBUFFER_LAYERS: GLenum = 0x9317;
pub static MAX_FRAMEBUFFER_SAMPLES: GLenum = 0x9318;
pub static MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: GLenum = 0x9344;
pub static MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: GLenum = 0x9345;
pub static LOCATION_COMPONENT: GLenum = 0x934A;
pub static TRANSFORM_FEEDBACK_BUFFER_INDEX: GLenum = 0x934B;
pub static TRANSFORM_FEEDBACK_BUFFER_STRIDE: GLenum = 0x934C;
pub static CLEAR_TEXTURE: GLenum = 0x9365;
pub static NUM_SAMPLE_COUNTS: GLenum = 0x9380;
pub static TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE: GLenum = 0x93A0;
pub static TEXTURE_USAGE_ANGLE: GLenum = 0x93A2;
pub static FRAMEBUFFER_ATTACHMENT_ANGLE: GLenum = 0x93A3;
pub static PACK_REVERSE_ROW_ORDER_ANGLE: GLenum = 0x93A4;
pub static PROGRAM_BINARY_ANGLE: GLenum = 0x93A6;
pub static COMPRESSED_RGBA_ASTC_4x4_KHR: GLenum = 0x93B0;
pub static COMPRESSED_RGBA_ASTC_5x4_KHR: GLenum = 0x93B1;
pub static COMPRESSED_RGBA_ASTC_5x5_KHR: GLenum = 0x93B2;
pub static COMPRESSED_RGBA_ASTC_6x5_KHR: GLenum = 0x93B3;
pub static COMPRESSED_RGBA_ASTC_6x6_KHR: GLenum = 0x93B4;
pub static COMPRESSED_RGBA_ASTC_8x5_KHR: GLenum = 0x93B5;
pub static COMPRESSED_RGBA_ASTC_8x6_KHR: GLenum = 0x93B6;
pub static COMPRESSED_RGBA_ASTC_8x8_KHR: GLenum = 0x93B7;
pub static COMPRESSED_RGBA_ASTC_10x5_KHR: GLenum = 0x93B8;
pub static COMPRESSED_RGBA_ASTC_10x6_KHR: GLenum = 0x93B9;
pub static COMPRESSED_RGBA_ASTC_10x8_KHR: GLenum = 0x93BA;
pub static COMPRESSED_RGBA_ASTC_10x10_KHR: GLenum = 0x93BB;
pub static COMPRESSED_RGBA_ASTC_12x10_KHR: GLenum = 0x93BC;
pub static COMPRESSED_RGBA_ASTC_12x12_KHR: GLenum = 0x93BD;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GLenum = 0x93D0;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GLenum = 0x93D1;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GLenum = 0x93D2;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GLenum = 0x93D3;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GLenum = 0x93D4;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GLenum = 0x93D5;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GLenum = 0x93D6;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GLenum = 0x93D7;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GLenum = 0x93D8;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GLenum = 0x93D9;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: GLenum = 0x93DA;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GLenum = 0x93DB;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GLenum = 0x93DC;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GLenum = 0x93DD;
pub static RASTER_POSITION_UNCLIPPED_IBM: GLenum = 0x19262;
pub static CULL_VERTEX_IBM: GLenum = 103050;
pub static ALL_STATIC_DATA_IBM: GLenum = 103060;
pub static STATIC_VERTEX_ARRAY_IBM: GLenum = 103061;
pub static VERTEX_ARRAY_LIST_IBM: GLenum = 103070;
pub static NORMAL_ARRAY_LIST_IBM: GLenum = 103071;
pub static COLOR_ARRAY_LIST_IBM: GLenum = 103072;
pub static INDEX_ARRAY_LIST_IBM: GLenum = 103073;
pub static TEXTURE_COORD_ARRAY_LIST_IBM: GLenum = 103074;
pub static EDGE_FLAG_ARRAY_LIST_IBM: GLenum = 103075;
pub static FOG_COORDINATE_ARRAY_LIST_IBM: GLenum = 103076;
pub static SECONDARY_COLOR_ARRAY_LIST_IBM: GLenum = 103077;
pub static VERTEX_ARRAY_LIST_STRIDE_IBM: GLenum = 103080;
pub static NORMAL_ARRAY_LIST_STRIDE_IBM: GLenum = 103081;
pub static COLOR_ARRAY_LIST_STRIDE_IBM: GLenum = 103082;
pub static INDEX_ARRAY_LIST_STRIDE_IBM: GLenum = 103083;
pub static TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM: GLenum = 103084;
pub static EDGE_FLAG_ARRAY_LIST_STRIDE_IBM: GLenum = 103085;
pub static FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM: GLenum = 103086;
pub static SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM: GLenum = 103087;
pub static PREFER_DOUBLEBUFFER_HINT_PGI: GLenum = 0x1A1F8;
pub static CONSERVE_MEMORY_HINT_PGI: GLenum = 0x1A1FD;
pub static RECLAIM_MEMORY_HINT_PGI: GLenum = 0x1A1FE;
pub static NATIVE_GRAPHICS_HANDLE_PGI: GLenum = 0x1A202;
pub static NATIVE_GRAPHICS_BEGIN_HINT_PGI: GLenum = 0x1A203;
pub static NATIVE_GRAPHICS_END_HINT_PGI: GLenum = 0x1A204;
pub static ALWAYS_FAST_HINT_PGI: GLenum = 0x1A20C;
pub static ALWAYS_SOFT_HINT_PGI: GLenum = 0x1A20D;
pub static ALLOW_DRAW_OBJ_HINT_PGI: GLenum = 0x1A20E;
pub static ALLOW_DRAW_WIN_HINT_PGI: GLenum = 0x1A20F;
pub static ALLOW_DRAW_FRG_HINT_PGI: GLenum = 0x1A210;
pub static ALLOW_DRAW_MEM_HINT_PGI: GLenum = 0x1A211;
pub static STRICT_DEPTHFUNC_HINT_PGI: GLenum = 0x1A216;
pub static STRICT_LIGHTING_HINT_PGI: GLenum = 0x1A217;
pub static STRICT_SCISSOR_HINT_PGI: GLenum = 0x1A218;
pub static FULL_STIPPLE_HINT_PGI: GLenum = 0x1A219;
pub static CLIP_NEAR_HINT_PGI: GLenum = 0x1A220;
pub static CLIP_FAR_HINT_PGI: GLenum = 0x1A221;
pub static WIDE_LINE_HINT_PGI: GLenum = 0x1A222;
pub static BACK_NORMALS_HINT_PGI: GLenum = 0x1A223;
pub static VERTEX_DATA_HINT_PGI: GLenum = 0x1A22A;
pub static VERTEX_CONSISTENT_HINT_PGI: GLenum = 0x1A22B;
pub static MATERIAL_SIDE_HINT_PGI: GLenum = 0x1A22C;
pub static MAX_VERTEX_HINT_PGI: GLenum = 0x1A22D;
pub static MAX_CLIP_PLANES_IMG: GLenum = 0x0D32;
pub static TEXTURE_GEN_MODE_OES: GLenum = 0x2500;
pub static CLIP_PLANE0_IMG: GLenum = 0x3000;
pub static CLIP_PLANE1_IMG: GLenum = 0x3001;
pub static CLIP_PLANE2_IMG: GLenum = 0x3002;
pub static CLIP_PLANE3_IMG: GLenum = 0x3003;
pub static CLIP_PLANE4_IMG: GLenum = 0x3004;
pub static CLIP_PLANE5_IMG: GLenum = 0x3005;
pub static ALPHA8_OES: GLenum = 0x803C;
pub static LUMINANCE8_OES: GLenum = 0x8040;
pub static LUMINANCE4_ALPHA4_OES: GLenum = 0x8043;
pub static LUMINANCE8_ALPHA8_OES: GLenum = 0x8045;
pub static RGB8_OES: GLenum = 0x8051;
pub static TEXTURE_BINDING_3D_OES: GLenum = 0x806A;
pub static BGRA_IMG: GLenum = 0x80E1;
pub static TEXTURE_MAX_LEVEL_APPLE: GLenum = 0x813D;
pub static FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: GLenum = 0x8210;
pub static R32F_EXT: GLenum = 0x822E;
pub static RG32F_EXT: GLenum = 0x8230;
pub static LOSE_CONTEXT_ON_RESET_EXT: GLenum = 0x8252;
pub static GUILTY_CONTEXT_RESET_EXT: GLenum = 0x8253;
pub static INNOCENT_CONTEXT_RESET_EXT: GLenum = 0x8254;
pub static UNKNOWN_CONTEXT_RESET_EXT: GLenum = 0x8255;
pub static RESET_NOTIFICATION_STRATEGY_EXT: GLenum = 0x8256;
pub static NO_RESET_NOTIFICATION_EXT: GLenum = 0x8261;
pub static UNSIGNED_SHORT_4_4_4_4_REV_IMG: GLenum = 0x8365;
pub static VERTEX_ARRAY_BINDING_OES: GLenum = 0x85B5;
pub static RGBA32F_EXT: GLenum = 0x8814;
pub static RGB32F_EXT: GLenum = 0x8815;
pub static ALPHA32F_EXT: GLenum = 0x8816;
pub static LUMINANCE32F_EXT: GLenum = 0x8818;
pub static LUMINANCE_ALPHA32F_EXT: GLenum = 0x8819;
pub static ALPHA16F_EXT: GLenum = 0x881C;
pub static LUMINANCE16F_EXT: GLenum = 0x881E;
pub static LUMINANCE_ALPHA16F_EXT: GLenum = 0x881F;
pub static DRAW_FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_APPLE: GLenum = 0x8CA6;
pub static READ_FRAMEBUFFER_APPLE: GLenum = 0x8CA8;
pub static DRAW_FRAMEBUFFER_APPLE: GLenum = 0x8CA9;
pub static READ_FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_APPLE: GLenum = 0x8CAA;
pub static RENDERBUFFER_SAMPLES_APPLE: GLenum = 0x8CAB;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE: GLenum = 0x8D56;
pub static MAX_SAMPLES_APPLE: GLenum = 0x8D57;
pub static CONTEXT_ROBUST_ACCESS_EXT: GLenum = 0x90F3;
pub static TEXTURE_IMMUTABLE_FORMAT_EXT: GLenum = 0x912F;
pub static BGRA8_EXT: GLenum = 0x93A1;

#[inline] pub fn Accum(op: GLenum, value: GLfloat) -> c_void { unsafe { storage::Accum(op, value) } }
#[inline] pub fn AccumxOES(op: GLenum, value: GLfixed) -> c_void { unsafe { storage::AccumxOES(op, value) } }
#[inline] pub fn ActiveProgramEXT(program: GLuint) -> c_void { unsafe { storage::ActiveProgramEXT(program) } }
#[inline] pub fn ActiveShaderProgram(pipeline: GLuint, program: GLuint) -> c_void { unsafe { storage::ActiveShaderProgram(pipeline, program) } }
#[inline] pub fn ActiveShaderProgramEXT(pipeline: GLuint, program: GLuint) -> c_void { unsafe { storage::ActiveShaderProgramEXT(pipeline, program) } }
#[inline] pub fn ActiveStencilFaceEXT(face: GLenum) -> c_void { unsafe { storage::ActiveStencilFaceEXT(face) } }
#[inline] pub fn ActiveTexture(texture: GLenum) -> c_void { unsafe { storage::ActiveTexture(texture) } }
#[inline] pub fn ActiveTextureARB(texture: GLenum) -> c_void { unsafe { storage::ActiveTextureARB(texture) } }
#[inline] pub fn ActiveVaryingNV(program: GLuint, name: *GLchar) -> c_void { unsafe { storage::ActiveVaryingNV(program, name) } }
#[inline] pub fn AlphaFragmentOp1ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void { unsafe { storage::AlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod) } }
#[inline] pub fn AlphaFragmentOp2ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void { unsafe { storage::AlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) } }
#[inline] pub fn AlphaFragmentOp3ATI(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void { unsafe { storage::AlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) } }
#[inline] pub fn AlphaFunc(func: GLenum, ref_: GLfloat) -> c_void { unsafe { storage::AlphaFunc(func, ref_) } }
#[inline] pub fn AlphaFuncQCOM(func: GLenum, ref_: GLclampf) -> c_void { unsafe { storage::AlphaFuncQCOM(func, ref_) } }
#[inline] pub fn AlphaFuncx(func: GLenum, ref_: GLfixed) -> c_void { unsafe { storage::AlphaFuncx(func, ref_) } }
#[inline] pub fn AlphaFuncxOES(func: GLenum, ref_: GLfixed) -> c_void { unsafe { storage::AlphaFuncxOES(func, ref_) } }
#[inline] pub fn ApplyTextureEXT(mode: GLenum) -> c_void { unsafe { storage::ApplyTextureEXT(mode) } }
#[inline] pub fn AreProgramsResidentNV(n: GLsizei, programs: *GLuint, residences: *GLboolean) -> GLboolean { unsafe { storage::AreProgramsResidentNV(n, programs, residences) } }
#[inline] pub fn AreTexturesResident(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean { unsafe { storage::AreTexturesResident(n, textures, residences) } }
#[inline] pub fn AreTexturesResidentEXT(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean { unsafe { storage::AreTexturesResidentEXT(n, textures, residences) } }
#[inline] pub fn ArrayElement(i: GLint) -> c_void { unsafe { storage::ArrayElement(i) } }
#[inline] pub fn ArrayElementEXT(i: GLint) -> c_void { unsafe { storage::ArrayElementEXT(i) } }
#[inline] pub fn ArrayObjectATI(array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { storage::ArrayObjectATI(array, size, type_, stride, buffer, offset) } }
#[inline] pub fn AsyncMarkerSGIX(marker: GLuint) -> c_void { unsafe { storage::AsyncMarkerSGIX(marker) } }
#[inline] pub fn AttachObjectARB(containerObj: GLhandleARB, obj: GLhandleARB) -> c_void { unsafe { storage::AttachObjectARB(containerObj, obj) } }
#[inline] pub fn AttachShader(program: GLuint, shader: GLuint) -> c_void { unsafe { storage::AttachShader(program, shader) } }
#[inline] pub fn Begin(mode: GLenum) -> c_void { unsafe { storage::Begin(mode) } }
#[inline] pub fn BeginConditionalRender(id: GLuint, mode: GLenum) -> c_void { unsafe { storage::BeginConditionalRender(id, mode) } }
#[inline] pub fn BeginConditionalRenderNV(id: GLuint, mode: GLenum) -> c_void { unsafe { storage::BeginConditionalRenderNV(id, mode) } }
#[inline] pub fn BeginConditionalRenderNVX(id: GLuint) -> c_void { unsafe { storage::BeginConditionalRenderNVX(id) } }
#[inline] pub unsafe fn BeginFragmentShaderATI() -> c_void { storage::BeginFragmentShaderATI() }
#[inline] pub fn BeginOcclusionQueryNV(id: GLuint) -> c_void { unsafe { storage::BeginOcclusionQueryNV(id) } }
#[inline] pub fn BeginPerfMonitorAMD(monitor: GLuint) -> c_void { unsafe { storage::BeginPerfMonitorAMD(monitor) } }
#[inline] pub fn BeginQuery(target: GLenum, id: GLuint) -> c_void { unsafe { storage::BeginQuery(target, id) } }
#[inline] pub fn BeginQueryARB(target: GLenum, id: GLuint) -> c_void { unsafe { storage::BeginQueryARB(target, id) } }
#[inline] pub fn BeginQueryEXT(target: GLenum, id: GLuint) -> c_void { unsafe { storage::BeginQueryEXT(target, id) } }
#[inline] pub fn BeginQueryIndexed(target: GLenum, index: GLuint, id: GLuint) -> c_void { unsafe { storage::BeginQueryIndexed(target, index, id) } }
#[inline] pub fn BeginTransformFeedback(primitiveMode: GLenum) -> c_void { unsafe { storage::BeginTransformFeedback(primitiveMode) } }
#[inline] pub fn BeginTransformFeedbackEXT(primitiveMode: GLenum) -> c_void { unsafe { storage::BeginTransformFeedbackEXT(primitiveMode) } }
#[inline] pub fn BeginTransformFeedbackNV(primitiveMode: GLenum) -> c_void { unsafe { storage::BeginTransformFeedbackNV(primitiveMode) } }
#[inline] pub unsafe fn BeginVertexShaderEXT() -> c_void { storage::BeginVertexShaderEXT() }
#[inline] pub fn BeginVideoCaptureNV(video_capture_slot: GLuint) -> c_void { unsafe { storage::BeginVideoCaptureNV(video_capture_slot) } }
#[inline] pub fn BindAttribLocation(program: GLuint, index: GLuint, name: *GLchar) -> c_void { unsafe { storage::BindAttribLocation(program, index, name) } }
#[inline] pub fn BindAttribLocationARB(programObj: GLhandleARB, index: GLuint, name: *GLcharARB) -> c_void { unsafe { storage::BindAttribLocationARB(programObj, index, name) } }
#[inline] pub fn BindBuffer(target: GLenum, buffer: GLuint) -> c_void { unsafe { storage::BindBuffer(target, buffer) } }
#[inline] pub fn BindBufferARB(target: GLenum, buffer: GLuint) -> c_void { unsafe { storage::BindBufferARB(target, buffer) } }
#[inline] pub fn BindBufferBase(target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { storage::BindBufferBase(target, index, buffer) } }
#[inline] pub fn BindBufferBaseEXT(target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { storage::BindBufferBaseEXT(target, index, buffer) } }
#[inline] pub fn BindBufferBaseNV(target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { storage::BindBufferBaseNV(target, index, buffer) } }
#[inline] pub fn BindBufferOffsetEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void { unsafe { storage::BindBufferOffsetEXT(target, index, buffer, offset) } }
#[inline] pub fn BindBufferOffsetNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void { unsafe { storage::BindBufferOffsetNV(target, index, buffer, offset) } }
#[inline] pub fn BindBufferRange(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { storage::BindBufferRange(target, index, buffer, offset, size) } }
#[inline] pub fn BindBufferRangeEXT(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { storage::BindBufferRangeEXT(target, index, buffer, offset, size) } }
#[inline] pub fn BindBufferRangeNV(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { storage::BindBufferRangeNV(target, index, buffer, offset, size) } }
#[inline] pub fn BindBuffersBase(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) -> c_void { unsafe { storage::BindBuffersBase(target, first, count, buffers) } }
#[inline] pub fn BindBuffersRange(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) -> c_void { unsafe { storage::BindBuffersRange(target, first, count, buffers, offsets, sizes) } }
#[inline] pub fn BindFragDataLocation(program: GLuint, color: GLuint, name: *GLchar) -> c_void { unsafe { storage::BindFragDataLocation(program, color, name) } }
#[inline] pub fn BindFragDataLocationEXT(program: GLuint, color: GLuint, name: *GLchar) -> c_void { unsafe { storage::BindFragDataLocationEXT(program, color, name) } }
#[inline] pub fn BindFragDataLocationIndexed(program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) -> c_void { unsafe { storage::BindFragDataLocationIndexed(program, colorNumber, index, name) } }
#[inline] pub fn BindFragmentShaderATI(id: GLuint) -> c_void { unsafe { storage::BindFragmentShaderATI(id) } }
#[inline] pub fn BindFramebuffer(target: GLenum, framebuffer: GLuint) -> c_void { unsafe { storage::BindFramebuffer(target, framebuffer) } }
#[inline] pub fn BindFramebufferEXT(target: GLenum, framebuffer: GLuint) -> c_void { unsafe { storage::BindFramebufferEXT(target, framebuffer) } }
#[inline] pub fn BindFramebufferOES(target: GLenum, framebuffer: GLuint) -> c_void { unsafe { storage::BindFramebufferOES(target, framebuffer) } }
#[inline] pub fn BindImageTexture(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> c_void { unsafe { storage::BindImageTexture(unit, texture, level, layered, layer, access, format) } }
#[inline] pub fn BindImageTextureEXT(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) -> c_void { unsafe { storage::BindImageTextureEXT(index, texture, level, layered, layer, access, format) } }
#[inline] pub fn BindImageTextures(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void { unsafe { storage::BindImageTextures(first, count, textures) } }
#[inline] pub fn BindLightParameterEXT(light: GLenum, value: GLenum) -> GLuint { unsafe { storage::BindLightParameterEXT(light, value) } }
#[inline] pub fn BindMaterialParameterEXT(face: GLenum, value: GLenum) -> GLuint { unsafe { storage::BindMaterialParameterEXT(face, value) } }
#[inline] pub fn BindMultiTextureEXT(texunit: GLenum, target: GLenum, texture: GLuint) -> c_void { unsafe { storage::BindMultiTextureEXT(texunit, target, texture) } }
#[inline] pub fn BindParameterEXT(value: GLenum) -> GLuint { unsafe { storage::BindParameterEXT(value) } }
#[inline] pub fn BindProgramARB(target: GLenum, program: GLuint) -> c_void { unsafe { storage::BindProgramARB(target, program) } }
#[inline] pub fn BindProgramNV(target: GLenum, id: GLuint) -> c_void { unsafe { storage::BindProgramNV(target, id) } }
#[inline] pub fn BindProgramPipeline(pipeline: GLuint) -> c_void { unsafe { storage::BindProgramPipeline(pipeline) } }
#[inline] pub fn BindProgramPipelineEXT(pipeline: GLuint) -> c_void { unsafe { storage::BindProgramPipelineEXT(pipeline) } }
#[inline] pub fn BindRenderbuffer(target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::BindRenderbuffer(target, renderbuffer) } }
#[inline] pub fn BindRenderbufferEXT(target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::BindRenderbufferEXT(target, renderbuffer) } }
#[inline] pub fn BindRenderbufferOES(target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::BindRenderbufferOES(target, renderbuffer) } }
#[inline] pub fn BindSampler(unit: GLuint, sampler: GLuint) -> c_void { unsafe { storage::BindSampler(unit, sampler) } }
#[inline] pub fn BindSamplers(first: GLuint, count: GLsizei, samplers: *GLuint) -> c_void { unsafe { storage::BindSamplers(first, count, samplers) } }
#[inline] pub fn BindTexGenParameterEXT(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint { unsafe { storage::BindTexGenParameterEXT(unit, coord, value) } }
#[inline] pub fn BindTexture(target: GLenum, texture: GLuint) -> c_void { unsafe { storage::BindTexture(target, texture) } }
#[inline] pub fn BindTextureEXT(target: GLenum, texture: GLuint) -> c_void { unsafe { storage::BindTextureEXT(target, texture) } }
#[inline] pub fn BindTextureUnitParameterEXT(unit: GLenum, value: GLenum) -> GLuint { unsafe { storage::BindTextureUnitParameterEXT(unit, value) } }
#[inline] pub fn BindTextures(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void { unsafe { storage::BindTextures(first, count, textures) } }
#[inline] pub fn BindTransformFeedback(target: GLenum, id: GLuint) -> c_void { unsafe { storage::BindTransformFeedback(target, id) } }
#[inline] pub fn BindTransformFeedbackNV(target: GLenum, id: GLuint) -> c_void { unsafe { storage::BindTransformFeedbackNV(target, id) } }
#[inline] pub fn BindVertexArray(array: GLuint) -> c_void { unsafe { storage::BindVertexArray(array) } }
#[inline] pub fn BindVertexArrayAPPLE(array: GLuint) -> c_void { unsafe { storage::BindVertexArrayAPPLE(array) } }
#[inline] pub fn BindVertexArrayOES(array: GLuint) -> c_void { unsafe { storage::BindVertexArrayOES(array) } }
#[inline] pub fn BindVertexBuffer(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void { unsafe { storage::BindVertexBuffer(bindingindex, buffer, offset, stride) } }
#[inline] pub fn BindVertexBuffers(first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) -> c_void { unsafe { storage::BindVertexBuffers(first, count, buffers, offsets, strides) } }
#[inline] pub fn BindVertexShaderEXT(id: GLuint) -> c_void { unsafe { storage::BindVertexShaderEXT(id) } }
#[inline] pub fn BindVideoCaptureStreamBufferNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) -> c_void { unsafe { storage::BindVideoCaptureStreamBufferNV(video_capture_slot, stream, frame_region, offset) } }
#[inline] pub fn BindVideoCaptureStreamTextureNV(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) -> c_void { unsafe { storage::BindVideoCaptureStreamTextureNV(video_capture_slot, stream, frame_region, target, texture) } }
#[inline] pub fn Binormal3bEXT(bx: GLbyte, by: GLbyte, bz: GLbyte) -> c_void { unsafe { storage::Binormal3bEXT(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3bvEXT(v: *GLbyte) -> c_void { storage::Binormal3bvEXT(v) }
#[inline] pub fn Binormal3dEXT(bx: GLdouble, by: GLdouble, bz: GLdouble) -> c_void { unsafe { storage::Binormal3dEXT(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3dvEXT(v: *GLdouble) -> c_void { storage::Binormal3dvEXT(v) }
#[inline] pub fn Binormal3fEXT(bx: GLfloat, by: GLfloat, bz: GLfloat) -> c_void { unsafe { storage::Binormal3fEXT(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3fvEXT(v: *GLfloat) -> c_void { storage::Binormal3fvEXT(v) }
#[inline] pub fn Binormal3iEXT(bx: GLint, by: GLint, bz: GLint) -> c_void { unsafe { storage::Binormal3iEXT(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3ivEXT(v: *GLint) -> c_void { storage::Binormal3ivEXT(v) }
#[inline] pub fn Binormal3sEXT(bx: GLshort, by: GLshort, bz: GLshort) -> c_void { unsafe { storage::Binormal3sEXT(bx, by, bz) } }
#[inline] pub unsafe fn Binormal3svEXT(v: *GLshort) -> c_void { storage::Binormal3svEXT(v) }
#[inline] pub fn BinormalPointerEXT(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::BinormalPointerEXT(type_, stride, pointer) } }
#[inline] pub fn Bitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) -> c_void { unsafe { storage::Bitmap(width, height, xorig, yorig, xmove, ymove, bitmap) } }
#[inline] pub fn BitmapxOES(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *GLubyte) -> c_void { unsafe { storage::BitmapxOES(width, height, xorig, yorig, xmove, ymove, bitmap) } }
#[inline] pub fn BlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { storage::BlendColor(red, green, blue, alpha) } }
#[inline] pub fn BlendColorEXT(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { storage::BlendColorEXT(red, green, blue, alpha) } }
#[inline] pub fn BlendColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { storage::BlendColorxOES(red, green, blue, alpha) } }
#[inline] pub fn BlendEquation(mode: GLenum) -> c_void { unsafe { storage::BlendEquation(mode) } }
#[inline] pub fn BlendEquationEXT(mode: GLenum) -> c_void { unsafe { storage::BlendEquationEXT(mode) } }
#[inline] pub fn BlendEquationIndexedAMD(buf: GLuint, mode: GLenum) -> c_void { unsafe { storage::BlendEquationIndexedAMD(buf, mode) } }
#[inline] pub fn BlendEquationOES(mode: GLenum) -> c_void { unsafe { storage::BlendEquationOES(mode) } }
#[inline] pub fn BlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { storage::BlendEquationSeparate(modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparateEXT(modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { storage::BlendEquationSeparateEXT(modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparateIndexedAMD(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { storage::BlendEquationSeparateIndexedAMD(buf, modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparateOES(modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { storage::BlendEquationSeparateOES(modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparatei(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { storage::BlendEquationSeparatei(buf, modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationSeparateiARB(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { storage::BlendEquationSeparateiARB(buf, modeRGB, modeAlpha) } }
#[inline] pub fn BlendEquationi(buf: GLuint, mode: GLenum) -> c_void { unsafe { storage::BlendEquationi(buf, mode) } }
#[inline] pub fn BlendEquationiARB(buf: GLuint, mode: GLenum) -> c_void { unsafe { storage::BlendEquationiARB(buf, mode) } }
#[inline] pub fn BlendFunc(sfactor: GLenum, dfactor: GLenum) -> c_void { unsafe { storage::BlendFunc(sfactor, dfactor) } }
#[inline] pub fn BlendFuncIndexedAMD(buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { storage::BlendFuncIndexedAMD(buf, src, dst) } }
#[inline] pub fn BlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { storage::BlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
#[inline] pub fn BlendFuncSeparateEXT(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { storage::BlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
#[inline] pub fn BlendFuncSeparateINGR(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { storage::BlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
#[inline] pub fn BlendFuncSeparateIndexedAMD(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { storage::BlendFuncSeparateIndexedAMD(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
#[inline] pub fn BlendFuncSeparateOES(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { storage::BlendFuncSeparateOES(srcRGB, dstRGB, srcAlpha, dstAlpha) } }
#[inline] pub fn BlendFuncSeparatei(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { storage::BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
#[inline] pub fn BlendFuncSeparateiARB(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { storage::BlendFuncSeparateiARB(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
#[inline] pub fn BlendFunci(buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { storage::BlendFunci(buf, src, dst) } }
#[inline] pub fn BlendFunciARB(buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { storage::BlendFunciARB(buf, src, dst) } }
#[inline] pub fn BlendParameteriNV(pname: GLenum, value: GLint) -> c_void { unsafe { storage::BlendParameteriNV(pname, value) } }
#[inline] pub unsafe fn BlendBarrierNV() -> c_void { storage::BlendBarrierNV() }
#[inline] pub fn BlitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { storage::BlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
#[inline] pub fn BlitFramebufferANGLE(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { storage::BlitFramebufferANGLE(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
#[inline] pub fn BlitFramebufferEXT(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { storage::BlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
#[inline] pub fn BlitFramebufferNV(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { storage::BlitFramebufferNV(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
#[inline] pub fn BufferAddressRangeNV(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) -> c_void { unsafe { storage::BufferAddressRangeNV(pname, index, address, length) } }
#[inline] pub fn BufferData(target: GLenum, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void { unsafe { storage::BufferData(target, size, data, usage) } }
#[inline] pub fn BufferDataARB(target: GLenum, size: GLsizeiptrARB, data: *GLvoid, usage: GLenum) -> c_void { unsafe { storage::BufferDataARB(target, size, data, usage) } }
#[inline] pub fn BufferParameteriAPPLE(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::BufferParameteriAPPLE(target, pname, param) } }
#[inline] pub fn BufferStorage(target: GLenum, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void { unsafe { storage::BufferStorage(target, size, data, flags) } }
#[inline] pub fn BufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { unsafe { storage::BufferSubData(target, offset, size, data) } }
#[inline] pub fn BufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void { unsafe { storage::BufferSubDataARB(target, offset, size, data) } }
#[inline] pub fn CallList(list: GLuint) -> c_void { unsafe { storage::CallList(list) } }
#[inline] pub fn CallLists(n: GLsizei, type_: GLenum, lists: *GLvoid) -> c_void { unsafe { storage::CallLists(n, type_, lists) } }
#[inline] pub fn CheckFramebufferStatus(target: GLenum) -> GLenum { unsafe { storage::CheckFramebufferStatus(target) } }
#[inline] pub fn CheckFramebufferStatusEXT(target: GLenum) -> GLenum { unsafe { storage::CheckFramebufferStatusEXT(target) } }
#[inline] pub fn CheckFramebufferStatusOES(target: GLenum) -> GLenum { unsafe { storage::CheckFramebufferStatusOES(target) } }
#[inline] pub fn CheckNamedFramebufferStatusEXT(framebuffer: GLuint, target: GLenum) -> GLenum { unsafe { storage::CheckNamedFramebufferStatusEXT(framebuffer, target) } }
#[inline] pub fn ClampColor(target: GLenum, clamp: GLenum) -> c_void { unsafe { storage::ClampColor(target, clamp) } }
#[inline] pub fn ClampColorARB(target: GLenum, clamp: GLenum) -> c_void { unsafe { storage::ClampColorARB(target, clamp) } }
#[inline] pub fn Clear(mask: GLbitfield) -> c_void { unsafe { storage::Clear(mask) } }
#[inline] pub fn ClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { storage::ClearAccum(red, green, blue, alpha) } }
#[inline] pub fn ClearAccumxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { storage::ClearAccumxOES(red, green, blue, alpha) } }
#[inline] pub fn ClearBufferData(target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { storage::ClearBufferData(target, internalformat, format, type_, data) } }
#[inline] pub fn ClearBufferSubData(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { storage::ClearBufferSubData(target, internalformat, offset, size, format, type_, data) } }
#[inline] pub fn ClearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> c_void { unsafe { storage::ClearBufferfi(buffer, drawbuffer, depth, stencil) } }
#[inline] pub fn ClearBufferfv(buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> c_void { unsafe { storage::ClearBufferfv(buffer, drawbuffer, value) } }
#[inline] pub fn ClearBufferiv(buffer: GLenum, drawbuffer: GLint, value: *GLint) -> c_void { unsafe { storage::ClearBufferiv(buffer, drawbuffer, value) } }
#[inline] pub fn ClearBufferuiv(buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> c_void { unsafe { storage::ClearBufferuiv(buffer, drawbuffer, value) } }
#[inline] pub fn ClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { storage::ClearColor(red, green, blue, alpha) } }
#[inline] pub fn ClearColorIiEXT(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void { unsafe { storage::ClearColorIiEXT(red, green, blue, alpha) } }
#[inline] pub fn ClearColorIuiEXT(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void { unsafe { storage::ClearColorIuiEXT(red, green, blue, alpha) } }
#[inline] pub fn ClearColorx(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { storage::ClearColorx(red, green, blue, alpha) } }
#[inline] pub fn ClearColorxOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { storage::ClearColorxOES(red, green, blue, alpha) } }
#[inline] pub fn ClearDepth(depth: GLdouble) -> c_void { unsafe { storage::ClearDepth(depth) } }
#[inline] pub fn ClearDepthdNV(depth: GLdouble) -> c_void { unsafe { storage::ClearDepthdNV(depth) } }
#[inline] pub fn ClearDepthf(d: GLfloat) -> c_void { unsafe { storage::ClearDepthf(d) } }
#[inline] pub fn ClearDepthfOES(depth: GLclampf) -> c_void { unsafe { storage::ClearDepthfOES(depth) } }
#[inline] pub fn ClearDepthx(depth: GLfixed) -> c_void { unsafe { storage::ClearDepthx(depth) } }
#[inline] pub fn ClearDepthxOES(depth: GLfixed) -> c_void { unsafe { storage::ClearDepthxOES(depth) } }
#[inline] pub fn ClearIndex(c: GLfloat) -> c_void { unsafe { storage::ClearIndex(c) } }
#[inline] pub fn ClearNamedBufferDataEXT(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { storage::ClearNamedBufferDataEXT(buffer, internalformat, format, type_, data) } }
#[inline] pub fn ClearNamedBufferSubDataEXT(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, offset: GLsizeiptr, size: GLsizeiptr, data: *c_void) -> c_void { unsafe { storage::ClearNamedBufferSubDataEXT(buffer, internalformat, format, type_, offset, size, data) } }
#[inline] pub fn ClearStencil(s: GLint) -> c_void { unsafe { storage::ClearStencil(s) } }
#[inline] pub fn ClearTexImage(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { storage::ClearTexImage(texture, level, format, type_, data) } }
#[inline] pub fn ClearTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *c_void) -> c_void { unsafe { storage::ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, data) } }
#[inline] pub fn ClientActiveTexture(texture: GLenum) -> c_void { unsafe { storage::ClientActiveTexture(texture) } }
#[inline] pub fn ClientActiveTextureARB(texture: GLenum) -> c_void { unsafe { storage::ClientActiveTextureARB(texture) } }
#[inline] pub fn ClientActiveVertexStreamATI(stream: GLenum) -> c_void { unsafe { storage::ClientActiveVertexStreamATI(stream) } }
#[inline] pub fn ClientAttribDefaultEXT(mask: GLbitfield) -> c_void { unsafe { storage::ClientAttribDefaultEXT(mask) } }
#[inline] pub fn ClientWaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum { unsafe { storage::ClientWaitSync(sync, flags, timeout) } }
#[inline] pub fn ClientWaitSyncAPPLE(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum { unsafe { storage::ClientWaitSyncAPPLE(sync, flags, timeout) } }
#[inline] pub fn ClipControlARB(origin: GLenum, depth: GLenum) -> c_void { unsafe { storage::ClipControlARB(origin, depth) } }
#[inline] pub fn ClipPlane(plane: GLenum, equation: *GLdouble) -> c_void { unsafe { storage::ClipPlane(plane, equation) } }
#[inline] pub fn ClipPlanef(p: GLenum, eqn: *GLfloat) -> c_void { unsafe { storage::ClipPlanef(p, eqn) } }
#[inline] pub fn ClipPlanefIMG(p: GLenum, eqn: *GLfloat) -> c_void { unsafe { storage::ClipPlanefIMG(p, eqn) } }
#[inline] pub fn ClipPlanefOES(plane: GLenum, equation: *GLfloat) -> c_void { unsafe { storage::ClipPlanefOES(plane, equation) } }
#[inline] pub fn ClipPlanex(plane: GLenum, equation: *GLfixed) -> c_void { unsafe { storage::ClipPlanex(plane, equation) } }
#[inline] pub fn ClipPlanexIMG(p: GLenum, eqn: *GLfixed) -> c_void { unsafe { storage::ClipPlanexIMG(p, eqn) } }
#[inline] pub fn ClipPlanexOES(plane: GLenum, equation: *GLfixed) -> c_void { unsafe { storage::ClipPlanexOES(plane, equation) } }
#[inline] pub fn Color3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { storage::Color3b(red, green, blue) } }
#[inline] pub unsafe fn Color3bv(v: *GLbyte) -> c_void { storage::Color3bv(v) }
#[inline] pub fn Color3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { storage::Color3d(red, green, blue) } }
#[inline] pub unsafe fn Color3dv(v: *GLdouble) -> c_void { storage::Color3dv(v) }
#[inline] pub fn Color3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { storage::Color3f(red, green, blue) } }
#[inline] pub fn Color3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::Color3fVertex3fSUN(r, g, b, x, y, z) } }
#[inline] pub unsafe fn Color3fVertex3fvSUN(c: *GLfloat, v: *GLfloat) -> c_void { storage::Color3fVertex3fvSUN(c, v) }
#[inline] pub unsafe fn Color3fv(v: *GLfloat) -> c_void { storage::Color3fv(v) }
#[inline] pub fn Color3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void { unsafe { storage::Color3hNV(red, green, blue) } }
#[inline] pub unsafe fn Color3hvNV(v: *GLhalfNV) -> c_void { storage::Color3hvNV(v) }
#[inline] pub fn Color3i(red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { storage::Color3i(red, green, blue) } }
#[inline] pub unsafe fn Color3iv(v: *GLint) -> c_void { storage::Color3iv(v) }
#[inline] pub fn Color3s(red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { storage::Color3s(red, green, blue) } }
#[inline] pub unsafe fn Color3sv(v: *GLshort) -> c_void { storage::Color3sv(v) }
#[inline] pub fn Color3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { storage::Color3ub(red, green, blue) } }
#[inline] pub unsafe fn Color3ubv(v: *GLubyte) -> c_void { storage::Color3ubv(v) }
#[inline] pub fn Color3ui(red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { storage::Color3ui(red, green, blue) } }
#[inline] pub unsafe fn Color3uiv(v: *GLuint) -> c_void { storage::Color3uiv(v) }
#[inline] pub fn Color3us(red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { storage::Color3us(red, green, blue) } }
#[inline] pub unsafe fn Color3usv(v: *GLushort) -> c_void { storage::Color3usv(v) }
#[inline] pub fn Color3xOES(red: GLfixed, green: GLfixed, blue: GLfixed) -> c_void { unsafe { storage::Color3xOES(red, green, blue) } }
#[inline] pub unsafe fn Color3xvOES(components: *GLfixed) -> c_void { storage::Color3xvOES(components) }
#[inline] pub fn Color4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> c_void { unsafe { storage::Color4b(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4bv(v: *GLbyte) -> c_void { storage::Color4bv(v) }
#[inline] pub fn Color4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> c_void { unsafe { storage::Color4d(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4dv(v: *GLdouble) -> c_void { storage::Color4dv(v) }
#[inline] pub fn Color4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { storage::Color4f(red, green, blue, alpha) } }
#[inline] pub fn Color4fNormal3fVertex3fSUN(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::Color4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn Color4fNormal3fVertex3fvSUN(c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { storage::Color4fNormal3fVertex3fvSUN(c, n, v) }
#[inline] pub unsafe fn Color4fv(v: *GLfloat) -> c_void { storage::Color4fv(v) }
#[inline] pub fn Color4hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) -> c_void { unsafe { storage::Color4hNV(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4hvNV(v: *GLhalfNV) -> c_void { storage::Color4hvNV(v) }
#[inline] pub fn Color4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void { unsafe { storage::Color4i(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4iv(v: *GLint) -> c_void { storage::Color4iv(v) }
#[inline] pub fn Color4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> c_void { unsafe { storage::Color4s(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4sv(v: *GLshort) -> c_void { storage::Color4sv(v) }
#[inline] pub fn Color4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> c_void { unsafe { storage::Color4ub(red, green, blue, alpha) } }
#[inline] pub fn Color4ubVertex2fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::Color4ubVertex2fSUN(r, g, b, a, x, y) } }
#[inline] pub unsafe fn Color4ubVertex2fvSUN(c: *GLubyte, v: *GLfloat) -> c_void { storage::Color4ubVertex2fvSUN(c, v) }
#[inline] pub fn Color4ubVertex3fSUN(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::Color4ubVertex3fSUN(r, g, b, a, x, y, z) } }
#[inline] pub unsafe fn Color4ubVertex3fvSUN(c: *GLubyte, v: *GLfloat) -> c_void { storage::Color4ubVertex3fvSUN(c, v) }
#[inline] pub unsafe fn Color4ubv(v: *GLubyte) -> c_void { storage::Color4ubv(v) }
#[inline] pub fn Color4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void { unsafe { storage::Color4ui(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4uiv(v: *GLuint) -> c_void { storage::Color4uiv(v) }
#[inline] pub fn Color4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> c_void { unsafe { storage::Color4us(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4usv(v: *GLushort) -> c_void { storage::Color4usv(v) }
#[inline] pub fn Color4x(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { storage::Color4x(red, green, blue, alpha) } }
#[inline] pub fn Color4xOES(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { storage::Color4xOES(red, green, blue, alpha) } }
#[inline] pub unsafe fn Color4xvOES(components: *GLfixed) -> c_void { storage::Color4xvOES(components) }
#[inline] pub fn ColorFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::ColorFormatNV(size, type_, stride) } }
#[inline] pub fn ColorFragmentOp1ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void { unsafe { storage::ColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) } }
#[inline] pub fn ColorFragmentOp2ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void { unsafe { storage::ColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) } }
#[inline] pub fn ColorFragmentOp3ATI(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void { unsafe { storage::ColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) } }
#[inline] pub fn ColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void { unsafe { storage::ColorMask(red, green, blue, alpha) } }
#[inline] pub fn ColorMaskIndexedEXT(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void { unsafe { storage::ColorMaskIndexedEXT(index, r, g, b, a) } }
#[inline] pub fn ColorMaski(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void { unsafe { storage::ColorMaski(index, r, g, b, a) } }
#[inline] pub fn ColorMaterial(face: GLenum, mode: GLenum) -> c_void { unsafe { storage::ColorMaterial(face, mode) } }
#[inline] pub fn ColorP3ui(type_: GLenum, color: GLuint) -> c_void { unsafe { storage::ColorP3ui(type_, color) } }
#[inline] pub fn ColorP3uiv(type_: GLenum, color: *GLuint) -> c_void { unsafe { storage::ColorP3uiv(type_, color) } }
#[inline] pub fn ColorP4ui(type_: GLenum, color: GLuint) -> c_void { unsafe { storage::ColorP4ui(type_, color) } }
#[inline] pub fn ColorP4uiv(type_: GLenum, color: *GLuint) -> c_void { unsafe { storage::ColorP4uiv(type_, color) } }
#[inline] pub fn ColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::ColorPointer(size, type_, stride, pointer) } }
#[inline] pub fn ColorPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::ColorPointerEXT(size, type_, stride, count, pointer) } }
#[inline] pub fn ColorPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { storage::ColorPointerListIBM(size, type_, stride, pointer, ptrstride) } }
#[inline] pub fn ColorPointervINTEL(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { unsafe { storage::ColorPointervINTEL(size, type_, pointer) } }
#[inline] pub fn ColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { unsafe { storage::ColorSubTable(target, start, count, format, type_, data) } }
#[inline] pub fn ColorSubTableEXT(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { unsafe { storage::ColorSubTableEXT(target, start, count, format, type_, data) } }
#[inline] pub fn ColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { storage::ColorTable(target, internalformat, width, format, type_, table) } }
#[inline] pub fn ColorTableEXT(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { storage::ColorTableEXT(target, internalFormat, width, format, type_, table) } }
#[inline] pub fn ColorTableParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::ColorTableParameterfv(target, pname, params) } }
#[inline] pub fn ColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::ColorTableParameterfvSGI(target, pname, params) } }
#[inline] pub fn ColorTableParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::ColorTableParameteriv(target, pname, params) } }
#[inline] pub fn ColorTableParameterivSGI(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::ColorTableParameterivSGI(target, pname, params) } }
#[inline] pub fn ColorTableSGI(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { storage::ColorTableSGI(target, internalformat, width, format, type_, table) } }
#[inline] pub fn CombinerInputNV(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void { unsafe { storage::CombinerInputNV(stage, portion, variable, input, mapping, componentUsage) } }
#[inline] pub fn CombinerOutputNV(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) -> c_void { unsafe { storage::CombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) } }
#[inline] pub fn CombinerParameterfNV(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::CombinerParameterfNV(pname, param) } }
#[inline] pub fn CombinerParameterfvNV(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::CombinerParameterfvNV(pname, params) } }
#[inline] pub fn CombinerParameteriNV(pname: GLenum, param: GLint) -> c_void { unsafe { storage::CombinerParameteriNV(pname, param) } }
#[inline] pub fn CombinerParameterivNV(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::CombinerParameterivNV(pname, params) } }
#[inline] pub fn CombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::CombinerStageParameterfvNV(stage, pname, params) } }
#[inline] pub fn CompileShader(shader: GLuint) -> c_void { unsafe { storage::CompileShader(shader) } }
#[inline] pub fn CompileShaderARB(shaderObj: GLhandleARB) -> c_void { unsafe { storage::CompileShaderARB(shaderObj) } }
#[inline] pub fn CompileShaderIncludeARB(shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) -> c_void { unsafe { storage::CompileShaderIncludeARB(shader, count, path, length) } }
#[inline] pub fn CompressedMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedMultiTexImage1DEXT(texunit, target, level, internalformat, width, border, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedMultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedMultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedMultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) } }
#[inline] pub fn CompressedMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) } }
#[inline] pub fn CompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexImage1D(target, level, internalformat, width, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage1DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage2DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage3DARB(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data) } }
#[inline] pub fn CompressedTexImage3DOES(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexImage3DOES(target, level, internalformat, width, height, depth, border, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage1DARB(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage2DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage3DARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) } }
#[inline] pub fn CompressedTexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::CompressedTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) } }
#[inline] pub fn CompressedTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedTextureImage1DEXT(texture, target, level, internalformat, width, border, imageSize, bits) } }
#[inline] pub fn CompressedTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedTextureImage2DEXT(texture, target, level, internalformat, width, height, border, imageSize, bits) } }
#[inline] pub fn CompressedTextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedTextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) } }
#[inline] pub fn CompressedTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedTextureSubImage1DEXT(texture, target, level, xoffset, width, format, imageSize, bits) } }
#[inline] pub fn CompressedTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) } }
#[inline] pub fn CompressedTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { unsafe { storage::CompressedTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) } }
#[inline] pub fn ConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { storage::ConvolutionFilter1D(target, internalformat, width, format, type_, image) } }
#[inline] pub fn ConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { storage::ConvolutionFilter1DEXT(target, internalformat, width, format, type_, image) } }
#[inline] pub fn ConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { storage::ConvolutionFilter2D(target, internalformat, width, height, format, type_, image) } }
#[inline] pub fn ConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { storage::ConvolutionFilter2DEXT(target, internalformat, width, height, format, type_, image) } }
#[inline] pub fn ConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) -> c_void { unsafe { storage::ConvolutionParameterf(target, pname, params) } }
#[inline] pub fn ConvolutionParameterfEXT(target: GLenum, pname: GLenum, params: GLfloat) -> c_void { unsafe { storage::ConvolutionParameterfEXT(target, pname, params) } }
#[inline] pub fn ConvolutionParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::ConvolutionParameterfv(target, pname, params) } }
#[inline] pub fn ConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::ConvolutionParameterfvEXT(target, pname, params) } }
#[inline] pub fn ConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) -> c_void { unsafe { storage::ConvolutionParameteri(target, pname, params) } }
#[inline] pub fn ConvolutionParameteriEXT(target: GLenum, pname: GLenum, params: GLint) -> c_void { unsafe { storage::ConvolutionParameteriEXT(target, pname, params) } }
#[inline] pub fn ConvolutionParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::ConvolutionParameteriv(target, pname, params) } }
#[inline] pub fn ConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::ConvolutionParameterivEXT(target, pname, params) } }
#[inline] pub fn ConvolutionParameterxOES(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::ConvolutionParameterxOES(target, pname, param) } }
#[inline] pub fn ConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::ConvolutionParameterxvOES(target, pname, params) } }
#[inline] pub fn CopyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { storage::CopyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size) } }
#[inline] pub fn CopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyColorSubTable(target, start, x, y, width) } }
#[inline] pub fn CopyColorSubTableEXT(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyColorSubTableEXT(target, start, x, y, width) } }
#[inline] pub fn CopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyColorTable(target, internalformat, x, y, width) } }
#[inline] pub fn CopyColorTableSGI(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyColorTableSGI(target, internalformat, x, y, width) } }
#[inline] pub fn CopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyConvolutionFilter1D(target, internalformat, x, y, width) } }
#[inline] pub fn CopyConvolutionFilter1DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyConvolutionFilter1DEXT(target, internalformat, x, y, width) } }
#[inline] pub fn CopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyConvolutionFilter2D(target, internalformat, x, y, width, height) } }
#[inline] pub fn CopyConvolutionFilter2DEXT(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height) } }
#[inline] pub fn CopyImageSubData(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> c_void { unsafe { storage::CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) } }
#[inline] pub fn CopyImageSubDataNV(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { storage::CopyImageSubDataNV(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) } }
#[inline] pub fn CopyMultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { storage::CopyMultiTexImage1DEXT(texunit, target, level, internalformat, x, y, width, border) } }
#[inline] pub fn CopyMultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { storage::CopyMultiTexImage2DEXT(texunit, target, level, internalformat, x, y, width, height, border) } }
#[inline] pub fn CopyMultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyMultiTexSubImage1DEXT(texunit, target, level, xoffset, x, y, width) } }
#[inline] pub fn CopyMultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyMultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, x, y, width, height) } }
#[inline] pub fn CopyMultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyMultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CopyPathNV(resultPath: GLuint, srcPath: GLuint) -> c_void { unsafe { storage::CopyPathNV(resultPath, srcPath) } }
#[inline] pub fn CopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum) -> c_void { unsafe { storage::CopyPixels(x, y, width, height, type_) } }
#[inline] pub fn CopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { storage::CopyTexImage1D(target, level, internalformat, x, y, width, border) } }
#[inline] pub fn CopyTexImage1DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { storage::CopyTexImage1DEXT(target, level, internalformat, x, y, width, border) } }
#[inline] pub fn CopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { storage::CopyTexImage2D(target, level, internalformat, x, y, width, height, border) } }
#[inline] pub fn CopyTexImage2DEXT(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { storage::CopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border) } }
#[inline] pub fn CopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyTexSubImage1D(target, level, xoffset, x, y, width) } }
#[inline] pub fn CopyTexSubImage1DEXT(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyTexSubImage1DEXT(target, level, xoffset, x, y, width) } }
#[inline] pub fn CopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) } }
#[inline] pub fn CopyTexSubImage2DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height) } }
#[inline] pub fn CopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CopyTexSubImage3DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CopyTexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyTexSubImage3DOES(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CopyTextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { storage::CopyTextureImage1DEXT(texture, target, level, internalformat, x, y, width, border) } }
#[inline] pub fn CopyTextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { storage::CopyTextureImage2DEXT(texture, target, level, internalformat, x, y, width, height, border) } }
#[inline] pub fn CopyTextureLevelsAPPLE(destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) -> c_void { unsafe { storage::CopyTextureLevelsAPPLE(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) } }
#[inline] pub fn CopyTextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { storage::CopyTextureSubImage1DEXT(texture, target, level, xoffset, x, y, width) } }
#[inline] pub fn CopyTextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyTextureSubImage2DEXT(texture, target, level, xoffset, yoffset, x, y, width, height) } }
#[inline] pub fn CopyTextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::CopyTextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
#[inline] pub fn CoverFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { storage::CoverFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) } }
#[inline] pub fn CoverFillPathNV(path: GLuint, coverMode: GLenum) -> c_void { unsafe { storage::CoverFillPathNV(path, coverMode) } }
#[inline] pub fn CoverStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { storage::CoverStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) } }
#[inline] pub fn CoverStrokePathNV(path: GLuint, coverMode: GLenum) -> c_void { unsafe { storage::CoverStrokePathNV(path, coverMode) } }
#[inline] pub fn CoverageMaskNV(mask: GLboolean) -> c_void { unsafe { storage::CoverageMaskNV(mask) } }
#[inline] pub fn CoverageOperationNV(operation: GLenum) -> c_void { unsafe { storage::CoverageOperationNV(operation) } }
#[inline] pub unsafe fn CreateProgram() -> GLuint { storage::CreateProgram() }
#[inline] pub unsafe fn CreateProgramObjectARB() -> GLhandleARB { storage::CreateProgramObjectARB() }
#[inline] pub fn CreateShader(type_: GLenum) -> GLuint { unsafe { storage::CreateShader(type_) } }
#[inline] pub fn CreateShaderObjectARB(shaderType: GLenum) -> GLhandleARB { unsafe { storage::CreateShaderObjectARB(shaderType) } }
#[inline] pub fn CreateShaderProgramEXT(type_: GLenum, string: *GLchar) -> GLuint { unsafe { storage::CreateShaderProgramEXT(type_, string) } }
#[inline] pub fn CreateShaderProgramv(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint { unsafe { storage::CreateShaderProgramv(type_, count, strings) } }
#[inline] pub fn CreateShaderProgramvEXT(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint { unsafe { storage::CreateShaderProgramvEXT(type_, count, strings) } }
#[inline] pub fn CreateSyncFromCLeventARB(context: *_cl_context, event: *_cl_event, flags: GLbitfield) -> GLsync { unsafe { storage::CreateSyncFromCLeventARB(context, event, flags) } }
#[inline] pub fn CullFace(mode: GLenum) -> c_void { unsafe { storage::CullFace(mode) } }
#[inline] pub fn CullParameterdvEXT(pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::CullParameterdvEXT(pname, params) } }
#[inline] pub fn CullParameterfvEXT(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::CullParameterfvEXT(pname, params) } }
#[inline] pub fn CurrentPaletteMatrixARB(index: GLint) -> c_void { unsafe { storage::CurrentPaletteMatrixARB(index) } }
#[inline] pub fn CurrentPaletteMatrixOES(matrixpaletteindex: GLuint) -> c_void { unsafe { storage::CurrentPaletteMatrixOES(matrixpaletteindex) } }
#[inline] pub fn DebugMessageCallback(callback: GLDEBUGPROC, userParam: *c_void) -> c_void { unsafe { storage::DebugMessageCallback(callback, userParam) } }
#[inline] pub fn DebugMessageCallbackAMD(callback: GLDEBUGPROCAMD, userParam: *c_void) -> c_void { unsafe { storage::DebugMessageCallbackAMD(callback, userParam) } }
#[inline] pub fn DebugMessageCallbackARB(callback: GLDEBUGPROCARB, userParam: *c_void) -> c_void { unsafe { storage::DebugMessageCallbackARB(callback, userParam) } }
#[inline] pub fn DebugMessageCallbackKHR(callback: GLDEBUGPROCKHR, userParam: *c_void) -> c_void { unsafe { storage::DebugMessageCallbackKHR(callback, userParam) } }
#[inline] pub fn DebugMessageControl(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { unsafe { storage::DebugMessageControl(source, type_, severity, count, ids, enabled) } }
#[inline] pub fn DebugMessageControlARB(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { unsafe { storage::DebugMessageControlARB(source, type_, severity, count, ids, enabled) } }
#[inline] pub fn DebugMessageControlKHR(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { unsafe { storage::DebugMessageControlKHR(source, type_, severity, count, ids, enabled) } }
#[inline] pub fn DebugMessageEnableAMD(category: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { unsafe { storage::DebugMessageEnableAMD(category, severity, count, ids, enabled) } }
#[inline] pub fn DebugMessageInsert(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { unsafe { storage::DebugMessageInsert(source, type_, id, severity, length, buf) } }
#[inline] pub fn DebugMessageInsertAMD(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *GLchar) -> c_void { unsafe { storage::DebugMessageInsertAMD(category, severity, id, length, buf) } }
#[inline] pub fn DebugMessageInsertARB(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { unsafe { storage::DebugMessageInsertARB(source, type_, id, severity, length, buf) } }
#[inline] pub fn DebugMessageInsertKHR(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { unsafe { storage::DebugMessageInsertKHR(source, type_, id, severity, length, buf) } }
#[inline] pub fn DeformSGIX(mask: GLbitfield) -> c_void { unsafe { storage::DeformSGIX(mask) } }
#[inline] pub fn DeformationMap3dSGIX(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *GLdouble) -> c_void { unsafe { storage::DeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) } }
#[inline] pub fn DeformationMap3fSGIX(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *GLfloat) -> c_void { unsafe { storage::DeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) } }
#[inline] pub fn DeleteAsyncMarkersSGIX(marker: GLuint, range: GLsizei) -> c_void { unsafe { storage::DeleteAsyncMarkersSGIX(marker, range) } }
#[inline] pub fn DeleteBuffers(n: GLsizei, buffers: *GLuint) -> c_void { unsafe { storage::DeleteBuffers(n, buffers) } }
#[inline] pub fn DeleteBuffersARB(n: GLsizei, buffers: *GLuint) -> c_void { unsafe { storage::DeleteBuffersARB(n, buffers) } }
#[inline] pub fn DeleteFencesAPPLE(n: GLsizei, fences: *GLuint) -> c_void { unsafe { storage::DeleteFencesAPPLE(n, fences) } }
#[inline] pub fn DeleteFencesNV(n: GLsizei, fences: *GLuint) -> c_void { unsafe { storage::DeleteFencesNV(n, fences) } }
#[inline] pub fn DeleteFragmentShaderATI(id: GLuint) -> c_void { unsafe { storage::DeleteFragmentShaderATI(id) } }
#[inline] pub fn DeleteFramebuffers(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { storage::DeleteFramebuffers(n, framebuffers) } }
#[inline] pub fn DeleteFramebuffersEXT(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { storage::DeleteFramebuffersEXT(n, framebuffers) } }
#[inline] pub fn DeleteFramebuffersOES(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { storage::DeleteFramebuffersOES(n, framebuffers) } }
#[inline] pub fn DeleteLists(list: GLuint, range: GLsizei) -> c_void { unsafe { storage::DeleteLists(list, range) } }
#[inline] pub fn DeleteNamedStringARB(namelen: GLint, name: *GLchar) -> c_void { unsafe { storage::DeleteNamedStringARB(namelen, name) } }
#[inline] pub fn DeleteNamesAMD(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void { unsafe { storage::DeleteNamesAMD(identifier, num, names) } }
#[inline] pub fn DeleteObjectARB(obj: GLhandleARB) -> c_void { unsafe { storage::DeleteObjectARB(obj) } }
#[inline] pub fn DeleteOcclusionQueriesNV(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::DeleteOcclusionQueriesNV(n, ids) } }
#[inline] pub fn DeletePathsNV(path: GLuint, range: GLsizei) -> c_void { unsafe { storage::DeletePathsNV(path, range) } }
#[inline] pub fn DeletePerfMonitorsAMD(n: GLsizei, monitors: *GLuint) -> c_void { unsafe { storage::DeletePerfMonitorsAMD(n, monitors) } }
#[inline] pub fn DeleteProgram(program: GLuint) -> c_void { unsafe { storage::DeleteProgram(program) } }
#[inline] pub fn DeleteProgramPipelines(n: GLsizei, pipelines: *GLuint) -> c_void { unsafe { storage::DeleteProgramPipelines(n, pipelines) } }
#[inline] pub fn DeleteProgramPipelinesEXT(n: GLsizei, pipelines: *GLuint) -> c_void { unsafe { storage::DeleteProgramPipelinesEXT(n, pipelines) } }
#[inline] pub fn DeleteProgramsARB(n: GLsizei, programs: *GLuint) -> c_void { unsafe { storage::DeleteProgramsARB(n, programs) } }
#[inline] pub fn DeleteProgramsNV(n: GLsizei, programs: *GLuint) -> c_void { unsafe { storage::DeleteProgramsNV(n, programs) } }
#[inline] pub fn DeleteQueries(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::DeleteQueries(n, ids) } }
#[inline] pub fn DeleteQueriesARB(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::DeleteQueriesARB(n, ids) } }
#[inline] pub fn DeleteQueriesEXT(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::DeleteQueriesEXT(n, ids) } }
#[inline] pub fn DeleteRenderbuffers(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { storage::DeleteRenderbuffers(n, renderbuffers) } }
#[inline] pub fn DeleteRenderbuffersEXT(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { storage::DeleteRenderbuffersEXT(n, renderbuffers) } }
#[inline] pub fn DeleteRenderbuffersOES(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { storage::DeleteRenderbuffersOES(n, renderbuffers) } }
#[inline] pub fn DeleteSamplers(count: GLsizei, samplers: *GLuint) -> c_void { unsafe { storage::DeleteSamplers(count, samplers) } }
#[inline] pub fn DeleteShader(shader: GLuint) -> c_void { unsafe { storage::DeleteShader(shader) } }
#[inline] pub fn DeleteSync(sync: GLsync) -> c_void { unsafe { storage::DeleteSync(sync) } }
#[inline] pub fn DeleteSyncAPPLE(sync: GLsync) -> c_void { unsafe { storage::DeleteSyncAPPLE(sync) } }
#[inline] pub fn DeleteTextures(n: GLsizei, textures: *GLuint) -> c_void { unsafe { storage::DeleteTextures(n, textures) } }
#[inline] pub fn DeleteTexturesEXT(n: GLsizei, textures: *GLuint) -> c_void { unsafe { storage::DeleteTexturesEXT(n, textures) } }
#[inline] pub fn DeleteTransformFeedbacks(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::DeleteTransformFeedbacks(n, ids) } }
#[inline] pub fn DeleteTransformFeedbacksNV(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::DeleteTransformFeedbacksNV(n, ids) } }
#[inline] pub fn DeleteVertexArrays(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { storage::DeleteVertexArrays(n, arrays) } }
#[inline] pub fn DeleteVertexArraysAPPLE(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { storage::DeleteVertexArraysAPPLE(n, arrays) } }
#[inline] pub fn DeleteVertexArraysOES(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { storage::DeleteVertexArraysOES(n, arrays) } }
#[inline] pub fn DeleteVertexShaderEXT(id: GLuint) -> c_void { unsafe { storage::DeleteVertexShaderEXT(id) } }
#[inline] pub fn DepthBoundsEXT(zmin: GLclampd, zmax: GLclampd) -> c_void { unsafe { storage::DepthBoundsEXT(zmin, zmax) } }
#[inline] pub fn DepthBoundsdNV(zmin: GLdouble, zmax: GLdouble) -> c_void { unsafe { storage::DepthBoundsdNV(zmin, zmax) } }
#[inline] pub fn DepthFunc(func: GLenum) -> c_void { unsafe { storage::DepthFunc(func) } }
#[inline] pub fn DepthMask(flag: GLboolean) -> c_void { unsafe { storage::DepthMask(flag) } }
#[inline] pub fn DepthRange(near: GLdouble, far: GLdouble) -> c_void { unsafe { storage::DepthRange(near, far) } }
#[inline] pub fn DepthRangeArrayv(first: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { storage::DepthRangeArrayv(first, count, v) } }
#[inline] pub fn DepthRangeIndexed(index: GLuint, n: GLdouble, f: GLdouble) -> c_void { unsafe { storage::DepthRangeIndexed(index, n, f) } }
#[inline] pub fn DepthRangedNV(zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { storage::DepthRangedNV(zNear, zFar) } }
#[inline] pub fn DepthRangef(n: GLfloat, f: GLfloat) -> c_void { unsafe { storage::DepthRangef(n, f) } }
#[inline] pub fn DepthRangefOES(n: GLclampf, f: GLclampf) -> c_void { unsafe { storage::DepthRangefOES(n, f) } }
#[inline] pub fn DepthRangex(n: GLfixed, f: GLfixed) -> c_void { unsafe { storage::DepthRangex(n, f) } }
#[inline] pub fn DepthRangexOES(n: GLfixed, f: GLfixed) -> c_void { unsafe { storage::DepthRangexOES(n, f) } }
#[inline] pub fn DetachObjectARB(containerObj: GLhandleARB, attachedObj: GLhandleARB) -> c_void { unsafe { storage::DetachObjectARB(containerObj, attachedObj) } }
#[inline] pub fn DetachShader(program: GLuint, shader: GLuint) -> c_void { unsafe { storage::DetachShader(program, shader) } }
#[inline] pub fn DetailTexFuncSGIS(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void { unsafe { storage::DetailTexFuncSGIS(target, n, points) } }
#[inline] pub fn Disable(cap: GLenum) -> c_void { unsafe { storage::Disable(cap) } }
#[inline] pub fn DisableClientState(array: GLenum) -> c_void { unsafe { storage::DisableClientState(array) } }
#[inline] pub fn DisableClientStateIndexedEXT(array: GLenum, index: GLuint) -> c_void { unsafe { storage::DisableClientStateIndexedEXT(array, index) } }
#[inline] pub fn DisableClientStateiEXT(array: GLenum, index: GLuint) -> c_void { unsafe { storage::DisableClientStateiEXT(array, index) } }
#[inline] pub fn DisableDriverControlQCOM(driverControl: GLuint) -> c_void { unsafe { storage::DisableDriverControlQCOM(driverControl) } }
#[inline] pub fn DisableIndexedEXT(target: GLenum, index: GLuint) -> c_void { unsafe { storage::DisableIndexedEXT(target, index) } }
#[inline] pub fn DisableVariantClientStateEXT(id: GLuint) -> c_void { unsafe { storage::DisableVariantClientStateEXT(id) } }
#[inline] pub fn DisableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint) -> c_void { unsafe { storage::DisableVertexArrayAttribEXT(vaobj, index) } }
#[inline] pub fn DisableVertexArrayEXT(vaobj: GLuint, array: GLenum) -> c_void { unsafe { storage::DisableVertexArrayEXT(vaobj, array) } }
#[inline] pub fn DisableVertexAttribAPPLE(index: GLuint, pname: GLenum) -> c_void { unsafe { storage::DisableVertexAttribAPPLE(index, pname) } }
#[inline] pub fn DisableVertexAttribArray(index: GLuint) -> c_void { unsafe { storage::DisableVertexAttribArray(index) } }
#[inline] pub fn DisableVertexAttribArrayARB(index: GLuint) -> c_void { unsafe { storage::DisableVertexAttribArrayARB(index) } }
#[inline] pub fn Disablei(target: GLenum, index: GLuint) -> c_void { unsafe { storage::Disablei(target, index) } }
#[inline] pub fn DiscardFramebufferEXT(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void { unsafe { storage::DiscardFramebufferEXT(target, numAttachments, attachments) } }
#[inline] pub fn DispatchCompute(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> c_void { unsafe { storage::DispatchCompute(num_groups_x, num_groups_y, num_groups_z) } }
#[inline] pub fn DispatchComputeGroupSizeARB(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) -> c_void { unsafe { storage::DispatchComputeGroupSizeARB(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) } }
#[inline] pub fn DispatchComputeIndirect(indirect: GLintptr) -> c_void { unsafe { storage::DispatchComputeIndirect(indirect) } }
#[inline] pub fn DrawArrays(mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { storage::DrawArrays(mode, first, count) } }
#[inline] pub fn DrawArraysEXT(mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { storage::DrawArraysEXT(mode, first, count) } }
#[inline] pub fn DrawArraysIndirect(mode: GLenum, indirect: *GLvoid) -> c_void { unsafe { storage::DrawArraysIndirect(mode, indirect) } }
#[inline] pub fn DrawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> c_void { unsafe { storage::DrawArraysInstanced(mode, first, count, instancecount) } }
#[inline] pub fn DrawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { storage::DrawArraysInstancedANGLE(mode, first, count, primcount) } }
#[inline] pub fn DrawArraysInstancedARB(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { storage::DrawArraysInstancedARB(mode, first, count, primcount) } }
#[inline] pub fn DrawArraysInstancedBaseInstance(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> c_void { unsafe { storage::DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance) } }
#[inline] pub fn DrawArraysInstancedEXT(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { storage::DrawArraysInstancedEXT(mode, start, count, primcount) } }
#[inline] pub fn DrawArraysInstancedNV(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { storage::DrawArraysInstancedNV(mode, first, count, primcount) } }
#[inline] pub fn DrawBuffer(mode: GLenum) -> c_void { unsafe { storage::DrawBuffer(mode) } }
#[inline] pub fn DrawBuffers(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { storage::DrawBuffers(n, bufs) } }
#[inline] pub fn DrawBuffersARB(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { storage::DrawBuffersARB(n, bufs) } }
#[inline] pub fn DrawBuffersATI(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { storage::DrawBuffersATI(n, bufs) } }
#[inline] pub fn DrawBuffersEXT(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { storage::DrawBuffersEXT(n, bufs) } }
#[inline] pub fn DrawBuffersIndexedEXT(n: GLint, location: *GLenum, indices: *GLint) -> c_void { unsafe { storage::DrawBuffersIndexedEXT(n, location, indices) } }
#[inline] pub fn DrawBuffersNV(n: GLsizei, bufs: *GLenum) -> c_void { unsafe { storage::DrawBuffersNV(n, bufs) } }
#[inline] pub fn DrawElementArrayAPPLE(mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { storage::DrawElementArrayAPPLE(mode, first, count) } }
#[inline] pub fn DrawElementArrayATI(mode: GLenum, count: GLsizei) -> c_void { unsafe { storage::DrawElementArrayATI(mode, count) } }
#[inline] pub fn DrawElements(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { unsafe { storage::DrawElements(mode, count, type_, indices) } }
#[inline] pub fn DrawElementsBaseVertex(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void { unsafe { storage::DrawElementsBaseVertex(mode, count, type_, indices, basevertex) } }
#[inline] pub fn DrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *GLvoid) -> c_void { unsafe { storage::DrawElementsIndirect(mode, type_, indirect) } }
#[inline] pub fn DrawElementsInstanced(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei) -> c_void { unsafe { storage::DrawElementsInstanced(mode, count, type_, indices, instancecount) } }
#[inline] pub fn DrawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, primcount: GLsizei) -> c_void { unsafe { storage::DrawElementsInstancedANGLE(mode, count, type_, indices, primcount) } }
#[inline] pub fn DrawElementsInstancedARB(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { unsafe { storage::DrawElementsInstancedARB(mode, count, type_, indices, primcount) } }
#[inline] pub fn DrawElementsInstancedBaseInstance(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, baseinstance: GLuint) -> c_void { unsafe { storage::DrawElementsInstancedBaseInstance(mode, count, type_, indices, instancecount, baseinstance) } }
#[inline] pub fn DrawElementsInstancedBaseVertex(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei, basevertex: GLint) -> c_void { unsafe { storage::DrawElementsInstancedBaseVertex(mode, count, type_, indices, instancecount, basevertex) } }
#[inline] pub fn DrawElementsInstancedBaseVertexBaseInstance(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> c_void { unsafe { storage::DrawElementsInstancedBaseVertexBaseInstance(mode, count, type_, indices, instancecount, basevertex, baseinstance) } }
#[inline] pub fn DrawElementsInstancedEXT(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { unsafe { storage::DrawElementsInstancedEXT(mode, count, type_, indices, primcount) } }
#[inline] pub fn DrawElementsInstancedNV(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { unsafe { storage::DrawElementsInstancedNV(mode, count, type_, indices, primcount) } }
#[inline] pub fn DrawMeshArraysSUN(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) -> c_void { unsafe { storage::DrawMeshArraysSUN(mode, first, count, width) } }
#[inline] pub fn DrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::DrawPixels(width, height, format, type_, pixels) } }
#[inline] pub fn DrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) -> c_void { unsafe { storage::DrawRangeElementArrayAPPLE(mode, start, end, first, count) } }
#[inline] pub fn DrawRangeElementArrayATI(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) -> c_void { unsafe { storage::DrawRangeElementArrayATI(mode, start, end, count) } }
#[inline] pub fn DrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { unsafe { storage::DrawRangeElements(mode, start, end, count, type_, indices) } }
#[inline] pub fn DrawRangeElementsBaseVertex(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void { unsafe { storage::DrawRangeElementsBaseVertex(mode, start, end, count, type_, indices, basevertex) } }
#[inline] pub fn DrawRangeElementsEXT(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { unsafe { storage::DrawRangeElementsEXT(mode, start, end, count, type_, indices) } }
#[inline] pub fn DrawTexfOES(x: GLfloat, y: GLfloat, z: GLfloat, width: GLfloat, height: GLfloat) -> c_void { unsafe { storage::DrawTexfOES(x, y, z, width, height) } }
#[inline] pub unsafe fn DrawTexfvOES(coords: *GLfloat) -> c_void { storage::DrawTexfvOES(coords) }
#[inline] pub fn DrawTexiOES(x: GLint, y: GLint, z: GLint, width: GLint, height: GLint) -> c_void { unsafe { storage::DrawTexiOES(x, y, z, width, height) } }
#[inline] pub unsafe fn DrawTexivOES(coords: *GLint) -> c_void { storage::DrawTexivOES(coords) }
#[inline] pub fn DrawTexsOES(x: GLshort, y: GLshort, z: GLshort, width: GLshort, height: GLshort) -> c_void { unsafe { storage::DrawTexsOES(x, y, z, width, height) } }
#[inline] pub unsafe fn DrawTexsvOES(coords: *GLshort) -> c_void { storage::DrawTexsvOES(coords) }
#[inline] pub fn DrawTextureNV(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> c_void { unsafe { storage::DrawTextureNV(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) } }
#[inline] pub fn DrawTexxOES(x: GLfixed, y: GLfixed, z: GLfixed, width: GLfixed, height: GLfixed) -> c_void { unsafe { storage::DrawTexxOES(x, y, z, width, height) } }
#[inline] pub unsafe fn DrawTexxvOES(coords: *GLfixed) -> c_void { storage::DrawTexxvOES(coords) }
#[inline] pub fn DrawTransformFeedback(mode: GLenum, id: GLuint) -> c_void { unsafe { storage::DrawTransformFeedback(mode, id) } }
#[inline] pub fn DrawTransformFeedbackInstanced(mode: GLenum, id: GLuint, instancecount: GLsizei) -> c_void { unsafe { storage::DrawTransformFeedbackInstanced(mode, id, instancecount) } }
#[inline] pub fn DrawTransformFeedbackNV(mode: GLenum, id: GLuint) -> c_void { unsafe { storage::DrawTransformFeedbackNV(mode, id) } }
#[inline] pub fn DrawTransformFeedbackStream(mode: GLenum, id: GLuint, stream: GLuint) -> c_void { unsafe { storage::DrawTransformFeedbackStream(mode, id, stream) } }
#[inline] pub fn DrawTransformFeedbackStreamInstanced(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> c_void { unsafe { storage::DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount) } }
#[inline] pub fn EGLImageTargetRenderbufferStorageOES(target: GLenum, image: GLeglImageOES) -> c_void { unsafe { storage::EGLImageTargetRenderbufferStorageOES(target, image) } }
#[inline] pub fn EGLImageTargetTexture2DOES(target: GLenum, image: GLeglImageOES) -> c_void { unsafe { storage::EGLImageTargetTexture2DOES(target, image) } }
#[inline] pub fn EdgeFlag(flag: GLboolean) -> c_void { unsafe { storage::EdgeFlag(flag) } }
#[inline] pub fn EdgeFlagFormatNV(stride: GLsizei) -> c_void { unsafe { storage::EdgeFlagFormatNV(stride) } }
#[inline] pub fn EdgeFlagPointer(stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::EdgeFlagPointer(stride, pointer) } }
#[inline] pub fn EdgeFlagPointerEXT(stride: GLsizei, count: GLsizei, pointer: *GLboolean) -> c_void { unsafe { storage::EdgeFlagPointerEXT(stride, count, pointer) } }
#[inline] pub fn EdgeFlagPointerListIBM(stride: GLint, pointer: **GLboolean, ptrstride: GLint) -> c_void { unsafe { storage::EdgeFlagPointerListIBM(stride, pointer, ptrstride) } }
#[inline] pub unsafe fn EdgeFlagv(flag: *GLboolean) -> c_void { storage::EdgeFlagv(flag) }
#[inline] pub fn ElementPointerAPPLE(type_: GLenum, pointer: *GLvoid) -> c_void { unsafe { storage::ElementPointerAPPLE(type_, pointer) } }
#[inline] pub fn ElementPointerATI(type_: GLenum, pointer: *GLvoid) -> c_void { unsafe { storage::ElementPointerATI(type_, pointer) } }
#[inline] pub fn Enable(cap: GLenum) -> c_void { unsafe { storage::Enable(cap) } }
#[inline] pub fn EnableClientState(array: GLenum) -> c_void { unsafe { storage::EnableClientState(array) } }
#[inline] pub fn EnableClientStateIndexedEXT(array: GLenum, index: GLuint) -> c_void { unsafe { storage::EnableClientStateIndexedEXT(array, index) } }
#[inline] pub fn EnableClientStateiEXT(array: GLenum, index: GLuint) -> c_void { unsafe { storage::EnableClientStateiEXT(array, index) } }
#[inline] pub fn EnableDriverControlQCOM(driverControl: GLuint) -> c_void { unsafe { storage::EnableDriverControlQCOM(driverControl) } }
#[inline] pub fn EnableIndexedEXT(target: GLenum, index: GLuint) -> c_void { unsafe { storage::EnableIndexedEXT(target, index) } }
#[inline] pub fn EnableVariantClientStateEXT(id: GLuint) -> c_void { unsafe { storage::EnableVariantClientStateEXT(id) } }
#[inline] pub fn EnableVertexArrayAttribEXT(vaobj: GLuint, index: GLuint) -> c_void { unsafe { storage::EnableVertexArrayAttribEXT(vaobj, index) } }
#[inline] pub fn EnableVertexArrayEXT(vaobj: GLuint, array: GLenum) -> c_void { unsafe { storage::EnableVertexArrayEXT(vaobj, array) } }
#[inline] pub fn EnableVertexAttribAPPLE(index: GLuint, pname: GLenum) -> c_void { unsafe { storage::EnableVertexAttribAPPLE(index, pname) } }
#[inline] pub fn EnableVertexAttribArray(index: GLuint) -> c_void { unsafe { storage::EnableVertexAttribArray(index) } }
#[inline] pub fn EnableVertexAttribArrayARB(index: GLuint) -> c_void { unsafe { storage::EnableVertexAttribArrayARB(index) } }
#[inline] pub fn Enablei(target: GLenum, index: GLuint) -> c_void { unsafe { storage::Enablei(target, index) } }
#[inline] pub unsafe fn End() -> c_void { storage::End() }
#[inline] pub unsafe fn EndConditionalRender() -> c_void { storage::EndConditionalRender() }
#[inline] pub unsafe fn EndConditionalRenderNV() -> c_void { storage::EndConditionalRenderNV() }
#[inline] pub unsafe fn EndConditionalRenderNVX() -> c_void { storage::EndConditionalRenderNVX() }
#[inline] pub unsafe fn EndFragmentShaderATI() -> c_void { storage::EndFragmentShaderATI() }
#[inline] pub unsafe fn EndList() -> c_void { storage::EndList() }
#[inline] pub unsafe fn EndOcclusionQueryNV() -> c_void { storage::EndOcclusionQueryNV() }
#[inline] pub fn EndPerfMonitorAMD(monitor: GLuint) -> c_void { unsafe { storage::EndPerfMonitorAMD(monitor) } }
#[inline] pub fn EndQuery(target: GLenum) -> c_void { unsafe { storage::EndQuery(target) } }
#[inline] pub fn EndQueryARB(target: GLenum) -> c_void { unsafe { storage::EndQueryARB(target) } }
#[inline] pub fn EndQueryEXT(target: GLenum) -> c_void { unsafe { storage::EndQueryEXT(target) } }
#[inline] pub fn EndQueryIndexed(target: GLenum, index: GLuint) -> c_void { unsafe { storage::EndQueryIndexed(target, index) } }
#[inline] pub fn EndTilingQCOM(preserveMask: GLbitfield) -> c_void { unsafe { storage::EndTilingQCOM(preserveMask) } }
#[inline] pub unsafe fn EndTransformFeedback() -> c_void { storage::EndTransformFeedback() }
#[inline] pub unsafe fn EndTransformFeedbackEXT() -> c_void { storage::EndTransformFeedbackEXT() }
#[inline] pub unsafe fn EndTransformFeedbackNV() -> c_void { storage::EndTransformFeedbackNV() }
#[inline] pub unsafe fn EndVertexShaderEXT() -> c_void { storage::EndVertexShaderEXT() }
#[inline] pub fn EndVideoCaptureNV(video_capture_slot: GLuint) -> c_void { unsafe { storage::EndVideoCaptureNV(video_capture_slot) } }
#[inline] pub fn EvalCoord1d(u: GLdouble) -> c_void { unsafe { storage::EvalCoord1d(u) } }
#[inline] pub unsafe fn EvalCoord1dv(u: *GLdouble) -> c_void { storage::EvalCoord1dv(u) }
#[inline] pub fn EvalCoord1f(u: GLfloat) -> c_void { unsafe { storage::EvalCoord1f(u) } }
#[inline] pub unsafe fn EvalCoord1fv(u: *GLfloat) -> c_void { storage::EvalCoord1fv(u) }
#[inline] pub fn EvalCoord1xOES(u: GLfixed) -> c_void { unsafe { storage::EvalCoord1xOES(u) } }
#[inline] pub unsafe fn EvalCoord1xvOES(coords: *GLfixed) -> c_void { storage::EvalCoord1xvOES(coords) }
#[inline] pub fn EvalCoord2d(u: GLdouble, v: GLdouble) -> c_void { unsafe { storage::EvalCoord2d(u, v) } }
#[inline] pub unsafe fn EvalCoord2dv(u: *GLdouble) -> c_void { storage::EvalCoord2dv(u) }
#[inline] pub fn EvalCoord2f(u: GLfloat, v: GLfloat) -> c_void { unsafe { storage::EvalCoord2f(u, v) } }
#[inline] pub unsafe fn EvalCoord2fv(u: *GLfloat) -> c_void { storage::EvalCoord2fv(u) }
#[inline] pub fn EvalCoord2xOES(u: GLfixed, v: GLfixed) -> c_void { unsafe { storage::EvalCoord2xOES(u, v) } }
#[inline] pub unsafe fn EvalCoord2xvOES(coords: *GLfixed) -> c_void { storage::EvalCoord2xvOES(coords) }
#[inline] pub fn EvalMapsNV(target: GLenum, mode: GLenum) -> c_void { unsafe { storage::EvalMapsNV(target, mode) } }
#[inline] pub fn EvalMesh1(mode: GLenum, i1: GLint, i2: GLint) -> c_void { unsafe { storage::EvalMesh1(mode, i1, i2) } }
#[inline] pub fn EvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> c_void { unsafe { storage::EvalMesh2(mode, i1, i2, j1, j2) } }
#[inline] pub fn EvalPoint1(i: GLint) -> c_void { unsafe { storage::EvalPoint1(i) } }
#[inline] pub fn EvalPoint2(i: GLint, j: GLint) -> c_void { unsafe { storage::EvalPoint2(i, j) } }
#[inline] pub fn ExecuteProgramNV(target: GLenum, id: GLuint, params: *GLfloat) -> c_void { unsafe { storage::ExecuteProgramNV(target, id, params) } }
#[inline] pub fn ExtGetBufferPointervQCOM(target: GLenum, params: **GLvoid) -> c_void { unsafe { storage::ExtGetBufferPointervQCOM(target, params) } }
#[inline] pub fn ExtGetBuffersQCOM(buffers: *GLuint, maxBuffers: GLint, numBuffers: *GLint) -> c_void { unsafe { storage::ExtGetBuffersQCOM(buffers, maxBuffers, numBuffers) } }
#[inline] pub fn ExtGetFramebuffersQCOM(framebuffers: *GLuint, maxFramebuffers: GLint, numFramebuffers: *GLint) -> c_void { unsafe { storage::ExtGetFramebuffersQCOM(framebuffers, maxFramebuffers, numFramebuffers) } }
#[inline] pub fn ExtGetProgramBinarySourceQCOM(program: GLuint, shadertype: GLenum, source: *GLchar, length: *GLint) -> c_void { unsafe { storage::ExtGetProgramBinarySourceQCOM(program, shadertype, source, length) } }
#[inline] pub fn ExtGetProgramsQCOM(programs: *GLuint, maxPrograms: GLint, numPrograms: *GLint) -> c_void { unsafe { storage::ExtGetProgramsQCOM(programs, maxPrograms, numPrograms) } }
#[inline] pub fn ExtGetRenderbuffersQCOM(renderbuffers: *GLuint, maxRenderbuffers: GLint, numRenderbuffers: *GLint) -> c_void { unsafe { storage::ExtGetRenderbuffersQCOM(renderbuffers, maxRenderbuffers, numRenderbuffers) } }
#[inline] pub fn ExtGetShadersQCOM(shaders: *GLuint, maxShaders: GLint, numShaders: *GLint) -> c_void { unsafe { storage::ExtGetShadersQCOM(shaders, maxShaders, numShaders) } }
#[inline] pub fn ExtGetTexLevelParameterivQCOM(texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::ExtGetTexLevelParameterivQCOM(texture, face, level, pname, params) } }
#[inline] pub fn ExtGetTexSubImageQCOM(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, texels: *GLvoid) -> c_void { unsafe { storage::ExtGetTexSubImageQCOM(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, texels) } }
#[inline] pub fn ExtGetTexturesQCOM(textures: *GLuint, maxTextures: GLint, numTextures: *GLint) -> c_void { unsafe { storage::ExtGetTexturesQCOM(textures, maxTextures, numTextures) } }
#[inline] pub fn ExtIsProgramBinaryQCOM(program: GLuint) -> GLboolean { unsafe { storage::ExtIsProgramBinaryQCOM(program) } }
#[inline] pub fn ExtTexObjectStateOverrideiQCOM(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::ExtTexObjectStateOverrideiQCOM(target, pname, param) } }
#[inline] pub fn ExtractComponentEXT(res: GLuint, src: GLuint, num: GLuint) -> c_void { unsafe { storage::ExtractComponentEXT(res, src, num) } }
#[inline] pub fn FeedbackBuffer(size: GLsizei, type_: GLenum, buffer: *GLfloat) -> c_void { unsafe { storage::FeedbackBuffer(size, type_, buffer) } }
#[inline] pub fn FeedbackBufferxOES(n: GLsizei, type_: GLenum, buffer: *GLfixed) -> c_void { unsafe { storage::FeedbackBufferxOES(n, type_, buffer) } }
#[inline] pub fn FenceSync(condition: GLenum, flags: GLbitfield) -> GLsync { unsafe { storage::FenceSync(condition, flags) } }
#[inline] pub fn FenceSyncAPPLE(condition: GLenum, flags: GLbitfield) -> GLsync { unsafe { storage::FenceSyncAPPLE(condition, flags) } }
#[inline] pub fn FinalCombinerInputNV(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void { unsafe { storage::FinalCombinerInputNV(variable, input, mapping, componentUsage) } }
#[inline] pub unsafe fn Finish() -> c_void { storage::Finish() }
#[inline] pub unsafe fn FinishAsyncSGIX(markerp: *GLuint) -> GLint { storage::FinishAsyncSGIX(markerp) }
#[inline] pub fn FinishFenceAPPLE(fence: GLuint) -> c_void { unsafe { storage::FinishFenceAPPLE(fence) } }
#[inline] pub fn FinishFenceNV(fence: GLuint) -> c_void { unsafe { storage::FinishFenceNV(fence) } }
#[inline] pub fn FinishObjectAPPLE(object: GLenum, name: GLint) -> c_void { unsafe { storage::FinishObjectAPPLE(object, name) } }
#[inline] pub unsafe fn FinishTextureSUNX() -> c_void { storage::FinishTextureSUNX() }
#[inline] pub unsafe fn Flush() -> c_void { storage::Flush() }
#[inline] pub fn FlushMappedBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { storage::FlushMappedBufferRange(target, offset, length) } }
#[inline] pub fn FlushMappedBufferRangeAPPLE(target: GLenum, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { storage::FlushMappedBufferRangeAPPLE(target, offset, size) } }
#[inline] pub fn FlushMappedBufferRangeEXT(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { storage::FlushMappedBufferRangeEXT(target, offset, length) } }
#[inline] pub fn FlushMappedNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { storage::FlushMappedNamedBufferRangeEXT(buffer, offset, length) } }
#[inline] pub fn FlushPixelDataRangeNV(target: GLenum) -> c_void { unsafe { storage::FlushPixelDataRangeNV(target) } }
#[inline] pub unsafe fn FlushRasterSGIX() -> c_void { storage::FlushRasterSGIX() }
#[inline] pub fn FlushStaticDataIBM(target: GLenum) -> c_void { unsafe { storage::FlushStaticDataIBM(target) } }
#[inline] pub fn FlushVertexArrayRangeAPPLE(length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::FlushVertexArrayRangeAPPLE(length, pointer) } }
#[inline] pub unsafe fn FlushVertexArrayRangeNV() -> c_void { storage::FlushVertexArrayRangeNV() }
#[inline] pub fn FogCoordFormatNV(type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::FogCoordFormatNV(type_, stride) } }
#[inline] pub fn FogCoordPointer(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::FogCoordPointer(type_, stride, pointer) } }
#[inline] pub fn FogCoordPointerEXT(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::FogCoordPointerEXT(type_, stride, pointer) } }
#[inline] pub fn FogCoordPointerListIBM(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { storage::FogCoordPointerListIBM(type_, stride, pointer, ptrstride) } }
#[inline] pub fn FogCoordd(coord: GLdouble) -> c_void { unsafe { storage::FogCoordd(coord) } }
#[inline] pub fn FogCoorddEXT(coord: GLdouble) -> c_void { unsafe { storage::FogCoorddEXT(coord) } }
#[inline] pub unsafe fn FogCoorddv(coord: *GLdouble) -> c_void { storage::FogCoorddv(coord) }
#[inline] pub unsafe fn FogCoorddvEXT(coord: *GLdouble) -> c_void { storage::FogCoorddvEXT(coord) }
#[inline] pub fn FogCoordf(coord: GLfloat) -> c_void { unsafe { storage::FogCoordf(coord) } }
#[inline] pub fn FogCoordfEXT(coord: GLfloat) -> c_void { unsafe { storage::FogCoordfEXT(coord) } }
#[inline] pub unsafe fn FogCoordfv(coord: *GLfloat) -> c_void { storage::FogCoordfv(coord) }
#[inline] pub unsafe fn FogCoordfvEXT(coord: *GLfloat) -> c_void { storage::FogCoordfvEXT(coord) }
#[inline] pub fn FogCoordhNV(fog: GLhalfNV) -> c_void { unsafe { storage::FogCoordhNV(fog) } }
#[inline] pub unsafe fn FogCoordhvNV(fog: *GLhalfNV) -> c_void { storage::FogCoordhvNV(fog) }
#[inline] pub fn FogFuncSGIS(n: GLsizei, points: *GLfloat) -> c_void { unsafe { storage::FogFuncSGIS(n, points) } }
#[inline] pub fn Fogf(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::Fogf(pname, param) } }
#[inline] pub fn Fogfv(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::Fogfv(pname, params) } }
#[inline] pub fn Fogi(pname: GLenum, param: GLint) -> c_void { unsafe { storage::Fogi(pname, param) } }
#[inline] pub fn Fogiv(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::Fogiv(pname, params) } }
#[inline] pub fn Fogx(pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::Fogx(pname, param) } }
#[inline] pub fn FogxOES(pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::FogxOES(pname, param) } }
#[inline] pub fn Fogxv(pname: GLenum, param: *GLfixed) -> c_void { unsafe { storage::Fogxv(pname, param) } }
#[inline] pub fn FogxvOES(pname: GLenum, param: *GLfixed) -> c_void { unsafe { storage::FogxvOES(pname, param) } }
#[inline] pub fn FragmentColorMaterialSGIX(face: GLenum, mode: GLenum) -> c_void { unsafe { storage::FragmentColorMaterialSGIX(face, mode) } }
#[inline] pub fn FragmentLightModelfSGIX(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::FragmentLightModelfSGIX(pname, param) } }
#[inline] pub fn FragmentLightModelfvSGIX(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::FragmentLightModelfvSGIX(pname, params) } }
#[inline] pub fn FragmentLightModeliSGIX(pname: GLenum, param: GLint) -> c_void { unsafe { storage::FragmentLightModeliSGIX(pname, param) } }
#[inline] pub fn FragmentLightModelivSGIX(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::FragmentLightModelivSGIX(pname, params) } }
#[inline] pub fn FragmentLightfSGIX(light: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::FragmentLightfSGIX(light, pname, param) } }
#[inline] pub fn FragmentLightfvSGIX(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::FragmentLightfvSGIX(light, pname, params) } }
#[inline] pub fn FragmentLightiSGIX(light: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::FragmentLightiSGIX(light, pname, param) } }
#[inline] pub fn FragmentLightivSGIX(light: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::FragmentLightivSGIX(light, pname, params) } }
#[inline] pub fn FragmentMaterialfSGIX(face: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::FragmentMaterialfSGIX(face, pname, param) } }
#[inline] pub fn FragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::FragmentMaterialfvSGIX(face, pname, params) } }
#[inline] pub fn FragmentMaterialiSGIX(face: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::FragmentMaterialiSGIX(face, pname, param) } }
#[inline] pub fn FragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::FragmentMaterialivSGIX(face, pname, params) } }
#[inline] pub unsafe fn FrameTerminatorGREMEDY() -> c_void { storage::FrameTerminatorGREMEDY() }
#[inline] pub fn FrameZoomSGIX(factor: GLint) -> c_void { unsafe { storage::FrameZoomSGIX(factor) } }
#[inline] pub fn FramebufferDrawBufferEXT(framebuffer: GLuint, mode: GLenum) -> c_void { unsafe { storage::FramebufferDrawBufferEXT(framebuffer, mode) } }
#[inline] pub fn FramebufferDrawBuffersEXT(framebuffer: GLuint, n: GLsizei, bufs: *GLenum) -> c_void { unsafe { storage::FramebufferDrawBuffersEXT(framebuffer, n, bufs) } }
#[inline] pub fn FramebufferParameteri(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::FramebufferParameteri(target, pname, param) } }
#[inline] pub fn FramebufferReadBufferEXT(framebuffer: GLuint, mode: GLenum) -> c_void { unsafe { storage::FramebufferReadBufferEXT(framebuffer, mode) } }
#[inline] pub fn FramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::FramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) } }
#[inline] pub fn FramebufferRenderbufferEXT(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::FramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer) } }
#[inline] pub fn FramebufferRenderbufferOES(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::FramebufferRenderbufferOES(target, attachment, renderbuffertarget, renderbuffer) } }
#[inline] pub fn FramebufferTexture(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::FramebufferTexture(target, attachment, texture, level) } }
#[inline] pub fn FramebufferTexture1D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::FramebufferTexture1D(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture1DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::FramebufferTexture1DEXT(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::FramebufferTexture2D(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture2DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::FramebufferTexture2DEXT(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture2DMultisampleEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void { unsafe { storage::FramebufferTexture2DMultisampleEXT(target, attachment, textarget, texture, level, samples) } }
#[inline] pub fn FramebufferTexture2DMultisampleIMG(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void { unsafe { storage::FramebufferTexture2DMultisampleIMG(target, attachment, textarget, texture, level, samples) } }
#[inline] pub fn FramebufferTexture2DOES(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::FramebufferTexture2DOES(target, attachment, textarget, texture, level) } }
#[inline] pub fn FramebufferTexture3D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { storage::FramebufferTexture3D(target, attachment, textarget, texture, level, zoffset) } }
#[inline] pub fn FramebufferTexture3DEXT(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { storage::FramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset) } }
#[inline] pub fn FramebufferTexture3DOES(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { storage::FramebufferTexture3DOES(target, attachment, textarget, texture, level, zoffset) } }
#[inline] pub fn FramebufferTextureARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::FramebufferTextureARB(target, attachment, texture, level) } }
#[inline] pub fn FramebufferTextureEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::FramebufferTextureEXT(target, attachment, texture, level) } }
#[inline] pub fn FramebufferTextureFaceARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { storage::FramebufferTextureFaceARB(target, attachment, texture, level, face) } }
#[inline] pub fn FramebufferTextureFaceEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { storage::FramebufferTextureFaceEXT(target, attachment, texture, level, face) } }
#[inline] pub fn FramebufferTextureLayer(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { storage::FramebufferTextureLayer(target, attachment, texture, level, layer) } }
#[inline] pub fn FramebufferTextureLayerARB(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { storage::FramebufferTextureLayerARB(target, attachment, texture, level, layer) } }
#[inline] pub fn FramebufferTextureLayerEXT(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { storage::FramebufferTextureLayerEXT(target, attachment, texture, level, layer) } }
#[inline] pub fn FreeObjectBufferATI(buffer: GLuint) -> c_void { unsafe { storage::FreeObjectBufferATI(buffer) } }
#[inline] pub fn FrontFace(mode: GLenum) -> c_void { unsafe { storage::FrontFace(mode) } }
#[inline] pub fn Frustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { storage::Frustum(left, right, bottom, top, zNear, zFar) } }
#[inline] pub fn Frustumf(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { storage::Frustumf(l, r, b, t, n, f) } }
#[inline] pub fn FrustumfOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { storage::FrustumfOES(l, r, b, t, n, f) } }
#[inline] pub fn Frustumx(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { storage::Frustumx(l, r, b, t, n, f) } }
#[inline] pub fn FrustumxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { storage::FrustumxOES(l, r, b, t, n, f) } }
#[inline] pub fn GenAsyncMarkersSGIX(range: GLsizei) -> GLuint { unsafe { storage::GenAsyncMarkersSGIX(range) } }
#[inline] pub fn GenBuffers(n: GLsizei, buffers: *GLuint) -> c_void { unsafe { storage::GenBuffers(n, buffers) } }
#[inline] pub fn GenBuffersARB(n: GLsizei, buffers: *GLuint) -> c_void { unsafe { storage::GenBuffersARB(n, buffers) } }
#[inline] pub fn GenFencesAPPLE(n: GLsizei, fences: *GLuint) -> c_void { unsafe { storage::GenFencesAPPLE(n, fences) } }
#[inline] pub fn GenFencesNV(n: GLsizei, fences: *GLuint) -> c_void { unsafe { storage::GenFencesNV(n, fences) } }
#[inline] pub fn GenFragmentShadersATI(range: GLuint) -> GLuint { unsafe { storage::GenFragmentShadersATI(range) } }
#[inline] pub fn GenFramebuffers(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { storage::GenFramebuffers(n, framebuffers) } }
#[inline] pub fn GenFramebuffersEXT(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { storage::GenFramebuffersEXT(n, framebuffers) } }
#[inline] pub fn GenFramebuffersOES(n: GLsizei, framebuffers: *GLuint) -> c_void { unsafe { storage::GenFramebuffersOES(n, framebuffers) } }
#[inline] pub fn GenLists(range: GLsizei) -> GLuint { unsafe { storage::GenLists(range) } }
#[inline] pub fn GenNamesAMD(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void { unsafe { storage::GenNamesAMD(identifier, num, names) } }
#[inline] pub fn GenOcclusionQueriesNV(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::GenOcclusionQueriesNV(n, ids) } }
#[inline] pub fn GenPathsNV(range: GLsizei) -> GLuint { unsafe { storage::GenPathsNV(range) } }
#[inline] pub fn GenPerfMonitorsAMD(n: GLsizei, monitors: *GLuint) -> c_void { unsafe { storage::GenPerfMonitorsAMD(n, monitors) } }
#[inline] pub fn GenProgramPipelines(n: GLsizei, pipelines: *GLuint) -> c_void { unsafe { storage::GenProgramPipelines(n, pipelines) } }
#[inline] pub fn GenProgramPipelinesEXT(n: GLsizei, pipelines: *GLuint) -> c_void { unsafe { storage::GenProgramPipelinesEXT(n, pipelines) } }
#[inline] pub fn GenProgramsARB(n: GLsizei, programs: *GLuint) -> c_void { unsafe { storage::GenProgramsARB(n, programs) } }
#[inline] pub fn GenProgramsNV(n: GLsizei, programs: *GLuint) -> c_void { unsafe { storage::GenProgramsNV(n, programs) } }
#[inline] pub fn GenQueries(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::GenQueries(n, ids) } }
#[inline] pub fn GenQueriesARB(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::GenQueriesARB(n, ids) } }
#[inline] pub fn GenQueriesEXT(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::GenQueriesEXT(n, ids) } }
#[inline] pub fn GenRenderbuffers(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { storage::GenRenderbuffers(n, renderbuffers) } }
#[inline] pub fn GenRenderbuffersEXT(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { storage::GenRenderbuffersEXT(n, renderbuffers) } }
#[inline] pub fn GenRenderbuffersOES(n: GLsizei, renderbuffers: *GLuint) -> c_void { unsafe { storage::GenRenderbuffersOES(n, renderbuffers) } }
#[inline] pub fn GenSamplers(count: GLsizei, samplers: *GLuint) -> c_void { unsafe { storage::GenSamplers(count, samplers) } }
#[inline] pub fn GenSymbolsEXT(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint { unsafe { storage::GenSymbolsEXT(datatype, storagetype, range, components) } }
#[inline] pub fn GenTextures(n: GLsizei, textures: *GLuint) -> c_void { unsafe { storage::GenTextures(n, textures) } }
#[inline] pub fn GenTexturesEXT(n: GLsizei, textures: *GLuint) -> c_void { unsafe { storage::GenTexturesEXT(n, textures) } }
#[inline] pub fn GenTransformFeedbacks(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::GenTransformFeedbacks(n, ids) } }
#[inline] pub fn GenTransformFeedbacksNV(n: GLsizei, ids: *GLuint) -> c_void { unsafe { storage::GenTransformFeedbacksNV(n, ids) } }
#[inline] pub fn GenVertexArrays(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { storage::GenVertexArrays(n, arrays) } }
#[inline] pub fn GenVertexArraysAPPLE(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { storage::GenVertexArraysAPPLE(n, arrays) } }
#[inline] pub fn GenVertexArraysOES(n: GLsizei, arrays: *GLuint) -> c_void { unsafe { storage::GenVertexArraysOES(n, arrays) } }
#[inline] pub fn GenVertexShadersEXT(range: GLuint) -> GLuint { unsafe { storage::GenVertexShadersEXT(range) } }
#[inline] pub fn GenerateMipmap(target: GLenum) -> c_void { unsafe { storage::GenerateMipmap(target) } }
#[inline] pub fn GenerateMipmapEXT(target: GLenum) -> c_void { unsafe { storage::GenerateMipmapEXT(target) } }
#[inline] pub fn GenerateMipmapOES(target: GLenum) -> c_void { unsafe { storage::GenerateMipmapOES(target) } }
#[inline] pub fn GenerateMultiTexMipmapEXT(texunit: GLenum, target: GLenum) -> c_void { unsafe { storage::GenerateMultiTexMipmapEXT(texunit, target) } }
#[inline] pub fn GenerateTextureMipmapEXT(texture: GLuint, target: GLenum) -> c_void { unsafe { storage::GenerateTextureMipmapEXT(texture, target) } }
#[inline] pub fn GetActiveAtomicCounterBufferiv(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params) } }
#[inline] pub fn GetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void { unsafe { storage::GetActiveAttrib(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetActiveAttribARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void { unsafe { storage::GetActiveAttribARB(programObj, index, maxLength, length, size, type_, name) } }
#[inline] pub fn GetActiveSubroutineName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { unsafe { storage::GetActiveSubroutineName(program, shadertype, index, bufsize, length, name) } }
#[inline] pub fn GetActiveSubroutineUniformName(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { unsafe { storage::GetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name) } }
#[inline] pub fn GetActiveSubroutineUniformiv(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) -> c_void { unsafe { storage::GetActiveSubroutineUniformiv(program, shadertype, index, pname, values) } }
#[inline] pub fn GetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void { unsafe { storage::GetActiveUniform(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetActiveUniformARB(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void { unsafe { storage::GetActiveUniformARB(programObj, index, maxLength, length, size, type_, name) } }
#[inline] pub fn GetActiveUniformBlockName(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> c_void { unsafe { storage::GetActiveUniformBlockName(program, uniformBlockIndex, bufSize, length, uniformBlockName) } }
#[inline] pub fn GetActiveUniformBlockiv(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetActiveUniformBlockiv(program, uniformBlockIndex, pname, params) } }
#[inline] pub fn GetActiveUniformName(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) -> c_void { unsafe { storage::GetActiveUniformName(program, uniformIndex, bufSize, length, uniformName) } }
#[inline] pub fn GetActiveUniformsiv(program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetActiveUniformsiv(program, uniformCount, uniformIndices, pname, params) } }
#[inline] pub fn GetActiveVaryingNV(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { unsafe { storage::GetActiveVaryingNV(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetArrayObjectfvATI(array: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetArrayObjectfvATI(array, pname, params) } }
#[inline] pub fn GetArrayObjectivATI(array: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetArrayObjectivATI(array, pname, params) } }
#[inline] pub fn GetAttachedObjectsARB(containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) -> c_void { unsafe { storage::GetAttachedObjectsARB(containerObj, maxCount, count, obj) } }
#[inline] pub fn GetAttachedShaders(program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> c_void { unsafe { storage::GetAttachedShaders(program, maxCount, count, shaders) } }
#[inline] pub fn GetAttribLocation(program: GLuint, name: *GLchar) -> GLint { unsafe { storage::GetAttribLocation(program, name) } }
#[inline] pub fn GetAttribLocationARB(programObj: GLhandleARB, name: *GLcharARB) -> GLint { unsafe { storage::GetAttribLocationARB(programObj, name) } }
#[inline] pub fn GetBooleanIndexedvEXT(target: GLenum, index: GLuint, data: *GLboolean) -> c_void { unsafe { storage::GetBooleanIndexedvEXT(target, index, data) } }
#[inline] pub fn GetBooleani_v(target: GLenum, index: GLuint, data: *GLboolean) -> c_void { unsafe { storage::GetBooleani_v(target, index, data) } }
#[inline] pub fn GetBooleanv(pname: GLenum, params: *GLboolean) -> c_void { unsafe { storage::GetBooleanv(pname, params) } }
#[inline] pub fn GetBufferParameteri64v(target: GLenum, pname: GLenum, params: *GLint64) -> c_void { unsafe { storage::GetBufferParameteri64v(target, pname, params) } }
#[inline] pub fn GetBufferParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetBufferParameteriv(target, pname, params) } }
#[inline] pub fn GetBufferParameterivARB(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetBufferParameterivARB(target, pname, params) } }
#[inline] pub fn GetBufferParameterui64vNV(target: GLenum, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { storage::GetBufferParameterui64vNV(target, pname, params) } }
#[inline] pub fn GetBufferPointerv(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { unsafe { storage::GetBufferPointerv(target, pname, params) } }
#[inline] pub fn GetBufferPointervARB(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { unsafe { storage::GetBufferPointervARB(target, pname, params) } }
#[inline] pub fn GetBufferPointervOES(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { unsafe { storage::GetBufferPointervOES(target, pname, params) } }
#[inline] pub fn GetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { unsafe { storage::GetBufferSubData(target, offset, size, data) } }
#[inline] pub fn GetBufferSubDataARB(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void { unsafe { storage::GetBufferSubDataARB(target, offset, size, data) } }
#[inline] pub fn GetClipPlane(plane: GLenum, equation: *GLdouble) -> c_void { unsafe { storage::GetClipPlane(plane, equation) } }
#[inline] pub fn GetClipPlanef(plane: GLenum, equation: *GLfloat) -> c_void { unsafe { storage::GetClipPlanef(plane, equation) } }
#[inline] pub fn GetClipPlanefOES(plane: GLenum, equation: *GLfloat) -> c_void { unsafe { storage::GetClipPlanefOES(plane, equation) } }
#[inline] pub fn GetClipPlanex(plane: GLenum, equation: *GLfixed) -> c_void { unsafe { storage::GetClipPlanex(plane, equation) } }
#[inline] pub fn GetClipPlanexOES(plane: GLenum, equation: *GLfixed) -> c_void { unsafe { storage::GetClipPlanexOES(plane, equation) } }
#[inline] pub fn GetColorTable(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { storage::GetColorTable(target, format, type_, table) } }
#[inline] pub fn GetColorTableEXT(target: GLenum, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { unsafe { storage::GetColorTableEXT(target, format, type_, data) } }
#[inline] pub fn GetColorTableParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetColorTableParameterfv(target, pname, params) } }
#[inline] pub fn GetColorTableParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetColorTableParameterfvEXT(target, pname, params) } }
#[inline] pub fn GetColorTableParameterfvSGI(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetColorTableParameterfvSGI(target, pname, params) } }
#[inline] pub fn GetColorTableParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetColorTableParameteriv(target, pname, params) } }
#[inline] pub fn GetColorTableParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetColorTableParameterivEXT(target, pname, params) } }
#[inline] pub fn GetColorTableParameterivSGI(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetColorTableParameterivSGI(target, pname, params) } }
#[inline] pub fn GetColorTableSGI(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { unsafe { storage::GetColorTableSGI(target, format, type_, table) } }
#[inline] pub fn GetCombinerInputParameterfvNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetCombinerInputParameterfvNV(stage, portion, variable, pname, params) } }
#[inline] pub fn GetCombinerInputParameterivNV(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetCombinerInputParameterivNV(stage, portion, variable, pname, params) } }
#[inline] pub fn GetCombinerOutputParameterfvNV(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetCombinerOutputParameterfvNV(stage, portion, pname, params) } }
#[inline] pub fn GetCombinerOutputParameterivNV(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetCombinerOutputParameterivNV(stage, portion, pname, params) } }
#[inline] pub fn GetCombinerStageParameterfvNV(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetCombinerStageParameterfvNV(stage, pname, params) } }
#[inline] pub fn GetCompressedMultiTexImageEXT(texunit: GLenum, target: GLenum, lod: GLint, img: *GLvoid) -> c_void { unsafe { storage::GetCompressedMultiTexImageEXT(texunit, target, lod, img) } }
#[inline] pub fn GetCompressedTexImage(target: GLenum, level: GLint, img: *GLvoid) -> c_void { unsafe { storage::GetCompressedTexImage(target, level, img) } }
#[inline] pub fn GetCompressedTexImageARB(target: GLenum, level: GLint, img: *GLvoid) -> c_void { unsafe { storage::GetCompressedTexImageARB(target, level, img) } }
#[inline] pub fn GetCompressedTextureImageEXT(texture: GLuint, target: GLenum, lod: GLint, img: *GLvoid) -> c_void { unsafe { storage::GetCompressedTextureImageEXT(texture, target, lod, img) } }
#[inline] pub fn GetConvolutionFilter(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { storage::GetConvolutionFilter(target, format, type_, image) } }
#[inline] pub fn GetConvolutionFilterEXT(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { unsafe { storage::GetConvolutionFilterEXT(target, format, type_, image) } }
#[inline] pub fn GetConvolutionParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetConvolutionParameterfv(target, pname, params) } }
#[inline] pub fn GetConvolutionParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetConvolutionParameterfvEXT(target, pname, params) } }
#[inline] pub fn GetConvolutionParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetConvolutionParameteriv(target, pname, params) } }
#[inline] pub fn GetConvolutionParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetConvolutionParameterivEXT(target, pname, params) } }
#[inline] pub fn GetConvolutionParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetConvolutionParameterxvOES(target, pname, params) } }
#[inline] pub fn GetDebugMessageLog(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { unsafe { storage::GetDebugMessageLog(count, bufsize, sources, types, ids, severities, lengths, messageLog) } }
#[inline] pub fn GetDebugMessageLogAMD(count: GLuint, bufsize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) -> GLuint { unsafe { storage::GetDebugMessageLogAMD(count, bufsize, categories, severities, ids, lengths, message) } }
#[inline] pub fn GetDebugMessageLogARB(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { unsafe { storage::GetDebugMessageLogARB(count, bufsize, sources, types, ids, severities, lengths, messageLog) } }
#[inline] pub fn GetDebugMessageLogKHR(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { unsafe { storage::GetDebugMessageLogKHR(count, bufsize, sources, types, ids, severities, lengths, messageLog) } }
#[inline] pub fn GetDetailTexFuncSGIS(target: GLenum, points: *GLfloat) -> c_void { unsafe { storage::GetDetailTexFuncSGIS(target, points) } }
#[inline] pub fn GetDoubleIndexedvEXT(target: GLenum, index: GLuint, data: *GLdouble) -> c_void { unsafe { storage::GetDoubleIndexedvEXT(target, index, data) } }
#[inline] pub fn GetDoublei_v(target: GLenum, index: GLuint, data: *GLdouble) -> c_void { unsafe { storage::GetDoublei_v(target, index, data) } }
#[inline] pub fn GetDoublei_vEXT(pname: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { storage::GetDoublei_vEXT(pname, index, params) } }
#[inline] pub fn GetDoublev(pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetDoublev(pname, params) } }
#[inline] pub fn GetDriverControlStringQCOM(driverControl: GLuint, bufSize: GLsizei, length: *GLsizei, driverControlString: *GLchar) -> c_void { unsafe { storage::GetDriverControlStringQCOM(driverControl, bufSize, length, driverControlString) } }
#[inline] pub fn GetDriverControlsQCOM(num: *GLint, size: GLsizei, driverControls: *GLuint) -> c_void { unsafe { storage::GetDriverControlsQCOM(num, size, driverControls) } }
#[inline] pub unsafe fn GetError() -> GLenum { storage::GetError() }
#[inline] pub fn GetFenceivNV(fence: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFenceivNV(fence, pname, params) } }
#[inline] pub fn GetFinalCombinerInputParameterfvNV(variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetFinalCombinerInputParameterfvNV(variable, pname, params) } }
#[inline] pub fn GetFinalCombinerInputParameterivNV(variable: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFinalCombinerInputParameterivNV(variable, pname, params) } }
#[inline] pub fn GetFixedv(pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetFixedv(pname, params) } }
#[inline] pub fn GetFixedvOES(pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetFixedvOES(pname, params) } }
#[inline] pub fn GetFloatIndexedvEXT(target: GLenum, index: GLuint, data: *GLfloat) -> c_void { unsafe { storage::GetFloatIndexedvEXT(target, index, data) } }
#[inline] pub fn GetFloati_v(target: GLenum, index: GLuint, data: *GLfloat) -> c_void { unsafe { storage::GetFloati_v(target, index, data) } }
#[inline] pub fn GetFloati_vEXT(pname: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { storage::GetFloati_vEXT(pname, index, params) } }
#[inline] pub fn GetFloatv(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetFloatv(pname, params) } }
#[inline] pub unsafe fn GetFogFuncSGIS(points: *GLfloat) -> c_void { storage::GetFogFuncSGIS(points) }
#[inline] pub fn GetFragDataIndex(program: GLuint, name: *GLchar) -> GLint { unsafe { storage::GetFragDataIndex(program, name) } }
#[inline] pub fn GetFragDataLocation(program: GLuint, name: *GLchar) -> GLint { unsafe { storage::GetFragDataLocation(program, name) } }
#[inline] pub fn GetFragDataLocationEXT(program: GLuint, name: *GLchar) -> GLint { unsafe { storage::GetFragDataLocationEXT(program, name) } }
#[inline] pub fn GetFragmentLightfvSGIX(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetFragmentLightfvSGIX(light, pname, params) } }
#[inline] pub fn GetFragmentLightivSGIX(light: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFragmentLightivSGIX(light, pname, params) } }
#[inline] pub fn GetFragmentMaterialfvSGIX(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetFragmentMaterialfvSGIX(face, pname, params) } }
#[inline] pub fn GetFragmentMaterialivSGIX(face: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFragmentMaterialivSGIX(face, pname, params) } }
#[inline] pub fn GetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFramebufferAttachmentParameteriv(target, attachment, pname, params) } }
#[inline] pub fn GetFramebufferAttachmentParameterivEXT(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFramebufferAttachmentParameterivEXT(target, attachment, pname, params) } }
#[inline] pub fn GetFramebufferAttachmentParameterivOES(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFramebufferAttachmentParameterivOES(target, attachment, pname, params) } }
#[inline] pub fn GetFramebufferParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFramebufferParameteriv(target, pname, params) } }
#[inline] pub fn GetFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetFramebufferParameterivEXT(framebuffer, pname, params) } }
#[inline] pub unsafe fn GetGraphicsResetStatusARB() -> GLenum { storage::GetGraphicsResetStatusARB() }
#[inline] pub unsafe fn GetGraphicsResetStatusEXT() -> GLenum { storage::GetGraphicsResetStatusEXT() }
#[inline] pub fn GetHandleARB(pname: GLenum) -> GLhandleARB { unsafe { storage::GetHandleARB(pname) } }
#[inline] pub fn GetHistogram(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { unsafe { storage::GetHistogram(target, reset, format, type_, values) } }
#[inline] pub fn GetHistogramEXT(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { unsafe { storage::GetHistogramEXT(target, reset, format, type_, values) } }
#[inline] pub fn GetHistogramParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetHistogramParameterfv(target, pname, params) } }
#[inline] pub fn GetHistogramParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetHistogramParameterfvEXT(target, pname, params) } }
#[inline] pub fn GetHistogramParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetHistogramParameteriv(target, pname, params) } }
#[inline] pub fn GetHistogramParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetHistogramParameterivEXT(target, pname, params) } }
#[inline] pub fn GetHistogramParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetHistogramParameterxvOES(target, pname, params) } }
#[inline] pub fn GetImageHandleARB(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 { unsafe { storage::GetImageHandleARB(texture, level, layered, layer, format) } }
#[inline] pub fn GetImageHandleNV(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 { unsafe { storage::GetImageHandleNV(texture, level, layered, layer, format) } }
#[inline] pub fn GetImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetImageTransformParameterfvHP(target, pname, params) } }
#[inline] pub fn GetImageTransformParameterivHP(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetImageTransformParameterivHP(target, pname, params) } }
#[inline] pub fn GetInfoLogARB(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) -> c_void { unsafe { storage::GetInfoLogARB(obj, maxLength, length, infoLog) } }
#[inline] pub unsafe fn GetInstrumentsSGIX() -> GLint { storage::GetInstrumentsSGIX() }
#[inline] pub fn GetInteger64i_v(target: GLenum, index: GLuint, data: *GLint64) -> c_void { unsafe { storage::GetInteger64i_v(target, index, data) } }
#[inline] pub fn GetInteger64v(pname: GLenum, params: *GLint64) -> c_void { unsafe { storage::GetInteger64v(pname, params) } }
#[inline] pub fn GetInteger64vAPPLE(pname: GLenum, params: *GLint64) -> c_void { unsafe { storage::GetInteger64vAPPLE(pname, params) } }
#[inline] pub fn GetIntegerIndexedvEXT(target: GLenum, index: GLuint, data: *GLint) -> c_void { unsafe { storage::GetIntegerIndexedvEXT(target, index, data) } }
#[inline] pub fn GetIntegeri_v(target: GLenum, index: GLuint, data: *GLint) -> c_void { unsafe { storage::GetIntegeri_v(target, index, data) } }
#[inline] pub fn GetIntegeri_vEXT(target: GLenum, index: GLuint, data: *GLint) -> c_void { unsafe { storage::GetIntegeri_vEXT(target, index, data) } }
#[inline] pub fn GetIntegerui64i_vNV(value: GLenum, index: GLuint, result: *GLuint64EXT) -> c_void { unsafe { storage::GetIntegerui64i_vNV(value, index, result) } }
#[inline] pub fn GetIntegerui64vNV(value: GLenum, result: *GLuint64EXT) -> c_void { unsafe { storage::GetIntegerui64vNV(value, result) } }
#[inline] pub fn GetIntegerv(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetIntegerv(pname, params) } }
#[inline] pub fn GetInternalformati64v(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) -> c_void { unsafe { storage::GetInternalformati64v(target, internalformat, pname, bufSize, params) } }
#[inline] pub fn GetInternalformativ(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) -> c_void { unsafe { storage::GetInternalformativ(target, internalformat, pname, bufSize, params) } }
#[inline] pub fn GetInvariantBooleanvEXT(id: GLuint, value: GLenum, data: *GLboolean) -> c_void { unsafe { storage::GetInvariantBooleanvEXT(id, value, data) } }
#[inline] pub fn GetInvariantFloatvEXT(id: GLuint, value: GLenum, data: *GLfloat) -> c_void { unsafe { storage::GetInvariantFloatvEXT(id, value, data) } }
#[inline] pub fn GetInvariantIntegervEXT(id: GLuint, value: GLenum, data: *GLint) -> c_void { unsafe { storage::GetInvariantIntegervEXT(id, value, data) } }
#[inline] pub fn GetLightfv(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetLightfv(light, pname, params) } }
#[inline] pub fn GetLightiv(light: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetLightiv(light, pname, params) } }
#[inline] pub fn GetLightx(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetLightx(light, pname, params) } }
#[inline] pub fn GetLightxOES(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetLightxOES(light, pname, params) } }
#[inline] pub fn GetLightxv(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetLightxv(light, pname, params) } }
#[inline] pub fn GetLightxvOES(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetLightxvOES(light, pname, params) } }
#[inline] pub fn GetListParameterfvSGIX(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetListParameterfvSGIX(list, pname, params) } }
#[inline] pub fn GetListParameterivSGIX(list: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetListParameterivSGIX(list, pname, params) } }
#[inline] pub fn GetLocalConstantBooleanvEXT(id: GLuint, value: GLenum, data: *GLboolean) -> c_void { unsafe { storage::GetLocalConstantBooleanvEXT(id, value, data) } }
#[inline] pub fn GetLocalConstantFloatvEXT(id: GLuint, value: GLenum, data: *GLfloat) -> c_void { unsafe { storage::GetLocalConstantFloatvEXT(id, value, data) } }
#[inline] pub fn GetLocalConstantIntegervEXT(id: GLuint, value: GLenum, data: *GLint) -> c_void { unsafe { storage::GetLocalConstantIntegervEXT(id, value, data) } }
#[inline] pub fn GetMapAttribParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMapAttribParameterfvNV(target, index, pname, params) } }
#[inline] pub fn GetMapAttribParameterivNV(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMapAttribParameterivNV(target, index, pname, params) } }
#[inline] pub fn GetMapControlPointsNV(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *GLvoid) -> c_void { unsafe { storage::GetMapControlPointsNV(target, index, type_, ustride, vstride, packed, points) } }
#[inline] pub fn GetMapParameterfvNV(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMapParameterfvNV(target, pname, params) } }
#[inline] pub fn GetMapParameterivNV(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMapParameterivNV(target, pname, params) } }
#[inline] pub fn GetMapdv(target: GLenum, query: GLenum, v: *GLdouble) -> c_void { unsafe { storage::GetMapdv(target, query, v) } }
#[inline] pub fn GetMapfv(target: GLenum, query: GLenum, v: *GLfloat) -> c_void { unsafe { storage::GetMapfv(target, query, v) } }
#[inline] pub fn GetMapiv(target: GLenum, query: GLenum, v: *GLint) -> c_void { unsafe { storage::GetMapiv(target, query, v) } }
#[inline] pub fn GetMapxvOES(target: GLenum, query: GLenum, v: *GLfixed) -> c_void { unsafe { storage::GetMapxvOES(target, query, v) } }
#[inline] pub fn GetMaterialfv(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMaterialfv(face, pname, params) } }
#[inline] pub fn GetMaterialiv(face: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMaterialiv(face, pname, params) } }
#[inline] pub fn GetMaterialx(face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::GetMaterialx(face, pname, param) } }
#[inline] pub fn GetMaterialxOES(face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::GetMaterialxOES(face, pname, param) } }
#[inline] pub fn GetMaterialxv(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetMaterialxv(face, pname, params) } }
#[inline] pub fn GetMaterialxvOES(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetMaterialxvOES(face, pname, params) } }
#[inline] pub fn GetMinmax(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { unsafe { storage::GetMinmax(target, reset, format, type_, values) } }
#[inline] pub fn GetMinmaxEXT(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { unsafe { storage::GetMinmaxEXT(target, reset, format, type_, values) } }
#[inline] pub fn GetMinmaxParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMinmaxParameterfv(target, pname, params) } }
#[inline] pub fn GetMinmaxParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMinmaxParameterfvEXT(target, pname, params) } }
#[inline] pub fn GetMinmaxParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMinmaxParameteriv(target, pname, params) } }
#[inline] pub fn GetMinmaxParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMinmaxParameterivEXT(target, pname, params) } }
#[inline] pub fn GetMultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMultiTexEnvfvEXT(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMultiTexEnvivEXT(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetMultiTexGendvEXT(texunit, coord, pname, params) } }
#[inline] pub fn GetMultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMultiTexGenfvEXT(texunit, coord, pname, params) } }
#[inline] pub fn GetMultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMultiTexGenivEXT(texunit, coord, pname, params) } }
#[inline] pub fn GetMultiTexImageEXT(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::GetMultiTexImageEXT(texunit, target, level, format, type_, pixels) } }
#[inline] pub fn GetMultiTexLevelParameterfvEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMultiTexLevelParameterfvEXT(texunit, target, level, pname, params) } }
#[inline] pub fn GetMultiTexLevelParameterivEXT(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMultiTexLevelParameterivEXT(texunit, target, level, pname, params) } }
#[inline] pub fn GetMultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMultiTexParameterIivEXT(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetMultiTexParameterIuivEXT(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetMultiTexParameterfvEXT(texunit, target, pname, params) } }
#[inline] pub fn GetMultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetMultiTexParameterivEXT(texunit, target, pname, params) } }
#[inline] pub fn GetMultisamplefv(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { unsafe { storage::GetMultisamplefv(pname, index, val) } }
#[inline] pub fn GetMultisamplefvNV(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { unsafe { storage::GetMultisamplefvNV(pname, index, val) } }
#[inline] pub fn GetNamedBufferParameterivEXT(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetNamedBufferParameterivEXT(buffer, pname, params) } }
#[inline] pub fn GetNamedBufferParameterui64vNV(buffer: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { storage::GetNamedBufferParameterui64vNV(buffer, pname, params) } }
#[inline] pub fn GetNamedBufferPointervEXT(buffer: GLuint, pname: GLenum, params: **GLvoid) -> c_void { unsafe { storage::GetNamedBufferPointervEXT(buffer, pname, params) } }
#[inline] pub fn GetNamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { unsafe { storage::GetNamedBufferSubDataEXT(buffer, offset, size, data) } }
#[inline] pub fn GetNamedFramebufferAttachmentParameterivEXT(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetNamedFramebufferAttachmentParameterivEXT(framebuffer, attachment, pname, params) } }
#[inline] pub fn GetNamedFramebufferParameterivEXT(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetNamedFramebufferParameterivEXT(framebuffer, pname, params) } }
#[inline] pub fn GetNamedProgramLocalParameterIivEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { storage::GetNamedProgramLocalParameterIivEXT(program, target, index, params) } }
#[inline] pub fn GetNamedProgramLocalParameterIuivEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { storage::GetNamedProgramLocalParameterIuivEXT(program, target, index, params) } }
#[inline] pub fn GetNamedProgramLocalParameterdvEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { storage::GetNamedProgramLocalParameterdvEXT(program, target, index, params) } }
#[inline] pub fn GetNamedProgramLocalParameterfvEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { storage::GetNamedProgramLocalParameterfvEXT(program, target, index, params) } }
#[inline] pub fn GetNamedProgramStringEXT(program: GLuint, target: GLenum, pname: GLenum, string: *GLvoid) -> c_void { unsafe { storage::GetNamedProgramStringEXT(program, target, pname, string) } }
#[inline] pub fn GetNamedProgramivEXT(program: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetNamedProgramivEXT(program, target, pname, params) } }
#[inline] pub fn GetNamedRenderbufferParameterivEXT(renderbuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetNamedRenderbufferParameterivEXT(renderbuffer, pname, params) } }
#[inline] pub fn GetNamedStringARB(namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, string: *GLchar) -> c_void { unsafe { storage::GetNamedStringARB(namelen, name, bufSize, stringlen, string) } }
#[inline] pub fn GetNamedStringivARB(namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetNamedStringivARB(namelen, name, pname, params) } }
#[inline] pub fn GetObjectBufferfvATI(buffer: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetObjectBufferfvATI(buffer, pname, params) } }
#[inline] pub fn GetObjectBufferivATI(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetObjectBufferivATI(buffer, pname, params) } }
#[inline] pub fn GetObjectLabel(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { storage::GetObjectLabel(identifier, name, bufSize, length, label) } }
#[inline] pub fn GetObjectLabelEXT(type_: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { storage::GetObjectLabelEXT(type_, object, bufSize, length, label) } }
#[inline] pub fn GetObjectLabelKHR(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { storage::GetObjectLabelKHR(identifier, name, bufSize, length, label) } }
#[inline] pub fn GetObjectParameterfvARB(obj: GLhandleARB, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetObjectParameterfvARB(obj, pname, params) } }
#[inline] pub fn GetObjectParameterivAPPLE(objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetObjectParameterivAPPLE(objectType, name, pname, params) } }
#[inline] pub fn GetObjectParameterivARB(obj: GLhandleARB, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetObjectParameterivARB(obj, pname, params) } }
#[inline] pub fn GetObjectPtrLabel(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { storage::GetObjectPtrLabel(ptr, bufSize, length, label) } }
#[inline] pub fn GetObjectPtrLabelKHR(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { unsafe { storage::GetObjectPtrLabelKHR(ptr, bufSize, length, label) } }
#[inline] pub fn GetOcclusionQueryivNV(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetOcclusionQueryivNV(id, pname, params) } }
#[inline] pub fn GetOcclusionQueryuivNV(id: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetOcclusionQueryuivNV(id, pname, params) } }
#[inline] pub fn GetPathColorGenfvNV(color: GLenum, pname: GLenum, value: *GLfloat) -> c_void { unsafe { storage::GetPathColorGenfvNV(color, pname, value) } }
#[inline] pub fn GetPathColorGenivNV(color: GLenum, pname: GLenum, value: *GLint) -> c_void { unsafe { storage::GetPathColorGenivNV(color, pname, value) } }
#[inline] pub fn GetPathCommandsNV(path: GLuint, commands: *GLubyte) -> c_void { unsafe { storage::GetPathCommandsNV(path, commands) } }
#[inline] pub fn GetPathCoordsNV(path: GLuint, coords: *GLfloat) -> c_void { unsafe { storage::GetPathCoordsNV(path, coords) } }
#[inline] pub fn GetPathDashArrayNV(path: GLuint, dashArray: *GLfloat) -> c_void { unsafe { storage::GetPathDashArrayNV(path, dashArray) } }
#[inline] pub fn GetPathLengthNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat { unsafe { storage::GetPathLengthNV(path, startSegment, numSegments) } }
#[inline] pub fn GetPathMetricRangeNV(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) -> c_void { unsafe { storage::GetPathMetricRangeNV(metricQueryMask, firstPathName, numPaths, stride, metrics) } }
#[inline] pub fn GetPathMetricsNV(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) -> c_void { unsafe { storage::GetPathMetricsNV(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) } }
#[inline] pub fn GetPathParameterfvNV(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void { unsafe { storage::GetPathParameterfvNV(path, pname, value) } }
#[inline] pub fn GetPathParameterivNV(path: GLuint, pname: GLenum, value: *GLint) -> c_void { unsafe { storage::GetPathParameterivNV(path, pname, value) } }
#[inline] pub fn GetPathSpacingNV(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) -> c_void { unsafe { storage::GetPathSpacingNV(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) } }
#[inline] pub fn GetPathTexGenfvNV(texCoordSet: GLenum, pname: GLenum, value: *GLfloat) -> c_void { unsafe { storage::GetPathTexGenfvNV(texCoordSet, pname, value) } }
#[inline] pub fn GetPathTexGenivNV(texCoordSet: GLenum, pname: GLenum, value: *GLint) -> c_void { unsafe { storage::GetPathTexGenivNV(texCoordSet, pname, value) } }
#[inline] pub fn GetPerfMonitorCounterDataAMD(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) -> c_void { unsafe { storage::GetPerfMonitorCounterDataAMD(monitor, pname, dataSize, data, bytesWritten) } }
#[inline] pub fn GetPerfMonitorCounterInfoAMD(group: GLuint, counter: GLuint, pname: GLenum, data: *GLvoid) -> c_void { unsafe { storage::GetPerfMonitorCounterInfoAMD(group, counter, pname, data) } }
#[inline] pub fn GetPerfMonitorCounterStringAMD(group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) -> c_void { unsafe { storage::GetPerfMonitorCounterStringAMD(group, counter, bufSize, length, counterString) } }
#[inline] pub fn GetPerfMonitorCountersAMD(group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) -> c_void { unsafe { storage::GetPerfMonitorCountersAMD(group, numCounters, maxActiveCounters, counterSize, counters) } }
#[inline] pub fn GetPerfMonitorGroupStringAMD(group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) -> c_void { unsafe { storage::GetPerfMonitorGroupStringAMD(group, bufSize, length, groupString) } }
#[inline] pub fn GetPerfMonitorGroupsAMD(numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) -> c_void { unsafe { storage::GetPerfMonitorGroupsAMD(numGroups, groupsSize, groups) } }
#[inline] pub fn GetPixelMapfv(map: GLenum, values: *GLfloat) -> c_void { unsafe { storage::GetPixelMapfv(map, values) } }
#[inline] pub fn GetPixelMapuiv(map: GLenum, values: *GLuint) -> c_void { unsafe { storage::GetPixelMapuiv(map, values) } }
#[inline] pub fn GetPixelMapusv(map: GLenum, values: *GLushort) -> c_void { unsafe { storage::GetPixelMapusv(map, values) } }
#[inline] pub fn GetPixelMapxv(map: GLenum, size: GLint, values: *GLfixed) -> c_void { unsafe { storage::GetPixelMapxv(map, size, values) } }
#[inline] pub fn GetPixelTexGenParameterfvSGIS(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetPixelTexGenParameterfvSGIS(pname, params) } }
#[inline] pub fn GetPixelTexGenParameterivSGIS(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetPixelTexGenParameterivSGIS(pname, params) } }
#[inline] pub fn GetPixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetPixelTransformParameterfvEXT(target, pname, params) } }
#[inline] pub fn GetPixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetPixelTransformParameterivEXT(target, pname, params) } }
#[inline] pub fn GetPointerIndexedvEXT(target: GLenum, index: GLuint, data: **GLvoid) -> c_void { unsafe { storage::GetPointerIndexedvEXT(target, index, data) } }
#[inline] pub fn GetPointeri_vEXT(pname: GLenum, index: GLuint, params: **GLvoid) -> c_void { unsafe { storage::GetPointeri_vEXT(pname, index, params) } }
#[inline] pub fn GetPointerv(pname: GLenum, params: **GLvoid) -> c_void { unsafe { storage::GetPointerv(pname, params) } }
#[inline] pub fn GetPointervEXT(pname: GLenum, params: **GLvoid) -> c_void { unsafe { storage::GetPointervEXT(pname, params) } }
#[inline] pub fn GetPointervKHR(pname: GLenum, params: **GLvoid) -> c_void { unsafe { storage::GetPointervKHR(pname, params) } }
#[inline] pub unsafe fn GetPolygonStipple(mask: *GLubyte) -> c_void { storage::GetPolygonStipple(mask) }
#[inline] pub fn GetProgramBinary(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void { unsafe { storage::GetProgramBinary(program, bufSize, length, binaryFormat, binary) } }
#[inline] pub fn GetProgramBinaryOES(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void { unsafe { storage::GetProgramBinaryOES(program, bufSize, length, binaryFormat, binary) } }
#[inline] pub fn GetProgramEnvParameterIivNV(target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { storage::GetProgramEnvParameterIivNV(target, index, params) } }
#[inline] pub fn GetProgramEnvParameterIuivNV(target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { storage::GetProgramEnvParameterIuivNV(target, index, params) } }
#[inline] pub fn GetProgramEnvParameterdvARB(target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { storage::GetProgramEnvParameterdvARB(target, index, params) } }
#[inline] pub fn GetProgramEnvParameterfvARB(target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { storage::GetProgramEnvParameterfvARB(target, index, params) } }
#[inline] pub fn GetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { unsafe { storage::GetProgramInfoLog(program, bufSize, length, infoLog) } }
#[inline] pub fn GetProgramInterfaceiv(program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetProgramInterfaceiv(program, programInterface, pname, params) } }
#[inline] pub fn GetProgramLocalParameterIivNV(target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { storage::GetProgramLocalParameterIivNV(target, index, params) } }
#[inline] pub fn GetProgramLocalParameterIuivNV(target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { storage::GetProgramLocalParameterIuivNV(target, index, params) } }
#[inline] pub fn GetProgramLocalParameterdvARB(target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { storage::GetProgramLocalParameterdvARB(target, index, params) } }
#[inline] pub fn GetProgramLocalParameterfvARB(target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { storage::GetProgramLocalParameterfvARB(target, index, params) } }
#[inline] pub fn GetProgramNamedParameterdvNV(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLdouble) -> c_void { unsafe { storage::GetProgramNamedParameterdvNV(id, len, name, params) } }
#[inline] pub fn GetProgramNamedParameterfvNV(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLfloat) -> c_void { unsafe { storage::GetProgramNamedParameterfvNV(id, len, name, params) } }
#[inline] pub fn GetProgramParameterdvNV(target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetProgramParameterdvNV(target, index, pname, params) } }
#[inline] pub fn GetProgramParameterfvNV(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetProgramParameterfvNV(target, index, pname, params) } }
#[inline] pub fn GetProgramPipelineInfoLog(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { unsafe { storage::GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog) } }
#[inline] pub fn GetProgramPipelineInfoLogEXT(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { unsafe { storage::GetProgramPipelineInfoLogEXT(pipeline, bufSize, length, infoLog) } }
#[inline] pub fn GetProgramPipelineiv(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetProgramPipelineiv(pipeline, pname, params) } }
#[inline] pub fn GetProgramPipelineivEXT(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetProgramPipelineivEXT(pipeline, pname, params) } }
#[inline] pub fn GetProgramResourceIndex(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint { unsafe { storage::GetProgramResourceIndex(program, programInterface, name) } }
#[inline] pub fn GetProgramResourceLocation(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint { unsafe { storage::GetProgramResourceLocation(program, programInterface, name) } }
#[inline] pub fn GetProgramResourceLocationIndex(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint { unsafe { storage::GetProgramResourceLocationIndex(program, programInterface, name) } }
#[inline] pub fn GetProgramResourceName(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { unsafe { storage::GetProgramResourceName(program, programInterface, index, bufSize, length, name) } }
#[inline] pub fn GetProgramResourceiv(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> c_void { unsafe { storage::GetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params) } }
#[inline] pub fn GetProgramStageiv(program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) -> c_void { unsafe { storage::GetProgramStageiv(program, shadertype, pname, values) } }
#[inline] pub fn GetProgramStringARB(target: GLenum, pname: GLenum, string: *GLvoid) -> c_void { unsafe { storage::GetProgramStringARB(target, pname, string) } }
#[inline] pub fn GetProgramStringNV(id: GLuint, pname: GLenum, program: *GLubyte) -> c_void { unsafe { storage::GetProgramStringNV(id, pname, program) } }
#[inline] pub fn GetProgramSubroutineParameteruivNV(target: GLenum, index: GLuint, param: *GLuint) -> c_void { unsafe { storage::GetProgramSubroutineParameteruivNV(target, index, param) } }
#[inline] pub fn GetProgramiv(program: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetProgramiv(program, pname, params) } }
#[inline] pub fn GetProgramivARB(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetProgramivARB(target, pname, params) } }
#[inline] pub fn GetProgramivNV(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetProgramivNV(id, pname, params) } }
#[inline] pub fn GetQueryIndexediv(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetQueryIndexediv(target, index, pname, params) } }
#[inline] pub fn GetQueryObjecti64v(id: GLuint, pname: GLenum, params: *GLint64) -> c_void { unsafe { storage::GetQueryObjecti64v(id, pname, params) } }
#[inline] pub fn GetQueryObjecti64vEXT(id: GLuint, pname: GLenum, params: *GLint64) -> c_void { unsafe { storage::GetQueryObjecti64vEXT(id, pname, params) } }
#[inline] pub fn GetQueryObjectiv(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetQueryObjectiv(id, pname, params) } }
#[inline] pub fn GetQueryObjectivARB(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetQueryObjectivARB(id, pname, params) } }
#[inline] pub fn GetQueryObjectivEXT(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetQueryObjectivEXT(id, pname, params) } }
#[inline] pub fn GetQueryObjectui64v(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void { unsafe { storage::GetQueryObjectui64v(id, pname, params) } }
#[inline] pub fn GetQueryObjectui64vEXT(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void { unsafe { storage::GetQueryObjectui64vEXT(id, pname, params) } }
#[inline] pub fn GetQueryObjectuiv(id: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetQueryObjectuiv(id, pname, params) } }
#[inline] pub fn GetQueryObjectuivARB(id: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetQueryObjectuivARB(id, pname, params) } }
#[inline] pub fn GetQueryObjectuivEXT(id: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetQueryObjectuivEXT(id, pname, params) } }
#[inline] pub fn GetQueryiv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetQueryiv(target, pname, params) } }
#[inline] pub fn GetQueryivARB(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetQueryivARB(target, pname, params) } }
#[inline] pub fn GetQueryivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetQueryivEXT(target, pname, params) } }
#[inline] pub fn GetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetRenderbufferParameteriv(target, pname, params) } }
#[inline] pub fn GetRenderbufferParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetRenderbufferParameterivEXT(target, pname, params) } }
#[inline] pub fn GetRenderbufferParameterivOES(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetRenderbufferParameterivOES(target, pname, params) } }
#[inline] pub fn GetSamplerParameterIiv(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetSamplerParameterIiv(sampler, pname, params) } }
#[inline] pub fn GetSamplerParameterIuiv(sampler: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetSamplerParameterIuiv(sampler, pname, params) } }
#[inline] pub fn GetSamplerParameterfv(sampler: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetSamplerParameterfv(sampler, pname, params) } }
#[inline] pub fn GetSamplerParameteriv(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetSamplerParameteriv(sampler, pname, params) } }
#[inline] pub fn GetSeparableFilter(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void { unsafe { storage::GetSeparableFilter(target, format, type_, row, column, span) } }
#[inline] pub fn GetSeparableFilterEXT(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void { unsafe { storage::GetSeparableFilterEXT(target, format, type_, row, column, span) } }
#[inline] pub fn GetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { unsafe { storage::GetShaderInfoLog(shader, bufSize, length, infoLog) } }
#[inline] pub fn GetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> c_void { unsafe { storage::GetShaderPrecisionFormat(shadertype, precisiontype, range, precision) } }
#[inline] pub fn GetShaderSource(shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void { unsafe { storage::GetShaderSource(shader, bufSize, length, source) } }
#[inline] pub fn GetShaderSourceARB(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) -> c_void { unsafe { storage::GetShaderSourceARB(obj, maxLength, length, source) } }
#[inline] pub fn GetShaderiv(shader: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetShaderiv(shader, pname, params) } }
#[inline] pub fn GetSharpenTexFuncSGIS(target: GLenum, points: *GLfloat) -> c_void { unsafe { storage::GetSharpenTexFuncSGIS(target, points) } }
#[inline] pub fn GetString(name: GLenum) -> *GLubyte { unsafe { storage::GetString(name) } }
#[inline] pub fn GetStringi(name: GLenum, index: GLuint) -> *GLubyte { unsafe { storage::GetStringi(name, index) } }
#[inline] pub fn GetSubroutineIndex(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint { unsafe { storage::GetSubroutineIndex(program, shadertype, name) } }
#[inline] pub fn GetSubroutineUniformLocation(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint { unsafe { storage::GetSubroutineUniformLocation(program, shadertype, name) } }
#[inline] pub fn GetSynciv(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { unsafe { storage::GetSynciv(sync, pname, bufSize, length, values) } }
#[inline] pub fn GetSyncivAPPLE(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { unsafe { storage::GetSyncivAPPLE(sync, pname, bufSize, length, values) } }
#[inline] pub fn GetTexBumpParameterfvATI(pname: GLenum, param: *GLfloat) -> c_void { unsafe { storage::GetTexBumpParameterfvATI(pname, param) } }
#[inline] pub fn GetTexBumpParameterivATI(pname: GLenum, param: *GLint) -> c_void { unsafe { storage::GetTexBumpParameterivATI(pname, param) } }
#[inline] pub fn GetTexEnvfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetTexEnvfv(target, pname, params) } }
#[inline] pub fn GetTexEnviv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTexEnviv(target, pname, params) } }
#[inline] pub fn GetTexEnvxv(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetTexEnvxv(target, pname, params) } }
#[inline] pub fn GetTexEnvxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetTexEnvxvOES(target, pname, params) } }
#[inline] pub fn GetTexFilterFuncSGIS(target: GLenum, filter: GLenum, weights: *GLfloat) -> c_void { unsafe { storage::GetTexFilterFuncSGIS(target, filter, weights) } }
#[inline] pub fn GetTexGendv(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetTexGendv(coord, pname, params) } }
#[inline] pub fn GetTexGenfv(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetTexGenfv(coord, pname, params) } }
#[inline] pub fn GetTexGenfvOES(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetTexGenfvOES(coord, pname, params) } }
#[inline] pub fn GetTexGeniv(coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTexGeniv(coord, pname, params) } }
#[inline] pub fn GetTexGenivOES(coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTexGenivOES(coord, pname, params) } }
#[inline] pub fn GetTexGenxvOES(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetTexGenxvOES(coord, pname, params) } }
#[inline] pub fn GetTexImage(target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::GetTexImage(target, level, format, type_, pixels) } }
#[inline] pub fn GetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetTexLevelParameterfv(target, level, pname, params) } }
#[inline] pub fn GetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTexLevelParameteriv(target, level, pname, params) } }
#[inline] pub fn GetTexLevelParameterxvOES(target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetTexLevelParameterxvOES(target, level, pname, params) } }
#[inline] pub fn GetTexParameterIiv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTexParameterIiv(target, pname, params) } }
#[inline] pub fn GetTexParameterIivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTexParameterIivEXT(target, pname, params) } }
#[inline] pub fn GetTexParameterIuiv(target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetTexParameterIuiv(target, pname, params) } }
#[inline] pub fn GetTexParameterIuivEXT(target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetTexParameterIuivEXT(target, pname, params) } }
#[inline] pub fn GetTexParameterPointervAPPLE(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { unsafe { storage::GetTexParameterPointervAPPLE(target, pname, params) } }
#[inline] pub fn GetTexParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetTexParameterfv(target, pname, params) } }
#[inline] pub fn GetTexParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTexParameteriv(target, pname, params) } }
#[inline] pub fn GetTexParameterxv(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetTexParameterxv(target, pname, params) } }
#[inline] pub fn GetTexParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::GetTexParameterxvOES(target, pname, params) } }
#[inline] pub fn GetTextureHandleARB(texture: GLuint) -> GLuint64 { unsafe { storage::GetTextureHandleARB(texture) } }
#[inline] pub fn GetTextureHandleNV(texture: GLuint) -> GLuint64 { unsafe { storage::GetTextureHandleNV(texture) } }
#[inline] pub fn GetTextureImageEXT(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::GetTextureImageEXT(texture, target, level, format, type_, pixels) } }
#[inline] pub fn GetTextureLevelParameterfvEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetTextureLevelParameterfvEXT(texture, target, level, pname, params) } }
#[inline] pub fn GetTextureLevelParameterivEXT(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTextureLevelParameterivEXT(texture, target, level, pname, params) } }
#[inline] pub fn GetTextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTextureParameterIivEXT(texture, target, pname, params) } }
#[inline] pub fn GetTextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetTextureParameterIuivEXT(texture, target, pname, params) } }
#[inline] pub fn GetTextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetTextureParameterfvEXT(texture, target, pname, params) } }
#[inline] pub fn GetTextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTextureParameterivEXT(texture, target, pname, params) } }
#[inline] pub fn GetTextureSamplerHandleARB(texture: GLuint, sampler: GLuint) -> GLuint64 { unsafe { storage::GetTextureSamplerHandleARB(texture, sampler) } }
#[inline] pub fn GetTextureSamplerHandleNV(texture: GLuint, sampler: GLuint) -> GLuint64 { unsafe { storage::GetTextureSamplerHandleNV(texture, sampler) } }
#[inline] pub fn GetTrackMatrixivNV(target: GLenum, address: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetTrackMatrixivNV(target, address, pname, params) } }
#[inline] pub fn GetTransformFeedbackVarying(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { unsafe { storage::GetTransformFeedbackVarying(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetTransformFeedbackVaryingEXT(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { unsafe { storage::GetTransformFeedbackVaryingEXT(program, index, bufSize, length, size, type_, name) } }
#[inline] pub fn GetTransformFeedbackVaryingNV(program: GLuint, index: GLuint, location: *GLint) -> c_void { unsafe { storage::GetTransformFeedbackVaryingNV(program, index, location) } }
#[inline] pub fn GetTranslatedShaderSourceANGLE(shader: GLuint, bufsize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void { unsafe { storage::GetTranslatedShaderSourceANGLE(shader, bufsize, length, source) } }
#[inline] pub fn GetUniformBlockIndex(program: GLuint, uniformBlockName: *GLchar) -> GLuint { unsafe { storage::GetUniformBlockIndex(program, uniformBlockName) } }
#[inline] pub fn GetUniformBufferSizeEXT(program: GLuint, location: GLint) -> GLint { unsafe { storage::GetUniformBufferSizeEXT(program, location) } }
#[inline] pub fn GetUniformIndices(program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> c_void { unsafe { storage::GetUniformIndices(program, uniformCount, uniformNames, uniformIndices) } }
#[inline] pub fn GetUniformLocation(program: GLuint, name: *GLchar) -> GLint { unsafe { storage::GetUniformLocation(program, name) } }
#[inline] pub fn GetUniformLocationARB(programObj: GLhandleARB, name: *GLcharARB) -> GLint { unsafe { storage::GetUniformLocationARB(programObj, name) } }
#[inline] pub fn GetUniformOffsetEXT(program: GLuint, location: GLint) -> GLintptr { unsafe { storage::GetUniformOffsetEXT(program, location) } }
#[inline] pub fn GetUniformSubroutineuiv(shadertype: GLenum, location: GLint, params: *GLuint) -> c_void { unsafe { storage::GetUniformSubroutineuiv(shadertype, location, params) } }
#[inline] pub fn GetUniformdv(program: GLuint, location: GLint, params: *GLdouble) -> c_void { unsafe { storage::GetUniformdv(program, location, params) } }
#[inline] pub fn GetUniformfv(program: GLuint, location: GLint, params: *GLfloat) -> c_void { unsafe { storage::GetUniformfv(program, location, params) } }
#[inline] pub fn GetUniformfvARB(programObj: GLhandleARB, location: GLint, params: *GLfloat) -> c_void { unsafe { storage::GetUniformfvARB(programObj, location, params) } }
#[inline] pub fn GetUniformi64vNV(program: GLuint, location: GLint, params: *GLint64EXT) -> c_void { unsafe { storage::GetUniformi64vNV(program, location, params) } }
#[inline] pub fn GetUniformiv(program: GLuint, location: GLint, params: *GLint) -> c_void { unsafe { storage::GetUniformiv(program, location, params) } }
#[inline] pub fn GetUniformivARB(programObj: GLhandleARB, location: GLint, params: *GLint) -> c_void { unsafe { storage::GetUniformivARB(programObj, location, params) } }
#[inline] pub fn GetUniformui64vNV(program: GLuint, location: GLint, params: *GLuint64EXT) -> c_void { unsafe { storage::GetUniformui64vNV(program, location, params) } }
#[inline] pub fn GetUniformuiv(program: GLuint, location: GLint, params: *GLuint) -> c_void { unsafe { storage::GetUniformuiv(program, location, params) } }
#[inline] pub fn GetUniformuivEXT(program: GLuint, location: GLint, params: *GLuint) -> c_void { unsafe { storage::GetUniformuivEXT(program, location, params) } }
#[inline] pub fn GetVariantArrayObjectfvATI(id: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetVariantArrayObjectfvATI(id, pname, params) } }
#[inline] pub fn GetVariantArrayObjectivATI(id: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVariantArrayObjectivATI(id, pname, params) } }
#[inline] pub fn GetVariantBooleanvEXT(id: GLuint, value: GLenum, data: *GLboolean) -> c_void { unsafe { storage::GetVariantBooleanvEXT(id, value, data) } }
#[inline] pub fn GetVariantFloatvEXT(id: GLuint, value: GLenum, data: *GLfloat) -> c_void { unsafe { storage::GetVariantFloatvEXT(id, value, data) } }
#[inline] pub fn GetVariantIntegervEXT(id: GLuint, value: GLenum, data: *GLint) -> c_void { unsafe { storage::GetVariantIntegervEXT(id, value, data) } }
#[inline] pub fn GetVariantPointervEXT(id: GLuint, value: GLenum, data: **GLvoid) -> c_void { unsafe { storage::GetVariantPointervEXT(id, value, data) } }
#[inline] pub fn GetVaryingLocationNV(program: GLuint, name: *GLchar) -> GLint { unsafe { storage::GetVaryingLocationNV(program, name) } }
#[inline] pub fn GetVertexArrayIntegeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) -> c_void { unsafe { storage::GetVertexArrayIntegeri_vEXT(vaobj, index, pname, param) } }
#[inline] pub fn GetVertexArrayIntegervEXT(vaobj: GLuint, pname: GLenum, param: *GLint) -> c_void { unsafe { storage::GetVertexArrayIntegervEXT(vaobj, pname, param) } }
#[inline] pub fn GetVertexArrayPointeri_vEXT(vaobj: GLuint, index: GLuint, pname: GLenum, param: **GLvoid) -> c_void { unsafe { storage::GetVertexArrayPointeri_vEXT(vaobj, index, pname, param) } }
#[inline] pub fn GetVertexArrayPointervEXT(vaobj: GLuint, pname: GLenum, param: **GLvoid) -> c_void { unsafe { storage::GetVertexArrayPointervEXT(vaobj, pname, param) } }
#[inline] pub fn GetVertexAttribArrayObjectfvATI(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetVertexAttribArrayObjectfvATI(index, pname, params) } }
#[inline] pub fn GetVertexAttribArrayObjectivATI(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVertexAttribArrayObjectivATI(index, pname, params) } }
#[inline] pub fn GetVertexAttribIiv(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVertexAttribIiv(index, pname, params) } }
#[inline] pub fn GetVertexAttribIivEXT(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVertexAttribIivEXT(index, pname, params) } }
#[inline] pub fn GetVertexAttribIuiv(index: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetVertexAttribIuiv(index, pname, params) } }
#[inline] pub fn GetVertexAttribIuivEXT(index: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetVertexAttribIuivEXT(index, pname, params) } }
#[inline] pub fn GetVertexAttribLdv(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetVertexAttribLdv(index, pname, params) } }
#[inline] pub fn GetVertexAttribLdvEXT(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetVertexAttribLdvEXT(index, pname, params) } }
#[inline] pub fn GetVertexAttribLi64vNV(index: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void { unsafe { storage::GetVertexAttribLi64vNV(index, pname, params) } }
#[inline] pub fn GetVertexAttribLui64vARB(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { storage::GetVertexAttribLui64vARB(index, pname, params) } }
#[inline] pub fn GetVertexAttribLui64vNV(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { storage::GetVertexAttribLui64vNV(index, pname, params) } }
#[inline] pub fn GetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { unsafe { storage::GetVertexAttribPointerv(index, pname, pointer) } }
#[inline] pub fn GetVertexAttribPointervARB(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { unsafe { storage::GetVertexAttribPointervARB(index, pname, pointer) } }
#[inline] pub fn GetVertexAttribPointervNV(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { unsafe { storage::GetVertexAttribPointervNV(index, pname, pointer) } }
#[inline] pub fn GetVertexAttribdv(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetVertexAttribdv(index, pname, params) } }
#[inline] pub fn GetVertexAttribdvARB(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetVertexAttribdvARB(index, pname, params) } }
#[inline] pub fn GetVertexAttribdvNV(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetVertexAttribdvNV(index, pname, params) } }
#[inline] pub fn GetVertexAttribfv(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetVertexAttribfv(index, pname, params) } }
#[inline] pub fn GetVertexAttribfvARB(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetVertexAttribfvARB(index, pname, params) } }
#[inline] pub fn GetVertexAttribfvNV(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetVertexAttribfvNV(index, pname, params) } }
#[inline] pub fn GetVertexAttribiv(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVertexAttribiv(index, pname, params) } }
#[inline] pub fn GetVertexAttribivARB(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVertexAttribivARB(index, pname, params) } }
#[inline] pub fn GetVertexAttribivNV(index: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVertexAttribivNV(index, pname, params) } }
#[inline] pub fn GetVideoCaptureStreamdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::GetVideoCaptureStreamdvNV(video_capture_slot, stream, pname, params) } }
#[inline] pub fn GetVideoCaptureStreamfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::GetVideoCaptureStreamfvNV(video_capture_slot, stream, pname, params) } }
#[inline] pub fn GetVideoCaptureStreamivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVideoCaptureStreamivNV(video_capture_slot, stream, pname, params) } }
#[inline] pub fn GetVideoCaptureivNV(video_capture_slot: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVideoCaptureivNV(video_capture_slot, pname, params) } }
#[inline] pub fn GetVideoi64vNV(video_slot: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void { unsafe { storage::GetVideoi64vNV(video_slot, pname, params) } }
#[inline] pub fn GetVideoivNV(video_slot: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::GetVideoivNV(video_slot, pname, params) } }
#[inline] pub fn GetVideoui64vNV(video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { unsafe { storage::GetVideoui64vNV(video_slot, pname, params) } }
#[inline] pub fn GetVideouivNV(video_slot: GLuint, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::GetVideouivNV(video_slot, pname, params) } }
#[inline] pub fn GetnColorTableARB(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, table: *GLvoid) -> c_void { unsafe { storage::GetnColorTableARB(target, format, type_, bufSize, table) } }
#[inline] pub fn GetnCompressedTexImageARB(target: GLenum, lod: GLint, bufSize: GLsizei, img: *GLvoid) -> c_void { unsafe { storage::GetnCompressedTexImageARB(target, lod, bufSize, img) } }
#[inline] pub fn GetnConvolutionFilterARB(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, image: *GLvoid) -> c_void { unsafe { storage::GetnConvolutionFilterARB(target, format, type_, bufSize, image) } }
#[inline] pub fn GetnHistogramARB(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void { unsafe { storage::GetnHistogramARB(target, reset, format, type_, bufSize, values) } }
#[inline] pub fn GetnMapdvARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) -> c_void { unsafe { storage::GetnMapdvARB(target, query, bufSize, v) } }
#[inline] pub fn GetnMapfvARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) -> c_void { unsafe { storage::GetnMapfvARB(target, query, bufSize, v) } }
#[inline] pub fn GetnMapivARB(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) -> c_void { unsafe { storage::GetnMapivARB(target, query, bufSize, v) } }
#[inline] pub fn GetnMinmaxARB(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void { unsafe { storage::GetnMinmaxARB(target, reset, format, type_, bufSize, values) } }
#[inline] pub fn GetnPixelMapfvARB(map: GLenum, bufSize: GLsizei, values: *GLfloat) -> c_void { unsafe { storage::GetnPixelMapfvARB(map, bufSize, values) } }
#[inline] pub fn GetnPixelMapuivARB(map: GLenum, bufSize: GLsizei, values: *GLuint) -> c_void { unsafe { storage::GetnPixelMapuivARB(map, bufSize, values) } }
#[inline] pub fn GetnPixelMapusvARB(map: GLenum, bufSize: GLsizei, values: *GLushort) -> c_void { unsafe { storage::GetnPixelMapusvARB(map, bufSize, values) } }
#[inline] pub fn GetnPolygonStippleARB(bufSize: GLsizei, pattern: *GLubyte) -> c_void { unsafe { storage::GetnPolygonStippleARB(bufSize, pattern) } }
#[inline] pub fn GetnSeparableFilterARB(target: GLenum, format: GLenum, type_: GLenum, rowBufSize: GLsizei, row: *GLvoid, columnBufSize: GLsizei, column: *GLvoid, span: *GLvoid) -> c_void { unsafe { storage::GetnSeparableFilterARB(target, format, type_, rowBufSize, row, columnBufSize, column, span) } }
#[inline] pub fn GetnTexImageARB(target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: *GLvoid) -> c_void { unsafe { storage::GetnTexImageARB(target, level, format, type_, bufSize, img) } }
#[inline] pub fn GetnUniformdvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) -> c_void { unsafe { storage::GetnUniformdvARB(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformfvARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void { unsafe { storage::GetnUniformfvARB(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformfvEXT(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void { unsafe { storage::GetnUniformfvEXT(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void { unsafe { storage::GetnUniformivARB(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformivEXT(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void { unsafe { storage::GetnUniformivEXT(program, location, bufSize, params) } }
#[inline] pub fn GetnUniformuivARB(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> c_void { unsafe { storage::GetnUniformuivARB(program, location, bufSize, params) } }
#[inline] pub fn GlobalAlphaFactorbSUN(factor: GLbyte) -> c_void { unsafe { storage::GlobalAlphaFactorbSUN(factor) } }
#[inline] pub fn GlobalAlphaFactordSUN(factor: GLdouble) -> c_void { unsafe { storage::GlobalAlphaFactordSUN(factor) } }
#[inline] pub fn GlobalAlphaFactorfSUN(factor: GLfloat) -> c_void { unsafe { storage::GlobalAlphaFactorfSUN(factor) } }
#[inline] pub fn GlobalAlphaFactoriSUN(factor: GLint) -> c_void { unsafe { storage::GlobalAlphaFactoriSUN(factor) } }
#[inline] pub fn GlobalAlphaFactorsSUN(factor: GLshort) -> c_void { unsafe { storage::GlobalAlphaFactorsSUN(factor) } }
#[inline] pub fn GlobalAlphaFactorubSUN(factor: GLubyte) -> c_void { unsafe { storage::GlobalAlphaFactorubSUN(factor) } }
#[inline] pub fn GlobalAlphaFactoruiSUN(factor: GLuint) -> c_void { unsafe { storage::GlobalAlphaFactoruiSUN(factor) } }
#[inline] pub fn GlobalAlphaFactorusSUN(factor: GLushort) -> c_void { unsafe { storage::GlobalAlphaFactorusSUN(factor) } }
#[inline] pub fn Hint(target: GLenum, mode: GLenum) -> c_void { unsafe { storage::Hint(target, mode) } }
#[inline] pub fn HintPGI(target: GLenum, mode: GLint) -> c_void { unsafe { storage::HintPGI(target, mode) } }
#[inline] pub fn Histogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { storage::Histogram(target, width, internalformat, sink) } }
#[inline] pub fn HistogramEXT(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { storage::HistogramEXT(target, width, internalformat, sink) } }
#[inline] pub fn IglooInterfaceSGIX(pname: GLenum, params: *GLvoid) -> c_void { unsafe { storage::IglooInterfaceSGIX(pname, params) } }
#[inline] pub fn ImageTransformParameterfHP(target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::ImageTransformParameterfHP(target, pname, param) } }
#[inline] pub fn ImageTransformParameterfvHP(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::ImageTransformParameterfvHP(target, pname, params) } }
#[inline] pub fn ImageTransformParameteriHP(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::ImageTransformParameteriHP(target, pname, param) } }
#[inline] pub fn ImageTransformParameterivHP(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::ImageTransformParameterivHP(target, pname, params) } }
#[inline] pub fn ImportSyncEXT(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync { unsafe { storage::ImportSyncEXT(external_sync_type, external_sync, flags) } }
#[inline] pub fn IndexFormatNV(type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::IndexFormatNV(type_, stride) } }
#[inline] pub fn IndexFuncEXT(func: GLenum, ref_: GLclampf) -> c_void { unsafe { storage::IndexFuncEXT(func, ref_) } }
#[inline] pub fn IndexMask(mask: GLuint) -> c_void { unsafe { storage::IndexMask(mask) } }
#[inline] pub fn IndexMaterialEXT(face: GLenum, mode: GLenum) -> c_void { unsafe { storage::IndexMaterialEXT(face, mode) } }
#[inline] pub fn IndexPointer(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::IndexPointer(type_, stride, pointer) } }
#[inline] pub fn IndexPointerEXT(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::IndexPointerEXT(type_, stride, count, pointer) } }
#[inline] pub fn IndexPointerListIBM(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { storage::IndexPointerListIBM(type_, stride, pointer, ptrstride) } }
#[inline] pub fn Indexd(c: GLdouble) -> c_void { unsafe { storage::Indexd(c) } }
#[inline] pub unsafe fn Indexdv(c: *GLdouble) -> c_void { storage::Indexdv(c) }
#[inline] pub fn Indexf(c: GLfloat) -> c_void { unsafe { storage::Indexf(c) } }
#[inline] pub unsafe fn Indexfv(c: *GLfloat) -> c_void { storage::Indexfv(c) }
#[inline] pub fn Indexi(c: GLint) -> c_void { unsafe { storage::Indexi(c) } }
#[inline] pub unsafe fn Indexiv(c: *GLint) -> c_void { storage::Indexiv(c) }
#[inline] pub fn Indexs(c: GLshort) -> c_void { unsafe { storage::Indexs(c) } }
#[inline] pub unsafe fn Indexsv(c: *GLshort) -> c_void { storage::Indexsv(c) }
#[inline] pub fn Indexub(c: GLubyte) -> c_void { unsafe { storage::Indexub(c) } }
#[inline] pub unsafe fn Indexubv(c: *GLubyte) -> c_void { storage::Indexubv(c) }
#[inline] pub fn IndexxOES(component: GLfixed) -> c_void { unsafe { storage::IndexxOES(component) } }
#[inline] pub unsafe fn IndexxvOES(component: *GLfixed) -> c_void { storage::IndexxvOES(component) }
#[inline] pub unsafe fn InitNames() -> c_void { storage::InitNames() }
#[inline] pub fn InsertComponentEXT(res: GLuint, src: GLuint, num: GLuint) -> c_void { unsafe { storage::InsertComponentEXT(res, src, num) } }
#[inline] pub fn InsertEventMarkerEXT(length: GLsizei, marker: *GLchar) -> c_void { unsafe { storage::InsertEventMarkerEXT(length, marker) } }
#[inline] pub fn InstrumentsBufferSGIX(size: GLsizei, buffer: *GLint) -> c_void { unsafe { storage::InstrumentsBufferSGIX(size, buffer) } }
#[inline] pub fn InterleavedArrays(format: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::InterleavedArrays(format, stride, pointer) } }
#[inline] pub fn InterpolatePathsNV(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> c_void { unsafe { storage::InterpolatePathsNV(resultPath, pathA, pathB, weight) } }
#[inline] pub fn InvalidateBufferData(buffer: GLuint) -> c_void { unsafe { storage::InvalidateBufferData(buffer) } }
#[inline] pub fn InvalidateBufferSubData(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { storage::InvalidateBufferSubData(buffer, offset, length) } }
#[inline] pub fn InvalidateFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void { unsafe { storage::InvalidateFramebuffer(target, numAttachments, attachments) } }
#[inline] pub fn InvalidateSubFramebuffer(target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height) } }
#[inline] pub fn InvalidateTexImage(texture: GLuint, level: GLint) -> c_void { unsafe { storage::InvalidateTexImage(texture, level) } }
#[inline] pub fn InvalidateTexSubImage(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { storage::InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth) } }
#[inline] pub fn IsAsyncMarkerSGIX(marker: GLuint) -> GLboolean { unsafe { storage::IsAsyncMarkerSGIX(marker) } }
#[inline] pub fn IsBuffer(buffer: GLuint) -> GLboolean { unsafe { storage::IsBuffer(buffer) } }
#[inline] pub fn IsBufferARB(buffer: GLuint) -> GLboolean { unsafe { storage::IsBufferARB(buffer) } }
#[inline] pub fn IsBufferResidentNV(target: GLenum) -> GLboolean { unsafe { storage::IsBufferResidentNV(target) } }
#[inline] pub fn IsEnabled(cap: GLenum) -> GLboolean { unsafe { storage::IsEnabled(cap) } }
#[inline] pub fn IsEnabledIndexedEXT(target: GLenum, index: GLuint) -> GLboolean { unsafe { storage::IsEnabledIndexedEXT(target, index) } }
#[inline] pub fn IsEnabledi(target: GLenum, index: GLuint) -> GLboolean { unsafe { storage::IsEnabledi(target, index) } }
#[inline] pub fn IsFenceAPPLE(fence: GLuint) -> GLboolean { unsafe { storage::IsFenceAPPLE(fence) } }
#[inline] pub fn IsFenceNV(fence: GLuint) -> GLboolean { unsafe { storage::IsFenceNV(fence) } }
#[inline] pub fn IsFramebuffer(framebuffer: GLuint) -> GLboolean { unsafe { storage::IsFramebuffer(framebuffer) } }
#[inline] pub fn IsFramebufferEXT(framebuffer: GLuint) -> GLboolean { unsafe { storage::IsFramebufferEXT(framebuffer) } }
#[inline] pub fn IsFramebufferOES(framebuffer: GLuint) -> GLboolean { unsafe { storage::IsFramebufferOES(framebuffer) } }
#[inline] pub fn IsImageHandleResidentARB(handle: GLuint64) -> GLboolean { unsafe { storage::IsImageHandleResidentARB(handle) } }
#[inline] pub fn IsImageHandleResidentNV(handle: GLuint64) -> GLboolean { unsafe { storage::IsImageHandleResidentNV(handle) } }
#[inline] pub fn IsList(list: GLuint) -> GLboolean { unsafe { storage::IsList(list) } }
#[inline] pub fn IsNameAMD(identifier: GLenum, name: GLuint) -> GLboolean { unsafe { storage::IsNameAMD(identifier, name) } }
#[inline] pub fn IsNamedBufferResidentNV(buffer: GLuint) -> GLboolean { unsafe { storage::IsNamedBufferResidentNV(buffer) } }
#[inline] pub fn IsNamedStringARB(namelen: GLint, name: *GLchar) -> GLboolean { unsafe { storage::IsNamedStringARB(namelen, name) } }
#[inline] pub fn IsObjectBufferATI(buffer: GLuint) -> GLboolean { unsafe { storage::IsObjectBufferATI(buffer) } }
#[inline] pub fn IsOcclusionQueryNV(id: GLuint) -> GLboolean { unsafe { storage::IsOcclusionQueryNV(id) } }
#[inline] pub fn IsPathNV(path: GLuint) -> GLboolean { unsafe { storage::IsPathNV(path) } }
#[inline] pub fn IsPointInFillPathNV(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean { unsafe { storage::IsPointInFillPathNV(path, mask, x, y) } }
#[inline] pub fn IsPointInStrokePathNV(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean { unsafe { storage::IsPointInStrokePathNV(path, x, y) } }
#[inline] pub fn IsProgram(program: GLuint) -> GLboolean { unsafe { storage::IsProgram(program) } }
#[inline] pub fn IsProgramARB(program: GLuint) -> GLboolean { unsafe { storage::IsProgramARB(program) } }
#[inline] pub fn IsProgramNV(id: GLuint) -> GLboolean { unsafe { storage::IsProgramNV(id) } }
#[inline] pub fn IsProgramPipeline(pipeline: GLuint) -> GLboolean { unsafe { storage::IsProgramPipeline(pipeline) } }
#[inline] pub fn IsProgramPipelineEXT(pipeline: GLuint) -> GLboolean { unsafe { storage::IsProgramPipelineEXT(pipeline) } }
#[inline] pub fn IsQuery(id: GLuint) -> GLboolean { unsafe { storage::IsQuery(id) } }
#[inline] pub fn IsQueryARB(id: GLuint) -> GLboolean { unsafe { storage::IsQueryARB(id) } }
#[inline] pub fn IsQueryEXT(id: GLuint) -> GLboolean { unsafe { storage::IsQueryEXT(id) } }
#[inline] pub fn IsRenderbuffer(renderbuffer: GLuint) -> GLboolean { unsafe { storage::IsRenderbuffer(renderbuffer) } }
#[inline] pub fn IsRenderbufferEXT(renderbuffer: GLuint) -> GLboolean { unsafe { storage::IsRenderbufferEXT(renderbuffer) } }
#[inline] pub fn IsRenderbufferOES(renderbuffer: GLuint) -> GLboolean { unsafe { storage::IsRenderbufferOES(renderbuffer) } }
#[inline] pub fn IsSampler(sampler: GLuint) -> GLboolean { unsafe { storage::IsSampler(sampler) } }
#[inline] pub fn IsShader(shader: GLuint) -> GLboolean { unsafe { storage::IsShader(shader) } }
#[inline] pub fn IsSync(sync: GLsync) -> GLboolean { unsafe { storage::IsSync(sync) } }
#[inline] pub fn IsSyncAPPLE(sync: GLsync) -> GLboolean { unsafe { storage::IsSyncAPPLE(sync) } }
#[inline] pub fn IsTexture(texture: GLuint) -> GLboolean { unsafe { storage::IsTexture(texture) } }
#[inline] pub fn IsTextureEXT(texture: GLuint) -> GLboolean { unsafe { storage::IsTextureEXT(texture) } }
#[inline] pub fn IsTextureHandleResidentARB(handle: GLuint64) -> GLboolean { unsafe { storage::IsTextureHandleResidentARB(handle) } }
#[inline] pub fn IsTextureHandleResidentNV(handle: GLuint64) -> GLboolean { unsafe { storage::IsTextureHandleResidentNV(handle) } }
#[inline] pub fn IsTransformFeedback(id: GLuint) -> GLboolean { unsafe { storage::IsTransformFeedback(id) } }
#[inline] pub fn IsTransformFeedbackNV(id: GLuint) -> GLboolean { unsafe { storage::IsTransformFeedbackNV(id) } }
#[inline] pub fn IsVariantEnabledEXT(id: GLuint, cap: GLenum) -> GLboolean { unsafe { storage::IsVariantEnabledEXT(id, cap) } }
#[inline] pub fn IsVertexArray(array: GLuint) -> GLboolean { unsafe { storage::IsVertexArray(array) } }
#[inline] pub fn IsVertexArrayAPPLE(array: GLuint) -> GLboolean { unsafe { storage::IsVertexArrayAPPLE(array) } }
#[inline] pub fn IsVertexArrayOES(array: GLuint) -> GLboolean { unsafe { storage::IsVertexArrayOES(array) } }
#[inline] pub fn IsVertexAttribEnabledAPPLE(index: GLuint, pname: GLenum) -> GLboolean { unsafe { storage::IsVertexAttribEnabledAPPLE(index, pname) } }
#[inline] pub fn LabelObjectEXT(type_: GLenum, object: GLuint, length: GLsizei, label: *GLchar) -> c_void { unsafe { storage::LabelObjectEXT(type_, object, length, label) } }
#[inline] pub fn LightEnviSGIX(pname: GLenum, param: GLint) -> c_void { unsafe { storage::LightEnviSGIX(pname, param) } }
#[inline] pub fn LightModelf(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::LightModelf(pname, param) } }
#[inline] pub fn LightModelfv(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::LightModelfv(pname, params) } }
#[inline] pub fn LightModeli(pname: GLenum, param: GLint) -> c_void { unsafe { storage::LightModeli(pname, param) } }
#[inline] pub fn LightModeliv(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::LightModeliv(pname, params) } }
#[inline] pub fn LightModelx(pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::LightModelx(pname, param) } }
#[inline] pub fn LightModelxOES(pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::LightModelxOES(pname, param) } }
#[inline] pub fn LightModelxv(pname: GLenum, param: *GLfixed) -> c_void { unsafe { storage::LightModelxv(pname, param) } }
#[inline] pub fn LightModelxvOES(pname: GLenum, param: *GLfixed) -> c_void { unsafe { storage::LightModelxvOES(pname, param) } }
#[inline] pub fn Lightf(light: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::Lightf(light, pname, param) } }
#[inline] pub fn Lightfv(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::Lightfv(light, pname, params) } }
#[inline] pub fn Lighti(light: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::Lighti(light, pname, param) } }
#[inline] pub fn Lightiv(light: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::Lightiv(light, pname, params) } }
#[inline] pub fn Lightx(light: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::Lightx(light, pname, param) } }
#[inline] pub fn LightxOES(light: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::LightxOES(light, pname, param) } }
#[inline] pub fn Lightxv(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::Lightxv(light, pname, params) } }
#[inline] pub fn LightxvOES(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::LightxvOES(light, pname, params) } }
#[inline] pub fn LineStipple(factor: GLint, pattern: GLushort) -> c_void { unsafe { storage::LineStipple(factor, pattern) } }
#[inline] pub fn LineWidth(width: GLfloat) -> c_void { unsafe { storage::LineWidth(width) } }
#[inline] pub fn LineWidthx(width: GLfixed) -> c_void { unsafe { storage::LineWidthx(width) } }
#[inline] pub fn LineWidthxOES(width: GLfixed) -> c_void { unsafe { storage::LineWidthxOES(width) } }
#[inline] pub fn LinkProgram(program: GLuint) -> c_void { unsafe { storage::LinkProgram(program) } }
#[inline] pub fn LinkProgramARB(programObj: GLhandleARB) -> c_void { unsafe { storage::LinkProgramARB(programObj) } }
#[inline] pub fn ListBase(base: GLuint) -> c_void { unsafe { storage::ListBase(base) } }
#[inline] pub fn ListParameterfSGIX(list: GLuint, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::ListParameterfSGIX(list, pname, param) } }
#[inline] pub fn ListParameterfvSGIX(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::ListParameterfvSGIX(list, pname, params) } }
#[inline] pub fn ListParameteriSGIX(list: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { storage::ListParameteriSGIX(list, pname, param) } }
#[inline] pub fn ListParameterivSGIX(list: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::ListParameterivSGIX(list, pname, params) } }
#[inline] pub unsafe fn LoadIdentity() -> c_void { storage::LoadIdentity() }
#[inline] pub fn LoadIdentityDeformationMapSGIX(mask: GLbitfield) -> c_void { unsafe { storage::LoadIdentityDeformationMapSGIX(mask) } }
#[inline] pub unsafe fn LoadMatrixd(m: *GLdouble) -> c_void { storage::LoadMatrixd(m) }
#[inline] pub unsafe fn LoadMatrixf(m: *GLfloat) -> c_void { storage::LoadMatrixf(m) }
#[inline] pub unsafe fn LoadMatrixx(m: *GLfixed) -> c_void { storage::LoadMatrixx(m) }
#[inline] pub unsafe fn LoadMatrixxOES(m: *GLfixed) -> c_void { storage::LoadMatrixxOES(m) }
#[inline] pub fn LoadName(name: GLuint) -> c_void { unsafe { storage::LoadName(name) } }
#[inline] pub unsafe fn LoadPaletteFromModelViewMatrixOES() -> c_void { storage::LoadPaletteFromModelViewMatrixOES() }
#[inline] pub fn LoadProgramNV(target: GLenum, id: GLuint, len: GLsizei, program: *GLubyte) -> c_void { unsafe { storage::LoadProgramNV(target, id, len, program) } }
#[inline] pub unsafe fn LoadTransposeMatrixd(m: *GLdouble) -> c_void { storage::LoadTransposeMatrixd(m) }
#[inline] pub unsafe fn LoadTransposeMatrixdARB(m: *GLdouble) -> c_void { storage::LoadTransposeMatrixdARB(m) }
#[inline] pub unsafe fn LoadTransposeMatrixf(m: *GLfloat) -> c_void { storage::LoadTransposeMatrixf(m) }
#[inline] pub unsafe fn LoadTransposeMatrixfARB(m: *GLfloat) -> c_void { storage::LoadTransposeMatrixfARB(m) }
#[inline] pub unsafe fn LoadTransposeMatrixxOES(m: *GLfixed) -> c_void { storage::LoadTransposeMatrixxOES(m) }
#[inline] pub fn LockArraysEXT(first: GLint, count: GLsizei) -> c_void { unsafe { storage::LockArraysEXT(first, count) } }
#[inline] pub fn LogicOp(opcode: GLenum) -> c_void { unsafe { storage::LogicOp(opcode) } }
#[inline] pub fn MakeBufferNonResidentNV(target: GLenum) -> c_void { unsafe { storage::MakeBufferNonResidentNV(target) } }
#[inline] pub fn MakeBufferResidentNV(target: GLenum, access: GLenum) -> c_void { unsafe { storage::MakeBufferResidentNV(target, access) } }
#[inline] pub fn MakeImageHandleNonResidentARB(handle: GLuint64) -> c_void { unsafe { storage::MakeImageHandleNonResidentARB(handle) } }
#[inline] pub fn MakeImageHandleNonResidentNV(handle: GLuint64) -> c_void { unsafe { storage::MakeImageHandleNonResidentNV(handle) } }
#[inline] pub fn MakeImageHandleResidentARB(handle: GLuint64, access: GLenum) -> c_void { unsafe { storage::MakeImageHandleResidentARB(handle, access) } }
#[inline] pub fn MakeImageHandleResidentNV(handle: GLuint64, access: GLenum) -> c_void { unsafe { storage::MakeImageHandleResidentNV(handle, access) } }
#[inline] pub fn MakeNamedBufferNonResidentNV(buffer: GLuint) -> c_void { unsafe { storage::MakeNamedBufferNonResidentNV(buffer) } }
#[inline] pub fn MakeNamedBufferResidentNV(buffer: GLuint, access: GLenum) -> c_void { unsafe { storage::MakeNamedBufferResidentNV(buffer, access) } }
#[inline] pub fn MakeTextureHandleNonResidentARB(handle: GLuint64) -> c_void { unsafe { storage::MakeTextureHandleNonResidentARB(handle) } }
#[inline] pub fn MakeTextureHandleNonResidentNV(handle: GLuint64) -> c_void { unsafe { storage::MakeTextureHandleNonResidentNV(handle) } }
#[inline] pub fn MakeTextureHandleResidentARB(handle: GLuint64) -> c_void { unsafe { storage::MakeTextureHandleResidentARB(handle) } }
#[inline] pub fn MakeTextureHandleResidentNV(handle: GLuint64) -> c_void { unsafe { storage::MakeTextureHandleResidentNV(handle) } }
#[inline] pub fn Map1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void { unsafe { storage::Map1d(target, u1, u2, stride, order, points) } }
#[inline] pub fn Map1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void { unsafe { storage::Map1f(target, u1, u2, stride, order, points) } }
#[inline] pub fn Map1xOES(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) -> c_void { unsafe { storage::Map1xOES(target, u1, u2, stride, order, points) } }
#[inline] pub fn Map2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void { unsafe { storage::Map2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn Map2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void { unsafe { storage::Map2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn Map2xOES(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) -> c_void { unsafe { storage::Map2xOES(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn MapBuffer(target: GLenum, access: GLenum) -> *c_void { unsafe { storage::MapBuffer(target, access) } }
#[inline] pub fn MapBufferARB(target: GLenum, access: GLenum) -> *c_void { unsafe { storage::MapBufferARB(target, access) } }
#[inline] pub fn MapBufferOES(target: GLenum, access: GLenum) -> *c_void { unsafe { storage::MapBufferOES(target, access) } }
#[inline] pub fn MapBufferRange(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { storage::MapBufferRange(target, offset, length, access) } }
#[inline] pub fn MapBufferRangeEXT(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { storage::MapBufferRangeEXT(target, offset, length, access) } }
#[inline] pub fn MapControlPointsNV(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *GLvoid) -> c_void { unsafe { storage::MapControlPointsNV(target, index, type_, ustride, vstride, uorder, vorder, packed, points) } }
#[inline] pub fn MapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble) -> c_void { unsafe { storage::MapGrid1d(un, u1, u2) } }
#[inline] pub fn MapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat) -> c_void { unsafe { storage::MapGrid1f(un, u1, u2) } }
#[inline] pub fn MapGrid1xOES(n: GLint, u1: GLfixed, u2: GLfixed) -> c_void { unsafe { storage::MapGrid1xOES(n, u1, u2) } }
#[inline] pub fn MapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> c_void { unsafe { storage::MapGrid2d(un, u1, u2, vn, v1, v2) } }
#[inline] pub fn MapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { storage::MapGrid2f(un, u1, u2, vn, v1, v2) } }
#[inline] pub fn MapGrid2xOES(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) -> c_void { unsafe { storage::MapGrid2xOES(n, u1, u2, v1, v2) } }
#[inline] pub fn MapNamedBufferEXT(buffer: GLuint, access: GLenum) -> *c_void { unsafe { storage::MapNamedBufferEXT(buffer, access) } }
#[inline] pub fn MapNamedBufferRangeEXT(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { storage::MapNamedBufferRangeEXT(buffer, offset, length, access) } }
#[inline] pub fn MapObjectBufferATI(buffer: GLuint) -> *c_void { unsafe { storage::MapObjectBufferATI(buffer) } }
#[inline] pub fn MapParameterfvNV(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::MapParameterfvNV(target, pname, params) } }
#[inline] pub fn MapParameterivNV(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::MapParameterivNV(target, pname, params) } }
#[inline] pub fn MapTexture2DINTEL(texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) -> *c_void { unsafe { storage::MapTexture2DINTEL(texture, level, access, stride, layout) } }
#[inline] pub fn MapVertexAttrib1dAPPLE(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void { unsafe { storage::MapVertexAttrib1dAPPLE(index, size, u1, u2, stride, order, points) } }
#[inline] pub fn MapVertexAttrib1fAPPLE(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void { unsafe { storage::MapVertexAttrib1fAPPLE(index, size, u1, u2, stride, order, points) } }
#[inline] pub fn MapVertexAttrib2dAPPLE(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void { unsafe { storage::MapVertexAttrib2dAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn MapVertexAttrib2fAPPLE(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void { unsafe { storage::MapVertexAttrib2fAPPLE(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
#[inline] pub fn Materialf(face: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::Materialf(face, pname, param) } }
#[inline] pub fn Materialfv(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::Materialfv(face, pname, params) } }
#[inline] pub fn Materiali(face: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::Materiali(face, pname, param) } }
#[inline] pub fn Materialiv(face: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::Materialiv(face, pname, params) } }
#[inline] pub fn Materialx(face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::Materialx(face, pname, param) } }
#[inline] pub fn MaterialxOES(face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::MaterialxOES(face, pname, param) } }
#[inline] pub fn Materialxv(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void { unsafe { storage::Materialxv(face, pname, param) } }
#[inline] pub fn MaterialxvOES(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void { unsafe { storage::MaterialxvOES(face, pname, param) } }
#[inline] pub fn MatrixFrustumEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { storage::MatrixFrustumEXT(mode, left, right, bottom, top, zNear, zFar) } }
#[inline] pub fn MatrixIndexPointerARB(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::MatrixIndexPointerARB(size, type_, stride, pointer) } }
#[inline] pub fn MatrixIndexPointerOES(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::MatrixIndexPointerOES(size, type_, stride, pointer) } }
#[inline] pub fn MatrixIndexubvARB(size: GLint, indices: *GLubyte) -> c_void { unsafe { storage::MatrixIndexubvARB(size, indices) } }
#[inline] pub fn MatrixIndexuivARB(size: GLint, indices: *GLuint) -> c_void { unsafe { storage::MatrixIndexuivARB(size, indices) } }
#[inline] pub fn MatrixIndexusvARB(size: GLint, indices: *GLushort) -> c_void { unsafe { storage::MatrixIndexusvARB(size, indices) } }
#[inline] pub fn MatrixLoadIdentityEXT(mode: GLenum) -> c_void { unsafe { storage::MatrixLoadIdentityEXT(mode) } }
#[inline] pub fn MatrixLoadTransposedEXT(mode: GLenum, m: *GLdouble) -> c_void { unsafe { storage::MatrixLoadTransposedEXT(mode, m) } }
#[inline] pub fn MatrixLoadTransposefEXT(mode: GLenum, m: *GLfloat) -> c_void { unsafe { storage::MatrixLoadTransposefEXT(mode, m) } }
#[inline] pub fn MatrixLoaddEXT(mode: GLenum, m: *GLdouble) -> c_void { unsafe { storage::MatrixLoaddEXT(mode, m) } }
#[inline] pub fn MatrixLoadfEXT(mode: GLenum, m: *GLfloat) -> c_void { unsafe { storage::MatrixLoadfEXT(mode, m) } }
#[inline] pub fn MatrixMode(mode: GLenum) -> c_void { unsafe { storage::MatrixMode(mode) } }
#[inline] pub fn MatrixMultTransposedEXT(mode: GLenum, m: *GLdouble) -> c_void { unsafe { storage::MatrixMultTransposedEXT(mode, m) } }
#[inline] pub fn MatrixMultTransposefEXT(mode: GLenum, m: *GLfloat) -> c_void { unsafe { storage::MatrixMultTransposefEXT(mode, m) } }
#[inline] pub fn MatrixMultdEXT(mode: GLenum, m: *GLdouble) -> c_void { unsafe { storage::MatrixMultdEXT(mode, m) } }
#[inline] pub fn MatrixMultfEXT(mode: GLenum, m: *GLfloat) -> c_void { unsafe { storage::MatrixMultfEXT(mode, m) } }
#[inline] pub fn MatrixOrthoEXT(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { storage::MatrixOrthoEXT(mode, left, right, bottom, top, zNear, zFar) } }
#[inline] pub fn MatrixPopEXT(mode: GLenum) -> c_void { unsafe { storage::MatrixPopEXT(mode) } }
#[inline] pub fn MatrixPushEXT(mode: GLenum) -> c_void { unsafe { storage::MatrixPushEXT(mode) } }
#[inline] pub fn MatrixRotatedEXT(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::MatrixRotatedEXT(mode, angle, x, y, z) } }
#[inline] pub fn MatrixRotatefEXT(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::MatrixRotatefEXT(mode, angle, x, y, z) } }
#[inline] pub fn MatrixScaledEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::MatrixScaledEXT(mode, x, y, z) } }
#[inline] pub fn MatrixScalefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::MatrixScalefEXT(mode, x, y, z) } }
#[inline] pub fn MatrixTranslatedEXT(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::MatrixTranslatedEXT(mode, x, y, z) } }
#[inline] pub fn MatrixTranslatefEXT(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::MatrixTranslatefEXT(mode, x, y, z) } }
#[inline] pub fn MemoryBarrier(barriers: GLbitfield) -> c_void { unsafe { storage::MemoryBarrier(barriers) } }
#[inline] pub fn MemoryBarrierEXT(barriers: GLbitfield) -> c_void { unsafe { storage::MemoryBarrierEXT(barriers) } }
#[inline] pub fn MinSampleShading(value: GLfloat) -> c_void { unsafe { storage::MinSampleShading(value) } }
#[inline] pub fn MinSampleShadingARB(value: GLfloat) -> c_void { unsafe { storage::MinSampleShadingARB(value) } }
#[inline] pub fn Minmax(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { storage::Minmax(target, internalformat, sink) } }
#[inline] pub fn MinmaxEXT(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { storage::MinmaxEXT(target, internalformat, sink) } }
#[inline] pub unsafe fn MultMatrixd(m: *GLdouble) -> c_void { storage::MultMatrixd(m) }
#[inline] pub unsafe fn MultMatrixf(m: *GLfloat) -> c_void { storage::MultMatrixf(m) }
#[inline] pub unsafe fn MultMatrixx(m: *GLfixed) -> c_void { storage::MultMatrixx(m) }
#[inline] pub unsafe fn MultMatrixxOES(m: *GLfixed) -> c_void { storage::MultMatrixxOES(m) }
#[inline] pub unsafe fn MultTransposeMatrixd(m: *GLdouble) -> c_void { storage::MultTransposeMatrixd(m) }
#[inline] pub unsafe fn MultTransposeMatrixdARB(m: *GLdouble) -> c_void { storage::MultTransposeMatrixdARB(m) }
#[inline] pub unsafe fn MultTransposeMatrixf(m: *GLfloat) -> c_void { storage::MultTransposeMatrixf(m) }
#[inline] pub unsafe fn MultTransposeMatrixfARB(m: *GLfloat) -> c_void { storage::MultTransposeMatrixfARB(m) }
#[inline] pub unsafe fn MultTransposeMatrixxOES(m: *GLfixed) -> c_void { storage::MultTransposeMatrixxOES(m) }
#[inline] pub fn MultiDrawArrays(mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) -> c_void { unsafe { storage::MultiDrawArrays(mode, first, count, drawcount) } }
#[inline] pub fn MultiDrawArraysEXT(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { unsafe { storage::MultiDrawArraysEXT(mode, first, count, primcount) } }
#[inline] pub fn MultiDrawArraysIndirect(mode: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { storage::MultiDrawArraysIndirect(mode, indirect, drawcount, stride) } }
#[inline] pub fn MultiDrawArraysIndirectAMD(mode: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void { unsafe { storage::MultiDrawArraysIndirectAMD(mode, indirect, primcount, stride) } }
#[inline] pub fn MultiDrawArraysIndirectBindlessNV(mode: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void { unsafe { storage::MultiDrawArraysIndirectBindlessNV(mode, indirect, drawCount, stride, vertexBufferCount) } }
#[inline] pub fn MultiDrawElementsIndirectBindlessNV(mode: GLenum, type_: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void { unsafe { storage::MultiDrawElementsIndirectBindlessNV(mode, type_, indirect, drawCount, stride, vertexBufferCount) } }
#[inline] pub fn MultiDrawArraysIndirectCountARB(mode: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { storage::MultiDrawArraysIndirectCountARB(mode, indirect, drawcount, maxdrawcount, stride) } }
#[inline] pub fn MultiDrawElementArrayAPPLE(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { unsafe { storage::MultiDrawElementArrayAPPLE(mode, first, count, primcount) } }
#[inline] pub fn MultiDrawElements(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei) -> c_void { unsafe { storage::MultiDrawElements(mode, count, type_, indices, drawcount) } }
#[inline] pub fn MultiDrawElementsBaseVertex(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei, basevertex: *GLint) -> c_void { unsafe { storage::MultiDrawElementsBaseVertex(mode, count, type_, indices, drawcount, basevertex) } }
#[inline] pub fn MultiDrawElementsEXT(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei) -> c_void { unsafe { storage::MultiDrawElementsEXT(mode, count, type_, indices, primcount) } }
#[inline] pub fn MultiDrawElementsIndirect(mode: GLenum, type_: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { storage::MultiDrawElementsIndirect(mode, type_, indirect, drawcount, stride) } }
#[inline] pub fn MultiDrawElementsIndirectAMD(mode: GLenum, type_: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void { unsafe { storage::MultiDrawElementsIndirectAMD(mode, type_, indirect, primcount, stride) } }
#[inline] pub fn MultiDrawElementsIndirectCountARB(mode: GLenum, type_: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { storage::MultiDrawElementsIndirectCountARB(mode, type_, indirect, drawcount, maxdrawcount, stride) } }
#[inline] pub fn MultiDrawRangeElementArrayAPPLE(mode: GLenum, start: GLuint, end: GLuint, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { unsafe { storage::MultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount) } }
#[inline] pub fn MultiModeDrawArraysIBM(mode: *GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei, modestride: GLint) -> c_void { unsafe { storage::MultiModeDrawArraysIBM(mode, first, count, primcount, modestride) } }
#[inline] pub fn MultiModeDrawElementsIBM(mode: *GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei, modestride: GLint) -> c_void { unsafe { storage::MultiModeDrawElementsIBM(mode, count, type_, indices, primcount, modestride) } }
#[inline] pub fn MultiTexBufferEXT(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { storage::MultiTexBufferEXT(texunit, target, internalformat, buffer) } }
#[inline] pub fn MultiTexCoord1bOES(texture: GLenum, s: GLbyte) -> c_void { unsafe { storage::MultiTexCoord1bOES(texture, s) } }
#[inline] pub fn MultiTexCoord1bvOES(texture: GLenum, coords: *GLbyte) -> c_void { unsafe { storage::MultiTexCoord1bvOES(texture, coords) } }
#[inline] pub fn MultiTexCoord1d(target: GLenum, s: GLdouble) -> c_void { unsafe { storage::MultiTexCoord1d(target, s) } }
#[inline] pub fn MultiTexCoord1dARB(target: GLenum, s: GLdouble) -> c_void { unsafe { storage::MultiTexCoord1dARB(target, s) } }
#[inline] pub fn MultiTexCoord1dv(target: GLenum, v: *GLdouble) -> c_void { unsafe { storage::MultiTexCoord1dv(target, v) } }
#[inline] pub fn MultiTexCoord1dvARB(target: GLenum, v: *GLdouble) -> c_void { unsafe { storage::MultiTexCoord1dvARB(target, v) } }
#[inline] pub fn MultiTexCoord1f(target: GLenum, s: GLfloat) -> c_void { unsafe { storage::MultiTexCoord1f(target, s) } }
#[inline] pub fn MultiTexCoord1fARB(target: GLenum, s: GLfloat) -> c_void { unsafe { storage::MultiTexCoord1fARB(target, s) } }
#[inline] pub fn MultiTexCoord1fv(target: GLenum, v: *GLfloat) -> c_void { unsafe { storage::MultiTexCoord1fv(target, v) } }
#[inline] pub fn MultiTexCoord1fvARB(target: GLenum, v: *GLfloat) -> c_void { unsafe { storage::MultiTexCoord1fvARB(target, v) } }
#[inline] pub fn MultiTexCoord1hNV(target: GLenum, s: GLhalfNV) -> c_void { unsafe { storage::MultiTexCoord1hNV(target, s) } }
#[inline] pub fn MultiTexCoord1hvNV(target: GLenum, v: *GLhalfNV) -> c_void { unsafe { storage::MultiTexCoord1hvNV(target, v) } }
#[inline] pub fn MultiTexCoord1i(target: GLenum, s: GLint) -> c_void { unsafe { storage::MultiTexCoord1i(target, s) } }
#[inline] pub fn MultiTexCoord1iARB(target: GLenum, s: GLint) -> c_void { unsafe { storage::MultiTexCoord1iARB(target, s) } }
#[inline] pub fn MultiTexCoord1iv(target: GLenum, v: *GLint) -> c_void { unsafe { storage::MultiTexCoord1iv(target, v) } }
#[inline] pub fn MultiTexCoord1ivARB(target: GLenum, v: *GLint) -> c_void { unsafe { storage::MultiTexCoord1ivARB(target, v) } }
#[inline] pub fn MultiTexCoord1s(target: GLenum, s: GLshort) -> c_void { unsafe { storage::MultiTexCoord1s(target, s) } }
#[inline] pub fn MultiTexCoord1sARB(target: GLenum, s: GLshort) -> c_void { unsafe { storage::MultiTexCoord1sARB(target, s) } }
#[inline] pub fn MultiTexCoord1sv(target: GLenum, v: *GLshort) -> c_void { unsafe { storage::MultiTexCoord1sv(target, v) } }
#[inline] pub fn MultiTexCoord1svARB(target: GLenum, v: *GLshort) -> c_void { unsafe { storage::MultiTexCoord1svARB(target, v) } }
#[inline] pub fn MultiTexCoord1xOES(texture: GLenum, s: GLfixed) -> c_void { unsafe { storage::MultiTexCoord1xOES(texture, s) } }
#[inline] pub fn MultiTexCoord1xvOES(texture: GLenum, coords: *GLfixed) -> c_void { unsafe { storage::MultiTexCoord1xvOES(texture, coords) } }
#[inline] pub fn MultiTexCoord2bOES(texture: GLenum, s: GLbyte, t: GLbyte) -> c_void { unsafe { storage::MultiTexCoord2bOES(texture, s, t) } }
#[inline] pub fn MultiTexCoord2bvOES(texture: GLenum, coords: *GLbyte) -> c_void { unsafe { storage::MultiTexCoord2bvOES(texture, coords) } }
#[inline] pub fn MultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) -> c_void { unsafe { storage::MultiTexCoord2d(target, s, t) } }
#[inline] pub fn MultiTexCoord2dARB(target: GLenum, s: GLdouble, t: GLdouble) -> c_void { unsafe { storage::MultiTexCoord2dARB(target, s, t) } }
#[inline] pub fn MultiTexCoord2dv(target: GLenum, v: *GLdouble) -> c_void { unsafe { storage::MultiTexCoord2dv(target, v) } }
#[inline] pub fn MultiTexCoord2dvARB(target: GLenum, v: *GLdouble) -> c_void { unsafe { storage::MultiTexCoord2dvARB(target, v) } }
#[inline] pub fn MultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) -> c_void { unsafe { storage::MultiTexCoord2f(target, s, t) } }
#[inline] pub fn MultiTexCoord2fARB(target: GLenum, s: GLfloat, t: GLfloat) -> c_void { unsafe { storage::MultiTexCoord2fARB(target, s, t) } }
#[inline] pub fn MultiTexCoord2fv(target: GLenum, v: *GLfloat) -> c_void { unsafe { storage::MultiTexCoord2fv(target, v) } }
#[inline] pub fn MultiTexCoord2fvARB(target: GLenum, v: *GLfloat) -> c_void { unsafe { storage::MultiTexCoord2fvARB(target, v) } }
#[inline] pub fn MultiTexCoord2hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV) -> c_void { unsafe { storage::MultiTexCoord2hNV(target, s, t) } }
#[inline] pub fn MultiTexCoord2hvNV(target: GLenum, v: *GLhalfNV) -> c_void { unsafe { storage::MultiTexCoord2hvNV(target, v) } }
#[inline] pub fn MultiTexCoord2i(target: GLenum, s: GLint, t: GLint) -> c_void { unsafe { storage::MultiTexCoord2i(target, s, t) } }
#[inline] pub fn MultiTexCoord2iARB(target: GLenum, s: GLint, t: GLint) -> c_void { unsafe { storage::MultiTexCoord2iARB(target, s, t) } }
#[inline] pub fn MultiTexCoord2iv(target: GLenum, v: *GLint) -> c_void { unsafe { storage::MultiTexCoord2iv(target, v) } }
#[inline] pub fn MultiTexCoord2ivARB(target: GLenum, v: *GLint) -> c_void { unsafe { storage::MultiTexCoord2ivARB(target, v) } }
#[inline] pub fn MultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) -> c_void { unsafe { storage::MultiTexCoord2s(target, s, t) } }
#[inline] pub fn MultiTexCoord2sARB(target: GLenum, s: GLshort, t: GLshort) -> c_void { unsafe { storage::MultiTexCoord2sARB(target, s, t) } }
#[inline] pub fn MultiTexCoord2sv(target: GLenum, v: *GLshort) -> c_void { unsafe { storage::MultiTexCoord2sv(target, v) } }
#[inline] pub fn MultiTexCoord2svARB(target: GLenum, v: *GLshort) -> c_void { unsafe { storage::MultiTexCoord2svARB(target, v) } }
#[inline] pub fn MultiTexCoord2xOES(texture: GLenum, s: GLfixed, t: GLfixed) -> c_void { unsafe { storage::MultiTexCoord2xOES(texture, s, t) } }
#[inline] pub fn MultiTexCoord2xvOES(texture: GLenum, coords: *GLfixed) -> c_void { unsafe { storage::MultiTexCoord2xvOES(texture, coords) } }
#[inline] pub fn MultiTexCoord3bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) -> c_void { unsafe { storage::MultiTexCoord3bOES(texture, s, t, r) } }
#[inline] pub fn MultiTexCoord3bvOES(texture: GLenum, coords: *GLbyte) -> c_void { unsafe { storage::MultiTexCoord3bvOES(texture, coords) } }
#[inline] pub fn MultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { storage::MultiTexCoord3d(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { storage::MultiTexCoord3dARB(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3dv(target: GLenum, v: *GLdouble) -> c_void { unsafe { storage::MultiTexCoord3dv(target, v) } }
#[inline] pub fn MultiTexCoord3dvARB(target: GLenum, v: *GLdouble) -> c_void { unsafe { storage::MultiTexCoord3dvARB(target, v) } }
#[inline] pub fn MultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { storage::MultiTexCoord3f(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { storage::MultiTexCoord3fARB(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3fv(target: GLenum, v: *GLfloat) -> c_void { unsafe { storage::MultiTexCoord3fv(target, v) } }
#[inline] pub fn MultiTexCoord3fvARB(target: GLenum, v: *GLfloat) -> c_void { unsafe { storage::MultiTexCoord3fvARB(target, v) } }
#[inline] pub fn MultiTexCoord3hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void { unsafe { storage::MultiTexCoord3hNV(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3hvNV(target: GLenum, v: *GLhalfNV) -> c_void { unsafe { storage::MultiTexCoord3hvNV(target, v) } }
#[inline] pub fn MultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void { unsafe { storage::MultiTexCoord3i(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3iARB(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void { unsafe { storage::MultiTexCoord3iARB(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3iv(target: GLenum, v: *GLint) -> c_void { unsafe { storage::MultiTexCoord3iv(target, v) } }
#[inline] pub fn MultiTexCoord3ivARB(target: GLenum, v: *GLint) -> c_void { unsafe { storage::MultiTexCoord3ivARB(target, v) } }
#[inline] pub fn MultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { storage::MultiTexCoord3s(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { storage::MultiTexCoord3sARB(target, s, t, r) } }
#[inline] pub fn MultiTexCoord3sv(target: GLenum, v: *GLshort) -> c_void { unsafe { storage::MultiTexCoord3sv(target, v) } }
#[inline] pub fn MultiTexCoord3svARB(target: GLenum, v: *GLshort) -> c_void { unsafe { storage::MultiTexCoord3svARB(target, v) } }
#[inline] pub fn MultiTexCoord3xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) -> c_void { unsafe { storage::MultiTexCoord3xOES(texture, s, t, r) } }
#[inline] pub fn MultiTexCoord3xvOES(texture: GLenum, coords: *GLfixed) -> c_void { unsafe { storage::MultiTexCoord3xvOES(texture, coords) } }
#[inline] pub fn MultiTexCoord4bOES(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void { unsafe { storage::MultiTexCoord4bOES(texture, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4bvOES(texture: GLenum, coords: *GLbyte) -> c_void { unsafe { storage::MultiTexCoord4bvOES(texture, coords) } }
#[inline] pub fn MultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { storage::MultiTexCoord4d(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4dARB(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { storage::MultiTexCoord4dARB(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4dv(target: GLenum, v: *GLdouble) -> c_void { unsafe { storage::MultiTexCoord4dv(target, v) } }
#[inline] pub fn MultiTexCoord4dvARB(target: GLenum, v: *GLdouble) -> c_void { unsafe { storage::MultiTexCoord4dvARB(target, v) } }
#[inline] pub fn MultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { storage::MultiTexCoord4f(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4fARB(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { storage::MultiTexCoord4fARB(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4fv(target: GLenum, v: *GLfloat) -> c_void { unsafe { storage::MultiTexCoord4fv(target, v) } }
#[inline] pub fn MultiTexCoord4fvARB(target: GLenum, v: *GLfloat) -> c_void { unsafe { storage::MultiTexCoord4fvARB(target, v) } }
#[inline] pub fn MultiTexCoord4hNV(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void { unsafe { storage::MultiTexCoord4hNV(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4hvNV(target: GLenum, v: *GLhalfNV) -> c_void { unsafe { storage::MultiTexCoord4hvNV(target, v) } }
#[inline] pub fn MultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { storage::MultiTexCoord4i(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4iARB(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { storage::MultiTexCoord4iARB(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4iv(target: GLenum, v: *GLint) -> c_void { unsafe { storage::MultiTexCoord4iv(target, v) } }
#[inline] pub fn MultiTexCoord4ivARB(target: GLenum, v: *GLint) -> c_void { unsafe { storage::MultiTexCoord4ivARB(target, v) } }
#[inline] pub fn MultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { storage::MultiTexCoord4s(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4sARB(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { storage::MultiTexCoord4sARB(target, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4sv(target: GLenum, v: *GLshort) -> c_void { unsafe { storage::MultiTexCoord4sv(target, v) } }
#[inline] pub fn MultiTexCoord4svARB(target: GLenum, v: *GLshort) -> c_void { unsafe { storage::MultiTexCoord4svARB(target, v) } }
#[inline] pub fn MultiTexCoord4x(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { storage::MultiTexCoord4x(texture, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4xOES(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { storage::MultiTexCoord4xOES(texture, s, t, r, q) } }
#[inline] pub fn MultiTexCoord4xvOES(texture: GLenum, coords: *GLfixed) -> c_void { unsafe { storage::MultiTexCoord4xvOES(texture, coords) } }
#[inline] pub fn MultiTexCoordP1ui(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::MultiTexCoordP1ui(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP1uiv(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::MultiTexCoordP1uiv(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP2ui(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::MultiTexCoordP2ui(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP2uiv(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::MultiTexCoordP2uiv(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP3ui(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::MultiTexCoordP3ui(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP3uiv(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::MultiTexCoordP3uiv(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP4ui(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::MultiTexCoordP4ui(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordP4uiv(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::MultiTexCoordP4uiv(texture, type_, coords) } }
#[inline] pub fn MultiTexCoordPointerEXT(texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::MultiTexCoordPointerEXT(texunit, size, type_, stride, pointer) } }
#[inline] pub fn MultiTexEnvfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::MultiTexEnvfEXT(texunit, target, pname, param) } }
#[inline] pub fn MultiTexEnvfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::MultiTexEnvfvEXT(texunit, target, pname, params) } }
#[inline] pub fn MultiTexEnviEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::MultiTexEnviEXT(texunit, target, pname, param) } }
#[inline] pub fn MultiTexEnvivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::MultiTexEnvivEXT(texunit, target, pname, params) } }
#[inline] pub fn MultiTexGendEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) -> c_void { unsafe { storage::MultiTexGendEXT(texunit, coord, pname, param) } }
#[inline] pub fn MultiTexGendvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::MultiTexGendvEXT(texunit, coord, pname, params) } }
#[inline] pub fn MultiTexGenfEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::MultiTexGenfEXT(texunit, coord, pname, param) } }
#[inline] pub fn MultiTexGenfvEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::MultiTexGenfvEXT(texunit, coord, pname, params) } }
#[inline] pub fn MultiTexGeniEXT(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::MultiTexGeniEXT(texunit, coord, pname, param) } }
#[inline] pub fn MultiTexGenivEXT(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::MultiTexGenivEXT(texunit, coord, pname, params) } }
#[inline] pub fn MultiTexImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::MultiTexImage1DEXT(texunit, target, level, internalformat, width, border, format, type_, pixels) } }
#[inline] pub fn MultiTexImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::MultiTexImage2DEXT(texunit, target, level, internalformat, width, height, border, format, type_, pixels) } }
#[inline] pub fn MultiTexImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::MultiTexImage3DEXT(texunit, target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn MultiTexParameterIivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::MultiTexParameterIivEXT(texunit, target, pname, params) } }
#[inline] pub fn MultiTexParameterIuivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::MultiTexParameterIuivEXT(texunit, target, pname, params) } }
#[inline] pub fn MultiTexParameterfEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::MultiTexParameterfEXT(texunit, target, pname, param) } }
#[inline] pub fn MultiTexParameterfvEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::MultiTexParameterfvEXT(texunit, target, pname, params) } }
#[inline] pub fn MultiTexParameteriEXT(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::MultiTexParameteriEXT(texunit, target, pname, param) } }
#[inline] pub fn MultiTexParameterivEXT(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::MultiTexParameterivEXT(texunit, target, pname, params) } }
#[inline] pub fn MultiTexRenderbufferEXT(texunit: GLenum, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::MultiTexRenderbufferEXT(texunit, target, renderbuffer) } }
#[inline] pub fn MultiTexSubImage1DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::MultiTexSubImage1DEXT(texunit, target, level, xoffset, width, format, type_, pixels) } }
#[inline] pub fn MultiTexSubImage2DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::MultiTexSubImage2DEXT(texunit, target, level, xoffset, yoffset, width, height, format, type_, pixels) } }
#[inline] pub fn MultiTexSubImage3DEXT(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::MultiTexSubImage3DEXT(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn NamedBufferDataEXT(buffer: GLuint, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void { unsafe { storage::NamedBufferDataEXT(buffer, size, data, usage) } }
#[inline] pub fn NamedBufferStorageEXT(buffer: GLuint, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void { unsafe { storage::NamedBufferStorageEXT(buffer, size, data, flags) } }
#[inline] pub fn NamedBufferSubDataEXT(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { unsafe { storage::NamedBufferSubDataEXT(buffer, offset, size, data) } }
#[inline] pub fn NamedCopyBufferSubDataEXT(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { storage::NamedCopyBufferSubDataEXT(readBuffer, writeBuffer, readOffset, writeOffset, size) } }
#[inline] pub fn NamedFramebufferParameteriEXT(framebuffer: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { storage::NamedFramebufferParameteriEXT(framebuffer, pname, param) } }
#[inline] pub fn NamedFramebufferRenderbufferEXT(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::NamedFramebufferRenderbufferEXT(framebuffer, attachment, renderbuffertarget, renderbuffer) } }
#[inline] pub fn NamedFramebufferTexture1DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::NamedFramebufferTexture1DEXT(framebuffer, attachment, textarget, texture, level) } }
#[inline] pub fn NamedFramebufferTexture2DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::NamedFramebufferTexture2DEXT(framebuffer, attachment, textarget, texture, level) } }
#[inline] pub fn NamedFramebufferTexture3DEXT(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { storage::NamedFramebufferTexture3DEXT(framebuffer, attachment, textarget, texture, level, zoffset) } }
#[inline] pub fn NamedFramebufferTextureEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { storage::NamedFramebufferTextureEXT(framebuffer, attachment, texture, level) } }
#[inline] pub fn NamedFramebufferTextureFaceEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { storage::NamedFramebufferTextureFaceEXT(framebuffer, attachment, texture, level, face) } }
#[inline] pub fn NamedFramebufferTextureLayerEXT(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { storage::NamedFramebufferTextureLayerEXT(framebuffer, attachment, texture, level, layer) } }
#[inline] pub fn NamedProgramLocalParameter4dEXT(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::NamedProgramLocalParameter4dEXT(program, target, index, x, y, z, w) } }
#[inline] pub fn NamedProgramLocalParameter4dvEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { storage::NamedProgramLocalParameter4dvEXT(program, target, index, params) } }
#[inline] pub fn NamedProgramLocalParameter4fEXT(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::NamedProgramLocalParameter4fEXT(program, target, index, x, y, z, w) } }
#[inline] pub fn NamedProgramLocalParameter4fvEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { storage::NamedProgramLocalParameter4fvEXT(program, target, index, params) } }
#[inline] pub fn NamedProgramLocalParameterI4iEXT(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::NamedProgramLocalParameterI4iEXT(program, target, index, x, y, z, w) } }
#[inline] pub fn NamedProgramLocalParameterI4ivEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { storage::NamedProgramLocalParameterI4ivEXT(program, target, index, params) } }
#[inline] pub fn NamedProgramLocalParameterI4uiEXT(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { storage::NamedProgramLocalParameterI4uiEXT(program, target, index, x, y, z, w) } }
#[inline] pub fn NamedProgramLocalParameterI4uivEXT(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { storage::NamedProgramLocalParameterI4uivEXT(program, target, index, params) } }
#[inline] pub fn NamedProgramLocalParameters4fvEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { unsafe { storage::NamedProgramLocalParameters4fvEXT(program, target, index, count, params) } }
#[inline] pub fn NamedProgramLocalParametersI4ivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { unsafe { storage::NamedProgramLocalParametersI4ivEXT(program, target, index, count, params) } }
#[inline] pub fn NamedProgramLocalParametersI4uivEXT(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { unsafe { storage::NamedProgramLocalParametersI4uivEXT(program, target, index, count, params) } }
#[inline] pub fn NamedProgramStringEXT(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void { unsafe { storage::NamedProgramStringEXT(program, target, format, len, string) } }
#[inline] pub fn NamedRenderbufferStorageEXT(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::NamedRenderbufferStorageEXT(renderbuffer, internalformat, width, height) } }
#[inline] pub fn NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) } }
#[inline] pub fn NamedRenderbufferStorageMultisampleEXT(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::NamedRenderbufferStorageMultisampleEXT(renderbuffer, samples, internalformat, width, height) } }
#[inline] pub fn NamedStringARB(type_: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, string: *GLchar) -> c_void { unsafe { storage::NamedStringARB(type_, namelen, name, stringlen, string) } }
#[inline] pub fn NewList(list: GLuint, mode: GLenum) -> c_void { unsafe { storage::NewList(list, mode) } }
#[inline] pub fn NewObjectBufferATI(size: GLsizei, pointer: *GLvoid, usage: GLenum) -> GLuint { unsafe { storage::NewObjectBufferATI(size, pointer, usage) } }
#[inline] pub fn Normal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void { unsafe { storage::Normal3b(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3bv(v: *GLbyte) -> c_void { storage::Normal3bv(v) }
#[inline] pub fn Normal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void { unsafe { storage::Normal3d(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3dv(v: *GLdouble) -> c_void { storage::Normal3dv(v) }
#[inline] pub fn Normal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void { unsafe { storage::Normal3f(nx, ny, nz) } }
#[inline] pub fn Normal3fVertex3fSUN(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::Normal3fVertex3fSUN(nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn Normal3fVertex3fvSUN(n: *GLfloat, v: *GLfloat) -> c_void { storage::Normal3fVertex3fvSUN(n, v) }
#[inline] pub unsafe fn Normal3fv(v: *GLfloat) -> c_void { storage::Normal3fv(v) }
#[inline] pub fn Normal3hNV(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) -> c_void { unsafe { storage::Normal3hNV(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3hvNV(v: *GLhalfNV) -> c_void { storage::Normal3hvNV(v) }
#[inline] pub fn Normal3i(nx: GLint, ny: GLint, nz: GLint) -> c_void { unsafe { storage::Normal3i(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3iv(v: *GLint) -> c_void { storage::Normal3iv(v) }
#[inline] pub fn Normal3s(nx: GLshort, ny: GLshort, nz: GLshort) -> c_void { unsafe { storage::Normal3s(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3sv(v: *GLshort) -> c_void { storage::Normal3sv(v) }
#[inline] pub fn Normal3x(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void { unsafe { storage::Normal3x(nx, ny, nz) } }
#[inline] pub fn Normal3xOES(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void { unsafe { storage::Normal3xOES(nx, ny, nz) } }
#[inline] pub unsafe fn Normal3xvOES(coords: *GLfixed) -> c_void { storage::Normal3xvOES(coords) }
#[inline] pub fn NormalFormatNV(type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::NormalFormatNV(type_, stride) } }
#[inline] pub fn NormalP3ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::NormalP3ui(type_, coords) } }
#[inline] pub fn NormalP3uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::NormalP3uiv(type_, coords) } }
#[inline] pub fn NormalPointer(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::NormalPointer(type_, stride, pointer) } }
#[inline] pub fn NormalPointerEXT(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::NormalPointerEXT(type_, stride, count, pointer) } }
#[inline] pub fn NormalPointerListIBM(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { storage::NormalPointerListIBM(type_, stride, pointer, ptrstride) } }
#[inline] pub fn NormalPointervINTEL(type_: GLenum, pointer: **GLvoid) -> c_void { unsafe { storage::NormalPointervINTEL(type_, pointer) } }
#[inline] pub fn NormalStream3bATI(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void { unsafe { storage::NormalStream3bATI(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3bvATI(stream: GLenum, coords: *GLbyte) -> c_void { unsafe { storage::NormalStream3bvATI(stream, coords) } }
#[inline] pub fn NormalStream3dATI(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void { unsafe { storage::NormalStream3dATI(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { storage::NormalStream3dvATI(stream, coords) } }
#[inline] pub fn NormalStream3fATI(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void { unsafe { storage::NormalStream3fATI(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { storage::NormalStream3fvATI(stream, coords) } }
#[inline] pub fn NormalStream3iATI(stream: GLenum, nx: GLint, ny: GLint, nz: GLint) -> c_void { unsafe { storage::NormalStream3iATI(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { storage::NormalStream3ivATI(stream, coords) } }
#[inline] pub fn NormalStream3sATI(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) -> c_void { unsafe { storage::NormalStream3sATI(stream, nx, ny, nz) } }
#[inline] pub fn NormalStream3svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { storage::NormalStream3svATI(stream, coords) } }
#[inline] pub fn ObjectLabel(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void { unsafe { storage::ObjectLabel(identifier, name, length, label) } }
#[inline] pub fn ObjectLabelKHR(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void { unsafe { storage::ObjectLabelKHR(identifier, name, length, label) } }
#[inline] pub fn ObjectPtrLabel(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void { unsafe { storage::ObjectPtrLabel(ptr, length, label) } }
#[inline] pub fn ObjectPtrLabelKHR(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void { unsafe { storage::ObjectPtrLabelKHR(ptr, length, label) } }
#[inline] pub fn ObjectPurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum { unsafe { storage::ObjectPurgeableAPPLE(objectType, name, option) } }
#[inline] pub fn ObjectUnpurgeableAPPLE(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum { unsafe { storage::ObjectUnpurgeableAPPLE(objectType, name, option) } }
#[inline] pub fn Ortho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { storage::Ortho(left, right, bottom, top, zNear, zFar) } }
#[inline] pub fn Orthof(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { storage::Orthof(l, r, b, t, n, f) } }
#[inline] pub fn OrthofOES(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { storage::OrthofOES(l, r, b, t, n, f) } }
#[inline] pub fn Orthox(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { storage::Orthox(l, r, b, t, n, f) } }
#[inline] pub fn OrthoxOES(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { storage::OrthoxOES(l, r, b, t, n, f) } }
#[inline] pub fn PNTrianglesfATI(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PNTrianglesfATI(pname, param) } }
#[inline] pub fn PNTrianglesiATI(pname: GLenum, param: GLint) -> c_void { unsafe { storage::PNTrianglesiATI(pname, param) } }
#[inline] pub fn PassTexCoordATI(dst: GLuint, coord: GLuint, swizzle: GLenum) -> c_void { unsafe { storage::PassTexCoordATI(dst, coord, swizzle) } }
#[inline] pub fn PassThrough(token: GLfloat) -> c_void { unsafe { storage::PassThrough(token) } }
#[inline] pub fn PassThroughxOES(token: GLfixed) -> c_void { unsafe { storage::PassThroughxOES(token) } }
#[inline] pub fn PatchParameterfv(pname: GLenum, values: *GLfloat) -> c_void { unsafe { storage::PatchParameterfv(pname, values) } }
#[inline] pub fn PatchParameteri(pname: GLenum, value: GLint) -> c_void { unsafe { storage::PatchParameteri(pname, value) } }
#[inline] pub fn PathColorGenNV(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: *GLfloat) -> c_void { unsafe { storage::PathColorGenNV(color, genMode, colorFormat, coeffs) } }
#[inline] pub fn PathCommandsNV(path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { unsafe { storage::PathCommandsNV(path, numCommands, commands, numCoords, coordType, coords) } }
#[inline] pub fn PathCoordsNV(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { unsafe { storage::PathCoordsNV(path, numCoords, coordType, coords) } }
#[inline] pub fn PathCoverDepthFuncNV(func: GLenum) -> c_void { unsafe { storage::PathCoverDepthFuncNV(func) } }
#[inline] pub fn PathDashArrayNV(path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) -> c_void { unsafe { storage::PathDashArrayNV(path, dashCount, dashArray) } }
#[inline] pub fn PathFogGenNV(genMode: GLenum) -> c_void { unsafe { storage::PathFogGenNV(genMode) } }
#[inline] pub fn PathGlyphRangeNV(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void { unsafe { storage::PathGlyphRangeNV(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) } }
#[inline] pub fn PathGlyphsNV(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: *GLvoid, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void { unsafe { storage::PathGlyphsNV(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type_, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) } }
#[inline] pub fn PathParameterfNV(path: GLuint, pname: GLenum, value: GLfloat) -> c_void { unsafe { storage::PathParameterfNV(path, pname, value) } }
#[inline] pub fn PathParameterfvNV(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void { unsafe { storage::PathParameterfvNV(path, pname, value) } }
#[inline] pub fn PathParameteriNV(path: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { storage::PathParameteriNV(path, pname, value) } }
#[inline] pub fn PathParameterivNV(path: GLuint, pname: GLenum, value: *GLint) -> c_void { unsafe { storage::PathParameterivNV(path, pname, value) } }
#[inline] pub fn PathStencilDepthOffsetNV(factor: GLfloat, units: GLfloat) -> c_void { unsafe { storage::PathStencilDepthOffsetNV(factor, units) } }
#[inline] pub fn PathStencilFuncNV(func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { storage::PathStencilFuncNV(func, ref_, mask) } }
#[inline] pub fn PathStringNV(path: GLuint, format: GLenum, length: GLsizei, pathString: *GLvoid) -> c_void { unsafe { storage::PathStringNV(path, format, length, pathString) } }
#[inline] pub fn PathSubCommandsNV(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { unsafe { storage::PathSubCommandsNV(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) } }
#[inline] pub fn PathSubCoordsNV(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { unsafe { storage::PathSubCoordsNV(path, coordStart, numCoords, coordType, coords) } }
#[inline] pub fn PathTexGenNV(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: *GLfloat) -> c_void { unsafe { storage::PathTexGenNV(texCoordSet, genMode, components, coeffs) } }
#[inline] pub unsafe fn PauseTransformFeedback() -> c_void { storage::PauseTransformFeedback() }
#[inline] pub unsafe fn PauseTransformFeedbackNV() -> c_void { storage::PauseTransformFeedbackNV() }
#[inline] pub fn PixelDataRangeNV(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::PixelDataRangeNV(target, length, pointer) } }
#[inline] pub fn PixelMapfv(map: GLenum, mapsize: GLsizei, values: *GLfloat) -> c_void { unsafe { storage::PixelMapfv(map, mapsize, values) } }
#[inline] pub fn PixelMapuiv(map: GLenum, mapsize: GLsizei, values: *GLuint) -> c_void { unsafe { storage::PixelMapuiv(map, mapsize, values) } }
#[inline] pub fn PixelMapusv(map: GLenum, mapsize: GLsizei, values: *GLushort) -> c_void { unsafe { storage::PixelMapusv(map, mapsize, values) } }
#[inline] pub fn PixelMapx(map: GLenum, size: GLint, values: *GLfixed) -> c_void { unsafe { storage::PixelMapx(map, size, values) } }
#[inline] pub fn PixelStoref(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PixelStoref(pname, param) } }
#[inline] pub fn PixelStorei(pname: GLenum, param: GLint) -> c_void { unsafe { storage::PixelStorei(pname, param) } }
#[inline] pub fn PixelStorex(pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::PixelStorex(pname, param) } }
#[inline] pub fn PixelTexGenParameterfSGIS(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PixelTexGenParameterfSGIS(pname, param) } }
#[inline] pub fn PixelTexGenParameterfvSGIS(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::PixelTexGenParameterfvSGIS(pname, params) } }
#[inline] pub fn PixelTexGenParameteriSGIS(pname: GLenum, param: GLint) -> c_void { unsafe { storage::PixelTexGenParameteriSGIS(pname, param) } }
#[inline] pub fn PixelTexGenParameterivSGIS(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::PixelTexGenParameterivSGIS(pname, params) } }
#[inline] pub fn PixelTexGenSGIX(mode: GLenum) -> c_void { unsafe { storage::PixelTexGenSGIX(mode) } }
#[inline] pub fn PixelTransferf(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PixelTransferf(pname, param) } }
#[inline] pub fn PixelTransferi(pname: GLenum, param: GLint) -> c_void { unsafe { storage::PixelTransferi(pname, param) } }
#[inline] pub fn PixelTransferxOES(pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::PixelTransferxOES(pname, param) } }
#[inline] pub fn PixelTransformParameterfEXT(target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PixelTransformParameterfEXT(target, pname, param) } }
#[inline] pub fn PixelTransformParameterfvEXT(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::PixelTransformParameterfvEXT(target, pname, params) } }
#[inline] pub fn PixelTransformParameteriEXT(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::PixelTransformParameteriEXT(target, pname, param) } }
#[inline] pub fn PixelTransformParameterivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::PixelTransformParameterivEXT(target, pname, params) } }
#[inline] pub fn PixelZoom(xfactor: GLfloat, yfactor: GLfloat) -> c_void { unsafe { storage::PixelZoom(xfactor, yfactor) } }
#[inline] pub fn PixelZoomxOES(xfactor: GLfixed, yfactor: GLfixed) -> c_void { unsafe { storage::PixelZoomxOES(xfactor, yfactor) } }
#[inline] pub fn PointAlongPathNV(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean { unsafe { storage::PointAlongPathNV(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) } }
#[inline] pub fn PointParameterf(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PointParameterf(pname, param) } }
#[inline] pub fn PointParameterfARB(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PointParameterfARB(pname, param) } }
#[inline] pub fn PointParameterfEXT(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PointParameterfEXT(pname, param) } }
#[inline] pub fn PointParameterfSGIS(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::PointParameterfSGIS(pname, param) } }
#[inline] pub fn PointParameterfv(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::PointParameterfv(pname, params) } }
#[inline] pub fn PointParameterfvARB(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::PointParameterfvARB(pname, params) } }
#[inline] pub fn PointParameterfvEXT(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::PointParameterfvEXT(pname, params) } }
#[inline] pub fn PointParameterfvSGIS(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::PointParameterfvSGIS(pname, params) } }
#[inline] pub fn PointParameteri(pname: GLenum, param: GLint) -> c_void { unsafe { storage::PointParameteri(pname, param) } }
#[inline] pub fn PointParameteriNV(pname: GLenum, param: GLint) -> c_void { unsafe { storage::PointParameteriNV(pname, param) } }
#[inline] pub fn PointParameteriv(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::PointParameteriv(pname, params) } }
#[inline] pub fn PointParameterivNV(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::PointParameterivNV(pname, params) } }
#[inline] pub fn PointParameterx(pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::PointParameterx(pname, param) } }
#[inline] pub fn PointParameterxOES(pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::PointParameterxOES(pname, param) } }
#[inline] pub fn PointParameterxv(pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::PointParameterxv(pname, params) } }
#[inline] pub fn PointParameterxvOES(pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::PointParameterxvOES(pname, params) } }
#[inline] pub fn PointSize(size: GLfloat) -> c_void { unsafe { storage::PointSize(size) } }
#[inline] pub fn PointSizePointerOES(type_: GLenum, stride: GLsizei, pointer: *c_void) -> c_void { unsafe { storage::PointSizePointerOES(type_, stride, pointer) } }
#[inline] pub fn PointSizex(size: GLfixed) -> c_void { unsafe { storage::PointSizex(size) } }
#[inline] pub fn PointSizexOES(size: GLfixed) -> c_void { unsafe { storage::PointSizexOES(size) } }
#[inline] pub unsafe fn PollAsyncSGIX(markerp: *GLuint) -> GLint { storage::PollAsyncSGIX(markerp) }
#[inline] pub unsafe fn PollInstrumentsSGIX(marker_p: *GLint) -> GLint { storage::PollInstrumentsSGIX(marker_p) }
#[inline] pub fn PolygonMode(face: GLenum, mode: GLenum) -> c_void { unsafe { storage::PolygonMode(face, mode) } }
#[inline] pub fn PolygonOffset(factor: GLfloat, units: GLfloat) -> c_void { unsafe { storage::PolygonOffset(factor, units) } }
#[inline] pub fn PolygonOffsetEXT(factor: GLfloat, bias: GLfloat) -> c_void { unsafe { storage::PolygonOffsetEXT(factor, bias) } }
#[inline] pub fn PolygonOffsetx(factor: GLfixed, units: GLfixed) -> c_void { unsafe { storage::PolygonOffsetx(factor, units) } }
#[inline] pub fn PolygonOffsetxOES(factor: GLfixed, units: GLfixed) -> c_void { unsafe { storage::PolygonOffsetxOES(factor, units) } }
#[inline] pub unsafe fn PolygonStipple(mask: *GLubyte) -> c_void { storage::PolygonStipple(mask) }
#[inline] pub unsafe fn PopAttrib() -> c_void { storage::PopAttrib() }
#[inline] pub unsafe fn PopClientAttrib() -> c_void { storage::PopClientAttrib() }
#[inline] pub unsafe fn PopDebugGroup() -> c_void { storage::PopDebugGroup() }
#[inline] pub unsafe fn PopDebugGroupKHR() -> c_void { storage::PopDebugGroupKHR() }
#[inline] pub unsafe fn PopGroupMarkerEXT() -> c_void { storage::PopGroupMarkerEXT() }
#[inline] pub unsafe fn PopMatrix() -> c_void { storage::PopMatrix() }
#[inline] pub unsafe fn PopName() -> c_void { storage::PopName() }
#[inline] pub fn PresentFrameDualFillNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) -> c_void { unsafe { storage::PresentFrameDualFillNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type_, target0, fill0, target1, fill1, target2, fill2, target3, fill3) } }
#[inline] pub fn PresentFrameKeyedNV(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) -> c_void { unsafe { storage::PresentFrameKeyedNV(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type_, target0, fill0, key0, target1, fill1, key1) } }
#[inline] pub fn PrimitiveRestartIndex(index: GLuint) -> c_void { unsafe { storage::PrimitiveRestartIndex(index) } }
#[inline] pub fn PrimitiveRestartIndexNV(index: GLuint) -> c_void { unsafe { storage::PrimitiveRestartIndexNV(index) } }
#[inline] pub unsafe fn PrimitiveRestartNV() -> c_void { storage::PrimitiveRestartNV() }
#[inline] pub fn PrioritizeTextures(n: GLsizei, textures: *GLuint, priorities: *GLfloat) -> c_void { unsafe { storage::PrioritizeTextures(n, textures, priorities) } }
#[inline] pub fn PrioritizeTexturesEXT(n: GLsizei, textures: *GLuint, priorities: *GLclampf) -> c_void { unsafe { storage::PrioritizeTexturesEXT(n, textures, priorities) } }
#[inline] pub fn PrioritizeTexturesxOES(n: GLsizei, textures: *GLuint, priorities: *GLfixed) -> c_void { unsafe { storage::PrioritizeTexturesxOES(n, textures, priorities) } }
#[inline] pub fn ProgramBinary(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void { unsafe { storage::ProgramBinary(program, binaryFormat, binary, length) } }
#[inline] pub fn ProgramBinaryOES(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLint) -> c_void { unsafe { storage::ProgramBinaryOES(program, binaryFormat, binary, length) } }
#[inline] pub fn ProgramBufferParametersIivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLint) -> c_void { unsafe { storage::ProgramBufferParametersIivNV(target, bindingIndex, wordIndex, count, params) } }
#[inline] pub fn ProgramBufferParametersIuivNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLuint) -> c_void { unsafe { storage::ProgramBufferParametersIuivNV(target, bindingIndex, wordIndex, count, params) } }
#[inline] pub fn ProgramBufferParametersfvNV(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLfloat) -> c_void { unsafe { storage::ProgramBufferParametersfvNV(target, bindingIndex, wordIndex, count, params) } }
#[inline] pub fn ProgramEnvParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::ProgramEnvParameter4dARB(target, index, x, y, z, w) } }
#[inline] pub fn ProgramEnvParameter4dvARB(target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { storage::ProgramEnvParameter4dvARB(target, index, params) } }
#[inline] pub fn ProgramEnvParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::ProgramEnvParameter4fARB(target, index, x, y, z, w) } }
#[inline] pub fn ProgramEnvParameter4fvARB(target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { storage::ProgramEnvParameter4fvARB(target, index, params) } }
#[inline] pub fn ProgramEnvParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::ProgramEnvParameterI4iNV(target, index, x, y, z, w) } }
#[inline] pub fn ProgramEnvParameterI4ivNV(target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { storage::ProgramEnvParameterI4ivNV(target, index, params) } }
#[inline] pub fn ProgramEnvParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { storage::ProgramEnvParameterI4uiNV(target, index, x, y, z, w) } }
#[inline] pub fn ProgramEnvParameterI4uivNV(target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { storage::ProgramEnvParameterI4uivNV(target, index, params) } }
#[inline] pub fn ProgramEnvParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { unsafe { storage::ProgramEnvParameters4fvEXT(target, index, count, params) } }
#[inline] pub fn ProgramEnvParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { unsafe { storage::ProgramEnvParametersI4ivNV(target, index, count, params) } }
#[inline] pub fn ProgramEnvParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { unsafe { storage::ProgramEnvParametersI4uivNV(target, index, count, params) } }
#[inline] pub fn ProgramLocalParameter4dARB(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::ProgramLocalParameter4dARB(target, index, x, y, z, w) } }
#[inline] pub fn ProgramLocalParameter4dvARB(target: GLenum, index: GLuint, params: *GLdouble) -> c_void { unsafe { storage::ProgramLocalParameter4dvARB(target, index, params) } }
#[inline] pub fn ProgramLocalParameter4fARB(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::ProgramLocalParameter4fARB(target, index, x, y, z, w) } }
#[inline] pub fn ProgramLocalParameter4fvARB(target: GLenum, index: GLuint, params: *GLfloat) -> c_void { unsafe { storage::ProgramLocalParameter4fvARB(target, index, params) } }
#[inline] pub fn ProgramLocalParameterI4iNV(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::ProgramLocalParameterI4iNV(target, index, x, y, z, w) } }
#[inline] pub fn ProgramLocalParameterI4ivNV(target: GLenum, index: GLuint, params: *GLint) -> c_void { unsafe { storage::ProgramLocalParameterI4ivNV(target, index, params) } }
#[inline] pub fn ProgramLocalParameterI4uiNV(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { storage::ProgramLocalParameterI4uiNV(target, index, x, y, z, w) } }
#[inline] pub fn ProgramLocalParameterI4uivNV(target: GLenum, index: GLuint, params: *GLuint) -> c_void { unsafe { storage::ProgramLocalParameterI4uivNV(target, index, params) } }
#[inline] pub fn ProgramLocalParameters4fvEXT(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { unsafe { storage::ProgramLocalParameters4fvEXT(target, index, count, params) } }
#[inline] pub fn ProgramLocalParametersI4ivNV(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { unsafe { storage::ProgramLocalParametersI4ivNV(target, index, count, params) } }
#[inline] pub fn ProgramLocalParametersI4uivNV(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { unsafe { storage::ProgramLocalParametersI4uivNV(target, index, count, params) } }
#[inline] pub fn ProgramNamedParameter4dNV(id: GLuint, len: GLsizei, name: *GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::ProgramNamedParameter4dNV(id, len, name, x, y, z, w) } }
#[inline] pub fn ProgramNamedParameter4dvNV(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLdouble) -> c_void { unsafe { storage::ProgramNamedParameter4dvNV(id, len, name, v) } }
#[inline] pub fn ProgramNamedParameter4fNV(id: GLuint, len: GLsizei, name: *GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::ProgramNamedParameter4fNV(id, len, name, x, y, z, w) } }
#[inline] pub fn ProgramNamedParameter4fvNV(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLfloat) -> c_void { unsafe { storage::ProgramNamedParameter4fvNV(id, len, name, v) } }
#[inline] pub fn ProgramParameter4dNV(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::ProgramParameter4dNV(target, index, x, y, z, w) } }
#[inline] pub fn ProgramParameter4dvNV(target: GLenum, index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::ProgramParameter4dvNV(target, index, v) } }
#[inline] pub fn ProgramParameter4fNV(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::ProgramParameter4fNV(target, index, x, y, z, w) } }
#[inline] pub fn ProgramParameter4fvNV(target: GLenum, index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::ProgramParameter4fvNV(target, index, v) } }
#[inline] pub fn ProgramParameteri(program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { storage::ProgramParameteri(program, pname, value) } }
#[inline] pub fn ProgramParameteriARB(program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { storage::ProgramParameteriARB(program, pname, value) } }
#[inline] pub fn ProgramParameteriEXT(program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { storage::ProgramParameteriEXT(program, pname, value) } }
#[inline] pub fn ProgramParameters4dvNV(target: GLenum, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { storage::ProgramParameters4dvNV(target, index, count, v) } }
#[inline] pub fn ProgramParameters4fvNV(target: GLenum, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { storage::ProgramParameters4fvNV(target, index, count, v) } }
#[inline] pub fn ProgramStringARB(target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void { unsafe { storage::ProgramStringARB(target, format, len, string) } }
#[inline] pub fn ProgramSubroutineParametersuivNV(target: GLenum, count: GLsizei, params: *GLuint) -> c_void { unsafe { storage::ProgramSubroutineParametersuivNV(target, count, params) } }
#[inline] pub fn ProgramUniform1d(program: GLuint, location: GLint, v0: GLdouble) -> c_void { unsafe { storage::ProgramUniform1d(program, location, v0) } }
#[inline] pub fn ProgramUniform1dEXT(program: GLuint, location: GLint, x: GLdouble) -> c_void { unsafe { storage::ProgramUniform1dEXT(program, location, x) } }
#[inline] pub fn ProgramUniform1dv(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniform1dv(program, location, count, value) } }
#[inline] pub fn ProgramUniform1dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniform1dvEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform1f(program: GLuint, location: GLint, v0: GLfloat) -> c_void { unsafe { storage::ProgramUniform1f(program, location, v0) } }
#[inline] pub fn ProgramUniform1fEXT(program: GLuint, location: GLint, v0: GLfloat) -> c_void { unsafe { storage::ProgramUniform1fEXT(program, location, v0) } }
#[inline] pub fn ProgramUniform1fv(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniform1fv(program, location, count, value) } }
#[inline] pub fn ProgramUniform1fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniform1fvEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform1i(program: GLuint, location: GLint, v0: GLint) -> c_void { unsafe { storage::ProgramUniform1i(program, location, v0) } }
#[inline] pub fn ProgramUniform1i64NV(program: GLuint, location: GLint, x: GLint64EXT) -> c_void { unsafe { storage::ProgramUniform1i64NV(program, location, x) } }
#[inline] pub fn ProgramUniform1i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { storage::ProgramUniform1i64vNV(program, location, count, value) } }
#[inline] pub fn ProgramUniform1iEXT(program: GLuint, location: GLint, v0: GLint) -> c_void { unsafe { storage::ProgramUniform1iEXT(program, location, v0) } }
#[inline] pub fn ProgramUniform1iv(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::ProgramUniform1iv(program, location, count, value) } }
#[inline] pub fn ProgramUniform1ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::ProgramUniform1ivEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform1ui(program: GLuint, location: GLint, v0: GLuint) -> c_void { unsafe { storage::ProgramUniform1ui(program, location, v0) } }
#[inline] pub fn ProgramUniform1ui64NV(program: GLuint, location: GLint, x: GLuint64EXT) -> c_void { unsafe { storage::ProgramUniform1ui64NV(program, location, x) } }
#[inline] pub fn ProgramUniform1ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::ProgramUniform1ui64vNV(program, location, count, value) } }
#[inline] pub fn ProgramUniform1uiEXT(program: GLuint, location: GLint, v0: GLuint) -> c_void { unsafe { storage::ProgramUniform1uiEXT(program, location, v0) } }
#[inline] pub fn ProgramUniform1uiv(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::ProgramUniform1uiv(program, location, count, value) } }
#[inline] pub fn ProgramUniform1uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::ProgramUniform1uivEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform2d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> c_void { unsafe { storage::ProgramUniform2d(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::ProgramUniform2dEXT(program, location, x, y) } }
#[inline] pub fn ProgramUniform2dv(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniform2dv(program, location, count, value) } }
#[inline] pub fn ProgramUniform2dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniform2dvEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform2f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { storage::ProgramUniform2f(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { storage::ProgramUniform2fEXT(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2fv(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniform2fv(program, location, count, value) } }
#[inline] pub fn ProgramUniform2fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniform2fvEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform2i(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { storage::ProgramUniform2i(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { storage::ProgramUniform2i64NV(program, location, x, y) } }
#[inline] pub fn ProgramUniform2i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { storage::ProgramUniform2i64vNV(program, location, count, value) } }
#[inline] pub fn ProgramUniform2iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { storage::ProgramUniform2iEXT(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2iv(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::ProgramUniform2iv(program, location, count, value) } }
#[inline] pub fn ProgramUniform2ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::ProgramUniform2ivEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform2ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { storage::ProgramUniform2ui(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { storage::ProgramUniform2ui64NV(program, location, x, y) } }
#[inline] pub fn ProgramUniform2ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::ProgramUniform2ui64vNV(program, location, count, value) } }
#[inline] pub fn ProgramUniform2uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { storage::ProgramUniform2uiEXT(program, location, v0, v1) } }
#[inline] pub fn ProgramUniform2uiv(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::ProgramUniform2uiv(program, location, count, value) } }
#[inline] pub fn ProgramUniform2uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::ProgramUniform2uivEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform3d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> c_void { unsafe { storage::ProgramUniform3d(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::ProgramUniform3dEXT(program, location, x, y, z) } }
#[inline] pub fn ProgramUniform3dv(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniform3dv(program, location, count, value) } }
#[inline] pub fn ProgramUniform3dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniform3dvEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform3f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { storage::ProgramUniform3f(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { storage::ProgramUniform3fEXT(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3fv(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniform3fv(program, location, count, value) } }
#[inline] pub fn ProgramUniform3fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniform3fvEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform3i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { storage::ProgramUniform3i(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { storage::ProgramUniform3i64NV(program, location, x, y, z) } }
#[inline] pub fn ProgramUniform3i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { storage::ProgramUniform3i64vNV(program, location, count, value) } }
#[inline] pub fn ProgramUniform3iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { storage::ProgramUniform3iEXT(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3iv(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::ProgramUniform3iv(program, location, count, value) } }
#[inline] pub fn ProgramUniform3ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::ProgramUniform3ivEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform3ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { storage::ProgramUniform3ui(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { storage::ProgramUniform3ui64NV(program, location, x, y, z) } }
#[inline] pub fn ProgramUniform3ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::ProgramUniform3ui64vNV(program, location, count, value) } }
#[inline] pub fn ProgramUniform3uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { storage::ProgramUniform3uiEXT(program, location, v0, v1, v2) } }
#[inline] pub fn ProgramUniform3uiv(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::ProgramUniform3uiv(program, location, count, value) } }
#[inline] pub fn ProgramUniform3uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::ProgramUniform3uivEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform4d(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> c_void { unsafe { storage::ProgramUniform4d(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4dEXT(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::ProgramUniform4dEXT(program, location, x, y, z, w) } }
#[inline] pub fn ProgramUniform4dv(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniform4dv(program, location, count, value) } }
#[inline] pub fn ProgramUniform4dvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniform4dvEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform4f(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { storage::ProgramUniform4f(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4fEXT(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { storage::ProgramUniform4fEXT(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4fv(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniform4fv(program, location, count, value) } }
#[inline] pub fn ProgramUniform4fvEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniform4fvEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform4i(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { storage::ProgramUniform4i(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4i64NV(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { storage::ProgramUniform4i64NV(program, location, x, y, z, w) } }
#[inline] pub fn ProgramUniform4i64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { storage::ProgramUniform4i64vNV(program, location, count, value) } }
#[inline] pub fn ProgramUniform4iEXT(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { storage::ProgramUniform4iEXT(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4iv(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::ProgramUniform4iv(program, location, count, value) } }
#[inline] pub fn ProgramUniform4ivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::ProgramUniform4ivEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniform4ui(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { storage::ProgramUniform4ui(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4ui64NV(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { storage::ProgramUniform4ui64NV(program, location, x, y, z, w) } }
#[inline] pub fn ProgramUniform4ui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::ProgramUniform4ui64vNV(program, location, count, value) } }
#[inline] pub fn ProgramUniform4uiEXT(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { storage::ProgramUniform4uiEXT(program, location, v0, v1, v2, v3) } }
#[inline] pub fn ProgramUniform4uiv(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::ProgramUniform4uiv(program, location, count, value) } }
#[inline] pub fn ProgramUniform4uivEXT(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::ProgramUniform4uivEXT(program, location, count, value) } }
#[inline] pub fn ProgramUniformHandleui64ARB(program: GLuint, location: GLint, value: GLuint64) -> c_void { unsafe { storage::ProgramUniformHandleui64ARB(program, location, value) } }
#[inline] pub fn ProgramUniformHandleui64NV(program: GLuint, location: GLint, value: GLuint64) -> c_void { unsafe { storage::ProgramUniformHandleui64NV(program, location, value) } }
#[inline] pub fn ProgramUniformHandleui64vARB(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void { unsafe { storage::ProgramUniformHandleui64vARB(program, location, count, values) } }
#[inline] pub fn ProgramUniformHandleui64vNV(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void { unsafe { storage::ProgramUniformHandleui64vNV(program, location, count, values) } }
#[inline] pub fn ProgramUniformMatrix2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix2dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix2dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix2fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix2fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix2x3dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix2x3dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix2x3fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix2x3fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix2x4dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix2x4dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix2x4fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix2x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix2x4fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix3dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix3dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix3fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix3fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix3x2dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix3x2dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix3x2fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix3x2fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix3x4dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix3x4dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix3x4fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix3x4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix3x4fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix4dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix4dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix4fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix4fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x2dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix4x2dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x2dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix4x2dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x2fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix4x2fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x2fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix4x2fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x3dv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix4x3dv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x3dvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::ProgramUniformMatrix4x3dvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x3fv(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix4x3fv(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformMatrix4x3fvEXT(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::ProgramUniformMatrix4x3fvEXT(program, location, count, transpose, value) } }
#[inline] pub fn ProgramUniformui64NV(program: GLuint, location: GLint, value: GLuint64EXT) -> c_void { unsafe { storage::ProgramUniformui64NV(program, location, value) } }
#[inline] pub fn ProgramUniformui64vNV(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::ProgramUniformui64vNV(program, location, count, value) } }
#[inline] pub fn ProgramVertexLimitNV(target: GLenum, limit: GLint) -> c_void { unsafe { storage::ProgramVertexLimitNV(target, limit) } }
#[inline] pub fn ProvokingVertex(mode: GLenum) -> c_void { unsafe { storage::ProvokingVertex(mode) } }
#[inline] pub fn ProvokingVertexEXT(mode: GLenum) -> c_void { unsafe { storage::ProvokingVertexEXT(mode) } }
#[inline] pub fn PushAttrib(mask: GLbitfield) -> c_void { unsafe { storage::PushAttrib(mask) } }
#[inline] pub fn PushClientAttrib(mask: GLbitfield) -> c_void { unsafe { storage::PushClientAttrib(mask) } }
#[inline] pub fn PushClientAttribDefaultEXT(mask: GLbitfield) -> c_void { unsafe { storage::PushClientAttribDefaultEXT(mask) } }
#[inline] pub fn PushDebugGroup(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void { unsafe { storage::PushDebugGroup(source, id, length, message) } }
#[inline] pub fn PushDebugGroupKHR(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void { unsafe { storage::PushDebugGroupKHR(source, id, length, message) } }
#[inline] pub fn PushGroupMarkerEXT(length: GLsizei, marker: *GLchar) -> c_void { unsafe { storage::PushGroupMarkerEXT(length, marker) } }
#[inline] pub unsafe fn PushMatrix() -> c_void { storage::PushMatrix() }
#[inline] pub fn PushName(name: GLuint) -> c_void { unsafe { storage::PushName(name) } }
#[inline] pub fn QueryCounter(id: GLuint, target: GLenum) -> c_void { unsafe { storage::QueryCounter(id, target) } }
#[inline] pub fn QueryCounterEXT(id: GLuint, target: GLenum) -> c_void { unsafe { storage::QueryCounterEXT(id, target) } }
#[inline] pub unsafe fn QueryMatrixxOES(mantissa: *GLfixed, exponent: *GLint) -> GLbitfield { storage::QueryMatrixxOES(mantissa, exponent) }
#[inline] pub fn RasterPos2d(x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::RasterPos2d(x, y) } }
#[inline] pub unsafe fn RasterPos2dv(v: *GLdouble) -> c_void { storage::RasterPos2dv(v) }
#[inline] pub fn RasterPos2f(x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::RasterPos2f(x, y) } }
#[inline] pub unsafe fn RasterPos2fv(v: *GLfloat) -> c_void { storage::RasterPos2fv(v) }
#[inline] pub fn RasterPos2i(x: GLint, y: GLint) -> c_void { unsafe { storage::RasterPos2i(x, y) } }
#[inline] pub unsafe fn RasterPos2iv(v: *GLint) -> c_void { storage::RasterPos2iv(v) }
#[inline] pub fn RasterPos2s(x: GLshort, y: GLshort) -> c_void { unsafe { storage::RasterPos2s(x, y) } }
#[inline] pub unsafe fn RasterPos2sv(v: *GLshort) -> c_void { storage::RasterPos2sv(v) }
#[inline] pub fn RasterPos2xOES(x: GLfixed, y: GLfixed) -> c_void { unsafe { storage::RasterPos2xOES(x, y) } }
#[inline] pub unsafe fn RasterPos2xvOES(coords: *GLfixed) -> c_void { storage::RasterPos2xvOES(coords) }
#[inline] pub fn RasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::RasterPos3d(x, y, z) } }
#[inline] pub unsafe fn RasterPos3dv(v: *GLdouble) -> c_void { storage::RasterPos3dv(v) }
#[inline] pub fn RasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::RasterPos3f(x, y, z) } }
#[inline] pub unsafe fn RasterPos3fv(v: *GLfloat) -> c_void { storage::RasterPos3fv(v) }
#[inline] pub fn RasterPos3i(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { storage::RasterPos3i(x, y, z) } }
#[inline] pub unsafe fn RasterPos3iv(v: *GLint) -> c_void { storage::RasterPos3iv(v) }
#[inline] pub fn RasterPos3s(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::RasterPos3s(x, y, z) } }
#[inline] pub unsafe fn RasterPos3sv(v: *GLshort) -> c_void { storage::RasterPos3sv(v) }
#[inline] pub fn RasterPos3xOES(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { storage::RasterPos3xOES(x, y, z) } }
#[inline] pub unsafe fn RasterPos3xvOES(coords: *GLfixed) -> c_void { storage::RasterPos3xvOES(coords) }
#[inline] pub fn RasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::RasterPos4d(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4dv(v: *GLdouble) -> c_void { storage::RasterPos4dv(v) }
#[inline] pub fn RasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::RasterPos4f(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4fv(v: *GLfloat) -> c_void { storage::RasterPos4fv(v) }
#[inline] pub fn RasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::RasterPos4i(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4iv(v: *GLint) -> c_void { storage::RasterPos4iv(v) }
#[inline] pub fn RasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { storage::RasterPos4s(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4sv(v: *GLshort) -> c_void { storage::RasterPos4sv(v) }
#[inline] pub fn RasterPos4xOES(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) -> c_void { unsafe { storage::RasterPos4xOES(x, y, z, w) } }
#[inline] pub unsafe fn RasterPos4xvOES(coords: *GLfixed) -> c_void { storage::RasterPos4xvOES(coords) }
#[inline] pub fn ReadBuffer(mode: GLenum) -> c_void { unsafe { storage::ReadBuffer(mode) } }
#[inline] pub fn ReadBufferIndexedEXT(src: GLenum, index: GLint) -> c_void { unsafe { storage::ReadBufferIndexedEXT(src, index) } }
#[inline] pub fn ReadBufferNV(mode: GLenum) -> c_void { unsafe { storage::ReadBufferNV(mode) } }
#[inline] pub fn ReadInstrumentsSGIX(marker: GLint) -> c_void { unsafe { storage::ReadInstrumentsSGIX(marker) } }
#[inline] pub fn ReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::ReadPixels(x, y, width, height, format, type_, pixels) } }
#[inline] pub fn ReadnPixelsARB(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::ReadnPixelsARB(x, y, width, height, format, type_, bufSize, data) } }
#[inline] pub fn ReadnPixelsEXT(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void { unsafe { storage::ReadnPixelsEXT(x, y, width, height, format, type_, bufSize, data) } }
#[inline] pub fn Rectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> c_void { unsafe { storage::Rectd(x1, y1, x2, y2) } }
#[inline] pub unsafe fn Rectdv(v1: *GLdouble, v2: *GLdouble) -> c_void { storage::Rectdv(v1, v2) }
#[inline] pub fn Rectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> c_void { unsafe { storage::Rectf(x1, y1, x2, y2) } }
#[inline] pub unsafe fn Rectfv(v1: *GLfloat, v2: *GLfloat) -> c_void { storage::Rectfv(v1, v2) }
#[inline] pub fn Recti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> c_void { unsafe { storage::Recti(x1, y1, x2, y2) } }
#[inline] pub unsafe fn Rectiv(v1: *GLint, v2: *GLint) -> c_void { storage::Rectiv(v1, v2) }
#[inline] pub fn Rects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> c_void { unsafe { storage::Rects(x1, y1, x2, y2) } }
#[inline] pub unsafe fn Rectsv(v1: *GLshort, v2: *GLshort) -> c_void { storage::Rectsv(v1, v2) }
#[inline] pub fn RectxOES(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) -> c_void { unsafe { storage::RectxOES(x1, y1, x2, y2) } }
#[inline] pub unsafe fn RectxvOES(v1: *GLfixed, v2: *GLfixed) -> c_void { storage::RectxvOES(v1, v2) }
#[inline] pub unsafe fn ReferencePlaneSGIX(equation: *GLdouble) -> c_void { storage::ReferencePlaneSGIX(equation) }
#[inline] pub unsafe fn ReleaseShaderCompiler() -> c_void { storage::ReleaseShaderCompiler() }
#[inline] pub fn RenderMode(mode: GLenum) -> GLint { unsafe { storage::RenderMode(mode) } }
#[inline] pub fn RenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorage(target, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageEXT(target, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageMultisample(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleANGLE(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageMultisampleANGLE(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleAPPLE(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageMultisampleAPPLE(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleEXT(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleIMG(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageMultisampleIMG(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageMultisampleNV(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageMultisampleNV(target, samples, internalformat, width, height) } }
#[inline] pub fn RenderbufferStorageOES(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::RenderbufferStorageOES(target, internalformat, width, height) } }
#[inline] pub fn ReplacementCodePointerSUN(type_: GLenum, stride: GLsizei, pointer: **GLvoid) -> c_void { unsafe { storage::ReplacementCodePointerSUN(type_, stride, pointer) } }
#[inline] pub fn ReplacementCodeubSUN(code: GLubyte) -> c_void { unsafe { storage::ReplacementCodeubSUN(code) } }
#[inline] pub unsafe fn ReplacementCodeubvSUN(code: *GLubyte) -> c_void { storage::ReplacementCodeubvSUN(code) }
#[inline] pub fn ReplacementCodeuiColor3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::ReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiColor3fVertex3fvSUN(rc: *GLuint, c: *GLfloat, v: *GLfloat) -> c_void { storage::ReplacementCodeuiColor3fVertex3fvSUN(rc, c, v) }
#[inline] pub fn ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc: *GLuint, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v) }
#[inline] pub fn ReplacementCodeuiColor4ubVertex3fSUN(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::ReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiColor4ubVertex3fvSUN(rc: *GLuint, c: *GLubyte, v: *GLfloat) -> c_void { storage::ReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v) }
#[inline] pub fn ReplacementCodeuiNormal3fVertex3fSUN(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::ReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiNormal3fVertex3fvSUN(rc: *GLuint, n: *GLfloat, v: *GLfloat) -> c_void { storage::ReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v) }
#[inline] pub fn ReplacementCodeuiSUN(code: GLuint) -> c_void { unsafe { storage::ReplacementCodeuiSUN(code) } }
#[inline] pub fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc: *GLuint, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v) }
#[inline] pub fn ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc: *GLuint, tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v) }
#[inline] pub fn ReplacementCodeuiTexCoord2fVertex3fSUN(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::ReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiTexCoord2fVertex3fvSUN(rc: *GLuint, tc: *GLfloat, v: *GLfloat) -> c_void { storage::ReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v) }
#[inline] pub fn ReplacementCodeuiVertex3fSUN(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::ReplacementCodeuiVertex3fSUN(rc, x, y, z) } }
#[inline] pub unsafe fn ReplacementCodeuiVertex3fvSUN(rc: *GLuint, v: *GLfloat) -> c_void { storage::ReplacementCodeuiVertex3fvSUN(rc, v) }
#[inline] pub unsafe fn ReplacementCodeuivSUN(code: *GLuint) -> c_void { storage::ReplacementCodeuivSUN(code) }
#[inline] pub fn ReplacementCodeusSUN(code: GLushort) -> c_void { unsafe { storage::ReplacementCodeusSUN(code) } }
#[inline] pub unsafe fn ReplacementCodeusvSUN(code: *GLushort) -> c_void { storage::ReplacementCodeusvSUN(code) }
#[inline] pub fn RequestResidentProgramsNV(n: GLsizei, programs: *GLuint) -> c_void { unsafe { storage::RequestResidentProgramsNV(n, programs) } }
#[inline] pub fn ResetHistogram(target: GLenum) -> c_void { unsafe { storage::ResetHistogram(target) } }
#[inline] pub fn ResetHistogramEXT(target: GLenum) -> c_void { unsafe { storage::ResetHistogramEXT(target) } }
#[inline] pub fn ResetMinmax(target: GLenum) -> c_void { unsafe { storage::ResetMinmax(target) } }
#[inline] pub fn ResetMinmaxEXT(target: GLenum) -> c_void { unsafe { storage::ResetMinmaxEXT(target) } }
#[inline] pub unsafe fn ResizeBuffersMESA() -> c_void { storage::ResizeBuffersMESA() }
#[inline] pub unsafe fn ResolveMultisampleFramebufferAPPLE() -> c_void { storage::ResolveMultisampleFramebufferAPPLE() }
#[inline] pub unsafe fn ResumeTransformFeedback() -> c_void { storage::ResumeTransformFeedback() }
#[inline] pub unsafe fn ResumeTransformFeedbackNV() -> c_void { storage::ResumeTransformFeedbackNV() }
#[inline] pub fn Rotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::Rotated(angle, x, y, z) } }
#[inline] pub fn Rotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::Rotatef(angle, x, y, z) } }
#[inline] pub fn Rotatex(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { storage::Rotatex(angle, x, y, z) } }
#[inline] pub fn RotatexOES(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { storage::RotatexOES(angle, x, y, z) } }
#[inline] pub fn SampleCoverage(value: GLfloat, invert: GLboolean) -> c_void { unsafe { storage::SampleCoverage(value, invert) } }
#[inline] pub fn SampleCoverageARB(value: GLfloat, invert: GLboolean) -> c_void { unsafe { storage::SampleCoverageARB(value, invert) } }
#[inline] pub fn SampleCoverageOES(value: GLfixed, invert: GLboolean) -> c_void { unsafe { storage::SampleCoverageOES(value, invert) } }
#[inline] pub fn SampleCoveragex(value: GLclampx, invert: GLboolean) -> c_void { unsafe { storage::SampleCoveragex(value, invert) } }
#[inline] pub fn SampleCoveragexOES(value: GLclampx, invert: GLboolean) -> c_void { unsafe { storage::SampleCoveragexOES(value, invert) } }
#[inline] pub fn SampleMapATI(dst: GLuint, interp: GLuint, swizzle: GLenum) -> c_void { unsafe { storage::SampleMapATI(dst, interp, swizzle) } }
#[inline] pub fn SampleMaskEXT(value: GLclampf, invert: GLboolean) -> c_void { unsafe { storage::SampleMaskEXT(value, invert) } }
#[inline] pub fn SampleMaskIndexedNV(index: GLuint, mask: GLbitfield) -> c_void { unsafe { storage::SampleMaskIndexedNV(index, mask) } }
#[inline] pub fn SampleMaskSGIS(value: GLclampf, invert: GLboolean) -> c_void { unsafe { storage::SampleMaskSGIS(value, invert) } }
#[inline] pub fn SampleMaski(index: GLuint, mask: GLbitfield) -> c_void { unsafe { storage::SampleMaski(index, mask) } }
#[inline] pub fn SamplePatternEXT(pattern: GLenum) -> c_void { unsafe { storage::SamplePatternEXT(pattern) } }
#[inline] pub fn SamplePatternSGIS(pattern: GLenum) -> c_void { unsafe { storage::SamplePatternSGIS(pattern) } }
#[inline] pub fn SamplerParameterIiv(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void { unsafe { storage::SamplerParameterIiv(sampler, pname, param) } }
#[inline] pub fn SamplerParameterIuiv(sampler: GLuint, pname: GLenum, param: *GLuint) -> c_void { unsafe { storage::SamplerParameterIuiv(sampler, pname, param) } }
#[inline] pub fn SamplerParameterf(sampler: GLuint, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::SamplerParameterf(sampler, pname, param) } }
#[inline] pub fn SamplerParameterfv(sampler: GLuint, pname: GLenum, param: *GLfloat) -> c_void { unsafe { storage::SamplerParameterfv(sampler, pname, param) } }
#[inline] pub fn SamplerParameteri(sampler: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { storage::SamplerParameteri(sampler, pname, param) } }
#[inline] pub fn SamplerParameteriv(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void { unsafe { storage::SamplerParameteriv(sampler, pname, param) } }
#[inline] pub fn Scaled(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::Scaled(x, y, z) } }
#[inline] pub fn Scalef(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::Scalef(x, y, z) } }
#[inline] pub fn Scalex(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { storage::Scalex(x, y, z) } }
#[inline] pub fn ScalexOES(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { storage::ScalexOES(x, y, z) } }
#[inline] pub fn Scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::Scissor(x, y, width, height) } }
#[inline] pub fn ScissorArrayv(first: GLuint, count: GLsizei, v: *GLint) -> c_void { unsafe { storage::ScissorArrayv(first, count, v) } }
#[inline] pub fn ScissorIndexed(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::ScissorIndexed(index, left, bottom, width, height) } }
#[inline] pub fn ScissorIndexedv(index: GLuint, v: *GLint) -> c_void { unsafe { storage::ScissorIndexedv(index, v) } }
#[inline] pub fn SecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { storage::SecondaryColor3b(red, green, blue) } }
#[inline] pub fn SecondaryColor3bEXT(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { storage::SecondaryColor3bEXT(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3bv(v: *GLbyte) -> c_void { storage::SecondaryColor3bv(v) }
#[inline] pub unsafe fn SecondaryColor3bvEXT(v: *GLbyte) -> c_void { storage::SecondaryColor3bvEXT(v) }
#[inline] pub fn SecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { storage::SecondaryColor3d(red, green, blue) } }
#[inline] pub fn SecondaryColor3dEXT(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { storage::SecondaryColor3dEXT(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3dv(v: *GLdouble) -> c_void { storage::SecondaryColor3dv(v) }
#[inline] pub unsafe fn SecondaryColor3dvEXT(v: *GLdouble) -> c_void { storage::SecondaryColor3dvEXT(v) }
#[inline] pub fn SecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { storage::SecondaryColor3f(red, green, blue) } }
#[inline] pub fn SecondaryColor3fEXT(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { storage::SecondaryColor3fEXT(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3fv(v: *GLfloat) -> c_void { storage::SecondaryColor3fv(v) }
#[inline] pub unsafe fn SecondaryColor3fvEXT(v: *GLfloat) -> c_void { storage::SecondaryColor3fvEXT(v) }
#[inline] pub fn SecondaryColor3hNV(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void { unsafe { storage::SecondaryColor3hNV(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3hvNV(v: *GLhalfNV) -> c_void { storage::SecondaryColor3hvNV(v) }
#[inline] pub fn SecondaryColor3i(red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { storage::SecondaryColor3i(red, green, blue) } }
#[inline] pub fn SecondaryColor3iEXT(red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { storage::SecondaryColor3iEXT(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3iv(v: *GLint) -> c_void { storage::SecondaryColor3iv(v) }
#[inline] pub unsafe fn SecondaryColor3ivEXT(v: *GLint) -> c_void { storage::SecondaryColor3ivEXT(v) }
#[inline] pub fn SecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { storage::SecondaryColor3s(red, green, blue) } }
#[inline] pub fn SecondaryColor3sEXT(red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { storage::SecondaryColor3sEXT(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3sv(v: *GLshort) -> c_void { storage::SecondaryColor3sv(v) }
#[inline] pub unsafe fn SecondaryColor3svEXT(v: *GLshort) -> c_void { storage::SecondaryColor3svEXT(v) }
#[inline] pub fn SecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { storage::SecondaryColor3ub(red, green, blue) } }
#[inline] pub fn SecondaryColor3ubEXT(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { storage::SecondaryColor3ubEXT(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3ubv(v: *GLubyte) -> c_void { storage::SecondaryColor3ubv(v) }
#[inline] pub unsafe fn SecondaryColor3ubvEXT(v: *GLubyte) -> c_void { storage::SecondaryColor3ubvEXT(v) }
#[inline] pub fn SecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { storage::SecondaryColor3ui(red, green, blue) } }
#[inline] pub fn SecondaryColor3uiEXT(red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { storage::SecondaryColor3uiEXT(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3uiv(v: *GLuint) -> c_void { storage::SecondaryColor3uiv(v) }
#[inline] pub unsafe fn SecondaryColor3uivEXT(v: *GLuint) -> c_void { storage::SecondaryColor3uivEXT(v) }
#[inline] pub fn SecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { storage::SecondaryColor3us(red, green, blue) } }
#[inline] pub fn SecondaryColor3usEXT(red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { storage::SecondaryColor3usEXT(red, green, blue) } }
#[inline] pub unsafe fn SecondaryColor3usv(v: *GLushort) -> c_void { storage::SecondaryColor3usv(v) }
#[inline] pub unsafe fn SecondaryColor3usvEXT(v: *GLushort) -> c_void { storage::SecondaryColor3usvEXT(v) }
#[inline] pub fn SecondaryColorFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::SecondaryColorFormatNV(size, type_, stride) } }
#[inline] pub fn SecondaryColorP3ui(type_: GLenum, color: GLuint) -> c_void { unsafe { storage::SecondaryColorP3ui(type_, color) } }
#[inline] pub fn SecondaryColorP3uiv(type_: GLenum, color: *GLuint) -> c_void { unsafe { storage::SecondaryColorP3uiv(type_, color) } }
#[inline] pub fn SecondaryColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::SecondaryColorPointer(size, type_, stride, pointer) } }
#[inline] pub fn SecondaryColorPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::SecondaryColorPointerEXT(size, type_, stride, pointer) } }
#[inline] pub fn SecondaryColorPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { storage::SecondaryColorPointerListIBM(size, type_, stride, pointer, ptrstride) } }
#[inline] pub fn SelectBuffer(size: GLsizei, buffer: *GLuint) -> c_void { unsafe { storage::SelectBuffer(size, buffer) } }
#[inline] pub fn SelectPerfMonitorCountersAMD(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) -> c_void { unsafe { storage::SelectPerfMonitorCountersAMD(monitor, enable, group, numCounters, counterList) } }
#[inline] pub fn SeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void { unsafe { storage::SeparableFilter2D(target, internalformat, width, height, format, type_, row, column) } }
#[inline] pub fn SeparableFilter2DEXT(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void { unsafe { storage::SeparableFilter2DEXT(target, internalformat, width, height, format, type_, row, column) } }
#[inline] pub fn SetFenceAPPLE(fence: GLuint) -> c_void { unsafe { storage::SetFenceAPPLE(fence) } }
#[inline] pub fn SetFenceNV(fence: GLuint, condition: GLenum) -> c_void { unsafe { storage::SetFenceNV(fence, condition) } }
#[inline] pub fn SetFragmentShaderConstantATI(dst: GLuint, value: *GLfloat) -> c_void { unsafe { storage::SetFragmentShaderConstantATI(dst, value) } }
#[inline] pub fn SetInvariantEXT(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void { unsafe { storage::SetInvariantEXT(id, type_, addr) } }
#[inline] pub fn SetLocalConstantEXT(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void { unsafe { storage::SetLocalConstantEXT(id, type_, addr) } }
#[inline] pub fn SetMultisamplefvAMD(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { unsafe { storage::SetMultisamplefvAMD(pname, index, val) } }
#[inline] pub fn ShadeModel(mode: GLenum) -> c_void { unsafe { storage::ShadeModel(mode) } }
#[inline] pub fn ShaderBinary(count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void { unsafe { storage::ShaderBinary(count, shaders, binaryformat, binary, length) } }
#[inline] pub fn ShaderOp1EXT(op: GLenum, res: GLuint, arg1: GLuint) -> c_void { unsafe { storage::ShaderOp1EXT(op, res, arg1) } }
#[inline] pub fn ShaderOp2EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) -> c_void { unsafe { storage::ShaderOp2EXT(op, res, arg1, arg2) } }
#[inline] pub fn ShaderOp3EXT(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) -> c_void { unsafe { storage::ShaderOp3EXT(op, res, arg1, arg2, arg3) } }
#[inline] pub fn ShaderSource(shader: GLuint, count: GLsizei, string: **GLchar, length: *GLint) -> c_void { unsafe { storage::ShaderSource(shader, count, string, length) } }
#[inline] pub fn ShaderSourceARB(shaderObj: GLhandleARB, count: GLsizei, string: **GLcharARB, length: *GLint) -> c_void { unsafe { storage::ShaderSourceARB(shaderObj, count, string, length) } }
#[inline] pub fn ShaderStorageBlockBinding(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> c_void { unsafe { storage::ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding) } }
#[inline] pub fn SharpenTexFuncSGIS(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void { unsafe { storage::SharpenTexFuncSGIS(target, n, points) } }
#[inline] pub fn SpriteParameterfSGIX(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::SpriteParameterfSGIX(pname, param) } }
#[inline] pub fn SpriteParameterfvSGIX(pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::SpriteParameterfvSGIX(pname, params) } }
#[inline] pub fn SpriteParameteriSGIX(pname: GLenum, param: GLint) -> c_void { unsafe { storage::SpriteParameteriSGIX(pname, param) } }
#[inline] pub fn SpriteParameterivSGIX(pname: GLenum, params: *GLint) -> c_void { unsafe { storage::SpriteParameterivSGIX(pname, params) } }
#[inline] pub unsafe fn StartInstrumentsSGIX() -> c_void { storage::StartInstrumentsSGIX() }
#[inline] pub fn StartTilingQCOM(x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) -> c_void { unsafe { storage::StartTilingQCOM(x, y, width, height, preserveMask) } }
#[inline] pub fn StencilClearTagEXT(stencilTagBits: GLsizei, stencilClearTag: GLuint) -> c_void { unsafe { storage::StencilClearTagEXT(stencilTagBits, stencilClearTag) } }
#[inline] pub fn StencilFillPathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { storage::StencilFillPathInstancedNV(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) } }
#[inline] pub fn StencilFillPathNV(path: GLuint, fillMode: GLenum, mask: GLuint) -> c_void { unsafe { storage::StencilFillPathNV(path, fillMode, mask) } }
#[inline] pub fn StencilFunc(func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { storage::StencilFunc(func, ref_, mask) } }
#[inline] pub fn StencilFuncSeparate(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { storage::StencilFuncSeparate(face, func, ref_, mask) } }
#[inline] pub fn StencilFuncSeparateATI(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { storage::StencilFuncSeparateATI(frontfunc, backfunc, ref_, mask) } }
#[inline] pub fn StencilMask(mask: GLuint) -> c_void { unsafe { storage::StencilMask(mask) } }
#[inline] pub fn StencilMaskSeparate(face: GLenum, mask: GLuint) -> c_void { unsafe { storage::StencilMaskSeparate(face, mask) } }
#[inline] pub fn StencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) -> c_void { unsafe { storage::StencilOp(fail, zfail, zpass) } }
#[inline] pub fn StencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void { unsafe { storage::StencilOpSeparate(face, sfail, dpfail, dppass) } }
#[inline] pub fn StencilOpSeparateATI(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void { unsafe { storage::StencilOpSeparateATI(face, sfail, dpfail, dppass) } }
#[inline] pub fn StencilOpValueAMD(face: GLenum, value: GLuint) -> c_void { unsafe { storage::StencilOpValueAMD(face, value) } }
#[inline] pub fn StencilStrokePathInstancedNV(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { storage::StencilStrokePathInstancedNV(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) } }
#[inline] pub fn StencilStrokePathNV(path: GLuint, reference: GLint, mask: GLuint) -> c_void { unsafe { storage::StencilStrokePathNV(path, reference, mask) } }
#[inline] pub fn StopInstrumentsSGIX(marker: GLint) -> c_void { unsafe { storage::StopInstrumentsSGIX(marker) } }
#[inline] pub fn StringMarkerGREMEDY(len: GLsizei, string: *GLvoid) -> c_void { unsafe { storage::StringMarkerGREMEDY(len, string) } }
#[inline] pub fn SwizzleEXT(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void { unsafe { storage::SwizzleEXT(res, in_, outX, outY, outZ, outW) } }
#[inline] pub fn SyncTextureINTEL(texture: GLuint) -> c_void { unsafe { storage::SyncTextureINTEL(texture) } }
#[inline] pub unsafe fn TagSampleBufferSGIX() -> c_void { storage::TagSampleBufferSGIX() }
#[inline] pub fn Tangent3bEXT(tx: GLbyte, ty: GLbyte, tz: GLbyte) -> c_void { unsafe { storage::Tangent3bEXT(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3bvEXT(v: *GLbyte) -> c_void { storage::Tangent3bvEXT(v) }
#[inline] pub fn Tangent3dEXT(tx: GLdouble, ty: GLdouble, tz: GLdouble) -> c_void { unsafe { storage::Tangent3dEXT(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3dvEXT(v: *GLdouble) -> c_void { storage::Tangent3dvEXT(v) }
#[inline] pub fn Tangent3fEXT(tx: GLfloat, ty: GLfloat, tz: GLfloat) -> c_void { unsafe { storage::Tangent3fEXT(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3fvEXT(v: *GLfloat) -> c_void { storage::Tangent3fvEXT(v) }
#[inline] pub fn Tangent3iEXT(tx: GLint, ty: GLint, tz: GLint) -> c_void { unsafe { storage::Tangent3iEXT(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3ivEXT(v: *GLint) -> c_void { storage::Tangent3ivEXT(v) }
#[inline] pub fn Tangent3sEXT(tx: GLshort, ty: GLshort, tz: GLshort) -> c_void { unsafe { storage::Tangent3sEXT(tx, ty, tz) } }
#[inline] pub unsafe fn Tangent3svEXT(v: *GLshort) -> c_void { storage::Tangent3svEXT(v) }
#[inline] pub fn TangentPointerEXT(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::TangentPointerEXT(type_, stride, pointer) } }
#[inline] pub fn TbufferMask3DFX(mask: GLuint) -> c_void { unsafe { storage::TbufferMask3DFX(mask) } }
#[inline] pub fn TessellationFactorAMD(factor: GLfloat) -> c_void { unsafe { storage::TessellationFactorAMD(factor) } }
#[inline] pub fn TessellationModeAMD(mode: GLenum) -> c_void { unsafe { storage::TessellationModeAMD(mode) } }
#[inline] pub fn TestFenceAPPLE(fence: GLuint) -> GLboolean { unsafe { storage::TestFenceAPPLE(fence) } }
#[inline] pub fn TestFenceNV(fence: GLuint) -> GLboolean { unsafe { storage::TestFenceNV(fence) } }
#[inline] pub fn TestObjectAPPLE(object: GLenum, name: GLuint) -> GLboolean { unsafe { storage::TestObjectAPPLE(object, name) } }
#[inline] pub fn TexBuffer(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { storage::TexBuffer(target, internalformat, buffer) } }
#[inline] pub fn TexBufferARB(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { storage::TexBufferARB(target, internalformat, buffer) } }
#[inline] pub fn TexBufferEXT(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { storage::TexBufferEXT(target, internalformat, buffer) } }
#[inline] pub fn TexBufferRange(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { storage::TexBufferRange(target, internalformat, buffer, offset, size) } }
#[inline] pub fn TexBumpParameterfvATI(pname: GLenum, param: *GLfloat) -> c_void { unsafe { storage::TexBumpParameterfvATI(pname, param) } }
#[inline] pub fn TexBumpParameterivATI(pname: GLenum, param: *GLint) -> c_void { unsafe { storage::TexBumpParameterivATI(pname, param) } }
#[inline] pub fn TexCoord1bOES(s: GLbyte) -> c_void { unsafe { storage::TexCoord1bOES(s) } }
#[inline] pub unsafe fn TexCoord1bvOES(coords: *GLbyte) -> c_void { storage::TexCoord1bvOES(coords) }
#[inline] pub fn TexCoord1d(s: GLdouble) -> c_void { unsafe { storage::TexCoord1d(s) } }
#[inline] pub unsafe fn TexCoord1dv(v: *GLdouble) -> c_void { storage::TexCoord1dv(v) }
#[inline] pub fn TexCoord1f(s: GLfloat) -> c_void { unsafe { storage::TexCoord1f(s) } }
#[inline] pub unsafe fn TexCoord1fv(v: *GLfloat) -> c_void { storage::TexCoord1fv(v) }
#[inline] pub fn TexCoord1hNV(s: GLhalfNV) -> c_void { unsafe { storage::TexCoord1hNV(s) } }
#[inline] pub unsafe fn TexCoord1hvNV(v: *GLhalfNV) -> c_void { storage::TexCoord1hvNV(v) }
#[inline] pub fn TexCoord1i(s: GLint) -> c_void { unsafe { storage::TexCoord1i(s) } }
#[inline] pub unsafe fn TexCoord1iv(v: *GLint) -> c_void { storage::TexCoord1iv(v) }
#[inline] pub fn TexCoord1s(s: GLshort) -> c_void { unsafe { storage::TexCoord1s(s) } }
#[inline] pub unsafe fn TexCoord1sv(v: *GLshort) -> c_void { storage::TexCoord1sv(v) }
#[inline] pub fn TexCoord1xOES(s: GLfixed) -> c_void { unsafe { storage::TexCoord1xOES(s) } }
#[inline] pub unsafe fn TexCoord1xvOES(coords: *GLfixed) -> c_void { storage::TexCoord1xvOES(coords) }
#[inline] pub fn TexCoord2bOES(s: GLbyte, t: GLbyte) -> c_void { unsafe { storage::TexCoord2bOES(s, t) } }
#[inline] pub unsafe fn TexCoord2bvOES(coords: *GLbyte) -> c_void { storage::TexCoord2bvOES(coords) }
#[inline] pub fn TexCoord2d(s: GLdouble, t: GLdouble) -> c_void { unsafe { storage::TexCoord2d(s, t) } }
#[inline] pub unsafe fn TexCoord2dv(v: *GLdouble) -> c_void { storage::TexCoord2dv(v) }
#[inline] pub fn TexCoord2f(s: GLfloat, t: GLfloat) -> c_void { unsafe { storage::TexCoord2f(s, t) } }
#[inline] pub fn TexCoord2fColor3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::TexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fColor3fVertex3fvSUN(tc: *GLfloat, c: *GLfloat, v: *GLfloat) -> c_void { storage::TexCoord2fColor3fVertex3fvSUN(tc, c, v) }
#[inline] pub fn TexCoord2fColor4fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::TexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fColor4fNormal3fVertex3fvSUN(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { storage::TexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v) }
#[inline] pub fn TexCoord2fColor4ubVertex3fSUN(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::TexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fColor4ubVertex3fvSUN(tc: *GLfloat, c: *GLubyte, v: *GLfloat) -> c_void { storage::TexCoord2fColor4ubVertex3fvSUN(tc, c, v) }
#[inline] pub fn TexCoord2fNormal3fVertex3fSUN(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::TexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fNormal3fVertex3fvSUN(tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { storage::TexCoord2fNormal3fVertex3fvSUN(tc, n, v) }
#[inline] pub fn TexCoord2fVertex3fSUN(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::TexCoord2fVertex3fSUN(s, t, x, y, z) } }
#[inline] pub unsafe fn TexCoord2fVertex3fvSUN(tc: *GLfloat, v: *GLfloat) -> c_void { storage::TexCoord2fVertex3fvSUN(tc, v) }
#[inline] pub unsafe fn TexCoord2fv(v: *GLfloat) -> c_void { storage::TexCoord2fv(v) }
#[inline] pub fn TexCoord2hNV(s: GLhalfNV, t: GLhalfNV) -> c_void { unsafe { storage::TexCoord2hNV(s, t) } }
#[inline] pub unsafe fn TexCoord2hvNV(v: *GLhalfNV) -> c_void { storage::TexCoord2hvNV(v) }
#[inline] pub fn TexCoord2i(s: GLint, t: GLint) -> c_void { unsafe { storage::TexCoord2i(s, t) } }
#[inline] pub unsafe fn TexCoord2iv(v: *GLint) -> c_void { storage::TexCoord2iv(v) }
#[inline] pub fn TexCoord2s(s: GLshort, t: GLshort) -> c_void { unsafe { storage::TexCoord2s(s, t) } }
#[inline] pub unsafe fn TexCoord2sv(v: *GLshort) -> c_void { storage::TexCoord2sv(v) }
#[inline] pub fn TexCoord2xOES(s: GLfixed, t: GLfixed) -> c_void { unsafe { storage::TexCoord2xOES(s, t) } }
#[inline] pub unsafe fn TexCoord2xvOES(coords: *GLfixed) -> c_void { storage::TexCoord2xvOES(coords) }
#[inline] pub fn TexCoord3bOES(s: GLbyte, t: GLbyte, r: GLbyte) -> c_void { unsafe { storage::TexCoord3bOES(s, t, r) } }
#[inline] pub unsafe fn TexCoord3bvOES(coords: *GLbyte) -> c_void { storage::TexCoord3bvOES(coords) }
#[inline] pub fn TexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { storage::TexCoord3d(s, t, r) } }
#[inline] pub unsafe fn TexCoord3dv(v: *GLdouble) -> c_void { storage::TexCoord3dv(v) }
#[inline] pub fn TexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { storage::TexCoord3f(s, t, r) } }
#[inline] pub unsafe fn TexCoord3fv(v: *GLfloat) -> c_void { storage::TexCoord3fv(v) }
#[inline] pub fn TexCoord3hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void { unsafe { storage::TexCoord3hNV(s, t, r) } }
#[inline] pub unsafe fn TexCoord3hvNV(v: *GLhalfNV) -> c_void { storage::TexCoord3hvNV(v) }
#[inline] pub fn TexCoord3i(s: GLint, t: GLint, r: GLint) -> c_void { unsafe { storage::TexCoord3i(s, t, r) } }
#[inline] pub unsafe fn TexCoord3iv(v: *GLint) -> c_void { storage::TexCoord3iv(v) }
#[inline] pub fn TexCoord3s(s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { storage::TexCoord3s(s, t, r) } }
#[inline] pub unsafe fn TexCoord3sv(v: *GLshort) -> c_void { storage::TexCoord3sv(v) }
#[inline] pub fn TexCoord3xOES(s: GLfixed, t: GLfixed, r: GLfixed) -> c_void { unsafe { storage::TexCoord3xOES(s, t, r) } }
#[inline] pub unsafe fn TexCoord3xvOES(coords: *GLfixed) -> c_void { storage::TexCoord3xvOES(coords) }
#[inline] pub fn TexCoord4bOES(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void { unsafe { storage::TexCoord4bOES(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4bvOES(coords: *GLbyte) -> c_void { storage::TexCoord4bvOES(coords) }
#[inline] pub fn TexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { storage::TexCoord4d(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4dv(v: *GLdouble) -> c_void { storage::TexCoord4dv(v) }
#[inline] pub fn TexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { storage::TexCoord4f(s, t, r, q) } }
#[inline] pub fn TexCoord4fColor4fNormal3fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::TexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) } }
#[inline] pub unsafe fn TexCoord4fColor4fNormal3fVertex4fvSUN(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { storage::TexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v) }
#[inline] pub fn TexCoord4fVertex4fSUN(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::TexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w) } }
#[inline] pub unsafe fn TexCoord4fVertex4fvSUN(tc: *GLfloat, v: *GLfloat) -> c_void { storage::TexCoord4fVertex4fvSUN(tc, v) }
#[inline] pub unsafe fn TexCoord4fv(v: *GLfloat) -> c_void { storage::TexCoord4fv(v) }
#[inline] pub fn TexCoord4hNV(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void { unsafe { storage::TexCoord4hNV(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4hvNV(v: *GLhalfNV) -> c_void { storage::TexCoord4hvNV(v) }
#[inline] pub fn TexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { storage::TexCoord4i(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4iv(v: *GLint) -> c_void { storage::TexCoord4iv(v) }
#[inline] pub fn TexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { storage::TexCoord4s(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4sv(v: *GLshort) -> c_void { storage::TexCoord4sv(v) }
#[inline] pub fn TexCoord4xOES(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { storage::TexCoord4xOES(s, t, r, q) } }
#[inline] pub unsafe fn TexCoord4xvOES(coords: *GLfixed) -> c_void { storage::TexCoord4xvOES(coords) }
#[inline] pub fn TexCoordFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::TexCoordFormatNV(size, type_, stride) } }
#[inline] pub fn TexCoordP1ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::TexCoordP1ui(type_, coords) } }
#[inline] pub fn TexCoordP1uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::TexCoordP1uiv(type_, coords) } }
#[inline] pub fn TexCoordP2ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::TexCoordP2ui(type_, coords) } }
#[inline] pub fn TexCoordP2uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::TexCoordP2uiv(type_, coords) } }
#[inline] pub fn TexCoordP3ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::TexCoordP3ui(type_, coords) } }
#[inline] pub fn TexCoordP3uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::TexCoordP3uiv(type_, coords) } }
#[inline] pub fn TexCoordP4ui(type_: GLenum, coords: GLuint) -> c_void { unsafe { storage::TexCoordP4ui(type_, coords) } }
#[inline] pub fn TexCoordP4uiv(type_: GLenum, coords: *GLuint) -> c_void { unsafe { storage::TexCoordP4uiv(type_, coords) } }
#[inline] pub fn TexCoordPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::TexCoordPointer(size, type_, stride, pointer) } }
#[inline] pub fn TexCoordPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::TexCoordPointerEXT(size, type_, stride, count, pointer) } }
#[inline] pub fn TexCoordPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { storage::TexCoordPointerListIBM(size, type_, stride, pointer, ptrstride) } }
#[inline] pub fn TexCoordPointervINTEL(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { unsafe { storage::TexCoordPointervINTEL(size, type_, pointer) } }
#[inline] pub fn TexEnvf(target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::TexEnvf(target, pname, param) } }
#[inline] pub fn TexEnvfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::TexEnvfv(target, pname, params) } }
#[inline] pub fn TexEnvi(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::TexEnvi(target, pname, param) } }
#[inline] pub fn TexEnviv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::TexEnviv(target, pname, params) } }
#[inline] pub fn TexEnvx(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::TexEnvx(target, pname, param) } }
#[inline] pub fn TexEnvxOES(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::TexEnvxOES(target, pname, param) } }
#[inline] pub fn TexEnvxv(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::TexEnvxv(target, pname, params) } }
#[inline] pub fn TexEnvxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::TexEnvxvOES(target, pname, params) } }
#[inline] pub fn TexFilterFuncSGIS(target: GLenum, filter: GLenum, n: GLsizei, weights: *GLfloat) -> c_void { unsafe { storage::TexFilterFuncSGIS(target, filter, n, weights) } }
#[inline] pub fn TexGend(coord: GLenum, pname: GLenum, param: GLdouble) -> c_void { unsafe { storage::TexGend(coord, pname, param) } }
#[inline] pub fn TexGendv(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::TexGendv(coord, pname, params) } }
#[inline] pub fn TexGenf(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::TexGenf(coord, pname, param) } }
#[inline] pub fn TexGenfOES(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::TexGenfOES(coord, pname, param) } }
#[inline] pub fn TexGenfv(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::TexGenfv(coord, pname, params) } }
#[inline] pub fn TexGenfvOES(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::TexGenfvOES(coord, pname, params) } }
#[inline] pub fn TexGeni(coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::TexGeni(coord, pname, param) } }
#[inline] pub fn TexGeniOES(coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::TexGeniOES(coord, pname, param) } }
#[inline] pub fn TexGeniv(coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::TexGeniv(coord, pname, params) } }
#[inline] pub fn TexGenivOES(coord: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::TexGenivOES(coord, pname, params) } }
#[inline] pub fn TexGenxOES(coord: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::TexGenxOES(coord, pname, param) } }
#[inline] pub fn TexGenxvOES(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::TexGenxvOES(coord, pname, params) } }
#[inline] pub fn TexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexImage1D(target, level, internalformat, width, border, format, type_, pixels) } }
#[inline] pub fn TexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexImage2D(target, level, internalformat, width, height, border, format, type_, pixels) } }
#[inline] pub fn TexImage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { storage::TexImage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) } }
#[inline] pub fn TexImage2DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { storage::TexImage2DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) } }
#[inline] pub fn TexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexImage3D(target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn TexImage3DEXT(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn TexImage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { storage::TexImage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
#[inline] pub fn TexImage3DMultisampleCoverageNV(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { storage::TexImage3DMultisampleCoverageNV(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) } }
#[inline] pub fn TexImage3DOES(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexImage3DOES(target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn TexImage4DSGIS(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type_, pixels) } }
#[inline] pub fn TexPageCommitmentARB(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void { unsafe { storage::TexPageCommitmentARB(target, level, xoffset, yoffset, zoffset, width, height, depth, resident) } }
#[inline] pub fn TexParameterIiv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::TexParameterIiv(target, pname, params) } }
#[inline] pub fn TexParameterIivEXT(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::TexParameterIivEXT(target, pname, params) } }
#[inline] pub fn TexParameterIuiv(target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::TexParameterIuiv(target, pname, params) } }
#[inline] pub fn TexParameterIuivEXT(target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::TexParameterIuivEXT(target, pname, params) } }
#[inline] pub fn TexParameterf(target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::TexParameterf(target, pname, param) } }
#[inline] pub fn TexParameterfv(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::TexParameterfv(target, pname, params) } }
#[inline] pub fn TexParameteri(target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::TexParameteri(target, pname, param) } }
#[inline] pub fn TexParameteriv(target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::TexParameteriv(target, pname, params) } }
#[inline] pub fn TexParameterx(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::TexParameterx(target, pname, param) } }
#[inline] pub fn TexParameterxOES(target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { storage::TexParameterxOES(target, pname, param) } }
#[inline] pub fn TexParameterxv(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::TexParameterxv(target, pname, params) } }
#[inline] pub fn TexParameterxvOES(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { unsafe { storage::TexParameterxvOES(target, pname, params) } }
#[inline] pub fn TexRenderbufferNV(target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::TexRenderbufferNV(target, renderbuffer) } }
#[inline] pub fn TexStorage1D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { storage::TexStorage1D(target, levels, internalformat, width) } }
#[inline] pub fn TexStorage1DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { storage::TexStorage1DEXT(target, levels, internalformat, width) } }
#[inline] pub fn TexStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::TexStorage2D(target, levels, internalformat, width, height) } }
#[inline] pub fn TexStorage2DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::TexStorage2DEXT(target, levels, internalformat, width, height) } }
#[inline] pub fn TexStorage2DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { storage::TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations) } }
#[inline] pub fn TexStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { storage::TexStorage3D(target, levels, internalformat, width, height, depth) } }
#[inline] pub fn TexStorage3DEXT(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { storage::TexStorage3DEXT(target, levels, internalformat, width, height, depth) } }
#[inline] pub fn TexStorage3DMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { storage::TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
#[inline] pub fn TexStorageSparseAMD(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void { unsafe { storage::TexStorageSparseAMD(target, internalFormat, width, height, depth, layers, flags) } }
#[inline] pub fn TexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexSubImage1D(target, level, xoffset, width, format, type_, pixels) } }
#[inline] pub fn TexSubImage1DEXT(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexSubImage1DEXT(target, level, xoffset, width, format, type_, pixels) } }
#[inline] pub fn TexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexSubImage2D(target, level, xoffset, yoffset, width, height, format, type_, pixels) } }
#[inline] pub fn TexSubImage2DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type_, pixels) } }
#[inline] pub fn TexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn TexSubImage3DEXT(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn TexSubImage3DOES(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexSubImage3DOES(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn TexSubImage4DSGIS(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type_, pixels) } }
#[inline] pub unsafe fn TextureBarrierNV() -> c_void { storage::TextureBarrierNV() }
#[inline] pub fn TextureBufferEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { storage::TextureBufferEXT(texture, target, internalformat, buffer) } }
#[inline] pub fn TextureBufferRangeEXT(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { storage::TextureBufferRangeEXT(texture, target, internalformat, buffer, offset, size) } }
#[inline] pub fn TextureColorMaskSGIS(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void { unsafe { storage::TextureColorMaskSGIS(red, green, blue, alpha) } }
#[inline] pub fn TextureImage1DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TextureImage1DEXT(texture, target, level, internalformat, width, border, format, type_, pixels) } }
#[inline] pub fn TextureImage2DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TextureImage2DEXT(texture, target, level, internalformat, width, height, border, format, type_, pixels) } }
#[inline] pub fn TextureImage2DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { storage::TextureImage2DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) } }
#[inline] pub fn TextureImage2DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { storage::TextureImage2DMultisampleNV(texture, target, samples, internalFormat, width, height, fixedSampleLocations) } }
#[inline] pub fn TextureImage3DEXT(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TextureImage3DEXT(texture, target, level, internalformat, width, height, depth, border, format, type_, pixels) } }
#[inline] pub fn TextureImage3DMultisampleCoverageNV(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { storage::TextureImage3DMultisampleCoverageNV(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) } }
#[inline] pub fn TextureImage3DMultisampleNV(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { storage::TextureImage3DMultisampleNV(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) } }
#[inline] pub fn TextureLightEXT(pname: GLenum) -> c_void { unsafe { storage::TextureLightEXT(pname) } }
#[inline] pub fn TextureMaterialEXT(face: GLenum, mode: GLenum) -> c_void { unsafe { storage::TextureMaterialEXT(face, mode) } }
#[inline] pub fn TextureNormalEXT(mode: GLenum) -> c_void { unsafe { storage::TextureNormalEXT(mode) } }
#[inline] pub fn TexturePageCommitmentEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void { unsafe { storage::TexturePageCommitmentEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, resident) } }
#[inline] pub fn TextureParameterIivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::TextureParameterIivEXT(texture, target, pname, params) } }
#[inline] pub fn TextureParameterIuivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { unsafe { storage::TextureParameterIuivEXT(texture, target, pname, params) } }
#[inline] pub fn TextureParameterfEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::TextureParameterfEXT(texture, target, pname, param) } }
#[inline] pub fn TextureParameterfvEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::TextureParameterfvEXT(texture, target, pname, params) } }
#[inline] pub fn TextureParameteriEXT(texture: GLuint, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { storage::TextureParameteriEXT(texture, target, pname, param) } }
#[inline] pub fn TextureParameterivEXT(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::TextureParameterivEXT(texture, target, pname, params) } }
#[inline] pub fn TextureRangeAPPLE(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::TextureRangeAPPLE(target, length, pointer) } }
#[inline] pub fn TextureRenderbufferEXT(texture: GLuint, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { storage::TextureRenderbufferEXT(texture, target, renderbuffer) } }
#[inline] pub fn TextureStorage1DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { storage::TextureStorage1DEXT(texture, target, levels, internalformat, width) } }
#[inline] pub fn TextureStorage2DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::TextureStorage2DEXT(texture, target, levels, internalformat, width, height) } }
#[inline] pub fn TextureStorage2DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { storage::TextureStorage2DMultisampleEXT(texture, target, samples, internalformat, width, height, fixedsamplelocations) } }
#[inline] pub fn TextureStorage3DEXT(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { storage::TextureStorage3DEXT(texture, target, levels, internalformat, width, height, depth) } }
#[inline] pub fn TextureStorage3DMultisampleEXT(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { storage::TextureStorage3DMultisampleEXT(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
#[inline] pub fn TextureStorageSparseAMD(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void { unsafe { storage::TextureStorageSparseAMD(texture, target, internalFormat, width, height, depth, layers, flags) } }
#[inline] pub fn TextureSubImage1DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TextureSubImage1DEXT(texture, target, level, xoffset, width, format, type_, pixels) } }
#[inline] pub fn TextureSubImage2DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TextureSubImage2DEXT(texture, target, level, xoffset, yoffset, width, height, format, type_, pixels) } }
#[inline] pub fn TextureSubImage3DEXT(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { unsafe { storage::TextureSubImage3DEXT(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) } }
#[inline] pub fn TextureView(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> c_void { unsafe { storage::TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) } }
#[inline] pub fn TrackMatrixNV(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) -> c_void { unsafe { storage::TrackMatrixNV(target, address, matrix, transform) } }
#[inline] pub fn TransformFeedbackAttribsNV(count: GLuint, attribs: *GLint, bufferMode: GLenum) -> c_void { unsafe { storage::TransformFeedbackAttribsNV(count, attribs, bufferMode) } }
#[inline] pub fn TransformFeedbackStreamAttribsNV(count: GLsizei, attribs: *GLint, nbuffers: GLsizei, bufstreams: *GLint, bufferMode: GLenum) -> c_void { unsafe { storage::TransformFeedbackStreamAttribsNV(count, attribs, nbuffers, bufstreams, bufferMode) } }
#[inline] pub fn TransformFeedbackVaryings(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void { unsafe { storage::TransformFeedbackVaryings(program, count, varyings, bufferMode) } }
#[inline] pub fn TransformFeedbackVaryingsEXT(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void { unsafe { storage::TransformFeedbackVaryingsEXT(program, count, varyings, bufferMode) } }
#[inline] pub fn TransformFeedbackVaryingsNV(program: GLuint, count: GLsizei, locations: *GLint, bufferMode: GLenum) -> c_void { unsafe { storage::TransformFeedbackVaryingsNV(program, count, locations, bufferMode) } }
#[inline] pub fn TransformPathNV(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { unsafe { storage::TransformPathNV(resultPath, srcPath, transformType, transformValues) } }
#[inline] pub fn Translated(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::Translated(x, y, z) } }
#[inline] pub fn Translatef(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::Translatef(x, y, z) } }
#[inline] pub fn Translatex(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { storage::Translatex(x, y, z) } }
#[inline] pub fn TranslatexOES(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { storage::TranslatexOES(x, y, z) } }
#[inline] pub fn Uniform1d(location: GLint, x: GLdouble) -> c_void { unsafe { storage::Uniform1d(location, x) } }
#[inline] pub fn Uniform1dv(location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::Uniform1dv(location, count, value) } }
#[inline] pub fn Uniform1f(location: GLint, v0: GLfloat) -> c_void { unsafe { storage::Uniform1f(location, v0) } }
#[inline] pub fn Uniform1fARB(location: GLint, v0: GLfloat) -> c_void { unsafe { storage::Uniform1fARB(location, v0) } }
#[inline] pub fn Uniform1fv(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::Uniform1fv(location, count, value) } }
#[inline] pub fn Uniform1fvARB(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::Uniform1fvARB(location, count, value) } }
#[inline] pub fn Uniform1i(location: GLint, v0: GLint) -> c_void { unsafe { storage::Uniform1i(location, v0) } }
#[inline] pub fn Uniform1i64NV(location: GLint, x: GLint64EXT) -> c_void { unsafe { storage::Uniform1i64NV(location, x) } }
#[inline] pub fn Uniform1i64vNV(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { storage::Uniform1i64vNV(location, count, value) } }
#[inline] pub fn Uniform1iARB(location: GLint, v0: GLint) -> c_void { unsafe { storage::Uniform1iARB(location, v0) } }
#[inline] pub fn Uniform1iv(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::Uniform1iv(location, count, value) } }
#[inline] pub fn Uniform1ivARB(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::Uniform1ivARB(location, count, value) } }
#[inline] pub fn Uniform1ui(location: GLint, v0: GLuint) -> c_void { unsafe { storage::Uniform1ui(location, v0) } }
#[inline] pub fn Uniform1ui64NV(location: GLint, x: GLuint64EXT) -> c_void { unsafe { storage::Uniform1ui64NV(location, x) } }
#[inline] pub fn Uniform1ui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::Uniform1ui64vNV(location, count, value) } }
#[inline] pub fn Uniform1uiEXT(location: GLint, v0: GLuint) -> c_void { unsafe { storage::Uniform1uiEXT(location, v0) } }
#[inline] pub fn Uniform1uiv(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::Uniform1uiv(location, count, value) } }
#[inline] pub fn Uniform1uivEXT(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::Uniform1uivEXT(location, count, value) } }
#[inline] pub fn Uniform2d(location: GLint, x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::Uniform2d(location, x, y) } }
#[inline] pub fn Uniform2dv(location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::Uniform2dv(location, count, value) } }
#[inline] pub fn Uniform2f(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { storage::Uniform2f(location, v0, v1) } }
#[inline] pub fn Uniform2fARB(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { storage::Uniform2fARB(location, v0, v1) } }
#[inline] pub fn Uniform2fv(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::Uniform2fv(location, count, value) } }
#[inline] pub fn Uniform2fvARB(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::Uniform2fvARB(location, count, value) } }
#[inline] pub fn Uniform2i(location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { storage::Uniform2i(location, v0, v1) } }
#[inline] pub fn Uniform2i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { storage::Uniform2i64NV(location, x, y) } }
#[inline] pub fn Uniform2i64vNV(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { storage::Uniform2i64vNV(location, count, value) } }
#[inline] pub fn Uniform2iARB(location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { storage::Uniform2iARB(location, v0, v1) } }
#[inline] pub fn Uniform2iv(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::Uniform2iv(location, count, value) } }
#[inline] pub fn Uniform2ivARB(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::Uniform2ivARB(location, count, value) } }
#[inline] pub fn Uniform2ui(location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { storage::Uniform2ui(location, v0, v1) } }
#[inline] pub fn Uniform2ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { storage::Uniform2ui64NV(location, x, y) } }
#[inline] pub fn Uniform2ui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::Uniform2ui64vNV(location, count, value) } }
#[inline] pub fn Uniform2uiEXT(location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { storage::Uniform2uiEXT(location, v0, v1) } }
#[inline] pub fn Uniform2uiv(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::Uniform2uiv(location, count, value) } }
#[inline] pub fn Uniform2uivEXT(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::Uniform2uivEXT(location, count, value) } }
#[inline] pub fn Uniform3d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::Uniform3d(location, x, y, z) } }
#[inline] pub fn Uniform3dv(location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::Uniform3dv(location, count, value) } }
#[inline] pub fn Uniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { storage::Uniform3f(location, v0, v1, v2) } }
#[inline] pub fn Uniform3fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { storage::Uniform3fARB(location, v0, v1, v2) } }
#[inline] pub fn Uniform3fv(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::Uniform3fv(location, count, value) } }
#[inline] pub fn Uniform3fvARB(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::Uniform3fvARB(location, count, value) } }
#[inline] pub fn Uniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { storage::Uniform3i(location, v0, v1, v2) } }
#[inline] pub fn Uniform3i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { storage::Uniform3i64NV(location, x, y, z) } }
#[inline] pub fn Uniform3i64vNV(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { storage::Uniform3i64vNV(location, count, value) } }
#[inline] pub fn Uniform3iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { storage::Uniform3iARB(location, v0, v1, v2) } }
#[inline] pub fn Uniform3iv(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::Uniform3iv(location, count, value) } }
#[inline] pub fn Uniform3ivARB(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::Uniform3ivARB(location, count, value) } }
#[inline] pub fn Uniform3ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { storage::Uniform3ui(location, v0, v1, v2) } }
#[inline] pub fn Uniform3ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { storage::Uniform3ui64NV(location, x, y, z) } }
#[inline] pub fn Uniform3ui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::Uniform3ui64vNV(location, count, value) } }
#[inline] pub fn Uniform3uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { storage::Uniform3uiEXT(location, v0, v1, v2) } }
#[inline] pub fn Uniform3uiv(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::Uniform3uiv(location, count, value) } }
#[inline] pub fn Uniform3uivEXT(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::Uniform3uivEXT(location, count, value) } }
#[inline] pub fn Uniform4d(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::Uniform4d(location, x, y, z, w) } }
#[inline] pub fn Uniform4dv(location: GLint, count: GLsizei, value: *GLdouble) -> c_void { unsafe { storage::Uniform4dv(location, count, value) } }
#[inline] pub fn Uniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { storage::Uniform4f(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4fARB(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { storage::Uniform4fARB(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4fv(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::Uniform4fv(location, count, value) } }
#[inline] pub fn Uniform4fvARB(location: GLint, count: GLsizei, value: *GLfloat) -> c_void { unsafe { storage::Uniform4fvARB(location, count, value) } }
#[inline] pub fn Uniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { storage::Uniform4i(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4i64NV(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { storage::Uniform4i64NV(location, x, y, z, w) } }
#[inline] pub fn Uniform4i64vNV(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { unsafe { storage::Uniform4i64vNV(location, count, value) } }
#[inline] pub fn Uniform4iARB(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { storage::Uniform4iARB(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4iv(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::Uniform4iv(location, count, value) } }
#[inline] pub fn Uniform4ivARB(location: GLint, count: GLsizei, value: *GLint) -> c_void { unsafe { storage::Uniform4ivARB(location, count, value) } }
#[inline] pub fn Uniform4ui(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { storage::Uniform4ui(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4ui64NV(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { storage::Uniform4ui64NV(location, x, y, z, w) } }
#[inline] pub fn Uniform4ui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::Uniform4ui64vNV(location, count, value) } }
#[inline] pub fn Uniform4uiEXT(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { storage::Uniform4uiEXT(location, v0, v1, v2, v3) } }
#[inline] pub fn Uniform4uiv(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::Uniform4uiv(location, count, value) } }
#[inline] pub fn Uniform4uivEXT(location: GLint, count: GLsizei, value: *GLuint) -> c_void { unsafe { storage::Uniform4uivEXT(location, count, value) } }
#[inline] pub fn UniformBlockBinding(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> c_void { unsafe { storage::UniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding) } }
#[inline] pub fn UniformBufferEXT(program: GLuint, location: GLint, buffer: GLuint) -> c_void { unsafe { storage::UniformBufferEXT(program, location, buffer) } }
#[inline] pub fn UniformHandleui64ARB(location: GLint, value: GLuint64) -> c_void { unsafe { storage::UniformHandleui64ARB(location, value) } }
#[inline] pub fn UniformHandleui64NV(location: GLint, value: GLuint64) -> c_void { unsafe { storage::UniformHandleui64NV(location, value) } }
#[inline] pub fn UniformHandleui64vARB(location: GLint, count: GLsizei, value: *GLuint64) -> c_void { unsafe { storage::UniformHandleui64vARB(location, count, value) } }
#[inline] pub fn UniformHandleui64vNV(location: GLint, count: GLsizei, value: *GLuint64) -> c_void { unsafe { storage::UniformHandleui64vNV(location, count, value) } }
#[inline] pub fn UniformMatrix2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix2dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix2fv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix2fvARB(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix2x3dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix2x3fv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix2x4dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix2x4fv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix3dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix3fv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix3fvARB(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix3x2dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix3x2fv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3x4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix3x4dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix3x4fv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix4dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix4fv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4fvARB(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix4fvARB(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4x2dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix4x2dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix4x2fv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4x3dv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { unsafe { storage::UniformMatrix4x3dv(location, count, transpose, value) } }
#[inline] pub fn UniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { unsafe { storage::UniformMatrix4x3fv(location, count, transpose, value) } }
#[inline] pub fn UniformSubroutinesuiv(shadertype: GLenum, count: GLsizei, indices: *GLuint) -> c_void { unsafe { storage::UniformSubroutinesuiv(shadertype, count, indices) } }
#[inline] pub fn Uniformui64NV(location: GLint, value: GLuint64EXT) -> c_void { unsafe { storage::Uniformui64NV(location, value) } }
#[inline] pub fn Uniformui64vNV(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { unsafe { storage::Uniformui64vNV(location, count, value) } }
#[inline] pub unsafe fn UnlockArraysEXT() -> c_void { storage::UnlockArraysEXT() }
#[inline] pub fn UnmapBuffer(target: GLenum) -> GLboolean { unsafe { storage::UnmapBuffer(target) } }
#[inline] pub fn UnmapBufferARB(target: GLenum) -> GLboolean { unsafe { storage::UnmapBufferARB(target) } }
#[inline] pub fn UnmapBufferOES(target: GLenum) -> GLboolean { unsafe { storage::UnmapBufferOES(target) } }
#[inline] pub fn UnmapNamedBufferEXT(buffer: GLuint) -> GLboolean { unsafe { storage::UnmapNamedBufferEXT(buffer) } }
#[inline] pub fn UnmapObjectBufferATI(buffer: GLuint) -> c_void { unsafe { storage::UnmapObjectBufferATI(buffer) } }
#[inline] pub fn UnmapTexture2DINTEL(texture: GLuint, level: GLint) -> c_void { unsafe { storage::UnmapTexture2DINTEL(texture, level) } }
#[inline] pub fn UpdateObjectBufferATI(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *GLvoid, preserve: GLenum) -> c_void { unsafe { storage::UpdateObjectBufferATI(buffer, offset, size, pointer, preserve) } }
#[inline] pub fn UseProgram(program: GLuint) -> c_void { unsafe { storage::UseProgram(program) } }
#[inline] pub fn UseProgramObjectARB(programObj: GLhandleARB) -> c_void { unsafe { storage::UseProgramObjectARB(programObj) } }
#[inline] pub fn UseProgramStages(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void { unsafe { storage::UseProgramStages(pipeline, stages, program) } }
#[inline] pub fn UseProgramStagesEXT(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void { unsafe { storage::UseProgramStagesEXT(pipeline, stages, program) } }
#[inline] pub fn UseShaderProgramEXT(type_: GLenum, program: GLuint) -> c_void { unsafe { storage::UseShaderProgramEXT(type_, program) } }
#[inline] pub unsafe fn VDPAUFiniNV() -> c_void { storage::VDPAUFiniNV() }
#[inline] pub fn VDPAUGetSurfaceivNV(surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { unsafe { storage::VDPAUGetSurfaceivNV(surface, pname, bufSize, length, values) } }
#[inline] pub unsafe fn VDPAUInitNV(vdpDevice: *GLvoid, getProcAddress: *GLvoid) -> c_void { storage::VDPAUInitNV(vdpDevice, getProcAddress) }
#[inline] pub fn VDPAUIsSurfaceNV(surface: GLvdpauSurfaceNV) -> c_void { unsafe { storage::VDPAUIsSurfaceNV(surface) } }
#[inline] pub fn VDPAUMapSurfacesNV(numSurfaces: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void { unsafe { storage::VDPAUMapSurfacesNV(numSurfaces, surfaces) } }
#[inline] pub fn VDPAURegisterOutputSurfaceNV(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV { unsafe { storage::VDPAURegisterOutputSurfaceNV(vdpSurface, target, numTextureNames, textureNames) } }
#[inline] pub fn VDPAURegisterVideoSurfaceNV(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV { unsafe { storage::VDPAURegisterVideoSurfaceNV(vdpSurface, target, numTextureNames, textureNames) } }
#[inline] pub fn VDPAUSurfaceAccessNV(surface: GLvdpauSurfaceNV, access: GLenum) -> c_void { unsafe { storage::VDPAUSurfaceAccessNV(surface, access) } }
#[inline] pub fn VDPAUUnmapSurfacesNV(numSurface: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void { unsafe { storage::VDPAUUnmapSurfacesNV(numSurface, surfaces) } }
#[inline] pub fn VDPAUUnregisterSurfaceNV(surface: GLvdpauSurfaceNV) -> c_void { unsafe { storage::VDPAUUnregisterSurfaceNV(surface) } }
#[inline] pub fn ValidateProgram(program: GLuint) -> c_void { unsafe { storage::ValidateProgram(program) } }
#[inline] pub fn ValidateProgramARB(programObj: GLhandleARB) -> c_void { unsafe { storage::ValidateProgramARB(programObj) } }
#[inline] pub fn ValidateProgramPipeline(pipeline: GLuint) -> c_void { unsafe { storage::ValidateProgramPipeline(pipeline) } }
#[inline] pub fn ValidateProgramPipelineEXT(pipeline: GLuint) -> c_void { unsafe { storage::ValidateProgramPipelineEXT(pipeline) } }
#[inline] pub fn VariantArrayObjectATI(id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { storage::VariantArrayObjectATI(id, type_, stride, buffer, offset) } }
#[inline] pub fn VariantPointerEXT(id: GLuint, type_: GLenum, stride: GLuint, addr: *GLvoid) -> c_void { unsafe { storage::VariantPointerEXT(id, type_, stride, addr) } }
#[inline] pub fn VariantbvEXT(id: GLuint, addr: *GLbyte) -> c_void { unsafe { storage::VariantbvEXT(id, addr) } }
#[inline] pub fn VariantdvEXT(id: GLuint, addr: *GLdouble) -> c_void { unsafe { storage::VariantdvEXT(id, addr) } }
#[inline] pub fn VariantfvEXT(id: GLuint, addr: *GLfloat) -> c_void { unsafe { storage::VariantfvEXT(id, addr) } }
#[inline] pub fn VariantivEXT(id: GLuint, addr: *GLint) -> c_void { unsafe { storage::VariantivEXT(id, addr) } }
#[inline] pub fn VariantsvEXT(id: GLuint, addr: *GLshort) -> c_void { unsafe { storage::VariantsvEXT(id, addr) } }
#[inline] pub fn VariantubvEXT(id: GLuint, addr: *GLubyte) -> c_void { unsafe { storage::VariantubvEXT(id, addr) } }
#[inline] pub fn VariantuivEXT(id: GLuint, addr: *GLuint) -> c_void { unsafe { storage::VariantuivEXT(id, addr) } }
#[inline] pub fn VariantusvEXT(id: GLuint, addr: *GLushort) -> c_void { unsafe { storage::VariantusvEXT(id, addr) } }
#[inline] pub fn Vertex2bOES(x: GLbyte) -> c_void { unsafe { storage::Vertex2bOES(x) } }
#[inline] pub unsafe fn Vertex2bvOES(coords: *GLbyte) -> c_void { storage::Vertex2bvOES(coords) }
#[inline] pub fn Vertex2d(x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::Vertex2d(x, y) } }
#[inline] pub unsafe fn Vertex2dv(v: *GLdouble) -> c_void { storage::Vertex2dv(v) }
#[inline] pub fn Vertex2f(x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::Vertex2f(x, y) } }
#[inline] pub unsafe fn Vertex2fv(v: *GLfloat) -> c_void { storage::Vertex2fv(v) }
#[inline] pub fn Vertex2hNV(x: GLhalfNV, y: GLhalfNV) -> c_void { unsafe { storage::Vertex2hNV(x, y) } }
#[inline] pub unsafe fn Vertex2hvNV(v: *GLhalfNV) -> c_void { storage::Vertex2hvNV(v) }
#[inline] pub fn Vertex2i(x: GLint, y: GLint) -> c_void { unsafe { storage::Vertex2i(x, y) } }
#[inline] pub unsafe fn Vertex2iv(v: *GLint) -> c_void { storage::Vertex2iv(v) }
#[inline] pub fn Vertex2s(x: GLshort, y: GLshort) -> c_void { unsafe { storage::Vertex2s(x, y) } }
#[inline] pub unsafe fn Vertex2sv(v: *GLshort) -> c_void { storage::Vertex2sv(v) }
#[inline] pub fn Vertex2xOES(x: GLfixed) -> c_void { unsafe { storage::Vertex2xOES(x) } }
#[inline] pub unsafe fn Vertex2xvOES(coords: *GLfixed) -> c_void { storage::Vertex2xvOES(coords) }
#[inline] pub fn Vertex3bOES(x: GLbyte, y: GLbyte) -> c_void { unsafe { storage::Vertex3bOES(x, y) } }
#[inline] pub unsafe fn Vertex3bvOES(coords: *GLbyte) -> c_void { storage::Vertex3bvOES(coords) }
#[inline] pub fn Vertex3d(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::Vertex3d(x, y, z) } }
#[inline] pub unsafe fn Vertex3dv(v: *GLdouble) -> c_void { storage::Vertex3dv(v) }
#[inline] pub fn Vertex3f(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::Vertex3f(x, y, z) } }
#[inline] pub unsafe fn Vertex3fv(v: *GLfloat) -> c_void { storage::Vertex3fv(v) }
#[inline] pub fn Vertex3hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void { unsafe { storage::Vertex3hNV(x, y, z) } }
#[inline] pub unsafe fn Vertex3hvNV(v: *GLhalfNV) -> c_void { storage::Vertex3hvNV(v) }
#[inline] pub fn Vertex3i(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { storage::Vertex3i(x, y, z) } }
#[inline] pub unsafe fn Vertex3iv(v: *GLint) -> c_void { storage::Vertex3iv(v) }
#[inline] pub fn Vertex3s(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::Vertex3s(x, y, z) } }
#[inline] pub unsafe fn Vertex3sv(v: *GLshort) -> c_void { storage::Vertex3sv(v) }
#[inline] pub fn Vertex3xOES(x: GLfixed, y: GLfixed) -> c_void { unsafe { storage::Vertex3xOES(x, y) } }
#[inline] pub unsafe fn Vertex3xvOES(coords: *GLfixed) -> c_void { storage::Vertex3xvOES(coords) }
#[inline] pub fn Vertex4bOES(x: GLbyte, y: GLbyte, z: GLbyte) -> c_void { unsafe { storage::Vertex4bOES(x, y, z) } }
#[inline] pub unsafe fn Vertex4bvOES(coords: *GLbyte) -> c_void { storage::Vertex4bvOES(coords) }
#[inline] pub fn Vertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::Vertex4d(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4dv(v: *GLdouble) -> c_void { storage::Vertex4dv(v) }
#[inline] pub fn Vertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::Vertex4f(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4fv(v: *GLfloat) -> c_void { storage::Vertex4fv(v) }
#[inline] pub fn Vertex4hNV(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void { unsafe { storage::Vertex4hNV(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4hvNV(v: *GLhalfNV) -> c_void { storage::Vertex4hvNV(v) }
#[inline] pub fn Vertex4i(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::Vertex4i(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4iv(v: *GLint) -> c_void { storage::Vertex4iv(v) }
#[inline] pub fn Vertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { storage::Vertex4s(x, y, z, w) } }
#[inline] pub unsafe fn Vertex4sv(v: *GLshort) -> c_void { storage::Vertex4sv(v) }
#[inline] pub fn Vertex4xOES(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { storage::Vertex4xOES(x, y, z) } }
#[inline] pub unsafe fn Vertex4xvOES(coords: *GLfixed) -> c_void { storage::Vertex4xvOES(coords) }
#[inline] pub fn VertexArrayBindVertexBufferEXT(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void { unsafe { storage::VertexArrayBindVertexBufferEXT(vaobj, bindingindex, buffer, offset, stride) } }
#[inline] pub fn VertexArrayColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayColorOffsetEXT(vaobj, buffer, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayEdgeFlagOffsetEXT(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayEdgeFlagOffsetEXT(vaobj, buffer, stride, offset) } }
#[inline] pub fn VertexArrayFogCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayFogCoordOffsetEXT(vaobj, buffer, type_, stride, offset) } }
#[inline] pub fn VertexArrayIndexOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayIndexOffsetEXT(vaobj, buffer, type_, stride, offset) } }
#[inline] pub fn VertexArrayMultiTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayMultiTexCoordOffsetEXT(vaobj, buffer, texunit, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayNormalOffsetEXT(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayNormalOffsetEXT(vaobj, buffer, type_, stride, offset) } }
#[inline] pub fn VertexArrayParameteriAPPLE(pname: GLenum, param: GLint) -> c_void { unsafe { storage::VertexArrayParameteriAPPLE(pname, param) } }
#[inline] pub fn VertexArrayRangeAPPLE(length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexArrayRangeAPPLE(length, pointer) } }
#[inline] pub fn VertexArrayRangeNV(length: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexArrayRangeNV(length, pointer) } }
#[inline] pub fn VertexArraySecondaryColorOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArraySecondaryColorOffsetEXT(vaobj, buffer, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayTexCoordOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayTexCoordOffsetEXT(vaobj, buffer, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayVertexAttribBindingEXT(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> c_void { unsafe { storage::VertexArrayVertexAttribBindingEXT(vaobj, attribindex, bindingindex) } }
#[inline] pub fn VertexArrayVertexAttribFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void { unsafe { storage::VertexArrayVertexAttribFormatEXT(vaobj, attribindex, size, type_, normalized, relativeoffset) } }
#[inline] pub fn VertexArrayVertexAttribIFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { storage::VertexArrayVertexAttribIFormatEXT(vaobj, attribindex, size, type_, relativeoffset) } }
#[inline] pub fn VertexArrayVertexAttribIOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayVertexAttribIOffsetEXT(vaobj, buffer, index, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayVertexAttribLFormatEXT(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { storage::VertexArrayVertexAttribLFormatEXT(vaobj, attribindex, size, type_, relativeoffset) } }
#[inline] pub fn VertexArrayVertexAttribLOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayVertexAttribLOffsetEXT(vaobj, buffer, index, size, type_, stride, offset) } }
#[inline] pub fn VertexArrayVertexAttribOffsetEXT(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayVertexAttribOffsetEXT(vaobj, buffer, index, size, type_, normalized, stride, offset) } }
#[inline] pub fn VertexArrayVertexBindingDivisorEXT(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> c_void { unsafe { storage::VertexArrayVertexBindingDivisorEXT(vaobj, bindingindex, divisor) } }
#[inline] pub fn VertexArrayVertexOffsetEXT(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { storage::VertexArrayVertexOffsetEXT(vaobj, buffer, size, type_, stride, offset) } }
#[inline] pub fn VertexAttrib1d(index: GLuint, x: GLdouble) -> c_void { unsafe { storage::VertexAttrib1d(index, x) } }
#[inline] pub fn VertexAttrib1dARB(index: GLuint, x: GLdouble) -> c_void { unsafe { storage::VertexAttrib1dARB(index, x) } }
#[inline] pub fn VertexAttrib1dNV(index: GLuint, x: GLdouble) -> c_void { unsafe { storage::VertexAttrib1dNV(index, x) } }
#[inline] pub fn VertexAttrib1dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib1dv(index, v) } }
#[inline] pub fn VertexAttrib1dvARB(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib1dvARB(index, v) } }
#[inline] pub fn VertexAttrib1dvNV(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib1dvNV(index, v) } }
#[inline] pub fn VertexAttrib1f(index: GLuint, x: GLfloat) -> c_void { unsafe { storage::VertexAttrib1f(index, x) } }
#[inline] pub fn VertexAttrib1fARB(index: GLuint, x: GLfloat) -> c_void { unsafe { storage::VertexAttrib1fARB(index, x) } }
#[inline] pub fn VertexAttrib1fNV(index: GLuint, x: GLfloat) -> c_void { unsafe { storage::VertexAttrib1fNV(index, x) } }
#[inline] pub fn VertexAttrib1fv(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib1fv(index, v) } }
#[inline] pub fn VertexAttrib1fvARB(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib1fvARB(index, v) } }
#[inline] pub fn VertexAttrib1fvNV(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib1fvNV(index, v) } }
#[inline] pub fn VertexAttrib1hNV(index: GLuint, x: GLhalfNV) -> c_void { unsafe { storage::VertexAttrib1hNV(index, x) } }
#[inline] pub fn VertexAttrib1hvNV(index: GLuint, v: *GLhalfNV) -> c_void { unsafe { storage::VertexAttrib1hvNV(index, v) } }
#[inline] pub fn VertexAttrib1s(index: GLuint, x: GLshort) -> c_void { unsafe { storage::VertexAttrib1s(index, x) } }
#[inline] pub fn VertexAttrib1sARB(index: GLuint, x: GLshort) -> c_void { unsafe { storage::VertexAttrib1sARB(index, x) } }
#[inline] pub fn VertexAttrib1sNV(index: GLuint, x: GLshort) -> c_void { unsafe { storage::VertexAttrib1sNV(index, x) } }
#[inline] pub fn VertexAttrib1sv(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib1sv(index, v) } }
#[inline] pub fn VertexAttrib1svARB(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib1svARB(index, v) } }
#[inline] pub fn VertexAttrib1svNV(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib1svNV(index, v) } }
#[inline] pub fn VertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::VertexAttrib2d(index, x, y) } }
#[inline] pub fn VertexAttrib2dARB(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::VertexAttrib2dARB(index, x, y) } }
#[inline] pub fn VertexAttrib2dNV(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::VertexAttrib2dNV(index, x, y) } }
#[inline] pub fn VertexAttrib2dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib2dv(index, v) } }
#[inline] pub fn VertexAttrib2dvARB(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib2dvARB(index, v) } }
#[inline] pub fn VertexAttrib2dvNV(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib2dvNV(index, v) } }
#[inline] pub fn VertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::VertexAttrib2f(index, x, y) } }
#[inline] pub fn VertexAttrib2fARB(index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::VertexAttrib2fARB(index, x, y) } }
#[inline] pub fn VertexAttrib2fNV(index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::VertexAttrib2fNV(index, x, y) } }
#[inline] pub fn VertexAttrib2fv(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib2fv(index, v) } }
#[inline] pub fn VertexAttrib2fvARB(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib2fvARB(index, v) } }
#[inline] pub fn VertexAttrib2fvNV(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib2fvNV(index, v) } }
#[inline] pub fn VertexAttrib2hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV) -> c_void { unsafe { storage::VertexAttrib2hNV(index, x, y) } }
#[inline] pub fn VertexAttrib2hvNV(index: GLuint, v: *GLhalfNV) -> c_void { unsafe { storage::VertexAttrib2hvNV(index, v) } }
#[inline] pub fn VertexAttrib2s(index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { storage::VertexAttrib2s(index, x, y) } }
#[inline] pub fn VertexAttrib2sARB(index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { storage::VertexAttrib2sARB(index, x, y) } }
#[inline] pub fn VertexAttrib2sNV(index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { storage::VertexAttrib2sNV(index, x, y) } }
#[inline] pub fn VertexAttrib2sv(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib2sv(index, v) } }
#[inline] pub fn VertexAttrib2svARB(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib2svARB(index, v) } }
#[inline] pub fn VertexAttrib2svNV(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib2svNV(index, v) } }
#[inline] pub fn VertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::VertexAttrib3d(index, x, y, z) } }
#[inline] pub fn VertexAttrib3dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::VertexAttrib3dARB(index, x, y, z) } }
#[inline] pub fn VertexAttrib3dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::VertexAttrib3dNV(index, x, y, z) } }
#[inline] pub fn VertexAttrib3dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib3dv(index, v) } }
#[inline] pub fn VertexAttrib3dvARB(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib3dvARB(index, v) } }
#[inline] pub fn VertexAttrib3dvNV(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib3dvNV(index, v) } }
#[inline] pub fn VertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::VertexAttrib3f(index, x, y, z) } }
#[inline] pub fn VertexAttrib3fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::VertexAttrib3fARB(index, x, y, z) } }
#[inline] pub fn VertexAttrib3fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::VertexAttrib3fNV(index, x, y, z) } }
#[inline] pub fn VertexAttrib3fv(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib3fv(index, v) } }
#[inline] pub fn VertexAttrib3fvARB(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib3fvARB(index, v) } }
#[inline] pub fn VertexAttrib3fvNV(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib3fvNV(index, v) } }
#[inline] pub fn VertexAttrib3hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void { unsafe { storage::VertexAttrib3hNV(index, x, y, z) } }
#[inline] pub fn VertexAttrib3hvNV(index: GLuint, v: *GLhalfNV) -> c_void { unsafe { storage::VertexAttrib3hvNV(index, v) } }
#[inline] pub fn VertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::VertexAttrib3s(index, x, y, z) } }
#[inline] pub fn VertexAttrib3sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::VertexAttrib3sARB(index, x, y, z) } }
#[inline] pub fn VertexAttrib3sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::VertexAttrib3sNV(index, x, y, z) } }
#[inline] pub fn VertexAttrib3sv(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib3sv(index, v) } }
#[inline] pub fn VertexAttrib3svARB(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib3svARB(index, v) } }
#[inline] pub fn VertexAttrib3svNV(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib3svNV(index, v) } }
#[inline] pub fn VertexAttrib4Nbv(index: GLuint, v: *GLbyte) -> c_void { unsafe { storage::VertexAttrib4Nbv(index, v) } }
#[inline] pub fn VertexAttrib4NbvARB(index: GLuint, v: *GLbyte) -> c_void { unsafe { storage::VertexAttrib4NbvARB(index, v) } }
#[inline] pub fn VertexAttrib4Niv(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttrib4Niv(index, v) } }
#[inline] pub fn VertexAttrib4NivARB(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttrib4NivARB(index, v) } }
#[inline] pub fn VertexAttrib4Nsv(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib4Nsv(index, v) } }
#[inline] pub fn VertexAttrib4NsvARB(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib4NsvARB(index, v) } }
#[inline] pub fn VertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { storage::VertexAttrib4Nub(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4NubARB(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { storage::VertexAttrib4NubARB(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4Nubv(index: GLuint, v: *GLubyte) -> c_void { unsafe { storage::VertexAttrib4Nubv(index, v) } }
#[inline] pub fn VertexAttrib4NubvARB(index: GLuint, v: *GLubyte) -> c_void { unsafe { storage::VertexAttrib4NubvARB(index, v) } }
#[inline] pub fn VertexAttrib4Nuiv(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttrib4Nuiv(index, v) } }
#[inline] pub fn VertexAttrib4NuivARB(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttrib4NuivARB(index, v) } }
#[inline] pub fn VertexAttrib4Nusv(index: GLuint, v: *GLushort) -> c_void { unsafe { storage::VertexAttrib4Nusv(index, v) } }
#[inline] pub fn VertexAttrib4NusvARB(index: GLuint, v: *GLushort) -> c_void { unsafe { storage::VertexAttrib4NusvARB(index, v) } }
#[inline] pub fn VertexAttrib4bv(index: GLuint, v: *GLbyte) -> c_void { unsafe { storage::VertexAttrib4bv(index, v) } }
#[inline] pub fn VertexAttrib4bvARB(index: GLuint, v: *GLbyte) -> c_void { unsafe { storage::VertexAttrib4bvARB(index, v) } }
#[inline] pub fn VertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::VertexAttrib4d(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4dARB(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::VertexAttrib4dARB(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4dNV(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::VertexAttrib4dNV(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib4dv(index, v) } }
#[inline] pub fn VertexAttrib4dvARB(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib4dvARB(index, v) } }
#[inline] pub fn VertexAttrib4dvNV(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttrib4dvNV(index, v) } }
#[inline] pub fn VertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::VertexAttrib4f(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4fARB(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::VertexAttrib4fARB(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4fNV(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::VertexAttrib4fNV(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4fv(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib4fv(index, v) } }
#[inline] pub fn VertexAttrib4fvARB(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib4fvARB(index, v) } }
#[inline] pub fn VertexAttrib4fvNV(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::VertexAttrib4fvNV(index, v) } }
#[inline] pub fn VertexAttrib4hNV(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void { unsafe { storage::VertexAttrib4hNV(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4hvNV(index: GLuint, v: *GLhalfNV) -> c_void { unsafe { storage::VertexAttrib4hvNV(index, v) } }
#[inline] pub fn VertexAttrib4iv(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttrib4iv(index, v) } }
#[inline] pub fn VertexAttrib4ivARB(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttrib4ivARB(index, v) } }
#[inline] pub fn VertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { storage::VertexAttrib4s(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4sARB(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { storage::VertexAttrib4sARB(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4sNV(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { storage::VertexAttrib4sNV(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4sv(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib4sv(index, v) } }
#[inline] pub fn VertexAttrib4svARB(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib4svARB(index, v) } }
#[inline] pub fn VertexAttrib4svNV(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttrib4svNV(index, v) } }
#[inline] pub fn VertexAttrib4ubNV(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { storage::VertexAttrib4ubNV(index, x, y, z, w) } }
#[inline] pub fn VertexAttrib4ubv(index: GLuint, v: *GLubyte) -> c_void { unsafe { storage::VertexAttrib4ubv(index, v) } }
#[inline] pub fn VertexAttrib4ubvARB(index: GLuint, v: *GLubyte) -> c_void { unsafe { storage::VertexAttrib4ubvARB(index, v) } }
#[inline] pub fn VertexAttrib4ubvNV(index: GLuint, v: *GLubyte) -> c_void { unsafe { storage::VertexAttrib4ubvNV(index, v) } }
#[inline] pub fn VertexAttrib4uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttrib4uiv(index, v) } }
#[inline] pub fn VertexAttrib4uivARB(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttrib4uivARB(index, v) } }
#[inline] pub fn VertexAttrib4usv(index: GLuint, v: *GLushort) -> c_void { unsafe { storage::VertexAttrib4usv(index, v) } }
#[inline] pub fn VertexAttrib4usvARB(index: GLuint, v: *GLushort) -> c_void { unsafe { storage::VertexAttrib4usvARB(index, v) } }
#[inline] pub fn VertexAttribArrayObjectATI(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { storage::VertexAttribArrayObjectATI(index, size, type_, normalized, stride, buffer, offset) } }
#[inline] pub fn VertexAttribBinding(attribindex: GLuint, bindingindex: GLuint) -> c_void { unsafe { storage::VertexAttribBinding(attribindex, bindingindex) } }
#[inline] pub fn VertexAttribDivisor(index: GLuint, divisor: GLuint) -> c_void { unsafe { storage::VertexAttribDivisor(index, divisor) } }
#[inline] pub fn VertexAttribDivisorANGLE(index: GLuint, divisor: GLuint) -> c_void { unsafe { storage::VertexAttribDivisorANGLE(index, divisor) } }
#[inline] pub fn VertexAttribDivisorARB(index: GLuint, divisor: GLuint) -> c_void { unsafe { storage::VertexAttribDivisorARB(index, divisor) } }
#[inline] pub fn VertexAttribDivisorNV(index: GLuint, divisor: GLuint) -> c_void { unsafe { storage::VertexAttribDivisorNV(index, divisor) } }
#[inline] pub fn VertexAttribFormat(attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void { unsafe { storage::VertexAttribFormat(attribindex, size, type_, normalized, relativeoffset) } }
#[inline] pub fn VertexAttribFormatNV(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) -> c_void { unsafe { storage::VertexAttribFormatNV(index, size, type_, normalized, stride) } }
#[inline] pub fn VertexAttribI1i(index: GLuint, x: GLint) -> c_void { unsafe { storage::VertexAttribI1i(index, x) } }
#[inline] pub fn VertexAttribI1iEXT(index: GLuint, x: GLint) -> c_void { unsafe { storage::VertexAttribI1iEXT(index, x) } }
#[inline] pub fn VertexAttribI1iv(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttribI1iv(index, v) } }
#[inline] pub fn VertexAttribI1ivEXT(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttribI1ivEXT(index, v) } }
#[inline] pub fn VertexAttribI1ui(index: GLuint, x: GLuint) -> c_void { unsafe { storage::VertexAttribI1ui(index, x) } }
#[inline] pub fn VertexAttribI1uiEXT(index: GLuint, x: GLuint) -> c_void { unsafe { storage::VertexAttribI1uiEXT(index, x) } }
#[inline] pub fn VertexAttribI1uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttribI1uiv(index, v) } }
#[inline] pub fn VertexAttribI1uivEXT(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttribI1uivEXT(index, v) } }
#[inline] pub fn VertexAttribI2i(index: GLuint, x: GLint, y: GLint) -> c_void { unsafe { storage::VertexAttribI2i(index, x, y) } }
#[inline] pub fn VertexAttribI2iEXT(index: GLuint, x: GLint, y: GLint) -> c_void { unsafe { storage::VertexAttribI2iEXT(index, x, y) } }
#[inline] pub fn VertexAttribI2iv(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttribI2iv(index, v) } }
#[inline] pub fn VertexAttribI2ivEXT(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttribI2ivEXT(index, v) } }
#[inline] pub fn VertexAttribI2ui(index: GLuint, x: GLuint, y: GLuint) -> c_void { unsafe { storage::VertexAttribI2ui(index, x, y) } }
#[inline] pub fn VertexAttribI2uiEXT(index: GLuint, x: GLuint, y: GLuint) -> c_void { unsafe { storage::VertexAttribI2uiEXT(index, x, y) } }
#[inline] pub fn VertexAttribI2uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttribI2uiv(index, v) } }
#[inline] pub fn VertexAttribI2uivEXT(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttribI2uivEXT(index, v) } }
#[inline] pub fn VertexAttribI3i(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { storage::VertexAttribI3i(index, x, y, z) } }
#[inline] pub fn VertexAttribI3iEXT(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { storage::VertexAttribI3iEXT(index, x, y, z) } }
#[inline] pub fn VertexAttribI3iv(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttribI3iv(index, v) } }
#[inline] pub fn VertexAttribI3ivEXT(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttribI3ivEXT(index, v) } }
#[inline] pub fn VertexAttribI3ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void { unsafe { storage::VertexAttribI3ui(index, x, y, z) } }
#[inline] pub fn VertexAttribI3uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void { unsafe { storage::VertexAttribI3uiEXT(index, x, y, z) } }
#[inline] pub fn VertexAttribI3uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttribI3uiv(index, v) } }
#[inline] pub fn VertexAttribI3uivEXT(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttribI3uivEXT(index, v) } }
#[inline] pub fn VertexAttribI4bv(index: GLuint, v: *GLbyte) -> c_void { unsafe { storage::VertexAttribI4bv(index, v) } }
#[inline] pub fn VertexAttribI4bvEXT(index: GLuint, v: *GLbyte) -> c_void { unsafe { storage::VertexAttribI4bvEXT(index, v) } }
#[inline] pub fn VertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::VertexAttribI4i(index, x, y, z, w) } }
#[inline] pub fn VertexAttribI4iEXT(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::VertexAttribI4iEXT(index, x, y, z, w) } }
#[inline] pub fn VertexAttribI4iv(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttribI4iv(index, v) } }
#[inline] pub fn VertexAttribI4ivEXT(index: GLuint, v: *GLint) -> c_void { unsafe { storage::VertexAttribI4ivEXT(index, v) } }
#[inline] pub fn VertexAttribI4sv(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttribI4sv(index, v) } }
#[inline] pub fn VertexAttribI4svEXT(index: GLuint, v: *GLshort) -> c_void { unsafe { storage::VertexAttribI4svEXT(index, v) } }
#[inline] pub fn VertexAttribI4ubv(index: GLuint, v: *GLubyte) -> c_void { unsafe { storage::VertexAttribI4ubv(index, v) } }
#[inline] pub fn VertexAttribI4ubvEXT(index: GLuint, v: *GLubyte) -> c_void { unsafe { storage::VertexAttribI4ubvEXT(index, v) } }
#[inline] pub fn VertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { storage::VertexAttribI4ui(index, x, y, z, w) } }
#[inline] pub fn VertexAttribI4uiEXT(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { storage::VertexAttribI4uiEXT(index, x, y, z, w) } }
#[inline] pub fn VertexAttribI4uiv(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttribI4uiv(index, v) } }
#[inline] pub fn VertexAttribI4uivEXT(index: GLuint, v: *GLuint) -> c_void { unsafe { storage::VertexAttribI4uivEXT(index, v) } }
#[inline] pub fn VertexAttribI4usv(index: GLuint, v: *GLushort) -> c_void { unsafe { storage::VertexAttribI4usv(index, v) } }
#[inline] pub fn VertexAttribI4usvEXT(index: GLuint, v: *GLushort) -> c_void { unsafe { storage::VertexAttribI4usvEXT(index, v) } }
#[inline] pub fn VertexAttribIFormat(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { storage::VertexAttribIFormat(attribindex, size, type_, relativeoffset) } }
#[inline] pub fn VertexAttribIFormatNV(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::VertexAttribIFormatNV(index, size, type_, stride) } }
#[inline] pub fn VertexAttribIPointer(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexAttribIPointer(index, size, type_, stride, pointer) } }
#[inline] pub fn VertexAttribIPointerEXT(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexAttribIPointerEXT(index, size, type_, stride, pointer) } }
#[inline] pub fn VertexAttribL1d(index: GLuint, x: GLdouble) -> c_void { unsafe { storage::VertexAttribL1d(index, x) } }
#[inline] pub fn VertexAttribL1dEXT(index: GLuint, x: GLdouble) -> c_void { unsafe { storage::VertexAttribL1dEXT(index, x) } }
#[inline] pub fn VertexAttribL1dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribL1dv(index, v) } }
#[inline] pub fn VertexAttribL1dvEXT(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribL1dvEXT(index, v) } }
#[inline] pub fn VertexAttribL1i64NV(index: GLuint, x: GLint64EXT) -> c_void { unsafe { storage::VertexAttribL1i64NV(index, x) } }
#[inline] pub fn VertexAttribL1i64vNV(index: GLuint, v: *GLint64EXT) -> c_void { unsafe { storage::VertexAttribL1i64vNV(index, v) } }
#[inline] pub fn VertexAttribL1ui64ARB(index: GLuint, x: GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL1ui64ARB(index, x) } }
#[inline] pub fn VertexAttribL1ui64NV(index: GLuint, x: GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL1ui64NV(index, x) } }
#[inline] pub fn VertexAttribL1ui64vARB(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL1ui64vARB(index, v) } }
#[inline] pub fn VertexAttribL1ui64vNV(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL1ui64vNV(index, v) } }
#[inline] pub fn VertexAttribL2d(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::VertexAttribL2d(index, x, y) } }
#[inline] pub fn VertexAttribL2dEXT(index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::VertexAttribL2dEXT(index, x, y) } }
#[inline] pub fn VertexAttribL2dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribL2dv(index, v) } }
#[inline] pub fn VertexAttribL2dvEXT(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribL2dvEXT(index, v) } }
#[inline] pub fn VertexAttribL2i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { storage::VertexAttribL2i64NV(index, x, y) } }
#[inline] pub fn VertexAttribL2i64vNV(index: GLuint, v: *GLint64EXT) -> c_void { unsafe { storage::VertexAttribL2i64vNV(index, v) } }
#[inline] pub fn VertexAttribL2ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL2ui64NV(index, x, y) } }
#[inline] pub fn VertexAttribL2ui64vNV(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL2ui64vNV(index, v) } }
#[inline] pub fn VertexAttribL3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::VertexAttribL3d(index, x, y, z) } }
#[inline] pub fn VertexAttribL3dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::VertexAttribL3dEXT(index, x, y, z) } }
#[inline] pub fn VertexAttribL3dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribL3dv(index, v) } }
#[inline] pub fn VertexAttribL3dvEXT(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribL3dvEXT(index, v) } }
#[inline] pub fn VertexAttribL3i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { storage::VertexAttribL3i64NV(index, x, y, z) } }
#[inline] pub fn VertexAttribL3i64vNV(index: GLuint, v: *GLint64EXT) -> c_void { unsafe { storage::VertexAttribL3i64vNV(index, v) } }
#[inline] pub fn VertexAttribL3ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL3ui64NV(index, x, y, z) } }
#[inline] pub fn VertexAttribL3ui64vNV(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL3ui64vNV(index, v) } }
#[inline] pub fn VertexAttribL4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::VertexAttribL4d(index, x, y, z, w) } }
#[inline] pub fn VertexAttribL4dEXT(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::VertexAttribL4dEXT(index, x, y, z, w) } }
#[inline] pub fn VertexAttribL4dv(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribL4dv(index, v) } }
#[inline] pub fn VertexAttribL4dvEXT(index: GLuint, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribL4dvEXT(index, v) } }
#[inline] pub fn VertexAttribL4i64NV(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { storage::VertexAttribL4i64NV(index, x, y, z, w) } }
#[inline] pub fn VertexAttribL4i64vNV(index: GLuint, v: *GLint64EXT) -> c_void { unsafe { storage::VertexAttribL4i64vNV(index, v) } }
#[inline] pub fn VertexAttribL4ui64NV(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL4ui64NV(index, x, y, z, w) } }
#[inline] pub fn VertexAttribL4ui64vNV(index: GLuint, v: *GLuint64EXT) -> c_void { unsafe { storage::VertexAttribL4ui64vNV(index, v) } }
#[inline] pub fn VertexAttribLFormat(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { storage::VertexAttribLFormat(attribindex, size, type_, relativeoffset) } }
#[inline] pub fn VertexAttribLFormatNV(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::VertexAttribLFormatNV(index, size, type_, stride) } }
#[inline] pub fn VertexAttribLPointer(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexAttribLPointer(index, size, type_, stride, pointer) } }
#[inline] pub fn VertexAttribLPointerEXT(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexAttribLPointerEXT(index, size, type_, stride, pointer) } }
#[inline] pub fn VertexAttribP1ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { storage::VertexAttribP1ui(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP1uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { unsafe { storage::VertexAttribP1uiv(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP2ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { storage::VertexAttribP2ui(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP2uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { unsafe { storage::VertexAttribP2uiv(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP3ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { storage::VertexAttribP3ui(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP3uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { unsafe { storage::VertexAttribP3uiv(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP4ui(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { storage::VertexAttribP4ui(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribP4uiv(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { unsafe { storage::VertexAttribP4uiv(index, type_, normalized, value) } }
#[inline] pub fn VertexAttribParameteriAMD(index: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { storage::VertexAttribParameteriAMD(index, pname, param) } }
#[inline] pub fn VertexAttribPointer(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexAttribPointer(index, size, type_, normalized, stride, pointer) } }
#[inline] pub fn VertexAttribPointerARB(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexAttribPointerARB(index, size, type_, normalized, stride, pointer) } }
#[inline] pub fn VertexAttribPointerNV(index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexAttribPointerNV(index, fsize, type_, stride, pointer) } }
#[inline] pub fn VertexAttribs1dvNV(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribs1dvNV(index, count, v) } }
#[inline] pub fn VertexAttribs1fvNV(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { storage::VertexAttribs1fvNV(index, count, v) } }
#[inline] pub fn VertexAttribs1hvNV(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { unsafe { storage::VertexAttribs1hvNV(index, n, v) } }
#[inline] pub fn VertexAttribs1svNV(index: GLuint, count: GLsizei, v: *GLshort) -> c_void { unsafe { storage::VertexAttribs1svNV(index, count, v) } }
#[inline] pub fn VertexAttribs2dvNV(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribs2dvNV(index, count, v) } }
#[inline] pub fn VertexAttribs2fvNV(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { storage::VertexAttribs2fvNV(index, count, v) } }
#[inline] pub fn VertexAttribs2hvNV(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { unsafe { storage::VertexAttribs2hvNV(index, n, v) } }
#[inline] pub fn VertexAttribs2svNV(index: GLuint, count: GLsizei, v: *GLshort) -> c_void { unsafe { storage::VertexAttribs2svNV(index, count, v) } }
#[inline] pub fn VertexAttribs3dvNV(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribs3dvNV(index, count, v) } }
#[inline] pub fn VertexAttribs3fvNV(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { storage::VertexAttribs3fvNV(index, count, v) } }
#[inline] pub fn VertexAttribs3hvNV(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { unsafe { storage::VertexAttribs3hvNV(index, n, v) } }
#[inline] pub fn VertexAttribs3svNV(index: GLuint, count: GLsizei, v: *GLshort) -> c_void { unsafe { storage::VertexAttribs3svNV(index, count, v) } }
#[inline] pub fn VertexAttribs4dvNV(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { unsafe { storage::VertexAttribs4dvNV(index, count, v) } }
#[inline] pub fn VertexAttribs4fvNV(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { storage::VertexAttribs4fvNV(index, count, v) } }
#[inline] pub fn VertexAttribs4hvNV(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { unsafe { storage::VertexAttribs4hvNV(index, n, v) } }
#[inline] pub fn VertexAttribs4svNV(index: GLuint, count: GLsizei, v: *GLshort) -> c_void { unsafe { storage::VertexAttribs4svNV(index, count, v) } }
#[inline] pub fn VertexAttribs4ubvNV(index: GLuint, count: GLsizei, v: *GLubyte) -> c_void { unsafe { storage::VertexAttribs4ubvNV(index, count, v) } }
#[inline] pub fn VertexBindingDivisor(bindingindex: GLuint, divisor: GLuint) -> c_void { unsafe { storage::VertexBindingDivisor(bindingindex, divisor) } }
#[inline] pub fn VertexBlendARB(count: GLint) -> c_void { unsafe { storage::VertexBlendARB(count) } }
#[inline] pub fn VertexBlendEnvfATI(pname: GLenum, param: GLfloat) -> c_void { unsafe { storage::VertexBlendEnvfATI(pname, param) } }
#[inline] pub fn VertexBlendEnviATI(pname: GLenum, param: GLint) -> c_void { unsafe { storage::VertexBlendEnviATI(pname, param) } }
#[inline] pub fn VertexFormatNV(size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { storage::VertexFormatNV(size, type_, stride) } }
#[inline] pub fn VertexP2ui(type_: GLenum, value: GLuint) -> c_void { unsafe { storage::VertexP2ui(type_, value) } }
#[inline] pub fn VertexP2uiv(type_: GLenum, value: *GLuint) -> c_void { unsafe { storage::VertexP2uiv(type_, value) } }
#[inline] pub fn VertexP3ui(type_: GLenum, value: GLuint) -> c_void { unsafe { storage::VertexP3ui(type_, value) } }
#[inline] pub fn VertexP3uiv(type_: GLenum, value: *GLuint) -> c_void { unsafe { storage::VertexP3uiv(type_, value) } }
#[inline] pub fn VertexP4ui(type_: GLenum, value: GLuint) -> c_void { unsafe { storage::VertexP4ui(type_, value) } }
#[inline] pub fn VertexP4uiv(type_: GLenum, value: *GLuint) -> c_void { unsafe { storage::VertexP4uiv(type_, value) } }
#[inline] pub fn VertexPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexPointer(size, type_, stride, pointer) } }
#[inline] pub fn VertexPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexPointerEXT(size, type_, stride, count, pointer) } }
#[inline] pub fn VertexPointerListIBM(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { unsafe { storage::VertexPointerListIBM(size, type_, stride, pointer, ptrstride) } }
#[inline] pub fn VertexPointervINTEL(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { unsafe { storage::VertexPointervINTEL(size, type_, pointer) } }
#[inline] pub fn VertexStream1dATI(stream: GLenum, x: GLdouble) -> c_void { unsafe { storage::VertexStream1dATI(stream, x) } }
#[inline] pub fn VertexStream1dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { storage::VertexStream1dvATI(stream, coords) } }
#[inline] pub fn VertexStream1fATI(stream: GLenum, x: GLfloat) -> c_void { unsafe { storage::VertexStream1fATI(stream, x) } }
#[inline] pub fn VertexStream1fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { storage::VertexStream1fvATI(stream, coords) } }
#[inline] pub fn VertexStream1iATI(stream: GLenum, x: GLint) -> c_void { unsafe { storage::VertexStream1iATI(stream, x) } }
#[inline] pub fn VertexStream1ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { storage::VertexStream1ivATI(stream, coords) } }
#[inline] pub fn VertexStream1sATI(stream: GLenum, x: GLshort) -> c_void { unsafe { storage::VertexStream1sATI(stream, x) } }
#[inline] pub fn VertexStream1svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { storage::VertexStream1svATI(stream, coords) } }
#[inline] pub fn VertexStream2dATI(stream: GLenum, x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::VertexStream2dATI(stream, x, y) } }
#[inline] pub fn VertexStream2dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { storage::VertexStream2dvATI(stream, coords) } }
#[inline] pub fn VertexStream2fATI(stream: GLenum, x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::VertexStream2fATI(stream, x, y) } }
#[inline] pub fn VertexStream2fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { storage::VertexStream2fvATI(stream, coords) } }
#[inline] pub fn VertexStream2iATI(stream: GLenum, x: GLint, y: GLint) -> c_void { unsafe { storage::VertexStream2iATI(stream, x, y) } }
#[inline] pub fn VertexStream2ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { storage::VertexStream2ivATI(stream, coords) } }
#[inline] pub fn VertexStream2sATI(stream: GLenum, x: GLshort, y: GLshort) -> c_void { unsafe { storage::VertexStream2sATI(stream, x, y) } }
#[inline] pub fn VertexStream2svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { storage::VertexStream2svATI(stream, coords) } }
#[inline] pub fn VertexStream3dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::VertexStream3dATI(stream, x, y, z) } }
#[inline] pub fn VertexStream3dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { storage::VertexStream3dvATI(stream, coords) } }
#[inline] pub fn VertexStream3fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::VertexStream3fATI(stream, x, y, z) } }
#[inline] pub fn VertexStream3fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { storage::VertexStream3fvATI(stream, coords) } }
#[inline] pub fn VertexStream3iATI(stream: GLenum, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { storage::VertexStream3iATI(stream, x, y, z) } }
#[inline] pub fn VertexStream3ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { storage::VertexStream3ivATI(stream, coords) } }
#[inline] pub fn VertexStream3sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::VertexStream3sATI(stream, x, y, z) } }
#[inline] pub fn VertexStream3svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { storage::VertexStream3svATI(stream, coords) } }
#[inline] pub fn VertexStream4dATI(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::VertexStream4dATI(stream, x, y, z, w) } }
#[inline] pub fn VertexStream4dvATI(stream: GLenum, coords: *GLdouble) -> c_void { unsafe { storage::VertexStream4dvATI(stream, coords) } }
#[inline] pub fn VertexStream4fATI(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::VertexStream4fATI(stream, x, y, z, w) } }
#[inline] pub fn VertexStream4fvATI(stream: GLenum, coords: *GLfloat) -> c_void { unsafe { storage::VertexStream4fvATI(stream, coords) } }
#[inline] pub fn VertexStream4iATI(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::VertexStream4iATI(stream, x, y, z, w) } }
#[inline] pub fn VertexStream4ivATI(stream: GLenum, coords: *GLint) -> c_void { unsafe { storage::VertexStream4ivATI(stream, coords) } }
#[inline] pub fn VertexStream4sATI(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { storage::VertexStream4sATI(stream, x, y, z, w) } }
#[inline] pub fn VertexStream4svATI(stream: GLenum, coords: *GLshort) -> c_void { unsafe { storage::VertexStream4svATI(stream, coords) } }
#[inline] pub fn VertexWeightPointerEXT(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::VertexWeightPointerEXT(size, type_, stride, pointer) } }
#[inline] pub fn VertexWeightfEXT(weight: GLfloat) -> c_void { unsafe { storage::VertexWeightfEXT(weight) } }
#[inline] pub unsafe fn VertexWeightfvEXT(weight: *GLfloat) -> c_void { storage::VertexWeightfvEXT(weight) }
#[inline] pub fn VertexWeighthNV(weight: GLhalfNV) -> c_void { unsafe { storage::VertexWeighthNV(weight) } }
#[inline] pub unsafe fn VertexWeighthvNV(weight: *GLhalfNV) -> c_void { storage::VertexWeighthvNV(weight) }
#[inline] pub fn VideoCaptureNV(video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) -> GLenum { unsafe { storage::VideoCaptureNV(video_capture_slot, sequence_num, capture_time) } }
#[inline] pub fn VideoCaptureStreamParameterdvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void { unsafe { storage::VideoCaptureStreamParameterdvNV(video_capture_slot, stream, pname, params) } }
#[inline] pub fn VideoCaptureStreamParameterfvNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void { unsafe { storage::VideoCaptureStreamParameterfvNV(video_capture_slot, stream, pname, params) } }
#[inline] pub fn VideoCaptureStreamParameterivNV(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void { unsafe { storage::VideoCaptureStreamParameterivNV(video_capture_slot, stream, pname, params) } }
#[inline] pub fn Viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { storage::Viewport(x, y, width, height) } }
#[inline] pub fn ViewportArrayv(first: GLuint, count: GLsizei, v: *GLfloat) -> c_void { unsafe { storage::ViewportArrayv(first, count, v) } }
#[inline] pub fn ViewportIndexedf(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> c_void { unsafe { storage::ViewportIndexedf(index, x, y, w, h) } }
#[inline] pub fn ViewportIndexedfv(index: GLuint, v: *GLfloat) -> c_void { unsafe { storage::ViewportIndexedfv(index, v) } }
#[inline] pub fn WaitSync(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void { unsafe { storage::WaitSync(sync, flags, timeout) } }
#[inline] pub fn WaitSyncAPPLE(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void { unsafe { storage::WaitSyncAPPLE(sync, flags, timeout) } }
#[inline] pub fn WeightPathsNV(resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) -> c_void { unsafe { storage::WeightPathsNV(resultPath, numPaths, paths, weights) } }
#[inline] pub fn WeightPointerARB(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::WeightPointerARB(size, type_, stride, pointer) } }
#[inline] pub fn WeightPointerOES(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { unsafe { storage::WeightPointerOES(size, type_, stride, pointer) } }
#[inline] pub fn WeightbvARB(size: GLint, weights: *GLbyte) -> c_void { unsafe { storage::WeightbvARB(size, weights) } }
#[inline] pub fn WeightdvARB(size: GLint, weights: *GLdouble) -> c_void { unsafe { storage::WeightdvARB(size, weights) } }
#[inline] pub fn WeightfvARB(size: GLint, weights: *GLfloat) -> c_void { unsafe { storage::WeightfvARB(size, weights) } }
#[inline] pub fn WeightivARB(size: GLint, weights: *GLint) -> c_void { unsafe { storage::WeightivARB(size, weights) } }
#[inline] pub fn WeightsvARB(size: GLint, weights: *GLshort) -> c_void { unsafe { storage::WeightsvARB(size, weights) } }
#[inline] pub fn WeightubvARB(size: GLint, weights: *GLubyte) -> c_void { unsafe { storage::WeightubvARB(size, weights) } }
#[inline] pub fn WeightuivARB(size: GLint, weights: *GLuint) -> c_void { unsafe { storage::WeightuivARB(size, weights) } }
#[inline] pub fn WeightusvARB(size: GLint, weights: *GLushort) -> c_void { unsafe { storage::WeightusvARB(size, weights) } }
#[inline] pub fn WindowPos2d(x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::WindowPos2d(x, y) } }
#[inline] pub fn WindowPos2dARB(x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::WindowPos2dARB(x, y) } }
#[inline] pub fn WindowPos2dMESA(x: GLdouble, y: GLdouble) -> c_void { unsafe { storage::WindowPos2dMESA(x, y) } }
#[inline] pub unsafe fn WindowPos2dv(v: *GLdouble) -> c_void { storage::WindowPos2dv(v) }
#[inline] pub unsafe fn WindowPos2dvARB(v: *GLdouble) -> c_void { storage::WindowPos2dvARB(v) }
#[inline] pub unsafe fn WindowPos2dvMESA(v: *GLdouble) -> c_void { storage::WindowPos2dvMESA(v) }
#[inline] pub fn WindowPos2f(x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::WindowPos2f(x, y) } }
#[inline] pub fn WindowPos2fARB(x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::WindowPos2fARB(x, y) } }
#[inline] pub fn WindowPos2fMESA(x: GLfloat, y: GLfloat) -> c_void { unsafe { storage::WindowPos2fMESA(x, y) } }
#[inline] pub unsafe fn WindowPos2fv(v: *GLfloat) -> c_void { storage::WindowPos2fv(v) }
#[inline] pub unsafe fn WindowPos2fvARB(v: *GLfloat) -> c_void { storage::WindowPos2fvARB(v) }
#[inline] pub unsafe fn WindowPos2fvMESA(v: *GLfloat) -> c_void { storage::WindowPos2fvMESA(v) }
#[inline] pub fn WindowPos2i(x: GLint, y: GLint) -> c_void { unsafe { storage::WindowPos2i(x, y) } }
#[inline] pub fn WindowPos2iARB(x: GLint, y: GLint) -> c_void { unsafe { storage::WindowPos2iARB(x, y) } }
#[inline] pub fn WindowPos2iMESA(x: GLint, y: GLint) -> c_void { unsafe { storage::WindowPos2iMESA(x, y) } }
#[inline] pub unsafe fn WindowPos2iv(v: *GLint) -> c_void { storage::WindowPos2iv(v) }
#[inline] pub unsafe fn WindowPos2ivARB(v: *GLint) -> c_void { storage::WindowPos2ivARB(v) }
#[inline] pub unsafe fn WindowPos2ivMESA(v: *GLint) -> c_void { storage::WindowPos2ivMESA(v) }
#[inline] pub fn WindowPos2s(x: GLshort, y: GLshort) -> c_void { unsafe { storage::WindowPos2s(x, y) } }
#[inline] pub fn WindowPos2sARB(x: GLshort, y: GLshort) -> c_void { unsafe { storage::WindowPos2sARB(x, y) } }
#[inline] pub fn WindowPos2sMESA(x: GLshort, y: GLshort) -> c_void { unsafe { storage::WindowPos2sMESA(x, y) } }
#[inline] pub unsafe fn WindowPos2sv(v: *GLshort) -> c_void { storage::WindowPos2sv(v) }
#[inline] pub unsafe fn WindowPos2svARB(v: *GLshort) -> c_void { storage::WindowPos2svARB(v) }
#[inline] pub unsafe fn WindowPos2svMESA(v: *GLshort) -> c_void { storage::WindowPos2svMESA(v) }
#[inline] pub fn WindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::WindowPos3d(x, y, z) } }
#[inline] pub fn WindowPos3dARB(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::WindowPos3dARB(x, y, z) } }
#[inline] pub fn WindowPos3dMESA(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { storage::WindowPos3dMESA(x, y, z) } }
#[inline] pub unsafe fn WindowPos3dv(v: *GLdouble) -> c_void { storage::WindowPos3dv(v) }
#[inline] pub unsafe fn WindowPos3dvARB(v: *GLdouble) -> c_void { storage::WindowPos3dvARB(v) }
#[inline] pub unsafe fn WindowPos3dvMESA(v: *GLdouble) -> c_void { storage::WindowPos3dvMESA(v) }
#[inline] pub fn WindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::WindowPos3f(x, y, z) } }
#[inline] pub fn WindowPos3fARB(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::WindowPos3fARB(x, y, z) } }
#[inline] pub fn WindowPos3fMESA(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { storage::WindowPos3fMESA(x, y, z) } }
#[inline] pub unsafe fn WindowPos3fv(v: *GLfloat) -> c_void { storage::WindowPos3fv(v) }
#[inline] pub unsafe fn WindowPos3fvARB(v: *GLfloat) -> c_void { storage::WindowPos3fvARB(v) }
#[inline] pub unsafe fn WindowPos3fvMESA(v: *GLfloat) -> c_void { storage::WindowPos3fvMESA(v) }
#[inline] pub fn WindowPos3i(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { storage::WindowPos3i(x, y, z) } }
#[inline] pub fn WindowPos3iARB(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { storage::WindowPos3iARB(x, y, z) } }
#[inline] pub fn WindowPos3iMESA(x: GLint, y: GLint, z: GLint) -> c_void { unsafe { storage::WindowPos3iMESA(x, y, z) } }
#[inline] pub unsafe fn WindowPos3iv(v: *GLint) -> c_void { storage::WindowPos3iv(v) }
#[inline] pub unsafe fn WindowPos3ivARB(v: *GLint) -> c_void { storage::WindowPos3ivARB(v) }
#[inline] pub unsafe fn WindowPos3ivMESA(v: *GLint) -> c_void { storage::WindowPos3ivMESA(v) }
#[inline] pub fn WindowPos3s(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::WindowPos3s(x, y, z) } }
#[inline] pub fn WindowPos3sARB(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::WindowPos3sARB(x, y, z) } }
#[inline] pub fn WindowPos3sMESA(x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { storage::WindowPos3sMESA(x, y, z) } }
#[inline] pub unsafe fn WindowPos3sv(v: *GLshort) -> c_void { storage::WindowPos3sv(v) }
#[inline] pub unsafe fn WindowPos3svARB(v: *GLshort) -> c_void { storage::WindowPos3svARB(v) }
#[inline] pub unsafe fn WindowPos3svMESA(v: *GLshort) -> c_void { storage::WindowPos3svMESA(v) }
#[inline] pub fn WindowPos4dMESA(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { storage::WindowPos4dMESA(x, y, z, w) } }
#[inline] pub unsafe fn WindowPos4dvMESA(v: *GLdouble) -> c_void { storage::WindowPos4dvMESA(v) }
#[inline] pub fn WindowPos4fMESA(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { storage::WindowPos4fMESA(x, y, z, w) } }
#[inline] pub unsafe fn WindowPos4fvMESA(v: *GLfloat) -> c_void { storage::WindowPos4fvMESA(v) }
#[inline] pub fn WindowPos4iMESA(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { storage::WindowPos4iMESA(x, y, z, w) } }
#[inline] pub unsafe fn WindowPos4ivMESA(v: *GLint) -> c_void { storage::WindowPos4ivMESA(v) }
#[inline] pub fn WindowPos4sMESA(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { storage::WindowPos4sMESA(x, y, z, w) } }
#[inline] pub unsafe fn WindowPos4svMESA(v: *GLshort) -> c_void { storage::WindowPos4svMESA(v) }
#[inline] pub fn WriteMaskEXT(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void { unsafe { storage::WriteMaskEXT(res, in_, outX, outY, outZ, outW) } }

mod storage {
    use std::libc::*;
    use super::types::*;
    
    pub static mut Accum: extern "C" fn(op: GLenum, value: GLfloat) -> c_void = super::failing::Accum;
    pub static mut AccumxOES: extern "C" fn(op: GLenum, value: GLfixed) -> c_void = super::failing::AccumxOES;
    pub static mut ActiveProgramEXT: extern "C" fn(program: GLuint) -> c_void = super::failing::ActiveProgramEXT;
    pub static mut ActiveShaderProgram: extern "C" fn(pipeline: GLuint, program: GLuint) -> c_void = super::failing::ActiveShaderProgram;
    pub static mut ActiveShaderProgramEXT: extern "C" fn(pipeline: GLuint, program: GLuint) -> c_void = super::failing::ActiveShaderProgramEXT;
    pub static mut ActiveStencilFaceEXT: extern "C" fn(face: GLenum) -> c_void = super::failing::ActiveStencilFaceEXT;
    pub static mut ActiveTexture: extern "C" fn(texture: GLenum) -> c_void = super::failing::ActiveTexture;
    pub static mut ActiveTextureARB: extern "C" fn(texture: GLenum) -> c_void = super::failing::ActiveTextureARB;
    pub static mut ActiveVaryingNV: extern "C" fn(program: GLuint, name: *GLchar) -> c_void = super::failing::ActiveVaryingNV;
    pub static mut AlphaFragmentOp1ATI: extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void = super::failing::AlphaFragmentOp1ATI;
    pub static mut AlphaFragmentOp2ATI: extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void = super::failing::AlphaFragmentOp2ATI;
    pub static mut AlphaFragmentOp3ATI: extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void = super::failing::AlphaFragmentOp3ATI;
    pub static mut AlphaFunc: extern "C" fn(func: GLenum, ref_: GLfloat) -> c_void = super::failing::AlphaFunc;
    pub static mut AlphaFuncQCOM: extern "C" fn(func: GLenum, ref_: GLclampf) -> c_void = super::failing::AlphaFuncQCOM;
    pub static mut AlphaFuncx: extern "C" fn(func: GLenum, ref_: GLfixed) -> c_void = super::failing::AlphaFuncx;
    pub static mut AlphaFuncxOES: extern "C" fn(func: GLenum, ref_: GLfixed) -> c_void = super::failing::AlphaFuncxOES;
    pub static mut ApplyTextureEXT: extern "C" fn(mode: GLenum) -> c_void = super::failing::ApplyTextureEXT;
    pub static mut AreProgramsResidentNV: extern "C" fn(n: GLsizei, programs: *GLuint, residences: *GLboolean) -> GLboolean = super::failing::AreProgramsResidentNV;
    pub static mut AreTexturesResident: extern "C" fn(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean = super::failing::AreTexturesResident;
    pub static mut AreTexturesResidentEXT: extern "C" fn(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean = super::failing::AreTexturesResidentEXT;
    pub static mut ArrayElement: extern "C" fn(i: GLint) -> c_void = super::failing::ArrayElement;
    pub static mut ArrayElementEXT: extern "C" fn(i: GLint) -> c_void = super::failing::ArrayElementEXT;
    pub static mut ArrayObjectATI: extern "C" fn(array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void = super::failing::ArrayObjectATI;
    pub static mut AsyncMarkerSGIX: extern "C" fn(marker: GLuint) -> c_void = super::failing::AsyncMarkerSGIX;
    pub static mut AttachObjectARB: extern "C" fn(containerObj: GLhandleARB, obj: GLhandleARB) -> c_void = super::failing::AttachObjectARB;
    pub static mut AttachShader: extern "C" fn(program: GLuint, shader: GLuint) -> c_void = super::failing::AttachShader;
    pub static mut Begin: extern "C" fn(mode: GLenum) -> c_void = super::failing::Begin;
    pub static mut BeginConditionalRender: extern "C" fn(id: GLuint, mode: GLenum) -> c_void = super::failing::BeginConditionalRender;
    pub static mut BeginConditionalRenderNV: extern "C" fn(id: GLuint, mode: GLenum) -> c_void = super::failing::BeginConditionalRenderNV;
    pub static mut BeginConditionalRenderNVX: extern "C" fn(id: GLuint) -> c_void = super::failing::BeginConditionalRenderNVX;
    pub static mut BeginFragmentShaderATI: extern "C" fn() -> c_void = super::failing::BeginFragmentShaderATI;
    pub static mut BeginOcclusionQueryNV: extern "C" fn(id: GLuint) -> c_void = super::failing::BeginOcclusionQueryNV;
    pub static mut BeginPerfMonitorAMD: extern "C" fn(monitor: GLuint) -> c_void = super::failing::BeginPerfMonitorAMD;
    pub static mut BeginQuery: extern "C" fn(target: GLenum, id: GLuint) -> c_void = super::failing::BeginQuery;
    pub static mut BeginQueryARB: extern "C" fn(target: GLenum, id: GLuint) -> c_void = super::failing::BeginQueryARB;
    pub static mut BeginQueryEXT: extern "C" fn(target: GLenum, id: GLuint) -> c_void = super::failing::BeginQueryEXT;
    pub static mut BeginQueryIndexed: extern "C" fn(target: GLenum, index: GLuint, id: GLuint) -> c_void = super::failing::BeginQueryIndexed;
    pub static mut BeginTransformFeedback: extern "C" fn(primitiveMode: GLenum) -> c_void = super::failing::BeginTransformFeedback;
    pub static mut BeginTransformFeedbackEXT: extern "C" fn(primitiveMode: GLenum) -> c_void = super::failing::BeginTransformFeedbackEXT;
    pub static mut BeginTransformFeedbackNV: extern "C" fn(primitiveMode: GLenum) -> c_void = super::failing::BeginTransformFeedbackNV;
    pub static mut BeginVertexShaderEXT: extern "C" fn() -> c_void = super::failing::BeginVertexShaderEXT;
    pub static mut BeginVideoCaptureNV: extern "C" fn(video_capture_slot: GLuint) -> c_void = super::failing::BeginVideoCaptureNV;
    pub static mut BindAttribLocation: extern "C" fn(program: GLuint, index: GLuint, name: *GLchar) -> c_void = super::failing::BindAttribLocation;
    pub static mut BindAttribLocationARB: extern "C" fn(programObj: GLhandleARB, index: GLuint, name: *GLcharARB) -> c_void = super::failing::BindAttribLocationARB;
    pub static mut BindBuffer: extern "C" fn(target: GLenum, buffer: GLuint) -> c_void = super::failing::BindBuffer;
    pub static mut BindBufferARB: extern "C" fn(target: GLenum, buffer: GLuint) -> c_void = super::failing::BindBufferARB;
    pub static mut BindBufferBase: extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void = super::failing::BindBufferBase;
    pub static mut BindBufferBaseEXT: extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void = super::failing::BindBufferBaseEXT;
    pub static mut BindBufferBaseNV: extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void = super::failing::BindBufferBaseNV;
    pub static mut BindBufferOffsetEXT: extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void = super::failing::BindBufferOffsetEXT;
    pub static mut BindBufferOffsetNV: extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void = super::failing::BindBufferOffsetNV;
    pub static mut BindBufferRange: extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void = super::failing::BindBufferRange;
    pub static mut BindBufferRangeEXT: extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void = super::failing::BindBufferRangeEXT;
    pub static mut BindBufferRangeNV: extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void = super::failing::BindBufferRangeNV;
    pub static mut BindBuffersBase: extern "C" fn(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) -> c_void = super::failing::BindBuffersBase;
    pub static mut BindBuffersRange: extern "C" fn(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) -> c_void = super::failing::BindBuffersRange;
    pub static mut BindFragDataLocation: extern "C" fn(program: GLuint, color: GLuint, name: *GLchar) -> c_void = super::failing::BindFragDataLocation;
    pub static mut BindFragDataLocationEXT: extern "C" fn(program: GLuint, color: GLuint, name: *GLchar) -> c_void = super::failing::BindFragDataLocationEXT;
    pub static mut BindFragDataLocationIndexed: extern "C" fn(program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) -> c_void = super::failing::BindFragDataLocationIndexed;
    pub static mut BindFragmentShaderATI: extern "C" fn(id: GLuint) -> c_void = super::failing::BindFragmentShaderATI;
    pub static mut BindFramebuffer: extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void = super::failing::BindFramebuffer;
    pub static mut BindFramebufferEXT: extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void = super::failing::BindFramebufferEXT;
    pub static mut BindFramebufferOES: extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void = super::failing::BindFramebufferOES;
    pub static mut BindImageTexture: extern "C" fn(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> c_void = super::failing::BindImageTexture;
    pub static mut BindImageTextureEXT: extern "C" fn(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) -> c_void = super::failing::BindImageTextureEXT;
    pub static mut BindImageTextures: extern "C" fn(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void = super::failing::BindImageTextures;
    pub static mut BindLightParameterEXT: extern "C" fn(light: GLenum, value: GLenum) -> GLuint = super::failing::BindLightParameterEXT;
    pub static mut BindMaterialParameterEXT: extern "C" fn(face: GLenum, value: GLenum) -> GLuint = super::failing::BindMaterialParameterEXT;
    pub static mut BindMultiTextureEXT: extern "C" fn(texunit: GLenum, target: GLenum, texture: GLuint) -> c_void = super::failing::BindMultiTextureEXT;
    pub static mut BindParameterEXT: extern "C" fn(value: GLenum) -> GLuint = super::failing::BindParameterEXT;
    pub static mut BindProgramARB: extern "C" fn(target: GLenum, program: GLuint) -> c_void = super::failing::BindProgramARB;
    pub static mut BindProgramNV: extern "C" fn(target: GLenum, id: GLuint) -> c_void = super::failing::BindProgramNV;
    pub static mut BindProgramPipeline: extern "C" fn(pipeline: GLuint) -> c_void = super::failing::BindProgramPipeline;
    pub static mut BindProgramPipelineEXT: extern "C" fn(pipeline: GLuint) -> c_void = super::failing::BindProgramPipelineEXT;
    pub static mut BindRenderbuffer: extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void = super::failing::BindRenderbuffer;
    pub static mut BindRenderbufferEXT: extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void = super::failing::BindRenderbufferEXT;
    pub static mut BindRenderbufferOES: extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void = super::failing::BindRenderbufferOES;
    pub static mut BindSampler: extern "C" fn(unit: GLuint, sampler: GLuint) -> c_void = super::failing::BindSampler;
    pub static mut BindSamplers: extern "C" fn(first: GLuint, count: GLsizei, samplers: *GLuint) -> c_void = super::failing::BindSamplers;
    pub static mut BindTexGenParameterEXT: extern "C" fn(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint = super::failing::BindTexGenParameterEXT;
    pub static mut BindTexture: extern "C" fn(target: GLenum, texture: GLuint) -> c_void = super::failing::BindTexture;
    pub static mut BindTextureEXT: extern "C" fn(target: GLenum, texture: GLuint) -> c_void = super::failing::BindTextureEXT;
    pub static mut BindTextureUnitParameterEXT: extern "C" fn(unit: GLenum, value: GLenum) -> GLuint = super::failing::BindTextureUnitParameterEXT;
    pub static mut BindTextures: extern "C" fn(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void = super::failing::BindTextures;
    pub static mut BindTransformFeedback: extern "C" fn(target: GLenum, id: GLuint) -> c_void = super::failing::BindTransformFeedback;
    pub static mut BindTransformFeedbackNV: extern "C" fn(target: GLenum, id: GLuint) -> c_void = super::failing::BindTransformFeedbackNV;
    pub static mut BindVertexArray: extern "C" fn(array: GLuint) -> c_void = super::failing::BindVertexArray;
    pub static mut BindVertexArrayAPPLE: extern "C" fn(array: GLuint) -> c_void = super::failing::BindVertexArrayAPPLE;
    pub static mut BindVertexArrayOES: extern "C" fn(array: GLuint) -> c_void = super::failing::BindVertexArrayOES;
    pub static mut BindVertexBuffer: extern "C" fn(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void = super::failing::BindVertexBuffer;
    pub static mut BindVertexBuffers: extern "C" fn(first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) -> c_void = super::failing::BindVertexBuffers;
    pub static mut BindVertexShaderEXT: extern "C" fn(id: GLuint) -> c_void = super::failing::BindVertexShaderEXT;
    pub static mut BindVideoCaptureStreamBufferNV: extern "C" fn(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) -> c_void = super::failing::BindVideoCaptureStreamBufferNV;
    pub static mut BindVideoCaptureStreamTextureNV: extern "C" fn(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) -> c_void = super::failing::BindVideoCaptureStreamTextureNV;
    pub static mut Binormal3bEXT: extern "C" fn(bx: GLbyte, by: GLbyte, bz: GLbyte) -> c_void = super::failing::Binormal3bEXT;
    pub static mut Binormal3bvEXT: extern "C" fn(v: *GLbyte) -> c_void = super::failing::Binormal3bvEXT;
    pub static mut Binormal3dEXT: extern "C" fn(bx: GLdouble, by: GLdouble, bz: GLdouble) -> c_void = super::failing::Binormal3dEXT;
    pub static mut Binormal3dvEXT: extern "C" fn(v: *GLdouble) -> c_void = super::failing::Binormal3dvEXT;
    pub static mut Binormal3fEXT: extern "C" fn(bx: GLfloat, by: GLfloat, bz: GLfloat) -> c_void = super::failing::Binormal3fEXT;
    pub static mut Binormal3fvEXT: extern "C" fn(v: *GLfloat) -> c_void = super::failing::Binormal3fvEXT;
    pub static mut Binormal3iEXT: extern "C" fn(bx: GLint, by: GLint, bz: GLint) -> c_void = super::failing::Binormal3iEXT;
    pub static mut Binormal3ivEXT: extern "C" fn(v: *GLint) -> c_void = super::failing::Binormal3ivEXT;
    pub static mut Binormal3sEXT: extern "C" fn(bx: GLshort, by: GLshort, bz: GLshort) -> c_void = super::failing::Binormal3sEXT;
    pub static mut Binormal3svEXT: extern "C" fn(v: *GLshort) -> c_void = super::failing::Binormal3svEXT;
    pub static mut BinormalPointerEXT: extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::BinormalPointerEXT;
    pub static mut Bitmap: extern "C" fn(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) -> c_void = super::failing::Bitmap;
    pub static mut BitmapxOES: extern "C" fn(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *GLubyte) -> c_void = super::failing::BitmapxOES;
    pub static mut BlendColor: extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void = super::failing::BlendColor;
    pub static mut BlendColorEXT: extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void = super::failing::BlendColorEXT;
    pub static mut BlendColorxOES: extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void = super::failing::BlendColorxOES;
    pub static mut BlendEquation: extern "C" fn(mode: GLenum) -> c_void = super::failing::BlendEquation;
    pub static mut BlendEquationEXT: extern "C" fn(mode: GLenum) -> c_void = super::failing::BlendEquationEXT;
    pub static mut BlendEquationIndexedAMD: extern "C" fn(buf: GLuint, mode: GLenum) -> c_void = super::failing::BlendEquationIndexedAMD;
    pub static mut BlendEquationOES: extern "C" fn(mode: GLenum) -> c_void = super::failing::BlendEquationOES;
    pub static mut BlendEquationSeparate: extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void = super::failing::BlendEquationSeparate;
    pub static mut BlendEquationSeparateEXT: extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void = super::failing::BlendEquationSeparateEXT;
    pub static mut BlendEquationSeparateIndexedAMD: extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void = super::failing::BlendEquationSeparateIndexedAMD;
    pub static mut BlendEquationSeparateOES: extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void = super::failing::BlendEquationSeparateOES;
    pub static mut BlendEquationSeparatei: extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void = super::failing::BlendEquationSeparatei;
    pub static mut BlendEquationSeparateiARB: extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void = super::failing::BlendEquationSeparateiARB;
    pub static mut BlendEquationi: extern "C" fn(buf: GLuint, mode: GLenum) -> c_void = super::failing::BlendEquationi;
    pub static mut BlendEquationiARB: extern "C" fn(buf: GLuint, mode: GLenum) -> c_void = super::failing::BlendEquationiARB;
    pub static mut BlendFunc: extern "C" fn(sfactor: GLenum, dfactor: GLenum) -> c_void = super::failing::BlendFunc;
    pub static mut BlendFuncIndexedAMD: extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void = super::failing::BlendFuncIndexedAMD;
    pub static mut BlendFuncSeparate: extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void = super::failing::BlendFuncSeparate;
    pub static mut BlendFuncSeparateEXT: extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void = super::failing::BlendFuncSeparateEXT;
    pub static mut BlendFuncSeparateINGR: extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void = super::failing::BlendFuncSeparateINGR;
    pub static mut BlendFuncSeparateIndexedAMD: extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void = super::failing::BlendFuncSeparateIndexedAMD;
    pub static mut BlendFuncSeparateOES: extern "C" fn(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void = super::failing::BlendFuncSeparateOES;
    pub static mut BlendFuncSeparatei: extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void = super::failing::BlendFuncSeparatei;
    pub static mut BlendFuncSeparateiARB: extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void = super::failing::BlendFuncSeparateiARB;
    pub static mut BlendFunci: extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void = super::failing::BlendFunci;
    pub static mut BlendFunciARB: extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void = super::failing::BlendFunciARB;
    pub static mut BlendParameteriNV: extern "C" fn(pname: GLenum, value: GLint) -> c_void = super::failing::BlendParameteriNV;
    pub static mut BlendBarrierNV: extern "C" fn() -> c_void = super::failing::BlendBarrierNV;
    pub static mut BlitFramebuffer: extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void = super::failing::BlitFramebuffer;
    pub static mut BlitFramebufferANGLE: extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void = super::failing::BlitFramebufferANGLE;
    pub static mut BlitFramebufferEXT: extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void = super::failing::BlitFramebufferEXT;
    pub static mut BlitFramebufferNV: extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void = super::failing::BlitFramebufferNV;
    pub static mut BufferAddressRangeNV: extern "C" fn(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) -> c_void = super::failing::BufferAddressRangeNV;
    pub static mut BufferData: extern "C" fn(target: GLenum, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void = super::failing::BufferData;
    pub static mut BufferDataARB: extern "C" fn(target: GLenum, size: GLsizeiptrARB, data: *GLvoid, usage: GLenum) -> c_void = super::failing::BufferDataARB;
    pub static mut BufferParameteriAPPLE: extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::BufferParameteriAPPLE;
    pub static mut BufferStorage: extern "C" fn(target: GLenum, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void = super::failing::BufferStorage;
    pub static mut BufferSubData: extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void = super::failing::BufferSubData;
    pub static mut BufferSubDataARB: extern "C" fn(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void = super::failing::BufferSubDataARB;
    pub static mut CallList: extern "C" fn(list: GLuint) -> c_void = super::failing::CallList;
    pub static mut CallLists: extern "C" fn(n: GLsizei, type_: GLenum, lists: *GLvoid) -> c_void = super::failing::CallLists;
    pub static mut CheckFramebufferStatus: extern "C" fn(target: GLenum) -> GLenum = super::failing::CheckFramebufferStatus;
    pub static mut CheckFramebufferStatusEXT: extern "C" fn(target: GLenum) -> GLenum = super::failing::CheckFramebufferStatusEXT;
    pub static mut CheckFramebufferStatusOES: extern "C" fn(target: GLenum) -> GLenum = super::failing::CheckFramebufferStatusOES;
    pub static mut CheckNamedFramebufferStatusEXT: extern "C" fn(framebuffer: GLuint, target: GLenum) -> GLenum = super::failing::CheckNamedFramebufferStatusEXT;
    pub static mut ClampColor: extern "C" fn(target: GLenum, clamp: GLenum) -> c_void = super::failing::ClampColor;
    pub static mut ClampColorARB: extern "C" fn(target: GLenum, clamp: GLenum) -> c_void = super::failing::ClampColorARB;
    pub static mut Clear: extern "C" fn(mask: GLbitfield) -> c_void = super::failing::Clear;
    pub static mut ClearAccum: extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void = super::failing::ClearAccum;
    pub static mut ClearAccumxOES: extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void = super::failing::ClearAccumxOES;
    pub static mut ClearBufferData: extern "C" fn(target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void = super::failing::ClearBufferData;
    pub static mut ClearBufferSubData: extern "C" fn(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *c_void) -> c_void = super::failing::ClearBufferSubData;
    pub static mut ClearBufferfi: extern "C" fn(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> c_void = super::failing::ClearBufferfi;
    pub static mut ClearBufferfv: extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> c_void = super::failing::ClearBufferfv;
    pub static mut ClearBufferiv: extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLint) -> c_void = super::failing::ClearBufferiv;
    pub static mut ClearBufferuiv: extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> c_void = super::failing::ClearBufferuiv;
    pub static mut ClearColor: extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void = super::failing::ClearColor;
    pub static mut ClearColorIiEXT: extern "C" fn(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void = super::failing::ClearColorIiEXT;
    pub static mut ClearColorIuiEXT: extern "C" fn(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void = super::failing::ClearColorIuiEXT;
    pub static mut ClearColorx: extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void = super::failing::ClearColorx;
    pub static mut ClearColorxOES: extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void = super::failing::ClearColorxOES;
    pub static mut ClearDepth: extern "C" fn(depth: GLdouble) -> c_void = super::failing::ClearDepth;
    pub static mut ClearDepthdNV: extern "C" fn(depth: GLdouble) -> c_void = super::failing::ClearDepthdNV;
    pub static mut ClearDepthf: extern "C" fn(d: GLfloat) -> c_void = super::failing::ClearDepthf;
    pub static mut ClearDepthfOES: extern "C" fn(depth: GLclampf) -> c_void = super::failing::ClearDepthfOES;
    pub static mut ClearDepthx: extern "C" fn(depth: GLfixed) -> c_void = super::failing::ClearDepthx;
    pub static mut ClearDepthxOES: extern "C" fn(depth: GLfixed) -> c_void = super::failing::ClearDepthxOES;
    pub static mut ClearIndex: extern "C" fn(c: GLfloat) -> c_void = super::failing::ClearIndex;
    pub static mut ClearNamedBufferDataEXT: extern "C" fn(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void = super::failing::ClearNamedBufferDataEXT;
    pub static mut ClearNamedBufferSubDataEXT: extern "C" fn(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, offset: GLsizeiptr, size: GLsizeiptr, data: *c_void) -> c_void = super::failing::ClearNamedBufferSubDataEXT;
    pub static mut ClearStencil: extern "C" fn(s: GLint) -> c_void = super::failing::ClearStencil;
    pub static mut ClearTexImage: extern "C" fn(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *c_void) -> c_void = super::failing::ClearTexImage;
    pub static mut ClearTexSubImage: extern "C" fn(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *c_void) -> c_void = super::failing::ClearTexSubImage;
    pub static mut ClientActiveTexture: extern "C" fn(texture: GLenum) -> c_void = super::failing::ClientActiveTexture;
    pub static mut ClientActiveTextureARB: extern "C" fn(texture: GLenum) -> c_void = super::failing::ClientActiveTextureARB;
    pub static mut ClientActiveVertexStreamATI: extern "C" fn(stream: GLenum) -> c_void = super::failing::ClientActiveVertexStreamATI;
    pub static mut ClientAttribDefaultEXT: extern "C" fn(mask: GLbitfield) -> c_void = super::failing::ClientAttribDefaultEXT;
    pub static mut ClientWaitSync: extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum = super::failing::ClientWaitSync;
    pub static mut ClientWaitSyncAPPLE: extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum = super::failing::ClientWaitSyncAPPLE;
    pub static mut ClipControlARB: extern "C" fn(origin: GLenum, depth: GLenum) -> c_void = super::failing::ClipControlARB;
    pub static mut ClipPlane: extern "C" fn(plane: GLenum, equation: *GLdouble) -> c_void = super::failing::ClipPlane;
    pub static mut ClipPlanef: extern "C" fn(p: GLenum, eqn: *GLfloat) -> c_void = super::failing::ClipPlanef;
    pub static mut ClipPlanefIMG: extern "C" fn(p: GLenum, eqn: *GLfloat) -> c_void = super::failing::ClipPlanefIMG;
    pub static mut ClipPlanefOES: extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void = super::failing::ClipPlanefOES;
    pub static mut ClipPlanex: extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void = super::failing::ClipPlanex;
    pub static mut ClipPlanexIMG: extern "C" fn(p: GLenum, eqn: *GLfixed) -> c_void = super::failing::ClipPlanexIMG;
    pub static mut ClipPlanexOES: extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void = super::failing::ClipPlanexOES;
    pub static mut Color3b: extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void = super::failing::Color3b;
    pub static mut Color3bv: extern "C" fn(v: *GLbyte) -> c_void = super::failing::Color3bv;
    pub static mut Color3d: extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void = super::failing::Color3d;
    pub static mut Color3dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::Color3dv;
    pub static mut Color3f: extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void = super::failing::Color3f;
    pub static mut Color3fVertex3fSUN: extern "C" fn(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::Color3fVertex3fSUN;
    pub static mut Color3fVertex3fvSUN: extern "C" fn(c: *GLfloat, v: *GLfloat) -> c_void = super::failing::Color3fVertex3fvSUN;
    pub static mut Color3fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::Color3fv;
    pub static mut Color3hNV: extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void = super::failing::Color3hNV;
    pub static mut Color3hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::Color3hvNV;
    pub static mut Color3i: extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void = super::failing::Color3i;
    pub static mut Color3iv: extern "C" fn(v: *GLint) -> c_void = super::failing::Color3iv;
    pub static mut Color3s: extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void = super::failing::Color3s;
    pub static mut Color3sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::Color3sv;
    pub static mut Color3ub: extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void = super::failing::Color3ub;
    pub static mut Color3ubv: extern "C" fn(v: *GLubyte) -> c_void = super::failing::Color3ubv;
    pub static mut Color3ui: extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void = super::failing::Color3ui;
    pub static mut Color3uiv: extern "C" fn(v: *GLuint) -> c_void = super::failing::Color3uiv;
    pub static mut Color3us: extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void = super::failing::Color3us;
    pub static mut Color3usv: extern "C" fn(v: *GLushort) -> c_void = super::failing::Color3usv;
    pub static mut Color3xOES: extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed) -> c_void = super::failing::Color3xOES;
    pub static mut Color3xvOES: extern "C" fn(components: *GLfixed) -> c_void = super::failing::Color3xvOES;
    pub static mut Color4b: extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> c_void = super::failing::Color4b;
    pub static mut Color4bv: extern "C" fn(v: *GLbyte) -> c_void = super::failing::Color4bv;
    pub static mut Color4d: extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> c_void = super::failing::Color4d;
    pub static mut Color4dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::Color4dv;
    pub static mut Color4f: extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void = super::failing::Color4f;
    pub static mut Color4fNormal3fVertex3fSUN: extern "C" fn(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::Color4fNormal3fVertex3fSUN;
    pub static mut Color4fNormal3fVertex3fvSUN: extern "C" fn(c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void = super::failing::Color4fNormal3fVertex3fvSUN;
    pub static mut Color4fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::Color4fv;
    pub static mut Color4hNV: extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) -> c_void = super::failing::Color4hNV;
    pub static mut Color4hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::Color4hvNV;
    pub static mut Color4i: extern "C" fn(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void = super::failing::Color4i;
    pub static mut Color4iv: extern "C" fn(v: *GLint) -> c_void = super::failing::Color4iv;
    pub static mut Color4s: extern "C" fn(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> c_void = super::failing::Color4s;
    pub static mut Color4sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::Color4sv;
    pub static mut Color4ub: extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> c_void = super::failing::Color4ub;
    pub static mut Color4ubVertex2fSUN: extern "C" fn(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) -> c_void = super::failing::Color4ubVertex2fSUN;
    pub static mut Color4ubVertex2fvSUN: extern "C" fn(c: *GLubyte, v: *GLfloat) -> c_void = super::failing::Color4ubVertex2fvSUN;
    pub static mut Color4ubVertex3fSUN: extern "C" fn(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::Color4ubVertex3fSUN;
    pub static mut Color4ubVertex3fvSUN: extern "C" fn(c: *GLubyte, v: *GLfloat) -> c_void = super::failing::Color4ubVertex3fvSUN;
    pub static mut Color4ubv: extern "C" fn(v: *GLubyte) -> c_void = super::failing::Color4ubv;
    pub static mut Color4ui: extern "C" fn(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void = super::failing::Color4ui;
    pub static mut Color4uiv: extern "C" fn(v: *GLuint) -> c_void = super::failing::Color4uiv;
    pub static mut Color4us: extern "C" fn(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> c_void = super::failing::Color4us;
    pub static mut Color4usv: extern "C" fn(v: *GLushort) -> c_void = super::failing::Color4usv;
    pub static mut Color4x: extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void = super::failing::Color4x;
    pub static mut Color4xOES: extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void = super::failing::Color4xOES;
    pub static mut Color4xvOES: extern "C" fn(components: *GLfixed) -> c_void = super::failing::Color4xvOES;
    pub static mut ColorFormatNV: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void = super::failing::ColorFormatNV;
    pub static mut ColorFragmentOp1ATI: extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void = super::failing::ColorFragmentOp1ATI;
    pub static mut ColorFragmentOp2ATI: extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void = super::failing::ColorFragmentOp2ATI;
    pub static mut ColorFragmentOp3ATI: extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void = super::failing::ColorFragmentOp3ATI;
    pub static mut ColorMask: extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void = super::failing::ColorMask;
    pub static mut ColorMaskIndexedEXT: extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void = super::failing::ColorMaskIndexedEXT;
    pub static mut ColorMaski: extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void = super::failing::ColorMaski;
    pub static mut ColorMaterial: extern "C" fn(face: GLenum, mode: GLenum) -> c_void = super::failing::ColorMaterial;
    pub static mut ColorP3ui: extern "C" fn(type_: GLenum, color: GLuint) -> c_void = super::failing::ColorP3ui;
    pub static mut ColorP3uiv: extern "C" fn(type_: GLenum, color: *GLuint) -> c_void = super::failing::ColorP3uiv;
    pub static mut ColorP4ui: extern "C" fn(type_: GLenum, color: GLuint) -> c_void = super::failing::ColorP4ui;
    pub static mut ColorP4uiv: extern "C" fn(type_: GLenum, color: *GLuint) -> c_void = super::failing::ColorP4uiv;
    pub static mut ColorPointer: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::ColorPointer;
    pub static mut ColorPointerEXT: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void = super::failing::ColorPointerEXT;
    pub static mut ColorPointerListIBM: extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void = super::failing::ColorPointerListIBM;
    pub static mut ColorPointervINTEL: extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void = super::failing::ColorPointervINTEL;
    pub static mut ColorSubTable: extern "C" fn(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void = super::failing::ColorSubTable;
    pub static mut ColorSubTableEXT: extern "C" fn(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void = super::failing::ColorSubTableEXT;
    pub static mut ColorTable: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void = super::failing::ColorTable;
    pub static mut ColorTableEXT: extern "C" fn(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void = super::failing::ColorTableEXT;
    pub static mut ColorTableParameterfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::ColorTableParameterfv;
    pub static mut ColorTableParameterfvSGI: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::ColorTableParameterfvSGI;
    pub static mut ColorTableParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::ColorTableParameteriv;
    pub static mut ColorTableParameterivSGI: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::ColorTableParameterivSGI;
    pub static mut ColorTableSGI: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void = super::failing::ColorTableSGI;
    pub static mut CombinerInputNV: extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void = super::failing::CombinerInputNV;
    pub static mut CombinerOutputNV: extern "C" fn(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) -> c_void = super::failing::CombinerOutputNV;
    pub static mut CombinerParameterfNV: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::CombinerParameterfNV;
    pub static mut CombinerParameterfvNV: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::CombinerParameterfvNV;
    pub static mut CombinerParameteriNV: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::CombinerParameteriNV;
    pub static mut CombinerParameterivNV: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::CombinerParameterivNV;
    pub static mut CombinerStageParameterfvNV: extern "C" fn(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::CombinerStageParameterfvNV;
    pub static mut CompileShader: extern "C" fn(shader: GLuint) -> c_void = super::failing::CompileShader;
    pub static mut CompileShaderARB: extern "C" fn(shaderObj: GLhandleARB) -> c_void = super::failing::CompileShaderARB;
    pub static mut CompileShaderIncludeARB: extern "C" fn(shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) -> c_void = super::failing::CompileShaderIncludeARB;
    pub static mut CompressedMultiTexImage1DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedMultiTexImage1DEXT;
    pub static mut CompressedMultiTexImage2DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedMultiTexImage2DEXT;
    pub static mut CompressedMultiTexImage3DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedMultiTexImage3DEXT;
    pub static mut CompressedMultiTexSubImage1DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedMultiTexSubImage1DEXT;
    pub static mut CompressedMultiTexSubImage2DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedMultiTexSubImage2DEXT;
    pub static mut CompressedMultiTexSubImage3DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedMultiTexSubImage3DEXT;
    pub static mut CompressedTexImage1D: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexImage1D;
    pub static mut CompressedTexImage1DARB: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexImage1DARB;
    pub static mut CompressedTexImage2D: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexImage2D;
    pub static mut CompressedTexImage2DARB: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexImage2DARB;
    pub static mut CompressedTexImage3D: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexImage3D;
    pub static mut CompressedTexImage3DARB: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexImage3DARB;
    pub static mut CompressedTexImage3DOES: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexImage3DOES;
    pub static mut CompressedTexSubImage1D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexSubImage1D;
    pub static mut CompressedTexSubImage1DARB: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexSubImage1DARB;
    pub static mut CompressedTexSubImage2D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexSubImage2D;
    pub static mut CompressedTexSubImage2DARB: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexSubImage2DARB;
    pub static mut CompressedTexSubImage3D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexSubImage3D;
    pub static mut CompressedTexSubImage3DARB: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexSubImage3DARB;
    pub static mut CompressedTexSubImage3DOES: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void = super::failing::CompressedTexSubImage3DOES;
    pub static mut CompressedTextureImage1DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedTextureImage1DEXT;
    pub static mut CompressedTextureImage2DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedTextureImage2DEXT;
    pub static mut CompressedTextureImage3DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedTextureImage3DEXT;
    pub static mut CompressedTextureSubImage1DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedTextureSubImage1DEXT;
    pub static mut CompressedTextureSubImage2DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedTextureSubImage2DEXT;
    pub static mut CompressedTextureSubImage3DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void = super::failing::CompressedTextureSubImage3DEXT;
    pub static mut ConvolutionFilter1D: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void = super::failing::ConvolutionFilter1D;
    pub static mut ConvolutionFilter1DEXT: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void = super::failing::ConvolutionFilter1DEXT;
    pub static mut ConvolutionFilter2D: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void = super::failing::ConvolutionFilter2D;
    pub static mut ConvolutionFilter2DEXT: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void = super::failing::ConvolutionFilter2DEXT;
    pub static mut ConvolutionParameterf: extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat) -> c_void = super::failing::ConvolutionParameterf;
    pub static mut ConvolutionParameterfEXT: extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat) -> c_void = super::failing::ConvolutionParameterfEXT;
    pub static mut ConvolutionParameterfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::ConvolutionParameterfv;
    pub static mut ConvolutionParameterfvEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::ConvolutionParameterfvEXT;
    pub static mut ConvolutionParameteri: extern "C" fn(target: GLenum, pname: GLenum, params: GLint) -> c_void = super::failing::ConvolutionParameteri;
    pub static mut ConvolutionParameteriEXT: extern "C" fn(target: GLenum, pname: GLenum, params: GLint) -> c_void = super::failing::ConvolutionParameteriEXT;
    pub static mut ConvolutionParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::ConvolutionParameteriv;
    pub static mut ConvolutionParameterivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::ConvolutionParameterivEXT;
    pub static mut ConvolutionParameterxOES: extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::ConvolutionParameterxOES;
    pub static mut ConvolutionParameterxvOES: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::ConvolutionParameterxvOES;
    pub static mut CopyBufferSubData: extern "C" fn(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void = super::failing::CopyBufferSubData;
    pub static mut CopyColorSubTable: extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyColorSubTable;
    pub static mut CopyColorSubTableEXT: extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyColorSubTableEXT;
    pub static mut CopyColorTable: extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyColorTable;
    pub static mut CopyColorTableSGI: extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyColorTableSGI;
    pub static mut CopyConvolutionFilter1D: extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyConvolutionFilter1D;
    pub static mut CopyConvolutionFilter1DEXT: extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyConvolutionFilter1DEXT;
    pub static mut CopyConvolutionFilter2D: extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyConvolutionFilter2D;
    pub static mut CopyConvolutionFilter2DEXT: extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyConvolutionFilter2DEXT;
    pub static mut CopyImageSubData: extern "C" fn(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> c_void = super::failing::CopyImageSubData;
    pub static mut CopyImageSubDataNV: extern "C" fn(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void = super::failing::CopyImageSubDataNV;
    pub static mut CopyMultiTexImage1DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void = super::failing::CopyMultiTexImage1DEXT;
    pub static mut CopyMultiTexImage2DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void = super::failing::CopyMultiTexImage2DEXT;
    pub static mut CopyMultiTexSubImage1DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyMultiTexSubImage1DEXT;
    pub static mut CopyMultiTexSubImage2DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyMultiTexSubImage2DEXT;
    pub static mut CopyMultiTexSubImage3DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyMultiTexSubImage3DEXT;
    pub static mut CopyPathNV: extern "C" fn(resultPath: GLuint, srcPath: GLuint) -> c_void = super::failing::CopyPathNV;
    pub static mut CopyPixels: extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum) -> c_void = super::failing::CopyPixels;
    pub static mut CopyTexImage1D: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void = super::failing::CopyTexImage1D;
    pub static mut CopyTexImage1DEXT: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void = super::failing::CopyTexImage1DEXT;
    pub static mut CopyTexImage2D: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void = super::failing::CopyTexImage2D;
    pub static mut CopyTexImage2DEXT: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void = super::failing::CopyTexImage2DEXT;
    pub static mut CopyTexSubImage1D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyTexSubImage1D;
    pub static mut CopyTexSubImage1DEXT: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyTexSubImage1DEXT;
    pub static mut CopyTexSubImage2D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyTexSubImage2D;
    pub static mut CopyTexSubImage2DEXT: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyTexSubImage2DEXT;
    pub static mut CopyTexSubImage3D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyTexSubImage3D;
    pub static mut CopyTexSubImage3DEXT: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyTexSubImage3DEXT;
    pub static mut CopyTexSubImage3DOES: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyTexSubImage3DOES;
    pub static mut CopyTextureImage1DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void = super::failing::CopyTextureImage1DEXT;
    pub static mut CopyTextureImage2DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void = super::failing::CopyTextureImage2DEXT;
    pub static mut CopyTextureLevelsAPPLE: extern "C" fn(destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) -> c_void = super::failing::CopyTextureLevelsAPPLE;
    pub static mut CopyTextureSubImage1DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void = super::failing::CopyTextureSubImage1DEXT;
    pub static mut CopyTextureSubImage2DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyTextureSubImage2DEXT;
    pub static mut CopyTextureSubImage3DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::CopyTextureSubImage3DEXT;
    pub static mut CoverFillPathInstancedNV: extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void = super::failing::CoverFillPathInstancedNV;
    pub static mut CoverFillPathNV: extern "C" fn(path: GLuint, coverMode: GLenum) -> c_void = super::failing::CoverFillPathNV;
    pub static mut CoverStrokePathInstancedNV: extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void = super::failing::CoverStrokePathInstancedNV;
    pub static mut CoverStrokePathNV: extern "C" fn(path: GLuint, coverMode: GLenum) -> c_void = super::failing::CoverStrokePathNV;
    pub static mut CoverageMaskNV: extern "C" fn(mask: GLboolean) -> c_void = super::failing::CoverageMaskNV;
    pub static mut CoverageOperationNV: extern "C" fn(operation: GLenum) -> c_void = super::failing::CoverageOperationNV;
    pub static mut CreateProgram: extern "C" fn() -> GLuint = super::failing::CreateProgram;
    pub static mut CreateProgramObjectARB: extern "C" fn() -> GLhandleARB = super::failing::CreateProgramObjectARB;
    pub static mut CreateShader: extern "C" fn(type_: GLenum) -> GLuint = super::failing::CreateShader;
    pub static mut CreateShaderObjectARB: extern "C" fn(shaderType: GLenum) -> GLhandleARB = super::failing::CreateShaderObjectARB;
    pub static mut CreateShaderProgramEXT: extern "C" fn(type_: GLenum, string: *GLchar) -> GLuint = super::failing::CreateShaderProgramEXT;
    pub static mut CreateShaderProgramv: extern "C" fn(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint = super::failing::CreateShaderProgramv;
    pub static mut CreateShaderProgramvEXT: extern "C" fn(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint = super::failing::CreateShaderProgramvEXT;
    pub static mut CreateSyncFromCLeventARB: extern "C" fn(context: *_cl_context, event: *_cl_event, flags: GLbitfield) -> GLsync = super::failing::CreateSyncFromCLeventARB;
    pub static mut CullFace: extern "C" fn(mode: GLenum) -> c_void = super::failing::CullFace;
    pub static mut CullParameterdvEXT: extern "C" fn(pname: GLenum, params: *GLdouble) -> c_void = super::failing::CullParameterdvEXT;
    pub static mut CullParameterfvEXT: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::CullParameterfvEXT;
    pub static mut CurrentPaletteMatrixARB: extern "C" fn(index: GLint) -> c_void = super::failing::CurrentPaletteMatrixARB;
    pub static mut CurrentPaletteMatrixOES: extern "C" fn(matrixpaletteindex: GLuint) -> c_void = super::failing::CurrentPaletteMatrixOES;
    pub static mut DebugMessageCallback: extern "C" fn(callback: GLDEBUGPROC, userParam: *c_void) -> c_void = super::failing::DebugMessageCallback;
    pub static mut DebugMessageCallbackAMD: extern "C" fn(callback: GLDEBUGPROCAMD, userParam: *c_void) -> c_void = super::failing::DebugMessageCallbackAMD;
    pub static mut DebugMessageCallbackARB: extern "C" fn(callback: GLDEBUGPROCARB, userParam: *c_void) -> c_void = super::failing::DebugMessageCallbackARB;
    pub static mut DebugMessageCallbackKHR: extern "C" fn(callback: GLDEBUGPROCKHR, userParam: *c_void) -> c_void = super::failing::DebugMessageCallbackKHR;
    pub static mut DebugMessageControl: extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void = super::failing::DebugMessageControl;
    pub static mut DebugMessageControlARB: extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void = super::failing::DebugMessageControlARB;
    pub static mut DebugMessageControlKHR: extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void = super::failing::DebugMessageControlKHR;
    pub static mut DebugMessageEnableAMD: extern "C" fn(category: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void = super::failing::DebugMessageEnableAMD;
    pub static mut DebugMessageInsert: extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void = super::failing::DebugMessageInsert;
    pub static mut DebugMessageInsertAMD: extern "C" fn(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *GLchar) -> c_void = super::failing::DebugMessageInsertAMD;
    pub static mut DebugMessageInsertARB: extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void = super::failing::DebugMessageInsertARB;
    pub static mut DebugMessageInsertKHR: extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void = super::failing::DebugMessageInsertKHR;
    pub static mut DeformSGIX: extern "C" fn(mask: GLbitfield) -> c_void = super::failing::DeformSGIX;
    pub static mut DeformationMap3dSGIX: extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *GLdouble) -> c_void = super::failing::DeformationMap3dSGIX;
    pub static mut DeformationMap3fSGIX: extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *GLfloat) -> c_void = super::failing::DeformationMap3fSGIX;
    pub static mut DeleteAsyncMarkersSGIX: extern "C" fn(marker: GLuint, range: GLsizei) -> c_void = super::failing::DeleteAsyncMarkersSGIX;
    pub static mut DeleteBuffers: extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void = super::failing::DeleteBuffers;
    pub static mut DeleteBuffersARB: extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void = super::failing::DeleteBuffersARB;
    pub static mut DeleteFencesAPPLE: extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void = super::failing::DeleteFencesAPPLE;
    pub static mut DeleteFencesNV: extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void = super::failing::DeleteFencesNV;
    pub static mut DeleteFragmentShaderATI: extern "C" fn(id: GLuint) -> c_void = super::failing::DeleteFragmentShaderATI;
    pub static mut DeleteFramebuffers: extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void = super::failing::DeleteFramebuffers;
    pub static mut DeleteFramebuffersEXT: extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void = super::failing::DeleteFramebuffersEXT;
    pub static mut DeleteFramebuffersOES: extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void = super::failing::DeleteFramebuffersOES;
    pub static mut DeleteLists: extern "C" fn(list: GLuint, range: GLsizei) -> c_void = super::failing::DeleteLists;
    pub static mut DeleteNamedStringARB: extern "C" fn(namelen: GLint, name: *GLchar) -> c_void = super::failing::DeleteNamedStringARB;
    pub static mut DeleteNamesAMD: extern "C" fn(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void = super::failing::DeleteNamesAMD;
    pub static mut DeleteObjectARB: extern "C" fn(obj: GLhandleARB) -> c_void = super::failing::DeleteObjectARB;
    pub static mut DeleteOcclusionQueriesNV: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::DeleteOcclusionQueriesNV;
    pub static mut DeletePathsNV: extern "C" fn(path: GLuint, range: GLsizei) -> c_void = super::failing::DeletePathsNV;
    pub static mut DeletePerfMonitorsAMD: extern "C" fn(n: GLsizei, monitors: *GLuint) -> c_void = super::failing::DeletePerfMonitorsAMD;
    pub static mut DeleteProgram: extern "C" fn(program: GLuint) -> c_void = super::failing::DeleteProgram;
    pub static mut DeleteProgramPipelines: extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void = super::failing::DeleteProgramPipelines;
    pub static mut DeleteProgramPipelinesEXT: extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void = super::failing::DeleteProgramPipelinesEXT;
    pub static mut DeleteProgramsARB: extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void = super::failing::DeleteProgramsARB;
    pub static mut DeleteProgramsNV: extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void = super::failing::DeleteProgramsNV;
    pub static mut DeleteQueries: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::DeleteQueries;
    pub static mut DeleteQueriesARB: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::DeleteQueriesARB;
    pub static mut DeleteQueriesEXT: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::DeleteQueriesEXT;
    pub static mut DeleteRenderbuffers: extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void = super::failing::DeleteRenderbuffers;
    pub static mut DeleteRenderbuffersEXT: extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void = super::failing::DeleteRenderbuffersEXT;
    pub static mut DeleteRenderbuffersOES: extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void = super::failing::DeleteRenderbuffersOES;
    pub static mut DeleteSamplers: extern "C" fn(count: GLsizei, samplers: *GLuint) -> c_void = super::failing::DeleteSamplers;
    pub static mut DeleteShader: extern "C" fn(shader: GLuint) -> c_void = super::failing::DeleteShader;
    pub static mut DeleteSync: extern "C" fn(sync: GLsync) -> c_void = super::failing::DeleteSync;
    pub static mut DeleteSyncAPPLE: extern "C" fn(sync: GLsync) -> c_void = super::failing::DeleteSyncAPPLE;
    pub static mut DeleteTextures: extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void = super::failing::DeleteTextures;
    pub static mut DeleteTexturesEXT: extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void = super::failing::DeleteTexturesEXT;
    pub static mut DeleteTransformFeedbacks: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::DeleteTransformFeedbacks;
    pub static mut DeleteTransformFeedbacksNV: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::DeleteTransformFeedbacksNV;
    pub static mut DeleteVertexArrays: extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void = super::failing::DeleteVertexArrays;
    pub static mut DeleteVertexArraysAPPLE: extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void = super::failing::DeleteVertexArraysAPPLE;
    pub static mut DeleteVertexArraysOES: extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void = super::failing::DeleteVertexArraysOES;
    pub static mut DeleteVertexShaderEXT: extern "C" fn(id: GLuint) -> c_void = super::failing::DeleteVertexShaderEXT;
    pub static mut DepthBoundsEXT: extern "C" fn(zmin: GLclampd, zmax: GLclampd) -> c_void = super::failing::DepthBoundsEXT;
    pub static mut DepthBoundsdNV: extern "C" fn(zmin: GLdouble, zmax: GLdouble) -> c_void = super::failing::DepthBoundsdNV;
    pub static mut DepthFunc: extern "C" fn(func: GLenum) -> c_void = super::failing::DepthFunc;
    pub static mut DepthMask: extern "C" fn(flag: GLboolean) -> c_void = super::failing::DepthMask;
    pub static mut DepthRange: extern "C" fn(near: GLdouble, far: GLdouble) -> c_void = super::failing::DepthRange;
    pub static mut DepthRangeArrayv: extern "C" fn(first: GLuint, count: GLsizei, v: *GLdouble) -> c_void = super::failing::DepthRangeArrayv;
    pub static mut DepthRangeIndexed: extern "C" fn(index: GLuint, n: GLdouble, f: GLdouble) -> c_void = super::failing::DepthRangeIndexed;
    pub static mut DepthRangedNV: extern "C" fn(zNear: GLdouble, zFar: GLdouble) -> c_void = super::failing::DepthRangedNV;
    pub static mut DepthRangef: extern "C" fn(n: GLfloat, f: GLfloat) -> c_void = super::failing::DepthRangef;
    pub static mut DepthRangefOES: extern "C" fn(n: GLclampf, f: GLclampf) -> c_void = super::failing::DepthRangefOES;
    pub static mut DepthRangex: extern "C" fn(n: GLfixed, f: GLfixed) -> c_void = super::failing::DepthRangex;
    pub static mut DepthRangexOES: extern "C" fn(n: GLfixed, f: GLfixed) -> c_void = super::failing::DepthRangexOES;
    pub static mut DetachObjectARB: extern "C" fn(containerObj: GLhandleARB, attachedObj: GLhandleARB) -> c_void = super::failing::DetachObjectARB;
    pub static mut DetachShader: extern "C" fn(program: GLuint, shader: GLuint) -> c_void = super::failing::DetachShader;
    pub static mut DetailTexFuncSGIS: extern "C" fn(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void = super::failing::DetailTexFuncSGIS;
    pub static mut Disable: extern "C" fn(cap: GLenum) -> c_void = super::failing::Disable;
    pub static mut DisableClientState: extern "C" fn(array: GLenum) -> c_void = super::failing::DisableClientState;
    pub static mut DisableClientStateIndexedEXT: extern "C" fn(array: GLenum, index: GLuint) -> c_void = super::failing::DisableClientStateIndexedEXT;
    pub static mut DisableClientStateiEXT: extern "C" fn(array: GLenum, index: GLuint) -> c_void = super::failing::DisableClientStateiEXT;
    pub static mut DisableDriverControlQCOM: extern "C" fn(driverControl: GLuint) -> c_void = super::failing::DisableDriverControlQCOM;
    pub static mut DisableIndexedEXT: extern "C" fn(target: GLenum, index: GLuint) -> c_void = super::failing::DisableIndexedEXT;
    pub static mut DisableVariantClientStateEXT: extern "C" fn(id: GLuint) -> c_void = super::failing::DisableVariantClientStateEXT;
    pub static mut DisableVertexArrayAttribEXT: extern "C" fn(vaobj: GLuint, index: GLuint) -> c_void = super::failing::DisableVertexArrayAttribEXT;
    pub static mut DisableVertexArrayEXT: extern "C" fn(vaobj: GLuint, array: GLenum) -> c_void = super::failing::DisableVertexArrayEXT;
    pub static mut DisableVertexAttribAPPLE: extern "C" fn(index: GLuint, pname: GLenum) -> c_void = super::failing::DisableVertexAttribAPPLE;
    pub static mut DisableVertexAttribArray: extern "C" fn(index: GLuint) -> c_void = super::failing::DisableVertexAttribArray;
    pub static mut DisableVertexAttribArrayARB: extern "C" fn(index: GLuint) -> c_void = super::failing::DisableVertexAttribArrayARB;
    pub static mut Disablei: extern "C" fn(target: GLenum, index: GLuint) -> c_void = super::failing::Disablei;
    pub static mut DiscardFramebufferEXT: extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void = super::failing::DiscardFramebufferEXT;
    pub static mut DispatchCompute: extern "C" fn(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> c_void = super::failing::DispatchCompute;
    pub static mut DispatchComputeGroupSizeARB: extern "C" fn(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) -> c_void = super::failing::DispatchComputeGroupSizeARB;
    pub static mut DispatchComputeIndirect: extern "C" fn(indirect: GLintptr) -> c_void = super::failing::DispatchComputeIndirect;
    pub static mut DrawArrays: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void = super::failing::DrawArrays;
    pub static mut DrawArraysEXT: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void = super::failing::DrawArraysEXT;
    pub static mut DrawArraysIndirect: extern "C" fn(mode: GLenum, indirect: *GLvoid) -> c_void = super::failing::DrawArraysIndirect;
    pub static mut DrawArraysInstanced: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> c_void = super::failing::DrawArraysInstanced;
    pub static mut DrawArraysInstancedANGLE: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void = super::failing::DrawArraysInstancedANGLE;
    pub static mut DrawArraysInstancedARB: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void = super::failing::DrawArraysInstancedARB;
    pub static mut DrawArraysInstancedBaseInstance: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> c_void = super::failing::DrawArraysInstancedBaseInstance;
    pub static mut DrawArraysInstancedEXT: extern "C" fn(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> c_void = super::failing::DrawArraysInstancedEXT;
    pub static mut DrawArraysInstancedNV: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void = super::failing::DrawArraysInstancedNV;
    pub static mut DrawBuffer: extern "C" fn(mode: GLenum) -> c_void = super::failing::DrawBuffer;
    pub static mut DrawBuffers: extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void = super::failing::DrawBuffers;
    pub static mut DrawBuffersARB: extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void = super::failing::DrawBuffersARB;
    pub static mut DrawBuffersATI: extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void = super::failing::DrawBuffersATI;
    pub static mut DrawBuffersEXT: extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void = super::failing::DrawBuffersEXT;
    pub static mut DrawBuffersIndexedEXT: extern "C" fn(n: GLint, location: *GLenum, indices: *GLint) -> c_void = super::failing::DrawBuffersIndexedEXT;
    pub static mut DrawBuffersNV: extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void = super::failing::DrawBuffersNV;
    pub static mut DrawElementArrayAPPLE: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void = super::failing::DrawElementArrayAPPLE;
    pub static mut DrawElementArrayATI: extern "C" fn(mode: GLenum, count: GLsizei) -> c_void = super::failing::DrawElementArrayATI;
    pub static mut DrawElements: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void = super::failing::DrawElements;
    pub static mut DrawElementsBaseVertex: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void = super::failing::DrawElementsBaseVertex;
    pub static mut DrawElementsIndirect: extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid) -> c_void = super::failing::DrawElementsIndirect;
    pub static mut DrawElementsInstanced: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei) -> c_void = super::failing::DrawElementsInstanced;
    pub static mut DrawElementsInstancedANGLE: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, primcount: GLsizei) -> c_void = super::failing::DrawElementsInstancedANGLE;
    pub static mut DrawElementsInstancedARB: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void = super::failing::DrawElementsInstancedARB;
    pub static mut DrawElementsInstancedBaseInstance: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, baseinstance: GLuint) -> c_void = super::failing::DrawElementsInstancedBaseInstance;
    pub static mut DrawElementsInstancedBaseVertex: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei, basevertex: GLint) -> c_void = super::failing::DrawElementsInstancedBaseVertex;
    pub static mut DrawElementsInstancedBaseVertexBaseInstance: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> c_void = super::failing::DrawElementsInstancedBaseVertexBaseInstance;
    pub static mut DrawElementsInstancedEXT: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void = super::failing::DrawElementsInstancedEXT;
    pub static mut DrawElementsInstancedNV: extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void = super::failing::DrawElementsInstancedNV;
    pub static mut DrawMeshArraysSUN: extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) -> c_void = super::failing::DrawMeshArraysSUN;
    pub static mut DrawPixels: extern "C" fn(width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::DrawPixels;
    pub static mut DrawRangeElementArrayAPPLE: extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) -> c_void = super::failing::DrawRangeElementArrayAPPLE;
    pub static mut DrawRangeElementArrayATI: extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) -> c_void = super::failing::DrawRangeElementArrayATI;
    pub static mut DrawRangeElements: extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void = super::failing::DrawRangeElements;
    pub static mut DrawRangeElementsBaseVertex: extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void = super::failing::DrawRangeElementsBaseVertex;
    pub static mut DrawRangeElementsEXT: extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void = super::failing::DrawRangeElementsEXT;
    pub static mut DrawTexfOES: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, width: GLfloat, height: GLfloat) -> c_void = super::failing::DrawTexfOES;
    pub static mut DrawTexfvOES: extern "C" fn(coords: *GLfloat) -> c_void = super::failing::DrawTexfvOES;
    pub static mut DrawTexiOES: extern "C" fn(x: GLint, y: GLint, z: GLint, width: GLint, height: GLint) -> c_void = super::failing::DrawTexiOES;
    pub static mut DrawTexivOES: extern "C" fn(coords: *GLint) -> c_void = super::failing::DrawTexivOES;
    pub static mut DrawTexsOES: extern "C" fn(x: GLshort, y: GLshort, z: GLshort, width: GLshort, height: GLshort) -> c_void = super::failing::DrawTexsOES;
    pub static mut DrawTexsvOES: extern "C" fn(coords: *GLshort) -> c_void = super::failing::DrawTexsvOES;
    pub static mut DrawTextureNV: extern "C" fn(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> c_void = super::failing::DrawTextureNV;
    pub static mut DrawTexxOES: extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed, width: GLfixed, height: GLfixed) -> c_void = super::failing::DrawTexxOES;
    pub static mut DrawTexxvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::DrawTexxvOES;
    pub static mut DrawTransformFeedback: extern "C" fn(mode: GLenum, id: GLuint) -> c_void = super::failing::DrawTransformFeedback;
    pub static mut DrawTransformFeedbackInstanced: extern "C" fn(mode: GLenum, id: GLuint, instancecount: GLsizei) -> c_void = super::failing::DrawTransformFeedbackInstanced;
    pub static mut DrawTransformFeedbackNV: extern "C" fn(mode: GLenum, id: GLuint) -> c_void = super::failing::DrawTransformFeedbackNV;
    pub static mut DrawTransformFeedbackStream: extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint) -> c_void = super::failing::DrawTransformFeedbackStream;
    pub static mut DrawTransformFeedbackStreamInstanced: extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> c_void = super::failing::DrawTransformFeedbackStreamInstanced;
    pub static mut EGLImageTargetRenderbufferStorageOES: extern "C" fn(target: GLenum, image: GLeglImageOES) -> c_void = super::failing::EGLImageTargetRenderbufferStorageOES;
    pub static mut EGLImageTargetTexture2DOES: extern "C" fn(target: GLenum, image: GLeglImageOES) -> c_void = super::failing::EGLImageTargetTexture2DOES;
    pub static mut EdgeFlag: extern "C" fn(flag: GLboolean) -> c_void = super::failing::EdgeFlag;
    pub static mut EdgeFlagFormatNV: extern "C" fn(stride: GLsizei) -> c_void = super::failing::EdgeFlagFormatNV;
    pub static mut EdgeFlagPointer: extern "C" fn(stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::EdgeFlagPointer;
    pub static mut EdgeFlagPointerEXT: extern "C" fn(stride: GLsizei, count: GLsizei, pointer: *GLboolean) -> c_void = super::failing::EdgeFlagPointerEXT;
    pub static mut EdgeFlagPointerListIBM: extern "C" fn(stride: GLint, pointer: **GLboolean, ptrstride: GLint) -> c_void = super::failing::EdgeFlagPointerListIBM;
    pub static mut EdgeFlagv: extern "C" fn(flag: *GLboolean) -> c_void = super::failing::EdgeFlagv;
    pub static mut ElementPointerAPPLE: extern "C" fn(type_: GLenum, pointer: *GLvoid) -> c_void = super::failing::ElementPointerAPPLE;
    pub static mut ElementPointerATI: extern "C" fn(type_: GLenum, pointer: *GLvoid) -> c_void = super::failing::ElementPointerATI;
    pub static mut Enable: extern "C" fn(cap: GLenum) -> c_void = super::failing::Enable;
    pub static mut EnableClientState: extern "C" fn(array: GLenum) -> c_void = super::failing::EnableClientState;
    pub static mut EnableClientStateIndexedEXT: extern "C" fn(array: GLenum, index: GLuint) -> c_void = super::failing::EnableClientStateIndexedEXT;
    pub static mut EnableClientStateiEXT: extern "C" fn(array: GLenum, index: GLuint) -> c_void = super::failing::EnableClientStateiEXT;
    pub static mut EnableDriverControlQCOM: extern "C" fn(driverControl: GLuint) -> c_void = super::failing::EnableDriverControlQCOM;
    pub static mut EnableIndexedEXT: extern "C" fn(target: GLenum, index: GLuint) -> c_void = super::failing::EnableIndexedEXT;
    pub static mut EnableVariantClientStateEXT: extern "C" fn(id: GLuint) -> c_void = super::failing::EnableVariantClientStateEXT;
    pub static mut EnableVertexArrayAttribEXT: extern "C" fn(vaobj: GLuint, index: GLuint) -> c_void = super::failing::EnableVertexArrayAttribEXT;
    pub static mut EnableVertexArrayEXT: extern "C" fn(vaobj: GLuint, array: GLenum) -> c_void = super::failing::EnableVertexArrayEXT;
    pub static mut EnableVertexAttribAPPLE: extern "C" fn(index: GLuint, pname: GLenum) -> c_void = super::failing::EnableVertexAttribAPPLE;
    pub static mut EnableVertexAttribArray: extern "C" fn(index: GLuint) -> c_void = super::failing::EnableVertexAttribArray;
    pub static mut EnableVertexAttribArrayARB: extern "C" fn(index: GLuint) -> c_void = super::failing::EnableVertexAttribArrayARB;
    pub static mut Enablei: extern "C" fn(target: GLenum, index: GLuint) -> c_void = super::failing::Enablei;
    pub static mut End: extern "C" fn() -> c_void = super::failing::End;
    pub static mut EndConditionalRender: extern "C" fn() -> c_void = super::failing::EndConditionalRender;
    pub static mut EndConditionalRenderNV: extern "C" fn() -> c_void = super::failing::EndConditionalRenderNV;
    pub static mut EndConditionalRenderNVX: extern "C" fn() -> c_void = super::failing::EndConditionalRenderNVX;
    pub static mut EndFragmentShaderATI: extern "C" fn() -> c_void = super::failing::EndFragmentShaderATI;
    pub static mut EndList: extern "C" fn() -> c_void = super::failing::EndList;
    pub static mut EndOcclusionQueryNV: extern "C" fn() -> c_void = super::failing::EndOcclusionQueryNV;
    pub static mut EndPerfMonitorAMD: extern "C" fn(monitor: GLuint) -> c_void = super::failing::EndPerfMonitorAMD;
    pub static mut EndQuery: extern "C" fn(target: GLenum) -> c_void = super::failing::EndQuery;
    pub static mut EndQueryARB: extern "C" fn(target: GLenum) -> c_void = super::failing::EndQueryARB;
    pub static mut EndQueryEXT: extern "C" fn(target: GLenum) -> c_void = super::failing::EndQueryEXT;
    pub static mut EndQueryIndexed: extern "C" fn(target: GLenum, index: GLuint) -> c_void = super::failing::EndQueryIndexed;
    pub static mut EndTilingQCOM: extern "C" fn(preserveMask: GLbitfield) -> c_void = super::failing::EndTilingQCOM;
    pub static mut EndTransformFeedback: extern "C" fn() -> c_void = super::failing::EndTransformFeedback;
    pub static mut EndTransformFeedbackEXT: extern "C" fn() -> c_void = super::failing::EndTransformFeedbackEXT;
    pub static mut EndTransformFeedbackNV: extern "C" fn() -> c_void = super::failing::EndTransformFeedbackNV;
    pub static mut EndVertexShaderEXT: extern "C" fn() -> c_void = super::failing::EndVertexShaderEXT;
    pub static mut EndVideoCaptureNV: extern "C" fn(video_capture_slot: GLuint) -> c_void = super::failing::EndVideoCaptureNV;
    pub static mut EvalCoord1d: extern "C" fn(u: GLdouble) -> c_void = super::failing::EvalCoord1d;
    pub static mut EvalCoord1dv: extern "C" fn(u: *GLdouble) -> c_void = super::failing::EvalCoord1dv;
    pub static mut EvalCoord1f: extern "C" fn(u: GLfloat) -> c_void = super::failing::EvalCoord1f;
    pub static mut EvalCoord1fv: extern "C" fn(u: *GLfloat) -> c_void = super::failing::EvalCoord1fv;
    pub static mut EvalCoord1xOES: extern "C" fn(u: GLfixed) -> c_void = super::failing::EvalCoord1xOES;
    pub static mut EvalCoord1xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::EvalCoord1xvOES;
    pub static mut EvalCoord2d: extern "C" fn(u: GLdouble, v: GLdouble) -> c_void = super::failing::EvalCoord2d;
    pub static mut EvalCoord2dv: extern "C" fn(u: *GLdouble) -> c_void = super::failing::EvalCoord2dv;
    pub static mut EvalCoord2f: extern "C" fn(u: GLfloat, v: GLfloat) -> c_void = super::failing::EvalCoord2f;
    pub static mut EvalCoord2fv: extern "C" fn(u: *GLfloat) -> c_void = super::failing::EvalCoord2fv;
    pub static mut EvalCoord2xOES: extern "C" fn(u: GLfixed, v: GLfixed) -> c_void = super::failing::EvalCoord2xOES;
    pub static mut EvalCoord2xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::EvalCoord2xvOES;
    pub static mut EvalMapsNV: extern "C" fn(target: GLenum, mode: GLenum) -> c_void = super::failing::EvalMapsNV;
    pub static mut EvalMesh1: extern "C" fn(mode: GLenum, i1: GLint, i2: GLint) -> c_void = super::failing::EvalMesh1;
    pub static mut EvalMesh2: extern "C" fn(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> c_void = super::failing::EvalMesh2;
    pub static mut EvalPoint1: extern "C" fn(i: GLint) -> c_void = super::failing::EvalPoint1;
    pub static mut EvalPoint2: extern "C" fn(i: GLint, j: GLint) -> c_void = super::failing::EvalPoint2;
    pub static mut ExecuteProgramNV: extern "C" fn(target: GLenum, id: GLuint, params: *GLfloat) -> c_void = super::failing::ExecuteProgramNV;
    pub static mut ExtGetBufferPointervQCOM: extern "C" fn(target: GLenum, params: **GLvoid) -> c_void = super::failing::ExtGetBufferPointervQCOM;
    pub static mut ExtGetBuffersQCOM: extern "C" fn(buffers: *GLuint, maxBuffers: GLint, numBuffers: *GLint) -> c_void = super::failing::ExtGetBuffersQCOM;
    pub static mut ExtGetFramebuffersQCOM: extern "C" fn(framebuffers: *GLuint, maxFramebuffers: GLint, numFramebuffers: *GLint) -> c_void = super::failing::ExtGetFramebuffersQCOM;
    pub static mut ExtGetProgramBinarySourceQCOM: extern "C" fn(program: GLuint, shadertype: GLenum, source: *GLchar, length: *GLint) -> c_void = super::failing::ExtGetProgramBinarySourceQCOM;
    pub static mut ExtGetProgramsQCOM: extern "C" fn(programs: *GLuint, maxPrograms: GLint, numPrograms: *GLint) -> c_void = super::failing::ExtGetProgramsQCOM;
    pub static mut ExtGetRenderbuffersQCOM: extern "C" fn(renderbuffers: *GLuint, maxRenderbuffers: GLint, numRenderbuffers: *GLint) -> c_void = super::failing::ExtGetRenderbuffersQCOM;
    pub static mut ExtGetShadersQCOM: extern "C" fn(shaders: *GLuint, maxShaders: GLint, numShaders: *GLint) -> c_void = super::failing::ExtGetShadersQCOM;
    pub static mut ExtGetTexLevelParameterivQCOM: extern "C" fn(texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void = super::failing::ExtGetTexLevelParameterivQCOM;
    pub static mut ExtGetTexSubImageQCOM: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, texels: *GLvoid) -> c_void = super::failing::ExtGetTexSubImageQCOM;
    pub static mut ExtGetTexturesQCOM: extern "C" fn(textures: *GLuint, maxTextures: GLint, numTextures: *GLint) -> c_void = super::failing::ExtGetTexturesQCOM;
    pub static mut ExtIsProgramBinaryQCOM: extern "C" fn(program: GLuint) -> GLboolean = super::failing::ExtIsProgramBinaryQCOM;
    pub static mut ExtTexObjectStateOverrideiQCOM: extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::ExtTexObjectStateOverrideiQCOM;
    pub static mut ExtractComponentEXT: extern "C" fn(res: GLuint, src: GLuint, num: GLuint) -> c_void = super::failing::ExtractComponentEXT;
    pub static mut FeedbackBuffer: extern "C" fn(size: GLsizei, type_: GLenum, buffer: *GLfloat) -> c_void = super::failing::FeedbackBuffer;
    pub static mut FeedbackBufferxOES: extern "C" fn(n: GLsizei, type_: GLenum, buffer: *GLfixed) -> c_void = super::failing::FeedbackBufferxOES;
    pub static mut FenceSync: extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync = super::failing::FenceSync;
    pub static mut FenceSyncAPPLE: extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync = super::failing::FenceSyncAPPLE;
    pub static mut FinalCombinerInputNV: extern "C" fn(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void = super::failing::FinalCombinerInputNV;
    pub static mut Finish: extern "C" fn() -> c_void = super::failing::Finish;
    pub static mut FinishAsyncSGIX: extern "C" fn(markerp: *GLuint) -> GLint = super::failing::FinishAsyncSGIX;
    pub static mut FinishFenceAPPLE: extern "C" fn(fence: GLuint) -> c_void = super::failing::FinishFenceAPPLE;
    pub static mut FinishFenceNV: extern "C" fn(fence: GLuint) -> c_void = super::failing::FinishFenceNV;
    pub static mut FinishObjectAPPLE: extern "C" fn(object: GLenum, name: GLint) -> c_void = super::failing::FinishObjectAPPLE;
    pub static mut FinishTextureSUNX: extern "C" fn() -> c_void = super::failing::FinishTextureSUNX;
    pub static mut Flush: extern "C" fn() -> c_void = super::failing::Flush;
    pub static mut FlushMappedBufferRange: extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void = super::failing::FlushMappedBufferRange;
    pub static mut FlushMappedBufferRangeAPPLE: extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr) -> c_void = super::failing::FlushMappedBufferRangeAPPLE;
    pub static mut FlushMappedBufferRangeEXT: extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void = super::failing::FlushMappedBufferRangeEXT;
    pub static mut FlushMappedNamedBufferRangeEXT: extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void = super::failing::FlushMappedNamedBufferRangeEXT;
    pub static mut FlushPixelDataRangeNV: extern "C" fn(target: GLenum) -> c_void = super::failing::FlushPixelDataRangeNV;
    pub static mut FlushRasterSGIX: extern "C" fn() -> c_void = super::failing::FlushRasterSGIX;
    pub static mut FlushStaticDataIBM: extern "C" fn(target: GLenum) -> c_void = super::failing::FlushStaticDataIBM;
    pub static mut FlushVertexArrayRangeAPPLE: extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void = super::failing::FlushVertexArrayRangeAPPLE;
    pub static mut FlushVertexArrayRangeNV: extern "C" fn() -> c_void = super::failing::FlushVertexArrayRangeNV;
    pub static mut FogCoordFormatNV: extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void = super::failing::FogCoordFormatNV;
    pub static mut FogCoordPointer: extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::FogCoordPointer;
    pub static mut FogCoordPointerEXT: extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::FogCoordPointerEXT;
    pub static mut FogCoordPointerListIBM: extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void = super::failing::FogCoordPointerListIBM;
    pub static mut FogCoordd: extern "C" fn(coord: GLdouble) -> c_void = super::failing::FogCoordd;
    pub static mut FogCoorddEXT: extern "C" fn(coord: GLdouble) -> c_void = super::failing::FogCoorddEXT;
    pub static mut FogCoorddv: extern "C" fn(coord: *GLdouble) -> c_void = super::failing::FogCoorddv;
    pub static mut FogCoorddvEXT: extern "C" fn(coord: *GLdouble) -> c_void = super::failing::FogCoorddvEXT;
    pub static mut FogCoordf: extern "C" fn(coord: GLfloat) -> c_void = super::failing::FogCoordf;
    pub static mut FogCoordfEXT: extern "C" fn(coord: GLfloat) -> c_void = super::failing::FogCoordfEXT;
    pub static mut FogCoordfv: extern "C" fn(coord: *GLfloat) -> c_void = super::failing::FogCoordfv;
    pub static mut FogCoordfvEXT: extern "C" fn(coord: *GLfloat) -> c_void = super::failing::FogCoordfvEXT;
    pub static mut FogCoordhNV: extern "C" fn(fog: GLhalfNV) -> c_void = super::failing::FogCoordhNV;
    pub static mut FogCoordhvNV: extern "C" fn(fog: *GLhalfNV) -> c_void = super::failing::FogCoordhvNV;
    pub static mut FogFuncSGIS: extern "C" fn(n: GLsizei, points: *GLfloat) -> c_void = super::failing::FogFuncSGIS;
    pub static mut Fogf: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::Fogf;
    pub static mut Fogfv: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::Fogfv;
    pub static mut Fogi: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::Fogi;
    pub static mut Fogiv: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::Fogiv;
    pub static mut Fogx: extern "C" fn(pname: GLenum, param: GLfixed) -> c_void = super::failing::Fogx;
    pub static mut FogxOES: extern "C" fn(pname: GLenum, param: GLfixed) -> c_void = super::failing::FogxOES;
    pub static mut Fogxv: extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void = super::failing::Fogxv;
    pub static mut FogxvOES: extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void = super::failing::FogxvOES;
    pub static mut FragmentColorMaterialSGIX: extern "C" fn(face: GLenum, mode: GLenum) -> c_void = super::failing::FragmentColorMaterialSGIX;
    pub static mut FragmentLightModelfSGIX: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::FragmentLightModelfSGIX;
    pub static mut FragmentLightModelfvSGIX: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::FragmentLightModelfvSGIX;
    pub static mut FragmentLightModeliSGIX: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::FragmentLightModeliSGIX;
    pub static mut FragmentLightModelivSGIX: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::FragmentLightModelivSGIX;
    pub static mut FragmentLightfSGIX: extern "C" fn(light: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::FragmentLightfSGIX;
    pub static mut FragmentLightfvSGIX: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::FragmentLightfvSGIX;
    pub static mut FragmentLightiSGIX: extern "C" fn(light: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::FragmentLightiSGIX;
    pub static mut FragmentLightivSGIX: extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::FragmentLightivSGIX;
    pub static mut FragmentMaterialfSGIX: extern "C" fn(face: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::FragmentMaterialfSGIX;
    pub static mut FragmentMaterialfvSGIX: extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::FragmentMaterialfvSGIX;
    pub static mut FragmentMaterialiSGIX: extern "C" fn(face: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::FragmentMaterialiSGIX;
    pub static mut FragmentMaterialivSGIX: extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::FragmentMaterialivSGIX;
    pub static mut FrameTerminatorGREMEDY: extern "C" fn() -> c_void = super::failing::FrameTerminatorGREMEDY;
    pub static mut FrameZoomSGIX: extern "C" fn(factor: GLint) -> c_void = super::failing::FrameZoomSGIX;
    pub static mut FramebufferDrawBufferEXT: extern "C" fn(framebuffer: GLuint, mode: GLenum) -> c_void = super::failing::FramebufferDrawBufferEXT;
    pub static mut FramebufferDrawBuffersEXT: extern "C" fn(framebuffer: GLuint, n: GLsizei, bufs: *GLenum) -> c_void = super::failing::FramebufferDrawBuffersEXT;
    pub static mut FramebufferParameteri: extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::FramebufferParameteri;
    pub static mut FramebufferReadBufferEXT: extern "C" fn(framebuffer: GLuint, mode: GLenum) -> c_void = super::failing::FramebufferReadBufferEXT;
    pub static mut FramebufferRenderbuffer: extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void = super::failing::FramebufferRenderbuffer;
    pub static mut FramebufferRenderbufferEXT: extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void = super::failing::FramebufferRenderbufferEXT;
    pub static mut FramebufferRenderbufferOES: extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void = super::failing::FramebufferRenderbufferOES;
    pub static mut FramebufferTexture: extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::FramebufferTexture;
    pub static mut FramebufferTexture1D: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::FramebufferTexture1D;
    pub static mut FramebufferTexture1DEXT: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::FramebufferTexture1DEXT;
    pub static mut FramebufferTexture2D: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::FramebufferTexture2D;
    pub static mut FramebufferTexture2DEXT: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::FramebufferTexture2DEXT;
    pub static mut FramebufferTexture2DMultisampleEXT: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void = super::failing::FramebufferTexture2DMultisampleEXT;
    pub static mut FramebufferTexture2DMultisampleIMG: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void = super::failing::FramebufferTexture2DMultisampleIMG;
    pub static mut FramebufferTexture2DOES: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::FramebufferTexture2DOES;
    pub static mut FramebufferTexture3D: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void = super::failing::FramebufferTexture3D;
    pub static mut FramebufferTexture3DEXT: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void = super::failing::FramebufferTexture3DEXT;
    pub static mut FramebufferTexture3DOES: extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void = super::failing::FramebufferTexture3DOES;
    pub static mut FramebufferTextureARB: extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::FramebufferTextureARB;
    pub static mut FramebufferTextureEXT: extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::FramebufferTextureEXT;
    pub static mut FramebufferTextureFaceARB: extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void = super::failing::FramebufferTextureFaceARB;
    pub static mut FramebufferTextureFaceEXT: extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void = super::failing::FramebufferTextureFaceEXT;
    pub static mut FramebufferTextureLayer: extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void = super::failing::FramebufferTextureLayer;
    pub static mut FramebufferTextureLayerARB: extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void = super::failing::FramebufferTextureLayerARB;
    pub static mut FramebufferTextureLayerEXT: extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void = super::failing::FramebufferTextureLayerEXT;
    pub static mut FreeObjectBufferATI: extern "C" fn(buffer: GLuint) -> c_void = super::failing::FreeObjectBufferATI;
    pub static mut FrontFace: extern "C" fn(mode: GLenum) -> c_void = super::failing::FrontFace;
    pub static mut Frustum: extern "C" fn(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void = super::failing::Frustum;
    pub static mut Frustumf: extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void = super::failing::Frustumf;
    pub static mut FrustumfOES: extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void = super::failing::FrustumfOES;
    pub static mut Frustumx: extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void = super::failing::Frustumx;
    pub static mut FrustumxOES: extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void = super::failing::FrustumxOES;
    pub static mut GenAsyncMarkersSGIX: extern "C" fn(range: GLsizei) -> GLuint = super::failing::GenAsyncMarkersSGIX;
    pub static mut GenBuffers: extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void = super::failing::GenBuffers;
    pub static mut GenBuffersARB: extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void = super::failing::GenBuffersARB;
    pub static mut GenFencesAPPLE: extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void = super::failing::GenFencesAPPLE;
    pub static mut GenFencesNV: extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void = super::failing::GenFencesNV;
    pub static mut GenFragmentShadersATI: extern "C" fn(range: GLuint) -> GLuint = super::failing::GenFragmentShadersATI;
    pub static mut GenFramebuffers: extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void = super::failing::GenFramebuffers;
    pub static mut GenFramebuffersEXT: extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void = super::failing::GenFramebuffersEXT;
    pub static mut GenFramebuffersOES: extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void = super::failing::GenFramebuffersOES;
    pub static mut GenLists: extern "C" fn(range: GLsizei) -> GLuint = super::failing::GenLists;
    pub static mut GenNamesAMD: extern "C" fn(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void = super::failing::GenNamesAMD;
    pub static mut GenOcclusionQueriesNV: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::GenOcclusionQueriesNV;
    pub static mut GenPathsNV: extern "C" fn(range: GLsizei) -> GLuint = super::failing::GenPathsNV;
    pub static mut GenPerfMonitorsAMD: extern "C" fn(n: GLsizei, monitors: *GLuint) -> c_void = super::failing::GenPerfMonitorsAMD;
    pub static mut GenProgramPipelines: extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void = super::failing::GenProgramPipelines;
    pub static mut GenProgramPipelinesEXT: extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void = super::failing::GenProgramPipelinesEXT;
    pub static mut GenProgramsARB: extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void = super::failing::GenProgramsARB;
    pub static mut GenProgramsNV: extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void = super::failing::GenProgramsNV;
    pub static mut GenQueries: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::GenQueries;
    pub static mut GenQueriesARB: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::GenQueriesARB;
    pub static mut GenQueriesEXT: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::GenQueriesEXT;
    pub static mut GenRenderbuffers: extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void = super::failing::GenRenderbuffers;
    pub static mut GenRenderbuffersEXT: extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void = super::failing::GenRenderbuffersEXT;
    pub static mut GenRenderbuffersOES: extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void = super::failing::GenRenderbuffersOES;
    pub static mut GenSamplers: extern "C" fn(count: GLsizei, samplers: *GLuint) -> c_void = super::failing::GenSamplers;
    pub static mut GenSymbolsEXT: extern "C" fn(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint = super::failing::GenSymbolsEXT;
    pub static mut GenTextures: extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void = super::failing::GenTextures;
    pub static mut GenTexturesEXT: extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void = super::failing::GenTexturesEXT;
    pub static mut GenTransformFeedbacks: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::GenTransformFeedbacks;
    pub static mut GenTransformFeedbacksNV: extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void = super::failing::GenTransformFeedbacksNV;
    pub static mut GenVertexArrays: extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void = super::failing::GenVertexArrays;
    pub static mut GenVertexArraysAPPLE: extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void = super::failing::GenVertexArraysAPPLE;
    pub static mut GenVertexArraysOES: extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void = super::failing::GenVertexArraysOES;
    pub static mut GenVertexShadersEXT: extern "C" fn(range: GLuint) -> GLuint = super::failing::GenVertexShadersEXT;
    pub static mut GenerateMipmap: extern "C" fn(target: GLenum) -> c_void = super::failing::GenerateMipmap;
    pub static mut GenerateMipmapEXT: extern "C" fn(target: GLenum) -> c_void = super::failing::GenerateMipmapEXT;
    pub static mut GenerateMipmapOES: extern "C" fn(target: GLenum) -> c_void = super::failing::GenerateMipmapOES;
    pub static mut GenerateMultiTexMipmapEXT: extern "C" fn(texunit: GLenum, target: GLenum) -> c_void = super::failing::GenerateMultiTexMipmapEXT;
    pub static mut GenerateTextureMipmapEXT: extern "C" fn(texture: GLuint, target: GLenum) -> c_void = super::failing::GenerateTextureMipmapEXT;
    pub static mut GetActiveAtomicCounterBufferiv: extern "C" fn(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetActiveAtomicCounterBufferiv;
    pub static mut GetActiveAttrib: extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void = super::failing::GetActiveAttrib;
    pub static mut GetActiveAttribARB: extern "C" fn(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void = super::failing::GetActiveAttribARB;
    pub static mut GetActiveSubroutineName: extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void = super::failing::GetActiveSubroutineName;
    pub static mut GetActiveSubroutineUniformName: extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void = super::failing::GetActiveSubroutineUniformName;
    pub static mut GetActiveSubroutineUniformiv: extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) -> c_void = super::failing::GetActiveSubroutineUniformiv;
    pub static mut GetActiveUniform: extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void = super::failing::GetActiveUniform;
    pub static mut GetActiveUniformARB: extern "C" fn(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void = super::failing::GetActiveUniformARB;
    pub static mut GetActiveUniformBlockName: extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> c_void = super::failing::GetActiveUniformBlockName;
    pub static mut GetActiveUniformBlockiv: extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetActiveUniformBlockiv;
    pub static mut GetActiveUniformName: extern "C" fn(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) -> c_void = super::failing::GetActiveUniformName;
    pub static mut GetActiveUniformsiv: extern "C" fn(program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetActiveUniformsiv;
    pub static mut GetActiveVaryingNV: extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void = super::failing::GetActiveVaryingNV;
    pub static mut GetArrayObjectfvATI: extern "C" fn(array: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetArrayObjectfvATI;
    pub static mut GetArrayObjectivATI: extern "C" fn(array: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetArrayObjectivATI;
    pub static mut GetAttachedObjectsARB: extern "C" fn(containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) -> c_void = super::failing::GetAttachedObjectsARB;
    pub static mut GetAttachedShaders: extern "C" fn(program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> c_void = super::failing::GetAttachedShaders;
    pub static mut GetAttribLocation: extern "C" fn(program: GLuint, name: *GLchar) -> GLint = super::failing::GetAttribLocation;
    pub static mut GetAttribLocationARB: extern "C" fn(programObj: GLhandleARB, name: *GLcharARB) -> GLint = super::failing::GetAttribLocationARB;
    pub static mut GetBooleanIndexedvEXT: extern "C" fn(target: GLenum, index: GLuint, data: *GLboolean) -> c_void = super::failing::GetBooleanIndexedvEXT;
    pub static mut GetBooleani_v: extern "C" fn(target: GLenum, index: GLuint, data: *GLboolean) -> c_void = super::failing::GetBooleani_v;
    pub static mut GetBooleanv: extern "C" fn(pname: GLenum, params: *GLboolean) -> c_void = super::failing::GetBooleanv;
    pub static mut GetBufferParameteri64v: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint64) -> c_void = super::failing::GetBufferParameteri64v;
    pub static mut GetBufferParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetBufferParameteriv;
    pub static mut GetBufferParameterivARB: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetBufferParameterivARB;
    pub static mut GetBufferParameterui64vNV: extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint64EXT) -> c_void = super::failing::GetBufferParameterui64vNV;
    pub static mut GetBufferPointerv: extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void = super::failing::GetBufferPointerv;
    pub static mut GetBufferPointervARB: extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void = super::failing::GetBufferPointervARB;
    pub static mut GetBufferPointervOES: extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void = super::failing::GetBufferPointervOES;
    pub static mut GetBufferSubData: extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void = super::failing::GetBufferSubData;
    pub static mut GetBufferSubDataARB: extern "C" fn(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void = super::failing::GetBufferSubDataARB;
    pub static mut GetClipPlane: extern "C" fn(plane: GLenum, equation: *GLdouble) -> c_void = super::failing::GetClipPlane;
    pub static mut GetClipPlanef: extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void = super::failing::GetClipPlanef;
    pub static mut GetClipPlanefOES: extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void = super::failing::GetClipPlanefOES;
    pub static mut GetClipPlanex: extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void = super::failing::GetClipPlanex;
    pub static mut GetClipPlanexOES: extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void = super::failing::GetClipPlanexOES;
    pub static mut GetColorTable: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void = super::failing::GetColorTable;
    pub static mut GetColorTableEXT: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void = super::failing::GetColorTableEXT;
    pub static mut GetColorTableParameterfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetColorTableParameterfv;
    pub static mut GetColorTableParameterfvEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetColorTableParameterfvEXT;
    pub static mut GetColorTableParameterfvSGI: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetColorTableParameterfvSGI;
    pub static mut GetColorTableParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetColorTableParameteriv;
    pub static mut GetColorTableParameterivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetColorTableParameterivEXT;
    pub static mut GetColorTableParameterivSGI: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetColorTableParameterivSGI;
    pub static mut GetColorTableSGI: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void = super::failing::GetColorTableSGI;
    pub static mut GetCombinerInputParameterfvNV: extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetCombinerInputParameterfvNV;
    pub static mut GetCombinerInputParameterivNV: extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetCombinerInputParameterivNV;
    pub static mut GetCombinerOutputParameterfvNV: extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetCombinerOutputParameterfvNV;
    pub static mut GetCombinerOutputParameterivNV: extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetCombinerOutputParameterivNV;
    pub static mut GetCombinerStageParameterfvNV: extern "C" fn(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetCombinerStageParameterfvNV;
    pub static mut GetCompressedMultiTexImageEXT: extern "C" fn(texunit: GLenum, target: GLenum, lod: GLint, img: *GLvoid) -> c_void = super::failing::GetCompressedMultiTexImageEXT;
    pub static mut GetCompressedTexImage: extern "C" fn(target: GLenum, level: GLint, img: *GLvoid) -> c_void = super::failing::GetCompressedTexImage;
    pub static mut GetCompressedTexImageARB: extern "C" fn(target: GLenum, level: GLint, img: *GLvoid) -> c_void = super::failing::GetCompressedTexImageARB;
    pub static mut GetCompressedTextureImageEXT: extern "C" fn(texture: GLuint, target: GLenum, lod: GLint, img: *GLvoid) -> c_void = super::failing::GetCompressedTextureImageEXT;
    pub static mut GetConvolutionFilter: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void = super::failing::GetConvolutionFilter;
    pub static mut GetConvolutionFilterEXT: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void = super::failing::GetConvolutionFilterEXT;
    pub static mut GetConvolutionParameterfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetConvolutionParameterfv;
    pub static mut GetConvolutionParameterfvEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetConvolutionParameterfvEXT;
    pub static mut GetConvolutionParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetConvolutionParameteriv;
    pub static mut GetConvolutionParameterivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetConvolutionParameterivEXT;
    pub static mut GetConvolutionParameterxvOES: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetConvolutionParameterxvOES;
    pub static mut GetDebugMessageLog: extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint = super::failing::GetDebugMessageLog;
    pub static mut GetDebugMessageLogAMD: extern "C" fn(count: GLuint, bufsize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) -> GLuint = super::failing::GetDebugMessageLogAMD;
    pub static mut GetDebugMessageLogARB: extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint = super::failing::GetDebugMessageLogARB;
    pub static mut GetDebugMessageLogKHR: extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint = super::failing::GetDebugMessageLogKHR;
    pub static mut GetDetailTexFuncSGIS: extern "C" fn(target: GLenum, points: *GLfloat) -> c_void = super::failing::GetDetailTexFuncSGIS;
    pub static mut GetDoubleIndexedvEXT: extern "C" fn(target: GLenum, index: GLuint, data: *GLdouble) -> c_void = super::failing::GetDoubleIndexedvEXT;
    pub static mut GetDoublei_v: extern "C" fn(target: GLenum, index: GLuint, data: *GLdouble) -> c_void = super::failing::GetDoublei_v;
    pub static mut GetDoublei_vEXT: extern "C" fn(pname: GLenum, index: GLuint, params: *GLdouble) -> c_void = super::failing::GetDoublei_vEXT;
    pub static mut GetDoublev: extern "C" fn(pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetDoublev;
    pub static mut GetDriverControlStringQCOM: extern "C" fn(driverControl: GLuint, bufSize: GLsizei, length: *GLsizei, driverControlString: *GLchar) -> c_void = super::failing::GetDriverControlStringQCOM;
    pub static mut GetDriverControlsQCOM: extern "C" fn(num: *GLint, size: GLsizei, driverControls: *GLuint) -> c_void = super::failing::GetDriverControlsQCOM;
    pub static mut GetError: extern "C" fn() -> GLenum = super::failing::GetError;
    pub static mut GetFenceivNV: extern "C" fn(fence: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFenceivNV;
    pub static mut GetFinalCombinerInputParameterfvNV: extern "C" fn(variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetFinalCombinerInputParameterfvNV;
    pub static mut GetFinalCombinerInputParameterivNV: extern "C" fn(variable: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFinalCombinerInputParameterivNV;
    pub static mut GetFixedv: extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetFixedv;
    pub static mut GetFixedvOES: extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetFixedvOES;
    pub static mut GetFloatIndexedvEXT: extern "C" fn(target: GLenum, index: GLuint, data: *GLfloat) -> c_void = super::failing::GetFloatIndexedvEXT;
    pub static mut GetFloati_v: extern "C" fn(target: GLenum, index: GLuint, data: *GLfloat) -> c_void = super::failing::GetFloati_v;
    pub static mut GetFloati_vEXT: extern "C" fn(pname: GLenum, index: GLuint, params: *GLfloat) -> c_void = super::failing::GetFloati_vEXT;
    pub static mut GetFloatv: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetFloatv;
    pub static mut GetFogFuncSGIS: extern "C" fn(points: *GLfloat) -> c_void = super::failing::GetFogFuncSGIS;
    pub static mut GetFragDataIndex: extern "C" fn(program: GLuint, name: *GLchar) -> GLint = super::failing::GetFragDataIndex;
    pub static mut GetFragDataLocation: extern "C" fn(program: GLuint, name: *GLchar) -> GLint = super::failing::GetFragDataLocation;
    pub static mut GetFragDataLocationEXT: extern "C" fn(program: GLuint, name: *GLchar) -> GLint = super::failing::GetFragDataLocationEXT;
    pub static mut GetFragmentLightfvSGIX: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetFragmentLightfvSGIX;
    pub static mut GetFragmentLightivSGIX: extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFragmentLightivSGIX;
    pub static mut GetFragmentMaterialfvSGIX: extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetFragmentMaterialfvSGIX;
    pub static mut GetFragmentMaterialivSGIX: extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFragmentMaterialivSGIX;
    pub static mut GetFramebufferAttachmentParameteriv: extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFramebufferAttachmentParameteriv;
    pub static mut GetFramebufferAttachmentParameterivEXT: extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFramebufferAttachmentParameterivEXT;
    pub static mut GetFramebufferAttachmentParameterivOES: extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFramebufferAttachmentParameterivOES;
    pub static mut GetFramebufferParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFramebufferParameteriv;
    pub static mut GetFramebufferParameterivEXT: extern "C" fn(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetFramebufferParameterivEXT;
    pub static mut GetGraphicsResetStatusARB: extern "C" fn() -> GLenum = super::failing::GetGraphicsResetStatusARB;
    pub static mut GetGraphicsResetStatusEXT: extern "C" fn() -> GLenum = super::failing::GetGraphicsResetStatusEXT;
    pub static mut GetHandleARB: extern "C" fn(pname: GLenum) -> GLhandleARB = super::failing::GetHandleARB;
    pub static mut GetHistogram: extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void = super::failing::GetHistogram;
    pub static mut GetHistogramEXT: extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void = super::failing::GetHistogramEXT;
    pub static mut GetHistogramParameterfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetHistogramParameterfv;
    pub static mut GetHistogramParameterfvEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetHistogramParameterfvEXT;
    pub static mut GetHistogramParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetHistogramParameteriv;
    pub static mut GetHistogramParameterivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetHistogramParameterivEXT;
    pub static mut GetHistogramParameterxvOES: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetHistogramParameterxvOES;
    pub static mut GetImageHandleARB: extern "C" fn(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 = super::failing::GetImageHandleARB;
    pub static mut GetImageHandleNV: extern "C" fn(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 = super::failing::GetImageHandleNV;
    pub static mut GetImageTransformParameterfvHP: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetImageTransformParameterfvHP;
    pub static mut GetImageTransformParameterivHP: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetImageTransformParameterivHP;
    pub static mut GetInfoLogARB: extern "C" fn(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) -> c_void = super::failing::GetInfoLogARB;
    pub static mut GetInstrumentsSGIX: extern "C" fn() -> GLint = super::failing::GetInstrumentsSGIX;
    pub static mut GetInteger64i_v: extern "C" fn(target: GLenum, index: GLuint, data: *GLint64) -> c_void = super::failing::GetInteger64i_v;
    pub static mut GetInteger64v: extern "C" fn(pname: GLenum, params: *GLint64) -> c_void = super::failing::GetInteger64v;
    pub static mut GetInteger64vAPPLE: extern "C" fn(pname: GLenum, params: *GLint64) -> c_void = super::failing::GetInteger64vAPPLE;
    pub static mut GetIntegerIndexedvEXT: extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void = super::failing::GetIntegerIndexedvEXT;
    pub static mut GetIntegeri_v: extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void = super::failing::GetIntegeri_v;
    pub static mut GetIntegeri_vEXT: extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void = super::failing::GetIntegeri_vEXT;
    pub static mut GetIntegerui64i_vNV: extern "C" fn(value: GLenum, index: GLuint, result: *GLuint64EXT) -> c_void = super::failing::GetIntegerui64i_vNV;
    pub static mut GetIntegerui64vNV: extern "C" fn(value: GLenum, result: *GLuint64EXT) -> c_void = super::failing::GetIntegerui64vNV;
    pub static mut GetIntegerv: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::GetIntegerv;
    pub static mut GetInternalformati64v: extern "C" fn(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) -> c_void = super::failing::GetInternalformati64v;
    pub static mut GetInternalformativ: extern "C" fn(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) -> c_void = super::failing::GetInternalformativ;
    pub static mut GetInvariantBooleanvEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void = super::failing::GetInvariantBooleanvEXT;
    pub static mut GetInvariantFloatvEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void = super::failing::GetInvariantFloatvEXT;
    pub static mut GetInvariantIntegervEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void = super::failing::GetInvariantIntegervEXT;
    pub static mut GetLightfv: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetLightfv;
    pub static mut GetLightiv: extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetLightiv;
    pub static mut GetLightx: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetLightx;
    pub static mut GetLightxOES: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetLightxOES;
    pub static mut GetLightxv: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetLightxv;
    pub static mut GetLightxvOES: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetLightxvOES;
    pub static mut GetListParameterfvSGIX: extern "C" fn(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetListParameterfvSGIX;
    pub static mut GetListParameterivSGIX: extern "C" fn(list: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetListParameterivSGIX;
    pub static mut GetLocalConstantBooleanvEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void = super::failing::GetLocalConstantBooleanvEXT;
    pub static mut GetLocalConstantFloatvEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void = super::failing::GetLocalConstantFloatvEXT;
    pub static mut GetLocalConstantIntegervEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void = super::failing::GetLocalConstantIntegervEXT;
    pub static mut GetMapAttribParameterfvNV: extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMapAttribParameterfvNV;
    pub static mut GetMapAttribParameterivNV: extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMapAttribParameterivNV;
    pub static mut GetMapControlPointsNV: extern "C" fn(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *GLvoid) -> c_void = super::failing::GetMapControlPointsNV;
    pub static mut GetMapParameterfvNV: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMapParameterfvNV;
    pub static mut GetMapParameterivNV: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMapParameterivNV;
    pub static mut GetMapdv: extern "C" fn(target: GLenum, query: GLenum, v: *GLdouble) -> c_void = super::failing::GetMapdv;
    pub static mut GetMapfv: extern "C" fn(target: GLenum, query: GLenum, v: *GLfloat) -> c_void = super::failing::GetMapfv;
    pub static mut GetMapiv: extern "C" fn(target: GLenum, query: GLenum, v: *GLint) -> c_void = super::failing::GetMapiv;
    pub static mut GetMapxvOES: extern "C" fn(target: GLenum, query: GLenum, v: *GLfixed) -> c_void = super::failing::GetMapxvOES;
    pub static mut GetMaterialfv: extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMaterialfv;
    pub static mut GetMaterialiv: extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMaterialiv;
    pub static mut GetMaterialx: extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::GetMaterialx;
    pub static mut GetMaterialxOES: extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::GetMaterialxOES;
    pub static mut GetMaterialxv: extern "C" fn(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetMaterialxv;
    pub static mut GetMaterialxvOES: extern "C" fn(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetMaterialxvOES;
    pub static mut GetMinmax: extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void = super::failing::GetMinmax;
    pub static mut GetMinmaxEXT: extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void = super::failing::GetMinmaxEXT;
    pub static mut GetMinmaxParameterfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMinmaxParameterfv;
    pub static mut GetMinmaxParameterfvEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMinmaxParameterfvEXT;
    pub static mut GetMinmaxParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMinmaxParameteriv;
    pub static mut GetMinmaxParameterivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMinmaxParameterivEXT;
    pub static mut GetMultiTexEnvfvEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMultiTexEnvfvEXT;
    pub static mut GetMultiTexEnvivEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMultiTexEnvivEXT;
    pub static mut GetMultiTexGendvEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetMultiTexGendvEXT;
    pub static mut GetMultiTexGenfvEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMultiTexGenfvEXT;
    pub static mut GetMultiTexGenivEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMultiTexGenivEXT;
    pub static mut GetMultiTexImageEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::GetMultiTexImageEXT;
    pub static mut GetMultiTexLevelParameterfvEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMultiTexLevelParameterfvEXT;
    pub static mut GetMultiTexLevelParameterivEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMultiTexLevelParameterivEXT;
    pub static mut GetMultiTexParameterIivEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMultiTexParameterIivEXT;
    pub static mut GetMultiTexParameterIuivEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetMultiTexParameterIuivEXT;
    pub static mut GetMultiTexParameterfvEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetMultiTexParameterfvEXT;
    pub static mut GetMultiTexParameterivEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetMultiTexParameterivEXT;
    pub static mut GetMultisamplefv: extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void = super::failing::GetMultisamplefv;
    pub static mut GetMultisamplefvNV: extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void = super::failing::GetMultisamplefvNV;
    pub static mut GetNamedBufferParameterivEXT: extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetNamedBufferParameterivEXT;
    pub static mut GetNamedBufferParameterui64vNV: extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void = super::failing::GetNamedBufferParameterui64vNV;
    pub static mut GetNamedBufferPointervEXT: extern "C" fn(buffer: GLuint, pname: GLenum, params: **GLvoid) -> c_void = super::failing::GetNamedBufferPointervEXT;
    pub static mut GetNamedBufferSubDataEXT: extern "C" fn(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void = super::failing::GetNamedBufferSubDataEXT;
    pub static mut GetNamedFramebufferAttachmentParameterivEXT: extern "C" fn(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetNamedFramebufferAttachmentParameterivEXT;
    pub static mut GetNamedFramebufferParameterivEXT: extern "C" fn(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetNamedFramebufferParameterivEXT;
    pub static mut GetNamedProgramLocalParameterIivEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void = super::failing::GetNamedProgramLocalParameterIivEXT;
    pub static mut GetNamedProgramLocalParameterIuivEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void = super::failing::GetNamedProgramLocalParameterIuivEXT;
    pub static mut GetNamedProgramLocalParameterdvEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void = super::failing::GetNamedProgramLocalParameterdvEXT;
    pub static mut GetNamedProgramLocalParameterfvEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void = super::failing::GetNamedProgramLocalParameterfvEXT;
    pub static mut GetNamedProgramStringEXT: extern "C" fn(program: GLuint, target: GLenum, pname: GLenum, string: *GLvoid) -> c_void = super::failing::GetNamedProgramStringEXT;
    pub static mut GetNamedProgramivEXT: extern "C" fn(program: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetNamedProgramivEXT;
    pub static mut GetNamedRenderbufferParameterivEXT: extern "C" fn(renderbuffer: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetNamedRenderbufferParameterivEXT;
    pub static mut GetNamedStringARB: extern "C" fn(namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, string: *GLchar) -> c_void = super::failing::GetNamedStringARB;
    pub static mut GetNamedStringivARB: extern "C" fn(namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) -> c_void = super::failing::GetNamedStringivARB;
    pub static mut GetObjectBufferfvATI: extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetObjectBufferfvATI;
    pub static mut GetObjectBufferivATI: extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetObjectBufferivATI;
    pub static mut GetObjectLabel: extern "C" fn(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void = super::failing::GetObjectLabel;
    pub static mut GetObjectLabelEXT: extern "C" fn(type_: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void = super::failing::GetObjectLabelEXT;
    pub static mut GetObjectLabelKHR: extern "C" fn(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void = super::failing::GetObjectLabelKHR;
    pub static mut GetObjectParameterfvARB: extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetObjectParameterfvARB;
    pub static mut GetObjectParameterivAPPLE: extern "C" fn(objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetObjectParameterivAPPLE;
    pub static mut GetObjectParameterivARB: extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *GLint) -> c_void = super::failing::GetObjectParameterivARB;
    pub static mut GetObjectPtrLabel: extern "C" fn(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void = super::failing::GetObjectPtrLabel;
    pub static mut GetObjectPtrLabelKHR: extern "C" fn(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void = super::failing::GetObjectPtrLabelKHR;
    pub static mut GetOcclusionQueryivNV: extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetOcclusionQueryivNV;
    pub static mut GetOcclusionQueryuivNV: extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetOcclusionQueryuivNV;
    pub static mut GetPathColorGenfvNV: extern "C" fn(color: GLenum, pname: GLenum, value: *GLfloat) -> c_void = super::failing::GetPathColorGenfvNV;
    pub static mut GetPathColorGenivNV: extern "C" fn(color: GLenum, pname: GLenum, value: *GLint) -> c_void = super::failing::GetPathColorGenivNV;
    pub static mut GetPathCommandsNV: extern "C" fn(path: GLuint, commands: *GLubyte) -> c_void = super::failing::GetPathCommandsNV;
    pub static mut GetPathCoordsNV: extern "C" fn(path: GLuint, coords: *GLfloat) -> c_void = super::failing::GetPathCoordsNV;
    pub static mut GetPathDashArrayNV: extern "C" fn(path: GLuint, dashArray: *GLfloat) -> c_void = super::failing::GetPathDashArrayNV;
    pub static mut GetPathLengthNV: extern "C" fn(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat = super::failing::GetPathLengthNV;
    pub static mut GetPathMetricRangeNV: extern "C" fn(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) -> c_void = super::failing::GetPathMetricRangeNV;
    pub static mut GetPathMetricsNV: extern "C" fn(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) -> c_void = super::failing::GetPathMetricsNV;
    pub static mut GetPathParameterfvNV: extern "C" fn(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void = super::failing::GetPathParameterfvNV;
    pub static mut GetPathParameterivNV: extern "C" fn(path: GLuint, pname: GLenum, value: *GLint) -> c_void = super::failing::GetPathParameterivNV;
    pub static mut GetPathSpacingNV: extern "C" fn(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) -> c_void = super::failing::GetPathSpacingNV;
    pub static mut GetPathTexGenfvNV: extern "C" fn(texCoordSet: GLenum, pname: GLenum, value: *GLfloat) -> c_void = super::failing::GetPathTexGenfvNV;
    pub static mut GetPathTexGenivNV: extern "C" fn(texCoordSet: GLenum, pname: GLenum, value: *GLint) -> c_void = super::failing::GetPathTexGenivNV;
    pub static mut GetPerfMonitorCounterDataAMD: extern "C" fn(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) -> c_void = super::failing::GetPerfMonitorCounterDataAMD;
    pub static mut GetPerfMonitorCounterInfoAMD: extern "C" fn(group: GLuint, counter: GLuint, pname: GLenum, data: *GLvoid) -> c_void = super::failing::GetPerfMonitorCounterInfoAMD;
    pub static mut GetPerfMonitorCounterStringAMD: extern "C" fn(group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) -> c_void = super::failing::GetPerfMonitorCounterStringAMD;
    pub static mut GetPerfMonitorCountersAMD: extern "C" fn(group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) -> c_void = super::failing::GetPerfMonitorCountersAMD;
    pub static mut GetPerfMonitorGroupStringAMD: extern "C" fn(group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) -> c_void = super::failing::GetPerfMonitorGroupStringAMD;
    pub static mut GetPerfMonitorGroupsAMD: extern "C" fn(numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) -> c_void = super::failing::GetPerfMonitorGroupsAMD;
    pub static mut GetPixelMapfv: extern "C" fn(map: GLenum, values: *GLfloat) -> c_void = super::failing::GetPixelMapfv;
    pub static mut GetPixelMapuiv: extern "C" fn(map: GLenum, values: *GLuint) -> c_void = super::failing::GetPixelMapuiv;
    pub static mut GetPixelMapusv: extern "C" fn(map: GLenum, values: *GLushort) -> c_void = super::failing::GetPixelMapusv;
    pub static mut GetPixelMapxv: extern "C" fn(map: GLenum, size: GLint, values: *GLfixed) -> c_void = super::failing::GetPixelMapxv;
    pub static mut GetPixelTexGenParameterfvSGIS: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetPixelTexGenParameterfvSGIS;
    pub static mut GetPixelTexGenParameterivSGIS: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::GetPixelTexGenParameterivSGIS;
    pub static mut GetPixelTransformParameterfvEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetPixelTransformParameterfvEXT;
    pub static mut GetPixelTransformParameterivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetPixelTransformParameterivEXT;
    pub static mut GetPointerIndexedvEXT: extern "C" fn(target: GLenum, index: GLuint, data: **GLvoid) -> c_void = super::failing::GetPointerIndexedvEXT;
    pub static mut GetPointeri_vEXT: extern "C" fn(pname: GLenum, index: GLuint, params: **GLvoid) -> c_void = super::failing::GetPointeri_vEXT;
    pub static mut GetPointerv: extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void = super::failing::GetPointerv;
    pub static mut GetPointervEXT: extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void = super::failing::GetPointervEXT;
    pub static mut GetPointervKHR: extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void = super::failing::GetPointervKHR;
    pub static mut GetPolygonStipple: extern "C" fn(mask: *GLubyte) -> c_void = super::failing::GetPolygonStipple;
    pub static mut GetProgramBinary: extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void = super::failing::GetProgramBinary;
    pub static mut GetProgramBinaryOES: extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void = super::failing::GetProgramBinaryOES;
    pub static mut GetProgramEnvParameterIivNV: extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void = super::failing::GetProgramEnvParameterIivNV;
    pub static mut GetProgramEnvParameterIuivNV: extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void = super::failing::GetProgramEnvParameterIuivNV;
    pub static mut GetProgramEnvParameterdvARB: extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void = super::failing::GetProgramEnvParameterdvARB;
    pub static mut GetProgramEnvParameterfvARB: extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void = super::failing::GetProgramEnvParameterfvARB;
    pub static mut GetProgramInfoLog: extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void = super::failing::GetProgramInfoLog;
    pub static mut GetProgramInterfaceiv: extern "C" fn(program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetProgramInterfaceiv;
    pub static mut GetProgramLocalParameterIivNV: extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void = super::failing::GetProgramLocalParameterIivNV;
    pub static mut GetProgramLocalParameterIuivNV: extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void = super::failing::GetProgramLocalParameterIuivNV;
    pub static mut GetProgramLocalParameterdvARB: extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void = super::failing::GetProgramLocalParameterdvARB;
    pub static mut GetProgramLocalParameterfvARB: extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void = super::failing::GetProgramLocalParameterfvARB;
    pub static mut GetProgramNamedParameterdvNV: extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLdouble) -> c_void = super::failing::GetProgramNamedParameterdvNV;
    pub static mut GetProgramNamedParameterfvNV: extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLfloat) -> c_void = super::failing::GetProgramNamedParameterfvNV;
    pub static mut GetProgramParameterdvNV: extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetProgramParameterdvNV;
    pub static mut GetProgramParameterfvNV: extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetProgramParameterfvNV;
    pub static mut GetProgramPipelineInfoLog: extern "C" fn(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void = super::failing::GetProgramPipelineInfoLog;
    pub static mut GetProgramPipelineInfoLogEXT: extern "C" fn(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void = super::failing::GetProgramPipelineInfoLogEXT;
    pub static mut GetProgramPipelineiv: extern "C" fn(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetProgramPipelineiv;
    pub static mut GetProgramPipelineivEXT: extern "C" fn(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetProgramPipelineivEXT;
    pub static mut GetProgramResourceIndex: extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint = super::failing::GetProgramResourceIndex;
    pub static mut GetProgramResourceLocation: extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint = super::failing::GetProgramResourceLocation;
    pub static mut GetProgramResourceLocationIndex: extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint = super::failing::GetProgramResourceLocationIndex;
    pub static mut GetProgramResourceName: extern "C" fn(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void = super::failing::GetProgramResourceName;
    pub static mut GetProgramResourceiv: extern "C" fn(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> c_void = super::failing::GetProgramResourceiv;
    pub static mut GetProgramStageiv: extern "C" fn(program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) -> c_void = super::failing::GetProgramStageiv;
    pub static mut GetProgramStringARB: extern "C" fn(target: GLenum, pname: GLenum, string: *GLvoid) -> c_void = super::failing::GetProgramStringARB;
    pub static mut GetProgramStringNV: extern "C" fn(id: GLuint, pname: GLenum, program: *GLubyte) -> c_void = super::failing::GetProgramStringNV;
    pub static mut GetProgramSubroutineParameteruivNV: extern "C" fn(target: GLenum, index: GLuint, param: *GLuint) -> c_void = super::failing::GetProgramSubroutineParameteruivNV;
    pub static mut GetProgramiv: extern "C" fn(program: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetProgramiv;
    pub static mut GetProgramivARB: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetProgramivARB;
    pub static mut GetProgramivNV: extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetProgramivNV;
    pub static mut GetQueryIndexediv: extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetQueryIndexediv;
    pub static mut GetQueryObjecti64v: extern "C" fn(id: GLuint, pname: GLenum, params: *GLint64) -> c_void = super::failing::GetQueryObjecti64v;
    pub static mut GetQueryObjecti64vEXT: extern "C" fn(id: GLuint, pname: GLenum, params: *GLint64) -> c_void = super::failing::GetQueryObjecti64vEXT;
    pub static mut GetQueryObjectiv: extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetQueryObjectiv;
    pub static mut GetQueryObjectivARB: extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetQueryObjectivARB;
    pub static mut GetQueryObjectivEXT: extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetQueryObjectivEXT;
    pub static mut GetQueryObjectui64v: extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void = super::failing::GetQueryObjectui64v;
    pub static mut GetQueryObjectui64vEXT: extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void = super::failing::GetQueryObjectui64vEXT;
    pub static mut GetQueryObjectuiv: extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetQueryObjectuiv;
    pub static mut GetQueryObjectuivARB: extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetQueryObjectuivARB;
    pub static mut GetQueryObjectuivEXT: extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetQueryObjectuivEXT;
    pub static mut GetQueryiv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetQueryiv;
    pub static mut GetQueryivARB: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetQueryivARB;
    pub static mut GetQueryivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetQueryivEXT;
    pub static mut GetRenderbufferParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetRenderbufferParameteriv;
    pub static mut GetRenderbufferParameterivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetRenderbufferParameterivEXT;
    pub static mut GetRenderbufferParameterivOES: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetRenderbufferParameterivOES;
    pub static mut GetSamplerParameterIiv: extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetSamplerParameterIiv;
    pub static mut GetSamplerParameterIuiv: extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetSamplerParameterIuiv;
    pub static mut GetSamplerParameterfv: extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetSamplerParameterfv;
    pub static mut GetSamplerParameteriv: extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetSamplerParameteriv;
    pub static mut GetSeparableFilter: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void = super::failing::GetSeparableFilter;
    pub static mut GetSeparableFilterEXT: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void = super::failing::GetSeparableFilterEXT;
    pub static mut GetShaderInfoLog: extern "C" fn(shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void = super::failing::GetShaderInfoLog;
    pub static mut GetShaderPrecisionFormat: extern "C" fn(shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> c_void = super::failing::GetShaderPrecisionFormat;
    pub static mut GetShaderSource: extern "C" fn(shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void = super::failing::GetShaderSource;
    pub static mut GetShaderSourceARB: extern "C" fn(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) -> c_void = super::failing::GetShaderSourceARB;
    pub static mut GetShaderiv: extern "C" fn(shader: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetShaderiv;
    pub static mut GetSharpenTexFuncSGIS: extern "C" fn(target: GLenum, points: *GLfloat) -> c_void = super::failing::GetSharpenTexFuncSGIS;
    pub static mut GetString: extern "C" fn(name: GLenum) -> *GLubyte = super::failing::GetString;
    pub static mut GetStringi: extern "C" fn(name: GLenum, index: GLuint) -> *GLubyte = super::failing::GetStringi;
    pub static mut GetSubroutineIndex: extern "C" fn(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint = super::failing::GetSubroutineIndex;
    pub static mut GetSubroutineUniformLocation: extern "C" fn(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint = super::failing::GetSubroutineUniformLocation;
    pub static mut GetSynciv: extern "C" fn(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void = super::failing::GetSynciv;
    pub static mut GetSyncivAPPLE: extern "C" fn(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void = super::failing::GetSyncivAPPLE;
    pub static mut GetTexBumpParameterfvATI: extern "C" fn(pname: GLenum, param: *GLfloat) -> c_void = super::failing::GetTexBumpParameterfvATI;
    pub static mut GetTexBumpParameterivATI: extern "C" fn(pname: GLenum, param: *GLint) -> c_void = super::failing::GetTexBumpParameterivATI;
    pub static mut GetTexEnvfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetTexEnvfv;
    pub static mut GetTexEnviv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTexEnviv;
    pub static mut GetTexEnvxv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetTexEnvxv;
    pub static mut GetTexEnvxvOES: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetTexEnvxvOES;
    pub static mut GetTexFilterFuncSGIS: extern "C" fn(target: GLenum, filter: GLenum, weights: *GLfloat) -> c_void = super::failing::GetTexFilterFuncSGIS;
    pub static mut GetTexGendv: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetTexGendv;
    pub static mut GetTexGenfv: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetTexGenfv;
    pub static mut GetTexGenfvOES: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetTexGenfvOES;
    pub static mut GetTexGeniv: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTexGeniv;
    pub static mut GetTexGenivOES: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTexGenivOES;
    pub static mut GetTexGenxvOES: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetTexGenxvOES;
    pub static mut GetTexImage: extern "C" fn(target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::GetTexImage;
    pub static mut GetTexLevelParameterfv: extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetTexLevelParameterfv;
    pub static mut GetTexLevelParameteriv: extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTexLevelParameteriv;
    pub static mut GetTexLevelParameterxvOES: extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetTexLevelParameterxvOES;
    pub static mut GetTexParameterIiv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTexParameterIiv;
    pub static mut GetTexParameterIivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTexParameterIivEXT;
    pub static mut GetTexParameterIuiv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetTexParameterIuiv;
    pub static mut GetTexParameterIuivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetTexParameterIuivEXT;
    pub static mut GetTexParameterPointervAPPLE: extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void = super::failing::GetTexParameterPointervAPPLE;
    pub static mut GetTexParameterfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetTexParameterfv;
    pub static mut GetTexParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTexParameteriv;
    pub static mut GetTexParameterxv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetTexParameterxv;
    pub static mut GetTexParameterxvOES: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::GetTexParameterxvOES;
    pub static mut GetTextureHandleARB: extern "C" fn(texture: GLuint) -> GLuint64 = super::failing::GetTextureHandleARB;
    pub static mut GetTextureHandleNV: extern "C" fn(texture: GLuint) -> GLuint64 = super::failing::GetTextureHandleNV;
    pub static mut GetTextureImageEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::GetTextureImageEXT;
    pub static mut GetTextureLevelParameterfvEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetTextureLevelParameterfvEXT;
    pub static mut GetTextureLevelParameterivEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTextureLevelParameterivEXT;
    pub static mut GetTextureParameterIivEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTextureParameterIivEXT;
    pub static mut GetTextureParameterIuivEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetTextureParameterIuivEXT;
    pub static mut GetTextureParameterfvEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetTextureParameterfvEXT;
    pub static mut GetTextureParameterivEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTextureParameterivEXT;
    pub static mut GetTextureSamplerHandleARB: extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64 = super::failing::GetTextureSamplerHandleARB;
    pub static mut GetTextureSamplerHandleNV: extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64 = super::failing::GetTextureSamplerHandleNV;
    pub static mut GetTrackMatrixivNV: extern "C" fn(target: GLenum, address: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetTrackMatrixivNV;
    pub static mut GetTransformFeedbackVarying: extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void = super::failing::GetTransformFeedbackVarying;
    pub static mut GetTransformFeedbackVaryingEXT: extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void = super::failing::GetTransformFeedbackVaryingEXT;
    pub static mut GetTransformFeedbackVaryingNV: extern "C" fn(program: GLuint, index: GLuint, location: *GLint) -> c_void = super::failing::GetTransformFeedbackVaryingNV;
    pub static mut GetTranslatedShaderSourceANGLE: extern "C" fn(shader: GLuint, bufsize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void = super::failing::GetTranslatedShaderSourceANGLE;
    pub static mut GetUniformBlockIndex: extern "C" fn(program: GLuint, uniformBlockName: *GLchar) -> GLuint = super::failing::GetUniformBlockIndex;
    pub static mut GetUniformBufferSizeEXT: extern "C" fn(program: GLuint, location: GLint) -> GLint = super::failing::GetUniformBufferSizeEXT;
    pub static mut GetUniformIndices: extern "C" fn(program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> c_void = super::failing::GetUniformIndices;
    pub static mut GetUniformLocation: extern "C" fn(program: GLuint, name: *GLchar) -> GLint = super::failing::GetUniformLocation;
    pub static mut GetUniformLocationARB: extern "C" fn(programObj: GLhandleARB, name: *GLcharARB) -> GLint = super::failing::GetUniformLocationARB;
    pub static mut GetUniformOffsetEXT: extern "C" fn(program: GLuint, location: GLint) -> GLintptr = super::failing::GetUniformOffsetEXT;
    pub static mut GetUniformSubroutineuiv: extern "C" fn(shadertype: GLenum, location: GLint, params: *GLuint) -> c_void = super::failing::GetUniformSubroutineuiv;
    pub static mut GetUniformdv: extern "C" fn(program: GLuint, location: GLint, params: *GLdouble) -> c_void = super::failing::GetUniformdv;
    pub static mut GetUniformfv: extern "C" fn(program: GLuint, location: GLint, params: *GLfloat) -> c_void = super::failing::GetUniformfv;
    pub static mut GetUniformfvARB: extern "C" fn(programObj: GLhandleARB, location: GLint, params: *GLfloat) -> c_void = super::failing::GetUniformfvARB;
    pub static mut GetUniformi64vNV: extern "C" fn(program: GLuint, location: GLint, params: *GLint64EXT) -> c_void = super::failing::GetUniformi64vNV;
    pub static mut GetUniformiv: extern "C" fn(program: GLuint, location: GLint, params: *GLint) -> c_void = super::failing::GetUniformiv;
    pub static mut GetUniformivARB: extern "C" fn(programObj: GLhandleARB, location: GLint, params: *GLint) -> c_void = super::failing::GetUniformivARB;
    pub static mut GetUniformui64vNV: extern "C" fn(program: GLuint, location: GLint, params: *GLuint64EXT) -> c_void = super::failing::GetUniformui64vNV;
    pub static mut GetUniformuiv: extern "C" fn(program: GLuint, location: GLint, params: *GLuint) -> c_void = super::failing::GetUniformuiv;
    pub static mut GetUniformuivEXT: extern "C" fn(program: GLuint, location: GLint, params: *GLuint) -> c_void = super::failing::GetUniformuivEXT;
    pub static mut GetVariantArrayObjectfvATI: extern "C" fn(id: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetVariantArrayObjectfvATI;
    pub static mut GetVariantArrayObjectivATI: extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVariantArrayObjectivATI;
    pub static mut GetVariantBooleanvEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void = super::failing::GetVariantBooleanvEXT;
    pub static mut GetVariantFloatvEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void = super::failing::GetVariantFloatvEXT;
    pub static mut GetVariantIntegervEXT: extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void = super::failing::GetVariantIntegervEXT;
    pub static mut GetVariantPointervEXT: extern "C" fn(id: GLuint, value: GLenum, data: **GLvoid) -> c_void = super::failing::GetVariantPointervEXT;
    pub static mut GetVaryingLocationNV: extern "C" fn(program: GLuint, name: *GLchar) -> GLint = super::failing::GetVaryingLocationNV;
    pub static mut GetVertexArrayIntegeri_vEXT: extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) -> c_void = super::failing::GetVertexArrayIntegeri_vEXT;
    pub static mut GetVertexArrayIntegervEXT: extern "C" fn(vaobj: GLuint, pname: GLenum, param: *GLint) -> c_void = super::failing::GetVertexArrayIntegervEXT;
    pub static mut GetVertexArrayPointeri_vEXT: extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: **GLvoid) -> c_void = super::failing::GetVertexArrayPointeri_vEXT;
    pub static mut GetVertexArrayPointervEXT: extern "C" fn(vaobj: GLuint, pname: GLenum, param: **GLvoid) -> c_void = super::failing::GetVertexArrayPointervEXT;
    pub static mut GetVertexAttribArrayObjectfvATI: extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetVertexAttribArrayObjectfvATI;
    pub static mut GetVertexAttribArrayObjectivATI: extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVertexAttribArrayObjectivATI;
    pub static mut GetVertexAttribIiv: extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVertexAttribIiv;
    pub static mut GetVertexAttribIivEXT: extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVertexAttribIivEXT;
    pub static mut GetVertexAttribIuiv: extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetVertexAttribIuiv;
    pub static mut GetVertexAttribIuivEXT: extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetVertexAttribIuivEXT;
    pub static mut GetVertexAttribLdv: extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetVertexAttribLdv;
    pub static mut GetVertexAttribLdvEXT: extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetVertexAttribLdvEXT;
    pub static mut GetVertexAttribLi64vNV: extern "C" fn(index: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void = super::failing::GetVertexAttribLi64vNV;
    pub static mut GetVertexAttribLui64vARB: extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void = super::failing::GetVertexAttribLui64vARB;
    pub static mut GetVertexAttribLui64vNV: extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void = super::failing::GetVertexAttribLui64vNV;
    pub static mut GetVertexAttribPointerv: extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void = super::failing::GetVertexAttribPointerv;
    pub static mut GetVertexAttribPointervARB: extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void = super::failing::GetVertexAttribPointervARB;
    pub static mut GetVertexAttribPointervNV: extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void = super::failing::GetVertexAttribPointervNV;
    pub static mut GetVertexAttribdv: extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetVertexAttribdv;
    pub static mut GetVertexAttribdvARB: extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetVertexAttribdvARB;
    pub static mut GetVertexAttribdvNV: extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetVertexAttribdvNV;
    pub static mut GetVertexAttribfv: extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetVertexAttribfv;
    pub static mut GetVertexAttribfvARB: extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetVertexAttribfvARB;
    pub static mut GetVertexAttribfvNV: extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetVertexAttribfvNV;
    pub static mut GetVertexAttribiv: extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVertexAttribiv;
    pub static mut GetVertexAttribivARB: extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVertexAttribivARB;
    pub static mut GetVertexAttribivNV: extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVertexAttribivNV;
    pub static mut GetVideoCaptureStreamdvNV: extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void = super::failing::GetVideoCaptureStreamdvNV;
    pub static mut GetVideoCaptureStreamfvNV: extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::GetVideoCaptureStreamfvNV;
    pub static mut GetVideoCaptureStreamivNV: extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVideoCaptureStreamivNV;
    pub static mut GetVideoCaptureivNV: extern "C" fn(video_capture_slot: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVideoCaptureivNV;
    pub static mut GetVideoi64vNV: extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void = super::failing::GetVideoi64vNV;
    pub static mut GetVideoivNV: extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::GetVideoivNV;
    pub static mut GetVideoui64vNV: extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void = super::failing::GetVideoui64vNV;
    pub static mut GetVideouivNV: extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLuint) -> c_void = super::failing::GetVideouivNV;
    pub static mut GetnColorTableARB: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, table: *GLvoid) -> c_void = super::failing::GetnColorTableARB;
    pub static mut GetnCompressedTexImageARB: extern "C" fn(target: GLenum, lod: GLint, bufSize: GLsizei, img: *GLvoid) -> c_void = super::failing::GetnCompressedTexImageARB;
    pub static mut GetnConvolutionFilterARB: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, image: *GLvoid) -> c_void = super::failing::GetnConvolutionFilterARB;
    pub static mut GetnHistogramARB: extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void = super::failing::GetnHistogramARB;
    pub static mut GetnMapdvARB: extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) -> c_void = super::failing::GetnMapdvARB;
    pub static mut GetnMapfvARB: extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) -> c_void = super::failing::GetnMapfvARB;
    pub static mut GetnMapivARB: extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) -> c_void = super::failing::GetnMapivARB;
    pub static mut GetnMinmaxARB: extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void = super::failing::GetnMinmaxARB;
    pub static mut GetnPixelMapfvARB: extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLfloat) -> c_void = super::failing::GetnPixelMapfvARB;
    pub static mut GetnPixelMapuivARB: extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLuint) -> c_void = super::failing::GetnPixelMapuivARB;
    pub static mut GetnPixelMapusvARB: extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLushort) -> c_void = super::failing::GetnPixelMapusvARB;
    pub static mut GetnPolygonStippleARB: extern "C" fn(bufSize: GLsizei, pattern: *GLubyte) -> c_void = super::failing::GetnPolygonStippleARB;
    pub static mut GetnSeparableFilterARB: extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, rowBufSize: GLsizei, row: *GLvoid, columnBufSize: GLsizei, column: *GLvoid, span: *GLvoid) -> c_void = super::failing::GetnSeparableFilterARB;
    pub static mut GetnTexImageARB: extern "C" fn(target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: *GLvoid) -> c_void = super::failing::GetnTexImageARB;
    pub static mut GetnUniformdvARB: extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) -> c_void = super::failing::GetnUniformdvARB;
    pub static mut GetnUniformfvARB: extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void = super::failing::GetnUniformfvARB;
    pub static mut GetnUniformfvEXT: extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void = super::failing::GetnUniformfvEXT;
    pub static mut GetnUniformivARB: extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void = super::failing::GetnUniformivARB;
    pub static mut GetnUniformivEXT: extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void = super::failing::GetnUniformivEXT;
    pub static mut GetnUniformuivARB: extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> c_void = super::failing::GetnUniformuivARB;
    pub static mut GlobalAlphaFactorbSUN: extern "C" fn(factor: GLbyte) -> c_void = super::failing::GlobalAlphaFactorbSUN;
    pub static mut GlobalAlphaFactordSUN: extern "C" fn(factor: GLdouble) -> c_void = super::failing::GlobalAlphaFactordSUN;
    pub static mut GlobalAlphaFactorfSUN: extern "C" fn(factor: GLfloat) -> c_void = super::failing::GlobalAlphaFactorfSUN;
    pub static mut GlobalAlphaFactoriSUN: extern "C" fn(factor: GLint) -> c_void = super::failing::GlobalAlphaFactoriSUN;
    pub static mut GlobalAlphaFactorsSUN: extern "C" fn(factor: GLshort) -> c_void = super::failing::GlobalAlphaFactorsSUN;
    pub static mut GlobalAlphaFactorubSUN: extern "C" fn(factor: GLubyte) -> c_void = super::failing::GlobalAlphaFactorubSUN;
    pub static mut GlobalAlphaFactoruiSUN: extern "C" fn(factor: GLuint) -> c_void = super::failing::GlobalAlphaFactoruiSUN;
    pub static mut GlobalAlphaFactorusSUN: extern "C" fn(factor: GLushort) -> c_void = super::failing::GlobalAlphaFactorusSUN;
    pub static mut Hint: extern "C" fn(target: GLenum, mode: GLenum) -> c_void = super::failing::Hint;
    pub static mut HintPGI: extern "C" fn(target: GLenum, mode: GLint) -> c_void = super::failing::HintPGI;
    pub static mut Histogram: extern "C" fn(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void = super::failing::Histogram;
    pub static mut HistogramEXT: extern "C" fn(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void = super::failing::HistogramEXT;
    pub static mut IglooInterfaceSGIX: extern "C" fn(pname: GLenum, params: *GLvoid) -> c_void = super::failing::IglooInterfaceSGIX;
    pub static mut ImageTransformParameterfHP: extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::ImageTransformParameterfHP;
    pub static mut ImageTransformParameterfvHP: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::ImageTransformParameterfvHP;
    pub static mut ImageTransformParameteriHP: extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::ImageTransformParameteriHP;
    pub static mut ImageTransformParameterivHP: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::ImageTransformParameterivHP;
    pub static mut ImportSyncEXT: extern "C" fn(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync = super::failing::ImportSyncEXT;
    pub static mut IndexFormatNV: extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void = super::failing::IndexFormatNV;
    pub static mut IndexFuncEXT: extern "C" fn(func: GLenum, ref_: GLclampf) -> c_void = super::failing::IndexFuncEXT;
    pub static mut IndexMask: extern "C" fn(mask: GLuint) -> c_void = super::failing::IndexMask;
    pub static mut IndexMaterialEXT: extern "C" fn(face: GLenum, mode: GLenum) -> c_void = super::failing::IndexMaterialEXT;
    pub static mut IndexPointer: extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::IndexPointer;
    pub static mut IndexPointerEXT: extern "C" fn(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void = super::failing::IndexPointerEXT;
    pub static mut IndexPointerListIBM: extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void = super::failing::IndexPointerListIBM;
    pub static mut Indexd: extern "C" fn(c: GLdouble) -> c_void = super::failing::Indexd;
    pub static mut Indexdv: extern "C" fn(c: *GLdouble) -> c_void = super::failing::Indexdv;
    pub static mut Indexf: extern "C" fn(c: GLfloat) -> c_void = super::failing::Indexf;
    pub static mut Indexfv: extern "C" fn(c: *GLfloat) -> c_void = super::failing::Indexfv;
    pub static mut Indexi: extern "C" fn(c: GLint) -> c_void = super::failing::Indexi;
    pub static mut Indexiv: extern "C" fn(c: *GLint) -> c_void = super::failing::Indexiv;
    pub static mut Indexs: extern "C" fn(c: GLshort) -> c_void = super::failing::Indexs;
    pub static mut Indexsv: extern "C" fn(c: *GLshort) -> c_void = super::failing::Indexsv;
    pub static mut Indexub: extern "C" fn(c: GLubyte) -> c_void = super::failing::Indexub;
    pub static mut Indexubv: extern "C" fn(c: *GLubyte) -> c_void = super::failing::Indexubv;
    pub static mut IndexxOES: extern "C" fn(component: GLfixed) -> c_void = super::failing::IndexxOES;
    pub static mut IndexxvOES: extern "C" fn(component: *GLfixed) -> c_void = super::failing::IndexxvOES;
    pub static mut InitNames: extern "C" fn() -> c_void = super::failing::InitNames;
    pub static mut InsertComponentEXT: extern "C" fn(res: GLuint, src: GLuint, num: GLuint) -> c_void = super::failing::InsertComponentEXT;
    pub static mut InsertEventMarkerEXT: extern "C" fn(length: GLsizei, marker: *GLchar) -> c_void = super::failing::InsertEventMarkerEXT;
    pub static mut InstrumentsBufferSGIX: extern "C" fn(size: GLsizei, buffer: *GLint) -> c_void = super::failing::InstrumentsBufferSGIX;
    pub static mut InterleavedArrays: extern "C" fn(format: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::InterleavedArrays;
    pub static mut InterpolatePathsNV: extern "C" fn(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> c_void = super::failing::InterpolatePathsNV;
    pub static mut InvalidateBufferData: extern "C" fn(buffer: GLuint) -> c_void = super::failing::InvalidateBufferData;
    pub static mut InvalidateBufferSubData: extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void = super::failing::InvalidateBufferSubData;
    pub static mut InvalidateFramebuffer: extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void = super::failing::InvalidateFramebuffer;
    pub static mut InvalidateSubFramebuffer: extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::InvalidateSubFramebuffer;
    pub static mut InvalidateTexImage: extern "C" fn(texture: GLuint, level: GLint) -> c_void = super::failing::InvalidateTexImage;
    pub static mut InvalidateTexSubImage: extern "C" fn(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void = super::failing::InvalidateTexSubImage;
    pub static mut IsAsyncMarkerSGIX: extern "C" fn(marker: GLuint) -> GLboolean = super::failing::IsAsyncMarkerSGIX;
    pub static mut IsBuffer: extern "C" fn(buffer: GLuint) -> GLboolean = super::failing::IsBuffer;
    pub static mut IsBufferARB: extern "C" fn(buffer: GLuint) -> GLboolean = super::failing::IsBufferARB;
    pub static mut IsBufferResidentNV: extern "C" fn(target: GLenum) -> GLboolean = super::failing::IsBufferResidentNV;
    pub static mut IsEnabled: extern "C" fn(cap: GLenum) -> GLboolean = super::failing::IsEnabled;
    pub static mut IsEnabledIndexedEXT: extern "C" fn(target: GLenum, index: GLuint) -> GLboolean = super::failing::IsEnabledIndexedEXT;
    pub static mut IsEnabledi: extern "C" fn(target: GLenum, index: GLuint) -> GLboolean = super::failing::IsEnabledi;
    pub static mut IsFenceAPPLE: extern "C" fn(fence: GLuint) -> GLboolean = super::failing::IsFenceAPPLE;
    pub static mut IsFenceNV: extern "C" fn(fence: GLuint) -> GLboolean = super::failing::IsFenceNV;
    pub static mut IsFramebuffer: extern "C" fn(framebuffer: GLuint) -> GLboolean = super::failing::IsFramebuffer;
    pub static mut IsFramebufferEXT: extern "C" fn(framebuffer: GLuint) -> GLboolean = super::failing::IsFramebufferEXT;
    pub static mut IsFramebufferOES: extern "C" fn(framebuffer: GLuint) -> GLboolean = super::failing::IsFramebufferOES;
    pub static mut IsImageHandleResidentARB: extern "C" fn(handle: GLuint64) -> GLboolean = super::failing::IsImageHandleResidentARB;
    pub static mut IsImageHandleResidentNV: extern "C" fn(handle: GLuint64) -> GLboolean = super::failing::IsImageHandleResidentNV;
    pub static mut IsList: extern "C" fn(list: GLuint) -> GLboolean = super::failing::IsList;
    pub static mut IsNameAMD: extern "C" fn(identifier: GLenum, name: GLuint) -> GLboolean = super::failing::IsNameAMD;
    pub static mut IsNamedBufferResidentNV: extern "C" fn(buffer: GLuint) -> GLboolean = super::failing::IsNamedBufferResidentNV;
    pub static mut IsNamedStringARB: extern "C" fn(namelen: GLint, name: *GLchar) -> GLboolean = super::failing::IsNamedStringARB;
    pub static mut IsObjectBufferATI: extern "C" fn(buffer: GLuint) -> GLboolean = super::failing::IsObjectBufferATI;
    pub static mut IsOcclusionQueryNV: extern "C" fn(id: GLuint) -> GLboolean = super::failing::IsOcclusionQueryNV;
    pub static mut IsPathNV: extern "C" fn(path: GLuint) -> GLboolean = super::failing::IsPathNV;
    pub static mut IsPointInFillPathNV: extern "C" fn(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean = super::failing::IsPointInFillPathNV;
    pub static mut IsPointInStrokePathNV: extern "C" fn(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean = super::failing::IsPointInStrokePathNV;
    pub static mut IsProgram: extern "C" fn(program: GLuint) -> GLboolean = super::failing::IsProgram;
    pub static mut IsProgramARB: extern "C" fn(program: GLuint) -> GLboolean = super::failing::IsProgramARB;
    pub static mut IsProgramNV: extern "C" fn(id: GLuint) -> GLboolean = super::failing::IsProgramNV;
    pub static mut IsProgramPipeline: extern "C" fn(pipeline: GLuint) -> GLboolean = super::failing::IsProgramPipeline;
    pub static mut IsProgramPipelineEXT: extern "C" fn(pipeline: GLuint) -> GLboolean = super::failing::IsProgramPipelineEXT;
    pub static mut IsQuery: extern "C" fn(id: GLuint) -> GLboolean = super::failing::IsQuery;
    pub static mut IsQueryARB: extern "C" fn(id: GLuint) -> GLboolean = super::failing::IsQueryARB;
    pub static mut IsQueryEXT: extern "C" fn(id: GLuint) -> GLboolean = super::failing::IsQueryEXT;
    pub static mut IsRenderbuffer: extern "C" fn(renderbuffer: GLuint) -> GLboolean = super::failing::IsRenderbuffer;
    pub static mut IsRenderbufferEXT: extern "C" fn(renderbuffer: GLuint) -> GLboolean = super::failing::IsRenderbufferEXT;
    pub static mut IsRenderbufferOES: extern "C" fn(renderbuffer: GLuint) -> GLboolean = super::failing::IsRenderbufferOES;
    pub static mut IsSampler: extern "C" fn(sampler: GLuint) -> GLboolean = super::failing::IsSampler;
    pub static mut IsShader: extern "C" fn(shader: GLuint) -> GLboolean = super::failing::IsShader;
    pub static mut IsSync: extern "C" fn(sync: GLsync) -> GLboolean = super::failing::IsSync;
    pub static mut IsSyncAPPLE: extern "C" fn(sync: GLsync) -> GLboolean = super::failing::IsSyncAPPLE;
    pub static mut IsTexture: extern "C" fn(texture: GLuint) -> GLboolean = super::failing::IsTexture;
    pub static mut IsTextureEXT: extern "C" fn(texture: GLuint) -> GLboolean = super::failing::IsTextureEXT;
    pub static mut IsTextureHandleResidentARB: extern "C" fn(handle: GLuint64) -> GLboolean = super::failing::IsTextureHandleResidentARB;
    pub static mut IsTextureHandleResidentNV: extern "C" fn(handle: GLuint64) -> GLboolean = super::failing::IsTextureHandleResidentNV;
    pub static mut IsTransformFeedback: extern "C" fn(id: GLuint) -> GLboolean = super::failing::IsTransformFeedback;
    pub static mut IsTransformFeedbackNV: extern "C" fn(id: GLuint) -> GLboolean = super::failing::IsTransformFeedbackNV;
    pub static mut IsVariantEnabledEXT: extern "C" fn(id: GLuint, cap: GLenum) -> GLboolean = super::failing::IsVariantEnabledEXT;
    pub static mut IsVertexArray: extern "C" fn(array: GLuint) -> GLboolean = super::failing::IsVertexArray;
    pub static mut IsVertexArrayAPPLE: extern "C" fn(array: GLuint) -> GLboolean = super::failing::IsVertexArrayAPPLE;
    pub static mut IsVertexArrayOES: extern "C" fn(array: GLuint) -> GLboolean = super::failing::IsVertexArrayOES;
    pub static mut IsVertexAttribEnabledAPPLE: extern "C" fn(index: GLuint, pname: GLenum) -> GLboolean = super::failing::IsVertexAttribEnabledAPPLE;
    pub static mut LabelObjectEXT: extern "C" fn(type_: GLenum, object: GLuint, length: GLsizei, label: *GLchar) -> c_void = super::failing::LabelObjectEXT;
    pub static mut LightEnviSGIX: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::LightEnviSGIX;
    pub static mut LightModelf: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::LightModelf;
    pub static mut LightModelfv: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::LightModelfv;
    pub static mut LightModeli: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::LightModeli;
    pub static mut LightModeliv: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::LightModeliv;
    pub static mut LightModelx: extern "C" fn(pname: GLenum, param: GLfixed) -> c_void = super::failing::LightModelx;
    pub static mut LightModelxOES: extern "C" fn(pname: GLenum, param: GLfixed) -> c_void = super::failing::LightModelxOES;
    pub static mut LightModelxv: extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void = super::failing::LightModelxv;
    pub static mut LightModelxvOES: extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void = super::failing::LightModelxvOES;
    pub static mut Lightf: extern "C" fn(light: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::Lightf;
    pub static mut Lightfv: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::Lightfv;
    pub static mut Lighti: extern "C" fn(light: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::Lighti;
    pub static mut Lightiv: extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::Lightiv;
    pub static mut Lightx: extern "C" fn(light: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::Lightx;
    pub static mut LightxOES: extern "C" fn(light: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::LightxOES;
    pub static mut Lightxv: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::Lightxv;
    pub static mut LightxvOES: extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::LightxvOES;
    pub static mut LineStipple: extern "C" fn(factor: GLint, pattern: GLushort) -> c_void = super::failing::LineStipple;
    pub static mut LineWidth: extern "C" fn(width: GLfloat) -> c_void = super::failing::LineWidth;
    pub static mut LineWidthx: extern "C" fn(width: GLfixed) -> c_void = super::failing::LineWidthx;
    pub static mut LineWidthxOES: extern "C" fn(width: GLfixed) -> c_void = super::failing::LineWidthxOES;
    pub static mut LinkProgram: extern "C" fn(program: GLuint) -> c_void = super::failing::LinkProgram;
    pub static mut LinkProgramARB: extern "C" fn(programObj: GLhandleARB) -> c_void = super::failing::LinkProgramARB;
    pub static mut ListBase: extern "C" fn(base: GLuint) -> c_void = super::failing::ListBase;
    pub static mut ListParameterfSGIX: extern "C" fn(list: GLuint, pname: GLenum, param: GLfloat) -> c_void = super::failing::ListParameterfSGIX;
    pub static mut ListParameterfvSGIX: extern "C" fn(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::ListParameterfvSGIX;
    pub static mut ListParameteriSGIX: extern "C" fn(list: GLuint, pname: GLenum, param: GLint) -> c_void = super::failing::ListParameteriSGIX;
    pub static mut ListParameterivSGIX: extern "C" fn(list: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::ListParameterivSGIX;
    pub static mut LoadIdentity: extern "C" fn() -> c_void = super::failing::LoadIdentity;
    pub static mut LoadIdentityDeformationMapSGIX: extern "C" fn(mask: GLbitfield) -> c_void = super::failing::LoadIdentityDeformationMapSGIX;
    pub static mut LoadMatrixd: extern "C" fn(m: *GLdouble) -> c_void = super::failing::LoadMatrixd;
    pub static mut LoadMatrixf: extern "C" fn(m: *GLfloat) -> c_void = super::failing::LoadMatrixf;
    pub static mut LoadMatrixx: extern "C" fn(m: *GLfixed) -> c_void = super::failing::LoadMatrixx;
    pub static mut LoadMatrixxOES: extern "C" fn(m: *GLfixed) -> c_void = super::failing::LoadMatrixxOES;
    pub static mut LoadName: extern "C" fn(name: GLuint) -> c_void = super::failing::LoadName;
    pub static mut LoadPaletteFromModelViewMatrixOES: extern "C" fn() -> c_void = super::failing::LoadPaletteFromModelViewMatrixOES;
    pub static mut LoadProgramNV: extern "C" fn(target: GLenum, id: GLuint, len: GLsizei, program: *GLubyte) -> c_void = super::failing::LoadProgramNV;
    pub static mut LoadTransposeMatrixd: extern "C" fn(m: *GLdouble) -> c_void = super::failing::LoadTransposeMatrixd;
    pub static mut LoadTransposeMatrixdARB: extern "C" fn(m: *GLdouble) -> c_void = super::failing::LoadTransposeMatrixdARB;
    pub static mut LoadTransposeMatrixf: extern "C" fn(m: *GLfloat) -> c_void = super::failing::LoadTransposeMatrixf;
    pub static mut LoadTransposeMatrixfARB: extern "C" fn(m: *GLfloat) -> c_void = super::failing::LoadTransposeMatrixfARB;
    pub static mut LoadTransposeMatrixxOES: extern "C" fn(m: *GLfixed) -> c_void = super::failing::LoadTransposeMatrixxOES;
    pub static mut LockArraysEXT: extern "C" fn(first: GLint, count: GLsizei) -> c_void = super::failing::LockArraysEXT;
    pub static mut LogicOp: extern "C" fn(opcode: GLenum) -> c_void = super::failing::LogicOp;
    pub static mut MakeBufferNonResidentNV: extern "C" fn(target: GLenum) -> c_void = super::failing::MakeBufferNonResidentNV;
    pub static mut MakeBufferResidentNV: extern "C" fn(target: GLenum, access: GLenum) -> c_void = super::failing::MakeBufferResidentNV;
    pub static mut MakeImageHandleNonResidentARB: extern "C" fn(handle: GLuint64) -> c_void = super::failing::MakeImageHandleNonResidentARB;
    pub static mut MakeImageHandleNonResidentNV: extern "C" fn(handle: GLuint64) -> c_void = super::failing::MakeImageHandleNonResidentNV;
    pub static mut MakeImageHandleResidentARB: extern "C" fn(handle: GLuint64, access: GLenum) -> c_void = super::failing::MakeImageHandleResidentARB;
    pub static mut MakeImageHandleResidentNV: extern "C" fn(handle: GLuint64, access: GLenum) -> c_void = super::failing::MakeImageHandleResidentNV;
    pub static mut MakeNamedBufferNonResidentNV: extern "C" fn(buffer: GLuint) -> c_void = super::failing::MakeNamedBufferNonResidentNV;
    pub static mut MakeNamedBufferResidentNV: extern "C" fn(buffer: GLuint, access: GLenum) -> c_void = super::failing::MakeNamedBufferResidentNV;
    pub static mut MakeTextureHandleNonResidentARB: extern "C" fn(handle: GLuint64) -> c_void = super::failing::MakeTextureHandleNonResidentARB;
    pub static mut MakeTextureHandleNonResidentNV: extern "C" fn(handle: GLuint64) -> c_void = super::failing::MakeTextureHandleNonResidentNV;
    pub static mut MakeTextureHandleResidentARB: extern "C" fn(handle: GLuint64) -> c_void = super::failing::MakeTextureHandleResidentARB;
    pub static mut MakeTextureHandleResidentNV: extern "C" fn(handle: GLuint64) -> c_void = super::failing::MakeTextureHandleResidentNV;
    pub static mut Map1d: extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void = super::failing::Map1d;
    pub static mut Map1f: extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void = super::failing::Map1f;
    pub static mut Map1xOES: extern "C" fn(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) -> c_void = super::failing::Map1xOES;
    pub static mut Map2d: extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void = super::failing::Map2d;
    pub static mut Map2f: extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void = super::failing::Map2f;
    pub static mut Map2xOES: extern "C" fn(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) -> c_void = super::failing::Map2xOES;
    pub static mut MapBuffer: extern "C" fn(target: GLenum, access: GLenum) -> *c_void = super::failing::MapBuffer;
    pub static mut MapBufferARB: extern "C" fn(target: GLenum, access: GLenum) -> *c_void = super::failing::MapBufferARB;
    pub static mut MapBufferOES: extern "C" fn(target: GLenum, access: GLenum) -> *c_void = super::failing::MapBufferOES;
    pub static mut MapBufferRange: extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void = super::failing::MapBufferRange;
    pub static mut MapBufferRangeEXT: extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void = super::failing::MapBufferRangeEXT;
    pub static mut MapControlPointsNV: extern "C" fn(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *GLvoid) -> c_void = super::failing::MapControlPointsNV;
    pub static mut MapGrid1d: extern "C" fn(un: GLint, u1: GLdouble, u2: GLdouble) -> c_void = super::failing::MapGrid1d;
    pub static mut MapGrid1f: extern "C" fn(un: GLint, u1: GLfloat, u2: GLfloat) -> c_void = super::failing::MapGrid1f;
    pub static mut MapGrid1xOES: extern "C" fn(n: GLint, u1: GLfixed, u2: GLfixed) -> c_void = super::failing::MapGrid1xOES;
    pub static mut MapGrid2d: extern "C" fn(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> c_void = super::failing::MapGrid2d;
    pub static mut MapGrid2f: extern "C" fn(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> c_void = super::failing::MapGrid2f;
    pub static mut MapGrid2xOES: extern "C" fn(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) -> c_void = super::failing::MapGrid2xOES;
    pub static mut MapNamedBufferEXT: extern "C" fn(buffer: GLuint, access: GLenum) -> *c_void = super::failing::MapNamedBufferEXT;
    pub static mut MapNamedBufferRangeEXT: extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void = super::failing::MapNamedBufferRangeEXT;
    pub static mut MapObjectBufferATI: extern "C" fn(buffer: GLuint) -> *c_void = super::failing::MapObjectBufferATI;
    pub static mut MapParameterfvNV: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::MapParameterfvNV;
    pub static mut MapParameterivNV: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::MapParameterivNV;
    pub static mut MapTexture2DINTEL: extern "C" fn(texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) -> *c_void = super::failing::MapTexture2DINTEL;
    pub static mut MapVertexAttrib1dAPPLE: extern "C" fn(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void = super::failing::MapVertexAttrib1dAPPLE;
    pub static mut MapVertexAttrib1fAPPLE: extern "C" fn(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void = super::failing::MapVertexAttrib1fAPPLE;
    pub static mut MapVertexAttrib2dAPPLE: extern "C" fn(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void = super::failing::MapVertexAttrib2dAPPLE;
    pub static mut MapVertexAttrib2fAPPLE: extern "C" fn(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void = super::failing::MapVertexAttrib2fAPPLE;
    pub static mut Materialf: extern "C" fn(face: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::Materialf;
    pub static mut Materialfv: extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::Materialfv;
    pub static mut Materiali: extern "C" fn(face: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::Materiali;
    pub static mut Materialiv: extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::Materialiv;
    pub static mut Materialx: extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::Materialx;
    pub static mut MaterialxOES: extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::MaterialxOES;
    pub static mut Materialxv: extern "C" fn(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void = super::failing::Materialxv;
    pub static mut MaterialxvOES: extern "C" fn(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void = super::failing::MaterialxvOES;
    pub static mut MatrixFrustumEXT: extern "C" fn(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void = super::failing::MatrixFrustumEXT;
    pub static mut MatrixIndexPointerARB: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::MatrixIndexPointerARB;
    pub static mut MatrixIndexPointerOES: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::MatrixIndexPointerOES;
    pub static mut MatrixIndexubvARB: extern "C" fn(size: GLint, indices: *GLubyte) -> c_void = super::failing::MatrixIndexubvARB;
    pub static mut MatrixIndexuivARB: extern "C" fn(size: GLint, indices: *GLuint) -> c_void = super::failing::MatrixIndexuivARB;
    pub static mut MatrixIndexusvARB: extern "C" fn(size: GLint, indices: *GLushort) -> c_void = super::failing::MatrixIndexusvARB;
    pub static mut MatrixLoadIdentityEXT: extern "C" fn(mode: GLenum) -> c_void = super::failing::MatrixLoadIdentityEXT;
    pub static mut MatrixLoadTransposedEXT: extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void = super::failing::MatrixLoadTransposedEXT;
    pub static mut MatrixLoadTransposefEXT: extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void = super::failing::MatrixLoadTransposefEXT;
    pub static mut MatrixLoaddEXT: extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void = super::failing::MatrixLoaddEXT;
    pub static mut MatrixLoadfEXT: extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void = super::failing::MatrixLoadfEXT;
    pub static mut MatrixMode: extern "C" fn(mode: GLenum) -> c_void = super::failing::MatrixMode;
    pub static mut MatrixMultTransposedEXT: extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void = super::failing::MatrixMultTransposedEXT;
    pub static mut MatrixMultTransposefEXT: extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void = super::failing::MatrixMultTransposefEXT;
    pub static mut MatrixMultdEXT: extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void = super::failing::MatrixMultdEXT;
    pub static mut MatrixMultfEXT: extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void = super::failing::MatrixMultfEXT;
    pub static mut MatrixOrthoEXT: extern "C" fn(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void = super::failing::MatrixOrthoEXT;
    pub static mut MatrixPopEXT: extern "C" fn(mode: GLenum) -> c_void = super::failing::MatrixPopEXT;
    pub static mut MatrixPushEXT: extern "C" fn(mode: GLenum) -> c_void = super::failing::MatrixPushEXT;
    pub static mut MatrixRotatedEXT: extern "C" fn(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::MatrixRotatedEXT;
    pub static mut MatrixRotatefEXT: extern "C" fn(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::MatrixRotatefEXT;
    pub static mut MatrixScaledEXT: extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::MatrixScaledEXT;
    pub static mut MatrixScalefEXT: extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::MatrixScalefEXT;
    pub static mut MatrixTranslatedEXT: extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::MatrixTranslatedEXT;
    pub static mut MatrixTranslatefEXT: extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::MatrixTranslatefEXT;
    pub static mut MemoryBarrier: extern "C" fn(barriers: GLbitfield) -> c_void = super::failing::MemoryBarrier;
    pub static mut MemoryBarrierEXT: extern "C" fn(barriers: GLbitfield) -> c_void = super::failing::MemoryBarrierEXT;
    pub static mut MinSampleShading: extern "C" fn(value: GLfloat) -> c_void = super::failing::MinSampleShading;
    pub static mut MinSampleShadingARB: extern "C" fn(value: GLfloat) -> c_void = super::failing::MinSampleShadingARB;
    pub static mut Minmax: extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void = super::failing::Minmax;
    pub static mut MinmaxEXT: extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void = super::failing::MinmaxEXT;
    pub static mut MultMatrixd: extern "C" fn(m: *GLdouble) -> c_void = super::failing::MultMatrixd;
    pub static mut MultMatrixf: extern "C" fn(m: *GLfloat) -> c_void = super::failing::MultMatrixf;
    pub static mut MultMatrixx: extern "C" fn(m: *GLfixed) -> c_void = super::failing::MultMatrixx;
    pub static mut MultMatrixxOES: extern "C" fn(m: *GLfixed) -> c_void = super::failing::MultMatrixxOES;
    pub static mut MultTransposeMatrixd: extern "C" fn(m: *GLdouble) -> c_void = super::failing::MultTransposeMatrixd;
    pub static mut MultTransposeMatrixdARB: extern "C" fn(m: *GLdouble) -> c_void = super::failing::MultTransposeMatrixdARB;
    pub static mut MultTransposeMatrixf: extern "C" fn(m: *GLfloat) -> c_void = super::failing::MultTransposeMatrixf;
    pub static mut MultTransposeMatrixfARB: extern "C" fn(m: *GLfloat) -> c_void = super::failing::MultTransposeMatrixfARB;
    pub static mut MultTransposeMatrixxOES: extern "C" fn(m: *GLfixed) -> c_void = super::failing::MultTransposeMatrixxOES;
    pub static mut MultiDrawArrays: extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) -> c_void = super::failing::MultiDrawArrays;
    pub static mut MultiDrawArraysEXT: extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void = super::failing::MultiDrawArraysEXT;
    pub static mut MultiDrawArraysIndirect: extern "C" fn(mode: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void = super::failing::MultiDrawArraysIndirect;
    pub static mut MultiDrawArraysIndirectAMD: extern "C" fn(mode: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void = super::failing::MultiDrawArraysIndirectAMD;
    pub static mut MultiDrawArraysIndirectBindlessNV: extern "C" fn(mode: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void = super::failing::MultiDrawArraysIndirectBindlessNV;
    pub static mut MultiDrawElementsIndirectBindlessNV: extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void = super::failing::MultiDrawElementsIndirectBindlessNV;
    pub static mut MultiDrawArraysIndirectCountARB: extern "C" fn(mode: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void = super::failing::MultiDrawArraysIndirectCountARB;
    pub static mut MultiDrawElementArrayAPPLE: extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void = super::failing::MultiDrawElementArrayAPPLE;
    pub static mut MultiDrawElements: extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei) -> c_void = super::failing::MultiDrawElements;
    pub static mut MultiDrawElementsBaseVertex: extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei, basevertex: *GLint) -> c_void = super::failing::MultiDrawElementsBaseVertex;
    pub static mut MultiDrawElementsEXT: extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei) -> c_void = super::failing::MultiDrawElementsEXT;
    pub static mut MultiDrawElementsIndirect: extern "C" fn(mode: GLenum, type_: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void = super::failing::MultiDrawElementsIndirect;
    pub static mut MultiDrawElementsIndirectAMD: extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void = super::failing::MultiDrawElementsIndirectAMD;
    pub static mut MultiDrawElementsIndirectCountARB: extern "C" fn(mode: GLenum, type_: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void = super::failing::MultiDrawElementsIndirectCountARB;
    pub static mut MultiDrawRangeElementArrayAPPLE: extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void = super::failing::MultiDrawRangeElementArrayAPPLE;
    pub static mut MultiModeDrawArraysIBM: extern "C" fn(mode: *GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei, modestride: GLint) -> c_void = super::failing::MultiModeDrawArraysIBM;
    pub static mut MultiModeDrawElementsIBM: extern "C" fn(mode: *GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei, modestride: GLint) -> c_void = super::failing::MultiModeDrawElementsIBM;
    pub static mut MultiTexBufferEXT: extern "C" fn(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void = super::failing::MultiTexBufferEXT;
    pub static mut MultiTexCoord1bOES: extern "C" fn(texture: GLenum, s: GLbyte) -> c_void = super::failing::MultiTexCoord1bOES;
    pub static mut MultiTexCoord1bvOES: extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void = super::failing::MultiTexCoord1bvOES;
    pub static mut MultiTexCoord1d: extern "C" fn(target: GLenum, s: GLdouble) -> c_void = super::failing::MultiTexCoord1d;
    pub static mut MultiTexCoord1dARB: extern "C" fn(target: GLenum, s: GLdouble) -> c_void = super::failing::MultiTexCoord1dARB;
    pub static mut MultiTexCoord1dv: extern "C" fn(target: GLenum, v: *GLdouble) -> c_void = super::failing::MultiTexCoord1dv;
    pub static mut MultiTexCoord1dvARB: extern "C" fn(target: GLenum, v: *GLdouble) -> c_void = super::failing::MultiTexCoord1dvARB;
    pub static mut MultiTexCoord1f: extern "C" fn(target: GLenum, s: GLfloat) -> c_void = super::failing::MultiTexCoord1f;
    pub static mut MultiTexCoord1fARB: extern "C" fn(target: GLenum, s: GLfloat) -> c_void = super::failing::MultiTexCoord1fARB;
    pub static mut MultiTexCoord1fv: extern "C" fn(target: GLenum, v: *GLfloat) -> c_void = super::failing::MultiTexCoord1fv;
    pub static mut MultiTexCoord1fvARB: extern "C" fn(target: GLenum, v: *GLfloat) -> c_void = super::failing::MultiTexCoord1fvARB;
    pub static mut MultiTexCoord1hNV: extern "C" fn(target: GLenum, s: GLhalfNV) -> c_void = super::failing::MultiTexCoord1hNV;
    pub static mut MultiTexCoord1hvNV: extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void = super::failing::MultiTexCoord1hvNV;
    pub static mut MultiTexCoord1i: extern "C" fn(target: GLenum, s: GLint) -> c_void = super::failing::MultiTexCoord1i;
    pub static mut MultiTexCoord1iARB: extern "C" fn(target: GLenum, s: GLint) -> c_void = super::failing::MultiTexCoord1iARB;
    pub static mut MultiTexCoord1iv: extern "C" fn(target: GLenum, v: *GLint) -> c_void = super::failing::MultiTexCoord1iv;
    pub static mut MultiTexCoord1ivARB: extern "C" fn(target: GLenum, v: *GLint) -> c_void = super::failing::MultiTexCoord1ivARB;
    pub static mut MultiTexCoord1s: extern "C" fn(target: GLenum, s: GLshort) -> c_void = super::failing::MultiTexCoord1s;
    pub static mut MultiTexCoord1sARB: extern "C" fn(target: GLenum, s: GLshort) -> c_void = super::failing::MultiTexCoord1sARB;
    pub static mut MultiTexCoord1sv: extern "C" fn(target: GLenum, v: *GLshort) -> c_void = super::failing::MultiTexCoord1sv;
    pub static mut MultiTexCoord1svARB: extern "C" fn(target: GLenum, v: *GLshort) -> c_void = super::failing::MultiTexCoord1svARB;
    pub static mut MultiTexCoord1xOES: extern "C" fn(texture: GLenum, s: GLfixed) -> c_void = super::failing::MultiTexCoord1xOES;
    pub static mut MultiTexCoord1xvOES: extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void = super::failing::MultiTexCoord1xvOES;
    pub static mut MultiTexCoord2bOES: extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte) -> c_void = super::failing::MultiTexCoord2bOES;
    pub static mut MultiTexCoord2bvOES: extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void = super::failing::MultiTexCoord2bvOES;
    pub static mut MultiTexCoord2d: extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble) -> c_void = super::failing::MultiTexCoord2d;
    pub static mut MultiTexCoord2dARB: extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble) -> c_void = super::failing::MultiTexCoord2dARB;
    pub static mut MultiTexCoord2dv: extern "C" fn(target: GLenum, v: *GLdouble) -> c_void = super::failing::MultiTexCoord2dv;
    pub static mut MultiTexCoord2dvARB: extern "C" fn(target: GLenum, v: *GLdouble) -> c_void = super::failing::MultiTexCoord2dvARB;
    pub static mut MultiTexCoord2f: extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat) -> c_void = super::failing::MultiTexCoord2f;
    pub static mut MultiTexCoord2fARB: extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat) -> c_void = super::failing::MultiTexCoord2fARB;
    pub static mut MultiTexCoord2fv: extern "C" fn(target: GLenum, v: *GLfloat) -> c_void = super::failing::MultiTexCoord2fv;
    pub static mut MultiTexCoord2fvARB: extern "C" fn(target: GLenum, v: *GLfloat) -> c_void = super::failing::MultiTexCoord2fvARB;
    pub static mut MultiTexCoord2hNV: extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV) -> c_void = super::failing::MultiTexCoord2hNV;
    pub static mut MultiTexCoord2hvNV: extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void = super::failing::MultiTexCoord2hvNV;
    pub static mut MultiTexCoord2i: extern "C" fn(target: GLenum, s: GLint, t: GLint) -> c_void = super::failing::MultiTexCoord2i;
    pub static mut MultiTexCoord2iARB: extern "C" fn(target: GLenum, s: GLint, t: GLint) -> c_void = super::failing::MultiTexCoord2iARB;
    pub static mut MultiTexCoord2iv: extern "C" fn(target: GLenum, v: *GLint) -> c_void = super::failing::MultiTexCoord2iv;
    pub static mut MultiTexCoord2ivARB: extern "C" fn(target: GLenum, v: *GLint) -> c_void = super::failing::MultiTexCoord2ivARB;
    pub static mut MultiTexCoord2s: extern "C" fn(target: GLenum, s: GLshort, t: GLshort) -> c_void = super::failing::MultiTexCoord2s;
    pub static mut MultiTexCoord2sARB: extern "C" fn(target: GLenum, s: GLshort, t: GLshort) -> c_void = super::failing::MultiTexCoord2sARB;
    pub static mut MultiTexCoord2sv: extern "C" fn(target: GLenum, v: *GLshort) -> c_void = super::failing::MultiTexCoord2sv;
    pub static mut MultiTexCoord2svARB: extern "C" fn(target: GLenum, v: *GLshort) -> c_void = super::failing::MultiTexCoord2svARB;
    pub static mut MultiTexCoord2xOES: extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed) -> c_void = super::failing::MultiTexCoord2xOES;
    pub static mut MultiTexCoord2xvOES: extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void = super::failing::MultiTexCoord2xvOES;
    pub static mut MultiTexCoord3bOES: extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) -> c_void = super::failing::MultiTexCoord3bOES;
    pub static mut MultiTexCoord3bvOES: extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void = super::failing::MultiTexCoord3bvOES;
    pub static mut MultiTexCoord3d: extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void = super::failing::MultiTexCoord3d;
    pub static mut MultiTexCoord3dARB: extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void = super::failing::MultiTexCoord3dARB;
    pub static mut MultiTexCoord3dv: extern "C" fn(target: GLenum, v: *GLdouble) -> c_void = super::failing::MultiTexCoord3dv;
    pub static mut MultiTexCoord3dvARB: extern "C" fn(target: GLenum, v: *GLdouble) -> c_void = super::failing::MultiTexCoord3dvARB;
    pub static mut MultiTexCoord3f: extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void = super::failing::MultiTexCoord3f;
    pub static mut MultiTexCoord3fARB: extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void = super::failing::MultiTexCoord3fARB;
    pub static mut MultiTexCoord3fv: extern "C" fn(target: GLenum, v: *GLfloat) -> c_void = super::failing::MultiTexCoord3fv;
    pub static mut MultiTexCoord3fvARB: extern "C" fn(target: GLenum, v: *GLfloat) -> c_void = super::failing::MultiTexCoord3fvARB;
    pub static mut MultiTexCoord3hNV: extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void = super::failing::MultiTexCoord3hNV;
    pub static mut MultiTexCoord3hvNV: extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void = super::failing::MultiTexCoord3hvNV;
    pub static mut MultiTexCoord3i: extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void = super::failing::MultiTexCoord3i;
    pub static mut MultiTexCoord3iARB: extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void = super::failing::MultiTexCoord3iARB;
    pub static mut MultiTexCoord3iv: extern "C" fn(target: GLenum, v: *GLint) -> c_void = super::failing::MultiTexCoord3iv;
    pub static mut MultiTexCoord3ivARB: extern "C" fn(target: GLenum, v: *GLint) -> c_void = super::failing::MultiTexCoord3ivARB;
    pub static mut MultiTexCoord3s: extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void = super::failing::MultiTexCoord3s;
    pub static mut MultiTexCoord3sARB: extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void = super::failing::MultiTexCoord3sARB;
    pub static mut MultiTexCoord3sv: extern "C" fn(target: GLenum, v: *GLshort) -> c_void = super::failing::MultiTexCoord3sv;
    pub static mut MultiTexCoord3svARB: extern "C" fn(target: GLenum, v: *GLshort) -> c_void = super::failing::MultiTexCoord3svARB;
    pub static mut MultiTexCoord3xOES: extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) -> c_void = super::failing::MultiTexCoord3xOES;
    pub static mut MultiTexCoord3xvOES: extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void = super::failing::MultiTexCoord3xvOES;
    pub static mut MultiTexCoord4bOES: extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void = super::failing::MultiTexCoord4bOES;
    pub static mut MultiTexCoord4bvOES: extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void = super::failing::MultiTexCoord4bvOES;
    pub static mut MultiTexCoord4d: extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void = super::failing::MultiTexCoord4d;
    pub static mut MultiTexCoord4dARB: extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void = super::failing::MultiTexCoord4dARB;
    pub static mut MultiTexCoord4dv: extern "C" fn(target: GLenum, v: *GLdouble) -> c_void = super::failing::MultiTexCoord4dv;
    pub static mut MultiTexCoord4dvARB: extern "C" fn(target: GLenum, v: *GLdouble) -> c_void = super::failing::MultiTexCoord4dvARB;
    pub static mut MultiTexCoord4f: extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void = super::failing::MultiTexCoord4f;
    pub static mut MultiTexCoord4fARB: extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void = super::failing::MultiTexCoord4fARB;
    pub static mut MultiTexCoord4fv: extern "C" fn(target: GLenum, v: *GLfloat) -> c_void = super::failing::MultiTexCoord4fv;
    pub static mut MultiTexCoord4fvARB: extern "C" fn(target: GLenum, v: *GLfloat) -> c_void = super::failing::MultiTexCoord4fvARB;
    pub static mut MultiTexCoord4hNV: extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void = super::failing::MultiTexCoord4hNV;
    pub static mut MultiTexCoord4hvNV: extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void = super::failing::MultiTexCoord4hvNV;
    pub static mut MultiTexCoord4i: extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void = super::failing::MultiTexCoord4i;
    pub static mut MultiTexCoord4iARB: extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void = super::failing::MultiTexCoord4iARB;
    pub static mut MultiTexCoord4iv: extern "C" fn(target: GLenum, v: *GLint) -> c_void = super::failing::MultiTexCoord4iv;
    pub static mut MultiTexCoord4ivARB: extern "C" fn(target: GLenum, v: *GLint) -> c_void = super::failing::MultiTexCoord4ivARB;
    pub static mut MultiTexCoord4s: extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void = super::failing::MultiTexCoord4s;
    pub static mut MultiTexCoord4sARB: extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void = super::failing::MultiTexCoord4sARB;
    pub static mut MultiTexCoord4sv: extern "C" fn(target: GLenum, v: *GLshort) -> c_void = super::failing::MultiTexCoord4sv;
    pub static mut MultiTexCoord4svARB: extern "C" fn(target: GLenum, v: *GLshort) -> c_void = super::failing::MultiTexCoord4svARB;
    pub static mut MultiTexCoord4x: extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void = super::failing::MultiTexCoord4x;
    pub static mut MultiTexCoord4xOES: extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void = super::failing::MultiTexCoord4xOES;
    pub static mut MultiTexCoord4xvOES: extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void = super::failing::MultiTexCoord4xvOES;
    pub static mut MultiTexCoordP1ui: extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void = super::failing::MultiTexCoordP1ui;
    pub static mut MultiTexCoordP1uiv: extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void = super::failing::MultiTexCoordP1uiv;
    pub static mut MultiTexCoordP2ui: extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void = super::failing::MultiTexCoordP2ui;
    pub static mut MultiTexCoordP2uiv: extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void = super::failing::MultiTexCoordP2uiv;
    pub static mut MultiTexCoordP3ui: extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void = super::failing::MultiTexCoordP3ui;
    pub static mut MultiTexCoordP3uiv: extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void = super::failing::MultiTexCoordP3uiv;
    pub static mut MultiTexCoordP4ui: extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void = super::failing::MultiTexCoordP4ui;
    pub static mut MultiTexCoordP4uiv: extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void = super::failing::MultiTexCoordP4uiv;
    pub static mut MultiTexCoordPointerEXT: extern "C" fn(texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::MultiTexCoordPointerEXT;
    pub static mut MultiTexEnvfEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::MultiTexEnvfEXT;
    pub static mut MultiTexEnvfvEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::MultiTexEnvfvEXT;
    pub static mut MultiTexEnviEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::MultiTexEnviEXT;
    pub static mut MultiTexEnvivEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::MultiTexEnvivEXT;
    pub static mut MultiTexGendEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) -> c_void = super::failing::MultiTexGendEXT;
    pub static mut MultiTexGendvEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void = super::failing::MultiTexGendvEXT;
    pub static mut MultiTexGenfEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::MultiTexGenfEXT;
    pub static mut MultiTexGenfvEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::MultiTexGenfvEXT;
    pub static mut MultiTexGeniEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::MultiTexGeniEXT;
    pub static mut MultiTexGenivEXT: extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::MultiTexGenivEXT;
    pub static mut MultiTexImage1DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::MultiTexImage1DEXT;
    pub static mut MultiTexImage2DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::MultiTexImage2DEXT;
    pub static mut MultiTexImage3DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::MultiTexImage3DEXT;
    pub static mut MultiTexParameterIivEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::MultiTexParameterIivEXT;
    pub static mut MultiTexParameterIuivEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void = super::failing::MultiTexParameterIuivEXT;
    pub static mut MultiTexParameterfEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::MultiTexParameterfEXT;
    pub static mut MultiTexParameterfvEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::MultiTexParameterfvEXT;
    pub static mut MultiTexParameteriEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::MultiTexParameteriEXT;
    pub static mut MultiTexParameterivEXT: extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::MultiTexParameterivEXT;
    pub static mut MultiTexRenderbufferEXT: extern "C" fn(texunit: GLenum, target: GLenum, renderbuffer: GLuint) -> c_void = super::failing::MultiTexRenderbufferEXT;
    pub static mut MultiTexSubImage1DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::MultiTexSubImage1DEXT;
    pub static mut MultiTexSubImage2DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::MultiTexSubImage2DEXT;
    pub static mut MultiTexSubImage3DEXT: extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::MultiTexSubImage3DEXT;
    pub static mut NamedBufferDataEXT: extern "C" fn(buffer: GLuint, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void = super::failing::NamedBufferDataEXT;
    pub static mut NamedBufferStorageEXT: extern "C" fn(buffer: GLuint, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void = super::failing::NamedBufferStorageEXT;
    pub static mut NamedBufferSubDataEXT: extern "C" fn(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void = super::failing::NamedBufferSubDataEXT;
    pub static mut NamedCopyBufferSubDataEXT: extern "C" fn(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void = super::failing::NamedCopyBufferSubDataEXT;
    pub static mut NamedFramebufferParameteriEXT: extern "C" fn(framebuffer: GLuint, pname: GLenum, param: GLint) -> c_void = super::failing::NamedFramebufferParameteriEXT;
    pub static mut NamedFramebufferRenderbufferEXT: extern "C" fn(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void = super::failing::NamedFramebufferRenderbufferEXT;
    pub static mut NamedFramebufferTexture1DEXT: extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::NamedFramebufferTexture1DEXT;
    pub static mut NamedFramebufferTexture2DEXT: extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::NamedFramebufferTexture2DEXT;
    pub static mut NamedFramebufferTexture3DEXT: extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void = super::failing::NamedFramebufferTexture3DEXT;
    pub static mut NamedFramebufferTextureEXT: extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> c_void = super::failing::NamedFramebufferTextureEXT;
    pub static mut NamedFramebufferTextureFaceEXT: extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void = super::failing::NamedFramebufferTextureFaceEXT;
    pub static mut NamedFramebufferTextureLayerEXT: extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void = super::failing::NamedFramebufferTextureLayerEXT;
    pub static mut NamedProgramLocalParameter4dEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::NamedProgramLocalParameter4dEXT;
    pub static mut NamedProgramLocalParameter4dvEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void = super::failing::NamedProgramLocalParameter4dvEXT;
    pub static mut NamedProgramLocalParameter4fEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::NamedProgramLocalParameter4fEXT;
    pub static mut NamedProgramLocalParameter4fvEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void = super::failing::NamedProgramLocalParameter4fvEXT;
    pub static mut NamedProgramLocalParameterI4iEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::NamedProgramLocalParameterI4iEXT;
    pub static mut NamedProgramLocalParameterI4ivEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void = super::failing::NamedProgramLocalParameterI4ivEXT;
    pub static mut NamedProgramLocalParameterI4uiEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void = super::failing::NamedProgramLocalParameterI4uiEXT;
    pub static mut NamedProgramLocalParameterI4uivEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void = super::failing::NamedProgramLocalParameterI4uivEXT;
    pub static mut NamedProgramLocalParameters4fvEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void = super::failing::NamedProgramLocalParameters4fvEXT;
    pub static mut NamedProgramLocalParametersI4ivEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void = super::failing::NamedProgramLocalParametersI4ivEXT;
    pub static mut NamedProgramLocalParametersI4uivEXT: extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void = super::failing::NamedProgramLocalParametersI4uivEXT;
    pub static mut NamedProgramStringEXT: extern "C" fn(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void = super::failing::NamedProgramStringEXT;
    pub static mut NamedRenderbufferStorageEXT: extern "C" fn(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::NamedRenderbufferStorageEXT;
    pub static mut NamedRenderbufferStorageMultisampleCoverageEXT: extern "C" fn(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::NamedRenderbufferStorageMultisampleCoverageEXT;
    pub static mut NamedRenderbufferStorageMultisampleEXT: extern "C" fn(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::NamedRenderbufferStorageMultisampleEXT;
    pub static mut NamedStringARB: extern "C" fn(type_: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, string: *GLchar) -> c_void = super::failing::NamedStringARB;
    pub static mut NewList: extern "C" fn(list: GLuint, mode: GLenum) -> c_void = super::failing::NewList;
    pub static mut NewObjectBufferATI: extern "C" fn(size: GLsizei, pointer: *GLvoid, usage: GLenum) -> GLuint = super::failing::NewObjectBufferATI;
    pub static mut Normal3b: extern "C" fn(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void = super::failing::Normal3b;
    pub static mut Normal3bv: extern "C" fn(v: *GLbyte) -> c_void = super::failing::Normal3bv;
    pub static mut Normal3d: extern "C" fn(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void = super::failing::Normal3d;
    pub static mut Normal3dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::Normal3dv;
    pub static mut Normal3f: extern "C" fn(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void = super::failing::Normal3f;
    pub static mut Normal3fVertex3fSUN: extern "C" fn(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::Normal3fVertex3fSUN;
    pub static mut Normal3fVertex3fvSUN: extern "C" fn(n: *GLfloat, v: *GLfloat) -> c_void = super::failing::Normal3fVertex3fvSUN;
    pub static mut Normal3fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::Normal3fv;
    pub static mut Normal3hNV: extern "C" fn(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) -> c_void = super::failing::Normal3hNV;
    pub static mut Normal3hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::Normal3hvNV;
    pub static mut Normal3i: extern "C" fn(nx: GLint, ny: GLint, nz: GLint) -> c_void = super::failing::Normal3i;
    pub static mut Normal3iv: extern "C" fn(v: *GLint) -> c_void = super::failing::Normal3iv;
    pub static mut Normal3s: extern "C" fn(nx: GLshort, ny: GLshort, nz: GLshort) -> c_void = super::failing::Normal3s;
    pub static mut Normal3sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::Normal3sv;
    pub static mut Normal3x: extern "C" fn(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void = super::failing::Normal3x;
    pub static mut Normal3xOES: extern "C" fn(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void = super::failing::Normal3xOES;
    pub static mut Normal3xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::Normal3xvOES;
    pub static mut NormalFormatNV: extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void = super::failing::NormalFormatNV;
    pub static mut NormalP3ui: extern "C" fn(type_: GLenum, coords: GLuint) -> c_void = super::failing::NormalP3ui;
    pub static mut NormalP3uiv: extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void = super::failing::NormalP3uiv;
    pub static mut NormalPointer: extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::NormalPointer;
    pub static mut NormalPointerEXT: extern "C" fn(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void = super::failing::NormalPointerEXT;
    pub static mut NormalPointerListIBM: extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void = super::failing::NormalPointerListIBM;
    pub static mut NormalPointervINTEL: extern "C" fn(type_: GLenum, pointer: **GLvoid) -> c_void = super::failing::NormalPointervINTEL;
    pub static mut NormalStream3bATI: extern "C" fn(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void = super::failing::NormalStream3bATI;
    pub static mut NormalStream3bvATI: extern "C" fn(stream: GLenum, coords: *GLbyte) -> c_void = super::failing::NormalStream3bvATI;
    pub static mut NormalStream3dATI: extern "C" fn(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void = super::failing::NormalStream3dATI;
    pub static mut NormalStream3dvATI: extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void = super::failing::NormalStream3dvATI;
    pub static mut NormalStream3fATI: extern "C" fn(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void = super::failing::NormalStream3fATI;
    pub static mut NormalStream3fvATI: extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void = super::failing::NormalStream3fvATI;
    pub static mut NormalStream3iATI: extern "C" fn(stream: GLenum, nx: GLint, ny: GLint, nz: GLint) -> c_void = super::failing::NormalStream3iATI;
    pub static mut NormalStream3ivATI: extern "C" fn(stream: GLenum, coords: *GLint) -> c_void = super::failing::NormalStream3ivATI;
    pub static mut NormalStream3sATI: extern "C" fn(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) -> c_void = super::failing::NormalStream3sATI;
    pub static mut NormalStream3svATI: extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void = super::failing::NormalStream3svATI;
    pub static mut ObjectLabel: extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void = super::failing::ObjectLabel;
    pub static mut ObjectLabelKHR: extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void = super::failing::ObjectLabelKHR;
    pub static mut ObjectPtrLabel: extern "C" fn(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void = super::failing::ObjectPtrLabel;
    pub static mut ObjectPtrLabelKHR: extern "C" fn(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void = super::failing::ObjectPtrLabelKHR;
    pub static mut ObjectPurgeableAPPLE: extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum = super::failing::ObjectPurgeableAPPLE;
    pub static mut ObjectUnpurgeableAPPLE: extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum = super::failing::ObjectUnpurgeableAPPLE;
    pub static mut Ortho: extern "C" fn(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void = super::failing::Ortho;
    pub static mut Orthof: extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void = super::failing::Orthof;
    pub static mut OrthofOES: extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void = super::failing::OrthofOES;
    pub static mut Orthox: extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void = super::failing::Orthox;
    pub static mut OrthoxOES: extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void = super::failing::OrthoxOES;
    pub static mut PNTrianglesfATI: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::PNTrianglesfATI;
    pub static mut PNTrianglesiATI: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::PNTrianglesiATI;
    pub static mut PassTexCoordATI: extern "C" fn(dst: GLuint, coord: GLuint, swizzle: GLenum) -> c_void = super::failing::PassTexCoordATI;
    pub static mut PassThrough: extern "C" fn(token: GLfloat) -> c_void = super::failing::PassThrough;
    pub static mut PassThroughxOES: extern "C" fn(token: GLfixed) -> c_void = super::failing::PassThroughxOES;
    pub static mut PatchParameterfv: extern "C" fn(pname: GLenum, values: *GLfloat) -> c_void = super::failing::PatchParameterfv;
    pub static mut PatchParameteri: extern "C" fn(pname: GLenum, value: GLint) -> c_void = super::failing::PatchParameteri;
    pub static mut PathColorGenNV: extern "C" fn(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: *GLfloat) -> c_void = super::failing::PathColorGenNV;
    pub static mut PathCommandsNV: extern "C" fn(path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void = super::failing::PathCommandsNV;
    pub static mut PathCoordsNV: extern "C" fn(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void = super::failing::PathCoordsNV;
    pub static mut PathCoverDepthFuncNV: extern "C" fn(func: GLenum) -> c_void = super::failing::PathCoverDepthFuncNV;
    pub static mut PathDashArrayNV: extern "C" fn(path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) -> c_void = super::failing::PathDashArrayNV;
    pub static mut PathFogGenNV: extern "C" fn(genMode: GLenum) -> c_void = super::failing::PathFogGenNV;
    pub static mut PathGlyphRangeNV: extern "C" fn(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void = super::failing::PathGlyphRangeNV;
    pub static mut PathGlyphsNV: extern "C" fn(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: *GLvoid, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void = super::failing::PathGlyphsNV;
    pub static mut PathParameterfNV: extern "C" fn(path: GLuint, pname: GLenum, value: GLfloat) -> c_void = super::failing::PathParameterfNV;
    pub static mut PathParameterfvNV: extern "C" fn(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void = super::failing::PathParameterfvNV;
    pub static mut PathParameteriNV: extern "C" fn(path: GLuint, pname: GLenum, value: GLint) -> c_void = super::failing::PathParameteriNV;
    pub static mut PathParameterivNV: extern "C" fn(path: GLuint, pname: GLenum, value: *GLint) -> c_void = super::failing::PathParameterivNV;
    pub static mut PathStencilDepthOffsetNV: extern "C" fn(factor: GLfloat, units: GLfloat) -> c_void = super::failing::PathStencilDepthOffsetNV;
    pub static mut PathStencilFuncNV: extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint) -> c_void = super::failing::PathStencilFuncNV;
    pub static mut PathStringNV: extern "C" fn(path: GLuint, format: GLenum, length: GLsizei, pathString: *GLvoid) -> c_void = super::failing::PathStringNV;
    pub static mut PathSubCommandsNV: extern "C" fn(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void = super::failing::PathSubCommandsNV;
    pub static mut PathSubCoordsNV: extern "C" fn(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void = super::failing::PathSubCoordsNV;
    pub static mut PathTexGenNV: extern "C" fn(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: *GLfloat) -> c_void = super::failing::PathTexGenNV;
    pub static mut PauseTransformFeedback: extern "C" fn() -> c_void = super::failing::PauseTransformFeedback;
    pub static mut PauseTransformFeedbackNV: extern "C" fn() -> c_void = super::failing::PauseTransformFeedbackNV;
    pub static mut PixelDataRangeNV: extern "C" fn(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void = super::failing::PixelDataRangeNV;
    pub static mut PixelMapfv: extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLfloat) -> c_void = super::failing::PixelMapfv;
    pub static mut PixelMapuiv: extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLuint) -> c_void = super::failing::PixelMapuiv;
    pub static mut PixelMapusv: extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLushort) -> c_void = super::failing::PixelMapusv;
    pub static mut PixelMapx: extern "C" fn(map: GLenum, size: GLint, values: *GLfixed) -> c_void = super::failing::PixelMapx;
    pub static mut PixelStoref: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::PixelStoref;
    pub static mut PixelStorei: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::PixelStorei;
    pub static mut PixelStorex: extern "C" fn(pname: GLenum, param: GLfixed) -> c_void = super::failing::PixelStorex;
    pub static mut PixelTexGenParameterfSGIS: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::PixelTexGenParameterfSGIS;
    pub static mut PixelTexGenParameterfvSGIS: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::PixelTexGenParameterfvSGIS;
    pub static mut PixelTexGenParameteriSGIS: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::PixelTexGenParameteriSGIS;
    pub static mut PixelTexGenParameterivSGIS: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::PixelTexGenParameterivSGIS;
    pub static mut PixelTexGenSGIX: extern "C" fn(mode: GLenum) -> c_void = super::failing::PixelTexGenSGIX;
    pub static mut PixelTransferf: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::PixelTransferf;
    pub static mut PixelTransferi: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::PixelTransferi;
    pub static mut PixelTransferxOES: extern "C" fn(pname: GLenum, param: GLfixed) -> c_void = super::failing::PixelTransferxOES;
    pub static mut PixelTransformParameterfEXT: extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::PixelTransformParameterfEXT;
    pub static mut PixelTransformParameterfvEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::PixelTransformParameterfvEXT;
    pub static mut PixelTransformParameteriEXT: extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::PixelTransformParameteriEXT;
    pub static mut PixelTransformParameterivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::PixelTransformParameterivEXT;
    pub static mut PixelZoom: extern "C" fn(xfactor: GLfloat, yfactor: GLfloat) -> c_void = super::failing::PixelZoom;
    pub static mut PixelZoomxOES: extern "C" fn(xfactor: GLfixed, yfactor: GLfixed) -> c_void = super::failing::PixelZoomxOES;
    pub static mut PointAlongPathNV: extern "C" fn(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean = super::failing::PointAlongPathNV;
    pub static mut PointParameterf: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::PointParameterf;
    pub static mut PointParameterfARB: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::PointParameterfARB;
    pub static mut PointParameterfEXT: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::PointParameterfEXT;
    pub static mut PointParameterfSGIS: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::PointParameterfSGIS;
    pub static mut PointParameterfv: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::PointParameterfv;
    pub static mut PointParameterfvARB: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::PointParameterfvARB;
    pub static mut PointParameterfvEXT: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::PointParameterfvEXT;
    pub static mut PointParameterfvSGIS: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::PointParameterfvSGIS;
    pub static mut PointParameteri: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::PointParameteri;
    pub static mut PointParameteriNV: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::PointParameteriNV;
    pub static mut PointParameteriv: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::PointParameteriv;
    pub static mut PointParameterivNV: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::PointParameterivNV;
    pub static mut PointParameterx: extern "C" fn(pname: GLenum, param: GLfixed) -> c_void = super::failing::PointParameterx;
    pub static mut PointParameterxOES: extern "C" fn(pname: GLenum, param: GLfixed) -> c_void = super::failing::PointParameterxOES;
    pub static mut PointParameterxv: extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void = super::failing::PointParameterxv;
    pub static mut PointParameterxvOES: extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void = super::failing::PointParameterxvOES;
    pub static mut PointSize: extern "C" fn(size: GLfloat) -> c_void = super::failing::PointSize;
    pub static mut PointSizePointerOES: extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *c_void) -> c_void = super::failing::PointSizePointerOES;
    pub static mut PointSizex: extern "C" fn(size: GLfixed) -> c_void = super::failing::PointSizex;
    pub static mut PointSizexOES: extern "C" fn(size: GLfixed) -> c_void = super::failing::PointSizexOES;
    pub static mut PollAsyncSGIX: extern "C" fn(markerp: *GLuint) -> GLint = super::failing::PollAsyncSGIX;
    pub static mut PollInstrumentsSGIX: extern "C" fn(marker_p: *GLint) -> GLint = super::failing::PollInstrumentsSGIX;
    pub static mut PolygonMode: extern "C" fn(face: GLenum, mode: GLenum) -> c_void = super::failing::PolygonMode;
    pub static mut PolygonOffset: extern "C" fn(factor: GLfloat, units: GLfloat) -> c_void = super::failing::PolygonOffset;
    pub static mut PolygonOffsetEXT: extern "C" fn(factor: GLfloat, bias: GLfloat) -> c_void = super::failing::PolygonOffsetEXT;
    pub static mut PolygonOffsetx: extern "C" fn(factor: GLfixed, units: GLfixed) -> c_void = super::failing::PolygonOffsetx;
    pub static mut PolygonOffsetxOES: extern "C" fn(factor: GLfixed, units: GLfixed) -> c_void = super::failing::PolygonOffsetxOES;
    pub static mut PolygonStipple: extern "C" fn(mask: *GLubyte) -> c_void = super::failing::PolygonStipple;
    pub static mut PopAttrib: extern "C" fn() -> c_void = super::failing::PopAttrib;
    pub static mut PopClientAttrib: extern "C" fn() -> c_void = super::failing::PopClientAttrib;
    pub static mut PopDebugGroup: extern "C" fn() -> c_void = super::failing::PopDebugGroup;
    pub static mut PopDebugGroupKHR: extern "C" fn() -> c_void = super::failing::PopDebugGroupKHR;
    pub static mut PopGroupMarkerEXT: extern "C" fn() -> c_void = super::failing::PopGroupMarkerEXT;
    pub static mut PopMatrix: extern "C" fn() -> c_void = super::failing::PopMatrix;
    pub static mut PopName: extern "C" fn() -> c_void = super::failing::PopName;
    pub static mut PresentFrameDualFillNV: extern "C" fn(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) -> c_void = super::failing::PresentFrameDualFillNV;
    pub static mut PresentFrameKeyedNV: extern "C" fn(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) -> c_void = super::failing::PresentFrameKeyedNV;
    pub static mut PrimitiveRestartIndex: extern "C" fn(index: GLuint) -> c_void = super::failing::PrimitiveRestartIndex;
    pub static mut PrimitiveRestartIndexNV: extern "C" fn(index: GLuint) -> c_void = super::failing::PrimitiveRestartIndexNV;
    pub static mut PrimitiveRestartNV: extern "C" fn() -> c_void = super::failing::PrimitiveRestartNV;
    pub static mut PrioritizeTextures: extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLfloat) -> c_void = super::failing::PrioritizeTextures;
    pub static mut PrioritizeTexturesEXT: extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLclampf) -> c_void = super::failing::PrioritizeTexturesEXT;
    pub static mut PrioritizeTexturesxOES: extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLfixed) -> c_void = super::failing::PrioritizeTexturesxOES;
    pub static mut ProgramBinary: extern "C" fn(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void = super::failing::ProgramBinary;
    pub static mut ProgramBinaryOES: extern "C" fn(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLint) -> c_void = super::failing::ProgramBinaryOES;
    pub static mut ProgramBufferParametersIivNV: extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLint) -> c_void = super::failing::ProgramBufferParametersIivNV;
    pub static mut ProgramBufferParametersIuivNV: extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLuint) -> c_void = super::failing::ProgramBufferParametersIuivNV;
    pub static mut ProgramBufferParametersfvNV: extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLfloat) -> c_void = super::failing::ProgramBufferParametersfvNV;
    pub static mut ProgramEnvParameter4dARB: extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::ProgramEnvParameter4dARB;
    pub static mut ProgramEnvParameter4dvARB: extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void = super::failing::ProgramEnvParameter4dvARB;
    pub static mut ProgramEnvParameter4fARB: extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::ProgramEnvParameter4fARB;
    pub static mut ProgramEnvParameter4fvARB: extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void = super::failing::ProgramEnvParameter4fvARB;
    pub static mut ProgramEnvParameterI4iNV: extern "C" fn(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::ProgramEnvParameterI4iNV;
    pub static mut ProgramEnvParameterI4ivNV: extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void = super::failing::ProgramEnvParameterI4ivNV;
    pub static mut ProgramEnvParameterI4uiNV: extern "C" fn(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void = super::failing::ProgramEnvParameterI4uiNV;
    pub static mut ProgramEnvParameterI4uivNV: extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void = super::failing::ProgramEnvParameterI4uivNV;
    pub static mut ProgramEnvParameters4fvEXT: extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void = super::failing::ProgramEnvParameters4fvEXT;
    pub static mut ProgramEnvParametersI4ivNV: extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void = super::failing::ProgramEnvParametersI4ivNV;
    pub static mut ProgramEnvParametersI4uivNV: extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void = super::failing::ProgramEnvParametersI4uivNV;
    pub static mut ProgramLocalParameter4dARB: extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::ProgramLocalParameter4dARB;
    pub static mut ProgramLocalParameter4dvARB: extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void = super::failing::ProgramLocalParameter4dvARB;
    pub static mut ProgramLocalParameter4fARB: extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::ProgramLocalParameter4fARB;
    pub static mut ProgramLocalParameter4fvARB: extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void = super::failing::ProgramLocalParameter4fvARB;
    pub static mut ProgramLocalParameterI4iNV: extern "C" fn(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::ProgramLocalParameterI4iNV;
    pub static mut ProgramLocalParameterI4ivNV: extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void = super::failing::ProgramLocalParameterI4ivNV;
    pub static mut ProgramLocalParameterI4uiNV: extern "C" fn(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void = super::failing::ProgramLocalParameterI4uiNV;
    pub static mut ProgramLocalParameterI4uivNV: extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void = super::failing::ProgramLocalParameterI4uivNV;
    pub static mut ProgramLocalParameters4fvEXT: extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void = super::failing::ProgramLocalParameters4fvEXT;
    pub static mut ProgramLocalParametersI4ivNV: extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void = super::failing::ProgramLocalParametersI4ivNV;
    pub static mut ProgramLocalParametersI4uivNV: extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void = super::failing::ProgramLocalParametersI4uivNV;
    pub static mut ProgramNamedParameter4dNV: extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::ProgramNamedParameter4dNV;
    pub static mut ProgramNamedParameter4dvNV: extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLdouble) -> c_void = super::failing::ProgramNamedParameter4dvNV;
    pub static mut ProgramNamedParameter4fNV: extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::ProgramNamedParameter4fNV;
    pub static mut ProgramNamedParameter4fvNV: extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLfloat) -> c_void = super::failing::ProgramNamedParameter4fvNV;
    pub static mut ProgramParameter4dNV: extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::ProgramParameter4dNV;
    pub static mut ProgramParameter4dvNV: extern "C" fn(target: GLenum, index: GLuint, v: *GLdouble) -> c_void = super::failing::ProgramParameter4dvNV;
    pub static mut ProgramParameter4fNV: extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::ProgramParameter4fNV;
    pub static mut ProgramParameter4fvNV: extern "C" fn(target: GLenum, index: GLuint, v: *GLfloat) -> c_void = super::failing::ProgramParameter4fvNV;
    pub static mut ProgramParameteri: extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void = super::failing::ProgramParameteri;
    pub static mut ProgramParameteriARB: extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void = super::failing::ProgramParameteriARB;
    pub static mut ProgramParameteriEXT: extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void = super::failing::ProgramParameteriEXT;
    pub static mut ProgramParameters4dvNV: extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void = super::failing::ProgramParameters4dvNV;
    pub static mut ProgramParameters4fvNV: extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void = super::failing::ProgramParameters4fvNV;
    pub static mut ProgramStringARB: extern "C" fn(target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void = super::failing::ProgramStringARB;
    pub static mut ProgramSubroutineParametersuivNV: extern "C" fn(target: GLenum, count: GLsizei, params: *GLuint) -> c_void = super::failing::ProgramSubroutineParametersuivNV;
    pub static mut ProgramUniform1d: extern "C" fn(program: GLuint, location: GLint, v0: GLdouble) -> c_void = super::failing::ProgramUniform1d;
    pub static mut ProgramUniform1dEXT: extern "C" fn(program: GLuint, location: GLint, x: GLdouble) -> c_void = super::failing::ProgramUniform1dEXT;
    pub static mut ProgramUniform1dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::ProgramUniform1dv;
    pub static mut ProgramUniform1dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::ProgramUniform1dvEXT;
    pub static mut ProgramUniform1f: extern "C" fn(program: GLuint, location: GLint, v0: GLfloat) -> c_void = super::failing::ProgramUniform1f;
    pub static mut ProgramUniform1fEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLfloat) -> c_void = super::failing::ProgramUniform1fEXT;
    pub static mut ProgramUniform1fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::ProgramUniform1fv;
    pub static mut ProgramUniform1fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::ProgramUniform1fvEXT;
    pub static mut ProgramUniform1i: extern "C" fn(program: GLuint, location: GLint, v0: GLint) -> c_void = super::failing::ProgramUniform1i;
    pub static mut ProgramUniform1i64NV: extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT) -> c_void = super::failing::ProgramUniform1i64NV;
    pub static mut ProgramUniform1i64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void = super::failing::ProgramUniform1i64vNV;
    pub static mut ProgramUniform1iEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLint) -> c_void = super::failing::ProgramUniform1iEXT;
    pub static mut ProgramUniform1iv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::ProgramUniform1iv;
    pub static mut ProgramUniform1ivEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::ProgramUniform1ivEXT;
    pub static mut ProgramUniform1ui: extern "C" fn(program: GLuint, location: GLint, v0: GLuint) -> c_void = super::failing::ProgramUniform1ui;
    pub static mut ProgramUniform1ui64NV: extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT) -> c_void = super::failing::ProgramUniform1ui64NV;
    pub static mut ProgramUniform1ui64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::ProgramUniform1ui64vNV;
    pub static mut ProgramUniform1uiEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLuint) -> c_void = super::failing::ProgramUniform1uiEXT;
    pub static mut ProgramUniform1uiv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::ProgramUniform1uiv;
    pub static mut ProgramUniform1uivEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::ProgramUniform1uivEXT;
    pub static mut ProgramUniform2d: extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> c_void = super::failing::ProgramUniform2d;
    pub static mut ProgramUniform2dEXT: extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble) -> c_void = super::failing::ProgramUniform2dEXT;
    pub static mut ProgramUniform2dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::ProgramUniform2dv;
    pub static mut ProgramUniform2dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::ProgramUniform2dvEXT;
    pub static mut ProgramUniform2f: extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void = super::failing::ProgramUniform2f;
    pub static mut ProgramUniform2fEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void = super::failing::ProgramUniform2fEXT;
    pub static mut ProgramUniform2fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::ProgramUniform2fv;
    pub static mut ProgramUniform2fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::ProgramUniform2fvEXT;
    pub static mut ProgramUniform2i: extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void = super::failing::ProgramUniform2i;
    pub static mut ProgramUniform2i64NV: extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void = super::failing::ProgramUniform2i64NV;
    pub static mut ProgramUniform2i64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void = super::failing::ProgramUniform2i64vNV;
    pub static mut ProgramUniform2iEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void = super::failing::ProgramUniform2iEXT;
    pub static mut ProgramUniform2iv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::ProgramUniform2iv;
    pub static mut ProgramUniform2ivEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::ProgramUniform2ivEXT;
    pub static mut ProgramUniform2ui: extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void = super::failing::ProgramUniform2ui;
    pub static mut ProgramUniform2ui64NV: extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void = super::failing::ProgramUniform2ui64NV;
    pub static mut ProgramUniform2ui64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::ProgramUniform2ui64vNV;
    pub static mut ProgramUniform2uiEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void = super::failing::ProgramUniform2uiEXT;
    pub static mut ProgramUniform2uiv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::ProgramUniform2uiv;
    pub static mut ProgramUniform2uivEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::ProgramUniform2uivEXT;
    pub static mut ProgramUniform3d: extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> c_void = super::failing::ProgramUniform3d;
    pub static mut ProgramUniform3dEXT: extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::ProgramUniform3dEXT;
    pub static mut ProgramUniform3dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::ProgramUniform3dv;
    pub static mut ProgramUniform3dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::ProgramUniform3dvEXT;
    pub static mut ProgramUniform3f: extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void = super::failing::ProgramUniform3f;
    pub static mut ProgramUniform3fEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void = super::failing::ProgramUniform3fEXT;
    pub static mut ProgramUniform3fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::ProgramUniform3fv;
    pub static mut ProgramUniform3fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::ProgramUniform3fvEXT;
    pub static mut ProgramUniform3i: extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void = super::failing::ProgramUniform3i;
    pub static mut ProgramUniform3i64NV: extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void = super::failing::ProgramUniform3i64NV;
    pub static mut ProgramUniform3i64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void = super::failing::ProgramUniform3i64vNV;
    pub static mut ProgramUniform3iEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void = super::failing::ProgramUniform3iEXT;
    pub static mut ProgramUniform3iv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::ProgramUniform3iv;
    pub static mut ProgramUniform3ivEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::ProgramUniform3ivEXT;
    pub static mut ProgramUniform3ui: extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void = super::failing::ProgramUniform3ui;
    pub static mut ProgramUniform3ui64NV: extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void = super::failing::ProgramUniform3ui64NV;
    pub static mut ProgramUniform3ui64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::ProgramUniform3ui64vNV;
    pub static mut ProgramUniform3uiEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void = super::failing::ProgramUniform3uiEXT;
    pub static mut ProgramUniform3uiv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::ProgramUniform3uiv;
    pub static mut ProgramUniform3uivEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::ProgramUniform3uivEXT;
    pub static mut ProgramUniform4d: extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> c_void = super::failing::ProgramUniform4d;
    pub static mut ProgramUniform4dEXT: extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::ProgramUniform4dEXT;
    pub static mut ProgramUniform4dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::ProgramUniform4dv;
    pub static mut ProgramUniform4dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::ProgramUniform4dvEXT;
    pub static mut ProgramUniform4f: extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void = super::failing::ProgramUniform4f;
    pub static mut ProgramUniform4fEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void = super::failing::ProgramUniform4fEXT;
    pub static mut ProgramUniform4fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::ProgramUniform4fv;
    pub static mut ProgramUniform4fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::ProgramUniform4fvEXT;
    pub static mut ProgramUniform4i: extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void = super::failing::ProgramUniform4i;
    pub static mut ProgramUniform4i64NV: extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void = super::failing::ProgramUniform4i64NV;
    pub static mut ProgramUniform4i64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void = super::failing::ProgramUniform4i64vNV;
    pub static mut ProgramUniform4iEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void = super::failing::ProgramUniform4iEXT;
    pub static mut ProgramUniform4iv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::ProgramUniform4iv;
    pub static mut ProgramUniform4ivEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::ProgramUniform4ivEXT;
    pub static mut ProgramUniform4ui: extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void = super::failing::ProgramUniform4ui;
    pub static mut ProgramUniform4ui64NV: extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void = super::failing::ProgramUniform4ui64NV;
    pub static mut ProgramUniform4ui64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::ProgramUniform4ui64vNV;
    pub static mut ProgramUniform4uiEXT: extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void = super::failing::ProgramUniform4uiEXT;
    pub static mut ProgramUniform4uiv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::ProgramUniform4uiv;
    pub static mut ProgramUniform4uivEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::ProgramUniform4uivEXT;
    pub static mut ProgramUniformHandleui64ARB: extern "C" fn(program: GLuint, location: GLint, value: GLuint64) -> c_void = super::failing::ProgramUniformHandleui64ARB;
    pub static mut ProgramUniformHandleui64NV: extern "C" fn(program: GLuint, location: GLint, value: GLuint64) -> c_void = super::failing::ProgramUniformHandleui64NV;
    pub static mut ProgramUniformHandleui64vARB: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void = super::failing::ProgramUniformHandleui64vARB;
    pub static mut ProgramUniformHandleui64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void = super::failing::ProgramUniformHandleui64vNV;
    pub static mut ProgramUniformMatrix2dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix2dv;
    pub static mut ProgramUniformMatrix2dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix2dvEXT;
    pub static mut ProgramUniformMatrix2fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix2fv;
    pub static mut ProgramUniformMatrix2fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix2fvEXT;
    pub static mut ProgramUniformMatrix2x3dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix2x3dv;
    pub static mut ProgramUniformMatrix2x3dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix2x3dvEXT;
    pub static mut ProgramUniformMatrix2x3fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix2x3fv;
    pub static mut ProgramUniformMatrix2x3fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix2x3fvEXT;
    pub static mut ProgramUniformMatrix2x4dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix2x4dv;
    pub static mut ProgramUniformMatrix2x4dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix2x4dvEXT;
    pub static mut ProgramUniformMatrix2x4fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix2x4fv;
    pub static mut ProgramUniformMatrix2x4fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix2x4fvEXT;
    pub static mut ProgramUniformMatrix3dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix3dv;
    pub static mut ProgramUniformMatrix3dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix3dvEXT;
    pub static mut ProgramUniformMatrix3fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix3fv;
    pub static mut ProgramUniformMatrix3fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix3fvEXT;
    pub static mut ProgramUniformMatrix3x2dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix3x2dv;
    pub static mut ProgramUniformMatrix3x2dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix3x2dvEXT;
    pub static mut ProgramUniformMatrix3x2fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix3x2fv;
    pub static mut ProgramUniformMatrix3x2fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix3x2fvEXT;
    pub static mut ProgramUniformMatrix3x4dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix3x4dv;
    pub static mut ProgramUniformMatrix3x4dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix3x4dvEXT;
    pub static mut ProgramUniformMatrix3x4fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix3x4fv;
    pub static mut ProgramUniformMatrix3x4fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix3x4fvEXT;
    pub static mut ProgramUniformMatrix4dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix4dv;
    pub static mut ProgramUniformMatrix4dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix4dvEXT;
    pub static mut ProgramUniformMatrix4fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix4fv;
    pub static mut ProgramUniformMatrix4fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix4fvEXT;
    pub static mut ProgramUniformMatrix4x2dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix4x2dv;
    pub static mut ProgramUniformMatrix4x2dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix4x2dvEXT;
    pub static mut ProgramUniformMatrix4x2fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix4x2fv;
    pub static mut ProgramUniformMatrix4x2fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix4x2fvEXT;
    pub static mut ProgramUniformMatrix4x3dv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix4x3dv;
    pub static mut ProgramUniformMatrix4x3dvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::ProgramUniformMatrix4x3dvEXT;
    pub static mut ProgramUniformMatrix4x3fv: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix4x3fv;
    pub static mut ProgramUniformMatrix4x3fvEXT: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::ProgramUniformMatrix4x3fvEXT;
    pub static mut ProgramUniformui64NV: extern "C" fn(program: GLuint, location: GLint, value: GLuint64EXT) -> c_void = super::failing::ProgramUniformui64NV;
    pub static mut ProgramUniformui64vNV: extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::ProgramUniformui64vNV;
    pub static mut ProgramVertexLimitNV: extern "C" fn(target: GLenum, limit: GLint) -> c_void = super::failing::ProgramVertexLimitNV;
    pub static mut ProvokingVertex: extern "C" fn(mode: GLenum) -> c_void = super::failing::ProvokingVertex;
    pub static mut ProvokingVertexEXT: extern "C" fn(mode: GLenum) -> c_void = super::failing::ProvokingVertexEXT;
    pub static mut PushAttrib: extern "C" fn(mask: GLbitfield) -> c_void = super::failing::PushAttrib;
    pub static mut PushClientAttrib: extern "C" fn(mask: GLbitfield) -> c_void = super::failing::PushClientAttrib;
    pub static mut PushClientAttribDefaultEXT: extern "C" fn(mask: GLbitfield) -> c_void = super::failing::PushClientAttribDefaultEXT;
    pub static mut PushDebugGroup: extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void = super::failing::PushDebugGroup;
    pub static mut PushDebugGroupKHR: extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void = super::failing::PushDebugGroupKHR;
    pub static mut PushGroupMarkerEXT: extern "C" fn(length: GLsizei, marker: *GLchar) -> c_void = super::failing::PushGroupMarkerEXT;
    pub static mut PushMatrix: extern "C" fn() -> c_void = super::failing::PushMatrix;
    pub static mut PushName: extern "C" fn(name: GLuint) -> c_void = super::failing::PushName;
    pub static mut QueryCounter: extern "C" fn(id: GLuint, target: GLenum) -> c_void = super::failing::QueryCounter;
    pub static mut QueryCounterEXT: extern "C" fn(id: GLuint, target: GLenum) -> c_void = super::failing::QueryCounterEXT;
    pub static mut QueryMatrixxOES: extern "C" fn(mantissa: *GLfixed, exponent: *GLint) -> GLbitfield = super::failing::QueryMatrixxOES;
    pub static mut RasterPos2d: extern "C" fn(x: GLdouble, y: GLdouble) -> c_void = super::failing::RasterPos2d;
    pub static mut RasterPos2dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::RasterPos2dv;
    pub static mut RasterPos2f: extern "C" fn(x: GLfloat, y: GLfloat) -> c_void = super::failing::RasterPos2f;
    pub static mut RasterPos2fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::RasterPos2fv;
    pub static mut RasterPos2i: extern "C" fn(x: GLint, y: GLint) -> c_void = super::failing::RasterPos2i;
    pub static mut RasterPos2iv: extern "C" fn(v: *GLint) -> c_void = super::failing::RasterPos2iv;
    pub static mut RasterPos2s: extern "C" fn(x: GLshort, y: GLshort) -> c_void = super::failing::RasterPos2s;
    pub static mut RasterPos2sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::RasterPos2sv;
    pub static mut RasterPos2xOES: extern "C" fn(x: GLfixed, y: GLfixed) -> c_void = super::failing::RasterPos2xOES;
    pub static mut RasterPos2xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::RasterPos2xvOES;
    pub static mut RasterPos3d: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::RasterPos3d;
    pub static mut RasterPos3dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::RasterPos3dv;
    pub static mut RasterPos3f: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::RasterPos3f;
    pub static mut RasterPos3fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::RasterPos3fv;
    pub static mut RasterPos3i: extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void = super::failing::RasterPos3i;
    pub static mut RasterPos3iv: extern "C" fn(v: *GLint) -> c_void = super::failing::RasterPos3iv;
    pub static mut RasterPos3s: extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::RasterPos3s;
    pub static mut RasterPos3sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::RasterPos3sv;
    pub static mut RasterPos3xOES: extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void = super::failing::RasterPos3xOES;
    pub static mut RasterPos3xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::RasterPos3xvOES;
    pub static mut RasterPos4d: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::RasterPos4d;
    pub static mut RasterPos4dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::RasterPos4dv;
    pub static mut RasterPos4f: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::RasterPos4f;
    pub static mut RasterPos4fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::RasterPos4fv;
    pub static mut RasterPos4i: extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::RasterPos4i;
    pub static mut RasterPos4iv: extern "C" fn(v: *GLint) -> c_void = super::failing::RasterPos4iv;
    pub static mut RasterPos4s: extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void = super::failing::RasterPos4s;
    pub static mut RasterPos4sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::RasterPos4sv;
    pub static mut RasterPos4xOES: extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) -> c_void = super::failing::RasterPos4xOES;
    pub static mut RasterPos4xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::RasterPos4xvOES;
    pub static mut ReadBuffer: extern "C" fn(mode: GLenum) -> c_void = super::failing::ReadBuffer;
    pub static mut ReadBufferIndexedEXT: extern "C" fn(src: GLenum, index: GLint) -> c_void = super::failing::ReadBufferIndexedEXT;
    pub static mut ReadBufferNV: extern "C" fn(mode: GLenum) -> c_void = super::failing::ReadBufferNV;
    pub static mut ReadInstrumentsSGIX: extern "C" fn(marker: GLint) -> c_void = super::failing::ReadInstrumentsSGIX;
    pub static mut ReadPixels: extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::ReadPixels;
    pub static mut ReadnPixelsARB: extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void = super::failing::ReadnPixelsARB;
    pub static mut ReadnPixelsEXT: extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void = super::failing::ReadnPixelsEXT;
    pub static mut Rectd: extern "C" fn(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> c_void = super::failing::Rectd;
    pub static mut Rectdv: extern "C" fn(v1: *GLdouble, v2: *GLdouble) -> c_void = super::failing::Rectdv;
    pub static mut Rectf: extern "C" fn(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> c_void = super::failing::Rectf;
    pub static mut Rectfv: extern "C" fn(v1: *GLfloat, v2: *GLfloat) -> c_void = super::failing::Rectfv;
    pub static mut Recti: extern "C" fn(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> c_void = super::failing::Recti;
    pub static mut Rectiv: extern "C" fn(v1: *GLint, v2: *GLint) -> c_void = super::failing::Rectiv;
    pub static mut Rects: extern "C" fn(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> c_void = super::failing::Rects;
    pub static mut Rectsv: extern "C" fn(v1: *GLshort, v2: *GLshort) -> c_void = super::failing::Rectsv;
    pub static mut RectxOES: extern "C" fn(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) -> c_void = super::failing::RectxOES;
    pub static mut RectxvOES: extern "C" fn(v1: *GLfixed, v2: *GLfixed) -> c_void = super::failing::RectxvOES;
    pub static mut ReferencePlaneSGIX: extern "C" fn(equation: *GLdouble) -> c_void = super::failing::ReferencePlaneSGIX;
    pub static mut ReleaseShaderCompiler: extern "C" fn() -> c_void = super::failing::ReleaseShaderCompiler;
    pub static mut RenderMode: extern "C" fn(mode: GLenum) -> GLint = super::failing::RenderMode;
    pub static mut RenderbufferStorage: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorage;
    pub static mut RenderbufferStorageEXT: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageEXT;
    pub static mut RenderbufferStorageMultisample: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageMultisample;
    pub static mut RenderbufferStorageMultisampleANGLE: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageMultisampleANGLE;
    pub static mut RenderbufferStorageMultisampleAPPLE: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageMultisampleAPPLE;
    pub static mut RenderbufferStorageMultisampleCoverageNV: extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageMultisampleCoverageNV;
    pub static mut RenderbufferStorageMultisampleEXT: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageMultisampleEXT;
    pub static mut RenderbufferStorageMultisampleIMG: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageMultisampleIMG;
    pub static mut RenderbufferStorageMultisampleNV: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageMultisampleNV;
    pub static mut RenderbufferStorageOES: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::RenderbufferStorageOES;
    pub static mut ReplacementCodePointerSUN: extern "C" fn(type_: GLenum, stride: GLsizei, pointer: **GLvoid) -> c_void = super::failing::ReplacementCodePointerSUN;
    pub static mut ReplacementCodeubSUN: extern "C" fn(code: GLubyte) -> c_void = super::failing::ReplacementCodeubSUN;
    pub static mut ReplacementCodeubvSUN: extern "C" fn(code: *GLubyte) -> c_void = super::failing::ReplacementCodeubvSUN;
    pub static mut ReplacementCodeuiColor3fVertex3fSUN: extern "C" fn(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::ReplacementCodeuiColor3fVertex3fSUN;
    pub static mut ReplacementCodeuiColor3fVertex3fvSUN: extern "C" fn(rc: *GLuint, c: *GLfloat, v: *GLfloat) -> c_void = super::failing::ReplacementCodeuiColor3fVertex3fvSUN;
    pub static mut ReplacementCodeuiColor4fNormal3fVertex3fSUN: extern "C" fn(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::ReplacementCodeuiColor4fNormal3fVertex3fSUN;
    pub static mut ReplacementCodeuiColor4fNormal3fVertex3fvSUN: extern "C" fn(rc: *GLuint, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void = super::failing::ReplacementCodeuiColor4fNormal3fVertex3fvSUN;
    pub static mut ReplacementCodeuiColor4ubVertex3fSUN: extern "C" fn(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::ReplacementCodeuiColor4ubVertex3fSUN;
    pub static mut ReplacementCodeuiColor4ubVertex3fvSUN: extern "C" fn(rc: *GLuint, c: *GLubyte, v: *GLfloat) -> c_void = super::failing::ReplacementCodeuiColor4ubVertex3fvSUN;
    pub static mut ReplacementCodeuiNormal3fVertex3fSUN: extern "C" fn(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::ReplacementCodeuiNormal3fVertex3fSUN;
    pub static mut ReplacementCodeuiNormal3fVertex3fvSUN: extern "C" fn(rc: *GLuint, n: *GLfloat, v: *GLfloat) -> c_void = super::failing::ReplacementCodeuiNormal3fVertex3fvSUN;
    pub static mut ReplacementCodeuiSUN: extern "C" fn(code: GLuint) -> c_void = super::failing::ReplacementCodeuiSUN;
    pub static mut ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
    pub static mut ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: extern "C" fn(rc: *GLuint, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void = super::failing::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
    pub static mut ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
    pub static mut ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: extern "C" fn(rc: *GLuint, tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void = super::failing::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
    pub static mut ReplacementCodeuiTexCoord2fVertex3fSUN: extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::ReplacementCodeuiTexCoord2fVertex3fSUN;
    pub static mut ReplacementCodeuiTexCoord2fVertex3fvSUN: extern "C" fn(rc: *GLuint, tc: *GLfloat, v: *GLfloat) -> c_void = super::failing::ReplacementCodeuiTexCoord2fVertex3fvSUN;
    pub static mut ReplacementCodeuiVertex3fSUN: extern "C" fn(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::ReplacementCodeuiVertex3fSUN;
    pub static mut ReplacementCodeuiVertex3fvSUN: extern "C" fn(rc: *GLuint, v: *GLfloat) -> c_void = super::failing::ReplacementCodeuiVertex3fvSUN;
    pub static mut ReplacementCodeuivSUN: extern "C" fn(code: *GLuint) -> c_void = super::failing::ReplacementCodeuivSUN;
    pub static mut ReplacementCodeusSUN: extern "C" fn(code: GLushort) -> c_void = super::failing::ReplacementCodeusSUN;
    pub static mut ReplacementCodeusvSUN: extern "C" fn(code: *GLushort) -> c_void = super::failing::ReplacementCodeusvSUN;
    pub static mut RequestResidentProgramsNV: extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void = super::failing::RequestResidentProgramsNV;
    pub static mut ResetHistogram: extern "C" fn(target: GLenum) -> c_void = super::failing::ResetHistogram;
    pub static mut ResetHistogramEXT: extern "C" fn(target: GLenum) -> c_void = super::failing::ResetHistogramEXT;
    pub static mut ResetMinmax: extern "C" fn(target: GLenum) -> c_void = super::failing::ResetMinmax;
    pub static mut ResetMinmaxEXT: extern "C" fn(target: GLenum) -> c_void = super::failing::ResetMinmaxEXT;
    pub static mut ResizeBuffersMESA: extern "C" fn() -> c_void = super::failing::ResizeBuffersMESA;
    pub static mut ResolveMultisampleFramebufferAPPLE: extern "C" fn() -> c_void = super::failing::ResolveMultisampleFramebufferAPPLE;
    pub static mut ResumeTransformFeedback: extern "C" fn() -> c_void = super::failing::ResumeTransformFeedback;
    pub static mut ResumeTransformFeedbackNV: extern "C" fn() -> c_void = super::failing::ResumeTransformFeedbackNV;
    pub static mut Rotated: extern "C" fn(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::Rotated;
    pub static mut Rotatef: extern "C" fn(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::Rotatef;
    pub static mut Rotatex: extern "C" fn(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void = super::failing::Rotatex;
    pub static mut RotatexOES: extern "C" fn(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void = super::failing::RotatexOES;
    pub static mut SampleCoverage: extern "C" fn(value: GLfloat, invert: GLboolean) -> c_void = super::failing::SampleCoverage;
    pub static mut SampleCoverageARB: extern "C" fn(value: GLfloat, invert: GLboolean) -> c_void = super::failing::SampleCoverageARB;
    pub static mut SampleCoverageOES: extern "C" fn(value: GLfixed, invert: GLboolean) -> c_void = super::failing::SampleCoverageOES;
    pub static mut SampleCoveragex: extern "C" fn(value: GLclampx, invert: GLboolean) -> c_void = super::failing::SampleCoveragex;
    pub static mut SampleCoveragexOES: extern "C" fn(value: GLclampx, invert: GLboolean) -> c_void = super::failing::SampleCoveragexOES;
    pub static mut SampleMapATI: extern "C" fn(dst: GLuint, interp: GLuint, swizzle: GLenum) -> c_void = super::failing::SampleMapATI;
    pub static mut SampleMaskEXT: extern "C" fn(value: GLclampf, invert: GLboolean) -> c_void = super::failing::SampleMaskEXT;
    pub static mut SampleMaskIndexedNV: extern "C" fn(index: GLuint, mask: GLbitfield) -> c_void = super::failing::SampleMaskIndexedNV;
    pub static mut SampleMaskSGIS: extern "C" fn(value: GLclampf, invert: GLboolean) -> c_void = super::failing::SampleMaskSGIS;
    pub static mut SampleMaski: extern "C" fn(index: GLuint, mask: GLbitfield) -> c_void = super::failing::SampleMaski;
    pub static mut SamplePatternEXT: extern "C" fn(pattern: GLenum) -> c_void = super::failing::SamplePatternEXT;
    pub static mut SamplePatternSGIS: extern "C" fn(pattern: GLenum) -> c_void = super::failing::SamplePatternSGIS;
    pub static mut SamplerParameterIiv: extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void = super::failing::SamplerParameterIiv;
    pub static mut SamplerParameterIuiv: extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLuint) -> c_void = super::failing::SamplerParameterIuiv;
    pub static mut SamplerParameterf: extern "C" fn(sampler: GLuint, pname: GLenum, param: GLfloat) -> c_void = super::failing::SamplerParameterf;
    pub static mut SamplerParameterfv: extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLfloat) -> c_void = super::failing::SamplerParameterfv;
    pub static mut SamplerParameteri: extern "C" fn(sampler: GLuint, pname: GLenum, param: GLint) -> c_void = super::failing::SamplerParameteri;
    pub static mut SamplerParameteriv: extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void = super::failing::SamplerParameteriv;
    pub static mut Scaled: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::Scaled;
    pub static mut Scalef: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::Scalef;
    pub static mut Scalex: extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void = super::failing::Scalex;
    pub static mut ScalexOES: extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void = super::failing::ScalexOES;
    pub static mut Scissor: extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::Scissor;
    pub static mut ScissorArrayv: extern "C" fn(first: GLuint, count: GLsizei, v: *GLint) -> c_void = super::failing::ScissorArrayv;
    pub static mut ScissorIndexed: extern "C" fn(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::ScissorIndexed;
    pub static mut ScissorIndexedv: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::ScissorIndexedv;
    pub static mut SecondaryColor3b: extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void = super::failing::SecondaryColor3b;
    pub static mut SecondaryColor3bEXT: extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void = super::failing::SecondaryColor3bEXT;
    pub static mut SecondaryColor3bv: extern "C" fn(v: *GLbyte) -> c_void = super::failing::SecondaryColor3bv;
    pub static mut SecondaryColor3bvEXT: extern "C" fn(v: *GLbyte) -> c_void = super::failing::SecondaryColor3bvEXT;
    pub static mut SecondaryColor3d: extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void = super::failing::SecondaryColor3d;
    pub static mut SecondaryColor3dEXT: extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void = super::failing::SecondaryColor3dEXT;
    pub static mut SecondaryColor3dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::SecondaryColor3dv;
    pub static mut SecondaryColor3dvEXT: extern "C" fn(v: *GLdouble) -> c_void = super::failing::SecondaryColor3dvEXT;
    pub static mut SecondaryColor3f: extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void = super::failing::SecondaryColor3f;
    pub static mut SecondaryColor3fEXT: extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void = super::failing::SecondaryColor3fEXT;
    pub static mut SecondaryColor3fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::SecondaryColor3fv;
    pub static mut SecondaryColor3fvEXT: extern "C" fn(v: *GLfloat) -> c_void = super::failing::SecondaryColor3fvEXT;
    pub static mut SecondaryColor3hNV: extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void = super::failing::SecondaryColor3hNV;
    pub static mut SecondaryColor3hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::SecondaryColor3hvNV;
    pub static mut SecondaryColor3i: extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void = super::failing::SecondaryColor3i;
    pub static mut SecondaryColor3iEXT: extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void = super::failing::SecondaryColor3iEXT;
    pub static mut SecondaryColor3iv: extern "C" fn(v: *GLint) -> c_void = super::failing::SecondaryColor3iv;
    pub static mut SecondaryColor3ivEXT: extern "C" fn(v: *GLint) -> c_void = super::failing::SecondaryColor3ivEXT;
    pub static mut SecondaryColor3s: extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void = super::failing::SecondaryColor3s;
    pub static mut SecondaryColor3sEXT: extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void = super::failing::SecondaryColor3sEXT;
    pub static mut SecondaryColor3sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::SecondaryColor3sv;
    pub static mut SecondaryColor3svEXT: extern "C" fn(v: *GLshort) -> c_void = super::failing::SecondaryColor3svEXT;
    pub static mut SecondaryColor3ub: extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void = super::failing::SecondaryColor3ub;
    pub static mut SecondaryColor3ubEXT: extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void = super::failing::SecondaryColor3ubEXT;
    pub static mut SecondaryColor3ubv: extern "C" fn(v: *GLubyte) -> c_void = super::failing::SecondaryColor3ubv;
    pub static mut SecondaryColor3ubvEXT: extern "C" fn(v: *GLubyte) -> c_void = super::failing::SecondaryColor3ubvEXT;
    pub static mut SecondaryColor3ui: extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void = super::failing::SecondaryColor3ui;
    pub static mut SecondaryColor3uiEXT: extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void = super::failing::SecondaryColor3uiEXT;
    pub static mut SecondaryColor3uiv: extern "C" fn(v: *GLuint) -> c_void = super::failing::SecondaryColor3uiv;
    pub static mut SecondaryColor3uivEXT: extern "C" fn(v: *GLuint) -> c_void = super::failing::SecondaryColor3uivEXT;
    pub static mut SecondaryColor3us: extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void = super::failing::SecondaryColor3us;
    pub static mut SecondaryColor3usEXT: extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void = super::failing::SecondaryColor3usEXT;
    pub static mut SecondaryColor3usv: extern "C" fn(v: *GLushort) -> c_void = super::failing::SecondaryColor3usv;
    pub static mut SecondaryColor3usvEXT: extern "C" fn(v: *GLushort) -> c_void = super::failing::SecondaryColor3usvEXT;
    pub static mut SecondaryColorFormatNV: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void = super::failing::SecondaryColorFormatNV;
    pub static mut SecondaryColorP3ui: extern "C" fn(type_: GLenum, color: GLuint) -> c_void = super::failing::SecondaryColorP3ui;
    pub static mut SecondaryColorP3uiv: extern "C" fn(type_: GLenum, color: *GLuint) -> c_void = super::failing::SecondaryColorP3uiv;
    pub static mut SecondaryColorPointer: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::SecondaryColorPointer;
    pub static mut SecondaryColorPointerEXT: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::SecondaryColorPointerEXT;
    pub static mut SecondaryColorPointerListIBM: extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void = super::failing::SecondaryColorPointerListIBM;
    pub static mut SelectBuffer: extern "C" fn(size: GLsizei, buffer: *GLuint) -> c_void = super::failing::SelectBuffer;
    pub static mut SelectPerfMonitorCountersAMD: extern "C" fn(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) -> c_void = super::failing::SelectPerfMonitorCountersAMD;
    pub static mut SeparableFilter2D: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void = super::failing::SeparableFilter2D;
    pub static mut SeparableFilter2DEXT: extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void = super::failing::SeparableFilter2DEXT;
    pub static mut SetFenceAPPLE: extern "C" fn(fence: GLuint) -> c_void = super::failing::SetFenceAPPLE;
    pub static mut SetFenceNV: extern "C" fn(fence: GLuint, condition: GLenum) -> c_void = super::failing::SetFenceNV;
    pub static mut SetFragmentShaderConstantATI: extern "C" fn(dst: GLuint, value: *GLfloat) -> c_void = super::failing::SetFragmentShaderConstantATI;
    pub static mut SetInvariantEXT: extern "C" fn(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void = super::failing::SetInvariantEXT;
    pub static mut SetLocalConstantEXT: extern "C" fn(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void = super::failing::SetLocalConstantEXT;
    pub static mut SetMultisamplefvAMD: extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void = super::failing::SetMultisamplefvAMD;
    pub static mut ShadeModel: extern "C" fn(mode: GLenum) -> c_void = super::failing::ShadeModel;
    pub static mut ShaderBinary: extern "C" fn(count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void = super::failing::ShaderBinary;
    pub static mut ShaderOp1EXT: extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint) -> c_void = super::failing::ShaderOp1EXT;
    pub static mut ShaderOp2EXT: extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) -> c_void = super::failing::ShaderOp2EXT;
    pub static mut ShaderOp3EXT: extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) -> c_void = super::failing::ShaderOp3EXT;
    pub static mut ShaderSource: extern "C" fn(shader: GLuint, count: GLsizei, string: **GLchar, length: *GLint) -> c_void = super::failing::ShaderSource;
    pub static mut ShaderSourceARB: extern "C" fn(shaderObj: GLhandleARB, count: GLsizei, string: **GLcharARB, length: *GLint) -> c_void = super::failing::ShaderSourceARB;
    pub static mut ShaderStorageBlockBinding: extern "C" fn(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> c_void = super::failing::ShaderStorageBlockBinding;
    pub static mut SharpenTexFuncSGIS: extern "C" fn(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void = super::failing::SharpenTexFuncSGIS;
    pub static mut SpriteParameterfSGIX: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::SpriteParameterfSGIX;
    pub static mut SpriteParameterfvSGIX: extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void = super::failing::SpriteParameterfvSGIX;
    pub static mut SpriteParameteriSGIX: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::SpriteParameteriSGIX;
    pub static mut SpriteParameterivSGIX: extern "C" fn(pname: GLenum, params: *GLint) -> c_void = super::failing::SpriteParameterivSGIX;
    pub static mut StartInstrumentsSGIX: extern "C" fn() -> c_void = super::failing::StartInstrumentsSGIX;
    pub static mut StartTilingQCOM: extern "C" fn(x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) -> c_void = super::failing::StartTilingQCOM;
    pub static mut StencilClearTagEXT: extern "C" fn(stencilTagBits: GLsizei, stencilClearTag: GLuint) -> c_void = super::failing::StencilClearTagEXT;
    pub static mut StencilFillPathInstancedNV: extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void = super::failing::StencilFillPathInstancedNV;
    pub static mut StencilFillPathNV: extern "C" fn(path: GLuint, fillMode: GLenum, mask: GLuint) -> c_void = super::failing::StencilFillPathNV;
    pub static mut StencilFunc: extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint) -> c_void = super::failing::StencilFunc;
    pub static mut StencilFuncSeparate: extern "C" fn(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint) -> c_void = super::failing::StencilFuncSeparate;
    pub static mut StencilFuncSeparateATI: extern "C" fn(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint) -> c_void = super::failing::StencilFuncSeparateATI;
    pub static mut StencilMask: extern "C" fn(mask: GLuint) -> c_void = super::failing::StencilMask;
    pub static mut StencilMaskSeparate: extern "C" fn(face: GLenum, mask: GLuint) -> c_void = super::failing::StencilMaskSeparate;
    pub static mut StencilOp: extern "C" fn(fail: GLenum, zfail: GLenum, zpass: GLenum) -> c_void = super::failing::StencilOp;
    pub static mut StencilOpSeparate: extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void = super::failing::StencilOpSeparate;
    pub static mut StencilOpSeparateATI: extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void = super::failing::StencilOpSeparateATI;
    pub static mut StencilOpValueAMD: extern "C" fn(face: GLenum, value: GLuint) -> c_void = super::failing::StencilOpValueAMD;
    pub static mut StencilStrokePathInstancedNV: extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void = super::failing::StencilStrokePathInstancedNV;
    pub static mut StencilStrokePathNV: extern "C" fn(path: GLuint, reference: GLint, mask: GLuint) -> c_void = super::failing::StencilStrokePathNV;
    pub static mut StopInstrumentsSGIX: extern "C" fn(marker: GLint) -> c_void = super::failing::StopInstrumentsSGIX;
    pub static mut StringMarkerGREMEDY: extern "C" fn(len: GLsizei, string: *GLvoid) -> c_void = super::failing::StringMarkerGREMEDY;
    pub static mut SwizzleEXT: extern "C" fn(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void = super::failing::SwizzleEXT;
    pub static mut SyncTextureINTEL: extern "C" fn(texture: GLuint) -> c_void = super::failing::SyncTextureINTEL;
    pub static mut TagSampleBufferSGIX: extern "C" fn() -> c_void = super::failing::TagSampleBufferSGIX;
    pub static mut Tangent3bEXT: extern "C" fn(tx: GLbyte, ty: GLbyte, tz: GLbyte) -> c_void = super::failing::Tangent3bEXT;
    pub static mut Tangent3bvEXT: extern "C" fn(v: *GLbyte) -> c_void = super::failing::Tangent3bvEXT;
    pub static mut Tangent3dEXT: extern "C" fn(tx: GLdouble, ty: GLdouble, tz: GLdouble) -> c_void = super::failing::Tangent3dEXT;
    pub static mut Tangent3dvEXT: extern "C" fn(v: *GLdouble) -> c_void = super::failing::Tangent3dvEXT;
    pub static mut Tangent3fEXT: extern "C" fn(tx: GLfloat, ty: GLfloat, tz: GLfloat) -> c_void = super::failing::Tangent3fEXT;
    pub static mut Tangent3fvEXT: extern "C" fn(v: *GLfloat) -> c_void = super::failing::Tangent3fvEXT;
    pub static mut Tangent3iEXT: extern "C" fn(tx: GLint, ty: GLint, tz: GLint) -> c_void = super::failing::Tangent3iEXT;
    pub static mut Tangent3ivEXT: extern "C" fn(v: *GLint) -> c_void = super::failing::Tangent3ivEXT;
    pub static mut Tangent3sEXT: extern "C" fn(tx: GLshort, ty: GLshort, tz: GLshort) -> c_void = super::failing::Tangent3sEXT;
    pub static mut Tangent3svEXT: extern "C" fn(v: *GLshort) -> c_void = super::failing::Tangent3svEXT;
    pub static mut TangentPointerEXT: extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::TangentPointerEXT;
    pub static mut TbufferMask3DFX: extern "C" fn(mask: GLuint) -> c_void = super::failing::TbufferMask3DFX;
    pub static mut TessellationFactorAMD: extern "C" fn(factor: GLfloat) -> c_void = super::failing::TessellationFactorAMD;
    pub static mut TessellationModeAMD: extern "C" fn(mode: GLenum) -> c_void = super::failing::TessellationModeAMD;
    pub static mut TestFenceAPPLE: extern "C" fn(fence: GLuint) -> GLboolean = super::failing::TestFenceAPPLE;
    pub static mut TestFenceNV: extern "C" fn(fence: GLuint) -> GLboolean = super::failing::TestFenceNV;
    pub static mut TestObjectAPPLE: extern "C" fn(object: GLenum, name: GLuint) -> GLboolean = super::failing::TestObjectAPPLE;
    pub static mut TexBuffer: extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void = super::failing::TexBuffer;
    pub static mut TexBufferARB: extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void = super::failing::TexBufferARB;
    pub static mut TexBufferEXT: extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void = super::failing::TexBufferEXT;
    pub static mut TexBufferRange: extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void = super::failing::TexBufferRange;
    pub static mut TexBumpParameterfvATI: extern "C" fn(pname: GLenum, param: *GLfloat) -> c_void = super::failing::TexBumpParameterfvATI;
    pub static mut TexBumpParameterivATI: extern "C" fn(pname: GLenum, param: *GLint) -> c_void = super::failing::TexBumpParameterivATI;
    pub static mut TexCoord1bOES: extern "C" fn(s: GLbyte) -> c_void = super::failing::TexCoord1bOES;
    pub static mut TexCoord1bvOES: extern "C" fn(coords: *GLbyte) -> c_void = super::failing::TexCoord1bvOES;
    pub static mut TexCoord1d: extern "C" fn(s: GLdouble) -> c_void = super::failing::TexCoord1d;
    pub static mut TexCoord1dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::TexCoord1dv;
    pub static mut TexCoord1f: extern "C" fn(s: GLfloat) -> c_void = super::failing::TexCoord1f;
    pub static mut TexCoord1fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::TexCoord1fv;
    pub static mut TexCoord1hNV: extern "C" fn(s: GLhalfNV) -> c_void = super::failing::TexCoord1hNV;
    pub static mut TexCoord1hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::TexCoord1hvNV;
    pub static mut TexCoord1i: extern "C" fn(s: GLint) -> c_void = super::failing::TexCoord1i;
    pub static mut TexCoord1iv: extern "C" fn(v: *GLint) -> c_void = super::failing::TexCoord1iv;
    pub static mut TexCoord1s: extern "C" fn(s: GLshort) -> c_void = super::failing::TexCoord1s;
    pub static mut TexCoord1sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::TexCoord1sv;
    pub static mut TexCoord1xOES: extern "C" fn(s: GLfixed) -> c_void = super::failing::TexCoord1xOES;
    pub static mut TexCoord1xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::TexCoord1xvOES;
    pub static mut TexCoord2bOES: extern "C" fn(s: GLbyte, t: GLbyte) -> c_void = super::failing::TexCoord2bOES;
    pub static mut TexCoord2bvOES: extern "C" fn(coords: *GLbyte) -> c_void = super::failing::TexCoord2bvOES;
    pub static mut TexCoord2d: extern "C" fn(s: GLdouble, t: GLdouble) -> c_void = super::failing::TexCoord2d;
    pub static mut TexCoord2dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::TexCoord2dv;
    pub static mut TexCoord2f: extern "C" fn(s: GLfloat, t: GLfloat) -> c_void = super::failing::TexCoord2f;
    pub static mut TexCoord2fColor3fVertex3fSUN: extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::TexCoord2fColor3fVertex3fSUN;
    pub static mut TexCoord2fColor3fVertex3fvSUN: extern "C" fn(tc: *GLfloat, c: *GLfloat, v: *GLfloat) -> c_void = super::failing::TexCoord2fColor3fVertex3fvSUN;
    pub static mut TexCoord2fColor4fNormal3fVertex3fSUN: extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::TexCoord2fColor4fNormal3fVertex3fSUN;
    pub static mut TexCoord2fColor4fNormal3fVertex3fvSUN: extern "C" fn(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void = super::failing::TexCoord2fColor4fNormal3fVertex3fvSUN;
    pub static mut TexCoord2fColor4ubVertex3fSUN: extern "C" fn(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::TexCoord2fColor4ubVertex3fSUN;
    pub static mut TexCoord2fColor4ubVertex3fvSUN: extern "C" fn(tc: *GLfloat, c: *GLubyte, v: *GLfloat) -> c_void = super::failing::TexCoord2fColor4ubVertex3fvSUN;
    pub static mut TexCoord2fNormal3fVertex3fSUN: extern "C" fn(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::TexCoord2fNormal3fVertex3fSUN;
    pub static mut TexCoord2fNormal3fVertex3fvSUN: extern "C" fn(tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void = super::failing::TexCoord2fNormal3fVertex3fvSUN;
    pub static mut TexCoord2fVertex3fSUN: extern "C" fn(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::TexCoord2fVertex3fSUN;
    pub static mut TexCoord2fVertex3fvSUN: extern "C" fn(tc: *GLfloat, v: *GLfloat) -> c_void = super::failing::TexCoord2fVertex3fvSUN;
    pub static mut TexCoord2fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::TexCoord2fv;
    pub static mut TexCoord2hNV: extern "C" fn(s: GLhalfNV, t: GLhalfNV) -> c_void = super::failing::TexCoord2hNV;
    pub static mut TexCoord2hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::TexCoord2hvNV;
    pub static mut TexCoord2i: extern "C" fn(s: GLint, t: GLint) -> c_void = super::failing::TexCoord2i;
    pub static mut TexCoord2iv: extern "C" fn(v: *GLint) -> c_void = super::failing::TexCoord2iv;
    pub static mut TexCoord2s: extern "C" fn(s: GLshort, t: GLshort) -> c_void = super::failing::TexCoord2s;
    pub static mut TexCoord2sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::TexCoord2sv;
    pub static mut TexCoord2xOES: extern "C" fn(s: GLfixed, t: GLfixed) -> c_void = super::failing::TexCoord2xOES;
    pub static mut TexCoord2xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::TexCoord2xvOES;
    pub static mut TexCoord3bOES: extern "C" fn(s: GLbyte, t: GLbyte, r: GLbyte) -> c_void = super::failing::TexCoord3bOES;
    pub static mut TexCoord3bvOES: extern "C" fn(coords: *GLbyte) -> c_void = super::failing::TexCoord3bvOES;
    pub static mut TexCoord3d: extern "C" fn(s: GLdouble, t: GLdouble, r: GLdouble) -> c_void = super::failing::TexCoord3d;
    pub static mut TexCoord3dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::TexCoord3dv;
    pub static mut TexCoord3f: extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat) -> c_void = super::failing::TexCoord3f;
    pub static mut TexCoord3fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::TexCoord3fv;
    pub static mut TexCoord3hNV: extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void = super::failing::TexCoord3hNV;
    pub static mut TexCoord3hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::TexCoord3hvNV;
    pub static mut TexCoord3i: extern "C" fn(s: GLint, t: GLint, r: GLint) -> c_void = super::failing::TexCoord3i;
    pub static mut TexCoord3iv: extern "C" fn(v: *GLint) -> c_void = super::failing::TexCoord3iv;
    pub static mut TexCoord3s: extern "C" fn(s: GLshort, t: GLshort, r: GLshort) -> c_void = super::failing::TexCoord3s;
    pub static mut TexCoord3sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::TexCoord3sv;
    pub static mut TexCoord3xOES: extern "C" fn(s: GLfixed, t: GLfixed, r: GLfixed) -> c_void = super::failing::TexCoord3xOES;
    pub static mut TexCoord3xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::TexCoord3xvOES;
    pub static mut TexCoord4bOES: extern "C" fn(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void = super::failing::TexCoord4bOES;
    pub static mut TexCoord4bvOES: extern "C" fn(coords: *GLbyte) -> c_void = super::failing::TexCoord4bvOES;
    pub static mut TexCoord4d: extern "C" fn(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void = super::failing::TexCoord4d;
    pub static mut TexCoord4dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::TexCoord4dv;
    pub static mut TexCoord4f: extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void = super::failing::TexCoord4f;
    pub static mut TexCoord4fColor4fNormal3fVertex4fSUN: extern "C" fn(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::TexCoord4fColor4fNormal3fVertex4fSUN;
    pub static mut TexCoord4fColor4fNormal3fVertex4fvSUN: extern "C" fn(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void = super::failing::TexCoord4fColor4fNormal3fVertex4fvSUN;
    pub static mut TexCoord4fVertex4fSUN: extern "C" fn(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::TexCoord4fVertex4fSUN;
    pub static mut TexCoord4fVertex4fvSUN: extern "C" fn(tc: *GLfloat, v: *GLfloat) -> c_void = super::failing::TexCoord4fVertex4fvSUN;
    pub static mut TexCoord4fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::TexCoord4fv;
    pub static mut TexCoord4hNV: extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void = super::failing::TexCoord4hNV;
    pub static mut TexCoord4hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::TexCoord4hvNV;
    pub static mut TexCoord4i: extern "C" fn(s: GLint, t: GLint, r: GLint, q: GLint) -> c_void = super::failing::TexCoord4i;
    pub static mut TexCoord4iv: extern "C" fn(v: *GLint) -> c_void = super::failing::TexCoord4iv;
    pub static mut TexCoord4s: extern "C" fn(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void = super::failing::TexCoord4s;
    pub static mut TexCoord4sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::TexCoord4sv;
    pub static mut TexCoord4xOES: extern "C" fn(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void = super::failing::TexCoord4xOES;
    pub static mut TexCoord4xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::TexCoord4xvOES;
    pub static mut TexCoordFormatNV: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void = super::failing::TexCoordFormatNV;
    pub static mut TexCoordP1ui: extern "C" fn(type_: GLenum, coords: GLuint) -> c_void = super::failing::TexCoordP1ui;
    pub static mut TexCoordP1uiv: extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void = super::failing::TexCoordP1uiv;
    pub static mut TexCoordP2ui: extern "C" fn(type_: GLenum, coords: GLuint) -> c_void = super::failing::TexCoordP2ui;
    pub static mut TexCoordP2uiv: extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void = super::failing::TexCoordP2uiv;
    pub static mut TexCoordP3ui: extern "C" fn(type_: GLenum, coords: GLuint) -> c_void = super::failing::TexCoordP3ui;
    pub static mut TexCoordP3uiv: extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void = super::failing::TexCoordP3uiv;
    pub static mut TexCoordP4ui: extern "C" fn(type_: GLenum, coords: GLuint) -> c_void = super::failing::TexCoordP4ui;
    pub static mut TexCoordP4uiv: extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void = super::failing::TexCoordP4uiv;
    pub static mut TexCoordPointer: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::TexCoordPointer;
    pub static mut TexCoordPointerEXT: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void = super::failing::TexCoordPointerEXT;
    pub static mut TexCoordPointerListIBM: extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void = super::failing::TexCoordPointerListIBM;
    pub static mut TexCoordPointervINTEL: extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void = super::failing::TexCoordPointervINTEL;
    pub static mut TexEnvf: extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::TexEnvf;
    pub static mut TexEnvfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::TexEnvfv;
    pub static mut TexEnvi: extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::TexEnvi;
    pub static mut TexEnviv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::TexEnviv;
    pub static mut TexEnvx: extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::TexEnvx;
    pub static mut TexEnvxOES: extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::TexEnvxOES;
    pub static mut TexEnvxv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::TexEnvxv;
    pub static mut TexEnvxvOES: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::TexEnvxvOES;
    pub static mut TexFilterFuncSGIS: extern "C" fn(target: GLenum, filter: GLenum, n: GLsizei, weights: *GLfloat) -> c_void = super::failing::TexFilterFuncSGIS;
    pub static mut TexGend: extern "C" fn(coord: GLenum, pname: GLenum, param: GLdouble) -> c_void = super::failing::TexGend;
    pub static mut TexGendv: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void = super::failing::TexGendv;
    pub static mut TexGenf: extern "C" fn(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::TexGenf;
    pub static mut TexGenfOES: extern "C" fn(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::TexGenfOES;
    pub static mut TexGenfv: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::TexGenfv;
    pub static mut TexGenfvOES: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::TexGenfvOES;
    pub static mut TexGeni: extern "C" fn(coord: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::TexGeni;
    pub static mut TexGeniOES: extern "C" fn(coord: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::TexGeniOES;
    pub static mut TexGeniv: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::TexGeniv;
    pub static mut TexGenivOES: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::TexGenivOES;
    pub static mut TexGenxOES: extern "C" fn(coord: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::TexGenxOES;
    pub static mut TexGenxvOES: extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::TexGenxvOES;
    pub static mut TexImage1D: extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexImage1D;
    pub static mut TexImage2D: extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexImage2D;
    pub static mut TexImage2DMultisample: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void = super::failing::TexImage2DMultisample;
    pub static mut TexImage2DMultisampleCoverageNV: extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void = super::failing::TexImage2DMultisampleCoverageNV;
    pub static mut TexImage3D: extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexImage3D;
    pub static mut TexImage3DEXT: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexImage3DEXT;
    pub static mut TexImage3DMultisample: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void = super::failing::TexImage3DMultisample;
    pub static mut TexImage3DMultisampleCoverageNV: extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void = super::failing::TexImage3DMultisampleCoverageNV;
    pub static mut TexImage3DOES: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexImage3DOES;
    pub static mut TexImage4DSGIS: extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexImage4DSGIS;
    pub static mut TexPageCommitmentARB: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void = super::failing::TexPageCommitmentARB;
    pub static mut TexParameterIiv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::TexParameterIiv;
    pub static mut TexParameterIivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::TexParameterIivEXT;
    pub static mut TexParameterIuiv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void = super::failing::TexParameterIuiv;
    pub static mut TexParameterIuivEXT: extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void = super::failing::TexParameterIuivEXT;
    pub static mut TexParameterf: extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::TexParameterf;
    pub static mut TexParameterfv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::TexParameterfv;
    pub static mut TexParameteri: extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::TexParameteri;
    pub static mut TexParameteriv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::TexParameteriv;
    pub static mut TexParameterx: extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::TexParameterx;
    pub static mut TexParameterxOES: extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void = super::failing::TexParameterxOES;
    pub static mut TexParameterxv: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::TexParameterxv;
    pub static mut TexParameterxvOES: extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void = super::failing::TexParameterxvOES;
    pub static mut TexRenderbufferNV: extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void = super::failing::TexRenderbufferNV;
    pub static mut TexStorage1D: extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void = super::failing::TexStorage1D;
    pub static mut TexStorage1DEXT: extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void = super::failing::TexStorage1DEXT;
    pub static mut TexStorage2D: extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::TexStorage2D;
    pub static mut TexStorage2DEXT: extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::TexStorage2DEXT;
    pub static mut TexStorage2DMultisample: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void = super::failing::TexStorage2DMultisample;
    pub static mut TexStorage3D: extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void = super::failing::TexStorage3D;
    pub static mut TexStorage3DEXT: extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void = super::failing::TexStorage3DEXT;
    pub static mut TexStorage3DMultisample: extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void = super::failing::TexStorage3DMultisample;
    pub static mut TexStorageSparseAMD: extern "C" fn(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void = super::failing::TexStorageSparseAMD;
    pub static mut TexSubImage1D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexSubImage1D;
    pub static mut TexSubImage1DEXT: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexSubImage1DEXT;
    pub static mut TexSubImage2D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexSubImage2D;
    pub static mut TexSubImage2DEXT: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexSubImage2DEXT;
    pub static mut TexSubImage3D: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexSubImage3D;
    pub static mut TexSubImage3DEXT: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexSubImage3DEXT;
    pub static mut TexSubImage3DOES: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexSubImage3DOES;
    pub static mut TexSubImage4DSGIS: extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TexSubImage4DSGIS;
    pub static mut TextureBarrierNV: extern "C" fn() -> c_void = super::failing::TextureBarrierNV;
    pub static mut TextureBufferEXT: extern "C" fn(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void = super::failing::TextureBufferEXT;
    pub static mut TextureBufferRangeEXT: extern "C" fn(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void = super::failing::TextureBufferRangeEXT;
    pub static mut TextureColorMaskSGIS: extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void = super::failing::TextureColorMaskSGIS;
    pub static mut TextureImage1DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TextureImage1DEXT;
    pub static mut TextureImage2DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TextureImage2DEXT;
    pub static mut TextureImage2DMultisampleCoverageNV: extern "C" fn(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void = super::failing::TextureImage2DMultisampleCoverageNV;
    pub static mut TextureImage2DMultisampleNV: extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void = super::failing::TextureImage2DMultisampleNV;
    pub static mut TextureImage3DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TextureImage3DEXT;
    pub static mut TextureImage3DMultisampleCoverageNV: extern "C" fn(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void = super::failing::TextureImage3DMultisampleCoverageNV;
    pub static mut TextureImage3DMultisampleNV: extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void = super::failing::TextureImage3DMultisampleNV;
    pub static mut TextureLightEXT: extern "C" fn(pname: GLenum) -> c_void = super::failing::TextureLightEXT;
    pub static mut TextureMaterialEXT: extern "C" fn(face: GLenum, mode: GLenum) -> c_void = super::failing::TextureMaterialEXT;
    pub static mut TextureNormalEXT: extern "C" fn(mode: GLenum) -> c_void = super::failing::TextureNormalEXT;
    pub static mut TexturePageCommitmentEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void = super::failing::TexturePageCommitmentEXT;
    pub static mut TextureParameterIivEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::TextureParameterIivEXT;
    pub static mut TextureParameterIuivEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void = super::failing::TextureParameterIuivEXT;
    pub static mut TextureParameterfEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) -> c_void = super::failing::TextureParameterfEXT;
    pub static mut TextureParameterfvEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void = super::failing::TextureParameterfvEXT;
    pub static mut TextureParameteriEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, param: GLint) -> c_void = super::failing::TextureParameteriEXT;
    pub static mut TextureParameterivEXT: extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void = super::failing::TextureParameterivEXT;
    pub static mut TextureRangeAPPLE: extern "C" fn(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void = super::failing::TextureRangeAPPLE;
    pub static mut TextureRenderbufferEXT: extern "C" fn(texture: GLuint, target: GLenum, renderbuffer: GLuint) -> c_void = super::failing::TextureRenderbufferEXT;
    pub static mut TextureStorage1DEXT: extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void = super::failing::TextureStorage1DEXT;
    pub static mut TextureStorage2DEXT: extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void = super::failing::TextureStorage2DEXT;
    pub static mut TextureStorage2DMultisampleEXT: extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void = super::failing::TextureStorage2DMultisampleEXT;
    pub static mut TextureStorage3DEXT: extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void = super::failing::TextureStorage3DEXT;
    pub static mut TextureStorage3DMultisampleEXT: extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void = super::failing::TextureStorage3DMultisampleEXT;
    pub static mut TextureStorageSparseAMD: extern "C" fn(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void = super::failing::TextureStorageSparseAMD;
    pub static mut TextureSubImage1DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TextureSubImage1DEXT;
    pub static mut TextureSubImage2DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TextureSubImage2DEXT;
    pub static mut TextureSubImage3DEXT: extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void = super::failing::TextureSubImage3DEXT;
    pub static mut TextureView: extern "C" fn(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> c_void = super::failing::TextureView;
    pub static mut TrackMatrixNV: extern "C" fn(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) -> c_void = super::failing::TrackMatrixNV;
    pub static mut TransformFeedbackAttribsNV: extern "C" fn(count: GLuint, attribs: *GLint, bufferMode: GLenum) -> c_void = super::failing::TransformFeedbackAttribsNV;
    pub static mut TransformFeedbackStreamAttribsNV: extern "C" fn(count: GLsizei, attribs: *GLint, nbuffers: GLsizei, bufstreams: *GLint, bufferMode: GLenum) -> c_void = super::failing::TransformFeedbackStreamAttribsNV;
    pub static mut TransformFeedbackVaryings: extern "C" fn(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void = super::failing::TransformFeedbackVaryings;
    pub static mut TransformFeedbackVaryingsEXT: extern "C" fn(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void = super::failing::TransformFeedbackVaryingsEXT;
    pub static mut TransformFeedbackVaryingsNV: extern "C" fn(program: GLuint, count: GLsizei, locations: *GLint, bufferMode: GLenum) -> c_void = super::failing::TransformFeedbackVaryingsNV;
    pub static mut TransformPathNV: extern "C" fn(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void = super::failing::TransformPathNV;
    pub static mut Translated: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::Translated;
    pub static mut Translatef: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::Translatef;
    pub static mut Translatex: extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void = super::failing::Translatex;
    pub static mut TranslatexOES: extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void = super::failing::TranslatexOES;
    pub static mut Uniform1d: extern "C" fn(location: GLint, x: GLdouble) -> c_void = super::failing::Uniform1d;
    pub static mut Uniform1dv: extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::Uniform1dv;
    pub static mut Uniform1f: extern "C" fn(location: GLint, v0: GLfloat) -> c_void = super::failing::Uniform1f;
    pub static mut Uniform1fARB: extern "C" fn(location: GLint, v0: GLfloat) -> c_void = super::failing::Uniform1fARB;
    pub static mut Uniform1fv: extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::Uniform1fv;
    pub static mut Uniform1fvARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::Uniform1fvARB;
    pub static mut Uniform1i: extern "C" fn(location: GLint, v0: GLint) -> c_void = super::failing::Uniform1i;
    pub static mut Uniform1i64NV: extern "C" fn(location: GLint, x: GLint64EXT) -> c_void = super::failing::Uniform1i64NV;
    pub static mut Uniform1i64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void = super::failing::Uniform1i64vNV;
    pub static mut Uniform1iARB: extern "C" fn(location: GLint, v0: GLint) -> c_void = super::failing::Uniform1iARB;
    pub static mut Uniform1iv: extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::Uniform1iv;
    pub static mut Uniform1ivARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::Uniform1ivARB;
    pub static mut Uniform1ui: extern "C" fn(location: GLint, v0: GLuint) -> c_void = super::failing::Uniform1ui;
    pub static mut Uniform1ui64NV: extern "C" fn(location: GLint, x: GLuint64EXT) -> c_void = super::failing::Uniform1ui64NV;
    pub static mut Uniform1ui64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::Uniform1ui64vNV;
    pub static mut Uniform1uiEXT: extern "C" fn(location: GLint, v0: GLuint) -> c_void = super::failing::Uniform1uiEXT;
    pub static mut Uniform1uiv: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::Uniform1uiv;
    pub static mut Uniform1uivEXT: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::Uniform1uivEXT;
    pub static mut Uniform2d: extern "C" fn(location: GLint, x: GLdouble, y: GLdouble) -> c_void = super::failing::Uniform2d;
    pub static mut Uniform2dv: extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::Uniform2dv;
    pub static mut Uniform2f: extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void = super::failing::Uniform2f;
    pub static mut Uniform2fARB: extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void = super::failing::Uniform2fARB;
    pub static mut Uniform2fv: extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::Uniform2fv;
    pub static mut Uniform2fvARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::Uniform2fvARB;
    pub static mut Uniform2i: extern "C" fn(location: GLint, v0: GLint, v1: GLint) -> c_void = super::failing::Uniform2i;
    pub static mut Uniform2i64NV: extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void = super::failing::Uniform2i64NV;
    pub static mut Uniform2i64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void = super::failing::Uniform2i64vNV;
    pub static mut Uniform2iARB: extern "C" fn(location: GLint, v0: GLint, v1: GLint) -> c_void = super::failing::Uniform2iARB;
    pub static mut Uniform2iv: extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::Uniform2iv;
    pub static mut Uniform2ivARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::Uniform2ivARB;
    pub static mut Uniform2ui: extern "C" fn(location: GLint, v0: GLuint, v1: GLuint) -> c_void = super::failing::Uniform2ui;
    pub static mut Uniform2ui64NV: extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void = super::failing::Uniform2ui64NV;
    pub static mut Uniform2ui64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::Uniform2ui64vNV;
    pub static mut Uniform2uiEXT: extern "C" fn(location: GLint, v0: GLuint, v1: GLuint) -> c_void = super::failing::Uniform2uiEXT;
    pub static mut Uniform2uiv: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::Uniform2uiv;
    pub static mut Uniform2uivEXT: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::Uniform2uivEXT;
    pub static mut Uniform3d: extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::Uniform3d;
    pub static mut Uniform3dv: extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::Uniform3dv;
    pub static mut Uniform3f: extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void = super::failing::Uniform3f;
    pub static mut Uniform3fARB: extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void = super::failing::Uniform3fARB;
    pub static mut Uniform3fv: extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::Uniform3fv;
    pub static mut Uniform3fvARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::Uniform3fvARB;
    pub static mut Uniform3i: extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void = super::failing::Uniform3i;
    pub static mut Uniform3i64NV: extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void = super::failing::Uniform3i64NV;
    pub static mut Uniform3i64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void = super::failing::Uniform3i64vNV;
    pub static mut Uniform3iARB: extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void = super::failing::Uniform3iARB;
    pub static mut Uniform3iv: extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::Uniform3iv;
    pub static mut Uniform3ivARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::Uniform3ivARB;
    pub static mut Uniform3ui: extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void = super::failing::Uniform3ui;
    pub static mut Uniform3ui64NV: extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void = super::failing::Uniform3ui64NV;
    pub static mut Uniform3ui64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::Uniform3ui64vNV;
    pub static mut Uniform3uiEXT: extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void = super::failing::Uniform3uiEXT;
    pub static mut Uniform3uiv: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::Uniform3uiv;
    pub static mut Uniform3uivEXT: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::Uniform3uivEXT;
    pub static mut Uniform4d: extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::Uniform4d;
    pub static mut Uniform4dv: extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void = super::failing::Uniform4dv;
    pub static mut Uniform4f: extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void = super::failing::Uniform4f;
    pub static mut Uniform4fARB: extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void = super::failing::Uniform4fARB;
    pub static mut Uniform4fv: extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::Uniform4fv;
    pub static mut Uniform4fvARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void = super::failing::Uniform4fvARB;
    pub static mut Uniform4i: extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void = super::failing::Uniform4i;
    pub static mut Uniform4i64NV: extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void = super::failing::Uniform4i64NV;
    pub static mut Uniform4i64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void = super::failing::Uniform4i64vNV;
    pub static mut Uniform4iARB: extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void = super::failing::Uniform4iARB;
    pub static mut Uniform4iv: extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::Uniform4iv;
    pub static mut Uniform4ivARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void = super::failing::Uniform4ivARB;
    pub static mut Uniform4ui: extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void = super::failing::Uniform4ui;
    pub static mut Uniform4ui64NV: extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void = super::failing::Uniform4ui64NV;
    pub static mut Uniform4ui64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::Uniform4ui64vNV;
    pub static mut Uniform4uiEXT: extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void = super::failing::Uniform4uiEXT;
    pub static mut Uniform4uiv: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::Uniform4uiv;
    pub static mut Uniform4uivEXT: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void = super::failing::Uniform4uivEXT;
    pub static mut UniformBlockBinding: extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> c_void = super::failing::UniformBlockBinding;
    pub static mut UniformBufferEXT: extern "C" fn(program: GLuint, location: GLint, buffer: GLuint) -> c_void = super::failing::UniformBufferEXT;
    pub static mut UniformHandleui64ARB: extern "C" fn(location: GLint, value: GLuint64) -> c_void = super::failing::UniformHandleui64ARB;
    pub static mut UniformHandleui64NV: extern "C" fn(location: GLint, value: GLuint64) -> c_void = super::failing::UniformHandleui64NV;
    pub static mut UniformHandleui64vARB: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64) -> c_void = super::failing::UniformHandleui64vARB;
    pub static mut UniformHandleui64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64) -> c_void = super::failing::UniformHandleui64vNV;
    pub static mut UniformMatrix2dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix2dv;
    pub static mut UniformMatrix2fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix2fv;
    pub static mut UniformMatrix2fvARB: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix2fvARB;
    pub static mut UniformMatrix2x3dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix2x3dv;
    pub static mut UniformMatrix2x3fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix2x3fv;
    pub static mut UniformMatrix2x4dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix2x4dv;
    pub static mut UniformMatrix2x4fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix2x4fv;
    pub static mut UniformMatrix3dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix3dv;
    pub static mut UniformMatrix3fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix3fv;
    pub static mut UniformMatrix3fvARB: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix3fvARB;
    pub static mut UniformMatrix3x2dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix3x2dv;
    pub static mut UniformMatrix3x2fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix3x2fv;
    pub static mut UniformMatrix3x4dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix3x4dv;
    pub static mut UniformMatrix3x4fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix3x4fv;
    pub static mut UniformMatrix4dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix4dv;
    pub static mut UniformMatrix4fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix4fv;
    pub static mut UniformMatrix4fvARB: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix4fvARB;
    pub static mut UniformMatrix4x2dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix4x2dv;
    pub static mut UniformMatrix4x2fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix4x2fv;
    pub static mut UniformMatrix4x3dv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void = super::failing::UniformMatrix4x3dv;
    pub static mut UniformMatrix4x3fv: extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void = super::failing::UniformMatrix4x3fv;
    pub static mut UniformSubroutinesuiv: extern "C" fn(shadertype: GLenum, count: GLsizei, indices: *GLuint) -> c_void = super::failing::UniformSubroutinesuiv;
    pub static mut Uniformui64NV: extern "C" fn(location: GLint, value: GLuint64EXT) -> c_void = super::failing::Uniformui64NV;
    pub static mut Uniformui64vNV: extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void = super::failing::Uniformui64vNV;
    pub static mut UnlockArraysEXT: extern "C" fn() -> c_void = super::failing::UnlockArraysEXT;
    pub static mut UnmapBuffer: extern "C" fn(target: GLenum) -> GLboolean = super::failing::UnmapBuffer;
    pub static mut UnmapBufferARB: extern "C" fn(target: GLenum) -> GLboolean = super::failing::UnmapBufferARB;
    pub static mut UnmapBufferOES: extern "C" fn(target: GLenum) -> GLboolean = super::failing::UnmapBufferOES;
    pub static mut UnmapNamedBufferEXT: extern "C" fn(buffer: GLuint) -> GLboolean = super::failing::UnmapNamedBufferEXT;
    pub static mut UnmapObjectBufferATI: extern "C" fn(buffer: GLuint) -> c_void = super::failing::UnmapObjectBufferATI;
    pub static mut UnmapTexture2DINTEL: extern "C" fn(texture: GLuint, level: GLint) -> c_void = super::failing::UnmapTexture2DINTEL;
    pub static mut UpdateObjectBufferATI: extern "C" fn(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *GLvoid, preserve: GLenum) -> c_void = super::failing::UpdateObjectBufferATI;
    pub static mut UseProgram: extern "C" fn(program: GLuint) -> c_void = super::failing::UseProgram;
    pub static mut UseProgramObjectARB: extern "C" fn(programObj: GLhandleARB) -> c_void = super::failing::UseProgramObjectARB;
    pub static mut UseProgramStages: extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void = super::failing::UseProgramStages;
    pub static mut UseProgramStagesEXT: extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void = super::failing::UseProgramStagesEXT;
    pub static mut UseShaderProgramEXT: extern "C" fn(type_: GLenum, program: GLuint) -> c_void = super::failing::UseShaderProgramEXT;
    pub static mut VDPAUFiniNV: extern "C" fn() -> c_void = super::failing::VDPAUFiniNV;
    pub static mut VDPAUGetSurfaceivNV: extern "C" fn(surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void = super::failing::VDPAUGetSurfaceivNV;
    pub static mut VDPAUInitNV: extern "C" fn(vdpDevice: *GLvoid, getProcAddress: *GLvoid) -> c_void = super::failing::VDPAUInitNV;
    pub static mut VDPAUIsSurfaceNV: extern "C" fn(surface: GLvdpauSurfaceNV) -> c_void = super::failing::VDPAUIsSurfaceNV;
    pub static mut VDPAUMapSurfacesNV: extern "C" fn(numSurfaces: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void = super::failing::VDPAUMapSurfacesNV;
    pub static mut VDPAURegisterOutputSurfaceNV: extern "C" fn(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV = super::failing::VDPAURegisterOutputSurfaceNV;
    pub static mut VDPAURegisterVideoSurfaceNV: extern "C" fn(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV = super::failing::VDPAURegisterVideoSurfaceNV;
    pub static mut VDPAUSurfaceAccessNV: extern "C" fn(surface: GLvdpauSurfaceNV, access: GLenum) -> c_void = super::failing::VDPAUSurfaceAccessNV;
    pub static mut VDPAUUnmapSurfacesNV: extern "C" fn(numSurface: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void = super::failing::VDPAUUnmapSurfacesNV;
    pub static mut VDPAUUnregisterSurfaceNV: extern "C" fn(surface: GLvdpauSurfaceNV) -> c_void = super::failing::VDPAUUnregisterSurfaceNV;
    pub static mut ValidateProgram: extern "C" fn(program: GLuint) -> c_void = super::failing::ValidateProgram;
    pub static mut ValidateProgramARB: extern "C" fn(programObj: GLhandleARB) -> c_void = super::failing::ValidateProgramARB;
    pub static mut ValidateProgramPipeline: extern "C" fn(pipeline: GLuint) -> c_void = super::failing::ValidateProgramPipeline;
    pub static mut ValidateProgramPipelineEXT: extern "C" fn(pipeline: GLuint) -> c_void = super::failing::ValidateProgramPipelineEXT;
    pub static mut VariantArrayObjectATI: extern "C" fn(id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void = super::failing::VariantArrayObjectATI;
    pub static mut VariantPointerEXT: extern "C" fn(id: GLuint, type_: GLenum, stride: GLuint, addr: *GLvoid) -> c_void = super::failing::VariantPointerEXT;
    pub static mut VariantbvEXT: extern "C" fn(id: GLuint, addr: *GLbyte) -> c_void = super::failing::VariantbvEXT;
    pub static mut VariantdvEXT: extern "C" fn(id: GLuint, addr: *GLdouble) -> c_void = super::failing::VariantdvEXT;
    pub static mut VariantfvEXT: extern "C" fn(id: GLuint, addr: *GLfloat) -> c_void = super::failing::VariantfvEXT;
    pub static mut VariantivEXT: extern "C" fn(id: GLuint, addr: *GLint) -> c_void = super::failing::VariantivEXT;
    pub static mut VariantsvEXT: extern "C" fn(id: GLuint, addr: *GLshort) -> c_void = super::failing::VariantsvEXT;
    pub static mut VariantubvEXT: extern "C" fn(id: GLuint, addr: *GLubyte) -> c_void = super::failing::VariantubvEXT;
    pub static mut VariantuivEXT: extern "C" fn(id: GLuint, addr: *GLuint) -> c_void = super::failing::VariantuivEXT;
    pub static mut VariantusvEXT: extern "C" fn(id: GLuint, addr: *GLushort) -> c_void = super::failing::VariantusvEXT;
    pub static mut Vertex2bOES: extern "C" fn(x: GLbyte) -> c_void = super::failing::Vertex2bOES;
    pub static mut Vertex2bvOES: extern "C" fn(coords: *GLbyte) -> c_void = super::failing::Vertex2bvOES;
    pub static mut Vertex2d: extern "C" fn(x: GLdouble, y: GLdouble) -> c_void = super::failing::Vertex2d;
    pub static mut Vertex2dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::Vertex2dv;
    pub static mut Vertex2f: extern "C" fn(x: GLfloat, y: GLfloat) -> c_void = super::failing::Vertex2f;
    pub static mut Vertex2fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::Vertex2fv;
    pub static mut Vertex2hNV: extern "C" fn(x: GLhalfNV, y: GLhalfNV) -> c_void = super::failing::Vertex2hNV;
    pub static mut Vertex2hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::Vertex2hvNV;
    pub static mut Vertex2i: extern "C" fn(x: GLint, y: GLint) -> c_void = super::failing::Vertex2i;
    pub static mut Vertex2iv: extern "C" fn(v: *GLint) -> c_void = super::failing::Vertex2iv;
    pub static mut Vertex2s: extern "C" fn(x: GLshort, y: GLshort) -> c_void = super::failing::Vertex2s;
    pub static mut Vertex2sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::Vertex2sv;
    pub static mut Vertex2xOES: extern "C" fn(x: GLfixed) -> c_void = super::failing::Vertex2xOES;
    pub static mut Vertex2xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::Vertex2xvOES;
    pub static mut Vertex3bOES: extern "C" fn(x: GLbyte, y: GLbyte) -> c_void = super::failing::Vertex3bOES;
    pub static mut Vertex3bvOES: extern "C" fn(coords: *GLbyte) -> c_void = super::failing::Vertex3bvOES;
    pub static mut Vertex3d: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::Vertex3d;
    pub static mut Vertex3dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::Vertex3dv;
    pub static mut Vertex3f: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::Vertex3f;
    pub static mut Vertex3fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::Vertex3fv;
    pub static mut Vertex3hNV: extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void = super::failing::Vertex3hNV;
    pub static mut Vertex3hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::Vertex3hvNV;
    pub static mut Vertex3i: extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void = super::failing::Vertex3i;
    pub static mut Vertex3iv: extern "C" fn(v: *GLint) -> c_void = super::failing::Vertex3iv;
    pub static mut Vertex3s: extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::Vertex3s;
    pub static mut Vertex3sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::Vertex3sv;
    pub static mut Vertex3xOES: extern "C" fn(x: GLfixed, y: GLfixed) -> c_void = super::failing::Vertex3xOES;
    pub static mut Vertex3xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::Vertex3xvOES;
    pub static mut Vertex4bOES: extern "C" fn(x: GLbyte, y: GLbyte, z: GLbyte) -> c_void = super::failing::Vertex4bOES;
    pub static mut Vertex4bvOES: extern "C" fn(coords: *GLbyte) -> c_void = super::failing::Vertex4bvOES;
    pub static mut Vertex4d: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::Vertex4d;
    pub static mut Vertex4dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::Vertex4dv;
    pub static mut Vertex4f: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::Vertex4f;
    pub static mut Vertex4fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::Vertex4fv;
    pub static mut Vertex4hNV: extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void = super::failing::Vertex4hNV;
    pub static mut Vertex4hvNV: extern "C" fn(v: *GLhalfNV) -> c_void = super::failing::Vertex4hvNV;
    pub static mut Vertex4i: extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::Vertex4i;
    pub static mut Vertex4iv: extern "C" fn(v: *GLint) -> c_void = super::failing::Vertex4iv;
    pub static mut Vertex4s: extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void = super::failing::Vertex4s;
    pub static mut Vertex4sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::Vertex4sv;
    pub static mut Vertex4xOES: extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void = super::failing::Vertex4xOES;
    pub static mut Vertex4xvOES: extern "C" fn(coords: *GLfixed) -> c_void = super::failing::Vertex4xvOES;
    pub static mut VertexArrayBindVertexBufferEXT: extern "C" fn(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void = super::failing::VertexArrayBindVertexBufferEXT;
    pub static mut VertexArrayColorOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayColorOffsetEXT;
    pub static mut VertexArrayEdgeFlagOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayEdgeFlagOffsetEXT;
    pub static mut VertexArrayFogCoordOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayFogCoordOffsetEXT;
    pub static mut VertexArrayIndexOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayIndexOffsetEXT;
    pub static mut VertexArrayMultiTexCoordOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayMultiTexCoordOffsetEXT;
    pub static mut VertexArrayNormalOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayNormalOffsetEXT;
    pub static mut VertexArrayParameteriAPPLE: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::VertexArrayParameteriAPPLE;
    pub static mut VertexArrayRangeAPPLE: extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexArrayRangeAPPLE;
    pub static mut VertexArrayRangeNV: extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexArrayRangeNV;
    pub static mut VertexArraySecondaryColorOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArraySecondaryColorOffsetEXT;
    pub static mut VertexArrayTexCoordOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayTexCoordOffsetEXT;
    pub static mut VertexArrayVertexAttribBindingEXT: extern "C" fn(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> c_void = super::failing::VertexArrayVertexAttribBindingEXT;
    pub static mut VertexArrayVertexAttribFormatEXT: extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void = super::failing::VertexArrayVertexAttribFormatEXT;
    pub static mut VertexArrayVertexAttribIFormatEXT: extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void = super::failing::VertexArrayVertexAttribIFormatEXT;
    pub static mut VertexArrayVertexAttribIOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayVertexAttribIOffsetEXT;
    pub static mut VertexArrayVertexAttribLFormatEXT: extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void = super::failing::VertexArrayVertexAttribLFormatEXT;
    pub static mut VertexArrayVertexAttribLOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayVertexAttribLOffsetEXT;
    pub static mut VertexArrayVertexAttribOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayVertexAttribOffsetEXT;
    pub static mut VertexArrayVertexBindingDivisorEXT: extern "C" fn(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> c_void = super::failing::VertexArrayVertexBindingDivisorEXT;
    pub static mut VertexArrayVertexOffsetEXT: extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void = super::failing::VertexArrayVertexOffsetEXT;
    pub static mut VertexAttrib1d: extern "C" fn(index: GLuint, x: GLdouble) -> c_void = super::failing::VertexAttrib1d;
    pub static mut VertexAttrib1dARB: extern "C" fn(index: GLuint, x: GLdouble) -> c_void = super::failing::VertexAttrib1dARB;
    pub static mut VertexAttrib1dNV: extern "C" fn(index: GLuint, x: GLdouble) -> c_void = super::failing::VertexAttrib1dNV;
    pub static mut VertexAttrib1dv: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib1dv;
    pub static mut VertexAttrib1dvARB: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib1dvARB;
    pub static mut VertexAttrib1dvNV: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib1dvNV;
    pub static mut VertexAttrib1f: extern "C" fn(index: GLuint, x: GLfloat) -> c_void = super::failing::VertexAttrib1f;
    pub static mut VertexAttrib1fARB: extern "C" fn(index: GLuint, x: GLfloat) -> c_void = super::failing::VertexAttrib1fARB;
    pub static mut VertexAttrib1fNV: extern "C" fn(index: GLuint, x: GLfloat) -> c_void = super::failing::VertexAttrib1fNV;
    pub static mut VertexAttrib1fv: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib1fv;
    pub static mut VertexAttrib1fvARB: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib1fvARB;
    pub static mut VertexAttrib1fvNV: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib1fvNV;
    pub static mut VertexAttrib1hNV: extern "C" fn(index: GLuint, x: GLhalfNV) -> c_void = super::failing::VertexAttrib1hNV;
    pub static mut VertexAttrib1hvNV: extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void = super::failing::VertexAttrib1hvNV;
    pub static mut VertexAttrib1s: extern "C" fn(index: GLuint, x: GLshort) -> c_void = super::failing::VertexAttrib1s;
    pub static mut VertexAttrib1sARB: extern "C" fn(index: GLuint, x: GLshort) -> c_void = super::failing::VertexAttrib1sARB;
    pub static mut VertexAttrib1sNV: extern "C" fn(index: GLuint, x: GLshort) -> c_void = super::failing::VertexAttrib1sNV;
    pub static mut VertexAttrib1sv: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib1sv;
    pub static mut VertexAttrib1svARB: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib1svARB;
    pub static mut VertexAttrib1svNV: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib1svNV;
    pub static mut VertexAttrib2d: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void = super::failing::VertexAttrib2d;
    pub static mut VertexAttrib2dARB: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void = super::failing::VertexAttrib2dARB;
    pub static mut VertexAttrib2dNV: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void = super::failing::VertexAttrib2dNV;
    pub static mut VertexAttrib2dv: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib2dv;
    pub static mut VertexAttrib2dvARB: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib2dvARB;
    pub static mut VertexAttrib2dvNV: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib2dvNV;
    pub static mut VertexAttrib2f: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void = super::failing::VertexAttrib2f;
    pub static mut VertexAttrib2fARB: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void = super::failing::VertexAttrib2fARB;
    pub static mut VertexAttrib2fNV: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void = super::failing::VertexAttrib2fNV;
    pub static mut VertexAttrib2fv: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib2fv;
    pub static mut VertexAttrib2fvARB: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib2fvARB;
    pub static mut VertexAttrib2fvNV: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib2fvNV;
    pub static mut VertexAttrib2hNV: extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV) -> c_void = super::failing::VertexAttrib2hNV;
    pub static mut VertexAttrib2hvNV: extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void = super::failing::VertexAttrib2hvNV;
    pub static mut VertexAttrib2s: extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void = super::failing::VertexAttrib2s;
    pub static mut VertexAttrib2sARB: extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void = super::failing::VertexAttrib2sARB;
    pub static mut VertexAttrib2sNV: extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void = super::failing::VertexAttrib2sNV;
    pub static mut VertexAttrib2sv: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib2sv;
    pub static mut VertexAttrib2svARB: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib2svARB;
    pub static mut VertexAttrib2svNV: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib2svNV;
    pub static mut VertexAttrib3d: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::VertexAttrib3d;
    pub static mut VertexAttrib3dARB: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::VertexAttrib3dARB;
    pub static mut VertexAttrib3dNV: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::VertexAttrib3dNV;
    pub static mut VertexAttrib3dv: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib3dv;
    pub static mut VertexAttrib3dvARB: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib3dvARB;
    pub static mut VertexAttrib3dvNV: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib3dvNV;
    pub static mut VertexAttrib3f: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::VertexAttrib3f;
    pub static mut VertexAttrib3fARB: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::VertexAttrib3fARB;
    pub static mut VertexAttrib3fNV: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::VertexAttrib3fNV;
    pub static mut VertexAttrib3fv: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib3fv;
    pub static mut VertexAttrib3fvARB: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib3fvARB;
    pub static mut VertexAttrib3fvNV: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib3fvNV;
    pub static mut VertexAttrib3hNV: extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void = super::failing::VertexAttrib3hNV;
    pub static mut VertexAttrib3hvNV: extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void = super::failing::VertexAttrib3hvNV;
    pub static mut VertexAttrib3s: extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::VertexAttrib3s;
    pub static mut VertexAttrib3sARB: extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::VertexAttrib3sARB;
    pub static mut VertexAttrib3sNV: extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::VertexAttrib3sNV;
    pub static mut VertexAttrib3sv: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib3sv;
    pub static mut VertexAttrib3svARB: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib3svARB;
    pub static mut VertexAttrib3svNV: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib3svNV;
    pub static mut VertexAttrib4Nbv: extern "C" fn(index: GLuint, v: *GLbyte) -> c_void = super::failing::VertexAttrib4Nbv;
    pub static mut VertexAttrib4NbvARB: extern "C" fn(index: GLuint, v: *GLbyte) -> c_void = super::failing::VertexAttrib4NbvARB;
    pub static mut VertexAttrib4Niv: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttrib4Niv;
    pub static mut VertexAttrib4NivARB: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttrib4NivARB;
    pub static mut VertexAttrib4Nsv: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib4Nsv;
    pub static mut VertexAttrib4NsvARB: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib4NsvARB;
    pub static mut VertexAttrib4Nub: extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void = super::failing::VertexAttrib4Nub;
    pub static mut VertexAttrib4NubARB: extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void = super::failing::VertexAttrib4NubARB;
    pub static mut VertexAttrib4Nubv: extern "C" fn(index: GLuint, v: *GLubyte) -> c_void = super::failing::VertexAttrib4Nubv;
    pub static mut VertexAttrib4NubvARB: extern "C" fn(index: GLuint, v: *GLubyte) -> c_void = super::failing::VertexAttrib4NubvARB;
    pub static mut VertexAttrib4Nuiv: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttrib4Nuiv;
    pub static mut VertexAttrib4NuivARB: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttrib4NuivARB;
    pub static mut VertexAttrib4Nusv: extern "C" fn(index: GLuint, v: *GLushort) -> c_void = super::failing::VertexAttrib4Nusv;
    pub static mut VertexAttrib4NusvARB: extern "C" fn(index: GLuint, v: *GLushort) -> c_void = super::failing::VertexAttrib4NusvARB;
    pub static mut VertexAttrib4bv: extern "C" fn(index: GLuint, v: *GLbyte) -> c_void = super::failing::VertexAttrib4bv;
    pub static mut VertexAttrib4bvARB: extern "C" fn(index: GLuint, v: *GLbyte) -> c_void = super::failing::VertexAttrib4bvARB;
    pub static mut VertexAttrib4d: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::VertexAttrib4d;
    pub static mut VertexAttrib4dARB: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::VertexAttrib4dARB;
    pub static mut VertexAttrib4dNV: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::VertexAttrib4dNV;
    pub static mut VertexAttrib4dv: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib4dv;
    pub static mut VertexAttrib4dvARB: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib4dvARB;
    pub static mut VertexAttrib4dvNV: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttrib4dvNV;
    pub static mut VertexAttrib4f: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::VertexAttrib4f;
    pub static mut VertexAttrib4fARB: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::VertexAttrib4fARB;
    pub static mut VertexAttrib4fNV: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::VertexAttrib4fNV;
    pub static mut VertexAttrib4fv: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib4fv;
    pub static mut VertexAttrib4fvARB: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib4fvARB;
    pub static mut VertexAttrib4fvNV: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::VertexAttrib4fvNV;
    pub static mut VertexAttrib4hNV: extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void = super::failing::VertexAttrib4hNV;
    pub static mut VertexAttrib4hvNV: extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void = super::failing::VertexAttrib4hvNV;
    pub static mut VertexAttrib4iv: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttrib4iv;
    pub static mut VertexAttrib4ivARB: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttrib4ivARB;
    pub static mut VertexAttrib4s: extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void = super::failing::VertexAttrib4s;
    pub static mut VertexAttrib4sARB: extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void = super::failing::VertexAttrib4sARB;
    pub static mut VertexAttrib4sNV: extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void = super::failing::VertexAttrib4sNV;
    pub static mut VertexAttrib4sv: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib4sv;
    pub static mut VertexAttrib4svARB: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib4svARB;
    pub static mut VertexAttrib4svNV: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttrib4svNV;
    pub static mut VertexAttrib4ubNV: extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void = super::failing::VertexAttrib4ubNV;
    pub static mut VertexAttrib4ubv: extern "C" fn(index: GLuint, v: *GLubyte) -> c_void = super::failing::VertexAttrib4ubv;
    pub static mut VertexAttrib4ubvARB: extern "C" fn(index: GLuint, v: *GLubyte) -> c_void = super::failing::VertexAttrib4ubvARB;
    pub static mut VertexAttrib4ubvNV: extern "C" fn(index: GLuint, v: *GLubyte) -> c_void = super::failing::VertexAttrib4ubvNV;
    pub static mut VertexAttrib4uiv: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttrib4uiv;
    pub static mut VertexAttrib4uivARB: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttrib4uivARB;
    pub static mut VertexAttrib4usv: extern "C" fn(index: GLuint, v: *GLushort) -> c_void = super::failing::VertexAttrib4usv;
    pub static mut VertexAttrib4usvARB: extern "C" fn(index: GLuint, v: *GLushort) -> c_void = super::failing::VertexAttrib4usvARB;
    pub static mut VertexAttribArrayObjectATI: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void = super::failing::VertexAttribArrayObjectATI;
    pub static mut VertexAttribBinding: extern "C" fn(attribindex: GLuint, bindingindex: GLuint) -> c_void = super::failing::VertexAttribBinding;
    pub static mut VertexAttribDivisor: extern "C" fn(index: GLuint, divisor: GLuint) -> c_void = super::failing::VertexAttribDivisor;
    pub static mut VertexAttribDivisorANGLE: extern "C" fn(index: GLuint, divisor: GLuint) -> c_void = super::failing::VertexAttribDivisorANGLE;
    pub static mut VertexAttribDivisorARB: extern "C" fn(index: GLuint, divisor: GLuint) -> c_void = super::failing::VertexAttribDivisorARB;
    pub static mut VertexAttribDivisorNV: extern "C" fn(index: GLuint, divisor: GLuint) -> c_void = super::failing::VertexAttribDivisorNV;
    pub static mut VertexAttribFormat: extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void = super::failing::VertexAttribFormat;
    pub static mut VertexAttribFormatNV: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) -> c_void = super::failing::VertexAttribFormatNV;
    pub static mut VertexAttribI1i: extern "C" fn(index: GLuint, x: GLint) -> c_void = super::failing::VertexAttribI1i;
    pub static mut VertexAttribI1iEXT: extern "C" fn(index: GLuint, x: GLint) -> c_void = super::failing::VertexAttribI1iEXT;
    pub static mut VertexAttribI1iv: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttribI1iv;
    pub static mut VertexAttribI1ivEXT: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttribI1ivEXT;
    pub static mut VertexAttribI1ui: extern "C" fn(index: GLuint, x: GLuint) -> c_void = super::failing::VertexAttribI1ui;
    pub static mut VertexAttribI1uiEXT: extern "C" fn(index: GLuint, x: GLuint) -> c_void = super::failing::VertexAttribI1uiEXT;
    pub static mut VertexAttribI1uiv: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttribI1uiv;
    pub static mut VertexAttribI1uivEXT: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttribI1uivEXT;
    pub static mut VertexAttribI2i: extern "C" fn(index: GLuint, x: GLint, y: GLint) -> c_void = super::failing::VertexAttribI2i;
    pub static mut VertexAttribI2iEXT: extern "C" fn(index: GLuint, x: GLint, y: GLint) -> c_void = super::failing::VertexAttribI2iEXT;
    pub static mut VertexAttribI2iv: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttribI2iv;
    pub static mut VertexAttribI2ivEXT: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttribI2ivEXT;
    pub static mut VertexAttribI2ui: extern "C" fn(index: GLuint, x: GLuint, y: GLuint) -> c_void = super::failing::VertexAttribI2ui;
    pub static mut VertexAttribI2uiEXT: extern "C" fn(index: GLuint, x: GLuint, y: GLuint) -> c_void = super::failing::VertexAttribI2uiEXT;
    pub static mut VertexAttribI2uiv: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttribI2uiv;
    pub static mut VertexAttribI2uivEXT: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttribI2uivEXT;
    pub static mut VertexAttribI3i: extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void = super::failing::VertexAttribI3i;
    pub static mut VertexAttribI3iEXT: extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void = super::failing::VertexAttribI3iEXT;
    pub static mut VertexAttribI3iv: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttribI3iv;
    pub static mut VertexAttribI3ivEXT: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttribI3ivEXT;
    pub static mut VertexAttribI3ui: extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void = super::failing::VertexAttribI3ui;
    pub static mut VertexAttribI3uiEXT: extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void = super::failing::VertexAttribI3uiEXT;
    pub static mut VertexAttribI3uiv: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttribI3uiv;
    pub static mut VertexAttribI3uivEXT: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttribI3uivEXT;
    pub static mut VertexAttribI4bv: extern "C" fn(index: GLuint, v: *GLbyte) -> c_void = super::failing::VertexAttribI4bv;
    pub static mut VertexAttribI4bvEXT: extern "C" fn(index: GLuint, v: *GLbyte) -> c_void = super::failing::VertexAttribI4bvEXT;
    pub static mut VertexAttribI4i: extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::VertexAttribI4i;
    pub static mut VertexAttribI4iEXT: extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::VertexAttribI4iEXT;
    pub static mut VertexAttribI4iv: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttribI4iv;
    pub static mut VertexAttribI4ivEXT: extern "C" fn(index: GLuint, v: *GLint) -> c_void = super::failing::VertexAttribI4ivEXT;
    pub static mut VertexAttribI4sv: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttribI4sv;
    pub static mut VertexAttribI4svEXT: extern "C" fn(index: GLuint, v: *GLshort) -> c_void = super::failing::VertexAttribI4svEXT;
    pub static mut VertexAttribI4ubv: extern "C" fn(index: GLuint, v: *GLubyte) -> c_void = super::failing::VertexAttribI4ubv;
    pub static mut VertexAttribI4ubvEXT: extern "C" fn(index: GLuint, v: *GLubyte) -> c_void = super::failing::VertexAttribI4ubvEXT;
    pub static mut VertexAttribI4ui: extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void = super::failing::VertexAttribI4ui;
    pub static mut VertexAttribI4uiEXT: extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void = super::failing::VertexAttribI4uiEXT;
    pub static mut VertexAttribI4uiv: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttribI4uiv;
    pub static mut VertexAttribI4uivEXT: extern "C" fn(index: GLuint, v: *GLuint) -> c_void = super::failing::VertexAttribI4uivEXT;
    pub static mut VertexAttribI4usv: extern "C" fn(index: GLuint, v: *GLushort) -> c_void = super::failing::VertexAttribI4usv;
    pub static mut VertexAttribI4usvEXT: extern "C" fn(index: GLuint, v: *GLushort) -> c_void = super::failing::VertexAttribI4usvEXT;
    pub static mut VertexAttribIFormat: extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void = super::failing::VertexAttribIFormat;
    pub static mut VertexAttribIFormatNV: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void = super::failing::VertexAttribIFormatNV;
    pub static mut VertexAttribIPointer: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexAttribIPointer;
    pub static mut VertexAttribIPointerEXT: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexAttribIPointerEXT;
    pub static mut VertexAttribL1d: extern "C" fn(index: GLuint, x: GLdouble) -> c_void = super::failing::VertexAttribL1d;
    pub static mut VertexAttribL1dEXT: extern "C" fn(index: GLuint, x: GLdouble) -> c_void = super::failing::VertexAttribL1dEXT;
    pub static mut VertexAttribL1dv: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttribL1dv;
    pub static mut VertexAttribL1dvEXT: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttribL1dvEXT;
    pub static mut VertexAttribL1i64NV: extern "C" fn(index: GLuint, x: GLint64EXT) -> c_void = super::failing::VertexAttribL1i64NV;
    pub static mut VertexAttribL1i64vNV: extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void = super::failing::VertexAttribL1i64vNV;
    pub static mut VertexAttribL1ui64ARB: extern "C" fn(index: GLuint, x: GLuint64EXT) -> c_void = super::failing::VertexAttribL1ui64ARB;
    pub static mut VertexAttribL1ui64NV: extern "C" fn(index: GLuint, x: GLuint64EXT) -> c_void = super::failing::VertexAttribL1ui64NV;
    pub static mut VertexAttribL1ui64vARB: extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void = super::failing::VertexAttribL1ui64vARB;
    pub static mut VertexAttribL1ui64vNV: extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void = super::failing::VertexAttribL1ui64vNV;
    pub static mut VertexAttribL2d: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void = super::failing::VertexAttribL2d;
    pub static mut VertexAttribL2dEXT: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void = super::failing::VertexAttribL2dEXT;
    pub static mut VertexAttribL2dv: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttribL2dv;
    pub static mut VertexAttribL2dvEXT: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttribL2dvEXT;
    pub static mut VertexAttribL2i64NV: extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT) -> c_void = super::failing::VertexAttribL2i64NV;
    pub static mut VertexAttribL2i64vNV: extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void = super::failing::VertexAttribL2i64vNV;
    pub static mut VertexAttribL2ui64NV: extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT) -> c_void = super::failing::VertexAttribL2ui64NV;
    pub static mut VertexAttribL2ui64vNV: extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void = super::failing::VertexAttribL2ui64vNV;
    pub static mut VertexAttribL3d: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::VertexAttribL3d;
    pub static mut VertexAttribL3dEXT: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::VertexAttribL3dEXT;
    pub static mut VertexAttribL3dv: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttribL3dv;
    pub static mut VertexAttribL3dvEXT: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttribL3dvEXT;
    pub static mut VertexAttribL3i64NV: extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void = super::failing::VertexAttribL3i64NV;
    pub static mut VertexAttribL3i64vNV: extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void = super::failing::VertexAttribL3i64vNV;
    pub static mut VertexAttribL3ui64NV: extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void = super::failing::VertexAttribL3ui64NV;
    pub static mut VertexAttribL3ui64vNV: extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void = super::failing::VertexAttribL3ui64vNV;
    pub static mut VertexAttribL4d: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::VertexAttribL4d;
    pub static mut VertexAttribL4dEXT: extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::VertexAttribL4dEXT;
    pub static mut VertexAttribL4dv: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttribL4dv;
    pub static mut VertexAttribL4dvEXT: extern "C" fn(index: GLuint, v: *GLdouble) -> c_void = super::failing::VertexAttribL4dvEXT;
    pub static mut VertexAttribL4i64NV: extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void = super::failing::VertexAttribL4i64NV;
    pub static mut VertexAttribL4i64vNV: extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void = super::failing::VertexAttribL4i64vNV;
    pub static mut VertexAttribL4ui64NV: extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void = super::failing::VertexAttribL4ui64NV;
    pub static mut VertexAttribL4ui64vNV: extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void = super::failing::VertexAttribL4ui64vNV;
    pub static mut VertexAttribLFormat: extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void = super::failing::VertexAttribLFormat;
    pub static mut VertexAttribLFormatNV: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void = super::failing::VertexAttribLFormatNV;
    pub static mut VertexAttribLPointer: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexAttribLPointer;
    pub static mut VertexAttribLPointerEXT: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexAttribLPointerEXT;
    pub static mut VertexAttribP1ui: extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void = super::failing::VertexAttribP1ui;
    pub static mut VertexAttribP1uiv: extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void = super::failing::VertexAttribP1uiv;
    pub static mut VertexAttribP2ui: extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void = super::failing::VertexAttribP2ui;
    pub static mut VertexAttribP2uiv: extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void = super::failing::VertexAttribP2uiv;
    pub static mut VertexAttribP3ui: extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void = super::failing::VertexAttribP3ui;
    pub static mut VertexAttribP3uiv: extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void = super::failing::VertexAttribP3uiv;
    pub static mut VertexAttribP4ui: extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void = super::failing::VertexAttribP4ui;
    pub static mut VertexAttribP4uiv: extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void = super::failing::VertexAttribP4uiv;
    pub static mut VertexAttribParameteriAMD: extern "C" fn(index: GLuint, pname: GLenum, param: GLint) -> c_void = super::failing::VertexAttribParameteriAMD;
    pub static mut VertexAttribPointer: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexAttribPointer;
    pub static mut VertexAttribPointerARB: extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexAttribPointerARB;
    pub static mut VertexAttribPointerNV: extern "C" fn(index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexAttribPointerNV;
    pub static mut VertexAttribs1dvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void = super::failing::VertexAttribs1dvNV;
    pub static mut VertexAttribs1fvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void = super::failing::VertexAttribs1fvNV;
    pub static mut VertexAttribs1hvNV: extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void = super::failing::VertexAttribs1hvNV;
    pub static mut VertexAttribs1svNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void = super::failing::VertexAttribs1svNV;
    pub static mut VertexAttribs2dvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void = super::failing::VertexAttribs2dvNV;
    pub static mut VertexAttribs2fvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void = super::failing::VertexAttribs2fvNV;
    pub static mut VertexAttribs2hvNV: extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void = super::failing::VertexAttribs2hvNV;
    pub static mut VertexAttribs2svNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void = super::failing::VertexAttribs2svNV;
    pub static mut VertexAttribs3dvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void = super::failing::VertexAttribs3dvNV;
    pub static mut VertexAttribs3fvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void = super::failing::VertexAttribs3fvNV;
    pub static mut VertexAttribs3hvNV: extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void = super::failing::VertexAttribs3hvNV;
    pub static mut VertexAttribs3svNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void = super::failing::VertexAttribs3svNV;
    pub static mut VertexAttribs4dvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void = super::failing::VertexAttribs4dvNV;
    pub static mut VertexAttribs4fvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void = super::failing::VertexAttribs4fvNV;
    pub static mut VertexAttribs4hvNV: extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void = super::failing::VertexAttribs4hvNV;
    pub static mut VertexAttribs4svNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void = super::failing::VertexAttribs4svNV;
    pub static mut VertexAttribs4ubvNV: extern "C" fn(index: GLuint, count: GLsizei, v: *GLubyte) -> c_void = super::failing::VertexAttribs4ubvNV;
    pub static mut VertexBindingDivisor: extern "C" fn(bindingindex: GLuint, divisor: GLuint) -> c_void = super::failing::VertexBindingDivisor;
    pub static mut VertexBlendARB: extern "C" fn(count: GLint) -> c_void = super::failing::VertexBlendARB;
    pub static mut VertexBlendEnvfATI: extern "C" fn(pname: GLenum, param: GLfloat) -> c_void = super::failing::VertexBlendEnvfATI;
    pub static mut VertexBlendEnviATI: extern "C" fn(pname: GLenum, param: GLint) -> c_void = super::failing::VertexBlendEnviATI;
    pub static mut VertexFormatNV: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void = super::failing::VertexFormatNV;
    pub static mut VertexP2ui: extern "C" fn(type_: GLenum, value: GLuint) -> c_void = super::failing::VertexP2ui;
    pub static mut VertexP2uiv: extern "C" fn(type_: GLenum, value: *GLuint) -> c_void = super::failing::VertexP2uiv;
    pub static mut VertexP3ui: extern "C" fn(type_: GLenum, value: GLuint) -> c_void = super::failing::VertexP3ui;
    pub static mut VertexP3uiv: extern "C" fn(type_: GLenum, value: *GLuint) -> c_void = super::failing::VertexP3uiv;
    pub static mut VertexP4ui: extern "C" fn(type_: GLenum, value: GLuint) -> c_void = super::failing::VertexP4ui;
    pub static mut VertexP4uiv: extern "C" fn(type_: GLenum, value: *GLuint) -> c_void = super::failing::VertexP4uiv;
    pub static mut VertexPointer: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexPointer;
    pub static mut VertexPointerEXT: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexPointerEXT;
    pub static mut VertexPointerListIBM: extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void = super::failing::VertexPointerListIBM;
    pub static mut VertexPointervINTEL: extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void = super::failing::VertexPointervINTEL;
    pub static mut VertexStream1dATI: extern "C" fn(stream: GLenum, x: GLdouble) -> c_void = super::failing::VertexStream1dATI;
    pub static mut VertexStream1dvATI: extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void = super::failing::VertexStream1dvATI;
    pub static mut VertexStream1fATI: extern "C" fn(stream: GLenum, x: GLfloat) -> c_void = super::failing::VertexStream1fATI;
    pub static mut VertexStream1fvATI: extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void = super::failing::VertexStream1fvATI;
    pub static mut VertexStream1iATI: extern "C" fn(stream: GLenum, x: GLint) -> c_void = super::failing::VertexStream1iATI;
    pub static mut VertexStream1ivATI: extern "C" fn(stream: GLenum, coords: *GLint) -> c_void = super::failing::VertexStream1ivATI;
    pub static mut VertexStream1sATI: extern "C" fn(stream: GLenum, x: GLshort) -> c_void = super::failing::VertexStream1sATI;
    pub static mut VertexStream1svATI: extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void = super::failing::VertexStream1svATI;
    pub static mut VertexStream2dATI: extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble) -> c_void = super::failing::VertexStream2dATI;
    pub static mut VertexStream2dvATI: extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void = super::failing::VertexStream2dvATI;
    pub static mut VertexStream2fATI: extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat) -> c_void = super::failing::VertexStream2fATI;
    pub static mut VertexStream2fvATI: extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void = super::failing::VertexStream2fvATI;
    pub static mut VertexStream2iATI: extern "C" fn(stream: GLenum, x: GLint, y: GLint) -> c_void = super::failing::VertexStream2iATI;
    pub static mut VertexStream2ivATI: extern "C" fn(stream: GLenum, coords: *GLint) -> c_void = super::failing::VertexStream2ivATI;
    pub static mut VertexStream2sATI: extern "C" fn(stream: GLenum, x: GLshort, y: GLshort) -> c_void = super::failing::VertexStream2sATI;
    pub static mut VertexStream2svATI: extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void = super::failing::VertexStream2svATI;
    pub static mut VertexStream3dATI: extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::VertexStream3dATI;
    pub static mut VertexStream3dvATI: extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void = super::failing::VertexStream3dvATI;
    pub static mut VertexStream3fATI: extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::VertexStream3fATI;
    pub static mut VertexStream3fvATI: extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void = super::failing::VertexStream3fvATI;
    pub static mut VertexStream3iATI: extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint) -> c_void = super::failing::VertexStream3iATI;
    pub static mut VertexStream3ivATI: extern "C" fn(stream: GLenum, coords: *GLint) -> c_void = super::failing::VertexStream3ivATI;
    pub static mut VertexStream3sATI: extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::VertexStream3sATI;
    pub static mut VertexStream3svATI: extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void = super::failing::VertexStream3svATI;
    pub static mut VertexStream4dATI: extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::VertexStream4dATI;
    pub static mut VertexStream4dvATI: extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void = super::failing::VertexStream4dvATI;
    pub static mut VertexStream4fATI: extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::VertexStream4fATI;
    pub static mut VertexStream4fvATI: extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void = super::failing::VertexStream4fvATI;
    pub static mut VertexStream4iATI: extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::VertexStream4iATI;
    pub static mut VertexStream4ivATI: extern "C" fn(stream: GLenum, coords: *GLint) -> c_void = super::failing::VertexStream4ivATI;
    pub static mut VertexStream4sATI: extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void = super::failing::VertexStream4sATI;
    pub static mut VertexStream4svATI: extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void = super::failing::VertexStream4svATI;
    pub static mut VertexWeightPointerEXT: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::VertexWeightPointerEXT;
    pub static mut VertexWeightfEXT: extern "C" fn(weight: GLfloat) -> c_void = super::failing::VertexWeightfEXT;
    pub static mut VertexWeightfvEXT: extern "C" fn(weight: *GLfloat) -> c_void = super::failing::VertexWeightfvEXT;
    pub static mut VertexWeighthNV: extern "C" fn(weight: GLhalfNV) -> c_void = super::failing::VertexWeighthNV;
    pub static mut VertexWeighthvNV: extern "C" fn(weight: *GLhalfNV) -> c_void = super::failing::VertexWeighthvNV;
    pub static mut VideoCaptureNV: extern "C" fn(video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) -> GLenum = super::failing::VideoCaptureNV;
    pub static mut VideoCaptureStreamParameterdvNV: extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void = super::failing::VideoCaptureStreamParameterdvNV;
    pub static mut VideoCaptureStreamParameterfvNV: extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void = super::failing::VideoCaptureStreamParameterfvNV;
    pub static mut VideoCaptureStreamParameterivNV: extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void = super::failing::VideoCaptureStreamParameterivNV;
    pub static mut Viewport: extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void = super::failing::Viewport;
    pub static mut ViewportArrayv: extern "C" fn(first: GLuint, count: GLsizei, v: *GLfloat) -> c_void = super::failing::ViewportArrayv;
    pub static mut ViewportIndexedf: extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> c_void = super::failing::ViewportIndexedf;
    pub static mut ViewportIndexedfv: extern "C" fn(index: GLuint, v: *GLfloat) -> c_void = super::failing::ViewportIndexedfv;
    pub static mut WaitSync: extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void = super::failing::WaitSync;
    pub static mut WaitSyncAPPLE: extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void = super::failing::WaitSyncAPPLE;
    pub static mut WeightPathsNV: extern "C" fn(resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) -> c_void = super::failing::WeightPathsNV;
    pub static mut WeightPointerARB: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::WeightPointerARB;
    pub static mut WeightPointerOES: extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void = super::failing::WeightPointerOES;
    pub static mut WeightbvARB: extern "C" fn(size: GLint, weights: *GLbyte) -> c_void = super::failing::WeightbvARB;
    pub static mut WeightdvARB: extern "C" fn(size: GLint, weights: *GLdouble) -> c_void = super::failing::WeightdvARB;
    pub static mut WeightfvARB: extern "C" fn(size: GLint, weights: *GLfloat) -> c_void = super::failing::WeightfvARB;
    pub static mut WeightivARB: extern "C" fn(size: GLint, weights: *GLint) -> c_void = super::failing::WeightivARB;
    pub static mut WeightsvARB: extern "C" fn(size: GLint, weights: *GLshort) -> c_void = super::failing::WeightsvARB;
    pub static mut WeightubvARB: extern "C" fn(size: GLint, weights: *GLubyte) -> c_void = super::failing::WeightubvARB;
    pub static mut WeightuivARB: extern "C" fn(size: GLint, weights: *GLuint) -> c_void = super::failing::WeightuivARB;
    pub static mut WeightusvARB: extern "C" fn(size: GLint, weights: *GLushort) -> c_void = super::failing::WeightusvARB;
    pub static mut WindowPos2d: extern "C" fn(x: GLdouble, y: GLdouble) -> c_void = super::failing::WindowPos2d;
    pub static mut WindowPos2dARB: extern "C" fn(x: GLdouble, y: GLdouble) -> c_void = super::failing::WindowPos2dARB;
    pub static mut WindowPos2dMESA: extern "C" fn(x: GLdouble, y: GLdouble) -> c_void = super::failing::WindowPos2dMESA;
    pub static mut WindowPos2dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::WindowPos2dv;
    pub static mut WindowPos2dvARB: extern "C" fn(v: *GLdouble) -> c_void = super::failing::WindowPos2dvARB;
    pub static mut WindowPos2dvMESA: extern "C" fn(v: *GLdouble) -> c_void = super::failing::WindowPos2dvMESA;
    pub static mut WindowPos2f: extern "C" fn(x: GLfloat, y: GLfloat) -> c_void = super::failing::WindowPos2f;
    pub static mut WindowPos2fARB: extern "C" fn(x: GLfloat, y: GLfloat) -> c_void = super::failing::WindowPos2fARB;
    pub static mut WindowPos2fMESA: extern "C" fn(x: GLfloat, y: GLfloat) -> c_void = super::failing::WindowPos2fMESA;
    pub static mut WindowPos2fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::WindowPos2fv;
    pub static mut WindowPos2fvARB: extern "C" fn(v: *GLfloat) -> c_void = super::failing::WindowPos2fvARB;
    pub static mut WindowPos2fvMESA: extern "C" fn(v: *GLfloat) -> c_void = super::failing::WindowPos2fvMESA;
    pub static mut WindowPos2i: extern "C" fn(x: GLint, y: GLint) -> c_void = super::failing::WindowPos2i;
    pub static mut WindowPos2iARB: extern "C" fn(x: GLint, y: GLint) -> c_void = super::failing::WindowPos2iARB;
    pub static mut WindowPos2iMESA: extern "C" fn(x: GLint, y: GLint) -> c_void = super::failing::WindowPos2iMESA;
    pub static mut WindowPos2iv: extern "C" fn(v: *GLint) -> c_void = super::failing::WindowPos2iv;
    pub static mut WindowPos2ivARB: extern "C" fn(v: *GLint) -> c_void = super::failing::WindowPos2ivARB;
    pub static mut WindowPos2ivMESA: extern "C" fn(v: *GLint) -> c_void = super::failing::WindowPos2ivMESA;
    pub static mut WindowPos2s: extern "C" fn(x: GLshort, y: GLshort) -> c_void = super::failing::WindowPos2s;
    pub static mut WindowPos2sARB: extern "C" fn(x: GLshort, y: GLshort) -> c_void = super::failing::WindowPos2sARB;
    pub static mut WindowPos2sMESA: extern "C" fn(x: GLshort, y: GLshort) -> c_void = super::failing::WindowPos2sMESA;
    pub static mut WindowPos2sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::WindowPos2sv;
    pub static mut WindowPos2svARB: extern "C" fn(v: *GLshort) -> c_void = super::failing::WindowPos2svARB;
    pub static mut WindowPos2svMESA: extern "C" fn(v: *GLshort) -> c_void = super::failing::WindowPos2svMESA;
    pub static mut WindowPos3d: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::WindowPos3d;
    pub static mut WindowPos3dARB: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::WindowPos3dARB;
    pub static mut WindowPos3dMESA: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void = super::failing::WindowPos3dMESA;
    pub static mut WindowPos3dv: extern "C" fn(v: *GLdouble) -> c_void = super::failing::WindowPos3dv;
    pub static mut WindowPos3dvARB: extern "C" fn(v: *GLdouble) -> c_void = super::failing::WindowPos3dvARB;
    pub static mut WindowPos3dvMESA: extern "C" fn(v: *GLdouble) -> c_void = super::failing::WindowPos3dvMESA;
    pub static mut WindowPos3f: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::WindowPos3f;
    pub static mut WindowPos3fARB: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::WindowPos3fARB;
    pub static mut WindowPos3fMESA: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void = super::failing::WindowPos3fMESA;
    pub static mut WindowPos3fv: extern "C" fn(v: *GLfloat) -> c_void = super::failing::WindowPos3fv;
    pub static mut WindowPos3fvARB: extern "C" fn(v: *GLfloat) -> c_void = super::failing::WindowPos3fvARB;
    pub static mut WindowPos3fvMESA: extern "C" fn(v: *GLfloat) -> c_void = super::failing::WindowPos3fvMESA;
    pub static mut WindowPos3i: extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void = super::failing::WindowPos3i;
    pub static mut WindowPos3iARB: extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void = super::failing::WindowPos3iARB;
    pub static mut WindowPos3iMESA: extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void = super::failing::WindowPos3iMESA;
    pub static mut WindowPos3iv: extern "C" fn(v: *GLint) -> c_void = super::failing::WindowPos3iv;
    pub static mut WindowPos3ivARB: extern "C" fn(v: *GLint) -> c_void = super::failing::WindowPos3ivARB;
    pub static mut WindowPos3ivMESA: extern "C" fn(v: *GLint) -> c_void = super::failing::WindowPos3ivMESA;
    pub static mut WindowPos3s: extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::WindowPos3s;
    pub static mut WindowPos3sARB: extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::WindowPos3sARB;
    pub static mut WindowPos3sMESA: extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void = super::failing::WindowPos3sMESA;
    pub static mut WindowPos3sv: extern "C" fn(v: *GLshort) -> c_void = super::failing::WindowPos3sv;
    pub static mut WindowPos3svARB: extern "C" fn(v: *GLshort) -> c_void = super::failing::WindowPos3svARB;
    pub static mut WindowPos3svMESA: extern "C" fn(v: *GLshort) -> c_void = super::failing::WindowPos3svMESA;
    pub static mut WindowPos4dMESA: extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void = super::failing::WindowPos4dMESA;
    pub static mut WindowPos4dvMESA: extern "C" fn(v: *GLdouble) -> c_void = super::failing::WindowPos4dvMESA;
    pub static mut WindowPos4fMESA: extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void = super::failing::WindowPos4fMESA;
    pub static mut WindowPos4fvMESA: extern "C" fn(v: *GLfloat) -> c_void = super::failing::WindowPos4fvMESA;
    pub static mut WindowPos4iMESA: extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void = super::failing::WindowPos4iMESA;
    pub static mut WindowPos4ivMESA: extern "C" fn(v: *GLint) -> c_void = super::failing::WindowPos4ivMESA;
    pub static mut WindowPos4sMESA: extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void = super::failing::WindowPos4sMESA;
    pub static mut WindowPos4svMESA: extern "C" fn(v: *GLshort) -> c_void = super::failing::WindowPos4svMESA;
    pub static mut WriteMaskEXT: extern "C" fn(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void = super::failing::WriteMaskEXT;
}

pub mod Accum { pub static mut is_loaded: bool = false; }
pub mod AccumxOES { pub static mut is_loaded: bool = false; }
pub mod ActiveProgramEXT { pub static mut is_loaded: bool = false; }
pub mod ActiveShaderProgram { pub static mut is_loaded: bool = false; }
pub mod ActiveShaderProgramEXT { pub static mut is_loaded: bool = false; }
pub mod ActiveStencilFaceEXT { pub static mut is_loaded: bool = false; }
pub mod ActiveTexture { pub static mut is_loaded: bool = false; }
pub mod ActiveTextureARB { pub static mut is_loaded: bool = false; }
pub mod ActiveVaryingNV { pub static mut is_loaded: bool = false; }
pub mod AlphaFragmentOp1ATI { pub static mut is_loaded: bool = false; }
pub mod AlphaFragmentOp2ATI { pub static mut is_loaded: bool = false; }
pub mod AlphaFragmentOp3ATI { pub static mut is_loaded: bool = false; }
pub mod AlphaFunc { pub static mut is_loaded: bool = false; }
pub mod AlphaFuncQCOM { pub static mut is_loaded: bool = false; }
pub mod AlphaFuncx { pub static mut is_loaded: bool = false; }
pub mod AlphaFuncxOES { pub static mut is_loaded: bool = false; }
pub mod ApplyTextureEXT { pub static mut is_loaded: bool = false; }
pub mod AreProgramsResidentNV { pub static mut is_loaded: bool = false; }
pub mod AreTexturesResident { pub static mut is_loaded: bool = false; }
pub mod AreTexturesResidentEXT { pub static mut is_loaded: bool = false; }
pub mod ArrayElement { pub static mut is_loaded: bool = false; }
pub mod ArrayElementEXT { pub static mut is_loaded: bool = false; }
pub mod ArrayObjectATI { pub static mut is_loaded: bool = false; }
pub mod AsyncMarkerSGIX { pub static mut is_loaded: bool = false; }
pub mod AttachObjectARB { pub static mut is_loaded: bool = false; }
pub mod AttachShader { pub static mut is_loaded: bool = false; }
pub mod Begin { pub static mut is_loaded: bool = false; }
pub mod BeginConditionalRender { pub static mut is_loaded: bool = false; }
pub mod BeginConditionalRenderNV { pub static mut is_loaded: bool = false; }
pub mod BeginConditionalRenderNVX { pub static mut is_loaded: bool = false; }
pub mod BeginFragmentShaderATI { pub static mut is_loaded: bool = false; }
pub mod BeginOcclusionQueryNV { pub static mut is_loaded: bool = false; }
pub mod BeginPerfMonitorAMD { pub static mut is_loaded: bool = false; }
pub mod BeginQuery { pub static mut is_loaded: bool = false; }
pub mod BeginQueryARB { pub static mut is_loaded: bool = false; }
pub mod BeginQueryEXT { pub static mut is_loaded: bool = false; }
pub mod BeginQueryIndexed { pub static mut is_loaded: bool = false; }
pub mod BeginTransformFeedback { pub static mut is_loaded: bool = false; }
pub mod BeginTransformFeedbackEXT { pub static mut is_loaded: bool = false; }
pub mod BeginTransformFeedbackNV { pub static mut is_loaded: bool = false; }
pub mod BeginVertexShaderEXT { pub static mut is_loaded: bool = false; }
pub mod BeginVideoCaptureNV { pub static mut is_loaded: bool = false; }
pub mod BindAttribLocation { pub static mut is_loaded: bool = false; }
pub mod BindAttribLocationARB { pub static mut is_loaded: bool = false; }
pub mod BindBuffer { pub static mut is_loaded: bool = false; }
pub mod BindBufferARB { pub static mut is_loaded: bool = false; }
pub mod BindBufferBase { pub static mut is_loaded: bool = false; }
pub mod BindBufferBaseEXT { pub static mut is_loaded: bool = false; }
pub mod BindBufferBaseNV { pub static mut is_loaded: bool = false; }
pub mod BindBufferOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod BindBufferOffsetNV { pub static mut is_loaded: bool = false; }
pub mod BindBufferRange { pub static mut is_loaded: bool = false; }
pub mod BindBufferRangeEXT { pub static mut is_loaded: bool = false; }
pub mod BindBufferRangeNV { pub static mut is_loaded: bool = false; }
pub mod BindBuffersBase { pub static mut is_loaded: bool = false; }
pub mod BindBuffersRange { pub static mut is_loaded: bool = false; }
pub mod BindFragDataLocation { pub static mut is_loaded: bool = false; }
pub mod BindFragDataLocationEXT { pub static mut is_loaded: bool = false; }
pub mod BindFragDataLocationIndexed { pub static mut is_loaded: bool = false; }
pub mod BindFragmentShaderATI { pub static mut is_loaded: bool = false; }
pub mod BindFramebuffer { pub static mut is_loaded: bool = false; }
pub mod BindFramebufferEXT { pub static mut is_loaded: bool = false; }
pub mod BindFramebufferOES { pub static mut is_loaded: bool = false; }
pub mod BindImageTexture { pub static mut is_loaded: bool = false; }
pub mod BindImageTextureEXT { pub static mut is_loaded: bool = false; }
pub mod BindImageTextures { pub static mut is_loaded: bool = false; }
pub mod BindLightParameterEXT { pub static mut is_loaded: bool = false; }
pub mod BindMaterialParameterEXT { pub static mut is_loaded: bool = false; }
pub mod BindMultiTextureEXT { pub static mut is_loaded: bool = false; }
pub mod BindParameterEXT { pub static mut is_loaded: bool = false; }
pub mod BindProgramARB { pub static mut is_loaded: bool = false; }
pub mod BindProgramNV { pub static mut is_loaded: bool = false; }
pub mod BindProgramPipeline { pub static mut is_loaded: bool = false; }
pub mod BindProgramPipelineEXT { pub static mut is_loaded: bool = false; }
pub mod BindRenderbuffer { pub static mut is_loaded: bool = false; }
pub mod BindRenderbufferEXT { pub static mut is_loaded: bool = false; }
pub mod BindRenderbufferOES { pub static mut is_loaded: bool = false; }
pub mod BindSampler { pub static mut is_loaded: bool = false; }
pub mod BindSamplers { pub static mut is_loaded: bool = false; }
pub mod BindTexGenParameterEXT { pub static mut is_loaded: bool = false; }
pub mod BindTexture { pub static mut is_loaded: bool = false; }
pub mod BindTextureEXT { pub static mut is_loaded: bool = false; }
pub mod BindTextureUnitParameterEXT { pub static mut is_loaded: bool = false; }
pub mod BindTextures { pub static mut is_loaded: bool = false; }
pub mod BindTransformFeedback { pub static mut is_loaded: bool = false; }
pub mod BindTransformFeedbackNV { pub static mut is_loaded: bool = false; }
pub mod BindVertexArray { pub static mut is_loaded: bool = false; }
pub mod BindVertexArrayAPPLE { pub static mut is_loaded: bool = false; }
pub mod BindVertexArrayOES { pub static mut is_loaded: bool = false; }
pub mod BindVertexBuffer { pub static mut is_loaded: bool = false; }
pub mod BindVertexBuffers { pub static mut is_loaded: bool = false; }
pub mod BindVertexShaderEXT { pub static mut is_loaded: bool = false; }
pub mod BindVideoCaptureStreamBufferNV { pub static mut is_loaded: bool = false; }
pub mod BindVideoCaptureStreamTextureNV { pub static mut is_loaded: bool = false; }
pub mod Binormal3bEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3bvEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3dEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3dvEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3fEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3fvEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3iEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3ivEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3sEXT { pub static mut is_loaded: bool = false; }
pub mod Binormal3svEXT { pub static mut is_loaded: bool = false; }
pub mod BinormalPointerEXT { pub static mut is_loaded: bool = false; }
pub mod Bitmap { pub static mut is_loaded: bool = false; }
pub mod BitmapxOES { pub static mut is_loaded: bool = false; }
pub mod BlendColor { pub static mut is_loaded: bool = false; }
pub mod BlendColorEXT { pub static mut is_loaded: bool = false; }
pub mod BlendColorxOES { pub static mut is_loaded: bool = false; }
pub mod BlendEquation { pub static mut is_loaded: bool = false; }
pub mod BlendEquationEXT { pub static mut is_loaded: bool = false; }
pub mod BlendEquationIndexedAMD { pub static mut is_loaded: bool = false; }
pub mod BlendEquationOES { pub static mut is_loaded: bool = false; }
pub mod BlendEquationSeparate { pub static mut is_loaded: bool = false; }
pub mod BlendEquationSeparateEXT { pub static mut is_loaded: bool = false; }
pub mod BlendEquationSeparateIndexedAMD { pub static mut is_loaded: bool = false; }
pub mod BlendEquationSeparateOES { pub static mut is_loaded: bool = false; }
pub mod BlendEquationSeparatei { pub static mut is_loaded: bool = false; }
pub mod BlendEquationSeparateiARB { pub static mut is_loaded: bool = false; }
pub mod BlendEquationi { pub static mut is_loaded: bool = false; }
pub mod BlendEquationiARB { pub static mut is_loaded: bool = false; }
pub mod BlendFunc { pub static mut is_loaded: bool = false; }
pub mod BlendFuncIndexedAMD { pub static mut is_loaded: bool = false; }
pub mod BlendFuncSeparate { pub static mut is_loaded: bool = false; }
pub mod BlendFuncSeparateEXT { pub static mut is_loaded: bool = false; }
pub mod BlendFuncSeparateINGR { pub static mut is_loaded: bool = false; }
pub mod BlendFuncSeparateIndexedAMD { pub static mut is_loaded: bool = false; }
pub mod BlendFuncSeparateOES { pub static mut is_loaded: bool = false; }
pub mod BlendFuncSeparatei { pub static mut is_loaded: bool = false; }
pub mod BlendFuncSeparateiARB { pub static mut is_loaded: bool = false; }
pub mod BlendFunci { pub static mut is_loaded: bool = false; }
pub mod BlendFunciARB { pub static mut is_loaded: bool = false; }
pub mod BlendParameteriNV { pub static mut is_loaded: bool = false; }
pub mod BlendBarrierNV { pub static mut is_loaded: bool = false; }
pub mod BlitFramebuffer { pub static mut is_loaded: bool = false; }
pub mod BlitFramebufferANGLE { pub static mut is_loaded: bool = false; }
pub mod BlitFramebufferEXT { pub static mut is_loaded: bool = false; }
pub mod BlitFramebufferNV { pub static mut is_loaded: bool = false; }
pub mod BufferAddressRangeNV { pub static mut is_loaded: bool = false; }
pub mod BufferData { pub static mut is_loaded: bool = false; }
pub mod BufferDataARB { pub static mut is_loaded: bool = false; }
pub mod BufferParameteriAPPLE { pub static mut is_loaded: bool = false; }
pub mod BufferStorage { pub static mut is_loaded: bool = false; }
pub mod BufferSubData { pub static mut is_loaded: bool = false; }
pub mod BufferSubDataARB { pub static mut is_loaded: bool = false; }
pub mod CallList { pub static mut is_loaded: bool = false; }
pub mod CallLists { pub static mut is_loaded: bool = false; }
pub mod CheckFramebufferStatus { pub static mut is_loaded: bool = false; }
pub mod CheckFramebufferStatusEXT { pub static mut is_loaded: bool = false; }
pub mod CheckFramebufferStatusOES { pub static mut is_loaded: bool = false; }
pub mod CheckNamedFramebufferStatusEXT { pub static mut is_loaded: bool = false; }
pub mod ClampColor { pub static mut is_loaded: bool = false; }
pub mod ClampColorARB { pub static mut is_loaded: bool = false; }
pub mod Clear { pub static mut is_loaded: bool = false; }
pub mod ClearAccum { pub static mut is_loaded: bool = false; }
pub mod ClearAccumxOES { pub static mut is_loaded: bool = false; }
pub mod ClearBufferData { pub static mut is_loaded: bool = false; }
pub mod ClearBufferSubData { pub static mut is_loaded: bool = false; }
pub mod ClearBufferfi { pub static mut is_loaded: bool = false; }
pub mod ClearBufferfv { pub static mut is_loaded: bool = false; }
pub mod ClearBufferiv { pub static mut is_loaded: bool = false; }
pub mod ClearBufferuiv { pub static mut is_loaded: bool = false; }
pub mod ClearColor { pub static mut is_loaded: bool = false; }
pub mod ClearColorIiEXT { pub static mut is_loaded: bool = false; }
pub mod ClearColorIuiEXT { pub static mut is_loaded: bool = false; }
pub mod ClearColorx { pub static mut is_loaded: bool = false; }
pub mod ClearColorxOES { pub static mut is_loaded: bool = false; }
pub mod ClearDepth { pub static mut is_loaded: bool = false; }
pub mod ClearDepthdNV { pub static mut is_loaded: bool = false; }
pub mod ClearDepthf { pub static mut is_loaded: bool = false; }
pub mod ClearDepthfOES { pub static mut is_loaded: bool = false; }
pub mod ClearDepthx { pub static mut is_loaded: bool = false; }
pub mod ClearDepthxOES { pub static mut is_loaded: bool = false; }
pub mod ClearIndex { pub static mut is_loaded: bool = false; }
pub mod ClearNamedBufferDataEXT { pub static mut is_loaded: bool = false; }
pub mod ClearNamedBufferSubDataEXT { pub static mut is_loaded: bool = false; }
pub mod ClearStencil { pub static mut is_loaded: bool = false; }
pub mod ClearTexImage { pub static mut is_loaded: bool = false; }
pub mod ClearTexSubImage { pub static mut is_loaded: bool = false; }
pub mod ClientActiveTexture { pub static mut is_loaded: bool = false; }
pub mod ClientActiveTextureARB { pub static mut is_loaded: bool = false; }
pub mod ClientActiveVertexStreamATI { pub static mut is_loaded: bool = false; }
pub mod ClientAttribDefaultEXT { pub static mut is_loaded: bool = false; }
pub mod ClientWaitSync { pub static mut is_loaded: bool = false; }
pub mod ClientWaitSyncAPPLE { pub static mut is_loaded: bool = false; }
pub mod ClipControlARB { pub static mut is_loaded: bool = false; }
pub mod ClipPlane { pub static mut is_loaded: bool = false; }
pub mod ClipPlanef { pub static mut is_loaded: bool = false; }
pub mod ClipPlanefIMG { pub static mut is_loaded: bool = false; }
pub mod ClipPlanefOES { pub static mut is_loaded: bool = false; }
pub mod ClipPlanex { pub static mut is_loaded: bool = false; }
pub mod ClipPlanexIMG { pub static mut is_loaded: bool = false; }
pub mod ClipPlanexOES { pub static mut is_loaded: bool = false; }
pub mod Color3b { pub static mut is_loaded: bool = false; }
pub mod Color3bv { pub static mut is_loaded: bool = false; }
pub mod Color3d { pub static mut is_loaded: bool = false; }
pub mod Color3dv { pub static mut is_loaded: bool = false; }
pub mod Color3f { pub static mut is_loaded: bool = false; }
pub mod Color3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod Color3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod Color3fv { pub static mut is_loaded: bool = false; }
pub mod Color3hNV { pub static mut is_loaded: bool = false; }
pub mod Color3hvNV { pub static mut is_loaded: bool = false; }
pub mod Color3i { pub static mut is_loaded: bool = false; }
pub mod Color3iv { pub static mut is_loaded: bool = false; }
pub mod Color3s { pub static mut is_loaded: bool = false; }
pub mod Color3sv { pub static mut is_loaded: bool = false; }
pub mod Color3ub { pub static mut is_loaded: bool = false; }
pub mod Color3ubv { pub static mut is_loaded: bool = false; }
pub mod Color3ui { pub static mut is_loaded: bool = false; }
pub mod Color3uiv { pub static mut is_loaded: bool = false; }
pub mod Color3us { pub static mut is_loaded: bool = false; }
pub mod Color3usv { pub static mut is_loaded: bool = false; }
pub mod Color3xOES { pub static mut is_loaded: bool = false; }
pub mod Color3xvOES { pub static mut is_loaded: bool = false; }
pub mod Color4b { pub static mut is_loaded: bool = false; }
pub mod Color4bv { pub static mut is_loaded: bool = false; }
pub mod Color4d { pub static mut is_loaded: bool = false; }
pub mod Color4dv { pub static mut is_loaded: bool = false; }
pub mod Color4f { pub static mut is_loaded: bool = false; }
pub mod Color4fNormal3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod Color4fNormal3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod Color4fv { pub static mut is_loaded: bool = false; }
pub mod Color4hNV { pub static mut is_loaded: bool = false; }
pub mod Color4hvNV { pub static mut is_loaded: bool = false; }
pub mod Color4i { pub static mut is_loaded: bool = false; }
pub mod Color4iv { pub static mut is_loaded: bool = false; }
pub mod Color4s { pub static mut is_loaded: bool = false; }
pub mod Color4sv { pub static mut is_loaded: bool = false; }
pub mod Color4ub { pub static mut is_loaded: bool = false; }
pub mod Color4ubVertex2fSUN { pub static mut is_loaded: bool = false; }
pub mod Color4ubVertex2fvSUN { pub static mut is_loaded: bool = false; }
pub mod Color4ubVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod Color4ubVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod Color4ubv { pub static mut is_loaded: bool = false; }
pub mod Color4ui { pub static mut is_loaded: bool = false; }
pub mod Color4uiv { pub static mut is_loaded: bool = false; }
pub mod Color4us { pub static mut is_loaded: bool = false; }
pub mod Color4usv { pub static mut is_loaded: bool = false; }
pub mod Color4x { pub static mut is_loaded: bool = false; }
pub mod Color4xOES { pub static mut is_loaded: bool = false; }
pub mod Color4xvOES { pub static mut is_loaded: bool = false; }
pub mod ColorFormatNV { pub static mut is_loaded: bool = false; }
pub mod ColorFragmentOp1ATI { pub static mut is_loaded: bool = false; }
pub mod ColorFragmentOp2ATI { pub static mut is_loaded: bool = false; }
pub mod ColorFragmentOp3ATI { pub static mut is_loaded: bool = false; }
pub mod ColorMask { pub static mut is_loaded: bool = false; }
pub mod ColorMaskIndexedEXT { pub static mut is_loaded: bool = false; }
pub mod ColorMaski { pub static mut is_loaded: bool = false; }
pub mod ColorMaterial { pub static mut is_loaded: bool = false; }
pub mod ColorP3ui { pub static mut is_loaded: bool = false; }
pub mod ColorP3uiv { pub static mut is_loaded: bool = false; }
pub mod ColorP4ui { pub static mut is_loaded: bool = false; }
pub mod ColorP4uiv { pub static mut is_loaded: bool = false; }
pub mod ColorPointer { pub static mut is_loaded: bool = false; }
pub mod ColorPointerEXT { pub static mut is_loaded: bool = false; }
pub mod ColorPointerListIBM { pub static mut is_loaded: bool = false; }
pub mod ColorPointervINTEL { pub static mut is_loaded: bool = false; }
pub mod ColorSubTable { pub static mut is_loaded: bool = false; }
pub mod ColorSubTableEXT { pub static mut is_loaded: bool = false; }
pub mod ColorTable { pub static mut is_loaded: bool = false; }
pub mod ColorTableEXT { pub static mut is_loaded: bool = false; }
pub mod ColorTableParameterfv { pub static mut is_loaded: bool = false; }
pub mod ColorTableParameterfvSGI { pub static mut is_loaded: bool = false; }
pub mod ColorTableParameteriv { pub static mut is_loaded: bool = false; }
pub mod ColorTableParameterivSGI { pub static mut is_loaded: bool = false; }
pub mod ColorTableSGI { pub static mut is_loaded: bool = false; }
pub mod CombinerInputNV { pub static mut is_loaded: bool = false; }
pub mod CombinerOutputNV { pub static mut is_loaded: bool = false; }
pub mod CombinerParameterfNV { pub static mut is_loaded: bool = false; }
pub mod CombinerParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod CombinerParameteriNV { pub static mut is_loaded: bool = false; }
pub mod CombinerParameterivNV { pub static mut is_loaded: bool = false; }
pub mod CombinerStageParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod CompileShader { pub static mut is_loaded: bool = false; }
pub mod CompileShaderARB { pub static mut is_loaded: bool = false; }
pub mod CompileShaderIncludeARB { pub static mut is_loaded: bool = false; }
pub mod CompressedMultiTexImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedMultiTexImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedMultiTexImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedMultiTexSubImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedMultiTexSubImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedMultiTexSubImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedTexImage1D { pub static mut is_loaded: bool = false; }
pub mod CompressedTexImage1DARB { pub static mut is_loaded: bool = false; }
pub mod CompressedTexImage2D { pub static mut is_loaded: bool = false; }
pub mod CompressedTexImage2DARB { pub static mut is_loaded: bool = false; }
pub mod CompressedTexImage3D { pub static mut is_loaded: bool = false; }
pub mod CompressedTexImage3DARB { pub static mut is_loaded: bool = false; }
pub mod CompressedTexImage3DOES { pub static mut is_loaded: bool = false; }
pub mod CompressedTexSubImage1D { pub static mut is_loaded: bool = false; }
pub mod CompressedTexSubImage1DARB { pub static mut is_loaded: bool = false; }
pub mod CompressedTexSubImage2D { pub static mut is_loaded: bool = false; }
pub mod CompressedTexSubImage2DARB { pub static mut is_loaded: bool = false; }
pub mod CompressedTexSubImage3D { pub static mut is_loaded: bool = false; }
pub mod CompressedTexSubImage3DARB { pub static mut is_loaded: bool = false; }
pub mod CompressedTexSubImage3DOES { pub static mut is_loaded: bool = false; }
pub mod CompressedTextureImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedTextureImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedTextureImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedTextureSubImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedTextureSubImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CompressedTextureSubImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod ConvolutionFilter1D { pub static mut is_loaded: bool = false; }
pub mod ConvolutionFilter1DEXT { pub static mut is_loaded: bool = false; }
pub mod ConvolutionFilter2D { pub static mut is_loaded: bool = false; }
pub mod ConvolutionFilter2DEXT { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameterf { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameterfEXT { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameterfv { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameteri { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameteriEXT { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameteriv { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameterxOES { pub static mut is_loaded: bool = false; }
pub mod ConvolutionParameterxvOES { pub static mut is_loaded: bool = false; }
pub mod CopyBufferSubData { pub static mut is_loaded: bool = false; }
pub mod CopyColorSubTable { pub static mut is_loaded: bool = false; }
pub mod CopyColorSubTableEXT { pub static mut is_loaded: bool = false; }
pub mod CopyColorTable { pub static mut is_loaded: bool = false; }
pub mod CopyColorTableSGI { pub static mut is_loaded: bool = false; }
pub mod CopyConvolutionFilter1D { pub static mut is_loaded: bool = false; }
pub mod CopyConvolutionFilter1DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyConvolutionFilter2D { pub static mut is_loaded: bool = false; }
pub mod CopyConvolutionFilter2DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyImageSubData { pub static mut is_loaded: bool = false; }
pub mod CopyImageSubDataNV { pub static mut is_loaded: bool = false; }
pub mod CopyMultiTexImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyMultiTexImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyMultiTexSubImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyMultiTexSubImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyMultiTexSubImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyPathNV { pub static mut is_loaded: bool = false; }
pub mod CopyPixels { pub static mut is_loaded: bool = false; }
pub mod CopyTexImage1D { pub static mut is_loaded: bool = false; }
pub mod CopyTexImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTexImage2D { pub static mut is_loaded: bool = false; }
pub mod CopyTexImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTexSubImage1D { pub static mut is_loaded: bool = false; }
pub mod CopyTexSubImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTexSubImage2D { pub static mut is_loaded: bool = false; }
pub mod CopyTexSubImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTexSubImage3D { pub static mut is_loaded: bool = false; }
pub mod CopyTexSubImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTexSubImage3DOES { pub static mut is_loaded: bool = false; }
pub mod CopyTextureImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTextureImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTextureLevelsAPPLE { pub static mut is_loaded: bool = false; }
pub mod CopyTextureSubImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTextureSubImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod CopyTextureSubImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod CoverFillPathInstancedNV { pub static mut is_loaded: bool = false; }
pub mod CoverFillPathNV { pub static mut is_loaded: bool = false; }
pub mod CoverStrokePathInstancedNV { pub static mut is_loaded: bool = false; }
pub mod CoverStrokePathNV { pub static mut is_loaded: bool = false; }
pub mod CoverageMaskNV { pub static mut is_loaded: bool = false; }
pub mod CoverageOperationNV { pub static mut is_loaded: bool = false; }
pub mod CreateProgram { pub static mut is_loaded: bool = false; }
pub mod CreateProgramObjectARB { pub static mut is_loaded: bool = false; }
pub mod CreateShader { pub static mut is_loaded: bool = false; }
pub mod CreateShaderObjectARB { pub static mut is_loaded: bool = false; }
pub mod CreateShaderProgramEXT { pub static mut is_loaded: bool = false; }
pub mod CreateShaderProgramv { pub static mut is_loaded: bool = false; }
pub mod CreateShaderProgramvEXT { pub static mut is_loaded: bool = false; }
pub mod CreateSyncFromCLeventARB { pub static mut is_loaded: bool = false; }
pub mod CullFace { pub static mut is_loaded: bool = false; }
pub mod CullParameterdvEXT { pub static mut is_loaded: bool = false; }
pub mod CullParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod CurrentPaletteMatrixARB { pub static mut is_loaded: bool = false; }
pub mod CurrentPaletteMatrixOES { pub static mut is_loaded: bool = false; }
pub mod DebugMessageCallback { pub static mut is_loaded: bool = false; }
pub mod DebugMessageCallbackAMD { pub static mut is_loaded: bool = false; }
pub mod DebugMessageCallbackARB { pub static mut is_loaded: bool = false; }
pub mod DebugMessageCallbackKHR { pub static mut is_loaded: bool = false; }
pub mod DebugMessageControl { pub static mut is_loaded: bool = false; }
pub mod DebugMessageControlARB { pub static mut is_loaded: bool = false; }
pub mod DebugMessageControlKHR { pub static mut is_loaded: bool = false; }
pub mod DebugMessageEnableAMD { pub static mut is_loaded: bool = false; }
pub mod DebugMessageInsert { pub static mut is_loaded: bool = false; }
pub mod DebugMessageInsertAMD { pub static mut is_loaded: bool = false; }
pub mod DebugMessageInsertARB { pub static mut is_loaded: bool = false; }
pub mod DebugMessageInsertKHR { pub static mut is_loaded: bool = false; }
pub mod DeformSGIX { pub static mut is_loaded: bool = false; }
pub mod DeformationMap3dSGIX { pub static mut is_loaded: bool = false; }
pub mod DeformationMap3fSGIX { pub static mut is_loaded: bool = false; }
pub mod DeleteAsyncMarkersSGIX { pub static mut is_loaded: bool = false; }
pub mod DeleteBuffers { pub static mut is_loaded: bool = false; }
pub mod DeleteBuffersARB { pub static mut is_loaded: bool = false; }
pub mod DeleteFencesAPPLE { pub static mut is_loaded: bool = false; }
pub mod DeleteFencesNV { pub static mut is_loaded: bool = false; }
pub mod DeleteFragmentShaderATI { pub static mut is_loaded: bool = false; }
pub mod DeleteFramebuffers { pub static mut is_loaded: bool = false; }
pub mod DeleteFramebuffersEXT { pub static mut is_loaded: bool = false; }
pub mod DeleteFramebuffersOES { pub static mut is_loaded: bool = false; }
pub mod DeleteLists { pub static mut is_loaded: bool = false; }
pub mod DeleteNamedStringARB { pub static mut is_loaded: bool = false; }
pub mod DeleteNamesAMD { pub static mut is_loaded: bool = false; }
pub mod DeleteObjectARB { pub static mut is_loaded: bool = false; }
pub mod DeleteOcclusionQueriesNV { pub static mut is_loaded: bool = false; }
pub mod DeletePathsNV { pub static mut is_loaded: bool = false; }
pub mod DeletePerfMonitorsAMD { pub static mut is_loaded: bool = false; }
pub mod DeleteProgram { pub static mut is_loaded: bool = false; }
pub mod DeleteProgramPipelines { pub static mut is_loaded: bool = false; }
pub mod DeleteProgramPipelinesEXT { pub static mut is_loaded: bool = false; }
pub mod DeleteProgramsARB { pub static mut is_loaded: bool = false; }
pub mod DeleteProgramsNV { pub static mut is_loaded: bool = false; }
pub mod DeleteQueries { pub static mut is_loaded: bool = false; }
pub mod DeleteQueriesARB { pub static mut is_loaded: bool = false; }
pub mod DeleteQueriesEXT { pub static mut is_loaded: bool = false; }
pub mod DeleteRenderbuffers { pub static mut is_loaded: bool = false; }
pub mod DeleteRenderbuffersEXT { pub static mut is_loaded: bool = false; }
pub mod DeleteRenderbuffersOES { pub static mut is_loaded: bool = false; }
pub mod DeleteSamplers { pub static mut is_loaded: bool = false; }
pub mod DeleteShader { pub static mut is_loaded: bool = false; }
pub mod DeleteSync { pub static mut is_loaded: bool = false; }
pub mod DeleteSyncAPPLE { pub static mut is_loaded: bool = false; }
pub mod DeleteTextures { pub static mut is_loaded: bool = false; }
pub mod DeleteTexturesEXT { pub static mut is_loaded: bool = false; }
pub mod DeleteTransformFeedbacks { pub static mut is_loaded: bool = false; }
pub mod DeleteTransformFeedbacksNV { pub static mut is_loaded: bool = false; }
pub mod DeleteVertexArrays { pub static mut is_loaded: bool = false; }
pub mod DeleteVertexArraysAPPLE { pub static mut is_loaded: bool = false; }
pub mod DeleteVertexArraysOES { pub static mut is_loaded: bool = false; }
pub mod DeleteVertexShaderEXT { pub static mut is_loaded: bool = false; }
pub mod DepthBoundsEXT { pub static mut is_loaded: bool = false; }
pub mod DepthBoundsdNV { pub static mut is_loaded: bool = false; }
pub mod DepthFunc { pub static mut is_loaded: bool = false; }
pub mod DepthMask { pub static mut is_loaded: bool = false; }
pub mod DepthRange { pub static mut is_loaded: bool = false; }
pub mod DepthRangeArrayv { pub static mut is_loaded: bool = false; }
pub mod DepthRangeIndexed { pub static mut is_loaded: bool = false; }
pub mod DepthRangedNV { pub static mut is_loaded: bool = false; }
pub mod DepthRangef { pub static mut is_loaded: bool = false; }
pub mod DepthRangefOES { pub static mut is_loaded: bool = false; }
pub mod DepthRangex { pub static mut is_loaded: bool = false; }
pub mod DepthRangexOES { pub static mut is_loaded: bool = false; }
pub mod DetachObjectARB { pub static mut is_loaded: bool = false; }
pub mod DetachShader { pub static mut is_loaded: bool = false; }
pub mod DetailTexFuncSGIS { pub static mut is_loaded: bool = false; }
pub mod Disable { pub static mut is_loaded: bool = false; }
pub mod DisableClientState { pub static mut is_loaded: bool = false; }
pub mod DisableClientStateIndexedEXT { pub static mut is_loaded: bool = false; }
pub mod DisableClientStateiEXT { pub static mut is_loaded: bool = false; }
pub mod DisableDriverControlQCOM { pub static mut is_loaded: bool = false; }
pub mod DisableIndexedEXT { pub static mut is_loaded: bool = false; }
pub mod DisableVariantClientStateEXT { pub static mut is_loaded: bool = false; }
pub mod DisableVertexArrayAttribEXT { pub static mut is_loaded: bool = false; }
pub mod DisableVertexArrayEXT { pub static mut is_loaded: bool = false; }
pub mod DisableVertexAttribAPPLE { pub static mut is_loaded: bool = false; }
pub mod DisableVertexAttribArray { pub static mut is_loaded: bool = false; }
pub mod DisableVertexAttribArrayARB { pub static mut is_loaded: bool = false; }
pub mod Disablei { pub static mut is_loaded: bool = false; }
pub mod DiscardFramebufferEXT { pub static mut is_loaded: bool = false; }
pub mod DispatchCompute { pub static mut is_loaded: bool = false; }
pub mod DispatchComputeGroupSizeARB { pub static mut is_loaded: bool = false; }
pub mod DispatchComputeIndirect { pub static mut is_loaded: bool = false; }
pub mod DrawArrays { pub static mut is_loaded: bool = false; }
pub mod DrawArraysEXT { pub static mut is_loaded: bool = false; }
pub mod DrawArraysIndirect { pub static mut is_loaded: bool = false; }
pub mod DrawArraysInstanced { pub static mut is_loaded: bool = false; }
pub mod DrawArraysInstancedANGLE { pub static mut is_loaded: bool = false; }
pub mod DrawArraysInstancedARB { pub static mut is_loaded: bool = false; }
pub mod DrawArraysInstancedBaseInstance { pub static mut is_loaded: bool = false; }
pub mod DrawArraysInstancedEXT { pub static mut is_loaded: bool = false; }
pub mod DrawArraysInstancedNV { pub static mut is_loaded: bool = false; }
pub mod DrawBuffer { pub static mut is_loaded: bool = false; }
pub mod DrawBuffers { pub static mut is_loaded: bool = false; }
pub mod DrawBuffersARB { pub static mut is_loaded: bool = false; }
pub mod DrawBuffersATI { pub static mut is_loaded: bool = false; }
pub mod DrawBuffersEXT { pub static mut is_loaded: bool = false; }
pub mod DrawBuffersIndexedEXT { pub static mut is_loaded: bool = false; }
pub mod DrawBuffersNV { pub static mut is_loaded: bool = false; }
pub mod DrawElementArrayAPPLE { pub static mut is_loaded: bool = false; }
pub mod DrawElementArrayATI { pub static mut is_loaded: bool = false; }
pub mod DrawElements { pub static mut is_loaded: bool = false; }
pub mod DrawElementsBaseVertex { pub static mut is_loaded: bool = false; }
pub mod DrawElementsIndirect { pub static mut is_loaded: bool = false; }
pub mod DrawElementsInstanced { pub static mut is_loaded: bool = false; }
pub mod DrawElementsInstancedANGLE { pub static mut is_loaded: bool = false; }
pub mod DrawElementsInstancedARB { pub static mut is_loaded: bool = false; }
pub mod DrawElementsInstancedBaseInstance { pub static mut is_loaded: bool = false; }
pub mod DrawElementsInstancedBaseVertex { pub static mut is_loaded: bool = false; }
pub mod DrawElementsInstancedBaseVertexBaseInstance { pub static mut is_loaded: bool = false; }
pub mod DrawElementsInstancedEXT { pub static mut is_loaded: bool = false; }
pub mod DrawElementsInstancedNV { pub static mut is_loaded: bool = false; }
pub mod DrawMeshArraysSUN { pub static mut is_loaded: bool = false; }
pub mod DrawPixels { pub static mut is_loaded: bool = false; }
pub mod DrawRangeElementArrayAPPLE { pub static mut is_loaded: bool = false; }
pub mod DrawRangeElementArrayATI { pub static mut is_loaded: bool = false; }
pub mod DrawRangeElements { pub static mut is_loaded: bool = false; }
pub mod DrawRangeElementsBaseVertex { pub static mut is_loaded: bool = false; }
pub mod DrawRangeElementsEXT { pub static mut is_loaded: bool = false; }
pub mod DrawTexfOES { pub static mut is_loaded: bool = false; }
pub mod DrawTexfvOES { pub static mut is_loaded: bool = false; }
pub mod DrawTexiOES { pub static mut is_loaded: bool = false; }
pub mod DrawTexivOES { pub static mut is_loaded: bool = false; }
pub mod DrawTexsOES { pub static mut is_loaded: bool = false; }
pub mod DrawTexsvOES { pub static mut is_loaded: bool = false; }
pub mod DrawTextureNV { pub static mut is_loaded: bool = false; }
pub mod DrawTexxOES { pub static mut is_loaded: bool = false; }
pub mod DrawTexxvOES { pub static mut is_loaded: bool = false; }
pub mod DrawTransformFeedback { pub static mut is_loaded: bool = false; }
pub mod DrawTransformFeedbackInstanced { pub static mut is_loaded: bool = false; }
pub mod DrawTransformFeedbackNV { pub static mut is_loaded: bool = false; }
pub mod DrawTransformFeedbackStream { pub static mut is_loaded: bool = false; }
pub mod DrawTransformFeedbackStreamInstanced { pub static mut is_loaded: bool = false; }
pub mod EGLImageTargetRenderbufferStorageOES { pub static mut is_loaded: bool = false; }
pub mod EGLImageTargetTexture2DOES { pub static mut is_loaded: bool = false; }
pub mod EdgeFlag { pub static mut is_loaded: bool = false; }
pub mod EdgeFlagFormatNV { pub static mut is_loaded: bool = false; }
pub mod EdgeFlagPointer { pub static mut is_loaded: bool = false; }
pub mod EdgeFlagPointerEXT { pub static mut is_loaded: bool = false; }
pub mod EdgeFlagPointerListIBM { pub static mut is_loaded: bool = false; }
pub mod EdgeFlagv { pub static mut is_loaded: bool = false; }
pub mod ElementPointerAPPLE { pub static mut is_loaded: bool = false; }
pub mod ElementPointerATI { pub static mut is_loaded: bool = false; }
pub mod Enable { pub static mut is_loaded: bool = false; }
pub mod EnableClientState { pub static mut is_loaded: bool = false; }
pub mod EnableClientStateIndexedEXT { pub static mut is_loaded: bool = false; }
pub mod EnableClientStateiEXT { pub static mut is_loaded: bool = false; }
pub mod EnableDriverControlQCOM { pub static mut is_loaded: bool = false; }
pub mod EnableIndexedEXT { pub static mut is_loaded: bool = false; }
pub mod EnableVariantClientStateEXT { pub static mut is_loaded: bool = false; }
pub mod EnableVertexArrayAttribEXT { pub static mut is_loaded: bool = false; }
pub mod EnableVertexArrayEXT { pub static mut is_loaded: bool = false; }
pub mod EnableVertexAttribAPPLE { pub static mut is_loaded: bool = false; }
pub mod EnableVertexAttribArray { pub static mut is_loaded: bool = false; }
pub mod EnableVertexAttribArrayARB { pub static mut is_loaded: bool = false; }
pub mod Enablei { pub static mut is_loaded: bool = false; }
pub mod End { pub static mut is_loaded: bool = false; }
pub mod EndConditionalRender { pub static mut is_loaded: bool = false; }
pub mod EndConditionalRenderNV { pub static mut is_loaded: bool = false; }
pub mod EndConditionalRenderNVX { pub static mut is_loaded: bool = false; }
pub mod EndFragmentShaderATI { pub static mut is_loaded: bool = false; }
pub mod EndList { pub static mut is_loaded: bool = false; }
pub mod EndOcclusionQueryNV { pub static mut is_loaded: bool = false; }
pub mod EndPerfMonitorAMD { pub static mut is_loaded: bool = false; }
pub mod EndQuery { pub static mut is_loaded: bool = false; }
pub mod EndQueryARB { pub static mut is_loaded: bool = false; }
pub mod EndQueryEXT { pub static mut is_loaded: bool = false; }
pub mod EndQueryIndexed { pub static mut is_loaded: bool = false; }
pub mod EndTilingQCOM { pub static mut is_loaded: bool = false; }
pub mod EndTransformFeedback { pub static mut is_loaded: bool = false; }
pub mod EndTransformFeedbackEXT { pub static mut is_loaded: bool = false; }
pub mod EndTransformFeedbackNV { pub static mut is_loaded: bool = false; }
pub mod EndVertexShaderEXT { pub static mut is_loaded: bool = false; }
pub mod EndVideoCaptureNV { pub static mut is_loaded: bool = false; }
pub mod EvalCoord1d { pub static mut is_loaded: bool = false; }
pub mod EvalCoord1dv { pub static mut is_loaded: bool = false; }
pub mod EvalCoord1f { pub static mut is_loaded: bool = false; }
pub mod EvalCoord1fv { pub static mut is_loaded: bool = false; }
pub mod EvalCoord1xOES { pub static mut is_loaded: bool = false; }
pub mod EvalCoord1xvOES { pub static mut is_loaded: bool = false; }
pub mod EvalCoord2d { pub static mut is_loaded: bool = false; }
pub mod EvalCoord2dv { pub static mut is_loaded: bool = false; }
pub mod EvalCoord2f { pub static mut is_loaded: bool = false; }
pub mod EvalCoord2fv { pub static mut is_loaded: bool = false; }
pub mod EvalCoord2xOES { pub static mut is_loaded: bool = false; }
pub mod EvalCoord2xvOES { pub static mut is_loaded: bool = false; }
pub mod EvalMapsNV { pub static mut is_loaded: bool = false; }
pub mod EvalMesh1 { pub static mut is_loaded: bool = false; }
pub mod EvalMesh2 { pub static mut is_loaded: bool = false; }
pub mod EvalPoint1 { pub static mut is_loaded: bool = false; }
pub mod EvalPoint2 { pub static mut is_loaded: bool = false; }
pub mod ExecuteProgramNV { pub static mut is_loaded: bool = false; }
pub mod ExtGetBufferPointervQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetBuffersQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetFramebuffersQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetProgramBinarySourceQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetProgramsQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetRenderbuffersQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetShadersQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetTexLevelParameterivQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetTexSubImageQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtGetTexturesQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtIsProgramBinaryQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtTexObjectStateOverrideiQCOM { pub static mut is_loaded: bool = false; }
pub mod ExtractComponentEXT { pub static mut is_loaded: bool = false; }
pub mod FeedbackBuffer { pub static mut is_loaded: bool = false; }
pub mod FeedbackBufferxOES { pub static mut is_loaded: bool = false; }
pub mod FenceSync { pub static mut is_loaded: bool = false; }
pub mod FenceSyncAPPLE { pub static mut is_loaded: bool = false; }
pub mod FinalCombinerInputNV { pub static mut is_loaded: bool = false; }
pub mod Finish { pub static mut is_loaded: bool = false; }
pub mod FinishAsyncSGIX { pub static mut is_loaded: bool = false; }
pub mod FinishFenceAPPLE { pub static mut is_loaded: bool = false; }
pub mod FinishFenceNV { pub static mut is_loaded: bool = false; }
pub mod FinishObjectAPPLE { pub static mut is_loaded: bool = false; }
pub mod FinishTextureSUNX { pub static mut is_loaded: bool = false; }
pub mod Flush { pub static mut is_loaded: bool = false; }
pub mod FlushMappedBufferRange { pub static mut is_loaded: bool = false; }
pub mod FlushMappedBufferRangeAPPLE { pub static mut is_loaded: bool = false; }
pub mod FlushMappedBufferRangeEXT { pub static mut is_loaded: bool = false; }
pub mod FlushMappedNamedBufferRangeEXT { pub static mut is_loaded: bool = false; }
pub mod FlushPixelDataRangeNV { pub static mut is_loaded: bool = false; }
pub mod FlushRasterSGIX { pub static mut is_loaded: bool = false; }
pub mod FlushStaticDataIBM { pub static mut is_loaded: bool = false; }
pub mod FlushVertexArrayRangeAPPLE { pub static mut is_loaded: bool = false; }
pub mod FlushVertexArrayRangeNV { pub static mut is_loaded: bool = false; }
pub mod FogCoordFormatNV { pub static mut is_loaded: bool = false; }
pub mod FogCoordPointer { pub static mut is_loaded: bool = false; }
pub mod FogCoordPointerEXT { pub static mut is_loaded: bool = false; }
pub mod FogCoordPointerListIBM { pub static mut is_loaded: bool = false; }
pub mod FogCoordd { pub static mut is_loaded: bool = false; }
pub mod FogCoorddEXT { pub static mut is_loaded: bool = false; }
pub mod FogCoorddv { pub static mut is_loaded: bool = false; }
pub mod FogCoorddvEXT { pub static mut is_loaded: bool = false; }
pub mod FogCoordf { pub static mut is_loaded: bool = false; }
pub mod FogCoordfEXT { pub static mut is_loaded: bool = false; }
pub mod FogCoordfv { pub static mut is_loaded: bool = false; }
pub mod FogCoordfvEXT { pub static mut is_loaded: bool = false; }
pub mod FogCoordhNV { pub static mut is_loaded: bool = false; }
pub mod FogCoordhvNV { pub static mut is_loaded: bool = false; }
pub mod FogFuncSGIS { pub static mut is_loaded: bool = false; }
pub mod Fogf { pub static mut is_loaded: bool = false; }
pub mod Fogfv { pub static mut is_loaded: bool = false; }
pub mod Fogi { pub static mut is_loaded: bool = false; }
pub mod Fogiv { pub static mut is_loaded: bool = false; }
pub mod Fogx { pub static mut is_loaded: bool = false; }
pub mod FogxOES { pub static mut is_loaded: bool = false; }
pub mod Fogxv { pub static mut is_loaded: bool = false; }
pub mod FogxvOES { pub static mut is_loaded: bool = false; }
pub mod FragmentColorMaterialSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentLightModelfSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentLightModelfvSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentLightModeliSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentLightModelivSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentLightfSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentLightfvSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentLightiSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentLightivSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentMaterialfSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentMaterialfvSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentMaterialiSGIX { pub static mut is_loaded: bool = false; }
pub mod FragmentMaterialivSGIX { pub static mut is_loaded: bool = false; }
pub mod FrameTerminatorGREMEDY { pub static mut is_loaded: bool = false; }
pub mod FrameZoomSGIX { pub static mut is_loaded: bool = false; }
pub mod FramebufferDrawBufferEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferDrawBuffersEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferParameteri { pub static mut is_loaded: bool = false; }
pub mod FramebufferReadBufferEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferRenderbuffer { pub static mut is_loaded: bool = false; }
pub mod FramebufferRenderbufferEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferRenderbufferOES { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture1D { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture1DEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture2D { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture2DEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture2DMultisampleEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture2DMultisampleIMG { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture2DOES { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture3D { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture3DEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferTexture3DOES { pub static mut is_loaded: bool = false; }
pub mod FramebufferTextureARB { pub static mut is_loaded: bool = false; }
pub mod FramebufferTextureEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferTextureFaceARB { pub static mut is_loaded: bool = false; }
pub mod FramebufferTextureFaceEXT { pub static mut is_loaded: bool = false; }
pub mod FramebufferTextureLayer { pub static mut is_loaded: bool = false; }
pub mod FramebufferTextureLayerARB { pub static mut is_loaded: bool = false; }
pub mod FramebufferTextureLayerEXT { pub static mut is_loaded: bool = false; }
pub mod FreeObjectBufferATI { pub static mut is_loaded: bool = false; }
pub mod FrontFace { pub static mut is_loaded: bool = false; }
pub mod Frustum { pub static mut is_loaded: bool = false; }
pub mod Frustumf { pub static mut is_loaded: bool = false; }
pub mod FrustumfOES { pub static mut is_loaded: bool = false; }
pub mod Frustumx { pub static mut is_loaded: bool = false; }
pub mod FrustumxOES { pub static mut is_loaded: bool = false; }
pub mod GenAsyncMarkersSGIX { pub static mut is_loaded: bool = false; }
pub mod GenBuffers { pub static mut is_loaded: bool = false; }
pub mod GenBuffersARB { pub static mut is_loaded: bool = false; }
pub mod GenFencesAPPLE { pub static mut is_loaded: bool = false; }
pub mod GenFencesNV { pub static mut is_loaded: bool = false; }
pub mod GenFragmentShadersATI { pub static mut is_loaded: bool = false; }
pub mod GenFramebuffers { pub static mut is_loaded: bool = false; }
pub mod GenFramebuffersEXT { pub static mut is_loaded: bool = false; }
pub mod GenFramebuffersOES { pub static mut is_loaded: bool = false; }
pub mod GenLists { pub static mut is_loaded: bool = false; }
pub mod GenNamesAMD { pub static mut is_loaded: bool = false; }
pub mod GenOcclusionQueriesNV { pub static mut is_loaded: bool = false; }
pub mod GenPathsNV { pub static mut is_loaded: bool = false; }
pub mod GenPerfMonitorsAMD { pub static mut is_loaded: bool = false; }
pub mod GenProgramPipelines { pub static mut is_loaded: bool = false; }
pub mod GenProgramPipelinesEXT { pub static mut is_loaded: bool = false; }
pub mod GenProgramsARB { pub static mut is_loaded: bool = false; }
pub mod GenProgramsNV { pub static mut is_loaded: bool = false; }
pub mod GenQueries { pub static mut is_loaded: bool = false; }
pub mod GenQueriesARB { pub static mut is_loaded: bool = false; }
pub mod GenQueriesEXT { pub static mut is_loaded: bool = false; }
pub mod GenRenderbuffers { pub static mut is_loaded: bool = false; }
pub mod GenRenderbuffersEXT { pub static mut is_loaded: bool = false; }
pub mod GenRenderbuffersOES { pub static mut is_loaded: bool = false; }
pub mod GenSamplers { pub static mut is_loaded: bool = false; }
pub mod GenSymbolsEXT { pub static mut is_loaded: bool = false; }
pub mod GenTextures { pub static mut is_loaded: bool = false; }
pub mod GenTexturesEXT { pub static mut is_loaded: bool = false; }
pub mod GenTransformFeedbacks { pub static mut is_loaded: bool = false; }
pub mod GenTransformFeedbacksNV { pub static mut is_loaded: bool = false; }
pub mod GenVertexArrays { pub static mut is_loaded: bool = false; }
pub mod GenVertexArraysAPPLE { pub static mut is_loaded: bool = false; }
pub mod GenVertexArraysOES { pub static mut is_loaded: bool = false; }
pub mod GenVertexShadersEXT { pub static mut is_loaded: bool = false; }
pub mod GenerateMipmap { pub static mut is_loaded: bool = false; }
pub mod GenerateMipmapEXT { pub static mut is_loaded: bool = false; }
pub mod GenerateMipmapOES { pub static mut is_loaded: bool = false; }
pub mod GenerateMultiTexMipmapEXT { pub static mut is_loaded: bool = false; }
pub mod GenerateTextureMipmapEXT { pub static mut is_loaded: bool = false; }
pub mod GetActiveAtomicCounterBufferiv { pub static mut is_loaded: bool = false; }
pub mod GetActiveAttrib { pub static mut is_loaded: bool = false; }
pub mod GetActiveAttribARB { pub static mut is_loaded: bool = false; }
pub mod GetActiveSubroutineName { pub static mut is_loaded: bool = false; }
pub mod GetActiveSubroutineUniformName { pub static mut is_loaded: bool = false; }
pub mod GetActiveSubroutineUniformiv { pub static mut is_loaded: bool = false; }
pub mod GetActiveUniform { pub static mut is_loaded: bool = false; }
pub mod GetActiveUniformARB { pub static mut is_loaded: bool = false; }
pub mod GetActiveUniformBlockName { pub static mut is_loaded: bool = false; }
pub mod GetActiveUniformBlockiv { pub static mut is_loaded: bool = false; }
pub mod GetActiveUniformName { pub static mut is_loaded: bool = false; }
pub mod GetActiveUniformsiv { pub static mut is_loaded: bool = false; }
pub mod GetActiveVaryingNV { pub static mut is_loaded: bool = false; }
pub mod GetArrayObjectfvATI { pub static mut is_loaded: bool = false; }
pub mod GetArrayObjectivATI { pub static mut is_loaded: bool = false; }
pub mod GetAttachedObjectsARB { pub static mut is_loaded: bool = false; }
pub mod GetAttachedShaders { pub static mut is_loaded: bool = false; }
pub mod GetAttribLocation { pub static mut is_loaded: bool = false; }
pub mod GetAttribLocationARB { pub static mut is_loaded: bool = false; }
pub mod GetBooleanIndexedvEXT { pub static mut is_loaded: bool = false; }
pub mod GetBooleani_v { pub static mut is_loaded: bool = false; }
pub mod GetBooleanv { pub static mut is_loaded: bool = false; }
pub mod GetBufferParameteri64v { pub static mut is_loaded: bool = false; }
pub mod GetBufferParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetBufferParameterivARB { pub static mut is_loaded: bool = false; }
pub mod GetBufferParameterui64vNV { pub static mut is_loaded: bool = false; }
pub mod GetBufferPointerv { pub static mut is_loaded: bool = false; }
pub mod GetBufferPointervARB { pub static mut is_loaded: bool = false; }
pub mod GetBufferPointervOES { pub static mut is_loaded: bool = false; }
pub mod GetBufferSubData { pub static mut is_loaded: bool = false; }
pub mod GetBufferSubDataARB { pub static mut is_loaded: bool = false; }
pub mod GetClipPlane { pub static mut is_loaded: bool = false; }
pub mod GetClipPlanef { pub static mut is_loaded: bool = false; }
pub mod GetClipPlanefOES { pub static mut is_loaded: bool = false; }
pub mod GetClipPlanex { pub static mut is_loaded: bool = false; }
pub mod GetClipPlanexOES { pub static mut is_loaded: bool = false; }
pub mod GetColorTable { pub static mut is_loaded: bool = false; }
pub mod GetColorTableEXT { pub static mut is_loaded: bool = false; }
pub mod GetColorTableParameterfv { pub static mut is_loaded: bool = false; }
pub mod GetColorTableParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetColorTableParameterfvSGI { pub static mut is_loaded: bool = false; }
pub mod GetColorTableParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetColorTableParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetColorTableParameterivSGI { pub static mut is_loaded: bool = false; }
pub mod GetColorTableSGI { pub static mut is_loaded: bool = false; }
pub mod GetCombinerInputParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetCombinerInputParameterivNV { pub static mut is_loaded: bool = false; }
pub mod GetCombinerOutputParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetCombinerOutputParameterivNV { pub static mut is_loaded: bool = false; }
pub mod GetCombinerStageParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetCompressedMultiTexImageEXT { pub static mut is_loaded: bool = false; }
pub mod GetCompressedTexImage { pub static mut is_loaded: bool = false; }
pub mod GetCompressedTexImageARB { pub static mut is_loaded: bool = false; }
pub mod GetCompressedTextureImageEXT { pub static mut is_loaded: bool = false; }
pub mod GetConvolutionFilter { pub static mut is_loaded: bool = false; }
pub mod GetConvolutionFilterEXT { pub static mut is_loaded: bool = false; }
pub mod GetConvolutionParameterfv { pub static mut is_loaded: bool = false; }
pub mod GetConvolutionParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetConvolutionParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetConvolutionParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetConvolutionParameterxvOES { pub static mut is_loaded: bool = false; }
pub mod GetDebugMessageLog { pub static mut is_loaded: bool = false; }
pub mod GetDebugMessageLogAMD { pub static mut is_loaded: bool = false; }
pub mod GetDebugMessageLogARB { pub static mut is_loaded: bool = false; }
pub mod GetDebugMessageLogKHR { pub static mut is_loaded: bool = false; }
pub mod GetDetailTexFuncSGIS { pub static mut is_loaded: bool = false; }
pub mod GetDoubleIndexedvEXT { pub static mut is_loaded: bool = false; }
pub mod GetDoublei_v { pub static mut is_loaded: bool = false; }
pub mod GetDoublei_vEXT { pub static mut is_loaded: bool = false; }
pub mod GetDoublev { pub static mut is_loaded: bool = false; }
pub mod GetDriverControlStringQCOM { pub static mut is_loaded: bool = false; }
pub mod GetDriverControlsQCOM { pub static mut is_loaded: bool = false; }
pub mod GetError { pub static mut is_loaded: bool = false; }
pub mod GetFenceivNV { pub static mut is_loaded: bool = false; }
pub mod GetFinalCombinerInputParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetFinalCombinerInputParameterivNV { pub static mut is_loaded: bool = false; }
pub mod GetFixedv { pub static mut is_loaded: bool = false; }
pub mod GetFixedvOES { pub static mut is_loaded: bool = false; }
pub mod GetFloatIndexedvEXT { pub static mut is_loaded: bool = false; }
pub mod GetFloati_v { pub static mut is_loaded: bool = false; }
pub mod GetFloati_vEXT { pub static mut is_loaded: bool = false; }
pub mod GetFloatv { pub static mut is_loaded: bool = false; }
pub mod GetFogFuncSGIS { pub static mut is_loaded: bool = false; }
pub mod GetFragDataIndex { pub static mut is_loaded: bool = false; }
pub mod GetFragDataLocation { pub static mut is_loaded: bool = false; }
pub mod GetFragDataLocationEXT { pub static mut is_loaded: bool = false; }
pub mod GetFragmentLightfvSGIX { pub static mut is_loaded: bool = false; }
pub mod GetFragmentLightivSGIX { pub static mut is_loaded: bool = false; }
pub mod GetFragmentMaterialfvSGIX { pub static mut is_loaded: bool = false; }
pub mod GetFragmentMaterialivSGIX { pub static mut is_loaded: bool = false; }
pub mod GetFramebufferAttachmentParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetFramebufferAttachmentParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetFramebufferAttachmentParameterivOES { pub static mut is_loaded: bool = false; }
pub mod GetFramebufferParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetFramebufferParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetGraphicsResetStatusARB { pub static mut is_loaded: bool = false; }
pub mod GetGraphicsResetStatusEXT { pub static mut is_loaded: bool = false; }
pub mod GetHandleARB { pub static mut is_loaded: bool = false; }
pub mod GetHistogram { pub static mut is_loaded: bool = false; }
pub mod GetHistogramEXT { pub static mut is_loaded: bool = false; }
pub mod GetHistogramParameterfv { pub static mut is_loaded: bool = false; }
pub mod GetHistogramParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetHistogramParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetHistogramParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetHistogramParameterxvOES { pub static mut is_loaded: bool = false; }
pub mod GetImageHandleARB { pub static mut is_loaded: bool = false; }
pub mod GetImageHandleNV { pub static mut is_loaded: bool = false; }
pub mod GetImageTransformParameterfvHP { pub static mut is_loaded: bool = false; }
pub mod GetImageTransformParameterivHP { pub static mut is_loaded: bool = false; }
pub mod GetInfoLogARB { pub static mut is_loaded: bool = false; }
pub mod GetInstrumentsSGIX { pub static mut is_loaded: bool = false; }
pub mod GetInteger64i_v { pub static mut is_loaded: bool = false; }
pub mod GetInteger64v { pub static mut is_loaded: bool = false; }
pub mod GetInteger64vAPPLE { pub static mut is_loaded: bool = false; }
pub mod GetIntegerIndexedvEXT { pub static mut is_loaded: bool = false; }
pub mod GetIntegeri_v { pub static mut is_loaded: bool = false; }
pub mod GetIntegeri_vEXT { pub static mut is_loaded: bool = false; }
pub mod GetIntegerui64i_vNV { pub static mut is_loaded: bool = false; }
pub mod GetIntegerui64vNV { pub static mut is_loaded: bool = false; }
pub mod GetIntegerv { pub static mut is_loaded: bool = false; }
pub mod GetInternalformati64v { pub static mut is_loaded: bool = false; }
pub mod GetInternalformativ { pub static mut is_loaded: bool = false; }
pub mod GetInvariantBooleanvEXT { pub static mut is_loaded: bool = false; }
pub mod GetInvariantFloatvEXT { pub static mut is_loaded: bool = false; }
pub mod GetInvariantIntegervEXT { pub static mut is_loaded: bool = false; }
pub mod GetLightfv { pub static mut is_loaded: bool = false; }
pub mod GetLightiv { pub static mut is_loaded: bool = false; }
pub mod GetLightx { pub static mut is_loaded: bool = false; }
pub mod GetLightxOES { pub static mut is_loaded: bool = false; }
pub mod GetLightxv { pub static mut is_loaded: bool = false; }
pub mod GetLightxvOES { pub static mut is_loaded: bool = false; }
pub mod GetListParameterfvSGIX { pub static mut is_loaded: bool = false; }
pub mod GetListParameterivSGIX { pub static mut is_loaded: bool = false; }
pub mod GetLocalConstantBooleanvEXT { pub static mut is_loaded: bool = false; }
pub mod GetLocalConstantFloatvEXT { pub static mut is_loaded: bool = false; }
pub mod GetLocalConstantIntegervEXT { pub static mut is_loaded: bool = false; }
pub mod GetMapAttribParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetMapAttribParameterivNV { pub static mut is_loaded: bool = false; }
pub mod GetMapControlPointsNV { pub static mut is_loaded: bool = false; }
pub mod GetMapParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetMapParameterivNV { pub static mut is_loaded: bool = false; }
pub mod GetMapdv { pub static mut is_loaded: bool = false; }
pub mod GetMapfv { pub static mut is_loaded: bool = false; }
pub mod GetMapiv { pub static mut is_loaded: bool = false; }
pub mod GetMapxvOES { pub static mut is_loaded: bool = false; }
pub mod GetMaterialfv { pub static mut is_loaded: bool = false; }
pub mod GetMaterialiv { pub static mut is_loaded: bool = false; }
pub mod GetMaterialx { pub static mut is_loaded: bool = false; }
pub mod GetMaterialxOES { pub static mut is_loaded: bool = false; }
pub mod GetMaterialxv { pub static mut is_loaded: bool = false; }
pub mod GetMaterialxvOES { pub static mut is_loaded: bool = false; }
pub mod GetMinmax { pub static mut is_loaded: bool = false; }
pub mod GetMinmaxEXT { pub static mut is_loaded: bool = false; }
pub mod GetMinmaxParameterfv { pub static mut is_loaded: bool = false; }
pub mod GetMinmaxParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetMinmaxParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetMinmaxParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexEnvfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexEnvivEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexGendvEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexGenfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexGenivEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexImageEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexLevelParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexLevelParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexParameterIivEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexParameterIuivEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultiTexParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetMultisamplefv { pub static mut is_loaded: bool = false; }
pub mod GetMultisamplefvNV { pub static mut is_loaded: bool = false; }
pub mod GetNamedBufferParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedBufferParameterui64vNV { pub static mut is_loaded: bool = false; }
pub mod GetNamedBufferPointervEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedBufferSubDataEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedFramebufferAttachmentParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedFramebufferParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedProgramLocalParameterIivEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedProgramLocalParameterIuivEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedProgramLocalParameterdvEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedProgramLocalParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedProgramStringEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedProgramivEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedRenderbufferParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetNamedStringARB { pub static mut is_loaded: bool = false; }
pub mod GetNamedStringivARB { pub static mut is_loaded: bool = false; }
pub mod GetObjectBufferfvATI { pub static mut is_loaded: bool = false; }
pub mod GetObjectBufferivATI { pub static mut is_loaded: bool = false; }
pub mod GetObjectLabel { pub static mut is_loaded: bool = false; }
pub mod GetObjectLabelEXT { pub static mut is_loaded: bool = false; }
pub mod GetObjectLabelKHR { pub static mut is_loaded: bool = false; }
pub mod GetObjectParameterfvARB { pub static mut is_loaded: bool = false; }
pub mod GetObjectParameterivAPPLE { pub static mut is_loaded: bool = false; }
pub mod GetObjectParameterivARB { pub static mut is_loaded: bool = false; }
pub mod GetObjectPtrLabel { pub static mut is_loaded: bool = false; }
pub mod GetObjectPtrLabelKHR { pub static mut is_loaded: bool = false; }
pub mod GetOcclusionQueryivNV { pub static mut is_loaded: bool = false; }
pub mod GetOcclusionQueryuivNV { pub static mut is_loaded: bool = false; }
pub mod GetPathColorGenfvNV { pub static mut is_loaded: bool = false; }
pub mod GetPathColorGenivNV { pub static mut is_loaded: bool = false; }
pub mod GetPathCommandsNV { pub static mut is_loaded: bool = false; }
pub mod GetPathCoordsNV { pub static mut is_loaded: bool = false; }
pub mod GetPathDashArrayNV { pub static mut is_loaded: bool = false; }
pub mod GetPathLengthNV { pub static mut is_loaded: bool = false; }
pub mod GetPathMetricRangeNV { pub static mut is_loaded: bool = false; }
pub mod GetPathMetricsNV { pub static mut is_loaded: bool = false; }
pub mod GetPathParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetPathParameterivNV { pub static mut is_loaded: bool = false; }
pub mod GetPathSpacingNV { pub static mut is_loaded: bool = false; }
pub mod GetPathTexGenfvNV { pub static mut is_loaded: bool = false; }
pub mod GetPathTexGenivNV { pub static mut is_loaded: bool = false; }
pub mod GetPerfMonitorCounterDataAMD { pub static mut is_loaded: bool = false; }
pub mod GetPerfMonitorCounterInfoAMD { pub static mut is_loaded: bool = false; }
pub mod GetPerfMonitorCounterStringAMD { pub static mut is_loaded: bool = false; }
pub mod GetPerfMonitorCountersAMD { pub static mut is_loaded: bool = false; }
pub mod GetPerfMonitorGroupStringAMD { pub static mut is_loaded: bool = false; }
pub mod GetPerfMonitorGroupsAMD { pub static mut is_loaded: bool = false; }
pub mod GetPixelMapfv { pub static mut is_loaded: bool = false; }
pub mod GetPixelMapuiv { pub static mut is_loaded: bool = false; }
pub mod GetPixelMapusv { pub static mut is_loaded: bool = false; }
pub mod GetPixelMapxv { pub static mut is_loaded: bool = false; }
pub mod GetPixelTexGenParameterfvSGIS { pub static mut is_loaded: bool = false; }
pub mod GetPixelTexGenParameterivSGIS { pub static mut is_loaded: bool = false; }
pub mod GetPixelTransformParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetPixelTransformParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetPointerIndexedvEXT { pub static mut is_loaded: bool = false; }
pub mod GetPointeri_vEXT { pub static mut is_loaded: bool = false; }
pub mod GetPointerv { pub static mut is_loaded: bool = false; }
pub mod GetPointervEXT { pub static mut is_loaded: bool = false; }
pub mod GetPointervKHR { pub static mut is_loaded: bool = false; }
pub mod GetPolygonStipple { pub static mut is_loaded: bool = false; }
pub mod GetProgramBinary { pub static mut is_loaded: bool = false; }
pub mod GetProgramBinaryOES { pub static mut is_loaded: bool = false; }
pub mod GetProgramEnvParameterIivNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramEnvParameterIuivNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramEnvParameterdvARB { pub static mut is_loaded: bool = false; }
pub mod GetProgramEnvParameterfvARB { pub static mut is_loaded: bool = false; }
pub mod GetProgramInfoLog { pub static mut is_loaded: bool = false; }
pub mod GetProgramInterfaceiv { pub static mut is_loaded: bool = false; }
pub mod GetProgramLocalParameterIivNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramLocalParameterIuivNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramLocalParameterdvARB { pub static mut is_loaded: bool = false; }
pub mod GetProgramLocalParameterfvARB { pub static mut is_loaded: bool = false; }
pub mod GetProgramNamedParameterdvNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramNamedParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramParameterdvNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramPipelineInfoLog { pub static mut is_loaded: bool = false; }
pub mod GetProgramPipelineInfoLogEXT { pub static mut is_loaded: bool = false; }
pub mod GetProgramPipelineiv { pub static mut is_loaded: bool = false; }
pub mod GetProgramPipelineivEXT { pub static mut is_loaded: bool = false; }
pub mod GetProgramResourceIndex { pub static mut is_loaded: bool = false; }
pub mod GetProgramResourceLocation { pub static mut is_loaded: bool = false; }
pub mod GetProgramResourceLocationIndex { pub static mut is_loaded: bool = false; }
pub mod GetProgramResourceName { pub static mut is_loaded: bool = false; }
pub mod GetProgramResourceiv { pub static mut is_loaded: bool = false; }
pub mod GetProgramStageiv { pub static mut is_loaded: bool = false; }
pub mod GetProgramStringARB { pub static mut is_loaded: bool = false; }
pub mod GetProgramStringNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramSubroutineParameteruivNV { pub static mut is_loaded: bool = false; }
pub mod GetProgramiv { pub static mut is_loaded: bool = false; }
pub mod GetProgramivARB { pub static mut is_loaded: bool = false; }
pub mod GetProgramivNV { pub static mut is_loaded: bool = false; }
pub mod GetQueryIndexediv { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjecti64v { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjecti64vEXT { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjectiv { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjectivARB { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjectivEXT { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjectui64v { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjectui64vEXT { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjectuiv { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjectuivARB { pub static mut is_loaded: bool = false; }
pub mod GetQueryObjectuivEXT { pub static mut is_loaded: bool = false; }
pub mod GetQueryiv { pub static mut is_loaded: bool = false; }
pub mod GetQueryivARB { pub static mut is_loaded: bool = false; }
pub mod GetQueryivEXT { pub static mut is_loaded: bool = false; }
pub mod GetRenderbufferParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetRenderbufferParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetRenderbufferParameterivOES { pub static mut is_loaded: bool = false; }
pub mod GetSamplerParameterIiv { pub static mut is_loaded: bool = false; }
pub mod GetSamplerParameterIuiv { pub static mut is_loaded: bool = false; }
pub mod GetSamplerParameterfv { pub static mut is_loaded: bool = false; }
pub mod GetSamplerParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetSeparableFilter { pub static mut is_loaded: bool = false; }
pub mod GetSeparableFilterEXT { pub static mut is_loaded: bool = false; }
pub mod GetShaderInfoLog { pub static mut is_loaded: bool = false; }
pub mod GetShaderPrecisionFormat { pub static mut is_loaded: bool = false; }
pub mod GetShaderSource { pub static mut is_loaded: bool = false; }
pub mod GetShaderSourceARB { pub static mut is_loaded: bool = false; }
pub mod GetShaderiv { pub static mut is_loaded: bool = false; }
pub mod GetSharpenTexFuncSGIS { pub static mut is_loaded: bool = false; }
pub mod GetString { pub static mut is_loaded: bool = false; }
pub mod GetStringi { pub static mut is_loaded: bool = false; }
pub mod GetSubroutineIndex { pub static mut is_loaded: bool = false; }
pub mod GetSubroutineUniformLocation { pub static mut is_loaded: bool = false; }
pub mod GetSynciv { pub static mut is_loaded: bool = false; }
pub mod GetSyncivAPPLE { pub static mut is_loaded: bool = false; }
pub mod GetTexBumpParameterfvATI { pub static mut is_loaded: bool = false; }
pub mod GetTexBumpParameterivATI { pub static mut is_loaded: bool = false; }
pub mod GetTexEnvfv { pub static mut is_loaded: bool = false; }
pub mod GetTexEnviv { pub static mut is_loaded: bool = false; }
pub mod GetTexEnvxv { pub static mut is_loaded: bool = false; }
pub mod GetTexEnvxvOES { pub static mut is_loaded: bool = false; }
pub mod GetTexFilterFuncSGIS { pub static mut is_loaded: bool = false; }
pub mod GetTexGendv { pub static mut is_loaded: bool = false; }
pub mod GetTexGenfv { pub static mut is_loaded: bool = false; }
pub mod GetTexGenfvOES { pub static mut is_loaded: bool = false; }
pub mod GetTexGeniv { pub static mut is_loaded: bool = false; }
pub mod GetTexGenivOES { pub static mut is_loaded: bool = false; }
pub mod GetTexGenxvOES { pub static mut is_loaded: bool = false; }
pub mod GetTexImage { pub static mut is_loaded: bool = false; }
pub mod GetTexLevelParameterfv { pub static mut is_loaded: bool = false; }
pub mod GetTexLevelParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetTexLevelParameterxvOES { pub static mut is_loaded: bool = false; }
pub mod GetTexParameterIiv { pub static mut is_loaded: bool = false; }
pub mod GetTexParameterIivEXT { pub static mut is_loaded: bool = false; }
pub mod GetTexParameterIuiv { pub static mut is_loaded: bool = false; }
pub mod GetTexParameterIuivEXT { pub static mut is_loaded: bool = false; }
pub mod GetTexParameterPointervAPPLE { pub static mut is_loaded: bool = false; }
pub mod GetTexParameterfv { pub static mut is_loaded: bool = false; }
pub mod GetTexParameteriv { pub static mut is_loaded: bool = false; }
pub mod GetTexParameterxv { pub static mut is_loaded: bool = false; }
pub mod GetTexParameterxvOES { pub static mut is_loaded: bool = false; }
pub mod GetTextureHandleARB { pub static mut is_loaded: bool = false; }
pub mod GetTextureHandleNV { pub static mut is_loaded: bool = false; }
pub mod GetTextureImageEXT { pub static mut is_loaded: bool = false; }
pub mod GetTextureLevelParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetTextureLevelParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetTextureParameterIivEXT { pub static mut is_loaded: bool = false; }
pub mod GetTextureParameterIuivEXT { pub static mut is_loaded: bool = false; }
pub mod GetTextureParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetTextureParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod GetTextureSamplerHandleARB { pub static mut is_loaded: bool = false; }
pub mod GetTextureSamplerHandleNV { pub static mut is_loaded: bool = false; }
pub mod GetTrackMatrixivNV { pub static mut is_loaded: bool = false; }
pub mod GetTransformFeedbackVarying { pub static mut is_loaded: bool = false; }
pub mod GetTransformFeedbackVaryingEXT { pub static mut is_loaded: bool = false; }
pub mod GetTransformFeedbackVaryingNV { pub static mut is_loaded: bool = false; }
pub mod GetTranslatedShaderSourceANGLE { pub static mut is_loaded: bool = false; }
pub mod GetUniformBlockIndex { pub static mut is_loaded: bool = false; }
pub mod GetUniformBufferSizeEXT { pub static mut is_loaded: bool = false; }
pub mod GetUniformIndices { pub static mut is_loaded: bool = false; }
pub mod GetUniformLocation { pub static mut is_loaded: bool = false; }
pub mod GetUniformLocationARB { pub static mut is_loaded: bool = false; }
pub mod GetUniformOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod GetUniformSubroutineuiv { pub static mut is_loaded: bool = false; }
pub mod GetUniformdv { pub static mut is_loaded: bool = false; }
pub mod GetUniformfv { pub static mut is_loaded: bool = false; }
pub mod GetUniformfvARB { pub static mut is_loaded: bool = false; }
pub mod GetUniformi64vNV { pub static mut is_loaded: bool = false; }
pub mod GetUniformiv { pub static mut is_loaded: bool = false; }
pub mod GetUniformivARB { pub static mut is_loaded: bool = false; }
pub mod GetUniformui64vNV { pub static mut is_loaded: bool = false; }
pub mod GetUniformuiv { pub static mut is_loaded: bool = false; }
pub mod GetUniformuivEXT { pub static mut is_loaded: bool = false; }
pub mod GetVariantArrayObjectfvATI { pub static mut is_loaded: bool = false; }
pub mod GetVariantArrayObjectivATI { pub static mut is_loaded: bool = false; }
pub mod GetVariantBooleanvEXT { pub static mut is_loaded: bool = false; }
pub mod GetVariantFloatvEXT { pub static mut is_loaded: bool = false; }
pub mod GetVariantIntegervEXT { pub static mut is_loaded: bool = false; }
pub mod GetVariantPointervEXT { pub static mut is_loaded: bool = false; }
pub mod GetVaryingLocationNV { pub static mut is_loaded: bool = false; }
pub mod GetVertexArrayIntegeri_vEXT { pub static mut is_loaded: bool = false; }
pub mod GetVertexArrayIntegervEXT { pub static mut is_loaded: bool = false; }
pub mod GetVertexArrayPointeri_vEXT { pub static mut is_loaded: bool = false; }
pub mod GetVertexArrayPointervEXT { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribArrayObjectfvATI { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribArrayObjectivATI { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribIiv { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribIivEXT { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribIuiv { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribIuivEXT { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribLdv { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribLdvEXT { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribLi64vNV { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribLui64vARB { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribLui64vNV { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribPointerv { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribPointervARB { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribPointervNV { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribdv { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribdvARB { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribdvNV { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribfv { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribfvARB { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribfvNV { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribiv { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribivARB { pub static mut is_loaded: bool = false; }
pub mod GetVertexAttribivNV { pub static mut is_loaded: bool = false; }
pub mod GetVideoCaptureStreamdvNV { pub static mut is_loaded: bool = false; }
pub mod GetVideoCaptureStreamfvNV { pub static mut is_loaded: bool = false; }
pub mod GetVideoCaptureStreamivNV { pub static mut is_loaded: bool = false; }
pub mod GetVideoCaptureivNV { pub static mut is_loaded: bool = false; }
pub mod GetVideoi64vNV { pub static mut is_loaded: bool = false; }
pub mod GetVideoivNV { pub static mut is_loaded: bool = false; }
pub mod GetVideoui64vNV { pub static mut is_loaded: bool = false; }
pub mod GetVideouivNV { pub static mut is_loaded: bool = false; }
pub mod GetnColorTableARB { pub static mut is_loaded: bool = false; }
pub mod GetnCompressedTexImageARB { pub static mut is_loaded: bool = false; }
pub mod GetnConvolutionFilterARB { pub static mut is_loaded: bool = false; }
pub mod GetnHistogramARB { pub static mut is_loaded: bool = false; }
pub mod GetnMapdvARB { pub static mut is_loaded: bool = false; }
pub mod GetnMapfvARB { pub static mut is_loaded: bool = false; }
pub mod GetnMapivARB { pub static mut is_loaded: bool = false; }
pub mod GetnMinmaxARB { pub static mut is_loaded: bool = false; }
pub mod GetnPixelMapfvARB { pub static mut is_loaded: bool = false; }
pub mod GetnPixelMapuivARB { pub static mut is_loaded: bool = false; }
pub mod GetnPixelMapusvARB { pub static mut is_loaded: bool = false; }
pub mod GetnPolygonStippleARB { pub static mut is_loaded: bool = false; }
pub mod GetnSeparableFilterARB { pub static mut is_loaded: bool = false; }
pub mod GetnTexImageARB { pub static mut is_loaded: bool = false; }
pub mod GetnUniformdvARB { pub static mut is_loaded: bool = false; }
pub mod GetnUniformfvARB { pub static mut is_loaded: bool = false; }
pub mod GetnUniformfvEXT { pub static mut is_loaded: bool = false; }
pub mod GetnUniformivARB { pub static mut is_loaded: bool = false; }
pub mod GetnUniformivEXT { pub static mut is_loaded: bool = false; }
pub mod GetnUniformuivARB { pub static mut is_loaded: bool = false; }
pub mod GlobalAlphaFactorbSUN { pub static mut is_loaded: bool = false; }
pub mod GlobalAlphaFactordSUN { pub static mut is_loaded: bool = false; }
pub mod GlobalAlphaFactorfSUN { pub static mut is_loaded: bool = false; }
pub mod GlobalAlphaFactoriSUN { pub static mut is_loaded: bool = false; }
pub mod GlobalAlphaFactorsSUN { pub static mut is_loaded: bool = false; }
pub mod GlobalAlphaFactorubSUN { pub static mut is_loaded: bool = false; }
pub mod GlobalAlphaFactoruiSUN { pub static mut is_loaded: bool = false; }
pub mod GlobalAlphaFactorusSUN { pub static mut is_loaded: bool = false; }
pub mod Hint { pub static mut is_loaded: bool = false; }
pub mod HintPGI { pub static mut is_loaded: bool = false; }
pub mod Histogram { pub static mut is_loaded: bool = false; }
pub mod HistogramEXT { pub static mut is_loaded: bool = false; }
pub mod IglooInterfaceSGIX { pub static mut is_loaded: bool = false; }
pub mod ImageTransformParameterfHP { pub static mut is_loaded: bool = false; }
pub mod ImageTransformParameterfvHP { pub static mut is_loaded: bool = false; }
pub mod ImageTransformParameteriHP { pub static mut is_loaded: bool = false; }
pub mod ImageTransformParameterivHP { pub static mut is_loaded: bool = false; }
pub mod ImportSyncEXT { pub static mut is_loaded: bool = false; }
pub mod IndexFormatNV { pub static mut is_loaded: bool = false; }
pub mod IndexFuncEXT { pub static mut is_loaded: bool = false; }
pub mod IndexMask { pub static mut is_loaded: bool = false; }
pub mod IndexMaterialEXT { pub static mut is_loaded: bool = false; }
pub mod IndexPointer { pub static mut is_loaded: bool = false; }
pub mod IndexPointerEXT { pub static mut is_loaded: bool = false; }
pub mod IndexPointerListIBM { pub static mut is_loaded: bool = false; }
pub mod Indexd { pub static mut is_loaded: bool = false; }
pub mod Indexdv { pub static mut is_loaded: bool = false; }
pub mod Indexf { pub static mut is_loaded: bool = false; }
pub mod Indexfv { pub static mut is_loaded: bool = false; }
pub mod Indexi { pub static mut is_loaded: bool = false; }
pub mod Indexiv { pub static mut is_loaded: bool = false; }
pub mod Indexs { pub static mut is_loaded: bool = false; }
pub mod Indexsv { pub static mut is_loaded: bool = false; }
pub mod Indexub { pub static mut is_loaded: bool = false; }
pub mod Indexubv { pub static mut is_loaded: bool = false; }
pub mod IndexxOES { pub static mut is_loaded: bool = false; }
pub mod IndexxvOES { pub static mut is_loaded: bool = false; }
pub mod InitNames { pub static mut is_loaded: bool = false; }
pub mod InsertComponentEXT { pub static mut is_loaded: bool = false; }
pub mod InsertEventMarkerEXT { pub static mut is_loaded: bool = false; }
pub mod InstrumentsBufferSGIX { pub static mut is_loaded: bool = false; }
pub mod InterleavedArrays { pub static mut is_loaded: bool = false; }
pub mod InterpolatePathsNV { pub static mut is_loaded: bool = false; }
pub mod InvalidateBufferData { pub static mut is_loaded: bool = false; }
pub mod InvalidateBufferSubData { pub static mut is_loaded: bool = false; }
pub mod InvalidateFramebuffer { pub static mut is_loaded: bool = false; }
pub mod InvalidateSubFramebuffer { pub static mut is_loaded: bool = false; }
pub mod InvalidateTexImage { pub static mut is_loaded: bool = false; }
pub mod InvalidateTexSubImage { pub static mut is_loaded: bool = false; }
pub mod IsAsyncMarkerSGIX { pub static mut is_loaded: bool = false; }
pub mod IsBuffer { pub static mut is_loaded: bool = false; }
pub mod IsBufferARB { pub static mut is_loaded: bool = false; }
pub mod IsBufferResidentNV { pub static mut is_loaded: bool = false; }
pub mod IsEnabled { pub static mut is_loaded: bool = false; }
pub mod IsEnabledIndexedEXT { pub static mut is_loaded: bool = false; }
pub mod IsEnabledi { pub static mut is_loaded: bool = false; }
pub mod IsFenceAPPLE { pub static mut is_loaded: bool = false; }
pub mod IsFenceNV { pub static mut is_loaded: bool = false; }
pub mod IsFramebuffer { pub static mut is_loaded: bool = false; }
pub mod IsFramebufferEXT { pub static mut is_loaded: bool = false; }
pub mod IsFramebufferOES { pub static mut is_loaded: bool = false; }
pub mod IsImageHandleResidentARB { pub static mut is_loaded: bool = false; }
pub mod IsImageHandleResidentNV { pub static mut is_loaded: bool = false; }
pub mod IsList { pub static mut is_loaded: bool = false; }
pub mod IsNameAMD { pub static mut is_loaded: bool = false; }
pub mod IsNamedBufferResidentNV { pub static mut is_loaded: bool = false; }
pub mod IsNamedStringARB { pub static mut is_loaded: bool = false; }
pub mod IsObjectBufferATI { pub static mut is_loaded: bool = false; }
pub mod IsOcclusionQueryNV { pub static mut is_loaded: bool = false; }
pub mod IsPathNV { pub static mut is_loaded: bool = false; }
pub mod IsPointInFillPathNV { pub static mut is_loaded: bool = false; }
pub mod IsPointInStrokePathNV { pub static mut is_loaded: bool = false; }
pub mod IsProgram { pub static mut is_loaded: bool = false; }
pub mod IsProgramARB { pub static mut is_loaded: bool = false; }
pub mod IsProgramNV { pub static mut is_loaded: bool = false; }
pub mod IsProgramPipeline { pub static mut is_loaded: bool = false; }
pub mod IsProgramPipelineEXT { pub static mut is_loaded: bool = false; }
pub mod IsQuery { pub static mut is_loaded: bool = false; }
pub mod IsQueryARB { pub static mut is_loaded: bool = false; }
pub mod IsQueryEXT { pub static mut is_loaded: bool = false; }
pub mod IsRenderbuffer { pub static mut is_loaded: bool = false; }
pub mod IsRenderbufferEXT { pub static mut is_loaded: bool = false; }
pub mod IsRenderbufferOES { pub static mut is_loaded: bool = false; }
pub mod IsSampler { pub static mut is_loaded: bool = false; }
pub mod IsShader { pub static mut is_loaded: bool = false; }
pub mod IsSync { pub static mut is_loaded: bool = false; }
pub mod IsSyncAPPLE { pub static mut is_loaded: bool = false; }
pub mod IsTexture { pub static mut is_loaded: bool = false; }
pub mod IsTextureEXT { pub static mut is_loaded: bool = false; }
pub mod IsTextureHandleResidentARB { pub static mut is_loaded: bool = false; }
pub mod IsTextureHandleResidentNV { pub static mut is_loaded: bool = false; }
pub mod IsTransformFeedback { pub static mut is_loaded: bool = false; }
pub mod IsTransformFeedbackNV { pub static mut is_loaded: bool = false; }
pub mod IsVariantEnabledEXT { pub static mut is_loaded: bool = false; }
pub mod IsVertexArray { pub static mut is_loaded: bool = false; }
pub mod IsVertexArrayAPPLE { pub static mut is_loaded: bool = false; }
pub mod IsVertexArrayOES { pub static mut is_loaded: bool = false; }
pub mod IsVertexAttribEnabledAPPLE { pub static mut is_loaded: bool = false; }
pub mod LabelObjectEXT { pub static mut is_loaded: bool = false; }
pub mod LightEnviSGIX { pub static mut is_loaded: bool = false; }
pub mod LightModelf { pub static mut is_loaded: bool = false; }
pub mod LightModelfv { pub static mut is_loaded: bool = false; }
pub mod LightModeli { pub static mut is_loaded: bool = false; }
pub mod LightModeliv { pub static mut is_loaded: bool = false; }
pub mod LightModelx { pub static mut is_loaded: bool = false; }
pub mod LightModelxOES { pub static mut is_loaded: bool = false; }
pub mod LightModelxv { pub static mut is_loaded: bool = false; }
pub mod LightModelxvOES { pub static mut is_loaded: bool = false; }
pub mod Lightf { pub static mut is_loaded: bool = false; }
pub mod Lightfv { pub static mut is_loaded: bool = false; }
pub mod Lighti { pub static mut is_loaded: bool = false; }
pub mod Lightiv { pub static mut is_loaded: bool = false; }
pub mod Lightx { pub static mut is_loaded: bool = false; }
pub mod LightxOES { pub static mut is_loaded: bool = false; }
pub mod Lightxv { pub static mut is_loaded: bool = false; }
pub mod LightxvOES { pub static mut is_loaded: bool = false; }
pub mod LineStipple { pub static mut is_loaded: bool = false; }
pub mod LineWidth { pub static mut is_loaded: bool = false; }
pub mod LineWidthx { pub static mut is_loaded: bool = false; }
pub mod LineWidthxOES { pub static mut is_loaded: bool = false; }
pub mod LinkProgram { pub static mut is_loaded: bool = false; }
pub mod LinkProgramARB { pub static mut is_loaded: bool = false; }
pub mod ListBase { pub static mut is_loaded: bool = false; }
pub mod ListParameterfSGIX { pub static mut is_loaded: bool = false; }
pub mod ListParameterfvSGIX { pub static mut is_loaded: bool = false; }
pub mod ListParameteriSGIX { pub static mut is_loaded: bool = false; }
pub mod ListParameterivSGIX { pub static mut is_loaded: bool = false; }
pub mod LoadIdentity { pub static mut is_loaded: bool = false; }
pub mod LoadIdentityDeformationMapSGIX { pub static mut is_loaded: bool = false; }
pub mod LoadMatrixd { pub static mut is_loaded: bool = false; }
pub mod LoadMatrixf { pub static mut is_loaded: bool = false; }
pub mod LoadMatrixx { pub static mut is_loaded: bool = false; }
pub mod LoadMatrixxOES { pub static mut is_loaded: bool = false; }
pub mod LoadName { pub static mut is_loaded: bool = false; }
pub mod LoadPaletteFromModelViewMatrixOES { pub static mut is_loaded: bool = false; }
pub mod LoadProgramNV { pub static mut is_loaded: bool = false; }
pub mod LoadTransposeMatrixd { pub static mut is_loaded: bool = false; }
pub mod LoadTransposeMatrixdARB { pub static mut is_loaded: bool = false; }
pub mod LoadTransposeMatrixf { pub static mut is_loaded: bool = false; }
pub mod LoadTransposeMatrixfARB { pub static mut is_loaded: bool = false; }
pub mod LoadTransposeMatrixxOES { pub static mut is_loaded: bool = false; }
pub mod LockArraysEXT { pub static mut is_loaded: bool = false; }
pub mod LogicOp { pub static mut is_loaded: bool = false; }
pub mod MakeBufferNonResidentNV { pub static mut is_loaded: bool = false; }
pub mod MakeBufferResidentNV { pub static mut is_loaded: bool = false; }
pub mod MakeImageHandleNonResidentARB { pub static mut is_loaded: bool = false; }
pub mod MakeImageHandleNonResidentNV { pub static mut is_loaded: bool = false; }
pub mod MakeImageHandleResidentARB { pub static mut is_loaded: bool = false; }
pub mod MakeImageHandleResidentNV { pub static mut is_loaded: bool = false; }
pub mod MakeNamedBufferNonResidentNV { pub static mut is_loaded: bool = false; }
pub mod MakeNamedBufferResidentNV { pub static mut is_loaded: bool = false; }
pub mod MakeTextureHandleNonResidentARB { pub static mut is_loaded: bool = false; }
pub mod MakeTextureHandleNonResidentNV { pub static mut is_loaded: bool = false; }
pub mod MakeTextureHandleResidentARB { pub static mut is_loaded: bool = false; }
pub mod MakeTextureHandleResidentNV { pub static mut is_loaded: bool = false; }
pub mod Map1d { pub static mut is_loaded: bool = false; }
pub mod Map1f { pub static mut is_loaded: bool = false; }
pub mod Map1xOES { pub static mut is_loaded: bool = false; }
pub mod Map2d { pub static mut is_loaded: bool = false; }
pub mod Map2f { pub static mut is_loaded: bool = false; }
pub mod Map2xOES { pub static mut is_loaded: bool = false; }
pub mod MapBuffer { pub static mut is_loaded: bool = false; }
pub mod MapBufferARB { pub static mut is_loaded: bool = false; }
pub mod MapBufferOES { pub static mut is_loaded: bool = false; }
pub mod MapBufferRange { pub static mut is_loaded: bool = false; }
pub mod MapBufferRangeEXT { pub static mut is_loaded: bool = false; }
pub mod MapControlPointsNV { pub static mut is_loaded: bool = false; }
pub mod MapGrid1d { pub static mut is_loaded: bool = false; }
pub mod MapGrid1f { pub static mut is_loaded: bool = false; }
pub mod MapGrid1xOES { pub static mut is_loaded: bool = false; }
pub mod MapGrid2d { pub static mut is_loaded: bool = false; }
pub mod MapGrid2f { pub static mut is_loaded: bool = false; }
pub mod MapGrid2xOES { pub static mut is_loaded: bool = false; }
pub mod MapNamedBufferEXT { pub static mut is_loaded: bool = false; }
pub mod MapNamedBufferRangeEXT { pub static mut is_loaded: bool = false; }
pub mod MapObjectBufferATI { pub static mut is_loaded: bool = false; }
pub mod MapParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod MapParameterivNV { pub static mut is_loaded: bool = false; }
pub mod MapTexture2DINTEL { pub static mut is_loaded: bool = false; }
pub mod MapVertexAttrib1dAPPLE { pub static mut is_loaded: bool = false; }
pub mod MapVertexAttrib1fAPPLE { pub static mut is_loaded: bool = false; }
pub mod MapVertexAttrib2dAPPLE { pub static mut is_loaded: bool = false; }
pub mod MapVertexAttrib2fAPPLE { pub static mut is_loaded: bool = false; }
pub mod Materialf { pub static mut is_loaded: bool = false; }
pub mod Materialfv { pub static mut is_loaded: bool = false; }
pub mod Materiali { pub static mut is_loaded: bool = false; }
pub mod Materialiv { pub static mut is_loaded: bool = false; }
pub mod Materialx { pub static mut is_loaded: bool = false; }
pub mod MaterialxOES { pub static mut is_loaded: bool = false; }
pub mod Materialxv { pub static mut is_loaded: bool = false; }
pub mod MaterialxvOES { pub static mut is_loaded: bool = false; }
pub mod MatrixFrustumEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixIndexPointerARB { pub static mut is_loaded: bool = false; }
pub mod MatrixIndexPointerOES { pub static mut is_loaded: bool = false; }
pub mod MatrixIndexubvARB { pub static mut is_loaded: bool = false; }
pub mod MatrixIndexuivARB { pub static mut is_loaded: bool = false; }
pub mod MatrixIndexusvARB { pub static mut is_loaded: bool = false; }
pub mod MatrixLoadIdentityEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixLoadTransposedEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixLoadTransposefEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixLoaddEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixLoadfEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixMode { pub static mut is_loaded: bool = false; }
pub mod MatrixMultTransposedEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixMultTransposefEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixMultdEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixMultfEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixOrthoEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixPopEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixPushEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixRotatedEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixRotatefEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixScaledEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixScalefEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixTranslatedEXT { pub static mut is_loaded: bool = false; }
pub mod MatrixTranslatefEXT { pub static mut is_loaded: bool = false; }
pub mod MemoryBarrier { pub static mut is_loaded: bool = false; }
pub mod MemoryBarrierEXT { pub static mut is_loaded: bool = false; }
pub mod MinSampleShading { pub static mut is_loaded: bool = false; }
pub mod MinSampleShadingARB { pub static mut is_loaded: bool = false; }
pub mod Minmax { pub static mut is_loaded: bool = false; }
pub mod MinmaxEXT { pub static mut is_loaded: bool = false; }
pub mod MultMatrixd { pub static mut is_loaded: bool = false; }
pub mod MultMatrixf { pub static mut is_loaded: bool = false; }
pub mod MultMatrixx { pub static mut is_loaded: bool = false; }
pub mod MultMatrixxOES { pub static mut is_loaded: bool = false; }
pub mod MultTransposeMatrixd { pub static mut is_loaded: bool = false; }
pub mod MultTransposeMatrixdARB { pub static mut is_loaded: bool = false; }
pub mod MultTransposeMatrixf { pub static mut is_loaded: bool = false; }
pub mod MultTransposeMatrixfARB { pub static mut is_loaded: bool = false; }
pub mod MultTransposeMatrixxOES { pub static mut is_loaded: bool = false; }
pub mod MultiDrawArrays { pub static mut is_loaded: bool = false; }
pub mod MultiDrawArraysEXT { pub static mut is_loaded: bool = false; }
pub mod MultiDrawArraysIndirect { pub static mut is_loaded: bool = false; }
pub mod MultiDrawArraysIndirectAMD { pub static mut is_loaded: bool = false; }
pub mod MultiDrawArraysIndirectBindlessNV { pub static mut is_loaded: bool = false; }
pub mod MultiDrawElementsIndirectBindlessNV { pub static mut is_loaded: bool = false; }
pub mod MultiDrawArraysIndirectCountARB { pub static mut is_loaded: bool = false; }
pub mod MultiDrawElementArrayAPPLE { pub static mut is_loaded: bool = false; }
pub mod MultiDrawElements { pub static mut is_loaded: bool = false; }
pub mod MultiDrawElementsBaseVertex { pub static mut is_loaded: bool = false; }
pub mod MultiDrawElementsEXT { pub static mut is_loaded: bool = false; }
pub mod MultiDrawElementsIndirect { pub static mut is_loaded: bool = false; }
pub mod MultiDrawElementsIndirectAMD { pub static mut is_loaded: bool = false; }
pub mod MultiDrawElementsIndirectCountARB { pub static mut is_loaded: bool = false; }
pub mod MultiDrawRangeElementArrayAPPLE { pub static mut is_loaded: bool = false; }
pub mod MultiModeDrawArraysIBM { pub static mut is_loaded: bool = false; }
pub mod MultiModeDrawElementsIBM { pub static mut is_loaded: bool = false; }
pub mod MultiTexBufferEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1bOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1bvOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1d { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1dARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1dv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1dvARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1f { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1fARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1fv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1fvARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1hNV { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1hvNV { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1i { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1iARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1iv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1ivARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1s { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1sARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1sv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1svARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1xOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord1xvOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2bOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2bvOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2d { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2dARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2dv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2dvARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2f { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2fARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2fv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2fvARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2hNV { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2hvNV { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2i { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2iARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2iv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2ivARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2s { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2sARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2sv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2svARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2xOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord2xvOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3bOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3bvOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3d { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3dARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3dv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3dvARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3f { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3fARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3fv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3fvARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3hNV { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3hvNV { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3i { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3iARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3iv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3ivARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3s { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3sARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3sv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3svARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3xOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord3xvOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4bOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4bvOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4d { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4dARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4dv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4dvARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4f { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4fARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4fv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4fvARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4hNV { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4hvNV { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4i { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4iARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4iv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4ivARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4s { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4sARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4sv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4svARB { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4x { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4xOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoord4xvOES { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordP1ui { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordP1uiv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordP2ui { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordP2uiv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordP3ui { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordP3uiv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordP4ui { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordP4uiv { pub static mut is_loaded: bool = false; }
pub mod MultiTexCoordPointerEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexEnvfEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexEnvfvEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexEnviEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexEnvivEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexGendEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexGendvEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexGenfEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexGenfvEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexGeniEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexGenivEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexParameterIivEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexParameterIuivEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexParameterfEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexParameteriEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexRenderbufferEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexSubImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexSubImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod MultiTexSubImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod NamedBufferDataEXT { pub static mut is_loaded: bool = false; }
pub mod NamedBufferStorageEXT { pub static mut is_loaded: bool = false; }
pub mod NamedBufferSubDataEXT { pub static mut is_loaded: bool = false; }
pub mod NamedCopyBufferSubDataEXT { pub static mut is_loaded: bool = false; }
pub mod NamedFramebufferParameteriEXT { pub static mut is_loaded: bool = false; }
pub mod NamedFramebufferRenderbufferEXT { pub static mut is_loaded: bool = false; }
pub mod NamedFramebufferTexture1DEXT { pub static mut is_loaded: bool = false; }
pub mod NamedFramebufferTexture2DEXT { pub static mut is_loaded: bool = false; }
pub mod NamedFramebufferTexture3DEXT { pub static mut is_loaded: bool = false; }
pub mod NamedFramebufferTextureEXT { pub static mut is_loaded: bool = false; }
pub mod NamedFramebufferTextureFaceEXT { pub static mut is_loaded: bool = false; }
pub mod NamedFramebufferTextureLayerEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameter4dEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameter4dvEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameter4fEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameter4fvEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameterI4iEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameterI4ivEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameterI4uiEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameterI4uivEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParameters4fvEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParametersI4ivEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramLocalParametersI4uivEXT { pub static mut is_loaded: bool = false; }
pub mod NamedProgramStringEXT { pub static mut is_loaded: bool = false; }
pub mod NamedRenderbufferStorageEXT { pub static mut is_loaded: bool = false; }
pub mod NamedRenderbufferStorageMultisampleCoverageEXT { pub static mut is_loaded: bool = false; }
pub mod NamedRenderbufferStorageMultisampleEXT { pub static mut is_loaded: bool = false; }
pub mod NamedStringARB { pub static mut is_loaded: bool = false; }
pub mod NewList { pub static mut is_loaded: bool = false; }
pub mod NewObjectBufferATI { pub static mut is_loaded: bool = false; }
pub mod Normal3b { pub static mut is_loaded: bool = false; }
pub mod Normal3bv { pub static mut is_loaded: bool = false; }
pub mod Normal3d { pub static mut is_loaded: bool = false; }
pub mod Normal3dv { pub static mut is_loaded: bool = false; }
pub mod Normal3f { pub static mut is_loaded: bool = false; }
pub mod Normal3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod Normal3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod Normal3fv { pub static mut is_loaded: bool = false; }
pub mod Normal3hNV { pub static mut is_loaded: bool = false; }
pub mod Normal3hvNV { pub static mut is_loaded: bool = false; }
pub mod Normal3i { pub static mut is_loaded: bool = false; }
pub mod Normal3iv { pub static mut is_loaded: bool = false; }
pub mod Normal3s { pub static mut is_loaded: bool = false; }
pub mod Normal3sv { pub static mut is_loaded: bool = false; }
pub mod Normal3x { pub static mut is_loaded: bool = false; }
pub mod Normal3xOES { pub static mut is_loaded: bool = false; }
pub mod Normal3xvOES { pub static mut is_loaded: bool = false; }
pub mod NormalFormatNV { pub static mut is_loaded: bool = false; }
pub mod NormalP3ui { pub static mut is_loaded: bool = false; }
pub mod NormalP3uiv { pub static mut is_loaded: bool = false; }
pub mod NormalPointer { pub static mut is_loaded: bool = false; }
pub mod NormalPointerEXT { pub static mut is_loaded: bool = false; }
pub mod NormalPointerListIBM { pub static mut is_loaded: bool = false; }
pub mod NormalPointervINTEL { pub static mut is_loaded: bool = false; }
pub mod NormalStream3bATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3bvATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3dATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3dvATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3fATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3fvATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3iATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3ivATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3sATI { pub static mut is_loaded: bool = false; }
pub mod NormalStream3svATI { pub static mut is_loaded: bool = false; }
pub mod ObjectLabel { pub static mut is_loaded: bool = false; }
pub mod ObjectLabelKHR { pub static mut is_loaded: bool = false; }
pub mod ObjectPtrLabel { pub static mut is_loaded: bool = false; }
pub mod ObjectPtrLabelKHR { pub static mut is_loaded: bool = false; }
pub mod ObjectPurgeableAPPLE { pub static mut is_loaded: bool = false; }
pub mod ObjectUnpurgeableAPPLE { pub static mut is_loaded: bool = false; }
pub mod Ortho { pub static mut is_loaded: bool = false; }
pub mod Orthof { pub static mut is_loaded: bool = false; }
pub mod OrthofOES { pub static mut is_loaded: bool = false; }
pub mod Orthox { pub static mut is_loaded: bool = false; }
pub mod OrthoxOES { pub static mut is_loaded: bool = false; }
pub mod PNTrianglesfATI { pub static mut is_loaded: bool = false; }
pub mod PNTrianglesiATI { pub static mut is_loaded: bool = false; }
pub mod PassTexCoordATI { pub static mut is_loaded: bool = false; }
pub mod PassThrough { pub static mut is_loaded: bool = false; }
pub mod PassThroughxOES { pub static mut is_loaded: bool = false; }
pub mod PatchParameterfv { pub static mut is_loaded: bool = false; }
pub mod PatchParameteri { pub static mut is_loaded: bool = false; }
pub mod PathColorGenNV { pub static mut is_loaded: bool = false; }
pub mod PathCommandsNV { pub static mut is_loaded: bool = false; }
pub mod PathCoordsNV { pub static mut is_loaded: bool = false; }
pub mod PathCoverDepthFuncNV { pub static mut is_loaded: bool = false; }
pub mod PathDashArrayNV { pub static mut is_loaded: bool = false; }
pub mod PathFogGenNV { pub static mut is_loaded: bool = false; }
pub mod PathGlyphRangeNV { pub static mut is_loaded: bool = false; }
pub mod PathGlyphsNV { pub static mut is_loaded: bool = false; }
pub mod PathParameterfNV { pub static mut is_loaded: bool = false; }
pub mod PathParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod PathParameteriNV { pub static mut is_loaded: bool = false; }
pub mod PathParameterivNV { pub static mut is_loaded: bool = false; }
pub mod PathStencilDepthOffsetNV { pub static mut is_loaded: bool = false; }
pub mod PathStencilFuncNV { pub static mut is_loaded: bool = false; }
pub mod PathStringNV { pub static mut is_loaded: bool = false; }
pub mod PathSubCommandsNV { pub static mut is_loaded: bool = false; }
pub mod PathSubCoordsNV { pub static mut is_loaded: bool = false; }
pub mod PathTexGenNV { pub static mut is_loaded: bool = false; }
pub mod PauseTransformFeedback { pub static mut is_loaded: bool = false; }
pub mod PauseTransformFeedbackNV { pub static mut is_loaded: bool = false; }
pub mod PixelDataRangeNV { pub static mut is_loaded: bool = false; }
pub mod PixelMapfv { pub static mut is_loaded: bool = false; }
pub mod PixelMapuiv { pub static mut is_loaded: bool = false; }
pub mod PixelMapusv { pub static mut is_loaded: bool = false; }
pub mod PixelMapx { pub static mut is_loaded: bool = false; }
pub mod PixelStoref { pub static mut is_loaded: bool = false; }
pub mod PixelStorei { pub static mut is_loaded: bool = false; }
pub mod PixelStorex { pub static mut is_loaded: bool = false; }
pub mod PixelTexGenParameterfSGIS { pub static mut is_loaded: bool = false; }
pub mod PixelTexGenParameterfvSGIS { pub static mut is_loaded: bool = false; }
pub mod PixelTexGenParameteriSGIS { pub static mut is_loaded: bool = false; }
pub mod PixelTexGenParameterivSGIS { pub static mut is_loaded: bool = false; }
pub mod PixelTexGenSGIX { pub static mut is_loaded: bool = false; }
pub mod PixelTransferf { pub static mut is_loaded: bool = false; }
pub mod PixelTransferi { pub static mut is_loaded: bool = false; }
pub mod PixelTransferxOES { pub static mut is_loaded: bool = false; }
pub mod PixelTransformParameterfEXT { pub static mut is_loaded: bool = false; }
pub mod PixelTransformParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod PixelTransformParameteriEXT { pub static mut is_loaded: bool = false; }
pub mod PixelTransformParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod PixelZoom { pub static mut is_loaded: bool = false; }
pub mod PixelZoomxOES { pub static mut is_loaded: bool = false; }
pub mod PointAlongPathNV { pub static mut is_loaded: bool = false; }
pub mod PointParameterf { pub static mut is_loaded: bool = false; }
pub mod PointParameterfARB { pub static mut is_loaded: bool = false; }
pub mod PointParameterfEXT { pub static mut is_loaded: bool = false; }
pub mod PointParameterfSGIS { pub static mut is_loaded: bool = false; }
pub mod PointParameterfv { pub static mut is_loaded: bool = false; }
pub mod PointParameterfvARB { pub static mut is_loaded: bool = false; }
pub mod PointParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod PointParameterfvSGIS { pub static mut is_loaded: bool = false; }
pub mod PointParameteri { pub static mut is_loaded: bool = false; }
pub mod PointParameteriNV { pub static mut is_loaded: bool = false; }
pub mod PointParameteriv { pub static mut is_loaded: bool = false; }
pub mod PointParameterivNV { pub static mut is_loaded: bool = false; }
pub mod PointParameterx { pub static mut is_loaded: bool = false; }
pub mod PointParameterxOES { pub static mut is_loaded: bool = false; }
pub mod PointParameterxv { pub static mut is_loaded: bool = false; }
pub mod PointParameterxvOES { pub static mut is_loaded: bool = false; }
pub mod PointSize { pub static mut is_loaded: bool = false; }
pub mod PointSizePointerOES { pub static mut is_loaded: bool = false; }
pub mod PointSizex { pub static mut is_loaded: bool = false; }
pub mod PointSizexOES { pub static mut is_loaded: bool = false; }
pub mod PollAsyncSGIX { pub static mut is_loaded: bool = false; }
pub mod PollInstrumentsSGIX { pub static mut is_loaded: bool = false; }
pub mod PolygonMode { pub static mut is_loaded: bool = false; }
pub mod PolygonOffset { pub static mut is_loaded: bool = false; }
pub mod PolygonOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod PolygonOffsetx { pub static mut is_loaded: bool = false; }
pub mod PolygonOffsetxOES { pub static mut is_loaded: bool = false; }
pub mod PolygonStipple { pub static mut is_loaded: bool = false; }
pub mod PopAttrib { pub static mut is_loaded: bool = false; }
pub mod PopClientAttrib { pub static mut is_loaded: bool = false; }
pub mod PopDebugGroup { pub static mut is_loaded: bool = false; }
pub mod PopDebugGroupKHR { pub static mut is_loaded: bool = false; }
pub mod PopGroupMarkerEXT { pub static mut is_loaded: bool = false; }
pub mod PopMatrix { pub static mut is_loaded: bool = false; }
pub mod PopName { pub static mut is_loaded: bool = false; }
pub mod PresentFrameDualFillNV { pub static mut is_loaded: bool = false; }
pub mod PresentFrameKeyedNV { pub static mut is_loaded: bool = false; }
pub mod PrimitiveRestartIndex { pub static mut is_loaded: bool = false; }
pub mod PrimitiveRestartIndexNV { pub static mut is_loaded: bool = false; }
pub mod PrimitiveRestartNV { pub static mut is_loaded: bool = false; }
pub mod PrioritizeTextures { pub static mut is_loaded: bool = false; }
pub mod PrioritizeTexturesEXT { pub static mut is_loaded: bool = false; }
pub mod PrioritizeTexturesxOES { pub static mut is_loaded: bool = false; }
pub mod ProgramBinary { pub static mut is_loaded: bool = false; }
pub mod ProgramBinaryOES { pub static mut is_loaded: bool = false; }
pub mod ProgramBufferParametersIivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramBufferParametersIuivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramBufferParametersfvNV { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameter4dARB { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameter4dvARB { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameter4fARB { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameter4fvARB { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameterI4iNV { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameterI4ivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameterI4uiNV { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameterI4uivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParameters4fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParametersI4ivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramEnvParametersI4uivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameter4dARB { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameter4dvARB { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameter4fARB { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameter4fvARB { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameterI4iNV { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameterI4ivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameterI4uiNV { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameterI4uivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParameters4fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParametersI4ivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramLocalParametersI4uivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramNamedParameter4dNV { pub static mut is_loaded: bool = false; }
pub mod ProgramNamedParameter4dvNV { pub static mut is_loaded: bool = false; }
pub mod ProgramNamedParameter4fNV { pub static mut is_loaded: bool = false; }
pub mod ProgramNamedParameter4fvNV { pub static mut is_loaded: bool = false; }
pub mod ProgramParameter4dNV { pub static mut is_loaded: bool = false; }
pub mod ProgramParameter4dvNV { pub static mut is_loaded: bool = false; }
pub mod ProgramParameter4fNV { pub static mut is_loaded: bool = false; }
pub mod ProgramParameter4fvNV { pub static mut is_loaded: bool = false; }
pub mod ProgramParameteri { pub static mut is_loaded: bool = false; }
pub mod ProgramParameteriARB { pub static mut is_loaded: bool = false; }
pub mod ProgramParameteriEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramParameters4dvNV { pub static mut is_loaded: bool = false; }
pub mod ProgramParameters4fvNV { pub static mut is_loaded: bool = false; }
pub mod ProgramStringARB { pub static mut is_loaded: bool = false; }
pub mod ProgramSubroutineParametersuivNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1d { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1dEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1f { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1fEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1i { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1i64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1i64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1iEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1iv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1ivEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1ui { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1ui64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1ui64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1uiEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1uiv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform1uivEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2d { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2dEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2f { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2fEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2i { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2i64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2i64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2iEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2iv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2ivEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2ui { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2ui64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2ui64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2uiEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2uiv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform2uivEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3d { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3dEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3f { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3fEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3i { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3i64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3i64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3iEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3iv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3ivEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3ui { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3ui64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3ui64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3uiEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3uiv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform3uivEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4d { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4dEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4f { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4fEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4i { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4i64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4i64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4iEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4iv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4ivEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4ui { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4ui64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4ui64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4uiEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4uiv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniform4uivEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformHandleui64ARB { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformHandleui64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformHandleui64vARB { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformHandleui64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2x3dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2x3dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2x3fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2x3fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2x4dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2x4dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2x4fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix2x4fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3x2dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3x2dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3x2fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3x2fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3x4dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3x4dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3x4fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix3x4fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4x2dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4x2dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4x2fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4x2fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4x3dv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4x3dvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4x3fv { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformMatrix4x3fvEXT { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformui64NV { pub static mut is_loaded: bool = false; }
pub mod ProgramUniformui64vNV { pub static mut is_loaded: bool = false; }
pub mod ProgramVertexLimitNV { pub static mut is_loaded: bool = false; }
pub mod ProvokingVertex { pub static mut is_loaded: bool = false; }
pub mod ProvokingVertexEXT { pub static mut is_loaded: bool = false; }
pub mod PushAttrib { pub static mut is_loaded: bool = false; }
pub mod PushClientAttrib { pub static mut is_loaded: bool = false; }
pub mod PushClientAttribDefaultEXT { pub static mut is_loaded: bool = false; }
pub mod PushDebugGroup { pub static mut is_loaded: bool = false; }
pub mod PushDebugGroupKHR { pub static mut is_loaded: bool = false; }
pub mod PushGroupMarkerEXT { pub static mut is_loaded: bool = false; }
pub mod PushMatrix { pub static mut is_loaded: bool = false; }
pub mod PushName { pub static mut is_loaded: bool = false; }
pub mod QueryCounter { pub static mut is_loaded: bool = false; }
pub mod QueryCounterEXT { pub static mut is_loaded: bool = false; }
pub mod QueryMatrixxOES { pub static mut is_loaded: bool = false; }
pub mod RasterPos2d { pub static mut is_loaded: bool = false; }
pub mod RasterPos2dv { pub static mut is_loaded: bool = false; }
pub mod RasterPos2f { pub static mut is_loaded: bool = false; }
pub mod RasterPos2fv { pub static mut is_loaded: bool = false; }
pub mod RasterPos2i { pub static mut is_loaded: bool = false; }
pub mod RasterPos2iv { pub static mut is_loaded: bool = false; }
pub mod RasterPos2s { pub static mut is_loaded: bool = false; }
pub mod RasterPos2sv { pub static mut is_loaded: bool = false; }
pub mod RasterPos2xOES { pub static mut is_loaded: bool = false; }
pub mod RasterPos2xvOES { pub static mut is_loaded: bool = false; }
pub mod RasterPos3d { pub static mut is_loaded: bool = false; }
pub mod RasterPos3dv { pub static mut is_loaded: bool = false; }
pub mod RasterPos3f { pub static mut is_loaded: bool = false; }
pub mod RasterPos3fv { pub static mut is_loaded: bool = false; }
pub mod RasterPos3i { pub static mut is_loaded: bool = false; }
pub mod RasterPos3iv { pub static mut is_loaded: bool = false; }
pub mod RasterPos3s { pub static mut is_loaded: bool = false; }
pub mod RasterPos3sv { pub static mut is_loaded: bool = false; }
pub mod RasterPos3xOES { pub static mut is_loaded: bool = false; }
pub mod RasterPos3xvOES { pub static mut is_loaded: bool = false; }
pub mod RasterPos4d { pub static mut is_loaded: bool = false; }
pub mod RasterPos4dv { pub static mut is_loaded: bool = false; }
pub mod RasterPos4f { pub static mut is_loaded: bool = false; }
pub mod RasterPos4fv { pub static mut is_loaded: bool = false; }
pub mod RasterPos4i { pub static mut is_loaded: bool = false; }
pub mod RasterPos4iv { pub static mut is_loaded: bool = false; }
pub mod RasterPos4s { pub static mut is_loaded: bool = false; }
pub mod RasterPos4sv { pub static mut is_loaded: bool = false; }
pub mod RasterPos4xOES { pub static mut is_loaded: bool = false; }
pub mod RasterPos4xvOES { pub static mut is_loaded: bool = false; }
pub mod ReadBuffer { pub static mut is_loaded: bool = false; }
pub mod ReadBufferIndexedEXT { pub static mut is_loaded: bool = false; }
pub mod ReadBufferNV { pub static mut is_loaded: bool = false; }
pub mod ReadInstrumentsSGIX { pub static mut is_loaded: bool = false; }
pub mod ReadPixels { pub static mut is_loaded: bool = false; }
pub mod ReadnPixelsARB { pub static mut is_loaded: bool = false; }
pub mod ReadnPixelsEXT { pub static mut is_loaded: bool = false; }
pub mod Rectd { pub static mut is_loaded: bool = false; }
pub mod Rectdv { pub static mut is_loaded: bool = false; }
pub mod Rectf { pub static mut is_loaded: bool = false; }
pub mod Rectfv { pub static mut is_loaded: bool = false; }
pub mod Recti { pub static mut is_loaded: bool = false; }
pub mod Rectiv { pub static mut is_loaded: bool = false; }
pub mod Rects { pub static mut is_loaded: bool = false; }
pub mod Rectsv { pub static mut is_loaded: bool = false; }
pub mod RectxOES { pub static mut is_loaded: bool = false; }
pub mod RectxvOES { pub static mut is_loaded: bool = false; }
pub mod ReferencePlaneSGIX { pub static mut is_loaded: bool = false; }
pub mod ReleaseShaderCompiler { pub static mut is_loaded: bool = false; }
pub mod RenderMode { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorage { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageEXT { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageMultisample { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageMultisampleANGLE { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageMultisampleAPPLE { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageMultisampleCoverageNV { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageMultisampleEXT { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageMultisampleIMG { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageMultisampleNV { pub static mut is_loaded: bool = false; }
pub mod RenderbufferStorageOES { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodePointerSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeubSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeubvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiColor3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiColor3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiColor4fNormal3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiColor4fNormal3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiColor4ubVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiColor4ubVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiNormal3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiNormal3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiTexCoord2fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiTexCoord2fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuiVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeuivSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeusSUN { pub static mut is_loaded: bool = false; }
pub mod ReplacementCodeusvSUN { pub static mut is_loaded: bool = false; }
pub mod RequestResidentProgramsNV { pub static mut is_loaded: bool = false; }
pub mod ResetHistogram { pub static mut is_loaded: bool = false; }
pub mod ResetHistogramEXT { pub static mut is_loaded: bool = false; }
pub mod ResetMinmax { pub static mut is_loaded: bool = false; }
pub mod ResetMinmaxEXT { pub static mut is_loaded: bool = false; }
pub mod ResizeBuffersMESA { pub static mut is_loaded: bool = false; }
pub mod ResolveMultisampleFramebufferAPPLE { pub static mut is_loaded: bool = false; }
pub mod ResumeTransformFeedback { pub static mut is_loaded: bool = false; }
pub mod ResumeTransformFeedbackNV { pub static mut is_loaded: bool = false; }
pub mod Rotated { pub static mut is_loaded: bool = false; }
pub mod Rotatef { pub static mut is_loaded: bool = false; }
pub mod Rotatex { pub static mut is_loaded: bool = false; }
pub mod RotatexOES { pub static mut is_loaded: bool = false; }
pub mod SampleCoverage { pub static mut is_loaded: bool = false; }
pub mod SampleCoverageARB { pub static mut is_loaded: bool = false; }
pub mod SampleCoverageOES { pub static mut is_loaded: bool = false; }
pub mod SampleCoveragex { pub static mut is_loaded: bool = false; }
pub mod SampleCoveragexOES { pub static mut is_loaded: bool = false; }
pub mod SampleMapATI { pub static mut is_loaded: bool = false; }
pub mod SampleMaskEXT { pub static mut is_loaded: bool = false; }
pub mod SampleMaskIndexedNV { pub static mut is_loaded: bool = false; }
pub mod SampleMaskSGIS { pub static mut is_loaded: bool = false; }
pub mod SampleMaski { pub static mut is_loaded: bool = false; }
pub mod SamplePatternEXT { pub static mut is_loaded: bool = false; }
pub mod SamplePatternSGIS { pub static mut is_loaded: bool = false; }
pub mod SamplerParameterIiv { pub static mut is_loaded: bool = false; }
pub mod SamplerParameterIuiv { pub static mut is_loaded: bool = false; }
pub mod SamplerParameterf { pub static mut is_loaded: bool = false; }
pub mod SamplerParameterfv { pub static mut is_loaded: bool = false; }
pub mod SamplerParameteri { pub static mut is_loaded: bool = false; }
pub mod SamplerParameteriv { pub static mut is_loaded: bool = false; }
pub mod Scaled { pub static mut is_loaded: bool = false; }
pub mod Scalef { pub static mut is_loaded: bool = false; }
pub mod Scalex { pub static mut is_loaded: bool = false; }
pub mod ScalexOES { pub static mut is_loaded: bool = false; }
pub mod Scissor { pub static mut is_loaded: bool = false; }
pub mod ScissorArrayv { pub static mut is_loaded: bool = false; }
pub mod ScissorIndexed { pub static mut is_loaded: bool = false; }
pub mod ScissorIndexedv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3b { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3bEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3bv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3bvEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3d { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3dEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3dv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3dvEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3f { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3fEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3fv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3fvEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3hNV { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3hvNV { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3i { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3iEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3iv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3ivEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3s { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3sEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3sv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3svEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3ub { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3ubEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3ubv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3ubvEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3ui { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3uiEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3uiv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3uivEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3us { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3usEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3usv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColor3usvEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColorFormatNV { pub static mut is_loaded: bool = false; }
pub mod SecondaryColorP3ui { pub static mut is_loaded: bool = false; }
pub mod SecondaryColorP3uiv { pub static mut is_loaded: bool = false; }
pub mod SecondaryColorPointer { pub static mut is_loaded: bool = false; }
pub mod SecondaryColorPointerEXT { pub static mut is_loaded: bool = false; }
pub mod SecondaryColorPointerListIBM { pub static mut is_loaded: bool = false; }
pub mod SelectBuffer { pub static mut is_loaded: bool = false; }
pub mod SelectPerfMonitorCountersAMD { pub static mut is_loaded: bool = false; }
pub mod SeparableFilter2D { pub static mut is_loaded: bool = false; }
pub mod SeparableFilter2DEXT { pub static mut is_loaded: bool = false; }
pub mod SetFenceAPPLE { pub static mut is_loaded: bool = false; }
pub mod SetFenceNV { pub static mut is_loaded: bool = false; }
pub mod SetFragmentShaderConstantATI { pub static mut is_loaded: bool = false; }
pub mod SetInvariantEXT { pub static mut is_loaded: bool = false; }
pub mod SetLocalConstantEXT { pub static mut is_loaded: bool = false; }
pub mod SetMultisamplefvAMD { pub static mut is_loaded: bool = false; }
pub mod ShadeModel { pub static mut is_loaded: bool = false; }
pub mod ShaderBinary { pub static mut is_loaded: bool = false; }
pub mod ShaderOp1EXT { pub static mut is_loaded: bool = false; }
pub mod ShaderOp2EXT { pub static mut is_loaded: bool = false; }
pub mod ShaderOp3EXT { pub static mut is_loaded: bool = false; }
pub mod ShaderSource { pub static mut is_loaded: bool = false; }
pub mod ShaderSourceARB { pub static mut is_loaded: bool = false; }
pub mod ShaderStorageBlockBinding { pub static mut is_loaded: bool = false; }
pub mod SharpenTexFuncSGIS { pub static mut is_loaded: bool = false; }
pub mod SpriteParameterfSGIX { pub static mut is_loaded: bool = false; }
pub mod SpriteParameterfvSGIX { pub static mut is_loaded: bool = false; }
pub mod SpriteParameteriSGIX { pub static mut is_loaded: bool = false; }
pub mod SpriteParameterivSGIX { pub static mut is_loaded: bool = false; }
pub mod StartInstrumentsSGIX { pub static mut is_loaded: bool = false; }
pub mod StartTilingQCOM { pub static mut is_loaded: bool = false; }
pub mod StencilClearTagEXT { pub static mut is_loaded: bool = false; }
pub mod StencilFillPathInstancedNV { pub static mut is_loaded: bool = false; }
pub mod StencilFillPathNV { pub static mut is_loaded: bool = false; }
pub mod StencilFunc { pub static mut is_loaded: bool = false; }
pub mod StencilFuncSeparate { pub static mut is_loaded: bool = false; }
pub mod StencilFuncSeparateATI { pub static mut is_loaded: bool = false; }
pub mod StencilMask { pub static mut is_loaded: bool = false; }
pub mod StencilMaskSeparate { pub static mut is_loaded: bool = false; }
pub mod StencilOp { pub static mut is_loaded: bool = false; }
pub mod StencilOpSeparate { pub static mut is_loaded: bool = false; }
pub mod StencilOpSeparateATI { pub static mut is_loaded: bool = false; }
pub mod StencilOpValueAMD { pub static mut is_loaded: bool = false; }
pub mod StencilStrokePathInstancedNV { pub static mut is_loaded: bool = false; }
pub mod StencilStrokePathNV { pub static mut is_loaded: bool = false; }
pub mod StopInstrumentsSGIX { pub static mut is_loaded: bool = false; }
pub mod StringMarkerGREMEDY { pub static mut is_loaded: bool = false; }
pub mod SwizzleEXT { pub static mut is_loaded: bool = false; }
pub mod SyncTextureINTEL { pub static mut is_loaded: bool = false; }
pub mod TagSampleBufferSGIX { pub static mut is_loaded: bool = false; }
pub mod Tangent3bEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3bvEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3dEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3dvEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3fEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3fvEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3iEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3ivEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3sEXT { pub static mut is_loaded: bool = false; }
pub mod Tangent3svEXT { pub static mut is_loaded: bool = false; }
pub mod TangentPointerEXT { pub static mut is_loaded: bool = false; }
pub mod TbufferMask3DFX { pub static mut is_loaded: bool = false; }
pub mod TessellationFactorAMD { pub static mut is_loaded: bool = false; }
pub mod TessellationModeAMD { pub static mut is_loaded: bool = false; }
pub mod TestFenceAPPLE { pub static mut is_loaded: bool = false; }
pub mod TestFenceNV { pub static mut is_loaded: bool = false; }
pub mod TestObjectAPPLE { pub static mut is_loaded: bool = false; }
pub mod TexBuffer { pub static mut is_loaded: bool = false; }
pub mod TexBufferARB { pub static mut is_loaded: bool = false; }
pub mod TexBufferEXT { pub static mut is_loaded: bool = false; }
pub mod TexBufferRange { pub static mut is_loaded: bool = false; }
pub mod TexBumpParameterfvATI { pub static mut is_loaded: bool = false; }
pub mod TexBumpParameterivATI { pub static mut is_loaded: bool = false; }
pub mod TexCoord1bOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord1bvOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord1d { pub static mut is_loaded: bool = false; }
pub mod TexCoord1dv { pub static mut is_loaded: bool = false; }
pub mod TexCoord1f { pub static mut is_loaded: bool = false; }
pub mod TexCoord1fv { pub static mut is_loaded: bool = false; }
pub mod TexCoord1hNV { pub static mut is_loaded: bool = false; }
pub mod TexCoord1hvNV { pub static mut is_loaded: bool = false; }
pub mod TexCoord1i { pub static mut is_loaded: bool = false; }
pub mod TexCoord1iv { pub static mut is_loaded: bool = false; }
pub mod TexCoord1s { pub static mut is_loaded: bool = false; }
pub mod TexCoord1sv { pub static mut is_loaded: bool = false; }
pub mod TexCoord1xOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord1xvOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord2bOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord2bvOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord2d { pub static mut is_loaded: bool = false; }
pub mod TexCoord2dv { pub static mut is_loaded: bool = false; }
pub mod TexCoord2f { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fColor3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fColor3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fColor4fNormal3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fColor4fNormal3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fColor4ubVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fColor4ubVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fNormal3fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fNormal3fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fVertex3fSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fVertex3fvSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord2fv { pub static mut is_loaded: bool = false; }
pub mod TexCoord2hNV { pub static mut is_loaded: bool = false; }
pub mod TexCoord2hvNV { pub static mut is_loaded: bool = false; }
pub mod TexCoord2i { pub static mut is_loaded: bool = false; }
pub mod TexCoord2iv { pub static mut is_loaded: bool = false; }
pub mod TexCoord2s { pub static mut is_loaded: bool = false; }
pub mod TexCoord2sv { pub static mut is_loaded: bool = false; }
pub mod TexCoord2xOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord2xvOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord3bOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord3bvOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord3d { pub static mut is_loaded: bool = false; }
pub mod TexCoord3dv { pub static mut is_loaded: bool = false; }
pub mod TexCoord3f { pub static mut is_loaded: bool = false; }
pub mod TexCoord3fv { pub static mut is_loaded: bool = false; }
pub mod TexCoord3hNV { pub static mut is_loaded: bool = false; }
pub mod TexCoord3hvNV { pub static mut is_loaded: bool = false; }
pub mod TexCoord3i { pub static mut is_loaded: bool = false; }
pub mod TexCoord3iv { pub static mut is_loaded: bool = false; }
pub mod TexCoord3s { pub static mut is_loaded: bool = false; }
pub mod TexCoord3sv { pub static mut is_loaded: bool = false; }
pub mod TexCoord3xOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord3xvOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord4bOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord4bvOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord4d { pub static mut is_loaded: bool = false; }
pub mod TexCoord4dv { pub static mut is_loaded: bool = false; }
pub mod TexCoord4f { pub static mut is_loaded: bool = false; }
pub mod TexCoord4fColor4fNormal3fVertex4fSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord4fColor4fNormal3fVertex4fvSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord4fVertex4fSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord4fVertex4fvSUN { pub static mut is_loaded: bool = false; }
pub mod TexCoord4fv { pub static mut is_loaded: bool = false; }
pub mod TexCoord4hNV { pub static mut is_loaded: bool = false; }
pub mod TexCoord4hvNV { pub static mut is_loaded: bool = false; }
pub mod TexCoord4i { pub static mut is_loaded: bool = false; }
pub mod TexCoord4iv { pub static mut is_loaded: bool = false; }
pub mod TexCoord4s { pub static mut is_loaded: bool = false; }
pub mod TexCoord4sv { pub static mut is_loaded: bool = false; }
pub mod TexCoord4xOES { pub static mut is_loaded: bool = false; }
pub mod TexCoord4xvOES { pub static mut is_loaded: bool = false; }
pub mod TexCoordFormatNV { pub static mut is_loaded: bool = false; }
pub mod TexCoordP1ui { pub static mut is_loaded: bool = false; }
pub mod TexCoordP1uiv { pub static mut is_loaded: bool = false; }
pub mod TexCoordP2ui { pub static mut is_loaded: bool = false; }
pub mod TexCoordP2uiv { pub static mut is_loaded: bool = false; }
pub mod TexCoordP3ui { pub static mut is_loaded: bool = false; }
pub mod TexCoordP3uiv { pub static mut is_loaded: bool = false; }
pub mod TexCoordP4ui { pub static mut is_loaded: bool = false; }
pub mod TexCoordP4uiv { pub static mut is_loaded: bool = false; }
pub mod TexCoordPointer { pub static mut is_loaded: bool = false; }
pub mod TexCoordPointerEXT { pub static mut is_loaded: bool = false; }
pub mod TexCoordPointerListIBM { pub static mut is_loaded: bool = false; }
pub mod TexCoordPointervINTEL { pub static mut is_loaded: bool = false; }
pub mod TexEnvf { pub static mut is_loaded: bool = false; }
pub mod TexEnvfv { pub static mut is_loaded: bool = false; }
pub mod TexEnvi { pub static mut is_loaded: bool = false; }
pub mod TexEnviv { pub static mut is_loaded: bool = false; }
pub mod TexEnvx { pub static mut is_loaded: bool = false; }
pub mod TexEnvxOES { pub static mut is_loaded: bool = false; }
pub mod TexEnvxv { pub static mut is_loaded: bool = false; }
pub mod TexEnvxvOES { pub static mut is_loaded: bool = false; }
pub mod TexFilterFuncSGIS { pub static mut is_loaded: bool = false; }
pub mod TexGend { pub static mut is_loaded: bool = false; }
pub mod TexGendv { pub static mut is_loaded: bool = false; }
pub mod TexGenf { pub static mut is_loaded: bool = false; }
pub mod TexGenfOES { pub static mut is_loaded: bool = false; }
pub mod TexGenfv { pub static mut is_loaded: bool = false; }
pub mod TexGenfvOES { pub static mut is_loaded: bool = false; }
pub mod TexGeni { pub static mut is_loaded: bool = false; }
pub mod TexGeniOES { pub static mut is_loaded: bool = false; }
pub mod TexGeniv { pub static mut is_loaded: bool = false; }
pub mod TexGenivOES { pub static mut is_loaded: bool = false; }
pub mod TexGenxOES { pub static mut is_loaded: bool = false; }
pub mod TexGenxvOES { pub static mut is_loaded: bool = false; }
pub mod TexImage1D { pub static mut is_loaded: bool = false; }
pub mod TexImage2D { pub static mut is_loaded: bool = false; }
pub mod TexImage2DMultisample { pub static mut is_loaded: bool = false; }
pub mod TexImage2DMultisampleCoverageNV { pub static mut is_loaded: bool = false; }
pub mod TexImage3D { pub static mut is_loaded: bool = false; }
pub mod TexImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod TexImage3DMultisample { pub static mut is_loaded: bool = false; }
pub mod TexImage3DMultisampleCoverageNV { pub static mut is_loaded: bool = false; }
pub mod TexImage3DOES { pub static mut is_loaded: bool = false; }
pub mod TexImage4DSGIS { pub static mut is_loaded: bool = false; }
pub mod TexPageCommitmentARB { pub static mut is_loaded: bool = false; }
pub mod TexParameterIiv { pub static mut is_loaded: bool = false; }
pub mod TexParameterIivEXT { pub static mut is_loaded: bool = false; }
pub mod TexParameterIuiv { pub static mut is_loaded: bool = false; }
pub mod TexParameterIuivEXT { pub static mut is_loaded: bool = false; }
pub mod TexParameterf { pub static mut is_loaded: bool = false; }
pub mod TexParameterfv { pub static mut is_loaded: bool = false; }
pub mod TexParameteri { pub static mut is_loaded: bool = false; }
pub mod TexParameteriv { pub static mut is_loaded: bool = false; }
pub mod TexParameterx { pub static mut is_loaded: bool = false; }
pub mod TexParameterxOES { pub static mut is_loaded: bool = false; }
pub mod TexParameterxv { pub static mut is_loaded: bool = false; }
pub mod TexParameterxvOES { pub static mut is_loaded: bool = false; }
pub mod TexRenderbufferNV { pub static mut is_loaded: bool = false; }
pub mod TexStorage1D { pub static mut is_loaded: bool = false; }
pub mod TexStorage1DEXT { pub static mut is_loaded: bool = false; }
pub mod TexStorage2D { pub static mut is_loaded: bool = false; }
pub mod TexStorage2DEXT { pub static mut is_loaded: bool = false; }
pub mod TexStorage2DMultisample { pub static mut is_loaded: bool = false; }
pub mod TexStorage3D { pub static mut is_loaded: bool = false; }
pub mod TexStorage3DEXT { pub static mut is_loaded: bool = false; }
pub mod TexStorage3DMultisample { pub static mut is_loaded: bool = false; }
pub mod TexStorageSparseAMD { pub static mut is_loaded: bool = false; }
pub mod TexSubImage1D { pub static mut is_loaded: bool = false; }
pub mod TexSubImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod TexSubImage2D { pub static mut is_loaded: bool = false; }
pub mod TexSubImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod TexSubImage3D { pub static mut is_loaded: bool = false; }
pub mod TexSubImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod TexSubImage3DOES { pub static mut is_loaded: bool = false; }
pub mod TexSubImage4DSGIS { pub static mut is_loaded: bool = false; }
pub mod TextureBarrierNV { pub static mut is_loaded: bool = false; }
pub mod TextureBufferEXT { pub static mut is_loaded: bool = false; }
pub mod TextureBufferRangeEXT { pub static mut is_loaded: bool = false; }
pub mod TextureColorMaskSGIS { pub static mut is_loaded: bool = false; }
pub mod TextureImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureImage2DMultisampleCoverageNV { pub static mut is_loaded: bool = false; }
pub mod TextureImage2DMultisampleNV { pub static mut is_loaded: bool = false; }
pub mod TextureImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureImage3DMultisampleCoverageNV { pub static mut is_loaded: bool = false; }
pub mod TextureImage3DMultisampleNV { pub static mut is_loaded: bool = false; }
pub mod TextureLightEXT { pub static mut is_loaded: bool = false; }
pub mod TextureMaterialEXT { pub static mut is_loaded: bool = false; }
pub mod TextureNormalEXT { pub static mut is_loaded: bool = false; }
pub mod TexturePageCommitmentEXT { pub static mut is_loaded: bool = false; }
pub mod TextureParameterIivEXT { pub static mut is_loaded: bool = false; }
pub mod TextureParameterIuivEXT { pub static mut is_loaded: bool = false; }
pub mod TextureParameterfEXT { pub static mut is_loaded: bool = false; }
pub mod TextureParameterfvEXT { pub static mut is_loaded: bool = false; }
pub mod TextureParameteriEXT { pub static mut is_loaded: bool = false; }
pub mod TextureParameterivEXT { pub static mut is_loaded: bool = false; }
pub mod TextureRangeAPPLE { pub static mut is_loaded: bool = false; }
pub mod TextureRenderbufferEXT { pub static mut is_loaded: bool = false; }
pub mod TextureStorage1DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureStorage2DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureStorage2DMultisampleEXT { pub static mut is_loaded: bool = false; }
pub mod TextureStorage3DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureStorage3DMultisampleEXT { pub static mut is_loaded: bool = false; }
pub mod TextureStorageSparseAMD { pub static mut is_loaded: bool = false; }
pub mod TextureSubImage1DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureSubImage2DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureSubImage3DEXT { pub static mut is_loaded: bool = false; }
pub mod TextureView { pub static mut is_loaded: bool = false; }
pub mod TrackMatrixNV { pub static mut is_loaded: bool = false; }
pub mod TransformFeedbackAttribsNV { pub static mut is_loaded: bool = false; }
pub mod TransformFeedbackStreamAttribsNV { pub static mut is_loaded: bool = false; }
pub mod TransformFeedbackVaryings { pub static mut is_loaded: bool = false; }
pub mod TransformFeedbackVaryingsEXT { pub static mut is_loaded: bool = false; }
pub mod TransformFeedbackVaryingsNV { pub static mut is_loaded: bool = false; }
pub mod TransformPathNV { pub static mut is_loaded: bool = false; }
pub mod Translated { pub static mut is_loaded: bool = false; }
pub mod Translatef { pub static mut is_loaded: bool = false; }
pub mod Translatex { pub static mut is_loaded: bool = false; }
pub mod TranslatexOES { pub static mut is_loaded: bool = false; }
pub mod Uniform1d { pub static mut is_loaded: bool = false; }
pub mod Uniform1dv { pub static mut is_loaded: bool = false; }
pub mod Uniform1f { pub static mut is_loaded: bool = false; }
pub mod Uniform1fARB { pub static mut is_loaded: bool = false; }
pub mod Uniform1fv { pub static mut is_loaded: bool = false; }
pub mod Uniform1fvARB { pub static mut is_loaded: bool = false; }
pub mod Uniform1i { pub static mut is_loaded: bool = false; }
pub mod Uniform1i64NV { pub static mut is_loaded: bool = false; }
pub mod Uniform1i64vNV { pub static mut is_loaded: bool = false; }
pub mod Uniform1iARB { pub static mut is_loaded: bool = false; }
pub mod Uniform1iv { pub static mut is_loaded: bool = false; }
pub mod Uniform1ivARB { pub static mut is_loaded: bool = false; }
pub mod Uniform1ui { pub static mut is_loaded: bool = false; }
pub mod Uniform1ui64NV { pub static mut is_loaded: bool = false; }
pub mod Uniform1ui64vNV { pub static mut is_loaded: bool = false; }
pub mod Uniform1uiEXT { pub static mut is_loaded: bool = false; }
pub mod Uniform1uiv { pub static mut is_loaded: bool = false; }
pub mod Uniform1uivEXT { pub static mut is_loaded: bool = false; }
pub mod Uniform2d { pub static mut is_loaded: bool = false; }
pub mod Uniform2dv { pub static mut is_loaded: bool = false; }
pub mod Uniform2f { pub static mut is_loaded: bool = false; }
pub mod Uniform2fARB { pub static mut is_loaded: bool = false; }
pub mod Uniform2fv { pub static mut is_loaded: bool = false; }
pub mod Uniform2fvARB { pub static mut is_loaded: bool = false; }
pub mod Uniform2i { pub static mut is_loaded: bool = false; }
pub mod Uniform2i64NV { pub static mut is_loaded: bool = false; }
pub mod Uniform2i64vNV { pub static mut is_loaded: bool = false; }
pub mod Uniform2iARB { pub static mut is_loaded: bool = false; }
pub mod Uniform2iv { pub static mut is_loaded: bool = false; }
pub mod Uniform2ivARB { pub static mut is_loaded: bool = false; }
pub mod Uniform2ui { pub static mut is_loaded: bool = false; }
pub mod Uniform2ui64NV { pub static mut is_loaded: bool = false; }
pub mod Uniform2ui64vNV { pub static mut is_loaded: bool = false; }
pub mod Uniform2uiEXT { pub static mut is_loaded: bool = false; }
pub mod Uniform2uiv { pub static mut is_loaded: bool = false; }
pub mod Uniform2uivEXT { pub static mut is_loaded: bool = false; }
pub mod Uniform3d { pub static mut is_loaded: bool = false; }
pub mod Uniform3dv { pub static mut is_loaded: bool = false; }
pub mod Uniform3f { pub static mut is_loaded: bool = false; }
pub mod Uniform3fARB { pub static mut is_loaded: bool = false; }
pub mod Uniform3fv { pub static mut is_loaded: bool = false; }
pub mod Uniform3fvARB { pub static mut is_loaded: bool = false; }
pub mod Uniform3i { pub static mut is_loaded: bool = false; }
pub mod Uniform3i64NV { pub static mut is_loaded: bool = false; }
pub mod Uniform3i64vNV { pub static mut is_loaded: bool = false; }
pub mod Uniform3iARB { pub static mut is_loaded: bool = false; }
pub mod Uniform3iv { pub static mut is_loaded: bool = false; }
pub mod Uniform3ivARB { pub static mut is_loaded: bool = false; }
pub mod Uniform3ui { pub static mut is_loaded: bool = false; }
pub mod Uniform3ui64NV { pub static mut is_loaded: bool = false; }
pub mod Uniform3ui64vNV { pub static mut is_loaded: bool = false; }
pub mod Uniform3uiEXT { pub static mut is_loaded: bool = false; }
pub mod Uniform3uiv { pub static mut is_loaded: bool = false; }
pub mod Uniform3uivEXT { pub static mut is_loaded: bool = false; }
pub mod Uniform4d { pub static mut is_loaded: bool = false; }
pub mod Uniform4dv { pub static mut is_loaded: bool = false; }
pub mod Uniform4f { pub static mut is_loaded: bool = false; }
pub mod Uniform4fARB { pub static mut is_loaded: bool = false; }
pub mod Uniform4fv { pub static mut is_loaded: bool = false; }
pub mod Uniform4fvARB { pub static mut is_loaded: bool = false; }
pub mod Uniform4i { pub static mut is_loaded: bool = false; }
pub mod Uniform4i64NV { pub static mut is_loaded: bool = false; }
pub mod Uniform4i64vNV { pub static mut is_loaded: bool = false; }
pub mod Uniform4iARB { pub static mut is_loaded: bool = false; }
pub mod Uniform4iv { pub static mut is_loaded: bool = false; }
pub mod Uniform4ivARB { pub static mut is_loaded: bool = false; }
pub mod Uniform4ui { pub static mut is_loaded: bool = false; }
pub mod Uniform4ui64NV { pub static mut is_loaded: bool = false; }
pub mod Uniform4ui64vNV { pub static mut is_loaded: bool = false; }
pub mod Uniform4uiEXT { pub static mut is_loaded: bool = false; }
pub mod Uniform4uiv { pub static mut is_loaded: bool = false; }
pub mod Uniform4uivEXT { pub static mut is_loaded: bool = false; }
pub mod UniformBlockBinding { pub static mut is_loaded: bool = false; }
pub mod UniformBufferEXT { pub static mut is_loaded: bool = false; }
pub mod UniformHandleui64ARB { pub static mut is_loaded: bool = false; }
pub mod UniformHandleui64NV { pub static mut is_loaded: bool = false; }
pub mod UniformHandleui64vARB { pub static mut is_loaded: bool = false; }
pub mod UniformHandleui64vNV { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix2dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix2fv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix2fvARB { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix2x3dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix2x3fv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix2x4dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix2x4fv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix3dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix3fv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix3fvARB { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix3x2dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix3x2fv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix3x4dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix3x4fv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix4dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix4fv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix4fvARB { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix4x2dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix4x2fv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix4x3dv { pub static mut is_loaded: bool = false; }
pub mod UniformMatrix4x3fv { pub static mut is_loaded: bool = false; }
pub mod UniformSubroutinesuiv { pub static mut is_loaded: bool = false; }
pub mod Uniformui64NV { pub static mut is_loaded: bool = false; }
pub mod Uniformui64vNV { pub static mut is_loaded: bool = false; }
pub mod UnlockArraysEXT { pub static mut is_loaded: bool = false; }
pub mod UnmapBuffer { pub static mut is_loaded: bool = false; }
pub mod UnmapBufferARB { pub static mut is_loaded: bool = false; }
pub mod UnmapBufferOES { pub static mut is_loaded: bool = false; }
pub mod UnmapNamedBufferEXT { pub static mut is_loaded: bool = false; }
pub mod UnmapObjectBufferATI { pub static mut is_loaded: bool = false; }
pub mod UnmapTexture2DINTEL { pub static mut is_loaded: bool = false; }
pub mod UpdateObjectBufferATI { pub static mut is_loaded: bool = false; }
pub mod UseProgram { pub static mut is_loaded: bool = false; }
pub mod UseProgramObjectARB { pub static mut is_loaded: bool = false; }
pub mod UseProgramStages { pub static mut is_loaded: bool = false; }
pub mod UseProgramStagesEXT { pub static mut is_loaded: bool = false; }
pub mod UseShaderProgramEXT { pub static mut is_loaded: bool = false; }
pub mod VDPAUFiniNV { pub static mut is_loaded: bool = false; }
pub mod VDPAUGetSurfaceivNV { pub static mut is_loaded: bool = false; }
pub mod VDPAUInitNV { pub static mut is_loaded: bool = false; }
pub mod VDPAUIsSurfaceNV { pub static mut is_loaded: bool = false; }
pub mod VDPAUMapSurfacesNV { pub static mut is_loaded: bool = false; }
pub mod VDPAURegisterOutputSurfaceNV { pub static mut is_loaded: bool = false; }
pub mod VDPAURegisterVideoSurfaceNV { pub static mut is_loaded: bool = false; }
pub mod VDPAUSurfaceAccessNV { pub static mut is_loaded: bool = false; }
pub mod VDPAUUnmapSurfacesNV { pub static mut is_loaded: bool = false; }
pub mod VDPAUUnregisterSurfaceNV { pub static mut is_loaded: bool = false; }
pub mod ValidateProgram { pub static mut is_loaded: bool = false; }
pub mod ValidateProgramARB { pub static mut is_loaded: bool = false; }
pub mod ValidateProgramPipeline { pub static mut is_loaded: bool = false; }
pub mod ValidateProgramPipelineEXT { pub static mut is_loaded: bool = false; }
pub mod VariantArrayObjectATI { pub static mut is_loaded: bool = false; }
pub mod VariantPointerEXT { pub static mut is_loaded: bool = false; }
pub mod VariantbvEXT { pub static mut is_loaded: bool = false; }
pub mod VariantdvEXT { pub static mut is_loaded: bool = false; }
pub mod VariantfvEXT { pub static mut is_loaded: bool = false; }
pub mod VariantivEXT { pub static mut is_loaded: bool = false; }
pub mod VariantsvEXT { pub static mut is_loaded: bool = false; }
pub mod VariantubvEXT { pub static mut is_loaded: bool = false; }
pub mod VariantuivEXT { pub static mut is_loaded: bool = false; }
pub mod VariantusvEXT { pub static mut is_loaded: bool = false; }
pub mod Vertex2bOES { pub static mut is_loaded: bool = false; }
pub mod Vertex2bvOES { pub static mut is_loaded: bool = false; }
pub mod Vertex2d { pub static mut is_loaded: bool = false; }
pub mod Vertex2dv { pub static mut is_loaded: bool = false; }
pub mod Vertex2f { pub static mut is_loaded: bool = false; }
pub mod Vertex2fv { pub static mut is_loaded: bool = false; }
pub mod Vertex2hNV { pub static mut is_loaded: bool = false; }
pub mod Vertex2hvNV { pub static mut is_loaded: bool = false; }
pub mod Vertex2i { pub static mut is_loaded: bool = false; }
pub mod Vertex2iv { pub static mut is_loaded: bool = false; }
pub mod Vertex2s { pub static mut is_loaded: bool = false; }
pub mod Vertex2sv { pub static mut is_loaded: bool = false; }
pub mod Vertex2xOES { pub static mut is_loaded: bool = false; }
pub mod Vertex2xvOES { pub static mut is_loaded: bool = false; }
pub mod Vertex3bOES { pub static mut is_loaded: bool = false; }
pub mod Vertex3bvOES { pub static mut is_loaded: bool = false; }
pub mod Vertex3d { pub static mut is_loaded: bool = false; }
pub mod Vertex3dv { pub static mut is_loaded: bool = false; }
pub mod Vertex3f { pub static mut is_loaded: bool = false; }
pub mod Vertex3fv { pub static mut is_loaded: bool = false; }
pub mod Vertex3hNV { pub static mut is_loaded: bool = false; }
pub mod Vertex3hvNV { pub static mut is_loaded: bool = false; }
pub mod Vertex3i { pub static mut is_loaded: bool = false; }
pub mod Vertex3iv { pub static mut is_loaded: bool = false; }
pub mod Vertex3s { pub static mut is_loaded: bool = false; }
pub mod Vertex3sv { pub static mut is_loaded: bool = false; }
pub mod Vertex3xOES { pub static mut is_loaded: bool = false; }
pub mod Vertex3xvOES { pub static mut is_loaded: bool = false; }
pub mod Vertex4bOES { pub static mut is_loaded: bool = false; }
pub mod Vertex4bvOES { pub static mut is_loaded: bool = false; }
pub mod Vertex4d { pub static mut is_loaded: bool = false; }
pub mod Vertex4dv { pub static mut is_loaded: bool = false; }
pub mod Vertex4f { pub static mut is_loaded: bool = false; }
pub mod Vertex4fv { pub static mut is_loaded: bool = false; }
pub mod Vertex4hNV { pub static mut is_loaded: bool = false; }
pub mod Vertex4hvNV { pub static mut is_loaded: bool = false; }
pub mod Vertex4i { pub static mut is_loaded: bool = false; }
pub mod Vertex4iv { pub static mut is_loaded: bool = false; }
pub mod Vertex4s { pub static mut is_loaded: bool = false; }
pub mod Vertex4sv { pub static mut is_loaded: bool = false; }
pub mod Vertex4xOES { pub static mut is_loaded: bool = false; }
pub mod Vertex4xvOES { pub static mut is_loaded: bool = false; }
pub mod VertexArrayBindVertexBufferEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayColorOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayEdgeFlagOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayFogCoordOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayIndexOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayMultiTexCoordOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayNormalOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayParameteriAPPLE { pub static mut is_loaded: bool = false; }
pub mod VertexArrayRangeAPPLE { pub static mut is_loaded: bool = false; }
pub mod VertexArrayRangeNV { pub static mut is_loaded: bool = false; }
pub mod VertexArraySecondaryColorOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayTexCoordOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexAttribBindingEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexAttribFormatEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexAttribIFormatEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexAttribIOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexAttribLFormatEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexAttribLOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexAttribOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexBindingDivisorEXT { pub static mut is_loaded: bool = false; }
pub mod VertexArrayVertexOffsetEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1d { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1dARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1dNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1dv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1dvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1dvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1f { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1fARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1fNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1fv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1fvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1fvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1hNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1hvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1s { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1sARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1sNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1sv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1svARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib1svNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2d { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2dARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2dNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2dv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2dvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2dvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2f { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2fARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2fNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2fv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2fvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2fvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2hNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2hvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2s { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2sARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2sNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2sv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2svARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib2svNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3d { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3dARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3dNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3dv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3dvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3dvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3f { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3fARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3fNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3fv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3fvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3fvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3hNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3hvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3s { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3sARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3sNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3sv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3svARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib3svNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4Nbv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4NbvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4Niv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4NivARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4Nsv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4NsvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4Nub { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4NubARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4Nubv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4NubvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4Nuiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4NuivARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4Nusv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4NusvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4bv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4bvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4d { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4dARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4dNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4dv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4dvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4dvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4f { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4fARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4fNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4fv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4fvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4fvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4hNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4hvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4iv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4ivARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4s { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4sARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4sNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4sv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4svARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4svNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4ubNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4ubv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4ubvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4ubvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4uivARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4usv { pub static mut is_loaded: bool = false; }
pub mod VertexAttrib4usvARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttribArrayObjectATI { pub static mut is_loaded: bool = false; }
pub mod VertexAttribBinding { pub static mut is_loaded: bool = false; }
pub mod VertexAttribDivisor { pub static mut is_loaded: bool = false; }
pub mod VertexAttribDivisorANGLE { pub static mut is_loaded: bool = false; }
pub mod VertexAttribDivisorARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttribDivisorNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribFormat { pub static mut is_loaded: bool = false; }
pub mod VertexAttribFormatNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI1i { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI1iEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI1iv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI1ivEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI1ui { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI1uiEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI1uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI1uivEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI2i { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI2iEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI2iv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI2ivEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI2ui { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI2uiEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI2uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI2uivEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI3i { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI3iEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI3iv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI3ivEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI3ui { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI3uiEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI3uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI3uivEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4bv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4bvEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4i { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4iEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4iv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4ivEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4sv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4svEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4ubv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4ubvEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4ui { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4uiEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4uivEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4usv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribI4usvEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribIFormat { pub static mut is_loaded: bool = false; }
pub mod VertexAttribIFormatNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribIPointer { pub static mut is_loaded: bool = false; }
pub mod VertexAttribIPointerEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1d { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1dEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1dv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1dvEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1i64NV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1i64vNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1ui64ARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1ui64NV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1ui64vARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL1ui64vNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL2d { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL2dEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL2dv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL2dvEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL2i64NV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL2i64vNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL2ui64NV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL2ui64vNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL3d { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL3dEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL3dv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL3dvEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL3i64NV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL3i64vNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL3ui64NV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL3ui64vNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL4d { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL4dEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL4dv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL4dvEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL4i64NV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL4i64vNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL4ui64NV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribL4ui64vNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribLFormat { pub static mut is_loaded: bool = false; }
pub mod VertexAttribLFormatNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribLPointer { pub static mut is_loaded: bool = false; }
pub mod VertexAttribLPointerEXT { pub static mut is_loaded: bool = false; }
pub mod VertexAttribP1ui { pub static mut is_loaded: bool = false; }
pub mod VertexAttribP1uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribP2ui { pub static mut is_loaded: bool = false; }
pub mod VertexAttribP2uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribP3ui { pub static mut is_loaded: bool = false; }
pub mod VertexAttribP3uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribP4ui { pub static mut is_loaded: bool = false; }
pub mod VertexAttribP4uiv { pub static mut is_loaded: bool = false; }
pub mod VertexAttribParameteriAMD { pub static mut is_loaded: bool = false; }
pub mod VertexAttribPointer { pub static mut is_loaded: bool = false; }
pub mod VertexAttribPointerARB { pub static mut is_loaded: bool = false; }
pub mod VertexAttribPointerNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs1dvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs1fvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs1hvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs1svNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs2dvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs2fvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs2hvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs2svNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs3dvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs3fvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs3hvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs3svNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs4dvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs4fvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs4hvNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs4svNV { pub static mut is_loaded: bool = false; }
pub mod VertexAttribs4ubvNV { pub static mut is_loaded: bool = false; }
pub mod VertexBindingDivisor { pub static mut is_loaded: bool = false; }
pub mod VertexBlendARB { pub static mut is_loaded: bool = false; }
pub mod VertexBlendEnvfATI { pub static mut is_loaded: bool = false; }
pub mod VertexBlendEnviATI { pub static mut is_loaded: bool = false; }
pub mod VertexFormatNV { pub static mut is_loaded: bool = false; }
pub mod VertexP2ui { pub static mut is_loaded: bool = false; }
pub mod VertexP2uiv { pub static mut is_loaded: bool = false; }
pub mod VertexP3ui { pub static mut is_loaded: bool = false; }
pub mod VertexP3uiv { pub static mut is_loaded: bool = false; }
pub mod VertexP4ui { pub static mut is_loaded: bool = false; }
pub mod VertexP4uiv { pub static mut is_loaded: bool = false; }
pub mod VertexPointer { pub static mut is_loaded: bool = false; }
pub mod VertexPointerEXT { pub static mut is_loaded: bool = false; }
pub mod VertexPointerListIBM { pub static mut is_loaded: bool = false; }
pub mod VertexPointervINTEL { pub static mut is_loaded: bool = false; }
pub mod VertexStream1dATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream1dvATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream1fATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream1fvATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream1iATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream1ivATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream1sATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream1svATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream2dATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream2dvATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream2fATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream2fvATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream2iATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream2ivATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream2sATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream2svATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream3dATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream3dvATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream3fATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream3fvATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream3iATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream3ivATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream3sATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream3svATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream4dATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream4dvATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream4fATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream4fvATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream4iATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream4ivATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream4sATI { pub static mut is_loaded: bool = false; }
pub mod VertexStream4svATI { pub static mut is_loaded: bool = false; }
pub mod VertexWeightPointerEXT { pub static mut is_loaded: bool = false; }
pub mod VertexWeightfEXT { pub static mut is_loaded: bool = false; }
pub mod VertexWeightfvEXT { pub static mut is_loaded: bool = false; }
pub mod VertexWeighthNV { pub static mut is_loaded: bool = false; }
pub mod VertexWeighthvNV { pub static mut is_loaded: bool = false; }
pub mod VideoCaptureNV { pub static mut is_loaded: bool = false; }
pub mod VideoCaptureStreamParameterdvNV { pub static mut is_loaded: bool = false; }
pub mod VideoCaptureStreamParameterfvNV { pub static mut is_loaded: bool = false; }
pub mod VideoCaptureStreamParameterivNV { pub static mut is_loaded: bool = false; }
pub mod Viewport { pub static mut is_loaded: bool = false; }
pub mod ViewportArrayv { pub static mut is_loaded: bool = false; }
pub mod ViewportIndexedf { pub static mut is_loaded: bool = false; }
pub mod ViewportIndexedfv { pub static mut is_loaded: bool = false; }
pub mod WaitSync { pub static mut is_loaded: bool = false; }
pub mod WaitSyncAPPLE { pub static mut is_loaded: bool = false; }
pub mod WeightPathsNV { pub static mut is_loaded: bool = false; }
pub mod WeightPointerARB { pub static mut is_loaded: bool = false; }
pub mod WeightPointerOES { pub static mut is_loaded: bool = false; }
pub mod WeightbvARB { pub static mut is_loaded: bool = false; }
pub mod WeightdvARB { pub static mut is_loaded: bool = false; }
pub mod WeightfvARB { pub static mut is_loaded: bool = false; }
pub mod WeightivARB { pub static mut is_loaded: bool = false; }
pub mod WeightsvARB { pub static mut is_loaded: bool = false; }
pub mod WeightubvARB { pub static mut is_loaded: bool = false; }
pub mod WeightuivARB { pub static mut is_loaded: bool = false; }
pub mod WeightusvARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2d { pub static mut is_loaded: bool = false; }
pub mod WindowPos2dARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2dMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos2dv { pub static mut is_loaded: bool = false; }
pub mod WindowPos2dvARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2dvMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos2f { pub static mut is_loaded: bool = false; }
pub mod WindowPos2fARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2fMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos2fv { pub static mut is_loaded: bool = false; }
pub mod WindowPos2fvARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2fvMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos2i { pub static mut is_loaded: bool = false; }
pub mod WindowPos2iARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2iMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos2iv { pub static mut is_loaded: bool = false; }
pub mod WindowPos2ivARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2ivMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos2s { pub static mut is_loaded: bool = false; }
pub mod WindowPos2sARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2sMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos2sv { pub static mut is_loaded: bool = false; }
pub mod WindowPos2svARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos2svMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos3d { pub static mut is_loaded: bool = false; }
pub mod WindowPos3dARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos3dMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos3dv { pub static mut is_loaded: bool = false; }
pub mod WindowPos3dvARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos3dvMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos3f { pub static mut is_loaded: bool = false; }
pub mod WindowPos3fARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos3fMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos3fv { pub static mut is_loaded: bool = false; }
pub mod WindowPos3fvARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos3fvMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos3i { pub static mut is_loaded: bool = false; }
pub mod WindowPos3iARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos3iMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos3iv { pub static mut is_loaded: bool = false; }
pub mod WindowPos3ivARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos3ivMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos3s { pub static mut is_loaded: bool = false; }
pub mod WindowPos3sARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos3sMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos3sv { pub static mut is_loaded: bool = false; }
pub mod WindowPos3svARB { pub static mut is_loaded: bool = false; }
pub mod WindowPos3svMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos4dMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos4dvMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos4fMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos4fvMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos4iMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos4ivMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos4sMESA { pub static mut is_loaded: bool = false; }
pub mod WindowPos4svMESA { pub static mut is_loaded: bool = false; }
pub mod WriteMaskEXT { pub static mut is_loaded: bool = false; }

mod failing {
    use std::libc::*;
    use super::types::*;
    
    pub extern "C" fn Accum(_: GLenum, _: GLfloat) -> c_void { fail!("Accum was not loaded") }
    pub extern "C" fn AccumxOES(_: GLenum, _: GLfixed) -> c_void { fail!("AccumxOES was not loaded") }
    pub extern "C" fn ActiveProgramEXT(_: GLuint) -> c_void { fail!("ActiveProgramEXT was not loaded") }
    pub extern "C" fn ActiveShaderProgram(_: GLuint, _: GLuint) -> c_void { fail!("ActiveShaderProgram was not loaded") }
    pub extern "C" fn ActiveShaderProgramEXT(_: GLuint, _: GLuint) -> c_void { fail!("ActiveShaderProgramEXT was not loaded") }
    pub extern "C" fn ActiveStencilFaceEXT(_: GLenum) -> c_void { fail!("ActiveStencilFaceEXT was not loaded") }
    pub extern "C" fn ActiveTexture(_: GLenum) -> c_void { fail!("ActiveTexture was not loaded") }
    pub extern "C" fn ActiveTextureARB(_: GLenum) -> c_void { fail!("ActiveTextureARB was not loaded") }
    pub extern "C" fn ActiveVaryingNV(_: GLuint, _: *GLchar) -> c_void { fail!("ActiveVaryingNV was not loaded") }
    pub extern "C" fn AlphaFragmentOp1ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("AlphaFragmentOp1ATI was not loaded") }
    pub extern "C" fn AlphaFragmentOp2ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("AlphaFragmentOp2ATI was not loaded") }
    pub extern "C" fn AlphaFragmentOp3ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("AlphaFragmentOp3ATI was not loaded") }
    pub extern "C" fn AlphaFunc(_: GLenum, _: GLfloat) -> c_void { fail!("AlphaFunc was not loaded") }
    pub extern "C" fn AlphaFuncQCOM(_: GLenum, _: GLclampf) -> c_void { fail!("AlphaFuncQCOM was not loaded") }
    pub extern "C" fn AlphaFuncx(_: GLenum, _: GLfixed) -> c_void { fail!("AlphaFuncx was not loaded") }
    pub extern "C" fn AlphaFuncxOES(_: GLenum, _: GLfixed) -> c_void { fail!("AlphaFuncxOES was not loaded") }
    pub extern "C" fn ApplyTextureEXT(_: GLenum) -> c_void { fail!("ApplyTextureEXT was not loaded") }
    pub extern "C" fn AreProgramsResidentNV(_: GLsizei, _: *GLuint, _: *GLboolean) -> GLboolean { fail!("AreProgramsResidentNV was not loaded") }
    pub extern "C" fn AreTexturesResident(_: GLsizei, _: *GLuint, _: *GLboolean) -> GLboolean { fail!("AreTexturesResident was not loaded") }
    pub extern "C" fn AreTexturesResidentEXT(_: GLsizei, _: *GLuint, _: *GLboolean) -> GLboolean { fail!("AreTexturesResidentEXT was not loaded") }
    pub extern "C" fn ArrayElement(_: GLint) -> c_void { fail!("ArrayElement was not loaded") }
    pub extern "C" fn ArrayElementEXT(_: GLint) -> c_void { fail!("ArrayElementEXT was not loaded") }
    pub extern "C" fn ArrayObjectATI(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLuint, _: GLuint) -> c_void { fail!("ArrayObjectATI was not loaded") }
    pub extern "C" fn AsyncMarkerSGIX(_: GLuint) -> c_void { fail!("AsyncMarkerSGIX was not loaded") }
    pub extern "C" fn AttachObjectARB(_: GLhandleARB, _: GLhandleARB) -> c_void { fail!("AttachObjectARB was not loaded") }
    pub extern "C" fn AttachShader(_: GLuint, _: GLuint) -> c_void { fail!("AttachShader was not loaded") }
    pub extern "C" fn Begin(_: GLenum) -> c_void { fail!("Begin was not loaded") }
    pub extern "C" fn BeginConditionalRender(_: GLuint, _: GLenum) -> c_void { fail!("BeginConditionalRender was not loaded") }
    pub extern "C" fn BeginConditionalRenderNV(_: GLuint, _: GLenum) -> c_void { fail!("BeginConditionalRenderNV was not loaded") }
    pub extern "C" fn BeginConditionalRenderNVX(_: GLuint) -> c_void { fail!("BeginConditionalRenderNVX was not loaded") }
    pub extern "C" fn BeginFragmentShaderATI() -> c_void { fail!("BeginFragmentShaderATI was not loaded") }
    pub extern "C" fn BeginOcclusionQueryNV(_: GLuint) -> c_void { fail!("BeginOcclusionQueryNV was not loaded") }
    pub extern "C" fn BeginPerfMonitorAMD(_: GLuint) -> c_void { fail!("BeginPerfMonitorAMD was not loaded") }
    pub extern "C" fn BeginQuery(_: GLenum, _: GLuint) -> c_void { fail!("BeginQuery was not loaded") }
    pub extern "C" fn BeginQueryARB(_: GLenum, _: GLuint) -> c_void { fail!("BeginQueryARB was not loaded") }
    pub extern "C" fn BeginQueryEXT(_: GLenum, _: GLuint) -> c_void { fail!("BeginQueryEXT was not loaded") }
    pub extern "C" fn BeginQueryIndexed(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("BeginQueryIndexed was not loaded") }
    pub extern "C" fn BeginTransformFeedback(_: GLenum) -> c_void { fail!("BeginTransformFeedback was not loaded") }
    pub extern "C" fn BeginTransformFeedbackEXT(_: GLenum) -> c_void { fail!("BeginTransformFeedbackEXT was not loaded") }
    pub extern "C" fn BeginTransformFeedbackNV(_: GLenum) -> c_void { fail!("BeginTransformFeedbackNV was not loaded") }
    pub extern "C" fn BeginVertexShaderEXT() -> c_void { fail!("BeginVertexShaderEXT was not loaded") }
    pub extern "C" fn BeginVideoCaptureNV(_: GLuint) -> c_void { fail!("BeginVideoCaptureNV was not loaded") }
    pub extern "C" fn BindAttribLocation(_: GLuint, _: GLuint, _: *GLchar) -> c_void { fail!("BindAttribLocation was not loaded") }
    pub extern "C" fn BindAttribLocationARB(_: GLhandleARB, _: GLuint, _: *GLcharARB) -> c_void { fail!("BindAttribLocationARB was not loaded") }
    pub extern "C" fn BindBuffer(_: GLenum, _: GLuint) -> c_void { fail!("BindBuffer was not loaded") }
    pub extern "C" fn BindBufferARB(_: GLenum, _: GLuint) -> c_void { fail!("BindBufferARB was not loaded") }
    pub extern "C" fn BindBufferBase(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("BindBufferBase was not loaded") }
    pub extern "C" fn BindBufferBaseEXT(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("BindBufferBaseEXT was not loaded") }
    pub extern "C" fn BindBufferBaseNV(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("BindBufferBaseNV was not loaded") }
    pub extern "C" fn BindBufferOffsetEXT(_: GLenum, _: GLuint, _: GLuint, _: GLintptr) -> c_void { fail!("BindBufferOffsetEXT was not loaded") }
    pub extern "C" fn BindBufferOffsetNV(_: GLenum, _: GLuint, _: GLuint, _: GLintptr) -> c_void { fail!("BindBufferOffsetNV was not loaded") }
    pub extern "C" fn BindBufferRange(_: GLenum, _: GLuint, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("BindBufferRange was not loaded") }
    pub extern "C" fn BindBufferRangeEXT(_: GLenum, _: GLuint, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("BindBufferRangeEXT was not loaded") }
    pub extern "C" fn BindBufferRangeNV(_: GLenum, _: GLuint, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("BindBufferRangeNV was not loaded") }
    pub extern "C" fn BindBuffersBase(_: GLenum, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("BindBuffersBase was not loaded") }
    pub extern "C" fn BindBuffersRange(_: GLenum, _: GLuint, _: GLsizei, _: *GLuint, _: *GLintptr, _: *GLsizeiptr) -> c_void { fail!("BindBuffersRange was not loaded") }
    pub extern "C" fn BindFragDataLocation(_: GLuint, _: GLuint, _: *GLchar) -> c_void { fail!("BindFragDataLocation was not loaded") }
    pub extern "C" fn BindFragDataLocationEXT(_: GLuint, _: GLuint, _: *GLchar) -> c_void { fail!("BindFragDataLocationEXT was not loaded") }
    pub extern "C" fn BindFragDataLocationIndexed(_: GLuint, _: GLuint, _: GLuint, _: *GLchar) -> c_void { fail!("BindFragDataLocationIndexed was not loaded") }
    pub extern "C" fn BindFragmentShaderATI(_: GLuint) -> c_void { fail!("BindFragmentShaderATI was not loaded") }
    pub extern "C" fn BindFramebuffer(_: GLenum, _: GLuint) -> c_void { fail!("BindFramebuffer was not loaded") }
    pub extern "C" fn BindFramebufferEXT(_: GLenum, _: GLuint) -> c_void { fail!("BindFramebufferEXT was not loaded") }
    pub extern "C" fn BindFramebufferOES(_: GLenum, _: GLuint) -> c_void { fail!("BindFramebufferOES was not loaded") }
    pub extern "C" fn BindImageTexture(_: GLuint, _: GLuint, _: GLint, _: GLboolean, _: GLint, _: GLenum, _: GLenum) -> c_void { fail!("BindImageTexture was not loaded") }
    pub extern "C" fn BindImageTextureEXT(_: GLuint, _: GLuint, _: GLint, _: GLboolean, _: GLint, _: GLenum, _: GLint) -> c_void { fail!("BindImageTextureEXT was not loaded") }
    pub extern "C" fn BindImageTextures(_: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("BindImageTextures was not loaded") }
    pub extern "C" fn BindLightParameterEXT(_: GLenum, _: GLenum) -> GLuint { fail!("BindLightParameterEXT was not loaded") }
    pub extern "C" fn BindMaterialParameterEXT(_: GLenum, _: GLenum) -> GLuint { fail!("BindMaterialParameterEXT was not loaded") }
    pub extern "C" fn BindMultiTextureEXT(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("BindMultiTextureEXT was not loaded") }
    pub extern "C" fn BindParameterEXT(_: GLenum) -> GLuint { fail!("BindParameterEXT was not loaded") }
    pub extern "C" fn BindProgramARB(_: GLenum, _: GLuint) -> c_void { fail!("BindProgramARB was not loaded") }
    pub extern "C" fn BindProgramNV(_: GLenum, _: GLuint) -> c_void { fail!("BindProgramNV was not loaded") }
    pub extern "C" fn BindProgramPipeline(_: GLuint) -> c_void { fail!("BindProgramPipeline was not loaded") }
    pub extern "C" fn BindProgramPipelineEXT(_: GLuint) -> c_void { fail!("BindProgramPipelineEXT was not loaded") }
    pub extern "C" fn BindRenderbuffer(_: GLenum, _: GLuint) -> c_void { fail!("BindRenderbuffer was not loaded") }
    pub extern "C" fn BindRenderbufferEXT(_: GLenum, _: GLuint) -> c_void { fail!("BindRenderbufferEXT was not loaded") }
    pub extern "C" fn BindRenderbufferOES(_: GLenum, _: GLuint) -> c_void { fail!("BindRenderbufferOES was not loaded") }
    pub extern "C" fn BindSampler(_: GLuint, _: GLuint) -> c_void { fail!("BindSampler was not loaded") }
    pub extern "C" fn BindSamplers(_: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("BindSamplers was not loaded") }
    pub extern "C" fn BindTexGenParameterEXT(_: GLenum, _: GLenum, _: GLenum) -> GLuint { fail!("BindTexGenParameterEXT was not loaded") }
    pub extern "C" fn BindTexture(_: GLenum, _: GLuint) -> c_void { fail!("BindTexture was not loaded") }
    pub extern "C" fn BindTextureEXT(_: GLenum, _: GLuint) -> c_void { fail!("BindTextureEXT was not loaded") }
    pub extern "C" fn BindTextureUnitParameterEXT(_: GLenum, _: GLenum) -> GLuint { fail!("BindTextureUnitParameterEXT was not loaded") }
    pub extern "C" fn BindTextures(_: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("BindTextures was not loaded") }
    pub extern "C" fn BindTransformFeedback(_: GLenum, _: GLuint) -> c_void { fail!("BindTransformFeedback was not loaded") }
    pub extern "C" fn BindTransformFeedbackNV(_: GLenum, _: GLuint) -> c_void { fail!("BindTransformFeedbackNV was not loaded") }
    pub extern "C" fn BindVertexArray(_: GLuint) -> c_void { fail!("BindVertexArray was not loaded") }
    pub extern "C" fn BindVertexArrayAPPLE(_: GLuint) -> c_void { fail!("BindVertexArrayAPPLE was not loaded") }
    pub extern "C" fn BindVertexArrayOES(_: GLuint) -> c_void { fail!("BindVertexArrayOES was not loaded") }
    pub extern "C" fn BindVertexBuffer(_: GLuint, _: GLuint, _: GLintptr, _: GLsizei) -> c_void { fail!("BindVertexBuffer was not loaded") }
    pub extern "C" fn BindVertexBuffers(_: GLuint, _: GLsizei, _: *GLuint, _: *GLintptr, _: *GLsizei) -> c_void { fail!("BindVertexBuffers was not loaded") }
    pub extern "C" fn BindVertexShaderEXT(_: GLuint) -> c_void { fail!("BindVertexShaderEXT was not loaded") }
    pub extern "C" fn BindVideoCaptureStreamBufferNV(_: GLuint, _: GLuint, _: GLenum, _: GLintptrARB) -> c_void { fail!("BindVideoCaptureStreamBufferNV was not loaded") }
    pub extern "C" fn BindVideoCaptureStreamTextureNV(_: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("BindVideoCaptureStreamTextureNV was not loaded") }
    pub extern "C" fn Binormal3bEXT(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Binormal3bEXT was not loaded") }
    pub extern "C" fn Binormal3bvEXT(_: *GLbyte) -> c_void { fail!("Binormal3bvEXT was not loaded") }
    pub extern "C" fn Binormal3dEXT(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Binormal3dEXT was not loaded") }
    pub extern "C" fn Binormal3dvEXT(_: *GLdouble) -> c_void { fail!("Binormal3dvEXT was not loaded") }
    pub extern "C" fn Binormal3fEXT(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Binormal3fEXT was not loaded") }
    pub extern "C" fn Binormal3fvEXT(_: *GLfloat) -> c_void { fail!("Binormal3fvEXT was not loaded") }
    pub extern "C" fn Binormal3iEXT(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Binormal3iEXT was not loaded") }
    pub extern "C" fn Binormal3ivEXT(_: *GLint) -> c_void { fail!("Binormal3ivEXT was not loaded") }
    pub extern "C" fn Binormal3sEXT(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Binormal3sEXT was not loaded") }
    pub extern "C" fn Binormal3svEXT(_: *GLshort) -> c_void { fail!("Binormal3svEXT was not loaded") }
    pub extern "C" fn BinormalPointerEXT(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("BinormalPointerEXT was not loaded") }
    pub extern "C" fn Bitmap(_: GLsizei, _: GLsizei, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: *GLubyte) -> c_void { fail!("Bitmap was not loaded") }
    pub extern "C" fn BitmapxOES(_: GLsizei, _: GLsizei, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: *GLubyte) -> c_void { fail!("BitmapxOES was not loaded") }
    pub extern "C" fn BlendColor(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("BlendColor was not loaded") }
    pub extern "C" fn BlendColorEXT(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("BlendColorEXT was not loaded") }
    pub extern "C" fn BlendColorxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("BlendColorxOES was not loaded") }
    pub extern "C" fn BlendEquation(_: GLenum) -> c_void { fail!("BlendEquation was not loaded") }
    pub extern "C" fn BlendEquationEXT(_: GLenum) -> c_void { fail!("BlendEquationEXT was not loaded") }
    pub extern "C" fn BlendEquationIndexedAMD(_: GLuint, _: GLenum) -> c_void { fail!("BlendEquationIndexedAMD was not loaded") }
    pub extern "C" fn BlendEquationOES(_: GLenum) -> c_void { fail!("BlendEquationOES was not loaded") }
    pub extern "C" fn BlendEquationSeparate(_: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparate was not loaded") }
    pub extern "C" fn BlendEquationSeparateEXT(_: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparateEXT was not loaded") }
    pub extern "C" fn BlendEquationSeparateIndexedAMD(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparateIndexedAMD was not loaded") }
    pub extern "C" fn BlendEquationSeparateOES(_: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparateOES was not loaded") }
    pub extern "C" fn BlendEquationSeparatei(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparatei was not loaded") }
    pub extern "C" fn BlendEquationSeparateiARB(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendEquationSeparateiARB was not loaded") }
    pub extern "C" fn BlendEquationi(_: GLuint, _: GLenum) -> c_void { fail!("BlendEquationi was not loaded") }
    pub extern "C" fn BlendEquationiARB(_: GLuint, _: GLenum) -> c_void { fail!("BlendEquationiARB was not loaded") }
    pub extern "C" fn BlendFunc(_: GLenum, _: GLenum) -> c_void { fail!("BlendFunc was not loaded") }
    pub extern "C" fn BlendFuncIndexedAMD(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncIndexedAMD was not loaded") }
    pub extern "C" fn BlendFuncSeparate(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparate was not loaded") }
    pub extern "C" fn BlendFuncSeparateEXT(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateEXT was not loaded") }
    pub extern "C" fn BlendFuncSeparateINGR(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateINGR was not loaded") }
    pub extern "C" fn BlendFuncSeparateIndexedAMD(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateIndexedAMD was not loaded") }
    pub extern "C" fn BlendFuncSeparateOES(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateOES was not loaded") }
    pub extern "C" fn BlendFuncSeparatei(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparatei was not loaded") }
    pub extern "C" fn BlendFuncSeparateiARB(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("BlendFuncSeparateiARB was not loaded") }
    pub extern "C" fn BlendFunci(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendFunci was not loaded") }
    pub extern "C" fn BlendFunciARB(_: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("BlendFunciARB was not loaded") }
    pub extern "C" fn BlendParameteriNV(_: GLenum, _: GLint) -> c_void { fail!("BlendParameteriNV was not loaded") }
    pub extern "C" fn BlendBarrierNV() -> c_void { fail!("BlendBarrierNV was not loaded") }
    pub extern "C" fn BlitFramebuffer(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLbitfield, _: GLenum) -> c_void { fail!("BlitFramebuffer was not loaded") }
    pub extern "C" fn BlitFramebufferANGLE(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLbitfield, _: GLenum) -> c_void { fail!("BlitFramebufferANGLE was not loaded") }
    pub extern "C" fn BlitFramebufferEXT(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLbitfield, _: GLenum) -> c_void { fail!("BlitFramebufferEXT was not loaded") }
    pub extern "C" fn BlitFramebufferNV(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLbitfield, _: GLenum) -> c_void { fail!("BlitFramebufferNV was not loaded") }
    pub extern "C" fn BufferAddressRangeNV(_: GLenum, _: GLuint, _: GLuint64EXT, _: GLsizeiptr) -> c_void { fail!("BufferAddressRangeNV was not loaded") }
    pub extern "C" fn BufferData(_: GLenum, _: GLsizeiptr, _: *GLvoid, _: GLenum) -> c_void { fail!("BufferData was not loaded") }
    pub extern "C" fn BufferDataARB(_: GLenum, _: GLsizeiptrARB, _: *GLvoid, _: GLenum) -> c_void { fail!("BufferDataARB was not loaded") }
    pub extern "C" fn BufferParameteriAPPLE(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("BufferParameteriAPPLE was not loaded") }
    pub extern "C" fn BufferStorage(_: GLenum, _: GLsizeiptr, _: *c_void, _: GLbitfield) -> c_void { fail!("BufferStorage was not loaded") }
    pub extern "C" fn BufferSubData(_: GLenum, _: GLintptr, _: GLsizeiptr, _: *GLvoid) -> c_void { fail!("BufferSubData was not loaded") }
    pub extern "C" fn BufferSubDataARB(_: GLenum, _: GLintptrARB, _: GLsizeiptrARB, _: *GLvoid) -> c_void { fail!("BufferSubDataARB was not loaded") }
    pub extern "C" fn CallList(_: GLuint) -> c_void { fail!("CallList was not loaded") }
    pub extern "C" fn CallLists(_: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("CallLists was not loaded") }
    pub extern "C" fn CheckFramebufferStatus(_: GLenum) -> GLenum { fail!("CheckFramebufferStatus was not loaded") }
    pub extern "C" fn CheckFramebufferStatusEXT(_: GLenum) -> GLenum { fail!("CheckFramebufferStatusEXT was not loaded") }
    pub extern "C" fn CheckFramebufferStatusOES(_: GLenum) -> GLenum { fail!("CheckFramebufferStatusOES was not loaded") }
    pub extern "C" fn CheckNamedFramebufferStatusEXT(_: GLuint, _: GLenum) -> GLenum { fail!("CheckNamedFramebufferStatusEXT was not loaded") }
    pub extern "C" fn ClampColor(_: GLenum, _: GLenum) -> c_void { fail!("ClampColor was not loaded") }
    pub extern "C" fn ClampColorARB(_: GLenum, _: GLenum) -> c_void { fail!("ClampColorARB was not loaded") }
    pub extern "C" fn Clear(_: GLbitfield) -> c_void { fail!("Clear was not loaded") }
    pub extern "C" fn ClearAccum(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ClearAccum was not loaded") }
    pub extern "C" fn ClearAccumxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("ClearAccumxOES was not loaded") }
    pub extern "C" fn ClearBufferData(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearBufferData was not loaded") }
    pub extern "C" fn ClearBufferSubData(_: GLenum, _: GLenum, _: GLintptr, _: GLsizeiptr, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearBufferSubData was not loaded") }
    pub extern "C" fn ClearBufferfi(_: GLenum, _: GLint, _: GLfloat, _: GLint) -> c_void { fail!("ClearBufferfi was not loaded") }
    pub extern "C" fn ClearBufferfv(_: GLenum, _: GLint, _: *GLfloat) -> c_void { fail!("ClearBufferfv was not loaded") }
    pub extern "C" fn ClearBufferiv(_: GLenum, _: GLint, _: *GLint) -> c_void { fail!("ClearBufferiv was not loaded") }
    pub extern "C" fn ClearBufferuiv(_: GLenum, _: GLint, _: *GLuint) -> c_void { fail!("ClearBufferuiv was not loaded") }
    pub extern "C" fn ClearColor(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ClearColor was not loaded") }
    pub extern "C" fn ClearColorIiEXT(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ClearColorIiEXT was not loaded") }
    pub extern "C" fn ClearColorIuiEXT(_: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ClearColorIuiEXT was not loaded") }
    pub extern "C" fn ClearColorx(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("ClearColorx was not loaded") }
    pub extern "C" fn ClearColorxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("ClearColorxOES was not loaded") }
    pub extern "C" fn ClearDepth(_: GLdouble) -> c_void { fail!("ClearDepth was not loaded") }
    pub extern "C" fn ClearDepthdNV(_: GLdouble) -> c_void { fail!("ClearDepthdNV was not loaded") }
    pub extern "C" fn ClearDepthf(_: GLfloat) -> c_void { fail!("ClearDepthf was not loaded") }
    pub extern "C" fn ClearDepthfOES(_: GLclampf) -> c_void { fail!("ClearDepthfOES was not loaded") }
    pub extern "C" fn ClearDepthx(_: GLfixed) -> c_void { fail!("ClearDepthx was not loaded") }
    pub extern "C" fn ClearDepthxOES(_: GLfixed) -> c_void { fail!("ClearDepthxOES was not loaded") }
    pub extern "C" fn ClearIndex(_: GLfloat) -> c_void { fail!("ClearIndex was not loaded") }
    pub extern "C" fn ClearNamedBufferDataEXT(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearNamedBufferDataEXT was not loaded") }
    pub extern "C" fn ClearNamedBufferSubDataEXT(_: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLsizeiptr, _: GLsizeiptr, _: *c_void) -> c_void { fail!("ClearNamedBufferSubDataEXT was not loaded") }
    pub extern "C" fn ClearStencil(_: GLint) -> c_void { fail!("ClearStencil was not loaded") }
    pub extern "C" fn ClearTexImage(_: GLuint, _: GLint, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearTexImage was not loaded") }
    pub extern "C" fn ClearTexSubImage(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *c_void) -> c_void { fail!("ClearTexSubImage was not loaded") }
    pub extern "C" fn ClientActiveTexture(_: GLenum) -> c_void { fail!("ClientActiveTexture was not loaded") }
    pub extern "C" fn ClientActiveTextureARB(_: GLenum) -> c_void { fail!("ClientActiveTextureARB was not loaded") }
    pub extern "C" fn ClientActiveVertexStreamATI(_: GLenum) -> c_void { fail!("ClientActiveVertexStreamATI was not loaded") }
    pub extern "C" fn ClientAttribDefaultEXT(_: GLbitfield) -> c_void { fail!("ClientAttribDefaultEXT was not loaded") }
    pub extern "C" fn ClientWaitSync(_: GLsync, _: GLbitfield, _: GLuint64) -> GLenum { fail!("ClientWaitSync was not loaded") }
    pub extern "C" fn ClientWaitSyncAPPLE(_: GLsync, _: GLbitfield, _: GLuint64) -> GLenum { fail!("ClientWaitSyncAPPLE was not loaded") }
    pub extern "C" fn ClipControlARB(_: GLenum, _: GLenum) -> c_void { fail!("ClipControlARB was not loaded") }
    pub extern "C" fn ClipPlane(_: GLenum, _: *GLdouble) -> c_void { fail!("ClipPlane was not loaded") }
    pub extern "C" fn ClipPlanef(_: GLenum, _: *GLfloat) -> c_void { fail!("ClipPlanef was not loaded") }
    pub extern "C" fn ClipPlanefIMG(_: GLenum, _: *GLfloat) -> c_void { fail!("ClipPlanefIMG was not loaded") }
    pub extern "C" fn ClipPlanefOES(_: GLenum, _: *GLfloat) -> c_void { fail!("ClipPlanefOES was not loaded") }
    pub extern "C" fn ClipPlanex(_: GLenum, _: *GLfixed) -> c_void { fail!("ClipPlanex was not loaded") }
    pub extern "C" fn ClipPlanexIMG(_: GLenum, _: *GLfixed) -> c_void { fail!("ClipPlanexIMG was not loaded") }
    pub extern "C" fn ClipPlanexOES(_: GLenum, _: *GLfixed) -> c_void { fail!("ClipPlanexOES was not loaded") }
    pub extern "C" fn Color3b(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Color3b was not loaded") }
    pub extern "C" fn Color3bv(_: *GLbyte) -> c_void { fail!("Color3bv was not loaded") }
    pub extern "C" fn Color3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Color3d was not loaded") }
    pub extern "C" fn Color3dv(_: *GLdouble) -> c_void { fail!("Color3dv was not loaded") }
    pub extern "C" fn Color3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color3f was not loaded") }
    pub extern "C" fn Color3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color3fVertex3fSUN was not loaded") }
    pub extern "C" fn Color3fVertex3fvSUN(_: *GLfloat, _: *GLfloat) -> c_void { fail!("Color3fVertex3fvSUN was not loaded") }
    pub extern "C" fn Color3fv(_: *GLfloat) -> c_void { fail!("Color3fv was not loaded") }
    pub extern "C" fn Color3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Color3hNV was not loaded") }
    pub extern "C" fn Color3hvNV(_: *GLhalfNV) -> c_void { fail!("Color3hvNV was not loaded") }
    pub extern "C" fn Color3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Color3i was not loaded") }
    pub extern "C" fn Color3iv(_: *GLint) -> c_void { fail!("Color3iv was not loaded") }
    pub extern "C" fn Color3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Color3s was not loaded") }
    pub extern "C" fn Color3sv(_: *GLshort) -> c_void { fail!("Color3sv was not loaded") }
    pub extern "C" fn Color3ub(_: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("Color3ub was not loaded") }
    pub extern "C" fn Color3ubv(_: *GLubyte) -> c_void { fail!("Color3ubv was not loaded") }
    pub extern "C" fn Color3ui(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Color3ui was not loaded") }
    pub extern "C" fn Color3uiv(_: *GLuint) -> c_void { fail!("Color3uiv was not loaded") }
    pub extern "C" fn Color3us(_: GLushort, _: GLushort, _: GLushort) -> c_void { fail!("Color3us was not loaded") }
    pub extern "C" fn Color3usv(_: *GLushort) -> c_void { fail!("Color3usv was not loaded") }
    pub extern "C" fn Color3xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Color3xOES was not loaded") }
    pub extern "C" fn Color3xvOES(_: *GLfixed) -> c_void { fail!("Color3xvOES was not loaded") }
    pub extern "C" fn Color4b(_: GLbyte, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Color4b was not loaded") }
    pub extern "C" fn Color4bv(_: *GLbyte) -> c_void { fail!("Color4bv was not loaded") }
    pub extern "C" fn Color4d(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Color4d was not loaded") }
    pub extern "C" fn Color4dv(_: *GLdouble) -> c_void { fail!("Color4dv was not loaded") }
    pub extern "C" fn Color4f(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color4f was not loaded") }
    pub extern "C" fn Color4fNormal3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color4fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn Color4fNormal3fVertex3fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("Color4fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn Color4fv(_: *GLfloat) -> c_void { fail!("Color4fv was not loaded") }
    pub extern "C" fn Color4hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Color4hNV was not loaded") }
    pub extern "C" fn Color4hvNV(_: *GLhalfNV) -> c_void { fail!("Color4hvNV was not loaded") }
    pub extern "C" fn Color4i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Color4i was not loaded") }
    pub extern "C" fn Color4iv(_: *GLint) -> c_void { fail!("Color4iv was not loaded") }
    pub extern "C" fn Color4s(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Color4s was not loaded") }
    pub extern "C" fn Color4sv(_: *GLshort) -> c_void { fail!("Color4sv was not loaded") }
    pub extern "C" fn Color4ub(_: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("Color4ub was not loaded") }
    pub extern "C" fn Color4ubVertex2fSUN(_: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte, _: GLfloat, _: GLfloat) -> c_void { fail!("Color4ubVertex2fSUN was not loaded") }
    pub extern "C" fn Color4ubVertex2fvSUN(_: *GLubyte, _: *GLfloat) -> c_void { fail!("Color4ubVertex2fvSUN was not loaded") }
    pub extern "C" fn Color4ubVertex3fSUN(_: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Color4ubVertex3fSUN was not loaded") }
    pub extern "C" fn Color4ubVertex3fvSUN(_: *GLubyte, _: *GLfloat) -> c_void { fail!("Color4ubVertex3fvSUN was not loaded") }
    pub extern "C" fn Color4ubv(_: *GLubyte) -> c_void { fail!("Color4ubv was not loaded") }
    pub extern "C" fn Color4ui(_: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Color4ui was not loaded") }
    pub extern "C" fn Color4uiv(_: *GLuint) -> c_void { fail!("Color4uiv was not loaded") }
    pub extern "C" fn Color4us(_: GLushort, _: GLushort, _: GLushort, _: GLushort) -> c_void { fail!("Color4us was not loaded") }
    pub extern "C" fn Color4usv(_: *GLushort) -> c_void { fail!("Color4usv was not loaded") }
    pub extern "C" fn Color4x(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Color4x was not loaded") }
    pub extern "C" fn Color4xOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Color4xOES was not loaded") }
    pub extern "C" fn Color4xvOES(_: *GLfixed) -> c_void { fail!("Color4xvOES was not loaded") }
    pub extern "C" fn ColorFormatNV(_: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("ColorFormatNV was not loaded") }
    pub extern "C" fn ColorFragmentOp1ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ColorFragmentOp1ATI was not loaded") }
    pub extern "C" fn ColorFragmentOp2ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ColorFragmentOp2ATI was not loaded") }
    pub extern "C" fn ColorFragmentOp3ATI(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ColorFragmentOp3ATI was not loaded") }
    pub extern "C" fn ColorMask(_: GLboolean, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("ColorMask was not loaded") }
    pub extern "C" fn ColorMaskIndexedEXT(_: GLuint, _: GLboolean, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("ColorMaskIndexedEXT was not loaded") }
    pub extern "C" fn ColorMaski(_: GLuint, _: GLboolean, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("ColorMaski was not loaded") }
    pub extern "C" fn ColorMaterial(_: GLenum, _: GLenum) -> c_void { fail!("ColorMaterial was not loaded") }
    pub extern "C" fn ColorP3ui(_: GLenum, _: GLuint) -> c_void { fail!("ColorP3ui was not loaded") }
    pub extern "C" fn ColorP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("ColorP3uiv was not loaded") }
    pub extern "C" fn ColorP4ui(_: GLenum, _: GLuint) -> c_void { fail!("ColorP4ui was not loaded") }
    pub extern "C" fn ColorP4uiv(_: GLenum, _: *GLuint) -> c_void { fail!("ColorP4uiv was not loaded") }
    pub extern "C" fn ColorPointer(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("ColorPointer was not loaded") }
    pub extern "C" fn ColorPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("ColorPointerEXT was not loaded") }
    pub extern "C" fn ColorPointerListIBM(_: GLint, _: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("ColorPointerListIBM was not loaded") }
    pub extern "C" fn ColorPointervINTEL(_: GLint, _: GLenum, _: **GLvoid) -> c_void { fail!("ColorPointervINTEL was not loaded") }
    pub extern "C" fn ColorSubTable(_: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorSubTable was not loaded") }
    pub extern "C" fn ColorSubTableEXT(_: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorSubTableEXT was not loaded") }
    pub extern "C" fn ColorTable(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorTable was not loaded") }
    pub extern "C" fn ColorTableEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorTableEXT was not loaded") }
    pub extern "C" fn ColorTableParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ColorTableParameterfv was not loaded") }
    pub extern "C" fn ColorTableParameterfvSGI(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ColorTableParameterfvSGI was not loaded") }
    pub extern "C" fn ColorTableParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ColorTableParameteriv was not loaded") }
    pub extern "C" fn ColorTableParameterivSGI(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ColorTableParameterivSGI was not loaded") }
    pub extern "C" fn ColorTableSGI(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ColorTableSGI was not loaded") }
    pub extern "C" fn CombinerInputNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("CombinerInputNV was not loaded") }
    pub extern "C" fn CombinerOutputNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLenum, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("CombinerOutputNV was not loaded") }
    pub extern "C" fn CombinerParameterfNV(_: GLenum, _: GLfloat) -> c_void { fail!("CombinerParameterfNV was not loaded") }
    pub extern "C" fn CombinerParameterfvNV(_: GLenum, _: *GLfloat) -> c_void { fail!("CombinerParameterfvNV was not loaded") }
    pub extern "C" fn CombinerParameteriNV(_: GLenum, _: GLint) -> c_void { fail!("CombinerParameteriNV was not loaded") }
    pub extern "C" fn CombinerParameterivNV(_: GLenum, _: *GLint) -> c_void { fail!("CombinerParameterivNV was not loaded") }
    pub extern "C" fn CombinerStageParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("CombinerStageParameterfvNV was not loaded") }
    pub extern "C" fn CompileShader(_: GLuint) -> c_void { fail!("CompileShader was not loaded") }
    pub extern "C" fn CompileShaderARB(_: GLhandleARB) -> c_void { fail!("CompileShaderARB was not loaded") }
    pub extern "C" fn CompileShaderIncludeARB(_: GLuint, _: GLsizei, _: **GLchar, _: *GLint) -> c_void { fail!("CompileShaderIncludeARB was not loaded") }
    pub extern "C" fn CompressedMultiTexImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexImage1DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexImage2DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexImage3DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexSubImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexSubImage1DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexSubImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexSubImage2DEXT was not loaded") }
    pub extern "C" fn CompressedMultiTexSubImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedMultiTexSubImage3DEXT was not loaded") }
    pub extern "C" fn CompressedTexImage1D(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage1D was not loaded") }
    pub extern "C" fn CompressedTexImage1DARB(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage1DARB was not loaded") }
    pub extern "C" fn CompressedTexImage2D(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage2D was not loaded") }
    pub extern "C" fn CompressedTexImage2DARB(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage2DARB was not loaded") }
    pub extern "C" fn CompressedTexImage3D(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage3D was not loaded") }
    pub extern "C" fn CompressedTexImage3DARB(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage3DARB was not loaded") }
    pub extern "C" fn CompressedTexImage3DOES(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexImage3DOES was not loaded") }
    pub extern "C" fn CompressedTexSubImage1D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage1D was not loaded") }
    pub extern "C" fn CompressedTexSubImage1DARB(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage1DARB was not loaded") }
    pub extern "C" fn CompressedTexSubImage2D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage2D was not loaded") }
    pub extern "C" fn CompressedTexSubImage2DARB(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage2DARB was not loaded") }
    pub extern "C" fn CompressedTexSubImage3D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage3D was not loaded") }
    pub extern "C" fn CompressedTexSubImage3DARB(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage3DARB was not loaded") }
    pub extern "C" fn CompressedTexSubImage3DOES(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTexSubImage3DOES was not loaded") }
    pub extern "C" fn CompressedTextureImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureImage1DEXT was not loaded") }
    pub extern "C" fn CompressedTextureImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureImage2DEXT was not loaded") }
    pub extern "C" fn CompressedTextureImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureImage3DEXT was not loaded") }
    pub extern "C" fn CompressedTextureSubImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureSubImage1DEXT was not loaded") }
    pub extern "C" fn CompressedTextureSubImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureSubImage2DEXT was not loaded") }
    pub extern "C" fn CompressedTextureSubImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("CompressedTextureSubImage3DEXT was not loaded") }
    pub extern "C" fn ConvolutionFilter1D(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ConvolutionFilter1D was not loaded") }
    pub extern "C" fn ConvolutionFilter1DEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ConvolutionFilter1DEXT was not loaded") }
    pub extern "C" fn ConvolutionFilter2D(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ConvolutionFilter2D was not loaded") }
    pub extern "C" fn ConvolutionFilter2DEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ConvolutionFilter2DEXT was not loaded") }
    pub extern "C" fn ConvolutionParameterf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("ConvolutionParameterf was not loaded") }
    pub extern "C" fn ConvolutionParameterfEXT(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("ConvolutionParameterfEXT was not loaded") }
    pub extern "C" fn ConvolutionParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ConvolutionParameterfv was not loaded") }
    pub extern "C" fn ConvolutionParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ConvolutionParameterfvEXT was not loaded") }
    pub extern "C" fn ConvolutionParameteri(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("ConvolutionParameteri was not loaded") }
    pub extern "C" fn ConvolutionParameteriEXT(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("ConvolutionParameteriEXT was not loaded") }
    pub extern "C" fn ConvolutionParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ConvolutionParameteriv was not loaded") }
    pub extern "C" fn ConvolutionParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ConvolutionParameterivEXT was not loaded") }
    pub extern "C" fn ConvolutionParameterxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("ConvolutionParameterxOES was not loaded") }
    pub extern "C" fn ConvolutionParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("ConvolutionParameterxvOES was not loaded") }
    pub extern "C" fn CopyBufferSubData(_: GLenum, _: GLenum, _: GLintptr, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("CopyBufferSubData was not loaded") }
    pub extern "C" fn CopyColorSubTable(_: GLenum, _: GLsizei, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyColorSubTable was not loaded") }
    pub extern "C" fn CopyColorSubTableEXT(_: GLenum, _: GLsizei, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyColorSubTableEXT was not loaded") }
    pub extern "C" fn CopyColorTable(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyColorTable was not loaded") }
    pub extern "C" fn CopyColorTableSGI(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyColorTableSGI was not loaded") }
    pub extern "C" fn CopyConvolutionFilter1D(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyConvolutionFilter1D was not loaded") }
    pub extern "C" fn CopyConvolutionFilter1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyConvolutionFilter1DEXT was not loaded") }
    pub extern "C" fn CopyConvolutionFilter2D(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyConvolutionFilter2D was not loaded") }
    pub extern "C" fn CopyConvolutionFilter2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyConvolutionFilter2DEXT was not loaded") }
    pub extern "C" fn CopyImageSubData(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyImageSubData was not loaded") }
    pub extern "C" fn CopyImageSubDataNV(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyImageSubDataNV was not loaded") }
    pub extern "C" fn CopyMultiTexImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint) -> c_void { fail!("CopyMultiTexImage1DEXT was not loaded") }
    pub extern "C" fn CopyMultiTexImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("CopyMultiTexImage2DEXT was not loaded") }
    pub extern "C" fn CopyMultiTexSubImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyMultiTexSubImage1DEXT was not loaded") }
    pub extern "C" fn CopyMultiTexSubImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyMultiTexSubImage2DEXT was not loaded") }
    pub extern "C" fn CopyMultiTexSubImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyMultiTexSubImage3DEXT was not loaded") }
    pub extern "C" fn CopyPathNV(_: GLuint, _: GLuint) -> c_void { fail!("CopyPathNV was not loaded") }
    pub extern "C" fn CopyPixels(_: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum) -> c_void { fail!("CopyPixels was not loaded") }
    pub extern "C" fn CopyTexImage1D(_: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint) -> c_void { fail!("CopyTexImage1D was not loaded") }
    pub extern "C" fn CopyTexImage1DEXT(_: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint) -> c_void { fail!("CopyTexImage1DEXT was not loaded") }
    pub extern "C" fn CopyTexImage2D(_: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("CopyTexImage2D was not loaded") }
    pub extern "C" fn CopyTexImage2DEXT(_: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("CopyTexImage2DEXT was not loaded") }
    pub extern "C" fn CopyTexSubImage1D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyTexSubImage1D was not loaded") }
    pub extern "C" fn CopyTexSubImage1DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyTexSubImage1DEXT was not loaded") }
    pub extern "C" fn CopyTexSubImage2D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage2D was not loaded") }
    pub extern "C" fn CopyTexSubImage2DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage2DEXT was not loaded") }
    pub extern "C" fn CopyTexSubImage3D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage3D was not loaded") }
    pub extern "C" fn CopyTexSubImage3DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage3DEXT was not loaded") }
    pub extern "C" fn CopyTexSubImage3DOES(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTexSubImage3DOES was not loaded") }
    pub extern "C" fn CopyTextureImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint) -> c_void { fail!("CopyTextureImage1DEXT was not loaded") }
    pub extern "C" fn CopyTextureImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("CopyTextureImage2DEXT was not loaded") }
    pub extern "C" fn CopyTextureLevelsAPPLE(_: GLuint, _: GLuint, _: GLint, _: GLsizei) -> c_void { fail!("CopyTextureLevelsAPPLE was not loaded") }
    pub extern "C" fn CopyTextureSubImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei) -> c_void { fail!("CopyTextureSubImage1DEXT was not loaded") }
    pub extern "C" fn CopyTextureSubImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTextureSubImage2DEXT was not loaded") }
    pub extern "C" fn CopyTextureSubImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("CopyTextureSubImage3DEXT was not loaded") }
    pub extern "C" fn CoverFillPathInstancedNV(_: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("CoverFillPathInstancedNV was not loaded") }
    pub extern "C" fn CoverFillPathNV(_: GLuint, _: GLenum) -> c_void { fail!("CoverFillPathNV was not loaded") }
    pub extern "C" fn CoverStrokePathInstancedNV(_: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("CoverStrokePathInstancedNV was not loaded") }
    pub extern "C" fn CoverStrokePathNV(_: GLuint, _: GLenum) -> c_void { fail!("CoverStrokePathNV was not loaded") }
    pub extern "C" fn CoverageMaskNV(_: GLboolean) -> c_void { fail!("CoverageMaskNV was not loaded") }
    pub extern "C" fn CoverageOperationNV(_: GLenum) -> c_void { fail!("CoverageOperationNV was not loaded") }
    pub extern "C" fn CreateProgram() -> GLuint { fail!("CreateProgram was not loaded") }
    pub extern "C" fn CreateProgramObjectARB() -> GLhandleARB { fail!("CreateProgramObjectARB was not loaded") }
    pub extern "C" fn CreateShader(_: GLenum) -> GLuint { fail!("CreateShader was not loaded") }
    pub extern "C" fn CreateShaderObjectARB(_: GLenum) -> GLhandleARB { fail!("CreateShaderObjectARB was not loaded") }
    pub extern "C" fn CreateShaderProgramEXT(_: GLenum, _: *GLchar) -> GLuint { fail!("CreateShaderProgramEXT was not loaded") }
    pub extern "C" fn CreateShaderProgramv(_: GLenum, _: GLsizei, _: **GLchar) -> GLuint { fail!("CreateShaderProgramv was not loaded") }
    pub extern "C" fn CreateShaderProgramvEXT(_: GLenum, _: GLsizei, _: **GLchar) -> GLuint { fail!("CreateShaderProgramvEXT was not loaded") }
    pub extern "C" fn CreateSyncFromCLeventARB(_: *_cl_context, _: *_cl_event, _: GLbitfield) -> GLsync { fail!("CreateSyncFromCLeventARB was not loaded") }
    pub extern "C" fn CullFace(_: GLenum) -> c_void { fail!("CullFace was not loaded") }
    pub extern "C" fn CullParameterdvEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("CullParameterdvEXT was not loaded") }
    pub extern "C" fn CullParameterfvEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("CullParameterfvEXT was not loaded") }
    pub extern "C" fn CurrentPaletteMatrixARB(_: GLint) -> c_void { fail!("CurrentPaletteMatrixARB was not loaded") }
    pub extern "C" fn CurrentPaletteMatrixOES(_: GLuint) -> c_void { fail!("CurrentPaletteMatrixOES was not loaded") }
    pub extern "C" fn DebugMessageCallback(_: GLDEBUGPROC, _: *c_void) -> c_void { fail!("DebugMessageCallback was not loaded") }
    pub extern "C" fn DebugMessageCallbackAMD(_: GLDEBUGPROCAMD, _: *c_void) -> c_void { fail!("DebugMessageCallbackAMD was not loaded") }
    pub extern "C" fn DebugMessageCallbackARB(_: GLDEBUGPROCARB, _: *c_void) -> c_void { fail!("DebugMessageCallbackARB was not loaded") }
    pub extern "C" fn DebugMessageCallbackKHR(_: GLDEBUGPROCKHR, _: *c_void) -> c_void { fail!("DebugMessageCallbackKHR was not loaded") }
    pub extern "C" fn DebugMessageControl(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLuint, _: GLboolean) -> c_void { fail!("DebugMessageControl was not loaded") }
    pub extern "C" fn DebugMessageControlARB(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLuint, _: GLboolean) -> c_void { fail!("DebugMessageControlARB was not loaded") }
    pub extern "C" fn DebugMessageControlKHR(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLuint, _: GLboolean) -> c_void { fail!("DebugMessageControlKHR was not loaded") }
    pub extern "C" fn DebugMessageEnableAMD(_: GLenum, _: GLenum, _: GLsizei, _: *GLuint, _: GLboolean) -> c_void { fail!("DebugMessageEnableAMD was not loaded") }
    pub extern "C" fn DebugMessageInsert(_: GLenum, _: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: *GLchar) -> c_void { fail!("DebugMessageInsert was not loaded") }
    pub extern "C" fn DebugMessageInsertAMD(_: GLenum, _: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("DebugMessageInsertAMD was not loaded") }
    pub extern "C" fn DebugMessageInsertARB(_: GLenum, _: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: *GLchar) -> c_void { fail!("DebugMessageInsertARB was not loaded") }
    pub extern "C" fn DebugMessageInsertKHR(_: GLenum, _: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: *GLchar) -> c_void { fail!("DebugMessageInsertKHR was not loaded") }
    pub extern "C" fn DeformSGIX(_: GLbitfield) -> c_void { fail!("DeformSGIX was not loaded") }
    pub extern "C" fn DeformationMap3dSGIX(_: GLenum, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("DeformationMap3dSGIX was not loaded") }
    pub extern "C" fn DeformationMap3fSGIX(_: GLenum, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("DeformationMap3fSGIX was not loaded") }
    pub extern "C" fn DeleteAsyncMarkersSGIX(_: GLuint, _: GLsizei) -> c_void { fail!("DeleteAsyncMarkersSGIX was not loaded") }
    pub extern "C" fn DeleteBuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteBuffers was not loaded") }
    pub extern "C" fn DeleteBuffersARB(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteBuffersARB was not loaded") }
    pub extern "C" fn DeleteFencesAPPLE(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFencesAPPLE was not loaded") }
    pub extern "C" fn DeleteFencesNV(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFencesNV was not loaded") }
    pub extern "C" fn DeleteFragmentShaderATI(_: GLuint) -> c_void { fail!("DeleteFragmentShaderATI was not loaded") }
    pub extern "C" fn DeleteFramebuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFramebuffers was not loaded") }
    pub extern "C" fn DeleteFramebuffersEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFramebuffersEXT was not loaded") }
    pub extern "C" fn DeleteFramebuffersOES(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteFramebuffersOES was not loaded") }
    pub extern "C" fn DeleteLists(_: GLuint, _: GLsizei) -> c_void { fail!("DeleteLists was not loaded") }
    pub extern "C" fn DeleteNamedStringARB(_: GLint, _: *GLchar) -> c_void { fail!("DeleteNamedStringARB was not loaded") }
    pub extern "C" fn DeleteNamesAMD(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("DeleteNamesAMD was not loaded") }
    pub extern "C" fn DeleteObjectARB(_: GLhandleARB) -> c_void { fail!("DeleteObjectARB was not loaded") }
    pub extern "C" fn DeleteOcclusionQueriesNV(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteOcclusionQueriesNV was not loaded") }
    pub extern "C" fn DeletePathsNV(_: GLuint, _: GLsizei) -> c_void { fail!("DeletePathsNV was not loaded") }
    pub extern "C" fn DeletePerfMonitorsAMD(_: GLsizei, _: *GLuint) -> c_void { fail!("DeletePerfMonitorsAMD was not loaded") }
    pub extern "C" fn DeleteProgram(_: GLuint) -> c_void { fail!("DeleteProgram was not loaded") }
    pub extern "C" fn DeleteProgramPipelines(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteProgramPipelines was not loaded") }
    pub extern "C" fn DeleteProgramPipelinesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteProgramPipelinesEXT was not loaded") }
    pub extern "C" fn DeleteProgramsARB(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteProgramsARB was not loaded") }
    pub extern "C" fn DeleteProgramsNV(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteProgramsNV was not loaded") }
    pub extern "C" fn DeleteQueries(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteQueries was not loaded") }
    pub extern "C" fn DeleteQueriesARB(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteQueriesARB was not loaded") }
    pub extern "C" fn DeleteQueriesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteQueriesEXT was not loaded") }
    pub extern "C" fn DeleteRenderbuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteRenderbuffers was not loaded") }
    pub extern "C" fn DeleteRenderbuffersEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteRenderbuffersEXT was not loaded") }
    pub extern "C" fn DeleteRenderbuffersOES(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteRenderbuffersOES was not loaded") }
    pub extern "C" fn DeleteSamplers(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteSamplers was not loaded") }
    pub extern "C" fn DeleteShader(_: GLuint) -> c_void { fail!("DeleteShader was not loaded") }
    pub extern "C" fn DeleteSync(_: GLsync) -> c_void { fail!("DeleteSync was not loaded") }
    pub extern "C" fn DeleteSyncAPPLE(_: GLsync) -> c_void { fail!("DeleteSyncAPPLE was not loaded") }
    pub extern "C" fn DeleteTextures(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteTextures was not loaded") }
    pub extern "C" fn DeleteTexturesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteTexturesEXT was not loaded") }
    pub extern "C" fn DeleteTransformFeedbacks(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteTransformFeedbacks was not loaded") }
    pub extern "C" fn DeleteTransformFeedbacksNV(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteTransformFeedbacksNV was not loaded") }
    pub extern "C" fn DeleteVertexArrays(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteVertexArrays was not loaded") }
    pub extern "C" fn DeleteVertexArraysAPPLE(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteVertexArraysAPPLE was not loaded") }
    pub extern "C" fn DeleteVertexArraysOES(_: GLsizei, _: *GLuint) -> c_void { fail!("DeleteVertexArraysOES was not loaded") }
    pub extern "C" fn DeleteVertexShaderEXT(_: GLuint) -> c_void { fail!("DeleteVertexShaderEXT was not loaded") }
    pub extern "C" fn DepthBoundsEXT(_: GLclampd, _: GLclampd) -> c_void { fail!("DepthBoundsEXT was not loaded") }
    pub extern "C" fn DepthBoundsdNV(_: GLdouble, _: GLdouble) -> c_void { fail!("DepthBoundsdNV was not loaded") }
    pub extern "C" fn DepthFunc(_: GLenum) -> c_void { fail!("DepthFunc was not loaded") }
    pub extern "C" fn DepthMask(_: GLboolean) -> c_void { fail!("DepthMask was not loaded") }
    pub extern "C" fn DepthRange(_: GLdouble, _: GLdouble) -> c_void { fail!("DepthRange was not loaded") }
    pub extern "C" fn DepthRangeArrayv(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("DepthRangeArrayv was not loaded") }
    pub extern "C" fn DepthRangeIndexed(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("DepthRangeIndexed was not loaded") }
    pub extern "C" fn DepthRangedNV(_: GLdouble, _: GLdouble) -> c_void { fail!("DepthRangedNV was not loaded") }
    pub extern "C" fn DepthRangef(_: GLfloat, _: GLfloat) -> c_void { fail!("DepthRangef was not loaded") }
    pub extern "C" fn DepthRangefOES(_: GLclampf, _: GLclampf) -> c_void { fail!("DepthRangefOES was not loaded") }
    pub extern "C" fn DepthRangex(_: GLfixed, _: GLfixed) -> c_void { fail!("DepthRangex was not loaded") }
    pub extern "C" fn DepthRangexOES(_: GLfixed, _: GLfixed) -> c_void { fail!("DepthRangexOES was not loaded") }
    pub extern "C" fn DetachObjectARB(_: GLhandleARB, _: GLhandleARB) -> c_void { fail!("DetachObjectARB was not loaded") }
    pub extern "C" fn DetachShader(_: GLuint, _: GLuint) -> c_void { fail!("DetachShader was not loaded") }
    pub extern "C" fn DetailTexFuncSGIS(_: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("DetailTexFuncSGIS was not loaded") }
    pub extern "C" fn Disable(_: GLenum) -> c_void { fail!("Disable was not loaded") }
    pub extern "C" fn DisableClientState(_: GLenum) -> c_void { fail!("DisableClientState was not loaded") }
    pub extern "C" fn DisableClientStateIndexedEXT(_: GLenum, _: GLuint) -> c_void { fail!("DisableClientStateIndexedEXT was not loaded") }
    pub extern "C" fn DisableClientStateiEXT(_: GLenum, _: GLuint) -> c_void { fail!("DisableClientStateiEXT was not loaded") }
    pub extern "C" fn DisableDriverControlQCOM(_: GLuint) -> c_void { fail!("DisableDriverControlQCOM was not loaded") }
    pub extern "C" fn DisableIndexedEXT(_: GLenum, _: GLuint) -> c_void { fail!("DisableIndexedEXT was not loaded") }
    pub extern "C" fn DisableVariantClientStateEXT(_: GLuint) -> c_void { fail!("DisableVariantClientStateEXT was not loaded") }
    pub extern "C" fn DisableVertexArrayAttribEXT(_: GLuint, _: GLuint) -> c_void { fail!("DisableVertexArrayAttribEXT was not loaded") }
    pub extern "C" fn DisableVertexArrayEXT(_: GLuint, _: GLenum) -> c_void { fail!("DisableVertexArrayEXT was not loaded") }
    pub extern "C" fn DisableVertexAttribAPPLE(_: GLuint, _: GLenum) -> c_void { fail!("DisableVertexAttribAPPLE was not loaded") }
    pub extern "C" fn DisableVertexAttribArray(_: GLuint) -> c_void { fail!("DisableVertexAttribArray was not loaded") }
    pub extern "C" fn DisableVertexAttribArrayARB(_: GLuint) -> c_void { fail!("DisableVertexAttribArrayARB was not loaded") }
    pub extern "C" fn Disablei(_: GLenum, _: GLuint) -> c_void { fail!("Disablei was not loaded") }
    pub extern "C" fn DiscardFramebufferEXT(_: GLenum, _: GLsizei, _: *GLenum) -> c_void { fail!("DiscardFramebufferEXT was not loaded") }
    pub extern "C" fn DispatchCompute(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("DispatchCompute was not loaded") }
    pub extern "C" fn DispatchComputeGroupSizeARB(_: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("DispatchComputeGroupSizeARB was not loaded") }
    pub extern "C" fn DispatchComputeIndirect(_: GLintptr) -> c_void { fail!("DispatchComputeIndirect was not loaded") }
    pub extern "C" fn DrawArrays(_: GLenum, _: GLint, _: GLsizei) -> c_void { fail!("DrawArrays was not loaded") }
    pub extern "C" fn DrawArraysEXT(_: GLenum, _: GLint, _: GLsizei) -> c_void { fail!("DrawArraysEXT was not loaded") }
    pub extern "C" fn DrawArraysIndirect(_: GLenum, _: *GLvoid) -> c_void { fail!("DrawArraysIndirect was not loaded") }
    pub extern "C" fn DrawArraysInstanced(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstanced was not loaded") }
    pub extern "C" fn DrawArraysInstancedANGLE(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstancedANGLE was not loaded") }
    pub extern "C" fn DrawArraysInstancedARB(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstancedARB was not loaded") }
    pub extern "C" fn DrawArraysInstancedBaseInstance(_: GLenum, _: GLint, _: GLsizei, _: GLsizei, _: GLuint) -> c_void { fail!("DrawArraysInstancedBaseInstance was not loaded") }
    pub extern "C" fn DrawArraysInstancedEXT(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstancedEXT was not loaded") }
    pub extern "C" fn DrawArraysInstancedNV(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawArraysInstancedNV was not loaded") }
    pub extern "C" fn DrawBuffer(_: GLenum) -> c_void { fail!("DrawBuffer was not loaded") }
    pub extern "C" fn DrawBuffers(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffers was not loaded") }
    pub extern "C" fn DrawBuffersARB(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffersARB was not loaded") }
    pub extern "C" fn DrawBuffersATI(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffersATI was not loaded") }
    pub extern "C" fn DrawBuffersEXT(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffersEXT was not loaded") }
    pub extern "C" fn DrawBuffersIndexedEXT(_: GLint, _: *GLenum, _: *GLint) -> c_void { fail!("DrawBuffersIndexedEXT was not loaded") }
    pub extern "C" fn DrawBuffersNV(_: GLsizei, _: *GLenum) -> c_void { fail!("DrawBuffersNV was not loaded") }
    pub extern "C" fn DrawElementArrayAPPLE(_: GLenum, _: GLint, _: GLsizei) -> c_void { fail!("DrawElementArrayAPPLE was not loaded") }
    pub extern "C" fn DrawElementArrayATI(_: GLenum, _: GLsizei) -> c_void { fail!("DrawElementArrayATI was not loaded") }
    pub extern "C" fn DrawElements(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawElements was not loaded") }
    pub extern "C" fn DrawElementsBaseVertex(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLint) -> c_void { fail!("DrawElementsBaseVertex was not loaded") }
    pub extern "C" fn DrawElementsIndirect(_: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawElementsIndirect was not loaded") }
    pub extern "C" fn DrawElementsInstanced(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("DrawElementsInstanced was not loaded") }
    pub extern "C" fn DrawElementsInstancedANGLE(_: GLenum, _: GLsizei, _: GLenum, _: *c_void, _: GLsizei) -> c_void { fail!("DrawElementsInstancedANGLE was not loaded") }
    pub extern "C" fn DrawElementsInstancedARB(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("DrawElementsInstancedARB was not loaded") }
    pub extern "C" fn DrawElementsInstancedBaseInstance(_: GLenum, _: GLsizei, _: GLenum, _: *c_void, _: GLsizei, _: GLuint) -> c_void { fail!("DrawElementsInstancedBaseInstance was not loaded") }
    pub extern "C" fn DrawElementsInstancedBaseVertex(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei, _: GLint) -> c_void { fail!("DrawElementsInstancedBaseVertex was not loaded") }
    pub extern "C" fn DrawElementsInstancedBaseVertexBaseInstance(_: GLenum, _: GLsizei, _: GLenum, _: *c_void, _: GLsizei, _: GLint, _: GLuint) -> c_void { fail!("DrawElementsInstancedBaseVertexBaseInstance was not loaded") }
    pub extern "C" fn DrawElementsInstancedEXT(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("DrawElementsInstancedEXT was not loaded") }
    pub extern "C" fn DrawElementsInstancedNV(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("DrawElementsInstancedNV was not loaded") }
    pub extern "C" fn DrawMeshArraysSUN(_: GLenum, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("DrawMeshArraysSUN was not loaded") }
    pub extern "C" fn DrawPixels(_: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawPixels was not loaded") }
    pub extern "C" fn DrawRangeElementArrayAPPLE(_: GLenum, _: GLuint, _: GLuint, _: GLint, _: GLsizei) -> c_void { fail!("DrawRangeElementArrayAPPLE was not loaded") }
    pub extern "C" fn DrawRangeElementArrayATI(_: GLenum, _: GLuint, _: GLuint, _: GLsizei) -> c_void { fail!("DrawRangeElementArrayATI was not loaded") }
    pub extern "C" fn DrawRangeElements(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawRangeElements was not loaded") }
    pub extern "C" fn DrawRangeElementsBaseVertex(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: GLenum, _: *GLvoid, _: GLint) -> c_void { fail!("DrawRangeElementsBaseVertex was not loaded") }
    pub extern "C" fn DrawRangeElementsEXT(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("DrawRangeElementsEXT was not loaded") }
    pub extern "C" fn DrawTexfOES(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("DrawTexfOES was not loaded") }
    pub extern "C" fn DrawTexfvOES(_: *GLfloat) -> c_void { fail!("DrawTexfvOES was not loaded") }
    pub extern "C" fn DrawTexiOES(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("DrawTexiOES was not loaded") }
    pub extern "C" fn DrawTexivOES(_: *GLint) -> c_void { fail!("DrawTexivOES was not loaded") }
    pub extern "C" fn DrawTexsOES(_: GLshort, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("DrawTexsOES was not loaded") }
    pub extern "C" fn DrawTexsvOES(_: *GLshort) -> c_void { fail!("DrawTexsvOES was not loaded") }
    pub extern "C" fn DrawTextureNV(_: GLuint, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("DrawTextureNV was not loaded") }
    pub extern "C" fn DrawTexxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("DrawTexxOES was not loaded") }
    pub extern "C" fn DrawTexxvOES(_: *GLfixed) -> c_void { fail!("DrawTexxvOES was not loaded") }
    pub extern "C" fn DrawTransformFeedback(_: GLenum, _: GLuint) -> c_void { fail!("DrawTransformFeedback was not loaded") }
    pub extern "C" fn DrawTransformFeedbackInstanced(_: GLenum, _: GLuint, _: GLsizei) -> c_void { fail!("DrawTransformFeedbackInstanced was not loaded") }
    pub extern "C" fn DrawTransformFeedbackNV(_: GLenum, _: GLuint) -> c_void { fail!("DrawTransformFeedbackNV was not loaded") }
    pub extern "C" fn DrawTransformFeedbackStream(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("DrawTransformFeedbackStream was not loaded") }
    pub extern "C" fn DrawTransformFeedbackStreamInstanced(_: GLenum, _: GLuint, _: GLuint, _: GLsizei) -> c_void { fail!("DrawTransformFeedbackStreamInstanced was not loaded") }
    pub extern "C" fn EGLImageTargetRenderbufferStorageOES(_: GLenum, _: GLeglImageOES) -> c_void { fail!("EGLImageTargetRenderbufferStorageOES was not loaded") }
    pub extern "C" fn EGLImageTargetTexture2DOES(_: GLenum, _: GLeglImageOES) -> c_void { fail!("EGLImageTargetTexture2DOES was not loaded") }
    pub extern "C" fn EdgeFlag(_: GLboolean) -> c_void { fail!("EdgeFlag was not loaded") }
    pub extern "C" fn EdgeFlagFormatNV(_: GLsizei) -> c_void { fail!("EdgeFlagFormatNV was not loaded") }
    pub extern "C" fn EdgeFlagPointer(_: GLsizei, _: *GLvoid) -> c_void { fail!("EdgeFlagPointer was not loaded") }
    pub extern "C" fn EdgeFlagPointerEXT(_: GLsizei, _: GLsizei, _: *GLboolean) -> c_void { fail!("EdgeFlagPointerEXT was not loaded") }
    pub extern "C" fn EdgeFlagPointerListIBM(_: GLint, _: **GLboolean, _: GLint) -> c_void { fail!("EdgeFlagPointerListIBM was not loaded") }
    pub extern "C" fn EdgeFlagv(_: *GLboolean) -> c_void { fail!("EdgeFlagv was not loaded") }
    pub extern "C" fn ElementPointerAPPLE(_: GLenum, _: *GLvoid) -> c_void { fail!("ElementPointerAPPLE was not loaded") }
    pub extern "C" fn ElementPointerATI(_: GLenum, _: *GLvoid) -> c_void { fail!("ElementPointerATI was not loaded") }
    pub extern "C" fn Enable(_: GLenum) -> c_void { fail!("Enable was not loaded") }
    pub extern "C" fn EnableClientState(_: GLenum) -> c_void { fail!("EnableClientState was not loaded") }
    pub extern "C" fn EnableClientStateIndexedEXT(_: GLenum, _: GLuint) -> c_void { fail!("EnableClientStateIndexedEXT was not loaded") }
    pub extern "C" fn EnableClientStateiEXT(_: GLenum, _: GLuint) -> c_void { fail!("EnableClientStateiEXT was not loaded") }
    pub extern "C" fn EnableDriverControlQCOM(_: GLuint) -> c_void { fail!("EnableDriverControlQCOM was not loaded") }
    pub extern "C" fn EnableIndexedEXT(_: GLenum, _: GLuint) -> c_void { fail!("EnableIndexedEXT was not loaded") }
    pub extern "C" fn EnableVariantClientStateEXT(_: GLuint) -> c_void { fail!("EnableVariantClientStateEXT was not loaded") }
    pub extern "C" fn EnableVertexArrayAttribEXT(_: GLuint, _: GLuint) -> c_void { fail!("EnableVertexArrayAttribEXT was not loaded") }
    pub extern "C" fn EnableVertexArrayEXT(_: GLuint, _: GLenum) -> c_void { fail!("EnableVertexArrayEXT was not loaded") }
    pub extern "C" fn EnableVertexAttribAPPLE(_: GLuint, _: GLenum) -> c_void { fail!("EnableVertexAttribAPPLE was not loaded") }
    pub extern "C" fn EnableVertexAttribArray(_: GLuint) -> c_void { fail!("EnableVertexAttribArray was not loaded") }
    pub extern "C" fn EnableVertexAttribArrayARB(_: GLuint) -> c_void { fail!("EnableVertexAttribArrayARB was not loaded") }
    pub extern "C" fn Enablei(_: GLenum, _: GLuint) -> c_void { fail!("Enablei was not loaded") }
    pub extern "C" fn End() -> c_void { fail!("End was not loaded") }
    pub extern "C" fn EndConditionalRender() -> c_void { fail!("EndConditionalRender was not loaded") }
    pub extern "C" fn EndConditionalRenderNV() -> c_void { fail!("EndConditionalRenderNV was not loaded") }
    pub extern "C" fn EndConditionalRenderNVX() -> c_void { fail!("EndConditionalRenderNVX was not loaded") }
    pub extern "C" fn EndFragmentShaderATI() -> c_void { fail!("EndFragmentShaderATI was not loaded") }
    pub extern "C" fn EndList() -> c_void { fail!("EndList was not loaded") }
    pub extern "C" fn EndOcclusionQueryNV() -> c_void { fail!("EndOcclusionQueryNV was not loaded") }
    pub extern "C" fn EndPerfMonitorAMD(_: GLuint) -> c_void { fail!("EndPerfMonitorAMD was not loaded") }
    pub extern "C" fn EndQuery(_: GLenum) -> c_void { fail!("EndQuery was not loaded") }
    pub extern "C" fn EndQueryARB(_: GLenum) -> c_void { fail!("EndQueryARB was not loaded") }
    pub extern "C" fn EndQueryEXT(_: GLenum) -> c_void { fail!("EndQueryEXT was not loaded") }
    pub extern "C" fn EndQueryIndexed(_: GLenum, _: GLuint) -> c_void { fail!("EndQueryIndexed was not loaded") }
    pub extern "C" fn EndTilingQCOM(_: GLbitfield) -> c_void { fail!("EndTilingQCOM was not loaded") }
    pub extern "C" fn EndTransformFeedback() -> c_void { fail!("EndTransformFeedback was not loaded") }
    pub extern "C" fn EndTransformFeedbackEXT() -> c_void { fail!("EndTransformFeedbackEXT was not loaded") }
    pub extern "C" fn EndTransformFeedbackNV() -> c_void { fail!("EndTransformFeedbackNV was not loaded") }
    pub extern "C" fn EndVertexShaderEXT() -> c_void { fail!("EndVertexShaderEXT was not loaded") }
    pub extern "C" fn EndVideoCaptureNV(_: GLuint) -> c_void { fail!("EndVideoCaptureNV was not loaded") }
    pub extern "C" fn EvalCoord1d(_: GLdouble) -> c_void { fail!("EvalCoord1d was not loaded") }
    pub extern "C" fn EvalCoord1dv(_: *GLdouble) -> c_void { fail!("EvalCoord1dv was not loaded") }
    pub extern "C" fn EvalCoord1f(_: GLfloat) -> c_void { fail!("EvalCoord1f was not loaded") }
    pub extern "C" fn EvalCoord1fv(_: *GLfloat) -> c_void { fail!("EvalCoord1fv was not loaded") }
    pub extern "C" fn EvalCoord1xOES(_: GLfixed) -> c_void { fail!("EvalCoord1xOES was not loaded") }
    pub extern "C" fn EvalCoord1xvOES(_: *GLfixed) -> c_void { fail!("EvalCoord1xvOES was not loaded") }
    pub extern "C" fn EvalCoord2d(_: GLdouble, _: GLdouble) -> c_void { fail!("EvalCoord2d was not loaded") }
    pub extern "C" fn EvalCoord2dv(_: *GLdouble) -> c_void { fail!("EvalCoord2dv was not loaded") }
    pub extern "C" fn EvalCoord2f(_: GLfloat, _: GLfloat) -> c_void { fail!("EvalCoord2f was not loaded") }
    pub extern "C" fn EvalCoord2fv(_: *GLfloat) -> c_void { fail!("EvalCoord2fv was not loaded") }
    pub extern "C" fn EvalCoord2xOES(_: GLfixed, _: GLfixed) -> c_void { fail!("EvalCoord2xOES was not loaded") }
    pub extern "C" fn EvalCoord2xvOES(_: *GLfixed) -> c_void { fail!("EvalCoord2xvOES was not loaded") }
    pub extern "C" fn EvalMapsNV(_: GLenum, _: GLenum) -> c_void { fail!("EvalMapsNV was not loaded") }
    pub extern "C" fn EvalMesh1(_: GLenum, _: GLint, _: GLint) -> c_void { fail!("EvalMesh1 was not loaded") }
    pub extern "C" fn EvalMesh2(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("EvalMesh2 was not loaded") }
    pub extern "C" fn EvalPoint1(_: GLint) -> c_void { fail!("EvalPoint1 was not loaded") }
    pub extern "C" fn EvalPoint2(_: GLint, _: GLint) -> c_void { fail!("EvalPoint2 was not loaded") }
    pub extern "C" fn ExecuteProgramNV(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("ExecuteProgramNV was not loaded") }
    pub extern "C" fn ExtGetBufferPointervQCOM(_: GLenum, _: **GLvoid) -> c_void { fail!("ExtGetBufferPointervQCOM was not loaded") }
    pub extern "C" fn ExtGetBuffersQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetBuffersQCOM was not loaded") }
    pub extern "C" fn ExtGetFramebuffersQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetFramebuffersQCOM was not loaded") }
    pub extern "C" fn ExtGetProgramBinarySourceQCOM(_: GLuint, _: GLenum, _: *GLchar, _: *GLint) -> c_void { fail!("ExtGetProgramBinarySourceQCOM was not loaded") }
    pub extern "C" fn ExtGetProgramsQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetProgramsQCOM was not loaded") }
    pub extern "C" fn ExtGetRenderbuffersQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetRenderbuffersQCOM was not loaded") }
    pub extern "C" fn ExtGetShadersQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetShadersQCOM was not loaded") }
    pub extern "C" fn ExtGetTexLevelParameterivQCOM(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: *GLint) -> c_void { fail!("ExtGetTexLevelParameterivQCOM was not loaded") }
    pub extern "C" fn ExtGetTexSubImageQCOM(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ExtGetTexSubImageQCOM was not loaded") }
    pub extern "C" fn ExtGetTexturesQCOM(_: *GLuint, _: GLint, _: *GLint) -> c_void { fail!("ExtGetTexturesQCOM was not loaded") }
    pub extern "C" fn ExtIsProgramBinaryQCOM(_: GLuint) -> GLboolean { fail!("ExtIsProgramBinaryQCOM was not loaded") }
    pub extern "C" fn ExtTexObjectStateOverrideiQCOM(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("ExtTexObjectStateOverrideiQCOM was not loaded") }
    pub extern "C" fn ExtractComponentEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ExtractComponentEXT was not loaded") }
    pub extern "C" fn FeedbackBuffer(_: GLsizei, _: GLenum, _: *GLfloat) -> c_void { fail!("FeedbackBuffer was not loaded") }
    pub extern "C" fn FeedbackBufferxOES(_: GLsizei, _: GLenum, _: *GLfixed) -> c_void { fail!("FeedbackBufferxOES was not loaded") }
    pub extern "C" fn FenceSync(_: GLenum, _: GLbitfield) -> GLsync { fail!("FenceSync was not loaded") }
    pub extern "C" fn FenceSyncAPPLE(_: GLenum, _: GLbitfield) -> GLsync { fail!("FenceSyncAPPLE was not loaded") }
    pub extern "C" fn FinalCombinerInputNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("FinalCombinerInputNV was not loaded") }
    pub extern "C" fn Finish() -> c_void { fail!("Finish was not loaded") }
    pub extern "C" fn FinishAsyncSGIX(_: *GLuint) -> GLint { fail!("FinishAsyncSGIX was not loaded") }
    pub extern "C" fn FinishFenceAPPLE(_: GLuint) -> c_void { fail!("FinishFenceAPPLE was not loaded") }
    pub extern "C" fn FinishFenceNV(_: GLuint) -> c_void { fail!("FinishFenceNV was not loaded") }
    pub extern "C" fn FinishObjectAPPLE(_: GLenum, _: GLint) -> c_void { fail!("FinishObjectAPPLE was not loaded") }
    pub extern "C" fn FinishTextureSUNX() -> c_void { fail!("FinishTextureSUNX was not loaded") }
    pub extern "C" fn Flush() -> c_void { fail!("Flush was not loaded") }
    pub extern "C" fn FlushMappedBufferRange(_: GLenum, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("FlushMappedBufferRange was not loaded") }
    pub extern "C" fn FlushMappedBufferRangeAPPLE(_: GLenum, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("FlushMappedBufferRangeAPPLE was not loaded") }
    pub extern "C" fn FlushMappedBufferRangeEXT(_: GLenum, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("FlushMappedBufferRangeEXT was not loaded") }
    pub extern "C" fn FlushMappedNamedBufferRangeEXT(_: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("FlushMappedNamedBufferRangeEXT was not loaded") }
    pub extern "C" fn FlushPixelDataRangeNV(_: GLenum) -> c_void { fail!("FlushPixelDataRangeNV was not loaded") }
    pub extern "C" fn FlushRasterSGIX() -> c_void { fail!("FlushRasterSGIX was not loaded") }
    pub extern "C" fn FlushStaticDataIBM(_: GLenum) -> c_void { fail!("FlushStaticDataIBM was not loaded") }
    pub extern "C" fn FlushVertexArrayRangeAPPLE(_: GLsizei, _: *GLvoid) -> c_void { fail!("FlushVertexArrayRangeAPPLE was not loaded") }
    pub extern "C" fn FlushVertexArrayRangeNV() -> c_void { fail!("FlushVertexArrayRangeNV was not loaded") }
    pub extern "C" fn FogCoordFormatNV(_: GLenum, _: GLsizei) -> c_void { fail!("FogCoordFormatNV was not loaded") }
    pub extern "C" fn FogCoordPointer(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("FogCoordPointer was not loaded") }
    pub extern "C" fn FogCoordPointerEXT(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("FogCoordPointerEXT was not loaded") }
    pub extern "C" fn FogCoordPointerListIBM(_: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("FogCoordPointerListIBM was not loaded") }
    pub extern "C" fn FogCoordd(_: GLdouble) -> c_void { fail!("FogCoordd was not loaded") }
    pub extern "C" fn FogCoorddEXT(_: GLdouble) -> c_void { fail!("FogCoorddEXT was not loaded") }
    pub extern "C" fn FogCoorddv(_: *GLdouble) -> c_void { fail!("FogCoorddv was not loaded") }
    pub extern "C" fn FogCoorddvEXT(_: *GLdouble) -> c_void { fail!("FogCoorddvEXT was not loaded") }
    pub extern "C" fn FogCoordf(_: GLfloat) -> c_void { fail!("FogCoordf was not loaded") }
    pub extern "C" fn FogCoordfEXT(_: GLfloat) -> c_void { fail!("FogCoordfEXT was not loaded") }
    pub extern "C" fn FogCoordfv(_: *GLfloat) -> c_void { fail!("FogCoordfv was not loaded") }
    pub extern "C" fn FogCoordfvEXT(_: *GLfloat) -> c_void { fail!("FogCoordfvEXT was not loaded") }
    pub extern "C" fn FogCoordhNV(_: GLhalfNV) -> c_void { fail!("FogCoordhNV was not loaded") }
    pub extern "C" fn FogCoordhvNV(_: *GLhalfNV) -> c_void { fail!("FogCoordhvNV was not loaded") }
    pub extern "C" fn FogFuncSGIS(_: GLsizei, _: *GLfloat) -> c_void { fail!("FogFuncSGIS was not loaded") }
    pub extern "C" fn Fogf(_: GLenum, _: GLfloat) -> c_void { fail!("Fogf was not loaded") }
    pub extern "C" fn Fogfv(_: GLenum, _: *GLfloat) -> c_void { fail!("Fogfv was not loaded") }
    pub extern "C" fn Fogi(_: GLenum, _: GLint) -> c_void { fail!("Fogi was not loaded") }
    pub extern "C" fn Fogiv(_: GLenum, _: *GLint) -> c_void { fail!("Fogiv was not loaded") }
    pub extern "C" fn Fogx(_: GLenum, _: GLfixed) -> c_void { fail!("Fogx was not loaded") }
    pub extern "C" fn FogxOES(_: GLenum, _: GLfixed) -> c_void { fail!("FogxOES was not loaded") }
    pub extern "C" fn Fogxv(_: GLenum, _: *GLfixed) -> c_void { fail!("Fogxv was not loaded") }
    pub extern "C" fn FogxvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("FogxvOES was not loaded") }
    pub extern "C" fn FragmentColorMaterialSGIX(_: GLenum, _: GLenum) -> c_void { fail!("FragmentColorMaterialSGIX was not loaded") }
    pub extern "C" fn FragmentLightModelfSGIX(_: GLenum, _: GLfloat) -> c_void { fail!("FragmentLightModelfSGIX was not loaded") }
    pub extern "C" fn FragmentLightModelfvSGIX(_: GLenum, _: *GLfloat) -> c_void { fail!("FragmentLightModelfvSGIX was not loaded") }
    pub extern "C" fn FragmentLightModeliSGIX(_: GLenum, _: GLint) -> c_void { fail!("FragmentLightModeliSGIX was not loaded") }
    pub extern "C" fn FragmentLightModelivSGIX(_: GLenum, _: *GLint) -> c_void { fail!("FragmentLightModelivSGIX was not loaded") }
    pub extern "C" fn FragmentLightfSGIX(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("FragmentLightfSGIX was not loaded") }
    pub extern "C" fn FragmentLightfvSGIX(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("FragmentLightfvSGIX was not loaded") }
    pub extern "C" fn FragmentLightiSGIX(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("FragmentLightiSGIX was not loaded") }
    pub extern "C" fn FragmentLightivSGIX(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("FragmentLightivSGIX was not loaded") }
    pub extern "C" fn FragmentMaterialfSGIX(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("FragmentMaterialfSGIX was not loaded") }
    pub extern "C" fn FragmentMaterialfvSGIX(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("FragmentMaterialfvSGIX was not loaded") }
    pub extern "C" fn FragmentMaterialiSGIX(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("FragmentMaterialiSGIX was not loaded") }
    pub extern "C" fn FragmentMaterialivSGIX(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("FragmentMaterialivSGIX was not loaded") }
    pub extern "C" fn FrameTerminatorGREMEDY() -> c_void { fail!("FrameTerminatorGREMEDY was not loaded") }
    pub extern "C" fn FrameZoomSGIX(_: GLint) -> c_void { fail!("FrameZoomSGIX was not loaded") }
    pub extern "C" fn FramebufferDrawBufferEXT(_: GLuint, _: GLenum) -> c_void { fail!("FramebufferDrawBufferEXT was not loaded") }
    pub extern "C" fn FramebufferDrawBuffersEXT(_: GLuint, _: GLsizei, _: *GLenum) -> c_void { fail!("FramebufferDrawBuffersEXT was not loaded") }
    pub extern "C" fn FramebufferParameteri(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("FramebufferParameteri was not loaded") }
    pub extern "C" fn FramebufferReadBufferEXT(_: GLuint, _: GLenum) -> c_void { fail!("FramebufferReadBufferEXT was not loaded") }
    pub extern "C" fn FramebufferRenderbuffer(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("FramebufferRenderbuffer was not loaded") }
    pub extern "C" fn FramebufferRenderbufferEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("FramebufferRenderbufferEXT was not loaded") }
    pub extern "C" fn FramebufferRenderbufferOES(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("FramebufferRenderbufferOES was not loaded") }
    pub extern "C" fn FramebufferTexture(_: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture was not loaded") }
    pub extern "C" fn FramebufferTexture1D(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture1D was not loaded") }
    pub extern "C" fn FramebufferTexture1DEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture1DEXT was not loaded") }
    pub extern "C" fn FramebufferTexture2D(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture2D was not loaded") }
    pub extern "C" fn FramebufferTexture2DEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture2DEXT was not loaded") }
    pub extern "C" fn FramebufferTexture2DMultisampleEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLsizei) -> c_void { fail!("FramebufferTexture2DMultisampleEXT was not loaded") }
    pub extern "C" fn FramebufferTexture2DMultisampleIMG(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLsizei) -> c_void { fail!("FramebufferTexture2DMultisampleIMG was not loaded") }
    pub extern "C" fn FramebufferTexture2DOES(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTexture2DOES was not loaded") }
    pub extern "C" fn FramebufferTexture3D(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTexture3D was not loaded") }
    pub extern "C" fn FramebufferTexture3DEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTexture3DEXT was not loaded") }
    pub extern "C" fn FramebufferTexture3DOES(_: GLenum, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTexture3DOES was not loaded") }
    pub extern "C" fn FramebufferTextureARB(_: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTextureARB was not loaded") }
    pub extern "C" fn FramebufferTextureEXT(_: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("FramebufferTextureEXT was not loaded") }
    pub extern "C" fn FramebufferTextureFaceARB(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLenum) -> c_void { fail!("FramebufferTextureFaceARB was not loaded") }
    pub extern "C" fn FramebufferTextureFaceEXT(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLenum) -> c_void { fail!("FramebufferTextureFaceEXT was not loaded") }
    pub extern "C" fn FramebufferTextureLayer(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTextureLayer was not loaded") }
    pub extern "C" fn FramebufferTextureLayerARB(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTextureLayerARB was not loaded") }
    pub extern "C" fn FramebufferTextureLayerEXT(_: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("FramebufferTextureLayerEXT was not loaded") }
    pub extern "C" fn FreeObjectBufferATI(_: GLuint) -> c_void { fail!("FreeObjectBufferATI was not loaded") }
    pub extern "C" fn FrontFace(_: GLenum) -> c_void { fail!("FrontFace was not loaded") }
    pub extern "C" fn Frustum(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Frustum was not loaded") }
    pub extern "C" fn Frustumf(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Frustumf was not loaded") }
    pub extern "C" fn FrustumfOES(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("FrustumfOES was not loaded") }
    pub extern "C" fn Frustumx(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Frustumx was not loaded") }
    pub extern "C" fn FrustumxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("FrustumxOES was not loaded") }
    pub extern "C" fn GenAsyncMarkersSGIX(_: GLsizei) -> GLuint { fail!("GenAsyncMarkersSGIX was not loaded") }
    pub extern "C" fn GenBuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("GenBuffers was not loaded") }
    pub extern "C" fn GenBuffersARB(_: GLsizei, _: *GLuint) -> c_void { fail!("GenBuffersARB was not loaded") }
    pub extern "C" fn GenFencesAPPLE(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFencesAPPLE was not loaded") }
    pub extern "C" fn GenFencesNV(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFencesNV was not loaded") }
    pub extern "C" fn GenFragmentShadersATI(_: GLuint) -> GLuint { fail!("GenFragmentShadersATI was not loaded") }
    pub extern "C" fn GenFramebuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFramebuffers was not loaded") }
    pub extern "C" fn GenFramebuffersEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFramebuffersEXT was not loaded") }
    pub extern "C" fn GenFramebuffersOES(_: GLsizei, _: *GLuint) -> c_void { fail!("GenFramebuffersOES was not loaded") }
    pub extern "C" fn GenLists(_: GLsizei) -> GLuint { fail!("GenLists was not loaded") }
    pub extern "C" fn GenNamesAMD(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GenNamesAMD was not loaded") }
    pub extern "C" fn GenOcclusionQueriesNV(_: GLsizei, _: *GLuint) -> c_void { fail!("GenOcclusionQueriesNV was not loaded") }
    pub extern "C" fn GenPathsNV(_: GLsizei) -> GLuint { fail!("GenPathsNV was not loaded") }
    pub extern "C" fn GenPerfMonitorsAMD(_: GLsizei, _: *GLuint) -> c_void { fail!("GenPerfMonitorsAMD was not loaded") }
    pub extern "C" fn GenProgramPipelines(_: GLsizei, _: *GLuint) -> c_void { fail!("GenProgramPipelines was not loaded") }
    pub extern "C" fn GenProgramPipelinesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenProgramPipelinesEXT was not loaded") }
    pub extern "C" fn GenProgramsARB(_: GLsizei, _: *GLuint) -> c_void { fail!("GenProgramsARB was not loaded") }
    pub extern "C" fn GenProgramsNV(_: GLsizei, _: *GLuint) -> c_void { fail!("GenProgramsNV was not loaded") }
    pub extern "C" fn GenQueries(_: GLsizei, _: *GLuint) -> c_void { fail!("GenQueries was not loaded") }
    pub extern "C" fn GenQueriesARB(_: GLsizei, _: *GLuint) -> c_void { fail!("GenQueriesARB was not loaded") }
    pub extern "C" fn GenQueriesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenQueriesEXT was not loaded") }
    pub extern "C" fn GenRenderbuffers(_: GLsizei, _: *GLuint) -> c_void { fail!("GenRenderbuffers was not loaded") }
    pub extern "C" fn GenRenderbuffersEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenRenderbuffersEXT was not loaded") }
    pub extern "C" fn GenRenderbuffersOES(_: GLsizei, _: *GLuint) -> c_void { fail!("GenRenderbuffersOES was not loaded") }
    pub extern "C" fn GenSamplers(_: GLsizei, _: *GLuint) -> c_void { fail!("GenSamplers was not loaded") }
    pub extern "C" fn GenSymbolsEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> GLuint { fail!("GenSymbolsEXT was not loaded") }
    pub extern "C" fn GenTextures(_: GLsizei, _: *GLuint) -> c_void { fail!("GenTextures was not loaded") }
    pub extern "C" fn GenTexturesEXT(_: GLsizei, _: *GLuint) -> c_void { fail!("GenTexturesEXT was not loaded") }
    pub extern "C" fn GenTransformFeedbacks(_: GLsizei, _: *GLuint) -> c_void { fail!("GenTransformFeedbacks was not loaded") }
    pub extern "C" fn GenTransformFeedbacksNV(_: GLsizei, _: *GLuint) -> c_void { fail!("GenTransformFeedbacksNV was not loaded") }
    pub extern "C" fn GenVertexArrays(_: GLsizei, _: *GLuint) -> c_void { fail!("GenVertexArrays was not loaded") }
    pub extern "C" fn GenVertexArraysAPPLE(_: GLsizei, _: *GLuint) -> c_void { fail!("GenVertexArraysAPPLE was not loaded") }
    pub extern "C" fn GenVertexArraysOES(_: GLsizei, _: *GLuint) -> c_void { fail!("GenVertexArraysOES was not loaded") }
    pub extern "C" fn GenVertexShadersEXT(_: GLuint) -> GLuint { fail!("GenVertexShadersEXT was not loaded") }
    pub extern "C" fn GenerateMipmap(_: GLenum) -> c_void { fail!("GenerateMipmap was not loaded") }
    pub extern "C" fn GenerateMipmapEXT(_: GLenum) -> c_void { fail!("GenerateMipmapEXT was not loaded") }
    pub extern "C" fn GenerateMipmapOES(_: GLenum) -> c_void { fail!("GenerateMipmapOES was not loaded") }
    pub extern "C" fn GenerateMultiTexMipmapEXT(_: GLenum, _: GLenum) -> c_void { fail!("GenerateMultiTexMipmapEXT was not loaded") }
    pub extern "C" fn GenerateTextureMipmapEXT(_: GLuint, _: GLenum) -> c_void { fail!("GenerateTextureMipmapEXT was not loaded") }
    pub extern "C" fn GetActiveAtomicCounterBufferiv(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetActiveAtomicCounterBufferiv was not loaded") }
    pub extern "C" fn GetActiveAttrib(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLint, _: *GLenum, _: *GLchar) -> c_void { fail!("GetActiveAttrib was not loaded") }
    pub extern "C" fn GetActiveAttribARB(_: GLhandleARB, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLint, _: *GLenum, _: *GLcharARB) -> c_void { fail!("GetActiveAttribARB was not loaded") }
    pub extern "C" fn GetActiveSubroutineName(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetActiveSubroutineName was not loaded") }
    pub extern "C" fn GetActiveSubroutineUniformName(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetActiveSubroutineUniformName was not loaded") }
    pub extern "C" fn GetActiveSubroutineUniformiv(_: GLuint, _: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetActiveSubroutineUniformiv was not loaded") }
    pub extern "C" fn GetActiveUniform(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLint, _: *GLenum, _: *GLchar) -> c_void { fail!("GetActiveUniform was not loaded") }
    pub extern "C" fn GetActiveUniformARB(_: GLhandleARB, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLint, _: *GLenum, _: *GLcharARB) -> c_void { fail!("GetActiveUniformARB was not loaded") }
    pub extern "C" fn GetActiveUniformBlockName(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetActiveUniformBlockName was not loaded") }
    pub extern "C" fn GetActiveUniformBlockiv(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetActiveUniformBlockiv was not loaded") }
    pub extern "C" fn GetActiveUniformName(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetActiveUniformName was not loaded") }
    pub extern "C" fn GetActiveUniformsiv(_: GLuint, _: GLsizei, _: *GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetActiveUniformsiv was not loaded") }
    pub extern "C" fn GetActiveVaryingNV(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLsizei, _: *GLenum, _: *GLchar) -> c_void { fail!("GetActiveVaryingNV was not loaded") }
    pub extern "C" fn GetArrayObjectfvATI(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetArrayObjectfvATI was not loaded") }
    pub extern "C" fn GetArrayObjectivATI(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetArrayObjectivATI was not loaded") }
    pub extern "C" fn GetAttachedObjectsARB(_: GLhandleARB, _: GLsizei, _: *GLsizei, _: *GLhandleARB) -> c_void { fail!("GetAttachedObjectsARB was not loaded") }
    pub extern "C" fn GetAttachedShaders(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLuint) -> c_void { fail!("GetAttachedShaders was not loaded") }
    pub extern "C" fn GetAttribLocation(_: GLuint, _: *GLchar) -> GLint { fail!("GetAttribLocation was not loaded") }
    pub extern "C" fn GetAttribLocationARB(_: GLhandleARB, _: *GLcharARB) -> GLint { fail!("GetAttribLocationARB was not loaded") }
    pub extern "C" fn GetBooleanIndexedvEXT(_: GLenum, _: GLuint, _: *GLboolean) -> c_void { fail!("GetBooleanIndexedvEXT was not loaded") }
    pub extern "C" fn GetBooleani_v(_: GLenum, _: GLuint, _: *GLboolean) -> c_void { fail!("GetBooleani_v was not loaded") }
    pub extern "C" fn GetBooleanv(_: GLenum, _: *GLboolean) -> c_void { fail!("GetBooleanv was not loaded") }
    pub extern "C" fn GetBufferParameteri64v(_: GLenum, _: GLenum, _: *GLint64) -> c_void { fail!("GetBufferParameteri64v was not loaded") }
    pub extern "C" fn GetBufferParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetBufferParameteriv was not loaded") }
    pub extern "C" fn GetBufferParameterivARB(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetBufferParameterivARB was not loaded") }
    pub extern "C" fn GetBufferParameterui64vNV(_: GLenum, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetBufferParameterui64vNV was not loaded") }
    pub extern "C" fn GetBufferPointerv(_: GLenum, _: GLenum, _: **GLvoid) -> c_void { fail!("GetBufferPointerv was not loaded") }
    pub extern "C" fn GetBufferPointervARB(_: GLenum, _: GLenum, _: **GLvoid) -> c_void { fail!("GetBufferPointervARB was not loaded") }
    pub extern "C" fn GetBufferPointervOES(_: GLenum, _: GLenum, _: **GLvoid) -> c_void { fail!("GetBufferPointervOES was not loaded") }
    pub extern "C" fn GetBufferSubData(_: GLenum, _: GLintptr, _: GLsizeiptr, _: *GLvoid) -> c_void { fail!("GetBufferSubData was not loaded") }
    pub extern "C" fn GetBufferSubDataARB(_: GLenum, _: GLintptrARB, _: GLsizeiptrARB, _: *GLvoid) -> c_void { fail!("GetBufferSubDataARB was not loaded") }
    pub extern "C" fn GetClipPlane(_: GLenum, _: *GLdouble) -> c_void { fail!("GetClipPlane was not loaded") }
    pub extern "C" fn GetClipPlanef(_: GLenum, _: *GLfloat) -> c_void { fail!("GetClipPlanef was not loaded") }
    pub extern "C" fn GetClipPlanefOES(_: GLenum, _: *GLfloat) -> c_void { fail!("GetClipPlanefOES was not loaded") }
    pub extern "C" fn GetClipPlanex(_: GLenum, _: *GLfixed) -> c_void { fail!("GetClipPlanex was not loaded") }
    pub extern "C" fn GetClipPlanexOES(_: GLenum, _: *GLfixed) -> c_void { fail!("GetClipPlanexOES was not loaded") }
    pub extern "C" fn GetColorTable(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetColorTable was not loaded") }
    pub extern "C" fn GetColorTableEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetColorTableEXT was not loaded") }
    pub extern "C" fn GetColorTableParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetColorTableParameterfv was not loaded") }
    pub extern "C" fn GetColorTableParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetColorTableParameterfvEXT was not loaded") }
    pub extern "C" fn GetColorTableParameterfvSGI(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetColorTableParameterfvSGI was not loaded") }
    pub extern "C" fn GetColorTableParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetColorTableParameteriv was not loaded") }
    pub extern "C" fn GetColorTableParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetColorTableParameterivEXT was not loaded") }
    pub extern "C" fn GetColorTableParameterivSGI(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetColorTableParameterivSGI was not loaded") }
    pub extern "C" fn GetColorTableSGI(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetColorTableSGI was not loaded") }
    pub extern "C" fn GetCombinerInputParameterfvNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetCombinerInputParameterfvNV was not loaded") }
    pub extern "C" fn GetCombinerInputParameterivNV(_: GLenum, _: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetCombinerInputParameterivNV was not loaded") }
    pub extern "C" fn GetCombinerOutputParameterfvNV(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetCombinerOutputParameterfvNV was not loaded") }
    pub extern "C" fn GetCombinerOutputParameterivNV(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetCombinerOutputParameterivNV was not loaded") }
    pub extern "C" fn GetCombinerStageParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetCombinerStageParameterfvNV was not loaded") }
    pub extern "C" fn GetCompressedMultiTexImageEXT(_: GLenum, _: GLenum, _: GLint, _: *GLvoid) -> c_void { fail!("GetCompressedMultiTexImageEXT was not loaded") }
    pub extern "C" fn GetCompressedTexImage(_: GLenum, _: GLint, _: *GLvoid) -> c_void { fail!("GetCompressedTexImage was not loaded") }
    pub extern "C" fn GetCompressedTexImageARB(_: GLenum, _: GLint, _: *GLvoid) -> c_void { fail!("GetCompressedTexImageARB was not loaded") }
    pub extern "C" fn GetCompressedTextureImageEXT(_: GLuint, _: GLenum, _: GLint, _: *GLvoid) -> c_void { fail!("GetCompressedTextureImageEXT was not loaded") }
    pub extern "C" fn GetConvolutionFilter(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetConvolutionFilter was not loaded") }
    pub extern "C" fn GetConvolutionFilterEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetConvolutionFilterEXT was not loaded") }
    pub extern "C" fn GetConvolutionParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetConvolutionParameterfv was not loaded") }
    pub extern "C" fn GetConvolutionParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetConvolutionParameterfvEXT was not loaded") }
    pub extern "C" fn GetConvolutionParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetConvolutionParameteriv was not loaded") }
    pub extern "C" fn GetConvolutionParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetConvolutionParameterivEXT was not loaded") }
    pub extern "C" fn GetConvolutionParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetConvolutionParameterxvOES was not loaded") }
    pub extern "C" fn GetDebugMessageLog(_: GLuint, _: GLsizei, _: *GLenum, _: *GLenum, _: *GLuint, _: *GLenum, _: *GLsizei, _: *GLchar) -> GLuint { fail!("GetDebugMessageLog was not loaded") }
    pub extern "C" fn GetDebugMessageLogAMD(_: GLuint, _: GLsizei, _: *GLenum, _: *GLuint, _: *GLuint, _: *GLsizei, _: *GLchar) -> GLuint { fail!("GetDebugMessageLogAMD was not loaded") }
    pub extern "C" fn GetDebugMessageLogARB(_: GLuint, _: GLsizei, _: *GLenum, _: *GLenum, _: *GLuint, _: *GLenum, _: *GLsizei, _: *GLchar) -> GLuint { fail!("GetDebugMessageLogARB was not loaded") }
    pub extern "C" fn GetDebugMessageLogKHR(_: GLuint, _: GLsizei, _: *GLenum, _: *GLenum, _: *GLuint, _: *GLenum, _: *GLsizei, _: *GLchar) -> GLuint { fail!("GetDebugMessageLogKHR was not loaded") }
    pub extern "C" fn GetDetailTexFuncSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("GetDetailTexFuncSGIS was not loaded") }
    pub extern "C" fn GetDoubleIndexedvEXT(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetDoubleIndexedvEXT was not loaded") }
    pub extern "C" fn GetDoublei_v(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetDoublei_v was not loaded") }
    pub extern "C" fn GetDoublei_vEXT(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetDoublei_vEXT was not loaded") }
    pub extern "C" fn GetDoublev(_: GLenum, _: *GLdouble) -> c_void { fail!("GetDoublev was not loaded") }
    pub extern "C" fn GetDriverControlStringQCOM(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetDriverControlStringQCOM was not loaded") }
    pub extern "C" fn GetDriverControlsQCOM(_: *GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("GetDriverControlsQCOM was not loaded") }
    pub extern "C" fn GetError() -> GLenum { fail!("GetError was not loaded") }
    pub extern "C" fn GetFenceivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetFenceivNV was not loaded") }
    pub extern "C" fn GetFinalCombinerInputParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetFinalCombinerInputParameterfvNV was not loaded") }
    pub extern "C" fn GetFinalCombinerInputParameterivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFinalCombinerInputParameterivNV was not loaded") }
    pub extern "C" fn GetFixedv(_: GLenum, _: *GLfixed) -> c_void { fail!("GetFixedv was not loaded") }
    pub extern "C" fn GetFixedvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("GetFixedvOES was not loaded") }
    pub extern "C" fn GetFloatIndexedvEXT(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetFloatIndexedvEXT was not loaded") }
    pub extern "C" fn GetFloati_v(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetFloati_v was not loaded") }
    pub extern "C" fn GetFloati_vEXT(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetFloati_vEXT was not loaded") }
    pub extern "C" fn GetFloatv(_: GLenum, _: *GLfloat) -> c_void { fail!("GetFloatv was not loaded") }
    pub extern "C" fn GetFogFuncSGIS(_: *GLfloat) -> c_void { fail!("GetFogFuncSGIS was not loaded") }
    pub extern "C" fn GetFragDataIndex(_: GLuint, _: *GLchar) -> GLint { fail!("GetFragDataIndex was not loaded") }
    pub extern "C" fn GetFragDataLocation(_: GLuint, _: *GLchar) -> GLint { fail!("GetFragDataLocation was not loaded") }
    pub extern "C" fn GetFragDataLocationEXT(_: GLuint, _: *GLchar) -> GLint { fail!("GetFragDataLocationEXT was not loaded") }
    pub extern "C" fn GetFragmentLightfvSGIX(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetFragmentLightfvSGIX was not loaded") }
    pub extern "C" fn GetFragmentLightivSGIX(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFragmentLightivSGIX was not loaded") }
    pub extern "C" fn GetFragmentMaterialfvSGIX(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetFragmentMaterialfvSGIX was not loaded") }
    pub extern "C" fn GetFragmentMaterialivSGIX(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFragmentMaterialivSGIX was not loaded") }
    pub extern "C" fn GetFramebufferAttachmentParameteriv(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferAttachmentParameteriv was not loaded") }
    pub extern "C" fn GetFramebufferAttachmentParameterivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferAttachmentParameterivEXT was not loaded") }
    pub extern "C" fn GetFramebufferAttachmentParameterivOES(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferAttachmentParameterivOES was not loaded") }
    pub extern "C" fn GetFramebufferParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferParameteriv was not loaded") }
    pub extern "C" fn GetFramebufferParameterivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetFramebufferParameterivEXT was not loaded") }
    pub extern "C" fn GetGraphicsResetStatusARB() -> GLenum { fail!("GetGraphicsResetStatusARB was not loaded") }
    pub extern "C" fn GetGraphicsResetStatusEXT() -> GLenum { fail!("GetGraphicsResetStatusEXT was not loaded") }
    pub extern "C" fn GetHandleARB(_: GLenum) -> GLhandleARB { fail!("GetHandleARB was not loaded") }
    pub extern "C" fn GetHistogram(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetHistogram was not loaded") }
    pub extern "C" fn GetHistogramEXT(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetHistogramEXT was not loaded") }
    pub extern "C" fn GetHistogramParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetHistogramParameterfv was not loaded") }
    pub extern "C" fn GetHistogramParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetHistogramParameterfvEXT was not loaded") }
    pub extern "C" fn GetHistogramParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetHistogramParameteriv was not loaded") }
    pub extern "C" fn GetHistogramParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetHistogramParameterivEXT was not loaded") }
    pub extern "C" fn GetHistogramParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetHistogramParameterxvOES was not loaded") }
    pub extern "C" fn GetImageHandleARB(_: GLuint, _: GLint, _: GLboolean, _: GLint, _: GLenum) -> GLuint64 { fail!("GetImageHandleARB was not loaded") }
    pub extern "C" fn GetImageHandleNV(_: GLuint, _: GLint, _: GLboolean, _: GLint, _: GLenum) -> GLuint64 { fail!("GetImageHandleNV was not loaded") }
    pub extern "C" fn GetImageTransformParameterfvHP(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetImageTransformParameterfvHP was not loaded") }
    pub extern "C" fn GetImageTransformParameterivHP(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetImageTransformParameterivHP was not loaded") }
    pub extern "C" fn GetInfoLogARB(_: GLhandleARB, _: GLsizei, _: *GLsizei, _: *GLcharARB) -> c_void { fail!("GetInfoLogARB was not loaded") }
    pub extern "C" fn GetInstrumentsSGIX() -> GLint { fail!("GetInstrumentsSGIX was not loaded") }
    pub extern "C" fn GetInteger64i_v(_: GLenum, _: GLuint, _: *GLint64) -> c_void { fail!("GetInteger64i_v was not loaded") }
    pub extern "C" fn GetInteger64v(_: GLenum, _: *GLint64) -> c_void { fail!("GetInteger64v was not loaded") }
    pub extern "C" fn GetInteger64vAPPLE(_: GLenum, _: *GLint64) -> c_void { fail!("GetInteger64vAPPLE was not loaded") }
    pub extern "C" fn GetIntegerIndexedvEXT(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetIntegerIndexedvEXT was not loaded") }
    pub extern "C" fn GetIntegeri_v(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetIntegeri_v was not loaded") }
    pub extern "C" fn GetIntegeri_vEXT(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetIntegeri_vEXT was not loaded") }
    pub extern "C" fn GetIntegerui64i_vNV(_: GLenum, _: GLuint, _: *GLuint64EXT) -> c_void { fail!("GetIntegerui64i_vNV was not loaded") }
    pub extern "C" fn GetIntegerui64vNV(_: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetIntegerui64vNV was not loaded") }
    pub extern "C" fn GetIntegerv(_: GLenum, _: *GLint) -> c_void { fail!("GetIntegerv was not loaded") }
    pub extern "C" fn GetInternalformati64v(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLint64) -> c_void { fail!("GetInternalformati64v was not loaded") }
    pub extern "C" fn GetInternalformativ(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLint) -> c_void { fail!("GetInternalformativ was not loaded") }
    pub extern "C" fn GetInvariantBooleanvEXT(_: GLuint, _: GLenum, _: *GLboolean) -> c_void { fail!("GetInvariantBooleanvEXT was not loaded") }
    pub extern "C" fn GetInvariantFloatvEXT(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetInvariantFloatvEXT was not loaded") }
    pub extern "C" fn GetInvariantIntegervEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetInvariantIntegervEXT was not loaded") }
    pub extern "C" fn GetLightfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetLightfv was not loaded") }
    pub extern "C" fn GetLightiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetLightiv was not loaded") }
    pub extern "C" fn GetLightx(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetLightx was not loaded") }
    pub extern "C" fn GetLightxOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetLightxOES was not loaded") }
    pub extern "C" fn GetLightxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetLightxv was not loaded") }
    pub extern "C" fn GetLightxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetLightxvOES was not loaded") }
    pub extern "C" fn GetListParameterfvSGIX(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetListParameterfvSGIX was not loaded") }
    pub extern "C" fn GetListParameterivSGIX(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetListParameterivSGIX was not loaded") }
    pub extern "C" fn GetLocalConstantBooleanvEXT(_: GLuint, _: GLenum, _: *GLboolean) -> c_void { fail!("GetLocalConstantBooleanvEXT was not loaded") }
    pub extern "C" fn GetLocalConstantFloatvEXT(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetLocalConstantFloatvEXT was not loaded") }
    pub extern "C" fn GetLocalConstantIntegervEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetLocalConstantIntegervEXT was not loaded") }
    pub extern "C" fn GetMapAttribParameterfvNV(_: GLenum, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMapAttribParameterfvNV was not loaded") }
    pub extern "C" fn GetMapAttribParameterivNV(_: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetMapAttribParameterivNV was not loaded") }
    pub extern "C" fn GetMapControlPointsNV(_: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: GLsizei, _: GLboolean, _: *GLvoid) -> c_void { fail!("GetMapControlPointsNV was not loaded") }
    pub extern "C" fn GetMapParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMapParameterfvNV was not loaded") }
    pub extern "C" fn GetMapParameterivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMapParameterivNV was not loaded") }
    pub extern "C" fn GetMapdv(_: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("GetMapdv was not loaded") }
    pub extern "C" fn GetMapfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMapfv was not loaded") }
    pub extern "C" fn GetMapiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMapiv was not loaded") }
    pub extern "C" fn GetMapxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetMapxvOES was not loaded") }
    pub extern "C" fn GetMaterialfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMaterialfv was not loaded") }
    pub extern "C" fn GetMaterialiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMaterialiv was not loaded") }
    pub extern "C" fn GetMaterialx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("GetMaterialx was not loaded") }
    pub extern "C" fn GetMaterialxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("GetMaterialxOES was not loaded") }
    pub extern "C" fn GetMaterialxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetMaterialxv was not loaded") }
    pub extern "C" fn GetMaterialxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetMaterialxvOES was not loaded") }
    pub extern "C" fn GetMinmax(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetMinmax was not loaded") }
    pub extern "C" fn GetMinmaxEXT(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetMinmaxEXT was not loaded") }
    pub extern "C" fn GetMinmaxParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMinmaxParameterfv was not loaded") }
    pub extern "C" fn GetMinmaxParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMinmaxParameterfvEXT was not loaded") }
    pub extern "C" fn GetMinmaxParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMinmaxParameteriv was not loaded") }
    pub extern "C" fn GetMinmaxParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMinmaxParameterivEXT was not loaded") }
    pub extern "C" fn GetMultiTexEnvfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMultiTexEnvfvEXT was not loaded") }
    pub extern "C" fn GetMultiTexEnvivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexEnvivEXT was not loaded") }
    pub extern "C" fn GetMultiTexGendvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("GetMultiTexGendvEXT was not loaded") }
    pub extern "C" fn GetMultiTexGenfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMultiTexGenfvEXT was not loaded") }
    pub extern "C" fn GetMultiTexGenivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexGenivEXT was not loaded") }
    pub extern "C" fn GetMultiTexImageEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetMultiTexImageEXT was not loaded") }
    pub extern "C" fn GetMultiTexLevelParameterfvEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMultiTexLevelParameterfvEXT was not loaded") }
    pub extern "C" fn GetMultiTexLevelParameterivEXT(_: GLenum, _: GLenum, _: GLint, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexLevelParameterivEXT was not loaded") }
    pub extern "C" fn GetMultiTexParameterIivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexParameterIivEXT was not loaded") }
    pub extern "C" fn GetMultiTexParameterIuivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("GetMultiTexParameterIuivEXT was not loaded") }
    pub extern "C" fn GetMultiTexParameterfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetMultiTexParameterfvEXT was not loaded") }
    pub extern "C" fn GetMultiTexParameterivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetMultiTexParameterivEXT was not loaded") }
    pub extern "C" fn GetMultisamplefv(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetMultisamplefv was not loaded") }
    pub extern "C" fn GetMultisamplefvNV(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetMultisamplefvNV was not loaded") }
    pub extern "C" fn GetNamedBufferParameterivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedBufferParameterivEXT was not loaded") }
    pub extern "C" fn GetNamedBufferParameterui64vNV(_: GLuint, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetNamedBufferParameterui64vNV was not loaded") }
    pub extern "C" fn GetNamedBufferPointervEXT(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetNamedBufferPointervEXT was not loaded") }
    pub extern "C" fn GetNamedBufferSubDataEXT(_: GLuint, _: GLintptr, _: GLsizeiptr, _: *GLvoid) -> c_void { fail!("GetNamedBufferSubDataEXT was not loaded") }
    pub extern "C" fn GetNamedFramebufferAttachmentParameterivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedFramebufferAttachmentParameterivEXT was not loaded") }
    pub extern "C" fn GetNamedFramebufferParameterivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedFramebufferParameterivEXT was not loaded") }
    pub extern "C" fn GetNamedProgramLocalParameterIivEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetNamedProgramLocalParameterIivEXT was not loaded") }
    pub extern "C" fn GetNamedProgramLocalParameterIuivEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GetNamedProgramLocalParameterIuivEXT was not loaded") }
    pub extern "C" fn GetNamedProgramLocalParameterdvEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetNamedProgramLocalParameterdvEXT was not loaded") }
    pub extern "C" fn GetNamedProgramLocalParameterfvEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetNamedProgramLocalParameterfvEXT was not loaded") }
    pub extern "C" fn GetNamedProgramStringEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetNamedProgramStringEXT was not loaded") }
    pub extern "C" fn GetNamedProgramivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedProgramivEXT was not loaded") }
    pub extern "C" fn GetNamedRenderbufferParameterivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedRenderbufferParameterivEXT was not loaded") }
    pub extern "C" fn GetNamedStringARB(_: GLint, _: *GLchar, _: GLsizei, _: *GLint, _: *GLchar) -> c_void { fail!("GetNamedStringARB was not loaded") }
    pub extern "C" fn GetNamedStringivARB(_: GLint, _: *GLchar, _: GLenum, _: *GLint) -> c_void { fail!("GetNamedStringivARB was not loaded") }
    pub extern "C" fn GetObjectBufferfvATI(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetObjectBufferfvATI was not loaded") }
    pub extern "C" fn GetObjectBufferivATI(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetObjectBufferivATI was not loaded") }
    pub extern "C" fn GetObjectLabel(_: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectLabel was not loaded") }
    pub extern "C" fn GetObjectLabelEXT(_: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectLabelEXT was not loaded") }
    pub extern "C" fn GetObjectLabelKHR(_: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectLabelKHR was not loaded") }
    pub extern "C" fn GetObjectParameterfvARB(_: GLhandleARB, _: GLenum, _: *GLfloat) -> c_void { fail!("GetObjectParameterfvARB was not loaded") }
    pub extern "C" fn GetObjectParameterivAPPLE(_: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetObjectParameterivAPPLE was not loaded") }
    pub extern "C" fn GetObjectParameterivARB(_: GLhandleARB, _: GLenum, _: *GLint) -> c_void { fail!("GetObjectParameterivARB was not loaded") }
    pub extern "C" fn GetObjectPtrLabel(_: *c_void, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectPtrLabel was not loaded") }
    pub extern "C" fn GetObjectPtrLabelKHR(_: *c_void, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetObjectPtrLabelKHR was not loaded") }
    pub extern "C" fn GetOcclusionQueryivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetOcclusionQueryivNV was not loaded") }
    pub extern "C" fn GetOcclusionQueryuivNV(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetOcclusionQueryuivNV was not loaded") }
    pub extern "C" fn GetPathColorGenfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPathColorGenfvNV was not loaded") }
    pub extern "C" fn GetPathColorGenivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetPathColorGenivNV was not loaded") }
    pub extern "C" fn GetPathCommandsNV(_: GLuint, _: *GLubyte) -> c_void { fail!("GetPathCommandsNV was not loaded") }
    pub extern "C" fn GetPathCoordsNV(_: GLuint, _: *GLfloat) -> c_void { fail!("GetPathCoordsNV was not loaded") }
    pub extern "C" fn GetPathDashArrayNV(_: GLuint, _: *GLfloat) -> c_void { fail!("GetPathDashArrayNV was not loaded") }
    pub extern "C" fn GetPathLengthNV(_: GLuint, _: GLsizei, _: GLsizei) -> GLfloat { fail!("GetPathLengthNV was not loaded") }
    pub extern "C" fn GetPathMetricRangeNV(_: GLbitfield, _: GLuint, _: GLsizei, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetPathMetricRangeNV was not loaded") }
    pub extern "C" fn GetPathMetricsNV(_: GLbitfield, _: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetPathMetricsNV was not loaded") }
    pub extern "C" fn GetPathParameterfvNV(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPathParameterfvNV was not loaded") }
    pub extern "C" fn GetPathParameterivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetPathParameterivNV was not loaded") }
    pub extern "C" fn GetPathSpacingNV(_: GLenum, _: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLfloat, _: GLfloat, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPathSpacingNV was not loaded") }
    pub extern "C" fn GetPathTexGenfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPathTexGenfvNV was not loaded") }
    pub extern "C" fn GetPathTexGenivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetPathTexGenivNV was not loaded") }
    pub extern "C" fn GetPerfMonitorCounterDataAMD(_: GLuint, _: GLenum, _: GLsizei, _: *GLuint, _: *GLint) -> c_void { fail!("GetPerfMonitorCounterDataAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorCounterInfoAMD(_: GLuint, _: GLuint, _: GLenum, _: *GLvoid) -> c_void { fail!("GetPerfMonitorCounterInfoAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorCounterStringAMD(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetPerfMonitorCounterStringAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorCountersAMD(_: GLuint, _: *GLint, _: *GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("GetPerfMonitorCountersAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorGroupStringAMD(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetPerfMonitorGroupStringAMD was not loaded") }
    pub extern "C" fn GetPerfMonitorGroupsAMD(_: *GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("GetPerfMonitorGroupsAMD was not loaded") }
    pub extern "C" fn GetPixelMapfv(_: GLenum, _: *GLfloat) -> c_void { fail!("GetPixelMapfv was not loaded") }
    pub extern "C" fn GetPixelMapuiv(_: GLenum, _: *GLuint) -> c_void { fail!("GetPixelMapuiv was not loaded") }
    pub extern "C" fn GetPixelMapusv(_: GLenum, _: *GLushort) -> c_void { fail!("GetPixelMapusv was not loaded") }
    pub extern "C" fn GetPixelMapxv(_: GLenum, _: GLint, _: *GLfixed) -> c_void { fail!("GetPixelMapxv was not loaded") }
    pub extern "C" fn GetPixelTexGenParameterfvSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("GetPixelTexGenParameterfvSGIS was not loaded") }
    pub extern "C" fn GetPixelTexGenParameterivSGIS(_: GLenum, _: *GLint) -> c_void { fail!("GetPixelTexGenParameterivSGIS was not loaded") }
    pub extern "C" fn GetPixelTransformParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetPixelTransformParameterfvEXT was not loaded") }
    pub extern "C" fn GetPixelTransformParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetPixelTransformParameterivEXT was not loaded") }
    pub extern "C" fn GetPointerIndexedvEXT(_: GLenum, _: GLuint, _: **GLvoid) -> c_void { fail!("GetPointerIndexedvEXT was not loaded") }
    pub extern "C" fn GetPointeri_vEXT(_: GLenum, _: GLuint, _: **GLvoid) -> c_void { fail!("GetPointeri_vEXT was not loaded") }
    pub extern "C" fn GetPointerv(_: GLenum, _: **GLvoid) -> c_void { fail!("GetPointerv was not loaded") }
    pub extern "C" fn GetPointervEXT(_: GLenum, _: **GLvoid) -> c_void { fail!("GetPointervEXT was not loaded") }
    pub extern "C" fn GetPointervKHR(_: GLenum, _: **GLvoid) -> c_void { fail!("GetPointervKHR was not loaded") }
    pub extern "C" fn GetPolygonStipple(_: *GLubyte) -> c_void { fail!("GetPolygonStipple was not loaded") }
    pub extern "C" fn GetProgramBinary(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLenum, _: *GLvoid) -> c_void { fail!("GetProgramBinary was not loaded") }
    pub extern "C" fn GetProgramBinaryOES(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLenum, _: *GLvoid) -> c_void { fail!("GetProgramBinaryOES was not loaded") }
    pub extern "C" fn GetProgramEnvParameterIivNV(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetProgramEnvParameterIivNV was not loaded") }
    pub extern "C" fn GetProgramEnvParameterIuivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GetProgramEnvParameterIuivNV was not loaded") }
    pub extern "C" fn GetProgramEnvParameterdvARB(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetProgramEnvParameterdvARB was not loaded") }
    pub extern "C" fn GetProgramEnvParameterfvARB(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetProgramEnvParameterfvARB was not loaded") }
    pub extern "C" fn GetProgramInfoLog(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetProgramInfoLog was not loaded") }
    pub extern "C" fn GetProgramInterfaceiv(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramInterfaceiv was not loaded") }
    pub extern "C" fn GetProgramLocalParameterIivNV(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("GetProgramLocalParameterIivNV was not loaded") }
    pub extern "C" fn GetProgramLocalParameterIuivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GetProgramLocalParameterIuivNV was not loaded") }
    pub extern "C" fn GetProgramLocalParameterdvARB(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("GetProgramLocalParameterdvARB was not loaded") }
    pub extern "C" fn GetProgramLocalParameterfvARB(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("GetProgramLocalParameterfvARB was not loaded") }
    pub extern "C" fn GetProgramNamedParameterdvNV(_: GLuint, _: GLsizei, _: *GLubyte, _: *GLdouble) -> c_void { fail!("GetProgramNamedParameterdvNV was not loaded") }
    pub extern "C" fn GetProgramNamedParameterfvNV(_: GLuint, _: GLsizei, _: *GLubyte, _: *GLfloat) -> c_void { fail!("GetProgramNamedParameterfvNV was not loaded") }
    pub extern "C" fn GetProgramParameterdvNV(_: GLenum, _: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetProgramParameterdvNV was not loaded") }
    pub extern "C" fn GetProgramParameterfvNV(_: GLenum, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetProgramParameterfvNV was not loaded") }
    pub extern "C" fn GetProgramPipelineInfoLog(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetProgramPipelineInfoLog was not loaded") }
    pub extern "C" fn GetProgramPipelineInfoLogEXT(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetProgramPipelineInfoLogEXT was not loaded") }
    pub extern "C" fn GetProgramPipelineiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramPipelineiv was not loaded") }
    pub extern "C" fn GetProgramPipelineivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramPipelineivEXT was not loaded") }
    pub extern "C" fn GetProgramResourceIndex(_: GLuint, _: GLenum, _: *GLchar) -> GLuint { fail!("GetProgramResourceIndex was not loaded") }
    pub extern "C" fn GetProgramResourceLocation(_: GLuint, _: GLenum, _: *GLchar) -> GLint { fail!("GetProgramResourceLocation was not loaded") }
    pub extern "C" fn GetProgramResourceLocationIndex(_: GLuint, _: GLenum, _: *GLchar) -> GLint { fail!("GetProgramResourceLocationIndex was not loaded") }
    pub extern "C" fn GetProgramResourceName(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetProgramResourceName was not loaded") }
    pub extern "C" fn GetProgramResourceiv(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLenum, _: GLsizei, _: *GLsizei, _: *GLint) -> c_void { fail!("GetProgramResourceiv was not loaded") }
    pub extern "C" fn GetProgramStageiv(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramStageiv was not loaded") }
    pub extern "C" fn GetProgramStringARB(_: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetProgramStringARB was not loaded") }
    pub extern "C" fn GetProgramStringNV(_: GLuint, _: GLenum, _: *GLubyte) -> c_void { fail!("GetProgramStringNV was not loaded") }
    pub extern "C" fn GetProgramSubroutineParameteruivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("GetProgramSubroutineParameteruivNV was not loaded") }
    pub extern "C" fn GetProgramiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramiv was not loaded") }
    pub extern "C" fn GetProgramivARB(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramivARB was not loaded") }
    pub extern "C" fn GetProgramivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetProgramivNV was not loaded") }
    pub extern "C" fn GetQueryIndexediv(_: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryIndexediv was not loaded") }
    pub extern "C" fn GetQueryObjecti64v(_: GLuint, _: GLenum, _: *GLint64) -> c_void { fail!("GetQueryObjecti64v was not loaded") }
    pub extern "C" fn GetQueryObjecti64vEXT(_: GLuint, _: GLenum, _: *GLint64) -> c_void { fail!("GetQueryObjecti64vEXT was not loaded") }
    pub extern "C" fn GetQueryObjectiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryObjectiv was not loaded") }
    pub extern "C" fn GetQueryObjectivARB(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryObjectivARB was not loaded") }
    pub extern "C" fn GetQueryObjectivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryObjectivEXT was not loaded") }
    pub extern "C" fn GetQueryObjectui64v(_: GLuint, _: GLenum, _: *GLuint64) -> c_void { fail!("GetQueryObjectui64v was not loaded") }
    pub extern "C" fn GetQueryObjectui64vEXT(_: GLuint, _: GLenum, _: *GLuint64) -> c_void { fail!("GetQueryObjectui64vEXT was not loaded") }
    pub extern "C" fn GetQueryObjectuiv(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetQueryObjectuiv was not loaded") }
    pub extern "C" fn GetQueryObjectuivARB(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetQueryObjectuivARB was not loaded") }
    pub extern "C" fn GetQueryObjectuivEXT(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetQueryObjectuivEXT was not loaded") }
    pub extern "C" fn GetQueryiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryiv was not loaded") }
    pub extern "C" fn GetQueryivARB(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryivARB was not loaded") }
    pub extern "C" fn GetQueryivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetQueryivEXT was not loaded") }
    pub extern "C" fn GetRenderbufferParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetRenderbufferParameteriv was not loaded") }
    pub extern "C" fn GetRenderbufferParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetRenderbufferParameterivEXT was not loaded") }
    pub extern "C" fn GetRenderbufferParameterivOES(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetRenderbufferParameterivOES was not loaded") }
    pub extern "C" fn GetSamplerParameterIiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetSamplerParameterIiv was not loaded") }
    pub extern "C" fn GetSamplerParameterIuiv(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetSamplerParameterIuiv was not loaded") }
    pub extern "C" fn GetSamplerParameterfv(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetSamplerParameterfv was not loaded") }
    pub extern "C" fn GetSamplerParameteriv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetSamplerParameteriv was not loaded") }
    pub extern "C" fn GetSeparableFilter(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid, _: *GLvoid, _: *GLvoid) -> c_void { fail!("GetSeparableFilter was not loaded") }
    pub extern "C" fn GetSeparableFilterEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLvoid, _: *GLvoid, _: *GLvoid) -> c_void { fail!("GetSeparableFilterEXT was not loaded") }
    pub extern "C" fn GetShaderInfoLog(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetShaderInfoLog was not loaded") }
    pub extern "C" fn GetShaderPrecisionFormat(_: GLenum, _: GLenum, _: *GLint, _: *GLint) -> c_void { fail!("GetShaderPrecisionFormat was not loaded") }
    pub extern "C" fn GetShaderSource(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetShaderSource was not loaded") }
    pub extern "C" fn GetShaderSourceARB(_: GLhandleARB, _: GLsizei, _: *GLsizei, _: *GLcharARB) -> c_void { fail!("GetShaderSourceARB was not loaded") }
    pub extern "C" fn GetShaderiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetShaderiv was not loaded") }
    pub extern "C" fn GetSharpenTexFuncSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("GetSharpenTexFuncSGIS was not loaded") }
    pub extern "C" fn GetString(_: GLenum) -> *GLubyte { fail!("GetString was not loaded") }
    pub extern "C" fn GetStringi(_: GLenum, _: GLuint) -> *GLubyte { fail!("GetStringi was not loaded") }
    pub extern "C" fn GetSubroutineIndex(_: GLuint, _: GLenum, _: *GLchar) -> GLuint { fail!("GetSubroutineIndex was not loaded") }
    pub extern "C" fn GetSubroutineUniformLocation(_: GLuint, _: GLenum, _: *GLchar) -> GLint { fail!("GetSubroutineUniformLocation was not loaded") }
    pub extern "C" fn GetSynciv(_: GLsync, _: GLenum, _: GLsizei, _: *GLsizei, _: *GLint) -> c_void { fail!("GetSynciv was not loaded") }
    pub extern "C" fn GetSyncivAPPLE(_: GLsync, _: GLenum, _: GLsizei, _: *GLsizei, _: *GLint) -> c_void { fail!("GetSyncivAPPLE was not loaded") }
    pub extern "C" fn GetTexBumpParameterfvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("GetTexBumpParameterfvATI was not loaded") }
    pub extern "C" fn GetTexBumpParameterivATI(_: GLenum, _: *GLint) -> c_void { fail!("GetTexBumpParameterivATI was not loaded") }
    pub extern "C" fn GetTexEnvfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexEnvfv was not loaded") }
    pub extern "C" fn GetTexEnviv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexEnviv was not loaded") }
    pub extern "C" fn GetTexEnvxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexEnvxv was not loaded") }
    pub extern "C" fn GetTexEnvxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexEnvxvOES was not loaded") }
    pub extern "C" fn GetTexFilterFuncSGIS(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexFilterFuncSGIS was not loaded") }
    pub extern "C" fn GetTexGendv(_: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("GetTexGendv was not loaded") }
    pub extern "C" fn GetTexGenfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexGenfv was not loaded") }
    pub extern "C" fn GetTexGenfvOES(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexGenfvOES was not loaded") }
    pub extern "C" fn GetTexGeniv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexGeniv was not loaded") }
    pub extern "C" fn GetTexGenivOES(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexGenivOES was not loaded") }
    pub extern "C" fn GetTexGenxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexGenxvOES was not loaded") }
    pub extern "C" fn GetTexImage(_: GLenum, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetTexImage was not loaded") }
    pub extern "C" fn GetTexLevelParameterfv(_: GLenum, _: GLint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexLevelParameterfv was not loaded") }
    pub extern "C" fn GetTexLevelParameteriv(_: GLenum, _: GLint, _: GLenum, _: *GLint) -> c_void { fail!("GetTexLevelParameteriv was not loaded") }
    pub extern "C" fn GetTexLevelParameterxvOES(_: GLenum, _: GLint, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexLevelParameterxvOES was not loaded") }
    pub extern "C" fn GetTexParameterIiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexParameterIiv was not loaded") }
    pub extern "C" fn GetTexParameterIivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexParameterIivEXT was not loaded") }
    pub extern "C" fn GetTexParameterIuiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("GetTexParameterIuiv was not loaded") }
    pub extern "C" fn GetTexParameterIuivEXT(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("GetTexParameterIuivEXT was not loaded") }
    pub extern "C" fn GetTexParameterPointervAPPLE(_: GLenum, _: GLenum, _: **GLvoid) -> c_void { fail!("GetTexParameterPointervAPPLE was not loaded") }
    pub extern "C" fn GetTexParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTexParameterfv was not loaded") }
    pub extern "C" fn GetTexParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTexParameteriv was not loaded") }
    pub extern "C" fn GetTexParameterxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexParameterxv was not loaded") }
    pub extern "C" fn GetTexParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("GetTexParameterxvOES was not loaded") }
    pub extern "C" fn GetTextureHandleARB(_: GLuint) -> GLuint64 { fail!("GetTextureHandleARB was not loaded") }
    pub extern "C" fn GetTextureHandleNV(_: GLuint) -> GLuint64 { fail!("GetTextureHandleNV was not loaded") }
    pub extern "C" fn GetTextureImageEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("GetTextureImageEXT was not loaded") }
    pub extern "C" fn GetTextureLevelParameterfvEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTextureLevelParameterfvEXT was not loaded") }
    pub extern "C" fn GetTextureLevelParameterivEXT(_: GLuint, _: GLenum, _: GLint, _: GLenum, _: *GLint) -> c_void { fail!("GetTextureLevelParameterivEXT was not loaded") }
    pub extern "C" fn GetTextureParameterIivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTextureParameterIivEXT was not loaded") }
    pub extern "C" fn GetTextureParameterIuivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("GetTextureParameterIuivEXT was not loaded") }
    pub extern "C" fn GetTextureParameterfvEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("GetTextureParameterfvEXT was not loaded") }
    pub extern "C" fn GetTextureParameterivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("GetTextureParameterivEXT was not loaded") }
    pub extern "C" fn GetTextureSamplerHandleARB(_: GLuint, _: GLuint) -> GLuint64 { fail!("GetTextureSamplerHandleARB was not loaded") }
    pub extern "C" fn GetTextureSamplerHandleNV(_: GLuint, _: GLuint) -> GLuint64 { fail!("GetTextureSamplerHandleNV was not loaded") }
    pub extern "C" fn GetTrackMatrixivNV(_: GLenum, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetTrackMatrixivNV was not loaded") }
    pub extern "C" fn GetTransformFeedbackVarying(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLsizei, _: *GLenum, _: *GLchar) -> c_void { fail!("GetTransformFeedbackVarying was not loaded") }
    pub extern "C" fn GetTransformFeedbackVaryingEXT(_: GLuint, _: GLuint, _: GLsizei, _: *GLsizei, _: *GLsizei, _: *GLenum, _: *GLchar) -> c_void { fail!("GetTransformFeedbackVaryingEXT was not loaded") }
    pub extern "C" fn GetTransformFeedbackVaryingNV(_: GLuint, _: GLuint, _: *GLint) -> c_void { fail!("GetTransformFeedbackVaryingNV was not loaded") }
    pub extern "C" fn GetTranslatedShaderSourceANGLE(_: GLuint, _: GLsizei, _: *GLsizei, _: *GLchar) -> c_void { fail!("GetTranslatedShaderSourceANGLE was not loaded") }
    pub extern "C" fn GetUniformBlockIndex(_: GLuint, _: *GLchar) -> GLuint { fail!("GetUniformBlockIndex was not loaded") }
    pub extern "C" fn GetUniformBufferSizeEXT(_: GLuint, _: GLint) -> GLint { fail!("GetUniformBufferSizeEXT was not loaded") }
    pub extern "C" fn GetUniformIndices(_: GLuint, _: GLsizei, _: **GLchar, _: *GLuint) -> c_void { fail!("GetUniformIndices was not loaded") }
    pub extern "C" fn GetUniformLocation(_: GLuint, _: *GLchar) -> GLint { fail!("GetUniformLocation was not loaded") }
    pub extern "C" fn GetUniformLocationARB(_: GLhandleARB, _: *GLcharARB) -> GLint { fail!("GetUniformLocationARB was not loaded") }
    pub extern "C" fn GetUniformOffsetEXT(_: GLuint, _: GLint) -> GLintptr { fail!("GetUniformOffsetEXT was not loaded") }
    pub extern "C" fn GetUniformSubroutineuiv(_: GLenum, _: GLint, _: *GLuint) -> c_void { fail!("GetUniformSubroutineuiv was not loaded") }
    pub extern "C" fn GetUniformdv(_: GLuint, _: GLint, _: *GLdouble) -> c_void { fail!("GetUniformdv was not loaded") }
    pub extern "C" fn GetUniformfv(_: GLuint, _: GLint, _: *GLfloat) -> c_void { fail!("GetUniformfv was not loaded") }
    pub extern "C" fn GetUniformfvARB(_: GLhandleARB, _: GLint, _: *GLfloat) -> c_void { fail!("GetUniformfvARB was not loaded") }
    pub extern "C" fn GetUniformi64vNV(_: GLuint, _: GLint, _: *GLint64EXT) -> c_void { fail!("GetUniformi64vNV was not loaded") }
    pub extern "C" fn GetUniformiv(_: GLuint, _: GLint, _: *GLint) -> c_void { fail!("GetUniformiv was not loaded") }
    pub extern "C" fn GetUniformivARB(_: GLhandleARB, _: GLint, _: *GLint) -> c_void { fail!("GetUniformivARB was not loaded") }
    pub extern "C" fn GetUniformui64vNV(_: GLuint, _: GLint, _: *GLuint64EXT) -> c_void { fail!("GetUniformui64vNV was not loaded") }
    pub extern "C" fn GetUniformuiv(_: GLuint, _: GLint, _: *GLuint) -> c_void { fail!("GetUniformuiv was not loaded") }
    pub extern "C" fn GetUniformuivEXT(_: GLuint, _: GLint, _: *GLuint) -> c_void { fail!("GetUniformuivEXT was not loaded") }
    pub extern "C" fn GetVariantArrayObjectfvATI(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVariantArrayObjectfvATI was not loaded") }
    pub extern "C" fn GetVariantArrayObjectivATI(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVariantArrayObjectivATI was not loaded") }
    pub extern "C" fn GetVariantBooleanvEXT(_: GLuint, _: GLenum, _: *GLboolean) -> c_void { fail!("GetVariantBooleanvEXT was not loaded") }
    pub extern "C" fn GetVariantFloatvEXT(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVariantFloatvEXT was not loaded") }
    pub extern "C" fn GetVariantIntegervEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVariantIntegervEXT was not loaded") }
    pub extern "C" fn GetVariantPointervEXT(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVariantPointervEXT was not loaded") }
    pub extern "C" fn GetVaryingLocationNV(_: GLuint, _: *GLchar) -> GLint { fail!("GetVaryingLocationNV was not loaded") }
    pub extern "C" fn GetVertexArrayIntegeri_vEXT(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexArrayIntegeri_vEXT was not loaded") }
    pub extern "C" fn GetVertexArrayIntegervEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexArrayIntegervEXT was not loaded") }
    pub extern "C" fn GetVertexArrayPointeri_vEXT(_: GLuint, _: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexArrayPointeri_vEXT was not loaded") }
    pub extern "C" fn GetVertexArrayPointervEXT(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexArrayPointervEXT was not loaded") }
    pub extern "C" fn GetVertexAttribArrayObjectfvATI(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVertexAttribArrayObjectfvATI was not loaded") }
    pub extern "C" fn GetVertexAttribArrayObjectivATI(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribArrayObjectivATI was not loaded") }
    pub extern "C" fn GetVertexAttribIiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribIiv was not loaded") }
    pub extern "C" fn GetVertexAttribIivEXT(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribIivEXT was not loaded") }
    pub extern "C" fn GetVertexAttribIuiv(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetVertexAttribIuiv was not loaded") }
    pub extern "C" fn GetVertexAttribIuivEXT(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetVertexAttribIuivEXT was not loaded") }
    pub extern "C" fn GetVertexAttribLdv(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribLdv was not loaded") }
    pub extern "C" fn GetVertexAttribLdvEXT(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribLdvEXT was not loaded") }
    pub extern "C" fn GetVertexAttribLi64vNV(_: GLuint, _: GLenum, _: *GLint64EXT) -> c_void { fail!("GetVertexAttribLi64vNV was not loaded") }
    pub extern "C" fn GetVertexAttribLui64vARB(_: GLuint, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetVertexAttribLui64vARB was not loaded") }
    pub extern "C" fn GetVertexAttribLui64vNV(_: GLuint, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetVertexAttribLui64vNV was not loaded") }
    pub extern "C" fn GetVertexAttribPointerv(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexAttribPointerv was not loaded") }
    pub extern "C" fn GetVertexAttribPointervARB(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexAttribPointervARB was not loaded") }
    pub extern "C" fn GetVertexAttribPointervNV(_: GLuint, _: GLenum, _: **GLvoid) -> c_void { fail!("GetVertexAttribPointervNV was not loaded") }
    pub extern "C" fn GetVertexAttribdv(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribdv was not loaded") }
    pub extern "C" fn GetVertexAttribdvARB(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribdvARB was not loaded") }
    pub extern "C" fn GetVertexAttribdvNV(_: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVertexAttribdvNV was not loaded") }
    pub extern "C" fn GetVertexAttribfv(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVertexAttribfv was not loaded") }
    pub extern "C" fn GetVertexAttribfvARB(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVertexAttribfvARB was not loaded") }
    pub extern "C" fn GetVertexAttribfvNV(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVertexAttribfvNV was not loaded") }
    pub extern "C" fn GetVertexAttribiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribiv was not loaded") }
    pub extern "C" fn GetVertexAttribivARB(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribivARB was not loaded") }
    pub extern "C" fn GetVertexAttribivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVertexAttribivNV was not loaded") }
    pub extern "C" fn GetVideoCaptureStreamdvNV(_: GLuint, _: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("GetVideoCaptureStreamdvNV was not loaded") }
    pub extern "C" fn GetVideoCaptureStreamfvNV(_: GLuint, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("GetVideoCaptureStreamfvNV was not loaded") }
    pub extern "C" fn GetVideoCaptureStreamivNV(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVideoCaptureStreamivNV was not loaded") }
    pub extern "C" fn GetVideoCaptureivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVideoCaptureivNV was not loaded") }
    pub extern "C" fn GetVideoi64vNV(_: GLuint, _: GLenum, _: *GLint64EXT) -> c_void { fail!("GetVideoi64vNV was not loaded") }
    pub extern "C" fn GetVideoivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("GetVideoivNV was not loaded") }
    pub extern "C" fn GetVideoui64vNV(_: GLuint, _: GLenum, _: *GLuint64EXT) -> c_void { fail!("GetVideoui64vNV was not loaded") }
    pub extern "C" fn GetVideouivNV(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("GetVideouivNV was not loaded") }
    pub extern "C" fn GetnColorTableARB(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnColorTableARB was not loaded") }
    pub extern "C" fn GetnCompressedTexImageARB(_: GLenum, _: GLint, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnCompressedTexImageARB was not loaded") }
    pub extern "C" fn GetnConvolutionFilterARB(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnConvolutionFilterARB was not loaded") }
    pub extern "C" fn GetnHistogramARB(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnHistogramARB was not loaded") }
    pub extern "C" fn GetnMapdvARB(_: GLenum, _: GLenum, _: GLsizei, _: *GLdouble) -> c_void { fail!("GetnMapdvARB was not loaded") }
    pub extern "C" fn GetnMapfvARB(_: GLenum, _: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetnMapfvARB was not loaded") }
    pub extern "C" fn GetnMapivARB(_: GLenum, _: GLenum, _: GLsizei, _: *GLint) -> c_void { fail!("GetnMapivARB was not loaded") }
    pub extern "C" fn GetnMinmaxARB(_: GLenum, _: GLboolean, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnMinmaxARB was not loaded") }
    pub extern "C" fn GetnPixelMapfvARB(_: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetnPixelMapfvARB was not loaded") }
    pub extern "C" fn GetnPixelMapuivARB(_: GLenum, _: GLsizei, _: *GLuint) -> c_void { fail!("GetnPixelMapuivARB was not loaded") }
    pub extern "C" fn GetnPixelMapusvARB(_: GLenum, _: GLsizei, _: *GLushort) -> c_void { fail!("GetnPixelMapusvARB was not loaded") }
    pub extern "C" fn GetnPolygonStippleARB(_: GLsizei, _: *GLubyte) -> c_void { fail!("GetnPolygonStippleARB was not loaded") }
    pub extern "C" fn GetnSeparableFilterARB(_: GLenum, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid, _: GLsizei, _: *GLvoid, _: *GLvoid) -> c_void { fail!("GetnSeparableFilterARB was not loaded") }
    pub extern "C" fn GetnTexImageARB(_: GLenum, _: GLint, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("GetnTexImageARB was not loaded") }
    pub extern "C" fn GetnUniformdvARB(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("GetnUniformdvARB was not loaded") }
    pub extern "C" fn GetnUniformfvARB(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetnUniformfvARB was not loaded") }
    pub extern "C" fn GetnUniformfvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("GetnUniformfvEXT was not loaded") }
    pub extern "C" fn GetnUniformivARB(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("GetnUniformivARB was not loaded") }
    pub extern "C" fn GetnUniformivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("GetnUniformivEXT was not loaded") }
    pub extern "C" fn GetnUniformuivARB(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("GetnUniformuivARB was not loaded") }
    pub extern "C" fn GlobalAlphaFactorbSUN(_: GLbyte) -> c_void { fail!("GlobalAlphaFactorbSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactordSUN(_: GLdouble) -> c_void { fail!("GlobalAlphaFactordSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactorfSUN(_: GLfloat) -> c_void { fail!("GlobalAlphaFactorfSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactoriSUN(_: GLint) -> c_void { fail!("GlobalAlphaFactoriSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactorsSUN(_: GLshort) -> c_void { fail!("GlobalAlphaFactorsSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactorubSUN(_: GLubyte) -> c_void { fail!("GlobalAlphaFactorubSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactoruiSUN(_: GLuint) -> c_void { fail!("GlobalAlphaFactoruiSUN was not loaded") }
    pub extern "C" fn GlobalAlphaFactorusSUN(_: GLushort) -> c_void { fail!("GlobalAlphaFactorusSUN was not loaded") }
    pub extern "C" fn Hint(_: GLenum, _: GLenum) -> c_void { fail!("Hint was not loaded") }
    pub extern "C" fn HintPGI(_: GLenum, _: GLint) -> c_void { fail!("HintPGI was not loaded") }
    pub extern "C" fn Histogram(_: GLenum, _: GLsizei, _: GLenum, _: GLboolean) -> c_void { fail!("Histogram was not loaded") }
    pub extern "C" fn HistogramEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLboolean) -> c_void { fail!("HistogramEXT was not loaded") }
    pub extern "C" fn IglooInterfaceSGIX(_: GLenum, _: *GLvoid) -> c_void { fail!("IglooInterfaceSGIX was not loaded") }
    pub extern "C" fn ImageTransformParameterfHP(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("ImageTransformParameterfHP was not loaded") }
    pub extern "C" fn ImageTransformParameterfvHP(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("ImageTransformParameterfvHP was not loaded") }
    pub extern "C" fn ImageTransformParameteriHP(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("ImageTransformParameteriHP was not loaded") }
    pub extern "C" fn ImageTransformParameterivHP(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("ImageTransformParameterivHP was not loaded") }
    pub extern "C" fn ImportSyncEXT(_: GLenum, _: GLintptr, _: GLbitfield) -> GLsync { fail!("ImportSyncEXT was not loaded") }
    pub extern "C" fn IndexFormatNV(_: GLenum, _: GLsizei) -> c_void { fail!("IndexFormatNV was not loaded") }
    pub extern "C" fn IndexFuncEXT(_: GLenum, _: GLclampf) -> c_void { fail!("IndexFuncEXT was not loaded") }
    pub extern "C" fn IndexMask(_: GLuint) -> c_void { fail!("IndexMask was not loaded") }
    pub extern "C" fn IndexMaterialEXT(_: GLenum, _: GLenum) -> c_void { fail!("IndexMaterialEXT was not loaded") }
    pub extern "C" fn IndexPointer(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("IndexPointer was not loaded") }
    pub extern "C" fn IndexPointerEXT(_: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("IndexPointerEXT was not loaded") }
    pub extern "C" fn IndexPointerListIBM(_: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("IndexPointerListIBM was not loaded") }
    pub extern "C" fn Indexd(_: GLdouble) -> c_void { fail!("Indexd was not loaded") }
    pub extern "C" fn Indexdv(_: *GLdouble) -> c_void { fail!("Indexdv was not loaded") }
    pub extern "C" fn Indexf(_: GLfloat) -> c_void { fail!("Indexf was not loaded") }
    pub extern "C" fn Indexfv(_: *GLfloat) -> c_void { fail!("Indexfv was not loaded") }
    pub extern "C" fn Indexi(_: GLint) -> c_void { fail!("Indexi was not loaded") }
    pub extern "C" fn Indexiv(_: *GLint) -> c_void { fail!("Indexiv was not loaded") }
    pub extern "C" fn Indexs(_: GLshort) -> c_void { fail!("Indexs was not loaded") }
    pub extern "C" fn Indexsv(_: *GLshort) -> c_void { fail!("Indexsv was not loaded") }
    pub extern "C" fn Indexub(_: GLubyte) -> c_void { fail!("Indexub was not loaded") }
    pub extern "C" fn Indexubv(_: *GLubyte) -> c_void { fail!("Indexubv was not loaded") }
    pub extern "C" fn IndexxOES(_: GLfixed) -> c_void { fail!("IndexxOES was not loaded") }
    pub extern "C" fn IndexxvOES(_: *GLfixed) -> c_void { fail!("IndexxvOES was not loaded") }
    pub extern "C" fn InitNames() -> c_void { fail!("InitNames was not loaded") }
    pub extern "C" fn InsertComponentEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("InsertComponentEXT was not loaded") }
    pub extern "C" fn InsertEventMarkerEXT(_: GLsizei, _: *GLchar) -> c_void { fail!("InsertEventMarkerEXT was not loaded") }
    pub extern "C" fn InstrumentsBufferSGIX(_: GLsizei, _: *GLint) -> c_void { fail!("InstrumentsBufferSGIX was not loaded") }
    pub extern "C" fn InterleavedArrays(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("InterleavedArrays was not loaded") }
    pub extern "C" fn InterpolatePathsNV(_: GLuint, _: GLuint, _: GLuint, _: GLfloat) -> c_void { fail!("InterpolatePathsNV was not loaded") }
    pub extern "C" fn InvalidateBufferData(_: GLuint) -> c_void { fail!("InvalidateBufferData was not loaded") }
    pub extern "C" fn InvalidateBufferSubData(_: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("InvalidateBufferSubData was not loaded") }
    pub extern "C" fn InvalidateFramebuffer(_: GLenum, _: GLsizei, _: *GLenum) -> c_void { fail!("InvalidateFramebuffer was not loaded") }
    pub extern "C" fn InvalidateSubFramebuffer(_: GLenum, _: GLsizei, _: *GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("InvalidateSubFramebuffer was not loaded") }
    pub extern "C" fn InvalidateTexImage(_: GLuint, _: GLint) -> c_void { fail!("InvalidateTexImage was not loaded") }
    pub extern "C" fn InvalidateTexSubImage(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("InvalidateTexSubImage was not loaded") }
    pub extern "C" fn IsAsyncMarkerSGIX(_: GLuint) -> GLboolean { fail!("IsAsyncMarkerSGIX was not loaded") }
    pub extern "C" fn IsBuffer(_: GLuint) -> GLboolean { fail!("IsBuffer was not loaded") }
    pub extern "C" fn IsBufferARB(_: GLuint) -> GLboolean { fail!("IsBufferARB was not loaded") }
    pub extern "C" fn IsBufferResidentNV(_: GLenum) -> GLboolean { fail!("IsBufferResidentNV was not loaded") }
    pub extern "C" fn IsEnabled(_: GLenum) -> GLboolean { fail!("IsEnabled was not loaded") }
    pub extern "C" fn IsEnabledIndexedEXT(_: GLenum, _: GLuint) -> GLboolean { fail!("IsEnabledIndexedEXT was not loaded") }
    pub extern "C" fn IsEnabledi(_: GLenum, _: GLuint) -> GLboolean { fail!("IsEnabledi was not loaded") }
    pub extern "C" fn IsFenceAPPLE(_: GLuint) -> GLboolean { fail!("IsFenceAPPLE was not loaded") }
    pub extern "C" fn IsFenceNV(_: GLuint) -> GLboolean { fail!("IsFenceNV was not loaded") }
    pub extern "C" fn IsFramebuffer(_: GLuint) -> GLboolean { fail!("IsFramebuffer was not loaded") }
    pub extern "C" fn IsFramebufferEXT(_: GLuint) -> GLboolean { fail!("IsFramebufferEXT was not loaded") }
    pub extern "C" fn IsFramebufferOES(_: GLuint) -> GLboolean { fail!("IsFramebufferOES was not loaded") }
    pub extern "C" fn IsImageHandleResidentARB(_: GLuint64) -> GLboolean { fail!("IsImageHandleResidentARB was not loaded") }
    pub extern "C" fn IsImageHandleResidentNV(_: GLuint64) -> GLboolean { fail!("IsImageHandleResidentNV was not loaded") }
    pub extern "C" fn IsList(_: GLuint) -> GLboolean { fail!("IsList was not loaded") }
    pub extern "C" fn IsNameAMD(_: GLenum, _: GLuint) -> GLboolean { fail!("IsNameAMD was not loaded") }
    pub extern "C" fn IsNamedBufferResidentNV(_: GLuint) -> GLboolean { fail!("IsNamedBufferResidentNV was not loaded") }
    pub extern "C" fn IsNamedStringARB(_: GLint, _: *GLchar) -> GLboolean { fail!("IsNamedStringARB was not loaded") }
    pub extern "C" fn IsObjectBufferATI(_: GLuint) -> GLboolean { fail!("IsObjectBufferATI was not loaded") }
    pub extern "C" fn IsOcclusionQueryNV(_: GLuint) -> GLboolean { fail!("IsOcclusionQueryNV was not loaded") }
    pub extern "C" fn IsPathNV(_: GLuint) -> GLboolean { fail!("IsPathNV was not loaded") }
    pub extern "C" fn IsPointInFillPathNV(_: GLuint, _: GLuint, _: GLfloat, _: GLfloat) -> GLboolean { fail!("IsPointInFillPathNV was not loaded") }
    pub extern "C" fn IsPointInStrokePathNV(_: GLuint, _: GLfloat, _: GLfloat) -> GLboolean { fail!("IsPointInStrokePathNV was not loaded") }
    pub extern "C" fn IsProgram(_: GLuint) -> GLboolean { fail!("IsProgram was not loaded") }
    pub extern "C" fn IsProgramARB(_: GLuint) -> GLboolean { fail!("IsProgramARB was not loaded") }
    pub extern "C" fn IsProgramNV(_: GLuint) -> GLboolean { fail!("IsProgramNV was not loaded") }
    pub extern "C" fn IsProgramPipeline(_: GLuint) -> GLboolean { fail!("IsProgramPipeline was not loaded") }
    pub extern "C" fn IsProgramPipelineEXT(_: GLuint) -> GLboolean { fail!("IsProgramPipelineEXT was not loaded") }
    pub extern "C" fn IsQuery(_: GLuint) -> GLboolean { fail!("IsQuery was not loaded") }
    pub extern "C" fn IsQueryARB(_: GLuint) -> GLboolean { fail!("IsQueryARB was not loaded") }
    pub extern "C" fn IsQueryEXT(_: GLuint) -> GLboolean { fail!("IsQueryEXT was not loaded") }
    pub extern "C" fn IsRenderbuffer(_: GLuint) -> GLboolean { fail!("IsRenderbuffer was not loaded") }
    pub extern "C" fn IsRenderbufferEXT(_: GLuint) -> GLboolean { fail!("IsRenderbufferEXT was not loaded") }
    pub extern "C" fn IsRenderbufferOES(_: GLuint) -> GLboolean { fail!("IsRenderbufferOES was not loaded") }
    pub extern "C" fn IsSampler(_: GLuint) -> GLboolean { fail!("IsSampler was not loaded") }
    pub extern "C" fn IsShader(_: GLuint) -> GLboolean { fail!("IsShader was not loaded") }
    pub extern "C" fn IsSync(_: GLsync) -> GLboolean { fail!("IsSync was not loaded") }
    pub extern "C" fn IsSyncAPPLE(_: GLsync) -> GLboolean { fail!("IsSyncAPPLE was not loaded") }
    pub extern "C" fn IsTexture(_: GLuint) -> GLboolean { fail!("IsTexture was not loaded") }
    pub extern "C" fn IsTextureEXT(_: GLuint) -> GLboolean { fail!("IsTextureEXT was not loaded") }
    pub extern "C" fn IsTextureHandleResidentARB(_: GLuint64) -> GLboolean { fail!("IsTextureHandleResidentARB was not loaded") }
    pub extern "C" fn IsTextureHandleResidentNV(_: GLuint64) -> GLboolean { fail!("IsTextureHandleResidentNV was not loaded") }
    pub extern "C" fn IsTransformFeedback(_: GLuint) -> GLboolean { fail!("IsTransformFeedback was not loaded") }
    pub extern "C" fn IsTransformFeedbackNV(_: GLuint) -> GLboolean { fail!("IsTransformFeedbackNV was not loaded") }
    pub extern "C" fn IsVariantEnabledEXT(_: GLuint, _: GLenum) -> GLboolean { fail!("IsVariantEnabledEXT was not loaded") }
    pub extern "C" fn IsVertexArray(_: GLuint) -> GLboolean { fail!("IsVertexArray was not loaded") }
    pub extern "C" fn IsVertexArrayAPPLE(_: GLuint) -> GLboolean { fail!("IsVertexArrayAPPLE was not loaded") }
    pub extern "C" fn IsVertexArrayOES(_: GLuint) -> GLboolean { fail!("IsVertexArrayOES was not loaded") }
    pub extern "C" fn IsVertexAttribEnabledAPPLE(_: GLuint, _: GLenum) -> GLboolean { fail!("IsVertexAttribEnabledAPPLE was not loaded") }
    pub extern "C" fn LabelObjectEXT(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("LabelObjectEXT was not loaded") }
    pub extern "C" fn LightEnviSGIX(_: GLenum, _: GLint) -> c_void { fail!("LightEnviSGIX was not loaded") }
    pub extern "C" fn LightModelf(_: GLenum, _: GLfloat) -> c_void { fail!("LightModelf was not loaded") }
    pub extern "C" fn LightModelfv(_: GLenum, _: *GLfloat) -> c_void { fail!("LightModelfv was not loaded") }
    pub extern "C" fn LightModeli(_: GLenum, _: GLint) -> c_void { fail!("LightModeli was not loaded") }
    pub extern "C" fn LightModeliv(_: GLenum, _: *GLint) -> c_void { fail!("LightModeliv was not loaded") }
    pub extern "C" fn LightModelx(_: GLenum, _: GLfixed) -> c_void { fail!("LightModelx was not loaded") }
    pub extern "C" fn LightModelxOES(_: GLenum, _: GLfixed) -> c_void { fail!("LightModelxOES was not loaded") }
    pub extern "C" fn LightModelxv(_: GLenum, _: *GLfixed) -> c_void { fail!("LightModelxv was not loaded") }
    pub extern "C" fn LightModelxvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("LightModelxvOES was not loaded") }
    pub extern "C" fn Lightf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("Lightf was not loaded") }
    pub extern "C" fn Lightfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("Lightfv was not loaded") }
    pub extern "C" fn Lighti(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("Lighti was not loaded") }
    pub extern "C" fn Lightiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("Lightiv was not loaded") }
    pub extern "C" fn Lightx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("Lightx was not loaded") }
    pub extern "C" fn LightxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("LightxOES was not loaded") }
    pub extern "C" fn Lightxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("Lightxv was not loaded") }
    pub extern "C" fn LightxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("LightxvOES was not loaded") }
    pub extern "C" fn LineStipple(_: GLint, _: GLushort) -> c_void { fail!("LineStipple was not loaded") }
    pub extern "C" fn LineWidth(_: GLfloat) -> c_void { fail!("LineWidth was not loaded") }
    pub extern "C" fn LineWidthx(_: GLfixed) -> c_void { fail!("LineWidthx was not loaded") }
    pub extern "C" fn LineWidthxOES(_: GLfixed) -> c_void { fail!("LineWidthxOES was not loaded") }
    pub extern "C" fn LinkProgram(_: GLuint) -> c_void { fail!("LinkProgram was not loaded") }
    pub extern "C" fn LinkProgramARB(_: GLhandleARB) -> c_void { fail!("LinkProgramARB was not loaded") }
    pub extern "C" fn ListBase(_: GLuint) -> c_void { fail!("ListBase was not loaded") }
    pub extern "C" fn ListParameterfSGIX(_: GLuint, _: GLenum, _: GLfloat) -> c_void { fail!("ListParameterfSGIX was not loaded") }
    pub extern "C" fn ListParameterfvSGIX(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("ListParameterfvSGIX was not loaded") }
    pub extern "C" fn ListParameteriSGIX(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("ListParameteriSGIX was not loaded") }
    pub extern "C" fn ListParameterivSGIX(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("ListParameterivSGIX was not loaded") }
    pub extern "C" fn LoadIdentity() -> c_void { fail!("LoadIdentity was not loaded") }
    pub extern "C" fn LoadIdentityDeformationMapSGIX(_: GLbitfield) -> c_void { fail!("LoadIdentityDeformationMapSGIX was not loaded") }
    pub extern "C" fn LoadMatrixd(_: *GLdouble) -> c_void { fail!("LoadMatrixd was not loaded") }
    pub extern "C" fn LoadMatrixf(_: *GLfloat) -> c_void { fail!("LoadMatrixf was not loaded") }
    pub extern "C" fn LoadMatrixx(_: *GLfixed) -> c_void { fail!("LoadMatrixx was not loaded") }
    pub extern "C" fn LoadMatrixxOES(_: *GLfixed) -> c_void { fail!("LoadMatrixxOES was not loaded") }
    pub extern "C" fn LoadName(_: GLuint) -> c_void { fail!("LoadName was not loaded") }
    pub extern "C" fn LoadPaletteFromModelViewMatrixOES() -> c_void { fail!("LoadPaletteFromModelViewMatrixOES was not loaded") }
    pub extern "C" fn LoadProgramNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLubyte) -> c_void { fail!("LoadProgramNV was not loaded") }
    pub extern "C" fn LoadTransposeMatrixd(_: *GLdouble) -> c_void { fail!("LoadTransposeMatrixd was not loaded") }
    pub extern "C" fn LoadTransposeMatrixdARB(_: *GLdouble) -> c_void { fail!("LoadTransposeMatrixdARB was not loaded") }
    pub extern "C" fn LoadTransposeMatrixf(_: *GLfloat) -> c_void { fail!("LoadTransposeMatrixf was not loaded") }
    pub extern "C" fn LoadTransposeMatrixfARB(_: *GLfloat) -> c_void { fail!("LoadTransposeMatrixfARB was not loaded") }
    pub extern "C" fn LoadTransposeMatrixxOES(_: *GLfixed) -> c_void { fail!("LoadTransposeMatrixxOES was not loaded") }
    pub extern "C" fn LockArraysEXT(_: GLint, _: GLsizei) -> c_void { fail!("LockArraysEXT was not loaded") }
    pub extern "C" fn LogicOp(_: GLenum) -> c_void { fail!("LogicOp was not loaded") }
    pub extern "C" fn MakeBufferNonResidentNV(_: GLenum) -> c_void { fail!("MakeBufferNonResidentNV was not loaded") }
    pub extern "C" fn MakeBufferResidentNV(_: GLenum, _: GLenum) -> c_void { fail!("MakeBufferResidentNV was not loaded") }
    pub extern "C" fn MakeImageHandleNonResidentARB(_: GLuint64) -> c_void { fail!("MakeImageHandleNonResidentARB was not loaded") }
    pub extern "C" fn MakeImageHandleNonResidentNV(_: GLuint64) -> c_void { fail!("MakeImageHandleNonResidentNV was not loaded") }
    pub extern "C" fn MakeImageHandleResidentARB(_: GLuint64, _: GLenum) -> c_void { fail!("MakeImageHandleResidentARB was not loaded") }
    pub extern "C" fn MakeImageHandleResidentNV(_: GLuint64, _: GLenum) -> c_void { fail!("MakeImageHandleResidentNV was not loaded") }
    pub extern "C" fn MakeNamedBufferNonResidentNV(_: GLuint) -> c_void { fail!("MakeNamedBufferNonResidentNV was not loaded") }
    pub extern "C" fn MakeNamedBufferResidentNV(_: GLuint, _: GLenum) -> c_void { fail!("MakeNamedBufferResidentNV was not loaded") }
    pub extern "C" fn MakeTextureHandleNonResidentARB(_: GLuint64) -> c_void { fail!("MakeTextureHandleNonResidentARB was not loaded") }
    pub extern "C" fn MakeTextureHandleNonResidentNV(_: GLuint64) -> c_void { fail!("MakeTextureHandleNonResidentNV was not loaded") }
    pub extern "C" fn MakeTextureHandleResidentARB(_: GLuint64) -> c_void { fail!("MakeTextureHandleResidentARB was not loaded") }
    pub extern "C" fn MakeTextureHandleResidentNV(_: GLuint64) -> c_void { fail!("MakeTextureHandleResidentNV was not loaded") }
    pub extern "C" fn Map1d(_: GLenum, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("Map1d was not loaded") }
    pub extern "C" fn Map1f(_: GLenum, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("Map1f was not loaded") }
    pub extern "C" fn Map1xOES(_: GLenum, _: GLfixed, _: GLfixed, _: GLint, _: GLint, _: GLfixed) -> c_void { fail!("Map1xOES was not loaded") }
    pub extern "C" fn Map2d(_: GLenum, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("Map2d was not loaded") }
    pub extern "C" fn Map2f(_: GLenum, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("Map2f was not loaded") }
    pub extern "C" fn Map2xOES(_: GLenum, _: GLfixed, _: GLfixed, _: GLint, _: GLint, _: GLfixed, _: GLfixed, _: GLint, _: GLint, _: GLfixed) -> c_void { fail!("Map2xOES was not loaded") }
    pub extern "C" fn MapBuffer(_: GLenum, _: GLenum) -> *c_void { fail!("MapBuffer was not loaded") }
    pub extern "C" fn MapBufferARB(_: GLenum, _: GLenum) -> *c_void { fail!("MapBufferARB was not loaded") }
    pub extern "C" fn MapBufferOES(_: GLenum, _: GLenum) -> *c_void { fail!("MapBufferOES was not loaded") }
    pub extern "C" fn MapBufferRange(_: GLenum, _: GLintptr, _: GLsizeiptr, _: GLbitfield) -> *c_void { fail!("MapBufferRange was not loaded") }
    pub extern "C" fn MapBufferRangeEXT(_: GLenum, _: GLintptr, _: GLsizeiptr, _: GLbitfield) -> *c_void { fail!("MapBufferRangeEXT was not loaded") }
    pub extern "C" fn MapControlPointsNV(_: GLenum, _: GLuint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLint, _: GLboolean, _: *GLvoid) -> c_void { fail!("MapControlPointsNV was not loaded") }
    pub extern "C" fn MapGrid1d(_: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("MapGrid1d was not loaded") }
    pub extern "C" fn MapGrid1f(_: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("MapGrid1f was not loaded") }
    pub extern "C" fn MapGrid1xOES(_: GLint, _: GLfixed, _: GLfixed) -> c_void { fail!("MapGrid1xOES was not loaded") }
    pub extern "C" fn MapGrid2d(_: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("MapGrid2d was not loaded") }
    pub extern "C" fn MapGrid2f(_: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("MapGrid2f was not loaded") }
    pub extern "C" fn MapGrid2xOES(_: GLint, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("MapGrid2xOES was not loaded") }
    pub extern "C" fn MapNamedBufferEXT(_: GLuint, _: GLenum) -> *c_void { fail!("MapNamedBufferEXT was not loaded") }
    pub extern "C" fn MapNamedBufferRangeEXT(_: GLuint, _: GLintptr, _: GLsizeiptr, _: GLbitfield) -> *c_void { fail!("MapNamedBufferRangeEXT was not loaded") }
    pub extern "C" fn MapObjectBufferATI(_: GLuint) -> *c_void { fail!("MapObjectBufferATI was not loaded") }
    pub extern "C" fn MapParameterfvNV(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("MapParameterfvNV was not loaded") }
    pub extern "C" fn MapParameterivNV(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MapParameterivNV was not loaded") }
    pub extern "C" fn MapTexture2DINTEL(_: GLuint, _: GLint, _: GLbitfield, _: *GLint, _: *GLenum) -> *c_void { fail!("MapTexture2DINTEL was not loaded") }
    pub extern "C" fn MapVertexAttrib1dAPPLE(_: GLuint, _: GLuint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("MapVertexAttrib1dAPPLE was not loaded") }
    pub extern "C" fn MapVertexAttrib1fAPPLE(_: GLuint, _: GLuint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("MapVertexAttrib1fAPPLE was not loaded") }
    pub extern "C" fn MapVertexAttrib2dAPPLE(_: GLuint, _: GLuint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: GLdouble, _: GLdouble, _: GLint, _: GLint, _: *GLdouble) -> c_void { fail!("MapVertexAttrib2dAPPLE was not loaded") }
    pub extern "C" fn MapVertexAttrib2fAPPLE(_: GLuint, _: GLuint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: GLfloat, _: GLfloat, _: GLint, _: GLint, _: *GLfloat) -> c_void { fail!("MapVertexAttrib2fAPPLE was not loaded") }
    pub extern "C" fn Materialf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("Materialf was not loaded") }
    pub extern "C" fn Materialfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("Materialfv was not loaded") }
    pub extern "C" fn Materiali(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("Materiali was not loaded") }
    pub extern "C" fn Materialiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("Materialiv was not loaded") }
    pub extern "C" fn Materialx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("Materialx was not loaded") }
    pub extern "C" fn MaterialxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("MaterialxOES was not loaded") }
    pub extern "C" fn Materialxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("Materialxv was not loaded") }
    pub extern "C" fn MaterialxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("MaterialxvOES was not loaded") }
    pub extern "C" fn MatrixFrustumEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixFrustumEXT was not loaded") }
    pub extern "C" fn MatrixIndexPointerARB(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("MatrixIndexPointerARB was not loaded") }
    pub extern "C" fn MatrixIndexPointerOES(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("MatrixIndexPointerOES was not loaded") }
    pub extern "C" fn MatrixIndexubvARB(_: GLint, _: *GLubyte) -> c_void { fail!("MatrixIndexubvARB was not loaded") }
    pub extern "C" fn MatrixIndexuivARB(_: GLint, _: *GLuint) -> c_void { fail!("MatrixIndexuivARB was not loaded") }
    pub extern "C" fn MatrixIndexusvARB(_: GLint, _: *GLushort) -> c_void { fail!("MatrixIndexusvARB was not loaded") }
    pub extern "C" fn MatrixLoadIdentityEXT(_: GLenum) -> c_void { fail!("MatrixLoadIdentityEXT was not loaded") }
    pub extern "C" fn MatrixLoadTransposedEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("MatrixLoadTransposedEXT was not loaded") }
    pub extern "C" fn MatrixLoadTransposefEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("MatrixLoadTransposefEXT was not loaded") }
    pub extern "C" fn MatrixLoaddEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("MatrixLoaddEXT was not loaded") }
    pub extern "C" fn MatrixLoadfEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("MatrixLoadfEXT was not loaded") }
    pub extern "C" fn MatrixMode(_: GLenum) -> c_void { fail!("MatrixMode was not loaded") }
    pub extern "C" fn MatrixMultTransposedEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("MatrixMultTransposedEXT was not loaded") }
    pub extern "C" fn MatrixMultTransposefEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("MatrixMultTransposefEXT was not loaded") }
    pub extern "C" fn MatrixMultdEXT(_: GLenum, _: *GLdouble) -> c_void { fail!("MatrixMultdEXT was not loaded") }
    pub extern "C" fn MatrixMultfEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("MatrixMultfEXT was not loaded") }
    pub extern "C" fn MatrixOrthoEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixOrthoEXT was not loaded") }
    pub extern "C" fn MatrixPopEXT(_: GLenum) -> c_void { fail!("MatrixPopEXT was not loaded") }
    pub extern "C" fn MatrixPushEXT(_: GLenum) -> c_void { fail!("MatrixPushEXT was not loaded") }
    pub extern "C" fn MatrixRotatedEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixRotatedEXT was not loaded") }
    pub extern "C" fn MatrixRotatefEXT(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MatrixRotatefEXT was not loaded") }
    pub extern "C" fn MatrixScaledEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixScaledEXT was not loaded") }
    pub extern "C" fn MatrixScalefEXT(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MatrixScalefEXT was not loaded") }
    pub extern "C" fn MatrixTranslatedEXT(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MatrixTranslatedEXT was not loaded") }
    pub extern "C" fn MatrixTranslatefEXT(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MatrixTranslatefEXT was not loaded") }
    pub extern "C" fn MemoryBarrier(_: GLbitfield) -> c_void { fail!("MemoryBarrier was not loaded") }
    pub extern "C" fn MemoryBarrierEXT(_: GLbitfield) -> c_void { fail!("MemoryBarrierEXT was not loaded") }
    pub extern "C" fn MinSampleShading(_: GLfloat) -> c_void { fail!("MinSampleShading was not loaded") }
    pub extern "C" fn MinSampleShadingARB(_: GLfloat) -> c_void { fail!("MinSampleShadingARB was not loaded") }
    pub extern "C" fn Minmax(_: GLenum, _: GLenum, _: GLboolean) -> c_void { fail!("Minmax was not loaded") }
    pub extern "C" fn MinmaxEXT(_: GLenum, _: GLenum, _: GLboolean) -> c_void { fail!("MinmaxEXT was not loaded") }
    pub extern "C" fn MultMatrixd(_: *GLdouble) -> c_void { fail!("MultMatrixd was not loaded") }
    pub extern "C" fn MultMatrixf(_: *GLfloat) -> c_void { fail!("MultMatrixf was not loaded") }
    pub extern "C" fn MultMatrixx(_: *GLfixed) -> c_void { fail!("MultMatrixx was not loaded") }
    pub extern "C" fn MultMatrixxOES(_: *GLfixed) -> c_void { fail!("MultMatrixxOES was not loaded") }
    pub extern "C" fn MultTransposeMatrixd(_: *GLdouble) -> c_void { fail!("MultTransposeMatrixd was not loaded") }
    pub extern "C" fn MultTransposeMatrixdARB(_: *GLdouble) -> c_void { fail!("MultTransposeMatrixdARB was not loaded") }
    pub extern "C" fn MultTransposeMatrixf(_: *GLfloat) -> c_void { fail!("MultTransposeMatrixf was not loaded") }
    pub extern "C" fn MultTransposeMatrixfARB(_: *GLfloat) -> c_void { fail!("MultTransposeMatrixfARB was not loaded") }
    pub extern "C" fn MultTransposeMatrixxOES(_: *GLfixed) -> c_void { fail!("MultTransposeMatrixxOES was not loaded") }
    pub extern "C" fn MultiDrawArrays(_: GLenum, _: *GLint, _: *GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArrays was not loaded") }
    pub extern "C" fn MultiDrawArraysEXT(_: GLenum, _: *GLint, _: *GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArraysEXT was not loaded") }
    pub extern "C" fn MultiDrawArraysIndirect(_: GLenum, _: *c_void, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArraysIndirect was not loaded") }
    pub extern "C" fn MultiDrawArraysIndirectAMD(_: GLenum, _: *GLvoid, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArraysIndirectAMD was not loaded") }
    pub extern "C" fn MultiDrawArraysIndirectBindlessNV(_: GLenum, _: *GLvoid, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("MultiDrawArraysIndirectBindlessNV was not loaded") }
    pub extern "C" fn MultiDrawElementsIndirectBindlessNV(_: GLenum, _: GLenum, _: *GLvoid, _: GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("MultiDrawElementsIndirectBindlessNV was not loaded") }
    pub extern "C" fn MultiDrawArraysIndirectCountARB(_: GLenum, _: GLintptr, _: GLintptr, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawArraysIndirectCountARB was not loaded") }
    pub extern "C" fn MultiDrawElementArrayAPPLE(_: GLenum, _: *GLint, _: *GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawElementArrayAPPLE was not loaded") }
    pub extern "C" fn MultiDrawElements(_: GLenum, _: *GLsizei, _: GLenum, _: **GLvoid, _: GLsizei) -> c_void { fail!("MultiDrawElements was not loaded") }
    pub extern "C" fn MultiDrawElementsBaseVertex(_: GLenum, _: *GLsizei, _: GLenum, _: **GLvoid, _: GLsizei, _: *GLint) -> c_void { fail!("MultiDrawElementsBaseVertex was not loaded") }
    pub extern "C" fn MultiDrawElementsEXT(_: GLenum, _: *GLsizei, _: GLenum, _: **GLvoid, _: GLsizei) -> c_void { fail!("MultiDrawElementsEXT was not loaded") }
    pub extern "C" fn MultiDrawElementsIndirect(_: GLenum, _: GLenum, _: *c_void, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawElementsIndirect was not loaded") }
    pub extern "C" fn MultiDrawElementsIndirectAMD(_: GLenum, _: GLenum, _: *GLvoid, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawElementsIndirectAMD was not loaded") }
    pub extern "C" fn MultiDrawElementsIndirectCountARB(_: GLenum, _: GLenum, _: GLintptr, _: GLintptr, _: GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawElementsIndirectCountARB was not loaded") }
    pub extern "C" fn MultiDrawRangeElementArrayAPPLE(_: GLenum, _: GLuint, _: GLuint, _: *GLint, _: *GLsizei, _: GLsizei) -> c_void { fail!("MultiDrawRangeElementArrayAPPLE was not loaded") }
    pub extern "C" fn MultiModeDrawArraysIBM(_: *GLenum, _: *GLint, _: *GLsizei, _: GLsizei, _: GLint) -> c_void { fail!("MultiModeDrawArraysIBM was not loaded") }
    pub extern "C" fn MultiModeDrawElementsIBM(_: *GLenum, _: *GLsizei, _: GLenum, _: **GLvoid, _: GLsizei, _: GLint) -> c_void { fail!("MultiModeDrawElementsIBM was not loaded") }
    pub extern "C" fn MultiTexBufferEXT(_: GLenum, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexBufferEXT was not loaded") }
    pub extern "C" fn MultiTexCoord1bOES(_: GLenum, _: GLbyte) -> c_void { fail!("MultiTexCoord1bOES was not loaded") }
    pub extern "C" fn MultiTexCoord1bvOES(_: GLenum, _: *GLbyte) -> c_void { fail!("MultiTexCoord1bvOES was not loaded") }
    pub extern "C" fn MultiTexCoord1d(_: GLenum, _: GLdouble) -> c_void { fail!("MultiTexCoord1d was not loaded") }
    pub extern "C" fn MultiTexCoord1dARB(_: GLenum, _: GLdouble) -> c_void { fail!("MultiTexCoord1dARB was not loaded") }
    pub extern "C" fn MultiTexCoord1dv(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord1dv was not loaded") }
    pub extern "C" fn MultiTexCoord1dvARB(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord1dvARB was not loaded") }
    pub extern "C" fn MultiTexCoord1f(_: GLenum, _: GLfloat) -> c_void { fail!("MultiTexCoord1f was not loaded") }
    pub extern "C" fn MultiTexCoord1fARB(_: GLenum, _: GLfloat) -> c_void { fail!("MultiTexCoord1fARB was not loaded") }
    pub extern "C" fn MultiTexCoord1fv(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord1fv was not loaded") }
    pub extern "C" fn MultiTexCoord1fvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord1fvARB was not loaded") }
    pub extern "C" fn MultiTexCoord1hNV(_: GLenum, _: GLhalfNV) -> c_void { fail!("MultiTexCoord1hNV was not loaded") }
    pub extern "C" fn MultiTexCoord1hvNV(_: GLenum, _: *GLhalfNV) -> c_void { fail!("MultiTexCoord1hvNV was not loaded") }
    pub extern "C" fn MultiTexCoord1i(_: GLenum, _: GLint) -> c_void { fail!("MultiTexCoord1i was not loaded") }
    pub extern "C" fn MultiTexCoord1iARB(_: GLenum, _: GLint) -> c_void { fail!("MultiTexCoord1iARB was not loaded") }
    pub extern "C" fn MultiTexCoord1iv(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord1iv was not loaded") }
    pub extern "C" fn MultiTexCoord1ivARB(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord1ivARB was not loaded") }
    pub extern "C" fn MultiTexCoord1s(_: GLenum, _: GLshort) -> c_void { fail!("MultiTexCoord1s was not loaded") }
    pub extern "C" fn MultiTexCoord1sARB(_: GLenum, _: GLshort) -> c_void { fail!("MultiTexCoord1sARB was not loaded") }
    pub extern "C" fn MultiTexCoord1sv(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord1sv was not loaded") }
    pub extern "C" fn MultiTexCoord1svARB(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord1svARB was not loaded") }
    pub extern "C" fn MultiTexCoord1xOES(_: GLenum, _: GLfixed) -> c_void { fail!("MultiTexCoord1xOES was not loaded") }
    pub extern "C" fn MultiTexCoord1xvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("MultiTexCoord1xvOES was not loaded") }
    pub extern "C" fn MultiTexCoord2bOES(_: GLenum, _: GLbyte, _: GLbyte) -> c_void { fail!("MultiTexCoord2bOES was not loaded") }
    pub extern "C" fn MultiTexCoord2bvOES(_: GLenum, _: *GLbyte) -> c_void { fail!("MultiTexCoord2bvOES was not loaded") }
    pub extern "C" fn MultiTexCoord2d(_: GLenum, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord2d was not loaded") }
    pub extern "C" fn MultiTexCoord2dARB(_: GLenum, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord2dARB was not loaded") }
    pub extern "C" fn MultiTexCoord2dv(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord2dv was not loaded") }
    pub extern "C" fn MultiTexCoord2dvARB(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord2dvARB was not loaded") }
    pub extern "C" fn MultiTexCoord2f(_: GLenum, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord2f was not loaded") }
    pub extern "C" fn MultiTexCoord2fARB(_: GLenum, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord2fARB was not loaded") }
    pub extern "C" fn MultiTexCoord2fv(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord2fv was not loaded") }
    pub extern "C" fn MultiTexCoord2fvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord2fvARB was not loaded") }
    pub extern "C" fn MultiTexCoord2hNV(_: GLenum, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("MultiTexCoord2hNV was not loaded") }
    pub extern "C" fn MultiTexCoord2hvNV(_: GLenum, _: *GLhalfNV) -> c_void { fail!("MultiTexCoord2hvNV was not loaded") }
    pub extern "C" fn MultiTexCoord2i(_: GLenum, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord2i was not loaded") }
    pub extern "C" fn MultiTexCoord2iARB(_: GLenum, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord2iARB was not loaded") }
    pub extern "C" fn MultiTexCoord2iv(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord2iv was not loaded") }
    pub extern "C" fn MultiTexCoord2ivARB(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord2ivARB was not loaded") }
    pub extern "C" fn MultiTexCoord2s(_: GLenum, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord2s was not loaded") }
    pub extern "C" fn MultiTexCoord2sARB(_: GLenum, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord2sARB was not loaded") }
    pub extern "C" fn MultiTexCoord2sv(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord2sv was not loaded") }
    pub extern "C" fn MultiTexCoord2svARB(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord2svARB was not loaded") }
    pub extern "C" fn MultiTexCoord2xOES(_: GLenum, _: GLfixed, _: GLfixed) -> c_void { fail!("MultiTexCoord2xOES was not loaded") }
    pub extern "C" fn MultiTexCoord2xvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("MultiTexCoord2xvOES was not loaded") }
    pub extern "C" fn MultiTexCoord3bOES(_: GLenum, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("MultiTexCoord3bOES was not loaded") }
    pub extern "C" fn MultiTexCoord3bvOES(_: GLenum, _: *GLbyte) -> c_void { fail!("MultiTexCoord3bvOES was not loaded") }
    pub extern "C" fn MultiTexCoord3d(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord3d was not loaded") }
    pub extern "C" fn MultiTexCoord3dARB(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord3dARB was not loaded") }
    pub extern "C" fn MultiTexCoord3dv(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord3dv was not loaded") }
    pub extern "C" fn MultiTexCoord3dvARB(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord3dvARB was not loaded") }
    pub extern "C" fn MultiTexCoord3f(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord3f was not loaded") }
    pub extern "C" fn MultiTexCoord3fARB(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord3fARB was not loaded") }
    pub extern "C" fn MultiTexCoord3fv(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord3fv was not loaded") }
    pub extern "C" fn MultiTexCoord3fvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord3fvARB was not loaded") }
    pub extern "C" fn MultiTexCoord3hNV(_: GLenum, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("MultiTexCoord3hNV was not loaded") }
    pub extern "C" fn MultiTexCoord3hvNV(_: GLenum, _: *GLhalfNV) -> c_void { fail!("MultiTexCoord3hvNV was not loaded") }
    pub extern "C" fn MultiTexCoord3i(_: GLenum, _: GLint, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord3i was not loaded") }
    pub extern "C" fn MultiTexCoord3iARB(_: GLenum, _: GLint, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord3iARB was not loaded") }
    pub extern "C" fn MultiTexCoord3iv(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord3iv was not loaded") }
    pub extern "C" fn MultiTexCoord3ivARB(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord3ivARB was not loaded") }
    pub extern "C" fn MultiTexCoord3s(_: GLenum, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord3s was not loaded") }
    pub extern "C" fn MultiTexCoord3sARB(_: GLenum, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord3sARB was not loaded") }
    pub extern "C" fn MultiTexCoord3sv(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord3sv was not loaded") }
    pub extern "C" fn MultiTexCoord3svARB(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord3svARB was not loaded") }
    pub extern "C" fn MultiTexCoord3xOES(_: GLenum, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("MultiTexCoord3xOES was not loaded") }
    pub extern "C" fn MultiTexCoord3xvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("MultiTexCoord3xvOES was not loaded") }
    pub extern "C" fn MultiTexCoord4bOES(_: GLenum, _: GLbyte, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("MultiTexCoord4bOES was not loaded") }
    pub extern "C" fn MultiTexCoord4bvOES(_: GLenum, _: *GLbyte) -> c_void { fail!("MultiTexCoord4bvOES was not loaded") }
    pub extern "C" fn MultiTexCoord4d(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord4d was not loaded") }
    pub extern "C" fn MultiTexCoord4dARB(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("MultiTexCoord4dARB was not loaded") }
    pub extern "C" fn MultiTexCoord4dv(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord4dv was not loaded") }
    pub extern "C" fn MultiTexCoord4dvARB(_: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexCoord4dvARB was not loaded") }
    pub extern "C" fn MultiTexCoord4f(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord4f was not loaded") }
    pub extern "C" fn MultiTexCoord4fARB(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("MultiTexCoord4fARB was not loaded") }
    pub extern "C" fn MultiTexCoord4fv(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord4fv was not loaded") }
    pub extern "C" fn MultiTexCoord4fvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexCoord4fvARB was not loaded") }
    pub extern "C" fn MultiTexCoord4hNV(_: GLenum, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("MultiTexCoord4hNV was not loaded") }
    pub extern "C" fn MultiTexCoord4hvNV(_: GLenum, _: *GLhalfNV) -> c_void { fail!("MultiTexCoord4hvNV was not loaded") }
    pub extern "C" fn MultiTexCoord4i(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord4i was not loaded") }
    pub extern "C" fn MultiTexCoord4iARB(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("MultiTexCoord4iARB was not loaded") }
    pub extern "C" fn MultiTexCoord4iv(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord4iv was not loaded") }
    pub extern "C" fn MultiTexCoord4ivARB(_: GLenum, _: *GLint) -> c_void { fail!("MultiTexCoord4ivARB was not loaded") }
    pub extern "C" fn MultiTexCoord4s(_: GLenum, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord4s was not loaded") }
    pub extern "C" fn MultiTexCoord4sARB(_: GLenum, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("MultiTexCoord4sARB was not loaded") }
    pub extern "C" fn MultiTexCoord4sv(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord4sv was not loaded") }
    pub extern "C" fn MultiTexCoord4svARB(_: GLenum, _: *GLshort) -> c_void { fail!("MultiTexCoord4svARB was not loaded") }
    pub extern "C" fn MultiTexCoord4x(_: GLenum, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("MultiTexCoord4x was not loaded") }
    pub extern "C" fn MultiTexCoord4xOES(_: GLenum, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("MultiTexCoord4xOES was not loaded") }
    pub extern "C" fn MultiTexCoord4xvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("MultiTexCoord4xvOES was not loaded") }
    pub extern "C" fn MultiTexCoordP1ui(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexCoordP1ui was not loaded") }
    pub extern "C" fn MultiTexCoordP1uiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexCoordP1uiv was not loaded") }
    pub extern "C" fn MultiTexCoordP2ui(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexCoordP2ui was not loaded") }
    pub extern "C" fn MultiTexCoordP2uiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexCoordP2uiv was not loaded") }
    pub extern "C" fn MultiTexCoordP3ui(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexCoordP3ui was not loaded") }
    pub extern "C" fn MultiTexCoordP3uiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexCoordP3uiv was not loaded") }
    pub extern "C" fn MultiTexCoordP4ui(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexCoordP4ui was not loaded") }
    pub extern "C" fn MultiTexCoordP4uiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexCoordP4uiv was not loaded") }
    pub extern "C" fn MultiTexCoordPointerEXT(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("MultiTexCoordPointerEXT was not loaded") }
    pub extern "C" fn MultiTexEnvfEXT(_: GLenum, _: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("MultiTexEnvfEXT was not loaded") }
    pub extern "C" fn MultiTexEnvfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexEnvfvEXT was not loaded") }
    pub extern "C" fn MultiTexEnviEXT(_: GLenum, _: GLenum, _: GLenum, _: GLint) -> c_void { fail!("MultiTexEnviEXT was not loaded") }
    pub extern "C" fn MultiTexEnvivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MultiTexEnvivEXT was not loaded") }
    pub extern "C" fn MultiTexGendEXT(_: GLenum, _: GLenum, _: GLenum, _: GLdouble) -> c_void { fail!("MultiTexGendEXT was not loaded") }
    pub extern "C" fn MultiTexGendvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("MultiTexGendvEXT was not loaded") }
    pub extern "C" fn MultiTexGenfEXT(_: GLenum, _: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("MultiTexGenfEXT was not loaded") }
    pub extern "C" fn MultiTexGenfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexGenfvEXT was not loaded") }
    pub extern "C" fn MultiTexGeniEXT(_: GLenum, _: GLenum, _: GLenum, _: GLint) -> c_void { fail!("MultiTexGeniEXT was not loaded") }
    pub extern "C" fn MultiTexGenivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MultiTexGenivEXT was not loaded") }
    pub extern "C" fn MultiTexImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexImage1DEXT was not loaded") }
    pub extern "C" fn MultiTexImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexImage2DEXT was not loaded") }
    pub extern "C" fn MultiTexImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexImage3DEXT was not loaded") }
    pub extern "C" fn MultiTexParameterIivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MultiTexParameterIivEXT was not loaded") }
    pub extern "C" fn MultiTexParameterIuivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("MultiTexParameterIuivEXT was not loaded") }
    pub extern "C" fn MultiTexParameterfEXT(_: GLenum, _: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("MultiTexParameterfEXT was not loaded") }
    pub extern "C" fn MultiTexParameterfvEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("MultiTexParameterfvEXT was not loaded") }
    pub extern "C" fn MultiTexParameteriEXT(_: GLenum, _: GLenum, _: GLenum, _: GLint) -> c_void { fail!("MultiTexParameteriEXT was not loaded") }
    pub extern "C" fn MultiTexParameterivEXT(_: GLenum, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("MultiTexParameterivEXT was not loaded") }
    pub extern "C" fn MultiTexRenderbufferEXT(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("MultiTexRenderbufferEXT was not loaded") }
    pub extern "C" fn MultiTexSubImage1DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexSubImage1DEXT was not loaded") }
    pub extern "C" fn MultiTexSubImage2DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexSubImage2DEXT was not loaded") }
    pub extern "C" fn MultiTexSubImage3DEXT(_: GLenum, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("MultiTexSubImage3DEXT was not loaded") }
    pub extern "C" fn NamedBufferDataEXT(_: GLuint, _: GLsizeiptr, _: *GLvoid, _: GLenum) -> c_void { fail!("NamedBufferDataEXT was not loaded") }
    pub extern "C" fn NamedBufferStorageEXT(_: GLuint, _: GLsizeiptr, _: *c_void, _: GLbitfield) -> c_void { fail!("NamedBufferStorageEXT was not loaded") }
    pub extern "C" fn NamedBufferSubDataEXT(_: GLuint, _: GLintptr, _: GLsizeiptr, _: *GLvoid) -> c_void { fail!("NamedBufferSubDataEXT was not loaded") }
    pub extern "C" fn NamedCopyBufferSubDataEXT(_: GLuint, _: GLuint, _: GLintptr, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("NamedCopyBufferSubDataEXT was not loaded") }
    pub extern "C" fn NamedFramebufferParameteriEXT(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("NamedFramebufferParameteriEXT was not loaded") }
    pub extern "C" fn NamedFramebufferRenderbufferEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("NamedFramebufferRenderbufferEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTexture1DEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("NamedFramebufferTexture1DEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTexture2DEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("NamedFramebufferTexture2DEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTexture3DEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("NamedFramebufferTexture3DEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTextureEXT(_: GLuint, _: GLenum, _: GLuint, _: GLint) -> c_void { fail!("NamedFramebufferTextureEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTextureFaceEXT(_: GLuint, _: GLenum, _: GLuint, _: GLint, _: GLenum) -> c_void { fail!("NamedFramebufferTextureFaceEXT was not loaded") }
    pub extern "C" fn NamedFramebufferTextureLayerEXT(_: GLuint, _: GLenum, _: GLuint, _: GLint, _: GLint) -> c_void { fail!("NamedFramebufferTextureLayerEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameter4dEXT(_: GLuint, _: GLenum, _: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("NamedProgramLocalParameter4dEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameter4dvEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("NamedProgramLocalParameter4dvEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameter4fEXT(_: GLuint, _: GLenum, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("NamedProgramLocalParameter4fEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameter4fvEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("NamedProgramLocalParameter4fvEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameterI4iEXT(_: GLuint, _: GLenum, _: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("NamedProgramLocalParameterI4iEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameterI4ivEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("NamedProgramLocalParameterI4ivEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameterI4uiEXT(_: GLuint, _: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("NamedProgramLocalParameterI4uiEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameterI4uivEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("NamedProgramLocalParameterI4uivEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParameters4fvEXT(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("NamedProgramLocalParameters4fvEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParametersI4ivEXT(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("NamedProgramLocalParametersI4ivEXT was not loaded") }
    pub extern "C" fn NamedProgramLocalParametersI4uivEXT(_: GLuint, _: GLenum, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("NamedProgramLocalParametersI4uivEXT was not loaded") }
    pub extern "C" fn NamedProgramStringEXT(_: GLuint, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("NamedProgramStringEXT was not loaded") }
    pub extern "C" fn NamedRenderbufferStorageEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("NamedRenderbufferStorageEXT was not loaded") }
    pub extern "C" fn NamedRenderbufferStorageMultisampleCoverageEXT(_: GLuint, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("NamedRenderbufferStorageMultisampleCoverageEXT was not loaded") }
    pub extern "C" fn NamedRenderbufferStorageMultisampleEXT(_: GLuint, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("NamedRenderbufferStorageMultisampleEXT was not loaded") }
    pub extern "C" fn NamedStringARB(_: GLenum, _: GLint, _: *GLchar, _: GLint, _: *GLchar) -> c_void { fail!("NamedStringARB was not loaded") }
    pub extern "C" fn NewList(_: GLuint, _: GLenum) -> c_void { fail!("NewList was not loaded") }
    pub extern "C" fn NewObjectBufferATI(_: GLsizei, _: *GLvoid, _: GLenum) -> GLuint { fail!("NewObjectBufferATI was not loaded") }
    pub extern "C" fn Normal3b(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Normal3b was not loaded") }
    pub extern "C" fn Normal3bv(_: *GLbyte) -> c_void { fail!("Normal3bv was not loaded") }
    pub extern "C" fn Normal3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Normal3d was not loaded") }
    pub extern "C" fn Normal3dv(_: *GLdouble) -> c_void { fail!("Normal3dv was not loaded") }
    pub extern "C" fn Normal3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Normal3f was not loaded") }
    pub extern "C" fn Normal3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Normal3fVertex3fSUN was not loaded") }
    pub extern "C" fn Normal3fVertex3fvSUN(_: *GLfloat, _: *GLfloat) -> c_void { fail!("Normal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn Normal3fv(_: *GLfloat) -> c_void { fail!("Normal3fv was not loaded") }
    pub extern "C" fn Normal3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Normal3hNV was not loaded") }
    pub extern "C" fn Normal3hvNV(_: *GLhalfNV) -> c_void { fail!("Normal3hvNV was not loaded") }
    pub extern "C" fn Normal3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Normal3i was not loaded") }
    pub extern "C" fn Normal3iv(_: *GLint) -> c_void { fail!("Normal3iv was not loaded") }
    pub extern "C" fn Normal3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Normal3s was not loaded") }
    pub extern "C" fn Normal3sv(_: *GLshort) -> c_void { fail!("Normal3sv was not loaded") }
    pub extern "C" fn Normal3x(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Normal3x was not loaded") }
    pub extern "C" fn Normal3xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Normal3xOES was not loaded") }
    pub extern "C" fn Normal3xvOES(_: *GLfixed) -> c_void { fail!("Normal3xvOES was not loaded") }
    pub extern "C" fn NormalFormatNV(_: GLenum, _: GLsizei) -> c_void { fail!("NormalFormatNV was not loaded") }
    pub extern "C" fn NormalP3ui(_: GLenum, _: GLuint) -> c_void { fail!("NormalP3ui was not loaded") }
    pub extern "C" fn NormalP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("NormalP3uiv was not loaded") }
    pub extern "C" fn NormalPointer(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("NormalPointer was not loaded") }
    pub extern "C" fn NormalPointerEXT(_: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("NormalPointerEXT was not loaded") }
    pub extern "C" fn NormalPointerListIBM(_: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("NormalPointerListIBM was not loaded") }
    pub extern "C" fn NormalPointervINTEL(_: GLenum, _: **GLvoid) -> c_void { fail!("NormalPointervINTEL was not loaded") }
    pub extern "C" fn NormalStream3bATI(_: GLenum, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("NormalStream3bATI was not loaded") }
    pub extern "C" fn NormalStream3bvATI(_: GLenum, _: *GLbyte) -> c_void { fail!("NormalStream3bvATI was not loaded") }
    pub extern "C" fn NormalStream3dATI(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("NormalStream3dATI was not loaded") }
    pub extern "C" fn NormalStream3dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("NormalStream3dvATI was not loaded") }
    pub extern "C" fn NormalStream3fATI(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("NormalStream3fATI was not loaded") }
    pub extern "C" fn NormalStream3fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("NormalStream3fvATI was not loaded") }
    pub extern "C" fn NormalStream3iATI(_: GLenum, _: GLint, _: GLint, _: GLint) -> c_void { fail!("NormalStream3iATI was not loaded") }
    pub extern "C" fn NormalStream3ivATI(_: GLenum, _: *GLint) -> c_void { fail!("NormalStream3ivATI was not loaded") }
    pub extern "C" fn NormalStream3sATI(_: GLenum, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("NormalStream3sATI was not loaded") }
    pub extern "C" fn NormalStream3svATI(_: GLenum, _: *GLshort) -> c_void { fail!("NormalStream3svATI was not loaded") }
    pub extern "C" fn ObjectLabel(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("ObjectLabel was not loaded") }
    pub extern "C" fn ObjectLabelKHR(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("ObjectLabelKHR was not loaded") }
    pub extern "C" fn ObjectPtrLabel(_: *c_void, _: GLsizei, _: *GLchar) -> c_void { fail!("ObjectPtrLabel was not loaded") }
    pub extern "C" fn ObjectPtrLabelKHR(_: *c_void, _: GLsizei, _: *GLchar) -> c_void { fail!("ObjectPtrLabelKHR was not loaded") }
    pub extern "C" fn ObjectPurgeableAPPLE(_: GLenum, _: GLuint, _: GLenum) -> GLenum { fail!("ObjectPurgeableAPPLE was not loaded") }
    pub extern "C" fn ObjectUnpurgeableAPPLE(_: GLenum, _: GLuint, _: GLenum) -> GLenum { fail!("ObjectUnpurgeableAPPLE was not loaded") }
    pub extern "C" fn Ortho(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Ortho was not loaded") }
    pub extern "C" fn Orthof(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Orthof was not loaded") }
    pub extern "C" fn OrthofOES(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("OrthofOES was not loaded") }
    pub extern "C" fn Orthox(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Orthox was not loaded") }
    pub extern "C" fn OrthoxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("OrthoxOES was not loaded") }
    pub extern "C" fn PNTrianglesfATI(_: GLenum, _: GLfloat) -> c_void { fail!("PNTrianglesfATI was not loaded") }
    pub extern "C" fn PNTrianglesiATI(_: GLenum, _: GLint) -> c_void { fail!("PNTrianglesiATI was not loaded") }
    pub extern "C" fn PassTexCoordATI(_: GLuint, _: GLuint, _: GLenum) -> c_void { fail!("PassTexCoordATI was not loaded") }
    pub extern "C" fn PassThrough(_: GLfloat) -> c_void { fail!("PassThrough was not loaded") }
    pub extern "C" fn PassThroughxOES(_: GLfixed) -> c_void { fail!("PassThroughxOES was not loaded") }
    pub extern "C" fn PatchParameterfv(_: GLenum, _: *GLfloat) -> c_void { fail!("PatchParameterfv was not loaded") }
    pub extern "C" fn PatchParameteri(_: GLenum, _: GLint) -> c_void { fail!("PatchParameteri was not loaded") }
    pub extern "C" fn PathColorGenNV(_: GLenum, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("PathColorGenNV was not loaded") }
    pub extern "C" fn PathCommandsNV(_: GLuint, _: GLsizei, _: *GLubyte, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("PathCommandsNV was not loaded") }
    pub extern "C" fn PathCoordsNV(_: GLuint, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("PathCoordsNV was not loaded") }
    pub extern "C" fn PathCoverDepthFuncNV(_: GLenum) -> c_void { fail!("PathCoverDepthFuncNV was not loaded") }
    pub extern "C" fn PathDashArrayNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("PathDashArrayNV was not loaded") }
    pub extern "C" fn PathFogGenNV(_: GLenum) -> c_void { fail!("PathFogGenNV was not loaded") }
    pub extern "C" fn PathGlyphRangeNV(_: GLuint, _: GLenum, _: *GLvoid, _: GLbitfield, _: GLuint, _: GLsizei, _: GLenum, _: GLuint, _: GLfloat) -> c_void { fail!("PathGlyphRangeNV was not loaded") }
    pub extern "C" fn PathGlyphsNV(_: GLuint, _: GLenum, _: *GLvoid, _: GLbitfield, _: GLsizei, _: GLenum, _: *GLvoid, _: GLenum, _: GLuint, _: GLfloat) -> c_void { fail!("PathGlyphsNV was not loaded") }
    pub extern "C" fn PathParameterfNV(_: GLuint, _: GLenum, _: GLfloat) -> c_void { fail!("PathParameterfNV was not loaded") }
    pub extern "C" fn PathParameterfvNV(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("PathParameterfvNV was not loaded") }
    pub extern "C" fn PathParameteriNV(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("PathParameteriNV was not loaded") }
    pub extern "C" fn PathParameterivNV(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("PathParameterivNV was not loaded") }
    pub extern "C" fn PathStencilDepthOffsetNV(_: GLfloat, _: GLfloat) -> c_void { fail!("PathStencilDepthOffsetNV was not loaded") }
    pub extern "C" fn PathStencilFuncNV(_: GLenum, _: GLint, _: GLuint) -> c_void { fail!("PathStencilFuncNV was not loaded") }
    pub extern "C" fn PathStringNV(_: GLuint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("PathStringNV was not loaded") }
    pub extern "C" fn PathSubCommandsNV(_: GLuint, _: GLsizei, _: GLsizei, _: GLsizei, _: *GLubyte, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("PathSubCommandsNV was not loaded") }
    pub extern "C" fn PathSubCoordsNV(_: GLuint, _: GLsizei, _: GLsizei, _: GLenum, _: *GLvoid) -> c_void { fail!("PathSubCoordsNV was not loaded") }
    pub extern "C" fn PathTexGenNV(_: GLenum, _: GLenum, _: GLint, _: *GLfloat) -> c_void { fail!("PathTexGenNV was not loaded") }
    pub extern "C" fn PauseTransformFeedback() -> c_void { fail!("PauseTransformFeedback was not loaded") }
    pub extern "C" fn PauseTransformFeedbackNV() -> c_void { fail!("PauseTransformFeedbackNV was not loaded") }
    pub extern "C" fn PixelDataRangeNV(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("PixelDataRangeNV was not loaded") }
    pub extern "C" fn PixelMapfv(_: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("PixelMapfv was not loaded") }
    pub extern "C" fn PixelMapuiv(_: GLenum, _: GLsizei, _: *GLuint) -> c_void { fail!("PixelMapuiv was not loaded") }
    pub extern "C" fn PixelMapusv(_: GLenum, _: GLsizei, _: *GLushort) -> c_void { fail!("PixelMapusv was not loaded") }
    pub extern "C" fn PixelMapx(_: GLenum, _: GLint, _: *GLfixed) -> c_void { fail!("PixelMapx was not loaded") }
    pub extern "C" fn PixelStoref(_: GLenum, _: GLfloat) -> c_void { fail!("PixelStoref was not loaded") }
    pub extern "C" fn PixelStorei(_: GLenum, _: GLint) -> c_void { fail!("PixelStorei was not loaded") }
    pub extern "C" fn PixelStorex(_: GLenum, _: GLfixed) -> c_void { fail!("PixelStorex was not loaded") }
    pub extern "C" fn PixelTexGenParameterfSGIS(_: GLenum, _: GLfloat) -> c_void { fail!("PixelTexGenParameterfSGIS was not loaded") }
    pub extern "C" fn PixelTexGenParameterfvSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("PixelTexGenParameterfvSGIS was not loaded") }
    pub extern "C" fn PixelTexGenParameteriSGIS(_: GLenum, _: GLint) -> c_void { fail!("PixelTexGenParameteriSGIS was not loaded") }
    pub extern "C" fn PixelTexGenParameterivSGIS(_: GLenum, _: *GLint) -> c_void { fail!("PixelTexGenParameterivSGIS was not loaded") }
    pub extern "C" fn PixelTexGenSGIX(_: GLenum) -> c_void { fail!("PixelTexGenSGIX was not loaded") }
    pub extern "C" fn PixelTransferf(_: GLenum, _: GLfloat) -> c_void { fail!("PixelTransferf was not loaded") }
    pub extern "C" fn PixelTransferi(_: GLenum, _: GLint) -> c_void { fail!("PixelTransferi was not loaded") }
    pub extern "C" fn PixelTransferxOES(_: GLenum, _: GLfixed) -> c_void { fail!("PixelTransferxOES was not loaded") }
    pub extern "C" fn PixelTransformParameterfEXT(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("PixelTransformParameterfEXT was not loaded") }
    pub extern "C" fn PixelTransformParameterfvEXT(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("PixelTransformParameterfvEXT was not loaded") }
    pub extern "C" fn PixelTransformParameteriEXT(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("PixelTransformParameteriEXT was not loaded") }
    pub extern "C" fn PixelTransformParameterivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("PixelTransformParameterivEXT was not loaded") }
    pub extern "C" fn PixelZoom(_: GLfloat, _: GLfloat) -> c_void { fail!("PixelZoom was not loaded") }
    pub extern "C" fn PixelZoomxOES(_: GLfixed, _: GLfixed) -> c_void { fail!("PixelZoomxOES was not loaded") }
    pub extern "C" fn PointAlongPathNV(_: GLuint, _: GLsizei, _: GLsizei, _: GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> GLboolean { fail!("PointAlongPathNV was not loaded") }
    pub extern "C" fn PointParameterf(_: GLenum, _: GLfloat) -> c_void { fail!("PointParameterf was not loaded") }
    pub extern "C" fn PointParameterfARB(_: GLenum, _: GLfloat) -> c_void { fail!("PointParameterfARB was not loaded") }
    pub extern "C" fn PointParameterfEXT(_: GLenum, _: GLfloat) -> c_void { fail!("PointParameterfEXT was not loaded") }
    pub extern "C" fn PointParameterfSGIS(_: GLenum, _: GLfloat) -> c_void { fail!("PointParameterfSGIS was not loaded") }
    pub extern "C" fn PointParameterfv(_: GLenum, _: *GLfloat) -> c_void { fail!("PointParameterfv was not loaded") }
    pub extern "C" fn PointParameterfvARB(_: GLenum, _: *GLfloat) -> c_void { fail!("PointParameterfvARB was not loaded") }
    pub extern "C" fn PointParameterfvEXT(_: GLenum, _: *GLfloat) -> c_void { fail!("PointParameterfvEXT was not loaded") }
    pub extern "C" fn PointParameterfvSGIS(_: GLenum, _: *GLfloat) -> c_void { fail!("PointParameterfvSGIS was not loaded") }
    pub extern "C" fn PointParameteri(_: GLenum, _: GLint) -> c_void { fail!("PointParameteri was not loaded") }
    pub extern "C" fn PointParameteriNV(_: GLenum, _: GLint) -> c_void { fail!("PointParameteriNV was not loaded") }
    pub extern "C" fn PointParameteriv(_: GLenum, _: *GLint) -> c_void { fail!("PointParameteriv was not loaded") }
    pub extern "C" fn PointParameterivNV(_: GLenum, _: *GLint) -> c_void { fail!("PointParameterivNV was not loaded") }
    pub extern "C" fn PointParameterx(_: GLenum, _: GLfixed) -> c_void { fail!("PointParameterx was not loaded") }
    pub extern "C" fn PointParameterxOES(_: GLenum, _: GLfixed) -> c_void { fail!("PointParameterxOES was not loaded") }
    pub extern "C" fn PointParameterxv(_: GLenum, _: *GLfixed) -> c_void { fail!("PointParameterxv was not loaded") }
    pub extern "C" fn PointParameterxvOES(_: GLenum, _: *GLfixed) -> c_void { fail!("PointParameterxvOES was not loaded") }
    pub extern "C" fn PointSize(_: GLfloat) -> c_void { fail!("PointSize was not loaded") }
    pub extern "C" fn PointSizePointerOES(_: GLenum, _: GLsizei, _: *c_void) -> c_void { fail!("PointSizePointerOES was not loaded") }
    pub extern "C" fn PointSizex(_: GLfixed) -> c_void { fail!("PointSizex was not loaded") }
    pub extern "C" fn PointSizexOES(_: GLfixed) -> c_void { fail!("PointSizexOES was not loaded") }
    pub extern "C" fn PollAsyncSGIX(_: *GLuint) -> GLint { fail!("PollAsyncSGIX was not loaded") }
    pub extern "C" fn PollInstrumentsSGIX(_: *GLint) -> GLint { fail!("PollInstrumentsSGIX was not loaded") }
    pub extern "C" fn PolygonMode(_: GLenum, _: GLenum) -> c_void { fail!("PolygonMode was not loaded") }
    pub extern "C" fn PolygonOffset(_: GLfloat, _: GLfloat) -> c_void { fail!("PolygonOffset was not loaded") }
    pub extern "C" fn PolygonOffsetEXT(_: GLfloat, _: GLfloat) -> c_void { fail!("PolygonOffsetEXT was not loaded") }
    pub extern "C" fn PolygonOffsetx(_: GLfixed, _: GLfixed) -> c_void { fail!("PolygonOffsetx was not loaded") }
    pub extern "C" fn PolygonOffsetxOES(_: GLfixed, _: GLfixed) -> c_void { fail!("PolygonOffsetxOES was not loaded") }
    pub extern "C" fn PolygonStipple(_: *GLubyte) -> c_void { fail!("PolygonStipple was not loaded") }
    pub extern "C" fn PopAttrib() -> c_void { fail!("PopAttrib was not loaded") }
    pub extern "C" fn PopClientAttrib() -> c_void { fail!("PopClientAttrib was not loaded") }
    pub extern "C" fn PopDebugGroup() -> c_void { fail!("PopDebugGroup was not loaded") }
    pub extern "C" fn PopDebugGroupKHR() -> c_void { fail!("PopDebugGroupKHR was not loaded") }
    pub extern "C" fn PopGroupMarkerEXT() -> c_void { fail!("PopGroupMarkerEXT was not loaded") }
    pub extern "C" fn PopMatrix() -> c_void { fail!("PopMatrix was not loaded") }
    pub extern "C" fn PopName() -> c_void { fail!("PopName was not loaded") }
    pub extern "C" fn PresentFrameDualFillNV(_: GLuint, _: GLuint64EXT, _: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLenum, _: GLuint, _: GLenum, _: GLuint, _: GLenum, _: GLuint) -> c_void { fail!("PresentFrameDualFillNV was not loaded") }
    pub extern "C" fn PresentFrameKeyedNV(_: GLuint, _: GLuint64EXT, _: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLuint, _: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("PresentFrameKeyedNV was not loaded") }
    pub extern "C" fn PrimitiveRestartIndex(_: GLuint) -> c_void { fail!("PrimitiveRestartIndex was not loaded") }
    pub extern "C" fn PrimitiveRestartIndexNV(_: GLuint) -> c_void { fail!("PrimitiveRestartIndexNV was not loaded") }
    pub extern "C" fn PrimitiveRestartNV() -> c_void { fail!("PrimitiveRestartNV was not loaded") }
    pub extern "C" fn PrioritizeTextures(_: GLsizei, _: *GLuint, _: *GLfloat) -> c_void { fail!("PrioritizeTextures was not loaded") }
    pub extern "C" fn PrioritizeTexturesEXT(_: GLsizei, _: *GLuint, _: *GLclampf) -> c_void { fail!("PrioritizeTexturesEXT was not loaded") }
    pub extern "C" fn PrioritizeTexturesxOES(_: GLsizei, _: *GLuint, _: *GLfixed) -> c_void { fail!("PrioritizeTexturesxOES was not loaded") }
    pub extern "C" fn ProgramBinary(_: GLuint, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("ProgramBinary was not loaded") }
    pub extern "C" fn ProgramBinaryOES(_: GLuint, _: GLenum, _: *GLvoid, _: GLint) -> c_void { fail!("ProgramBinaryOES was not loaded") }
    pub extern "C" fn ProgramBufferParametersIivNV(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramBufferParametersIivNV was not loaded") }
    pub extern "C" fn ProgramBufferParametersIuivNV(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramBufferParametersIuivNV was not loaded") }
    pub extern "C" fn ProgramBufferParametersfvNV(_: GLenum, _: GLuint, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramBufferParametersfvNV was not loaded") }
    pub extern "C" fn ProgramEnvParameter4dARB(_: GLenum, _: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramEnvParameter4dARB was not loaded") }
    pub extern "C" fn ProgramEnvParameter4dvARB(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("ProgramEnvParameter4dvARB was not loaded") }
    pub extern "C" fn ProgramEnvParameter4fARB(_: GLenum, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramEnvParameter4fARB was not loaded") }
    pub extern "C" fn ProgramEnvParameter4fvARB(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("ProgramEnvParameter4fvARB was not loaded") }
    pub extern "C" fn ProgramEnvParameterI4iNV(_: GLenum, _: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramEnvParameterI4iNV was not loaded") }
    pub extern "C" fn ProgramEnvParameterI4ivNV(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("ProgramEnvParameterI4ivNV was not loaded") }
    pub extern "C" fn ProgramEnvParameterI4uiNV(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramEnvParameterI4uiNV was not loaded") }
    pub extern "C" fn ProgramEnvParameterI4uivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("ProgramEnvParameterI4uivNV was not loaded") }
    pub extern "C" fn ProgramEnvParameters4fvEXT(_: GLenum, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramEnvParameters4fvEXT was not loaded") }
    pub extern "C" fn ProgramEnvParametersI4ivNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramEnvParametersI4ivNV was not loaded") }
    pub extern "C" fn ProgramEnvParametersI4uivNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramEnvParametersI4uivNV was not loaded") }
    pub extern "C" fn ProgramLocalParameter4dARB(_: GLenum, _: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramLocalParameter4dARB was not loaded") }
    pub extern "C" fn ProgramLocalParameter4dvARB(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("ProgramLocalParameter4dvARB was not loaded") }
    pub extern "C" fn ProgramLocalParameter4fARB(_: GLenum, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramLocalParameter4fARB was not loaded") }
    pub extern "C" fn ProgramLocalParameter4fvARB(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("ProgramLocalParameter4fvARB was not loaded") }
    pub extern "C" fn ProgramLocalParameterI4iNV(_: GLenum, _: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramLocalParameterI4iNV was not loaded") }
    pub extern "C" fn ProgramLocalParameterI4ivNV(_: GLenum, _: GLuint, _: *GLint) -> c_void { fail!("ProgramLocalParameterI4ivNV was not loaded") }
    pub extern "C" fn ProgramLocalParameterI4uiNV(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramLocalParameterI4uiNV was not loaded") }
    pub extern "C" fn ProgramLocalParameterI4uivNV(_: GLenum, _: GLuint, _: *GLuint) -> c_void { fail!("ProgramLocalParameterI4uivNV was not loaded") }
    pub extern "C" fn ProgramLocalParameters4fvEXT(_: GLenum, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramLocalParameters4fvEXT was not loaded") }
    pub extern "C" fn ProgramLocalParametersI4ivNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramLocalParametersI4ivNV was not loaded") }
    pub extern "C" fn ProgramLocalParametersI4uivNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramLocalParametersI4uivNV was not loaded") }
    pub extern "C" fn ProgramNamedParameter4dNV(_: GLuint, _: GLsizei, _: *GLubyte, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramNamedParameter4dNV was not loaded") }
    pub extern "C" fn ProgramNamedParameter4dvNV(_: GLuint, _: GLsizei, _: *GLubyte, _: *GLdouble) -> c_void { fail!("ProgramNamedParameter4dvNV was not loaded") }
    pub extern "C" fn ProgramNamedParameter4fNV(_: GLuint, _: GLsizei, _: *GLubyte, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramNamedParameter4fNV was not loaded") }
    pub extern "C" fn ProgramNamedParameter4fvNV(_: GLuint, _: GLsizei, _: *GLubyte, _: *GLfloat) -> c_void { fail!("ProgramNamedParameter4fvNV was not loaded") }
    pub extern "C" fn ProgramParameter4dNV(_: GLenum, _: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramParameter4dNV was not loaded") }
    pub extern "C" fn ProgramParameter4dvNV(_: GLenum, _: GLuint, _: *GLdouble) -> c_void { fail!("ProgramParameter4dvNV was not loaded") }
    pub extern "C" fn ProgramParameter4fNV(_: GLenum, _: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramParameter4fNV was not loaded") }
    pub extern "C" fn ProgramParameter4fvNV(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("ProgramParameter4fvNV was not loaded") }
    pub extern "C" fn ProgramParameteri(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("ProgramParameteri was not loaded") }
    pub extern "C" fn ProgramParameteriARB(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("ProgramParameteriARB was not loaded") }
    pub extern "C" fn ProgramParameteriEXT(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("ProgramParameteriEXT was not loaded") }
    pub extern "C" fn ProgramParameters4dvNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramParameters4dvNV was not loaded") }
    pub extern "C" fn ProgramParameters4fvNV(_: GLenum, _: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramParameters4fvNV was not loaded") }
    pub extern "C" fn ProgramStringARB(_: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("ProgramStringARB was not loaded") }
    pub extern "C" fn ProgramSubroutineParametersuivNV(_: GLenum, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramSubroutineParametersuivNV was not loaded") }
    pub extern "C" fn ProgramUniform1d(_: GLuint, _: GLint, _: GLdouble) -> c_void { fail!("ProgramUniform1d was not loaded") }
    pub extern "C" fn ProgramUniform1dEXT(_: GLuint, _: GLint, _: GLdouble) -> c_void { fail!("ProgramUniform1dEXT was not loaded") }
    pub extern "C" fn ProgramUniform1dv(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform1dv was not loaded") }
    pub extern "C" fn ProgramUniform1dvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform1dvEXT was not loaded") }
    pub extern "C" fn ProgramUniform1f(_: GLuint, _: GLint, _: GLfloat) -> c_void { fail!("ProgramUniform1f was not loaded") }
    pub extern "C" fn ProgramUniform1fEXT(_: GLuint, _: GLint, _: GLfloat) -> c_void { fail!("ProgramUniform1fEXT was not loaded") }
    pub extern "C" fn ProgramUniform1fv(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform1fv was not loaded") }
    pub extern "C" fn ProgramUniform1fvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform1fvEXT was not loaded") }
    pub extern "C" fn ProgramUniform1i(_: GLuint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform1i was not loaded") }
    pub extern "C" fn ProgramUniform1i64NV(_: GLuint, _: GLint, _: GLint64EXT) -> c_void { fail!("ProgramUniform1i64NV was not loaded") }
    pub extern "C" fn ProgramUniform1i64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("ProgramUniform1i64vNV was not loaded") }
    pub extern "C" fn ProgramUniform1iEXT(_: GLuint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform1iEXT was not loaded") }
    pub extern "C" fn ProgramUniform1iv(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform1iv was not loaded") }
    pub extern "C" fn ProgramUniform1ivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform1ivEXT was not loaded") }
    pub extern "C" fn ProgramUniform1ui(_: GLuint, _: GLint, _: GLuint) -> c_void { fail!("ProgramUniform1ui was not loaded") }
    pub extern "C" fn ProgramUniform1ui64NV(_: GLuint, _: GLint, _: GLuint64EXT) -> c_void { fail!("ProgramUniform1ui64NV was not loaded") }
    pub extern "C" fn ProgramUniform1ui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniform1ui64vNV was not loaded") }
    pub extern "C" fn ProgramUniform1uiEXT(_: GLuint, _: GLint, _: GLuint) -> c_void { fail!("ProgramUniform1uiEXT was not loaded") }
    pub extern "C" fn ProgramUniform1uiv(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform1uiv was not loaded") }
    pub extern "C" fn ProgramUniform1uivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform1uivEXT was not loaded") }
    pub extern "C" fn ProgramUniform2d(_: GLuint, _: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform2d was not loaded") }
    pub extern "C" fn ProgramUniform2dEXT(_: GLuint, _: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform2dEXT was not loaded") }
    pub extern "C" fn ProgramUniform2dv(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform2dv was not loaded") }
    pub extern "C" fn ProgramUniform2dvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform2dvEXT was not loaded") }
    pub extern "C" fn ProgramUniform2f(_: GLuint, _: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform2f was not loaded") }
    pub extern "C" fn ProgramUniform2fEXT(_: GLuint, _: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform2fEXT was not loaded") }
    pub extern "C" fn ProgramUniform2fv(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform2fv was not loaded") }
    pub extern "C" fn ProgramUniform2fvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform2fvEXT was not loaded") }
    pub extern "C" fn ProgramUniform2i(_: GLuint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform2i was not loaded") }
    pub extern "C" fn ProgramUniform2i64NV(_: GLuint, _: GLint, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("ProgramUniform2i64NV was not loaded") }
    pub extern "C" fn ProgramUniform2i64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("ProgramUniform2i64vNV was not loaded") }
    pub extern "C" fn ProgramUniform2iEXT(_: GLuint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform2iEXT was not loaded") }
    pub extern "C" fn ProgramUniform2iv(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform2iv was not loaded") }
    pub extern "C" fn ProgramUniform2ivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform2ivEXT was not loaded") }
    pub extern "C" fn ProgramUniform2ui(_: GLuint, _: GLint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform2ui was not loaded") }
    pub extern "C" fn ProgramUniform2ui64NV(_: GLuint, _: GLint, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("ProgramUniform2ui64NV was not loaded") }
    pub extern "C" fn ProgramUniform2ui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniform2ui64vNV was not loaded") }
    pub extern "C" fn ProgramUniform2uiEXT(_: GLuint, _: GLint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform2uiEXT was not loaded") }
    pub extern "C" fn ProgramUniform2uiv(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform2uiv was not loaded") }
    pub extern "C" fn ProgramUniform2uivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform2uivEXT was not loaded") }
    pub extern "C" fn ProgramUniform3d(_: GLuint, _: GLint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform3d was not loaded") }
    pub extern "C" fn ProgramUniform3dEXT(_: GLuint, _: GLint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform3dEXT was not loaded") }
    pub extern "C" fn ProgramUniform3dv(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform3dv was not loaded") }
    pub extern "C" fn ProgramUniform3dvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform3dvEXT was not loaded") }
    pub extern "C" fn ProgramUniform3f(_: GLuint, _: GLint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform3f was not loaded") }
    pub extern "C" fn ProgramUniform3fEXT(_: GLuint, _: GLint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform3fEXT was not loaded") }
    pub extern "C" fn ProgramUniform3fv(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform3fv was not loaded") }
    pub extern "C" fn ProgramUniform3fvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform3fvEXT was not loaded") }
    pub extern "C" fn ProgramUniform3i(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform3i was not loaded") }
    pub extern "C" fn ProgramUniform3i64NV(_: GLuint, _: GLint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("ProgramUniform3i64NV was not loaded") }
    pub extern "C" fn ProgramUniform3i64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("ProgramUniform3i64vNV was not loaded") }
    pub extern "C" fn ProgramUniform3iEXT(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform3iEXT was not loaded") }
    pub extern "C" fn ProgramUniform3iv(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform3iv was not loaded") }
    pub extern "C" fn ProgramUniform3ivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform3ivEXT was not loaded") }
    pub extern "C" fn ProgramUniform3ui(_: GLuint, _: GLint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform3ui was not loaded") }
    pub extern "C" fn ProgramUniform3ui64NV(_: GLuint, _: GLint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("ProgramUniform3ui64NV was not loaded") }
    pub extern "C" fn ProgramUniform3ui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniform3ui64vNV was not loaded") }
    pub extern "C" fn ProgramUniform3uiEXT(_: GLuint, _: GLint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform3uiEXT was not loaded") }
    pub extern "C" fn ProgramUniform3uiv(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform3uiv was not loaded") }
    pub extern "C" fn ProgramUniform3uivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform3uivEXT was not loaded") }
    pub extern "C" fn ProgramUniform4d(_: GLuint, _: GLint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform4d was not loaded") }
    pub extern "C" fn ProgramUniform4dEXT(_: GLuint, _: GLint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("ProgramUniform4dEXT was not loaded") }
    pub extern "C" fn ProgramUniform4dv(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform4dv was not loaded") }
    pub extern "C" fn ProgramUniform4dvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("ProgramUniform4dvEXT was not loaded") }
    pub extern "C" fn ProgramUniform4f(_: GLuint, _: GLint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform4f was not loaded") }
    pub extern "C" fn ProgramUniform4fEXT(_: GLuint, _: GLint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ProgramUniform4fEXT was not loaded") }
    pub extern "C" fn ProgramUniform4fv(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform4fv was not loaded") }
    pub extern "C" fn ProgramUniform4fvEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ProgramUniform4fvEXT was not loaded") }
    pub extern "C" fn ProgramUniform4i(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform4i was not loaded") }
    pub extern "C" fn ProgramUniform4i64NV(_: GLuint, _: GLint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("ProgramUniform4i64NV was not loaded") }
    pub extern "C" fn ProgramUniform4i64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("ProgramUniform4i64vNV was not loaded") }
    pub extern "C" fn ProgramUniform4iEXT(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("ProgramUniform4iEXT was not loaded") }
    pub extern "C" fn ProgramUniform4iv(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform4iv was not loaded") }
    pub extern "C" fn ProgramUniform4ivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("ProgramUniform4ivEXT was not loaded") }
    pub extern "C" fn ProgramUniform4ui(_: GLuint, _: GLint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform4ui was not loaded") }
    pub extern "C" fn ProgramUniform4ui64NV(_: GLuint, _: GLint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("ProgramUniform4ui64NV was not loaded") }
    pub extern "C" fn ProgramUniform4ui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniform4ui64vNV was not loaded") }
    pub extern "C" fn ProgramUniform4uiEXT(_: GLuint, _: GLint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ProgramUniform4uiEXT was not loaded") }
    pub extern "C" fn ProgramUniform4uiv(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform4uiv was not loaded") }
    pub extern "C" fn ProgramUniform4uivEXT(_: GLuint, _: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("ProgramUniform4uivEXT was not loaded") }
    pub extern "C" fn ProgramUniformHandleui64ARB(_: GLuint, _: GLint, _: GLuint64) -> c_void { fail!("ProgramUniformHandleui64ARB was not loaded") }
    pub extern "C" fn ProgramUniformHandleui64NV(_: GLuint, _: GLint, _: GLuint64) -> c_void { fail!("ProgramUniformHandleui64NV was not loaded") }
    pub extern "C" fn ProgramUniformHandleui64vARB(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64) -> c_void { fail!("ProgramUniformHandleui64vARB was not loaded") }
    pub extern "C" fn ProgramUniformHandleui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64) -> c_void { fail!("ProgramUniformHandleui64vNV was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x3dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2x3dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x3dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2x3dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x3fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2x3fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x3fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2x3fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x4dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2x4dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x4dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix2x4dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x4fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2x4fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix2x4fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix2x4fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x2dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3x2dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x2dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3x2dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x2fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3x2fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x2fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3x2fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x4dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3x4dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x4dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix3x4dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x4fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3x4fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix3x4fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix3x4fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x2dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4x2dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x2dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4x2dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x2fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4x2fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x2fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4x2fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x3dv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4x3dv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x3dvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("ProgramUniformMatrix4x3dvEXT was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x3fv(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4x3fv was not loaded") }
    pub extern "C" fn ProgramUniformMatrix4x3fvEXT(_: GLuint, _: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("ProgramUniformMatrix4x3fvEXT was not loaded") }
    pub extern "C" fn ProgramUniformui64NV(_: GLuint, _: GLint, _: GLuint64EXT) -> c_void { fail!("ProgramUniformui64NV was not loaded") }
    pub extern "C" fn ProgramUniformui64vNV(_: GLuint, _: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("ProgramUniformui64vNV was not loaded") }
    pub extern "C" fn ProgramVertexLimitNV(_: GLenum, _: GLint) -> c_void { fail!("ProgramVertexLimitNV was not loaded") }
    pub extern "C" fn ProvokingVertex(_: GLenum) -> c_void { fail!("ProvokingVertex was not loaded") }
    pub extern "C" fn ProvokingVertexEXT(_: GLenum) -> c_void { fail!("ProvokingVertexEXT was not loaded") }
    pub extern "C" fn PushAttrib(_: GLbitfield) -> c_void { fail!("PushAttrib was not loaded") }
    pub extern "C" fn PushClientAttrib(_: GLbitfield) -> c_void { fail!("PushClientAttrib was not loaded") }
    pub extern "C" fn PushClientAttribDefaultEXT(_: GLbitfield) -> c_void { fail!("PushClientAttribDefaultEXT was not loaded") }
    pub extern "C" fn PushDebugGroup(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("PushDebugGroup was not loaded") }
    pub extern "C" fn PushDebugGroupKHR(_: GLenum, _: GLuint, _: GLsizei, _: *GLchar) -> c_void { fail!("PushDebugGroupKHR was not loaded") }
    pub extern "C" fn PushGroupMarkerEXT(_: GLsizei, _: *GLchar) -> c_void { fail!("PushGroupMarkerEXT was not loaded") }
    pub extern "C" fn PushMatrix() -> c_void { fail!("PushMatrix was not loaded") }
    pub extern "C" fn PushName(_: GLuint) -> c_void { fail!("PushName was not loaded") }
    pub extern "C" fn QueryCounter(_: GLuint, _: GLenum) -> c_void { fail!("QueryCounter was not loaded") }
    pub extern "C" fn QueryCounterEXT(_: GLuint, _: GLenum) -> c_void { fail!("QueryCounterEXT was not loaded") }
    pub extern "C" fn QueryMatrixxOES(_: *GLfixed, _: *GLint) -> GLbitfield { fail!("QueryMatrixxOES was not loaded") }
    pub extern "C" fn RasterPos2d(_: GLdouble, _: GLdouble) -> c_void { fail!("RasterPos2d was not loaded") }
    pub extern "C" fn RasterPos2dv(_: *GLdouble) -> c_void { fail!("RasterPos2dv was not loaded") }
    pub extern "C" fn RasterPos2f(_: GLfloat, _: GLfloat) -> c_void { fail!("RasterPos2f was not loaded") }
    pub extern "C" fn RasterPos2fv(_: *GLfloat) -> c_void { fail!("RasterPos2fv was not loaded") }
    pub extern "C" fn RasterPos2i(_: GLint, _: GLint) -> c_void { fail!("RasterPos2i was not loaded") }
    pub extern "C" fn RasterPos2iv(_: *GLint) -> c_void { fail!("RasterPos2iv was not loaded") }
    pub extern "C" fn RasterPos2s(_: GLshort, _: GLshort) -> c_void { fail!("RasterPos2s was not loaded") }
    pub extern "C" fn RasterPos2sv(_: *GLshort) -> c_void { fail!("RasterPos2sv was not loaded") }
    pub extern "C" fn RasterPos2xOES(_: GLfixed, _: GLfixed) -> c_void { fail!("RasterPos2xOES was not loaded") }
    pub extern "C" fn RasterPos2xvOES(_: *GLfixed) -> c_void { fail!("RasterPos2xvOES was not loaded") }
    pub extern "C" fn RasterPos3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("RasterPos3d was not loaded") }
    pub extern "C" fn RasterPos3dv(_: *GLdouble) -> c_void { fail!("RasterPos3dv was not loaded") }
    pub extern "C" fn RasterPos3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("RasterPos3f was not loaded") }
    pub extern "C" fn RasterPos3fv(_: *GLfloat) -> c_void { fail!("RasterPos3fv was not loaded") }
    pub extern "C" fn RasterPos3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("RasterPos3i was not loaded") }
    pub extern "C" fn RasterPos3iv(_: *GLint) -> c_void { fail!("RasterPos3iv was not loaded") }
    pub extern "C" fn RasterPos3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("RasterPos3s was not loaded") }
    pub extern "C" fn RasterPos3sv(_: *GLshort) -> c_void { fail!("RasterPos3sv was not loaded") }
    pub extern "C" fn RasterPos3xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("RasterPos3xOES was not loaded") }
    pub extern "C" fn RasterPos3xvOES(_: *GLfixed) -> c_void { fail!("RasterPos3xvOES was not loaded") }
    pub extern "C" fn RasterPos4d(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("RasterPos4d was not loaded") }
    pub extern "C" fn RasterPos4dv(_: *GLdouble) -> c_void { fail!("RasterPos4dv was not loaded") }
    pub extern "C" fn RasterPos4f(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("RasterPos4f was not loaded") }
    pub extern "C" fn RasterPos4fv(_: *GLfloat) -> c_void { fail!("RasterPos4fv was not loaded") }
    pub extern "C" fn RasterPos4i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("RasterPos4i was not loaded") }
    pub extern "C" fn RasterPos4iv(_: *GLint) -> c_void { fail!("RasterPos4iv was not loaded") }
    pub extern "C" fn RasterPos4s(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("RasterPos4s was not loaded") }
    pub extern "C" fn RasterPos4sv(_: *GLshort) -> c_void { fail!("RasterPos4sv was not loaded") }
    pub extern "C" fn RasterPos4xOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("RasterPos4xOES was not loaded") }
    pub extern "C" fn RasterPos4xvOES(_: *GLfixed) -> c_void { fail!("RasterPos4xvOES was not loaded") }
    pub extern "C" fn ReadBuffer(_: GLenum) -> c_void { fail!("ReadBuffer was not loaded") }
    pub extern "C" fn ReadBufferIndexedEXT(_: GLenum, _: GLint) -> c_void { fail!("ReadBufferIndexedEXT was not loaded") }
    pub extern "C" fn ReadBufferNV(_: GLenum) -> c_void { fail!("ReadBufferNV was not loaded") }
    pub extern "C" fn ReadInstrumentsSGIX(_: GLint) -> c_void { fail!("ReadInstrumentsSGIX was not loaded") }
    pub extern "C" fn ReadPixels(_: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("ReadPixels was not loaded") }
    pub extern "C" fn ReadnPixelsARB(_: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("ReadnPixelsARB was not loaded") }
    pub extern "C" fn ReadnPixelsEXT(_: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("ReadnPixelsEXT was not loaded") }
    pub extern "C" fn Rectd(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Rectd was not loaded") }
    pub extern "C" fn Rectdv(_: *GLdouble, _: *GLdouble) -> c_void { fail!("Rectdv was not loaded") }
    pub extern "C" fn Rectf(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Rectf was not loaded") }
    pub extern "C" fn Rectfv(_: *GLfloat, _: *GLfloat) -> c_void { fail!("Rectfv was not loaded") }
    pub extern "C" fn Recti(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Recti was not loaded") }
    pub extern "C" fn Rectiv(_: *GLint, _: *GLint) -> c_void { fail!("Rectiv was not loaded") }
    pub extern "C" fn Rects(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Rects was not loaded") }
    pub extern "C" fn Rectsv(_: *GLshort, _: *GLshort) -> c_void { fail!("Rectsv was not loaded") }
    pub extern "C" fn RectxOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("RectxOES was not loaded") }
    pub extern "C" fn RectxvOES(_: *GLfixed, _: *GLfixed) -> c_void { fail!("RectxvOES was not loaded") }
    pub extern "C" fn ReferencePlaneSGIX(_: *GLdouble) -> c_void { fail!("ReferencePlaneSGIX was not loaded") }
    pub extern "C" fn ReleaseShaderCompiler() -> c_void { fail!("ReleaseShaderCompiler was not loaded") }
    pub extern "C" fn RenderMode(_: GLenum) -> GLint { fail!("RenderMode was not loaded") }
    pub extern "C" fn RenderbufferStorage(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorage was not loaded") }
    pub extern "C" fn RenderbufferStorageEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageEXT was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisample(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisample was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleANGLE(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleANGLE was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleAPPLE(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleAPPLE was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleCoverageNV(_: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleCoverageNV was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleEXT was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleIMG(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleIMG was not loaded") }
    pub extern "C" fn RenderbufferStorageMultisampleNV(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageMultisampleNV was not loaded") }
    pub extern "C" fn RenderbufferStorageOES(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("RenderbufferStorageOES was not loaded") }
    pub extern "C" fn ReplacementCodePointerSUN(_: GLenum, _: GLsizei, _: **GLvoid) -> c_void { fail!("ReplacementCodePointerSUN was not loaded") }
    pub extern "C" fn ReplacementCodeubSUN(_: GLubyte) -> c_void { fail!("ReplacementCodeubSUN was not loaded") }
    pub extern "C" fn ReplacementCodeubvSUN(_: *GLubyte) -> c_void { fail!("ReplacementCodeubvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiColor3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiColor3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor4fNormal3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiColor4fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor4fNormal3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiColor4fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor4ubVertex3fSUN(_: GLuint, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiColor4ubVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiColor4ubVertex3fvSUN(_: *GLuint, _: *GLubyte, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiColor4ubVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiNormal3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiNormal3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiSUN(_: GLuint) -> c_void { fail!("ReplacementCodeuiSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiTexCoord2fVertex3fvSUN(_: *GLuint, _: *GLfloat, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiTexCoord2fVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiVertex3fSUN(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ReplacementCodeuiVertex3fSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuiVertex3fvSUN(_: *GLuint, _: *GLfloat) -> c_void { fail!("ReplacementCodeuiVertex3fvSUN was not loaded") }
    pub extern "C" fn ReplacementCodeuivSUN(_: *GLuint) -> c_void { fail!("ReplacementCodeuivSUN was not loaded") }
    pub extern "C" fn ReplacementCodeusSUN(_: GLushort) -> c_void { fail!("ReplacementCodeusSUN was not loaded") }
    pub extern "C" fn ReplacementCodeusvSUN(_: *GLushort) -> c_void { fail!("ReplacementCodeusvSUN was not loaded") }
    pub extern "C" fn RequestResidentProgramsNV(_: GLsizei, _: *GLuint) -> c_void { fail!("RequestResidentProgramsNV was not loaded") }
    pub extern "C" fn ResetHistogram(_: GLenum) -> c_void { fail!("ResetHistogram was not loaded") }
    pub extern "C" fn ResetHistogramEXT(_: GLenum) -> c_void { fail!("ResetHistogramEXT was not loaded") }
    pub extern "C" fn ResetMinmax(_: GLenum) -> c_void { fail!("ResetMinmax was not loaded") }
    pub extern "C" fn ResetMinmaxEXT(_: GLenum) -> c_void { fail!("ResetMinmaxEXT was not loaded") }
    pub extern "C" fn ResizeBuffersMESA() -> c_void { fail!("ResizeBuffersMESA was not loaded") }
    pub extern "C" fn ResolveMultisampleFramebufferAPPLE() -> c_void { fail!("ResolveMultisampleFramebufferAPPLE was not loaded") }
    pub extern "C" fn ResumeTransformFeedback() -> c_void { fail!("ResumeTransformFeedback was not loaded") }
    pub extern "C" fn ResumeTransformFeedbackNV() -> c_void { fail!("ResumeTransformFeedbackNV was not loaded") }
    pub extern "C" fn Rotated(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Rotated was not loaded") }
    pub extern "C" fn Rotatef(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Rotatef was not loaded") }
    pub extern "C" fn Rotatex(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Rotatex was not loaded") }
    pub extern "C" fn RotatexOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("RotatexOES was not loaded") }
    pub extern "C" fn SampleCoverage(_: GLfloat, _: GLboolean) -> c_void { fail!("SampleCoverage was not loaded") }
    pub extern "C" fn SampleCoverageARB(_: GLfloat, _: GLboolean) -> c_void { fail!("SampleCoverageARB was not loaded") }
    pub extern "C" fn SampleCoverageOES(_: GLfixed, _: GLboolean) -> c_void { fail!("SampleCoverageOES was not loaded") }
    pub extern "C" fn SampleCoveragex(_: GLclampx, _: GLboolean) -> c_void { fail!("SampleCoveragex was not loaded") }
    pub extern "C" fn SampleCoveragexOES(_: GLclampx, _: GLboolean) -> c_void { fail!("SampleCoveragexOES was not loaded") }
    pub extern "C" fn SampleMapATI(_: GLuint, _: GLuint, _: GLenum) -> c_void { fail!("SampleMapATI was not loaded") }
    pub extern "C" fn SampleMaskEXT(_: GLclampf, _: GLboolean) -> c_void { fail!("SampleMaskEXT was not loaded") }
    pub extern "C" fn SampleMaskIndexedNV(_: GLuint, _: GLbitfield) -> c_void { fail!("SampleMaskIndexedNV was not loaded") }
    pub extern "C" fn SampleMaskSGIS(_: GLclampf, _: GLboolean) -> c_void { fail!("SampleMaskSGIS was not loaded") }
    pub extern "C" fn SampleMaski(_: GLuint, _: GLbitfield) -> c_void { fail!("SampleMaski was not loaded") }
    pub extern "C" fn SamplePatternEXT(_: GLenum) -> c_void { fail!("SamplePatternEXT was not loaded") }
    pub extern "C" fn SamplePatternSGIS(_: GLenum) -> c_void { fail!("SamplePatternSGIS was not loaded") }
    pub extern "C" fn SamplerParameterIiv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("SamplerParameterIiv was not loaded") }
    pub extern "C" fn SamplerParameterIuiv(_: GLuint, _: GLenum, _: *GLuint) -> c_void { fail!("SamplerParameterIuiv was not loaded") }
    pub extern "C" fn SamplerParameterf(_: GLuint, _: GLenum, _: GLfloat) -> c_void { fail!("SamplerParameterf was not loaded") }
    pub extern "C" fn SamplerParameterfv(_: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("SamplerParameterfv was not loaded") }
    pub extern "C" fn SamplerParameteri(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("SamplerParameteri was not loaded") }
    pub extern "C" fn SamplerParameteriv(_: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("SamplerParameteriv was not loaded") }
    pub extern "C" fn Scaled(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Scaled was not loaded") }
    pub extern "C" fn Scalef(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Scalef was not loaded") }
    pub extern "C" fn Scalex(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Scalex was not loaded") }
    pub extern "C" fn ScalexOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("ScalexOES was not loaded") }
    pub extern "C" fn Scissor(_: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("Scissor was not loaded") }
    pub extern "C" fn ScissorArrayv(_: GLuint, _: GLsizei, _: *GLint) -> c_void { fail!("ScissorArrayv was not loaded") }
    pub extern "C" fn ScissorIndexed(_: GLuint, _: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("ScissorIndexed was not loaded") }
    pub extern "C" fn ScissorIndexedv(_: GLuint, _: *GLint) -> c_void { fail!("ScissorIndexedv was not loaded") }
    pub extern "C" fn SecondaryColor3b(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("SecondaryColor3b was not loaded") }
    pub extern "C" fn SecondaryColor3bEXT(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("SecondaryColor3bEXT was not loaded") }
    pub extern "C" fn SecondaryColor3bv(_: *GLbyte) -> c_void { fail!("SecondaryColor3bv was not loaded") }
    pub extern "C" fn SecondaryColor3bvEXT(_: *GLbyte) -> c_void { fail!("SecondaryColor3bvEXT was not loaded") }
    pub extern "C" fn SecondaryColor3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("SecondaryColor3d was not loaded") }
    pub extern "C" fn SecondaryColor3dEXT(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("SecondaryColor3dEXT was not loaded") }
    pub extern "C" fn SecondaryColor3dv(_: *GLdouble) -> c_void { fail!("SecondaryColor3dv was not loaded") }
    pub extern "C" fn SecondaryColor3dvEXT(_: *GLdouble) -> c_void { fail!("SecondaryColor3dvEXT was not loaded") }
    pub extern "C" fn SecondaryColor3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("SecondaryColor3f was not loaded") }
    pub extern "C" fn SecondaryColor3fEXT(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("SecondaryColor3fEXT was not loaded") }
    pub extern "C" fn SecondaryColor3fv(_: *GLfloat) -> c_void { fail!("SecondaryColor3fv was not loaded") }
    pub extern "C" fn SecondaryColor3fvEXT(_: *GLfloat) -> c_void { fail!("SecondaryColor3fvEXT was not loaded") }
    pub extern "C" fn SecondaryColor3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("SecondaryColor3hNV was not loaded") }
    pub extern "C" fn SecondaryColor3hvNV(_: *GLhalfNV) -> c_void { fail!("SecondaryColor3hvNV was not loaded") }
    pub extern "C" fn SecondaryColor3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("SecondaryColor3i was not loaded") }
    pub extern "C" fn SecondaryColor3iEXT(_: GLint, _: GLint, _: GLint) -> c_void { fail!("SecondaryColor3iEXT was not loaded") }
    pub extern "C" fn SecondaryColor3iv(_: *GLint) -> c_void { fail!("SecondaryColor3iv was not loaded") }
    pub extern "C" fn SecondaryColor3ivEXT(_: *GLint) -> c_void { fail!("SecondaryColor3ivEXT was not loaded") }
    pub extern "C" fn SecondaryColor3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("SecondaryColor3s was not loaded") }
    pub extern "C" fn SecondaryColor3sEXT(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("SecondaryColor3sEXT was not loaded") }
    pub extern "C" fn SecondaryColor3sv(_: *GLshort) -> c_void { fail!("SecondaryColor3sv was not loaded") }
    pub extern "C" fn SecondaryColor3svEXT(_: *GLshort) -> c_void { fail!("SecondaryColor3svEXT was not loaded") }
    pub extern "C" fn SecondaryColor3ub(_: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("SecondaryColor3ub was not loaded") }
    pub extern "C" fn SecondaryColor3ubEXT(_: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("SecondaryColor3ubEXT was not loaded") }
    pub extern "C" fn SecondaryColor3ubv(_: *GLubyte) -> c_void { fail!("SecondaryColor3ubv was not loaded") }
    pub extern "C" fn SecondaryColor3ubvEXT(_: *GLubyte) -> c_void { fail!("SecondaryColor3ubvEXT was not loaded") }
    pub extern "C" fn SecondaryColor3ui(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("SecondaryColor3ui was not loaded") }
    pub extern "C" fn SecondaryColor3uiEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("SecondaryColor3uiEXT was not loaded") }
    pub extern "C" fn SecondaryColor3uiv(_: *GLuint) -> c_void { fail!("SecondaryColor3uiv was not loaded") }
    pub extern "C" fn SecondaryColor3uivEXT(_: *GLuint) -> c_void { fail!("SecondaryColor3uivEXT was not loaded") }
    pub extern "C" fn SecondaryColor3us(_: GLushort, _: GLushort, _: GLushort) -> c_void { fail!("SecondaryColor3us was not loaded") }
    pub extern "C" fn SecondaryColor3usEXT(_: GLushort, _: GLushort, _: GLushort) -> c_void { fail!("SecondaryColor3usEXT was not loaded") }
    pub extern "C" fn SecondaryColor3usv(_: *GLushort) -> c_void { fail!("SecondaryColor3usv was not loaded") }
    pub extern "C" fn SecondaryColor3usvEXT(_: *GLushort) -> c_void { fail!("SecondaryColor3usvEXT was not loaded") }
    pub extern "C" fn SecondaryColorFormatNV(_: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("SecondaryColorFormatNV was not loaded") }
    pub extern "C" fn SecondaryColorP3ui(_: GLenum, _: GLuint) -> c_void { fail!("SecondaryColorP3ui was not loaded") }
    pub extern "C" fn SecondaryColorP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("SecondaryColorP3uiv was not loaded") }
    pub extern "C" fn SecondaryColorPointer(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("SecondaryColorPointer was not loaded") }
    pub extern "C" fn SecondaryColorPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("SecondaryColorPointerEXT was not loaded") }
    pub extern "C" fn SecondaryColorPointerListIBM(_: GLint, _: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("SecondaryColorPointerListIBM was not loaded") }
    pub extern "C" fn SelectBuffer(_: GLsizei, _: *GLuint) -> c_void { fail!("SelectBuffer was not loaded") }
    pub extern "C" fn SelectPerfMonitorCountersAMD(_: GLuint, _: GLboolean, _: GLuint, _: GLint, _: *GLuint) -> c_void { fail!("SelectPerfMonitorCountersAMD was not loaded") }
    pub extern "C" fn SeparableFilter2D(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid, _: *GLvoid) -> c_void { fail!("SeparableFilter2D was not loaded") }
    pub extern "C" fn SeparableFilter2DEXT(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid, _: *GLvoid) -> c_void { fail!("SeparableFilter2DEXT was not loaded") }
    pub extern "C" fn SetFenceAPPLE(_: GLuint) -> c_void { fail!("SetFenceAPPLE was not loaded") }
    pub extern "C" fn SetFenceNV(_: GLuint, _: GLenum) -> c_void { fail!("SetFenceNV was not loaded") }
    pub extern "C" fn SetFragmentShaderConstantATI(_: GLuint, _: *GLfloat) -> c_void { fail!("SetFragmentShaderConstantATI was not loaded") }
    pub extern "C" fn SetInvariantEXT(_: GLuint, _: GLenum, _: *GLvoid) -> c_void { fail!("SetInvariantEXT was not loaded") }
    pub extern "C" fn SetLocalConstantEXT(_: GLuint, _: GLenum, _: *GLvoid) -> c_void { fail!("SetLocalConstantEXT was not loaded") }
    pub extern "C" fn SetMultisamplefvAMD(_: GLenum, _: GLuint, _: *GLfloat) -> c_void { fail!("SetMultisamplefvAMD was not loaded") }
    pub extern "C" fn ShadeModel(_: GLenum) -> c_void { fail!("ShadeModel was not loaded") }
    pub extern "C" fn ShaderBinary(_: GLsizei, _: *GLuint, _: GLenum, _: *GLvoid, _: GLsizei) -> c_void { fail!("ShaderBinary was not loaded") }
    pub extern "C" fn ShaderOp1EXT(_: GLenum, _: GLuint, _: GLuint) -> c_void { fail!("ShaderOp1EXT was not loaded") }
    pub extern "C" fn ShaderOp2EXT(_: GLenum, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ShaderOp2EXT was not loaded") }
    pub extern "C" fn ShaderOp3EXT(_: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ShaderOp3EXT was not loaded") }
    pub extern "C" fn ShaderSource(_: GLuint, _: GLsizei, _: **GLchar, _: *GLint) -> c_void { fail!("ShaderSource was not loaded") }
    pub extern "C" fn ShaderSourceARB(_: GLhandleARB, _: GLsizei, _: **GLcharARB, _: *GLint) -> c_void { fail!("ShaderSourceARB was not loaded") }
    pub extern "C" fn ShaderStorageBlockBinding(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("ShaderStorageBlockBinding was not loaded") }
    pub extern "C" fn SharpenTexFuncSGIS(_: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("SharpenTexFuncSGIS was not loaded") }
    pub extern "C" fn SpriteParameterfSGIX(_: GLenum, _: GLfloat) -> c_void { fail!("SpriteParameterfSGIX was not loaded") }
    pub extern "C" fn SpriteParameterfvSGIX(_: GLenum, _: *GLfloat) -> c_void { fail!("SpriteParameterfvSGIX was not loaded") }
    pub extern "C" fn SpriteParameteriSGIX(_: GLenum, _: GLint) -> c_void { fail!("SpriteParameteriSGIX was not loaded") }
    pub extern "C" fn SpriteParameterivSGIX(_: GLenum, _: *GLint) -> c_void { fail!("SpriteParameterivSGIX was not loaded") }
    pub extern "C" fn StartInstrumentsSGIX() -> c_void { fail!("StartInstrumentsSGIX was not loaded") }
    pub extern "C" fn StartTilingQCOM(_: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLbitfield) -> c_void { fail!("StartTilingQCOM was not loaded") }
    pub extern "C" fn StencilClearTagEXT(_: GLsizei, _: GLuint) -> c_void { fail!("StencilClearTagEXT was not loaded") }
    pub extern "C" fn StencilFillPathInstancedNV(_: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLenum, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("StencilFillPathInstancedNV was not loaded") }
    pub extern "C" fn StencilFillPathNV(_: GLuint, _: GLenum, _: GLuint) -> c_void { fail!("StencilFillPathNV was not loaded") }
    pub extern "C" fn StencilFunc(_: GLenum, _: GLint, _: GLuint) -> c_void { fail!("StencilFunc was not loaded") }
    pub extern "C" fn StencilFuncSeparate(_: GLenum, _: GLenum, _: GLint, _: GLuint) -> c_void { fail!("StencilFuncSeparate was not loaded") }
    pub extern "C" fn StencilFuncSeparateATI(_: GLenum, _: GLenum, _: GLint, _: GLuint) -> c_void { fail!("StencilFuncSeparateATI was not loaded") }
    pub extern "C" fn StencilMask(_: GLuint) -> c_void { fail!("StencilMask was not loaded") }
    pub extern "C" fn StencilMaskSeparate(_: GLenum, _: GLuint) -> c_void { fail!("StencilMaskSeparate was not loaded") }
    pub extern "C" fn StencilOp(_: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("StencilOp was not loaded") }
    pub extern "C" fn StencilOpSeparate(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("StencilOpSeparate was not loaded") }
    pub extern "C" fn StencilOpSeparateATI(_: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("StencilOpSeparateATI was not loaded") }
    pub extern "C" fn StencilOpValueAMD(_: GLenum, _: GLuint) -> c_void { fail!("StencilOpValueAMD was not loaded") }
    pub extern "C" fn StencilStrokePathInstancedNV(_: GLsizei, _: GLenum, _: *GLvoid, _: GLuint, _: GLint, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("StencilStrokePathInstancedNV was not loaded") }
    pub extern "C" fn StencilStrokePathNV(_: GLuint, _: GLint, _: GLuint) -> c_void { fail!("StencilStrokePathNV was not loaded") }
    pub extern "C" fn StopInstrumentsSGIX(_: GLint) -> c_void { fail!("StopInstrumentsSGIX was not loaded") }
    pub extern "C" fn StringMarkerGREMEDY(_: GLsizei, _: *GLvoid) -> c_void { fail!("StringMarkerGREMEDY was not loaded") }
    pub extern "C" fn SwizzleEXT(_: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("SwizzleEXT was not loaded") }
    pub extern "C" fn SyncTextureINTEL(_: GLuint) -> c_void { fail!("SyncTextureINTEL was not loaded") }
    pub extern "C" fn TagSampleBufferSGIX() -> c_void { fail!("TagSampleBufferSGIX was not loaded") }
    pub extern "C" fn Tangent3bEXT(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Tangent3bEXT was not loaded") }
    pub extern "C" fn Tangent3bvEXT(_: *GLbyte) -> c_void { fail!("Tangent3bvEXT was not loaded") }
    pub extern "C" fn Tangent3dEXT(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Tangent3dEXT was not loaded") }
    pub extern "C" fn Tangent3dvEXT(_: *GLdouble) -> c_void { fail!("Tangent3dvEXT was not loaded") }
    pub extern "C" fn Tangent3fEXT(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Tangent3fEXT was not loaded") }
    pub extern "C" fn Tangent3fvEXT(_: *GLfloat) -> c_void { fail!("Tangent3fvEXT was not loaded") }
    pub extern "C" fn Tangent3iEXT(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Tangent3iEXT was not loaded") }
    pub extern "C" fn Tangent3ivEXT(_: *GLint) -> c_void { fail!("Tangent3ivEXT was not loaded") }
    pub extern "C" fn Tangent3sEXT(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Tangent3sEXT was not loaded") }
    pub extern "C" fn Tangent3svEXT(_: *GLshort) -> c_void { fail!("Tangent3svEXT was not loaded") }
    pub extern "C" fn TangentPointerEXT(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("TangentPointerEXT was not loaded") }
    pub extern "C" fn TbufferMask3DFX(_: GLuint) -> c_void { fail!("TbufferMask3DFX was not loaded") }
    pub extern "C" fn TessellationFactorAMD(_: GLfloat) -> c_void { fail!("TessellationFactorAMD was not loaded") }
    pub extern "C" fn TessellationModeAMD(_: GLenum) -> c_void { fail!("TessellationModeAMD was not loaded") }
    pub extern "C" fn TestFenceAPPLE(_: GLuint) -> GLboolean { fail!("TestFenceAPPLE was not loaded") }
    pub extern "C" fn TestFenceNV(_: GLuint) -> GLboolean { fail!("TestFenceNV was not loaded") }
    pub extern "C" fn TestObjectAPPLE(_: GLenum, _: GLuint) -> GLboolean { fail!("TestObjectAPPLE was not loaded") }
    pub extern "C" fn TexBuffer(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("TexBuffer was not loaded") }
    pub extern "C" fn TexBufferARB(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("TexBufferARB was not loaded") }
    pub extern "C" fn TexBufferEXT(_: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("TexBufferEXT was not loaded") }
    pub extern "C" fn TexBufferRange(_: GLenum, _: GLenum, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("TexBufferRange was not loaded") }
    pub extern "C" fn TexBumpParameterfvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("TexBumpParameterfvATI was not loaded") }
    pub extern "C" fn TexBumpParameterivATI(_: GLenum, _: *GLint) -> c_void { fail!("TexBumpParameterivATI was not loaded") }
    pub extern "C" fn TexCoord1bOES(_: GLbyte) -> c_void { fail!("TexCoord1bOES was not loaded") }
    pub extern "C" fn TexCoord1bvOES(_: *GLbyte) -> c_void { fail!("TexCoord1bvOES was not loaded") }
    pub extern "C" fn TexCoord1d(_: GLdouble) -> c_void { fail!("TexCoord1d was not loaded") }
    pub extern "C" fn TexCoord1dv(_: *GLdouble) -> c_void { fail!("TexCoord1dv was not loaded") }
    pub extern "C" fn TexCoord1f(_: GLfloat) -> c_void { fail!("TexCoord1f was not loaded") }
    pub extern "C" fn TexCoord1fv(_: *GLfloat) -> c_void { fail!("TexCoord1fv was not loaded") }
    pub extern "C" fn TexCoord1hNV(_: GLhalfNV) -> c_void { fail!("TexCoord1hNV was not loaded") }
    pub extern "C" fn TexCoord1hvNV(_: *GLhalfNV) -> c_void { fail!("TexCoord1hvNV was not loaded") }
    pub extern "C" fn TexCoord1i(_: GLint) -> c_void { fail!("TexCoord1i was not loaded") }
    pub extern "C" fn TexCoord1iv(_: *GLint) -> c_void { fail!("TexCoord1iv was not loaded") }
    pub extern "C" fn TexCoord1s(_: GLshort) -> c_void { fail!("TexCoord1s was not loaded") }
    pub extern "C" fn TexCoord1sv(_: *GLshort) -> c_void { fail!("TexCoord1sv was not loaded") }
    pub extern "C" fn TexCoord1xOES(_: GLfixed) -> c_void { fail!("TexCoord1xOES was not loaded") }
    pub extern "C" fn TexCoord1xvOES(_: *GLfixed) -> c_void { fail!("TexCoord1xvOES was not loaded") }
    pub extern "C" fn TexCoord2bOES(_: GLbyte, _: GLbyte) -> c_void { fail!("TexCoord2bOES was not loaded") }
    pub extern "C" fn TexCoord2bvOES(_: *GLbyte) -> c_void { fail!("TexCoord2bvOES was not loaded") }
    pub extern "C" fn TexCoord2d(_: GLdouble, _: GLdouble) -> c_void { fail!("TexCoord2d was not loaded") }
    pub extern "C" fn TexCoord2dv(_: *GLdouble) -> c_void { fail!("TexCoord2dv was not loaded") }
    pub extern "C" fn TexCoord2f(_: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2f was not loaded") }
    pub extern "C" fn TexCoord2fColor3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fColor3fVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor3fVertex3fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord2fColor3fVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor4fNormal3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fColor4fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor4fNormal3fVertex3fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord2fColor4fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor4ubVertex3fSUN(_: GLfloat, _: GLfloat, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fColor4ubVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fColor4ubVertex3fvSUN(_: *GLfloat, _: *GLubyte, _: *GLfloat) -> c_void { fail!("TexCoord2fColor4ubVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fNormal3fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fNormal3fVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fNormal3fVertex3fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord2fNormal3fVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fVertex3fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord2fVertex3fSUN was not loaded") }
    pub extern "C" fn TexCoord2fVertex3fvSUN(_: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord2fVertex3fvSUN was not loaded") }
    pub extern "C" fn TexCoord2fv(_: *GLfloat) -> c_void { fail!("TexCoord2fv was not loaded") }
    pub extern "C" fn TexCoord2hNV(_: GLhalfNV, _: GLhalfNV) -> c_void { fail!("TexCoord2hNV was not loaded") }
    pub extern "C" fn TexCoord2hvNV(_: *GLhalfNV) -> c_void { fail!("TexCoord2hvNV was not loaded") }
    pub extern "C" fn TexCoord2i(_: GLint, _: GLint) -> c_void { fail!("TexCoord2i was not loaded") }
    pub extern "C" fn TexCoord2iv(_: *GLint) -> c_void { fail!("TexCoord2iv was not loaded") }
    pub extern "C" fn TexCoord2s(_: GLshort, _: GLshort) -> c_void { fail!("TexCoord2s was not loaded") }
    pub extern "C" fn TexCoord2sv(_: *GLshort) -> c_void { fail!("TexCoord2sv was not loaded") }
    pub extern "C" fn TexCoord2xOES(_: GLfixed, _: GLfixed) -> c_void { fail!("TexCoord2xOES was not loaded") }
    pub extern "C" fn TexCoord2xvOES(_: *GLfixed) -> c_void { fail!("TexCoord2xvOES was not loaded") }
    pub extern "C" fn TexCoord3bOES(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("TexCoord3bOES was not loaded") }
    pub extern "C" fn TexCoord3bvOES(_: *GLbyte) -> c_void { fail!("TexCoord3bvOES was not loaded") }
    pub extern "C" fn TexCoord3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("TexCoord3d was not loaded") }
    pub extern "C" fn TexCoord3dv(_: *GLdouble) -> c_void { fail!("TexCoord3dv was not loaded") }
    pub extern "C" fn TexCoord3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord3f was not loaded") }
    pub extern "C" fn TexCoord3fv(_: *GLfloat) -> c_void { fail!("TexCoord3fv was not loaded") }
    pub extern "C" fn TexCoord3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("TexCoord3hNV was not loaded") }
    pub extern "C" fn TexCoord3hvNV(_: *GLhalfNV) -> c_void { fail!("TexCoord3hvNV was not loaded") }
    pub extern "C" fn TexCoord3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("TexCoord3i was not loaded") }
    pub extern "C" fn TexCoord3iv(_: *GLint) -> c_void { fail!("TexCoord3iv was not loaded") }
    pub extern "C" fn TexCoord3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("TexCoord3s was not loaded") }
    pub extern "C" fn TexCoord3sv(_: *GLshort) -> c_void { fail!("TexCoord3sv was not loaded") }
    pub extern "C" fn TexCoord3xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("TexCoord3xOES was not loaded") }
    pub extern "C" fn TexCoord3xvOES(_: *GLfixed) -> c_void { fail!("TexCoord3xvOES was not loaded") }
    pub extern "C" fn TexCoord4bOES(_: GLbyte, _: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("TexCoord4bOES was not loaded") }
    pub extern "C" fn TexCoord4bvOES(_: *GLbyte) -> c_void { fail!("TexCoord4bvOES was not loaded") }
    pub extern "C" fn TexCoord4d(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("TexCoord4d was not loaded") }
    pub extern "C" fn TexCoord4dv(_: *GLdouble) -> c_void { fail!("TexCoord4dv was not loaded") }
    pub extern "C" fn TexCoord4f(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord4f was not loaded") }
    pub extern "C" fn TexCoord4fColor4fNormal3fVertex4fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord4fColor4fNormal3fVertex4fSUN was not loaded") }
    pub extern "C" fn TexCoord4fColor4fNormal3fVertex4fvSUN(_: *GLfloat, _: *GLfloat, _: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord4fColor4fNormal3fVertex4fvSUN was not loaded") }
    pub extern "C" fn TexCoord4fVertex4fSUN(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("TexCoord4fVertex4fSUN was not loaded") }
    pub extern "C" fn TexCoord4fVertex4fvSUN(_: *GLfloat, _: *GLfloat) -> c_void { fail!("TexCoord4fVertex4fvSUN was not loaded") }
    pub extern "C" fn TexCoord4fv(_: *GLfloat) -> c_void { fail!("TexCoord4fv was not loaded") }
    pub extern "C" fn TexCoord4hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("TexCoord4hNV was not loaded") }
    pub extern "C" fn TexCoord4hvNV(_: *GLhalfNV) -> c_void { fail!("TexCoord4hvNV was not loaded") }
    pub extern "C" fn TexCoord4i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("TexCoord4i was not loaded") }
    pub extern "C" fn TexCoord4iv(_: *GLint) -> c_void { fail!("TexCoord4iv was not loaded") }
    pub extern "C" fn TexCoord4s(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("TexCoord4s was not loaded") }
    pub extern "C" fn TexCoord4sv(_: *GLshort) -> c_void { fail!("TexCoord4sv was not loaded") }
    pub extern "C" fn TexCoord4xOES(_: GLfixed, _: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("TexCoord4xOES was not loaded") }
    pub extern "C" fn TexCoord4xvOES(_: *GLfixed) -> c_void { fail!("TexCoord4xvOES was not loaded") }
    pub extern "C" fn TexCoordFormatNV(_: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("TexCoordFormatNV was not loaded") }
    pub extern "C" fn TexCoordP1ui(_: GLenum, _: GLuint) -> c_void { fail!("TexCoordP1ui was not loaded") }
    pub extern "C" fn TexCoordP1uiv(_: GLenum, _: *GLuint) -> c_void { fail!("TexCoordP1uiv was not loaded") }
    pub extern "C" fn TexCoordP2ui(_: GLenum, _: GLuint) -> c_void { fail!("TexCoordP2ui was not loaded") }
    pub extern "C" fn TexCoordP2uiv(_: GLenum, _: *GLuint) -> c_void { fail!("TexCoordP2uiv was not loaded") }
    pub extern "C" fn TexCoordP3ui(_: GLenum, _: GLuint) -> c_void { fail!("TexCoordP3ui was not loaded") }
    pub extern "C" fn TexCoordP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("TexCoordP3uiv was not loaded") }
    pub extern "C" fn TexCoordP4ui(_: GLenum, _: GLuint) -> c_void { fail!("TexCoordP4ui was not loaded") }
    pub extern "C" fn TexCoordP4uiv(_: GLenum, _: *GLuint) -> c_void { fail!("TexCoordP4uiv was not loaded") }
    pub extern "C" fn TexCoordPointer(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("TexCoordPointer was not loaded") }
    pub extern "C" fn TexCoordPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("TexCoordPointerEXT was not loaded") }
    pub extern "C" fn TexCoordPointerListIBM(_: GLint, _: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("TexCoordPointerListIBM was not loaded") }
    pub extern "C" fn TexCoordPointervINTEL(_: GLint, _: GLenum, _: **GLvoid) -> c_void { fail!("TexCoordPointervINTEL was not loaded") }
    pub extern "C" fn TexEnvf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TexEnvf was not loaded") }
    pub extern "C" fn TexEnvfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TexEnvfv was not loaded") }
    pub extern "C" fn TexEnvi(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TexEnvi was not loaded") }
    pub extern "C" fn TexEnviv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexEnviv was not loaded") }
    pub extern "C" fn TexEnvx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexEnvx was not loaded") }
    pub extern "C" fn TexEnvxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexEnvxOES was not loaded") }
    pub extern "C" fn TexEnvxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexEnvxv was not loaded") }
    pub extern "C" fn TexEnvxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexEnvxvOES was not loaded") }
    pub extern "C" fn TexFilterFuncSGIS(_: GLenum, _: GLenum, _: GLsizei, _: *GLfloat) -> c_void { fail!("TexFilterFuncSGIS was not loaded") }
    pub extern "C" fn TexGend(_: GLenum, _: GLenum, _: GLdouble) -> c_void { fail!("TexGend was not loaded") }
    pub extern "C" fn TexGendv(_: GLenum, _: GLenum, _: *GLdouble) -> c_void { fail!("TexGendv was not loaded") }
    pub extern "C" fn TexGenf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TexGenf was not loaded") }
    pub extern "C" fn TexGenfOES(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TexGenfOES was not loaded") }
    pub extern "C" fn TexGenfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TexGenfv was not loaded") }
    pub extern "C" fn TexGenfvOES(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TexGenfvOES was not loaded") }
    pub extern "C" fn TexGeni(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TexGeni was not loaded") }
    pub extern "C" fn TexGeniOES(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TexGeniOES was not loaded") }
    pub extern "C" fn TexGeniv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexGeniv was not loaded") }
    pub extern "C" fn TexGenivOES(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexGenivOES was not loaded") }
    pub extern "C" fn TexGenxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexGenxOES was not loaded") }
    pub extern "C" fn TexGenxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexGenxvOES was not loaded") }
    pub extern "C" fn TexImage1D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage1D was not loaded") }
    pub extern "C" fn TexImage2D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage2D was not loaded") }
    pub extern "C" fn TexImage2DMultisample(_: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexImage2DMultisample was not loaded") }
    pub extern "C" fn TexImage2DMultisampleCoverageNV(_: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexImage2DMultisampleCoverageNV was not loaded") }
    pub extern "C" fn TexImage3D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage3D was not loaded") }
    pub extern "C" fn TexImage3DEXT(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage3DEXT was not loaded") }
    pub extern "C" fn TexImage3DMultisample(_: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexImage3DMultisample was not loaded") }
    pub extern "C" fn TexImage3DMultisampleCoverageNV(_: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexImage3DMultisampleCoverageNV was not loaded") }
    pub extern "C" fn TexImage3DOES(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage3DOES was not loaded") }
    pub extern "C" fn TexImage4DSGIS(_: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexImage4DSGIS was not loaded") }
    pub extern "C" fn TexPageCommitmentARB(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexPageCommitmentARB was not loaded") }
    pub extern "C" fn TexParameterIiv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexParameterIiv was not loaded") }
    pub extern "C" fn TexParameterIivEXT(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexParameterIivEXT was not loaded") }
    pub extern "C" fn TexParameterIuiv(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("TexParameterIuiv was not loaded") }
    pub extern "C" fn TexParameterIuivEXT(_: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("TexParameterIuivEXT was not loaded") }
    pub extern "C" fn TexParameterf(_: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TexParameterf was not loaded") }
    pub extern "C" fn TexParameterfv(_: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TexParameterfv was not loaded") }
    pub extern "C" fn TexParameteri(_: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TexParameteri was not loaded") }
    pub extern "C" fn TexParameteriv(_: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TexParameteriv was not loaded") }
    pub extern "C" fn TexParameterx(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexParameterx was not loaded") }
    pub extern "C" fn TexParameterxOES(_: GLenum, _: GLenum, _: GLfixed) -> c_void { fail!("TexParameterxOES was not loaded") }
    pub extern "C" fn TexParameterxv(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexParameterxv was not loaded") }
    pub extern "C" fn TexParameterxvOES(_: GLenum, _: GLenum, _: *GLfixed) -> c_void { fail!("TexParameterxvOES was not loaded") }
    pub extern "C" fn TexRenderbufferNV(_: GLenum, _: GLuint) -> c_void { fail!("TexRenderbufferNV was not loaded") }
    pub extern "C" fn TexStorage1D(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei) -> c_void { fail!("TexStorage1D was not loaded") }
    pub extern "C" fn TexStorage1DEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei) -> c_void { fail!("TexStorage1DEXT was not loaded") }
    pub extern "C" fn TexStorage2D(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("TexStorage2D was not loaded") }
    pub extern "C" fn TexStorage2DEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("TexStorage2DEXT was not loaded") }
    pub extern "C" fn TexStorage2DMultisample(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexStorage2DMultisample was not loaded") }
    pub extern "C" fn TexStorage3D(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("TexStorage3D was not loaded") }
    pub extern "C" fn TexStorage3DEXT(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("TexStorage3DEXT was not loaded") }
    pub extern "C" fn TexStorage3DMultisample(_: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexStorage3DMultisample was not loaded") }
    pub extern "C" fn TexStorageSparseAMD(_: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLsizei, _: GLbitfield) -> c_void { fail!("TexStorageSparseAMD was not loaded") }
    pub extern "C" fn TexSubImage1D(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage1D was not loaded") }
    pub extern "C" fn TexSubImage1DEXT(_: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage1DEXT was not loaded") }
    pub extern "C" fn TexSubImage2D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage2D was not loaded") }
    pub extern "C" fn TexSubImage2DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage2DEXT was not loaded") }
    pub extern "C" fn TexSubImage3D(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage3D was not loaded") }
    pub extern "C" fn TexSubImage3DEXT(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage3DEXT was not loaded") }
    pub extern "C" fn TexSubImage3DOES(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage3DOES was not loaded") }
    pub extern "C" fn TexSubImage4DSGIS(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TexSubImage4DSGIS was not loaded") }
    pub extern "C" fn TextureBarrierNV() -> c_void { fail!("TextureBarrierNV was not loaded") }
    pub extern "C" fn TextureBufferEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint) -> c_void { fail!("TextureBufferEXT was not loaded") }
    pub extern "C" fn TextureBufferRangeEXT(_: GLuint, _: GLenum, _: GLenum, _: GLuint, _: GLintptr, _: GLsizeiptr) -> c_void { fail!("TextureBufferRangeEXT was not loaded") }
    pub extern "C" fn TextureColorMaskSGIS(_: GLboolean, _: GLboolean, _: GLboolean, _: GLboolean) -> c_void { fail!("TextureColorMaskSGIS was not loaded") }
    pub extern "C" fn TextureImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureImage1DEXT was not loaded") }
    pub extern "C" fn TextureImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureImage2DEXT was not loaded") }
    pub extern "C" fn TextureImage2DMultisampleCoverageNV(_: GLuint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureImage2DMultisampleCoverageNV was not loaded") }
    pub extern "C" fn TextureImage2DMultisampleNV(_: GLuint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureImage2DMultisampleNV was not loaded") }
    pub extern "C" fn TextureImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLint, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureImage3DEXT was not loaded") }
    pub extern "C" fn TextureImage3DMultisampleCoverageNV(_: GLuint, _: GLenum, _: GLsizei, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureImage3DMultisampleCoverageNV was not loaded") }
    pub extern "C" fn TextureImage3DMultisampleNV(_: GLuint, _: GLenum, _: GLsizei, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureImage3DMultisampleNV was not loaded") }
    pub extern "C" fn TextureLightEXT(_: GLenum) -> c_void { fail!("TextureLightEXT was not loaded") }
    pub extern "C" fn TextureMaterialEXT(_: GLenum, _: GLenum) -> c_void { fail!("TextureMaterialEXT was not loaded") }
    pub extern "C" fn TextureNormalEXT(_: GLenum) -> c_void { fail!("TextureNormalEXT was not loaded") }
    pub extern "C" fn TexturePageCommitmentEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TexturePageCommitmentEXT was not loaded") }
    pub extern "C" fn TextureParameterIivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TextureParameterIivEXT was not loaded") }
    pub extern "C" fn TextureParameterIuivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLuint) -> c_void { fail!("TextureParameterIuivEXT was not loaded") }
    pub extern "C" fn TextureParameterfEXT(_: GLuint, _: GLenum, _: GLenum, _: GLfloat) -> c_void { fail!("TextureParameterfEXT was not loaded") }
    pub extern "C" fn TextureParameterfvEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLfloat) -> c_void { fail!("TextureParameterfvEXT was not loaded") }
    pub extern "C" fn TextureParameteriEXT(_: GLuint, _: GLenum, _: GLenum, _: GLint) -> c_void { fail!("TextureParameteriEXT was not loaded") }
    pub extern "C" fn TextureParameterivEXT(_: GLuint, _: GLenum, _: GLenum, _: *GLint) -> c_void { fail!("TextureParameterivEXT was not loaded") }
    pub extern "C" fn TextureRangeAPPLE(_: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("TextureRangeAPPLE was not loaded") }
    pub extern "C" fn TextureRenderbufferEXT(_: GLuint, _: GLenum, _: GLuint) -> c_void { fail!("TextureRenderbufferEXT was not loaded") }
    pub extern "C" fn TextureStorage1DEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei) -> c_void { fail!("TextureStorage1DEXT was not loaded") }
    pub extern "C" fn TextureStorage2DEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei) -> c_void { fail!("TextureStorage2DEXT was not loaded") }
    pub extern "C" fn TextureStorage2DMultisampleEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureStorage2DMultisampleEXT was not loaded") }
    pub extern "C" fn TextureStorage3DEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei) -> c_void { fail!("TextureStorage3DEXT was not loaded") }
    pub extern "C" fn TextureStorage3DMultisampleEXT(_: GLuint, _: GLenum, _: GLsizei, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLboolean) -> c_void { fail!("TextureStorage3DMultisampleEXT was not loaded") }
    pub extern "C" fn TextureStorageSparseAMD(_: GLuint, _: GLenum, _: GLenum, _: GLsizei, _: GLsizei, _: GLsizei, _: GLsizei, _: GLbitfield) -> c_void { fail!("TextureStorageSparseAMD was not loaded") }
    pub extern "C" fn TextureSubImage1DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureSubImage1DEXT was not loaded") }
    pub extern "C" fn TextureSubImage2DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureSubImage2DEXT was not loaded") }
    pub extern "C" fn TextureSubImage3DEXT(_: GLuint, _: GLenum, _: GLint, _: GLint, _: GLint, _: GLint, _: GLsizei, _: GLsizei, _: GLsizei, _: GLenum, _: GLenum, _: *GLvoid) -> c_void { fail!("TextureSubImage3DEXT was not loaded") }
    pub extern "C" fn TextureView(_: GLuint, _: GLenum, _: GLuint, _: GLenum, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("TextureView was not loaded") }
    pub extern "C" fn TrackMatrixNV(_: GLenum, _: GLuint, _: GLenum, _: GLenum) -> c_void { fail!("TrackMatrixNV was not loaded") }
    pub extern "C" fn TransformFeedbackAttribsNV(_: GLuint, _: *GLint, _: GLenum) -> c_void { fail!("TransformFeedbackAttribsNV was not loaded") }
    pub extern "C" fn TransformFeedbackStreamAttribsNV(_: GLsizei, _: *GLint, _: GLsizei, _: *GLint, _: GLenum) -> c_void { fail!("TransformFeedbackStreamAttribsNV was not loaded") }
    pub extern "C" fn TransformFeedbackVaryings(_: GLuint, _: GLsizei, _: **GLchar, _: GLenum) -> c_void { fail!("TransformFeedbackVaryings was not loaded") }
    pub extern "C" fn TransformFeedbackVaryingsEXT(_: GLuint, _: GLsizei, _: **GLchar, _: GLenum) -> c_void { fail!("TransformFeedbackVaryingsEXT was not loaded") }
    pub extern "C" fn TransformFeedbackVaryingsNV(_: GLuint, _: GLsizei, _: *GLint, _: GLenum) -> c_void { fail!("TransformFeedbackVaryingsNV was not loaded") }
    pub extern "C" fn TransformPathNV(_: GLuint, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("TransformPathNV was not loaded") }
    pub extern "C" fn Translated(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Translated was not loaded") }
    pub extern "C" fn Translatef(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Translatef was not loaded") }
    pub extern "C" fn Translatex(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Translatex was not loaded") }
    pub extern "C" fn TranslatexOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("TranslatexOES was not loaded") }
    pub extern "C" fn Uniform1d(_: GLint, _: GLdouble) -> c_void { fail!("Uniform1d was not loaded") }
    pub extern "C" fn Uniform1dv(_: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("Uniform1dv was not loaded") }
    pub extern "C" fn Uniform1f(_: GLint, _: GLfloat) -> c_void { fail!("Uniform1f was not loaded") }
    pub extern "C" fn Uniform1fARB(_: GLint, _: GLfloat) -> c_void { fail!("Uniform1fARB was not loaded") }
    pub extern "C" fn Uniform1fv(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform1fv was not loaded") }
    pub extern "C" fn Uniform1fvARB(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform1fvARB was not loaded") }
    pub extern "C" fn Uniform1i(_: GLint, _: GLint) -> c_void { fail!("Uniform1i was not loaded") }
    pub extern "C" fn Uniform1i64NV(_: GLint, _: GLint64EXT) -> c_void { fail!("Uniform1i64NV was not loaded") }
    pub extern "C" fn Uniform1i64vNV(_: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("Uniform1i64vNV was not loaded") }
    pub extern "C" fn Uniform1iARB(_: GLint, _: GLint) -> c_void { fail!("Uniform1iARB was not loaded") }
    pub extern "C" fn Uniform1iv(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform1iv was not loaded") }
    pub extern "C" fn Uniform1ivARB(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform1ivARB was not loaded") }
    pub extern "C" fn Uniform1ui(_: GLint, _: GLuint) -> c_void { fail!("Uniform1ui was not loaded") }
    pub extern "C" fn Uniform1ui64NV(_: GLint, _: GLuint64EXT) -> c_void { fail!("Uniform1ui64NV was not loaded") }
    pub extern "C" fn Uniform1ui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniform1ui64vNV was not loaded") }
    pub extern "C" fn Uniform1uiEXT(_: GLint, _: GLuint) -> c_void { fail!("Uniform1uiEXT was not loaded") }
    pub extern "C" fn Uniform1uiv(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform1uiv was not loaded") }
    pub extern "C" fn Uniform1uivEXT(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform1uivEXT was not loaded") }
    pub extern "C" fn Uniform2d(_: GLint, _: GLdouble, _: GLdouble) -> c_void { fail!("Uniform2d was not loaded") }
    pub extern "C" fn Uniform2dv(_: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("Uniform2dv was not loaded") }
    pub extern "C" fn Uniform2f(_: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform2f was not loaded") }
    pub extern "C" fn Uniform2fARB(_: GLint, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform2fARB was not loaded") }
    pub extern "C" fn Uniform2fv(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform2fv was not loaded") }
    pub extern "C" fn Uniform2fvARB(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform2fvARB was not loaded") }
    pub extern "C" fn Uniform2i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform2i was not loaded") }
    pub extern "C" fn Uniform2i64NV(_: GLint, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("Uniform2i64NV was not loaded") }
    pub extern "C" fn Uniform2i64vNV(_: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("Uniform2i64vNV was not loaded") }
    pub extern "C" fn Uniform2iARB(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform2iARB was not loaded") }
    pub extern "C" fn Uniform2iv(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform2iv was not loaded") }
    pub extern "C" fn Uniform2ivARB(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform2ivARB was not loaded") }
    pub extern "C" fn Uniform2ui(_: GLint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform2ui was not loaded") }
    pub extern "C" fn Uniform2ui64NV(_: GLint, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("Uniform2ui64NV was not loaded") }
    pub extern "C" fn Uniform2ui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniform2ui64vNV was not loaded") }
    pub extern "C" fn Uniform2uiEXT(_: GLint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform2uiEXT was not loaded") }
    pub extern "C" fn Uniform2uiv(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform2uiv was not loaded") }
    pub extern "C" fn Uniform2uivEXT(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform2uivEXT was not loaded") }
    pub extern "C" fn Uniform3d(_: GLint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Uniform3d was not loaded") }
    pub extern "C" fn Uniform3dv(_: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("Uniform3dv was not loaded") }
    pub extern "C" fn Uniform3f(_: GLint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform3f was not loaded") }
    pub extern "C" fn Uniform3fARB(_: GLint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform3fARB was not loaded") }
    pub extern "C" fn Uniform3fv(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform3fv was not loaded") }
    pub extern "C" fn Uniform3fvARB(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform3fvARB was not loaded") }
    pub extern "C" fn Uniform3i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform3i was not loaded") }
    pub extern "C" fn Uniform3i64NV(_: GLint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("Uniform3i64NV was not loaded") }
    pub extern "C" fn Uniform3i64vNV(_: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("Uniform3i64vNV was not loaded") }
    pub extern "C" fn Uniform3iARB(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform3iARB was not loaded") }
    pub extern "C" fn Uniform3iv(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform3iv was not loaded") }
    pub extern "C" fn Uniform3ivARB(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform3ivARB was not loaded") }
    pub extern "C" fn Uniform3ui(_: GLint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform3ui was not loaded") }
    pub extern "C" fn Uniform3ui64NV(_: GLint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("Uniform3ui64NV was not loaded") }
    pub extern "C" fn Uniform3ui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniform3ui64vNV was not loaded") }
    pub extern "C" fn Uniform3uiEXT(_: GLint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform3uiEXT was not loaded") }
    pub extern "C" fn Uniform3uiv(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform3uiv was not loaded") }
    pub extern "C" fn Uniform3uivEXT(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform3uivEXT was not loaded") }
    pub extern "C" fn Uniform4d(_: GLint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Uniform4d was not loaded") }
    pub extern "C" fn Uniform4dv(_: GLint, _: GLsizei, _: *GLdouble) -> c_void { fail!("Uniform4dv was not loaded") }
    pub extern "C" fn Uniform4f(_: GLint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform4f was not loaded") }
    pub extern "C" fn Uniform4fARB(_: GLint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Uniform4fARB was not loaded") }
    pub extern "C" fn Uniform4fv(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform4fv was not loaded") }
    pub extern "C" fn Uniform4fvARB(_: GLint, _: GLsizei, _: *GLfloat) -> c_void { fail!("Uniform4fvARB was not loaded") }
    pub extern "C" fn Uniform4i(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform4i was not loaded") }
    pub extern "C" fn Uniform4i64NV(_: GLint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("Uniform4i64NV was not loaded") }
    pub extern "C" fn Uniform4i64vNV(_: GLint, _: GLsizei, _: *GLint64EXT) -> c_void { fail!("Uniform4i64vNV was not loaded") }
    pub extern "C" fn Uniform4iARB(_: GLint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Uniform4iARB was not loaded") }
    pub extern "C" fn Uniform4iv(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform4iv was not loaded") }
    pub extern "C" fn Uniform4ivARB(_: GLint, _: GLsizei, _: *GLint) -> c_void { fail!("Uniform4ivARB was not loaded") }
    pub extern "C" fn Uniform4ui(_: GLint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform4ui was not loaded") }
    pub extern "C" fn Uniform4ui64NV(_: GLint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("Uniform4ui64NV was not loaded") }
    pub extern "C" fn Uniform4ui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniform4ui64vNV was not loaded") }
    pub extern "C" fn Uniform4uiEXT(_: GLint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("Uniform4uiEXT was not loaded") }
    pub extern "C" fn Uniform4uiv(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform4uiv was not loaded") }
    pub extern "C" fn Uniform4uivEXT(_: GLint, _: GLsizei, _: *GLuint) -> c_void { fail!("Uniform4uivEXT was not loaded") }
    pub extern "C" fn UniformBlockBinding(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("UniformBlockBinding was not loaded") }
    pub extern "C" fn UniformBufferEXT(_: GLuint, _: GLint, _: GLuint) -> c_void { fail!("UniformBufferEXT was not loaded") }
    pub extern "C" fn UniformHandleui64ARB(_: GLint, _: GLuint64) -> c_void { fail!("UniformHandleui64ARB was not loaded") }
    pub extern "C" fn UniformHandleui64NV(_: GLint, _: GLuint64) -> c_void { fail!("UniformHandleui64NV was not loaded") }
    pub extern "C" fn UniformHandleui64vARB(_: GLint, _: GLsizei, _: *GLuint64) -> c_void { fail!("UniformHandleui64vARB was not loaded") }
    pub extern "C" fn UniformHandleui64vNV(_: GLint, _: GLsizei, _: *GLuint64) -> c_void { fail!("UniformHandleui64vNV was not loaded") }
    pub extern "C" fn UniformMatrix2dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix2dv was not loaded") }
    pub extern "C" fn UniformMatrix2fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix2fv was not loaded") }
    pub extern "C" fn UniformMatrix2fvARB(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix2fvARB was not loaded") }
    pub extern "C" fn UniformMatrix2x3dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix2x3dv was not loaded") }
    pub extern "C" fn UniformMatrix2x3fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix2x3fv was not loaded") }
    pub extern "C" fn UniformMatrix2x4dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix2x4dv was not loaded") }
    pub extern "C" fn UniformMatrix2x4fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix2x4fv was not loaded") }
    pub extern "C" fn UniformMatrix3dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix3dv was not loaded") }
    pub extern "C" fn UniformMatrix3fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix3fv was not loaded") }
    pub extern "C" fn UniformMatrix3fvARB(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix3fvARB was not loaded") }
    pub extern "C" fn UniformMatrix3x2dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix3x2dv was not loaded") }
    pub extern "C" fn UniformMatrix3x2fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix3x2fv was not loaded") }
    pub extern "C" fn UniformMatrix3x4dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix3x4dv was not loaded") }
    pub extern "C" fn UniformMatrix3x4fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix3x4fv was not loaded") }
    pub extern "C" fn UniformMatrix4dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix4dv was not loaded") }
    pub extern "C" fn UniformMatrix4fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix4fv was not loaded") }
    pub extern "C" fn UniformMatrix4fvARB(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix4fvARB was not loaded") }
    pub extern "C" fn UniformMatrix4x2dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix4x2dv was not loaded") }
    pub extern "C" fn UniformMatrix4x2fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix4x2fv was not loaded") }
    pub extern "C" fn UniformMatrix4x3dv(_: GLint, _: GLsizei, _: GLboolean, _: *GLdouble) -> c_void { fail!("UniformMatrix4x3dv was not loaded") }
    pub extern "C" fn UniformMatrix4x3fv(_: GLint, _: GLsizei, _: GLboolean, _: *GLfloat) -> c_void { fail!("UniformMatrix4x3fv was not loaded") }
    pub extern "C" fn UniformSubroutinesuiv(_: GLenum, _: GLsizei, _: *GLuint) -> c_void { fail!("UniformSubroutinesuiv was not loaded") }
    pub extern "C" fn Uniformui64NV(_: GLint, _: GLuint64EXT) -> c_void { fail!("Uniformui64NV was not loaded") }
    pub extern "C" fn Uniformui64vNV(_: GLint, _: GLsizei, _: *GLuint64EXT) -> c_void { fail!("Uniformui64vNV was not loaded") }
    pub extern "C" fn UnlockArraysEXT() -> c_void { fail!("UnlockArraysEXT was not loaded") }
    pub extern "C" fn UnmapBuffer(_: GLenum) -> GLboolean { fail!("UnmapBuffer was not loaded") }
    pub extern "C" fn UnmapBufferARB(_: GLenum) -> GLboolean { fail!("UnmapBufferARB was not loaded") }
    pub extern "C" fn UnmapBufferOES(_: GLenum) -> GLboolean { fail!("UnmapBufferOES was not loaded") }
    pub extern "C" fn UnmapNamedBufferEXT(_: GLuint) -> GLboolean { fail!("UnmapNamedBufferEXT was not loaded") }
    pub extern "C" fn UnmapObjectBufferATI(_: GLuint) -> c_void { fail!("UnmapObjectBufferATI was not loaded") }
    pub extern "C" fn UnmapTexture2DINTEL(_: GLuint, _: GLint) -> c_void { fail!("UnmapTexture2DINTEL was not loaded") }
    pub extern "C" fn UpdateObjectBufferATI(_: GLuint, _: GLuint, _: GLsizei, _: *GLvoid, _: GLenum) -> c_void { fail!("UpdateObjectBufferATI was not loaded") }
    pub extern "C" fn UseProgram(_: GLuint) -> c_void { fail!("UseProgram was not loaded") }
    pub extern "C" fn UseProgramObjectARB(_: GLhandleARB) -> c_void { fail!("UseProgramObjectARB was not loaded") }
    pub extern "C" fn UseProgramStages(_: GLuint, _: GLbitfield, _: GLuint) -> c_void { fail!("UseProgramStages was not loaded") }
    pub extern "C" fn UseProgramStagesEXT(_: GLuint, _: GLbitfield, _: GLuint) -> c_void { fail!("UseProgramStagesEXT was not loaded") }
    pub extern "C" fn UseShaderProgramEXT(_: GLenum, _: GLuint) -> c_void { fail!("UseShaderProgramEXT was not loaded") }
    pub extern "C" fn VDPAUFiniNV() -> c_void { fail!("VDPAUFiniNV was not loaded") }
    pub extern "C" fn VDPAUGetSurfaceivNV(_: GLvdpauSurfaceNV, _: GLenum, _: GLsizei, _: *GLsizei, _: *GLint) -> c_void { fail!("VDPAUGetSurfaceivNV was not loaded") }
    pub extern "C" fn VDPAUInitNV(_: *GLvoid, _: *GLvoid) -> c_void { fail!("VDPAUInitNV was not loaded") }
    pub extern "C" fn VDPAUIsSurfaceNV(_: GLvdpauSurfaceNV) -> c_void { fail!("VDPAUIsSurfaceNV was not loaded") }
    pub extern "C" fn VDPAUMapSurfacesNV(_: GLsizei, _: *GLvdpauSurfaceNV) -> c_void { fail!("VDPAUMapSurfacesNV was not loaded") }
    pub extern "C" fn VDPAURegisterOutputSurfaceNV(_: *GLvoid, _: GLenum, _: GLsizei, _: *GLuint) -> GLvdpauSurfaceNV { fail!("VDPAURegisterOutputSurfaceNV was not loaded") }
    pub extern "C" fn VDPAURegisterVideoSurfaceNV(_: *GLvoid, _: GLenum, _: GLsizei, _: *GLuint) -> GLvdpauSurfaceNV { fail!("VDPAURegisterVideoSurfaceNV was not loaded") }
    pub extern "C" fn VDPAUSurfaceAccessNV(_: GLvdpauSurfaceNV, _: GLenum) -> c_void { fail!("VDPAUSurfaceAccessNV was not loaded") }
    pub extern "C" fn VDPAUUnmapSurfacesNV(_: GLsizei, _: *GLvdpauSurfaceNV) -> c_void { fail!("VDPAUUnmapSurfacesNV was not loaded") }
    pub extern "C" fn VDPAUUnregisterSurfaceNV(_: GLvdpauSurfaceNV) -> c_void { fail!("VDPAUUnregisterSurfaceNV was not loaded") }
    pub extern "C" fn ValidateProgram(_: GLuint) -> c_void { fail!("ValidateProgram was not loaded") }
    pub extern "C" fn ValidateProgramARB(_: GLhandleARB) -> c_void { fail!("ValidateProgramARB was not loaded") }
    pub extern "C" fn ValidateProgramPipeline(_: GLuint) -> c_void { fail!("ValidateProgramPipeline was not loaded") }
    pub extern "C" fn ValidateProgramPipelineEXT(_: GLuint) -> c_void { fail!("ValidateProgramPipelineEXT was not loaded") }
    pub extern "C" fn VariantArrayObjectATI(_: GLuint, _: GLenum, _: GLsizei, _: GLuint, _: GLuint) -> c_void { fail!("VariantArrayObjectATI was not loaded") }
    pub extern "C" fn VariantPointerEXT(_: GLuint, _: GLenum, _: GLuint, _: *GLvoid) -> c_void { fail!("VariantPointerEXT was not loaded") }
    pub extern "C" fn VariantbvEXT(_: GLuint, _: *GLbyte) -> c_void { fail!("VariantbvEXT was not loaded") }
    pub extern "C" fn VariantdvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VariantdvEXT was not loaded") }
    pub extern "C" fn VariantfvEXT(_: GLuint, _: *GLfloat) -> c_void { fail!("VariantfvEXT was not loaded") }
    pub extern "C" fn VariantivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VariantivEXT was not loaded") }
    pub extern "C" fn VariantsvEXT(_: GLuint, _: *GLshort) -> c_void { fail!("VariantsvEXT was not loaded") }
    pub extern "C" fn VariantubvEXT(_: GLuint, _: *GLubyte) -> c_void { fail!("VariantubvEXT was not loaded") }
    pub extern "C" fn VariantuivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VariantuivEXT was not loaded") }
    pub extern "C" fn VariantusvEXT(_: GLuint, _: *GLushort) -> c_void { fail!("VariantusvEXT was not loaded") }
    pub extern "C" fn Vertex2bOES(_: GLbyte) -> c_void { fail!("Vertex2bOES was not loaded") }
    pub extern "C" fn Vertex2bvOES(_: *GLbyte) -> c_void { fail!("Vertex2bvOES was not loaded") }
    pub extern "C" fn Vertex2d(_: GLdouble, _: GLdouble) -> c_void { fail!("Vertex2d was not loaded") }
    pub extern "C" fn Vertex2dv(_: *GLdouble) -> c_void { fail!("Vertex2dv was not loaded") }
    pub extern "C" fn Vertex2f(_: GLfloat, _: GLfloat) -> c_void { fail!("Vertex2f was not loaded") }
    pub extern "C" fn Vertex2fv(_: *GLfloat) -> c_void { fail!("Vertex2fv was not loaded") }
    pub extern "C" fn Vertex2hNV(_: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Vertex2hNV was not loaded") }
    pub extern "C" fn Vertex2hvNV(_: *GLhalfNV) -> c_void { fail!("Vertex2hvNV was not loaded") }
    pub extern "C" fn Vertex2i(_: GLint, _: GLint) -> c_void { fail!("Vertex2i was not loaded") }
    pub extern "C" fn Vertex2iv(_: *GLint) -> c_void { fail!("Vertex2iv was not loaded") }
    pub extern "C" fn Vertex2s(_: GLshort, _: GLshort) -> c_void { fail!("Vertex2s was not loaded") }
    pub extern "C" fn Vertex2sv(_: *GLshort) -> c_void { fail!("Vertex2sv was not loaded") }
    pub extern "C" fn Vertex2xOES(_: GLfixed) -> c_void { fail!("Vertex2xOES was not loaded") }
    pub extern "C" fn Vertex2xvOES(_: *GLfixed) -> c_void { fail!("Vertex2xvOES was not loaded") }
    pub extern "C" fn Vertex3bOES(_: GLbyte, _: GLbyte) -> c_void { fail!("Vertex3bOES was not loaded") }
    pub extern "C" fn Vertex3bvOES(_: *GLbyte) -> c_void { fail!("Vertex3bvOES was not loaded") }
    pub extern "C" fn Vertex3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Vertex3d was not loaded") }
    pub extern "C" fn Vertex3dv(_: *GLdouble) -> c_void { fail!("Vertex3dv was not loaded") }
    pub extern "C" fn Vertex3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Vertex3f was not loaded") }
    pub extern "C" fn Vertex3fv(_: *GLfloat) -> c_void { fail!("Vertex3fv was not loaded") }
    pub extern "C" fn Vertex3hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Vertex3hNV was not loaded") }
    pub extern "C" fn Vertex3hvNV(_: *GLhalfNV) -> c_void { fail!("Vertex3hvNV was not loaded") }
    pub extern "C" fn Vertex3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("Vertex3i was not loaded") }
    pub extern "C" fn Vertex3iv(_: *GLint) -> c_void { fail!("Vertex3iv was not loaded") }
    pub extern "C" fn Vertex3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Vertex3s was not loaded") }
    pub extern "C" fn Vertex3sv(_: *GLshort) -> c_void { fail!("Vertex3sv was not loaded") }
    pub extern "C" fn Vertex3xOES(_: GLfixed, _: GLfixed) -> c_void { fail!("Vertex3xOES was not loaded") }
    pub extern "C" fn Vertex3xvOES(_: *GLfixed) -> c_void { fail!("Vertex3xvOES was not loaded") }
    pub extern "C" fn Vertex4bOES(_: GLbyte, _: GLbyte, _: GLbyte) -> c_void { fail!("Vertex4bOES was not loaded") }
    pub extern "C" fn Vertex4bvOES(_: *GLbyte) -> c_void { fail!("Vertex4bvOES was not loaded") }
    pub extern "C" fn Vertex4d(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("Vertex4d was not loaded") }
    pub extern "C" fn Vertex4dv(_: *GLdouble) -> c_void { fail!("Vertex4dv was not loaded") }
    pub extern "C" fn Vertex4f(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("Vertex4f was not loaded") }
    pub extern "C" fn Vertex4fv(_: *GLfloat) -> c_void { fail!("Vertex4fv was not loaded") }
    pub extern "C" fn Vertex4hNV(_: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("Vertex4hNV was not loaded") }
    pub extern "C" fn Vertex4hvNV(_: *GLhalfNV) -> c_void { fail!("Vertex4hvNV was not loaded") }
    pub extern "C" fn Vertex4i(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("Vertex4i was not loaded") }
    pub extern "C" fn Vertex4iv(_: *GLint) -> c_void { fail!("Vertex4iv was not loaded") }
    pub extern "C" fn Vertex4s(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("Vertex4s was not loaded") }
    pub extern "C" fn Vertex4sv(_: *GLshort) -> c_void { fail!("Vertex4sv was not loaded") }
    pub extern "C" fn Vertex4xOES(_: GLfixed, _: GLfixed, _: GLfixed) -> c_void { fail!("Vertex4xOES was not loaded") }
    pub extern "C" fn Vertex4xvOES(_: *GLfixed) -> c_void { fail!("Vertex4xvOES was not loaded") }
    pub extern "C" fn VertexArrayBindVertexBufferEXT(_: GLuint, _: GLuint, _: GLuint, _: GLintptr, _: GLsizei) -> c_void { fail!("VertexArrayBindVertexBufferEXT was not loaded") }
    pub extern "C" fn VertexArrayColorOffsetEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayColorOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayEdgeFlagOffsetEXT(_: GLuint, _: GLuint, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayEdgeFlagOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayFogCoordOffsetEXT(_: GLuint, _: GLuint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayFogCoordOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayIndexOffsetEXT(_: GLuint, _: GLuint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayIndexOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayMultiTexCoordOffsetEXT(_: GLuint, _: GLuint, _: GLenum, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayMultiTexCoordOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayNormalOffsetEXT(_: GLuint, _: GLuint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayNormalOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayParameteriAPPLE(_: GLenum, _: GLint) -> c_void { fail!("VertexArrayParameteriAPPLE was not loaded") }
    pub extern "C" fn VertexArrayRangeAPPLE(_: GLsizei, _: *GLvoid) -> c_void { fail!("VertexArrayRangeAPPLE was not loaded") }
    pub extern "C" fn VertexArrayRangeNV(_: GLsizei, _: *GLvoid) -> c_void { fail!("VertexArrayRangeNV was not loaded") }
    pub extern "C" fn VertexArraySecondaryColorOffsetEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArraySecondaryColorOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayTexCoordOffsetEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayTexCoordOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribBindingEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexArrayVertexAttribBindingEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribFormatEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexArrayVertexAttribFormatEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribIFormatEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLuint) -> c_void { fail!("VertexArrayVertexAttribIFormatEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribIOffsetEXT(_: GLuint, _: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayVertexAttribIOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribLFormatEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLuint) -> c_void { fail!("VertexArrayVertexAttribLFormatEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribLOffsetEXT(_: GLuint, _: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayVertexAttribLOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexAttribOffsetEXT(_: GLuint, _: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayVertexAttribOffsetEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexBindingDivisorEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexArrayVertexBindingDivisorEXT was not loaded") }
    pub extern "C" fn VertexArrayVertexOffsetEXT(_: GLuint, _: GLuint, _: GLint, _: GLenum, _: GLsizei, _: GLintptr) -> c_void { fail!("VertexArrayVertexOffsetEXT was not loaded") }
    pub extern "C" fn VertexAttrib1d(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttrib1d was not loaded") }
    pub extern "C" fn VertexAttrib1dARB(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttrib1dARB was not loaded") }
    pub extern "C" fn VertexAttrib1dNV(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttrib1dNV was not loaded") }
    pub extern "C" fn VertexAttrib1dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib1dv was not loaded") }
    pub extern "C" fn VertexAttrib1dvARB(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib1dvARB was not loaded") }
    pub extern "C" fn VertexAttrib1dvNV(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib1dvNV was not loaded") }
    pub extern "C" fn VertexAttrib1f(_: GLuint, _: GLfloat) -> c_void { fail!("VertexAttrib1f was not loaded") }
    pub extern "C" fn VertexAttrib1fARB(_: GLuint, _: GLfloat) -> c_void { fail!("VertexAttrib1fARB was not loaded") }
    pub extern "C" fn VertexAttrib1fNV(_: GLuint, _: GLfloat) -> c_void { fail!("VertexAttrib1fNV was not loaded") }
    pub extern "C" fn VertexAttrib1fv(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib1fv was not loaded") }
    pub extern "C" fn VertexAttrib1fvARB(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib1fvARB was not loaded") }
    pub extern "C" fn VertexAttrib1fvNV(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib1fvNV was not loaded") }
    pub extern "C" fn VertexAttrib1hNV(_: GLuint, _: GLhalfNV) -> c_void { fail!("VertexAttrib1hNV was not loaded") }
    pub extern "C" fn VertexAttrib1hvNV(_: GLuint, _: *GLhalfNV) -> c_void { fail!("VertexAttrib1hvNV was not loaded") }
    pub extern "C" fn VertexAttrib1s(_: GLuint, _: GLshort) -> c_void { fail!("VertexAttrib1s was not loaded") }
    pub extern "C" fn VertexAttrib1sARB(_: GLuint, _: GLshort) -> c_void { fail!("VertexAttrib1sARB was not loaded") }
    pub extern "C" fn VertexAttrib1sNV(_: GLuint, _: GLshort) -> c_void { fail!("VertexAttrib1sNV was not loaded") }
    pub extern "C" fn VertexAttrib1sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib1sv was not loaded") }
    pub extern "C" fn VertexAttrib1svARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib1svARB was not loaded") }
    pub extern "C" fn VertexAttrib1svNV(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib1svNV was not loaded") }
    pub extern "C" fn VertexAttrib2d(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib2d was not loaded") }
    pub extern "C" fn VertexAttrib2dARB(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib2dARB was not loaded") }
    pub extern "C" fn VertexAttrib2dNV(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib2dNV was not loaded") }
    pub extern "C" fn VertexAttrib2dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib2dv was not loaded") }
    pub extern "C" fn VertexAttrib2dvARB(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib2dvARB was not loaded") }
    pub extern "C" fn VertexAttrib2dvNV(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib2dvNV was not loaded") }
    pub extern "C" fn VertexAttrib2f(_: GLuint, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib2f was not loaded") }
    pub extern "C" fn VertexAttrib2fARB(_: GLuint, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib2fARB was not loaded") }
    pub extern "C" fn VertexAttrib2fNV(_: GLuint, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib2fNV was not loaded") }
    pub extern "C" fn VertexAttrib2fv(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib2fv was not loaded") }
    pub extern "C" fn VertexAttrib2fvARB(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib2fvARB was not loaded") }
    pub extern "C" fn VertexAttrib2fvNV(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib2fvNV was not loaded") }
    pub extern "C" fn VertexAttrib2hNV(_: GLuint, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("VertexAttrib2hNV was not loaded") }
    pub extern "C" fn VertexAttrib2hvNV(_: GLuint, _: *GLhalfNV) -> c_void { fail!("VertexAttrib2hvNV was not loaded") }
    pub extern "C" fn VertexAttrib2s(_: GLuint, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib2s was not loaded") }
    pub extern "C" fn VertexAttrib2sARB(_: GLuint, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib2sARB was not loaded") }
    pub extern "C" fn VertexAttrib2sNV(_: GLuint, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib2sNV was not loaded") }
    pub extern "C" fn VertexAttrib2sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib2sv was not loaded") }
    pub extern "C" fn VertexAttrib2svARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib2svARB was not loaded") }
    pub extern "C" fn VertexAttrib2svNV(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib2svNV was not loaded") }
    pub extern "C" fn VertexAttrib3d(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib3d was not loaded") }
    pub extern "C" fn VertexAttrib3dARB(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib3dARB was not loaded") }
    pub extern "C" fn VertexAttrib3dNV(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib3dNV was not loaded") }
    pub extern "C" fn VertexAttrib3dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib3dv was not loaded") }
    pub extern "C" fn VertexAttrib3dvARB(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib3dvARB was not loaded") }
    pub extern "C" fn VertexAttrib3dvNV(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib3dvNV was not loaded") }
    pub extern "C" fn VertexAttrib3f(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib3f was not loaded") }
    pub extern "C" fn VertexAttrib3fARB(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib3fARB was not loaded") }
    pub extern "C" fn VertexAttrib3fNV(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib3fNV was not loaded") }
    pub extern "C" fn VertexAttrib3fv(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib3fv was not loaded") }
    pub extern "C" fn VertexAttrib3fvARB(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib3fvARB was not loaded") }
    pub extern "C" fn VertexAttrib3fvNV(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib3fvNV was not loaded") }
    pub extern "C" fn VertexAttrib3hNV(_: GLuint, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("VertexAttrib3hNV was not loaded") }
    pub extern "C" fn VertexAttrib3hvNV(_: GLuint, _: *GLhalfNV) -> c_void { fail!("VertexAttrib3hvNV was not loaded") }
    pub extern "C" fn VertexAttrib3s(_: GLuint, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib3s was not loaded") }
    pub extern "C" fn VertexAttrib3sARB(_: GLuint, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib3sARB was not loaded") }
    pub extern "C" fn VertexAttrib3sNV(_: GLuint, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib3sNV was not loaded") }
    pub extern "C" fn VertexAttrib3sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib3sv was not loaded") }
    pub extern "C" fn VertexAttrib3svARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib3svARB was not loaded") }
    pub extern "C" fn VertexAttrib3svNV(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib3svNV was not loaded") }
    pub extern "C" fn VertexAttrib4Nbv(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttrib4Nbv was not loaded") }
    pub extern "C" fn VertexAttrib4NbvARB(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttrib4NbvARB was not loaded") }
    pub extern "C" fn VertexAttrib4Niv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttrib4Niv was not loaded") }
    pub extern "C" fn VertexAttrib4NivARB(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttrib4NivARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nsv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4Nsv was not loaded") }
    pub extern "C" fn VertexAttrib4NsvARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4NsvARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nub(_: GLuint, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("VertexAttrib4Nub was not loaded") }
    pub extern "C" fn VertexAttrib4NubARB(_: GLuint, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("VertexAttrib4NubARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nubv(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4Nubv was not loaded") }
    pub extern "C" fn VertexAttrib4NubvARB(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4NubvARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nuiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttrib4Nuiv was not loaded") }
    pub extern "C" fn VertexAttrib4NuivARB(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttrib4NuivARB was not loaded") }
    pub extern "C" fn VertexAttrib4Nusv(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttrib4Nusv was not loaded") }
    pub extern "C" fn VertexAttrib4NusvARB(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttrib4NusvARB was not loaded") }
    pub extern "C" fn VertexAttrib4bv(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttrib4bv was not loaded") }
    pub extern "C" fn VertexAttrib4bvARB(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttrib4bvARB was not loaded") }
    pub extern "C" fn VertexAttrib4d(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib4d was not loaded") }
    pub extern "C" fn VertexAttrib4dARB(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib4dARB was not loaded") }
    pub extern "C" fn VertexAttrib4dNV(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttrib4dNV was not loaded") }
    pub extern "C" fn VertexAttrib4dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib4dv was not loaded") }
    pub extern "C" fn VertexAttrib4dvARB(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib4dvARB was not loaded") }
    pub extern "C" fn VertexAttrib4dvNV(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttrib4dvNV was not loaded") }
    pub extern "C" fn VertexAttrib4f(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib4f was not loaded") }
    pub extern "C" fn VertexAttrib4fARB(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib4fARB was not loaded") }
    pub extern "C" fn VertexAttrib4fNV(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexAttrib4fNV was not loaded") }
    pub extern "C" fn VertexAttrib4fv(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib4fv was not loaded") }
    pub extern "C" fn VertexAttrib4fvARB(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib4fvARB was not loaded") }
    pub extern "C" fn VertexAttrib4fvNV(_: GLuint, _: *GLfloat) -> c_void { fail!("VertexAttrib4fvNV was not loaded") }
    pub extern "C" fn VertexAttrib4hNV(_: GLuint, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV, _: GLhalfNV) -> c_void { fail!("VertexAttrib4hNV was not loaded") }
    pub extern "C" fn VertexAttrib4hvNV(_: GLuint, _: *GLhalfNV) -> c_void { fail!("VertexAttrib4hvNV was not loaded") }
    pub extern "C" fn VertexAttrib4iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttrib4iv was not loaded") }
    pub extern "C" fn VertexAttrib4ivARB(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttrib4ivARB was not loaded") }
    pub extern "C" fn VertexAttrib4s(_: GLuint, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib4s was not loaded") }
    pub extern "C" fn VertexAttrib4sARB(_: GLuint, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib4sARB was not loaded") }
    pub extern "C" fn VertexAttrib4sNV(_: GLuint, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexAttrib4sNV was not loaded") }
    pub extern "C" fn VertexAttrib4sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4sv was not loaded") }
    pub extern "C" fn VertexAttrib4svARB(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4svARB was not loaded") }
    pub extern "C" fn VertexAttrib4svNV(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttrib4svNV was not loaded") }
    pub extern "C" fn VertexAttrib4ubNV(_: GLuint, _: GLubyte, _: GLubyte, _: GLubyte, _: GLubyte) -> c_void { fail!("VertexAttrib4ubNV was not loaded") }
    pub extern "C" fn VertexAttrib4ubv(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4ubv was not loaded") }
    pub extern "C" fn VertexAttrib4ubvARB(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4ubvARB was not loaded") }
    pub extern "C" fn VertexAttrib4ubvNV(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttrib4ubvNV was not loaded") }
    pub extern "C" fn VertexAttrib4uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttrib4uiv was not loaded") }
    pub extern "C" fn VertexAttrib4uivARB(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttrib4uivARB was not loaded") }
    pub extern "C" fn VertexAttrib4usv(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttrib4usv was not loaded") }
    pub extern "C" fn VertexAttrib4usvARB(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttrib4usvARB was not loaded") }
    pub extern "C" fn VertexAttribArrayObjectATI(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribArrayObjectATI was not loaded") }
    pub extern "C" fn VertexAttribBinding(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribBinding was not loaded") }
    pub extern "C" fn VertexAttribDivisor(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribDivisor was not loaded") }
    pub extern "C" fn VertexAttribDivisorANGLE(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribDivisorANGLE was not loaded") }
    pub extern "C" fn VertexAttribDivisorARB(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribDivisorARB was not loaded") }
    pub extern "C" fn VertexAttribDivisorNV(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribDivisorNV was not loaded") }
    pub extern "C" fn VertexAttribFormat(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribFormat was not loaded") }
    pub extern "C" fn VertexAttribFormatNV(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei) -> c_void { fail!("VertexAttribFormatNV was not loaded") }
    pub extern "C" fn VertexAttribI1i(_: GLuint, _: GLint) -> c_void { fail!("VertexAttribI1i was not loaded") }
    pub extern "C" fn VertexAttribI1iEXT(_: GLuint, _: GLint) -> c_void { fail!("VertexAttribI1iEXT was not loaded") }
    pub extern "C" fn VertexAttribI1iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI1iv was not loaded") }
    pub extern "C" fn VertexAttribI1ivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI1ivEXT was not loaded") }
    pub extern "C" fn VertexAttribI1ui(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI1ui was not loaded") }
    pub extern "C" fn VertexAttribI1uiEXT(_: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI1uiEXT was not loaded") }
    pub extern "C" fn VertexAttribI1uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI1uiv was not loaded") }
    pub extern "C" fn VertexAttribI1uivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI1uivEXT was not loaded") }
    pub extern "C" fn VertexAttribI2i(_: GLuint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI2i was not loaded") }
    pub extern "C" fn VertexAttribI2iEXT(_: GLuint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI2iEXT was not loaded") }
    pub extern "C" fn VertexAttribI2iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI2iv was not loaded") }
    pub extern "C" fn VertexAttribI2ivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI2ivEXT was not loaded") }
    pub extern "C" fn VertexAttribI2ui(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI2ui was not loaded") }
    pub extern "C" fn VertexAttribI2uiEXT(_: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI2uiEXT was not loaded") }
    pub extern "C" fn VertexAttribI2uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI2uiv was not loaded") }
    pub extern "C" fn VertexAttribI2uivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI2uivEXT was not loaded") }
    pub extern "C" fn VertexAttribI3i(_: GLuint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI3i was not loaded") }
    pub extern "C" fn VertexAttribI3iEXT(_: GLuint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI3iEXT was not loaded") }
    pub extern "C" fn VertexAttribI3iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI3iv was not loaded") }
    pub extern "C" fn VertexAttribI3ivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI3ivEXT was not loaded") }
    pub extern "C" fn VertexAttribI3ui(_: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI3ui was not loaded") }
    pub extern "C" fn VertexAttribI3uiEXT(_: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI3uiEXT was not loaded") }
    pub extern "C" fn VertexAttribI3uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI3uiv was not loaded") }
    pub extern "C" fn VertexAttribI3uivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI3uivEXT was not loaded") }
    pub extern "C" fn VertexAttribI4bv(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttribI4bv was not loaded") }
    pub extern "C" fn VertexAttribI4bvEXT(_: GLuint, _: *GLbyte) -> c_void { fail!("VertexAttribI4bvEXT was not loaded") }
    pub extern "C" fn VertexAttribI4i(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI4i was not loaded") }
    pub extern "C" fn VertexAttribI4iEXT(_: GLuint, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexAttribI4iEXT was not loaded") }
    pub extern "C" fn VertexAttribI4iv(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI4iv was not loaded") }
    pub extern "C" fn VertexAttribI4ivEXT(_: GLuint, _: *GLint) -> c_void { fail!("VertexAttribI4ivEXT was not loaded") }
    pub extern "C" fn VertexAttribI4sv(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttribI4sv was not loaded") }
    pub extern "C" fn VertexAttribI4svEXT(_: GLuint, _: *GLshort) -> c_void { fail!("VertexAttribI4svEXT was not loaded") }
    pub extern "C" fn VertexAttribI4ubv(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttribI4ubv was not loaded") }
    pub extern "C" fn VertexAttribI4ubvEXT(_: GLuint, _: *GLubyte) -> c_void { fail!("VertexAttribI4ubvEXT was not loaded") }
    pub extern "C" fn VertexAttribI4ui(_: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI4ui was not loaded") }
    pub extern "C" fn VertexAttribI4uiEXT(_: GLuint, _: GLuint, _: GLuint, _: GLuint, _: GLuint) -> c_void { fail!("VertexAttribI4uiEXT was not loaded") }
    pub extern "C" fn VertexAttribI4uiv(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI4uiv was not loaded") }
    pub extern "C" fn VertexAttribI4uivEXT(_: GLuint, _: *GLuint) -> c_void { fail!("VertexAttribI4uivEXT was not loaded") }
    pub extern "C" fn VertexAttribI4usv(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttribI4usv was not loaded") }
    pub extern "C" fn VertexAttribI4usvEXT(_: GLuint, _: *GLushort) -> c_void { fail!("VertexAttribI4usvEXT was not loaded") }
    pub extern "C" fn VertexAttribIFormat(_: GLuint, _: GLint, _: GLenum, _: GLuint) -> c_void { fail!("VertexAttribIFormat was not loaded") }
    pub extern "C" fn VertexAttribIFormatNV(_: GLuint, _: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("VertexAttribIFormatNV was not loaded") }
    pub extern "C" fn VertexAttribIPointer(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribIPointer was not loaded") }
    pub extern "C" fn VertexAttribIPointerEXT(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribIPointerEXT was not loaded") }
    pub extern "C" fn VertexAttribL1d(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttribL1d was not loaded") }
    pub extern "C" fn VertexAttribL1dEXT(_: GLuint, _: GLdouble) -> c_void { fail!("VertexAttribL1dEXT was not loaded") }
    pub extern "C" fn VertexAttribL1dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL1dv was not loaded") }
    pub extern "C" fn VertexAttribL1dvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL1dvEXT was not loaded") }
    pub extern "C" fn VertexAttribL1i64NV(_: GLuint, _: GLint64EXT) -> c_void { fail!("VertexAttribL1i64NV was not loaded") }
    pub extern "C" fn VertexAttribL1i64vNV(_: GLuint, _: *GLint64EXT) -> c_void { fail!("VertexAttribL1i64vNV was not loaded") }
    pub extern "C" fn VertexAttribL1ui64ARB(_: GLuint, _: GLuint64EXT) -> c_void { fail!("VertexAttribL1ui64ARB was not loaded") }
    pub extern "C" fn VertexAttribL1ui64NV(_: GLuint, _: GLuint64EXT) -> c_void { fail!("VertexAttribL1ui64NV was not loaded") }
    pub extern "C" fn VertexAttribL1ui64vARB(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL1ui64vARB was not loaded") }
    pub extern "C" fn VertexAttribL1ui64vNV(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL1ui64vNV was not loaded") }
    pub extern "C" fn VertexAttribL2d(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL2d was not loaded") }
    pub extern "C" fn VertexAttribL2dEXT(_: GLuint, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL2dEXT was not loaded") }
    pub extern "C" fn VertexAttribL2dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL2dv was not loaded") }
    pub extern "C" fn VertexAttribL2dvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL2dvEXT was not loaded") }
    pub extern "C" fn VertexAttribL2i64NV(_: GLuint, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("VertexAttribL2i64NV was not loaded") }
    pub extern "C" fn VertexAttribL2i64vNV(_: GLuint, _: *GLint64EXT) -> c_void { fail!("VertexAttribL2i64vNV was not loaded") }
    pub extern "C" fn VertexAttribL2ui64NV(_: GLuint, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("VertexAttribL2ui64NV was not loaded") }
    pub extern "C" fn VertexAttribL2ui64vNV(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL2ui64vNV was not loaded") }
    pub extern "C" fn VertexAttribL3d(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL3d was not loaded") }
    pub extern "C" fn VertexAttribL3dEXT(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL3dEXT was not loaded") }
    pub extern "C" fn VertexAttribL3dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL3dv was not loaded") }
    pub extern "C" fn VertexAttribL3dvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL3dvEXT was not loaded") }
    pub extern "C" fn VertexAttribL3i64NV(_: GLuint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("VertexAttribL3i64NV was not loaded") }
    pub extern "C" fn VertexAttribL3i64vNV(_: GLuint, _: *GLint64EXT) -> c_void { fail!("VertexAttribL3i64vNV was not loaded") }
    pub extern "C" fn VertexAttribL3ui64NV(_: GLuint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("VertexAttribL3ui64NV was not loaded") }
    pub extern "C" fn VertexAttribL3ui64vNV(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL3ui64vNV was not loaded") }
    pub extern "C" fn VertexAttribL4d(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL4d was not loaded") }
    pub extern "C" fn VertexAttribL4dEXT(_: GLuint, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexAttribL4dEXT was not loaded") }
    pub extern "C" fn VertexAttribL4dv(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL4dv was not loaded") }
    pub extern "C" fn VertexAttribL4dvEXT(_: GLuint, _: *GLdouble) -> c_void { fail!("VertexAttribL4dvEXT was not loaded") }
    pub extern "C" fn VertexAttribL4i64NV(_: GLuint, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT, _: GLint64EXT) -> c_void { fail!("VertexAttribL4i64NV was not loaded") }
    pub extern "C" fn VertexAttribL4i64vNV(_: GLuint, _: *GLint64EXT) -> c_void { fail!("VertexAttribL4i64vNV was not loaded") }
    pub extern "C" fn VertexAttribL4ui64NV(_: GLuint, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT, _: GLuint64EXT) -> c_void { fail!("VertexAttribL4ui64NV was not loaded") }
    pub extern "C" fn VertexAttribL4ui64vNV(_: GLuint, _: *GLuint64EXT) -> c_void { fail!("VertexAttribL4ui64vNV was not loaded") }
    pub extern "C" fn VertexAttribLFormat(_: GLuint, _: GLint, _: GLenum, _: GLuint) -> c_void { fail!("VertexAttribLFormat was not loaded") }
    pub extern "C" fn VertexAttribLFormatNV(_: GLuint, _: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("VertexAttribLFormatNV was not loaded") }
    pub extern "C" fn VertexAttribLPointer(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribLPointer was not loaded") }
    pub extern "C" fn VertexAttribLPointerEXT(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribLPointerEXT was not loaded") }
    pub extern "C" fn VertexAttribP1ui(_: GLuint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribP1ui was not loaded") }
    pub extern "C" fn VertexAttribP1uiv(_: GLuint, _: GLenum, _: GLboolean, _: *GLuint) -> c_void { fail!("VertexAttribP1uiv was not loaded") }
    pub extern "C" fn VertexAttribP2ui(_: GLuint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribP2ui was not loaded") }
    pub extern "C" fn VertexAttribP2uiv(_: GLuint, _: GLenum, _: GLboolean, _: *GLuint) -> c_void { fail!("VertexAttribP2uiv was not loaded") }
    pub extern "C" fn VertexAttribP3ui(_: GLuint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribP3ui was not loaded") }
    pub extern "C" fn VertexAttribP3uiv(_: GLuint, _: GLenum, _: GLboolean, _: *GLuint) -> c_void { fail!("VertexAttribP3uiv was not loaded") }
    pub extern "C" fn VertexAttribP4ui(_: GLuint, _: GLenum, _: GLboolean, _: GLuint) -> c_void { fail!("VertexAttribP4ui was not loaded") }
    pub extern "C" fn VertexAttribP4uiv(_: GLuint, _: GLenum, _: GLboolean, _: *GLuint) -> c_void { fail!("VertexAttribP4uiv was not loaded") }
    pub extern "C" fn VertexAttribParameteriAMD(_: GLuint, _: GLenum, _: GLint) -> c_void { fail!("VertexAttribParameteriAMD was not loaded") }
    pub extern "C" fn VertexAttribPointer(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribPointer was not loaded") }
    pub extern "C" fn VertexAttribPointerARB(_: GLuint, _: GLint, _: GLenum, _: GLboolean, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribPointerARB was not loaded") }
    pub extern "C" fn VertexAttribPointerNV(_: GLuint, _: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexAttribPointerNV was not loaded") }
    pub extern "C" fn VertexAttribs1dvNV(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("VertexAttribs1dvNV was not loaded") }
    pub extern "C" fn VertexAttribs1fvNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("VertexAttribs1fvNV was not loaded") }
    pub extern "C" fn VertexAttribs1hvNV(_: GLuint, _: GLsizei, _: *GLhalfNV) -> c_void { fail!("VertexAttribs1hvNV was not loaded") }
    pub extern "C" fn VertexAttribs1svNV(_: GLuint, _: GLsizei, _: *GLshort) -> c_void { fail!("VertexAttribs1svNV was not loaded") }
    pub extern "C" fn VertexAttribs2dvNV(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("VertexAttribs2dvNV was not loaded") }
    pub extern "C" fn VertexAttribs2fvNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("VertexAttribs2fvNV was not loaded") }
    pub extern "C" fn VertexAttribs2hvNV(_: GLuint, _: GLsizei, _: *GLhalfNV) -> c_void { fail!("VertexAttribs2hvNV was not loaded") }
    pub extern "C" fn VertexAttribs2svNV(_: GLuint, _: GLsizei, _: *GLshort) -> c_void { fail!("VertexAttribs2svNV was not loaded") }
    pub extern "C" fn VertexAttribs3dvNV(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("VertexAttribs3dvNV was not loaded") }
    pub extern "C" fn VertexAttribs3fvNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("VertexAttribs3fvNV was not loaded") }
    pub extern "C" fn VertexAttribs3hvNV(_: GLuint, _: GLsizei, _: *GLhalfNV) -> c_void { fail!("VertexAttribs3hvNV was not loaded") }
    pub extern "C" fn VertexAttribs3svNV(_: GLuint, _: GLsizei, _: *GLshort) -> c_void { fail!("VertexAttribs3svNV was not loaded") }
    pub extern "C" fn VertexAttribs4dvNV(_: GLuint, _: GLsizei, _: *GLdouble) -> c_void { fail!("VertexAttribs4dvNV was not loaded") }
    pub extern "C" fn VertexAttribs4fvNV(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("VertexAttribs4fvNV was not loaded") }
    pub extern "C" fn VertexAttribs4hvNV(_: GLuint, _: GLsizei, _: *GLhalfNV) -> c_void { fail!("VertexAttribs4hvNV was not loaded") }
    pub extern "C" fn VertexAttribs4svNV(_: GLuint, _: GLsizei, _: *GLshort) -> c_void { fail!("VertexAttribs4svNV was not loaded") }
    pub extern "C" fn VertexAttribs4ubvNV(_: GLuint, _: GLsizei, _: *GLubyte) -> c_void { fail!("VertexAttribs4ubvNV was not loaded") }
    pub extern "C" fn VertexBindingDivisor(_: GLuint, _: GLuint) -> c_void { fail!("VertexBindingDivisor was not loaded") }
    pub extern "C" fn VertexBlendARB(_: GLint) -> c_void { fail!("VertexBlendARB was not loaded") }
    pub extern "C" fn VertexBlendEnvfATI(_: GLenum, _: GLfloat) -> c_void { fail!("VertexBlendEnvfATI was not loaded") }
    pub extern "C" fn VertexBlendEnviATI(_: GLenum, _: GLint) -> c_void { fail!("VertexBlendEnviATI was not loaded") }
    pub extern "C" fn VertexFormatNV(_: GLint, _: GLenum, _: GLsizei) -> c_void { fail!("VertexFormatNV was not loaded") }
    pub extern "C" fn VertexP2ui(_: GLenum, _: GLuint) -> c_void { fail!("VertexP2ui was not loaded") }
    pub extern "C" fn VertexP2uiv(_: GLenum, _: *GLuint) -> c_void { fail!("VertexP2uiv was not loaded") }
    pub extern "C" fn VertexP3ui(_: GLenum, _: GLuint) -> c_void { fail!("VertexP3ui was not loaded") }
    pub extern "C" fn VertexP3uiv(_: GLenum, _: *GLuint) -> c_void { fail!("VertexP3uiv was not loaded") }
    pub extern "C" fn VertexP4ui(_: GLenum, _: GLuint) -> c_void { fail!("VertexP4ui was not loaded") }
    pub extern "C" fn VertexP4uiv(_: GLenum, _: *GLuint) -> c_void { fail!("VertexP4uiv was not loaded") }
    pub extern "C" fn VertexPointer(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexPointer was not loaded") }
    pub extern "C" fn VertexPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexPointerEXT was not loaded") }
    pub extern "C" fn VertexPointerListIBM(_: GLint, _: GLenum, _: GLint, _: **GLvoid, _: GLint) -> c_void { fail!("VertexPointerListIBM was not loaded") }
    pub extern "C" fn VertexPointervINTEL(_: GLint, _: GLenum, _: **GLvoid) -> c_void { fail!("VertexPointervINTEL was not loaded") }
    pub extern "C" fn VertexStream1dATI(_: GLenum, _: GLdouble) -> c_void { fail!("VertexStream1dATI was not loaded") }
    pub extern "C" fn VertexStream1dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("VertexStream1dvATI was not loaded") }
    pub extern "C" fn VertexStream1fATI(_: GLenum, _: GLfloat) -> c_void { fail!("VertexStream1fATI was not loaded") }
    pub extern "C" fn VertexStream1fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("VertexStream1fvATI was not loaded") }
    pub extern "C" fn VertexStream1iATI(_: GLenum, _: GLint) -> c_void { fail!("VertexStream1iATI was not loaded") }
    pub extern "C" fn VertexStream1ivATI(_: GLenum, _: *GLint) -> c_void { fail!("VertexStream1ivATI was not loaded") }
    pub extern "C" fn VertexStream1sATI(_: GLenum, _: GLshort) -> c_void { fail!("VertexStream1sATI was not loaded") }
    pub extern "C" fn VertexStream1svATI(_: GLenum, _: *GLshort) -> c_void { fail!("VertexStream1svATI was not loaded") }
    pub extern "C" fn VertexStream2dATI(_: GLenum, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexStream2dATI was not loaded") }
    pub extern "C" fn VertexStream2dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("VertexStream2dvATI was not loaded") }
    pub extern "C" fn VertexStream2fATI(_: GLenum, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexStream2fATI was not loaded") }
    pub extern "C" fn VertexStream2fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("VertexStream2fvATI was not loaded") }
    pub extern "C" fn VertexStream2iATI(_: GLenum, _: GLint, _: GLint) -> c_void { fail!("VertexStream2iATI was not loaded") }
    pub extern "C" fn VertexStream2ivATI(_: GLenum, _: *GLint) -> c_void { fail!("VertexStream2ivATI was not loaded") }
    pub extern "C" fn VertexStream2sATI(_: GLenum, _: GLshort, _: GLshort) -> c_void { fail!("VertexStream2sATI was not loaded") }
    pub extern "C" fn VertexStream2svATI(_: GLenum, _: *GLshort) -> c_void { fail!("VertexStream2svATI was not loaded") }
    pub extern "C" fn VertexStream3dATI(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexStream3dATI was not loaded") }
    pub extern "C" fn VertexStream3dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("VertexStream3dvATI was not loaded") }
    pub extern "C" fn VertexStream3fATI(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexStream3fATI was not loaded") }
    pub extern "C" fn VertexStream3fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("VertexStream3fvATI was not loaded") }
    pub extern "C" fn VertexStream3iATI(_: GLenum, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexStream3iATI was not loaded") }
    pub extern "C" fn VertexStream3ivATI(_: GLenum, _: *GLint) -> c_void { fail!("VertexStream3ivATI was not loaded") }
    pub extern "C" fn VertexStream3sATI(_: GLenum, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexStream3sATI was not loaded") }
    pub extern "C" fn VertexStream3svATI(_: GLenum, _: *GLshort) -> c_void { fail!("VertexStream3svATI was not loaded") }
    pub extern "C" fn VertexStream4dATI(_: GLenum, _: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("VertexStream4dATI was not loaded") }
    pub extern "C" fn VertexStream4dvATI(_: GLenum, _: *GLdouble) -> c_void { fail!("VertexStream4dvATI was not loaded") }
    pub extern "C" fn VertexStream4fATI(_: GLenum, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("VertexStream4fATI was not loaded") }
    pub extern "C" fn VertexStream4fvATI(_: GLenum, _: *GLfloat) -> c_void { fail!("VertexStream4fvATI was not loaded") }
    pub extern "C" fn VertexStream4iATI(_: GLenum, _: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("VertexStream4iATI was not loaded") }
    pub extern "C" fn VertexStream4ivATI(_: GLenum, _: *GLint) -> c_void { fail!("VertexStream4ivATI was not loaded") }
    pub extern "C" fn VertexStream4sATI(_: GLenum, _: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("VertexStream4sATI was not loaded") }
    pub extern "C" fn VertexStream4svATI(_: GLenum, _: *GLshort) -> c_void { fail!("VertexStream4svATI was not loaded") }
    pub extern "C" fn VertexWeightPointerEXT(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("VertexWeightPointerEXT was not loaded") }
    pub extern "C" fn VertexWeightfEXT(_: GLfloat) -> c_void { fail!("VertexWeightfEXT was not loaded") }
    pub extern "C" fn VertexWeightfvEXT(_: *GLfloat) -> c_void { fail!("VertexWeightfvEXT was not loaded") }
    pub extern "C" fn VertexWeighthNV(_: GLhalfNV) -> c_void { fail!("VertexWeighthNV was not loaded") }
    pub extern "C" fn VertexWeighthvNV(_: *GLhalfNV) -> c_void { fail!("VertexWeighthvNV was not loaded") }
    pub extern "C" fn VideoCaptureNV(_: GLuint, _: *GLuint, _: *GLuint64EXT) -> GLenum { fail!("VideoCaptureNV was not loaded") }
    pub extern "C" fn VideoCaptureStreamParameterdvNV(_: GLuint, _: GLuint, _: GLenum, _: *GLdouble) -> c_void { fail!("VideoCaptureStreamParameterdvNV was not loaded") }
    pub extern "C" fn VideoCaptureStreamParameterfvNV(_: GLuint, _: GLuint, _: GLenum, _: *GLfloat) -> c_void { fail!("VideoCaptureStreamParameterfvNV was not loaded") }
    pub extern "C" fn VideoCaptureStreamParameterivNV(_: GLuint, _: GLuint, _: GLenum, _: *GLint) -> c_void { fail!("VideoCaptureStreamParameterivNV was not loaded") }
    pub extern "C" fn Viewport(_: GLint, _: GLint, _: GLsizei, _: GLsizei) -> c_void { fail!("Viewport was not loaded") }
    pub extern "C" fn ViewportArrayv(_: GLuint, _: GLsizei, _: *GLfloat) -> c_void { fail!("ViewportArrayv was not loaded") }
    pub extern "C" fn ViewportIndexedf(_: GLuint, _: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("ViewportIndexedf was not loaded") }
    pub extern "C" fn ViewportIndexedfv(_: GLuint, _: *GLfloat) -> c_void { fail!("ViewportIndexedfv was not loaded") }
    pub extern "C" fn WaitSync(_: GLsync, _: GLbitfield, _: GLuint64) -> c_void { fail!("WaitSync was not loaded") }
    pub extern "C" fn WaitSyncAPPLE(_: GLsync, _: GLbitfield, _: GLuint64) -> c_void { fail!("WaitSyncAPPLE was not loaded") }
    pub extern "C" fn WeightPathsNV(_: GLuint, _: GLsizei, _: *GLuint, _: *GLfloat) -> c_void { fail!("WeightPathsNV was not loaded") }
    pub extern "C" fn WeightPointerARB(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("WeightPointerARB was not loaded") }
    pub extern "C" fn WeightPointerOES(_: GLint, _: GLenum, _: GLsizei, _: *GLvoid) -> c_void { fail!("WeightPointerOES was not loaded") }
    pub extern "C" fn WeightbvARB(_: GLint, _: *GLbyte) -> c_void { fail!("WeightbvARB was not loaded") }
    pub extern "C" fn WeightdvARB(_: GLint, _: *GLdouble) -> c_void { fail!("WeightdvARB was not loaded") }
    pub extern "C" fn WeightfvARB(_: GLint, _: *GLfloat) -> c_void { fail!("WeightfvARB was not loaded") }
    pub extern "C" fn WeightivARB(_: GLint, _: *GLint) -> c_void { fail!("WeightivARB was not loaded") }
    pub extern "C" fn WeightsvARB(_: GLint, _: *GLshort) -> c_void { fail!("WeightsvARB was not loaded") }
    pub extern "C" fn WeightubvARB(_: GLint, _: *GLubyte) -> c_void { fail!("WeightubvARB was not loaded") }
    pub extern "C" fn WeightuivARB(_: GLint, _: *GLuint) -> c_void { fail!("WeightuivARB was not loaded") }
    pub extern "C" fn WeightusvARB(_: GLint, _: *GLushort) -> c_void { fail!("WeightusvARB was not loaded") }
    pub extern "C" fn WindowPos2d(_: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos2d was not loaded") }
    pub extern "C" fn WindowPos2dARB(_: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos2dARB was not loaded") }
    pub extern "C" fn WindowPos2dMESA(_: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos2dMESA was not loaded") }
    pub extern "C" fn WindowPos2dv(_: *GLdouble) -> c_void { fail!("WindowPos2dv was not loaded") }
    pub extern "C" fn WindowPos2dvARB(_: *GLdouble) -> c_void { fail!("WindowPos2dvARB was not loaded") }
    pub extern "C" fn WindowPos2dvMESA(_: *GLdouble) -> c_void { fail!("WindowPos2dvMESA was not loaded") }
    pub extern "C" fn WindowPos2f(_: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos2f was not loaded") }
    pub extern "C" fn WindowPos2fARB(_: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos2fARB was not loaded") }
    pub extern "C" fn WindowPos2fMESA(_: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos2fMESA was not loaded") }
    pub extern "C" fn WindowPos2fv(_: *GLfloat) -> c_void { fail!("WindowPos2fv was not loaded") }
    pub extern "C" fn WindowPos2fvARB(_: *GLfloat) -> c_void { fail!("WindowPos2fvARB was not loaded") }
    pub extern "C" fn WindowPos2fvMESA(_: *GLfloat) -> c_void { fail!("WindowPos2fvMESA was not loaded") }
    pub extern "C" fn WindowPos2i(_: GLint, _: GLint) -> c_void { fail!("WindowPos2i was not loaded") }
    pub extern "C" fn WindowPos2iARB(_: GLint, _: GLint) -> c_void { fail!("WindowPos2iARB was not loaded") }
    pub extern "C" fn WindowPos2iMESA(_: GLint, _: GLint) -> c_void { fail!("WindowPos2iMESA was not loaded") }
    pub extern "C" fn WindowPos2iv(_: *GLint) -> c_void { fail!("WindowPos2iv was not loaded") }
    pub extern "C" fn WindowPos2ivARB(_: *GLint) -> c_void { fail!("WindowPos2ivARB was not loaded") }
    pub extern "C" fn WindowPos2ivMESA(_: *GLint) -> c_void { fail!("WindowPos2ivMESA was not loaded") }
    pub extern "C" fn WindowPos2s(_: GLshort, _: GLshort) -> c_void { fail!("WindowPos2s was not loaded") }
    pub extern "C" fn WindowPos2sARB(_: GLshort, _: GLshort) -> c_void { fail!("WindowPos2sARB was not loaded") }
    pub extern "C" fn WindowPos2sMESA(_: GLshort, _: GLshort) -> c_void { fail!("WindowPos2sMESA was not loaded") }
    pub extern "C" fn WindowPos2sv(_: *GLshort) -> c_void { fail!("WindowPos2sv was not loaded") }
    pub extern "C" fn WindowPos2svARB(_: *GLshort) -> c_void { fail!("WindowPos2svARB was not loaded") }
    pub extern "C" fn WindowPos2svMESA(_: *GLshort) -> c_void { fail!("WindowPos2svMESA was not loaded") }
    pub extern "C" fn WindowPos3d(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos3d was not loaded") }
    pub extern "C" fn WindowPos3dARB(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos3dARB was not loaded") }
    pub extern "C" fn WindowPos3dMESA(_: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos3dMESA was not loaded") }
    pub extern "C" fn WindowPos3dv(_: *GLdouble) -> c_void { fail!("WindowPos3dv was not loaded") }
    pub extern "C" fn WindowPos3dvARB(_: *GLdouble) -> c_void { fail!("WindowPos3dvARB was not loaded") }
    pub extern "C" fn WindowPos3dvMESA(_: *GLdouble) -> c_void { fail!("WindowPos3dvMESA was not loaded") }
    pub extern "C" fn WindowPos3f(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos3f was not loaded") }
    pub extern "C" fn WindowPos3fARB(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos3fARB was not loaded") }
    pub extern "C" fn WindowPos3fMESA(_: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos3fMESA was not loaded") }
    pub extern "C" fn WindowPos3fv(_: *GLfloat) -> c_void { fail!("WindowPos3fv was not loaded") }
    pub extern "C" fn WindowPos3fvARB(_: *GLfloat) -> c_void { fail!("WindowPos3fvARB was not loaded") }
    pub extern "C" fn WindowPos3fvMESA(_: *GLfloat) -> c_void { fail!("WindowPos3fvMESA was not loaded") }
    pub extern "C" fn WindowPos3i(_: GLint, _: GLint, _: GLint) -> c_void { fail!("WindowPos3i was not loaded") }
    pub extern "C" fn WindowPos3iARB(_: GLint, _: GLint, _: GLint) -> c_void { fail!("WindowPos3iARB was not loaded") }
    pub extern "C" fn WindowPos3iMESA(_: GLint, _: GLint, _: GLint) -> c_void { fail!("WindowPos3iMESA was not loaded") }
    pub extern "C" fn WindowPos3iv(_: *GLint) -> c_void { fail!("WindowPos3iv was not loaded") }
    pub extern "C" fn WindowPos3ivARB(_: *GLint) -> c_void { fail!("WindowPos3ivARB was not loaded") }
    pub extern "C" fn WindowPos3ivMESA(_: *GLint) -> c_void { fail!("WindowPos3ivMESA was not loaded") }
    pub extern "C" fn WindowPos3s(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("WindowPos3s was not loaded") }
    pub extern "C" fn WindowPos3sARB(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("WindowPos3sARB was not loaded") }
    pub extern "C" fn WindowPos3sMESA(_: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("WindowPos3sMESA was not loaded") }
    pub extern "C" fn WindowPos3sv(_: *GLshort) -> c_void { fail!("WindowPos3sv was not loaded") }
    pub extern "C" fn WindowPos3svARB(_: *GLshort) -> c_void { fail!("WindowPos3svARB was not loaded") }
    pub extern "C" fn WindowPos3svMESA(_: *GLshort) -> c_void { fail!("WindowPos3svMESA was not loaded") }
    pub extern "C" fn WindowPos4dMESA(_: GLdouble, _: GLdouble, _: GLdouble, _: GLdouble) -> c_void { fail!("WindowPos4dMESA was not loaded") }
    pub extern "C" fn WindowPos4dvMESA(_: *GLdouble) -> c_void { fail!("WindowPos4dvMESA was not loaded") }
    pub extern "C" fn WindowPos4fMESA(_: GLfloat, _: GLfloat, _: GLfloat, _: GLfloat) -> c_void { fail!("WindowPos4fMESA was not loaded") }
    pub extern "C" fn WindowPos4fvMESA(_: *GLfloat) -> c_void { fail!("WindowPos4fvMESA was not loaded") }
    pub extern "C" fn WindowPos4iMESA(_: GLint, _: GLint, _: GLint, _: GLint) -> c_void { fail!("WindowPos4iMESA was not loaded") }
    pub extern "C" fn WindowPos4ivMESA(_: *GLint) -> c_void { fail!("WindowPos4ivMESA was not loaded") }
    pub extern "C" fn WindowPos4sMESA(_: GLshort, _: GLshort, _: GLshort, _: GLshort) -> c_void { fail!("WindowPos4sMESA was not loaded") }
    pub extern "C" fn WindowPos4svMESA(_: *GLshort) -> c_void { fail!("WindowPos4svMESA was not loaded") }
    pub extern "C" fn WriteMaskEXT(_: GLuint, _: GLuint, _: GLenum, _: GLenum, _: GLenum, _: GLenum) -> c_void { fail!("WriteMaskEXT was not loaded") }
}

/// Load each OpenGL symbol using a custom load function. This allows for the
/// use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.
///
/// ~~~
/// let gl = gl::load_with(glfw::get_proc_address);
/// ~~~
pub fn load_with(loadfn: &fn(symbol: &str) -> *c_void) {
    use std::cast::transmute;
    
    match loadfn("Accum") { ptr if !ptr.is_null() => unsafe { storage::Accum = transmute(ptr); Accum::is_loaded = true; }, _ => unsafe { Accum::is_loaded = false; } }
    match loadfn("AccumxOES") { ptr if !ptr.is_null() => unsafe { storage::AccumxOES = transmute(ptr); AccumxOES::is_loaded = true; }, _ => unsafe { AccumxOES::is_loaded = false; } }
    match loadfn("ActiveProgramEXT") { ptr if !ptr.is_null() => unsafe { storage::ActiveProgramEXT = transmute(ptr); ActiveProgramEXT::is_loaded = true; }, _ => unsafe { ActiveProgramEXT::is_loaded = false; } }
    match loadfn("ActiveShaderProgram") { ptr if !ptr.is_null() => unsafe { storage::ActiveShaderProgram = transmute(ptr); ActiveShaderProgram::is_loaded = true; }, _ => unsafe { ActiveShaderProgram::is_loaded = false; } }
    match loadfn("ActiveShaderProgramEXT") { ptr if !ptr.is_null() => unsafe { storage::ActiveShaderProgramEXT = transmute(ptr); ActiveShaderProgramEXT::is_loaded = true; }, _ => unsafe { ActiveShaderProgramEXT::is_loaded = false; } }
    match loadfn("ActiveStencilFaceEXT") { ptr if !ptr.is_null() => unsafe { storage::ActiveStencilFaceEXT = transmute(ptr); ActiveStencilFaceEXT::is_loaded = true; }, _ => unsafe { ActiveStencilFaceEXT::is_loaded = false; } }
    match loadfn("ActiveTexture") { ptr if !ptr.is_null() => unsafe { storage::ActiveTexture = transmute(ptr); ActiveTexture::is_loaded = true; }, _ => unsafe { ActiveTexture::is_loaded = false; } }
    match loadfn("ActiveTextureARB") { ptr if !ptr.is_null() => unsafe { storage::ActiveTextureARB = transmute(ptr); ActiveTextureARB::is_loaded = true; }, _ => unsafe { ActiveTextureARB::is_loaded = false; } }
    match loadfn("ActiveVaryingNV") { ptr if !ptr.is_null() => unsafe { storage::ActiveVaryingNV = transmute(ptr); ActiveVaryingNV::is_loaded = true; }, _ => unsafe { ActiveVaryingNV::is_loaded = false; } }
    match loadfn("AlphaFragmentOp1ATI") { ptr if !ptr.is_null() => unsafe { storage::AlphaFragmentOp1ATI = transmute(ptr); AlphaFragmentOp1ATI::is_loaded = true; }, _ => unsafe { AlphaFragmentOp1ATI::is_loaded = false; } }
    match loadfn("AlphaFragmentOp2ATI") { ptr if !ptr.is_null() => unsafe { storage::AlphaFragmentOp2ATI = transmute(ptr); AlphaFragmentOp2ATI::is_loaded = true; }, _ => unsafe { AlphaFragmentOp2ATI::is_loaded = false; } }
    match loadfn("AlphaFragmentOp3ATI") { ptr if !ptr.is_null() => unsafe { storage::AlphaFragmentOp3ATI = transmute(ptr); AlphaFragmentOp3ATI::is_loaded = true; }, _ => unsafe { AlphaFragmentOp3ATI::is_loaded = false; } }
    match loadfn("AlphaFunc") { ptr if !ptr.is_null() => unsafe { storage::AlphaFunc = transmute(ptr); AlphaFunc::is_loaded = true; }, _ => unsafe { AlphaFunc::is_loaded = false; } }
    match loadfn("AlphaFuncQCOM") { ptr if !ptr.is_null() => unsafe { storage::AlphaFuncQCOM = transmute(ptr); AlphaFuncQCOM::is_loaded = true; }, _ => unsafe { AlphaFuncQCOM::is_loaded = false; } }
    match loadfn("AlphaFuncx") { ptr if !ptr.is_null() => unsafe { storage::AlphaFuncx = transmute(ptr); AlphaFuncx::is_loaded = true; }, _ => unsafe { AlphaFuncx::is_loaded = false; } }
    match loadfn("AlphaFuncxOES") { ptr if !ptr.is_null() => unsafe { storage::AlphaFuncxOES = transmute(ptr); AlphaFuncxOES::is_loaded = true; }, _ => unsafe { AlphaFuncxOES::is_loaded = false; } }
    match loadfn("ApplyTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::ApplyTextureEXT = transmute(ptr); ApplyTextureEXT::is_loaded = true; }, _ => unsafe { ApplyTextureEXT::is_loaded = false; } }
    match loadfn("AreProgramsResidentNV") { ptr if !ptr.is_null() => unsafe { storage::AreProgramsResidentNV = transmute(ptr); AreProgramsResidentNV::is_loaded = true; }, _ => unsafe { AreProgramsResidentNV::is_loaded = false; } }
    match loadfn("AreTexturesResident") { ptr if !ptr.is_null() => unsafe { storage::AreTexturesResident = transmute(ptr); AreTexturesResident::is_loaded = true; }, _ => unsafe { AreTexturesResident::is_loaded = false; } }
    match loadfn("AreTexturesResidentEXT") { ptr if !ptr.is_null() => unsafe { storage::AreTexturesResidentEXT = transmute(ptr); AreTexturesResidentEXT::is_loaded = true; }, _ => unsafe { AreTexturesResidentEXT::is_loaded = false; } }
    match loadfn("ArrayElement") { ptr if !ptr.is_null() => unsafe { storage::ArrayElement = transmute(ptr); ArrayElement::is_loaded = true; }, _ => unsafe { ArrayElement::is_loaded = false; } }
    match loadfn("ArrayElementEXT") { ptr if !ptr.is_null() => unsafe { storage::ArrayElementEXT = transmute(ptr); ArrayElementEXT::is_loaded = true; }, _ => unsafe { ArrayElementEXT::is_loaded = false; } }
    match loadfn("ArrayObjectATI") { ptr if !ptr.is_null() => unsafe { storage::ArrayObjectATI = transmute(ptr); ArrayObjectATI::is_loaded = true; }, _ => unsafe { ArrayObjectATI::is_loaded = false; } }
    match loadfn("AsyncMarkerSGIX") { ptr if !ptr.is_null() => unsafe { storage::AsyncMarkerSGIX = transmute(ptr); AsyncMarkerSGIX::is_loaded = true; }, _ => unsafe { AsyncMarkerSGIX::is_loaded = false; } }
    match loadfn("AttachObjectARB") { ptr if !ptr.is_null() => unsafe { storage::AttachObjectARB = transmute(ptr); AttachObjectARB::is_loaded = true; }, _ => unsafe { AttachObjectARB::is_loaded = false; } }
    match loadfn("AttachShader") { ptr if !ptr.is_null() => unsafe { storage::AttachShader = transmute(ptr); AttachShader::is_loaded = true; }, _ => unsafe { AttachShader::is_loaded = false; } }
    match loadfn("Begin") { ptr if !ptr.is_null() => unsafe { storage::Begin = transmute(ptr); Begin::is_loaded = true; }, _ => unsafe { Begin::is_loaded = false; } }
    match loadfn("BeginConditionalRender") { ptr if !ptr.is_null() => unsafe { storage::BeginConditionalRender = transmute(ptr); BeginConditionalRender::is_loaded = true; }, _ => unsafe { BeginConditionalRender::is_loaded = false; } }
    match loadfn("BeginConditionalRenderNV") { ptr if !ptr.is_null() => unsafe { storage::BeginConditionalRenderNV = transmute(ptr); BeginConditionalRenderNV::is_loaded = true; }, _ => unsafe { BeginConditionalRenderNV::is_loaded = false; } }
    match loadfn("BeginConditionalRenderNVX") { ptr if !ptr.is_null() => unsafe { storage::BeginConditionalRenderNVX = transmute(ptr); BeginConditionalRenderNVX::is_loaded = true; }, _ => unsafe { BeginConditionalRenderNVX::is_loaded = false; } }
    match loadfn("BeginFragmentShaderATI") { ptr if !ptr.is_null() => unsafe { storage::BeginFragmentShaderATI = transmute(ptr); BeginFragmentShaderATI::is_loaded = true; }, _ => unsafe { BeginFragmentShaderATI::is_loaded = false; } }
    match loadfn("BeginOcclusionQueryNV") { ptr if !ptr.is_null() => unsafe { storage::BeginOcclusionQueryNV = transmute(ptr); BeginOcclusionQueryNV::is_loaded = true; }, _ => unsafe { BeginOcclusionQueryNV::is_loaded = false; } }
    match loadfn("BeginPerfMonitorAMD") { ptr if !ptr.is_null() => unsafe { storage::BeginPerfMonitorAMD = transmute(ptr); BeginPerfMonitorAMD::is_loaded = true; }, _ => unsafe { BeginPerfMonitorAMD::is_loaded = false; } }
    match loadfn("BeginQuery") { ptr if !ptr.is_null() => unsafe { storage::BeginQuery = transmute(ptr); BeginQuery::is_loaded = true; }, _ => unsafe { BeginQuery::is_loaded = false; } }
    match loadfn("BeginQueryARB") { ptr if !ptr.is_null() => unsafe { storage::BeginQueryARB = transmute(ptr); BeginQueryARB::is_loaded = true; }, _ => unsafe { BeginQueryARB::is_loaded = false; } }
    match loadfn("BeginQueryEXT") { ptr if !ptr.is_null() => unsafe { storage::BeginQueryEXT = transmute(ptr); BeginQueryEXT::is_loaded = true; }, _ => unsafe { BeginQueryEXT::is_loaded = false; } }
    match loadfn("BeginQueryIndexed") { ptr if !ptr.is_null() => unsafe { storage::BeginQueryIndexed = transmute(ptr); BeginQueryIndexed::is_loaded = true; }, _ => unsafe { BeginQueryIndexed::is_loaded = false; } }
    match loadfn("BeginTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::BeginTransformFeedback = transmute(ptr); BeginTransformFeedback::is_loaded = true; }, _ => unsafe { BeginTransformFeedback::is_loaded = false; } }
    match loadfn("BeginTransformFeedbackEXT") { ptr if !ptr.is_null() => unsafe { storage::BeginTransformFeedbackEXT = transmute(ptr); BeginTransformFeedbackEXT::is_loaded = true; }, _ => unsafe { BeginTransformFeedbackEXT::is_loaded = false; } }
    match loadfn("BeginTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::BeginTransformFeedbackNV = transmute(ptr); BeginTransformFeedbackNV::is_loaded = true; }, _ => unsafe { BeginTransformFeedbackNV::is_loaded = false; } }
    match loadfn("BeginVertexShaderEXT") { ptr if !ptr.is_null() => unsafe { storage::BeginVertexShaderEXT = transmute(ptr); BeginVertexShaderEXT::is_loaded = true; }, _ => unsafe { BeginVertexShaderEXT::is_loaded = false; } }
    match loadfn("BeginVideoCaptureNV") { ptr if !ptr.is_null() => unsafe { storage::BeginVideoCaptureNV = transmute(ptr); BeginVideoCaptureNV::is_loaded = true; }, _ => unsafe { BeginVideoCaptureNV::is_loaded = false; } }
    match loadfn("BindAttribLocation") { ptr if !ptr.is_null() => unsafe { storage::BindAttribLocation = transmute(ptr); BindAttribLocation::is_loaded = true; }, _ => unsafe { BindAttribLocation::is_loaded = false; } }
    match loadfn("BindAttribLocationARB") { ptr if !ptr.is_null() => unsafe { storage::BindAttribLocationARB = transmute(ptr); BindAttribLocationARB::is_loaded = true; }, _ => unsafe { BindAttribLocationARB::is_loaded = false; } }
    match loadfn("BindBuffer") { ptr if !ptr.is_null() => unsafe { storage::BindBuffer = transmute(ptr); BindBuffer::is_loaded = true; }, _ => unsafe { BindBuffer::is_loaded = false; } }
    match loadfn("BindBufferARB") { ptr if !ptr.is_null() => unsafe { storage::BindBufferARB = transmute(ptr); BindBufferARB::is_loaded = true; }, _ => unsafe { BindBufferARB::is_loaded = false; } }
    match loadfn("BindBufferBase") { ptr if !ptr.is_null() => unsafe { storage::BindBufferBase = transmute(ptr); BindBufferBase::is_loaded = true; }, _ => unsafe { BindBufferBase::is_loaded = false; } }
    match loadfn("BindBufferBaseEXT") { ptr if !ptr.is_null() => unsafe { storage::BindBufferBaseEXT = transmute(ptr); BindBufferBaseEXT::is_loaded = true; }, _ => unsafe { BindBufferBaseEXT::is_loaded = false; } }
    match loadfn("BindBufferBaseNV") { ptr if !ptr.is_null() => unsafe { storage::BindBufferBaseNV = transmute(ptr); BindBufferBaseNV::is_loaded = true; }, _ => unsafe { BindBufferBaseNV::is_loaded = false; } }
    match loadfn("BindBufferOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::BindBufferOffsetEXT = transmute(ptr); BindBufferOffsetEXT::is_loaded = true; }, _ => unsafe { BindBufferOffsetEXT::is_loaded = false; } }
    match loadfn("BindBufferOffsetNV") { ptr if !ptr.is_null() => unsafe { storage::BindBufferOffsetNV = transmute(ptr); BindBufferOffsetNV::is_loaded = true; }, _ => unsafe { BindBufferOffsetNV::is_loaded = false; } }
    match loadfn("BindBufferRange") { ptr if !ptr.is_null() => unsafe { storage::BindBufferRange = transmute(ptr); BindBufferRange::is_loaded = true; }, _ => unsafe { BindBufferRange::is_loaded = false; } }
    match loadfn("BindBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::BindBufferRangeEXT = transmute(ptr); BindBufferRangeEXT::is_loaded = true; }, _ => unsafe { BindBufferRangeEXT::is_loaded = false; } }
    match loadfn("BindBufferRangeNV") { ptr if !ptr.is_null() => unsafe { storage::BindBufferRangeNV = transmute(ptr); BindBufferRangeNV::is_loaded = true; }, _ => unsafe { BindBufferRangeNV::is_loaded = false; } }
    match loadfn("BindBuffersBase") { ptr if !ptr.is_null() => unsafe { storage::BindBuffersBase = transmute(ptr); BindBuffersBase::is_loaded = true; }, _ => unsafe { BindBuffersBase::is_loaded = false; } }
    match loadfn("BindBuffersRange") { ptr if !ptr.is_null() => unsafe { storage::BindBuffersRange = transmute(ptr); BindBuffersRange::is_loaded = true; }, _ => unsafe { BindBuffersRange::is_loaded = false; } }
    match loadfn("BindFragDataLocation") { ptr if !ptr.is_null() => unsafe { storage::BindFragDataLocation = transmute(ptr); BindFragDataLocation::is_loaded = true; }, _ => unsafe { BindFragDataLocation::is_loaded = false; } }
    match loadfn("BindFragDataLocationEXT") { ptr if !ptr.is_null() => unsafe { storage::BindFragDataLocationEXT = transmute(ptr); BindFragDataLocationEXT::is_loaded = true; }, _ => unsafe { BindFragDataLocationEXT::is_loaded = false; } }
    match loadfn("BindFragDataLocationIndexed") { ptr if !ptr.is_null() => unsafe { storage::BindFragDataLocationIndexed = transmute(ptr); BindFragDataLocationIndexed::is_loaded = true; }, _ => unsafe { BindFragDataLocationIndexed::is_loaded = false; } }
    match loadfn("BindFragmentShaderATI") { ptr if !ptr.is_null() => unsafe { storage::BindFragmentShaderATI = transmute(ptr); BindFragmentShaderATI::is_loaded = true; }, _ => unsafe { BindFragmentShaderATI::is_loaded = false; } }
    match loadfn("BindFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::BindFramebuffer = transmute(ptr); BindFramebuffer::is_loaded = true; }, _ => unsafe { BindFramebuffer::is_loaded = false; } }
    match loadfn("BindFramebufferEXT") { ptr if !ptr.is_null() => unsafe { storage::BindFramebufferEXT = transmute(ptr); BindFramebufferEXT::is_loaded = true; }, _ => unsafe { BindFramebufferEXT::is_loaded = false; } }
    match loadfn("BindFramebufferOES") { ptr if !ptr.is_null() => unsafe { storage::BindFramebufferOES = transmute(ptr); BindFramebufferOES::is_loaded = true; }, _ => unsafe { BindFramebufferOES::is_loaded = false; } }
    match loadfn("BindImageTexture") { ptr if !ptr.is_null() => unsafe { storage::BindImageTexture = transmute(ptr); BindImageTexture::is_loaded = true; }, _ => unsafe { BindImageTexture::is_loaded = false; } }
    match loadfn("BindImageTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::BindImageTextureEXT = transmute(ptr); BindImageTextureEXT::is_loaded = true; }, _ => unsafe { BindImageTextureEXT::is_loaded = false; } }
    match loadfn("BindImageTextures") { ptr if !ptr.is_null() => unsafe { storage::BindImageTextures = transmute(ptr); BindImageTextures::is_loaded = true; }, _ => unsafe { BindImageTextures::is_loaded = false; } }
    match loadfn("BindLightParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindLightParameterEXT = transmute(ptr); BindLightParameterEXT::is_loaded = true; }, _ => unsafe { BindLightParameterEXT::is_loaded = false; } }
    match loadfn("BindMaterialParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindMaterialParameterEXT = transmute(ptr); BindMaterialParameterEXT::is_loaded = true; }, _ => unsafe { BindMaterialParameterEXT::is_loaded = false; } }
    match loadfn("BindMultiTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::BindMultiTextureEXT = transmute(ptr); BindMultiTextureEXT::is_loaded = true; }, _ => unsafe { BindMultiTextureEXT::is_loaded = false; } }
    match loadfn("BindParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindParameterEXT = transmute(ptr); BindParameterEXT::is_loaded = true; }, _ => unsafe { BindParameterEXT::is_loaded = false; } }
    match loadfn("BindProgramARB") { ptr if !ptr.is_null() => unsafe { storage::BindProgramARB = transmute(ptr); BindProgramARB::is_loaded = true; }, _ => unsafe { BindProgramARB::is_loaded = false; } }
    match loadfn("BindProgramNV") { ptr if !ptr.is_null() => unsafe { storage::BindProgramNV = transmute(ptr); BindProgramNV::is_loaded = true; }, _ => unsafe { BindProgramNV::is_loaded = false; } }
    match loadfn("BindProgramPipeline") { ptr if !ptr.is_null() => unsafe { storage::BindProgramPipeline = transmute(ptr); BindProgramPipeline::is_loaded = true; }, _ => unsafe { BindProgramPipeline::is_loaded = false; } }
    match loadfn("BindProgramPipelineEXT") { ptr if !ptr.is_null() => unsafe { storage::BindProgramPipelineEXT = transmute(ptr); BindProgramPipelineEXT::is_loaded = true; }, _ => unsafe { BindProgramPipelineEXT::is_loaded = false; } }
    match loadfn("BindRenderbuffer") { ptr if !ptr.is_null() => unsafe { storage::BindRenderbuffer = transmute(ptr); BindRenderbuffer::is_loaded = true; }, _ => unsafe { BindRenderbuffer::is_loaded = false; } }
    match loadfn("BindRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::BindRenderbufferEXT = transmute(ptr); BindRenderbufferEXT::is_loaded = true; }, _ => unsafe { BindRenderbufferEXT::is_loaded = false; } }
    match loadfn("BindRenderbufferOES") { ptr if !ptr.is_null() => unsafe { storage::BindRenderbufferOES = transmute(ptr); BindRenderbufferOES::is_loaded = true; }, _ => unsafe { BindRenderbufferOES::is_loaded = false; } }
    match loadfn("BindSampler") { ptr if !ptr.is_null() => unsafe { storage::BindSampler = transmute(ptr); BindSampler::is_loaded = true; }, _ => unsafe { BindSampler::is_loaded = false; } }
    match loadfn("BindSamplers") { ptr if !ptr.is_null() => unsafe { storage::BindSamplers = transmute(ptr); BindSamplers::is_loaded = true; }, _ => unsafe { BindSamplers::is_loaded = false; } }
    match loadfn("BindTexGenParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindTexGenParameterEXT = transmute(ptr); BindTexGenParameterEXT::is_loaded = true; }, _ => unsafe { BindTexGenParameterEXT::is_loaded = false; } }
    match loadfn("BindTexture") { ptr if !ptr.is_null() => unsafe { storage::BindTexture = transmute(ptr); BindTexture::is_loaded = true; }, _ => unsafe { BindTexture::is_loaded = false; } }
    match loadfn("BindTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::BindTextureEXT = transmute(ptr); BindTextureEXT::is_loaded = true; }, _ => unsafe { BindTextureEXT::is_loaded = false; } }
    match loadfn("BindTextureUnitParameterEXT") { ptr if !ptr.is_null() => unsafe { storage::BindTextureUnitParameterEXT = transmute(ptr); BindTextureUnitParameterEXT::is_loaded = true; }, _ => unsafe { BindTextureUnitParameterEXT::is_loaded = false; } }
    match loadfn("BindTextures") { ptr if !ptr.is_null() => unsafe { storage::BindTextures = transmute(ptr); BindTextures::is_loaded = true; }, _ => unsafe { BindTextures::is_loaded = false; } }
    match loadfn("BindTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::BindTransformFeedback = transmute(ptr); BindTransformFeedback::is_loaded = true; }, _ => unsafe { BindTransformFeedback::is_loaded = false; } }
    match loadfn("BindTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::BindTransformFeedbackNV = transmute(ptr); BindTransformFeedbackNV::is_loaded = true; }, _ => unsafe { BindTransformFeedbackNV::is_loaded = false; } }
    match loadfn("BindVertexArray") { ptr if !ptr.is_null() => unsafe { storage::BindVertexArray = transmute(ptr); BindVertexArray::is_loaded = true; }, _ => unsafe { BindVertexArray::is_loaded = false; } }
    match loadfn("BindVertexArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::BindVertexArrayAPPLE = transmute(ptr); BindVertexArrayAPPLE::is_loaded = true; }, _ => unsafe { BindVertexArrayAPPLE::is_loaded = false; } }
    match loadfn("BindVertexArrayOES") { ptr if !ptr.is_null() => unsafe { storage::BindVertexArrayOES = transmute(ptr); BindVertexArrayOES::is_loaded = true; }, _ => unsafe { BindVertexArrayOES::is_loaded = false; } }
    match loadfn("BindVertexBuffer") { ptr if !ptr.is_null() => unsafe { storage::BindVertexBuffer = transmute(ptr); BindVertexBuffer::is_loaded = true; }, _ => unsafe { BindVertexBuffer::is_loaded = false; } }
    match loadfn("BindVertexBuffers") { ptr if !ptr.is_null() => unsafe { storage::BindVertexBuffers = transmute(ptr); BindVertexBuffers::is_loaded = true; }, _ => unsafe { BindVertexBuffers::is_loaded = false; } }
    match loadfn("BindVertexShaderEXT") { ptr if !ptr.is_null() => unsafe { storage::BindVertexShaderEXT = transmute(ptr); BindVertexShaderEXT::is_loaded = true; }, _ => unsafe { BindVertexShaderEXT::is_loaded = false; } }
    match loadfn("BindVideoCaptureStreamBufferNV") { ptr if !ptr.is_null() => unsafe { storage::BindVideoCaptureStreamBufferNV = transmute(ptr); BindVideoCaptureStreamBufferNV::is_loaded = true; }, _ => unsafe { BindVideoCaptureStreamBufferNV::is_loaded = false; } }
    match loadfn("BindVideoCaptureStreamTextureNV") { ptr if !ptr.is_null() => unsafe { storage::BindVideoCaptureStreamTextureNV = transmute(ptr); BindVideoCaptureStreamTextureNV::is_loaded = true; }, _ => unsafe { BindVideoCaptureStreamTextureNV::is_loaded = false; } }
    match loadfn("Binormal3bEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3bEXT = transmute(ptr); Binormal3bEXT::is_loaded = true; }, _ => unsafe { Binormal3bEXT::is_loaded = false; } }
    match loadfn("Binormal3bvEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3bvEXT = transmute(ptr); Binormal3bvEXT::is_loaded = true; }, _ => unsafe { Binormal3bvEXT::is_loaded = false; } }
    match loadfn("Binormal3dEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3dEXT = transmute(ptr); Binormal3dEXT::is_loaded = true; }, _ => unsafe { Binormal3dEXT::is_loaded = false; } }
    match loadfn("Binormal3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3dvEXT = transmute(ptr); Binormal3dvEXT::is_loaded = true; }, _ => unsafe { Binormal3dvEXT::is_loaded = false; } }
    match loadfn("Binormal3fEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3fEXT = transmute(ptr); Binormal3fEXT::is_loaded = true; }, _ => unsafe { Binormal3fEXT::is_loaded = false; } }
    match loadfn("Binormal3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3fvEXT = transmute(ptr); Binormal3fvEXT::is_loaded = true; }, _ => unsafe { Binormal3fvEXT::is_loaded = false; } }
    match loadfn("Binormal3iEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3iEXT = transmute(ptr); Binormal3iEXT::is_loaded = true; }, _ => unsafe { Binormal3iEXT::is_loaded = false; } }
    match loadfn("Binormal3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3ivEXT = transmute(ptr); Binormal3ivEXT::is_loaded = true; }, _ => unsafe { Binormal3ivEXT::is_loaded = false; } }
    match loadfn("Binormal3sEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3sEXT = transmute(ptr); Binormal3sEXT::is_loaded = true; }, _ => unsafe { Binormal3sEXT::is_loaded = false; } }
    match loadfn("Binormal3svEXT") { ptr if !ptr.is_null() => unsafe { storage::Binormal3svEXT = transmute(ptr); Binormal3svEXT::is_loaded = true; }, _ => unsafe { Binormal3svEXT::is_loaded = false; } }
    match loadfn("BinormalPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::BinormalPointerEXT = transmute(ptr); BinormalPointerEXT::is_loaded = true; }, _ => unsafe { BinormalPointerEXT::is_loaded = false; } }
    match loadfn("Bitmap") { ptr if !ptr.is_null() => unsafe { storage::Bitmap = transmute(ptr); Bitmap::is_loaded = true; }, _ => unsafe { Bitmap::is_loaded = false; } }
    match loadfn("BitmapxOES") { ptr if !ptr.is_null() => unsafe { storage::BitmapxOES = transmute(ptr); BitmapxOES::is_loaded = true; }, _ => unsafe { BitmapxOES::is_loaded = false; } }
    match loadfn("BlendColor") { ptr if !ptr.is_null() => unsafe { storage::BlendColor = transmute(ptr); BlendColor::is_loaded = true; }, _ => unsafe { BlendColor::is_loaded = false; } }
    match loadfn("BlendColorEXT") { ptr if !ptr.is_null() => unsafe { storage::BlendColorEXT = transmute(ptr); BlendColorEXT::is_loaded = true; }, _ => unsafe { BlendColorEXT::is_loaded = false; } }
    match loadfn("BlendColorxOES") { ptr if !ptr.is_null() => unsafe { storage::BlendColorxOES = transmute(ptr); BlendColorxOES::is_loaded = true; }, _ => unsafe { BlendColorxOES::is_loaded = false; } }
    match loadfn("BlendEquation") { ptr if !ptr.is_null() => unsafe { storage::BlendEquation = transmute(ptr); BlendEquation::is_loaded = true; }, _ => unsafe { BlendEquation::is_loaded = false; } }
    match loadfn("BlendEquationEXT") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationEXT = transmute(ptr); BlendEquationEXT::is_loaded = true; }, _ => unsafe { BlendEquationEXT::is_loaded = false; } }
    match loadfn("BlendEquationIndexedAMD") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationIndexedAMD = transmute(ptr); BlendEquationIndexedAMD::is_loaded = true; }, _ => unsafe { BlendEquationIndexedAMD::is_loaded = false; } }
    match loadfn("BlendEquationOES") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationOES = transmute(ptr); BlendEquationOES::is_loaded = true; }, _ => unsafe { BlendEquationOES::is_loaded = false; } }
    match loadfn("BlendEquationSeparate") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparate = transmute(ptr); BlendEquationSeparate::is_loaded = true; }, _ => unsafe { BlendEquationSeparate::is_loaded = false; } }
    match loadfn("BlendEquationSeparateEXT") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparateEXT = transmute(ptr); BlendEquationSeparateEXT::is_loaded = true; }, _ => unsafe { BlendEquationSeparateEXT::is_loaded = false; } }
    match loadfn("BlendEquationSeparateIndexedAMD") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparateIndexedAMD = transmute(ptr); BlendEquationSeparateIndexedAMD::is_loaded = true; }, _ => unsafe { BlendEquationSeparateIndexedAMD::is_loaded = false; } }
    match loadfn("BlendEquationSeparateOES") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparateOES = transmute(ptr); BlendEquationSeparateOES::is_loaded = true; }, _ => unsafe { BlendEquationSeparateOES::is_loaded = false; } }
    match loadfn("BlendEquationSeparatei") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparatei = transmute(ptr); BlendEquationSeparatei::is_loaded = true; }, _ => unsafe { BlendEquationSeparatei::is_loaded = false; } }
    match loadfn("BlendEquationSeparateiARB") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationSeparateiARB = transmute(ptr); BlendEquationSeparateiARB::is_loaded = true; }, _ => unsafe { BlendEquationSeparateiARB::is_loaded = false; } }
    match loadfn("BlendEquationi") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationi = transmute(ptr); BlendEquationi::is_loaded = true; }, _ => unsafe { BlendEquationi::is_loaded = false; } }
    match loadfn("BlendEquationiARB") { ptr if !ptr.is_null() => unsafe { storage::BlendEquationiARB = transmute(ptr); BlendEquationiARB::is_loaded = true; }, _ => unsafe { BlendEquationiARB::is_loaded = false; } }
    match loadfn("BlendFunc") { ptr if !ptr.is_null() => unsafe { storage::BlendFunc = transmute(ptr); BlendFunc::is_loaded = true; }, _ => unsafe { BlendFunc::is_loaded = false; } }
    match loadfn("BlendFuncIndexedAMD") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncIndexedAMD = transmute(ptr); BlendFuncIndexedAMD::is_loaded = true; }, _ => unsafe { BlendFuncIndexedAMD::is_loaded = false; } }
    match loadfn("BlendFuncSeparate") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparate = transmute(ptr); BlendFuncSeparate::is_loaded = true; }, _ => unsafe { BlendFuncSeparate::is_loaded = false; } }
    match loadfn("BlendFuncSeparateEXT") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateEXT = transmute(ptr); BlendFuncSeparateEXT::is_loaded = true; }, _ => unsafe { BlendFuncSeparateEXT::is_loaded = false; } }
    match loadfn("BlendFuncSeparateINGR") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateINGR = transmute(ptr); BlendFuncSeparateINGR::is_loaded = true; }, _ => unsafe { BlendFuncSeparateINGR::is_loaded = false; } }
    match loadfn("BlendFuncSeparateIndexedAMD") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateIndexedAMD = transmute(ptr); BlendFuncSeparateIndexedAMD::is_loaded = true; }, _ => unsafe { BlendFuncSeparateIndexedAMD::is_loaded = false; } }
    match loadfn("BlendFuncSeparateOES") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateOES = transmute(ptr); BlendFuncSeparateOES::is_loaded = true; }, _ => unsafe { BlendFuncSeparateOES::is_loaded = false; } }
    match loadfn("BlendFuncSeparatei") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparatei = transmute(ptr); BlendFuncSeparatei::is_loaded = true; }, _ => unsafe { BlendFuncSeparatei::is_loaded = false; } }
    match loadfn("BlendFuncSeparateiARB") { ptr if !ptr.is_null() => unsafe { storage::BlendFuncSeparateiARB = transmute(ptr); BlendFuncSeparateiARB::is_loaded = true; }, _ => unsafe { BlendFuncSeparateiARB::is_loaded = false; } }
    match loadfn("BlendFunci") { ptr if !ptr.is_null() => unsafe { storage::BlendFunci = transmute(ptr); BlendFunci::is_loaded = true; }, _ => unsafe { BlendFunci::is_loaded = false; } }
    match loadfn("BlendFunciARB") { ptr if !ptr.is_null() => unsafe { storage::BlendFunciARB = transmute(ptr); BlendFunciARB::is_loaded = true; }, _ => unsafe { BlendFunciARB::is_loaded = false; } }
    match loadfn("BlendParameteriNV") { ptr if !ptr.is_null() => unsafe { storage::BlendParameteriNV = transmute(ptr); BlendParameteriNV::is_loaded = true; }, _ => unsafe { BlendParameteriNV::is_loaded = false; } }
    match loadfn("BlendBarrierNV") { ptr if !ptr.is_null() => unsafe { storage::BlendBarrierNV = transmute(ptr); BlendBarrierNV::is_loaded = true; }, _ => unsafe { BlendBarrierNV::is_loaded = false; } }
    match loadfn("BlitFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::BlitFramebuffer = transmute(ptr); BlitFramebuffer::is_loaded = true; }, _ => unsafe { BlitFramebuffer::is_loaded = false; } }
    match loadfn("BlitFramebufferANGLE") { ptr if !ptr.is_null() => unsafe { storage::BlitFramebufferANGLE = transmute(ptr); BlitFramebufferANGLE::is_loaded = true; }, _ => unsafe { BlitFramebufferANGLE::is_loaded = false; } }
    match loadfn("BlitFramebufferEXT") { ptr if !ptr.is_null() => unsafe { storage::BlitFramebufferEXT = transmute(ptr); BlitFramebufferEXT::is_loaded = true; }, _ => unsafe { BlitFramebufferEXT::is_loaded = false; } }
    match loadfn("BlitFramebufferNV") { ptr if !ptr.is_null() => unsafe { storage::BlitFramebufferNV = transmute(ptr); BlitFramebufferNV::is_loaded = true; }, _ => unsafe { BlitFramebufferNV::is_loaded = false; } }
    match loadfn("BufferAddressRangeNV") { ptr if !ptr.is_null() => unsafe { storage::BufferAddressRangeNV = transmute(ptr); BufferAddressRangeNV::is_loaded = true; }, _ => unsafe { BufferAddressRangeNV::is_loaded = false; } }
    match loadfn("BufferData") { ptr if !ptr.is_null() => unsafe { storage::BufferData = transmute(ptr); BufferData::is_loaded = true; }, _ => unsafe { BufferData::is_loaded = false; } }
    match loadfn("BufferDataARB") { ptr if !ptr.is_null() => unsafe { storage::BufferDataARB = transmute(ptr); BufferDataARB::is_loaded = true; }, _ => unsafe { BufferDataARB::is_loaded = false; } }
    match loadfn("BufferParameteriAPPLE") { ptr if !ptr.is_null() => unsafe { storage::BufferParameteriAPPLE = transmute(ptr); BufferParameteriAPPLE::is_loaded = true; }, _ => unsafe { BufferParameteriAPPLE::is_loaded = false; } }
    match loadfn("BufferStorage") { ptr if !ptr.is_null() => unsafe { storage::BufferStorage = transmute(ptr); BufferStorage::is_loaded = true; }, _ => unsafe { BufferStorage::is_loaded = false; } }
    match loadfn("BufferSubData") { ptr if !ptr.is_null() => unsafe { storage::BufferSubData = transmute(ptr); BufferSubData::is_loaded = true; }, _ => unsafe { BufferSubData::is_loaded = false; } }
    match loadfn("BufferSubDataARB") { ptr if !ptr.is_null() => unsafe { storage::BufferSubDataARB = transmute(ptr); BufferSubDataARB::is_loaded = true; }, _ => unsafe { BufferSubDataARB::is_loaded = false; } }
    match loadfn("CallList") { ptr if !ptr.is_null() => unsafe { storage::CallList = transmute(ptr); CallList::is_loaded = true; }, _ => unsafe { CallList::is_loaded = false; } }
    match loadfn("CallLists") { ptr if !ptr.is_null() => unsafe { storage::CallLists = transmute(ptr); CallLists::is_loaded = true; }, _ => unsafe { CallLists::is_loaded = false; } }
    match loadfn("CheckFramebufferStatus") { ptr if !ptr.is_null() => unsafe { storage::CheckFramebufferStatus = transmute(ptr); CheckFramebufferStatus::is_loaded = true; }, _ => unsafe { CheckFramebufferStatus::is_loaded = false; } }
    match loadfn("CheckFramebufferStatusEXT") { ptr if !ptr.is_null() => unsafe { storage::CheckFramebufferStatusEXT = transmute(ptr); CheckFramebufferStatusEXT::is_loaded = true; }, _ => unsafe { CheckFramebufferStatusEXT::is_loaded = false; } }
    match loadfn("CheckFramebufferStatusOES") { ptr if !ptr.is_null() => unsafe { storage::CheckFramebufferStatusOES = transmute(ptr); CheckFramebufferStatusOES::is_loaded = true; }, _ => unsafe { CheckFramebufferStatusOES::is_loaded = false; } }
    match loadfn("CheckNamedFramebufferStatusEXT") { ptr if !ptr.is_null() => unsafe { storage::CheckNamedFramebufferStatusEXT = transmute(ptr); CheckNamedFramebufferStatusEXT::is_loaded = true; }, _ => unsafe { CheckNamedFramebufferStatusEXT::is_loaded = false; } }
    match loadfn("ClampColor") { ptr if !ptr.is_null() => unsafe { storage::ClampColor = transmute(ptr); ClampColor::is_loaded = true; }, _ => unsafe { ClampColor::is_loaded = false; } }
    match loadfn("ClampColorARB") { ptr if !ptr.is_null() => unsafe { storage::ClampColorARB = transmute(ptr); ClampColorARB::is_loaded = true; }, _ => unsafe { ClampColorARB::is_loaded = false; } }
    match loadfn("Clear") { ptr if !ptr.is_null() => unsafe { storage::Clear = transmute(ptr); Clear::is_loaded = true; }, _ => unsafe { Clear::is_loaded = false; } }
    match loadfn("ClearAccum") { ptr if !ptr.is_null() => unsafe { storage::ClearAccum = transmute(ptr); ClearAccum::is_loaded = true; }, _ => unsafe { ClearAccum::is_loaded = false; } }
    match loadfn("ClearAccumxOES") { ptr if !ptr.is_null() => unsafe { storage::ClearAccumxOES = transmute(ptr); ClearAccumxOES::is_loaded = true; }, _ => unsafe { ClearAccumxOES::is_loaded = false; } }
    match loadfn("ClearBufferData") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferData = transmute(ptr); ClearBufferData::is_loaded = true; }, _ => unsafe { ClearBufferData::is_loaded = false; } }
    match loadfn("ClearBufferSubData") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferSubData = transmute(ptr); ClearBufferSubData::is_loaded = true; }, _ => unsafe { ClearBufferSubData::is_loaded = false; } }
    match loadfn("ClearBufferfi") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferfi = transmute(ptr); ClearBufferfi::is_loaded = true; }, _ => unsafe { ClearBufferfi::is_loaded = false; } }
    match loadfn("ClearBufferfv") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferfv = transmute(ptr); ClearBufferfv::is_loaded = true; }, _ => unsafe { ClearBufferfv::is_loaded = false; } }
    match loadfn("ClearBufferiv") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferiv = transmute(ptr); ClearBufferiv::is_loaded = true; }, _ => unsafe { ClearBufferiv::is_loaded = false; } }
    match loadfn("ClearBufferuiv") { ptr if !ptr.is_null() => unsafe { storage::ClearBufferuiv = transmute(ptr); ClearBufferuiv::is_loaded = true; }, _ => unsafe { ClearBufferuiv::is_loaded = false; } }
    match loadfn("ClearColor") { ptr if !ptr.is_null() => unsafe { storage::ClearColor = transmute(ptr); ClearColor::is_loaded = true; }, _ => unsafe { ClearColor::is_loaded = false; } }
    match loadfn("ClearColorIiEXT") { ptr if !ptr.is_null() => unsafe { storage::ClearColorIiEXT = transmute(ptr); ClearColorIiEXT::is_loaded = true; }, _ => unsafe { ClearColorIiEXT::is_loaded = false; } }
    match loadfn("ClearColorIuiEXT") { ptr if !ptr.is_null() => unsafe { storage::ClearColorIuiEXT = transmute(ptr); ClearColorIuiEXT::is_loaded = true; }, _ => unsafe { ClearColorIuiEXT::is_loaded = false; } }
    match loadfn("ClearColorx") { ptr if !ptr.is_null() => unsafe { storage::ClearColorx = transmute(ptr); ClearColorx::is_loaded = true; }, _ => unsafe { ClearColorx::is_loaded = false; } }
    match loadfn("ClearColorxOES") { ptr if !ptr.is_null() => unsafe { storage::ClearColorxOES = transmute(ptr); ClearColorxOES::is_loaded = true; }, _ => unsafe { ClearColorxOES::is_loaded = false; } }
    match loadfn("ClearDepth") { ptr if !ptr.is_null() => unsafe { storage::ClearDepth = transmute(ptr); ClearDepth::is_loaded = true; }, _ => unsafe { ClearDepth::is_loaded = false; } }
    match loadfn("ClearDepthdNV") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthdNV = transmute(ptr); ClearDepthdNV::is_loaded = true; }, _ => unsafe { ClearDepthdNV::is_loaded = false; } }
    match loadfn("ClearDepthf") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthf = transmute(ptr); ClearDepthf::is_loaded = true; }, _ => unsafe { ClearDepthf::is_loaded = false; } }
    match loadfn("ClearDepthfOES") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthfOES = transmute(ptr); ClearDepthfOES::is_loaded = true; }, _ => unsafe { ClearDepthfOES::is_loaded = false; } }
    match loadfn("ClearDepthx") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthx = transmute(ptr); ClearDepthx::is_loaded = true; }, _ => unsafe { ClearDepthx::is_loaded = false; } }
    match loadfn("ClearDepthxOES") { ptr if !ptr.is_null() => unsafe { storage::ClearDepthxOES = transmute(ptr); ClearDepthxOES::is_loaded = true; }, _ => unsafe { ClearDepthxOES::is_loaded = false; } }
    match loadfn("ClearIndex") { ptr if !ptr.is_null() => unsafe { storage::ClearIndex = transmute(ptr); ClearIndex::is_loaded = true; }, _ => unsafe { ClearIndex::is_loaded = false; } }
    match loadfn("ClearNamedBufferDataEXT") { ptr if !ptr.is_null() => unsafe { storage::ClearNamedBufferDataEXT = transmute(ptr); ClearNamedBufferDataEXT::is_loaded = true; }, _ => unsafe { ClearNamedBufferDataEXT::is_loaded = false; } }
    match loadfn("ClearNamedBufferSubDataEXT") { ptr if !ptr.is_null() => unsafe { storage::ClearNamedBufferSubDataEXT = transmute(ptr); ClearNamedBufferSubDataEXT::is_loaded = true; }, _ => unsafe { ClearNamedBufferSubDataEXT::is_loaded = false; } }
    match loadfn("ClearStencil") { ptr if !ptr.is_null() => unsafe { storage::ClearStencil = transmute(ptr); ClearStencil::is_loaded = true; }, _ => unsafe { ClearStencil::is_loaded = false; } }
    match loadfn("ClearTexImage") { ptr if !ptr.is_null() => unsafe { storage::ClearTexImage = transmute(ptr); ClearTexImage::is_loaded = true; }, _ => unsafe { ClearTexImage::is_loaded = false; } }
    match loadfn("ClearTexSubImage") { ptr if !ptr.is_null() => unsafe { storage::ClearTexSubImage = transmute(ptr); ClearTexSubImage::is_loaded = true; }, _ => unsafe { ClearTexSubImage::is_loaded = false; } }
    match loadfn("ClientActiveTexture") { ptr if !ptr.is_null() => unsafe { storage::ClientActiveTexture = transmute(ptr); ClientActiveTexture::is_loaded = true; }, _ => unsafe { ClientActiveTexture::is_loaded = false; } }
    match loadfn("ClientActiveTextureARB") { ptr if !ptr.is_null() => unsafe { storage::ClientActiveTextureARB = transmute(ptr); ClientActiveTextureARB::is_loaded = true; }, _ => unsafe { ClientActiveTextureARB::is_loaded = false; } }
    match loadfn("ClientActiveVertexStreamATI") { ptr if !ptr.is_null() => unsafe { storage::ClientActiveVertexStreamATI = transmute(ptr); ClientActiveVertexStreamATI::is_loaded = true; }, _ => unsafe { ClientActiveVertexStreamATI::is_loaded = false; } }
    match loadfn("ClientAttribDefaultEXT") { ptr if !ptr.is_null() => unsafe { storage::ClientAttribDefaultEXT = transmute(ptr); ClientAttribDefaultEXT::is_loaded = true; }, _ => unsafe { ClientAttribDefaultEXT::is_loaded = false; } }
    match loadfn("ClientWaitSync") { ptr if !ptr.is_null() => unsafe { storage::ClientWaitSync = transmute(ptr); ClientWaitSync::is_loaded = true; }, _ => unsafe { ClientWaitSync::is_loaded = false; } }
    match loadfn("ClientWaitSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ClientWaitSyncAPPLE = transmute(ptr); ClientWaitSyncAPPLE::is_loaded = true; }, _ => unsafe { ClientWaitSyncAPPLE::is_loaded = false; } }
    match loadfn("ClipControlARB") { ptr if !ptr.is_null() => unsafe { storage::ClipControlARB = transmute(ptr); ClipControlARB::is_loaded = true; }, _ => unsafe { ClipControlARB::is_loaded = false; } }
    match loadfn("ClipPlane") { ptr if !ptr.is_null() => unsafe { storage::ClipPlane = transmute(ptr); ClipPlane::is_loaded = true; }, _ => unsafe { ClipPlane::is_loaded = false; } }
    match loadfn("ClipPlanef") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanef = transmute(ptr); ClipPlanef::is_loaded = true; }, _ => unsafe { ClipPlanef::is_loaded = false; } }
    match loadfn("ClipPlanefIMG") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanefIMG = transmute(ptr); ClipPlanefIMG::is_loaded = true; }, _ => unsafe { ClipPlanefIMG::is_loaded = false; } }
    match loadfn("ClipPlanefOES") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanefOES = transmute(ptr); ClipPlanefOES::is_loaded = true; }, _ => unsafe { ClipPlanefOES::is_loaded = false; } }
    match loadfn("ClipPlanex") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanex = transmute(ptr); ClipPlanex::is_loaded = true; }, _ => unsafe { ClipPlanex::is_loaded = false; } }
    match loadfn("ClipPlanexIMG") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanexIMG = transmute(ptr); ClipPlanexIMG::is_loaded = true; }, _ => unsafe { ClipPlanexIMG::is_loaded = false; } }
    match loadfn("ClipPlanexOES") { ptr if !ptr.is_null() => unsafe { storage::ClipPlanexOES = transmute(ptr); ClipPlanexOES::is_loaded = true; }, _ => unsafe { ClipPlanexOES::is_loaded = false; } }
    match loadfn("Color3b") { ptr if !ptr.is_null() => unsafe { storage::Color3b = transmute(ptr); Color3b::is_loaded = true; }, _ => unsafe { Color3b::is_loaded = false; } }
    match loadfn("Color3bv") { ptr if !ptr.is_null() => unsafe { storage::Color3bv = transmute(ptr); Color3bv::is_loaded = true; }, _ => unsafe { Color3bv::is_loaded = false; } }
    match loadfn("Color3d") { ptr if !ptr.is_null() => unsafe { storage::Color3d = transmute(ptr); Color3d::is_loaded = true; }, _ => unsafe { Color3d::is_loaded = false; } }
    match loadfn("Color3dv") { ptr if !ptr.is_null() => unsafe { storage::Color3dv = transmute(ptr); Color3dv::is_loaded = true; }, _ => unsafe { Color3dv::is_loaded = false; } }
    match loadfn("Color3f") { ptr if !ptr.is_null() => unsafe { storage::Color3f = transmute(ptr); Color3f::is_loaded = true; }, _ => unsafe { Color3f::is_loaded = false; } }
    match loadfn("Color3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::Color3fVertex3fSUN = transmute(ptr); Color3fVertex3fSUN::is_loaded = true; }, _ => unsafe { Color3fVertex3fSUN::is_loaded = false; } }
    match loadfn("Color3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Color3fVertex3fvSUN = transmute(ptr); Color3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { Color3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("Color3fv") { ptr if !ptr.is_null() => unsafe { storage::Color3fv = transmute(ptr); Color3fv::is_loaded = true; }, _ => unsafe { Color3fv::is_loaded = false; } }
    match loadfn("Color3hNV") { ptr if !ptr.is_null() => unsafe { storage::Color3hNV = transmute(ptr); Color3hNV::is_loaded = true; }, _ => unsafe { Color3hNV::is_loaded = false; } }
    match loadfn("Color3hvNV") { ptr if !ptr.is_null() => unsafe { storage::Color3hvNV = transmute(ptr); Color3hvNV::is_loaded = true; }, _ => unsafe { Color3hvNV::is_loaded = false; } }
    match loadfn("Color3i") { ptr if !ptr.is_null() => unsafe { storage::Color3i = transmute(ptr); Color3i::is_loaded = true; }, _ => unsafe { Color3i::is_loaded = false; } }
    match loadfn("Color3iv") { ptr if !ptr.is_null() => unsafe { storage::Color3iv = transmute(ptr); Color3iv::is_loaded = true; }, _ => unsafe { Color3iv::is_loaded = false; } }
    match loadfn("Color3s") { ptr if !ptr.is_null() => unsafe { storage::Color3s = transmute(ptr); Color3s::is_loaded = true; }, _ => unsafe { Color3s::is_loaded = false; } }
    match loadfn("Color3sv") { ptr if !ptr.is_null() => unsafe { storage::Color3sv = transmute(ptr); Color3sv::is_loaded = true; }, _ => unsafe { Color3sv::is_loaded = false; } }
    match loadfn("Color3ub") { ptr if !ptr.is_null() => unsafe { storage::Color3ub = transmute(ptr); Color3ub::is_loaded = true; }, _ => unsafe { Color3ub::is_loaded = false; } }
    match loadfn("Color3ubv") { ptr if !ptr.is_null() => unsafe { storage::Color3ubv = transmute(ptr); Color3ubv::is_loaded = true; }, _ => unsafe { Color3ubv::is_loaded = false; } }
    match loadfn("Color3ui") { ptr if !ptr.is_null() => unsafe { storage::Color3ui = transmute(ptr); Color3ui::is_loaded = true; }, _ => unsafe { Color3ui::is_loaded = false; } }
    match loadfn("Color3uiv") { ptr if !ptr.is_null() => unsafe { storage::Color3uiv = transmute(ptr); Color3uiv::is_loaded = true; }, _ => unsafe { Color3uiv::is_loaded = false; } }
    match loadfn("Color3us") { ptr if !ptr.is_null() => unsafe { storage::Color3us = transmute(ptr); Color3us::is_loaded = true; }, _ => unsafe { Color3us::is_loaded = false; } }
    match loadfn("Color3usv") { ptr if !ptr.is_null() => unsafe { storage::Color3usv = transmute(ptr); Color3usv::is_loaded = true; }, _ => unsafe { Color3usv::is_loaded = false; } }
    match loadfn("Color3xOES") { ptr if !ptr.is_null() => unsafe { storage::Color3xOES = transmute(ptr); Color3xOES::is_loaded = true; }, _ => unsafe { Color3xOES::is_loaded = false; } }
    match loadfn("Color3xvOES") { ptr if !ptr.is_null() => unsafe { storage::Color3xvOES = transmute(ptr); Color3xvOES::is_loaded = true; }, _ => unsafe { Color3xvOES::is_loaded = false; } }
    match loadfn("Color4b") { ptr if !ptr.is_null() => unsafe { storage::Color4b = transmute(ptr); Color4b::is_loaded = true; }, _ => unsafe { Color4b::is_loaded = false; } }
    match loadfn("Color4bv") { ptr if !ptr.is_null() => unsafe { storage::Color4bv = transmute(ptr); Color4bv::is_loaded = true; }, _ => unsafe { Color4bv::is_loaded = false; } }
    match loadfn("Color4d") { ptr if !ptr.is_null() => unsafe { storage::Color4d = transmute(ptr); Color4d::is_loaded = true; }, _ => unsafe { Color4d::is_loaded = false; } }
    match loadfn("Color4dv") { ptr if !ptr.is_null() => unsafe { storage::Color4dv = transmute(ptr); Color4dv::is_loaded = true; }, _ => unsafe { Color4dv::is_loaded = false; } }
    match loadfn("Color4f") { ptr if !ptr.is_null() => unsafe { storage::Color4f = transmute(ptr); Color4f::is_loaded = true; }, _ => unsafe { Color4f::is_loaded = false; } }
    match loadfn("Color4fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4fNormal3fVertex3fSUN = transmute(ptr); Color4fNormal3fVertex3fSUN::is_loaded = true; }, _ => unsafe { Color4fNormal3fVertex3fSUN::is_loaded = false; } }
    match loadfn("Color4fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4fNormal3fVertex3fvSUN = transmute(ptr); Color4fNormal3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { Color4fNormal3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("Color4fv") { ptr if !ptr.is_null() => unsafe { storage::Color4fv = transmute(ptr); Color4fv::is_loaded = true; }, _ => unsafe { Color4fv::is_loaded = false; } }
    match loadfn("Color4hNV") { ptr if !ptr.is_null() => unsafe { storage::Color4hNV = transmute(ptr); Color4hNV::is_loaded = true; }, _ => unsafe { Color4hNV::is_loaded = false; } }
    match loadfn("Color4hvNV") { ptr if !ptr.is_null() => unsafe { storage::Color4hvNV = transmute(ptr); Color4hvNV::is_loaded = true; }, _ => unsafe { Color4hvNV::is_loaded = false; } }
    match loadfn("Color4i") { ptr if !ptr.is_null() => unsafe { storage::Color4i = transmute(ptr); Color4i::is_loaded = true; }, _ => unsafe { Color4i::is_loaded = false; } }
    match loadfn("Color4iv") { ptr if !ptr.is_null() => unsafe { storage::Color4iv = transmute(ptr); Color4iv::is_loaded = true; }, _ => unsafe { Color4iv::is_loaded = false; } }
    match loadfn("Color4s") { ptr if !ptr.is_null() => unsafe { storage::Color4s = transmute(ptr); Color4s::is_loaded = true; }, _ => unsafe { Color4s::is_loaded = false; } }
    match loadfn("Color4sv") { ptr if !ptr.is_null() => unsafe { storage::Color4sv = transmute(ptr); Color4sv::is_loaded = true; }, _ => unsafe { Color4sv::is_loaded = false; } }
    match loadfn("Color4ub") { ptr if !ptr.is_null() => unsafe { storage::Color4ub = transmute(ptr); Color4ub::is_loaded = true; }, _ => unsafe { Color4ub::is_loaded = false; } }
    match loadfn("Color4ubVertex2fSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4ubVertex2fSUN = transmute(ptr); Color4ubVertex2fSUN::is_loaded = true; }, _ => unsafe { Color4ubVertex2fSUN::is_loaded = false; } }
    match loadfn("Color4ubVertex2fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4ubVertex2fvSUN = transmute(ptr); Color4ubVertex2fvSUN::is_loaded = true; }, _ => unsafe { Color4ubVertex2fvSUN::is_loaded = false; } }
    match loadfn("Color4ubVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4ubVertex3fSUN = transmute(ptr); Color4ubVertex3fSUN::is_loaded = true; }, _ => unsafe { Color4ubVertex3fSUN::is_loaded = false; } }
    match loadfn("Color4ubVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Color4ubVertex3fvSUN = transmute(ptr); Color4ubVertex3fvSUN::is_loaded = true; }, _ => unsafe { Color4ubVertex3fvSUN::is_loaded = false; } }
    match loadfn("Color4ubv") { ptr if !ptr.is_null() => unsafe { storage::Color4ubv = transmute(ptr); Color4ubv::is_loaded = true; }, _ => unsafe { Color4ubv::is_loaded = false; } }
    match loadfn("Color4ui") { ptr if !ptr.is_null() => unsafe { storage::Color4ui = transmute(ptr); Color4ui::is_loaded = true; }, _ => unsafe { Color4ui::is_loaded = false; } }
    match loadfn("Color4uiv") { ptr if !ptr.is_null() => unsafe { storage::Color4uiv = transmute(ptr); Color4uiv::is_loaded = true; }, _ => unsafe { Color4uiv::is_loaded = false; } }
    match loadfn("Color4us") { ptr if !ptr.is_null() => unsafe { storage::Color4us = transmute(ptr); Color4us::is_loaded = true; }, _ => unsafe { Color4us::is_loaded = false; } }
    match loadfn("Color4usv") { ptr if !ptr.is_null() => unsafe { storage::Color4usv = transmute(ptr); Color4usv::is_loaded = true; }, _ => unsafe { Color4usv::is_loaded = false; } }
    match loadfn("Color4x") { ptr if !ptr.is_null() => unsafe { storage::Color4x = transmute(ptr); Color4x::is_loaded = true; }, _ => unsafe { Color4x::is_loaded = false; } }
    match loadfn("Color4xOES") { ptr if !ptr.is_null() => unsafe { storage::Color4xOES = transmute(ptr); Color4xOES::is_loaded = true; }, _ => unsafe { Color4xOES::is_loaded = false; } }
    match loadfn("Color4xvOES") { ptr if !ptr.is_null() => unsafe { storage::Color4xvOES = transmute(ptr); Color4xvOES::is_loaded = true; }, _ => unsafe { Color4xvOES::is_loaded = false; } }
    match loadfn("ColorFormatNV") { ptr if !ptr.is_null() => unsafe { storage::ColorFormatNV = transmute(ptr); ColorFormatNV::is_loaded = true; }, _ => unsafe { ColorFormatNV::is_loaded = false; } }
    match loadfn("ColorFragmentOp1ATI") { ptr if !ptr.is_null() => unsafe { storage::ColorFragmentOp1ATI = transmute(ptr); ColorFragmentOp1ATI::is_loaded = true; }, _ => unsafe { ColorFragmentOp1ATI::is_loaded = false; } }
    match loadfn("ColorFragmentOp2ATI") { ptr if !ptr.is_null() => unsafe { storage::ColorFragmentOp2ATI = transmute(ptr); ColorFragmentOp2ATI::is_loaded = true; }, _ => unsafe { ColorFragmentOp2ATI::is_loaded = false; } }
    match loadfn("ColorFragmentOp3ATI") { ptr if !ptr.is_null() => unsafe { storage::ColorFragmentOp3ATI = transmute(ptr); ColorFragmentOp3ATI::is_loaded = true; }, _ => unsafe { ColorFragmentOp3ATI::is_loaded = false; } }
    match loadfn("ColorMask") { ptr if !ptr.is_null() => unsafe { storage::ColorMask = transmute(ptr); ColorMask::is_loaded = true; }, _ => unsafe { ColorMask::is_loaded = false; } }
    match loadfn("ColorMaskIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::ColorMaskIndexedEXT = transmute(ptr); ColorMaskIndexedEXT::is_loaded = true; }, _ => unsafe { ColorMaskIndexedEXT::is_loaded = false; } }
    match loadfn("ColorMaski") { ptr if !ptr.is_null() => unsafe { storage::ColorMaski = transmute(ptr); ColorMaski::is_loaded = true; }, _ => unsafe { ColorMaski::is_loaded = false; } }
    match loadfn("ColorMaterial") { ptr if !ptr.is_null() => unsafe { storage::ColorMaterial = transmute(ptr); ColorMaterial::is_loaded = true; }, _ => unsafe { ColorMaterial::is_loaded = false; } }
    match loadfn("ColorP3ui") { ptr if !ptr.is_null() => unsafe { storage::ColorP3ui = transmute(ptr); ColorP3ui::is_loaded = true; }, _ => unsafe { ColorP3ui::is_loaded = false; } }
    match loadfn("ColorP3uiv") { ptr if !ptr.is_null() => unsafe { storage::ColorP3uiv = transmute(ptr); ColorP3uiv::is_loaded = true; }, _ => unsafe { ColorP3uiv::is_loaded = false; } }
    match loadfn("ColorP4ui") { ptr if !ptr.is_null() => unsafe { storage::ColorP4ui = transmute(ptr); ColorP4ui::is_loaded = true; }, _ => unsafe { ColorP4ui::is_loaded = false; } }
    match loadfn("ColorP4uiv") { ptr if !ptr.is_null() => unsafe { storage::ColorP4uiv = transmute(ptr); ColorP4uiv::is_loaded = true; }, _ => unsafe { ColorP4uiv::is_loaded = false; } }
    match loadfn("ColorPointer") { ptr if !ptr.is_null() => unsafe { storage::ColorPointer = transmute(ptr); ColorPointer::is_loaded = true; }, _ => unsafe { ColorPointer::is_loaded = false; } }
    match loadfn("ColorPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::ColorPointerEXT = transmute(ptr); ColorPointerEXT::is_loaded = true; }, _ => unsafe { ColorPointerEXT::is_loaded = false; } }
    match loadfn("ColorPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::ColorPointerListIBM = transmute(ptr); ColorPointerListIBM::is_loaded = true; }, _ => unsafe { ColorPointerListIBM::is_loaded = false; } }
    match loadfn("ColorPointervINTEL") { ptr if !ptr.is_null() => unsafe { storage::ColorPointervINTEL = transmute(ptr); ColorPointervINTEL::is_loaded = true; }, _ => unsafe { ColorPointervINTEL::is_loaded = false; } }
    match loadfn("ColorSubTable") { ptr if !ptr.is_null() => unsafe { storage::ColorSubTable = transmute(ptr); ColorSubTable::is_loaded = true; }, _ => unsafe { ColorSubTable::is_loaded = false; } }
    match loadfn("ColorSubTableEXT") { ptr if !ptr.is_null() => unsafe { storage::ColorSubTableEXT = transmute(ptr); ColorSubTableEXT::is_loaded = true; }, _ => unsafe { ColorSubTableEXT::is_loaded = false; } }
    match loadfn("ColorTable") { ptr if !ptr.is_null() => unsafe { storage::ColorTable = transmute(ptr); ColorTable::is_loaded = true; }, _ => unsafe { ColorTable::is_loaded = false; } }
    match loadfn("ColorTableEXT") { ptr if !ptr.is_null() => unsafe { storage::ColorTableEXT = transmute(ptr); ColorTableEXT::is_loaded = true; }, _ => unsafe { ColorTableEXT::is_loaded = false; } }
    match loadfn("ColorTableParameterfv") { ptr if !ptr.is_null() => unsafe { storage::ColorTableParameterfv = transmute(ptr); ColorTableParameterfv::is_loaded = true; }, _ => unsafe { ColorTableParameterfv::is_loaded = false; } }
    match loadfn("ColorTableParameterfvSGI") { ptr if !ptr.is_null() => unsafe { storage::ColorTableParameterfvSGI = transmute(ptr); ColorTableParameterfvSGI::is_loaded = true; }, _ => unsafe { ColorTableParameterfvSGI::is_loaded = false; } }
    match loadfn("ColorTableParameteriv") { ptr if !ptr.is_null() => unsafe { storage::ColorTableParameteriv = transmute(ptr); ColorTableParameteriv::is_loaded = true; }, _ => unsafe { ColorTableParameteriv::is_loaded = false; } }
    match loadfn("ColorTableParameterivSGI") { ptr if !ptr.is_null() => unsafe { storage::ColorTableParameterivSGI = transmute(ptr); ColorTableParameterivSGI::is_loaded = true; }, _ => unsafe { ColorTableParameterivSGI::is_loaded = false; } }
    match loadfn("ColorTableSGI") { ptr if !ptr.is_null() => unsafe { storage::ColorTableSGI = transmute(ptr); ColorTableSGI::is_loaded = true; }, _ => unsafe { ColorTableSGI::is_loaded = false; } }
    match loadfn("CombinerInputNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerInputNV = transmute(ptr); CombinerInputNV::is_loaded = true; }, _ => unsafe { CombinerInputNV::is_loaded = false; } }
    match loadfn("CombinerOutputNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerOutputNV = transmute(ptr); CombinerOutputNV::is_loaded = true; }, _ => unsafe { CombinerOutputNV::is_loaded = false; } }
    match loadfn("CombinerParameterfNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerParameterfNV = transmute(ptr); CombinerParameterfNV::is_loaded = true; }, _ => unsafe { CombinerParameterfNV::is_loaded = false; } }
    match loadfn("CombinerParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerParameterfvNV = transmute(ptr); CombinerParameterfvNV::is_loaded = true; }, _ => unsafe { CombinerParameterfvNV::is_loaded = false; } }
    match loadfn("CombinerParameteriNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerParameteriNV = transmute(ptr); CombinerParameteriNV::is_loaded = true; }, _ => unsafe { CombinerParameteriNV::is_loaded = false; } }
    match loadfn("CombinerParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerParameterivNV = transmute(ptr); CombinerParameterivNV::is_loaded = true; }, _ => unsafe { CombinerParameterivNV::is_loaded = false; } }
    match loadfn("CombinerStageParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::CombinerStageParameterfvNV = transmute(ptr); CombinerStageParameterfvNV::is_loaded = true; }, _ => unsafe { CombinerStageParameterfvNV::is_loaded = false; } }
    match loadfn("CompileShader") { ptr if !ptr.is_null() => unsafe { storage::CompileShader = transmute(ptr); CompileShader::is_loaded = true; }, _ => unsafe { CompileShader::is_loaded = false; } }
    match loadfn("CompileShaderARB") { ptr if !ptr.is_null() => unsafe { storage::CompileShaderARB = transmute(ptr); CompileShaderARB::is_loaded = true; }, _ => unsafe { CompileShaderARB::is_loaded = false; } }
    match loadfn("CompileShaderIncludeARB") { ptr if !ptr.is_null() => unsafe { storage::CompileShaderIncludeARB = transmute(ptr); CompileShaderIncludeARB::is_loaded = true; }, _ => unsafe { CompileShaderIncludeARB::is_loaded = false; } }
    match loadfn("CompressedMultiTexImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexImage1DEXT = transmute(ptr); CompressedMultiTexImage1DEXT::is_loaded = true; }, _ => unsafe { CompressedMultiTexImage1DEXT::is_loaded = false; } }
    match loadfn("CompressedMultiTexImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexImage2DEXT = transmute(ptr); CompressedMultiTexImage2DEXT::is_loaded = true; }, _ => unsafe { CompressedMultiTexImage2DEXT::is_loaded = false; } }
    match loadfn("CompressedMultiTexImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexImage3DEXT = transmute(ptr); CompressedMultiTexImage3DEXT::is_loaded = true; }, _ => unsafe { CompressedMultiTexImage3DEXT::is_loaded = false; } }
    match loadfn("CompressedMultiTexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexSubImage1DEXT = transmute(ptr); CompressedMultiTexSubImage1DEXT::is_loaded = true; }, _ => unsafe { CompressedMultiTexSubImage1DEXT::is_loaded = false; } }
    match loadfn("CompressedMultiTexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexSubImage2DEXT = transmute(ptr); CompressedMultiTexSubImage2DEXT::is_loaded = true; }, _ => unsafe { CompressedMultiTexSubImage2DEXT::is_loaded = false; } }
    match loadfn("CompressedMultiTexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedMultiTexSubImage3DEXT = transmute(ptr); CompressedMultiTexSubImage3DEXT::is_loaded = true; }, _ => unsafe { CompressedMultiTexSubImage3DEXT::is_loaded = false; } }
    match loadfn("CompressedTexImage1D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage1D = transmute(ptr); CompressedTexImage1D::is_loaded = true; }, _ => unsafe { CompressedTexImage1D::is_loaded = false; } }
    match loadfn("CompressedTexImage1DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage1DARB = transmute(ptr); CompressedTexImage1DARB::is_loaded = true; }, _ => unsafe { CompressedTexImage1DARB::is_loaded = false; } }
    match loadfn("CompressedTexImage2D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage2D = transmute(ptr); CompressedTexImage2D::is_loaded = true; }, _ => unsafe { CompressedTexImage2D::is_loaded = false; } }
    match loadfn("CompressedTexImage2DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage2DARB = transmute(ptr); CompressedTexImage2DARB::is_loaded = true; }, _ => unsafe { CompressedTexImage2DARB::is_loaded = false; } }
    match loadfn("CompressedTexImage3D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage3D = transmute(ptr); CompressedTexImage3D::is_loaded = true; }, _ => unsafe { CompressedTexImage3D::is_loaded = false; } }
    match loadfn("CompressedTexImage3DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage3DARB = transmute(ptr); CompressedTexImage3DARB::is_loaded = true; }, _ => unsafe { CompressedTexImage3DARB::is_loaded = false; } }
    match loadfn("CompressedTexImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexImage3DOES = transmute(ptr); CompressedTexImage3DOES::is_loaded = true; }, _ => unsafe { CompressedTexImage3DOES::is_loaded = false; } }
    match loadfn("CompressedTexSubImage1D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage1D = transmute(ptr); CompressedTexSubImage1D::is_loaded = true; }, _ => unsafe { CompressedTexSubImage1D::is_loaded = false; } }
    match loadfn("CompressedTexSubImage1DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage1DARB = transmute(ptr); CompressedTexSubImage1DARB::is_loaded = true; }, _ => unsafe { CompressedTexSubImage1DARB::is_loaded = false; } }
    match loadfn("CompressedTexSubImage2D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage2D = transmute(ptr); CompressedTexSubImage2D::is_loaded = true; }, _ => unsafe { CompressedTexSubImage2D::is_loaded = false; } }
    match loadfn("CompressedTexSubImage2DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage2DARB = transmute(ptr); CompressedTexSubImage2DARB::is_loaded = true; }, _ => unsafe { CompressedTexSubImage2DARB::is_loaded = false; } }
    match loadfn("CompressedTexSubImage3D") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage3D = transmute(ptr); CompressedTexSubImage3D::is_loaded = true; }, _ => unsafe { CompressedTexSubImage3D::is_loaded = false; } }
    match loadfn("CompressedTexSubImage3DARB") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage3DARB = transmute(ptr); CompressedTexSubImage3DARB::is_loaded = true; }, _ => unsafe { CompressedTexSubImage3DARB::is_loaded = false; } }
    match loadfn("CompressedTexSubImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::CompressedTexSubImage3DOES = transmute(ptr); CompressedTexSubImage3DOES::is_loaded = true; }, _ => unsafe { CompressedTexSubImage3DOES::is_loaded = false; } }
    match loadfn("CompressedTextureImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureImage1DEXT = transmute(ptr); CompressedTextureImage1DEXT::is_loaded = true; }, _ => unsafe { CompressedTextureImage1DEXT::is_loaded = false; } }
    match loadfn("CompressedTextureImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureImage2DEXT = transmute(ptr); CompressedTextureImage2DEXT::is_loaded = true; }, _ => unsafe { CompressedTextureImage2DEXT::is_loaded = false; } }
    match loadfn("CompressedTextureImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureImage3DEXT = transmute(ptr); CompressedTextureImage3DEXT::is_loaded = true; }, _ => unsafe { CompressedTextureImage3DEXT::is_loaded = false; } }
    match loadfn("CompressedTextureSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureSubImage1DEXT = transmute(ptr); CompressedTextureSubImage1DEXT::is_loaded = true; }, _ => unsafe { CompressedTextureSubImage1DEXT::is_loaded = false; } }
    match loadfn("CompressedTextureSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureSubImage2DEXT = transmute(ptr); CompressedTextureSubImage2DEXT::is_loaded = true; }, _ => unsafe { CompressedTextureSubImage2DEXT::is_loaded = false; } }
    match loadfn("CompressedTextureSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CompressedTextureSubImage3DEXT = transmute(ptr); CompressedTextureSubImage3DEXT::is_loaded = true; }, _ => unsafe { CompressedTextureSubImage3DEXT::is_loaded = false; } }
    match loadfn("ConvolutionFilter1D") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionFilter1D = transmute(ptr); ConvolutionFilter1D::is_loaded = true; }, _ => unsafe { ConvolutionFilter1D::is_loaded = false; } }
    match loadfn("ConvolutionFilter1DEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionFilter1DEXT = transmute(ptr); ConvolutionFilter1DEXT::is_loaded = true; }, _ => unsafe { ConvolutionFilter1DEXT::is_loaded = false; } }
    match loadfn("ConvolutionFilter2D") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionFilter2D = transmute(ptr); ConvolutionFilter2D::is_loaded = true; }, _ => unsafe { ConvolutionFilter2D::is_loaded = false; } }
    match loadfn("ConvolutionFilter2DEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionFilter2DEXT = transmute(ptr); ConvolutionFilter2DEXT::is_loaded = true; }, _ => unsafe { ConvolutionFilter2DEXT::is_loaded = false; } }
    match loadfn("ConvolutionParameterf") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterf = transmute(ptr); ConvolutionParameterf::is_loaded = true; }, _ => unsafe { ConvolutionParameterf::is_loaded = false; } }
    match loadfn("ConvolutionParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterfEXT = transmute(ptr); ConvolutionParameterfEXT::is_loaded = true; }, _ => unsafe { ConvolutionParameterfEXT::is_loaded = false; } }
    match loadfn("ConvolutionParameterfv") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterfv = transmute(ptr); ConvolutionParameterfv::is_loaded = true; }, _ => unsafe { ConvolutionParameterfv::is_loaded = false; } }
    match loadfn("ConvolutionParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterfvEXT = transmute(ptr); ConvolutionParameterfvEXT::is_loaded = true; }, _ => unsafe { ConvolutionParameterfvEXT::is_loaded = false; } }
    match loadfn("ConvolutionParameteri") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameteri = transmute(ptr); ConvolutionParameteri::is_loaded = true; }, _ => unsafe { ConvolutionParameteri::is_loaded = false; } }
    match loadfn("ConvolutionParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameteriEXT = transmute(ptr); ConvolutionParameteriEXT::is_loaded = true; }, _ => unsafe { ConvolutionParameteriEXT::is_loaded = false; } }
    match loadfn("ConvolutionParameteriv") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameteriv = transmute(ptr); ConvolutionParameteriv::is_loaded = true; }, _ => unsafe { ConvolutionParameteriv::is_loaded = false; } }
    match loadfn("ConvolutionParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterivEXT = transmute(ptr); ConvolutionParameterivEXT::is_loaded = true; }, _ => unsafe { ConvolutionParameterivEXT::is_loaded = false; } }
    match loadfn("ConvolutionParameterxOES") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterxOES = transmute(ptr); ConvolutionParameterxOES::is_loaded = true; }, _ => unsafe { ConvolutionParameterxOES::is_loaded = false; } }
    match loadfn("ConvolutionParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::ConvolutionParameterxvOES = transmute(ptr); ConvolutionParameterxvOES::is_loaded = true; }, _ => unsafe { ConvolutionParameterxvOES::is_loaded = false; } }
    match loadfn("CopyBufferSubData") { ptr if !ptr.is_null() => unsafe { storage::CopyBufferSubData = transmute(ptr); CopyBufferSubData::is_loaded = true; }, _ => unsafe { CopyBufferSubData::is_loaded = false; } }
    match loadfn("CopyColorSubTable") { ptr if !ptr.is_null() => unsafe { storage::CopyColorSubTable = transmute(ptr); CopyColorSubTable::is_loaded = true; }, _ => unsafe { CopyColorSubTable::is_loaded = false; } }
    match loadfn("CopyColorSubTableEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyColorSubTableEXT = transmute(ptr); CopyColorSubTableEXT::is_loaded = true; }, _ => unsafe { CopyColorSubTableEXT::is_loaded = false; } }
    match loadfn("CopyColorTable") { ptr if !ptr.is_null() => unsafe { storage::CopyColorTable = transmute(ptr); CopyColorTable::is_loaded = true; }, _ => unsafe { CopyColorTable::is_loaded = false; } }
    match loadfn("CopyColorTableSGI") { ptr if !ptr.is_null() => unsafe { storage::CopyColorTableSGI = transmute(ptr); CopyColorTableSGI::is_loaded = true; }, _ => unsafe { CopyColorTableSGI::is_loaded = false; } }
    match loadfn("CopyConvolutionFilter1D") { ptr if !ptr.is_null() => unsafe { storage::CopyConvolutionFilter1D = transmute(ptr); CopyConvolutionFilter1D::is_loaded = true; }, _ => unsafe { CopyConvolutionFilter1D::is_loaded = false; } }
    match loadfn("CopyConvolutionFilter1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyConvolutionFilter1DEXT = transmute(ptr); CopyConvolutionFilter1DEXT::is_loaded = true; }, _ => unsafe { CopyConvolutionFilter1DEXT::is_loaded = false; } }
    match loadfn("CopyConvolutionFilter2D") { ptr if !ptr.is_null() => unsafe { storage::CopyConvolutionFilter2D = transmute(ptr); CopyConvolutionFilter2D::is_loaded = true; }, _ => unsafe { CopyConvolutionFilter2D::is_loaded = false; } }
    match loadfn("CopyConvolutionFilter2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyConvolutionFilter2DEXT = transmute(ptr); CopyConvolutionFilter2DEXT::is_loaded = true; }, _ => unsafe { CopyConvolutionFilter2DEXT::is_loaded = false; } }
    match loadfn("CopyImageSubData") { ptr if !ptr.is_null() => unsafe { storage::CopyImageSubData = transmute(ptr); CopyImageSubData::is_loaded = true; }, _ => unsafe { CopyImageSubData::is_loaded = false; } }
    match loadfn("CopyImageSubDataNV") { ptr if !ptr.is_null() => unsafe { storage::CopyImageSubDataNV = transmute(ptr); CopyImageSubDataNV::is_loaded = true; }, _ => unsafe { CopyImageSubDataNV::is_loaded = false; } }
    match loadfn("CopyMultiTexImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexImage1DEXT = transmute(ptr); CopyMultiTexImage1DEXT::is_loaded = true; }, _ => unsafe { CopyMultiTexImage1DEXT::is_loaded = false; } }
    match loadfn("CopyMultiTexImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexImage2DEXT = transmute(ptr); CopyMultiTexImage2DEXT::is_loaded = true; }, _ => unsafe { CopyMultiTexImage2DEXT::is_loaded = false; } }
    match loadfn("CopyMultiTexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexSubImage1DEXT = transmute(ptr); CopyMultiTexSubImage1DEXT::is_loaded = true; }, _ => unsafe { CopyMultiTexSubImage1DEXT::is_loaded = false; } }
    match loadfn("CopyMultiTexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexSubImage2DEXT = transmute(ptr); CopyMultiTexSubImage2DEXT::is_loaded = true; }, _ => unsafe { CopyMultiTexSubImage2DEXT::is_loaded = false; } }
    match loadfn("CopyMultiTexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyMultiTexSubImage3DEXT = transmute(ptr); CopyMultiTexSubImage3DEXT::is_loaded = true; }, _ => unsafe { CopyMultiTexSubImage3DEXT::is_loaded = false; } }
    match loadfn("CopyPathNV") { ptr if !ptr.is_null() => unsafe { storage::CopyPathNV = transmute(ptr); CopyPathNV::is_loaded = true; }, _ => unsafe { CopyPathNV::is_loaded = false; } }
    match loadfn("CopyPixels") { ptr if !ptr.is_null() => unsafe { storage::CopyPixels = transmute(ptr); CopyPixels::is_loaded = true; }, _ => unsafe { CopyPixels::is_loaded = false; } }
    match loadfn("CopyTexImage1D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexImage1D = transmute(ptr); CopyTexImage1D::is_loaded = true; }, _ => unsafe { CopyTexImage1D::is_loaded = false; } }
    match loadfn("CopyTexImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexImage1DEXT = transmute(ptr); CopyTexImage1DEXT::is_loaded = true; }, _ => unsafe { CopyTexImage1DEXT::is_loaded = false; } }
    match loadfn("CopyTexImage2D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexImage2D = transmute(ptr); CopyTexImage2D::is_loaded = true; }, _ => unsafe { CopyTexImage2D::is_loaded = false; } }
    match loadfn("CopyTexImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexImage2DEXT = transmute(ptr); CopyTexImage2DEXT::is_loaded = true; }, _ => unsafe { CopyTexImage2DEXT::is_loaded = false; } }
    match loadfn("CopyTexSubImage1D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage1D = transmute(ptr); CopyTexSubImage1D::is_loaded = true; }, _ => unsafe { CopyTexSubImage1D::is_loaded = false; } }
    match loadfn("CopyTexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage1DEXT = transmute(ptr); CopyTexSubImage1DEXT::is_loaded = true; }, _ => unsafe { CopyTexSubImage1DEXT::is_loaded = false; } }
    match loadfn("CopyTexSubImage2D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage2D = transmute(ptr); CopyTexSubImage2D::is_loaded = true; }, _ => unsafe { CopyTexSubImage2D::is_loaded = false; } }
    match loadfn("CopyTexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage2DEXT = transmute(ptr); CopyTexSubImage2DEXT::is_loaded = true; }, _ => unsafe { CopyTexSubImage2DEXT::is_loaded = false; } }
    match loadfn("CopyTexSubImage3D") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage3D = transmute(ptr); CopyTexSubImage3D::is_loaded = true; }, _ => unsafe { CopyTexSubImage3D::is_loaded = false; } }
    match loadfn("CopyTexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage3DEXT = transmute(ptr); CopyTexSubImage3DEXT::is_loaded = true; }, _ => unsafe { CopyTexSubImage3DEXT::is_loaded = false; } }
    match loadfn("CopyTexSubImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::CopyTexSubImage3DOES = transmute(ptr); CopyTexSubImage3DOES::is_loaded = true; }, _ => unsafe { CopyTexSubImage3DOES::is_loaded = false; } }
    match loadfn("CopyTextureImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureImage1DEXT = transmute(ptr); CopyTextureImage1DEXT::is_loaded = true; }, _ => unsafe { CopyTextureImage1DEXT::is_loaded = false; } }
    match loadfn("CopyTextureImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureImage2DEXT = transmute(ptr); CopyTextureImage2DEXT::is_loaded = true; }, _ => unsafe { CopyTextureImage2DEXT::is_loaded = false; } }
    match loadfn("CopyTextureLevelsAPPLE") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureLevelsAPPLE = transmute(ptr); CopyTextureLevelsAPPLE::is_loaded = true; }, _ => unsafe { CopyTextureLevelsAPPLE::is_loaded = false; } }
    match loadfn("CopyTextureSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureSubImage1DEXT = transmute(ptr); CopyTextureSubImage1DEXT::is_loaded = true; }, _ => unsafe { CopyTextureSubImage1DEXT::is_loaded = false; } }
    match loadfn("CopyTextureSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureSubImage2DEXT = transmute(ptr); CopyTextureSubImage2DEXT::is_loaded = true; }, _ => unsafe { CopyTextureSubImage2DEXT::is_loaded = false; } }
    match loadfn("CopyTextureSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::CopyTextureSubImage3DEXT = transmute(ptr); CopyTextureSubImage3DEXT::is_loaded = true; }, _ => unsafe { CopyTextureSubImage3DEXT::is_loaded = false; } }
    match loadfn("CoverFillPathInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::CoverFillPathInstancedNV = transmute(ptr); CoverFillPathInstancedNV::is_loaded = true; }, _ => unsafe { CoverFillPathInstancedNV::is_loaded = false; } }
    match loadfn("CoverFillPathNV") { ptr if !ptr.is_null() => unsafe { storage::CoverFillPathNV = transmute(ptr); CoverFillPathNV::is_loaded = true; }, _ => unsafe { CoverFillPathNV::is_loaded = false; } }
    match loadfn("CoverStrokePathInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::CoverStrokePathInstancedNV = transmute(ptr); CoverStrokePathInstancedNV::is_loaded = true; }, _ => unsafe { CoverStrokePathInstancedNV::is_loaded = false; } }
    match loadfn("CoverStrokePathNV") { ptr if !ptr.is_null() => unsafe { storage::CoverStrokePathNV = transmute(ptr); CoverStrokePathNV::is_loaded = true; }, _ => unsafe { CoverStrokePathNV::is_loaded = false; } }
    match loadfn("CoverageMaskNV") { ptr if !ptr.is_null() => unsafe { storage::CoverageMaskNV = transmute(ptr); CoverageMaskNV::is_loaded = true; }, _ => unsafe { CoverageMaskNV::is_loaded = false; } }
    match loadfn("CoverageOperationNV") { ptr if !ptr.is_null() => unsafe { storage::CoverageOperationNV = transmute(ptr); CoverageOperationNV::is_loaded = true; }, _ => unsafe { CoverageOperationNV::is_loaded = false; } }
    match loadfn("CreateProgram") { ptr if !ptr.is_null() => unsafe { storage::CreateProgram = transmute(ptr); CreateProgram::is_loaded = true; }, _ => unsafe { CreateProgram::is_loaded = false; } }
    match loadfn("CreateProgramObjectARB") { ptr if !ptr.is_null() => unsafe { storage::CreateProgramObjectARB = transmute(ptr); CreateProgramObjectARB::is_loaded = true; }, _ => unsafe { CreateProgramObjectARB::is_loaded = false; } }
    match loadfn("CreateShader") { ptr if !ptr.is_null() => unsafe { storage::CreateShader = transmute(ptr); CreateShader::is_loaded = true; }, _ => unsafe { CreateShader::is_loaded = false; } }
    match loadfn("CreateShaderObjectARB") { ptr if !ptr.is_null() => unsafe { storage::CreateShaderObjectARB = transmute(ptr); CreateShaderObjectARB::is_loaded = true; }, _ => unsafe { CreateShaderObjectARB::is_loaded = false; } }
    match loadfn("CreateShaderProgramEXT") { ptr if !ptr.is_null() => unsafe { storage::CreateShaderProgramEXT = transmute(ptr); CreateShaderProgramEXT::is_loaded = true; }, _ => unsafe { CreateShaderProgramEXT::is_loaded = false; } }
    match loadfn("CreateShaderProgramv") { ptr if !ptr.is_null() => unsafe { storage::CreateShaderProgramv = transmute(ptr); CreateShaderProgramv::is_loaded = true; }, _ => unsafe { CreateShaderProgramv::is_loaded = false; } }
    match loadfn("CreateShaderProgramvEXT") { ptr if !ptr.is_null() => unsafe { storage::CreateShaderProgramvEXT = transmute(ptr); CreateShaderProgramvEXT::is_loaded = true; }, _ => unsafe { CreateShaderProgramvEXT::is_loaded = false; } }
    match loadfn("CreateSyncFromCLeventARB") { ptr if !ptr.is_null() => unsafe { storage::CreateSyncFromCLeventARB = transmute(ptr); CreateSyncFromCLeventARB::is_loaded = true; }, _ => unsafe { CreateSyncFromCLeventARB::is_loaded = false; } }
    match loadfn("CullFace") { ptr if !ptr.is_null() => unsafe { storage::CullFace = transmute(ptr); CullFace::is_loaded = true; }, _ => unsafe { CullFace::is_loaded = false; } }
    match loadfn("CullParameterdvEXT") { ptr if !ptr.is_null() => unsafe { storage::CullParameterdvEXT = transmute(ptr); CullParameterdvEXT::is_loaded = true; }, _ => unsafe { CullParameterdvEXT::is_loaded = false; } }
    match loadfn("CullParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::CullParameterfvEXT = transmute(ptr); CullParameterfvEXT::is_loaded = true; }, _ => unsafe { CullParameterfvEXT::is_loaded = false; } }
    match loadfn("CurrentPaletteMatrixARB") { ptr if !ptr.is_null() => unsafe { storage::CurrentPaletteMatrixARB = transmute(ptr); CurrentPaletteMatrixARB::is_loaded = true; }, _ => unsafe { CurrentPaletteMatrixARB::is_loaded = false; } }
    match loadfn("CurrentPaletteMatrixOES") { ptr if !ptr.is_null() => unsafe { storage::CurrentPaletteMatrixOES = transmute(ptr); CurrentPaletteMatrixOES::is_loaded = true; }, _ => unsafe { CurrentPaletteMatrixOES::is_loaded = false; } }
    match loadfn("DebugMessageCallback") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageCallback = transmute(ptr); DebugMessageCallback::is_loaded = true; }, _ => unsafe { DebugMessageCallback::is_loaded = false; } }
    match loadfn("DebugMessageCallbackAMD") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageCallbackAMD = transmute(ptr); DebugMessageCallbackAMD::is_loaded = true; }, _ => unsafe { DebugMessageCallbackAMD::is_loaded = false; } }
    match loadfn("DebugMessageCallbackARB") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageCallbackARB = transmute(ptr); DebugMessageCallbackARB::is_loaded = true; }, _ => unsafe { DebugMessageCallbackARB::is_loaded = false; } }
    match loadfn("DebugMessageCallbackKHR") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageCallbackKHR = transmute(ptr); DebugMessageCallbackKHR::is_loaded = true; }, _ => unsafe { DebugMessageCallbackKHR::is_loaded = false; } }
    match loadfn("DebugMessageControl") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageControl = transmute(ptr); DebugMessageControl::is_loaded = true; }, _ => unsafe { DebugMessageControl::is_loaded = false; } }
    match loadfn("DebugMessageControlARB") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageControlARB = transmute(ptr); DebugMessageControlARB::is_loaded = true; }, _ => unsafe { DebugMessageControlARB::is_loaded = false; } }
    match loadfn("DebugMessageControlKHR") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageControlKHR = transmute(ptr); DebugMessageControlKHR::is_loaded = true; }, _ => unsafe { DebugMessageControlKHR::is_loaded = false; } }
    match loadfn("DebugMessageEnableAMD") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageEnableAMD = transmute(ptr); DebugMessageEnableAMD::is_loaded = true; }, _ => unsafe { DebugMessageEnableAMD::is_loaded = false; } }
    match loadfn("DebugMessageInsert") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageInsert = transmute(ptr); DebugMessageInsert::is_loaded = true; }, _ => unsafe { DebugMessageInsert::is_loaded = false; } }
    match loadfn("DebugMessageInsertAMD") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageInsertAMD = transmute(ptr); DebugMessageInsertAMD::is_loaded = true; }, _ => unsafe { DebugMessageInsertAMD::is_loaded = false; } }
    match loadfn("DebugMessageInsertARB") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageInsertARB = transmute(ptr); DebugMessageInsertARB::is_loaded = true; }, _ => unsafe { DebugMessageInsertARB::is_loaded = false; } }
    match loadfn("DebugMessageInsertKHR") { ptr if !ptr.is_null() => unsafe { storage::DebugMessageInsertKHR = transmute(ptr); DebugMessageInsertKHR::is_loaded = true; }, _ => unsafe { DebugMessageInsertKHR::is_loaded = false; } }
    match loadfn("DeformSGIX") { ptr if !ptr.is_null() => unsafe { storage::DeformSGIX = transmute(ptr); DeformSGIX::is_loaded = true; }, _ => unsafe { DeformSGIX::is_loaded = false; } }
    match loadfn("DeformationMap3dSGIX") { ptr if !ptr.is_null() => unsafe { storage::DeformationMap3dSGIX = transmute(ptr); DeformationMap3dSGIX::is_loaded = true; }, _ => unsafe { DeformationMap3dSGIX::is_loaded = false; } }
    match loadfn("DeformationMap3fSGIX") { ptr if !ptr.is_null() => unsafe { storage::DeformationMap3fSGIX = transmute(ptr); DeformationMap3fSGIX::is_loaded = true; }, _ => unsafe { DeformationMap3fSGIX::is_loaded = false; } }
    match loadfn("DeleteAsyncMarkersSGIX") { ptr if !ptr.is_null() => unsafe { storage::DeleteAsyncMarkersSGIX = transmute(ptr); DeleteAsyncMarkersSGIX::is_loaded = true; }, _ => unsafe { DeleteAsyncMarkersSGIX::is_loaded = false; } }
    match loadfn("DeleteBuffers") { ptr if !ptr.is_null() => unsafe { storage::DeleteBuffers = transmute(ptr); DeleteBuffers::is_loaded = true; }, _ => unsafe { DeleteBuffers::is_loaded = false; } }
    match loadfn("DeleteBuffersARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteBuffersARB = transmute(ptr); DeleteBuffersARB::is_loaded = true; }, _ => unsafe { DeleteBuffersARB::is_loaded = false; } }
    match loadfn("DeleteFencesAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DeleteFencesAPPLE = transmute(ptr); DeleteFencesAPPLE::is_loaded = true; }, _ => unsafe { DeleteFencesAPPLE::is_loaded = false; } }
    match loadfn("DeleteFencesNV") { ptr if !ptr.is_null() => unsafe { storage::DeleteFencesNV = transmute(ptr); DeleteFencesNV::is_loaded = true; }, _ => unsafe { DeleteFencesNV::is_loaded = false; } }
    match loadfn("DeleteFragmentShaderATI") { ptr if !ptr.is_null() => unsafe { storage::DeleteFragmentShaderATI = transmute(ptr); DeleteFragmentShaderATI::is_loaded = true; }, _ => unsafe { DeleteFragmentShaderATI::is_loaded = false; } }
    match loadfn("DeleteFramebuffers") { ptr if !ptr.is_null() => unsafe { storage::DeleteFramebuffers = transmute(ptr); DeleteFramebuffers::is_loaded = true; }, _ => unsafe { DeleteFramebuffers::is_loaded = false; } }
    match loadfn("DeleteFramebuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteFramebuffersEXT = transmute(ptr); DeleteFramebuffersEXT::is_loaded = true; }, _ => unsafe { DeleteFramebuffersEXT::is_loaded = false; } }
    match loadfn("DeleteFramebuffersOES") { ptr if !ptr.is_null() => unsafe { storage::DeleteFramebuffersOES = transmute(ptr); DeleteFramebuffersOES::is_loaded = true; }, _ => unsafe { DeleteFramebuffersOES::is_loaded = false; } }
    match loadfn("DeleteLists") { ptr if !ptr.is_null() => unsafe { storage::DeleteLists = transmute(ptr); DeleteLists::is_loaded = true; }, _ => unsafe { DeleteLists::is_loaded = false; } }
    match loadfn("DeleteNamedStringARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteNamedStringARB = transmute(ptr); DeleteNamedStringARB::is_loaded = true; }, _ => unsafe { DeleteNamedStringARB::is_loaded = false; } }
    match loadfn("DeleteNamesAMD") { ptr if !ptr.is_null() => unsafe { storage::DeleteNamesAMD = transmute(ptr); DeleteNamesAMD::is_loaded = true; }, _ => unsafe { DeleteNamesAMD::is_loaded = false; } }
    match loadfn("DeleteObjectARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteObjectARB = transmute(ptr); DeleteObjectARB::is_loaded = true; }, _ => unsafe { DeleteObjectARB::is_loaded = false; } }
    match loadfn("DeleteOcclusionQueriesNV") { ptr if !ptr.is_null() => unsafe { storage::DeleteOcclusionQueriesNV = transmute(ptr); DeleteOcclusionQueriesNV::is_loaded = true; }, _ => unsafe { DeleteOcclusionQueriesNV::is_loaded = false; } }
    match loadfn("DeletePathsNV") { ptr if !ptr.is_null() => unsafe { storage::DeletePathsNV = transmute(ptr); DeletePathsNV::is_loaded = true; }, _ => unsafe { DeletePathsNV::is_loaded = false; } }
    match loadfn("DeletePerfMonitorsAMD") { ptr if !ptr.is_null() => unsafe { storage::DeletePerfMonitorsAMD = transmute(ptr); DeletePerfMonitorsAMD::is_loaded = true; }, _ => unsafe { DeletePerfMonitorsAMD::is_loaded = false; } }
    match loadfn("DeleteProgram") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgram = transmute(ptr); DeleteProgram::is_loaded = true; }, _ => unsafe { DeleteProgram::is_loaded = false; } }
    match loadfn("DeleteProgramPipelines") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgramPipelines = transmute(ptr); DeleteProgramPipelines::is_loaded = true; }, _ => unsafe { DeleteProgramPipelines::is_loaded = false; } }
    match loadfn("DeleteProgramPipelinesEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgramPipelinesEXT = transmute(ptr); DeleteProgramPipelinesEXT::is_loaded = true; }, _ => unsafe { DeleteProgramPipelinesEXT::is_loaded = false; } }
    match loadfn("DeleteProgramsARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgramsARB = transmute(ptr); DeleteProgramsARB::is_loaded = true; }, _ => unsafe { DeleteProgramsARB::is_loaded = false; } }
    match loadfn("DeleteProgramsNV") { ptr if !ptr.is_null() => unsafe { storage::DeleteProgramsNV = transmute(ptr); DeleteProgramsNV::is_loaded = true; }, _ => unsafe { DeleteProgramsNV::is_loaded = false; } }
    match loadfn("DeleteQueries") { ptr if !ptr.is_null() => unsafe { storage::DeleteQueries = transmute(ptr); DeleteQueries::is_loaded = true; }, _ => unsafe { DeleteQueries::is_loaded = false; } }
    match loadfn("DeleteQueriesARB") { ptr if !ptr.is_null() => unsafe { storage::DeleteQueriesARB = transmute(ptr); DeleteQueriesARB::is_loaded = true; }, _ => unsafe { DeleteQueriesARB::is_loaded = false; } }
    match loadfn("DeleteQueriesEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteQueriesEXT = transmute(ptr); DeleteQueriesEXT::is_loaded = true; }, _ => unsafe { DeleteQueriesEXT::is_loaded = false; } }
    match loadfn("DeleteRenderbuffers") { ptr if !ptr.is_null() => unsafe { storage::DeleteRenderbuffers = transmute(ptr); DeleteRenderbuffers::is_loaded = true; }, _ => unsafe { DeleteRenderbuffers::is_loaded = false; } }
    match loadfn("DeleteRenderbuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteRenderbuffersEXT = transmute(ptr); DeleteRenderbuffersEXT::is_loaded = true; }, _ => unsafe { DeleteRenderbuffersEXT::is_loaded = false; } }
    match loadfn("DeleteRenderbuffersOES") { ptr if !ptr.is_null() => unsafe { storage::DeleteRenderbuffersOES = transmute(ptr); DeleteRenderbuffersOES::is_loaded = true; }, _ => unsafe { DeleteRenderbuffersOES::is_loaded = false; } }
    match loadfn("DeleteSamplers") { ptr if !ptr.is_null() => unsafe { storage::DeleteSamplers = transmute(ptr); DeleteSamplers::is_loaded = true; }, _ => unsafe { DeleteSamplers::is_loaded = false; } }
    match loadfn("DeleteShader") { ptr if !ptr.is_null() => unsafe { storage::DeleteShader = transmute(ptr); DeleteShader::is_loaded = true; }, _ => unsafe { DeleteShader::is_loaded = false; } }
    match loadfn("DeleteSync") { ptr if !ptr.is_null() => unsafe { storage::DeleteSync = transmute(ptr); DeleteSync::is_loaded = true; }, _ => unsafe { DeleteSync::is_loaded = false; } }
    match loadfn("DeleteSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DeleteSyncAPPLE = transmute(ptr); DeleteSyncAPPLE::is_loaded = true; }, _ => unsafe { DeleteSyncAPPLE::is_loaded = false; } }
    match loadfn("DeleteTextures") { ptr if !ptr.is_null() => unsafe { storage::DeleteTextures = transmute(ptr); DeleteTextures::is_loaded = true; }, _ => unsafe { DeleteTextures::is_loaded = false; } }
    match loadfn("DeleteTexturesEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteTexturesEXT = transmute(ptr); DeleteTexturesEXT::is_loaded = true; }, _ => unsafe { DeleteTexturesEXT::is_loaded = false; } }
    match loadfn("DeleteTransformFeedbacks") { ptr if !ptr.is_null() => unsafe { storage::DeleteTransformFeedbacks = transmute(ptr); DeleteTransformFeedbacks::is_loaded = true; }, _ => unsafe { DeleteTransformFeedbacks::is_loaded = false; } }
    match loadfn("DeleteTransformFeedbacksNV") { ptr if !ptr.is_null() => unsafe { storage::DeleteTransformFeedbacksNV = transmute(ptr); DeleteTransformFeedbacksNV::is_loaded = true; }, _ => unsafe { DeleteTransformFeedbacksNV::is_loaded = false; } }
    match loadfn("DeleteVertexArrays") { ptr if !ptr.is_null() => unsafe { storage::DeleteVertexArrays = transmute(ptr); DeleteVertexArrays::is_loaded = true; }, _ => unsafe { DeleteVertexArrays::is_loaded = false; } }
    match loadfn("DeleteVertexArraysAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DeleteVertexArraysAPPLE = transmute(ptr); DeleteVertexArraysAPPLE::is_loaded = true; }, _ => unsafe { DeleteVertexArraysAPPLE::is_loaded = false; } }
    match loadfn("DeleteVertexArraysOES") { ptr if !ptr.is_null() => unsafe { storage::DeleteVertexArraysOES = transmute(ptr); DeleteVertexArraysOES::is_loaded = true; }, _ => unsafe { DeleteVertexArraysOES::is_loaded = false; } }
    match loadfn("DeleteVertexShaderEXT") { ptr if !ptr.is_null() => unsafe { storage::DeleteVertexShaderEXT = transmute(ptr); DeleteVertexShaderEXT::is_loaded = true; }, _ => unsafe { DeleteVertexShaderEXT::is_loaded = false; } }
    match loadfn("DepthBoundsEXT") { ptr if !ptr.is_null() => unsafe { storage::DepthBoundsEXT = transmute(ptr); DepthBoundsEXT::is_loaded = true; }, _ => unsafe { DepthBoundsEXT::is_loaded = false; } }
    match loadfn("DepthBoundsdNV") { ptr if !ptr.is_null() => unsafe { storage::DepthBoundsdNV = transmute(ptr); DepthBoundsdNV::is_loaded = true; }, _ => unsafe { DepthBoundsdNV::is_loaded = false; } }
    match loadfn("DepthFunc") { ptr if !ptr.is_null() => unsafe { storage::DepthFunc = transmute(ptr); DepthFunc::is_loaded = true; }, _ => unsafe { DepthFunc::is_loaded = false; } }
    match loadfn("DepthMask") { ptr if !ptr.is_null() => unsafe { storage::DepthMask = transmute(ptr); DepthMask::is_loaded = true; }, _ => unsafe { DepthMask::is_loaded = false; } }
    match loadfn("DepthRange") { ptr if !ptr.is_null() => unsafe { storage::DepthRange = transmute(ptr); DepthRange::is_loaded = true; }, _ => unsafe { DepthRange::is_loaded = false; } }
    match loadfn("DepthRangeArrayv") { ptr if !ptr.is_null() => unsafe { storage::DepthRangeArrayv = transmute(ptr); DepthRangeArrayv::is_loaded = true; }, _ => unsafe { DepthRangeArrayv::is_loaded = false; } }
    match loadfn("DepthRangeIndexed") { ptr if !ptr.is_null() => unsafe { storage::DepthRangeIndexed = transmute(ptr); DepthRangeIndexed::is_loaded = true; }, _ => unsafe { DepthRangeIndexed::is_loaded = false; } }
    match loadfn("DepthRangedNV") { ptr if !ptr.is_null() => unsafe { storage::DepthRangedNV = transmute(ptr); DepthRangedNV::is_loaded = true; }, _ => unsafe { DepthRangedNV::is_loaded = false; } }
    match loadfn("DepthRangef") { ptr if !ptr.is_null() => unsafe { storage::DepthRangef = transmute(ptr); DepthRangef::is_loaded = true; }, _ => unsafe { DepthRangef::is_loaded = false; } }
    match loadfn("DepthRangefOES") { ptr if !ptr.is_null() => unsafe { storage::DepthRangefOES = transmute(ptr); DepthRangefOES::is_loaded = true; }, _ => unsafe { DepthRangefOES::is_loaded = false; } }
    match loadfn("DepthRangex") { ptr if !ptr.is_null() => unsafe { storage::DepthRangex = transmute(ptr); DepthRangex::is_loaded = true; }, _ => unsafe { DepthRangex::is_loaded = false; } }
    match loadfn("DepthRangexOES") { ptr if !ptr.is_null() => unsafe { storage::DepthRangexOES = transmute(ptr); DepthRangexOES::is_loaded = true; }, _ => unsafe { DepthRangexOES::is_loaded = false; } }
    match loadfn("DetachObjectARB") { ptr if !ptr.is_null() => unsafe { storage::DetachObjectARB = transmute(ptr); DetachObjectARB::is_loaded = true; }, _ => unsafe { DetachObjectARB::is_loaded = false; } }
    match loadfn("DetachShader") { ptr if !ptr.is_null() => unsafe { storage::DetachShader = transmute(ptr); DetachShader::is_loaded = true; }, _ => unsafe { DetachShader::is_loaded = false; } }
    match loadfn("DetailTexFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::DetailTexFuncSGIS = transmute(ptr); DetailTexFuncSGIS::is_loaded = true; }, _ => unsafe { DetailTexFuncSGIS::is_loaded = false; } }
    match loadfn("Disable") { ptr if !ptr.is_null() => unsafe { storage::Disable = transmute(ptr); Disable::is_loaded = true; }, _ => unsafe { Disable::is_loaded = false; } }
    match loadfn("DisableClientState") { ptr if !ptr.is_null() => unsafe { storage::DisableClientState = transmute(ptr); DisableClientState::is_loaded = true; }, _ => unsafe { DisableClientState::is_loaded = false; } }
    match loadfn("DisableClientStateIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableClientStateIndexedEXT = transmute(ptr); DisableClientStateIndexedEXT::is_loaded = true; }, _ => unsafe { DisableClientStateIndexedEXT::is_loaded = false; } }
    match loadfn("DisableClientStateiEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableClientStateiEXT = transmute(ptr); DisableClientStateiEXT::is_loaded = true; }, _ => unsafe { DisableClientStateiEXT::is_loaded = false; } }
    match loadfn("DisableDriverControlQCOM") { ptr if !ptr.is_null() => unsafe { storage::DisableDriverControlQCOM = transmute(ptr); DisableDriverControlQCOM::is_loaded = true; }, _ => unsafe { DisableDriverControlQCOM::is_loaded = false; } }
    match loadfn("DisableIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableIndexedEXT = transmute(ptr); DisableIndexedEXT::is_loaded = true; }, _ => unsafe { DisableIndexedEXT::is_loaded = false; } }
    match loadfn("DisableVariantClientStateEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableVariantClientStateEXT = transmute(ptr); DisableVariantClientStateEXT::is_loaded = true; }, _ => unsafe { DisableVariantClientStateEXT::is_loaded = false; } }
    match loadfn("DisableVertexArrayAttribEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexArrayAttribEXT = transmute(ptr); DisableVertexArrayAttribEXT::is_loaded = true; }, _ => unsafe { DisableVertexArrayAttribEXT::is_loaded = false; } }
    match loadfn("DisableVertexArrayEXT") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexArrayEXT = transmute(ptr); DisableVertexArrayEXT::is_loaded = true; }, _ => unsafe { DisableVertexArrayEXT::is_loaded = false; } }
    match loadfn("DisableVertexAttribAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexAttribAPPLE = transmute(ptr); DisableVertexAttribAPPLE::is_loaded = true; }, _ => unsafe { DisableVertexAttribAPPLE::is_loaded = false; } }
    match loadfn("DisableVertexAttribArray") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexAttribArray = transmute(ptr); DisableVertexAttribArray::is_loaded = true; }, _ => unsafe { DisableVertexAttribArray::is_loaded = false; } }
    match loadfn("DisableVertexAttribArrayARB") { ptr if !ptr.is_null() => unsafe { storage::DisableVertexAttribArrayARB = transmute(ptr); DisableVertexAttribArrayARB::is_loaded = true; }, _ => unsafe { DisableVertexAttribArrayARB::is_loaded = false; } }
    match loadfn("Disablei") { ptr if !ptr.is_null() => unsafe { storage::Disablei = transmute(ptr); Disablei::is_loaded = true; }, _ => unsafe { Disablei::is_loaded = false; } }
    match loadfn("DiscardFramebufferEXT") { ptr if !ptr.is_null() => unsafe { storage::DiscardFramebufferEXT = transmute(ptr); DiscardFramebufferEXT::is_loaded = true; }, _ => unsafe { DiscardFramebufferEXT::is_loaded = false; } }
    match loadfn("DispatchCompute") { ptr if !ptr.is_null() => unsafe { storage::DispatchCompute = transmute(ptr); DispatchCompute::is_loaded = true; }, _ => unsafe { DispatchCompute::is_loaded = false; } }
    match loadfn("DispatchComputeGroupSizeARB") { ptr if !ptr.is_null() => unsafe { storage::DispatchComputeGroupSizeARB = transmute(ptr); DispatchComputeGroupSizeARB::is_loaded = true; }, _ => unsafe { DispatchComputeGroupSizeARB::is_loaded = false; } }
    match loadfn("DispatchComputeIndirect") { ptr if !ptr.is_null() => unsafe { storage::DispatchComputeIndirect = transmute(ptr); DispatchComputeIndirect::is_loaded = true; }, _ => unsafe { DispatchComputeIndirect::is_loaded = false; } }
    match loadfn("DrawArrays") { ptr if !ptr.is_null() => unsafe { storage::DrawArrays = transmute(ptr); DrawArrays::is_loaded = true; }, _ => unsafe { DrawArrays::is_loaded = false; } }
    match loadfn("DrawArraysEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysEXT = transmute(ptr); DrawArraysEXT::is_loaded = true; }, _ => unsafe { DrawArraysEXT::is_loaded = false; } }
    match loadfn("DrawArraysIndirect") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysIndirect = transmute(ptr); DrawArraysIndirect::is_loaded = true; }, _ => unsafe { DrawArraysIndirect::is_loaded = false; } }
    match loadfn("DrawArraysInstanced") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstanced = transmute(ptr); DrawArraysInstanced::is_loaded = true; }, _ => unsafe { DrawArraysInstanced::is_loaded = false; } }
    match loadfn("DrawArraysInstancedANGLE") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedANGLE = transmute(ptr); DrawArraysInstancedANGLE::is_loaded = true; }, _ => unsafe { DrawArraysInstancedANGLE::is_loaded = false; } }
    match loadfn("DrawArraysInstancedARB") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedARB = transmute(ptr); DrawArraysInstancedARB::is_loaded = true; }, _ => unsafe { DrawArraysInstancedARB::is_loaded = false; } }
    match loadfn("DrawArraysInstancedBaseInstance") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedBaseInstance = transmute(ptr); DrawArraysInstancedBaseInstance::is_loaded = true; }, _ => unsafe { DrawArraysInstancedBaseInstance::is_loaded = false; } }
    match loadfn("DrawArraysInstancedEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedEXT = transmute(ptr); DrawArraysInstancedEXT::is_loaded = true; }, _ => unsafe { DrawArraysInstancedEXT::is_loaded = false; } }
    match loadfn("DrawArraysInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::DrawArraysInstancedNV = transmute(ptr); DrawArraysInstancedNV::is_loaded = true; }, _ => unsafe { DrawArraysInstancedNV::is_loaded = false; } }
    match loadfn("DrawBuffer") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffer = transmute(ptr); DrawBuffer::is_loaded = true; }, _ => unsafe { DrawBuffer::is_loaded = false; } }
    match loadfn("DrawBuffers") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffers = transmute(ptr); DrawBuffers::is_loaded = true; }, _ => unsafe { DrawBuffers::is_loaded = false; } }
    match loadfn("DrawBuffersARB") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersARB = transmute(ptr); DrawBuffersARB::is_loaded = true; }, _ => unsafe { DrawBuffersARB::is_loaded = false; } }
    match loadfn("DrawBuffersATI") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersATI = transmute(ptr); DrawBuffersATI::is_loaded = true; }, _ => unsafe { DrawBuffersATI::is_loaded = false; } }
    match loadfn("DrawBuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersEXT = transmute(ptr); DrawBuffersEXT::is_loaded = true; }, _ => unsafe { DrawBuffersEXT::is_loaded = false; } }
    match loadfn("DrawBuffersIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersIndexedEXT = transmute(ptr); DrawBuffersIndexedEXT::is_loaded = true; }, _ => unsafe { DrawBuffersIndexedEXT::is_loaded = false; } }
    match loadfn("DrawBuffersNV") { ptr if !ptr.is_null() => unsafe { storage::DrawBuffersNV = transmute(ptr); DrawBuffersNV::is_loaded = true; }, _ => unsafe { DrawBuffersNV::is_loaded = false; } }
    match loadfn("DrawElementArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DrawElementArrayAPPLE = transmute(ptr); DrawElementArrayAPPLE::is_loaded = true; }, _ => unsafe { DrawElementArrayAPPLE::is_loaded = false; } }
    match loadfn("DrawElementArrayATI") { ptr if !ptr.is_null() => unsafe { storage::DrawElementArrayATI = transmute(ptr); DrawElementArrayATI::is_loaded = true; }, _ => unsafe { DrawElementArrayATI::is_loaded = false; } }
    match loadfn("DrawElements") { ptr if !ptr.is_null() => unsafe { storage::DrawElements = transmute(ptr); DrawElements::is_loaded = true; }, _ => unsafe { DrawElements::is_loaded = false; } }
    match loadfn("DrawElementsBaseVertex") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsBaseVertex = transmute(ptr); DrawElementsBaseVertex::is_loaded = true; }, _ => unsafe { DrawElementsBaseVertex::is_loaded = false; } }
    match loadfn("DrawElementsIndirect") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsIndirect = transmute(ptr); DrawElementsIndirect::is_loaded = true; }, _ => unsafe { DrawElementsIndirect::is_loaded = false; } }
    match loadfn("DrawElementsInstanced") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstanced = transmute(ptr); DrawElementsInstanced::is_loaded = true; }, _ => unsafe { DrawElementsInstanced::is_loaded = false; } }
    match loadfn("DrawElementsInstancedANGLE") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedANGLE = transmute(ptr); DrawElementsInstancedANGLE::is_loaded = true; }, _ => unsafe { DrawElementsInstancedANGLE::is_loaded = false; } }
    match loadfn("DrawElementsInstancedARB") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedARB = transmute(ptr); DrawElementsInstancedARB::is_loaded = true; }, _ => unsafe { DrawElementsInstancedARB::is_loaded = false; } }
    match loadfn("DrawElementsInstancedBaseInstance") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedBaseInstance = transmute(ptr); DrawElementsInstancedBaseInstance::is_loaded = true; }, _ => unsafe { DrawElementsInstancedBaseInstance::is_loaded = false; } }
    match loadfn("DrawElementsInstancedBaseVertex") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedBaseVertex = transmute(ptr); DrawElementsInstancedBaseVertex::is_loaded = true; }, _ => unsafe { DrawElementsInstancedBaseVertex::is_loaded = false; } }
    match loadfn("DrawElementsInstancedBaseVertexBaseInstance") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedBaseVertexBaseInstance = transmute(ptr); DrawElementsInstancedBaseVertexBaseInstance::is_loaded = true; }, _ => unsafe { DrawElementsInstancedBaseVertexBaseInstance::is_loaded = false; } }
    match loadfn("DrawElementsInstancedEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedEXT = transmute(ptr); DrawElementsInstancedEXT::is_loaded = true; }, _ => unsafe { DrawElementsInstancedEXT::is_loaded = false; } }
    match loadfn("DrawElementsInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::DrawElementsInstancedNV = transmute(ptr); DrawElementsInstancedNV::is_loaded = true; }, _ => unsafe { DrawElementsInstancedNV::is_loaded = false; } }
    match loadfn("DrawMeshArraysSUN") { ptr if !ptr.is_null() => unsafe { storage::DrawMeshArraysSUN = transmute(ptr); DrawMeshArraysSUN::is_loaded = true; }, _ => unsafe { DrawMeshArraysSUN::is_loaded = false; } }
    match loadfn("DrawPixels") { ptr if !ptr.is_null() => unsafe { storage::DrawPixels = transmute(ptr); DrawPixels::is_loaded = true; }, _ => unsafe { DrawPixels::is_loaded = false; } }
    match loadfn("DrawRangeElementArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElementArrayAPPLE = transmute(ptr); DrawRangeElementArrayAPPLE::is_loaded = true; }, _ => unsafe { DrawRangeElementArrayAPPLE::is_loaded = false; } }
    match loadfn("DrawRangeElementArrayATI") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElementArrayATI = transmute(ptr); DrawRangeElementArrayATI::is_loaded = true; }, _ => unsafe { DrawRangeElementArrayATI::is_loaded = false; } }
    match loadfn("DrawRangeElements") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElements = transmute(ptr); DrawRangeElements::is_loaded = true; }, _ => unsafe { DrawRangeElements::is_loaded = false; } }
    match loadfn("DrawRangeElementsBaseVertex") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElementsBaseVertex = transmute(ptr); DrawRangeElementsBaseVertex::is_loaded = true; }, _ => unsafe { DrawRangeElementsBaseVertex::is_loaded = false; } }
    match loadfn("DrawRangeElementsEXT") { ptr if !ptr.is_null() => unsafe { storage::DrawRangeElementsEXT = transmute(ptr); DrawRangeElementsEXT::is_loaded = true; }, _ => unsafe { DrawRangeElementsEXT::is_loaded = false; } }
    match loadfn("DrawTexfOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexfOES = transmute(ptr); DrawTexfOES::is_loaded = true; }, _ => unsafe { DrawTexfOES::is_loaded = false; } }
    match loadfn("DrawTexfvOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexfvOES = transmute(ptr); DrawTexfvOES::is_loaded = true; }, _ => unsafe { DrawTexfvOES::is_loaded = false; } }
    match loadfn("DrawTexiOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexiOES = transmute(ptr); DrawTexiOES::is_loaded = true; }, _ => unsafe { DrawTexiOES::is_loaded = false; } }
    match loadfn("DrawTexivOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexivOES = transmute(ptr); DrawTexivOES::is_loaded = true; }, _ => unsafe { DrawTexivOES::is_loaded = false; } }
    match loadfn("DrawTexsOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexsOES = transmute(ptr); DrawTexsOES::is_loaded = true; }, _ => unsafe { DrawTexsOES::is_loaded = false; } }
    match loadfn("DrawTexsvOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexsvOES = transmute(ptr); DrawTexsvOES::is_loaded = true; }, _ => unsafe { DrawTexsvOES::is_loaded = false; } }
    match loadfn("DrawTextureNV") { ptr if !ptr.is_null() => unsafe { storage::DrawTextureNV = transmute(ptr); DrawTextureNV::is_loaded = true; }, _ => unsafe { DrawTextureNV::is_loaded = false; } }
    match loadfn("DrawTexxOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexxOES = transmute(ptr); DrawTexxOES::is_loaded = true; }, _ => unsafe { DrawTexxOES::is_loaded = false; } }
    match loadfn("DrawTexxvOES") { ptr if !ptr.is_null() => unsafe { storage::DrawTexxvOES = transmute(ptr); DrawTexxvOES::is_loaded = true; }, _ => unsafe { DrawTexxvOES::is_loaded = false; } }
    match loadfn("DrawTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedback = transmute(ptr); DrawTransformFeedback::is_loaded = true; }, _ => unsafe { DrawTransformFeedback::is_loaded = false; } }
    match loadfn("DrawTransformFeedbackInstanced") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedbackInstanced = transmute(ptr); DrawTransformFeedbackInstanced::is_loaded = true; }, _ => unsafe { DrawTransformFeedbackInstanced::is_loaded = false; } }
    match loadfn("DrawTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedbackNV = transmute(ptr); DrawTransformFeedbackNV::is_loaded = true; }, _ => unsafe { DrawTransformFeedbackNV::is_loaded = false; } }
    match loadfn("DrawTransformFeedbackStream") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedbackStream = transmute(ptr); DrawTransformFeedbackStream::is_loaded = true; }, _ => unsafe { DrawTransformFeedbackStream::is_loaded = false; } }
    match loadfn("DrawTransformFeedbackStreamInstanced") { ptr if !ptr.is_null() => unsafe { storage::DrawTransformFeedbackStreamInstanced = transmute(ptr); DrawTransformFeedbackStreamInstanced::is_loaded = true; }, _ => unsafe { DrawTransformFeedbackStreamInstanced::is_loaded = false; } }
    match loadfn("EGLImageTargetRenderbufferStorageOES") { ptr if !ptr.is_null() => unsafe { storage::EGLImageTargetRenderbufferStorageOES = transmute(ptr); EGLImageTargetRenderbufferStorageOES::is_loaded = true; }, _ => unsafe { EGLImageTargetRenderbufferStorageOES::is_loaded = false; } }
    match loadfn("EGLImageTargetTexture2DOES") { ptr if !ptr.is_null() => unsafe { storage::EGLImageTargetTexture2DOES = transmute(ptr); EGLImageTargetTexture2DOES::is_loaded = true; }, _ => unsafe { EGLImageTargetTexture2DOES::is_loaded = false; } }
    match loadfn("EdgeFlag") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlag = transmute(ptr); EdgeFlag::is_loaded = true; }, _ => unsafe { EdgeFlag::is_loaded = false; } }
    match loadfn("EdgeFlagFormatNV") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagFormatNV = transmute(ptr); EdgeFlagFormatNV::is_loaded = true; }, _ => unsafe { EdgeFlagFormatNV::is_loaded = false; } }
    match loadfn("EdgeFlagPointer") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagPointer = transmute(ptr); EdgeFlagPointer::is_loaded = true; }, _ => unsafe { EdgeFlagPointer::is_loaded = false; } }
    match loadfn("EdgeFlagPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagPointerEXT = transmute(ptr); EdgeFlagPointerEXT::is_loaded = true; }, _ => unsafe { EdgeFlagPointerEXT::is_loaded = false; } }
    match loadfn("EdgeFlagPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagPointerListIBM = transmute(ptr); EdgeFlagPointerListIBM::is_loaded = true; }, _ => unsafe { EdgeFlagPointerListIBM::is_loaded = false; } }
    match loadfn("EdgeFlagv") { ptr if !ptr.is_null() => unsafe { storage::EdgeFlagv = transmute(ptr); EdgeFlagv::is_loaded = true; }, _ => unsafe { EdgeFlagv::is_loaded = false; } }
    match loadfn("ElementPointerAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ElementPointerAPPLE = transmute(ptr); ElementPointerAPPLE::is_loaded = true; }, _ => unsafe { ElementPointerAPPLE::is_loaded = false; } }
    match loadfn("ElementPointerATI") { ptr if !ptr.is_null() => unsafe { storage::ElementPointerATI = transmute(ptr); ElementPointerATI::is_loaded = true; }, _ => unsafe { ElementPointerATI::is_loaded = false; } }
    match loadfn("Enable") { ptr if !ptr.is_null() => unsafe { storage::Enable = transmute(ptr); Enable::is_loaded = true; }, _ => unsafe { Enable::is_loaded = false; } }
    match loadfn("EnableClientState") { ptr if !ptr.is_null() => unsafe { storage::EnableClientState = transmute(ptr); EnableClientState::is_loaded = true; }, _ => unsafe { EnableClientState::is_loaded = false; } }
    match loadfn("EnableClientStateIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableClientStateIndexedEXT = transmute(ptr); EnableClientStateIndexedEXT::is_loaded = true; }, _ => unsafe { EnableClientStateIndexedEXT::is_loaded = false; } }
    match loadfn("EnableClientStateiEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableClientStateiEXT = transmute(ptr); EnableClientStateiEXT::is_loaded = true; }, _ => unsafe { EnableClientStateiEXT::is_loaded = false; } }
    match loadfn("EnableDriverControlQCOM") { ptr if !ptr.is_null() => unsafe { storage::EnableDriverControlQCOM = transmute(ptr); EnableDriverControlQCOM::is_loaded = true; }, _ => unsafe { EnableDriverControlQCOM::is_loaded = false; } }
    match loadfn("EnableIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableIndexedEXT = transmute(ptr); EnableIndexedEXT::is_loaded = true; }, _ => unsafe { EnableIndexedEXT::is_loaded = false; } }
    match loadfn("EnableVariantClientStateEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableVariantClientStateEXT = transmute(ptr); EnableVariantClientStateEXT::is_loaded = true; }, _ => unsafe { EnableVariantClientStateEXT::is_loaded = false; } }
    match loadfn("EnableVertexArrayAttribEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexArrayAttribEXT = transmute(ptr); EnableVertexArrayAttribEXT::is_loaded = true; }, _ => unsafe { EnableVertexArrayAttribEXT::is_loaded = false; } }
    match loadfn("EnableVertexArrayEXT") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexArrayEXT = transmute(ptr); EnableVertexArrayEXT::is_loaded = true; }, _ => unsafe { EnableVertexArrayEXT::is_loaded = false; } }
    match loadfn("EnableVertexAttribAPPLE") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexAttribAPPLE = transmute(ptr); EnableVertexAttribAPPLE::is_loaded = true; }, _ => unsafe { EnableVertexAttribAPPLE::is_loaded = false; } }
    match loadfn("EnableVertexAttribArray") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexAttribArray = transmute(ptr); EnableVertexAttribArray::is_loaded = true; }, _ => unsafe { EnableVertexAttribArray::is_loaded = false; } }
    match loadfn("EnableVertexAttribArrayARB") { ptr if !ptr.is_null() => unsafe { storage::EnableVertexAttribArrayARB = transmute(ptr); EnableVertexAttribArrayARB::is_loaded = true; }, _ => unsafe { EnableVertexAttribArrayARB::is_loaded = false; } }
    match loadfn("Enablei") { ptr if !ptr.is_null() => unsafe { storage::Enablei = transmute(ptr); Enablei::is_loaded = true; }, _ => unsafe { Enablei::is_loaded = false; } }
    match loadfn("End") { ptr if !ptr.is_null() => unsafe { storage::End = transmute(ptr); End::is_loaded = true; }, _ => unsafe { End::is_loaded = false; } }
    match loadfn("EndConditionalRender") { ptr if !ptr.is_null() => unsafe { storage::EndConditionalRender = transmute(ptr); EndConditionalRender::is_loaded = true; }, _ => unsafe { EndConditionalRender::is_loaded = false; } }
    match loadfn("EndConditionalRenderNV") { ptr if !ptr.is_null() => unsafe { storage::EndConditionalRenderNV = transmute(ptr); EndConditionalRenderNV::is_loaded = true; }, _ => unsafe { EndConditionalRenderNV::is_loaded = false; } }
    match loadfn("EndConditionalRenderNVX") { ptr if !ptr.is_null() => unsafe { storage::EndConditionalRenderNVX = transmute(ptr); EndConditionalRenderNVX::is_loaded = true; }, _ => unsafe { EndConditionalRenderNVX::is_loaded = false; } }
    match loadfn("EndFragmentShaderATI") { ptr if !ptr.is_null() => unsafe { storage::EndFragmentShaderATI = transmute(ptr); EndFragmentShaderATI::is_loaded = true; }, _ => unsafe { EndFragmentShaderATI::is_loaded = false; } }
    match loadfn("EndList") { ptr if !ptr.is_null() => unsafe { storage::EndList = transmute(ptr); EndList::is_loaded = true; }, _ => unsafe { EndList::is_loaded = false; } }
    match loadfn("EndOcclusionQueryNV") { ptr if !ptr.is_null() => unsafe { storage::EndOcclusionQueryNV = transmute(ptr); EndOcclusionQueryNV::is_loaded = true; }, _ => unsafe { EndOcclusionQueryNV::is_loaded = false; } }
    match loadfn("EndPerfMonitorAMD") { ptr if !ptr.is_null() => unsafe { storage::EndPerfMonitorAMD = transmute(ptr); EndPerfMonitorAMD::is_loaded = true; }, _ => unsafe { EndPerfMonitorAMD::is_loaded = false; } }
    match loadfn("EndQuery") { ptr if !ptr.is_null() => unsafe { storage::EndQuery = transmute(ptr); EndQuery::is_loaded = true; }, _ => unsafe { EndQuery::is_loaded = false; } }
    match loadfn("EndQueryARB") { ptr if !ptr.is_null() => unsafe { storage::EndQueryARB = transmute(ptr); EndQueryARB::is_loaded = true; }, _ => unsafe { EndQueryARB::is_loaded = false; } }
    match loadfn("EndQueryEXT") { ptr if !ptr.is_null() => unsafe { storage::EndQueryEXT = transmute(ptr); EndQueryEXT::is_loaded = true; }, _ => unsafe { EndQueryEXT::is_loaded = false; } }
    match loadfn("EndQueryIndexed") { ptr if !ptr.is_null() => unsafe { storage::EndQueryIndexed = transmute(ptr); EndQueryIndexed::is_loaded = true; }, _ => unsafe { EndQueryIndexed::is_loaded = false; } }
    match loadfn("EndTilingQCOM") { ptr if !ptr.is_null() => unsafe { storage::EndTilingQCOM = transmute(ptr); EndTilingQCOM::is_loaded = true; }, _ => unsafe { EndTilingQCOM::is_loaded = false; } }
    match loadfn("EndTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::EndTransformFeedback = transmute(ptr); EndTransformFeedback::is_loaded = true; }, _ => unsafe { EndTransformFeedback::is_loaded = false; } }
    match loadfn("EndTransformFeedbackEXT") { ptr if !ptr.is_null() => unsafe { storage::EndTransformFeedbackEXT = transmute(ptr); EndTransformFeedbackEXT::is_loaded = true; }, _ => unsafe { EndTransformFeedbackEXT::is_loaded = false; } }
    match loadfn("EndTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::EndTransformFeedbackNV = transmute(ptr); EndTransformFeedbackNV::is_loaded = true; }, _ => unsafe { EndTransformFeedbackNV::is_loaded = false; } }
    match loadfn("EndVertexShaderEXT") { ptr if !ptr.is_null() => unsafe { storage::EndVertexShaderEXT = transmute(ptr); EndVertexShaderEXT::is_loaded = true; }, _ => unsafe { EndVertexShaderEXT::is_loaded = false; } }
    match loadfn("EndVideoCaptureNV") { ptr if !ptr.is_null() => unsafe { storage::EndVideoCaptureNV = transmute(ptr); EndVideoCaptureNV::is_loaded = true; }, _ => unsafe { EndVideoCaptureNV::is_loaded = false; } }
    match loadfn("EvalCoord1d") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1d = transmute(ptr); EvalCoord1d::is_loaded = true; }, _ => unsafe { EvalCoord1d::is_loaded = false; } }
    match loadfn("EvalCoord1dv") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1dv = transmute(ptr); EvalCoord1dv::is_loaded = true; }, _ => unsafe { EvalCoord1dv::is_loaded = false; } }
    match loadfn("EvalCoord1f") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1f = transmute(ptr); EvalCoord1f::is_loaded = true; }, _ => unsafe { EvalCoord1f::is_loaded = false; } }
    match loadfn("EvalCoord1fv") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1fv = transmute(ptr); EvalCoord1fv::is_loaded = true; }, _ => unsafe { EvalCoord1fv::is_loaded = false; } }
    match loadfn("EvalCoord1xOES") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1xOES = transmute(ptr); EvalCoord1xOES::is_loaded = true; }, _ => unsafe { EvalCoord1xOES::is_loaded = false; } }
    match loadfn("EvalCoord1xvOES") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord1xvOES = transmute(ptr); EvalCoord1xvOES::is_loaded = true; }, _ => unsafe { EvalCoord1xvOES::is_loaded = false; } }
    match loadfn("EvalCoord2d") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2d = transmute(ptr); EvalCoord2d::is_loaded = true; }, _ => unsafe { EvalCoord2d::is_loaded = false; } }
    match loadfn("EvalCoord2dv") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2dv = transmute(ptr); EvalCoord2dv::is_loaded = true; }, _ => unsafe { EvalCoord2dv::is_loaded = false; } }
    match loadfn("EvalCoord2f") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2f = transmute(ptr); EvalCoord2f::is_loaded = true; }, _ => unsafe { EvalCoord2f::is_loaded = false; } }
    match loadfn("EvalCoord2fv") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2fv = transmute(ptr); EvalCoord2fv::is_loaded = true; }, _ => unsafe { EvalCoord2fv::is_loaded = false; } }
    match loadfn("EvalCoord2xOES") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2xOES = transmute(ptr); EvalCoord2xOES::is_loaded = true; }, _ => unsafe { EvalCoord2xOES::is_loaded = false; } }
    match loadfn("EvalCoord2xvOES") { ptr if !ptr.is_null() => unsafe { storage::EvalCoord2xvOES = transmute(ptr); EvalCoord2xvOES::is_loaded = true; }, _ => unsafe { EvalCoord2xvOES::is_loaded = false; } }
    match loadfn("EvalMapsNV") { ptr if !ptr.is_null() => unsafe { storage::EvalMapsNV = transmute(ptr); EvalMapsNV::is_loaded = true; }, _ => unsafe { EvalMapsNV::is_loaded = false; } }
    match loadfn("EvalMesh1") { ptr if !ptr.is_null() => unsafe { storage::EvalMesh1 = transmute(ptr); EvalMesh1::is_loaded = true; }, _ => unsafe { EvalMesh1::is_loaded = false; } }
    match loadfn("EvalMesh2") { ptr if !ptr.is_null() => unsafe { storage::EvalMesh2 = transmute(ptr); EvalMesh2::is_loaded = true; }, _ => unsafe { EvalMesh2::is_loaded = false; } }
    match loadfn("EvalPoint1") { ptr if !ptr.is_null() => unsafe { storage::EvalPoint1 = transmute(ptr); EvalPoint1::is_loaded = true; }, _ => unsafe { EvalPoint1::is_loaded = false; } }
    match loadfn("EvalPoint2") { ptr if !ptr.is_null() => unsafe { storage::EvalPoint2 = transmute(ptr); EvalPoint2::is_loaded = true; }, _ => unsafe { EvalPoint2::is_loaded = false; } }
    match loadfn("ExecuteProgramNV") { ptr if !ptr.is_null() => unsafe { storage::ExecuteProgramNV = transmute(ptr); ExecuteProgramNV::is_loaded = true; }, _ => unsafe { ExecuteProgramNV::is_loaded = false; } }
    match loadfn("ExtGetBufferPointervQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetBufferPointervQCOM = transmute(ptr); ExtGetBufferPointervQCOM::is_loaded = true; }, _ => unsafe { ExtGetBufferPointervQCOM::is_loaded = false; } }
    match loadfn("ExtGetBuffersQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetBuffersQCOM = transmute(ptr); ExtGetBuffersQCOM::is_loaded = true; }, _ => unsafe { ExtGetBuffersQCOM::is_loaded = false; } }
    match loadfn("ExtGetFramebuffersQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetFramebuffersQCOM = transmute(ptr); ExtGetFramebuffersQCOM::is_loaded = true; }, _ => unsafe { ExtGetFramebuffersQCOM::is_loaded = false; } }
    match loadfn("ExtGetProgramBinarySourceQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetProgramBinarySourceQCOM = transmute(ptr); ExtGetProgramBinarySourceQCOM::is_loaded = true; }, _ => unsafe { ExtGetProgramBinarySourceQCOM::is_loaded = false; } }
    match loadfn("ExtGetProgramsQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetProgramsQCOM = transmute(ptr); ExtGetProgramsQCOM::is_loaded = true; }, _ => unsafe { ExtGetProgramsQCOM::is_loaded = false; } }
    match loadfn("ExtGetRenderbuffersQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetRenderbuffersQCOM = transmute(ptr); ExtGetRenderbuffersQCOM::is_loaded = true; }, _ => unsafe { ExtGetRenderbuffersQCOM::is_loaded = false; } }
    match loadfn("ExtGetShadersQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetShadersQCOM = transmute(ptr); ExtGetShadersQCOM::is_loaded = true; }, _ => unsafe { ExtGetShadersQCOM::is_loaded = false; } }
    match loadfn("ExtGetTexLevelParameterivQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetTexLevelParameterivQCOM = transmute(ptr); ExtGetTexLevelParameterivQCOM::is_loaded = true; }, _ => unsafe { ExtGetTexLevelParameterivQCOM::is_loaded = false; } }
    match loadfn("ExtGetTexSubImageQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetTexSubImageQCOM = transmute(ptr); ExtGetTexSubImageQCOM::is_loaded = true; }, _ => unsafe { ExtGetTexSubImageQCOM::is_loaded = false; } }
    match loadfn("ExtGetTexturesQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtGetTexturesQCOM = transmute(ptr); ExtGetTexturesQCOM::is_loaded = true; }, _ => unsafe { ExtGetTexturesQCOM::is_loaded = false; } }
    match loadfn("ExtIsProgramBinaryQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtIsProgramBinaryQCOM = transmute(ptr); ExtIsProgramBinaryQCOM::is_loaded = true; }, _ => unsafe { ExtIsProgramBinaryQCOM::is_loaded = false; } }
    match loadfn("ExtTexObjectStateOverrideiQCOM") { ptr if !ptr.is_null() => unsafe { storage::ExtTexObjectStateOverrideiQCOM = transmute(ptr); ExtTexObjectStateOverrideiQCOM::is_loaded = true; }, _ => unsafe { ExtTexObjectStateOverrideiQCOM::is_loaded = false; } }
    match loadfn("ExtractComponentEXT") { ptr if !ptr.is_null() => unsafe { storage::ExtractComponentEXT = transmute(ptr); ExtractComponentEXT::is_loaded = true; }, _ => unsafe { ExtractComponentEXT::is_loaded = false; } }
    match loadfn("FeedbackBuffer") { ptr if !ptr.is_null() => unsafe { storage::FeedbackBuffer = transmute(ptr); FeedbackBuffer::is_loaded = true; }, _ => unsafe { FeedbackBuffer::is_loaded = false; } }
    match loadfn("FeedbackBufferxOES") { ptr if !ptr.is_null() => unsafe { storage::FeedbackBufferxOES = transmute(ptr); FeedbackBufferxOES::is_loaded = true; }, _ => unsafe { FeedbackBufferxOES::is_loaded = false; } }
    match loadfn("FenceSync") { ptr if !ptr.is_null() => unsafe { storage::FenceSync = transmute(ptr); FenceSync::is_loaded = true; }, _ => unsafe { FenceSync::is_loaded = false; } }
    match loadfn("FenceSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FenceSyncAPPLE = transmute(ptr); FenceSyncAPPLE::is_loaded = true; }, _ => unsafe { FenceSyncAPPLE::is_loaded = false; } }
    match loadfn("FinalCombinerInputNV") { ptr if !ptr.is_null() => unsafe { storage::FinalCombinerInputNV = transmute(ptr); FinalCombinerInputNV::is_loaded = true; }, _ => unsafe { FinalCombinerInputNV::is_loaded = false; } }
    match loadfn("Finish") { ptr if !ptr.is_null() => unsafe { storage::Finish = transmute(ptr); Finish::is_loaded = true; }, _ => unsafe { Finish::is_loaded = false; } }
    match loadfn("FinishAsyncSGIX") { ptr if !ptr.is_null() => unsafe { storage::FinishAsyncSGIX = transmute(ptr); FinishAsyncSGIX::is_loaded = true; }, _ => unsafe { FinishAsyncSGIX::is_loaded = false; } }
    match loadfn("FinishFenceAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FinishFenceAPPLE = transmute(ptr); FinishFenceAPPLE::is_loaded = true; }, _ => unsafe { FinishFenceAPPLE::is_loaded = false; } }
    match loadfn("FinishFenceNV") { ptr if !ptr.is_null() => unsafe { storage::FinishFenceNV = transmute(ptr); FinishFenceNV::is_loaded = true; }, _ => unsafe { FinishFenceNV::is_loaded = false; } }
    match loadfn("FinishObjectAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FinishObjectAPPLE = transmute(ptr); FinishObjectAPPLE::is_loaded = true; }, _ => unsafe { FinishObjectAPPLE::is_loaded = false; } }
    match loadfn("FinishTextureSUNX") { ptr if !ptr.is_null() => unsafe { storage::FinishTextureSUNX = transmute(ptr); FinishTextureSUNX::is_loaded = true; }, _ => unsafe { FinishTextureSUNX::is_loaded = false; } }
    match loadfn("Flush") { ptr if !ptr.is_null() => unsafe { storage::Flush = transmute(ptr); Flush::is_loaded = true; }, _ => unsafe { Flush::is_loaded = false; } }
    match loadfn("FlushMappedBufferRange") { ptr if !ptr.is_null() => unsafe { storage::FlushMappedBufferRange = transmute(ptr); FlushMappedBufferRange::is_loaded = true; }, _ => unsafe { FlushMappedBufferRange::is_loaded = false; } }
    match loadfn("FlushMappedBufferRangeAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FlushMappedBufferRangeAPPLE = transmute(ptr); FlushMappedBufferRangeAPPLE::is_loaded = true; }, _ => unsafe { FlushMappedBufferRangeAPPLE::is_loaded = false; } }
    match loadfn("FlushMappedBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::FlushMappedBufferRangeEXT = transmute(ptr); FlushMappedBufferRangeEXT::is_loaded = true; }, _ => unsafe { FlushMappedBufferRangeEXT::is_loaded = false; } }
    match loadfn("FlushMappedNamedBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::FlushMappedNamedBufferRangeEXT = transmute(ptr); FlushMappedNamedBufferRangeEXT::is_loaded = true; }, _ => unsafe { FlushMappedNamedBufferRangeEXT::is_loaded = false; } }
    match loadfn("FlushPixelDataRangeNV") { ptr if !ptr.is_null() => unsafe { storage::FlushPixelDataRangeNV = transmute(ptr); FlushPixelDataRangeNV::is_loaded = true; }, _ => unsafe { FlushPixelDataRangeNV::is_loaded = false; } }
    match loadfn("FlushRasterSGIX") { ptr if !ptr.is_null() => unsafe { storage::FlushRasterSGIX = transmute(ptr); FlushRasterSGIX::is_loaded = true; }, _ => unsafe { FlushRasterSGIX::is_loaded = false; } }
    match loadfn("FlushStaticDataIBM") { ptr if !ptr.is_null() => unsafe { storage::FlushStaticDataIBM = transmute(ptr); FlushStaticDataIBM::is_loaded = true; }, _ => unsafe { FlushStaticDataIBM::is_loaded = false; } }
    match loadfn("FlushVertexArrayRangeAPPLE") { ptr if !ptr.is_null() => unsafe { storage::FlushVertexArrayRangeAPPLE = transmute(ptr); FlushVertexArrayRangeAPPLE::is_loaded = true; }, _ => unsafe { FlushVertexArrayRangeAPPLE::is_loaded = false; } }
    match loadfn("FlushVertexArrayRangeNV") { ptr if !ptr.is_null() => unsafe { storage::FlushVertexArrayRangeNV = transmute(ptr); FlushVertexArrayRangeNV::is_loaded = true; }, _ => unsafe { FlushVertexArrayRangeNV::is_loaded = false; } }
    match loadfn("FogCoordFormatNV") { ptr if !ptr.is_null() => unsafe { storage::FogCoordFormatNV = transmute(ptr); FogCoordFormatNV::is_loaded = true; }, _ => unsafe { FogCoordFormatNV::is_loaded = false; } }
    match loadfn("FogCoordPointer") { ptr if !ptr.is_null() => unsafe { storage::FogCoordPointer = transmute(ptr); FogCoordPointer::is_loaded = true; }, _ => unsafe { FogCoordPointer::is_loaded = false; } }
    match loadfn("FogCoordPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoordPointerEXT = transmute(ptr); FogCoordPointerEXT::is_loaded = true; }, _ => unsafe { FogCoordPointerEXT::is_loaded = false; } }
    match loadfn("FogCoordPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::FogCoordPointerListIBM = transmute(ptr); FogCoordPointerListIBM::is_loaded = true; }, _ => unsafe { FogCoordPointerListIBM::is_loaded = false; } }
    match loadfn("FogCoordd") { ptr if !ptr.is_null() => unsafe { storage::FogCoordd = transmute(ptr); FogCoordd::is_loaded = true; }, _ => unsafe { FogCoordd::is_loaded = false; } }
    match loadfn("FogCoorddEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoorddEXT = transmute(ptr); FogCoorddEXT::is_loaded = true; }, _ => unsafe { FogCoorddEXT::is_loaded = false; } }
    match loadfn("FogCoorddv") { ptr if !ptr.is_null() => unsafe { storage::FogCoorddv = transmute(ptr); FogCoorddv::is_loaded = true; }, _ => unsafe { FogCoorddv::is_loaded = false; } }
    match loadfn("FogCoorddvEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoorddvEXT = transmute(ptr); FogCoorddvEXT::is_loaded = true; }, _ => unsafe { FogCoorddvEXT::is_loaded = false; } }
    match loadfn("FogCoordf") { ptr if !ptr.is_null() => unsafe { storage::FogCoordf = transmute(ptr); FogCoordf::is_loaded = true; }, _ => unsafe { FogCoordf::is_loaded = false; } }
    match loadfn("FogCoordfEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoordfEXT = transmute(ptr); FogCoordfEXT::is_loaded = true; }, _ => unsafe { FogCoordfEXT::is_loaded = false; } }
    match loadfn("FogCoordfv") { ptr if !ptr.is_null() => unsafe { storage::FogCoordfv = transmute(ptr); FogCoordfv::is_loaded = true; }, _ => unsafe { FogCoordfv::is_loaded = false; } }
    match loadfn("FogCoordfvEXT") { ptr if !ptr.is_null() => unsafe { storage::FogCoordfvEXT = transmute(ptr); FogCoordfvEXT::is_loaded = true; }, _ => unsafe { FogCoordfvEXT::is_loaded = false; } }
    match loadfn("FogCoordhNV") { ptr if !ptr.is_null() => unsafe { storage::FogCoordhNV = transmute(ptr); FogCoordhNV::is_loaded = true; }, _ => unsafe { FogCoordhNV::is_loaded = false; } }
    match loadfn("FogCoordhvNV") { ptr if !ptr.is_null() => unsafe { storage::FogCoordhvNV = transmute(ptr); FogCoordhvNV::is_loaded = true; }, _ => unsafe { FogCoordhvNV::is_loaded = false; } }
    match loadfn("FogFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::FogFuncSGIS = transmute(ptr); FogFuncSGIS::is_loaded = true; }, _ => unsafe { FogFuncSGIS::is_loaded = false; } }
    match loadfn("Fogf") { ptr if !ptr.is_null() => unsafe { storage::Fogf = transmute(ptr); Fogf::is_loaded = true; }, _ => unsafe { Fogf::is_loaded = false; } }
    match loadfn("Fogfv") { ptr if !ptr.is_null() => unsafe { storage::Fogfv = transmute(ptr); Fogfv::is_loaded = true; }, _ => unsafe { Fogfv::is_loaded = false; } }
    match loadfn("Fogi") { ptr if !ptr.is_null() => unsafe { storage::Fogi = transmute(ptr); Fogi::is_loaded = true; }, _ => unsafe { Fogi::is_loaded = false; } }
    match loadfn("Fogiv") { ptr if !ptr.is_null() => unsafe { storage::Fogiv = transmute(ptr); Fogiv::is_loaded = true; }, _ => unsafe { Fogiv::is_loaded = false; } }
    match loadfn("Fogx") { ptr if !ptr.is_null() => unsafe { storage::Fogx = transmute(ptr); Fogx::is_loaded = true; }, _ => unsafe { Fogx::is_loaded = false; } }
    match loadfn("FogxOES") { ptr if !ptr.is_null() => unsafe { storage::FogxOES = transmute(ptr); FogxOES::is_loaded = true; }, _ => unsafe { FogxOES::is_loaded = false; } }
    match loadfn("Fogxv") { ptr if !ptr.is_null() => unsafe { storage::Fogxv = transmute(ptr); Fogxv::is_loaded = true; }, _ => unsafe { Fogxv::is_loaded = false; } }
    match loadfn("FogxvOES") { ptr if !ptr.is_null() => unsafe { storage::FogxvOES = transmute(ptr); FogxvOES::is_loaded = true; }, _ => unsafe { FogxvOES::is_loaded = false; } }
    match loadfn("FragmentColorMaterialSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentColorMaterialSGIX = transmute(ptr); FragmentColorMaterialSGIX::is_loaded = true; }, _ => unsafe { FragmentColorMaterialSGIX::is_loaded = false; } }
    match loadfn("FragmentLightModelfSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightModelfSGIX = transmute(ptr); FragmentLightModelfSGIX::is_loaded = true; }, _ => unsafe { FragmentLightModelfSGIX::is_loaded = false; } }
    match loadfn("FragmentLightModelfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightModelfvSGIX = transmute(ptr); FragmentLightModelfvSGIX::is_loaded = true; }, _ => unsafe { FragmentLightModelfvSGIX::is_loaded = false; } }
    match loadfn("FragmentLightModeliSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightModeliSGIX = transmute(ptr); FragmentLightModeliSGIX::is_loaded = true; }, _ => unsafe { FragmentLightModeliSGIX::is_loaded = false; } }
    match loadfn("FragmentLightModelivSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightModelivSGIX = transmute(ptr); FragmentLightModelivSGIX::is_loaded = true; }, _ => unsafe { FragmentLightModelivSGIX::is_loaded = false; } }
    match loadfn("FragmentLightfSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightfSGIX = transmute(ptr); FragmentLightfSGIX::is_loaded = true; }, _ => unsafe { FragmentLightfSGIX::is_loaded = false; } }
    match loadfn("FragmentLightfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightfvSGIX = transmute(ptr); FragmentLightfvSGIX::is_loaded = true; }, _ => unsafe { FragmentLightfvSGIX::is_loaded = false; } }
    match loadfn("FragmentLightiSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightiSGIX = transmute(ptr); FragmentLightiSGIX::is_loaded = true; }, _ => unsafe { FragmentLightiSGIX::is_loaded = false; } }
    match loadfn("FragmentLightivSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentLightivSGIX = transmute(ptr); FragmentLightivSGIX::is_loaded = true; }, _ => unsafe { FragmentLightivSGIX::is_loaded = false; } }
    match loadfn("FragmentMaterialfSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentMaterialfSGIX = transmute(ptr); FragmentMaterialfSGIX::is_loaded = true; }, _ => unsafe { FragmentMaterialfSGIX::is_loaded = false; } }
    match loadfn("FragmentMaterialfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentMaterialfvSGIX = transmute(ptr); FragmentMaterialfvSGIX::is_loaded = true; }, _ => unsafe { FragmentMaterialfvSGIX::is_loaded = false; } }
    match loadfn("FragmentMaterialiSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentMaterialiSGIX = transmute(ptr); FragmentMaterialiSGIX::is_loaded = true; }, _ => unsafe { FragmentMaterialiSGIX::is_loaded = false; } }
    match loadfn("FragmentMaterialivSGIX") { ptr if !ptr.is_null() => unsafe { storage::FragmentMaterialivSGIX = transmute(ptr); FragmentMaterialivSGIX::is_loaded = true; }, _ => unsafe { FragmentMaterialivSGIX::is_loaded = false; } }
    match loadfn("FrameTerminatorGREMEDY") { ptr if !ptr.is_null() => unsafe { storage::FrameTerminatorGREMEDY = transmute(ptr); FrameTerminatorGREMEDY::is_loaded = true; }, _ => unsafe { FrameTerminatorGREMEDY::is_loaded = false; } }
    match loadfn("FrameZoomSGIX") { ptr if !ptr.is_null() => unsafe { storage::FrameZoomSGIX = transmute(ptr); FrameZoomSGIX::is_loaded = true; }, _ => unsafe { FrameZoomSGIX::is_loaded = false; } }
    match loadfn("FramebufferDrawBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferDrawBufferEXT = transmute(ptr); FramebufferDrawBufferEXT::is_loaded = true; }, _ => unsafe { FramebufferDrawBufferEXT::is_loaded = false; } }
    match loadfn("FramebufferDrawBuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferDrawBuffersEXT = transmute(ptr); FramebufferDrawBuffersEXT::is_loaded = true; }, _ => unsafe { FramebufferDrawBuffersEXT::is_loaded = false; } }
    match loadfn("FramebufferParameteri") { ptr if !ptr.is_null() => unsafe { storage::FramebufferParameteri = transmute(ptr); FramebufferParameteri::is_loaded = true; }, _ => unsafe { FramebufferParameteri::is_loaded = false; } }
    match loadfn("FramebufferReadBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferReadBufferEXT = transmute(ptr); FramebufferReadBufferEXT::is_loaded = true; }, _ => unsafe { FramebufferReadBufferEXT::is_loaded = false; } }
    match loadfn("FramebufferRenderbuffer") { ptr if !ptr.is_null() => unsafe { storage::FramebufferRenderbuffer = transmute(ptr); FramebufferRenderbuffer::is_loaded = true; }, _ => unsafe { FramebufferRenderbuffer::is_loaded = false; } }
    match loadfn("FramebufferRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferRenderbufferEXT = transmute(ptr); FramebufferRenderbufferEXT::is_loaded = true; }, _ => unsafe { FramebufferRenderbufferEXT::is_loaded = false; } }
    match loadfn("FramebufferRenderbufferOES") { ptr if !ptr.is_null() => unsafe { storage::FramebufferRenderbufferOES = transmute(ptr); FramebufferRenderbufferOES::is_loaded = true; }, _ => unsafe { FramebufferRenderbufferOES::is_loaded = false; } }
    match loadfn("FramebufferTexture") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture = transmute(ptr); FramebufferTexture::is_loaded = true; }, _ => unsafe { FramebufferTexture::is_loaded = false; } }
    match loadfn("FramebufferTexture1D") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture1D = transmute(ptr); FramebufferTexture1D::is_loaded = true; }, _ => unsafe { FramebufferTexture1D::is_loaded = false; } }
    match loadfn("FramebufferTexture1DEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture1DEXT = transmute(ptr); FramebufferTexture1DEXT::is_loaded = true; }, _ => unsafe { FramebufferTexture1DEXT::is_loaded = false; } }
    match loadfn("FramebufferTexture2D") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2D = transmute(ptr); FramebufferTexture2D::is_loaded = true; }, _ => unsafe { FramebufferTexture2D::is_loaded = false; } }
    match loadfn("FramebufferTexture2DEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2DEXT = transmute(ptr); FramebufferTexture2DEXT::is_loaded = true; }, _ => unsafe { FramebufferTexture2DEXT::is_loaded = false; } }
    match loadfn("FramebufferTexture2DMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2DMultisampleEXT = transmute(ptr); FramebufferTexture2DMultisampleEXT::is_loaded = true; }, _ => unsafe { FramebufferTexture2DMultisampleEXT::is_loaded = false; } }
    match loadfn("FramebufferTexture2DMultisampleIMG") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2DMultisampleIMG = transmute(ptr); FramebufferTexture2DMultisampleIMG::is_loaded = true; }, _ => unsafe { FramebufferTexture2DMultisampleIMG::is_loaded = false; } }
    match loadfn("FramebufferTexture2DOES") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture2DOES = transmute(ptr); FramebufferTexture2DOES::is_loaded = true; }, _ => unsafe { FramebufferTexture2DOES::is_loaded = false; } }
    match loadfn("FramebufferTexture3D") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture3D = transmute(ptr); FramebufferTexture3D::is_loaded = true; }, _ => unsafe { FramebufferTexture3D::is_loaded = false; } }
    match loadfn("FramebufferTexture3DEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture3DEXT = transmute(ptr); FramebufferTexture3DEXT::is_loaded = true; }, _ => unsafe { FramebufferTexture3DEXT::is_loaded = false; } }
    match loadfn("FramebufferTexture3DOES") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTexture3DOES = transmute(ptr); FramebufferTexture3DOES::is_loaded = true; }, _ => unsafe { FramebufferTexture3DOES::is_loaded = false; } }
    match loadfn("FramebufferTextureARB") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureARB = transmute(ptr); FramebufferTextureARB::is_loaded = true; }, _ => unsafe { FramebufferTextureARB::is_loaded = false; } }
    match loadfn("FramebufferTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureEXT = transmute(ptr); FramebufferTextureEXT::is_loaded = true; }, _ => unsafe { FramebufferTextureEXT::is_loaded = false; } }
    match loadfn("FramebufferTextureFaceARB") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureFaceARB = transmute(ptr); FramebufferTextureFaceARB::is_loaded = true; }, _ => unsafe { FramebufferTextureFaceARB::is_loaded = false; } }
    match loadfn("FramebufferTextureFaceEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureFaceEXT = transmute(ptr); FramebufferTextureFaceEXT::is_loaded = true; }, _ => unsafe { FramebufferTextureFaceEXT::is_loaded = false; } }
    match loadfn("FramebufferTextureLayer") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureLayer = transmute(ptr); FramebufferTextureLayer::is_loaded = true; }, _ => unsafe { FramebufferTextureLayer::is_loaded = false; } }
    match loadfn("FramebufferTextureLayerARB") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureLayerARB = transmute(ptr); FramebufferTextureLayerARB::is_loaded = true; }, _ => unsafe { FramebufferTextureLayerARB::is_loaded = false; } }
    match loadfn("FramebufferTextureLayerEXT") { ptr if !ptr.is_null() => unsafe { storage::FramebufferTextureLayerEXT = transmute(ptr); FramebufferTextureLayerEXT::is_loaded = true; }, _ => unsafe { FramebufferTextureLayerEXT::is_loaded = false; } }
    match loadfn("FreeObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::FreeObjectBufferATI = transmute(ptr); FreeObjectBufferATI::is_loaded = true; }, _ => unsafe { FreeObjectBufferATI::is_loaded = false; } }
    match loadfn("FrontFace") { ptr if !ptr.is_null() => unsafe { storage::FrontFace = transmute(ptr); FrontFace::is_loaded = true; }, _ => unsafe { FrontFace::is_loaded = false; } }
    match loadfn("Frustum") { ptr if !ptr.is_null() => unsafe { storage::Frustum = transmute(ptr); Frustum::is_loaded = true; }, _ => unsafe { Frustum::is_loaded = false; } }
    match loadfn("Frustumf") { ptr if !ptr.is_null() => unsafe { storage::Frustumf = transmute(ptr); Frustumf::is_loaded = true; }, _ => unsafe { Frustumf::is_loaded = false; } }
    match loadfn("FrustumfOES") { ptr if !ptr.is_null() => unsafe { storage::FrustumfOES = transmute(ptr); FrustumfOES::is_loaded = true; }, _ => unsafe { FrustumfOES::is_loaded = false; } }
    match loadfn("Frustumx") { ptr if !ptr.is_null() => unsafe { storage::Frustumx = transmute(ptr); Frustumx::is_loaded = true; }, _ => unsafe { Frustumx::is_loaded = false; } }
    match loadfn("FrustumxOES") { ptr if !ptr.is_null() => unsafe { storage::FrustumxOES = transmute(ptr); FrustumxOES::is_loaded = true; }, _ => unsafe { FrustumxOES::is_loaded = false; } }
    match loadfn("GenAsyncMarkersSGIX") { ptr if !ptr.is_null() => unsafe { storage::GenAsyncMarkersSGIX = transmute(ptr); GenAsyncMarkersSGIX::is_loaded = true; }, _ => unsafe { GenAsyncMarkersSGIX::is_loaded = false; } }
    match loadfn("GenBuffers") { ptr if !ptr.is_null() => unsafe { storage::GenBuffers = transmute(ptr); GenBuffers::is_loaded = true; }, _ => unsafe { GenBuffers::is_loaded = false; } }
    match loadfn("GenBuffersARB") { ptr if !ptr.is_null() => unsafe { storage::GenBuffersARB = transmute(ptr); GenBuffersARB::is_loaded = true; }, _ => unsafe { GenBuffersARB::is_loaded = false; } }
    match loadfn("GenFencesAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GenFencesAPPLE = transmute(ptr); GenFencesAPPLE::is_loaded = true; }, _ => unsafe { GenFencesAPPLE::is_loaded = false; } }
    match loadfn("GenFencesNV") { ptr if !ptr.is_null() => unsafe { storage::GenFencesNV = transmute(ptr); GenFencesNV::is_loaded = true; }, _ => unsafe { GenFencesNV::is_loaded = false; } }
    match loadfn("GenFragmentShadersATI") { ptr if !ptr.is_null() => unsafe { storage::GenFragmentShadersATI = transmute(ptr); GenFragmentShadersATI::is_loaded = true; }, _ => unsafe { GenFragmentShadersATI::is_loaded = false; } }
    match loadfn("GenFramebuffers") { ptr if !ptr.is_null() => unsafe { storage::GenFramebuffers = transmute(ptr); GenFramebuffers::is_loaded = true; }, _ => unsafe { GenFramebuffers::is_loaded = false; } }
    match loadfn("GenFramebuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::GenFramebuffersEXT = transmute(ptr); GenFramebuffersEXT::is_loaded = true; }, _ => unsafe { GenFramebuffersEXT::is_loaded = false; } }
    match loadfn("GenFramebuffersOES") { ptr if !ptr.is_null() => unsafe { storage::GenFramebuffersOES = transmute(ptr); GenFramebuffersOES::is_loaded = true; }, _ => unsafe { GenFramebuffersOES::is_loaded = false; } }
    match loadfn("GenLists") { ptr if !ptr.is_null() => unsafe { storage::GenLists = transmute(ptr); GenLists::is_loaded = true; }, _ => unsafe { GenLists::is_loaded = false; } }
    match loadfn("GenNamesAMD") { ptr if !ptr.is_null() => unsafe { storage::GenNamesAMD = transmute(ptr); GenNamesAMD::is_loaded = true; }, _ => unsafe { GenNamesAMD::is_loaded = false; } }
    match loadfn("GenOcclusionQueriesNV") { ptr if !ptr.is_null() => unsafe { storage::GenOcclusionQueriesNV = transmute(ptr); GenOcclusionQueriesNV::is_loaded = true; }, _ => unsafe { GenOcclusionQueriesNV::is_loaded = false; } }
    match loadfn("GenPathsNV") { ptr if !ptr.is_null() => unsafe { storage::GenPathsNV = transmute(ptr); GenPathsNV::is_loaded = true; }, _ => unsafe { GenPathsNV::is_loaded = false; } }
    match loadfn("GenPerfMonitorsAMD") { ptr if !ptr.is_null() => unsafe { storage::GenPerfMonitorsAMD = transmute(ptr); GenPerfMonitorsAMD::is_loaded = true; }, _ => unsafe { GenPerfMonitorsAMD::is_loaded = false; } }
    match loadfn("GenProgramPipelines") { ptr if !ptr.is_null() => unsafe { storage::GenProgramPipelines = transmute(ptr); GenProgramPipelines::is_loaded = true; }, _ => unsafe { GenProgramPipelines::is_loaded = false; } }
    match loadfn("GenProgramPipelinesEXT") { ptr if !ptr.is_null() => unsafe { storage::GenProgramPipelinesEXT = transmute(ptr); GenProgramPipelinesEXT::is_loaded = true; }, _ => unsafe { GenProgramPipelinesEXT::is_loaded = false; } }
    match loadfn("GenProgramsARB") { ptr if !ptr.is_null() => unsafe { storage::GenProgramsARB = transmute(ptr); GenProgramsARB::is_loaded = true; }, _ => unsafe { GenProgramsARB::is_loaded = false; } }
    match loadfn("GenProgramsNV") { ptr if !ptr.is_null() => unsafe { storage::GenProgramsNV = transmute(ptr); GenProgramsNV::is_loaded = true; }, _ => unsafe { GenProgramsNV::is_loaded = false; } }
    match loadfn("GenQueries") { ptr if !ptr.is_null() => unsafe { storage::GenQueries = transmute(ptr); GenQueries::is_loaded = true; }, _ => unsafe { GenQueries::is_loaded = false; } }
    match loadfn("GenQueriesARB") { ptr if !ptr.is_null() => unsafe { storage::GenQueriesARB = transmute(ptr); GenQueriesARB::is_loaded = true; }, _ => unsafe { GenQueriesARB::is_loaded = false; } }
    match loadfn("GenQueriesEXT") { ptr if !ptr.is_null() => unsafe { storage::GenQueriesEXT = transmute(ptr); GenQueriesEXT::is_loaded = true; }, _ => unsafe { GenQueriesEXT::is_loaded = false; } }
    match loadfn("GenRenderbuffers") { ptr if !ptr.is_null() => unsafe { storage::GenRenderbuffers = transmute(ptr); GenRenderbuffers::is_loaded = true; }, _ => unsafe { GenRenderbuffers::is_loaded = false; } }
    match loadfn("GenRenderbuffersEXT") { ptr if !ptr.is_null() => unsafe { storage::GenRenderbuffersEXT = transmute(ptr); GenRenderbuffersEXT::is_loaded = true; }, _ => unsafe { GenRenderbuffersEXT::is_loaded = false; } }
    match loadfn("GenRenderbuffersOES") { ptr if !ptr.is_null() => unsafe { storage::GenRenderbuffersOES = transmute(ptr); GenRenderbuffersOES::is_loaded = true; }, _ => unsafe { GenRenderbuffersOES::is_loaded = false; } }
    match loadfn("GenSamplers") { ptr if !ptr.is_null() => unsafe { storage::GenSamplers = transmute(ptr); GenSamplers::is_loaded = true; }, _ => unsafe { GenSamplers::is_loaded = false; } }
    match loadfn("GenSymbolsEXT") { ptr if !ptr.is_null() => unsafe { storage::GenSymbolsEXT = transmute(ptr); GenSymbolsEXT::is_loaded = true; }, _ => unsafe { GenSymbolsEXT::is_loaded = false; } }
    match loadfn("GenTextures") { ptr if !ptr.is_null() => unsafe { storage::GenTextures = transmute(ptr); GenTextures::is_loaded = true; }, _ => unsafe { GenTextures::is_loaded = false; } }
    match loadfn("GenTexturesEXT") { ptr if !ptr.is_null() => unsafe { storage::GenTexturesEXT = transmute(ptr); GenTexturesEXT::is_loaded = true; }, _ => unsafe { GenTexturesEXT::is_loaded = false; } }
    match loadfn("GenTransformFeedbacks") { ptr if !ptr.is_null() => unsafe { storage::GenTransformFeedbacks = transmute(ptr); GenTransformFeedbacks::is_loaded = true; }, _ => unsafe { GenTransformFeedbacks::is_loaded = false; } }
    match loadfn("GenTransformFeedbacksNV") { ptr if !ptr.is_null() => unsafe { storage::GenTransformFeedbacksNV = transmute(ptr); GenTransformFeedbacksNV::is_loaded = true; }, _ => unsafe { GenTransformFeedbacksNV::is_loaded = false; } }
    match loadfn("GenVertexArrays") { ptr if !ptr.is_null() => unsafe { storage::GenVertexArrays = transmute(ptr); GenVertexArrays::is_loaded = true; }, _ => unsafe { GenVertexArrays::is_loaded = false; } }
    match loadfn("GenVertexArraysAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GenVertexArraysAPPLE = transmute(ptr); GenVertexArraysAPPLE::is_loaded = true; }, _ => unsafe { GenVertexArraysAPPLE::is_loaded = false; } }
    match loadfn("GenVertexArraysOES") { ptr if !ptr.is_null() => unsafe { storage::GenVertexArraysOES = transmute(ptr); GenVertexArraysOES::is_loaded = true; }, _ => unsafe { GenVertexArraysOES::is_loaded = false; } }
    match loadfn("GenVertexShadersEXT") { ptr if !ptr.is_null() => unsafe { storage::GenVertexShadersEXT = transmute(ptr); GenVertexShadersEXT::is_loaded = true; }, _ => unsafe { GenVertexShadersEXT::is_loaded = false; } }
    match loadfn("GenerateMipmap") { ptr if !ptr.is_null() => unsafe { storage::GenerateMipmap = transmute(ptr); GenerateMipmap::is_loaded = true; }, _ => unsafe { GenerateMipmap::is_loaded = false; } }
    match loadfn("GenerateMipmapEXT") { ptr if !ptr.is_null() => unsafe { storage::GenerateMipmapEXT = transmute(ptr); GenerateMipmapEXT::is_loaded = true; }, _ => unsafe { GenerateMipmapEXT::is_loaded = false; } }
    match loadfn("GenerateMipmapOES") { ptr if !ptr.is_null() => unsafe { storage::GenerateMipmapOES = transmute(ptr); GenerateMipmapOES::is_loaded = true; }, _ => unsafe { GenerateMipmapOES::is_loaded = false; } }
    match loadfn("GenerateMultiTexMipmapEXT") { ptr if !ptr.is_null() => unsafe { storage::GenerateMultiTexMipmapEXT = transmute(ptr); GenerateMultiTexMipmapEXT::is_loaded = true; }, _ => unsafe { GenerateMultiTexMipmapEXT::is_loaded = false; } }
    match loadfn("GenerateTextureMipmapEXT") { ptr if !ptr.is_null() => unsafe { storage::GenerateTextureMipmapEXT = transmute(ptr); GenerateTextureMipmapEXT::is_loaded = true; }, _ => unsafe { GenerateTextureMipmapEXT::is_loaded = false; } }
    match loadfn("GetActiveAtomicCounterBufferiv") { ptr if !ptr.is_null() => unsafe { storage::GetActiveAtomicCounterBufferiv = transmute(ptr); GetActiveAtomicCounterBufferiv::is_loaded = true; }, _ => unsafe { GetActiveAtomicCounterBufferiv::is_loaded = false; } }
    match loadfn("GetActiveAttrib") { ptr if !ptr.is_null() => unsafe { storage::GetActiveAttrib = transmute(ptr); GetActiveAttrib::is_loaded = true; }, _ => unsafe { GetActiveAttrib::is_loaded = false; } }
    match loadfn("GetActiveAttribARB") { ptr if !ptr.is_null() => unsafe { storage::GetActiveAttribARB = transmute(ptr); GetActiveAttribARB::is_loaded = true; }, _ => unsafe { GetActiveAttribARB::is_loaded = false; } }
    match loadfn("GetActiveSubroutineName") { ptr if !ptr.is_null() => unsafe { storage::GetActiveSubroutineName = transmute(ptr); GetActiveSubroutineName::is_loaded = true; }, _ => unsafe { GetActiveSubroutineName::is_loaded = false; } }
    match loadfn("GetActiveSubroutineUniformName") { ptr if !ptr.is_null() => unsafe { storage::GetActiveSubroutineUniformName = transmute(ptr); GetActiveSubroutineUniformName::is_loaded = true; }, _ => unsafe { GetActiveSubroutineUniformName::is_loaded = false; } }
    match loadfn("GetActiveSubroutineUniformiv") { ptr if !ptr.is_null() => unsafe { storage::GetActiveSubroutineUniformiv = transmute(ptr); GetActiveSubroutineUniformiv::is_loaded = true; }, _ => unsafe { GetActiveSubroutineUniformiv::is_loaded = false; } }
    match loadfn("GetActiveUniform") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniform = transmute(ptr); GetActiveUniform::is_loaded = true; }, _ => unsafe { GetActiveUniform::is_loaded = false; } }
    match loadfn("GetActiveUniformARB") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformARB = transmute(ptr); GetActiveUniformARB::is_loaded = true; }, _ => unsafe { GetActiveUniformARB::is_loaded = false; } }
    match loadfn("GetActiveUniformBlockName") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformBlockName = transmute(ptr); GetActiveUniformBlockName::is_loaded = true; }, _ => unsafe { GetActiveUniformBlockName::is_loaded = false; } }
    match loadfn("GetActiveUniformBlockiv") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformBlockiv = transmute(ptr); GetActiveUniformBlockiv::is_loaded = true; }, _ => unsafe { GetActiveUniformBlockiv::is_loaded = false; } }
    match loadfn("GetActiveUniformName") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformName = transmute(ptr); GetActiveUniformName::is_loaded = true; }, _ => unsafe { GetActiveUniformName::is_loaded = false; } }
    match loadfn("GetActiveUniformsiv") { ptr if !ptr.is_null() => unsafe { storage::GetActiveUniformsiv = transmute(ptr); GetActiveUniformsiv::is_loaded = true; }, _ => unsafe { GetActiveUniformsiv::is_loaded = false; } }
    match loadfn("GetActiveVaryingNV") { ptr if !ptr.is_null() => unsafe { storage::GetActiveVaryingNV = transmute(ptr); GetActiveVaryingNV::is_loaded = true; }, _ => unsafe { GetActiveVaryingNV::is_loaded = false; } }
    match loadfn("GetArrayObjectfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetArrayObjectfvATI = transmute(ptr); GetArrayObjectfvATI::is_loaded = true; }, _ => unsafe { GetArrayObjectfvATI::is_loaded = false; } }
    match loadfn("GetArrayObjectivATI") { ptr if !ptr.is_null() => unsafe { storage::GetArrayObjectivATI = transmute(ptr); GetArrayObjectivATI::is_loaded = true; }, _ => unsafe { GetArrayObjectivATI::is_loaded = false; } }
    match loadfn("GetAttachedObjectsARB") { ptr if !ptr.is_null() => unsafe { storage::GetAttachedObjectsARB = transmute(ptr); GetAttachedObjectsARB::is_loaded = true; }, _ => unsafe { GetAttachedObjectsARB::is_loaded = false; } }
    match loadfn("GetAttachedShaders") { ptr if !ptr.is_null() => unsafe { storage::GetAttachedShaders = transmute(ptr); GetAttachedShaders::is_loaded = true; }, _ => unsafe { GetAttachedShaders::is_loaded = false; } }
    match loadfn("GetAttribLocation") { ptr if !ptr.is_null() => unsafe { storage::GetAttribLocation = transmute(ptr); GetAttribLocation::is_loaded = true; }, _ => unsafe { GetAttribLocation::is_loaded = false; } }
    match loadfn("GetAttribLocationARB") { ptr if !ptr.is_null() => unsafe { storage::GetAttribLocationARB = transmute(ptr); GetAttribLocationARB::is_loaded = true; }, _ => unsafe { GetAttribLocationARB::is_loaded = false; } }
    match loadfn("GetBooleanIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetBooleanIndexedvEXT = transmute(ptr); GetBooleanIndexedvEXT::is_loaded = true; }, _ => unsafe { GetBooleanIndexedvEXT::is_loaded = false; } }
    match loadfn("GetBooleani_v") { ptr if !ptr.is_null() => unsafe { storage::GetBooleani_v = transmute(ptr); GetBooleani_v::is_loaded = true; }, _ => unsafe { GetBooleani_v::is_loaded = false; } }
    match loadfn("GetBooleanv") { ptr if !ptr.is_null() => unsafe { storage::GetBooleanv = transmute(ptr); GetBooleanv::is_loaded = true; }, _ => unsafe { GetBooleanv::is_loaded = false; } }
    match loadfn("GetBufferParameteri64v") { ptr if !ptr.is_null() => unsafe { storage::GetBufferParameteri64v = transmute(ptr); GetBufferParameteri64v::is_loaded = true; }, _ => unsafe { GetBufferParameteri64v::is_loaded = false; } }
    match loadfn("GetBufferParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetBufferParameteriv = transmute(ptr); GetBufferParameteriv::is_loaded = true; }, _ => unsafe { GetBufferParameteriv::is_loaded = false; } }
    match loadfn("GetBufferParameterivARB") { ptr if !ptr.is_null() => unsafe { storage::GetBufferParameterivARB = transmute(ptr); GetBufferParameterivARB::is_loaded = true; }, _ => unsafe { GetBufferParameterivARB::is_loaded = false; } }
    match loadfn("GetBufferParameterui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetBufferParameterui64vNV = transmute(ptr); GetBufferParameterui64vNV::is_loaded = true; }, _ => unsafe { GetBufferParameterui64vNV::is_loaded = false; } }
    match loadfn("GetBufferPointerv") { ptr if !ptr.is_null() => unsafe { storage::GetBufferPointerv = transmute(ptr); GetBufferPointerv::is_loaded = true; }, _ => unsafe { GetBufferPointerv::is_loaded = false; } }
    match loadfn("GetBufferPointervARB") { ptr if !ptr.is_null() => unsafe { storage::GetBufferPointervARB = transmute(ptr); GetBufferPointervARB::is_loaded = true; }, _ => unsafe { GetBufferPointervARB::is_loaded = false; } }
    match loadfn("GetBufferPointervOES") { ptr if !ptr.is_null() => unsafe { storage::GetBufferPointervOES = transmute(ptr); GetBufferPointervOES::is_loaded = true; }, _ => unsafe { GetBufferPointervOES::is_loaded = false; } }
    match loadfn("GetBufferSubData") { ptr if !ptr.is_null() => unsafe { storage::GetBufferSubData = transmute(ptr); GetBufferSubData::is_loaded = true; }, _ => unsafe { GetBufferSubData::is_loaded = false; } }
    match loadfn("GetBufferSubDataARB") { ptr if !ptr.is_null() => unsafe { storage::GetBufferSubDataARB = transmute(ptr); GetBufferSubDataARB::is_loaded = true; }, _ => unsafe { GetBufferSubDataARB::is_loaded = false; } }
    match loadfn("GetClipPlane") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlane = transmute(ptr); GetClipPlane::is_loaded = true; }, _ => unsafe { GetClipPlane::is_loaded = false; } }
    match loadfn("GetClipPlanef") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlanef = transmute(ptr); GetClipPlanef::is_loaded = true; }, _ => unsafe { GetClipPlanef::is_loaded = false; } }
    match loadfn("GetClipPlanefOES") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlanefOES = transmute(ptr); GetClipPlanefOES::is_loaded = true; }, _ => unsafe { GetClipPlanefOES::is_loaded = false; } }
    match loadfn("GetClipPlanex") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlanex = transmute(ptr); GetClipPlanex::is_loaded = true; }, _ => unsafe { GetClipPlanex::is_loaded = false; } }
    match loadfn("GetClipPlanexOES") { ptr if !ptr.is_null() => unsafe { storage::GetClipPlanexOES = transmute(ptr); GetClipPlanexOES::is_loaded = true; }, _ => unsafe { GetClipPlanexOES::is_loaded = false; } }
    match loadfn("GetColorTable") { ptr if !ptr.is_null() => unsafe { storage::GetColorTable = transmute(ptr); GetColorTable::is_loaded = true; }, _ => unsafe { GetColorTable::is_loaded = false; } }
    match loadfn("GetColorTableEXT") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableEXT = transmute(ptr); GetColorTableEXT::is_loaded = true; }, _ => unsafe { GetColorTableEXT::is_loaded = false; } }
    match loadfn("GetColorTableParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterfv = transmute(ptr); GetColorTableParameterfv::is_loaded = true; }, _ => unsafe { GetColorTableParameterfv::is_loaded = false; } }
    match loadfn("GetColorTableParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterfvEXT = transmute(ptr); GetColorTableParameterfvEXT::is_loaded = true; }, _ => unsafe { GetColorTableParameterfvEXT::is_loaded = false; } }
    match loadfn("GetColorTableParameterfvSGI") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterfvSGI = transmute(ptr); GetColorTableParameterfvSGI::is_loaded = true; }, _ => unsafe { GetColorTableParameterfvSGI::is_loaded = false; } }
    match loadfn("GetColorTableParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameteriv = transmute(ptr); GetColorTableParameteriv::is_loaded = true; }, _ => unsafe { GetColorTableParameteriv::is_loaded = false; } }
    match loadfn("GetColorTableParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterivEXT = transmute(ptr); GetColorTableParameterivEXT::is_loaded = true; }, _ => unsafe { GetColorTableParameterivEXT::is_loaded = false; } }
    match loadfn("GetColorTableParameterivSGI") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableParameterivSGI = transmute(ptr); GetColorTableParameterivSGI::is_loaded = true; }, _ => unsafe { GetColorTableParameterivSGI::is_loaded = false; } }
    match loadfn("GetColorTableSGI") { ptr if !ptr.is_null() => unsafe { storage::GetColorTableSGI = transmute(ptr); GetColorTableSGI::is_loaded = true; }, _ => unsafe { GetColorTableSGI::is_loaded = false; } }
    match loadfn("GetCombinerInputParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerInputParameterfvNV = transmute(ptr); GetCombinerInputParameterfvNV::is_loaded = true; }, _ => unsafe { GetCombinerInputParameterfvNV::is_loaded = false; } }
    match loadfn("GetCombinerInputParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerInputParameterivNV = transmute(ptr); GetCombinerInputParameterivNV::is_loaded = true; }, _ => unsafe { GetCombinerInputParameterivNV::is_loaded = false; } }
    match loadfn("GetCombinerOutputParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerOutputParameterfvNV = transmute(ptr); GetCombinerOutputParameterfvNV::is_loaded = true; }, _ => unsafe { GetCombinerOutputParameterfvNV::is_loaded = false; } }
    match loadfn("GetCombinerOutputParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerOutputParameterivNV = transmute(ptr); GetCombinerOutputParameterivNV::is_loaded = true; }, _ => unsafe { GetCombinerOutputParameterivNV::is_loaded = false; } }
    match loadfn("GetCombinerStageParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetCombinerStageParameterfvNV = transmute(ptr); GetCombinerStageParameterfvNV::is_loaded = true; }, _ => unsafe { GetCombinerStageParameterfvNV::is_loaded = false; } }
    match loadfn("GetCompressedMultiTexImageEXT") { ptr if !ptr.is_null() => unsafe { storage::GetCompressedMultiTexImageEXT = transmute(ptr); GetCompressedMultiTexImageEXT::is_loaded = true; }, _ => unsafe { GetCompressedMultiTexImageEXT::is_loaded = false; } }
    match loadfn("GetCompressedTexImage") { ptr if !ptr.is_null() => unsafe { storage::GetCompressedTexImage = transmute(ptr); GetCompressedTexImage::is_loaded = true; }, _ => unsafe { GetCompressedTexImage::is_loaded = false; } }
    match loadfn("GetCompressedTexImageARB") { ptr if !ptr.is_null() => unsafe { storage::GetCompressedTexImageARB = transmute(ptr); GetCompressedTexImageARB::is_loaded = true; }, _ => unsafe { GetCompressedTexImageARB::is_loaded = false; } }
    match loadfn("GetCompressedTextureImageEXT") { ptr if !ptr.is_null() => unsafe { storage::GetCompressedTextureImageEXT = transmute(ptr); GetCompressedTextureImageEXT::is_loaded = true; }, _ => unsafe { GetCompressedTextureImageEXT::is_loaded = false; } }
    match loadfn("GetConvolutionFilter") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionFilter = transmute(ptr); GetConvolutionFilter::is_loaded = true; }, _ => unsafe { GetConvolutionFilter::is_loaded = false; } }
    match loadfn("GetConvolutionFilterEXT") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionFilterEXT = transmute(ptr); GetConvolutionFilterEXT::is_loaded = true; }, _ => unsafe { GetConvolutionFilterEXT::is_loaded = false; } }
    match loadfn("GetConvolutionParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameterfv = transmute(ptr); GetConvolutionParameterfv::is_loaded = true; }, _ => unsafe { GetConvolutionParameterfv::is_loaded = false; } }
    match loadfn("GetConvolutionParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameterfvEXT = transmute(ptr); GetConvolutionParameterfvEXT::is_loaded = true; }, _ => unsafe { GetConvolutionParameterfvEXT::is_loaded = false; } }
    match loadfn("GetConvolutionParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameteriv = transmute(ptr); GetConvolutionParameteriv::is_loaded = true; }, _ => unsafe { GetConvolutionParameteriv::is_loaded = false; } }
    match loadfn("GetConvolutionParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameterivEXT = transmute(ptr); GetConvolutionParameterivEXT::is_loaded = true; }, _ => unsafe { GetConvolutionParameterivEXT::is_loaded = false; } }
    match loadfn("GetConvolutionParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetConvolutionParameterxvOES = transmute(ptr); GetConvolutionParameterxvOES::is_loaded = true; }, _ => unsafe { GetConvolutionParameterxvOES::is_loaded = false; } }
    match loadfn("GetDebugMessageLog") { ptr if !ptr.is_null() => unsafe { storage::GetDebugMessageLog = transmute(ptr); GetDebugMessageLog::is_loaded = true; }, _ => unsafe { GetDebugMessageLog::is_loaded = false; } }
    match loadfn("GetDebugMessageLogAMD") { ptr if !ptr.is_null() => unsafe { storage::GetDebugMessageLogAMD = transmute(ptr); GetDebugMessageLogAMD::is_loaded = true; }, _ => unsafe { GetDebugMessageLogAMD::is_loaded = false; } }
    match loadfn("GetDebugMessageLogARB") { ptr if !ptr.is_null() => unsafe { storage::GetDebugMessageLogARB = transmute(ptr); GetDebugMessageLogARB::is_loaded = true; }, _ => unsafe { GetDebugMessageLogARB::is_loaded = false; } }
    match loadfn("GetDebugMessageLogKHR") { ptr if !ptr.is_null() => unsafe { storage::GetDebugMessageLogKHR = transmute(ptr); GetDebugMessageLogKHR::is_loaded = true; }, _ => unsafe { GetDebugMessageLogKHR::is_loaded = false; } }
    match loadfn("GetDetailTexFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetDetailTexFuncSGIS = transmute(ptr); GetDetailTexFuncSGIS::is_loaded = true; }, _ => unsafe { GetDetailTexFuncSGIS::is_loaded = false; } }
    match loadfn("GetDoubleIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetDoubleIndexedvEXT = transmute(ptr); GetDoubleIndexedvEXT::is_loaded = true; }, _ => unsafe { GetDoubleIndexedvEXT::is_loaded = false; } }
    match loadfn("GetDoublei_v") { ptr if !ptr.is_null() => unsafe { storage::GetDoublei_v = transmute(ptr); GetDoublei_v::is_loaded = true; }, _ => unsafe { GetDoublei_v::is_loaded = false; } }
    match loadfn("GetDoublei_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetDoublei_vEXT = transmute(ptr); GetDoublei_vEXT::is_loaded = true; }, _ => unsafe { GetDoublei_vEXT::is_loaded = false; } }
    match loadfn("GetDoublev") { ptr if !ptr.is_null() => unsafe { storage::GetDoublev = transmute(ptr); GetDoublev::is_loaded = true; }, _ => unsafe { GetDoublev::is_loaded = false; } }
    match loadfn("GetDriverControlStringQCOM") { ptr if !ptr.is_null() => unsafe { storage::GetDriverControlStringQCOM = transmute(ptr); GetDriverControlStringQCOM::is_loaded = true; }, _ => unsafe { GetDriverControlStringQCOM::is_loaded = false; } }
    match loadfn("GetDriverControlsQCOM") { ptr if !ptr.is_null() => unsafe { storage::GetDriverControlsQCOM = transmute(ptr); GetDriverControlsQCOM::is_loaded = true; }, _ => unsafe { GetDriverControlsQCOM::is_loaded = false; } }
    match loadfn("GetError") { ptr if !ptr.is_null() => unsafe { storage::GetError = transmute(ptr); GetError::is_loaded = true; }, _ => unsafe { GetError::is_loaded = false; } }
    match loadfn("GetFenceivNV") { ptr if !ptr.is_null() => unsafe { storage::GetFenceivNV = transmute(ptr); GetFenceivNV::is_loaded = true; }, _ => unsafe { GetFenceivNV::is_loaded = false; } }
    match loadfn("GetFinalCombinerInputParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetFinalCombinerInputParameterfvNV = transmute(ptr); GetFinalCombinerInputParameterfvNV::is_loaded = true; }, _ => unsafe { GetFinalCombinerInputParameterfvNV::is_loaded = false; } }
    match loadfn("GetFinalCombinerInputParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetFinalCombinerInputParameterivNV = transmute(ptr); GetFinalCombinerInputParameterivNV::is_loaded = true; }, _ => unsafe { GetFinalCombinerInputParameterivNV::is_loaded = false; } }
    match loadfn("GetFixedv") { ptr if !ptr.is_null() => unsafe { storage::GetFixedv = transmute(ptr); GetFixedv::is_loaded = true; }, _ => unsafe { GetFixedv::is_loaded = false; } }
    match loadfn("GetFixedvOES") { ptr if !ptr.is_null() => unsafe { storage::GetFixedvOES = transmute(ptr); GetFixedvOES::is_loaded = true; }, _ => unsafe { GetFixedvOES::is_loaded = false; } }
    match loadfn("GetFloatIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFloatIndexedvEXT = transmute(ptr); GetFloatIndexedvEXT::is_loaded = true; }, _ => unsafe { GetFloatIndexedvEXT::is_loaded = false; } }
    match loadfn("GetFloati_v") { ptr if !ptr.is_null() => unsafe { storage::GetFloati_v = transmute(ptr); GetFloati_v::is_loaded = true; }, _ => unsafe { GetFloati_v::is_loaded = false; } }
    match loadfn("GetFloati_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFloati_vEXT = transmute(ptr); GetFloati_vEXT::is_loaded = true; }, _ => unsafe { GetFloati_vEXT::is_loaded = false; } }
    match loadfn("GetFloatv") { ptr if !ptr.is_null() => unsafe { storage::GetFloatv = transmute(ptr); GetFloatv::is_loaded = true; }, _ => unsafe { GetFloatv::is_loaded = false; } }
    match loadfn("GetFogFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetFogFuncSGIS = transmute(ptr); GetFogFuncSGIS::is_loaded = true; }, _ => unsafe { GetFogFuncSGIS::is_loaded = false; } }
    match loadfn("GetFragDataIndex") { ptr if !ptr.is_null() => unsafe { storage::GetFragDataIndex = transmute(ptr); GetFragDataIndex::is_loaded = true; }, _ => unsafe { GetFragDataIndex::is_loaded = false; } }
    match loadfn("GetFragDataLocation") { ptr if !ptr.is_null() => unsafe { storage::GetFragDataLocation = transmute(ptr); GetFragDataLocation::is_loaded = true; }, _ => unsafe { GetFragDataLocation::is_loaded = false; } }
    match loadfn("GetFragDataLocationEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFragDataLocationEXT = transmute(ptr); GetFragDataLocationEXT::is_loaded = true; }, _ => unsafe { GetFragDataLocationEXT::is_loaded = false; } }
    match loadfn("GetFragmentLightfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetFragmentLightfvSGIX = transmute(ptr); GetFragmentLightfvSGIX::is_loaded = true; }, _ => unsafe { GetFragmentLightfvSGIX::is_loaded = false; } }
    match loadfn("GetFragmentLightivSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetFragmentLightivSGIX = transmute(ptr); GetFragmentLightivSGIX::is_loaded = true; }, _ => unsafe { GetFragmentLightivSGIX::is_loaded = false; } }
    match loadfn("GetFragmentMaterialfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetFragmentMaterialfvSGIX = transmute(ptr); GetFragmentMaterialfvSGIX::is_loaded = true; }, _ => unsafe { GetFragmentMaterialfvSGIX::is_loaded = false; } }
    match loadfn("GetFragmentMaterialivSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetFragmentMaterialivSGIX = transmute(ptr); GetFragmentMaterialivSGIX::is_loaded = true; }, _ => unsafe { GetFragmentMaterialivSGIX::is_loaded = false; } }
    match loadfn("GetFramebufferAttachmentParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferAttachmentParameteriv = transmute(ptr); GetFramebufferAttachmentParameteriv::is_loaded = true; }, _ => unsafe { GetFramebufferAttachmentParameteriv::is_loaded = false; } }
    match loadfn("GetFramebufferAttachmentParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferAttachmentParameterivEXT = transmute(ptr); GetFramebufferAttachmentParameterivEXT::is_loaded = true; }, _ => unsafe { GetFramebufferAttachmentParameterivEXT::is_loaded = false; } }
    match loadfn("GetFramebufferAttachmentParameterivOES") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferAttachmentParameterivOES = transmute(ptr); GetFramebufferAttachmentParameterivOES::is_loaded = true; }, _ => unsafe { GetFramebufferAttachmentParameterivOES::is_loaded = false; } }
    match loadfn("GetFramebufferParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferParameteriv = transmute(ptr); GetFramebufferParameteriv::is_loaded = true; }, _ => unsafe { GetFramebufferParameteriv::is_loaded = false; } }
    match loadfn("GetFramebufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetFramebufferParameterivEXT = transmute(ptr); GetFramebufferParameterivEXT::is_loaded = true; }, _ => unsafe { GetFramebufferParameterivEXT::is_loaded = false; } }
    match loadfn("GetGraphicsResetStatusARB") { ptr if !ptr.is_null() => unsafe { storage::GetGraphicsResetStatusARB = transmute(ptr); GetGraphicsResetStatusARB::is_loaded = true; }, _ => unsafe { GetGraphicsResetStatusARB::is_loaded = false; } }
    match loadfn("GetGraphicsResetStatusEXT") { ptr if !ptr.is_null() => unsafe { storage::GetGraphicsResetStatusEXT = transmute(ptr); GetGraphicsResetStatusEXT::is_loaded = true; }, _ => unsafe { GetGraphicsResetStatusEXT::is_loaded = false; } }
    match loadfn("GetHandleARB") { ptr if !ptr.is_null() => unsafe { storage::GetHandleARB = transmute(ptr); GetHandleARB::is_loaded = true; }, _ => unsafe { GetHandleARB::is_loaded = false; } }
    match loadfn("GetHistogram") { ptr if !ptr.is_null() => unsafe { storage::GetHistogram = transmute(ptr); GetHistogram::is_loaded = true; }, _ => unsafe { GetHistogram::is_loaded = false; } }
    match loadfn("GetHistogramEXT") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramEXT = transmute(ptr); GetHistogramEXT::is_loaded = true; }, _ => unsafe { GetHistogramEXT::is_loaded = false; } }
    match loadfn("GetHistogramParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameterfv = transmute(ptr); GetHistogramParameterfv::is_loaded = true; }, _ => unsafe { GetHistogramParameterfv::is_loaded = false; } }
    match loadfn("GetHistogramParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameterfvEXT = transmute(ptr); GetHistogramParameterfvEXT::is_loaded = true; }, _ => unsafe { GetHistogramParameterfvEXT::is_loaded = false; } }
    match loadfn("GetHistogramParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameteriv = transmute(ptr); GetHistogramParameteriv::is_loaded = true; }, _ => unsafe { GetHistogramParameteriv::is_loaded = false; } }
    match loadfn("GetHistogramParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameterivEXT = transmute(ptr); GetHistogramParameterivEXT::is_loaded = true; }, _ => unsafe { GetHistogramParameterivEXT::is_loaded = false; } }
    match loadfn("GetHistogramParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetHistogramParameterxvOES = transmute(ptr); GetHistogramParameterxvOES::is_loaded = true; }, _ => unsafe { GetHistogramParameterxvOES::is_loaded = false; } }
    match loadfn("GetImageHandleARB") { ptr if !ptr.is_null() => unsafe { storage::GetImageHandleARB = transmute(ptr); GetImageHandleARB::is_loaded = true; }, _ => unsafe { GetImageHandleARB::is_loaded = false; } }
    match loadfn("GetImageHandleNV") { ptr if !ptr.is_null() => unsafe { storage::GetImageHandleNV = transmute(ptr); GetImageHandleNV::is_loaded = true; }, _ => unsafe { GetImageHandleNV::is_loaded = false; } }
    match loadfn("GetImageTransformParameterfvHP") { ptr if !ptr.is_null() => unsafe { storage::GetImageTransformParameterfvHP = transmute(ptr); GetImageTransformParameterfvHP::is_loaded = true; }, _ => unsafe { GetImageTransformParameterfvHP::is_loaded = false; } }
    match loadfn("GetImageTransformParameterivHP") { ptr if !ptr.is_null() => unsafe { storage::GetImageTransformParameterivHP = transmute(ptr); GetImageTransformParameterivHP::is_loaded = true; }, _ => unsafe { GetImageTransformParameterivHP::is_loaded = false; } }
    match loadfn("GetInfoLogARB") { ptr if !ptr.is_null() => unsafe { storage::GetInfoLogARB = transmute(ptr); GetInfoLogARB::is_loaded = true; }, _ => unsafe { GetInfoLogARB::is_loaded = false; } }
    match loadfn("GetInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetInstrumentsSGIX = transmute(ptr); GetInstrumentsSGIX::is_loaded = true; }, _ => unsafe { GetInstrumentsSGIX::is_loaded = false; } }
    match loadfn("GetInteger64i_v") { ptr if !ptr.is_null() => unsafe { storage::GetInteger64i_v = transmute(ptr); GetInteger64i_v::is_loaded = true; }, _ => unsafe { GetInteger64i_v::is_loaded = false; } }
    match loadfn("GetInteger64v") { ptr if !ptr.is_null() => unsafe { storage::GetInteger64v = transmute(ptr); GetInteger64v::is_loaded = true; }, _ => unsafe { GetInteger64v::is_loaded = false; } }
    match loadfn("GetInteger64vAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GetInteger64vAPPLE = transmute(ptr); GetInteger64vAPPLE::is_loaded = true; }, _ => unsafe { GetInteger64vAPPLE::is_loaded = false; } }
    match loadfn("GetIntegerIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetIntegerIndexedvEXT = transmute(ptr); GetIntegerIndexedvEXT::is_loaded = true; }, _ => unsafe { GetIntegerIndexedvEXT::is_loaded = false; } }
    match loadfn("GetIntegeri_v") { ptr if !ptr.is_null() => unsafe { storage::GetIntegeri_v = transmute(ptr); GetIntegeri_v::is_loaded = true; }, _ => unsafe { GetIntegeri_v::is_loaded = false; } }
    match loadfn("GetIntegeri_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetIntegeri_vEXT = transmute(ptr); GetIntegeri_vEXT::is_loaded = true; }, _ => unsafe { GetIntegeri_vEXT::is_loaded = false; } }
    match loadfn("GetIntegerui64i_vNV") { ptr if !ptr.is_null() => unsafe { storage::GetIntegerui64i_vNV = transmute(ptr); GetIntegerui64i_vNV::is_loaded = true; }, _ => unsafe { GetIntegerui64i_vNV::is_loaded = false; } }
    match loadfn("GetIntegerui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetIntegerui64vNV = transmute(ptr); GetIntegerui64vNV::is_loaded = true; }, _ => unsafe { GetIntegerui64vNV::is_loaded = false; } }
    match loadfn("GetIntegerv") { ptr if !ptr.is_null() => unsafe { storage::GetIntegerv = transmute(ptr); GetIntegerv::is_loaded = true; }, _ => unsafe { GetIntegerv::is_loaded = false; } }
    match loadfn("GetInternalformati64v") { ptr if !ptr.is_null() => unsafe { storage::GetInternalformati64v = transmute(ptr); GetInternalformati64v::is_loaded = true; }, _ => unsafe { GetInternalformati64v::is_loaded = false; } }
    match loadfn("GetInternalformativ") { ptr if !ptr.is_null() => unsafe { storage::GetInternalformativ = transmute(ptr); GetInternalformativ::is_loaded = true; }, _ => unsafe { GetInternalformativ::is_loaded = false; } }
    match loadfn("GetInvariantBooleanvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetInvariantBooleanvEXT = transmute(ptr); GetInvariantBooleanvEXT::is_loaded = true; }, _ => unsafe { GetInvariantBooleanvEXT::is_loaded = false; } }
    match loadfn("GetInvariantFloatvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetInvariantFloatvEXT = transmute(ptr); GetInvariantFloatvEXT::is_loaded = true; }, _ => unsafe { GetInvariantFloatvEXT::is_loaded = false; } }
    match loadfn("GetInvariantIntegervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetInvariantIntegervEXT = transmute(ptr); GetInvariantIntegervEXT::is_loaded = true; }, _ => unsafe { GetInvariantIntegervEXT::is_loaded = false; } }
    match loadfn("GetLightfv") { ptr if !ptr.is_null() => unsafe { storage::GetLightfv = transmute(ptr); GetLightfv::is_loaded = true; }, _ => unsafe { GetLightfv::is_loaded = false; } }
    match loadfn("GetLightiv") { ptr if !ptr.is_null() => unsafe { storage::GetLightiv = transmute(ptr); GetLightiv::is_loaded = true; }, _ => unsafe { GetLightiv::is_loaded = false; } }
    match loadfn("GetLightx") { ptr if !ptr.is_null() => unsafe { storage::GetLightx = transmute(ptr); GetLightx::is_loaded = true; }, _ => unsafe { GetLightx::is_loaded = false; } }
    match loadfn("GetLightxOES") { ptr if !ptr.is_null() => unsafe { storage::GetLightxOES = transmute(ptr); GetLightxOES::is_loaded = true; }, _ => unsafe { GetLightxOES::is_loaded = false; } }
    match loadfn("GetLightxv") { ptr if !ptr.is_null() => unsafe { storage::GetLightxv = transmute(ptr); GetLightxv::is_loaded = true; }, _ => unsafe { GetLightxv::is_loaded = false; } }
    match loadfn("GetLightxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetLightxvOES = transmute(ptr); GetLightxvOES::is_loaded = true; }, _ => unsafe { GetLightxvOES::is_loaded = false; } }
    match loadfn("GetListParameterfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetListParameterfvSGIX = transmute(ptr); GetListParameterfvSGIX::is_loaded = true; }, _ => unsafe { GetListParameterfvSGIX::is_loaded = false; } }
    match loadfn("GetListParameterivSGIX") { ptr if !ptr.is_null() => unsafe { storage::GetListParameterivSGIX = transmute(ptr); GetListParameterivSGIX::is_loaded = true; }, _ => unsafe { GetListParameterivSGIX::is_loaded = false; } }
    match loadfn("GetLocalConstantBooleanvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetLocalConstantBooleanvEXT = transmute(ptr); GetLocalConstantBooleanvEXT::is_loaded = true; }, _ => unsafe { GetLocalConstantBooleanvEXT::is_loaded = false; } }
    match loadfn("GetLocalConstantFloatvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetLocalConstantFloatvEXT = transmute(ptr); GetLocalConstantFloatvEXT::is_loaded = true; }, _ => unsafe { GetLocalConstantFloatvEXT::is_loaded = false; } }
    match loadfn("GetLocalConstantIntegervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetLocalConstantIntegervEXT = transmute(ptr); GetLocalConstantIntegervEXT::is_loaded = true; }, _ => unsafe { GetLocalConstantIntegervEXT::is_loaded = false; } }
    match loadfn("GetMapAttribParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapAttribParameterfvNV = transmute(ptr); GetMapAttribParameterfvNV::is_loaded = true; }, _ => unsafe { GetMapAttribParameterfvNV::is_loaded = false; } }
    match loadfn("GetMapAttribParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapAttribParameterivNV = transmute(ptr); GetMapAttribParameterivNV::is_loaded = true; }, _ => unsafe { GetMapAttribParameterivNV::is_loaded = false; } }
    match loadfn("GetMapControlPointsNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapControlPointsNV = transmute(ptr); GetMapControlPointsNV::is_loaded = true; }, _ => unsafe { GetMapControlPointsNV::is_loaded = false; } }
    match loadfn("GetMapParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapParameterfvNV = transmute(ptr); GetMapParameterfvNV::is_loaded = true; }, _ => unsafe { GetMapParameterfvNV::is_loaded = false; } }
    match loadfn("GetMapParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetMapParameterivNV = transmute(ptr); GetMapParameterivNV::is_loaded = true; }, _ => unsafe { GetMapParameterivNV::is_loaded = false; } }
    match loadfn("GetMapdv") { ptr if !ptr.is_null() => unsafe { storage::GetMapdv = transmute(ptr); GetMapdv::is_loaded = true; }, _ => unsafe { GetMapdv::is_loaded = false; } }
    match loadfn("GetMapfv") { ptr if !ptr.is_null() => unsafe { storage::GetMapfv = transmute(ptr); GetMapfv::is_loaded = true; }, _ => unsafe { GetMapfv::is_loaded = false; } }
    match loadfn("GetMapiv") { ptr if !ptr.is_null() => unsafe { storage::GetMapiv = transmute(ptr); GetMapiv::is_loaded = true; }, _ => unsafe { GetMapiv::is_loaded = false; } }
    match loadfn("GetMapxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetMapxvOES = transmute(ptr); GetMapxvOES::is_loaded = true; }, _ => unsafe { GetMapxvOES::is_loaded = false; } }
    match loadfn("GetMaterialfv") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialfv = transmute(ptr); GetMaterialfv::is_loaded = true; }, _ => unsafe { GetMaterialfv::is_loaded = false; } }
    match loadfn("GetMaterialiv") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialiv = transmute(ptr); GetMaterialiv::is_loaded = true; }, _ => unsafe { GetMaterialiv::is_loaded = false; } }
    match loadfn("GetMaterialx") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialx = transmute(ptr); GetMaterialx::is_loaded = true; }, _ => unsafe { GetMaterialx::is_loaded = false; } }
    match loadfn("GetMaterialxOES") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialxOES = transmute(ptr); GetMaterialxOES::is_loaded = true; }, _ => unsafe { GetMaterialxOES::is_loaded = false; } }
    match loadfn("GetMaterialxv") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialxv = transmute(ptr); GetMaterialxv::is_loaded = true; }, _ => unsafe { GetMaterialxv::is_loaded = false; } }
    match loadfn("GetMaterialxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetMaterialxvOES = transmute(ptr); GetMaterialxvOES::is_loaded = true; }, _ => unsafe { GetMaterialxvOES::is_loaded = false; } }
    match loadfn("GetMinmax") { ptr if !ptr.is_null() => unsafe { storage::GetMinmax = transmute(ptr); GetMinmax::is_loaded = true; }, _ => unsafe { GetMinmax::is_loaded = false; } }
    match loadfn("GetMinmaxEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxEXT = transmute(ptr); GetMinmaxEXT::is_loaded = true; }, _ => unsafe { GetMinmaxEXT::is_loaded = false; } }
    match loadfn("GetMinmaxParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxParameterfv = transmute(ptr); GetMinmaxParameterfv::is_loaded = true; }, _ => unsafe { GetMinmaxParameterfv::is_loaded = false; } }
    match loadfn("GetMinmaxParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxParameterfvEXT = transmute(ptr); GetMinmaxParameterfvEXT::is_loaded = true; }, _ => unsafe { GetMinmaxParameterfvEXT::is_loaded = false; } }
    match loadfn("GetMinmaxParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxParameteriv = transmute(ptr); GetMinmaxParameteriv::is_loaded = true; }, _ => unsafe { GetMinmaxParameteriv::is_loaded = false; } }
    match loadfn("GetMinmaxParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMinmaxParameterivEXT = transmute(ptr); GetMinmaxParameterivEXT::is_loaded = true; }, _ => unsafe { GetMinmaxParameterivEXT::is_loaded = false; } }
    match loadfn("GetMultiTexEnvfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexEnvfvEXT = transmute(ptr); GetMultiTexEnvfvEXT::is_loaded = true; }, _ => unsafe { GetMultiTexEnvfvEXT::is_loaded = false; } }
    match loadfn("GetMultiTexEnvivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexEnvivEXT = transmute(ptr); GetMultiTexEnvivEXT::is_loaded = true; }, _ => unsafe { GetMultiTexEnvivEXT::is_loaded = false; } }
    match loadfn("GetMultiTexGendvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexGendvEXT = transmute(ptr); GetMultiTexGendvEXT::is_loaded = true; }, _ => unsafe { GetMultiTexGendvEXT::is_loaded = false; } }
    match loadfn("GetMultiTexGenfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexGenfvEXT = transmute(ptr); GetMultiTexGenfvEXT::is_loaded = true; }, _ => unsafe { GetMultiTexGenfvEXT::is_loaded = false; } }
    match loadfn("GetMultiTexGenivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexGenivEXT = transmute(ptr); GetMultiTexGenivEXT::is_loaded = true; }, _ => unsafe { GetMultiTexGenivEXT::is_loaded = false; } }
    match loadfn("GetMultiTexImageEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexImageEXT = transmute(ptr); GetMultiTexImageEXT::is_loaded = true; }, _ => unsafe { GetMultiTexImageEXT::is_loaded = false; } }
    match loadfn("GetMultiTexLevelParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexLevelParameterfvEXT = transmute(ptr); GetMultiTexLevelParameterfvEXT::is_loaded = true; }, _ => unsafe { GetMultiTexLevelParameterfvEXT::is_loaded = false; } }
    match loadfn("GetMultiTexLevelParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexLevelParameterivEXT = transmute(ptr); GetMultiTexLevelParameterivEXT::is_loaded = true; }, _ => unsafe { GetMultiTexLevelParameterivEXT::is_loaded = false; } }
    match loadfn("GetMultiTexParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexParameterIivEXT = transmute(ptr); GetMultiTexParameterIivEXT::is_loaded = true; }, _ => unsafe { GetMultiTexParameterIivEXT::is_loaded = false; } }
    match loadfn("GetMultiTexParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexParameterIuivEXT = transmute(ptr); GetMultiTexParameterIuivEXT::is_loaded = true; }, _ => unsafe { GetMultiTexParameterIuivEXT::is_loaded = false; } }
    match loadfn("GetMultiTexParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexParameterfvEXT = transmute(ptr); GetMultiTexParameterfvEXT::is_loaded = true; }, _ => unsafe { GetMultiTexParameterfvEXT::is_loaded = false; } }
    match loadfn("GetMultiTexParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetMultiTexParameterivEXT = transmute(ptr); GetMultiTexParameterivEXT::is_loaded = true; }, _ => unsafe { GetMultiTexParameterivEXT::is_loaded = false; } }
    match loadfn("GetMultisamplefv") { ptr if !ptr.is_null() => unsafe { storage::GetMultisamplefv = transmute(ptr); GetMultisamplefv::is_loaded = true; }, _ => unsafe { GetMultisamplefv::is_loaded = false; } }
    match loadfn("GetMultisamplefvNV") { ptr if !ptr.is_null() => unsafe { storage::GetMultisamplefvNV = transmute(ptr); GetMultisamplefvNV::is_loaded = true; }, _ => unsafe { GetMultisamplefvNV::is_loaded = false; } }
    match loadfn("GetNamedBufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedBufferParameterivEXT = transmute(ptr); GetNamedBufferParameterivEXT::is_loaded = true; }, _ => unsafe { GetNamedBufferParameterivEXT::is_loaded = false; } }
    match loadfn("GetNamedBufferParameterui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetNamedBufferParameterui64vNV = transmute(ptr); GetNamedBufferParameterui64vNV::is_loaded = true; }, _ => unsafe { GetNamedBufferParameterui64vNV::is_loaded = false; } }
    match loadfn("GetNamedBufferPointervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedBufferPointervEXT = transmute(ptr); GetNamedBufferPointervEXT::is_loaded = true; }, _ => unsafe { GetNamedBufferPointervEXT::is_loaded = false; } }
    match loadfn("GetNamedBufferSubDataEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedBufferSubDataEXT = transmute(ptr); GetNamedBufferSubDataEXT::is_loaded = true; }, _ => unsafe { GetNamedBufferSubDataEXT::is_loaded = false; } }
    match loadfn("GetNamedFramebufferAttachmentParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedFramebufferAttachmentParameterivEXT = transmute(ptr); GetNamedFramebufferAttachmentParameterivEXT::is_loaded = true; }, _ => unsafe { GetNamedFramebufferAttachmentParameterivEXT::is_loaded = false; } }
    match loadfn("GetNamedFramebufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedFramebufferParameterivEXT = transmute(ptr); GetNamedFramebufferParameterivEXT::is_loaded = true; }, _ => unsafe { GetNamedFramebufferParameterivEXT::is_loaded = false; } }
    match loadfn("GetNamedProgramLocalParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramLocalParameterIivEXT = transmute(ptr); GetNamedProgramLocalParameterIivEXT::is_loaded = true; }, _ => unsafe { GetNamedProgramLocalParameterIivEXT::is_loaded = false; } }
    match loadfn("GetNamedProgramLocalParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramLocalParameterIuivEXT = transmute(ptr); GetNamedProgramLocalParameterIuivEXT::is_loaded = true; }, _ => unsafe { GetNamedProgramLocalParameterIuivEXT::is_loaded = false; } }
    match loadfn("GetNamedProgramLocalParameterdvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramLocalParameterdvEXT = transmute(ptr); GetNamedProgramLocalParameterdvEXT::is_loaded = true; }, _ => unsafe { GetNamedProgramLocalParameterdvEXT::is_loaded = false; } }
    match loadfn("GetNamedProgramLocalParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramLocalParameterfvEXT = transmute(ptr); GetNamedProgramLocalParameterfvEXT::is_loaded = true; }, _ => unsafe { GetNamedProgramLocalParameterfvEXT::is_loaded = false; } }
    match loadfn("GetNamedProgramStringEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramStringEXT = transmute(ptr); GetNamedProgramStringEXT::is_loaded = true; }, _ => unsafe { GetNamedProgramStringEXT::is_loaded = false; } }
    match loadfn("GetNamedProgramivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedProgramivEXT = transmute(ptr); GetNamedProgramivEXT::is_loaded = true; }, _ => unsafe { GetNamedProgramivEXT::is_loaded = false; } }
    match loadfn("GetNamedRenderbufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetNamedRenderbufferParameterivEXT = transmute(ptr); GetNamedRenderbufferParameterivEXT::is_loaded = true; }, _ => unsafe { GetNamedRenderbufferParameterivEXT::is_loaded = false; } }
    match loadfn("GetNamedStringARB") { ptr if !ptr.is_null() => unsafe { storage::GetNamedStringARB = transmute(ptr); GetNamedStringARB::is_loaded = true; }, _ => unsafe { GetNamedStringARB::is_loaded = false; } }
    match loadfn("GetNamedStringivARB") { ptr if !ptr.is_null() => unsafe { storage::GetNamedStringivARB = transmute(ptr); GetNamedStringivARB::is_loaded = true; }, _ => unsafe { GetNamedStringivARB::is_loaded = false; } }
    match loadfn("GetObjectBufferfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetObjectBufferfvATI = transmute(ptr); GetObjectBufferfvATI::is_loaded = true; }, _ => unsafe { GetObjectBufferfvATI::is_loaded = false; } }
    match loadfn("GetObjectBufferivATI") { ptr if !ptr.is_null() => unsafe { storage::GetObjectBufferivATI = transmute(ptr); GetObjectBufferivATI::is_loaded = true; }, _ => unsafe { GetObjectBufferivATI::is_loaded = false; } }
    match loadfn("GetObjectLabel") { ptr if !ptr.is_null() => unsafe { storage::GetObjectLabel = transmute(ptr); GetObjectLabel::is_loaded = true; }, _ => unsafe { GetObjectLabel::is_loaded = false; } }
    match loadfn("GetObjectLabelEXT") { ptr if !ptr.is_null() => unsafe { storage::GetObjectLabelEXT = transmute(ptr); GetObjectLabelEXT::is_loaded = true; }, _ => unsafe { GetObjectLabelEXT::is_loaded = false; } }
    match loadfn("GetObjectLabelKHR") { ptr if !ptr.is_null() => unsafe { storage::GetObjectLabelKHR = transmute(ptr); GetObjectLabelKHR::is_loaded = true; }, _ => unsafe { GetObjectLabelKHR::is_loaded = false; } }
    match loadfn("GetObjectParameterfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetObjectParameterfvARB = transmute(ptr); GetObjectParameterfvARB::is_loaded = true; }, _ => unsafe { GetObjectParameterfvARB::is_loaded = false; } }
    match loadfn("GetObjectParameterivAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GetObjectParameterivAPPLE = transmute(ptr); GetObjectParameterivAPPLE::is_loaded = true; }, _ => unsafe { GetObjectParameterivAPPLE::is_loaded = false; } }
    match loadfn("GetObjectParameterivARB") { ptr if !ptr.is_null() => unsafe { storage::GetObjectParameterivARB = transmute(ptr); GetObjectParameterivARB::is_loaded = true; }, _ => unsafe { GetObjectParameterivARB::is_loaded = false; } }
    match loadfn("GetObjectPtrLabel") { ptr if !ptr.is_null() => unsafe { storage::GetObjectPtrLabel = transmute(ptr); GetObjectPtrLabel::is_loaded = true; }, _ => unsafe { GetObjectPtrLabel::is_loaded = false; } }
    match loadfn("GetObjectPtrLabelKHR") { ptr if !ptr.is_null() => unsafe { storage::GetObjectPtrLabelKHR = transmute(ptr); GetObjectPtrLabelKHR::is_loaded = true; }, _ => unsafe { GetObjectPtrLabelKHR::is_loaded = false; } }
    match loadfn("GetOcclusionQueryivNV") { ptr if !ptr.is_null() => unsafe { storage::GetOcclusionQueryivNV = transmute(ptr); GetOcclusionQueryivNV::is_loaded = true; }, _ => unsafe { GetOcclusionQueryivNV::is_loaded = false; } }
    match loadfn("GetOcclusionQueryuivNV") { ptr if !ptr.is_null() => unsafe { storage::GetOcclusionQueryuivNV = transmute(ptr); GetOcclusionQueryuivNV::is_loaded = true; }, _ => unsafe { GetOcclusionQueryuivNV::is_loaded = false; } }
    match loadfn("GetPathColorGenfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathColorGenfvNV = transmute(ptr); GetPathColorGenfvNV::is_loaded = true; }, _ => unsafe { GetPathColorGenfvNV::is_loaded = false; } }
    match loadfn("GetPathColorGenivNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathColorGenivNV = transmute(ptr); GetPathColorGenivNV::is_loaded = true; }, _ => unsafe { GetPathColorGenivNV::is_loaded = false; } }
    match loadfn("GetPathCommandsNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathCommandsNV = transmute(ptr); GetPathCommandsNV::is_loaded = true; }, _ => unsafe { GetPathCommandsNV::is_loaded = false; } }
    match loadfn("GetPathCoordsNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathCoordsNV = transmute(ptr); GetPathCoordsNV::is_loaded = true; }, _ => unsafe { GetPathCoordsNV::is_loaded = false; } }
    match loadfn("GetPathDashArrayNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathDashArrayNV = transmute(ptr); GetPathDashArrayNV::is_loaded = true; }, _ => unsafe { GetPathDashArrayNV::is_loaded = false; } }
    match loadfn("GetPathLengthNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathLengthNV = transmute(ptr); GetPathLengthNV::is_loaded = true; }, _ => unsafe { GetPathLengthNV::is_loaded = false; } }
    match loadfn("GetPathMetricRangeNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathMetricRangeNV = transmute(ptr); GetPathMetricRangeNV::is_loaded = true; }, _ => unsafe { GetPathMetricRangeNV::is_loaded = false; } }
    match loadfn("GetPathMetricsNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathMetricsNV = transmute(ptr); GetPathMetricsNV::is_loaded = true; }, _ => unsafe { GetPathMetricsNV::is_loaded = false; } }
    match loadfn("GetPathParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathParameterfvNV = transmute(ptr); GetPathParameterfvNV::is_loaded = true; }, _ => unsafe { GetPathParameterfvNV::is_loaded = false; } }
    match loadfn("GetPathParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathParameterivNV = transmute(ptr); GetPathParameterivNV::is_loaded = true; }, _ => unsafe { GetPathParameterivNV::is_loaded = false; } }
    match loadfn("GetPathSpacingNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathSpacingNV = transmute(ptr); GetPathSpacingNV::is_loaded = true; }, _ => unsafe { GetPathSpacingNV::is_loaded = false; } }
    match loadfn("GetPathTexGenfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathTexGenfvNV = transmute(ptr); GetPathTexGenfvNV::is_loaded = true; }, _ => unsafe { GetPathTexGenfvNV::is_loaded = false; } }
    match loadfn("GetPathTexGenivNV") { ptr if !ptr.is_null() => unsafe { storage::GetPathTexGenivNV = transmute(ptr); GetPathTexGenivNV::is_loaded = true; }, _ => unsafe { GetPathTexGenivNV::is_loaded = false; } }
    match loadfn("GetPerfMonitorCounterDataAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorCounterDataAMD = transmute(ptr); GetPerfMonitorCounterDataAMD::is_loaded = true; }, _ => unsafe { GetPerfMonitorCounterDataAMD::is_loaded = false; } }
    match loadfn("GetPerfMonitorCounterInfoAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorCounterInfoAMD = transmute(ptr); GetPerfMonitorCounterInfoAMD::is_loaded = true; }, _ => unsafe { GetPerfMonitorCounterInfoAMD::is_loaded = false; } }
    match loadfn("GetPerfMonitorCounterStringAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorCounterStringAMD = transmute(ptr); GetPerfMonitorCounterStringAMD::is_loaded = true; }, _ => unsafe { GetPerfMonitorCounterStringAMD::is_loaded = false; } }
    match loadfn("GetPerfMonitorCountersAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorCountersAMD = transmute(ptr); GetPerfMonitorCountersAMD::is_loaded = true; }, _ => unsafe { GetPerfMonitorCountersAMD::is_loaded = false; } }
    match loadfn("GetPerfMonitorGroupStringAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorGroupStringAMD = transmute(ptr); GetPerfMonitorGroupStringAMD::is_loaded = true; }, _ => unsafe { GetPerfMonitorGroupStringAMD::is_loaded = false; } }
    match loadfn("GetPerfMonitorGroupsAMD") { ptr if !ptr.is_null() => unsafe { storage::GetPerfMonitorGroupsAMD = transmute(ptr); GetPerfMonitorGroupsAMD::is_loaded = true; }, _ => unsafe { GetPerfMonitorGroupsAMD::is_loaded = false; } }
    match loadfn("GetPixelMapfv") { ptr if !ptr.is_null() => unsafe { storage::GetPixelMapfv = transmute(ptr); GetPixelMapfv::is_loaded = true; }, _ => unsafe { GetPixelMapfv::is_loaded = false; } }
    match loadfn("GetPixelMapuiv") { ptr if !ptr.is_null() => unsafe { storage::GetPixelMapuiv = transmute(ptr); GetPixelMapuiv::is_loaded = true; }, _ => unsafe { GetPixelMapuiv::is_loaded = false; } }
    match loadfn("GetPixelMapusv") { ptr if !ptr.is_null() => unsafe { storage::GetPixelMapusv = transmute(ptr); GetPixelMapusv::is_loaded = true; }, _ => unsafe { GetPixelMapusv::is_loaded = false; } }
    match loadfn("GetPixelMapxv") { ptr if !ptr.is_null() => unsafe { storage::GetPixelMapxv = transmute(ptr); GetPixelMapxv::is_loaded = true; }, _ => unsafe { GetPixelMapxv::is_loaded = false; } }
    match loadfn("GetPixelTexGenParameterfvSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetPixelTexGenParameterfvSGIS = transmute(ptr); GetPixelTexGenParameterfvSGIS::is_loaded = true; }, _ => unsafe { GetPixelTexGenParameterfvSGIS::is_loaded = false; } }
    match loadfn("GetPixelTexGenParameterivSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetPixelTexGenParameterivSGIS = transmute(ptr); GetPixelTexGenParameterivSGIS::is_loaded = true; }, _ => unsafe { GetPixelTexGenParameterivSGIS::is_loaded = false; } }
    match loadfn("GetPixelTransformParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPixelTransformParameterfvEXT = transmute(ptr); GetPixelTransformParameterfvEXT::is_loaded = true; }, _ => unsafe { GetPixelTransformParameterfvEXT::is_loaded = false; } }
    match loadfn("GetPixelTransformParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPixelTransformParameterivEXT = transmute(ptr); GetPixelTransformParameterivEXT::is_loaded = true; }, _ => unsafe { GetPixelTransformParameterivEXT::is_loaded = false; } }
    match loadfn("GetPointerIndexedvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPointerIndexedvEXT = transmute(ptr); GetPointerIndexedvEXT::is_loaded = true; }, _ => unsafe { GetPointerIndexedvEXT::is_loaded = false; } }
    match loadfn("GetPointeri_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPointeri_vEXT = transmute(ptr); GetPointeri_vEXT::is_loaded = true; }, _ => unsafe { GetPointeri_vEXT::is_loaded = false; } }
    match loadfn("GetPointerv") { ptr if !ptr.is_null() => unsafe { storage::GetPointerv = transmute(ptr); GetPointerv::is_loaded = true; }, _ => unsafe { GetPointerv::is_loaded = false; } }
    match loadfn("GetPointervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetPointervEXT = transmute(ptr); GetPointervEXT::is_loaded = true; }, _ => unsafe { GetPointervEXT::is_loaded = false; } }
    match loadfn("GetPointervKHR") { ptr if !ptr.is_null() => unsafe { storage::GetPointervKHR = transmute(ptr); GetPointervKHR::is_loaded = true; }, _ => unsafe { GetPointervKHR::is_loaded = false; } }
    match loadfn("GetPolygonStipple") { ptr if !ptr.is_null() => unsafe { storage::GetPolygonStipple = transmute(ptr); GetPolygonStipple::is_loaded = true; }, _ => unsafe { GetPolygonStipple::is_loaded = false; } }
    match loadfn("GetProgramBinary") { ptr if !ptr.is_null() => unsafe { storage::GetProgramBinary = transmute(ptr); GetProgramBinary::is_loaded = true; }, _ => unsafe { GetProgramBinary::is_loaded = false; } }
    match loadfn("GetProgramBinaryOES") { ptr if !ptr.is_null() => unsafe { storage::GetProgramBinaryOES = transmute(ptr); GetProgramBinaryOES::is_loaded = true; }, _ => unsafe { GetProgramBinaryOES::is_loaded = false; } }
    match loadfn("GetProgramEnvParameterIivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramEnvParameterIivNV = transmute(ptr); GetProgramEnvParameterIivNV::is_loaded = true; }, _ => unsafe { GetProgramEnvParameterIivNV::is_loaded = false; } }
    match loadfn("GetProgramEnvParameterIuivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramEnvParameterIuivNV = transmute(ptr); GetProgramEnvParameterIuivNV::is_loaded = true; }, _ => unsafe { GetProgramEnvParameterIuivNV::is_loaded = false; } }
    match loadfn("GetProgramEnvParameterdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramEnvParameterdvARB = transmute(ptr); GetProgramEnvParameterdvARB::is_loaded = true; }, _ => unsafe { GetProgramEnvParameterdvARB::is_loaded = false; } }
    match loadfn("GetProgramEnvParameterfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramEnvParameterfvARB = transmute(ptr); GetProgramEnvParameterfvARB::is_loaded = true; }, _ => unsafe { GetProgramEnvParameterfvARB::is_loaded = false; } }
    match loadfn("GetProgramInfoLog") { ptr if !ptr.is_null() => unsafe { storage::GetProgramInfoLog = transmute(ptr); GetProgramInfoLog::is_loaded = true; }, _ => unsafe { GetProgramInfoLog::is_loaded = false; } }
    match loadfn("GetProgramInterfaceiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramInterfaceiv = transmute(ptr); GetProgramInterfaceiv::is_loaded = true; }, _ => unsafe { GetProgramInterfaceiv::is_loaded = false; } }
    match loadfn("GetProgramLocalParameterIivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramLocalParameterIivNV = transmute(ptr); GetProgramLocalParameterIivNV::is_loaded = true; }, _ => unsafe { GetProgramLocalParameterIivNV::is_loaded = false; } }
    match loadfn("GetProgramLocalParameterIuivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramLocalParameterIuivNV = transmute(ptr); GetProgramLocalParameterIuivNV::is_loaded = true; }, _ => unsafe { GetProgramLocalParameterIuivNV::is_loaded = false; } }
    match loadfn("GetProgramLocalParameterdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramLocalParameterdvARB = transmute(ptr); GetProgramLocalParameterdvARB::is_loaded = true; }, _ => unsafe { GetProgramLocalParameterdvARB::is_loaded = false; } }
    match loadfn("GetProgramLocalParameterfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramLocalParameterfvARB = transmute(ptr); GetProgramLocalParameterfvARB::is_loaded = true; }, _ => unsafe { GetProgramLocalParameterfvARB::is_loaded = false; } }
    match loadfn("GetProgramNamedParameterdvNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramNamedParameterdvNV = transmute(ptr); GetProgramNamedParameterdvNV::is_loaded = true; }, _ => unsafe { GetProgramNamedParameterdvNV::is_loaded = false; } }
    match loadfn("GetProgramNamedParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramNamedParameterfvNV = transmute(ptr); GetProgramNamedParameterfvNV::is_loaded = true; }, _ => unsafe { GetProgramNamedParameterfvNV::is_loaded = false; } }
    match loadfn("GetProgramParameterdvNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramParameterdvNV = transmute(ptr); GetProgramParameterdvNV::is_loaded = true; }, _ => unsafe { GetProgramParameterdvNV::is_loaded = false; } }
    match loadfn("GetProgramParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramParameterfvNV = transmute(ptr); GetProgramParameterfvNV::is_loaded = true; }, _ => unsafe { GetProgramParameterfvNV::is_loaded = false; } }
    match loadfn("GetProgramPipelineInfoLog") { ptr if !ptr.is_null() => unsafe { storage::GetProgramPipelineInfoLog = transmute(ptr); GetProgramPipelineInfoLog::is_loaded = true; }, _ => unsafe { GetProgramPipelineInfoLog::is_loaded = false; } }
    match loadfn("GetProgramPipelineInfoLogEXT") { ptr if !ptr.is_null() => unsafe { storage::GetProgramPipelineInfoLogEXT = transmute(ptr); GetProgramPipelineInfoLogEXT::is_loaded = true; }, _ => unsafe { GetProgramPipelineInfoLogEXT::is_loaded = false; } }
    match loadfn("GetProgramPipelineiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramPipelineiv = transmute(ptr); GetProgramPipelineiv::is_loaded = true; }, _ => unsafe { GetProgramPipelineiv::is_loaded = false; } }
    match loadfn("GetProgramPipelineivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetProgramPipelineivEXT = transmute(ptr); GetProgramPipelineivEXT::is_loaded = true; }, _ => unsafe { GetProgramPipelineivEXT::is_loaded = false; } }
    match loadfn("GetProgramResourceIndex") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceIndex = transmute(ptr); GetProgramResourceIndex::is_loaded = true; }, _ => unsafe { GetProgramResourceIndex::is_loaded = false; } }
    match loadfn("GetProgramResourceLocation") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceLocation = transmute(ptr); GetProgramResourceLocation::is_loaded = true; }, _ => unsafe { GetProgramResourceLocation::is_loaded = false; } }
    match loadfn("GetProgramResourceLocationIndex") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceLocationIndex = transmute(ptr); GetProgramResourceLocationIndex::is_loaded = true; }, _ => unsafe { GetProgramResourceLocationIndex::is_loaded = false; } }
    match loadfn("GetProgramResourceName") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceName = transmute(ptr); GetProgramResourceName::is_loaded = true; }, _ => unsafe { GetProgramResourceName::is_loaded = false; } }
    match loadfn("GetProgramResourceiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramResourceiv = transmute(ptr); GetProgramResourceiv::is_loaded = true; }, _ => unsafe { GetProgramResourceiv::is_loaded = false; } }
    match loadfn("GetProgramStageiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramStageiv = transmute(ptr); GetProgramStageiv::is_loaded = true; }, _ => unsafe { GetProgramStageiv::is_loaded = false; } }
    match loadfn("GetProgramStringARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramStringARB = transmute(ptr); GetProgramStringARB::is_loaded = true; }, _ => unsafe { GetProgramStringARB::is_loaded = false; } }
    match loadfn("GetProgramStringNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramStringNV = transmute(ptr); GetProgramStringNV::is_loaded = true; }, _ => unsafe { GetProgramStringNV::is_loaded = false; } }
    match loadfn("GetProgramSubroutineParameteruivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramSubroutineParameteruivNV = transmute(ptr); GetProgramSubroutineParameteruivNV::is_loaded = true; }, _ => unsafe { GetProgramSubroutineParameteruivNV::is_loaded = false; } }
    match loadfn("GetProgramiv") { ptr if !ptr.is_null() => unsafe { storage::GetProgramiv = transmute(ptr); GetProgramiv::is_loaded = true; }, _ => unsafe { GetProgramiv::is_loaded = false; } }
    match loadfn("GetProgramivARB") { ptr if !ptr.is_null() => unsafe { storage::GetProgramivARB = transmute(ptr); GetProgramivARB::is_loaded = true; }, _ => unsafe { GetProgramivARB::is_loaded = false; } }
    match loadfn("GetProgramivNV") { ptr if !ptr.is_null() => unsafe { storage::GetProgramivNV = transmute(ptr); GetProgramivNV::is_loaded = true; }, _ => unsafe { GetProgramivNV::is_loaded = false; } }
    match loadfn("GetQueryIndexediv") { ptr if !ptr.is_null() => unsafe { storage::GetQueryIndexediv = transmute(ptr); GetQueryIndexediv::is_loaded = true; }, _ => unsafe { GetQueryIndexediv::is_loaded = false; } }
    match loadfn("GetQueryObjecti64v") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjecti64v = transmute(ptr); GetQueryObjecti64v::is_loaded = true; }, _ => unsafe { GetQueryObjecti64v::is_loaded = false; } }
    match loadfn("GetQueryObjecti64vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjecti64vEXT = transmute(ptr); GetQueryObjecti64vEXT::is_loaded = true; }, _ => unsafe { GetQueryObjecti64vEXT::is_loaded = false; } }
    match loadfn("GetQueryObjectiv") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectiv = transmute(ptr); GetQueryObjectiv::is_loaded = true; }, _ => unsafe { GetQueryObjectiv::is_loaded = false; } }
    match loadfn("GetQueryObjectivARB") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectivARB = transmute(ptr); GetQueryObjectivARB::is_loaded = true; }, _ => unsafe { GetQueryObjectivARB::is_loaded = false; } }
    match loadfn("GetQueryObjectivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectivEXT = transmute(ptr); GetQueryObjectivEXT::is_loaded = true; }, _ => unsafe { GetQueryObjectivEXT::is_loaded = false; } }
    match loadfn("GetQueryObjectui64v") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectui64v = transmute(ptr); GetQueryObjectui64v::is_loaded = true; }, _ => unsafe { GetQueryObjectui64v::is_loaded = false; } }
    match loadfn("GetQueryObjectui64vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectui64vEXT = transmute(ptr); GetQueryObjectui64vEXT::is_loaded = true; }, _ => unsafe { GetQueryObjectui64vEXT::is_loaded = false; } }
    match loadfn("GetQueryObjectuiv") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectuiv = transmute(ptr); GetQueryObjectuiv::is_loaded = true; }, _ => unsafe { GetQueryObjectuiv::is_loaded = false; } }
    match loadfn("GetQueryObjectuivARB") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectuivARB = transmute(ptr); GetQueryObjectuivARB::is_loaded = true; }, _ => unsafe { GetQueryObjectuivARB::is_loaded = false; } }
    match loadfn("GetQueryObjectuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryObjectuivEXT = transmute(ptr); GetQueryObjectuivEXT::is_loaded = true; }, _ => unsafe { GetQueryObjectuivEXT::is_loaded = false; } }
    match loadfn("GetQueryiv") { ptr if !ptr.is_null() => unsafe { storage::GetQueryiv = transmute(ptr); GetQueryiv::is_loaded = true; }, _ => unsafe { GetQueryiv::is_loaded = false; } }
    match loadfn("GetQueryivARB") { ptr if !ptr.is_null() => unsafe { storage::GetQueryivARB = transmute(ptr); GetQueryivARB::is_loaded = true; }, _ => unsafe { GetQueryivARB::is_loaded = false; } }
    match loadfn("GetQueryivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetQueryivEXT = transmute(ptr); GetQueryivEXT::is_loaded = true; }, _ => unsafe { GetQueryivEXT::is_loaded = false; } }
    match loadfn("GetRenderbufferParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetRenderbufferParameteriv = transmute(ptr); GetRenderbufferParameteriv::is_loaded = true; }, _ => unsafe { GetRenderbufferParameteriv::is_loaded = false; } }
    match loadfn("GetRenderbufferParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetRenderbufferParameterivEXT = transmute(ptr); GetRenderbufferParameterivEXT::is_loaded = true; }, _ => unsafe { GetRenderbufferParameterivEXT::is_loaded = false; } }
    match loadfn("GetRenderbufferParameterivOES") { ptr if !ptr.is_null() => unsafe { storage::GetRenderbufferParameterivOES = transmute(ptr); GetRenderbufferParameterivOES::is_loaded = true; }, _ => unsafe { GetRenderbufferParameterivOES::is_loaded = false; } }
    match loadfn("GetSamplerParameterIiv") { ptr if !ptr.is_null() => unsafe { storage::GetSamplerParameterIiv = transmute(ptr); GetSamplerParameterIiv::is_loaded = true; }, _ => unsafe { GetSamplerParameterIiv::is_loaded = false; } }
    match loadfn("GetSamplerParameterIuiv") { ptr if !ptr.is_null() => unsafe { storage::GetSamplerParameterIuiv = transmute(ptr); GetSamplerParameterIuiv::is_loaded = true; }, _ => unsafe { GetSamplerParameterIuiv::is_loaded = false; } }
    match loadfn("GetSamplerParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetSamplerParameterfv = transmute(ptr); GetSamplerParameterfv::is_loaded = true; }, _ => unsafe { GetSamplerParameterfv::is_loaded = false; } }
    match loadfn("GetSamplerParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetSamplerParameteriv = transmute(ptr); GetSamplerParameteriv::is_loaded = true; }, _ => unsafe { GetSamplerParameteriv::is_loaded = false; } }
    match loadfn("GetSeparableFilter") { ptr if !ptr.is_null() => unsafe { storage::GetSeparableFilter = transmute(ptr); GetSeparableFilter::is_loaded = true; }, _ => unsafe { GetSeparableFilter::is_loaded = false; } }
    match loadfn("GetSeparableFilterEXT") { ptr if !ptr.is_null() => unsafe { storage::GetSeparableFilterEXT = transmute(ptr); GetSeparableFilterEXT::is_loaded = true; }, _ => unsafe { GetSeparableFilterEXT::is_loaded = false; } }
    match loadfn("GetShaderInfoLog") { ptr if !ptr.is_null() => unsafe { storage::GetShaderInfoLog = transmute(ptr); GetShaderInfoLog::is_loaded = true; }, _ => unsafe { GetShaderInfoLog::is_loaded = false; } }
    match loadfn("GetShaderPrecisionFormat") { ptr if !ptr.is_null() => unsafe { storage::GetShaderPrecisionFormat = transmute(ptr); GetShaderPrecisionFormat::is_loaded = true; }, _ => unsafe { GetShaderPrecisionFormat::is_loaded = false; } }
    match loadfn("GetShaderSource") { ptr if !ptr.is_null() => unsafe { storage::GetShaderSource = transmute(ptr); GetShaderSource::is_loaded = true; }, _ => unsafe { GetShaderSource::is_loaded = false; } }
    match loadfn("GetShaderSourceARB") { ptr if !ptr.is_null() => unsafe { storage::GetShaderSourceARB = transmute(ptr); GetShaderSourceARB::is_loaded = true; }, _ => unsafe { GetShaderSourceARB::is_loaded = false; } }
    match loadfn("GetShaderiv") { ptr if !ptr.is_null() => unsafe { storage::GetShaderiv = transmute(ptr); GetShaderiv::is_loaded = true; }, _ => unsafe { GetShaderiv::is_loaded = false; } }
    match loadfn("GetSharpenTexFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetSharpenTexFuncSGIS = transmute(ptr); GetSharpenTexFuncSGIS::is_loaded = true; }, _ => unsafe { GetSharpenTexFuncSGIS::is_loaded = false; } }
    match loadfn("GetString") { ptr if !ptr.is_null() => unsafe { storage::GetString = transmute(ptr); GetString::is_loaded = true; }, _ => unsafe { GetString::is_loaded = false; } }
    match loadfn("GetStringi") { ptr if !ptr.is_null() => unsafe { storage::GetStringi = transmute(ptr); GetStringi::is_loaded = true; }, _ => unsafe { GetStringi::is_loaded = false; } }
    match loadfn("GetSubroutineIndex") { ptr if !ptr.is_null() => unsafe { storage::GetSubroutineIndex = transmute(ptr); GetSubroutineIndex::is_loaded = true; }, _ => unsafe { GetSubroutineIndex::is_loaded = false; } }
    match loadfn("GetSubroutineUniformLocation") { ptr if !ptr.is_null() => unsafe { storage::GetSubroutineUniformLocation = transmute(ptr); GetSubroutineUniformLocation::is_loaded = true; }, _ => unsafe { GetSubroutineUniformLocation::is_loaded = false; } }
    match loadfn("GetSynciv") { ptr if !ptr.is_null() => unsafe { storage::GetSynciv = transmute(ptr); GetSynciv::is_loaded = true; }, _ => unsafe { GetSynciv::is_loaded = false; } }
    match loadfn("GetSyncivAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GetSyncivAPPLE = transmute(ptr); GetSyncivAPPLE::is_loaded = true; }, _ => unsafe { GetSyncivAPPLE::is_loaded = false; } }
    match loadfn("GetTexBumpParameterfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetTexBumpParameterfvATI = transmute(ptr); GetTexBumpParameterfvATI::is_loaded = true; }, _ => unsafe { GetTexBumpParameterfvATI::is_loaded = false; } }
    match loadfn("GetTexBumpParameterivATI") { ptr if !ptr.is_null() => unsafe { storage::GetTexBumpParameterivATI = transmute(ptr); GetTexBumpParameterivATI::is_loaded = true; }, _ => unsafe { GetTexBumpParameterivATI::is_loaded = false; } }
    match loadfn("GetTexEnvfv") { ptr if !ptr.is_null() => unsafe { storage::GetTexEnvfv = transmute(ptr); GetTexEnvfv::is_loaded = true; }, _ => unsafe { GetTexEnvfv::is_loaded = false; } }
    match loadfn("GetTexEnviv") { ptr if !ptr.is_null() => unsafe { storage::GetTexEnviv = transmute(ptr); GetTexEnviv::is_loaded = true; }, _ => unsafe { GetTexEnviv::is_loaded = false; } }
    match loadfn("GetTexEnvxv") { ptr if !ptr.is_null() => unsafe { storage::GetTexEnvxv = transmute(ptr); GetTexEnvxv::is_loaded = true; }, _ => unsafe { GetTexEnvxv::is_loaded = false; } }
    match loadfn("GetTexEnvxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexEnvxvOES = transmute(ptr); GetTexEnvxvOES::is_loaded = true; }, _ => unsafe { GetTexEnvxvOES::is_loaded = false; } }
    match loadfn("GetTexFilterFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::GetTexFilterFuncSGIS = transmute(ptr); GetTexFilterFuncSGIS::is_loaded = true; }, _ => unsafe { GetTexFilterFuncSGIS::is_loaded = false; } }
    match loadfn("GetTexGendv") { ptr if !ptr.is_null() => unsafe { storage::GetTexGendv = transmute(ptr); GetTexGendv::is_loaded = true; }, _ => unsafe { GetTexGendv::is_loaded = false; } }
    match loadfn("GetTexGenfv") { ptr if !ptr.is_null() => unsafe { storage::GetTexGenfv = transmute(ptr); GetTexGenfv::is_loaded = true; }, _ => unsafe { GetTexGenfv::is_loaded = false; } }
    match loadfn("GetTexGenfvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexGenfvOES = transmute(ptr); GetTexGenfvOES::is_loaded = true; }, _ => unsafe { GetTexGenfvOES::is_loaded = false; } }
    match loadfn("GetTexGeniv") { ptr if !ptr.is_null() => unsafe { storage::GetTexGeniv = transmute(ptr); GetTexGeniv::is_loaded = true; }, _ => unsafe { GetTexGeniv::is_loaded = false; } }
    match loadfn("GetTexGenivOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexGenivOES = transmute(ptr); GetTexGenivOES::is_loaded = true; }, _ => unsafe { GetTexGenivOES::is_loaded = false; } }
    match loadfn("GetTexGenxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexGenxvOES = transmute(ptr); GetTexGenxvOES::is_loaded = true; }, _ => unsafe { GetTexGenxvOES::is_loaded = false; } }
    match loadfn("GetTexImage") { ptr if !ptr.is_null() => unsafe { storage::GetTexImage = transmute(ptr); GetTexImage::is_loaded = true; }, _ => unsafe { GetTexImage::is_loaded = false; } }
    match loadfn("GetTexLevelParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetTexLevelParameterfv = transmute(ptr); GetTexLevelParameterfv::is_loaded = true; }, _ => unsafe { GetTexLevelParameterfv::is_loaded = false; } }
    match loadfn("GetTexLevelParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetTexLevelParameteriv = transmute(ptr); GetTexLevelParameteriv::is_loaded = true; }, _ => unsafe { GetTexLevelParameteriv::is_loaded = false; } }
    match loadfn("GetTexLevelParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexLevelParameterxvOES = transmute(ptr); GetTexLevelParameterxvOES::is_loaded = true; }, _ => unsafe { GetTexLevelParameterxvOES::is_loaded = false; } }
    match loadfn("GetTexParameterIiv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterIiv = transmute(ptr); GetTexParameterIiv::is_loaded = true; }, _ => unsafe { GetTexParameterIiv::is_loaded = false; } }
    match loadfn("GetTexParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterIivEXT = transmute(ptr); GetTexParameterIivEXT::is_loaded = true; }, _ => unsafe { GetTexParameterIivEXT::is_loaded = false; } }
    match loadfn("GetTexParameterIuiv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterIuiv = transmute(ptr); GetTexParameterIuiv::is_loaded = true; }, _ => unsafe { GetTexParameterIuiv::is_loaded = false; } }
    match loadfn("GetTexParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterIuivEXT = transmute(ptr); GetTexParameterIuivEXT::is_loaded = true; }, _ => unsafe { GetTexParameterIuivEXT::is_loaded = false; } }
    match loadfn("GetTexParameterPointervAPPLE") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterPointervAPPLE = transmute(ptr); GetTexParameterPointervAPPLE::is_loaded = true; }, _ => unsafe { GetTexParameterPointervAPPLE::is_loaded = false; } }
    match loadfn("GetTexParameterfv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterfv = transmute(ptr); GetTexParameterfv::is_loaded = true; }, _ => unsafe { GetTexParameterfv::is_loaded = false; } }
    match loadfn("GetTexParameteriv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameteriv = transmute(ptr); GetTexParameteriv::is_loaded = true; }, _ => unsafe { GetTexParameteriv::is_loaded = false; } }
    match loadfn("GetTexParameterxv") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterxv = transmute(ptr); GetTexParameterxv::is_loaded = true; }, _ => unsafe { GetTexParameterxv::is_loaded = false; } }
    match loadfn("GetTexParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::GetTexParameterxvOES = transmute(ptr); GetTexParameterxvOES::is_loaded = true; }, _ => unsafe { GetTexParameterxvOES::is_loaded = false; } }
    match loadfn("GetTextureHandleARB") { ptr if !ptr.is_null() => unsafe { storage::GetTextureHandleARB = transmute(ptr); GetTextureHandleARB::is_loaded = true; }, _ => unsafe { GetTextureHandleARB::is_loaded = false; } }
    match loadfn("GetTextureHandleNV") { ptr if !ptr.is_null() => unsafe { storage::GetTextureHandleNV = transmute(ptr); GetTextureHandleNV::is_loaded = true; }, _ => unsafe { GetTextureHandleNV::is_loaded = false; } }
    match loadfn("GetTextureImageEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureImageEXT = transmute(ptr); GetTextureImageEXT::is_loaded = true; }, _ => unsafe { GetTextureImageEXT::is_loaded = false; } }
    match loadfn("GetTextureLevelParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureLevelParameterfvEXT = transmute(ptr); GetTextureLevelParameterfvEXT::is_loaded = true; }, _ => unsafe { GetTextureLevelParameterfvEXT::is_loaded = false; } }
    match loadfn("GetTextureLevelParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureLevelParameterivEXT = transmute(ptr); GetTextureLevelParameterivEXT::is_loaded = true; }, _ => unsafe { GetTextureLevelParameterivEXT::is_loaded = false; } }
    match loadfn("GetTextureParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureParameterIivEXT = transmute(ptr); GetTextureParameterIivEXT::is_loaded = true; }, _ => unsafe { GetTextureParameterIivEXT::is_loaded = false; } }
    match loadfn("GetTextureParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureParameterIuivEXT = transmute(ptr); GetTextureParameterIuivEXT::is_loaded = true; }, _ => unsafe { GetTextureParameterIuivEXT::is_loaded = false; } }
    match loadfn("GetTextureParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureParameterfvEXT = transmute(ptr); GetTextureParameterfvEXT::is_loaded = true; }, _ => unsafe { GetTextureParameterfvEXT::is_loaded = false; } }
    match loadfn("GetTextureParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTextureParameterivEXT = transmute(ptr); GetTextureParameterivEXT::is_loaded = true; }, _ => unsafe { GetTextureParameterivEXT::is_loaded = false; } }
    match loadfn("GetTextureSamplerHandleARB") { ptr if !ptr.is_null() => unsafe { storage::GetTextureSamplerHandleARB = transmute(ptr); GetTextureSamplerHandleARB::is_loaded = true; }, _ => unsafe { GetTextureSamplerHandleARB::is_loaded = false; } }
    match loadfn("GetTextureSamplerHandleNV") { ptr if !ptr.is_null() => unsafe { storage::GetTextureSamplerHandleNV = transmute(ptr); GetTextureSamplerHandleNV::is_loaded = true; }, _ => unsafe { GetTextureSamplerHandleNV::is_loaded = false; } }
    match loadfn("GetTrackMatrixivNV") { ptr if !ptr.is_null() => unsafe { storage::GetTrackMatrixivNV = transmute(ptr); GetTrackMatrixivNV::is_loaded = true; }, _ => unsafe { GetTrackMatrixivNV::is_loaded = false; } }
    match loadfn("GetTransformFeedbackVarying") { ptr if !ptr.is_null() => unsafe { storage::GetTransformFeedbackVarying = transmute(ptr); GetTransformFeedbackVarying::is_loaded = true; }, _ => unsafe { GetTransformFeedbackVarying::is_loaded = false; } }
    match loadfn("GetTransformFeedbackVaryingEXT") { ptr if !ptr.is_null() => unsafe { storage::GetTransformFeedbackVaryingEXT = transmute(ptr); GetTransformFeedbackVaryingEXT::is_loaded = true; }, _ => unsafe { GetTransformFeedbackVaryingEXT::is_loaded = false; } }
    match loadfn("GetTransformFeedbackVaryingNV") { ptr if !ptr.is_null() => unsafe { storage::GetTransformFeedbackVaryingNV = transmute(ptr); GetTransformFeedbackVaryingNV::is_loaded = true; }, _ => unsafe { GetTransformFeedbackVaryingNV::is_loaded = false; } }
    match loadfn("GetTranslatedShaderSourceANGLE") { ptr if !ptr.is_null() => unsafe { storage::GetTranslatedShaderSourceANGLE = transmute(ptr); GetTranslatedShaderSourceANGLE::is_loaded = true; }, _ => unsafe { GetTranslatedShaderSourceANGLE::is_loaded = false; } }
    match loadfn("GetUniformBlockIndex") { ptr if !ptr.is_null() => unsafe { storage::GetUniformBlockIndex = transmute(ptr); GetUniformBlockIndex::is_loaded = true; }, _ => unsafe { GetUniformBlockIndex::is_loaded = false; } }
    match loadfn("GetUniformBufferSizeEXT") { ptr if !ptr.is_null() => unsafe { storage::GetUniformBufferSizeEXT = transmute(ptr); GetUniformBufferSizeEXT::is_loaded = true; }, _ => unsafe { GetUniformBufferSizeEXT::is_loaded = false; } }
    match loadfn("GetUniformIndices") { ptr if !ptr.is_null() => unsafe { storage::GetUniformIndices = transmute(ptr); GetUniformIndices::is_loaded = true; }, _ => unsafe { GetUniformIndices::is_loaded = false; } }
    match loadfn("GetUniformLocation") { ptr if !ptr.is_null() => unsafe { storage::GetUniformLocation = transmute(ptr); GetUniformLocation::is_loaded = true; }, _ => unsafe { GetUniformLocation::is_loaded = false; } }
    match loadfn("GetUniformLocationARB") { ptr if !ptr.is_null() => unsafe { storage::GetUniformLocationARB = transmute(ptr); GetUniformLocationARB::is_loaded = true; }, _ => unsafe { GetUniformLocationARB::is_loaded = false; } }
    match loadfn("GetUniformOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::GetUniformOffsetEXT = transmute(ptr); GetUniformOffsetEXT::is_loaded = true; }, _ => unsafe { GetUniformOffsetEXT::is_loaded = false; } }
    match loadfn("GetUniformSubroutineuiv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformSubroutineuiv = transmute(ptr); GetUniformSubroutineuiv::is_loaded = true; }, _ => unsafe { GetUniformSubroutineuiv::is_loaded = false; } }
    match loadfn("GetUniformdv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformdv = transmute(ptr); GetUniformdv::is_loaded = true; }, _ => unsafe { GetUniformdv::is_loaded = false; } }
    match loadfn("GetUniformfv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformfv = transmute(ptr); GetUniformfv::is_loaded = true; }, _ => unsafe { GetUniformfv::is_loaded = false; } }
    match loadfn("GetUniformfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetUniformfvARB = transmute(ptr); GetUniformfvARB::is_loaded = true; }, _ => unsafe { GetUniformfvARB::is_loaded = false; } }
    match loadfn("GetUniformi64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetUniformi64vNV = transmute(ptr); GetUniformi64vNV::is_loaded = true; }, _ => unsafe { GetUniformi64vNV::is_loaded = false; } }
    match loadfn("GetUniformiv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformiv = transmute(ptr); GetUniformiv::is_loaded = true; }, _ => unsafe { GetUniformiv::is_loaded = false; } }
    match loadfn("GetUniformivARB") { ptr if !ptr.is_null() => unsafe { storage::GetUniformivARB = transmute(ptr); GetUniformivARB::is_loaded = true; }, _ => unsafe { GetUniformivARB::is_loaded = false; } }
    match loadfn("GetUniformui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetUniformui64vNV = transmute(ptr); GetUniformui64vNV::is_loaded = true; }, _ => unsafe { GetUniformui64vNV::is_loaded = false; } }
    match loadfn("GetUniformuiv") { ptr if !ptr.is_null() => unsafe { storage::GetUniformuiv = transmute(ptr); GetUniformuiv::is_loaded = true; }, _ => unsafe { GetUniformuiv::is_loaded = false; } }
    match loadfn("GetUniformuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetUniformuivEXT = transmute(ptr); GetUniformuivEXT::is_loaded = true; }, _ => unsafe { GetUniformuivEXT::is_loaded = false; } }
    match loadfn("GetVariantArrayObjectfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetVariantArrayObjectfvATI = transmute(ptr); GetVariantArrayObjectfvATI::is_loaded = true; }, _ => unsafe { GetVariantArrayObjectfvATI::is_loaded = false; } }
    match loadfn("GetVariantArrayObjectivATI") { ptr if !ptr.is_null() => unsafe { storage::GetVariantArrayObjectivATI = transmute(ptr); GetVariantArrayObjectivATI::is_loaded = true; }, _ => unsafe { GetVariantArrayObjectivATI::is_loaded = false; } }
    match loadfn("GetVariantBooleanvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVariantBooleanvEXT = transmute(ptr); GetVariantBooleanvEXT::is_loaded = true; }, _ => unsafe { GetVariantBooleanvEXT::is_loaded = false; } }
    match loadfn("GetVariantFloatvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVariantFloatvEXT = transmute(ptr); GetVariantFloatvEXT::is_loaded = true; }, _ => unsafe { GetVariantFloatvEXT::is_loaded = false; } }
    match loadfn("GetVariantIntegervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVariantIntegervEXT = transmute(ptr); GetVariantIntegervEXT::is_loaded = true; }, _ => unsafe { GetVariantIntegervEXT::is_loaded = false; } }
    match loadfn("GetVariantPointervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVariantPointervEXT = transmute(ptr); GetVariantPointervEXT::is_loaded = true; }, _ => unsafe { GetVariantPointervEXT::is_loaded = false; } }
    match loadfn("GetVaryingLocationNV") { ptr if !ptr.is_null() => unsafe { storage::GetVaryingLocationNV = transmute(ptr); GetVaryingLocationNV::is_loaded = true; }, _ => unsafe { GetVaryingLocationNV::is_loaded = false; } }
    match loadfn("GetVertexArrayIntegeri_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexArrayIntegeri_vEXT = transmute(ptr); GetVertexArrayIntegeri_vEXT::is_loaded = true; }, _ => unsafe { GetVertexArrayIntegeri_vEXT::is_loaded = false; } }
    match loadfn("GetVertexArrayIntegervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexArrayIntegervEXT = transmute(ptr); GetVertexArrayIntegervEXT::is_loaded = true; }, _ => unsafe { GetVertexArrayIntegervEXT::is_loaded = false; } }
    match loadfn("GetVertexArrayPointeri_vEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexArrayPointeri_vEXT = transmute(ptr); GetVertexArrayPointeri_vEXT::is_loaded = true; }, _ => unsafe { GetVertexArrayPointeri_vEXT::is_loaded = false; } }
    match loadfn("GetVertexArrayPointervEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexArrayPointervEXT = transmute(ptr); GetVertexArrayPointervEXT::is_loaded = true; }, _ => unsafe { GetVertexArrayPointervEXT::is_loaded = false; } }
    match loadfn("GetVertexAttribArrayObjectfvATI") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribArrayObjectfvATI = transmute(ptr); GetVertexAttribArrayObjectfvATI::is_loaded = true; }, _ => unsafe { GetVertexAttribArrayObjectfvATI::is_loaded = false; } }
    match loadfn("GetVertexAttribArrayObjectivATI") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribArrayObjectivATI = transmute(ptr); GetVertexAttribArrayObjectivATI::is_loaded = true; }, _ => unsafe { GetVertexAttribArrayObjectivATI::is_loaded = false; } }
    match loadfn("GetVertexAttribIiv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribIiv = transmute(ptr); GetVertexAttribIiv::is_loaded = true; }, _ => unsafe { GetVertexAttribIiv::is_loaded = false; } }
    match loadfn("GetVertexAttribIivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribIivEXT = transmute(ptr); GetVertexAttribIivEXT::is_loaded = true; }, _ => unsafe { GetVertexAttribIivEXT::is_loaded = false; } }
    match loadfn("GetVertexAttribIuiv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribIuiv = transmute(ptr); GetVertexAttribIuiv::is_loaded = true; }, _ => unsafe { GetVertexAttribIuiv::is_loaded = false; } }
    match loadfn("GetVertexAttribIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribIuivEXT = transmute(ptr); GetVertexAttribIuivEXT::is_loaded = true; }, _ => unsafe { GetVertexAttribIuivEXT::is_loaded = false; } }
    match loadfn("GetVertexAttribLdv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLdv = transmute(ptr); GetVertexAttribLdv::is_loaded = true; }, _ => unsafe { GetVertexAttribLdv::is_loaded = false; } }
    match loadfn("GetVertexAttribLdvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLdvEXT = transmute(ptr); GetVertexAttribLdvEXT::is_loaded = true; }, _ => unsafe { GetVertexAttribLdvEXT::is_loaded = false; } }
    match loadfn("GetVertexAttribLi64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLi64vNV = transmute(ptr); GetVertexAttribLi64vNV::is_loaded = true; }, _ => unsafe { GetVertexAttribLi64vNV::is_loaded = false; } }
    match loadfn("GetVertexAttribLui64vARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLui64vARB = transmute(ptr); GetVertexAttribLui64vARB::is_loaded = true; }, _ => unsafe { GetVertexAttribLui64vARB::is_loaded = false; } }
    match loadfn("GetVertexAttribLui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribLui64vNV = transmute(ptr); GetVertexAttribLui64vNV::is_loaded = true; }, _ => unsafe { GetVertexAttribLui64vNV::is_loaded = false; } }
    match loadfn("GetVertexAttribPointerv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribPointerv = transmute(ptr); GetVertexAttribPointerv::is_loaded = true; }, _ => unsafe { GetVertexAttribPointerv::is_loaded = false; } }
    match loadfn("GetVertexAttribPointervARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribPointervARB = transmute(ptr); GetVertexAttribPointervARB::is_loaded = true; }, _ => unsafe { GetVertexAttribPointervARB::is_loaded = false; } }
    match loadfn("GetVertexAttribPointervNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribPointervNV = transmute(ptr); GetVertexAttribPointervNV::is_loaded = true; }, _ => unsafe { GetVertexAttribPointervNV::is_loaded = false; } }
    match loadfn("GetVertexAttribdv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribdv = transmute(ptr); GetVertexAttribdv::is_loaded = true; }, _ => unsafe { GetVertexAttribdv::is_loaded = false; } }
    match loadfn("GetVertexAttribdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribdvARB = transmute(ptr); GetVertexAttribdvARB::is_loaded = true; }, _ => unsafe { GetVertexAttribdvARB::is_loaded = false; } }
    match loadfn("GetVertexAttribdvNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribdvNV = transmute(ptr); GetVertexAttribdvNV::is_loaded = true; }, _ => unsafe { GetVertexAttribdvNV::is_loaded = false; } }
    match loadfn("GetVertexAttribfv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribfv = transmute(ptr); GetVertexAttribfv::is_loaded = true; }, _ => unsafe { GetVertexAttribfv::is_loaded = false; } }
    match loadfn("GetVertexAttribfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribfvARB = transmute(ptr); GetVertexAttribfvARB::is_loaded = true; }, _ => unsafe { GetVertexAttribfvARB::is_loaded = false; } }
    match loadfn("GetVertexAttribfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribfvNV = transmute(ptr); GetVertexAttribfvNV::is_loaded = true; }, _ => unsafe { GetVertexAttribfvNV::is_loaded = false; } }
    match loadfn("GetVertexAttribiv") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribiv = transmute(ptr); GetVertexAttribiv::is_loaded = true; }, _ => unsafe { GetVertexAttribiv::is_loaded = false; } }
    match loadfn("GetVertexAttribivARB") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribivARB = transmute(ptr); GetVertexAttribivARB::is_loaded = true; }, _ => unsafe { GetVertexAttribivARB::is_loaded = false; } }
    match loadfn("GetVertexAttribivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVertexAttribivNV = transmute(ptr); GetVertexAttribivNV::is_loaded = true; }, _ => unsafe { GetVertexAttribivNV::is_loaded = false; } }
    match loadfn("GetVideoCaptureStreamdvNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoCaptureStreamdvNV = transmute(ptr); GetVideoCaptureStreamdvNV::is_loaded = true; }, _ => unsafe { GetVideoCaptureStreamdvNV::is_loaded = false; } }
    match loadfn("GetVideoCaptureStreamfvNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoCaptureStreamfvNV = transmute(ptr); GetVideoCaptureStreamfvNV::is_loaded = true; }, _ => unsafe { GetVideoCaptureStreamfvNV::is_loaded = false; } }
    match loadfn("GetVideoCaptureStreamivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoCaptureStreamivNV = transmute(ptr); GetVideoCaptureStreamivNV::is_loaded = true; }, _ => unsafe { GetVideoCaptureStreamivNV::is_loaded = false; } }
    match loadfn("GetVideoCaptureivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoCaptureivNV = transmute(ptr); GetVideoCaptureivNV::is_loaded = true; }, _ => unsafe { GetVideoCaptureivNV::is_loaded = false; } }
    match loadfn("GetVideoi64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoi64vNV = transmute(ptr); GetVideoi64vNV::is_loaded = true; }, _ => unsafe { GetVideoi64vNV::is_loaded = false; } }
    match loadfn("GetVideoivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoivNV = transmute(ptr); GetVideoivNV::is_loaded = true; }, _ => unsafe { GetVideoivNV::is_loaded = false; } }
    match loadfn("GetVideoui64vNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideoui64vNV = transmute(ptr); GetVideoui64vNV::is_loaded = true; }, _ => unsafe { GetVideoui64vNV::is_loaded = false; } }
    match loadfn("GetVideouivNV") { ptr if !ptr.is_null() => unsafe { storage::GetVideouivNV = transmute(ptr); GetVideouivNV::is_loaded = true; }, _ => unsafe { GetVideouivNV::is_loaded = false; } }
    match loadfn("GetnColorTableARB") { ptr if !ptr.is_null() => unsafe { storage::GetnColorTableARB = transmute(ptr); GetnColorTableARB::is_loaded = true; }, _ => unsafe { GetnColorTableARB::is_loaded = false; } }
    match loadfn("GetnCompressedTexImageARB") { ptr if !ptr.is_null() => unsafe { storage::GetnCompressedTexImageARB = transmute(ptr); GetnCompressedTexImageARB::is_loaded = true; }, _ => unsafe { GetnCompressedTexImageARB::is_loaded = false; } }
    match loadfn("GetnConvolutionFilterARB") { ptr if !ptr.is_null() => unsafe { storage::GetnConvolutionFilterARB = transmute(ptr); GetnConvolutionFilterARB::is_loaded = true; }, _ => unsafe { GetnConvolutionFilterARB::is_loaded = false; } }
    match loadfn("GetnHistogramARB") { ptr if !ptr.is_null() => unsafe { storage::GetnHistogramARB = transmute(ptr); GetnHistogramARB::is_loaded = true; }, _ => unsafe { GetnHistogramARB::is_loaded = false; } }
    match loadfn("GetnMapdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnMapdvARB = transmute(ptr); GetnMapdvARB::is_loaded = true; }, _ => unsafe { GetnMapdvARB::is_loaded = false; } }
    match loadfn("GetnMapfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnMapfvARB = transmute(ptr); GetnMapfvARB::is_loaded = true; }, _ => unsafe { GetnMapfvARB::is_loaded = false; } }
    match loadfn("GetnMapivARB") { ptr if !ptr.is_null() => unsafe { storage::GetnMapivARB = transmute(ptr); GetnMapivARB::is_loaded = true; }, _ => unsafe { GetnMapivARB::is_loaded = false; } }
    match loadfn("GetnMinmaxARB") { ptr if !ptr.is_null() => unsafe { storage::GetnMinmaxARB = transmute(ptr); GetnMinmaxARB::is_loaded = true; }, _ => unsafe { GetnMinmaxARB::is_loaded = false; } }
    match loadfn("GetnPixelMapfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnPixelMapfvARB = transmute(ptr); GetnPixelMapfvARB::is_loaded = true; }, _ => unsafe { GetnPixelMapfvARB::is_loaded = false; } }
    match loadfn("GetnPixelMapuivARB") { ptr if !ptr.is_null() => unsafe { storage::GetnPixelMapuivARB = transmute(ptr); GetnPixelMapuivARB::is_loaded = true; }, _ => unsafe { GetnPixelMapuivARB::is_loaded = false; } }
    match loadfn("GetnPixelMapusvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnPixelMapusvARB = transmute(ptr); GetnPixelMapusvARB::is_loaded = true; }, _ => unsafe { GetnPixelMapusvARB::is_loaded = false; } }
    match loadfn("GetnPolygonStippleARB") { ptr if !ptr.is_null() => unsafe { storage::GetnPolygonStippleARB = transmute(ptr); GetnPolygonStippleARB::is_loaded = true; }, _ => unsafe { GetnPolygonStippleARB::is_loaded = false; } }
    match loadfn("GetnSeparableFilterARB") { ptr if !ptr.is_null() => unsafe { storage::GetnSeparableFilterARB = transmute(ptr); GetnSeparableFilterARB::is_loaded = true; }, _ => unsafe { GetnSeparableFilterARB::is_loaded = false; } }
    match loadfn("GetnTexImageARB") { ptr if !ptr.is_null() => unsafe { storage::GetnTexImageARB = transmute(ptr); GetnTexImageARB::is_loaded = true; }, _ => unsafe { GetnTexImageARB::is_loaded = false; } }
    match loadfn("GetnUniformdvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformdvARB = transmute(ptr); GetnUniformdvARB::is_loaded = true; }, _ => unsafe { GetnUniformdvARB::is_loaded = false; } }
    match loadfn("GetnUniformfvARB") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformfvARB = transmute(ptr); GetnUniformfvARB::is_loaded = true; }, _ => unsafe { GetnUniformfvARB::is_loaded = false; } }
    match loadfn("GetnUniformfvEXT") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformfvEXT = transmute(ptr); GetnUniformfvEXT::is_loaded = true; }, _ => unsafe { GetnUniformfvEXT::is_loaded = false; } }
    match loadfn("GetnUniformivARB") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformivARB = transmute(ptr); GetnUniformivARB::is_loaded = true; }, _ => unsafe { GetnUniformivARB::is_loaded = false; } }
    match loadfn("GetnUniformivEXT") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformivEXT = transmute(ptr); GetnUniformivEXT::is_loaded = true; }, _ => unsafe { GetnUniformivEXT::is_loaded = false; } }
    match loadfn("GetnUniformuivARB") { ptr if !ptr.is_null() => unsafe { storage::GetnUniformuivARB = transmute(ptr); GetnUniformuivARB::is_loaded = true; }, _ => unsafe { GetnUniformuivARB::is_loaded = false; } }
    match loadfn("GlobalAlphaFactorbSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorbSUN = transmute(ptr); GlobalAlphaFactorbSUN::is_loaded = true; }, _ => unsafe { GlobalAlphaFactorbSUN::is_loaded = false; } }
    match loadfn("GlobalAlphaFactordSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactordSUN = transmute(ptr); GlobalAlphaFactordSUN::is_loaded = true; }, _ => unsafe { GlobalAlphaFactordSUN::is_loaded = false; } }
    match loadfn("GlobalAlphaFactorfSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorfSUN = transmute(ptr); GlobalAlphaFactorfSUN::is_loaded = true; }, _ => unsafe { GlobalAlphaFactorfSUN::is_loaded = false; } }
    match loadfn("GlobalAlphaFactoriSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactoriSUN = transmute(ptr); GlobalAlphaFactoriSUN::is_loaded = true; }, _ => unsafe { GlobalAlphaFactoriSUN::is_loaded = false; } }
    match loadfn("GlobalAlphaFactorsSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorsSUN = transmute(ptr); GlobalAlphaFactorsSUN::is_loaded = true; }, _ => unsafe { GlobalAlphaFactorsSUN::is_loaded = false; } }
    match loadfn("GlobalAlphaFactorubSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorubSUN = transmute(ptr); GlobalAlphaFactorubSUN::is_loaded = true; }, _ => unsafe { GlobalAlphaFactorubSUN::is_loaded = false; } }
    match loadfn("GlobalAlphaFactoruiSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactoruiSUN = transmute(ptr); GlobalAlphaFactoruiSUN::is_loaded = true; }, _ => unsafe { GlobalAlphaFactoruiSUN::is_loaded = false; } }
    match loadfn("GlobalAlphaFactorusSUN") { ptr if !ptr.is_null() => unsafe { storage::GlobalAlphaFactorusSUN = transmute(ptr); GlobalAlphaFactorusSUN::is_loaded = true; }, _ => unsafe { GlobalAlphaFactorusSUN::is_loaded = false; } }
    match loadfn("Hint") { ptr if !ptr.is_null() => unsafe { storage::Hint = transmute(ptr); Hint::is_loaded = true; }, _ => unsafe { Hint::is_loaded = false; } }
    match loadfn("HintPGI") { ptr if !ptr.is_null() => unsafe { storage::HintPGI = transmute(ptr); HintPGI::is_loaded = true; }, _ => unsafe { HintPGI::is_loaded = false; } }
    match loadfn("Histogram") { ptr if !ptr.is_null() => unsafe { storage::Histogram = transmute(ptr); Histogram::is_loaded = true; }, _ => unsafe { Histogram::is_loaded = false; } }
    match loadfn("HistogramEXT") { ptr if !ptr.is_null() => unsafe { storage::HistogramEXT = transmute(ptr); HistogramEXT::is_loaded = true; }, _ => unsafe { HistogramEXT::is_loaded = false; } }
    match loadfn("IglooInterfaceSGIX") { ptr if !ptr.is_null() => unsafe { storage::IglooInterfaceSGIX = transmute(ptr); IglooInterfaceSGIX::is_loaded = true; }, _ => unsafe { IglooInterfaceSGIX::is_loaded = false; } }
    match loadfn("ImageTransformParameterfHP") { ptr if !ptr.is_null() => unsafe { storage::ImageTransformParameterfHP = transmute(ptr); ImageTransformParameterfHP::is_loaded = true; }, _ => unsafe { ImageTransformParameterfHP::is_loaded = false; } }
    match loadfn("ImageTransformParameterfvHP") { ptr if !ptr.is_null() => unsafe { storage::ImageTransformParameterfvHP = transmute(ptr); ImageTransformParameterfvHP::is_loaded = true; }, _ => unsafe { ImageTransformParameterfvHP::is_loaded = false; } }
    match loadfn("ImageTransformParameteriHP") { ptr if !ptr.is_null() => unsafe { storage::ImageTransformParameteriHP = transmute(ptr); ImageTransformParameteriHP::is_loaded = true; }, _ => unsafe { ImageTransformParameteriHP::is_loaded = false; } }
    match loadfn("ImageTransformParameterivHP") { ptr if !ptr.is_null() => unsafe { storage::ImageTransformParameterivHP = transmute(ptr); ImageTransformParameterivHP::is_loaded = true; }, _ => unsafe { ImageTransformParameterivHP::is_loaded = false; } }
    match loadfn("ImportSyncEXT") { ptr if !ptr.is_null() => unsafe { storage::ImportSyncEXT = transmute(ptr); ImportSyncEXT::is_loaded = true; }, _ => unsafe { ImportSyncEXT::is_loaded = false; } }
    match loadfn("IndexFormatNV") { ptr if !ptr.is_null() => unsafe { storage::IndexFormatNV = transmute(ptr); IndexFormatNV::is_loaded = true; }, _ => unsafe { IndexFormatNV::is_loaded = false; } }
    match loadfn("IndexFuncEXT") { ptr if !ptr.is_null() => unsafe { storage::IndexFuncEXT = transmute(ptr); IndexFuncEXT::is_loaded = true; }, _ => unsafe { IndexFuncEXT::is_loaded = false; } }
    match loadfn("IndexMask") { ptr if !ptr.is_null() => unsafe { storage::IndexMask = transmute(ptr); IndexMask::is_loaded = true; }, _ => unsafe { IndexMask::is_loaded = false; } }
    match loadfn("IndexMaterialEXT") { ptr if !ptr.is_null() => unsafe { storage::IndexMaterialEXT = transmute(ptr); IndexMaterialEXT::is_loaded = true; }, _ => unsafe { IndexMaterialEXT::is_loaded = false; } }
    match loadfn("IndexPointer") { ptr if !ptr.is_null() => unsafe { storage::IndexPointer = transmute(ptr); IndexPointer::is_loaded = true; }, _ => unsafe { IndexPointer::is_loaded = false; } }
    match loadfn("IndexPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::IndexPointerEXT = transmute(ptr); IndexPointerEXT::is_loaded = true; }, _ => unsafe { IndexPointerEXT::is_loaded = false; } }
    match loadfn("IndexPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::IndexPointerListIBM = transmute(ptr); IndexPointerListIBM::is_loaded = true; }, _ => unsafe { IndexPointerListIBM::is_loaded = false; } }
    match loadfn("Indexd") { ptr if !ptr.is_null() => unsafe { storage::Indexd = transmute(ptr); Indexd::is_loaded = true; }, _ => unsafe { Indexd::is_loaded = false; } }
    match loadfn("Indexdv") { ptr if !ptr.is_null() => unsafe { storage::Indexdv = transmute(ptr); Indexdv::is_loaded = true; }, _ => unsafe { Indexdv::is_loaded = false; } }
    match loadfn("Indexf") { ptr if !ptr.is_null() => unsafe { storage::Indexf = transmute(ptr); Indexf::is_loaded = true; }, _ => unsafe { Indexf::is_loaded = false; } }
    match loadfn("Indexfv") { ptr if !ptr.is_null() => unsafe { storage::Indexfv = transmute(ptr); Indexfv::is_loaded = true; }, _ => unsafe { Indexfv::is_loaded = false; } }
    match loadfn("Indexi") { ptr if !ptr.is_null() => unsafe { storage::Indexi = transmute(ptr); Indexi::is_loaded = true; }, _ => unsafe { Indexi::is_loaded = false; } }
    match loadfn("Indexiv") { ptr if !ptr.is_null() => unsafe { storage::Indexiv = transmute(ptr); Indexiv::is_loaded = true; }, _ => unsafe { Indexiv::is_loaded = false; } }
    match loadfn("Indexs") { ptr if !ptr.is_null() => unsafe { storage::Indexs = transmute(ptr); Indexs::is_loaded = true; }, _ => unsafe { Indexs::is_loaded = false; } }
    match loadfn("Indexsv") { ptr if !ptr.is_null() => unsafe { storage::Indexsv = transmute(ptr); Indexsv::is_loaded = true; }, _ => unsafe { Indexsv::is_loaded = false; } }
    match loadfn("Indexub") { ptr if !ptr.is_null() => unsafe { storage::Indexub = transmute(ptr); Indexub::is_loaded = true; }, _ => unsafe { Indexub::is_loaded = false; } }
    match loadfn("Indexubv") { ptr if !ptr.is_null() => unsafe { storage::Indexubv = transmute(ptr); Indexubv::is_loaded = true; }, _ => unsafe { Indexubv::is_loaded = false; } }
    match loadfn("IndexxOES") { ptr if !ptr.is_null() => unsafe { storage::IndexxOES = transmute(ptr); IndexxOES::is_loaded = true; }, _ => unsafe { IndexxOES::is_loaded = false; } }
    match loadfn("IndexxvOES") { ptr if !ptr.is_null() => unsafe { storage::IndexxvOES = transmute(ptr); IndexxvOES::is_loaded = true; }, _ => unsafe { IndexxvOES::is_loaded = false; } }
    match loadfn("InitNames") { ptr if !ptr.is_null() => unsafe { storage::InitNames = transmute(ptr); InitNames::is_loaded = true; }, _ => unsafe { InitNames::is_loaded = false; } }
    match loadfn("InsertComponentEXT") { ptr if !ptr.is_null() => unsafe { storage::InsertComponentEXT = transmute(ptr); InsertComponentEXT::is_loaded = true; }, _ => unsafe { InsertComponentEXT::is_loaded = false; } }
    match loadfn("InsertEventMarkerEXT") { ptr if !ptr.is_null() => unsafe { storage::InsertEventMarkerEXT = transmute(ptr); InsertEventMarkerEXT::is_loaded = true; }, _ => unsafe { InsertEventMarkerEXT::is_loaded = false; } }
    match loadfn("InstrumentsBufferSGIX") { ptr if !ptr.is_null() => unsafe { storage::InstrumentsBufferSGIX = transmute(ptr); InstrumentsBufferSGIX::is_loaded = true; }, _ => unsafe { InstrumentsBufferSGIX::is_loaded = false; } }
    match loadfn("InterleavedArrays") { ptr if !ptr.is_null() => unsafe { storage::InterleavedArrays = transmute(ptr); InterleavedArrays::is_loaded = true; }, _ => unsafe { InterleavedArrays::is_loaded = false; } }
    match loadfn("InterpolatePathsNV") { ptr if !ptr.is_null() => unsafe { storage::InterpolatePathsNV = transmute(ptr); InterpolatePathsNV::is_loaded = true; }, _ => unsafe { InterpolatePathsNV::is_loaded = false; } }
    match loadfn("InvalidateBufferData") { ptr if !ptr.is_null() => unsafe { storage::InvalidateBufferData = transmute(ptr); InvalidateBufferData::is_loaded = true; }, _ => unsafe { InvalidateBufferData::is_loaded = false; } }
    match loadfn("InvalidateBufferSubData") { ptr if !ptr.is_null() => unsafe { storage::InvalidateBufferSubData = transmute(ptr); InvalidateBufferSubData::is_loaded = true; }, _ => unsafe { InvalidateBufferSubData::is_loaded = false; } }
    match loadfn("InvalidateFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::InvalidateFramebuffer = transmute(ptr); InvalidateFramebuffer::is_loaded = true; }, _ => unsafe { InvalidateFramebuffer::is_loaded = false; } }
    match loadfn("InvalidateSubFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::InvalidateSubFramebuffer = transmute(ptr); InvalidateSubFramebuffer::is_loaded = true; }, _ => unsafe { InvalidateSubFramebuffer::is_loaded = false; } }
    match loadfn("InvalidateTexImage") { ptr if !ptr.is_null() => unsafe { storage::InvalidateTexImage = transmute(ptr); InvalidateTexImage::is_loaded = true; }, _ => unsafe { InvalidateTexImage::is_loaded = false; } }
    match loadfn("InvalidateTexSubImage") { ptr if !ptr.is_null() => unsafe { storage::InvalidateTexSubImage = transmute(ptr); InvalidateTexSubImage::is_loaded = true; }, _ => unsafe { InvalidateTexSubImage::is_loaded = false; } }
    match loadfn("IsAsyncMarkerSGIX") { ptr if !ptr.is_null() => unsafe { storage::IsAsyncMarkerSGIX = transmute(ptr); IsAsyncMarkerSGIX::is_loaded = true; }, _ => unsafe { IsAsyncMarkerSGIX::is_loaded = false; } }
    match loadfn("IsBuffer") { ptr if !ptr.is_null() => unsafe { storage::IsBuffer = transmute(ptr); IsBuffer::is_loaded = true; }, _ => unsafe { IsBuffer::is_loaded = false; } }
    match loadfn("IsBufferARB") { ptr if !ptr.is_null() => unsafe { storage::IsBufferARB = transmute(ptr); IsBufferARB::is_loaded = true; }, _ => unsafe { IsBufferARB::is_loaded = false; } }
    match loadfn("IsBufferResidentNV") { ptr if !ptr.is_null() => unsafe { storage::IsBufferResidentNV = transmute(ptr); IsBufferResidentNV::is_loaded = true; }, _ => unsafe { IsBufferResidentNV::is_loaded = false; } }
    match loadfn("IsEnabled") { ptr if !ptr.is_null() => unsafe { storage::IsEnabled = transmute(ptr); IsEnabled::is_loaded = true; }, _ => unsafe { IsEnabled::is_loaded = false; } }
    match loadfn("IsEnabledIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::IsEnabledIndexedEXT = transmute(ptr); IsEnabledIndexedEXT::is_loaded = true; }, _ => unsafe { IsEnabledIndexedEXT::is_loaded = false; } }
    match loadfn("IsEnabledi") { ptr if !ptr.is_null() => unsafe { storage::IsEnabledi = transmute(ptr); IsEnabledi::is_loaded = true; }, _ => unsafe { IsEnabledi::is_loaded = false; } }
    match loadfn("IsFenceAPPLE") { ptr if !ptr.is_null() => unsafe { storage::IsFenceAPPLE = transmute(ptr); IsFenceAPPLE::is_loaded = true; }, _ => unsafe { IsFenceAPPLE::is_loaded = false; } }
    match loadfn("IsFenceNV") { ptr if !ptr.is_null() => unsafe { storage::IsFenceNV = transmute(ptr); IsFenceNV::is_loaded = true; }, _ => unsafe { IsFenceNV::is_loaded = false; } }
    match loadfn("IsFramebuffer") { ptr if !ptr.is_null() => unsafe { storage::IsFramebuffer = transmute(ptr); IsFramebuffer::is_loaded = true; }, _ => unsafe { IsFramebuffer::is_loaded = false; } }
    match loadfn("IsFramebufferEXT") { ptr if !ptr.is_null() => unsafe { storage::IsFramebufferEXT = transmute(ptr); IsFramebufferEXT::is_loaded = true; }, _ => unsafe { IsFramebufferEXT::is_loaded = false; } }
    match loadfn("IsFramebufferOES") { ptr if !ptr.is_null() => unsafe { storage::IsFramebufferOES = transmute(ptr); IsFramebufferOES::is_loaded = true; }, _ => unsafe { IsFramebufferOES::is_loaded = false; } }
    match loadfn("IsImageHandleResidentARB") { ptr if !ptr.is_null() => unsafe { storage::IsImageHandleResidentARB = transmute(ptr); IsImageHandleResidentARB::is_loaded = true; }, _ => unsafe { IsImageHandleResidentARB::is_loaded = false; } }
    match loadfn("IsImageHandleResidentNV") { ptr if !ptr.is_null() => unsafe { storage::IsImageHandleResidentNV = transmute(ptr); IsImageHandleResidentNV::is_loaded = true; }, _ => unsafe { IsImageHandleResidentNV::is_loaded = false; } }
    match loadfn("IsList") { ptr if !ptr.is_null() => unsafe { storage::IsList = transmute(ptr); IsList::is_loaded = true; }, _ => unsafe { IsList::is_loaded = false; } }
    match loadfn("IsNameAMD") { ptr if !ptr.is_null() => unsafe { storage::IsNameAMD = transmute(ptr); IsNameAMD::is_loaded = true; }, _ => unsafe { IsNameAMD::is_loaded = false; } }
    match loadfn("IsNamedBufferResidentNV") { ptr if !ptr.is_null() => unsafe { storage::IsNamedBufferResidentNV = transmute(ptr); IsNamedBufferResidentNV::is_loaded = true; }, _ => unsafe { IsNamedBufferResidentNV::is_loaded = false; } }
    match loadfn("IsNamedStringARB") { ptr if !ptr.is_null() => unsafe { storage::IsNamedStringARB = transmute(ptr); IsNamedStringARB::is_loaded = true; }, _ => unsafe { IsNamedStringARB::is_loaded = false; } }
    match loadfn("IsObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::IsObjectBufferATI = transmute(ptr); IsObjectBufferATI::is_loaded = true; }, _ => unsafe { IsObjectBufferATI::is_loaded = false; } }
    match loadfn("IsOcclusionQueryNV") { ptr if !ptr.is_null() => unsafe { storage::IsOcclusionQueryNV = transmute(ptr); IsOcclusionQueryNV::is_loaded = true; }, _ => unsafe { IsOcclusionQueryNV::is_loaded = false; } }
    match loadfn("IsPathNV") { ptr if !ptr.is_null() => unsafe { storage::IsPathNV = transmute(ptr); IsPathNV::is_loaded = true; }, _ => unsafe { IsPathNV::is_loaded = false; } }
    match loadfn("IsPointInFillPathNV") { ptr if !ptr.is_null() => unsafe { storage::IsPointInFillPathNV = transmute(ptr); IsPointInFillPathNV::is_loaded = true; }, _ => unsafe { IsPointInFillPathNV::is_loaded = false; } }
    match loadfn("IsPointInStrokePathNV") { ptr if !ptr.is_null() => unsafe { storage::IsPointInStrokePathNV = transmute(ptr); IsPointInStrokePathNV::is_loaded = true; }, _ => unsafe { IsPointInStrokePathNV::is_loaded = false; } }
    match loadfn("IsProgram") { ptr if !ptr.is_null() => unsafe { storage::IsProgram = transmute(ptr); IsProgram::is_loaded = true; }, _ => unsafe { IsProgram::is_loaded = false; } }
    match loadfn("IsProgramARB") { ptr if !ptr.is_null() => unsafe { storage::IsProgramARB = transmute(ptr); IsProgramARB::is_loaded = true; }, _ => unsafe { IsProgramARB::is_loaded = false; } }
    match loadfn("IsProgramNV") { ptr if !ptr.is_null() => unsafe { storage::IsProgramNV = transmute(ptr); IsProgramNV::is_loaded = true; }, _ => unsafe { IsProgramNV::is_loaded = false; } }
    match loadfn("IsProgramPipeline") { ptr if !ptr.is_null() => unsafe { storage::IsProgramPipeline = transmute(ptr); IsProgramPipeline::is_loaded = true; }, _ => unsafe { IsProgramPipeline::is_loaded = false; } }
    match loadfn("IsProgramPipelineEXT") { ptr if !ptr.is_null() => unsafe { storage::IsProgramPipelineEXT = transmute(ptr); IsProgramPipelineEXT::is_loaded = true; }, _ => unsafe { IsProgramPipelineEXT::is_loaded = false; } }
    match loadfn("IsQuery") { ptr if !ptr.is_null() => unsafe { storage::IsQuery = transmute(ptr); IsQuery::is_loaded = true; }, _ => unsafe { IsQuery::is_loaded = false; } }
    match loadfn("IsQueryARB") { ptr if !ptr.is_null() => unsafe { storage::IsQueryARB = transmute(ptr); IsQueryARB::is_loaded = true; }, _ => unsafe { IsQueryARB::is_loaded = false; } }
    match loadfn("IsQueryEXT") { ptr if !ptr.is_null() => unsafe { storage::IsQueryEXT = transmute(ptr); IsQueryEXT::is_loaded = true; }, _ => unsafe { IsQueryEXT::is_loaded = false; } }
    match loadfn("IsRenderbuffer") { ptr if !ptr.is_null() => unsafe { storage::IsRenderbuffer = transmute(ptr); IsRenderbuffer::is_loaded = true; }, _ => unsafe { IsRenderbuffer::is_loaded = false; } }
    match loadfn("IsRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::IsRenderbufferEXT = transmute(ptr); IsRenderbufferEXT::is_loaded = true; }, _ => unsafe { IsRenderbufferEXT::is_loaded = false; } }
    match loadfn("IsRenderbufferOES") { ptr if !ptr.is_null() => unsafe { storage::IsRenderbufferOES = transmute(ptr); IsRenderbufferOES::is_loaded = true; }, _ => unsafe { IsRenderbufferOES::is_loaded = false; } }
    match loadfn("IsSampler") { ptr if !ptr.is_null() => unsafe { storage::IsSampler = transmute(ptr); IsSampler::is_loaded = true; }, _ => unsafe { IsSampler::is_loaded = false; } }
    match loadfn("IsShader") { ptr if !ptr.is_null() => unsafe { storage::IsShader = transmute(ptr); IsShader::is_loaded = true; }, _ => unsafe { IsShader::is_loaded = false; } }
    match loadfn("IsSync") { ptr if !ptr.is_null() => unsafe { storage::IsSync = transmute(ptr); IsSync::is_loaded = true; }, _ => unsafe { IsSync::is_loaded = false; } }
    match loadfn("IsSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::IsSyncAPPLE = transmute(ptr); IsSyncAPPLE::is_loaded = true; }, _ => unsafe { IsSyncAPPLE::is_loaded = false; } }
    match loadfn("IsTexture") { ptr if !ptr.is_null() => unsafe { storage::IsTexture = transmute(ptr); IsTexture::is_loaded = true; }, _ => unsafe { IsTexture::is_loaded = false; } }
    match loadfn("IsTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::IsTextureEXT = transmute(ptr); IsTextureEXT::is_loaded = true; }, _ => unsafe { IsTextureEXT::is_loaded = false; } }
    match loadfn("IsTextureHandleResidentARB") { ptr if !ptr.is_null() => unsafe { storage::IsTextureHandleResidentARB = transmute(ptr); IsTextureHandleResidentARB::is_loaded = true; }, _ => unsafe { IsTextureHandleResidentARB::is_loaded = false; } }
    match loadfn("IsTextureHandleResidentNV") { ptr if !ptr.is_null() => unsafe { storage::IsTextureHandleResidentNV = transmute(ptr); IsTextureHandleResidentNV::is_loaded = true; }, _ => unsafe { IsTextureHandleResidentNV::is_loaded = false; } }
    match loadfn("IsTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::IsTransformFeedback = transmute(ptr); IsTransformFeedback::is_loaded = true; }, _ => unsafe { IsTransformFeedback::is_loaded = false; } }
    match loadfn("IsTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::IsTransformFeedbackNV = transmute(ptr); IsTransformFeedbackNV::is_loaded = true; }, _ => unsafe { IsTransformFeedbackNV::is_loaded = false; } }
    match loadfn("IsVariantEnabledEXT") { ptr if !ptr.is_null() => unsafe { storage::IsVariantEnabledEXT = transmute(ptr); IsVariantEnabledEXT::is_loaded = true; }, _ => unsafe { IsVariantEnabledEXT::is_loaded = false; } }
    match loadfn("IsVertexArray") { ptr if !ptr.is_null() => unsafe { storage::IsVertexArray = transmute(ptr); IsVertexArray::is_loaded = true; }, _ => unsafe { IsVertexArray::is_loaded = false; } }
    match loadfn("IsVertexArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::IsVertexArrayAPPLE = transmute(ptr); IsVertexArrayAPPLE::is_loaded = true; }, _ => unsafe { IsVertexArrayAPPLE::is_loaded = false; } }
    match loadfn("IsVertexArrayOES") { ptr if !ptr.is_null() => unsafe { storage::IsVertexArrayOES = transmute(ptr); IsVertexArrayOES::is_loaded = true; }, _ => unsafe { IsVertexArrayOES::is_loaded = false; } }
    match loadfn("IsVertexAttribEnabledAPPLE") { ptr if !ptr.is_null() => unsafe { storage::IsVertexAttribEnabledAPPLE = transmute(ptr); IsVertexAttribEnabledAPPLE::is_loaded = true; }, _ => unsafe { IsVertexAttribEnabledAPPLE::is_loaded = false; } }
    match loadfn("LabelObjectEXT") { ptr if !ptr.is_null() => unsafe { storage::LabelObjectEXT = transmute(ptr); LabelObjectEXT::is_loaded = true; }, _ => unsafe { LabelObjectEXT::is_loaded = false; } }
    match loadfn("LightEnviSGIX") { ptr if !ptr.is_null() => unsafe { storage::LightEnviSGIX = transmute(ptr); LightEnviSGIX::is_loaded = true; }, _ => unsafe { LightEnviSGIX::is_loaded = false; } }
    match loadfn("LightModelf") { ptr if !ptr.is_null() => unsafe { storage::LightModelf = transmute(ptr); LightModelf::is_loaded = true; }, _ => unsafe { LightModelf::is_loaded = false; } }
    match loadfn("LightModelfv") { ptr if !ptr.is_null() => unsafe { storage::LightModelfv = transmute(ptr); LightModelfv::is_loaded = true; }, _ => unsafe { LightModelfv::is_loaded = false; } }
    match loadfn("LightModeli") { ptr if !ptr.is_null() => unsafe { storage::LightModeli = transmute(ptr); LightModeli::is_loaded = true; }, _ => unsafe { LightModeli::is_loaded = false; } }
    match loadfn("LightModeliv") { ptr if !ptr.is_null() => unsafe { storage::LightModeliv = transmute(ptr); LightModeliv::is_loaded = true; }, _ => unsafe { LightModeliv::is_loaded = false; } }
    match loadfn("LightModelx") { ptr if !ptr.is_null() => unsafe { storage::LightModelx = transmute(ptr); LightModelx::is_loaded = true; }, _ => unsafe { LightModelx::is_loaded = false; } }
    match loadfn("LightModelxOES") { ptr if !ptr.is_null() => unsafe { storage::LightModelxOES = transmute(ptr); LightModelxOES::is_loaded = true; }, _ => unsafe { LightModelxOES::is_loaded = false; } }
    match loadfn("LightModelxv") { ptr if !ptr.is_null() => unsafe { storage::LightModelxv = transmute(ptr); LightModelxv::is_loaded = true; }, _ => unsafe { LightModelxv::is_loaded = false; } }
    match loadfn("LightModelxvOES") { ptr if !ptr.is_null() => unsafe { storage::LightModelxvOES = transmute(ptr); LightModelxvOES::is_loaded = true; }, _ => unsafe { LightModelxvOES::is_loaded = false; } }
    match loadfn("Lightf") { ptr if !ptr.is_null() => unsafe { storage::Lightf = transmute(ptr); Lightf::is_loaded = true; }, _ => unsafe { Lightf::is_loaded = false; } }
    match loadfn("Lightfv") { ptr if !ptr.is_null() => unsafe { storage::Lightfv = transmute(ptr); Lightfv::is_loaded = true; }, _ => unsafe { Lightfv::is_loaded = false; } }
    match loadfn("Lighti") { ptr if !ptr.is_null() => unsafe { storage::Lighti = transmute(ptr); Lighti::is_loaded = true; }, _ => unsafe { Lighti::is_loaded = false; } }
    match loadfn("Lightiv") { ptr if !ptr.is_null() => unsafe { storage::Lightiv = transmute(ptr); Lightiv::is_loaded = true; }, _ => unsafe { Lightiv::is_loaded = false; } }
    match loadfn("Lightx") { ptr if !ptr.is_null() => unsafe { storage::Lightx = transmute(ptr); Lightx::is_loaded = true; }, _ => unsafe { Lightx::is_loaded = false; } }
    match loadfn("LightxOES") { ptr if !ptr.is_null() => unsafe { storage::LightxOES = transmute(ptr); LightxOES::is_loaded = true; }, _ => unsafe { LightxOES::is_loaded = false; } }
    match loadfn("Lightxv") { ptr if !ptr.is_null() => unsafe { storage::Lightxv = transmute(ptr); Lightxv::is_loaded = true; }, _ => unsafe { Lightxv::is_loaded = false; } }
    match loadfn("LightxvOES") { ptr if !ptr.is_null() => unsafe { storage::LightxvOES = transmute(ptr); LightxvOES::is_loaded = true; }, _ => unsafe { LightxvOES::is_loaded = false; } }
    match loadfn("LineStipple") { ptr if !ptr.is_null() => unsafe { storage::LineStipple = transmute(ptr); LineStipple::is_loaded = true; }, _ => unsafe { LineStipple::is_loaded = false; } }
    match loadfn("LineWidth") { ptr if !ptr.is_null() => unsafe { storage::LineWidth = transmute(ptr); LineWidth::is_loaded = true; }, _ => unsafe { LineWidth::is_loaded = false; } }
    match loadfn("LineWidthx") { ptr if !ptr.is_null() => unsafe { storage::LineWidthx = transmute(ptr); LineWidthx::is_loaded = true; }, _ => unsafe { LineWidthx::is_loaded = false; } }
    match loadfn("LineWidthxOES") { ptr if !ptr.is_null() => unsafe { storage::LineWidthxOES = transmute(ptr); LineWidthxOES::is_loaded = true; }, _ => unsafe { LineWidthxOES::is_loaded = false; } }
    match loadfn("LinkProgram") { ptr if !ptr.is_null() => unsafe { storage::LinkProgram = transmute(ptr); LinkProgram::is_loaded = true; }, _ => unsafe { LinkProgram::is_loaded = false; } }
    match loadfn("LinkProgramARB") { ptr if !ptr.is_null() => unsafe { storage::LinkProgramARB = transmute(ptr); LinkProgramARB::is_loaded = true; }, _ => unsafe { LinkProgramARB::is_loaded = false; } }
    match loadfn("ListBase") { ptr if !ptr.is_null() => unsafe { storage::ListBase = transmute(ptr); ListBase::is_loaded = true; }, _ => unsafe { ListBase::is_loaded = false; } }
    match loadfn("ListParameterfSGIX") { ptr if !ptr.is_null() => unsafe { storage::ListParameterfSGIX = transmute(ptr); ListParameterfSGIX::is_loaded = true; }, _ => unsafe { ListParameterfSGIX::is_loaded = false; } }
    match loadfn("ListParameterfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::ListParameterfvSGIX = transmute(ptr); ListParameterfvSGIX::is_loaded = true; }, _ => unsafe { ListParameterfvSGIX::is_loaded = false; } }
    match loadfn("ListParameteriSGIX") { ptr if !ptr.is_null() => unsafe { storage::ListParameteriSGIX = transmute(ptr); ListParameteriSGIX::is_loaded = true; }, _ => unsafe { ListParameteriSGIX::is_loaded = false; } }
    match loadfn("ListParameterivSGIX") { ptr if !ptr.is_null() => unsafe { storage::ListParameterivSGIX = transmute(ptr); ListParameterivSGIX::is_loaded = true; }, _ => unsafe { ListParameterivSGIX::is_loaded = false; } }
    match loadfn("LoadIdentity") { ptr if !ptr.is_null() => unsafe { storage::LoadIdentity = transmute(ptr); LoadIdentity::is_loaded = true; }, _ => unsafe { LoadIdentity::is_loaded = false; } }
    match loadfn("LoadIdentityDeformationMapSGIX") { ptr if !ptr.is_null() => unsafe { storage::LoadIdentityDeformationMapSGIX = transmute(ptr); LoadIdentityDeformationMapSGIX::is_loaded = true; }, _ => unsafe { LoadIdentityDeformationMapSGIX::is_loaded = false; } }
    match loadfn("LoadMatrixd") { ptr if !ptr.is_null() => unsafe { storage::LoadMatrixd = transmute(ptr); LoadMatrixd::is_loaded = true; }, _ => unsafe { LoadMatrixd::is_loaded = false; } }
    match loadfn("LoadMatrixf") { ptr if !ptr.is_null() => unsafe { storage::LoadMatrixf = transmute(ptr); LoadMatrixf::is_loaded = true; }, _ => unsafe { LoadMatrixf::is_loaded = false; } }
    match loadfn("LoadMatrixx") { ptr if !ptr.is_null() => unsafe { storage::LoadMatrixx = transmute(ptr); LoadMatrixx::is_loaded = true; }, _ => unsafe { LoadMatrixx::is_loaded = false; } }
    match loadfn("LoadMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::LoadMatrixxOES = transmute(ptr); LoadMatrixxOES::is_loaded = true; }, _ => unsafe { LoadMatrixxOES::is_loaded = false; } }
    match loadfn("LoadName") { ptr if !ptr.is_null() => unsafe { storage::LoadName = transmute(ptr); LoadName::is_loaded = true; }, _ => unsafe { LoadName::is_loaded = false; } }
    match loadfn("LoadPaletteFromModelViewMatrixOES") { ptr if !ptr.is_null() => unsafe { storage::LoadPaletteFromModelViewMatrixOES = transmute(ptr); LoadPaletteFromModelViewMatrixOES::is_loaded = true; }, _ => unsafe { LoadPaletteFromModelViewMatrixOES::is_loaded = false; } }
    match loadfn("LoadProgramNV") { ptr if !ptr.is_null() => unsafe { storage::LoadProgramNV = transmute(ptr); LoadProgramNV::is_loaded = true; }, _ => unsafe { LoadProgramNV::is_loaded = false; } }
    match loadfn("LoadTransposeMatrixd") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixd = transmute(ptr); LoadTransposeMatrixd::is_loaded = true; }, _ => unsafe { LoadTransposeMatrixd::is_loaded = false; } }
    match loadfn("LoadTransposeMatrixdARB") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixdARB = transmute(ptr); LoadTransposeMatrixdARB::is_loaded = true; }, _ => unsafe { LoadTransposeMatrixdARB::is_loaded = false; } }
    match loadfn("LoadTransposeMatrixf") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixf = transmute(ptr); LoadTransposeMatrixf::is_loaded = true; }, _ => unsafe { LoadTransposeMatrixf::is_loaded = false; } }
    match loadfn("LoadTransposeMatrixfARB") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixfARB = transmute(ptr); LoadTransposeMatrixfARB::is_loaded = true; }, _ => unsafe { LoadTransposeMatrixfARB::is_loaded = false; } }
    match loadfn("LoadTransposeMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::LoadTransposeMatrixxOES = transmute(ptr); LoadTransposeMatrixxOES::is_loaded = true; }, _ => unsafe { LoadTransposeMatrixxOES::is_loaded = false; } }
    match loadfn("LockArraysEXT") { ptr if !ptr.is_null() => unsafe { storage::LockArraysEXT = transmute(ptr); LockArraysEXT::is_loaded = true; }, _ => unsafe { LockArraysEXT::is_loaded = false; } }
    match loadfn("LogicOp") { ptr if !ptr.is_null() => unsafe { storage::LogicOp = transmute(ptr); LogicOp::is_loaded = true; }, _ => unsafe { LogicOp::is_loaded = false; } }
    match loadfn("MakeBufferNonResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeBufferNonResidentNV = transmute(ptr); MakeBufferNonResidentNV::is_loaded = true; }, _ => unsafe { MakeBufferNonResidentNV::is_loaded = false; } }
    match loadfn("MakeBufferResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeBufferResidentNV = transmute(ptr); MakeBufferResidentNV::is_loaded = true; }, _ => unsafe { MakeBufferResidentNV::is_loaded = false; } }
    match loadfn("MakeImageHandleNonResidentARB") { ptr if !ptr.is_null() => unsafe { storage::MakeImageHandleNonResidentARB = transmute(ptr); MakeImageHandleNonResidentARB::is_loaded = true; }, _ => unsafe { MakeImageHandleNonResidentARB::is_loaded = false; } }
    match loadfn("MakeImageHandleNonResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeImageHandleNonResidentNV = transmute(ptr); MakeImageHandleNonResidentNV::is_loaded = true; }, _ => unsafe { MakeImageHandleNonResidentNV::is_loaded = false; } }
    match loadfn("MakeImageHandleResidentARB") { ptr if !ptr.is_null() => unsafe { storage::MakeImageHandleResidentARB = transmute(ptr); MakeImageHandleResidentARB::is_loaded = true; }, _ => unsafe { MakeImageHandleResidentARB::is_loaded = false; } }
    match loadfn("MakeImageHandleResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeImageHandleResidentNV = transmute(ptr); MakeImageHandleResidentNV::is_loaded = true; }, _ => unsafe { MakeImageHandleResidentNV::is_loaded = false; } }
    match loadfn("MakeNamedBufferNonResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeNamedBufferNonResidentNV = transmute(ptr); MakeNamedBufferNonResidentNV::is_loaded = true; }, _ => unsafe { MakeNamedBufferNonResidentNV::is_loaded = false; } }
    match loadfn("MakeNamedBufferResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeNamedBufferResidentNV = transmute(ptr); MakeNamedBufferResidentNV::is_loaded = true; }, _ => unsafe { MakeNamedBufferResidentNV::is_loaded = false; } }
    match loadfn("MakeTextureHandleNonResidentARB") { ptr if !ptr.is_null() => unsafe { storage::MakeTextureHandleNonResidentARB = transmute(ptr); MakeTextureHandleNonResidentARB::is_loaded = true; }, _ => unsafe { MakeTextureHandleNonResidentARB::is_loaded = false; } }
    match loadfn("MakeTextureHandleNonResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeTextureHandleNonResidentNV = transmute(ptr); MakeTextureHandleNonResidentNV::is_loaded = true; }, _ => unsafe { MakeTextureHandleNonResidentNV::is_loaded = false; } }
    match loadfn("MakeTextureHandleResidentARB") { ptr if !ptr.is_null() => unsafe { storage::MakeTextureHandleResidentARB = transmute(ptr); MakeTextureHandleResidentARB::is_loaded = true; }, _ => unsafe { MakeTextureHandleResidentARB::is_loaded = false; } }
    match loadfn("MakeTextureHandleResidentNV") { ptr if !ptr.is_null() => unsafe { storage::MakeTextureHandleResidentNV = transmute(ptr); MakeTextureHandleResidentNV::is_loaded = true; }, _ => unsafe { MakeTextureHandleResidentNV::is_loaded = false; } }
    match loadfn("Map1d") { ptr if !ptr.is_null() => unsafe { storage::Map1d = transmute(ptr); Map1d::is_loaded = true; }, _ => unsafe { Map1d::is_loaded = false; } }
    match loadfn("Map1f") { ptr if !ptr.is_null() => unsafe { storage::Map1f = transmute(ptr); Map1f::is_loaded = true; }, _ => unsafe { Map1f::is_loaded = false; } }
    match loadfn("Map1xOES") { ptr if !ptr.is_null() => unsafe { storage::Map1xOES = transmute(ptr); Map1xOES::is_loaded = true; }, _ => unsafe { Map1xOES::is_loaded = false; } }
    match loadfn("Map2d") { ptr if !ptr.is_null() => unsafe { storage::Map2d = transmute(ptr); Map2d::is_loaded = true; }, _ => unsafe { Map2d::is_loaded = false; } }
    match loadfn("Map2f") { ptr if !ptr.is_null() => unsafe { storage::Map2f = transmute(ptr); Map2f::is_loaded = true; }, _ => unsafe { Map2f::is_loaded = false; } }
    match loadfn("Map2xOES") { ptr if !ptr.is_null() => unsafe { storage::Map2xOES = transmute(ptr); Map2xOES::is_loaded = true; }, _ => unsafe { Map2xOES::is_loaded = false; } }
    match loadfn("MapBuffer") { ptr if !ptr.is_null() => unsafe { storage::MapBuffer = transmute(ptr); MapBuffer::is_loaded = true; }, _ => unsafe { MapBuffer::is_loaded = false; } }
    match loadfn("MapBufferARB") { ptr if !ptr.is_null() => unsafe { storage::MapBufferARB = transmute(ptr); MapBufferARB::is_loaded = true; }, _ => unsafe { MapBufferARB::is_loaded = false; } }
    match loadfn("MapBufferOES") { ptr if !ptr.is_null() => unsafe { storage::MapBufferOES = transmute(ptr); MapBufferOES::is_loaded = true; }, _ => unsafe { MapBufferOES::is_loaded = false; } }
    match loadfn("MapBufferRange") { ptr if !ptr.is_null() => unsafe { storage::MapBufferRange = transmute(ptr); MapBufferRange::is_loaded = true; }, _ => unsafe { MapBufferRange::is_loaded = false; } }
    match loadfn("MapBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::MapBufferRangeEXT = transmute(ptr); MapBufferRangeEXT::is_loaded = true; }, _ => unsafe { MapBufferRangeEXT::is_loaded = false; } }
    match loadfn("MapControlPointsNV") { ptr if !ptr.is_null() => unsafe { storage::MapControlPointsNV = transmute(ptr); MapControlPointsNV::is_loaded = true; }, _ => unsafe { MapControlPointsNV::is_loaded = false; } }
    match loadfn("MapGrid1d") { ptr if !ptr.is_null() => unsafe { storage::MapGrid1d = transmute(ptr); MapGrid1d::is_loaded = true; }, _ => unsafe { MapGrid1d::is_loaded = false; } }
    match loadfn("MapGrid1f") { ptr if !ptr.is_null() => unsafe { storage::MapGrid1f = transmute(ptr); MapGrid1f::is_loaded = true; }, _ => unsafe { MapGrid1f::is_loaded = false; } }
    match loadfn("MapGrid1xOES") { ptr if !ptr.is_null() => unsafe { storage::MapGrid1xOES = transmute(ptr); MapGrid1xOES::is_loaded = true; }, _ => unsafe { MapGrid1xOES::is_loaded = false; } }
    match loadfn("MapGrid2d") { ptr if !ptr.is_null() => unsafe { storage::MapGrid2d = transmute(ptr); MapGrid2d::is_loaded = true; }, _ => unsafe { MapGrid2d::is_loaded = false; } }
    match loadfn("MapGrid2f") { ptr if !ptr.is_null() => unsafe { storage::MapGrid2f = transmute(ptr); MapGrid2f::is_loaded = true; }, _ => unsafe { MapGrid2f::is_loaded = false; } }
    match loadfn("MapGrid2xOES") { ptr if !ptr.is_null() => unsafe { storage::MapGrid2xOES = transmute(ptr); MapGrid2xOES::is_loaded = true; }, _ => unsafe { MapGrid2xOES::is_loaded = false; } }
    match loadfn("MapNamedBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::MapNamedBufferEXT = transmute(ptr); MapNamedBufferEXT::is_loaded = true; }, _ => unsafe { MapNamedBufferEXT::is_loaded = false; } }
    match loadfn("MapNamedBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::MapNamedBufferRangeEXT = transmute(ptr); MapNamedBufferRangeEXT::is_loaded = true; }, _ => unsafe { MapNamedBufferRangeEXT::is_loaded = false; } }
    match loadfn("MapObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::MapObjectBufferATI = transmute(ptr); MapObjectBufferATI::is_loaded = true; }, _ => unsafe { MapObjectBufferATI::is_loaded = false; } }
    match loadfn("MapParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::MapParameterfvNV = transmute(ptr); MapParameterfvNV::is_loaded = true; }, _ => unsafe { MapParameterfvNV::is_loaded = false; } }
    match loadfn("MapParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::MapParameterivNV = transmute(ptr); MapParameterivNV::is_loaded = true; }, _ => unsafe { MapParameterivNV::is_loaded = false; } }
    match loadfn("MapTexture2DINTEL") { ptr if !ptr.is_null() => unsafe { storage::MapTexture2DINTEL = transmute(ptr); MapTexture2DINTEL::is_loaded = true; }, _ => unsafe { MapTexture2DINTEL::is_loaded = false; } }
    match loadfn("MapVertexAttrib1dAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MapVertexAttrib1dAPPLE = transmute(ptr); MapVertexAttrib1dAPPLE::is_loaded = true; }, _ => unsafe { MapVertexAttrib1dAPPLE::is_loaded = false; } }
    match loadfn("MapVertexAttrib1fAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MapVertexAttrib1fAPPLE = transmute(ptr); MapVertexAttrib1fAPPLE::is_loaded = true; }, _ => unsafe { MapVertexAttrib1fAPPLE::is_loaded = false; } }
    match loadfn("MapVertexAttrib2dAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MapVertexAttrib2dAPPLE = transmute(ptr); MapVertexAttrib2dAPPLE::is_loaded = true; }, _ => unsafe { MapVertexAttrib2dAPPLE::is_loaded = false; } }
    match loadfn("MapVertexAttrib2fAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MapVertexAttrib2fAPPLE = transmute(ptr); MapVertexAttrib2fAPPLE::is_loaded = true; }, _ => unsafe { MapVertexAttrib2fAPPLE::is_loaded = false; } }
    match loadfn("Materialf") { ptr if !ptr.is_null() => unsafe { storage::Materialf = transmute(ptr); Materialf::is_loaded = true; }, _ => unsafe { Materialf::is_loaded = false; } }
    match loadfn("Materialfv") { ptr if !ptr.is_null() => unsafe { storage::Materialfv = transmute(ptr); Materialfv::is_loaded = true; }, _ => unsafe { Materialfv::is_loaded = false; } }
    match loadfn("Materiali") { ptr if !ptr.is_null() => unsafe { storage::Materiali = transmute(ptr); Materiali::is_loaded = true; }, _ => unsafe { Materiali::is_loaded = false; } }
    match loadfn("Materialiv") { ptr if !ptr.is_null() => unsafe { storage::Materialiv = transmute(ptr); Materialiv::is_loaded = true; }, _ => unsafe { Materialiv::is_loaded = false; } }
    match loadfn("Materialx") { ptr if !ptr.is_null() => unsafe { storage::Materialx = transmute(ptr); Materialx::is_loaded = true; }, _ => unsafe { Materialx::is_loaded = false; } }
    match loadfn("MaterialxOES") { ptr if !ptr.is_null() => unsafe { storage::MaterialxOES = transmute(ptr); MaterialxOES::is_loaded = true; }, _ => unsafe { MaterialxOES::is_loaded = false; } }
    match loadfn("Materialxv") { ptr if !ptr.is_null() => unsafe { storage::Materialxv = transmute(ptr); Materialxv::is_loaded = true; }, _ => unsafe { Materialxv::is_loaded = false; } }
    match loadfn("MaterialxvOES") { ptr if !ptr.is_null() => unsafe { storage::MaterialxvOES = transmute(ptr); MaterialxvOES::is_loaded = true; }, _ => unsafe { MaterialxvOES::is_loaded = false; } }
    match loadfn("MatrixFrustumEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixFrustumEXT = transmute(ptr); MatrixFrustumEXT::is_loaded = true; }, _ => unsafe { MatrixFrustumEXT::is_loaded = false; } }
    match loadfn("MatrixIndexPointerARB") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexPointerARB = transmute(ptr); MatrixIndexPointerARB::is_loaded = true; }, _ => unsafe { MatrixIndexPointerARB::is_loaded = false; } }
    match loadfn("MatrixIndexPointerOES") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexPointerOES = transmute(ptr); MatrixIndexPointerOES::is_loaded = true; }, _ => unsafe { MatrixIndexPointerOES::is_loaded = false; } }
    match loadfn("MatrixIndexubvARB") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexubvARB = transmute(ptr); MatrixIndexubvARB::is_loaded = true; }, _ => unsafe { MatrixIndexubvARB::is_loaded = false; } }
    match loadfn("MatrixIndexuivARB") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexuivARB = transmute(ptr); MatrixIndexuivARB::is_loaded = true; }, _ => unsafe { MatrixIndexuivARB::is_loaded = false; } }
    match loadfn("MatrixIndexusvARB") { ptr if !ptr.is_null() => unsafe { storage::MatrixIndexusvARB = transmute(ptr); MatrixIndexusvARB::is_loaded = true; }, _ => unsafe { MatrixIndexusvARB::is_loaded = false; } }
    match loadfn("MatrixLoadIdentityEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoadIdentityEXT = transmute(ptr); MatrixLoadIdentityEXT::is_loaded = true; }, _ => unsafe { MatrixLoadIdentityEXT::is_loaded = false; } }
    match loadfn("MatrixLoadTransposedEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoadTransposedEXT = transmute(ptr); MatrixLoadTransposedEXT::is_loaded = true; }, _ => unsafe { MatrixLoadTransposedEXT::is_loaded = false; } }
    match loadfn("MatrixLoadTransposefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoadTransposefEXT = transmute(ptr); MatrixLoadTransposefEXT::is_loaded = true; }, _ => unsafe { MatrixLoadTransposefEXT::is_loaded = false; } }
    match loadfn("MatrixLoaddEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoaddEXT = transmute(ptr); MatrixLoaddEXT::is_loaded = true; }, _ => unsafe { MatrixLoaddEXT::is_loaded = false; } }
    match loadfn("MatrixLoadfEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixLoadfEXT = transmute(ptr); MatrixLoadfEXT::is_loaded = true; }, _ => unsafe { MatrixLoadfEXT::is_loaded = false; } }
    match loadfn("MatrixMode") { ptr if !ptr.is_null() => unsafe { storage::MatrixMode = transmute(ptr); MatrixMode::is_loaded = true; }, _ => unsafe { MatrixMode::is_loaded = false; } }
    match loadfn("MatrixMultTransposedEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixMultTransposedEXT = transmute(ptr); MatrixMultTransposedEXT::is_loaded = true; }, _ => unsafe { MatrixMultTransposedEXT::is_loaded = false; } }
    match loadfn("MatrixMultTransposefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixMultTransposefEXT = transmute(ptr); MatrixMultTransposefEXT::is_loaded = true; }, _ => unsafe { MatrixMultTransposefEXT::is_loaded = false; } }
    match loadfn("MatrixMultdEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixMultdEXT = transmute(ptr); MatrixMultdEXT::is_loaded = true; }, _ => unsafe { MatrixMultdEXT::is_loaded = false; } }
    match loadfn("MatrixMultfEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixMultfEXT = transmute(ptr); MatrixMultfEXT::is_loaded = true; }, _ => unsafe { MatrixMultfEXT::is_loaded = false; } }
    match loadfn("MatrixOrthoEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixOrthoEXT = transmute(ptr); MatrixOrthoEXT::is_loaded = true; }, _ => unsafe { MatrixOrthoEXT::is_loaded = false; } }
    match loadfn("MatrixPopEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixPopEXT = transmute(ptr); MatrixPopEXT::is_loaded = true; }, _ => unsafe { MatrixPopEXT::is_loaded = false; } }
    match loadfn("MatrixPushEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixPushEXT = transmute(ptr); MatrixPushEXT::is_loaded = true; }, _ => unsafe { MatrixPushEXT::is_loaded = false; } }
    match loadfn("MatrixRotatedEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixRotatedEXT = transmute(ptr); MatrixRotatedEXT::is_loaded = true; }, _ => unsafe { MatrixRotatedEXT::is_loaded = false; } }
    match loadfn("MatrixRotatefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixRotatefEXT = transmute(ptr); MatrixRotatefEXT::is_loaded = true; }, _ => unsafe { MatrixRotatefEXT::is_loaded = false; } }
    match loadfn("MatrixScaledEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixScaledEXT = transmute(ptr); MatrixScaledEXT::is_loaded = true; }, _ => unsafe { MatrixScaledEXT::is_loaded = false; } }
    match loadfn("MatrixScalefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixScalefEXT = transmute(ptr); MatrixScalefEXT::is_loaded = true; }, _ => unsafe { MatrixScalefEXT::is_loaded = false; } }
    match loadfn("MatrixTranslatedEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixTranslatedEXT = transmute(ptr); MatrixTranslatedEXT::is_loaded = true; }, _ => unsafe { MatrixTranslatedEXT::is_loaded = false; } }
    match loadfn("MatrixTranslatefEXT") { ptr if !ptr.is_null() => unsafe { storage::MatrixTranslatefEXT = transmute(ptr); MatrixTranslatefEXT::is_loaded = true; }, _ => unsafe { MatrixTranslatefEXT::is_loaded = false; } }
    match loadfn("MemoryBarrier") { ptr if !ptr.is_null() => unsafe { storage::MemoryBarrier = transmute(ptr); MemoryBarrier::is_loaded = true; }, _ => unsafe { MemoryBarrier::is_loaded = false; } }
    match loadfn("MemoryBarrierEXT") { ptr if !ptr.is_null() => unsafe { storage::MemoryBarrierEXT = transmute(ptr); MemoryBarrierEXT::is_loaded = true; }, _ => unsafe { MemoryBarrierEXT::is_loaded = false; } }
    match loadfn("MinSampleShading") { ptr if !ptr.is_null() => unsafe { storage::MinSampleShading = transmute(ptr); MinSampleShading::is_loaded = true; }, _ => unsafe { MinSampleShading::is_loaded = false; } }
    match loadfn("MinSampleShadingARB") { ptr if !ptr.is_null() => unsafe { storage::MinSampleShadingARB = transmute(ptr); MinSampleShadingARB::is_loaded = true; }, _ => unsafe { MinSampleShadingARB::is_loaded = false; } }
    match loadfn("Minmax") { ptr if !ptr.is_null() => unsafe { storage::Minmax = transmute(ptr); Minmax::is_loaded = true; }, _ => unsafe { Minmax::is_loaded = false; } }
    match loadfn("MinmaxEXT") { ptr if !ptr.is_null() => unsafe { storage::MinmaxEXT = transmute(ptr); MinmaxEXT::is_loaded = true; }, _ => unsafe { MinmaxEXT::is_loaded = false; } }
    match loadfn("MultMatrixd") { ptr if !ptr.is_null() => unsafe { storage::MultMatrixd = transmute(ptr); MultMatrixd::is_loaded = true; }, _ => unsafe { MultMatrixd::is_loaded = false; } }
    match loadfn("MultMatrixf") { ptr if !ptr.is_null() => unsafe { storage::MultMatrixf = transmute(ptr); MultMatrixf::is_loaded = true; }, _ => unsafe { MultMatrixf::is_loaded = false; } }
    match loadfn("MultMatrixx") { ptr if !ptr.is_null() => unsafe { storage::MultMatrixx = transmute(ptr); MultMatrixx::is_loaded = true; }, _ => unsafe { MultMatrixx::is_loaded = false; } }
    match loadfn("MultMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::MultMatrixxOES = transmute(ptr); MultMatrixxOES::is_loaded = true; }, _ => unsafe { MultMatrixxOES::is_loaded = false; } }
    match loadfn("MultTransposeMatrixd") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixd = transmute(ptr); MultTransposeMatrixd::is_loaded = true; }, _ => unsafe { MultTransposeMatrixd::is_loaded = false; } }
    match loadfn("MultTransposeMatrixdARB") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixdARB = transmute(ptr); MultTransposeMatrixdARB::is_loaded = true; }, _ => unsafe { MultTransposeMatrixdARB::is_loaded = false; } }
    match loadfn("MultTransposeMatrixf") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixf = transmute(ptr); MultTransposeMatrixf::is_loaded = true; }, _ => unsafe { MultTransposeMatrixf::is_loaded = false; } }
    match loadfn("MultTransposeMatrixfARB") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixfARB = transmute(ptr); MultTransposeMatrixfARB::is_loaded = true; }, _ => unsafe { MultTransposeMatrixfARB::is_loaded = false; } }
    match loadfn("MultTransposeMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::MultTransposeMatrixxOES = transmute(ptr); MultTransposeMatrixxOES::is_loaded = true; }, _ => unsafe { MultTransposeMatrixxOES::is_loaded = false; } }
    match loadfn("MultiDrawArrays") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArrays = transmute(ptr); MultiDrawArrays::is_loaded = true; }, _ => unsafe { MultiDrawArrays::is_loaded = false; } }
    match loadfn("MultiDrawArraysEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysEXT = transmute(ptr); MultiDrawArraysEXT::is_loaded = true; }, _ => unsafe { MultiDrawArraysEXT::is_loaded = false; } }
    match loadfn("MultiDrawArraysIndirect") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysIndirect = transmute(ptr); MultiDrawArraysIndirect::is_loaded = true; }, _ => unsafe { MultiDrawArraysIndirect::is_loaded = false; } }
    match loadfn("MultiDrawArraysIndirectAMD") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysIndirectAMD = transmute(ptr); MultiDrawArraysIndirectAMD::is_loaded = true; }, _ => unsafe { MultiDrawArraysIndirectAMD::is_loaded = false; } }
    match loadfn("MultiDrawArraysIndirectBindlessNV") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysIndirectBindlessNV = transmute(ptr); MultiDrawArraysIndirectBindlessNV::is_loaded = true; }, _ => unsafe { MultiDrawArraysIndirectBindlessNV::is_loaded = false; } }
    match loadfn("MultiDrawElementsIndirectBindlessNV") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsIndirectBindlessNV = transmute(ptr); MultiDrawElementsIndirectBindlessNV::is_loaded = true; }, _ => unsafe { MultiDrawElementsIndirectBindlessNV::is_loaded = false; } }
    match loadfn("MultiDrawArraysIndirectCountARB") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawArraysIndirectCountARB = transmute(ptr); MultiDrawArraysIndirectCountARB::is_loaded = true; }, _ => unsafe { MultiDrawArraysIndirectCountARB::is_loaded = false; } }
    match loadfn("MultiDrawElementArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementArrayAPPLE = transmute(ptr); MultiDrawElementArrayAPPLE::is_loaded = true; }, _ => unsafe { MultiDrawElementArrayAPPLE::is_loaded = false; } }
    match loadfn("MultiDrawElements") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElements = transmute(ptr); MultiDrawElements::is_loaded = true; }, _ => unsafe { MultiDrawElements::is_loaded = false; } }
    match loadfn("MultiDrawElementsBaseVertex") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsBaseVertex = transmute(ptr); MultiDrawElementsBaseVertex::is_loaded = true; }, _ => unsafe { MultiDrawElementsBaseVertex::is_loaded = false; } }
    match loadfn("MultiDrawElementsEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsEXT = transmute(ptr); MultiDrawElementsEXT::is_loaded = true; }, _ => unsafe { MultiDrawElementsEXT::is_loaded = false; } }
    match loadfn("MultiDrawElementsIndirect") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsIndirect = transmute(ptr); MultiDrawElementsIndirect::is_loaded = true; }, _ => unsafe { MultiDrawElementsIndirect::is_loaded = false; } }
    match loadfn("MultiDrawElementsIndirectAMD") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsIndirectAMD = transmute(ptr); MultiDrawElementsIndirectAMD::is_loaded = true; }, _ => unsafe { MultiDrawElementsIndirectAMD::is_loaded = false; } }
    match loadfn("MultiDrawElementsIndirectCountARB") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawElementsIndirectCountARB = transmute(ptr); MultiDrawElementsIndirectCountARB::is_loaded = true; }, _ => unsafe { MultiDrawElementsIndirectCountARB::is_loaded = false; } }
    match loadfn("MultiDrawRangeElementArrayAPPLE") { ptr if !ptr.is_null() => unsafe { storage::MultiDrawRangeElementArrayAPPLE = transmute(ptr); MultiDrawRangeElementArrayAPPLE::is_loaded = true; }, _ => unsafe { MultiDrawRangeElementArrayAPPLE::is_loaded = false; } }
    match loadfn("MultiModeDrawArraysIBM") { ptr if !ptr.is_null() => unsafe { storage::MultiModeDrawArraysIBM = transmute(ptr); MultiModeDrawArraysIBM::is_loaded = true; }, _ => unsafe { MultiModeDrawArraysIBM::is_loaded = false; } }
    match loadfn("MultiModeDrawElementsIBM") { ptr if !ptr.is_null() => unsafe { storage::MultiModeDrawElementsIBM = transmute(ptr); MultiModeDrawElementsIBM::is_loaded = true; }, _ => unsafe { MultiModeDrawElementsIBM::is_loaded = false; } }
    match loadfn("MultiTexBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexBufferEXT = transmute(ptr); MultiTexBufferEXT::is_loaded = true; }, _ => unsafe { MultiTexBufferEXT::is_loaded = false; } }
    match loadfn("MultiTexCoord1bOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1bOES = transmute(ptr); MultiTexCoord1bOES::is_loaded = true; }, _ => unsafe { MultiTexCoord1bOES::is_loaded = false; } }
    match loadfn("MultiTexCoord1bvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1bvOES = transmute(ptr); MultiTexCoord1bvOES::is_loaded = true; }, _ => unsafe { MultiTexCoord1bvOES::is_loaded = false; } }
    match loadfn("MultiTexCoord1d") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1d = transmute(ptr); MultiTexCoord1d::is_loaded = true; }, _ => unsafe { MultiTexCoord1d::is_loaded = false; } }
    match loadfn("MultiTexCoord1dARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1dARB = transmute(ptr); MultiTexCoord1dARB::is_loaded = true; }, _ => unsafe { MultiTexCoord1dARB::is_loaded = false; } }
    match loadfn("MultiTexCoord1dv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1dv = transmute(ptr); MultiTexCoord1dv::is_loaded = true; }, _ => unsafe { MultiTexCoord1dv::is_loaded = false; } }
    match loadfn("MultiTexCoord1dvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1dvARB = transmute(ptr); MultiTexCoord1dvARB::is_loaded = true; }, _ => unsafe { MultiTexCoord1dvARB::is_loaded = false; } }
    match loadfn("MultiTexCoord1f") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1f = transmute(ptr); MultiTexCoord1f::is_loaded = true; }, _ => unsafe { MultiTexCoord1f::is_loaded = false; } }
    match loadfn("MultiTexCoord1fARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1fARB = transmute(ptr); MultiTexCoord1fARB::is_loaded = true; }, _ => unsafe { MultiTexCoord1fARB::is_loaded = false; } }
    match loadfn("MultiTexCoord1fv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1fv = transmute(ptr); MultiTexCoord1fv::is_loaded = true; }, _ => unsafe { MultiTexCoord1fv::is_loaded = false; } }
    match loadfn("MultiTexCoord1fvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1fvARB = transmute(ptr); MultiTexCoord1fvARB::is_loaded = true; }, _ => unsafe { MultiTexCoord1fvARB::is_loaded = false; } }
    match loadfn("MultiTexCoord1hNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1hNV = transmute(ptr); MultiTexCoord1hNV::is_loaded = true; }, _ => unsafe { MultiTexCoord1hNV::is_loaded = false; } }
    match loadfn("MultiTexCoord1hvNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1hvNV = transmute(ptr); MultiTexCoord1hvNV::is_loaded = true; }, _ => unsafe { MultiTexCoord1hvNV::is_loaded = false; } }
    match loadfn("MultiTexCoord1i") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1i = transmute(ptr); MultiTexCoord1i::is_loaded = true; }, _ => unsafe { MultiTexCoord1i::is_loaded = false; } }
    match loadfn("MultiTexCoord1iARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1iARB = transmute(ptr); MultiTexCoord1iARB::is_loaded = true; }, _ => unsafe { MultiTexCoord1iARB::is_loaded = false; } }
    match loadfn("MultiTexCoord1iv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1iv = transmute(ptr); MultiTexCoord1iv::is_loaded = true; }, _ => unsafe { MultiTexCoord1iv::is_loaded = false; } }
    match loadfn("MultiTexCoord1ivARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1ivARB = transmute(ptr); MultiTexCoord1ivARB::is_loaded = true; }, _ => unsafe { MultiTexCoord1ivARB::is_loaded = false; } }
    match loadfn("MultiTexCoord1s") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1s = transmute(ptr); MultiTexCoord1s::is_loaded = true; }, _ => unsafe { MultiTexCoord1s::is_loaded = false; } }
    match loadfn("MultiTexCoord1sARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1sARB = transmute(ptr); MultiTexCoord1sARB::is_loaded = true; }, _ => unsafe { MultiTexCoord1sARB::is_loaded = false; } }
    match loadfn("MultiTexCoord1sv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1sv = transmute(ptr); MultiTexCoord1sv::is_loaded = true; }, _ => unsafe { MultiTexCoord1sv::is_loaded = false; } }
    match loadfn("MultiTexCoord1svARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1svARB = transmute(ptr); MultiTexCoord1svARB::is_loaded = true; }, _ => unsafe { MultiTexCoord1svARB::is_loaded = false; } }
    match loadfn("MultiTexCoord1xOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1xOES = transmute(ptr); MultiTexCoord1xOES::is_loaded = true; }, _ => unsafe { MultiTexCoord1xOES::is_loaded = false; } }
    match loadfn("MultiTexCoord1xvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord1xvOES = transmute(ptr); MultiTexCoord1xvOES::is_loaded = true; }, _ => unsafe { MultiTexCoord1xvOES::is_loaded = false; } }
    match loadfn("MultiTexCoord2bOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2bOES = transmute(ptr); MultiTexCoord2bOES::is_loaded = true; }, _ => unsafe { MultiTexCoord2bOES::is_loaded = false; } }
    match loadfn("MultiTexCoord2bvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2bvOES = transmute(ptr); MultiTexCoord2bvOES::is_loaded = true; }, _ => unsafe { MultiTexCoord2bvOES::is_loaded = false; } }
    match loadfn("MultiTexCoord2d") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2d = transmute(ptr); MultiTexCoord2d::is_loaded = true; }, _ => unsafe { MultiTexCoord2d::is_loaded = false; } }
    match loadfn("MultiTexCoord2dARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2dARB = transmute(ptr); MultiTexCoord2dARB::is_loaded = true; }, _ => unsafe { MultiTexCoord2dARB::is_loaded = false; } }
    match loadfn("MultiTexCoord2dv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2dv = transmute(ptr); MultiTexCoord2dv::is_loaded = true; }, _ => unsafe { MultiTexCoord2dv::is_loaded = false; } }
    match loadfn("MultiTexCoord2dvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2dvARB = transmute(ptr); MultiTexCoord2dvARB::is_loaded = true; }, _ => unsafe { MultiTexCoord2dvARB::is_loaded = false; } }
    match loadfn("MultiTexCoord2f") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2f = transmute(ptr); MultiTexCoord2f::is_loaded = true; }, _ => unsafe { MultiTexCoord2f::is_loaded = false; } }
    match loadfn("MultiTexCoord2fARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2fARB = transmute(ptr); MultiTexCoord2fARB::is_loaded = true; }, _ => unsafe { MultiTexCoord2fARB::is_loaded = false; } }
    match loadfn("MultiTexCoord2fv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2fv = transmute(ptr); MultiTexCoord2fv::is_loaded = true; }, _ => unsafe { MultiTexCoord2fv::is_loaded = false; } }
    match loadfn("MultiTexCoord2fvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2fvARB = transmute(ptr); MultiTexCoord2fvARB::is_loaded = true; }, _ => unsafe { MultiTexCoord2fvARB::is_loaded = false; } }
    match loadfn("MultiTexCoord2hNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2hNV = transmute(ptr); MultiTexCoord2hNV::is_loaded = true; }, _ => unsafe { MultiTexCoord2hNV::is_loaded = false; } }
    match loadfn("MultiTexCoord2hvNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2hvNV = transmute(ptr); MultiTexCoord2hvNV::is_loaded = true; }, _ => unsafe { MultiTexCoord2hvNV::is_loaded = false; } }
    match loadfn("MultiTexCoord2i") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2i = transmute(ptr); MultiTexCoord2i::is_loaded = true; }, _ => unsafe { MultiTexCoord2i::is_loaded = false; } }
    match loadfn("MultiTexCoord2iARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2iARB = transmute(ptr); MultiTexCoord2iARB::is_loaded = true; }, _ => unsafe { MultiTexCoord2iARB::is_loaded = false; } }
    match loadfn("MultiTexCoord2iv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2iv = transmute(ptr); MultiTexCoord2iv::is_loaded = true; }, _ => unsafe { MultiTexCoord2iv::is_loaded = false; } }
    match loadfn("MultiTexCoord2ivARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2ivARB = transmute(ptr); MultiTexCoord2ivARB::is_loaded = true; }, _ => unsafe { MultiTexCoord2ivARB::is_loaded = false; } }
    match loadfn("MultiTexCoord2s") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2s = transmute(ptr); MultiTexCoord2s::is_loaded = true; }, _ => unsafe { MultiTexCoord2s::is_loaded = false; } }
    match loadfn("MultiTexCoord2sARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2sARB = transmute(ptr); MultiTexCoord2sARB::is_loaded = true; }, _ => unsafe { MultiTexCoord2sARB::is_loaded = false; } }
    match loadfn("MultiTexCoord2sv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2sv = transmute(ptr); MultiTexCoord2sv::is_loaded = true; }, _ => unsafe { MultiTexCoord2sv::is_loaded = false; } }
    match loadfn("MultiTexCoord2svARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2svARB = transmute(ptr); MultiTexCoord2svARB::is_loaded = true; }, _ => unsafe { MultiTexCoord2svARB::is_loaded = false; } }
    match loadfn("MultiTexCoord2xOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2xOES = transmute(ptr); MultiTexCoord2xOES::is_loaded = true; }, _ => unsafe { MultiTexCoord2xOES::is_loaded = false; } }
    match loadfn("MultiTexCoord2xvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord2xvOES = transmute(ptr); MultiTexCoord2xvOES::is_loaded = true; }, _ => unsafe { MultiTexCoord2xvOES::is_loaded = false; } }
    match loadfn("MultiTexCoord3bOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3bOES = transmute(ptr); MultiTexCoord3bOES::is_loaded = true; }, _ => unsafe { MultiTexCoord3bOES::is_loaded = false; } }
    match loadfn("MultiTexCoord3bvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3bvOES = transmute(ptr); MultiTexCoord3bvOES::is_loaded = true; }, _ => unsafe { MultiTexCoord3bvOES::is_loaded = false; } }
    match loadfn("MultiTexCoord3d") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3d = transmute(ptr); MultiTexCoord3d::is_loaded = true; }, _ => unsafe { MultiTexCoord3d::is_loaded = false; } }
    match loadfn("MultiTexCoord3dARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3dARB = transmute(ptr); MultiTexCoord3dARB::is_loaded = true; }, _ => unsafe { MultiTexCoord3dARB::is_loaded = false; } }
    match loadfn("MultiTexCoord3dv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3dv = transmute(ptr); MultiTexCoord3dv::is_loaded = true; }, _ => unsafe { MultiTexCoord3dv::is_loaded = false; } }
    match loadfn("MultiTexCoord3dvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3dvARB = transmute(ptr); MultiTexCoord3dvARB::is_loaded = true; }, _ => unsafe { MultiTexCoord3dvARB::is_loaded = false; } }
    match loadfn("MultiTexCoord3f") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3f = transmute(ptr); MultiTexCoord3f::is_loaded = true; }, _ => unsafe { MultiTexCoord3f::is_loaded = false; } }
    match loadfn("MultiTexCoord3fARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3fARB = transmute(ptr); MultiTexCoord3fARB::is_loaded = true; }, _ => unsafe { MultiTexCoord3fARB::is_loaded = false; } }
    match loadfn("MultiTexCoord3fv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3fv = transmute(ptr); MultiTexCoord3fv::is_loaded = true; }, _ => unsafe { MultiTexCoord3fv::is_loaded = false; } }
    match loadfn("MultiTexCoord3fvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3fvARB = transmute(ptr); MultiTexCoord3fvARB::is_loaded = true; }, _ => unsafe { MultiTexCoord3fvARB::is_loaded = false; } }
    match loadfn("MultiTexCoord3hNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3hNV = transmute(ptr); MultiTexCoord3hNV::is_loaded = true; }, _ => unsafe { MultiTexCoord3hNV::is_loaded = false; } }
    match loadfn("MultiTexCoord3hvNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3hvNV = transmute(ptr); MultiTexCoord3hvNV::is_loaded = true; }, _ => unsafe { MultiTexCoord3hvNV::is_loaded = false; } }
    match loadfn("MultiTexCoord3i") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3i = transmute(ptr); MultiTexCoord3i::is_loaded = true; }, _ => unsafe { MultiTexCoord3i::is_loaded = false; } }
    match loadfn("MultiTexCoord3iARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3iARB = transmute(ptr); MultiTexCoord3iARB::is_loaded = true; }, _ => unsafe { MultiTexCoord3iARB::is_loaded = false; } }
    match loadfn("MultiTexCoord3iv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3iv = transmute(ptr); MultiTexCoord3iv::is_loaded = true; }, _ => unsafe { MultiTexCoord3iv::is_loaded = false; } }
    match loadfn("MultiTexCoord3ivARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3ivARB = transmute(ptr); MultiTexCoord3ivARB::is_loaded = true; }, _ => unsafe { MultiTexCoord3ivARB::is_loaded = false; } }
    match loadfn("MultiTexCoord3s") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3s = transmute(ptr); MultiTexCoord3s::is_loaded = true; }, _ => unsafe { MultiTexCoord3s::is_loaded = false; } }
    match loadfn("MultiTexCoord3sARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3sARB = transmute(ptr); MultiTexCoord3sARB::is_loaded = true; }, _ => unsafe { MultiTexCoord3sARB::is_loaded = false; } }
    match loadfn("MultiTexCoord3sv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3sv = transmute(ptr); MultiTexCoord3sv::is_loaded = true; }, _ => unsafe { MultiTexCoord3sv::is_loaded = false; } }
    match loadfn("MultiTexCoord3svARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3svARB = transmute(ptr); MultiTexCoord3svARB::is_loaded = true; }, _ => unsafe { MultiTexCoord3svARB::is_loaded = false; } }
    match loadfn("MultiTexCoord3xOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3xOES = transmute(ptr); MultiTexCoord3xOES::is_loaded = true; }, _ => unsafe { MultiTexCoord3xOES::is_loaded = false; } }
    match loadfn("MultiTexCoord3xvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord3xvOES = transmute(ptr); MultiTexCoord3xvOES::is_loaded = true; }, _ => unsafe { MultiTexCoord3xvOES::is_loaded = false; } }
    match loadfn("MultiTexCoord4bOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4bOES = transmute(ptr); MultiTexCoord4bOES::is_loaded = true; }, _ => unsafe { MultiTexCoord4bOES::is_loaded = false; } }
    match loadfn("MultiTexCoord4bvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4bvOES = transmute(ptr); MultiTexCoord4bvOES::is_loaded = true; }, _ => unsafe { MultiTexCoord4bvOES::is_loaded = false; } }
    match loadfn("MultiTexCoord4d") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4d = transmute(ptr); MultiTexCoord4d::is_loaded = true; }, _ => unsafe { MultiTexCoord4d::is_loaded = false; } }
    match loadfn("MultiTexCoord4dARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4dARB = transmute(ptr); MultiTexCoord4dARB::is_loaded = true; }, _ => unsafe { MultiTexCoord4dARB::is_loaded = false; } }
    match loadfn("MultiTexCoord4dv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4dv = transmute(ptr); MultiTexCoord4dv::is_loaded = true; }, _ => unsafe { MultiTexCoord4dv::is_loaded = false; } }
    match loadfn("MultiTexCoord4dvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4dvARB = transmute(ptr); MultiTexCoord4dvARB::is_loaded = true; }, _ => unsafe { MultiTexCoord4dvARB::is_loaded = false; } }
    match loadfn("MultiTexCoord4f") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4f = transmute(ptr); MultiTexCoord4f::is_loaded = true; }, _ => unsafe { MultiTexCoord4f::is_loaded = false; } }
    match loadfn("MultiTexCoord4fARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4fARB = transmute(ptr); MultiTexCoord4fARB::is_loaded = true; }, _ => unsafe { MultiTexCoord4fARB::is_loaded = false; } }
    match loadfn("MultiTexCoord4fv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4fv = transmute(ptr); MultiTexCoord4fv::is_loaded = true; }, _ => unsafe { MultiTexCoord4fv::is_loaded = false; } }
    match loadfn("MultiTexCoord4fvARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4fvARB = transmute(ptr); MultiTexCoord4fvARB::is_loaded = true; }, _ => unsafe { MultiTexCoord4fvARB::is_loaded = false; } }
    match loadfn("MultiTexCoord4hNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4hNV = transmute(ptr); MultiTexCoord4hNV::is_loaded = true; }, _ => unsafe { MultiTexCoord4hNV::is_loaded = false; } }
    match loadfn("MultiTexCoord4hvNV") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4hvNV = transmute(ptr); MultiTexCoord4hvNV::is_loaded = true; }, _ => unsafe { MultiTexCoord4hvNV::is_loaded = false; } }
    match loadfn("MultiTexCoord4i") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4i = transmute(ptr); MultiTexCoord4i::is_loaded = true; }, _ => unsafe { MultiTexCoord4i::is_loaded = false; } }
    match loadfn("MultiTexCoord4iARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4iARB = transmute(ptr); MultiTexCoord4iARB::is_loaded = true; }, _ => unsafe { MultiTexCoord4iARB::is_loaded = false; } }
    match loadfn("MultiTexCoord4iv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4iv = transmute(ptr); MultiTexCoord4iv::is_loaded = true; }, _ => unsafe { MultiTexCoord4iv::is_loaded = false; } }
    match loadfn("MultiTexCoord4ivARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4ivARB = transmute(ptr); MultiTexCoord4ivARB::is_loaded = true; }, _ => unsafe { MultiTexCoord4ivARB::is_loaded = false; } }
    match loadfn("MultiTexCoord4s") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4s = transmute(ptr); MultiTexCoord4s::is_loaded = true; }, _ => unsafe { MultiTexCoord4s::is_loaded = false; } }
    match loadfn("MultiTexCoord4sARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4sARB = transmute(ptr); MultiTexCoord4sARB::is_loaded = true; }, _ => unsafe { MultiTexCoord4sARB::is_loaded = false; } }
    match loadfn("MultiTexCoord4sv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4sv = transmute(ptr); MultiTexCoord4sv::is_loaded = true; }, _ => unsafe { MultiTexCoord4sv::is_loaded = false; } }
    match loadfn("MultiTexCoord4svARB") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4svARB = transmute(ptr); MultiTexCoord4svARB::is_loaded = true; }, _ => unsafe { MultiTexCoord4svARB::is_loaded = false; } }
    match loadfn("MultiTexCoord4x") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4x = transmute(ptr); MultiTexCoord4x::is_loaded = true; }, _ => unsafe { MultiTexCoord4x::is_loaded = false; } }
    match loadfn("MultiTexCoord4xOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4xOES = transmute(ptr); MultiTexCoord4xOES::is_loaded = true; }, _ => unsafe { MultiTexCoord4xOES::is_loaded = false; } }
    match loadfn("MultiTexCoord4xvOES") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoord4xvOES = transmute(ptr); MultiTexCoord4xvOES::is_loaded = true; }, _ => unsafe { MultiTexCoord4xvOES::is_loaded = false; } }
    match loadfn("MultiTexCoordP1ui") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP1ui = transmute(ptr); MultiTexCoordP1ui::is_loaded = true; }, _ => unsafe { MultiTexCoordP1ui::is_loaded = false; } }
    match loadfn("MultiTexCoordP1uiv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP1uiv = transmute(ptr); MultiTexCoordP1uiv::is_loaded = true; }, _ => unsafe { MultiTexCoordP1uiv::is_loaded = false; } }
    match loadfn("MultiTexCoordP2ui") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP2ui = transmute(ptr); MultiTexCoordP2ui::is_loaded = true; }, _ => unsafe { MultiTexCoordP2ui::is_loaded = false; } }
    match loadfn("MultiTexCoordP2uiv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP2uiv = transmute(ptr); MultiTexCoordP2uiv::is_loaded = true; }, _ => unsafe { MultiTexCoordP2uiv::is_loaded = false; } }
    match loadfn("MultiTexCoordP3ui") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP3ui = transmute(ptr); MultiTexCoordP3ui::is_loaded = true; }, _ => unsafe { MultiTexCoordP3ui::is_loaded = false; } }
    match loadfn("MultiTexCoordP3uiv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP3uiv = transmute(ptr); MultiTexCoordP3uiv::is_loaded = true; }, _ => unsafe { MultiTexCoordP3uiv::is_loaded = false; } }
    match loadfn("MultiTexCoordP4ui") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP4ui = transmute(ptr); MultiTexCoordP4ui::is_loaded = true; }, _ => unsafe { MultiTexCoordP4ui::is_loaded = false; } }
    match loadfn("MultiTexCoordP4uiv") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordP4uiv = transmute(ptr); MultiTexCoordP4uiv::is_loaded = true; }, _ => unsafe { MultiTexCoordP4uiv::is_loaded = false; } }
    match loadfn("MultiTexCoordPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexCoordPointerEXT = transmute(ptr); MultiTexCoordPointerEXT::is_loaded = true; }, _ => unsafe { MultiTexCoordPointerEXT::is_loaded = false; } }
    match loadfn("MultiTexEnvfEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexEnvfEXT = transmute(ptr); MultiTexEnvfEXT::is_loaded = true; }, _ => unsafe { MultiTexEnvfEXT::is_loaded = false; } }
    match loadfn("MultiTexEnvfvEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexEnvfvEXT = transmute(ptr); MultiTexEnvfvEXT::is_loaded = true; }, _ => unsafe { MultiTexEnvfvEXT::is_loaded = false; } }
    match loadfn("MultiTexEnviEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexEnviEXT = transmute(ptr); MultiTexEnviEXT::is_loaded = true; }, _ => unsafe { MultiTexEnviEXT::is_loaded = false; } }
    match loadfn("MultiTexEnvivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexEnvivEXT = transmute(ptr); MultiTexEnvivEXT::is_loaded = true; }, _ => unsafe { MultiTexEnvivEXT::is_loaded = false; } }
    match loadfn("MultiTexGendEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGendEXT = transmute(ptr); MultiTexGendEXT::is_loaded = true; }, _ => unsafe { MultiTexGendEXT::is_loaded = false; } }
    match loadfn("MultiTexGendvEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGendvEXT = transmute(ptr); MultiTexGendvEXT::is_loaded = true; }, _ => unsafe { MultiTexGendvEXT::is_loaded = false; } }
    match loadfn("MultiTexGenfEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGenfEXT = transmute(ptr); MultiTexGenfEXT::is_loaded = true; }, _ => unsafe { MultiTexGenfEXT::is_loaded = false; } }
    match loadfn("MultiTexGenfvEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGenfvEXT = transmute(ptr); MultiTexGenfvEXT::is_loaded = true; }, _ => unsafe { MultiTexGenfvEXT::is_loaded = false; } }
    match loadfn("MultiTexGeniEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGeniEXT = transmute(ptr); MultiTexGeniEXT::is_loaded = true; }, _ => unsafe { MultiTexGeniEXT::is_loaded = false; } }
    match loadfn("MultiTexGenivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexGenivEXT = transmute(ptr); MultiTexGenivEXT::is_loaded = true; }, _ => unsafe { MultiTexGenivEXT::is_loaded = false; } }
    match loadfn("MultiTexImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexImage1DEXT = transmute(ptr); MultiTexImage1DEXT::is_loaded = true; }, _ => unsafe { MultiTexImage1DEXT::is_loaded = false; } }
    match loadfn("MultiTexImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexImage2DEXT = transmute(ptr); MultiTexImage2DEXT::is_loaded = true; }, _ => unsafe { MultiTexImage2DEXT::is_loaded = false; } }
    match loadfn("MultiTexImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexImage3DEXT = transmute(ptr); MultiTexImage3DEXT::is_loaded = true; }, _ => unsafe { MultiTexImage3DEXT::is_loaded = false; } }
    match loadfn("MultiTexParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterIivEXT = transmute(ptr); MultiTexParameterIivEXT::is_loaded = true; }, _ => unsafe { MultiTexParameterIivEXT::is_loaded = false; } }
    match loadfn("MultiTexParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterIuivEXT = transmute(ptr); MultiTexParameterIuivEXT::is_loaded = true; }, _ => unsafe { MultiTexParameterIuivEXT::is_loaded = false; } }
    match loadfn("MultiTexParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterfEXT = transmute(ptr); MultiTexParameterfEXT::is_loaded = true; }, _ => unsafe { MultiTexParameterfEXT::is_loaded = false; } }
    match loadfn("MultiTexParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterfvEXT = transmute(ptr); MultiTexParameterfvEXT::is_loaded = true; }, _ => unsafe { MultiTexParameterfvEXT::is_loaded = false; } }
    match loadfn("MultiTexParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameteriEXT = transmute(ptr); MultiTexParameteriEXT::is_loaded = true; }, _ => unsafe { MultiTexParameteriEXT::is_loaded = false; } }
    match loadfn("MultiTexParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexParameterivEXT = transmute(ptr); MultiTexParameterivEXT::is_loaded = true; }, _ => unsafe { MultiTexParameterivEXT::is_loaded = false; } }
    match loadfn("MultiTexRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexRenderbufferEXT = transmute(ptr); MultiTexRenderbufferEXT::is_loaded = true; }, _ => unsafe { MultiTexRenderbufferEXT::is_loaded = false; } }
    match loadfn("MultiTexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexSubImage1DEXT = transmute(ptr); MultiTexSubImage1DEXT::is_loaded = true; }, _ => unsafe { MultiTexSubImage1DEXT::is_loaded = false; } }
    match loadfn("MultiTexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexSubImage2DEXT = transmute(ptr); MultiTexSubImage2DEXT::is_loaded = true; }, _ => unsafe { MultiTexSubImage2DEXT::is_loaded = false; } }
    match loadfn("MultiTexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::MultiTexSubImage3DEXT = transmute(ptr); MultiTexSubImage3DEXT::is_loaded = true; }, _ => unsafe { MultiTexSubImage3DEXT::is_loaded = false; } }
    match loadfn("NamedBufferDataEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedBufferDataEXT = transmute(ptr); NamedBufferDataEXT::is_loaded = true; }, _ => unsafe { NamedBufferDataEXT::is_loaded = false; } }
    match loadfn("NamedBufferStorageEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedBufferStorageEXT = transmute(ptr); NamedBufferStorageEXT::is_loaded = true; }, _ => unsafe { NamedBufferStorageEXT::is_loaded = false; } }
    match loadfn("NamedBufferSubDataEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedBufferSubDataEXT = transmute(ptr); NamedBufferSubDataEXT::is_loaded = true; }, _ => unsafe { NamedBufferSubDataEXT::is_loaded = false; } }
    match loadfn("NamedCopyBufferSubDataEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedCopyBufferSubDataEXT = transmute(ptr); NamedCopyBufferSubDataEXT::is_loaded = true; }, _ => unsafe { NamedCopyBufferSubDataEXT::is_loaded = false; } }
    match loadfn("NamedFramebufferParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferParameteriEXT = transmute(ptr); NamedFramebufferParameteriEXT::is_loaded = true; }, _ => unsafe { NamedFramebufferParameteriEXT::is_loaded = false; } }
    match loadfn("NamedFramebufferRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferRenderbufferEXT = transmute(ptr); NamedFramebufferRenderbufferEXT::is_loaded = true; }, _ => unsafe { NamedFramebufferRenderbufferEXT::is_loaded = false; } }
    match loadfn("NamedFramebufferTexture1DEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTexture1DEXT = transmute(ptr); NamedFramebufferTexture1DEXT::is_loaded = true; }, _ => unsafe { NamedFramebufferTexture1DEXT::is_loaded = false; } }
    match loadfn("NamedFramebufferTexture2DEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTexture2DEXT = transmute(ptr); NamedFramebufferTexture2DEXT::is_loaded = true; }, _ => unsafe { NamedFramebufferTexture2DEXT::is_loaded = false; } }
    match loadfn("NamedFramebufferTexture3DEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTexture3DEXT = transmute(ptr); NamedFramebufferTexture3DEXT::is_loaded = true; }, _ => unsafe { NamedFramebufferTexture3DEXT::is_loaded = false; } }
    match loadfn("NamedFramebufferTextureEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTextureEXT = transmute(ptr); NamedFramebufferTextureEXT::is_loaded = true; }, _ => unsafe { NamedFramebufferTextureEXT::is_loaded = false; } }
    match loadfn("NamedFramebufferTextureFaceEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTextureFaceEXT = transmute(ptr); NamedFramebufferTextureFaceEXT::is_loaded = true; }, _ => unsafe { NamedFramebufferTextureFaceEXT::is_loaded = false; } }
    match loadfn("NamedFramebufferTextureLayerEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedFramebufferTextureLayerEXT = transmute(ptr); NamedFramebufferTextureLayerEXT::is_loaded = true; }, _ => unsafe { NamedFramebufferTextureLayerEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameter4dEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameter4dEXT = transmute(ptr); NamedProgramLocalParameter4dEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameter4dEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameter4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameter4dvEXT = transmute(ptr); NamedProgramLocalParameter4dvEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameter4dvEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameter4fEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameter4fEXT = transmute(ptr); NamedProgramLocalParameter4fEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameter4fEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameter4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameter4fvEXT = transmute(ptr); NamedProgramLocalParameter4fvEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameter4fvEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameterI4iEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameterI4iEXT = transmute(ptr); NamedProgramLocalParameterI4iEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameterI4iEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameterI4ivEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameterI4ivEXT = transmute(ptr); NamedProgramLocalParameterI4ivEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameterI4ivEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameterI4uiEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameterI4uiEXT = transmute(ptr); NamedProgramLocalParameterI4uiEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameterI4uiEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameterI4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameterI4uivEXT = transmute(ptr); NamedProgramLocalParameterI4uivEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameterI4uivEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParameters4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParameters4fvEXT = transmute(ptr); NamedProgramLocalParameters4fvEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParameters4fvEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParametersI4ivEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParametersI4ivEXT = transmute(ptr); NamedProgramLocalParametersI4ivEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParametersI4ivEXT::is_loaded = false; } }
    match loadfn("NamedProgramLocalParametersI4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramLocalParametersI4uivEXT = transmute(ptr); NamedProgramLocalParametersI4uivEXT::is_loaded = true; }, _ => unsafe { NamedProgramLocalParametersI4uivEXT::is_loaded = false; } }
    match loadfn("NamedProgramStringEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedProgramStringEXT = transmute(ptr); NamedProgramStringEXT::is_loaded = true; }, _ => unsafe { NamedProgramStringEXT::is_loaded = false; } }
    match loadfn("NamedRenderbufferStorageEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedRenderbufferStorageEXT = transmute(ptr); NamedRenderbufferStorageEXT::is_loaded = true; }, _ => unsafe { NamedRenderbufferStorageEXT::is_loaded = false; } }
    match loadfn("NamedRenderbufferStorageMultisampleCoverageEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedRenderbufferStorageMultisampleCoverageEXT = transmute(ptr); NamedRenderbufferStorageMultisampleCoverageEXT::is_loaded = true; }, _ => unsafe { NamedRenderbufferStorageMultisampleCoverageEXT::is_loaded = false; } }
    match loadfn("NamedRenderbufferStorageMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::NamedRenderbufferStorageMultisampleEXT = transmute(ptr); NamedRenderbufferStorageMultisampleEXT::is_loaded = true; }, _ => unsafe { NamedRenderbufferStorageMultisampleEXT::is_loaded = false; } }
    match loadfn("NamedStringARB") { ptr if !ptr.is_null() => unsafe { storage::NamedStringARB = transmute(ptr); NamedStringARB::is_loaded = true; }, _ => unsafe { NamedStringARB::is_loaded = false; } }
    match loadfn("NewList") { ptr if !ptr.is_null() => unsafe { storage::NewList = transmute(ptr); NewList::is_loaded = true; }, _ => unsafe { NewList::is_loaded = false; } }
    match loadfn("NewObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::NewObjectBufferATI = transmute(ptr); NewObjectBufferATI::is_loaded = true; }, _ => unsafe { NewObjectBufferATI::is_loaded = false; } }
    match loadfn("Normal3b") { ptr if !ptr.is_null() => unsafe { storage::Normal3b = transmute(ptr); Normal3b::is_loaded = true; }, _ => unsafe { Normal3b::is_loaded = false; } }
    match loadfn("Normal3bv") { ptr if !ptr.is_null() => unsafe { storage::Normal3bv = transmute(ptr); Normal3bv::is_loaded = true; }, _ => unsafe { Normal3bv::is_loaded = false; } }
    match loadfn("Normal3d") { ptr if !ptr.is_null() => unsafe { storage::Normal3d = transmute(ptr); Normal3d::is_loaded = true; }, _ => unsafe { Normal3d::is_loaded = false; } }
    match loadfn("Normal3dv") { ptr if !ptr.is_null() => unsafe { storage::Normal3dv = transmute(ptr); Normal3dv::is_loaded = true; }, _ => unsafe { Normal3dv::is_loaded = false; } }
    match loadfn("Normal3f") { ptr if !ptr.is_null() => unsafe { storage::Normal3f = transmute(ptr); Normal3f::is_loaded = true; }, _ => unsafe { Normal3f::is_loaded = false; } }
    match loadfn("Normal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::Normal3fVertex3fSUN = transmute(ptr); Normal3fVertex3fSUN::is_loaded = true; }, _ => unsafe { Normal3fVertex3fSUN::is_loaded = false; } }
    match loadfn("Normal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::Normal3fVertex3fvSUN = transmute(ptr); Normal3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { Normal3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("Normal3fv") { ptr if !ptr.is_null() => unsafe { storage::Normal3fv = transmute(ptr); Normal3fv::is_loaded = true; }, _ => unsafe { Normal3fv::is_loaded = false; } }
    match loadfn("Normal3hNV") { ptr if !ptr.is_null() => unsafe { storage::Normal3hNV = transmute(ptr); Normal3hNV::is_loaded = true; }, _ => unsafe { Normal3hNV::is_loaded = false; } }
    match loadfn("Normal3hvNV") { ptr if !ptr.is_null() => unsafe { storage::Normal3hvNV = transmute(ptr); Normal3hvNV::is_loaded = true; }, _ => unsafe { Normal3hvNV::is_loaded = false; } }
    match loadfn("Normal3i") { ptr if !ptr.is_null() => unsafe { storage::Normal3i = transmute(ptr); Normal3i::is_loaded = true; }, _ => unsafe { Normal3i::is_loaded = false; } }
    match loadfn("Normal3iv") { ptr if !ptr.is_null() => unsafe { storage::Normal3iv = transmute(ptr); Normal3iv::is_loaded = true; }, _ => unsafe { Normal3iv::is_loaded = false; } }
    match loadfn("Normal3s") { ptr if !ptr.is_null() => unsafe { storage::Normal3s = transmute(ptr); Normal3s::is_loaded = true; }, _ => unsafe { Normal3s::is_loaded = false; } }
    match loadfn("Normal3sv") { ptr if !ptr.is_null() => unsafe { storage::Normal3sv = transmute(ptr); Normal3sv::is_loaded = true; }, _ => unsafe { Normal3sv::is_loaded = false; } }
    match loadfn("Normal3x") { ptr if !ptr.is_null() => unsafe { storage::Normal3x = transmute(ptr); Normal3x::is_loaded = true; }, _ => unsafe { Normal3x::is_loaded = false; } }
    match loadfn("Normal3xOES") { ptr if !ptr.is_null() => unsafe { storage::Normal3xOES = transmute(ptr); Normal3xOES::is_loaded = true; }, _ => unsafe { Normal3xOES::is_loaded = false; } }
    match loadfn("Normal3xvOES") { ptr if !ptr.is_null() => unsafe { storage::Normal3xvOES = transmute(ptr); Normal3xvOES::is_loaded = true; }, _ => unsafe { Normal3xvOES::is_loaded = false; } }
    match loadfn("NormalFormatNV") { ptr if !ptr.is_null() => unsafe { storage::NormalFormatNV = transmute(ptr); NormalFormatNV::is_loaded = true; }, _ => unsafe { NormalFormatNV::is_loaded = false; } }
    match loadfn("NormalP3ui") { ptr if !ptr.is_null() => unsafe { storage::NormalP3ui = transmute(ptr); NormalP3ui::is_loaded = true; }, _ => unsafe { NormalP3ui::is_loaded = false; } }
    match loadfn("NormalP3uiv") { ptr if !ptr.is_null() => unsafe { storage::NormalP3uiv = transmute(ptr); NormalP3uiv::is_loaded = true; }, _ => unsafe { NormalP3uiv::is_loaded = false; } }
    match loadfn("NormalPointer") { ptr if !ptr.is_null() => unsafe { storage::NormalPointer = transmute(ptr); NormalPointer::is_loaded = true; }, _ => unsafe { NormalPointer::is_loaded = false; } }
    match loadfn("NormalPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::NormalPointerEXT = transmute(ptr); NormalPointerEXT::is_loaded = true; }, _ => unsafe { NormalPointerEXT::is_loaded = false; } }
    match loadfn("NormalPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::NormalPointerListIBM = transmute(ptr); NormalPointerListIBM::is_loaded = true; }, _ => unsafe { NormalPointerListIBM::is_loaded = false; } }
    match loadfn("NormalPointervINTEL") { ptr if !ptr.is_null() => unsafe { storage::NormalPointervINTEL = transmute(ptr); NormalPointervINTEL::is_loaded = true; }, _ => unsafe { NormalPointervINTEL::is_loaded = false; } }
    match loadfn("NormalStream3bATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3bATI = transmute(ptr); NormalStream3bATI::is_loaded = true; }, _ => unsafe { NormalStream3bATI::is_loaded = false; } }
    match loadfn("NormalStream3bvATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3bvATI = transmute(ptr); NormalStream3bvATI::is_loaded = true; }, _ => unsafe { NormalStream3bvATI::is_loaded = false; } }
    match loadfn("NormalStream3dATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3dATI = transmute(ptr); NormalStream3dATI::is_loaded = true; }, _ => unsafe { NormalStream3dATI::is_loaded = false; } }
    match loadfn("NormalStream3dvATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3dvATI = transmute(ptr); NormalStream3dvATI::is_loaded = true; }, _ => unsafe { NormalStream3dvATI::is_loaded = false; } }
    match loadfn("NormalStream3fATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3fATI = transmute(ptr); NormalStream3fATI::is_loaded = true; }, _ => unsafe { NormalStream3fATI::is_loaded = false; } }
    match loadfn("NormalStream3fvATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3fvATI = transmute(ptr); NormalStream3fvATI::is_loaded = true; }, _ => unsafe { NormalStream3fvATI::is_loaded = false; } }
    match loadfn("NormalStream3iATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3iATI = transmute(ptr); NormalStream3iATI::is_loaded = true; }, _ => unsafe { NormalStream3iATI::is_loaded = false; } }
    match loadfn("NormalStream3ivATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3ivATI = transmute(ptr); NormalStream3ivATI::is_loaded = true; }, _ => unsafe { NormalStream3ivATI::is_loaded = false; } }
    match loadfn("NormalStream3sATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3sATI = transmute(ptr); NormalStream3sATI::is_loaded = true; }, _ => unsafe { NormalStream3sATI::is_loaded = false; } }
    match loadfn("NormalStream3svATI") { ptr if !ptr.is_null() => unsafe { storage::NormalStream3svATI = transmute(ptr); NormalStream3svATI::is_loaded = true; }, _ => unsafe { NormalStream3svATI::is_loaded = false; } }
    match loadfn("ObjectLabel") { ptr if !ptr.is_null() => unsafe { storage::ObjectLabel = transmute(ptr); ObjectLabel::is_loaded = true; }, _ => unsafe { ObjectLabel::is_loaded = false; } }
    match loadfn("ObjectLabelKHR") { ptr if !ptr.is_null() => unsafe { storage::ObjectLabelKHR = transmute(ptr); ObjectLabelKHR::is_loaded = true; }, _ => unsafe { ObjectLabelKHR::is_loaded = false; } }
    match loadfn("ObjectPtrLabel") { ptr if !ptr.is_null() => unsafe { storage::ObjectPtrLabel = transmute(ptr); ObjectPtrLabel::is_loaded = true; }, _ => unsafe { ObjectPtrLabel::is_loaded = false; } }
    match loadfn("ObjectPtrLabelKHR") { ptr if !ptr.is_null() => unsafe { storage::ObjectPtrLabelKHR = transmute(ptr); ObjectPtrLabelKHR::is_loaded = true; }, _ => unsafe { ObjectPtrLabelKHR::is_loaded = false; } }
    match loadfn("ObjectPurgeableAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ObjectPurgeableAPPLE = transmute(ptr); ObjectPurgeableAPPLE::is_loaded = true; }, _ => unsafe { ObjectPurgeableAPPLE::is_loaded = false; } }
    match loadfn("ObjectUnpurgeableAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ObjectUnpurgeableAPPLE = transmute(ptr); ObjectUnpurgeableAPPLE::is_loaded = true; }, _ => unsafe { ObjectUnpurgeableAPPLE::is_loaded = false; } }
    match loadfn("Ortho") { ptr if !ptr.is_null() => unsafe { storage::Ortho = transmute(ptr); Ortho::is_loaded = true; }, _ => unsafe { Ortho::is_loaded = false; } }
    match loadfn("Orthof") { ptr if !ptr.is_null() => unsafe { storage::Orthof = transmute(ptr); Orthof::is_loaded = true; }, _ => unsafe { Orthof::is_loaded = false; } }
    match loadfn("OrthofOES") { ptr if !ptr.is_null() => unsafe { storage::OrthofOES = transmute(ptr); OrthofOES::is_loaded = true; }, _ => unsafe { OrthofOES::is_loaded = false; } }
    match loadfn("Orthox") { ptr if !ptr.is_null() => unsafe { storage::Orthox = transmute(ptr); Orthox::is_loaded = true; }, _ => unsafe { Orthox::is_loaded = false; } }
    match loadfn("OrthoxOES") { ptr if !ptr.is_null() => unsafe { storage::OrthoxOES = transmute(ptr); OrthoxOES::is_loaded = true; }, _ => unsafe { OrthoxOES::is_loaded = false; } }
    match loadfn("PNTrianglesfATI") { ptr if !ptr.is_null() => unsafe { storage::PNTrianglesfATI = transmute(ptr); PNTrianglesfATI::is_loaded = true; }, _ => unsafe { PNTrianglesfATI::is_loaded = false; } }
    match loadfn("PNTrianglesiATI") { ptr if !ptr.is_null() => unsafe { storage::PNTrianglesiATI = transmute(ptr); PNTrianglesiATI::is_loaded = true; }, _ => unsafe { PNTrianglesiATI::is_loaded = false; } }
    match loadfn("PassTexCoordATI") { ptr if !ptr.is_null() => unsafe { storage::PassTexCoordATI = transmute(ptr); PassTexCoordATI::is_loaded = true; }, _ => unsafe { PassTexCoordATI::is_loaded = false; } }
    match loadfn("PassThrough") { ptr if !ptr.is_null() => unsafe { storage::PassThrough = transmute(ptr); PassThrough::is_loaded = true; }, _ => unsafe { PassThrough::is_loaded = false; } }
    match loadfn("PassThroughxOES") { ptr if !ptr.is_null() => unsafe { storage::PassThroughxOES = transmute(ptr); PassThroughxOES::is_loaded = true; }, _ => unsafe { PassThroughxOES::is_loaded = false; } }
    match loadfn("PatchParameterfv") { ptr if !ptr.is_null() => unsafe { storage::PatchParameterfv = transmute(ptr); PatchParameterfv::is_loaded = true; }, _ => unsafe { PatchParameterfv::is_loaded = false; } }
    match loadfn("PatchParameteri") { ptr if !ptr.is_null() => unsafe { storage::PatchParameteri = transmute(ptr); PatchParameteri::is_loaded = true; }, _ => unsafe { PatchParameteri::is_loaded = false; } }
    match loadfn("PathColorGenNV") { ptr if !ptr.is_null() => unsafe { storage::PathColorGenNV = transmute(ptr); PathColorGenNV::is_loaded = true; }, _ => unsafe { PathColorGenNV::is_loaded = false; } }
    match loadfn("PathCommandsNV") { ptr if !ptr.is_null() => unsafe { storage::PathCommandsNV = transmute(ptr); PathCommandsNV::is_loaded = true; }, _ => unsafe { PathCommandsNV::is_loaded = false; } }
    match loadfn("PathCoordsNV") { ptr if !ptr.is_null() => unsafe { storage::PathCoordsNV = transmute(ptr); PathCoordsNV::is_loaded = true; }, _ => unsafe { PathCoordsNV::is_loaded = false; } }
    match loadfn("PathCoverDepthFuncNV") { ptr if !ptr.is_null() => unsafe { storage::PathCoverDepthFuncNV = transmute(ptr); PathCoverDepthFuncNV::is_loaded = true; }, _ => unsafe { PathCoverDepthFuncNV::is_loaded = false; } }
    match loadfn("PathDashArrayNV") { ptr if !ptr.is_null() => unsafe { storage::PathDashArrayNV = transmute(ptr); PathDashArrayNV::is_loaded = true; }, _ => unsafe { PathDashArrayNV::is_loaded = false; } }
    match loadfn("PathFogGenNV") { ptr if !ptr.is_null() => unsafe { storage::PathFogGenNV = transmute(ptr); PathFogGenNV::is_loaded = true; }, _ => unsafe { PathFogGenNV::is_loaded = false; } }
    match loadfn("PathGlyphRangeNV") { ptr if !ptr.is_null() => unsafe { storage::PathGlyphRangeNV = transmute(ptr); PathGlyphRangeNV::is_loaded = true; }, _ => unsafe { PathGlyphRangeNV::is_loaded = false; } }
    match loadfn("PathGlyphsNV") { ptr if !ptr.is_null() => unsafe { storage::PathGlyphsNV = transmute(ptr); PathGlyphsNV::is_loaded = true; }, _ => unsafe { PathGlyphsNV::is_loaded = false; } }
    match loadfn("PathParameterfNV") { ptr if !ptr.is_null() => unsafe { storage::PathParameterfNV = transmute(ptr); PathParameterfNV::is_loaded = true; }, _ => unsafe { PathParameterfNV::is_loaded = false; } }
    match loadfn("PathParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::PathParameterfvNV = transmute(ptr); PathParameterfvNV::is_loaded = true; }, _ => unsafe { PathParameterfvNV::is_loaded = false; } }
    match loadfn("PathParameteriNV") { ptr if !ptr.is_null() => unsafe { storage::PathParameteriNV = transmute(ptr); PathParameteriNV::is_loaded = true; }, _ => unsafe { PathParameteriNV::is_loaded = false; } }
    match loadfn("PathParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::PathParameterivNV = transmute(ptr); PathParameterivNV::is_loaded = true; }, _ => unsafe { PathParameterivNV::is_loaded = false; } }
    match loadfn("PathStencilDepthOffsetNV") { ptr if !ptr.is_null() => unsafe { storage::PathStencilDepthOffsetNV = transmute(ptr); PathStencilDepthOffsetNV::is_loaded = true; }, _ => unsafe { PathStencilDepthOffsetNV::is_loaded = false; } }
    match loadfn("PathStencilFuncNV") { ptr if !ptr.is_null() => unsafe { storage::PathStencilFuncNV = transmute(ptr); PathStencilFuncNV::is_loaded = true; }, _ => unsafe { PathStencilFuncNV::is_loaded = false; } }
    match loadfn("PathStringNV") { ptr if !ptr.is_null() => unsafe { storage::PathStringNV = transmute(ptr); PathStringNV::is_loaded = true; }, _ => unsafe { PathStringNV::is_loaded = false; } }
    match loadfn("PathSubCommandsNV") { ptr if !ptr.is_null() => unsafe { storage::PathSubCommandsNV = transmute(ptr); PathSubCommandsNV::is_loaded = true; }, _ => unsafe { PathSubCommandsNV::is_loaded = false; } }
    match loadfn("PathSubCoordsNV") { ptr if !ptr.is_null() => unsafe { storage::PathSubCoordsNV = transmute(ptr); PathSubCoordsNV::is_loaded = true; }, _ => unsafe { PathSubCoordsNV::is_loaded = false; } }
    match loadfn("PathTexGenNV") { ptr if !ptr.is_null() => unsafe { storage::PathTexGenNV = transmute(ptr); PathTexGenNV::is_loaded = true; }, _ => unsafe { PathTexGenNV::is_loaded = false; } }
    match loadfn("PauseTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::PauseTransformFeedback = transmute(ptr); PauseTransformFeedback::is_loaded = true; }, _ => unsafe { PauseTransformFeedback::is_loaded = false; } }
    match loadfn("PauseTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::PauseTransformFeedbackNV = transmute(ptr); PauseTransformFeedbackNV::is_loaded = true; }, _ => unsafe { PauseTransformFeedbackNV::is_loaded = false; } }
    match loadfn("PixelDataRangeNV") { ptr if !ptr.is_null() => unsafe { storage::PixelDataRangeNV = transmute(ptr); PixelDataRangeNV::is_loaded = true; }, _ => unsafe { PixelDataRangeNV::is_loaded = false; } }
    match loadfn("PixelMapfv") { ptr if !ptr.is_null() => unsafe { storage::PixelMapfv = transmute(ptr); PixelMapfv::is_loaded = true; }, _ => unsafe { PixelMapfv::is_loaded = false; } }
    match loadfn("PixelMapuiv") { ptr if !ptr.is_null() => unsafe { storage::PixelMapuiv = transmute(ptr); PixelMapuiv::is_loaded = true; }, _ => unsafe { PixelMapuiv::is_loaded = false; } }
    match loadfn("PixelMapusv") { ptr if !ptr.is_null() => unsafe { storage::PixelMapusv = transmute(ptr); PixelMapusv::is_loaded = true; }, _ => unsafe { PixelMapusv::is_loaded = false; } }
    match loadfn("PixelMapx") { ptr if !ptr.is_null() => unsafe { storage::PixelMapx = transmute(ptr); PixelMapx::is_loaded = true; }, _ => unsafe { PixelMapx::is_loaded = false; } }
    match loadfn("PixelStoref") { ptr if !ptr.is_null() => unsafe { storage::PixelStoref = transmute(ptr); PixelStoref::is_loaded = true; }, _ => unsafe { PixelStoref::is_loaded = false; } }
    match loadfn("PixelStorei") { ptr if !ptr.is_null() => unsafe { storage::PixelStorei = transmute(ptr); PixelStorei::is_loaded = true; }, _ => unsafe { PixelStorei::is_loaded = false; } }
    match loadfn("PixelStorex") { ptr if !ptr.is_null() => unsafe { storage::PixelStorex = transmute(ptr); PixelStorex::is_loaded = true; }, _ => unsafe { PixelStorex::is_loaded = false; } }
    match loadfn("PixelTexGenParameterfSGIS") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenParameterfSGIS = transmute(ptr); PixelTexGenParameterfSGIS::is_loaded = true; }, _ => unsafe { PixelTexGenParameterfSGIS::is_loaded = false; } }
    match loadfn("PixelTexGenParameterfvSGIS") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenParameterfvSGIS = transmute(ptr); PixelTexGenParameterfvSGIS::is_loaded = true; }, _ => unsafe { PixelTexGenParameterfvSGIS::is_loaded = false; } }
    match loadfn("PixelTexGenParameteriSGIS") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenParameteriSGIS = transmute(ptr); PixelTexGenParameteriSGIS::is_loaded = true; }, _ => unsafe { PixelTexGenParameteriSGIS::is_loaded = false; } }
    match loadfn("PixelTexGenParameterivSGIS") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenParameterivSGIS = transmute(ptr); PixelTexGenParameterivSGIS::is_loaded = true; }, _ => unsafe { PixelTexGenParameterivSGIS::is_loaded = false; } }
    match loadfn("PixelTexGenSGIX") { ptr if !ptr.is_null() => unsafe { storage::PixelTexGenSGIX = transmute(ptr); PixelTexGenSGIX::is_loaded = true; }, _ => unsafe { PixelTexGenSGIX::is_loaded = false; } }
    match loadfn("PixelTransferf") { ptr if !ptr.is_null() => unsafe { storage::PixelTransferf = transmute(ptr); PixelTransferf::is_loaded = true; }, _ => unsafe { PixelTransferf::is_loaded = false; } }
    match loadfn("PixelTransferi") { ptr if !ptr.is_null() => unsafe { storage::PixelTransferi = transmute(ptr); PixelTransferi::is_loaded = true; }, _ => unsafe { PixelTransferi::is_loaded = false; } }
    match loadfn("PixelTransferxOES") { ptr if !ptr.is_null() => unsafe { storage::PixelTransferxOES = transmute(ptr); PixelTransferxOES::is_loaded = true; }, _ => unsafe { PixelTransferxOES::is_loaded = false; } }
    match loadfn("PixelTransformParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::PixelTransformParameterfEXT = transmute(ptr); PixelTransformParameterfEXT::is_loaded = true; }, _ => unsafe { PixelTransformParameterfEXT::is_loaded = false; } }
    match loadfn("PixelTransformParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::PixelTransformParameterfvEXT = transmute(ptr); PixelTransformParameterfvEXT::is_loaded = true; }, _ => unsafe { PixelTransformParameterfvEXT::is_loaded = false; } }
    match loadfn("PixelTransformParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::PixelTransformParameteriEXT = transmute(ptr); PixelTransformParameteriEXT::is_loaded = true; }, _ => unsafe { PixelTransformParameteriEXT::is_loaded = false; } }
    match loadfn("PixelTransformParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::PixelTransformParameterivEXT = transmute(ptr); PixelTransformParameterivEXT::is_loaded = true; }, _ => unsafe { PixelTransformParameterivEXT::is_loaded = false; } }
    match loadfn("PixelZoom") { ptr if !ptr.is_null() => unsafe { storage::PixelZoom = transmute(ptr); PixelZoom::is_loaded = true; }, _ => unsafe { PixelZoom::is_loaded = false; } }
    match loadfn("PixelZoomxOES") { ptr if !ptr.is_null() => unsafe { storage::PixelZoomxOES = transmute(ptr); PixelZoomxOES::is_loaded = true; }, _ => unsafe { PixelZoomxOES::is_loaded = false; } }
    match loadfn("PointAlongPathNV") { ptr if !ptr.is_null() => unsafe { storage::PointAlongPathNV = transmute(ptr); PointAlongPathNV::is_loaded = true; }, _ => unsafe { PointAlongPathNV::is_loaded = false; } }
    match loadfn("PointParameterf") { ptr if !ptr.is_null() => unsafe { storage::PointParameterf = transmute(ptr); PointParameterf::is_loaded = true; }, _ => unsafe { PointParameterf::is_loaded = false; } }
    match loadfn("PointParameterfARB") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfARB = transmute(ptr); PointParameterfARB::is_loaded = true; }, _ => unsafe { PointParameterfARB::is_loaded = false; } }
    match loadfn("PointParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfEXT = transmute(ptr); PointParameterfEXT::is_loaded = true; }, _ => unsafe { PointParameterfEXT::is_loaded = false; } }
    match loadfn("PointParameterfSGIS") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfSGIS = transmute(ptr); PointParameterfSGIS::is_loaded = true; }, _ => unsafe { PointParameterfSGIS::is_loaded = false; } }
    match loadfn("PointParameterfv") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfv = transmute(ptr); PointParameterfv::is_loaded = true; }, _ => unsafe { PointParameterfv::is_loaded = false; } }
    match loadfn("PointParameterfvARB") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfvARB = transmute(ptr); PointParameterfvARB::is_loaded = true; }, _ => unsafe { PointParameterfvARB::is_loaded = false; } }
    match loadfn("PointParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfvEXT = transmute(ptr); PointParameterfvEXT::is_loaded = true; }, _ => unsafe { PointParameterfvEXT::is_loaded = false; } }
    match loadfn("PointParameterfvSGIS") { ptr if !ptr.is_null() => unsafe { storage::PointParameterfvSGIS = transmute(ptr); PointParameterfvSGIS::is_loaded = true; }, _ => unsafe { PointParameterfvSGIS::is_loaded = false; } }
    match loadfn("PointParameteri") { ptr if !ptr.is_null() => unsafe { storage::PointParameteri = transmute(ptr); PointParameteri::is_loaded = true; }, _ => unsafe { PointParameteri::is_loaded = false; } }
    match loadfn("PointParameteriNV") { ptr if !ptr.is_null() => unsafe { storage::PointParameteriNV = transmute(ptr); PointParameteriNV::is_loaded = true; }, _ => unsafe { PointParameteriNV::is_loaded = false; } }
    match loadfn("PointParameteriv") { ptr if !ptr.is_null() => unsafe { storage::PointParameteriv = transmute(ptr); PointParameteriv::is_loaded = true; }, _ => unsafe { PointParameteriv::is_loaded = false; } }
    match loadfn("PointParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::PointParameterivNV = transmute(ptr); PointParameterivNV::is_loaded = true; }, _ => unsafe { PointParameterivNV::is_loaded = false; } }
    match loadfn("PointParameterx") { ptr if !ptr.is_null() => unsafe { storage::PointParameterx = transmute(ptr); PointParameterx::is_loaded = true; }, _ => unsafe { PointParameterx::is_loaded = false; } }
    match loadfn("PointParameterxOES") { ptr if !ptr.is_null() => unsafe { storage::PointParameterxOES = transmute(ptr); PointParameterxOES::is_loaded = true; }, _ => unsafe { PointParameterxOES::is_loaded = false; } }
    match loadfn("PointParameterxv") { ptr if !ptr.is_null() => unsafe { storage::PointParameterxv = transmute(ptr); PointParameterxv::is_loaded = true; }, _ => unsafe { PointParameterxv::is_loaded = false; } }
    match loadfn("PointParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::PointParameterxvOES = transmute(ptr); PointParameterxvOES::is_loaded = true; }, _ => unsafe { PointParameterxvOES::is_loaded = false; } }
    match loadfn("PointSize") { ptr if !ptr.is_null() => unsafe { storage::PointSize = transmute(ptr); PointSize::is_loaded = true; }, _ => unsafe { PointSize::is_loaded = false; } }
    match loadfn("PointSizePointerOES") { ptr if !ptr.is_null() => unsafe { storage::PointSizePointerOES = transmute(ptr); PointSizePointerOES::is_loaded = true; }, _ => unsafe { PointSizePointerOES::is_loaded = false; } }
    match loadfn("PointSizex") { ptr if !ptr.is_null() => unsafe { storage::PointSizex = transmute(ptr); PointSizex::is_loaded = true; }, _ => unsafe { PointSizex::is_loaded = false; } }
    match loadfn("PointSizexOES") { ptr if !ptr.is_null() => unsafe { storage::PointSizexOES = transmute(ptr); PointSizexOES::is_loaded = true; }, _ => unsafe { PointSizexOES::is_loaded = false; } }
    match loadfn("PollAsyncSGIX") { ptr if !ptr.is_null() => unsafe { storage::PollAsyncSGIX = transmute(ptr); PollAsyncSGIX::is_loaded = true; }, _ => unsafe { PollAsyncSGIX::is_loaded = false; } }
    match loadfn("PollInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::PollInstrumentsSGIX = transmute(ptr); PollInstrumentsSGIX::is_loaded = true; }, _ => unsafe { PollInstrumentsSGIX::is_loaded = false; } }
    match loadfn("PolygonMode") { ptr if !ptr.is_null() => unsafe { storage::PolygonMode = transmute(ptr); PolygonMode::is_loaded = true; }, _ => unsafe { PolygonMode::is_loaded = false; } }
    match loadfn("PolygonOffset") { ptr if !ptr.is_null() => unsafe { storage::PolygonOffset = transmute(ptr); PolygonOffset::is_loaded = true; }, _ => unsafe { PolygonOffset::is_loaded = false; } }
    match loadfn("PolygonOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::PolygonOffsetEXT = transmute(ptr); PolygonOffsetEXT::is_loaded = true; }, _ => unsafe { PolygonOffsetEXT::is_loaded = false; } }
    match loadfn("PolygonOffsetx") { ptr if !ptr.is_null() => unsafe { storage::PolygonOffsetx = transmute(ptr); PolygonOffsetx::is_loaded = true; }, _ => unsafe { PolygonOffsetx::is_loaded = false; } }
    match loadfn("PolygonOffsetxOES") { ptr if !ptr.is_null() => unsafe { storage::PolygonOffsetxOES = transmute(ptr); PolygonOffsetxOES::is_loaded = true; }, _ => unsafe { PolygonOffsetxOES::is_loaded = false; } }
    match loadfn("PolygonStipple") { ptr if !ptr.is_null() => unsafe { storage::PolygonStipple = transmute(ptr); PolygonStipple::is_loaded = true; }, _ => unsafe { PolygonStipple::is_loaded = false; } }
    match loadfn("PopAttrib") { ptr if !ptr.is_null() => unsafe { storage::PopAttrib = transmute(ptr); PopAttrib::is_loaded = true; }, _ => unsafe { PopAttrib::is_loaded = false; } }
    match loadfn("PopClientAttrib") { ptr if !ptr.is_null() => unsafe { storage::PopClientAttrib = transmute(ptr); PopClientAttrib::is_loaded = true; }, _ => unsafe { PopClientAttrib::is_loaded = false; } }
    match loadfn("PopDebugGroup") { ptr if !ptr.is_null() => unsafe { storage::PopDebugGroup = transmute(ptr); PopDebugGroup::is_loaded = true; }, _ => unsafe { PopDebugGroup::is_loaded = false; } }
    match loadfn("PopDebugGroupKHR") { ptr if !ptr.is_null() => unsafe { storage::PopDebugGroupKHR = transmute(ptr); PopDebugGroupKHR::is_loaded = true; }, _ => unsafe { PopDebugGroupKHR::is_loaded = false; } }
    match loadfn("PopGroupMarkerEXT") { ptr if !ptr.is_null() => unsafe { storage::PopGroupMarkerEXT = transmute(ptr); PopGroupMarkerEXT::is_loaded = true; }, _ => unsafe { PopGroupMarkerEXT::is_loaded = false; } }
    match loadfn("PopMatrix") { ptr if !ptr.is_null() => unsafe { storage::PopMatrix = transmute(ptr); PopMatrix::is_loaded = true; }, _ => unsafe { PopMatrix::is_loaded = false; } }
    match loadfn("PopName") { ptr if !ptr.is_null() => unsafe { storage::PopName = transmute(ptr); PopName::is_loaded = true; }, _ => unsafe { PopName::is_loaded = false; } }
    match loadfn("PresentFrameDualFillNV") { ptr if !ptr.is_null() => unsafe { storage::PresentFrameDualFillNV = transmute(ptr); PresentFrameDualFillNV::is_loaded = true; }, _ => unsafe { PresentFrameDualFillNV::is_loaded = false; } }
    match loadfn("PresentFrameKeyedNV") { ptr if !ptr.is_null() => unsafe { storage::PresentFrameKeyedNV = transmute(ptr); PresentFrameKeyedNV::is_loaded = true; }, _ => unsafe { PresentFrameKeyedNV::is_loaded = false; } }
    match loadfn("PrimitiveRestartIndex") { ptr if !ptr.is_null() => unsafe { storage::PrimitiveRestartIndex = transmute(ptr); PrimitiveRestartIndex::is_loaded = true; }, _ => unsafe { PrimitiveRestartIndex::is_loaded = false; } }
    match loadfn("PrimitiveRestartIndexNV") { ptr if !ptr.is_null() => unsafe { storage::PrimitiveRestartIndexNV = transmute(ptr); PrimitiveRestartIndexNV::is_loaded = true; }, _ => unsafe { PrimitiveRestartIndexNV::is_loaded = false; } }
    match loadfn("PrimitiveRestartNV") { ptr if !ptr.is_null() => unsafe { storage::PrimitiveRestartNV = transmute(ptr); PrimitiveRestartNV::is_loaded = true; }, _ => unsafe { PrimitiveRestartNV::is_loaded = false; } }
    match loadfn("PrioritizeTextures") { ptr if !ptr.is_null() => unsafe { storage::PrioritizeTextures = transmute(ptr); PrioritizeTextures::is_loaded = true; }, _ => unsafe { PrioritizeTextures::is_loaded = false; } }
    match loadfn("PrioritizeTexturesEXT") { ptr if !ptr.is_null() => unsafe { storage::PrioritizeTexturesEXT = transmute(ptr); PrioritizeTexturesEXT::is_loaded = true; }, _ => unsafe { PrioritizeTexturesEXT::is_loaded = false; } }
    match loadfn("PrioritizeTexturesxOES") { ptr if !ptr.is_null() => unsafe { storage::PrioritizeTexturesxOES = transmute(ptr); PrioritizeTexturesxOES::is_loaded = true; }, _ => unsafe { PrioritizeTexturesxOES::is_loaded = false; } }
    match loadfn("ProgramBinary") { ptr if !ptr.is_null() => unsafe { storage::ProgramBinary = transmute(ptr); ProgramBinary::is_loaded = true; }, _ => unsafe { ProgramBinary::is_loaded = false; } }
    match loadfn("ProgramBinaryOES") { ptr if !ptr.is_null() => unsafe { storage::ProgramBinaryOES = transmute(ptr); ProgramBinaryOES::is_loaded = true; }, _ => unsafe { ProgramBinaryOES::is_loaded = false; } }
    match loadfn("ProgramBufferParametersIivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramBufferParametersIivNV = transmute(ptr); ProgramBufferParametersIivNV::is_loaded = true; }, _ => unsafe { ProgramBufferParametersIivNV::is_loaded = false; } }
    match loadfn("ProgramBufferParametersIuivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramBufferParametersIuivNV = transmute(ptr); ProgramBufferParametersIuivNV::is_loaded = true; }, _ => unsafe { ProgramBufferParametersIuivNV::is_loaded = false; } }
    match loadfn("ProgramBufferParametersfvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramBufferParametersfvNV = transmute(ptr); ProgramBufferParametersfvNV::is_loaded = true; }, _ => unsafe { ProgramBufferParametersfvNV::is_loaded = false; } }
    match loadfn("ProgramEnvParameter4dARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameter4dARB = transmute(ptr); ProgramEnvParameter4dARB::is_loaded = true; }, _ => unsafe { ProgramEnvParameter4dARB::is_loaded = false; } }
    match loadfn("ProgramEnvParameter4dvARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameter4dvARB = transmute(ptr); ProgramEnvParameter4dvARB::is_loaded = true; }, _ => unsafe { ProgramEnvParameter4dvARB::is_loaded = false; } }
    match loadfn("ProgramEnvParameter4fARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameter4fARB = transmute(ptr); ProgramEnvParameter4fARB::is_loaded = true; }, _ => unsafe { ProgramEnvParameter4fARB::is_loaded = false; } }
    match loadfn("ProgramEnvParameter4fvARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameter4fvARB = transmute(ptr); ProgramEnvParameter4fvARB::is_loaded = true; }, _ => unsafe { ProgramEnvParameter4fvARB::is_loaded = false; } }
    match loadfn("ProgramEnvParameterI4iNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameterI4iNV = transmute(ptr); ProgramEnvParameterI4iNV::is_loaded = true; }, _ => unsafe { ProgramEnvParameterI4iNV::is_loaded = false; } }
    match loadfn("ProgramEnvParameterI4ivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameterI4ivNV = transmute(ptr); ProgramEnvParameterI4ivNV::is_loaded = true; }, _ => unsafe { ProgramEnvParameterI4ivNV::is_loaded = false; } }
    match loadfn("ProgramEnvParameterI4uiNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameterI4uiNV = transmute(ptr); ProgramEnvParameterI4uiNV::is_loaded = true; }, _ => unsafe { ProgramEnvParameterI4uiNV::is_loaded = false; } }
    match loadfn("ProgramEnvParameterI4uivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameterI4uivNV = transmute(ptr); ProgramEnvParameterI4uivNV::is_loaded = true; }, _ => unsafe { ProgramEnvParameterI4uivNV::is_loaded = false; } }
    match loadfn("ProgramEnvParameters4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParameters4fvEXT = transmute(ptr); ProgramEnvParameters4fvEXT::is_loaded = true; }, _ => unsafe { ProgramEnvParameters4fvEXT::is_loaded = false; } }
    match loadfn("ProgramEnvParametersI4ivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParametersI4ivNV = transmute(ptr); ProgramEnvParametersI4ivNV::is_loaded = true; }, _ => unsafe { ProgramEnvParametersI4ivNV::is_loaded = false; } }
    match loadfn("ProgramEnvParametersI4uivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramEnvParametersI4uivNV = transmute(ptr); ProgramEnvParametersI4uivNV::is_loaded = true; }, _ => unsafe { ProgramEnvParametersI4uivNV::is_loaded = false; } }
    match loadfn("ProgramLocalParameter4dARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameter4dARB = transmute(ptr); ProgramLocalParameter4dARB::is_loaded = true; }, _ => unsafe { ProgramLocalParameter4dARB::is_loaded = false; } }
    match loadfn("ProgramLocalParameter4dvARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameter4dvARB = transmute(ptr); ProgramLocalParameter4dvARB::is_loaded = true; }, _ => unsafe { ProgramLocalParameter4dvARB::is_loaded = false; } }
    match loadfn("ProgramLocalParameter4fARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameter4fARB = transmute(ptr); ProgramLocalParameter4fARB::is_loaded = true; }, _ => unsafe { ProgramLocalParameter4fARB::is_loaded = false; } }
    match loadfn("ProgramLocalParameter4fvARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameter4fvARB = transmute(ptr); ProgramLocalParameter4fvARB::is_loaded = true; }, _ => unsafe { ProgramLocalParameter4fvARB::is_loaded = false; } }
    match loadfn("ProgramLocalParameterI4iNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameterI4iNV = transmute(ptr); ProgramLocalParameterI4iNV::is_loaded = true; }, _ => unsafe { ProgramLocalParameterI4iNV::is_loaded = false; } }
    match loadfn("ProgramLocalParameterI4ivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameterI4ivNV = transmute(ptr); ProgramLocalParameterI4ivNV::is_loaded = true; }, _ => unsafe { ProgramLocalParameterI4ivNV::is_loaded = false; } }
    match loadfn("ProgramLocalParameterI4uiNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameterI4uiNV = transmute(ptr); ProgramLocalParameterI4uiNV::is_loaded = true; }, _ => unsafe { ProgramLocalParameterI4uiNV::is_loaded = false; } }
    match loadfn("ProgramLocalParameterI4uivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameterI4uivNV = transmute(ptr); ProgramLocalParameterI4uivNV::is_loaded = true; }, _ => unsafe { ProgramLocalParameterI4uivNV::is_loaded = false; } }
    match loadfn("ProgramLocalParameters4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParameters4fvEXT = transmute(ptr); ProgramLocalParameters4fvEXT::is_loaded = true; }, _ => unsafe { ProgramLocalParameters4fvEXT::is_loaded = false; } }
    match loadfn("ProgramLocalParametersI4ivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParametersI4ivNV = transmute(ptr); ProgramLocalParametersI4ivNV::is_loaded = true; }, _ => unsafe { ProgramLocalParametersI4ivNV::is_loaded = false; } }
    match loadfn("ProgramLocalParametersI4uivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramLocalParametersI4uivNV = transmute(ptr); ProgramLocalParametersI4uivNV::is_loaded = true; }, _ => unsafe { ProgramLocalParametersI4uivNV::is_loaded = false; } }
    match loadfn("ProgramNamedParameter4dNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramNamedParameter4dNV = transmute(ptr); ProgramNamedParameter4dNV::is_loaded = true; }, _ => unsafe { ProgramNamedParameter4dNV::is_loaded = false; } }
    match loadfn("ProgramNamedParameter4dvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramNamedParameter4dvNV = transmute(ptr); ProgramNamedParameter4dvNV::is_loaded = true; }, _ => unsafe { ProgramNamedParameter4dvNV::is_loaded = false; } }
    match loadfn("ProgramNamedParameter4fNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramNamedParameter4fNV = transmute(ptr); ProgramNamedParameter4fNV::is_loaded = true; }, _ => unsafe { ProgramNamedParameter4fNV::is_loaded = false; } }
    match loadfn("ProgramNamedParameter4fvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramNamedParameter4fvNV = transmute(ptr); ProgramNamedParameter4fvNV::is_loaded = true; }, _ => unsafe { ProgramNamedParameter4fvNV::is_loaded = false; } }
    match loadfn("ProgramParameter4dNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameter4dNV = transmute(ptr); ProgramParameter4dNV::is_loaded = true; }, _ => unsafe { ProgramParameter4dNV::is_loaded = false; } }
    match loadfn("ProgramParameter4dvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameter4dvNV = transmute(ptr); ProgramParameter4dvNV::is_loaded = true; }, _ => unsafe { ProgramParameter4dvNV::is_loaded = false; } }
    match loadfn("ProgramParameter4fNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameter4fNV = transmute(ptr); ProgramParameter4fNV::is_loaded = true; }, _ => unsafe { ProgramParameter4fNV::is_loaded = false; } }
    match loadfn("ProgramParameter4fvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameter4fvNV = transmute(ptr); ProgramParameter4fvNV::is_loaded = true; }, _ => unsafe { ProgramParameter4fvNV::is_loaded = false; } }
    match loadfn("ProgramParameteri") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameteri = transmute(ptr); ProgramParameteri::is_loaded = true; }, _ => unsafe { ProgramParameteri::is_loaded = false; } }
    match loadfn("ProgramParameteriARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameteriARB = transmute(ptr); ProgramParameteriARB::is_loaded = true; }, _ => unsafe { ProgramParameteriARB::is_loaded = false; } }
    match loadfn("ProgramParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameteriEXT = transmute(ptr); ProgramParameteriEXT::is_loaded = true; }, _ => unsafe { ProgramParameteriEXT::is_loaded = false; } }
    match loadfn("ProgramParameters4dvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameters4dvNV = transmute(ptr); ProgramParameters4dvNV::is_loaded = true; }, _ => unsafe { ProgramParameters4dvNV::is_loaded = false; } }
    match loadfn("ProgramParameters4fvNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramParameters4fvNV = transmute(ptr); ProgramParameters4fvNV::is_loaded = true; }, _ => unsafe { ProgramParameters4fvNV::is_loaded = false; } }
    match loadfn("ProgramStringARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramStringARB = transmute(ptr); ProgramStringARB::is_loaded = true; }, _ => unsafe { ProgramStringARB::is_loaded = false; } }
    match loadfn("ProgramSubroutineParametersuivNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramSubroutineParametersuivNV = transmute(ptr); ProgramSubroutineParametersuivNV::is_loaded = true; }, _ => unsafe { ProgramSubroutineParametersuivNV::is_loaded = false; } }
    match loadfn("ProgramUniform1d") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1d = transmute(ptr); ProgramUniform1d::is_loaded = true; }, _ => unsafe { ProgramUniform1d::is_loaded = false; } }
    match loadfn("ProgramUniform1dEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1dEXT = transmute(ptr); ProgramUniform1dEXT::is_loaded = true; }, _ => unsafe { ProgramUniform1dEXT::is_loaded = false; } }
    match loadfn("ProgramUniform1dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1dv = transmute(ptr); ProgramUniform1dv::is_loaded = true; }, _ => unsafe { ProgramUniform1dv::is_loaded = false; } }
    match loadfn("ProgramUniform1dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1dvEXT = transmute(ptr); ProgramUniform1dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniform1dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniform1f") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1f = transmute(ptr); ProgramUniform1f::is_loaded = true; }, _ => unsafe { ProgramUniform1f::is_loaded = false; } }
    match loadfn("ProgramUniform1fEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1fEXT = transmute(ptr); ProgramUniform1fEXT::is_loaded = true; }, _ => unsafe { ProgramUniform1fEXT::is_loaded = false; } }
    match loadfn("ProgramUniform1fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1fv = transmute(ptr); ProgramUniform1fv::is_loaded = true; }, _ => unsafe { ProgramUniform1fv::is_loaded = false; } }
    match loadfn("ProgramUniform1fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1fvEXT = transmute(ptr); ProgramUniform1fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniform1fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniform1i") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1i = transmute(ptr); ProgramUniform1i::is_loaded = true; }, _ => unsafe { ProgramUniform1i::is_loaded = false; } }
    match loadfn("ProgramUniform1i64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1i64NV = transmute(ptr); ProgramUniform1i64NV::is_loaded = true; }, _ => unsafe { ProgramUniform1i64NV::is_loaded = false; } }
    match loadfn("ProgramUniform1i64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1i64vNV = transmute(ptr); ProgramUniform1i64vNV::is_loaded = true; }, _ => unsafe { ProgramUniform1i64vNV::is_loaded = false; } }
    match loadfn("ProgramUniform1iEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1iEXT = transmute(ptr); ProgramUniform1iEXT::is_loaded = true; }, _ => unsafe { ProgramUniform1iEXT::is_loaded = false; } }
    match loadfn("ProgramUniform1iv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1iv = transmute(ptr); ProgramUniform1iv::is_loaded = true; }, _ => unsafe { ProgramUniform1iv::is_loaded = false; } }
    match loadfn("ProgramUniform1ivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1ivEXT = transmute(ptr); ProgramUniform1ivEXT::is_loaded = true; }, _ => unsafe { ProgramUniform1ivEXT::is_loaded = false; } }
    match loadfn("ProgramUniform1ui") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1ui = transmute(ptr); ProgramUniform1ui::is_loaded = true; }, _ => unsafe { ProgramUniform1ui::is_loaded = false; } }
    match loadfn("ProgramUniform1ui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1ui64NV = transmute(ptr); ProgramUniform1ui64NV::is_loaded = true; }, _ => unsafe { ProgramUniform1ui64NV::is_loaded = false; } }
    match loadfn("ProgramUniform1ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1ui64vNV = transmute(ptr); ProgramUniform1ui64vNV::is_loaded = true; }, _ => unsafe { ProgramUniform1ui64vNV::is_loaded = false; } }
    match loadfn("ProgramUniform1uiEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1uiEXT = transmute(ptr); ProgramUniform1uiEXT::is_loaded = true; }, _ => unsafe { ProgramUniform1uiEXT::is_loaded = false; } }
    match loadfn("ProgramUniform1uiv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1uiv = transmute(ptr); ProgramUniform1uiv::is_loaded = true; }, _ => unsafe { ProgramUniform1uiv::is_loaded = false; } }
    match loadfn("ProgramUniform1uivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform1uivEXT = transmute(ptr); ProgramUniform1uivEXT::is_loaded = true; }, _ => unsafe { ProgramUniform1uivEXT::is_loaded = false; } }
    match loadfn("ProgramUniform2d") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2d = transmute(ptr); ProgramUniform2d::is_loaded = true; }, _ => unsafe { ProgramUniform2d::is_loaded = false; } }
    match loadfn("ProgramUniform2dEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2dEXT = transmute(ptr); ProgramUniform2dEXT::is_loaded = true; }, _ => unsafe { ProgramUniform2dEXT::is_loaded = false; } }
    match loadfn("ProgramUniform2dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2dv = transmute(ptr); ProgramUniform2dv::is_loaded = true; }, _ => unsafe { ProgramUniform2dv::is_loaded = false; } }
    match loadfn("ProgramUniform2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2dvEXT = transmute(ptr); ProgramUniform2dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniform2dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniform2f") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2f = transmute(ptr); ProgramUniform2f::is_loaded = true; }, _ => unsafe { ProgramUniform2f::is_loaded = false; } }
    match loadfn("ProgramUniform2fEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2fEXT = transmute(ptr); ProgramUniform2fEXT::is_loaded = true; }, _ => unsafe { ProgramUniform2fEXT::is_loaded = false; } }
    match loadfn("ProgramUniform2fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2fv = transmute(ptr); ProgramUniform2fv::is_loaded = true; }, _ => unsafe { ProgramUniform2fv::is_loaded = false; } }
    match loadfn("ProgramUniform2fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2fvEXT = transmute(ptr); ProgramUniform2fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniform2fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniform2i") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2i = transmute(ptr); ProgramUniform2i::is_loaded = true; }, _ => unsafe { ProgramUniform2i::is_loaded = false; } }
    match loadfn("ProgramUniform2i64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2i64NV = transmute(ptr); ProgramUniform2i64NV::is_loaded = true; }, _ => unsafe { ProgramUniform2i64NV::is_loaded = false; } }
    match loadfn("ProgramUniform2i64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2i64vNV = transmute(ptr); ProgramUniform2i64vNV::is_loaded = true; }, _ => unsafe { ProgramUniform2i64vNV::is_loaded = false; } }
    match loadfn("ProgramUniform2iEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2iEXT = transmute(ptr); ProgramUniform2iEXT::is_loaded = true; }, _ => unsafe { ProgramUniform2iEXT::is_loaded = false; } }
    match loadfn("ProgramUniform2iv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2iv = transmute(ptr); ProgramUniform2iv::is_loaded = true; }, _ => unsafe { ProgramUniform2iv::is_loaded = false; } }
    match loadfn("ProgramUniform2ivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2ivEXT = transmute(ptr); ProgramUniform2ivEXT::is_loaded = true; }, _ => unsafe { ProgramUniform2ivEXT::is_loaded = false; } }
    match loadfn("ProgramUniform2ui") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2ui = transmute(ptr); ProgramUniform2ui::is_loaded = true; }, _ => unsafe { ProgramUniform2ui::is_loaded = false; } }
    match loadfn("ProgramUniform2ui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2ui64NV = transmute(ptr); ProgramUniform2ui64NV::is_loaded = true; }, _ => unsafe { ProgramUniform2ui64NV::is_loaded = false; } }
    match loadfn("ProgramUniform2ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2ui64vNV = transmute(ptr); ProgramUniform2ui64vNV::is_loaded = true; }, _ => unsafe { ProgramUniform2ui64vNV::is_loaded = false; } }
    match loadfn("ProgramUniform2uiEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2uiEXT = transmute(ptr); ProgramUniform2uiEXT::is_loaded = true; }, _ => unsafe { ProgramUniform2uiEXT::is_loaded = false; } }
    match loadfn("ProgramUniform2uiv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2uiv = transmute(ptr); ProgramUniform2uiv::is_loaded = true; }, _ => unsafe { ProgramUniform2uiv::is_loaded = false; } }
    match loadfn("ProgramUniform2uivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform2uivEXT = transmute(ptr); ProgramUniform2uivEXT::is_loaded = true; }, _ => unsafe { ProgramUniform2uivEXT::is_loaded = false; } }
    match loadfn("ProgramUniform3d") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3d = transmute(ptr); ProgramUniform3d::is_loaded = true; }, _ => unsafe { ProgramUniform3d::is_loaded = false; } }
    match loadfn("ProgramUniform3dEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3dEXT = transmute(ptr); ProgramUniform3dEXT::is_loaded = true; }, _ => unsafe { ProgramUniform3dEXT::is_loaded = false; } }
    match loadfn("ProgramUniform3dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3dv = transmute(ptr); ProgramUniform3dv::is_loaded = true; }, _ => unsafe { ProgramUniform3dv::is_loaded = false; } }
    match loadfn("ProgramUniform3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3dvEXT = transmute(ptr); ProgramUniform3dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniform3dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniform3f") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3f = transmute(ptr); ProgramUniform3f::is_loaded = true; }, _ => unsafe { ProgramUniform3f::is_loaded = false; } }
    match loadfn("ProgramUniform3fEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3fEXT = transmute(ptr); ProgramUniform3fEXT::is_loaded = true; }, _ => unsafe { ProgramUniform3fEXT::is_loaded = false; } }
    match loadfn("ProgramUniform3fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3fv = transmute(ptr); ProgramUniform3fv::is_loaded = true; }, _ => unsafe { ProgramUniform3fv::is_loaded = false; } }
    match loadfn("ProgramUniform3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3fvEXT = transmute(ptr); ProgramUniform3fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniform3fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniform3i") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3i = transmute(ptr); ProgramUniform3i::is_loaded = true; }, _ => unsafe { ProgramUniform3i::is_loaded = false; } }
    match loadfn("ProgramUniform3i64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3i64NV = transmute(ptr); ProgramUniform3i64NV::is_loaded = true; }, _ => unsafe { ProgramUniform3i64NV::is_loaded = false; } }
    match loadfn("ProgramUniform3i64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3i64vNV = transmute(ptr); ProgramUniform3i64vNV::is_loaded = true; }, _ => unsafe { ProgramUniform3i64vNV::is_loaded = false; } }
    match loadfn("ProgramUniform3iEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3iEXT = transmute(ptr); ProgramUniform3iEXT::is_loaded = true; }, _ => unsafe { ProgramUniform3iEXT::is_loaded = false; } }
    match loadfn("ProgramUniform3iv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3iv = transmute(ptr); ProgramUniform3iv::is_loaded = true; }, _ => unsafe { ProgramUniform3iv::is_loaded = false; } }
    match loadfn("ProgramUniform3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3ivEXT = transmute(ptr); ProgramUniform3ivEXT::is_loaded = true; }, _ => unsafe { ProgramUniform3ivEXT::is_loaded = false; } }
    match loadfn("ProgramUniform3ui") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3ui = transmute(ptr); ProgramUniform3ui::is_loaded = true; }, _ => unsafe { ProgramUniform3ui::is_loaded = false; } }
    match loadfn("ProgramUniform3ui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3ui64NV = transmute(ptr); ProgramUniform3ui64NV::is_loaded = true; }, _ => unsafe { ProgramUniform3ui64NV::is_loaded = false; } }
    match loadfn("ProgramUniform3ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3ui64vNV = transmute(ptr); ProgramUniform3ui64vNV::is_loaded = true; }, _ => unsafe { ProgramUniform3ui64vNV::is_loaded = false; } }
    match loadfn("ProgramUniform3uiEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3uiEXT = transmute(ptr); ProgramUniform3uiEXT::is_loaded = true; }, _ => unsafe { ProgramUniform3uiEXT::is_loaded = false; } }
    match loadfn("ProgramUniform3uiv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3uiv = transmute(ptr); ProgramUniform3uiv::is_loaded = true; }, _ => unsafe { ProgramUniform3uiv::is_loaded = false; } }
    match loadfn("ProgramUniform3uivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform3uivEXT = transmute(ptr); ProgramUniform3uivEXT::is_loaded = true; }, _ => unsafe { ProgramUniform3uivEXT::is_loaded = false; } }
    match loadfn("ProgramUniform4d") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4d = transmute(ptr); ProgramUniform4d::is_loaded = true; }, _ => unsafe { ProgramUniform4d::is_loaded = false; } }
    match loadfn("ProgramUniform4dEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4dEXT = transmute(ptr); ProgramUniform4dEXT::is_loaded = true; }, _ => unsafe { ProgramUniform4dEXT::is_loaded = false; } }
    match loadfn("ProgramUniform4dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4dv = transmute(ptr); ProgramUniform4dv::is_loaded = true; }, _ => unsafe { ProgramUniform4dv::is_loaded = false; } }
    match loadfn("ProgramUniform4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4dvEXT = transmute(ptr); ProgramUniform4dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniform4dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniform4f") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4f = transmute(ptr); ProgramUniform4f::is_loaded = true; }, _ => unsafe { ProgramUniform4f::is_loaded = false; } }
    match loadfn("ProgramUniform4fEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4fEXT = transmute(ptr); ProgramUniform4fEXT::is_loaded = true; }, _ => unsafe { ProgramUniform4fEXT::is_loaded = false; } }
    match loadfn("ProgramUniform4fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4fv = transmute(ptr); ProgramUniform4fv::is_loaded = true; }, _ => unsafe { ProgramUniform4fv::is_loaded = false; } }
    match loadfn("ProgramUniform4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4fvEXT = transmute(ptr); ProgramUniform4fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniform4fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniform4i") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4i = transmute(ptr); ProgramUniform4i::is_loaded = true; }, _ => unsafe { ProgramUniform4i::is_loaded = false; } }
    match loadfn("ProgramUniform4i64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4i64NV = transmute(ptr); ProgramUniform4i64NV::is_loaded = true; }, _ => unsafe { ProgramUniform4i64NV::is_loaded = false; } }
    match loadfn("ProgramUniform4i64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4i64vNV = transmute(ptr); ProgramUniform4i64vNV::is_loaded = true; }, _ => unsafe { ProgramUniform4i64vNV::is_loaded = false; } }
    match loadfn("ProgramUniform4iEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4iEXT = transmute(ptr); ProgramUniform4iEXT::is_loaded = true; }, _ => unsafe { ProgramUniform4iEXT::is_loaded = false; } }
    match loadfn("ProgramUniform4iv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4iv = transmute(ptr); ProgramUniform4iv::is_loaded = true; }, _ => unsafe { ProgramUniform4iv::is_loaded = false; } }
    match loadfn("ProgramUniform4ivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4ivEXT = transmute(ptr); ProgramUniform4ivEXT::is_loaded = true; }, _ => unsafe { ProgramUniform4ivEXT::is_loaded = false; } }
    match loadfn("ProgramUniform4ui") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4ui = transmute(ptr); ProgramUniform4ui::is_loaded = true; }, _ => unsafe { ProgramUniform4ui::is_loaded = false; } }
    match loadfn("ProgramUniform4ui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4ui64NV = transmute(ptr); ProgramUniform4ui64NV::is_loaded = true; }, _ => unsafe { ProgramUniform4ui64NV::is_loaded = false; } }
    match loadfn("ProgramUniform4ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4ui64vNV = transmute(ptr); ProgramUniform4ui64vNV::is_loaded = true; }, _ => unsafe { ProgramUniform4ui64vNV::is_loaded = false; } }
    match loadfn("ProgramUniform4uiEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4uiEXT = transmute(ptr); ProgramUniform4uiEXT::is_loaded = true; }, _ => unsafe { ProgramUniform4uiEXT::is_loaded = false; } }
    match loadfn("ProgramUniform4uiv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4uiv = transmute(ptr); ProgramUniform4uiv::is_loaded = true; }, _ => unsafe { ProgramUniform4uiv::is_loaded = false; } }
    match loadfn("ProgramUniform4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniform4uivEXT = transmute(ptr); ProgramUniform4uivEXT::is_loaded = true; }, _ => unsafe { ProgramUniform4uivEXT::is_loaded = false; } }
    match loadfn("ProgramUniformHandleui64ARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformHandleui64ARB = transmute(ptr); ProgramUniformHandleui64ARB::is_loaded = true; }, _ => unsafe { ProgramUniformHandleui64ARB::is_loaded = false; } }
    match loadfn("ProgramUniformHandleui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformHandleui64NV = transmute(ptr); ProgramUniformHandleui64NV::is_loaded = true; }, _ => unsafe { ProgramUniformHandleui64NV::is_loaded = false; } }
    match loadfn("ProgramUniformHandleui64vARB") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformHandleui64vARB = transmute(ptr); ProgramUniformHandleui64vARB::is_loaded = true; }, _ => unsafe { ProgramUniformHandleui64vARB::is_loaded = false; } }
    match loadfn("ProgramUniformHandleui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformHandleui64vNV = transmute(ptr); ProgramUniformHandleui64vNV::is_loaded = true; }, _ => unsafe { ProgramUniformHandleui64vNV::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2dv = transmute(ptr); ProgramUniformMatrix2dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2dvEXT = transmute(ptr); ProgramUniformMatrix2dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2fv = transmute(ptr); ProgramUniformMatrix2fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2fvEXT = transmute(ptr); ProgramUniformMatrix2fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x3dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x3dv = transmute(ptr); ProgramUniformMatrix2x3dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2x3dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x3dvEXT = transmute(ptr); ProgramUniformMatrix2x3dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2x3dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x3fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x3fv = transmute(ptr); ProgramUniformMatrix2x3fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2x3fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x3fvEXT = transmute(ptr); ProgramUniformMatrix2x3fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2x3fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x4dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x4dv = transmute(ptr); ProgramUniformMatrix2x4dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2x4dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x4dvEXT = transmute(ptr); ProgramUniformMatrix2x4dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2x4dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x4fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x4fv = transmute(ptr); ProgramUniformMatrix2x4fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2x4fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix2x4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix2x4fvEXT = transmute(ptr); ProgramUniformMatrix2x4fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix2x4fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3dv = transmute(ptr); ProgramUniformMatrix3dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3dvEXT = transmute(ptr); ProgramUniformMatrix3dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3fv = transmute(ptr); ProgramUniformMatrix3fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3fvEXT = transmute(ptr); ProgramUniformMatrix3fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x2dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x2dv = transmute(ptr); ProgramUniformMatrix3x2dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3x2dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x2dvEXT = transmute(ptr); ProgramUniformMatrix3x2dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3x2dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x2fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x2fv = transmute(ptr); ProgramUniformMatrix3x2fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3x2fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x2fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x2fvEXT = transmute(ptr); ProgramUniformMatrix3x2fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3x2fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x4dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x4dv = transmute(ptr); ProgramUniformMatrix3x4dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3x4dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x4dvEXT = transmute(ptr); ProgramUniformMatrix3x4dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3x4dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x4fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x4fv = transmute(ptr); ProgramUniformMatrix3x4fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3x4fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix3x4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix3x4fvEXT = transmute(ptr); ProgramUniformMatrix3x4fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix3x4fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4dv = transmute(ptr); ProgramUniformMatrix4dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4dvEXT = transmute(ptr); ProgramUniformMatrix4dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4fv = transmute(ptr); ProgramUniformMatrix4fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4fvEXT = transmute(ptr); ProgramUniformMatrix4fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x2dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x2dv = transmute(ptr); ProgramUniformMatrix4x2dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4x2dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x2dvEXT = transmute(ptr); ProgramUniformMatrix4x2dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4x2dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x2fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x2fv = transmute(ptr); ProgramUniformMatrix4x2fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4x2fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x2fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x2fvEXT = transmute(ptr); ProgramUniformMatrix4x2fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4x2fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x3dv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x3dv = transmute(ptr); ProgramUniformMatrix4x3dv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4x3dv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x3dvEXT = transmute(ptr); ProgramUniformMatrix4x3dvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4x3dvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x3fv") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x3fv = transmute(ptr); ProgramUniformMatrix4x3fv::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4x3fv::is_loaded = false; } }
    match loadfn("ProgramUniformMatrix4x3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformMatrix4x3fvEXT = transmute(ptr); ProgramUniformMatrix4x3fvEXT::is_loaded = true; }, _ => unsafe { ProgramUniformMatrix4x3fvEXT::is_loaded = false; } }
    match loadfn("ProgramUniformui64NV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformui64NV = transmute(ptr); ProgramUniformui64NV::is_loaded = true; }, _ => unsafe { ProgramUniformui64NV::is_loaded = false; } }
    match loadfn("ProgramUniformui64vNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramUniformui64vNV = transmute(ptr); ProgramUniformui64vNV::is_loaded = true; }, _ => unsafe { ProgramUniformui64vNV::is_loaded = false; } }
    match loadfn("ProgramVertexLimitNV") { ptr if !ptr.is_null() => unsafe { storage::ProgramVertexLimitNV = transmute(ptr); ProgramVertexLimitNV::is_loaded = true; }, _ => unsafe { ProgramVertexLimitNV::is_loaded = false; } }
    match loadfn("ProvokingVertex") { ptr if !ptr.is_null() => unsafe { storage::ProvokingVertex = transmute(ptr); ProvokingVertex::is_loaded = true; }, _ => unsafe { ProvokingVertex::is_loaded = false; } }
    match loadfn("ProvokingVertexEXT") { ptr if !ptr.is_null() => unsafe { storage::ProvokingVertexEXT = transmute(ptr); ProvokingVertexEXT::is_loaded = true; }, _ => unsafe { ProvokingVertexEXT::is_loaded = false; } }
    match loadfn("PushAttrib") { ptr if !ptr.is_null() => unsafe { storage::PushAttrib = transmute(ptr); PushAttrib::is_loaded = true; }, _ => unsafe { PushAttrib::is_loaded = false; } }
    match loadfn("PushClientAttrib") { ptr if !ptr.is_null() => unsafe { storage::PushClientAttrib = transmute(ptr); PushClientAttrib::is_loaded = true; }, _ => unsafe { PushClientAttrib::is_loaded = false; } }
    match loadfn("PushClientAttribDefaultEXT") { ptr if !ptr.is_null() => unsafe { storage::PushClientAttribDefaultEXT = transmute(ptr); PushClientAttribDefaultEXT::is_loaded = true; }, _ => unsafe { PushClientAttribDefaultEXT::is_loaded = false; } }
    match loadfn("PushDebugGroup") { ptr if !ptr.is_null() => unsafe { storage::PushDebugGroup = transmute(ptr); PushDebugGroup::is_loaded = true; }, _ => unsafe { PushDebugGroup::is_loaded = false; } }
    match loadfn("PushDebugGroupKHR") { ptr if !ptr.is_null() => unsafe { storage::PushDebugGroupKHR = transmute(ptr); PushDebugGroupKHR::is_loaded = true; }, _ => unsafe { PushDebugGroupKHR::is_loaded = false; } }
    match loadfn("PushGroupMarkerEXT") { ptr if !ptr.is_null() => unsafe { storage::PushGroupMarkerEXT = transmute(ptr); PushGroupMarkerEXT::is_loaded = true; }, _ => unsafe { PushGroupMarkerEXT::is_loaded = false; } }
    match loadfn("PushMatrix") { ptr if !ptr.is_null() => unsafe { storage::PushMatrix = transmute(ptr); PushMatrix::is_loaded = true; }, _ => unsafe { PushMatrix::is_loaded = false; } }
    match loadfn("PushName") { ptr if !ptr.is_null() => unsafe { storage::PushName = transmute(ptr); PushName::is_loaded = true; }, _ => unsafe { PushName::is_loaded = false; } }
    match loadfn("QueryCounter") { ptr if !ptr.is_null() => unsafe { storage::QueryCounter = transmute(ptr); QueryCounter::is_loaded = true; }, _ => unsafe { QueryCounter::is_loaded = false; } }
    match loadfn("QueryCounterEXT") { ptr if !ptr.is_null() => unsafe { storage::QueryCounterEXT = transmute(ptr); QueryCounterEXT::is_loaded = true; }, _ => unsafe { QueryCounterEXT::is_loaded = false; } }
    match loadfn("QueryMatrixxOES") { ptr if !ptr.is_null() => unsafe { storage::QueryMatrixxOES = transmute(ptr); QueryMatrixxOES::is_loaded = true; }, _ => unsafe { QueryMatrixxOES::is_loaded = false; } }
    match loadfn("RasterPos2d") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2d = transmute(ptr); RasterPos2d::is_loaded = true; }, _ => unsafe { RasterPos2d::is_loaded = false; } }
    match loadfn("RasterPos2dv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2dv = transmute(ptr); RasterPos2dv::is_loaded = true; }, _ => unsafe { RasterPos2dv::is_loaded = false; } }
    match loadfn("RasterPos2f") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2f = transmute(ptr); RasterPos2f::is_loaded = true; }, _ => unsafe { RasterPos2f::is_loaded = false; } }
    match loadfn("RasterPos2fv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2fv = transmute(ptr); RasterPos2fv::is_loaded = true; }, _ => unsafe { RasterPos2fv::is_loaded = false; } }
    match loadfn("RasterPos2i") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2i = transmute(ptr); RasterPos2i::is_loaded = true; }, _ => unsafe { RasterPos2i::is_loaded = false; } }
    match loadfn("RasterPos2iv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2iv = transmute(ptr); RasterPos2iv::is_loaded = true; }, _ => unsafe { RasterPos2iv::is_loaded = false; } }
    match loadfn("RasterPos2s") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2s = transmute(ptr); RasterPos2s::is_loaded = true; }, _ => unsafe { RasterPos2s::is_loaded = false; } }
    match loadfn("RasterPos2sv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2sv = transmute(ptr); RasterPos2sv::is_loaded = true; }, _ => unsafe { RasterPos2sv::is_loaded = false; } }
    match loadfn("RasterPos2xOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2xOES = transmute(ptr); RasterPos2xOES::is_loaded = true; }, _ => unsafe { RasterPos2xOES::is_loaded = false; } }
    match loadfn("RasterPos2xvOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos2xvOES = transmute(ptr); RasterPos2xvOES::is_loaded = true; }, _ => unsafe { RasterPos2xvOES::is_loaded = false; } }
    match loadfn("RasterPos3d") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3d = transmute(ptr); RasterPos3d::is_loaded = true; }, _ => unsafe { RasterPos3d::is_loaded = false; } }
    match loadfn("RasterPos3dv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3dv = transmute(ptr); RasterPos3dv::is_loaded = true; }, _ => unsafe { RasterPos3dv::is_loaded = false; } }
    match loadfn("RasterPos3f") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3f = transmute(ptr); RasterPos3f::is_loaded = true; }, _ => unsafe { RasterPos3f::is_loaded = false; } }
    match loadfn("RasterPos3fv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3fv = transmute(ptr); RasterPos3fv::is_loaded = true; }, _ => unsafe { RasterPos3fv::is_loaded = false; } }
    match loadfn("RasterPos3i") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3i = transmute(ptr); RasterPos3i::is_loaded = true; }, _ => unsafe { RasterPos3i::is_loaded = false; } }
    match loadfn("RasterPos3iv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3iv = transmute(ptr); RasterPos3iv::is_loaded = true; }, _ => unsafe { RasterPos3iv::is_loaded = false; } }
    match loadfn("RasterPos3s") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3s = transmute(ptr); RasterPos3s::is_loaded = true; }, _ => unsafe { RasterPos3s::is_loaded = false; } }
    match loadfn("RasterPos3sv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3sv = transmute(ptr); RasterPos3sv::is_loaded = true; }, _ => unsafe { RasterPos3sv::is_loaded = false; } }
    match loadfn("RasterPos3xOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3xOES = transmute(ptr); RasterPos3xOES::is_loaded = true; }, _ => unsafe { RasterPos3xOES::is_loaded = false; } }
    match loadfn("RasterPos3xvOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos3xvOES = transmute(ptr); RasterPos3xvOES::is_loaded = true; }, _ => unsafe { RasterPos3xvOES::is_loaded = false; } }
    match loadfn("RasterPos4d") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4d = transmute(ptr); RasterPos4d::is_loaded = true; }, _ => unsafe { RasterPos4d::is_loaded = false; } }
    match loadfn("RasterPos4dv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4dv = transmute(ptr); RasterPos4dv::is_loaded = true; }, _ => unsafe { RasterPos4dv::is_loaded = false; } }
    match loadfn("RasterPos4f") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4f = transmute(ptr); RasterPos4f::is_loaded = true; }, _ => unsafe { RasterPos4f::is_loaded = false; } }
    match loadfn("RasterPos4fv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4fv = transmute(ptr); RasterPos4fv::is_loaded = true; }, _ => unsafe { RasterPos4fv::is_loaded = false; } }
    match loadfn("RasterPos4i") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4i = transmute(ptr); RasterPos4i::is_loaded = true; }, _ => unsafe { RasterPos4i::is_loaded = false; } }
    match loadfn("RasterPos4iv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4iv = transmute(ptr); RasterPos4iv::is_loaded = true; }, _ => unsafe { RasterPos4iv::is_loaded = false; } }
    match loadfn("RasterPos4s") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4s = transmute(ptr); RasterPos4s::is_loaded = true; }, _ => unsafe { RasterPos4s::is_loaded = false; } }
    match loadfn("RasterPos4sv") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4sv = transmute(ptr); RasterPos4sv::is_loaded = true; }, _ => unsafe { RasterPos4sv::is_loaded = false; } }
    match loadfn("RasterPos4xOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4xOES = transmute(ptr); RasterPos4xOES::is_loaded = true; }, _ => unsafe { RasterPos4xOES::is_loaded = false; } }
    match loadfn("RasterPos4xvOES") { ptr if !ptr.is_null() => unsafe { storage::RasterPos4xvOES = transmute(ptr); RasterPos4xvOES::is_loaded = true; }, _ => unsafe { RasterPos4xvOES::is_loaded = false; } }
    match loadfn("ReadBuffer") { ptr if !ptr.is_null() => unsafe { storage::ReadBuffer = transmute(ptr); ReadBuffer::is_loaded = true; }, _ => unsafe { ReadBuffer::is_loaded = false; } }
    match loadfn("ReadBufferIndexedEXT") { ptr if !ptr.is_null() => unsafe { storage::ReadBufferIndexedEXT = transmute(ptr); ReadBufferIndexedEXT::is_loaded = true; }, _ => unsafe { ReadBufferIndexedEXT::is_loaded = false; } }
    match loadfn("ReadBufferNV") { ptr if !ptr.is_null() => unsafe { storage::ReadBufferNV = transmute(ptr); ReadBufferNV::is_loaded = true; }, _ => unsafe { ReadBufferNV::is_loaded = false; } }
    match loadfn("ReadInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::ReadInstrumentsSGIX = transmute(ptr); ReadInstrumentsSGIX::is_loaded = true; }, _ => unsafe { ReadInstrumentsSGIX::is_loaded = false; } }
    match loadfn("ReadPixels") { ptr if !ptr.is_null() => unsafe { storage::ReadPixels = transmute(ptr); ReadPixels::is_loaded = true; }, _ => unsafe { ReadPixels::is_loaded = false; } }
    match loadfn("ReadnPixelsARB") { ptr if !ptr.is_null() => unsafe { storage::ReadnPixelsARB = transmute(ptr); ReadnPixelsARB::is_loaded = true; }, _ => unsafe { ReadnPixelsARB::is_loaded = false; } }
    match loadfn("ReadnPixelsEXT") { ptr if !ptr.is_null() => unsafe { storage::ReadnPixelsEXT = transmute(ptr); ReadnPixelsEXT::is_loaded = true; }, _ => unsafe { ReadnPixelsEXT::is_loaded = false; } }
    match loadfn("Rectd") { ptr if !ptr.is_null() => unsafe { storage::Rectd = transmute(ptr); Rectd::is_loaded = true; }, _ => unsafe { Rectd::is_loaded = false; } }
    match loadfn("Rectdv") { ptr if !ptr.is_null() => unsafe { storage::Rectdv = transmute(ptr); Rectdv::is_loaded = true; }, _ => unsafe { Rectdv::is_loaded = false; } }
    match loadfn("Rectf") { ptr if !ptr.is_null() => unsafe { storage::Rectf = transmute(ptr); Rectf::is_loaded = true; }, _ => unsafe { Rectf::is_loaded = false; } }
    match loadfn("Rectfv") { ptr if !ptr.is_null() => unsafe { storage::Rectfv = transmute(ptr); Rectfv::is_loaded = true; }, _ => unsafe { Rectfv::is_loaded = false; } }
    match loadfn("Recti") { ptr if !ptr.is_null() => unsafe { storage::Recti = transmute(ptr); Recti::is_loaded = true; }, _ => unsafe { Recti::is_loaded = false; } }
    match loadfn("Rectiv") { ptr if !ptr.is_null() => unsafe { storage::Rectiv = transmute(ptr); Rectiv::is_loaded = true; }, _ => unsafe { Rectiv::is_loaded = false; } }
    match loadfn("Rects") { ptr if !ptr.is_null() => unsafe { storage::Rects = transmute(ptr); Rects::is_loaded = true; }, _ => unsafe { Rects::is_loaded = false; } }
    match loadfn("Rectsv") { ptr if !ptr.is_null() => unsafe { storage::Rectsv = transmute(ptr); Rectsv::is_loaded = true; }, _ => unsafe { Rectsv::is_loaded = false; } }
    match loadfn("RectxOES") { ptr if !ptr.is_null() => unsafe { storage::RectxOES = transmute(ptr); RectxOES::is_loaded = true; }, _ => unsafe { RectxOES::is_loaded = false; } }
    match loadfn("RectxvOES") { ptr if !ptr.is_null() => unsafe { storage::RectxvOES = transmute(ptr); RectxvOES::is_loaded = true; }, _ => unsafe { RectxvOES::is_loaded = false; } }
    match loadfn("ReferencePlaneSGIX") { ptr if !ptr.is_null() => unsafe { storage::ReferencePlaneSGIX = transmute(ptr); ReferencePlaneSGIX::is_loaded = true; }, _ => unsafe { ReferencePlaneSGIX::is_loaded = false; } }
    match loadfn("ReleaseShaderCompiler") { ptr if !ptr.is_null() => unsafe { storage::ReleaseShaderCompiler = transmute(ptr); ReleaseShaderCompiler::is_loaded = true; }, _ => unsafe { ReleaseShaderCompiler::is_loaded = false; } }
    match loadfn("RenderMode") { ptr if !ptr.is_null() => unsafe { storage::RenderMode = transmute(ptr); RenderMode::is_loaded = true; }, _ => unsafe { RenderMode::is_loaded = false; } }
    match loadfn("RenderbufferStorage") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorage = transmute(ptr); RenderbufferStorage::is_loaded = true; }, _ => unsafe { RenderbufferStorage::is_loaded = false; } }
    match loadfn("RenderbufferStorageEXT") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageEXT = transmute(ptr); RenderbufferStorageEXT::is_loaded = true; }, _ => unsafe { RenderbufferStorageEXT::is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisample") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisample = transmute(ptr); RenderbufferStorageMultisample::is_loaded = true; }, _ => unsafe { RenderbufferStorageMultisample::is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleANGLE") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleANGLE = transmute(ptr); RenderbufferStorageMultisampleANGLE::is_loaded = true; }, _ => unsafe { RenderbufferStorageMultisampleANGLE::is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleAPPLE") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleAPPLE = transmute(ptr); RenderbufferStorageMultisampleAPPLE::is_loaded = true; }, _ => unsafe { RenderbufferStorageMultisampleAPPLE::is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleCoverageNV = transmute(ptr); RenderbufferStorageMultisampleCoverageNV::is_loaded = true; }, _ => unsafe { RenderbufferStorageMultisampleCoverageNV::is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleEXT = transmute(ptr); RenderbufferStorageMultisampleEXT::is_loaded = true; }, _ => unsafe { RenderbufferStorageMultisampleEXT::is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleIMG") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleIMG = transmute(ptr); RenderbufferStorageMultisampleIMG::is_loaded = true; }, _ => unsafe { RenderbufferStorageMultisampleIMG::is_loaded = false; } }
    match loadfn("RenderbufferStorageMultisampleNV") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageMultisampleNV = transmute(ptr); RenderbufferStorageMultisampleNV::is_loaded = true; }, _ => unsafe { RenderbufferStorageMultisampleNV::is_loaded = false; } }
    match loadfn("RenderbufferStorageOES") { ptr if !ptr.is_null() => unsafe { storage::RenderbufferStorageOES = transmute(ptr); RenderbufferStorageOES::is_loaded = true; }, _ => unsafe { RenderbufferStorageOES::is_loaded = false; } }
    match loadfn("ReplacementCodePointerSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodePointerSUN = transmute(ptr); ReplacementCodePointerSUN::is_loaded = true; }, _ => unsafe { ReplacementCodePointerSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeubSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeubSUN = transmute(ptr); ReplacementCodeubSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeubSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeubvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeubvSUN = transmute(ptr); ReplacementCodeubvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeubvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor3fVertex3fSUN = transmute(ptr); ReplacementCodeuiColor3fVertex3fSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiColor3fVertex3fSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor3fVertex3fvSUN = transmute(ptr); ReplacementCodeuiColor3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiColor3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor4fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor4fNormal3fVertex3fSUN = transmute(ptr); ReplacementCodeuiColor4fNormal3fVertex3fSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiColor4fNormal3fVertex3fSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor4fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor4fNormal3fVertex3fvSUN = transmute(ptr); ReplacementCodeuiColor4fNormal3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiColor4fNormal3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor4ubVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor4ubVertex3fSUN = transmute(ptr); ReplacementCodeuiColor4ubVertex3fSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiColor4ubVertex3fSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiColor4ubVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiColor4ubVertex3fvSUN = transmute(ptr); ReplacementCodeuiColor4ubVertex3fvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiColor4ubVertex3fvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiNormal3fVertex3fSUN = transmute(ptr); ReplacementCodeuiNormal3fVertex3fSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiNormal3fVertex3fSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiNormal3fVertex3fvSUN = transmute(ptr); ReplacementCodeuiNormal3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiNormal3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiSUN = transmute(ptr); ReplacementCodeuiSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = transmute(ptr); ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = transmute(ptr); ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = transmute(ptr); ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = transmute(ptr); ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fVertex3fSUN = transmute(ptr); ReplacementCodeuiTexCoord2fVertex3fSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiTexCoord2fVertex3fSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiTexCoord2fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiTexCoord2fVertex3fvSUN = transmute(ptr); ReplacementCodeuiTexCoord2fVertex3fvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiTexCoord2fVertex3fvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiVertex3fSUN = transmute(ptr); ReplacementCodeuiVertex3fSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiVertex3fSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuiVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuiVertex3fvSUN = transmute(ptr); ReplacementCodeuiVertex3fvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuiVertex3fvSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeuivSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeuivSUN = transmute(ptr); ReplacementCodeuivSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeuivSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeusSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeusSUN = transmute(ptr); ReplacementCodeusSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeusSUN::is_loaded = false; } }
    match loadfn("ReplacementCodeusvSUN") { ptr if !ptr.is_null() => unsafe { storage::ReplacementCodeusvSUN = transmute(ptr); ReplacementCodeusvSUN::is_loaded = true; }, _ => unsafe { ReplacementCodeusvSUN::is_loaded = false; } }
    match loadfn("RequestResidentProgramsNV") { ptr if !ptr.is_null() => unsafe { storage::RequestResidentProgramsNV = transmute(ptr); RequestResidentProgramsNV::is_loaded = true; }, _ => unsafe { RequestResidentProgramsNV::is_loaded = false; } }
    match loadfn("ResetHistogram") { ptr if !ptr.is_null() => unsafe { storage::ResetHistogram = transmute(ptr); ResetHistogram::is_loaded = true; }, _ => unsafe { ResetHistogram::is_loaded = false; } }
    match loadfn("ResetHistogramEXT") { ptr if !ptr.is_null() => unsafe { storage::ResetHistogramEXT = transmute(ptr); ResetHistogramEXT::is_loaded = true; }, _ => unsafe { ResetHistogramEXT::is_loaded = false; } }
    match loadfn("ResetMinmax") { ptr if !ptr.is_null() => unsafe { storage::ResetMinmax = transmute(ptr); ResetMinmax::is_loaded = true; }, _ => unsafe { ResetMinmax::is_loaded = false; } }
    match loadfn("ResetMinmaxEXT") { ptr if !ptr.is_null() => unsafe { storage::ResetMinmaxEXT = transmute(ptr); ResetMinmaxEXT::is_loaded = true; }, _ => unsafe { ResetMinmaxEXT::is_loaded = false; } }
    match loadfn("ResizeBuffersMESA") { ptr if !ptr.is_null() => unsafe { storage::ResizeBuffersMESA = transmute(ptr); ResizeBuffersMESA::is_loaded = true; }, _ => unsafe { ResizeBuffersMESA::is_loaded = false; } }
    match loadfn("ResolveMultisampleFramebufferAPPLE") { ptr if !ptr.is_null() => unsafe { storage::ResolveMultisampleFramebufferAPPLE = transmute(ptr); ResolveMultisampleFramebufferAPPLE::is_loaded = true; }, _ => unsafe { ResolveMultisampleFramebufferAPPLE::is_loaded = false; } }
    match loadfn("ResumeTransformFeedback") { ptr if !ptr.is_null() => unsafe { storage::ResumeTransformFeedback = transmute(ptr); ResumeTransformFeedback::is_loaded = true; }, _ => unsafe { ResumeTransformFeedback::is_loaded = false; } }
    match loadfn("ResumeTransformFeedbackNV") { ptr if !ptr.is_null() => unsafe { storage::ResumeTransformFeedbackNV = transmute(ptr); ResumeTransformFeedbackNV::is_loaded = true; }, _ => unsafe { ResumeTransformFeedbackNV::is_loaded = false; } }
    match loadfn("Rotated") { ptr if !ptr.is_null() => unsafe { storage::Rotated = transmute(ptr); Rotated::is_loaded = true; }, _ => unsafe { Rotated::is_loaded = false; } }
    match loadfn("Rotatef") { ptr if !ptr.is_null() => unsafe { storage::Rotatef = transmute(ptr); Rotatef::is_loaded = true; }, _ => unsafe { Rotatef::is_loaded = false; } }
    match loadfn("Rotatex") { ptr if !ptr.is_null() => unsafe { storage::Rotatex = transmute(ptr); Rotatex::is_loaded = true; }, _ => unsafe { Rotatex::is_loaded = false; } }
    match loadfn("RotatexOES") { ptr if !ptr.is_null() => unsafe { storage::RotatexOES = transmute(ptr); RotatexOES::is_loaded = true; }, _ => unsafe { RotatexOES::is_loaded = false; } }
    match loadfn("SampleCoverage") { ptr if !ptr.is_null() => unsafe { storage::SampleCoverage = transmute(ptr); SampleCoverage::is_loaded = true; }, _ => unsafe { SampleCoverage::is_loaded = false; } }
    match loadfn("SampleCoverageARB") { ptr if !ptr.is_null() => unsafe { storage::SampleCoverageARB = transmute(ptr); SampleCoverageARB::is_loaded = true; }, _ => unsafe { SampleCoverageARB::is_loaded = false; } }
    match loadfn("SampleCoverageOES") { ptr if !ptr.is_null() => unsafe { storage::SampleCoverageOES = transmute(ptr); SampleCoverageOES::is_loaded = true; }, _ => unsafe { SampleCoverageOES::is_loaded = false; } }
    match loadfn("SampleCoveragex") { ptr if !ptr.is_null() => unsafe { storage::SampleCoveragex = transmute(ptr); SampleCoveragex::is_loaded = true; }, _ => unsafe { SampleCoveragex::is_loaded = false; } }
    match loadfn("SampleCoveragexOES") { ptr if !ptr.is_null() => unsafe { storage::SampleCoveragexOES = transmute(ptr); SampleCoveragexOES::is_loaded = true; }, _ => unsafe { SampleCoveragexOES::is_loaded = false; } }
    match loadfn("SampleMapATI") { ptr if !ptr.is_null() => unsafe { storage::SampleMapATI = transmute(ptr); SampleMapATI::is_loaded = true; }, _ => unsafe { SampleMapATI::is_loaded = false; } }
    match loadfn("SampleMaskEXT") { ptr if !ptr.is_null() => unsafe { storage::SampleMaskEXT = transmute(ptr); SampleMaskEXT::is_loaded = true; }, _ => unsafe { SampleMaskEXT::is_loaded = false; } }
    match loadfn("SampleMaskIndexedNV") { ptr if !ptr.is_null() => unsafe { storage::SampleMaskIndexedNV = transmute(ptr); SampleMaskIndexedNV::is_loaded = true; }, _ => unsafe { SampleMaskIndexedNV::is_loaded = false; } }
    match loadfn("SampleMaskSGIS") { ptr if !ptr.is_null() => unsafe { storage::SampleMaskSGIS = transmute(ptr); SampleMaskSGIS::is_loaded = true; }, _ => unsafe { SampleMaskSGIS::is_loaded = false; } }
    match loadfn("SampleMaski") { ptr if !ptr.is_null() => unsafe { storage::SampleMaski = transmute(ptr); SampleMaski::is_loaded = true; }, _ => unsafe { SampleMaski::is_loaded = false; } }
    match loadfn("SamplePatternEXT") { ptr if !ptr.is_null() => unsafe { storage::SamplePatternEXT = transmute(ptr); SamplePatternEXT::is_loaded = true; }, _ => unsafe { SamplePatternEXT::is_loaded = false; } }
    match loadfn("SamplePatternSGIS") { ptr if !ptr.is_null() => unsafe { storage::SamplePatternSGIS = transmute(ptr); SamplePatternSGIS::is_loaded = true; }, _ => unsafe { SamplePatternSGIS::is_loaded = false; } }
    match loadfn("SamplerParameterIiv") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameterIiv = transmute(ptr); SamplerParameterIiv::is_loaded = true; }, _ => unsafe { SamplerParameterIiv::is_loaded = false; } }
    match loadfn("SamplerParameterIuiv") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameterIuiv = transmute(ptr); SamplerParameterIuiv::is_loaded = true; }, _ => unsafe { SamplerParameterIuiv::is_loaded = false; } }
    match loadfn("SamplerParameterf") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameterf = transmute(ptr); SamplerParameterf::is_loaded = true; }, _ => unsafe { SamplerParameterf::is_loaded = false; } }
    match loadfn("SamplerParameterfv") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameterfv = transmute(ptr); SamplerParameterfv::is_loaded = true; }, _ => unsafe { SamplerParameterfv::is_loaded = false; } }
    match loadfn("SamplerParameteri") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameteri = transmute(ptr); SamplerParameteri::is_loaded = true; }, _ => unsafe { SamplerParameteri::is_loaded = false; } }
    match loadfn("SamplerParameteriv") { ptr if !ptr.is_null() => unsafe { storage::SamplerParameteriv = transmute(ptr); SamplerParameteriv::is_loaded = true; }, _ => unsafe { SamplerParameteriv::is_loaded = false; } }
    match loadfn("Scaled") { ptr if !ptr.is_null() => unsafe { storage::Scaled = transmute(ptr); Scaled::is_loaded = true; }, _ => unsafe { Scaled::is_loaded = false; } }
    match loadfn("Scalef") { ptr if !ptr.is_null() => unsafe { storage::Scalef = transmute(ptr); Scalef::is_loaded = true; }, _ => unsafe { Scalef::is_loaded = false; } }
    match loadfn("Scalex") { ptr if !ptr.is_null() => unsafe { storage::Scalex = transmute(ptr); Scalex::is_loaded = true; }, _ => unsafe { Scalex::is_loaded = false; } }
    match loadfn("ScalexOES") { ptr if !ptr.is_null() => unsafe { storage::ScalexOES = transmute(ptr); ScalexOES::is_loaded = true; }, _ => unsafe { ScalexOES::is_loaded = false; } }
    match loadfn("Scissor") { ptr if !ptr.is_null() => unsafe { storage::Scissor = transmute(ptr); Scissor::is_loaded = true; }, _ => unsafe { Scissor::is_loaded = false; } }
    match loadfn("ScissorArrayv") { ptr if !ptr.is_null() => unsafe { storage::ScissorArrayv = transmute(ptr); ScissorArrayv::is_loaded = true; }, _ => unsafe { ScissorArrayv::is_loaded = false; } }
    match loadfn("ScissorIndexed") { ptr if !ptr.is_null() => unsafe { storage::ScissorIndexed = transmute(ptr); ScissorIndexed::is_loaded = true; }, _ => unsafe { ScissorIndexed::is_loaded = false; } }
    match loadfn("ScissorIndexedv") { ptr if !ptr.is_null() => unsafe { storage::ScissorIndexedv = transmute(ptr); ScissorIndexedv::is_loaded = true; }, _ => unsafe { ScissorIndexedv::is_loaded = false; } }
    match loadfn("SecondaryColor3b") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3b = transmute(ptr); SecondaryColor3b::is_loaded = true; }, _ => unsafe { SecondaryColor3b::is_loaded = false; } }
    match loadfn("SecondaryColor3bEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3bEXT = transmute(ptr); SecondaryColor3bEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3bEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3bv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3bv = transmute(ptr); SecondaryColor3bv::is_loaded = true; }, _ => unsafe { SecondaryColor3bv::is_loaded = false; } }
    match loadfn("SecondaryColor3bvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3bvEXT = transmute(ptr); SecondaryColor3bvEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3bvEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3d") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3d = transmute(ptr); SecondaryColor3d::is_loaded = true; }, _ => unsafe { SecondaryColor3d::is_loaded = false; } }
    match loadfn("SecondaryColor3dEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3dEXT = transmute(ptr); SecondaryColor3dEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3dEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3dv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3dv = transmute(ptr); SecondaryColor3dv::is_loaded = true; }, _ => unsafe { SecondaryColor3dv::is_loaded = false; } }
    match loadfn("SecondaryColor3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3dvEXT = transmute(ptr); SecondaryColor3dvEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3dvEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3f") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3f = transmute(ptr); SecondaryColor3f::is_loaded = true; }, _ => unsafe { SecondaryColor3f::is_loaded = false; } }
    match loadfn("SecondaryColor3fEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3fEXT = transmute(ptr); SecondaryColor3fEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3fEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3fv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3fv = transmute(ptr); SecondaryColor3fv::is_loaded = true; }, _ => unsafe { SecondaryColor3fv::is_loaded = false; } }
    match loadfn("SecondaryColor3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3fvEXT = transmute(ptr); SecondaryColor3fvEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3fvEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3hNV") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3hNV = transmute(ptr); SecondaryColor3hNV::is_loaded = true; }, _ => unsafe { SecondaryColor3hNV::is_loaded = false; } }
    match loadfn("SecondaryColor3hvNV") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3hvNV = transmute(ptr); SecondaryColor3hvNV::is_loaded = true; }, _ => unsafe { SecondaryColor3hvNV::is_loaded = false; } }
    match loadfn("SecondaryColor3i") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3i = transmute(ptr); SecondaryColor3i::is_loaded = true; }, _ => unsafe { SecondaryColor3i::is_loaded = false; } }
    match loadfn("SecondaryColor3iEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3iEXT = transmute(ptr); SecondaryColor3iEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3iEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3iv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3iv = transmute(ptr); SecondaryColor3iv::is_loaded = true; }, _ => unsafe { SecondaryColor3iv::is_loaded = false; } }
    match loadfn("SecondaryColor3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ivEXT = transmute(ptr); SecondaryColor3ivEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3ivEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3s") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3s = transmute(ptr); SecondaryColor3s::is_loaded = true; }, _ => unsafe { SecondaryColor3s::is_loaded = false; } }
    match loadfn("SecondaryColor3sEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3sEXT = transmute(ptr); SecondaryColor3sEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3sEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3sv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3sv = transmute(ptr); SecondaryColor3sv::is_loaded = true; }, _ => unsafe { SecondaryColor3sv::is_loaded = false; } }
    match loadfn("SecondaryColor3svEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3svEXT = transmute(ptr); SecondaryColor3svEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3svEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3ub") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ub = transmute(ptr); SecondaryColor3ub::is_loaded = true; }, _ => unsafe { SecondaryColor3ub::is_loaded = false; } }
    match loadfn("SecondaryColor3ubEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ubEXT = transmute(ptr); SecondaryColor3ubEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3ubEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3ubv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ubv = transmute(ptr); SecondaryColor3ubv::is_loaded = true; }, _ => unsafe { SecondaryColor3ubv::is_loaded = false; } }
    match loadfn("SecondaryColor3ubvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ubvEXT = transmute(ptr); SecondaryColor3ubvEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3ubvEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3ui") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3ui = transmute(ptr); SecondaryColor3ui::is_loaded = true; }, _ => unsafe { SecondaryColor3ui::is_loaded = false; } }
    match loadfn("SecondaryColor3uiEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3uiEXT = transmute(ptr); SecondaryColor3uiEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3uiEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3uiv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3uiv = transmute(ptr); SecondaryColor3uiv::is_loaded = true; }, _ => unsafe { SecondaryColor3uiv::is_loaded = false; } }
    match loadfn("SecondaryColor3uivEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3uivEXT = transmute(ptr); SecondaryColor3uivEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3uivEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3us") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3us = transmute(ptr); SecondaryColor3us::is_loaded = true; }, _ => unsafe { SecondaryColor3us::is_loaded = false; } }
    match loadfn("SecondaryColor3usEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3usEXT = transmute(ptr); SecondaryColor3usEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3usEXT::is_loaded = false; } }
    match loadfn("SecondaryColor3usv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3usv = transmute(ptr); SecondaryColor3usv::is_loaded = true; }, _ => unsafe { SecondaryColor3usv::is_loaded = false; } }
    match loadfn("SecondaryColor3usvEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColor3usvEXT = transmute(ptr); SecondaryColor3usvEXT::is_loaded = true; }, _ => unsafe { SecondaryColor3usvEXT::is_loaded = false; } }
    match loadfn("SecondaryColorFormatNV") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorFormatNV = transmute(ptr); SecondaryColorFormatNV::is_loaded = true; }, _ => unsafe { SecondaryColorFormatNV::is_loaded = false; } }
    match loadfn("SecondaryColorP3ui") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorP3ui = transmute(ptr); SecondaryColorP3ui::is_loaded = true; }, _ => unsafe { SecondaryColorP3ui::is_loaded = false; } }
    match loadfn("SecondaryColorP3uiv") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorP3uiv = transmute(ptr); SecondaryColorP3uiv::is_loaded = true; }, _ => unsafe { SecondaryColorP3uiv::is_loaded = false; } }
    match loadfn("SecondaryColorPointer") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorPointer = transmute(ptr); SecondaryColorPointer::is_loaded = true; }, _ => unsafe { SecondaryColorPointer::is_loaded = false; } }
    match loadfn("SecondaryColorPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorPointerEXT = transmute(ptr); SecondaryColorPointerEXT::is_loaded = true; }, _ => unsafe { SecondaryColorPointerEXT::is_loaded = false; } }
    match loadfn("SecondaryColorPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::SecondaryColorPointerListIBM = transmute(ptr); SecondaryColorPointerListIBM::is_loaded = true; }, _ => unsafe { SecondaryColorPointerListIBM::is_loaded = false; } }
    match loadfn("SelectBuffer") { ptr if !ptr.is_null() => unsafe { storage::SelectBuffer = transmute(ptr); SelectBuffer::is_loaded = true; }, _ => unsafe { SelectBuffer::is_loaded = false; } }
    match loadfn("SelectPerfMonitorCountersAMD") { ptr if !ptr.is_null() => unsafe { storage::SelectPerfMonitorCountersAMD = transmute(ptr); SelectPerfMonitorCountersAMD::is_loaded = true; }, _ => unsafe { SelectPerfMonitorCountersAMD::is_loaded = false; } }
    match loadfn("SeparableFilter2D") { ptr if !ptr.is_null() => unsafe { storage::SeparableFilter2D = transmute(ptr); SeparableFilter2D::is_loaded = true; }, _ => unsafe { SeparableFilter2D::is_loaded = false; } }
    match loadfn("SeparableFilter2DEXT") { ptr if !ptr.is_null() => unsafe { storage::SeparableFilter2DEXT = transmute(ptr); SeparableFilter2DEXT::is_loaded = true; }, _ => unsafe { SeparableFilter2DEXT::is_loaded = false; } }
    match loadfn("SetFenceAPPLE") { ptr if !ptr.is_null() => unsafe { storage::SetFenceAPPLE = transmute(ptr); SetFenceAPPLE::is_loaded = true; }, _ => unsafe { SetFenceAPPLE::is_loaded = false; } }
    match loadfn("SetFenceNV") { ptr if !ptr.is_null() => unsafe { storage::SetFenceNV = transmute(ptr); SetFenceNV::is_loaded = true; }, _ => unsafe { SetFenceNV::is_loaded = false; } }
    match loadfn("SetFragmentShaderConstantATI") { ptr if !ptr.is_null() => unsafe { storage::SetFragmentShaderConstantATI = transmute(ptr); SetFragmentShaderConstantATI::is_loaded = true; }, _ => unsafe { SetFragmentShaderConstantATI::is_loaded = false; } }
    match loadfn("SetInvariantEXT") { ptr if !ptr.is_null() => unsafe { storage::SetInvariantEXT = transmute(ptr); SetInvariantEXT::is_loaded = true; }, _ => unsafe { SetInvariantEXT::is_loaded = false; } }
    match loadfn("SetLocalConstantEXT") { ptr if !ptr.is_null() => unsafe { storage::SetLocalConstantEXT = transmute(ptr); SetLocalConstantEXT::is_loaded = true; }, _ => unsafe { SetLocalConstantEXT::is_loaded = false; } }
    match loadfn("SetMultisamplefvAMD") { ptr if !ptr.is_null() => unsafe { storage::SetMultisamplefvAMD = transmute(ptr); SetMultisamplefvAMD::is_loaded = true; }, _ => unsafe { SetMultisamplefvAMD::is_loaded = false; } }
    match loadfn("ShadeModel") { ptr if !ptr.is_null() => unsafe { storage::ShadeModel = transmute(ptr); ShadeModel::is_loaded = true; }, _ => unsafe { ShadeModel::is_loaded = false; } }
    match loadfn("ShaderBinary") { ptr if !ptr.is_null() => unsafe { storage::ShaderBinary = transmute(ptr); ShaderBinary::is_loaded = true; }, _ => unsafe { ShaderBinary::is_loaded = false; } }
    match loadfn("ShaderOp1EXT") { ptr if !ptr.is_null() => unsafe { storage::ShaderOp1EXT = transmute(ptr); ShaderOp1EXT::is_loaded = true; }, _ => unsafe { ShaderOp1EXT::is_loaded = false; } }
    match loadfn("ShaderOp2EXT") { ptr if !ptr.is_null() => unsafe { storage::ShaderOp2EXT = transmute(ptr); ShaderOp2EXT::is_loaded = true; }, _ => unsafe { ShaderOp2EXT::is_loaded = false; } }
    match loadfn("ShaderOp3EXT") { ptr if !ptr.is_null() => unsafe { storage::ShaderOp3EXT = transmute(ptr); ShaderOp3EXT::is_loaded = true; }, _ => unsafe { ShaderOp3EXT::is_loaded = false; } }
    match loadfn("ShaderSource") { ptr if !ptr.is_null() => unsafe { storage::ShaderSource = transmute(ptr); ShaderSource::is_loaded = true; }, _ => unsafe { ShaderSource::is_loaded = false; } }
    match loadfn("ShaderSourceARB") { ptr if !ptr.is_null() => unsafe { storage::ShaderSourceARB = transmute(ptr); ShaderSourceARB::is_loaded = true; }, _ => unsafe { ShaderSourceARB::is_loaded = false; } }
    match loadfn("ShaderStorageBlockBinding") { ptr if !ptr.is_null() => unsafe { storage::ShaderStorageBlockBinding = transmute(ptr); ShaderStorageBlockBinding::is_loaded = true; }, _ => unsafe { ShaderStorageBlockBinding::is_loaded = false; } }
    match loadfn("SharpenTexFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::SharpenTexFuncSGIS = transmute(ptr); SharpenTexFuncSGIS::is_loaded = true; }, _ => unsafe { SharpenTexFuncSGIS::is_loaded = false; } }
    match loadfn("SpriteParameterfSGIX") { ptr if !ptr.is_null() => unsafe { storage::SpriteParameterfSGIX = transmute(ptr); SpriteParameterfSGIX::is_loaded = true; }, _ => unsafe { SpriteParameterfSGIX::is_loaded = false; } }
    match loadfn("SpriteParameterfvSGIX") { ptr if !ptr.is_null() => unsafe { storage::SpriteParameterfvSGIX = transmute(ptr); SpriteParameterfvSGIX::is_loaded = true; }, _ => unsafe { SpriteParameterfvSGIX::is_loaded = false; } }
    match loadfn("SpriteParameteriSGIX") { ptr if !ptr.is_null() => unsafe { storage::SpriteParameteriSGIX = transmute(ptr); SpriteParameteriSGIX::is_loaded = true; }, _ => unsafe { SpriteParameteriSGIX::is_loaded = false; } }
    match loadfn("SpriteParameterivSGIX") { ptr if !ptr.is_null() => unsafe { storage::SpriteParameterivSGIX = transmute(ptr); SpriteParameterivSGIX::is_loaded = true; }, _ => unsafe { SpriteParameterivSGIX::is_loaded = false; } }
    match loadfn("StartInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::StartInstrumentsSGIX = transmute(ptr); StartInstrumentsSGIX::is_loaded = true; }, _ => unsafe { StartInstrumentsSGIX::is_loaded = false; } }
    match loadfn("StartTilingQCOM") { ptr if !ptr.is_null() => unsafe { storage::StartTilingQCOM = transmute(ptr); StartTilingQCOM::is_loaded = true; }, _ => unsafe { StartTilingQCOM::is_loaded = false; } }
    match loadfn("StencilClearTagEXT") { ptr if !ptr.is_null() => unsafe { storage::StencilClearTagEXT = transmute(ptr); StencilClearTagEXT::is_loaded = true; }, _ => unsafe { StencilClearTagEXT::is_loaded = false; } }
    match loadfn("StencilFillPathInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::StencilFillPathInstancedNV = transmute(ptr); StencilFillPathInstancedNV::is_loaded = true; }, _ => unsafe { StencilFillPathInstancedNV::is_loaded = false; } }
    match loadfn("StencilFillPathNV") { ptr if !ptr.is_null() => unsafe { storage::StencilFillPathNV = transmute(ptr); StencilFillPathNV::is_loaded = true; }, _ => unsafe { StencilFillPathNV::is_loaded = false; } }
    match loadfn("StencilFunc") { ptr if !ptr.is_null() => unsafe { storage::StencilFunc = transmute(ptr); StencilFunc::is_loaded = true; }, _ => unsafe { StencilFunc::is_loaded = false; } }
    match loadfn("StencilFuncSeparate") { ptr if !ptr.is_null() => unsafe { storage::StencilFuncSeparate = transmute(ptr); StencilFuncSeparate::is_loaded = true; }, _ => unsafe { StencilFuncSeparate::is_loaded = false; } }
    match loadfn("StencilFuncSeparateATI") { ptr if !ptr.is_null() => unsafe { storage::StencilFuncSeparateATI = transmute(ptr); StencilFuncSeparateATI::is_loaded = true; }, _ => unsafe { StencilFuncSeparateATI::is_loaded = false; } }
    match loadfn("StencilMask") { ptr if !ptr.is_null() => unsafe { storage::StencilMask = transmute(ptr); StencilMask::is_loaded = true; }, _ => unsafe { StencilMask::is_loaded = false; } }
    match loadfn("StencilMaskSeparate") { ptr if !ptr.is_null() => unsafe { storage::StencilMaskSeparate = transmute(ptr); StencilMaskSeparate::is_loaded = true; }, _ => unsafe { StencilMaskSeparate::is_loaded = false; } }
    match loadfn("StencilOp") { ptr if !ptr.is_null() => unsafe { storage::StencilOp = transmute(ptr); StencilOp::is_loaded = true; }, _ => unsafe { StencilOp::is_loaded = false; } }
    match loadfn("StencilOpSeparate") { ptr if !ptr.is_null() => unsafe { storage::StencilOpSeparate = transmute(ptr); StencilOpSeparate::is_loaded = true; }, _ => unsafe { StencilOpSeparate::is_loaded = false; } }
    match loadfn("StencilOpSeparateATI") { ptr if !ptr.is_null() => unsafe { storage::StencilOpSeparateATI = transmute(ptr); StencilOpSeparateATI::is_loaded = true; }, _ => unsafe { StencilOpSeparateATI::is_loaded = false; } }
    match loadfn("StencilOpValueAMD") { ptr if !ptr.is_null() => unsafe { storage::StencilOpValueAMD = transmute(ptr); StencilOpValueAMD::is_loaded = true; }, _ => unsafe { StencilOpValueAMD::is_loaded = false; } }
    match loadfn("StencilStrokePathInstancedNV") { ptr if !ptr.is_null() => unsafe { storage::StencilStrokePathInstancedNV = transmute(ptr); StencilStrokePathInstancedNV::is_loaded = true; }, _ => unsafe { StencilStrokePathInstancedNV::is_loaded = false; } }
    match loadfn("StencilStrokePathNV") { ptr if !ptr.is_null() => unsafe { storage::StencilStrokePathNV = transmute(ptr); StencilStrokePathNV::is_loaded = true; }, _ => unsafe { StencilStrokePathNV::is_loaded = false; } }
    match loadfn("StopInstrumentsSGIX") { ptr if !ptr.is_null() => unsafe { storage::StopInstrumentsSGIX = transmute(ptr); StopInstrumentsSGIX::is_loaded = true; }, _ => unsafe { StopInstrumentsSGIX::is_loaded = false; } }
    match loadfn("StringMarkerGREMEDY") { ptr if !ptr.is_null() => unsafe { storage::StringMarkerGREMEDY = transmute(ptr); StringMarkerGREMEDY::is_loaded = true; }, _ => unsafe { StringMarkerGREMEDY::is_loaded = false; } }
    match loadfn("SwizzleEXT") { ptr if !ptr.is_null() => unsafe { storage::SwizzleEXT = transmute(ptr); SwizzleEXT::is_loaded = true; }, _ => unsafe { SwizzleEXT::is_loaded = false; } }
    match loadfn("SyncTextureINTEL") { ptr if !ptr.is_null() => unsafe { storage::SyncTextureINTEL = transmute(ptr); SyncTextureINTEL::is_loaded = true; }, _ => unsafe { SyncTextureINTEL::is_loaded = false; } }
    match loadfn("TagSampleBufferSGIX") { ptr if !ptr.is_null() => unsafe { storage::TagSampleBufferSGIX = transmute(ptr); TagSampleBufferSGIX::is_loaded = true; }, _ => unsafe { TagSampleBufferSGIX::is_loaded = false; } }
    match loadfn("Tangent3bEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3bEXT = transmute(ptr); Tangent3bEXT::is_loaded = true; }, _ => unsafe { Tangent3bEXT::is_loaded = false; } }
    match loadfn("Tangent3bvEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3bvEXT = transmute(ptr); Tangent3bvEXT::is_loaded = true; }, _ => unsafe { Tangent3bvEXT::is_loaded = false; } }
    match loadfn("Tangent3dEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3dEXT = transmute(ptr); Tangent3dEXT::is_loaded = true; }, _ => unsafe { Tangent3dEXT::is_loaded = false; } }
    match loadfn("Tangent3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3dvEXT = transmute(ptr); Tangent3dvEXT::is_loaded = true; }, _ => unsafe { Tangent3dvEXT::is_loaded = false; } }
    match loadfn("Tangent3fEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3fEXT = transmute(ptr); Tangent3fEXT::is_loaded = true; }, _ => unsafe { Tangent3fEXT::is_loaded = false; } }
    match loadfn("Tangent3fvEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3fvEXT = transmute(ptr); Tangent3fvEXT::is_loaded = true; }, _ => unsafe { Tangent3fvEXT::is_loaded = false; } }
    match loadfn("Tangent3iEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3iEXT = transmute(ptr); Tangent3iEXT::is_loaded = true; }, _ => unsafe { Tangent3iEXT::is_loaded = false; } }
    match loadfn("Tangent3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3ivEXT = transmute(ptr); Tangent3ivEXT::is_loaded = true; }, _ => unsafe { Tangent3ivEXT::is_loaded = false; } }
    match loadfn("Tangent3sEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3sEXT = transmute(ptr); Tangent3sEXT::is_loaded = true; }, _ => unsafe { Tangent3sEXT::is_loaded = false; } }
    match loadfn("Tangent3svEXT") { ptr if !ptr.is_null() => unsafe { storage::Tangent3svEXT = transmute(ptr); Tangent3svEXT::is_loaded = true; }, _ => unsafe { Tangent3svEXT::is_loaded = false; } }
    match loadfn("TangentPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::TangentPointerEXT = transmute(ptr); TangentPointerEXT::is_loaded = true; }, _ => unsafe { TangentPointerEXT::is_loaded = false; } }
    match loadfn("TbufferMask3DFX") { ptr if !ptr.is_null() => unsafe { storage::TbufferMask3DFX = transmute(ptr); TbufferMask3DFX::is_loaded = true; }, _ => unsafe { TbufferMask3DFX::is_loaded = false; } }
    match loadfn("TessellationFactorAMD") { ptr if !ptr.is_null() => unsafe { storage::TessellationFactorAMD = transmute(ptr); TessellationFactorAMD::is_loaded = true; }, _ => unsafe { TessellationFactorAMD::is_loaded = false; } }
    match loadfn("TessellationModeAMD") { ptr if !ptr.is_null() => unsafe { storage::TessellationModeAMD = transmute(ptr); TessellationModeAMD::is_loaded = true; }, _ => unsafe { TessellationModeAMD::is_loaded = false; } }
    match loadfn("TestFenceAPPLE") { ptr if !ptr.is_null() => unsafe { storage::TestFenceAPPLE = transmute(ptr); TestFenceAPPLE::is_loaded = true; }, _ => unsafe { TestFenceAPPLE::is_loaded = false; } }
    match loadfn("TestFenceNV") { ptr if !ptr.is_null() => unsafe { storage::TestFenceNV = transmute(ptr); TestFenceNV::is_loaded = true; }, _ => unsafe { TestFenceNV::is_loaded = false; } }
    match loadfn("TestObjectAPPLE") { ptr if !ptr.is_null() => unsafe { storage::TestObjectAPPLE = transmute(ptr); TestObjectAPPLE::is_loaded = true; }, _ => unsafe { TestObjectAPPLE::is_loaded = false; } }
    match loadfn("TexBuffer") { ptr if !ptr.is_null() => unsafe { storage::TexBuffer = transmute(ptr); TexBuffer::is_loaded = true; }, _ => unsafe { TexBuffer::is_loaded = false; } }
    match loadfn("TexBufferARB") { ptr if !ptr.is_null() => unsafe { storage::TexBufferARB = transmute(ptr); TexBufferARB::is_loaded = true; }, _ => unsafe { TexBufferARB::is_loaded = false; } }
    match loadfn("TexBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::TexBufferEXT = transmute(ptr); TexBufferEXT::is_loaded = true; }, _ => unsafe { TexBufferEXT::is_loaded = false; } }
    match loadfn("TexBufferRange") { ptr if !ptr.is_null() => unsafe { storage::TexBufferRange = transmute(ptr); TexBufferRange::is_loaded = true; }, _ => unsafe { TexBufferRange::is_loaded = false; } }
    match loadfn("TexBumpParameterfvATI") { ptr if !ptr.is_null() => unsafe { storage::TexBumpParameterfvATI = transmute(ptr); TexBumpParameterfvATI::is_loaded = true; }, _ => unsafe { TexBumpParameterfvATI::is_loaded = false; } }
    match loadfn("TexBumpParameterivATI") { ptr if !ptr.is_null() => unsafe { storage::TexBumpParameterivATI = transmute(ptr); TexBumpParameterivATI::is_loaded = true; }, _ => unsafe { TexBumpParameterivATI::is_loaded = false; } }
    match loadfn("TexCoord1bOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1bOES = transmute(ptr); TexCoord1bOES::is_loaded = true; }, _ => unsafe { TexCoord1bOES::is_loaded = false; } }
    match loadfn("TexCoord1bvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1bvOES = transmute(ptr); TexCoord1bvOES::is_loaded = true; }, _ => unsafe { TexCoord1bvOES::is_loaded = false; } }
    match loadfn("TexCoord1d") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1d = transmute(ptr); TexCoord1d::is_loaded = true; }, _ => unsafe { TexCoord1d::is_loaded = false; } }
    match loadfn("TexCoord1dv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1dv = transmute(ptr); TexCoord1dv::is_loaded = true; }, _ => unsafe { TexCoord1dv::is_loaded = false; } }
    match loadfn("TexCoord1f") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1f = transmute(ptr); TexCoord1f::is_loaded = true; }, _ => unsafe { TexCoord1f::is_loaded = false; } }
    match loadfn("TexCoord1fv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1fv = transmute(ptr); TexCoord1fv::is_loaded = true; }, _ => unsafe { TexCoord1fv::is_loaded = false; } }
    match loadfn("TexCoord1hNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1hNV = transmute(ptr); TexCoord1hNV::is_loaded = true; }, _ => unsafe { TexCoord1hNV::is_loaded = false; } }
    match loadfn("TexCoord1hvNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1hvNV = transmute(ptr); TexCoord1hvNV::is_loaded = true; }, _ => unsafe { TexCoord1hvNV::is_loaded = false; } }
    match loadfn("TexCoord1i") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1i = transmute(ptr); TexCoord1i::is_loaded = true; }, _ => unsafe { TexCoord1i::is_loaded = false; } }
    match loadfn("TexCoord1iv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1iv = transmute(ptr); TexCoord1iv::is_loaded = true; }, _ => unsafe { TexCoord1iv::is_loaded = false; } }
    match loadfn("TexCoord1s") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1s = transmute(ptr); TexCoord1s::is_loaded = true; }, _ => unsafe { TexCoord1s::is_loaded = false; } }
    match loadfn("TexCoord1sv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1sv = transmute(ptr); TexCoord1sv::is_loaded = true; }, _ => unsafe { TexCoord1sv::is_loaded = false; } }
    match loadfn("TexCoord1xOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1xOES = transmute(ptr); TexCoord1xOES::is_loaded = true; }, _ => unsafe { TexCoord1xOES::is_loaded = false; } }
    match loadfn("TexCoord1xvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord1xvOES = transmute(ptr); TexCoord1xvOES::is_loaded = true; }, _ => unsafe { TexCoord1xvOES::is_loaded = false; } }
    match loadfn("TexCoord2bOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2bOES = transmute(ptr); TexCoord2bOES::is_loaded = true; }, _ => unsafe { TexCoord2bOES::is_loaded = false; } }
    match loadfn("TexCoord2bvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2bvOES = transmute(ptr); TexCoord2bvOES::is_loaded = true; }, _ => unsafe { TexCoord2bvOES::is_loaded = false; } }
    match loadfn("TexCoord2d") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2d = transmute(ptr); TexCoord2d::is_loaded = true; }, _ => unsafe { TexCoord2d::is_loaded = false; } }
    match loadfn("TexCoord2dv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2dv = transmute(ptr); TexCoord2dv::is_loaded = true; }, _ => unsafe { TexCoord2dv::is_loaded = false; } }
    match loadfn("TexCoord2f") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2f = transmute(ptr); TexCoord2f::is_loaded = true; }, _ => unsafe { TexCoord2f::is_loaded = false; } }
    match loadfn("TexCoord2fColor3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor3fVertex3fSUN = transmute(ptr); TexCoord2fColor3fVertex3fSUN::is_loaded = true; }, _ => unsafe { TexCoord2fColor3fVertex3fSUN::is_loaded = false; } }
    match loadfn("TexCoord2fColor3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor3fVertex3fvSUN = transmute(ptr); TexCoord2fColor3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { TexCoord2fColor3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("TexCoord2fColor4fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor4fNormal3fVertex3fSUN = transmute(ptr); TexCoord2fColor4fNormal3fVertex3fSUN::is_loaded = true; }, _ => unsafe { TexCoord2fColor4fNormal3fVertex3fSUN::is_loaded = false; } }
    match loadfn("TexCoord2fColor4fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor4fNormal3fVertex3fvSUN = transmute(ptr); TexCoord2fColor4fNormal3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { TexCoord2fColor4fNormal3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("TexCoord2fColor4ubVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor4ubVertex3fSUN = transmute(ptr); TexCoord2fColor4ubVertex3fSUN::is_loaded = true; }, _ => unsafe { TexCoord2fColor4ubVertex3fSUN::is_loaded = false; } }
    match loadfn("TexCoord2fColor4ubVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fColor4ubVertex3fvSUN = transmute(ptr); TexCoord2fColor4ubVertex3fvSUN::is_loaded = true; }, _ => unsafe { TexCoord2fColor4ubVertex3fvSUN::is_loaded = false; } }
    match loadfn("TexCoord2fNormal3fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fNormal3fVertex3fSUN = transmute(ptr); TexCoord2fNormal3fVertex3fSUN::is_loaded = true; }, _ => unsafe { TexCoord2fNormal3fVertex3fSUN::is_loaded = false; } }
    match loadfn("TexCoord2fNormal3fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fNormal3fVertex3fvSUN = transmute(ptr); TexCoord2fNormal3fVertex3fvSUN::is_loaded = true; }, _ => unsafe { TexCoord2fNormal3fVertex3fvSUN::is_loaded = false; } }
    match loadfn("TexCoord2fVertex3fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fVertex3fSUN = transmute(ptr); TexCoord2fVertex3fSUN::is_loaded = true; }, _ => unsafe { TexCoord2fVertex3fSUN::is_loaded = false; } }
    match loadfn("TexCoord2fVertex3fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fVertex3fvSUN = transmute(ptr); TexCoord2fVertex3fvSUN::is_loaded = true; }, _ => unsafe { TexCoord2fVertex3fvSUN::is_loaded = false; } }
    match loadfn("TexCoord2fv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2fv = transmute(ptr); TexCoord2fv::is_loaded = true; }, _ => unsafe { TexCoord2fv::is_loaded = false; } }
    match loadfn("TexCoord2hNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2hNV = transmute(ptr); TexCoord2hNV::is_loaded = true; }, _ => unsafe { TexCoord2hNV::is_loaded = false; } }
    match loadfn("TexCoord2hvNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2hvNV = transmute(ptr); TexCoord2hvNV::is_loaded = true; }, _ => unsafe { TexCoord2hvNV::is_loaded = false; } }
    match loadfn("TexCoord2i") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2i = transmute(ptr); TexCoord2i::is_loaded = true; }, _ => unsafe { TexCoord2i::is_loaded = false; } }
    match loadfn("TexCoord2iv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2iv = transmute(ptr); TexCoord2iv::is_loaded = true; }, _ => unsafe { TexCoord2iv::is_loaded = false; } }
    match loadfn("TexCoord2s") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2s = transmute(ptr); TexCoord2s::is_loaded = true; }, _ => unsafe { TexCoord2s::is_loaded = false; } }
    match loadfn("TexCoord2sv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2sv = transmute(ptr); TexCoord2sv::is_loaded = true; }, _ => unsafe { TexCoord2sv::is_loaded = false; } }
    match loadfn("TexCoord2xOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2xOES = transmute(ptr); TexCoord2xOES::is_loaded = true; }, _ => unsafe { TexCoord2xOES::is_loaded = false; } }
    match loadfn("TexCoord2xvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord2xvOES = transmute(ptr); TexCoord2xvOES::is_loaded = true; }, _ => unsafe { TexCoord2xvOES::is_loaded = false; } }
    match loadfn("TexCoord3bOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3bOES = transmute(ptr); TexCoord3bOES::is_loaded = true; }, _ => unsafe { TexCoord3bOES::is_loaded = false; } }
    match loadfn("TexCoord3bvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3bvOES = transmute(ptr); TexCoord3bvOES::is_loaded = true; }, _ => unsafe { TexCoord3bvOES::is_loaded = false; } }
    match loadfn("TexCoord3d") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3d = transmute(ptr); TexCoord3d::is_loaded = true; }, _ => unsafe { TexCoord3d::is_loaded = false; } }
    match loadfn("TexCoord3dv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3dv = transmute(ptr); TexCoord3dv::is_loaded = true; }, _ => unsafe { TexCoord3dv::is_loaded = false; } }
    match loadfn("TexCoord3f") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3f = transmute(ptr); TexCoord3f::is_loaded = true; }, _ => unsafe { TexCoord3f::is_loaded = false; } }
    match loadfn("TexCoord3fv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3fv = transmute(ptr); TexCoord3fv::is_loaded = true; }, _ => unsafe { TexCoord3fv::is_loaded = false; } }
    match loadfn("TexCoord3hNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3hNV = transmute(ptr); TexCoord3hNV::is_loaded = true; }, _ => unsafe { TexCoord3hNV::is_loaded = false; } }
    match loadfn("TexCoord3hvNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3hvNV = transmute(ptr); TexCoord3hvNV::is_loaded = true; }, _ => unsafe { TexCoord3hvNV::is_loaded = false; } }
    match loadfn("TexCoord3i") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3i = transmute(ptr); TexCoord3i::is_loaded = true; }, _ => unsafe { TexCoord3i::is_loaded = false; } }
    match loadfn("TexCoord3iv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3iv = transmute(ptr); TexCoord3iv::is_loaded = true; }, _ => unsafe { TexCoord3iv::is_loaded = false; } }
    match loadfn("TexCoord3s") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3s = transmute(ptr); TexCoord3s::is_loaded = true; }, _ => unsafe { TexCoord3s::is_loaded = false; } }
    match loadfn("TexCoord3sv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3sv = transmute(ptr); TexCoord3sv::is_loaded = true; }, _ => unsafe { TexCoord3sv::is_loaded = false; } }
    match loadfn("TexCoord3xOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3xOES = transmute(ptr); TexCoord3xOES::is_loaded = true; }, _ => unsafe { TexCoord3xOES::is_loaded = false; } }
    match loadfn("TexCoord3xvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord3xvOES = transmute(ptr); TexCoord3xvOES::is_loaded = true; }, _ => unsafe { TexCoord3xvOES::is_loaded = false; } }
    match loadfn("TexCoord4bOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4bOES = transmute(ptr); TexCoord4bOES::is_loaded = true; }, _ => unsafe { TexCoord4bOES::is_loaded = false; } }
    match loadfn("TexCoord4bvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4bvOES = transmute(ptr); TexCoord4bvOES::is_loaded = true; }, _ => unsafe { TexCoord4bvOES::is_loaded = false; } }
    match loadfn("TexCoord4d") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4d = transmute(ptr); TexCoord4d::is_loaded = true; }, _ => unsafe { TexCoord4d::is_loaded = false; } }
    match loadfn("TexCoord4dv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4dv = transmute(ptr); TexCoord4dv::is_loaded = true; }, _ => unsafe { TexCoord4dv::is_loaded = false; } }
    match loadfn("TexCoord4f") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4f = transmute(ptr); TexCoord4f::is_loaded = true; }, _ => unsafe { TexCoord4f::is_loaded = false; } }
    match loadfn("TexCoord4fColor4fNormal3fVertex4fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fColor4fNormal3fVertex4fSUN = transmute(ptr); TexCoord4fColor4fNormal3fVertex4fSUN::is_loaded = true; }, _ => unsafe { TexCoord4fColor4fNormal3fVertex4fSUN::is_loaded = false; } }
    match loadfn("TexCoord4fColor4fNormal3fVertex4fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fColor4fNormal3fVertex4fvSUN = transmute(ptr); TexCoord4fColor4fNormal3fVertex4fvSUN::is_loaded = true; }, _ => unsafe { TexCoord4fColor4fNormal3fVertex4fvSUN::is_loaded = false; } }
    match loadfn("TexCoord4fVertex4fSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fVertex4fSUN = transmute(ptr); TexCoord4fVertex4fSUN::is_loaded = true; }, _ => unsafe { TexCoord4fVertex4fSUN::is_loaded = false; } }
    match loadfn("TexCoord4fVertex4fvSUN") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fVertex4fvSUN = transmute(ptr); TexCoord4fVertex4fvSUN::is_loaded = true; }, _ => unsafe { TexCoord4fVertex4fvSUN::is_loaded = false; } }
    match loadfn("TexCoord4fv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4fv = transmute(ptr); TexCoord4fv::is_loaded = true; }, _ => unsafe { TexCoord4fv::is_loaded = false; } }
    match loadfn("TexCoord4hNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4hNV = transmute(ptr); TexCoord4hNV::is_loaded = true; }, _ => unsafe { TexCoord4hNV::is_loaded = false; } }
    match loadfn("TexCoord4hvNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4hvNV = transmute(ptr); TexCoord4hvNV::is_loaded = true; }, _ => unsafe { TexCoord4hvNV::is_loaded = false; } }
    match loadfn("TexCoord4i") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4i = transmute(ptr); TexCoord4i::is_loaded = true; }, _ => unsafe { TexCoord4i::is_loaded = false; } }
    match loadfn("TexCoord4iv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4iv = transmute(ptr); TexCoord4iv::is_loaded = true; }, _ => unsafe { TexCoord4iv::is_loaded = false; } }
    match loadfn("TexCoord4s") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4s = transmute(ptr); TexCoord4s::is_loaded = true; }, _ => unsafe { TexCoord4s::is_loaded = false; } }
    match loadfn("TexCoord4sv") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4sv = transmute(ptr); TexCoord4sv::is_loaded = true; }, _ => unsafe { TexCoord4sv::is_loaded = false; } }
    match loadfn("TexCoord4xOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4xOES = transmute(ptr); TexCoord4xOES::is_loaded = true; }, _ => unsafe { TexCoord4xOES::is_loaded = false; } }
    match loadfn("TexCoord4xvOES") { ptr if !ptr.is_null() => unsafe { storage::TexCoord4xvOES = transmute(ptr); TexCoord4xvOES::is_loaded = true; }, _ => unsafe { TexCoord4xvOES::is_loaded = false; } }
    match loadfn("TexCoordFormatNV") { ptr if !ptr.is_null() => unsafe { storage::TexCoordFormatNV = transmute(ptr); TexCoordFormatNV::is_loaded = true; }, _ => unsafe { TexCoordFormatNV::is_loaded = false; } }
    match loadfn("TexCoordP1ui") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP1ui = transmute(ptr); TexCoordP1ui::is_loaded = true; }, _ => unsafe { TexCoordP1ui::is_loaded = false; } }
    match loadfn("TexCoordP1uiv") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP1uiv = transmute(ptr); TexCoordP1uiv::is_loaded = true; }, _ => unsafe { TexCoordP1uiv::is_loaded = false; } }
    match loadfn("TexCoordP2ui") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP2ui = transmute(ptr); TexCoordP2ui::is_loaded = true; }, _ => unsafe { TexCoordP2ui::is_loaded = false; } }
    match loadfn("TexCoordP2uiv") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP2uiv = transmute(ptr); TexCoordP2uiv::is_loaded = true; }, _ => unsafe { TexCoordP2uiv::is_loaded = false; } }
    match loadfn("TexCoordP3ui") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP3ui = transmute(ptr); TexCoordP3ui::is_loaded = true; }, _ => unsafe { TexCoordP3ui::is_loaded = false; } }
    match loadfn("TexCoordP3uiv") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP3uiv = transmute(ptr); TexCoordP3uiv::is_loaded = true; }, _ => unsafe { TexCoordP3uiv::is_loaded = false; } }
    match loadfn("TexCoordP4ui") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP4ui = transmute(ptr); TexCoordP4ui::is_loaded = true; }, _ => unsafe { TexCoordP4ui::is_loaded = false; } }
    match loadfn("TexCoordP4uiv") { ptr if !ptr.is_null() => unsafe { storage::TexCoordP4uiv = transmute(ptr); TexCoordP4uiv::is_loaded = true; }, _ => unsafe { TexCoordP4uiv::is_loaded = false; } }
    match loadfn("TexCoordPointer") { ptr if !ptr.is_null() => unsafe { storage::TexCoordPointer = transmute(ptr); TexCoordPointer::is_loaded = true; }, _ => unsafe { TexCoordPointer::is_loaded = false; } }
    match loadfn("TexCoordPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::TexCoordPointerEXT = transmute(ptr); TexCoordPointerEXT::is_loaded = true; }, _ => unsafe { TexCoordPointerEXT::is_loaded = false; } }
    match loadfn("TexCoordPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::TexCoordPointerListIBM = transmute(ptr); TexCoordPointerListIBM::is_loaded = true; }, _ => unsafe { TexCoordPointerListIBM::is_loaded = false; } }
    match loadfn("TexCoordPointervINTEL") { ptr if !ptr.is_null() => unsafe { storage::TexCoordPointervINTEL = transmute(ptr); TexCoordPointervINTEL::is_loaded = true; }, _ => unsafe { TexCoordPointervINTEL::is_loaded = false; } }
    match loadfn("TexEnvf") { ptr if !ptr.is_null() => unsafe { storage::TexEnvf = transmute(ptr); TexEnvf::is_loaded = true; }, _ => unsafe { TexEnvf::is_loaded = false; } }
    match loadfn("TexEnvfv") { ptr if !ptr.is_null() => unsafe { storage::TexEnvfv = transmute(ptr); TexEnvfv::is_loaded = true; }, _ => unsafe { TexEnvfv::is_loaded = false; } }
    match loadfn("TexEnvi") { ptr if !ptr.is_null() => unsafe { storage::TexEnvi = transmute(ptr); TexEnvi::is_loaded = true; }, _ => unsafe { TexEnvi::is_loaded = false; } }
    match loadfn("TexEnviv") { ptr if !ptr.is_null() => unsafe { storage::TexEnviv = transmute(ptr); TexEnviv::is_loaded = true; }, _ => unsafe { TexEnviv::is_loaded = false; } }
    match loadfn("TexEnvx") { ptr if !ptr.is_null() => unsafe { storage::TexEnvx = transmute(ptr); TexEnvx::is_loaded = true; }, _ => unsafe { TexEnvx::is_loaded = false; } }
    match loadfn("TexEnvxOES") { ptr if !ptr.is_null() => unsafe { storage::TexEnvxOES = transmute(ptr); TexEnvxOES::is_loaded = true; }, _ => unsafe { TexEnvxOES::is_loaded = false; } }
    match loadfn("TexEnvxv") { ptr if !ptr.is_null() => unsafe { storage::TexEnvxv = transmute(ptr); TexEnvxv::is_loaded = true; }, _ => unsafe { TexEnvxv::is_loaded = false; } }
    match loadfn("TexEnvxvOES") { ptr if !ptr.is_null() => unsafe { storage::TexEnvxvOES = transmute(ptr); TexEnvxvOES::is_loaded = true; }, _ => unsafe { TexEnvxvOES::is_loaded = false; } }
    match loadfn("TexFilterFuncSGIS") { ptr if !ptr.is_null() => unsafe { storage::TexFilterFuncSGIS = transmute(ptr); TexFilterFuncSGIS::is_loaded = true; }, _ => unsafe { TexFilterFuncSGIS::is_loaded = false; } }
    match loadfn("TexGend") { ptr if !ptr.is_null() => unsafe { storage::TexGend = transmute(ptr); TexGend::is_loaded = true; }, _ => unsafe { TexGend::is_loaded = false; } }
    match loadfn("TexGendv") { ptr if !ptr.is_null() => unsafe { storage::TexGendv = transmute(ptr); TexGendv::is_loaded = true; }, _ => unsafe { TexGendv::is_loaded = false; } }
    match loadfn("TexGenf") { ptr if !ptr.is_null() => unsafe { storage::TexGenf = transmute(ptr); TexGenf::is_loaded = true; }, _ => unsafe { TexGenf::is_loaded = false; } }
    match loadfn("TexGenfOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenfOES = transmute(ptr); TexGenfOES::is_loaded = true; }, _ => unsafe { TexGenfOES::is_loaded = false; } }
    match loadfn("TexGenfv") { ptr if !ptr.is_null() => unsafe { storage::TexGenfv = transmute(ptr); TexGenfv::is_loaded = true; }, _ => unsafe { TexGenfv::is_loaded = false; } }
    match loadfn("TexGenfvOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenfvOES = transmute(ptr); TexGenfvOES::is_loaded = true; }, _ => unsafe { TexGenfvOES::is_loaded = false; } }
    match loadfn("TexGeni") { ptr if !ptr.is_null() => unsafe { storage::TexGeni = transmute(ptr); TexGeni::is_loaded = true; }, _ => unsafe { TexGeni::is_loaded = false; } }
    match loadfn("TexGeniOES") { ptr if !ptr.is_null() => unsafe { storage::TexGeniOES = transmute(ptr); TexGeniOES::is_loaded = true; }, _ => unsafe { TexGeniOES::is_loaded = false; } }
    match loadfn("TexGeniv") { ptr if !ptr.is_null() => unsafe { storage::TexGeniv = transmute(ptr); TexGeniv::is_loaded = true; }, _ => unsafe { TexGeniv::is_loaded = false; } }
    match loadfn("TexGenivOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenivOES = transmute(ptr); TexGenivOES::is_loaded = true; }, _ => unsafe { TexGenivOES::is_loaded = false; } }
    match loadfn("TexGenxOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenxOES = transmute(ptr); TexGenxOES::is_loaded = true; }, _ => unsafe { TexGenxOES::is_loaded = false; } }
    match loadfn("TexGenxvOES") { ptr if !ptr.is_null() => unsafe { storage::TexGenxvOES = transmute(ptr); TexGenxvOES::is_loaded = true; }, _ => unsafe { TexGenxvOES::is_loaded = false; } }
    match loadfn("TexImage1D") { ptr if !ptr.is_null() => unsafe { storage::TexImage1D = transmute(ptr); TexImage1D::is_loaded = true; }, _ => unsafe { TexImage1D::is_loaded = false; } }
    match loadfn("TexImage2D") { ptr if !ptr.is_null() => unsafe { storage::TexImage2D = transmute(ptr); TexImage2D::is_loaded = true; }, _ => unsafe { TexImage2D::is_loaded = false; } }
    match loadfn("TexImage2DMultisample") { ptr if !ptr.is_null() => unsafe { storage::TexImage2DMultisample = transmute(ptr); TexImage2DMultisample::is_loaded = true; }, _ => unsafe { TexImage2DMultisample::is_loaded = false; } }
    match loadfn("TexImage2DMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::TexImage2DMultisampleCoverageNV = transmute(ptr); TexImage2DMultisampleCoverageNV::is_loaded = true; }, _ => unsafe { TexImage2DMultisampleCoverageNV::is_loaded = false; } }
    match loadfn("TexImage3D") { ptr if !ptr.is_null() => unsafe { storage::TexImage3D = transmute(ptr); TexImage3D::is_loaded = true; }, _ => unsafe { TexImage3D::is_loaded = false; } }
    match loadfn("TexImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexImage3DEXT = transmute(ptr); TexImage3DEXT::is_loaded = true; }, _ => unsafe { TexImage3DEXT::is_loaded = false; } }
    match loadfn("TexImage3DMultisample") { ptr if !ptr.is_null() => unsafe { storage::TexImage3DMultisample = transmute(ptr); TexImage3DMultisample::is_loaded = true; }, _ => unsafe { TexImage3DMultisample::is_loaded = false; } }
    match loadfn("TexImage3DMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::TexImage3DMultisampleCoverageNV = transmute(ptr); TexImage3DMultisampleCoverageNV::is_loaded = true; }, _ => unsafe { TexImage3DMultisampleCoverageNV::is_loaded = false; } }
    match loadfn("TexImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::TexImage3DOES = transmute(ptr); TexImage3DOES::is_loaded = true; }, _ => unsafe { TexImage3DOES::is_loaded = false; } }
    match loadfn("TexImage4DSGIS") { ptr if !ptr.is_null() => unsafe { storage::TexImage4DSGIS = transmute(ptr); TexImage4DSGIS::is_loaded = true; }, _ => unsafe { TexImage4DSGIS::is_loaded = false; } }
    match loadfn("TexPageCommitmentARB") { ptr if !ptr.is_null() => unsafe { storage::TexPageCommitmentARB = transmute(ptr); TexPageCommitmentARB::is_loaded = true; }, _ => unsafe { TexPageCommitmentARB::is_loaded = false; } }
    match loadfn("TexParameterIiv") { ptr if !ptr.is_null() => unsafe { storage::TexParameterIiv = transmute(ptr); TexParameterIiv::is_loaded = true; }, _ => unsafe { TexParameterIiv::is_loaded = false; } }
    match loadfn("TexParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::TexParameterIivEXT = transmute(ptr); TexParameterIivEXT::is_loaded = true; }, _ => unsafe { TexParameterIivEXT::is_loaded = false; } }
    match loadfn("TexParameterIuiv") { ptr if !ptr.is_null() => unsafe { storage::TexParameterIuiv = transmute(ptr); TexParameterIuiv::is_loaded = true; }, _ => unsafe { TexParameterIuiv::is_loaded = false; } }
    match loadfn("TexParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::TexParameterIuivEXT = transmute(ptr); TexParameterIuivEXT::is_loaded = true; }, _ => unsafe { TexParameterIuivEXT::is_loaded = false; } }
    match loadfn("TexParameterf") { ptr if !ptr.is_null() => unsafe { storage::TexParameterf = transmute(ptr); TexParameterf::is_loaded = true; }, _ => unsafe { TexParameterf::is_loaded = false; } }
    match loadfn("TexParameterfv") { ptr if !ptr.is_null() => unsafe { storage::TexParameterfv = transmute(ptr); TexParameterfv::is_loaded = true; }, _ => unsafe { TexParameterfv::is_loaded = false; } }
    match loadfn("TexParameteri") { ptr if !ptr.is_null() => unsafe { storage::TexParameteri = transmute(ptr); TexParameteri::is_loaded = true; }, _ => unsafe { TexParameteri::is_loaded = false; } }
    match loadfn("TexParameteriv") { ptr if !ptr.is_null() => unsafe { storage::TexParameteriv = transmute(ptr); TexParameteriv::is_loaded = true; }, _ => unsafe { TexParameteriv::is_loaded = false; } }
    match loadfn("TexParameterx") { ptr if !ptr.is_null() => unsafe { storage::TexParameterx = transmute(ptr); TexParameterx::is_loaded = true; }, _ => unsafe { TexParameterx::is_loaded = false; } }
    match loadfn("TexParameterxOES") { ptr if !ptr.is_null() => unsafe { storage::TexParameterxOES = transmute(ptr); TexParameterxOES::is_loaded = true; }, _ => unsafe { TexParameterxOES::is_loaded = false; } }
    match loadfn("TexParameterxv") { ptr if !ptr.is_null() => unsafe { storage::TexParameterxv = transmute(ptr); TexParameterxv::is_loaded = true; }, _ => unsafe { TexParameterxv::is_loaded = false; } }
    match loadfn("TexParameterxvOES") { ptr if !ptr.is_null() => unsafe { storage::TexParameterxvOES = transmute(ptr); TexParameterxvOES::is_loaded = true; }, _ => unsafe { TexParameterxvOES::is_loaded = false; } }
    match loadfn("TexRenderbufferNV") { ptr if !ptr.is_null() => unsafe { storage::TexRenderbufferNV = transmute(ptr); TexRenderbufferNV::is_loaded = true; }, _ => unsafe { TexRenderbufferNV::is_loaded = false; } }
    match loadfn("TexStorage1D") { ptr if !ptr.is_null() => unsafe { storage::TexStorage1D = transmute(ptr); TexStorage1D::is_loaded = true; }, _ => unsafe { TexStorage1D::is_loaded = false; } }
    match loadfn("TexStorage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexStorage1DEXT = transmute(ptr); TexStorage1DEXT::is_loaded = true; }, _ => unsafe { TexStorage1DEXT::is_loaded = false; } }
    match loadfn("TexStorage2D") { ptr if !ptr.is_null() => unsafe { storage::TexStorage2D = transmute(ptr); TexStorage2D::is_loaded = true; }, _ => unsafe { TexStorage2D::is_loaded = false; } }
    match loadfn("TexStorage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexStorage2DEXT = transmute(ptr); TexStorage2DEXT::is_loaded = true; }, _ => unsafe { TexStorage2DEXT::is_loaded = false; } }
    match loadfn("TexStorage2DMultisample") { ptr if !ptr.is_null() => unsafe { storage::TexStorage2DMultisample = transmute(ptr); TexStorage2DMultisample::is_loaded = true; }, _ => unsafe { TexStorage2DMultisample::is_loaded = false; } }
    match loadfn("TexStorage3D") { ptr if !ptr.is_null() => unsafe { storage::TexStorage3D = transmute(ptr); TexStorage3D::is_loaded = true; }, _ => unsafe { TexStorage3D::is_loaded = false; } }
    match loadfn("TexStorage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexStorage3DEXT = transmute(ptr); TexStorage3DEXT::is_loaded = true; }, _ => unsafe { TexStorage3DEXT::is_loaded = false; } }
    match loadfn("TexStorage3DMultisample") { ptr if !ptr.is_null() => unsafe { storage::TexStorage3DMultisample = transmute(ptr); TexStorage3DMultisample::is_loaded = true; }, _ => unsafe { TexStorage3DMultisample::is_loaded = false; } }
    match loadfn("TexStorageSparseAMD") { ptr if !ptr.is_null() => unsafe { storage::TexStorageSparseAMD = transmute(ptr); TexStorageSparseAMD::is_loaded = true; }, _ => unsafe { TexStorageSparseAMD::is_loaded = false; } }
    match loadfn("TexSubImage1D") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage1D = transmute(ptr); TexSubImage1D::is_loaded = true; }, _ => unsafe { TexSubImage1D::is_loaded = false; } }
    match loadfn("TexSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage1DEXT = transmute(ptr); TexSubImage1DEXT::is_loaded = true; }, _ => unsafe { TexSubImage1DEXT::is_loaded = false; } }
    match loadfn("TexSubImage2D") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage2D = transmute(ptr); TexSubImage2D::is_loaded = true; }, _ => unsafe { TexSubImage2D::is_loaded = false; } }
    match loadfn("TexSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage2DEXT = transmute(ptr); TexSubImage2DEXT::is_loaded = true; }, _ => unsafe { TexSubImage2DEXT::is_loaded = false; } }
    match loadfn("TexSubImage3D") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage3D = transmute(ptr); TexSubImage3D::is_loaded = true; }, _ => unsafe { TexSubImage3D::is_loaded = false; } }
    match loadfn("TexSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage3DEXT = transmute(ptr); TexSubImage3DEXT::is_loaded = true; }, _ => unsafe { TexSubImage3DEXT::is_loaded = false; } }
    match loadfn("TexSubImage3DOES") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage3DOES = transmute(ptr); TexSubImage3DOES::is_loaded = true; }, _ => unsafe { TexSubImage3DOES::is_loaded = false; } }
    match loadfn("TexSubImage4DSGIS") { ptr if !ptr.is_null() => unsafe { storage::TexSubImage4DSGIS = transmute(ptr); TexSubImage4DSGIS::is_loaded = true; }, _ => unsafe { TexSubImage4DSGIS::is_loaded = false; } }
    match loadfn("TextureBarrierNV") { ptr if !ptr.is_null() => unsafe { storage::TextureBarrierNV = transmute(ptr); TextureBarrierNV::is_loaded = true; }, _ => unsafe { TextureBarrierNV::is_loaded = false; } }
    match loadfn("TextureBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureBufferEXT = transmute(ptr); TextureBufferEXT::is_loaded = true; }, _ => unsafe { TextureBufferEXT::is_loaded = false; } }
    match loadfn("TextureBufferRangeEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureBufferRangeEXT = transmute(ptr); TextureBufferRangeEXT::is_loaded = true; }, _ => unsafe { TextureBufferRangeEXT::is_loaded = false; } }
    match loadfn("TextureColorMaskSGIS") { ptr if !ptr.is_null() => unsafe { storage::TextureColorMaskSGIS = transmute(ptr); TextureColorMaskSGIS::is_loaded = true; }, _ => unsafe { TextureColorMaskSGIS::is_loaded = false; } }
    match loadfn("TextureImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureImage1DEXT = transmute(ptr); TextureImage1DEXT::is_loaded = true; }, _ => unsafe { TextureImage1DEXT::is_loaded = false; } }
    match loadfn("TextureImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureImage2DEXT = transmute(ptr); TextureImage2DEXT::is_loaded = true; }, _ => unsafe { TextureImage2DEXT::is_loaded = false; } }
    match loadfn("TextureImage2DMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::TextureImage2DMultisampleCoverageNV = transmute(ptr); TextureImage2DMultisampleCoverageNV::is_loaded = true; }, _ => unsafe { TextureImage2DMultisampleCoverageNV::is_loaded = false; } }
    match loadfn("TextureImage2DMultisampleNV") { ptr if !ptr.is_null() => unsafe { storage::TextureImage2DMultisampleNV = transmute(ptr); TextureImage2DMultisampleNV::is_loaded = true; }, _ => unsafe { TextureImage2DMultisampleNV::is_loaded = false; } }
    match loadfn("TextureImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureImage3DEXT = transmute(ptr); TextureImage3DEXT::is_loaded = true; }, _ => unsafe { TextureImage3DEXT::is_loaded = false; } }
    match loadfn("TextureImage3DMultisampleCoverageNV") { ptr if !ptr.is_null() => unsafe { storage::TextureImage3DMultisampleCoverageNV = transmute(ptr); TextureImage3DMultisampleCoverageNV::is_loaded = true; }, _ => unsafe { TextureImage3DMultisampleCoverageNV::is_loaded = false; } }
    match loadfn("TextureImage3DMultisampleNV") { ptr if !ptr.is_null() => unsafe { storage::TextureImage3DMultisampleNV = transmute(ptr); TextureImage3DMultisampleNV::is_loaded = true; }, _ => unsafe { TextureImage3DMultisampleNV::is_loaded = false; } }
    match loadfn("TextureLightEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureLightEXT = transmute(ptr); TextureLightEXT::is_loaded = true; }, _ => unsafe { TextureLightEXT::is_loaded = false; } }
    match loadfn("TextureMaterialEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureMaterialEXT = transmute(ptr); TextureMaterialEXT::is_loaded = true; }, _ => unsafe { TextureMaterialEXT::is_loaded = false; } }
    match loadfn("TextureNormalEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureNormalEXT = transmute(ptr); TextureNormalEXT::is_loaded = true; }, _ => unsafe { TextureNormalEXT::is_loaded = false; } }
    match loadfn("TexturePageCommitmentEXT") { ptr if !ptr.is_null() => unsafe { storage::TexturePageCommitmentEXT = transmute(ptr); TexturePageCommitmentEXT::is_loaded = true; }, _ => unsafe { TexturePageCommitmentEXT::is_loaded = false; } }
    match loadfn("TextureParameterIivEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterIivEXT = transmute(ptr); TextureParameterIivEXT::is_loaded = true; }, _ => unsafe { TextureParameterIivEXT::is_loaded = false; } }
    match loadfn("TextureParameterIuivEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterIuivEXT = transmute(ptr); TextureParameterIuivEXT::is_loaded = true; }, _ => unsafe { TextureParameterIuivEXT::is_loaded = false; } }
    match loadfn("TextureParameterfEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterfEXT = transmute(ptr); TextureParameterfEXT::is_loaded = true; }, _ => unsafe { TextureParameterfEXT::is_loaded = false; } }
    match loadfn("TextureParameterfvEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterfvEXT = transmute(ptr); TextureParameterfvEXT::is_loaded = true; }, _ => unsafe { TextureParameterfvEXT::is_loaded = false; } }
    match loadfn("TextureParameteriEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameteriEXT = transmute(ptr); TextureParameteriEXT::is_loaded = true; }, _ => unsafe { TextureParameteriEXT::is_loaded = false; } }
    match loadfn("TextureParameterivEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureParameterivEXT = transmute(ptr); TextureParameterivEXT::is_loaded = true; }, _ => unsafe { TextureParameterivEXT::is_loaded = false; } }
    match loadfn("TextureRangeAPPLE") { ptr if !ptr.is_null() => unsafe { storage::TextureRangeAPPLE = transmute(ptr); TextureRangeAPPLE::is_loaded = true; }, _ => unsafe { TextureRangeAPPLE::is_loaded = false; } }
    match loadfn("TextureRenderbufferEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureRenderbufferEXT = transmute(ptr); TextureRenderbufferEXT::is_loaded = true; }, _ => unsafe { TextureRenderbufferEXT::is_loaded = false; } }
    match loadfn("TextureStorage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage1DEXT = transmute(ptr); TextureStorage1DEXT::is_loaded = true; }, _ => unsafe { TextureStorage1DEXT::is_loaded = false; } }
    match loadfn("TextureStorage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage2DEXT = transmute(ptr); TextureStorage2DEXT::is_loaded = true; }, _ => unsafe { TextureStorage2DEXT::is_loaded = false; } }
    match loadfn("TextureStorage2DMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage2DMultisampleEXT = transmute(ptr); TextureStorage2DMultisampleEXT::is_loaded = true; }, _ => unsafe { TextureStorage2DMultisampleEXT::is_loaded = false; } }
    match loadfn("TextureStorage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage3DEXT = transmute(ptr); TextureStorage3DEXT::is_loaded = true; }, _ => unsafe { TextureStorage3DEXT::is_loaded = false; } }
    match loadfn("TextureStorage3DMultisampleEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureStorage3DMultisampleEXT = transmute(ptr); TextureStorage3DMultisampleEXT::is_loaded = true; }, _ => unsafe { TextureStorage3DMultisampleEXT::is_loaded = false; } }
    match loadfn("TextureStorageSparseAMD") { ptr if !ptr.is_null() => unsafe { storage::TextureStorageSparseAMD = transmute(ptr); TextureStorageSparseAMD::is_loaded = true; }, _ => unsafe { TextureStorageSparseAMD::is_loaded = false; } }
    match loadfn("TextureSubImage1DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureSubImage1DEXT = transmute(ptr); TextureSubImage1DEXT::is_loaded = true; }, _ => unsafe { TextureSubImage1DEXT::is_loaded = false; } }
    match loadfn("TextureSubImage2DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureSubImage2DEXT = transmute(ptr); TextureSubImage2DEXT::is_loaded = true; }, _ => unsafe { TextureSubImage2DEXT::is_loaded = false; } }
    match loadfn("TextureSubImage3DEXT") { ptr if !ptr.is_null() => unsafe { storage::TextureSubImage3DEXT = transmute(ptr); TextureSubImage3DEXT::is_loaded = true; }, _ => unsafe { TextureSubImage3DEXT::is_loaded = false; } }
    match loadfn("TextureView") { ptr if !ptr.is_null() => unsafe { storage::TextureView = transmute(ptr); TextureView::is_loaded = true; }, _ => unsafe { TextureView::is_loaded = false; } }
    match loadfn("TrackMatrixNV") { ptr if !ptr.is_null() => unsafe { storage::TrackMatrixNV = transmute(ptr); TrackMatrixNV::is_loaded = true; }, _ => unsafe { TrackMatrixNV::is_loaded = false; } }
    match loadfn("TransformFeedbackAttribsNV") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackAttribsNV = transmute(ptr); TransformFeedbackAttribsNV::is_loaded = true; }, _ => unsafe { TransformFeedbackAttribsNV::is_loaded = false; } }
    match loadfn("TransformFeedbackStreamAttribsNV") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackStreamAttribsNV = transmute(ptr); TransformFeedbackStreamAttribsNV::is_loaded = true; }, _ => unsafe { TransformFeedbackStreamAttribsNV::is_loaded = false; } }
    match loadfn("TransformFeedbackVaryings") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackVaryings = transmute(ptr); TransformFeedbackVaryings::is_loaded = true; }, _ => unsafe { TransformFeedbackVaryings::is_loaded = false; } }
    match loadfn("TransformFeedbackVaryingsEXT") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackVaryingsEXT = transmute(ptr); TransformFeedbackVaryingsEXT::is_loaded = true; }, _ => unsafe { TransformFeedbackVaryingsEXT::is_loaded = false; } }
    match loadfn("TransformFeedbackVaryingsNV") { ptr if !ptr.is_null() => unsafe { storage::TransformFeedbackVaryingsNV = transmute(ptr); TransformFeedbackVaryingsNV::is_loaded = true; }, _ => unsafe { TransformFeedbackVaryingsNV::is_loaded = false; } }
    match loadfn("TransformPathNV") { ptr if !ptr.is_null() => unsafe { storage::TransformPathNV = transmute(ptr); TransformPathNV::is_loaded = true; }, _ => unsafe { TransformPathNV::is_loaded = false; } }
    match loadfn("Translated") { ptr if !ptr.is_null() => unsafe { storage::Translated = transmute(ptr); Translated::is_loaded = true; }, _ => unsafe { Translated::is_loaded = false; } }
    match loadfn("Translatef") { ptr if !ptr.is_null() => unsafe { storage::Translatef = transmute(ptr); Translatef::is_loaded = true; }, _ => unsafe { Translatef::is_loaded = false; } }
    match loadfn("Translatex") { ptr if !ptr.is_null() => unsafe { storage::Translatex = transmute(ptr); Translatex::is_loaded = true; }, _ => unsafe { Translatex::is_loaded = false; } }
    match loadfn("TranslatexOES") { ptr if !ptr.is_null() => unsafe { storage::TranslatexOES = transmute(ptr); TranslatexOES::is_loaded = true; }, _ => unsafe { TranslatexOES::is_loaded = false; } }
    match loadfn("Uniform1d") { ptr if !ptr.is_null() => unsafe { storage::Uniform1d = transmute(ptr); Uniform1d::is_loaded = true; }, _ => unsafe { Uniform1d::is_loaded = false; } }
    match loadfn("Uniform1dv") { ptr if !ptr.is_null() => unsafe { storage::Uniform1dv = transmute(ptr); Uniform1dv::is_loaded = true; }, _ => unsafe { Uniform1dv::is_loaded = false; } }
    match loadfn("Uniform1f") { ptr if !ptr.is_null() => unsafe { storage::Uniform1f = transmute(ptr); Uniform1f::is_loaded = true; }, _ => unsafe { Uniform1f::is_loaded = false; } }
    match loadfn("Uniform1fARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform1fARB = transmute(ptr); Uniform1fARB::is_loaded = true; }, _ => unsafe { Uniform1fARB::is_loaded = false; } }
    match loadfn("Uniform1fv") { ptr if !ptr.is_null() => unsafe { storage::Uniform1fv = transmute(ptr); Uniform1fv::is_loaded = true; }, _ => unsafe { Uniform1fv::is_loaded = false; } }
    match loadfn("Uniform1fvARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform1fvARB = transmute(ptr); Uniform1fvARB::is_loaded = true; }, _ => unsafe { Uniform1fvARB::is_loaded = false; } }
    match loadfn("Uniform1i") { ptr if !ptr.is_null() => unsafe { storage::Uniform1i = transmute(ptr); Uniform1i::is_loaded = true; }, _ => unsafe { Uniform1i::is_loaded = false; } }
    match loadfn("Uniform1i64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform1i64NV = transmute(ptr); Uniform1i64NV::is_loaded = true; }, _ => unsafe { Uniform1i64NV::is_loaded = false; } }
    match loadfn("Uniform1i64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform1i64vNV = transmute(ptr); Uniform1i64vNV::is_loaded = true; }, _ => unsafe { Uniform1i64vNV::is_loaded = false; } }
    match loadfn("Uniform1iARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform1iARB = transmute(ptr); Uniform1iARB::is_loaded = true; }, _ => unsafe { Uniform1iARB::is_loaded = false; } }
    match loadfn("Uniform1iv") { ptr if !ptr.is_null() => unsafe { storage::Uniform1iv = transmute(ptr); Uniform1iv::is_loaded = true; }, _ => unsafe { Uniform1iv::is_loaded = false; } }
    match loadfn("Uniform1ivARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform1ivARB = transmute(ptr); Uniform1ivARB::is_loaded = true; }, _ => unsafe { Uniform1ivARB::is_loaded = false; } }
    match loadfn("Uniform1ui") { ptr if !ptr.is_null() => unsafe { storage::Uniform1ui = transmute(ptr); Uniform1ui::is_loaded = true; }, _ => unsafe { Uniform1ui::is_loaded = false; } }
    match loadfn("Uniform1ui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform1ui64NV = transmute(ptr); Uniform1ui64NV::is_loaded = true; }, _ => unsafe { Uniform1ui64NV::is_loaded = false; } }
    match loadfn("Uniform1ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform1ui64vNV = transmute(ptr); Uniform1ui64vNV::is_loaded = true; }, _ => unsafe { Uniform1ui64vNV::is_loaded = false; } }
    match loadfn("Uniform1uiEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform1uiEXT = transmute(ptr); Uniform1uiEXT::is_loaded = true; }, _ => unsafe { Uniform1uiEXT::is_loaded = false; } }
    match loadfn("Uniform1uiv") { ptr if !ptr.is_null() => unsafe { storage::Uniform1uiv = transmute(ptr); Uniform1uiv::is_loaded = true; }, _ => unsafe { Uniform1uiv::is_loaded = false; } }
    match loadfn("Uniform1uivEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform1uivEXT = transmute(ptr); Uniform1uivEXT::is_loaded = true; }, _ => unsafe { Uniform1uivEXT::is_loaded = false; } }
    match loadfn("Uniform2d") { ptr if !ptr.is_null() => unsafe { storage::Uniform2d = transmute(ptr); Uniform2d::is_loaded = true; }, _ => unsafe { Uniform2d::is_loaded = false; } }
    match loadfn("Uniform2dv") { ptr if !ptr.is_null() => unsafe { storage::Uniform2dv = transmute(ptr); Uniform2dv::is_loaded = true; }, _ => unsafe { Uniform2dv::is_loaded = false; } }
    match loadfn("Uniform2f") { ptr if !ptr.is_null() => unsafe { storage::Uniform2f = transmute(ptr); Uniform2f::is_loaded = true; }, _ => unsafe { Uniform2f::is_loaded = false; } }
    match loadfn("Uniform2fARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform2fARB = transmute(ptr); Uniform2fARB::is_loaded = true; }, _ => unsafe { Uniform2fARB::is_loaded = false; } }
    match loadfn("Uniform2fv") { ptr if !ptr.is_null() => unsafe { storage::Uniform2fv = transmute(ptr); Uniform2fv::is_loaded = true; }, _ => unsafe { Uniform2fv::is_loaded = false; } }
    match loadfn("Uniform2fvARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform2fvARB = transmute(ptr); Uniform2fvARB::is_loaded = true; }, _ => unsafe { Uniform2fvARB::is_loaded = false; } }
    match loadfn("Uniform2i") { ptr if !ptr.is_null() => unsafe { storage::Uniform2i = transmute(ptr); Uniform2i::is_loaded = true; }, _ => unsafe { Uniform2i::is_loaded = false; } }
    match loadfn("Uniform2i64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform2i64NV = transmute(ptr); Uniform2i64NV::is_loaded = true; }, _ => unsafe { Uniform2i64NV::is_loaded = false; } }
    match loadfn("Uniform2i64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform2i64vNV = transmute(ptr); Uniform2i64vNV::is_loaded = true; }, _ => unsafe { Uniform2i64vNV::is_loaded = false; } }
    match loadfn("Uniform2iARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform2iARB = transmute(ptr); Uniform2iARB::is_loaded = true; }, _ => unsafe { Uniform2iARB::is_loaded = false; } }
    match loadfn("Uniform2iv") { ptr if !ptr.is_null() => unsafe { storage::Uniform2iv = transmute(ptr); Uniform2iv::is_loaded = true; }, _ => unsafe { Uniform2iv::is_loaded = false; } }
    match loadfn("Uniform2ivARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform2ivARB = transmute(ptr); Uniform2ivARB::is_loaded = true; }, _ => unsafe { Uniform2ivARB::is_loaded = false; } }
    match loadfn("Uniform2ui") { ptr if !ptr.is_null() => unsafe { storage::Uniform2ui = transmute(ptr); Uniform2ui::is_loaded = true; }, _ => unsafe { Uniform2ui::is_loaded = false; } }
    match loadfn("Uniform2ui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform2ui64NV = transmute(ptr); Uniform2ui64NV::is_loaded = true; }, _ => unsafe { Uniform2ui64NV::is_loaded = false; } }
    match loadfn("Uniform2ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform2ui64vNV = transmute(ptr); Uniform2ui64vNV::is_loaded = true; }, _ => unsafe { Uniform2ui64vNV::is_loaded = false; } }
    match loadfn("Uniform2uiEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform2uiEXT = transmute(ptr); Uniform2uiEXT::is_loaded = true; }, _ => unsafe { Uniform2uiEXT::is_loaded = false; } }
    match loadfn("Uniform2uiv") { ptr if !ptr.is_null() => unsafe { storage::Uniform2uiv = transmute(ptr); Uniform2uiv::is_loaded = true; }, _ => unsafe { Uniform2uiv::is_loaded = false; } }
    match loadfn("Uniform2uivEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform2uivEXT = transmute(ptr); Uniform2uivEXT::is_loaded = true; }, _ => unsafe { Uniform2uivEXT::is_loaded = false; } }
    match loadfn("Uniform3d") { ptr if !ptr.is_null() => unsafe { storage::Uniform3d = transmute(ptr); Uniform3d::is_loaded = true; }, _ => unsafe { Uniform3d::is_loaded = false; } }
    match loadfn("Uniform3dv") { ptr if !ptr.is_null() => unsafe { storage::Uniform3dv = transmute(ptr); Uniform3dv::is_loaded = true; }, _ => unsafe { Uniform3dv::is_loaded = false; } }
    match loadfn("Uniform3f") { ptr if !ptr.is_null() => unsafe { storage::Uniform3f = transmute(ptr); Uniform3f::is_loaded = true; }, _ => unsafe { Uniform3f::is_loaded = false; } }
    match loadfn("Uniform3fARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform3fARB = transmute(ptr); Uniform3fARB::is_loaded = true; }, _ => unsafe { Uniform3fARB::is_loaded = false; } }
    match loadfn("Uniform3fv") { ptr if !ptr.is_null() => unsafe { storage::Uniform3fv = transmute(ptr); Uniform3fv::is_loaded = true; }, _ => unsafe { Uniform3fv::is_loaded = false; } }
    match loadfn("Uniform3fvARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform3fvARB = transmute(ptr); Uniform3fvARB::is_loaded = true; }, _ => unsafe { Uniform3fvARB::is_loaded = false; } }
    match loadfn("Uniform3i") { ptr if !ptr.is_null() => unsafe { storage::Uniform3i = transmute(ptr); Uniform3i::is_loaded = true; }, _ => unsafe { Uniform3i::is_loaded = false; } }
    match loadfn("Uniform3i64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform3i64NV = transmute(ptr); Uniform3i64NV::is_loaded = true; }, _ => unsafe { Uniform3i64NV::is_loaded = false; } }
    match loadfn("Uniform3i64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform3i64vNV = transmute(ptr); Uniform3i64vNV::is_loaded = true; }, _ => unsafe { Uniform3i64vNV::is_loaded = false; } }
    match loadfn("Uniform3iARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform3iARB = transmute(ptr); Uniform3iARB::is_loaded = true; }, _ => unsafe { Uniform3iARB::is_loaded = false; } }
    match loadfn("Uniform3iv") { ptr if !ptr.is_null() => unsafe { storage::Uniform3iv = transmute(ptr); Uniform3iv::is_loaded = true; }, _ => unsafe { Uniform3iv::is_loaded = false; } }
    match loadfn("Uniform3ivARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform3ivARB = transmute(ptr); Uniform3ivARB::is_loaded = true; }, _ => unsafe { Uniform3ivARB::is_loaded = false; } }
    match loadfn("Uniform3ui") { ptr if !ptr.is_null() => unsafe { storage::Uniform3ui = transmute(ptr); Uniform3ui::is_loaded = true; }, _ => unsafe { Uniform3ui::is_loaded = false; } }
    match loadfn("Uniform3ui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform3ui64NV = transmute(ptr); Uniform3ui64NV::is_loaded = true; }, _ => unsafe { Uniform3ui64NV::is_loaded = false; } }
    match loadfn("Uniform3ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform3ui64vNV = transmute(ptr); Uniform3ui64vNV::is_loaded = true; }, _ => unsafe { Uniform3ui64vNV::is_loaded = false; } }
    match loadfn("Uniform3uiEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform3uiEXT = transmute(ptr); Uniform3uiEXT::is_loaded = true; }, _ => unsafe { Uniform3uiEXT::is_loaded = false; } }
    match loadfn("Uniform3uiv") { ptr if !ptr.is_null() => unsafe { storage::Uniform3uiv = transmute(ptr); Uniform3uiv::is_loaded = true; }, _ => unsafe { Uniform3uiv::is_loaded = false; } }
    match loadfn("Uniform3uivEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform3uivEXT = transmute(ptr); Uniform3uivEXT::is_loaded = true; }, _ => unsafe { Uniform3uivEXT::is_loaded = false; } }
    match loadfn("Uniform4d") { ptr if !ptr.is_null() => unsafe { storage::Uniform4d = transmute(ptr); Uniform4d::is_loaded = true; }, _ => unsafe { Uniform4d::is_loaded = false; } }
    match loadfn("Uniform4dv") { ptr if !ptr.is_null() => unsafe { storage::Uniform4dv = transmute(ptr); Uniform4dv::is_loaded = true; }, _ => unsafe { Uniform4dv::is_loaded = false; } }
    match loadfn("Uniform4f") { ptr if !ptr.is_null() => unsafe { storage::Uniform4f = transmute(ptr); Uniform4f::is_loaded = true; }, _ => unsafe { Uniform4f::is_loaded = false; } }
    match loadfn("Uniform4fARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform4fARB = transmute(ptr); Uniform4fARB::is_loaded = true; }, _ => unsafe { Uniform4fARB::is_loaded = false; } }
    match loadfn("Uniform4fv") { ptr if !ptr.is_null() => unsafe { storage::Uniform4fv = transmute(ptr); Uniform4fv::is_loaded = true; }, _ => unsafe { Uniform4fv::is_loaded = false; } }
    match loadfn("Uniform4fvARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform4fvARB = transmute(ptr); Uniform4fvARB::is_loaded = true; }, _ => unsafe { Uniform4fvARB::is_loaded = false; } }
    match loadfn("Uniform4i") { ptr if !ptr.is_null() => unsafe { storage::Uniform4i = transmute(ptr); Uniform4i::is_loaded = true; }, _ => unsafe { Uniform4i::is_loaded = false; } }
    match loadfn("Uniform4i64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform4i64NV = transmute(ptr); Uniform4i64NV::is_loaded = true; }, _ => unsafe { Uniform4i64NV::is_loaded = false; } }
    match loadfn("Uniform4i64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform4i64vNV = transmute(ptr); Uniform4i64vNV::is_loaded = true; }, _ => unsafe { Uniform4i64vNV::is_loaded = false; } }
    match loadfn("Uniform4iARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform4iARB = transmute(ptr); Uniform4iARB::is_loaded = true; }, _ => unsafe { Uniform4iARB::is_loaded = false; } }
    match loadfn("Uniform4iv") { ptr if !ptr.is_null() => unsafe { storage::Uniform4iv = transmute(ptr); Uniform4iv::is_loaded = true; }, _ => unsafe { Uniform4iv::is_loaded = false; } }
    match loadfn("Uniform4ivARB") { ptr if !ptr.is_null() => unsafe { storage::Uniform4ivARB = transmute(ptr); Uniform4ivARB::is_loaded = true; }, _ => unsafe { Uniform4ivARB::is_loaded = false; } }
    match loadfn("Uniform4ui") { ptr if !ptr.is_null() => unsafe { storage::Uniform4ui = transmute(ptr); Uniform4ui::is_loaded = true; }, _ => unsafe { Uniform4ui::is_loaded = false; } }
    match loadfn("Uniform4ui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniform4ui64NV = transmute(ptr); Uniform4ui64NV::is_loaded = true; }, _ => unsafe { Uniform4ui64NV::is_loaded = false; } }
    match loadfn("Uniform4ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniform4ui64vNV = transmute(ptr); Uniform4ui64vNV::is_loaded = true; }, _ => unsafe { Uniform4ui64vNV::is_loaded = false; } }
    match loadfn("Uniform4uiEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform4uiEXT = transmute(ptr); Uniform4uiEXT::is_loaded = true; }, _ => unsafe { Uniform4uiEXT::is_loaded = false; } }
    match loadfn("Uniform4uiv") { ptr if !ptr.is_null() => unsafe { storage::Uniform4uiv = transmute(ptr); Uniform4uiv::is_loaded = true; }, _ => unsafe { Uniform4uiv::is_loaded = false; } }
    match loadfn("Uniform4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::Uniform4uivEXT = transmute(ptr); Uniform4uivEXT::is_loaded = true; }, _ => unsafe { Uniform4uivEXT::is_loaded = false; } }
    match loadfn("UniformBlockBinding") { ptr if !ptr.is_null() => unsafe { storage::UniformBlockBinding = transmute(ptr); UniformBlockBinding::is_loaded = true; }, _ => unsafe { UniformBlockBinding::is_loaded = false; } }
    match loadfn("UniformBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::UniformBufferEXT = transmute(ptr); UniformBufferEXT::is_loaded = true; }, _ => unsafe { UniformBufferEXT::is_loaded = false; } }
    match loadfn("UniformHandleui64ARB") { ptr if !ptr.is_null() => unsafe { storage::UniformHandleui64ARB = transmute(ptr); UniformHandleui64ARB::is_loaded = true; }, _ => unsafe { UniformHandleui64ARB::is_loaded = false; } }
    match loadfn("UniformHandleui64NV") { ptr if !ptr.is_null() => unsafe { storage::UniformHandleui64NV = transmute(ptr); UniformHandleui64NV::is_loaded = true; }, _ => unsafe { UniformHandleui64NV::is_loaded = false; } }
    match loadfn("UniformHandleui64vARB") { ptr if !ptr.is_null() => unsafe { storage::UniformHandleui64vARB = transmute(ptr); UniformHandleui64vARB::is_loaded = true; }, _ => unsafe { UniformHandleui64vARB::is_loaded = false; } }
    match loadfn("UniformHandleui64vNV") { ptr if !ptr.is_null() => unsafe { storage::UniformHandleui64vNV = transmute(ptr); UniformHandleui64vNV::is_loaded = true; }, _ => unsafe { UniformHandleui64vNV::is_loaded = false; } }
    match loadfn("UniformMatrix2dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2dv = transmute(ptr); UniformMatrix2dv::is_loaded = true; }, _ => unsafe { UniformMatrix2dv::is_loaded = false; } }
    match loadfn("UniformMatrix2fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2fv = transmute(ptr); UniformMatrix2fv::is_loaded = true; }, _ => unsafe { UniformMatrix2fv::is_loaded = false; } }
    match loadfn("UniformMatrix2fvARB") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2fvARB = transmute(ptr); UniformMatrix2fvARB::is_loaded = true; }, _ => unsafe { UniformMatrix2fvARB::is_loaded = false; } }
    match loadfn("UniformMatrix2x3dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2x3dv = transmute(ptr); UniformMatrix2x3dv::is_loaded = true; }, _ => unsafe { UniformMatrix2x3dv::is_loaded = false; } }
    match loadfn("UniformMatrix2x3fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2x3fv = transmute(ptr); UniformMatrix2x3fv::is_loaded = true; }, _ => unsafe { UniformMatrix2x3fv::is_loaded = false; } }
    match loadfn("UniformMatrix2x4dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2x4dv = transmute(ptr); UniformMatrix2x4dv::is_loaded = true; }, _ => unsafe { UniformMatrix2x4dv::is_loaded = false; } }
    match loadfn("UniformMatrix2x4fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix2x4fv = transmute(ptr); UniformMatrix2x4fv::is_loaded = true; }, _ => unsafe { UniformMatrix2x4fv::is_loaded = false; } }
    match loadfn("UniformMatrix3dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3dv = transmute(ptr); UniformMatrix3dv::is_loaded = true; }, _ => unsafe { UniformMatrix3dv::is_loaded = false; } }
    match loadfn("UniformMatrix3fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3fv = transmute(ptr); UniformMatrix3fv::is_loaded = true; }, _ => unsafe { UniformMatrix3fv::is_loaded = false; } }
    match loadfn("UniformMatrix3fvARB") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3fvARB = transmute(ptr); UniformMatrix3fvARB::is_loaded = true; }, _ => unsafe { UniformMatrix3fvARB::is_loaded = false; } }
    match loadfn("UniformMatrix3x2dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3x2dv = transmute(ptr); UniformMatrix3x2dv::is_loaded = true; }, _ => unsafe { UniformMatrix3x2dv::is_loaded = false; } }
    match loadfn("UniformMatrix3x2fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3x2fv = transmute(ptr); UniformMatrix3x2fv::is_loaded = true; }, _ => unsafe { UniformMatrix3x2fv::is_loaded = false; } }
    match loadfn("UniformMatrix3x4dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3x4dv = transmute(ptr); UniformMatrix3x4dv::is_loaded = true; }, _ => unsafe { UniformMatrix3x4dv::is_loaded = false; } }
    match loadfn("UniformMatrix3x4fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix3x4fv = transmute(ptr); UniformMatrix3x4fv::is_loaded = true; }, _ => unsafe { UniformMatrix3x4fv::is_loaded = false; } }
    match loadfn("UniformMatrix4dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4dv = transmute(ptr); UniformMatrix4dv::is_loaded = true; }, _ => unsafe { UniformMatrix4dv::is_loaded = false; } }
    match loadfn("UniformMatrix4fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4fv = transmute(ptr); UniformMatrix4fv::is_loaded = true; }, _ => unsafe { UniformMatrix4fv::is_loaded = false; } }
    match loadfn("UniformMatrix4fvARB") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4fvARB = transmute(ptr); UniformMatrix4fvARB::is_loaded = true; }, _ => unsafe { UniformMatrix4fvARB::is_loaded = false; } }
    match loadfn("UniformMatrix4x2dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4x2dv = transmute(ptr); UniformMatrix4x2dv::is_loaded = true; }, _ => unsafe { UniformMatrix4x2dv::is_loaded = false; } }
    match loadfn("UniformMatrix4x2fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4x2fv = transmute(ptr); UniformMatrix4x2fv::is_loaded = true; }, _ => unsafe { UniformMatrix4x2fv::is_loaded = false; } }
    match loadfn("UniformMatrix4x3dv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4x3dv = transmute(ptr); UniformMatrix4x3dv::is_loaded = true; }, _ => unsafe { UniformMatrix4x3dv::is_loaded = false; } }
    match loadfn("UniformMatrix4x3fv") { ptr if !ptr.is_null() => unsafe { storage::UniformMatrix4x3fv = transmute(ptr); UniformMatrix4x3fv::is_loaded = true; }, _ => unsafe { UniformMatrix4x3fv::is_loaded = false; } }
    match loadfn("UniformSubroutinesuiv") { ptr if !ptr.is_null() => unsafe { storage::UniformSubroutinesuiv = transmute(ptr); UniformSubroutinesuiv::is_loaded = true; }, _ => unsafe { UniformSubroutinesuiv::is_loaded = false; } }
    match loadfn("Uniformui64NV") { ptr if !ptr.is_null() => unsafe { storage::Uniformui64NV = transmute(ptr); Uniformui64NV::is_loaded = true; }, _ => unsafe { Uniformui64NV::is_loaded = false; } }
    match loadfn("Uniformui64vNV") { ptr if !ptr.is_null() => unsafe { storage::Uniformui64vNV = transmute(ptr); Uniformui64vNV::is_loaded = true; }, _ => unsafe { Uniformui64vNV::is_loaded = false; } }
    match loadfn("UnlockArraysEXT") { ptr if !ptr.is_null() => unsafe { storage::UnlockArraysEXT = transmute(ptr); UnlockArraysEXT::is_loaded = true; }, _ => unsafe { UnlockArraysEXT::is_loaded = false; } }
    match loadfn("UnmapBuffer") { ptr if !ptr.is_null() => unsafe { storage::UnmapBuffer = transmute(ptr); UnmapBuffer::is_loaded = true; }, _ => unsafe { UnmapBuffer::is_loaded = false; } }
    match loadfn("UnmapBufferARB") { ptr if !ptr.is_null() => unsafe { storage::UnmapBufferARB = transmute(ptr); UnmapBufferARB::is_loaded = true; }, _ => unsafe { UnmapBufferARB::is_loaded = false; } }
    match loadfn("UnmapBufferOES") { ptr if !ptr.is_null() => unsafe { storage::UnmapBufferOES = transmute(ptr); UnmapBufferOES::is_loaded = true; }, _ => unsafe { UnmapBufferOES::is_loaded = false; } }
    match loadfn("UnmapNamedBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::UnmapNamedBufferEXT = transmute(ptr); UnmapNamedBufferEXT::is_loaded = true; }, _ => unsafe { UnmapNamedBufferEXT::is_loaded = false; } }
    match loadfn("UnmapObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::UnmapObjectBufferATI = transmute(ptr); UnmapObjectBufferATI::is_loaded = true; }, _ => unsafe { UnmapObjectBufferATI::is_loaded = false; } }
    match loadfn("UnmapTexture2DINTEL") { ptr if !ptr.is_null() => unsafe { storage::UnmapTexture2DINTEL = transmute(ptr); UnmapTexture2DINTEL::is_loaded = true; }, _ => unsafe { UnmapTexture2DINTEL::is_loaded = false; } }
    match loadfn("UpdateObjectBufferATI") { ptr if !ptr.is_null() => unsafe { storage::UpdateObjectBufferATI = transmute(ptr); UpdateObjectBufferATI::is_loaded = true; }, _ => unsafe { UpdateObjectBufferATI::is_loaded = false; } }
    match loadfn("UseProgram") { ptr if !ptr.is_null() => unsafe { storage::UseProgram = transmute(ptr); UseProgram::is_loaded = true; }, _ => unsafe { UseProgram::is_loaded = false; } }
    match loadfn("UseProgramObjectARB") { ptr if !ptr.is_null() => unsafe { storage::UseProgramObjectARB = transmute(ptr); UseProgramObjectARB::is_loaded = true; }, _ => unsafe { UseProgramObjectARB::is_loaded = false; } }
    match loadfn("UseProgramStages") { ptr if !ptr.is_null() => unsafe { storage::UseProgramStages = transmute(ptr); UseProgramStages::is_loaded = true; }, _ => unsafe { UseProgramStages::is_loaded = false; } }
    match loadfn("UseProgramStagesEXT") { ptr if !ptr.is_null() => unsafe { storage::UseProgramStagesEXT = transmute(ptr); UseProgramStagesEXT::is_loaded = true; }, _ => unsafe { UseProgramStagesEXT::is_loaded = false; } }
    match loadfn("UseShaderProgramEXT") { ptr if !ptr.is_null() => unsafe { storage::UseShaderProgramEXT = transmute(ptr); UseShaderProgramEXT::is_loaded = true; }, _ => unsafe { UseShaderProgramEXT::is_loaded = false; } }
    match loadfn("VDPAUFiniNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUFiniNV = transmute(ptr); VDPAUFiniNV::is_loaded = true; }, _ => unsafe { VDPAUFiniNV::is_loaded = false; } }
    match loadfn("VDPAUGetSurfaceivNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUGetSurfaceivNV = transmute(ptr); VDPAUGetSurfaceivNV::is_loaded = true; }, _ => unsafe { VDPAUGetSurfaceivNV::is_loaded = false; } }
    match loadfn("VDPAUInitNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUInitNV = transmute(ptr); VDPAUInitNV::is_loaded = true; }, _ => unsafe { VDPAUInitNV::is_loaded = false; } }
    match loadfn("VDPAUIsSurfaceNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUIsSurfaceNV = transmute(ptr); VDPAUIsSurfaceNV::is_loaded = true; }, _ => unsafe { VDPAUIsSurfaceNV::is_loaded = false; } }
    match loadfn("VDPAUMapSurfacesNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUMapSurfacesNV = transmute(ptr); VDPAUMapSurfacesNV::is_loaded = true; }, _ => unsafe { VDPAUMapSurfacesNV::is_loaded = false; } }
    match loadfn("VDPAURegisterOutputSurfaceNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAURegisterOutputSurfaceNV = transmute(ptr); VDPAURegisterOutputSurfaceNV::is_loaded = true; }, _ => unsafe { VDPAURegisterOutputSurfaceNV::is_loaded = false; } }
    match loadfn("VDPAURegisterVideoSurfaceNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAURegisterVideoSurfaceNV = transmute(ptr); VDPAURegisterVideoSurfaceNV::is_loaded = true; }, _ => unsafe { VDPAURegisterVideoSurfaceNV::is_loaded = false; } }
    match loadfn("VDPAUSurfaceAccessNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUSurfaceAccessNV = transmute(ptr); VDPAUSurfaceAccessNV::is_loaded = true; }, _ => unsafe { VDPAUSurfaceAccessNV::is_loaded = false; } }
    match loadfn("VDPAUUnmapSurfacesNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUUnmapSurfacesNV = transmute(ptr); VDPAUUnmapSurfacesNV::is_loaded = true; }, _ => unsafe { VDPAUUnmapSurfacesNV::is_loaded = false; } }
    match loadfn("VDPAUUnregisterSurfaceNV") { ptr if !ptr.is_null() => unsafe { storage::VDPAUUnregisterSurfaceNV = transmute(ptr); VDPAUUnregisterSurfaceNV::is_loaded = true; }, _ => unsafe { VDPAUUnregisterSurfaceNV::is_loaded = false; } }
    match loadfn("ValidateProgram") { ptr if !ptr.is_null() => unsafe { storage::ValidateProgram = transmute(ptr); ValidateProgram::is_loaded = true; }, _ => unsafe { ValidateProgram::is_loaded = false; } }
    match loadfn("ValidateProgramARB") { ptr if !ptr.is_null() => unsafe { storage::ValidateProgramARB = transmute(ptr); ValidateProgramARB::is_loaded = true; }, _ => unsafe { ValidateProgramARB::is_loaded = false; } }
    match loadfn("ValidateProgramPipeline") { ptr if !ptr.is_null() => unsafe { storage::ValidateProgramPipeline = transmute(ptr); ValidateProgramPipeline::is_loaded = true; }, _ => unsafe { ValidateProgramPipeline::is_loaded = false; } }
    match loadfn("ValidateProgramPipelineEXT") { ptr if !ptr.is_null() => unsafe { storage::ValidateProgramPipelineEXT = transmute(ptr); ValidateProgramPipelineEXT::is_loaded = true; }, _ => unsafe { ValidateProgramPipelineEXT::is_loaded = false; } }
    match loadfn("VariantArrayObjectATI") { ptr if !ptr.is_null() => unsafe { storage::VariantArrayObjectATI = transmute(ptr); VariantArrayObjectATI::is_loaded = true; }, _ => unsafe { VariantArrayObjectATI::is_loaded = false; } }
    match loadfn("VariantPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantPointerEXT = transmute(ptr); VariantPointerEXT::is_loaded = true; }, _ => unsafe { VariantPointerEXT::is_loaded = false; } }
    match loadfn("VariantbvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantbvEXT = transmute(ptr); VariantbvEXT::is_loaded = true; }, _ => unsafe { VariantbvEXT::is_loaded = false; } }
    match loadfn("VariantdvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantdvEXT = transmute(ptr); VariantdvEXT::is_loaded = true; }, _ => unsafe { VariantdvEXT::is_loaded = false; } }
    match loadfn("VariantfvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantfvEXT = transmute(ptr); VariantfvEXT::is_loaded = true; }, _ => unsafe { VariantfvEXT::is_loaded = false; } }
    match loadfn("VariantivEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantivEXT = transmute(ptr); VariantivEXT::is_loaded = true; }, _ => unsafe { VariantivEXT::is_loaded = false; } }
    match loadfn("VariantsvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantsvEXT = transmute(ptr); VariantsvEXT::is_loaded = true; }, _ => unsafe { VariantsvEXT::is_loaded = false; } }
    match loadfn("VariantubvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantubvEXT = transmute(ptr); VariantubvEXT::is_loaded = true; }, _ => unsafe { VariantubvEXT::is_loaded = false; } }
    match loadfn("VariantuivEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantuivEXT = transmute(ptr); VariantuivEXT::is_loaded = true; }, _ => unsafe { VariantuivEXT::is_loaded = false; } }
    match loadfn("VariantusvEXT") { ptr if !ptr.is_null() => unsafe { storage::VariantusvEXT = transmute(ptr); VariantusvEXT::is_loaded = true; }, _ => unsafe { VariantusvEXT::is_loaded = false; } }
    match loadfn("Vertex2bOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex2bOES = transmute(ptr); Vertex2bOES::is_loaded = true; }, _ => unsafe { Vertex2bOES::is_loaded = false; } }
    match loadfn("Vertex2bvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex2bvOES = transmute(ptr); Vertex2bvOES::is_loaded = true; }, _ => unsafe { Vertex2bvOES::is_loaded = false; } }
    match loadfn("Vertex2d") { ptr if !ptr.is_null() => unsafe { storage::Vertex2d = transmute(ptr); Vertex2d::is_loaded = true; }, _ => unsafe { Vertex2d::is_loaded = false; } }
    match loadfn("Vertex2dv") { ptr if !ptr.is_null() => unsafe { storage::Vertex2dv = transmute(ptr); Vertex2dv::is_loaded = true; }, _ => unsafe { Vertex2dv::is_loaded = false; } }
    match loadfn("Vertex2f") { ptr if !ptr.is_null() => unsafe { storage::Vertex2f = transmute(ptr); Vertex2f::is_loaded = true; }, _ => unsafe { Vertex2f::is_loaded = false; } }
    match loadfn("Vertex2fv") { ptr if !ptr.is_null() => unsafe { storage::Vertex2fv = transmute(ptr); Vertex2fv::is_loaded = true; }, _ => unsafe { Vertex2fv::is_loaded = false; } }
    match loadfn("Vertex2hNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex2hNV = transmute(ptr); Vertex2hNV::is_loaded = true; }, _ => unsafe { Vertex2hNV::is_loaded = false; } }
    match loadfn("Vertex2hvNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex2hvNV = transmute(ptr); Vertex2hvNV::is_loaded = true; }, _ => unsafe { Vertex2hvNV::is_loaded = false; } }
    match loadfn("Vertex2i") { ptr if !ptr.is_null() => unsafe { storage::Vertex2i = transmute(ptr); Vertex2i::is_loaded = true; }, _ => unsafe { Vertex2i::is_loaded = false; } }
    match loadfn("Vertex2iv") { ptr if !ptr.is_null() => unsafe { storage::Vertex2iv = transmute(ptr); Vertex2iv::is_loaded = true; }, _ => unsafe { Vertex2iv::is_loaded = false; } }
    match loadfn("Vertex2s") { ptr if !ptr.is_null() => unsafe { storage::Vertex2s = transmute(ptr); Vertex2s::is_loaded = true; }, _ => unsafe { Vertex2s::is_loaded = false; } }
    match loadfn("Vertex2sv") { ptr if !ptr.is_null() => unsafe { storage::Vertex2sv = transmute(ptr); Vertex2sv::is_loaded = true; }, _ => unsafe { Vertex2sv::is_loaded = false; } }
    match loadfn("Vertex2xOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex2xOES = transmute(ptr); Vertex2xOES::is_loaded = true; }, _ => unsafe { Vertex2xOES::is_loaded = false; } }
    match loadfn("Vertex2xvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex2xvOES = transmute(ptr); Vertex2xvOES::is_loaded = true; }, _ => unsafe { Vertex2xvOES::is_loaded = false; } }
    match loadfn("Vertex3bOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex3bOES = transmute(ptr); Vertex3bOES::is_loaded = true; }, _ => unsafe { Vertex3bOES::is_loaded = false; } }
    match loadfn("Vertex3bvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex3bvOES = transmute(ptr); Vertex3bvOES::is_loaded = true; }, _ => unsafe { Vertex3bvOES::is_loaded = false; } }
    match loadfn("Vertex3d") { ptr if !ptr.is_null() => unsafe { storage::Vertex3d = transmute(ptr); Vertex3d::is_loaded = true; }, _ => unsafe { Vertex3d::is_loaded = false; } }
    match loadfn("Vertex3dv") { ptr if !ptr.is_null() => unsafe { storage::Vertex3dv = transmute(ptr); Vertex3dv::is_loaded = true; }, _ => unsafe { Vertex3dv::is_loaded = false; } }
    match loadfn("Vertex3f") { ptr if !ptr.is_null() => unsafe { storage::Vertex3f = transmute(ptr); Vertex3f::is_loaded = true; }, _ => unsafe { Vertex3f::is_loaded = false; } }
    match loadfn("Vertex3fv") { ptr if !ptr.is_null() => unsafe { storage::Vertex3fv = transmute(ptr); Vertex3fv::is_loaded = true; }, _ => unsafe { Vertex3fv::is_loaded = false; } }
    match loadfn("Vertex3hNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex3hNV = transmute(ptr); Vertex3hNV::is_loaded = true; }, _ => unsafe { Vertex3hNV::is_loaded = false; } }
    match loadfn("Vertex3hvNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex3hvNV = transmute(ptr); Vertex3hvNV::is_loaded = true; }, _ => unsafe { Vertex3hvNV::is_loaded = false; } }
    match loadfn("Vertex3i") { ptr if !ptr.is_null() => unsafe { storage::Vertex3i = transmute(ptr); Vertex3i::is_loaded = true; }, _ => unsafe { Vertex3i::is_loaded = false; } }
    match loadfn("Vertex3iv") { ptr if !ptr.is_null() => unsafe { storage::Vertex3iv = transmute(ptr); Vertex3iv::is_loaded = true; }, _ => unsafe { Vertex3iv::is_loaded = false; } }
    match loadfn("Vertex3s") { ptr if !ptr.is_null() => unsafe { storage::Vertex3s = transmute(ptr); Vertex3s::is_loaded = true; }, _ => unsafe { Vertex3s::is_loaded = false; } }
    match loadfn("Vertex3sv") { ptr if !ptr.is_null() => unsafe { storage::Vertex3sv = transmute(ptr); Vertex3sv::is_loaded = true; }, _ => unsafe { Vertex3sv::is_loaded = false; } }
    match loadfn("Vertex3xOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex3xOES = transmute(ptr); Vertex3xOES::is_loaded = true; }, _ => unsafe { Vertex3xOES::is_loaded = false; } }
    match loadfn("Vertex3xvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex3xvOES = transmute(ptr); Vertex3xvOES::is_loaded = true; }, _ => unsafe { Vertex3xvOES::is_loaded = false; } }
    match loadfn("Vertex4bOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex4bOES = transmute(ptr); Vertex4bOES::is_loaded = true; }, _ => unsafe { Vertex4bOES::is_loaded = false; } }
    match loadfn("Vertex4bvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex4bvOES = transmute(ptr); Vertex4bvOES::is_loaded = true; }, _ => unsafe { Vertex4bvOES::is_loaded = false; } }
    match loadfn("Vertex4d") { ptr if !ptr.is_null() => unsafe { storage::Vertex4d = transmute(ptr); Vertex4d::is_loaded = true; }, _ => unsafe { Vertex4d::is_loaded = false; } }
    match loadfn("Vertex4dv") { ptr if !ptr.is_null() => unsafe { storage::Vertex4dv = transmute(ptr); Vertex4dv::is_loaded = true; }, _ => unsafe { Vertex4dv::is_loaded = false; } }
    match loadfn("Vertex4f") { ptr if !ptr.is_null() => unsafe { storage::Vertex4f = transmute(ptr); Vertex4f::is_loaded = true; }, _ => unsafe { Vertex4f::is_loaded = false; } }
    match loadfn("Vertex4fv") { ptr if !ptr.is_null() => unsafe { storage::Vertex4fv = transmute(ptr); Vertex4fv::is_loaded = true; }, _ => unsafe { Vertex4fv::is_loaded = false; } }
    match loadfn("Vertex4hNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex4hNV = transmute(ptr); Vertex4hNV::is_loaded = true; }, _ => unsafe { Vertex4hNV::is_loaded = false; } }
    match loadfn("Vertex4hvNV") { ptr if !ptr.is_null() => unsafe { storage::Vertex4hvNV = transmute(ptr); Vertex4hvNV::is_loaded = true; }, _ => unsafe { Vertex4hvNV::is_loaded = false; } }
    match loadfn("Vertex4i") { ptr if !ptr.is_null() => unsafe { storage::Vertex4i = transmute(ptr); Vertex4i::is_loaded = true; }, _ => unsafe { Vertex4i::is_loaded = false; } }
    match loadfn("Vertex4iv") { ptr if !ptr.is_null() => unsafe { storage::Vertex4iv = transmute(ptr); Vertex4iv::is_loaded = true; }, _ => unsafe { Vertex4iv::is_loaded = false; } }
    match loadfn("Vertex4s") { ptr if !ptr.is_null() => unsafe { storage::Vertex4s = transmute(ptr); Vertex4s::is_loaded = true; }, _ => unsafe { Vertex4s::is_loaded = false; } }
    match loadfn("Vertex4sv") { ptr if !ptr.is_null() => unsafe { storage::Vertex4sv = transmute(ptr); Vertex4sv::is_loaded = true; }, _ => unsafe { Vertex4sv::is_loaded = false; } }
    match loadfn("Vertex4xOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex4xOES = transmute(ptr); Vertex4xOES::is_loaded = true; }, _ => unsafe { Vertex4xOES::is_loaded = false; } }
    match loadfn("Vertex4xvOES") { ptr if !ptr.is_null() => unsafe { storage::Vertex4xvOES = transmute(ptr); Vertex4xvOES::is_loaded = true; }, _ => unsafe { Vertex4xvOES::is_loaded = false; } }
    match loadfn("VertexArrayBindVertexBufferEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayBindVertexBufferEXT = transmute(ptr); VertexArrayBindVertexBufferEXT::is_loaded = true; }, _ => unsafe { VertexArrayBindVertexBufferEXT::is_loaded = false; } }
    match loadfn("VertexArrayColorOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayColorOffsetEXT = transmute(ptr); VertexArrayColorOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayColorOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayEdgeFlagOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayEdgeFlagOffsetEXT = transmute(ptr); VertexArrayEdgeFlagOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayEdgeFlagOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayFogCoordOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayFogCoordOffsetEXT = transmute(ptr); VertexArrayFogCoordOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayFogCoordOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayIndexOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayIndexOffsetEXT = transmute(ptr); VertexArrayIndexOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayIndexOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayMultiTexCoordOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayMultiTexCoordOffsetEXT = transmute(ptr); VertexArrayMultiTexCoordOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayMultiTexCoordOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayNormalOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayNormalOffsetEXT = transmute(ptr); VertexArrayNormalOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayNormalOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayParameteriAPPLE") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayParameteriAPPLE = transmute(ptr); VertexArrayParameteriAPPLE::is_loaded = true; }, _ => unsafe { VertexArrayParameteriAPPLE::is_loaded = false; } }
    match loadfn("VertexArrayRangeAPPLE") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayRangeAPPLE = transmute(ptr); VertexArrayRangeAPPLE::is_loaded = true; }, _ => unsafe { VertexArrayRangeAPPLE::is_loaded = false; } }
    match loadfn("VertexArrayRangeNV") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayRangeNV = transmute(ptr); VertexArrayRangeNV::is_loaded = true; }, _ => unsafe { VertexArrayRangeNV::is_loaded = false; } }
    match loadfn("VertexArraySecondaryColorOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArraySecondaryColorOffsetEXT = transmute(ptr); VertexArraySecondaryColorOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArraySecondaryColorOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayTexCoordOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayTexCoordOffsetEXT = transmute(ptr); VertexArrayTexCoordOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayTexCoordOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribBindingEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribBindingEXT = transmute(ptr); VertexArrayVertexAttribBindingEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexAttribBindingEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribFormatEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribFormatEXT = transmute(ptr); VertexArrayVertexAttribFormatEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexAttribFormatEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribIFormatEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribIFormatEXT = transmute(ptr); VertexArrayVertexAttribIFormatEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexAttribIFormatEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribIOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribIOffsetEXT = transmute(ptr); VertexArrayVertexAttribIOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexAttribIOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribLFormatEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribLFormatEXT = transmute(ptr); VertexArrayVertexAttribLFormatEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexAttribLFormatEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribLOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribLOffsetEXT = transmute(ptr); VertexArrayVertexAttribLOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexAttribLOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexAttribOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexAttribOffsetEXT = transmute(ptr); VertexArrayVertexAttribOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexAttribOffsetEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexBindingDivisorEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexBindingDivisorEXT = transmute(ptr); VertexArrayVertexBindingDivisorEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexBindingDivisorEXT::is_loaded = false; } }
    match loadfn("VertexArrayVertexOffsetEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexArrayVertexOffsetEXT = transmute(ptr); VertexArrayVertexOffsetEXT::is_loaded = true; }, _ => unsafe { VertexArrayVertexOffsetEXT::is_loaded = false; } }
    match loadfn("VertexAttrib1d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1d = transmute(ptr); VertexAttrib1d::is_loaded = true; }, _ => unsafe { VertexAttrib1d::is_loaded = false; } }
    match loadfn("VertexAttrib1dARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dARB = transmute(ptr); VertexAttrib1dARB::is_loaded = true; }, _ => unsafe { VertexAttrib1dARB::is_loaded = false; } }
    match loadfn("VertexAttrib1dNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dNV = transmute(ptr); VertexAttrib1dNV::is_loaded = true; }, _ => unsafe { VertexAttrib1dNV::is_loaded = false; } }
    match loadfn("VertexAttrib1dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dv = transmute(ptr); VertexAttrib1dv::is_loaded = true; }, _ => unsafe { VertexAttrib1dv::is_loaded = false; } }
    match loadfn("VertexAttrib1dvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dvARB = transmute(ptr); VertexAttrib1dvARB::is_loaded = true; }, _ => unsafe { VertexAttrib1dvARB::is_loaded = false; } }
    match loadfn("VertexAttrib1dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1dvNV = transmute(ptr); VertexAttrib1dvNV::is_loaded = true; }, _ => unsafe { VertexAttrib1dvNV::is_loaded = false; } }
    match loadfn("VertexAttrib1f") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1f = transmute(ptr); VertexAttrib1f::is_loaded = true; }, _ => unsafe { VertexAttrib1f::is_loaded = false; } }
    match loadfn("VertexAttrib1fARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fARB = transmute(ptr); VertexAttrib1fARB::is_loaded = true; }, _ => unsafe { VertexAttrib1fARB::is_loaded = false; } }
    match loadfn("VertexAttrib1fNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fNV = transmute(ptr); VertexAttrib1fNV::is_loaded = true; }, _ => unsafe { VertexAttrib1fNV::is_loaded = false; } }
    match loadfn("VertexAttrib1fv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fv = transmute(ptr); VertexAttrib1fv::is_loaded = true; }, _ => unsafe { VertexAttrib1fv::is_loaded = false; } }
    match loadfn("VertexAttrib1fvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fvARB = transmute(ptr); VertexAttrib1fvARB::is_loaded = true; }, _ => unsafe { VertexAttrib1fvARB::is_loaded = false; } }
    match loadfn("VertexAttrib1fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1fvNV = transmute(ptr); VertexAttrib1fvNV::is_loaded = true; }, _ => unsafe { VertexAttrib1fvNV::is_loaded = false; } }
    match loadfn("VertexAttrib1hNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1hNV = transmute(ptr); VertexAttrib1hNV::is_loaded = true; }, _ => unsafe { VertexAttrib1hNV::is_loaded = false; } }
    match loadfn("VertexAttrib1hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1hvNV = transmute(ptr); VertexAttrib1hvNV::is_loaded = true; }, _ => unsafe { VertexAttrib1hvNV::is_loaded = false; } }
    match loadfn("VertexAttrib1s") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1s = transmute(ptr); VertexAttrib1s::is_loaded = true; }, _ => unsafe { VertexAttrib1s::is_loaded = false; } }
    match loadfn("VertexAttrib1sARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1sARB = transmute(ptr); VertexAttrib1sARB::is_loaded = true; }, _ => unsafe { VertexAttrib1sARB::is_loaded = false; } }
    match loadfn("VertexAttrib1sNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1sNV = transmute(ptr); VertexAttrib1sNV::is_loaded = true; }, _ => unsafe { VertexAttrib1sNV::is_loaded = false; } }
    match loadfn("VertexAttrib1sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1sv = transmute(ptr); VertexAttrib1sv::is_loaded = true; }, _ => unsafe { VertexAttrib1sv::is_loaded = false; } }
    match loadfn("VertexAttrib1svARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1svARB = transmute(ptr); VertexAttrib1svARB::is_loaded = true; }, _ => unsafe { VertexAttrib1svARB::is_loaded = false; } }
    match loadfn("VertexAttrib1svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib1svNV = transmute(ptr); VertexAttrib1svNV::is_loaded = true; }, _ => unsafe { VertexAttrib1svNV::is_loaded = false; } }
    match loadfn("VertexAttrib2d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2d = transmute(ptr); VertexAttrib2d::is_loaded = true; }, _ => unsafe { VertexAttrib2d::is_loaded = false; } }
    match loadfn("VertexAttrib2dARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dARB = transmute(ptr); VertexAttrib2dARB::is_loaded = true; }, _ => unsafe { VertexAttrib2dARB::is_loaded = false; } }
    match loadfn("VertexAttrib2dNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dNV = transmute(ptr); VertexAttrib2dNV::is_loaded = true; }, _ => unsafe { VertexAttrib2dNV::is_loaded = false; } }
    match loadfn("VertexAttrib2dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dv = transmute(ptr); VertexAttrib2dv::is_loaded = true; }, _ => unsafe { VertexAttrib2dv::is_loaded = false; } }
    match loadfn("VertexAttrib2dvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dvARB = transmute(ptr); VertexAttrib2dvARB::is_loaded = true; }, _ => unsafe { VertexAttrib2dvARB::is_loaded = false; } }
    match loadfn("VertexAttrib2dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2dvNV = transmute(ptr); VertexAttrib2dvNV::is_loaded = true; }, _ => unsafe { VertexAttrib2dvNV::is_loaded = false; } }
    match loadfn("VertexAttrib2f") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2f = transmute(ptr); VertexAttrib2f::is_loaded = true; }, _ => unsafe { VertexAttrib2f::is_loaded = false; } }
    match loadfn("VertexAttrib2fARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fARB = transmute(ptr); VertexAttrib2fARB::is_loaded = true; }, _ => unsafe { VertexAttrib2fARB::is_loaded = false; } }
    match loadfn("VertexAttrib2fNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fNV = transmute(ptr); VertexAttrib2fNV::is_loaded = true; }, _ => unsafe { VertexAttrib2fNV::is_loaded = false; } }
    match loadfn("VertexAttrib2fv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fv = transmute(ptr); VertexAttrib2fv::is_loaded = true; }, _ => unsafe { VertexAttrib2fv::is_loaded = false; } }
    match loadfn("VertexAttrib2fvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fvARB = transmute(ptr); VertexAttrib2fvARB::is_loaded = true; }, _ => unsafe { VertexAttrib2fvARB::is_loaded = false; } }
    match loadfn("VertexAttrib2fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2fvNV = transmute(ptr); VertexAttrib2fvNV::is_loaded = true; }, _ => unsafe { VertexAttrib2fvNV::is_loaded = false; } }
    match loadfn("VertexAttrib2hNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2hNV = transmute(ptr); VertexAttrib2hNV::is_loaded = true; }, _ => unsafe { VertexAttrib2hNV::is_loaded = false; } }
    match loadfn("VertexAttrib2hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2hvNV = transmute(ptr); VertexAttrib2hvNV::is_loaded = true; }, _ => unsafe { VertexAttrib2hvNV::is_loaded = false; } }
    match loadfn("VertexAttrib2s") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2s = transmute(ptr); VertexAttrib2s::is_loaded = true; }, _ => unsafe { VertexAttrib2s::is_loaded = false; } }
    match loadfn("VertexAttrib2sARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2sARB = transmute(ptr); VertexAttrib2sARB::is_loaded = true; }, _ => unsafe { VertexAttrib2sARB::is_loaded = false; } }
    match loadfn("VertexAttrib2sNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2sNV = transmute(ptr); VertexAttrib2sNV::is_loaded = true; }, _ => unsafe { VertexAttrib2sNV::is_loaded = false; } }
    match loadfn("VertexAttrib2sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2sv = transmute(ptr); VertexAttrib2sv::is_loaded = true; }, _ => unsafe { VertexAttrib2sv::is_loaded = false; } }
    match loadfn("VertexAttrib2svARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2svARB = transmute(ptr); VertexAttrib2svARB::is_loaded = true; }, _ => unsafe { VertexAttrib2svARB::is_loaded = false; } }
    match loadfn("VertexAttrib2svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib2svNV = transmute(ptr); VertexAttrib2svNV::is_loaded = true; }, _ => unsafe { VertexAttrib2svNV::is_loaded = false; } }
    match loadfn("VertexAttrib3d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3d = transmute(ptr); VertexAttrib3d::is_loaded = true; }, _ => unsafe { VertexAttrib3d::is_loaded = false; } }
    match loadfn("VertexAttrib3dARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dARB = transmute(ptr); VertexAttrib3dARB::is_loaded = true; }, _ => unsafe { VertexAttrib3dARB::is_loaded = false; } }
    match loadfn("VertexAttrib3dNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dNV = transmute(ptr); VertexAttrib3dNV::is_loaded = true; }, _ => unsafe { VertexAttrib3dNV::is_loaded = false; } }
    match loadfn("VertexAttrib3dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dv = transmute(ptr); VertexAttrib3dv::is_loaded = true; }, _ => unsafe { VertexAttrib3dv::is_loaded = false; } }
    match loadfn("VertexAttrib3dvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dvARB = transmute(ptr); VertexAttrib3dvARB::is_loaded = true; }, _ => unsafe { VertexAttrib3dvARB::is_loaded = false; } }
    match loadfn("VertexAttrib3dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3dvNV = transmute(ptr); VertexAttrib3dvNV::is_loaded = true; }, _ => unsafe { VertexAttrib3dvNV::is_loaded = false; } }
    match loadfn("VertexAttrib3f") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3f = transmute(ptr); VertexAttrib3f::is_loaded = true; }, _ => unsafe { VertexAttrib3f::is_loaded = false; } }
    match loadfn("VertexAttrib3fARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fARB = transmute(ptr); VertexAttrib3fARB::is_loaded = true; }, _ => unsafe { VertexAttrib3fARB::is_loaded = false; } }
    match loadfn("VertexAttrib3fNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fNV = transmute(ptr); VertexAttrib3fNV::is_loaded = true; }, _ => unsafe { VertexAttrib3fNV::is_loaded = false; } }
    match loadfn("VertexAttrib3fv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fv = transmute(ptr); VertexAttrib3fv::is_loaded = true; }, _ => unsafe { VertexAttrib3fv::is_loaded = false; } }
    match loadfn("VertexAttrib3fvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fvARB = transmute(ptr); VertexAttrib3fvARB::is_loaded = true; }, _ => unsafe { VertexAttrib3fvARB::is_loaded = false; } }
    match loadfn("VertexAttrib3fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3fvNV = transmute(ptr); VertexAttrib3fvNV::is_loaded = true; }, _ => unsafe { VertexAttrib3fvNV::is_loaded = false; } }
    match loadfn("VertexAttrib3hNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3hNV = transmute(ptr); VertexAttrib3hNV::is_loaded = true; }, _ => unsafe { VertexAttrib3hNV::is_loaded = false; } }
    match loadfn("VertexAttrib3hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3hvNV = transmute(ptr); VertexAttrib3hvNV::is_loaded = true; }, _ => unsafe { VertexAttrib3hvNV::is_loaded = false; } }
    match loadfn("VertexAttrib3s") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3s = transmute(ptr); VertexAttrib3s::is_loaded = true; }, _ => unsafe { VertexAttrib3s::is_loaded = false; } }
    match loadfn("VertexAttrib3sARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3sARB = transmute(ptr); VertexAttrib3sARB::is_loaded = true; }, _ => unsafe { VertexAttrib3sARB::is_loaded = false; } }
    match loadfn("VertexAttrib3sNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3sNV = transmute(ptr); VertexAttrib3sNV::is_loaded = true; }, _ => unsafe { VertexAttrib3sNV::is_loaded = false; } }
    match loadfn("VertexAttrib3sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3sv = transmute(ptr); VertexAttrib3sv::is_loaded = true; }, _ => unsafe { VertexAttrib3sv::is_loaded = false; } }
    match loadfn("VertexAttrib3svARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3svARB = transmute(ptr); VertexAttrib3svARB::is_loaded = true; }, _ => unsafe { VertexAttrib3svARB::is_loaded = false; } }
    match loadfn("VertexAttrib3svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib3svNV = transmute(ptr); VertexAttrib3svNV::is_loaded = true; }, _ => unsafe { VertexAttrib3svNV::is_loaded = false; } }
    match loadfn("VertexAttrib4Nbv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nbv = transmute(ptr); VertexAttrib4Nbv::is_loaded = true; }, _ => unsafe { VertexAttrib4Nbv::is_loaded = false; } }
    match loadfn("VertexAttrib4NbvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NbvARB = transmute(ptr); VertexAttrib4NbvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4NbvARB::is_loaded = false; } }
    match loadfn("VertexAttrib4Niv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Niv = transmute(ptr); VertexAttrib4Niv::is_loaded = true; }, _ => unsafe { VertexAttrib4Niv::is_loaded = false; } }
    match loadfn("VertexAttrib4NivARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NivARB = transmute(ptr); VertexAttrib4NivARB::is_loaded = true; }, _ => unsafe { VertexAttrib4NivARB::is_loaded = false; } }
    match loadfn("VertexAttrib4Nsv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nsv = transmute(ptr); VertexAttrib4Nsv::is_loaded = true; }, _ => unsafe { VertexAttrib4Nsv::is_loaded = false; } }
    match loadfn("VertexAttrib4NsvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NsvARB = transmute(ptr); VertexAttrib4NsvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4NsvARB::is_loaded = false; } }
    match loadfn("VertexAttrib4Nub") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nub = transmute(ptr); VertexAttrib4Nub::is_loaded = true; }, _ => unsafe { VertexAttrib4Nub::is_loaded = false; } }
    match loadfn("VertexAttrib4NubARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NubARB = transmute(ptr); VertexAttrib4NubARB::is_loaded = true; }, _ => unsafe { VertexAttrib4NubARB::is_loaded = false; } }
    match loadfn("VertexAttrib4Nubv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nubv = transmute(ptr); VertexAttrib4Nubv::is_loaded = true; }, _ => unsafe { VertexAttrib4Nubv::is_loaded = false; } }
    match loadfn("VertexAttrib4NubvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NubvARB = transmute(ptr); VertexAttrib4NubvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4NubvARB::is_loaded = false; } }
    match loadfn("VertexAttrib4Nuiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nuiv = transmute(ptr); VertexAttrib4Nuiv::is_loaded = true; }, _ => unsafe { VertexAttrib4Nuiv::is_loaded = false; } }
    match loadfn("VertexAttrib4NuivARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NuivARB = transmute(ptr); VertexAttrib4NuivARB::is_loaded = true; }, _ => unsafe { VertexAttrib4NuivARB::is_loaded = false; } }
    match loadfn("VertexAttrib4Nusv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4Nusv = transmute(ptr); VertexAttrib4Nusv::is_loaded = true; }, _ => unsafe { VertexAttrib4Nusv::is_loaded = false; } }
    match loadfn("VertexAttrib4NusvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4NusvARB = transmute(ptr); VertexAttrib4NusvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4NusvARB::is_loaded = false; } }
    match loadfn("VertexAttrib4bv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4bv = transmute(ptr); VertexAttrib4bv::is_loaded = true; }, _ => unsafe { VertexAttrib4bv::is_loaded = false; } }
    match loadfn("VertexAttrib4bvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4bvARB = transmute(ptr); VertexAttrib4bvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4bvARB::is_loaded = false; } }
    match loadfn("VertexAttrib4d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4d = transmute(ptr); VertexAttrib4d::is_loaded = true; }, _ => unsafe { VertexAttrib4d::is_loaded = false; } }
    match loadfn("VertexAttrib4dARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dARB = transmute(ptr); VertexAttrib4dARB::is_loaded = true; }, _ => unsafe { VertexAttrib4dARB::is_loaded = false; } }
    match loadfn("VertexAttrib4dNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dNV = transmute(ptr); VertexAttrib4dNV::is_loaded = true; }, _ => unsafe { VertexAttrib4dNV::is_loaded = false; } }
    match loadfn("VertexAttrib4dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dv = transmute(ptr); VertexAttrib4dv::is_loaded = true; }, _ => unsafe { VertexAttrib4dv::is_loaded = false; } }
    match loadfn("VertexAttrib4dvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dvARB = transmute(ptr); VertexAttrib4dvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4dvARB::is_loaded = false; } }
    match loadfn("VertexAttrib4dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4dvNV = transmute(ptr); VertexAttrib4dvNV::is_loaded = true; }, _ => unsafe { VertexAttrib4dvNV::is_loaded = false; } }
    match loadfn("VertexAttrib4f") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4f = transmute(ptr); VertexAttrib4f::is_loaded = true; }, _ => unsafe { VertexAttrib4f::is_loaded = false; } }
    match loadfn("VertexAttrib4fARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fARB = transmute(ptr); VertexAttrib4fARB::is_loaded = true; }, _ => unsafe { VertexAttrib4fARB::is_loaded = false; } }
    match loadfn("VertexAttrib4fNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fNV = transmute(ptr); VertexAttrib4fNV::is_loaded = true; }, _ => unsafe { VertexAttrib4fNV::is_loaded = false; } }
    match loadfn("VertexAttrib4fv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fv = transmute(ptr); VertexAttrib4fv::is_loaded = true; }, _ => unsafe { VertexAttrib4fv::is_loaded = false; } }
    match loadfn("VertexAttrib4fvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fvARB = transmute(ptr); VertexAttrib4fvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4fvARB::is_loaded = false; } }
    match loadfn("VertexAttrib4fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4fvNV = transmute(ptr); VertexAttrib4fvNV::is_loaded = true; }, _ => unsafe { VertexAttrib4fvNV::is_loaded = false; } }
    match loadfn("VertexAttrib4hNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4hNV = transmute(ptr); VertexAttrib4hNV::is_loaded = true; }, _ => unsafe { VertexAttrib4hNV::is_loaded = false; } }
    match loadfn("VertexAttrib4hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4hvNV = transmute(ptr); VertexAttrib4hvNV::is_loaded = true; }, _ => unsafe { VertexAttrib4hvNV::is_loaded = false; } }
    match loadfn("VertexAttrib4iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4iv = transmute(ptr); VertexAttrib4iv::is_loaded = true; }, _ => unsafe { VertexAttrib4iv::is_loaded = false; } }
    match loadfn("VertexAttrib4ivARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ivARB = transmute(ptr); VertexAttrib4ivARB::is_loaded = true; }, _ => unsafe { VertexAttrib4ivARB::is_loaded = false; } }
    match loadfn("VertexAttrib4s") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4s = transmute(ptr); VertexAttrib4s::is_loaded = true; }, _ => unsafe { VertexAttrib4s::is_loaded = false; } }
    match loadfn("VertexAttrib4sARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4sARB = transmute(ptr); VertexAttrib4sARB::is_loaded = true; }, _ => unsafe { VertexAttrib4sARB::is_loaded = false; } }
    match loadfn("VertexAttrib4sNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4sNV = transmute(ptr); VertexAttrib4sNV::is_loaded = true; }, _ => unsafe { VertexAttrib4sNV::is_loaded = false; } }
    match loadfn("VertexAttrib4sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4sv = transmute(ptr); VertexAttrib4sv::is_loaded = true; }, _ => unsafe { VertexAttrib4sv::is_loaded = false; } }
    match loadfn("VertexAttrib4svARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4svARB = transmute(ptr); VertexAttrib4svARB::is_loaded = true; }, _ => unsafe { VertexAttrib4svARB::is_loaded = false; } }
    match loadfn("VertexAttrib4svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4svNV = transmute(ptr); VertexAttrib4svNV::is_loaded = true; }, _ => unsafe { VertexAttrib4svNV::is_loaded = false; } }
    match loadfn("VertexAttrib4ubNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ubNV = transmute(ptr); VertexAttrib4ubNV::is_loaded = true; }, _ => unsafe { VertexAttrib4ubNV::is_loaded = false; } }
    match loadfn("VertexAttrib4ubv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ubv = transmute(ptr); VertexAttrib4ubv::is_loaded = true; }, _ => unsafe { VertexAttrib4ubv::is_loaded = false; } }
    match loadfn("VertexAttrib4ubvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ubvARB = transmute(ptr); VertexAttrib4ubvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4ubvARB::is_loaded = false; } }
    match loadfn("VertexAttrib4ubvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4ubvNV = transmute(ptr); VertexAttrib4ubvNV::is_loaded = true; }, _ => unsafe { VertexAttrib4ubvNV::is_loaded = false; } }
    match loadfn("VertexAttrib4uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4uiv = transmute(ptr); VertexAttrib4uiv::is_loaded = true; }, _ => unsafe { VertexAttrib4uiv::is_loaded = false; } }
    match loadfn("VertexAttrib4uivARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4uivARB = transmute(ptr); VertexAttrib4uivARB::is_loaded = true; }, _ => unsafe { VertexAttrib4uivARB::is_loaded = false; } }
    match loadfn("VertexAttrib4usv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4usv = transmute(ptr); VertexAttrib4usv::is_loaded = true; }, _ => unsafe { VertexAttrib4usv::is_loaded = false; } }
    match loadfn("VertexAttrib4usvARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttrib4usvARB = transmute(ptr); VertexAttrib4usvARB::is_loaded = true; }, _ => unsafe { VertexAttrib4usvARB::is_loaded = false; } }
    match loadfn("VertexAttribArrayObjectATI") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribArrayObjectATI = transmute(ptr); VertexAttribArrayObjectATI::is_loaded = true; }, _ => unsafe { VertexAttribArrayObjectATI::is_loaded = false; } }
    match loadfn("VertexAttribBinding") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribBinding = transmute(ptr); VertexAttribBinding::is_loaded = true; }, _ => unsafe { VertexAttribBinding::is_loaded = false; } }
    match loadfn("VertexAttribDivisor") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribDivisor = transmute(ptr); VertexAttribDivisor::is_loaded = true; }, _ => unsafe { VertexAttribDivisor::is_loaded = false; } }
    match loadfn("VertexAttribDivisorANGLE") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribDivisorANGLE = transmute(ptr); VertexAttribDivisorANGLE::is_loaded = true; }, _ => unsafe { VertexAttribDivisorANGLE::is_loaded = false; } }
    match loadfn("VertexAttribDivisorARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribDivisorARB = transmute(ptr); VertexAttribDivisorARB::is_loaded = true; }, _ => unsafe { VertexAttribDivisorARB::is_loaded = false; } }
    match loadfn("VertexAttribDivisorNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribDivisorNV = transmute(ptr); VertexAttribDivisorNV::is_loaded = true; }, _ => unsafe { VertexAttribDivisorNV::is_loaded = false; } }
    match loadfn("VertexAttribFormat") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribFormat = transmute(ptr); VertexAttribFormat::is_loaded = true; }, _ => unsafe { VertexAttribFormat::is_loaded = false; } }
    match loadfn("VertexAttribFormatNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribFormatNV = transmute(ptr); VertexAttribFormatNV::is_loaded = true; }, _ => unsafe { VertexAttribFormatNV::is_loaded = false; } }
    match loadfn("VertexAttribI1i") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1i = transmute(ptr); VertexAttribI1i::is_loaded = true; }, _ => unsafe { VertexAttribI1i::is_loaded = false; } }
    match loadfn("VertexAttribI1iEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1iEXT = transmute(ptr); VertexAttribI1iEXT::is_loaded = true; }, _ => unsafe { VertexAttribI1iEXT::is_loaded = false; } }
    match loadfn("VertexAttribI1iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1iv = transmute(ptr); VertexAttribI1iv::is_loaded = true; }, _ => unsafe { VertexAttribI1iv::is_loaded = false; } }
    match loadfn("VertexAttribI1ivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1ivEXT = transmute(ptr); VertexAttribI1ivEXT::is_loaded = true; }, _ => unsafe { VertexAttribI1ivEXT::is_loaded = false; } }
    match loadfn("VertexAttribI1ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1ui = transmute(ptr); VertexAttribI1ui::is_loaded = true; }, _ => unsafe { VertexAttribI1ui::is_loaded = false; } }
    match loadfn("VertexAttribI1uiEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1uiEXT = transmute(ptr); VertexAttribI1uiEXT::is_loaded = true; }, _ => unsafe { VertexAttribI1uiEXT::is_loaded = false; } }
    match loadfn("VertexAttribI1uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1uiv = transmute(ptr); VertexAttribI1uiv::is_loaded = true; }, _ => unsafe { VertexAttribI1uiv::is_loaded = false; } }
    match loadfn("VertexAttribI1uivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI1uivEXT = transmute(ptr); VertexAttribI1uivEXT::is_loaded = true; }, _ => unsafe { VertexAttribI1uivEXT::is_loaded = false; } }
    match loadfn("VertexAttribI2i") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2i = transmute(ptr); VertexAttribI2i::is_loaded = true; }, _ => unsafe { VertexAttribI2i::is_loaded = false; } }
    match loadfn("VertexAttribI2iEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2iEXT = transmute(ptr); VertexAttribI2iEXT::is_loaded = true; }, _ => unsafe { VertexAttribI2iEXT::is_loaded = false; } }
    match loadfn("VertexAttribI2iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2iv = transmute(ptr); VertexAttribI2iv::is_loaded = true; }, _ => unsafe { VertexAttribI2iv::is_loaded = false; } }
    match loadfn("VertexAttribI2ivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2ivEXT = transmute(ptr); VertexAttribI2ivEXT::is_loaded = true; }, _ => unsafe { VertexAttribI2ivEXT::is_loaded = false; } }
    match loadfn("VertexAttribI2ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2ui = transmute(ptr); VertexAttribI2ui::is_loaded = true; }, _ => unsafe { VertexAttribI2ui::is_loaded = false; } }
    match loadfn("VertexAttribI2uiEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2uiEXT = transmute(ptr); VertexAttribI2uiEXT::is_loaded = true; }, _ => unsafe { VertexAttribI2uiEXT::is_loaded = false; } }
    match loadfn("VertexAttribI2uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2uiv = transmute(ptr); VertexAttribI2uiv::is_loaded = true; }, _ => unsafe { VertexAttribI2uiv::is_loaded = false; } }
    match loadfn("VertexAttribI2uivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI2uivEXT = transmute(ptr); VertexAttribI2uivEXT::is_loaded = true; }, _ => unsafe { VertexAttribI2uivEXT::is_loaded = false; } }
    match loadfn("VertexAttribI3i") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3i = transmute(ptr); VertexAttribI3i::is_loaded = true; }, _ => unsafe { VertexAttribI3i::is_loaded = false; } }
    match loadfn("VertexAttribI3iEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3iEXT = transmute(ptr); VertexAttribI3iEXT::is_loaded = true; }, _ => unsafe { VertexAttribI3iEXT::is_loaded = false; } }
    match loadfn("VertexAttribI3iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3iv = transmute(ptr); VertexAttribI3iv::is_loaded = true; }, _ => unsafe { VertexAttribI3iv::is_loaded = false; } }
    match loadfn("VertexAttribI3ivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3ivEXT = transmute(ptr); VertexAttribI3ivEXT::is_loaded = true; }, _ => unsafe { VertexAttribI3ivEXT::is_loaded = false; } }
    match loadfn("VertexAttribI3ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3ui = transmute(ptr); VertexAttribI3ui::is_loaded = true; }, _ => unsafe { VertexAttribI3ui::is_loaded = false; } }
    match loadfn("VertexAttribI3uiEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3uiEXT = transmute(ptr); VertexAttribI3uiEXT::is_loaded = true; }, _ => unsafe { VertexAttribI3uiEXT::is_loaded = false; } }
    match loadfn("VertexAttribI3uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3uiv = transmute(ptr); VertexAttribI3uiv::is_loaded = true; }, _ => unsafe { VertexAttribI3uiv::is_loaded = false; } }
    match loadfn("VertexAttribI3uivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI3uivEXT = transmute(ptr); VertexAttribI3uivEXT::is_loaded = true; }, _ => unsafe { VertexAttribI3uivEXT::is_loaded = false; } }
    match loadfn("VertexAttribI4bv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4bv = transmute(ptr); VertexAttribI4bv::is_loaded = true; }, _ => unsafe { VertexAttribI4bv::is_loaded = false; } }
    match loadfn("VertexAttribI4bvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4bvEXT = transmute(ptr); VertexAttribI4bvEXT::is_loaded = true; }, _ => unsafe { VertexAttribI4bvEXT::is_loaded = false; } }
    match loadfn("VertexAttribI4i") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4i = transmute(ptr); VertexAttribI4i::is_loaded = true; }, _ => unsafe { VertexAttribI4i::is_loaded = false; } }
    match loadfn("VertexAttribI4iEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4iEXT = transmute(ptr); VertexAttribI4iEXT::is_loaded = true; }, _ => unsafe { VertexAttribI4iEXT::is_loaded = false; } }
    match loadfn("VertexAttribI4iv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4iv = transmute(ptr); VertexAttribI4iv::is_loaded = true; }, _ => unsafe { VertexAttribI4iv::is_loaded = false; } }
    match loadfn("VertexAttribI4ivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4ivEXT = transmute(ptr); VertexAttribI4ivEXT::is_loaded = true; }, _ => unsafe { VertexAttribI4ivEXT::is_loaded = false; } }
    match loadfn("VertexAttribI4sv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4sv = transmute(ptr); VertexAttribI4sv::is_loaded = true; }, _ => unsafe { VertexAttribI4sv::is_loaded = false; } }
    match loadfn("VertexAttribI4svEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4svEXT = transmute(ptr); VertexAttribI4svEXT::is_loaded = true; }, _ => unsafe { VertexAttribI4svEXT::is_loaded = false; } }
    match loadfn("VertexAttribI4ubv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4ubv = transmute(ptr); VertexAttribI4ubv::is_loaded = true; }, _ => unsafe { VertexAttribI4ubv::is_loaded = false; } }
    match loadfn("VertexAttribI4ubvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4ubvEXT = transmute(ptr); VertexAttribI4ubvEXT::is_loaded = true; }, _ => unsafe { VertexAttribI4ubvEXT::is_loaded = false; } }
    match loadfn("VertexAttribI4ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4ui = transmute(ptr); VertexAttribI4ui::is_loaded = true; }, _ => unsafe { VertexAttribI4ui::is_loaded = false; } }
    match loadfn("VertexAttribI4uiEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4uiEXT = transmute(ptr); VertexAttribI4uiEXT::is_loaded = true; }, _ => unsafe { VertexAttribI4uiEXT::is_loaded = false; } }
    match loadfn("VertexAttribI4uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4uiv = transmute(ptr); VertexAttribI4uiv::is_loaded = true; }, _ => unsafe { VertexAttribI4uiv::is_loaded = false; } }
    match loadfn("VertexAttribI4uivEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4uivEXT = transmute(ptr); VertexAttribI4uivEXT::is_loaded = true; }, _ => unsafe { VertexAttribI4uivEXT::is_loaded = false; } }
    match loadfn("VertexAttribI4usv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4usv = transmute(ptr); VertexAttribI4usv::is_loaded = true; }, _ => unsafe { VertexAttribI4usv::is_loaded = false; } }
    match loadfn("VertexAttribI4usvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribI4usvEXT = transmute(ptr); VertexAttribI4usvEXT::is_loaded = true; }, _ => unsafe { VertexAttribI4usvEXT::is_loaded = false; } }
    match loadfn("VertexAttribIFormat") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribIFormat = transmute(ptr); VertexAttribIFormat::is_loaded = true; }, _ => unsafe { VertexAttribIFormat::is_loaded = false; } }
    match loadfn("VertexAttribIFormatNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribIFormatNV = transmute(ptr); VertexAttribIFormatNV::is_loaded = true; }, _ => unsafe { VertexAttribIFormatNV::is_loaded = false; } }
    match loadfn("VertexAttribIPointer") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribIPointer = transmute(ptr); VertexAttribIPointer::is_loaded = true; }, _ => unsafe { VertexAttribIPointer::is_loaded = false; } }
    match loadfn("VertexAttribIPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribIPointerEXT = transmute(ptr); VertexAttribIPointerEXT::is_loaded = true; }, _ => unsafe { VertexAttribIPointerEXT::is_loaded = false; } }
    match loadfn("VertexAttribL1d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1d = transmute(ptr); VertexAttribL1d::is_loaded = true; }, _ => unsafe { VertexAttribL1d::is_loaded = false; } }
    match loadfn("VertexAttribL1dEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1dEXT = transmute(ptr); VertexAttribL1dEXT::is_loaded = true; }, _ => unsafe { VertexAttribL1dEXT::is_loaded = false; } }
    match loadfn("VertexAttribL1dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1dv = transmute(ptr); VertexAttribL1dv::is_loaded = true; }, _ => unsafe { VertexAttribL1dv::is_loaded = false; } }
    match loadfn("VertexAttribL1dvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1dvEXT = transmute(ptr); VertexAttribL1dvEXT::is_loaded = true; }, _ => unsafe { VertexAttribL1dvEXT::is_loaded = false; } }
    match loadfn("VertexAttribL1i64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1i64NV = transmute(ptr); VertexAttribL1i64NV::is_loaded = true; }, _ => unsafe { VertexAttribL1i64NV::is_loaded = false; } }
    match loadfn("VertexAttribL1i64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1i64vNV = transmute(ptr); VertexAttribL1i64vNV::is_loaded = true; }, _ => unsafe { VertexAttribL1i64vNV::is_loaded = false; } }
    match loadfn("VertexAttribL1ui64ARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1ui64ARB = transmute(ptr); VertexAttribL1ui64ARB::is_loaded = true; }, _ => unsafe { VertexAttribL1ui64ARB::is_loaded = false; } }
    match loadfn("VertexAttribL1ui64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1ui64NV = transmute(ptr); VertexAttribL1ui64NV::is_loaded = true; }, _ => unsafe { VertexAttribL1ui64NV::is_loaded = false; } }
    match loadfn("VertexAttribL1ui64vARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1ui64vARB = transmute(ptr); VertexAttribL1ui64vARB::is_loaded = true; }, _ => unsafe { VertexAttribL1ui64vARB::is_loaded = false; } }
    match loadfn("VertexAttribL1ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL1ui64vNV = transmute(ptr); VertexAttribL1ui64vNV::is_loaded = true; }, _ => unsafe { VertexAttribL1ui64vNV::is_loaded = false; } }
    match loadfn("VertexAttribL2d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2d = transmute(ptr); VertexAttribL2d::is_loaded = true; }, _ => unsafe { VertexAttribL2d::is_loaded = false; } }
    match loadfn("VertexAttribL2dEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2dEXT = transmute(ptr); VertexAttribL2dEXT::is_loaded = true; }, _ => unsafe { VertexAttribL2dEXT::is_loaded = false; } }
    match loadfn("VertexAttribL2dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2dv = transmute(ptr); VertexAttribL2dv::is_loaded = true; }, _ => unsafe { VertexAttribL2dv::is_loaded = false; } }
    match loadfn("VertexAttribL2dvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2dvEXT = transmute(ptr); VertexAttribL2dvEXT::is_loaded = true; }, _ => unsafe { VertexAttribL2dvEXT::is_loaded = false; } }
    match loadfn("VertexAttribL2i64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2i64NV = transmute(ptr); VertexAttribL2i64NV::is_loaded = true; }, _ => unsafe { VertexAttribL2i64NV::is_loaded = false; } }
    match loadfn("VertexAttribL2i64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2i64vNV = transmute(ptr); VertexAttribL2i64vNV::is_loaded = true; }, _ => unsafe { VertexAttribL2i64vNV::is_loaded = false; } }
    match loadfn("VertexAttribL2ui64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2ui64NV = transmute(ptr); VertexAttribL2ui64NV::is_loaded = true; }, _ => unsafe { VertexAttribL2ui64NV::is_loaded = false; } }
    match loadfn("VertexAttribL2ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL2ui64vNV = transmute(ptr); VertexAttribL2ui64vNV::is_loaded = true; }, _ => unsafe { VertexAttribL2ui64vNV::is_loaded = false; } }
    match loadfn("VertexAttribL3d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3d = transmute(ptr); VertexAttribL3d::is_loaded = true; }, _ => unsafe { VertexAttribL3d::is_loaded = false; } }
    match loadfn("VertexAttribL3dEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3dEXT = transmute(ptr); VertexAttribL3dEXT::is_loaded = true; }, _ => unsafe { VertexAttribL3dEXT::is_loaded = false; } }
    match loadfn("VertexAttribL3dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3dv = transmute(ptr); VertexAttribL3dv::is_loaded = true; }, _ => unsafe { VertexAttribL3dv::is_loaded = false; } }
    match loadfn("VertexAttribL3dvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3dvEXT = transmute(ptr); VertexAttribL3dvEXT::is_loaded = true; }, _ => unsafe { VertexAttribL3dvEXT::is_loaded = false; } }
    match loadfn("VertexAttribL3i64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3i64NV = transmute(ptr); VertexAttribL3i64NV::is_loaded = true; }, _ => unsafe { VertexAttribL3i64NV::is_loaded = false; } }
    match loadfn("VertexAttribL3i64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3i64vNV = transmute(ptr); VertexAttribL3i64vNV::is_loaded = true; }, _ => unsafe { VertexAttribL3i64vNV::is_loaded = false; } }
    match loadfn("VertexAttribL3ui64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3ui64NV = transmute(ptr); VertexAttribL3ui64NV::is_loaded = true; }, _ => unsafe { VertexAttribL3ui64NV::is_loaded = false; } }
    match loadfn("VertexAttribL3ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL3ui64vNV = transmute(ptr); VertexAttribL3ui64vNV::is_loaded = true; }, _ => unsafe { VertexAttribL3ui64vNV::is_loaded = false; } }
    match loadfn("VertexAttribL4d") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4d = transmute(ptr); VertexAttribL4d::is_loaded = true; }, _ => unsafe { VertexAttribL4d::is_loaded = false; } }
    match loadfn("VertexAttribL4dEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4dEXT = transmute(ptr); VertexAttribL4dEXT::is_loaded = true; }, _ => unsafe { VertexAttribL4dEXT::is_loaded = false; } }
    match loadfn("VertexAttribL4dv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4dv = transmute(ptr); VertexAttribL4dv::is_loaded = true; }, _ => unsafe { VertexAttribL4dv::is_loaded = false; } }
    match loadfn("VertexAttribL4dvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4dvEXT = transmute(ptr); VertexAttribL4dvEXT::is_loaded = true; }, _ => unsafe { VertexAttribL4dvEXT::is_loaded = false; } }
    match loadfn("VertexAttribL4i64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4i64NV = transmute(ptr); VertexAttribL4i64NV::is_loaded = true; }, _ => unsafe { VertexAttribL4i64NV::is_loaded = false; } }
    match loadfn("VertexAttribL4i64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4i64vNV = transmute(ptr); VertexAttribL4i64vNV::is_loaded = true; }, _ => unsafe { VertexAttribL4i64vNV::is_loaded = false; } }
    match loadfn("VertexAttribL4ui64NV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4ui64NV = transmute(ptr); VertexAttribL4ui64NV::is_loaded = true; }, _ => unsafe { VertexAttribL4ui64NV::is_loaded = false; } }
    match loadfn("VertexAttribL4ui64vNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribL4ui64vNV = transmute(ptr); VertexAttribL4ui64vNV::is_loaded = true; }, _ => unsafe { VertexAttribL4ui64vNV::is_loaded = false; } }
    match loadfn("VertexAttribLFormat") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribLFormat = transmute(ptr); VertexAttribLFormat::is_loaded = true; }, _ => unsafe { VertexAttribLFormat::is_loaded = false; } }
    match loadfn("VertexAttribLFormatNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribLFormatNV = transmute(ptr); VertexAttribLFormatNV::is_loaded = true; }, _ => unsafe { VertexAttribLFormatNV::is_loaded = false; } }
    match loadfn("VertexAttribLPointer") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribLPointer = transmute(ptr); VertexAttribLPointer::is_loaded = true; }, _ => unsafe { VertexAttribLPointer::is_loaded = false; } }
    match loadfn("VertexAttribLPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribLPointerEXT = transmute(ptr); VertexAttribLPointerEXT::is_loaded = true; }, _ => unsafe { VertexAttribLPointerEXT::is_loaded = false; } }
    match loadfn("VertexAttribP1ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP1ui = transmute(ptr); VertexAttribP1ui::is_loaded = true; }, _ => unsafe { VertexAttribP1ui::is_loaded = false; } }
    match loadfn("VertexAttribP1uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP1uiv = transmute(ptr); VertexAttribP1uiv::is_loaded = true; }, _ => unsafe { VertexAttribP1uiv::is_loaded = false; } }
    match loadfn("VertexAttribP2ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP2ui = transmute(ptr); VertexAttribP2ui::is_loaded = true; }, _ => unsafe { VertexAttribP2ui::is_loaded = false; } }
    match loadfn("VertexAttribP2uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP2uiv = transmute(ptr); VertexAttribP2uiv::is_loaded = true; }, _ => unsafe { VertexAttribP2uiv::is_loaded = false; } }
    match loadfn("VertexAttribP3ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP3ui = transmute(ptr); VertexAttribP3ui::is_loaded = true; }, _ => unsafe { VertexAttribP3ui::is_loaded = false; } }
    match loadfn("VertexAttribP3uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP3uiv = transmute(ptr); VertexAttribP3uiv::is_loaded = true; }, _ => unsafe { VertexAttribP3uiv::is_loaded = false; } }
    match loadfn("VertexAttribP4ui") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP4ui = transmute(ptr); VertexAttribP4ui::is_loaded = true; }, _ => unsafe { VertexAttribP4ui::is_loaded = false; } }
    match loadfn("VertexAttribP4uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribP4uiv = transmute(ptr); VertexAttribP4uiv::is_loaded = true; }, _ => unsafe { VertexAttribP4uiv::is_loaded = false; } }
    match loadfn("VertexAttribParameteriAMD") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribParameteriAMD = transmute(ptr); VertexAttribParameteriAMD::is_loaded = true; }, _ => unsafe { VertexAttribParameteriAMD::is_loaded = false; } }
    match loadfn("VertexAttribPointer") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribPointer = transmute(ptr); VertexAttribPointer::is_loaded = true; }, _ => unsafe { VertexAttribPointer::is_loaded = false; } }
    match loadfn("VertexAttribPointerARB") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribPointerARB = transmute(ptr); VertexAttribPointerARB::is_loaded = true; }, _ => unsafe { VertexAttribPointerARB::is_loaded = false; } }
    match loadfn("VertexAttribPointerNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribPointerNV = transmute(ptr); VertexAttribPointerNV::is_loaded = true; }, _ => unsafe { VertexAttribPointerNV::is_loaded = false; } }
    match loadfn("VertexAttribs1dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs1dvNV = transmute(ptr); VertexAttribs1dvNV::is_loaded = true; }, _ => unsafe { VertexAttribs1dvNV::is_loaded = false; } }
    match loadfn("VertexAttribs1fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs1fvNV = transmute(ptr); VertexAttribs1fvNV::is_loaded = true; }, _ => unsafe { VertexAttribs1fvNV::is_loaded = false; } }
    match loadfn("VertexAttribs1hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs1hvNV = transmute(ptr); VertexAttribs1hvNV::is_loaded = true; }, _ => unsafe { VertexAttribs1hvNV::is_loaded = false; } }
    match loadfn("VertexAttribs1svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs1svNV = transmute(ptr); VertexAttribs1svNV::is_loaded = true; }, _ => unsafe { VertexAttribs1svNV::is_loaded = false; } }
    match loadfn("VertexAttribs2dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs2dvNV = transmute(ptr); VertexAttribs2dvNV::is_loaded = true; }, _ => unsafe { VertexAttribs2dvNV::is_loaded = false; } }
    match loadfn("VertexAttribs2fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs2fvNV = transmute(ptr); VertexAttribs2fvNV::is_loaded = true; }, _ => unsafe { VertexAttribs2fvNV::is_loaded = false; } }
    match loadfn("VertexAttribs2hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs2hvNV = transmute(ptr); VertexAttribs2hvNV::is_loaded = true; }, _ => unsafe { VertexAttribs2hvNV::is_loaded = false; } }
    match loadfn("VertexAttribs2svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs2svNV = transmute(ptr); VertexAttribs2svNV::is_loaded = true; }, _ => unsafe { VertexAttribs2svNV::is_loaded = false; } }
    match loadfn("VertexAttribs3dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs3dvNV = transmute(ptr); VertexAttribs3dvNV::is_loaded = true; }, _ => unsafe { VertexAttribs3dvNV::is_loaded = false; } }
    match loadfn("VertexAttribs3fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs3fvNV = transmute(ptr); VertexAttribs3fvNV::is_loaded = true; }, _ => unsafe { VertexAttribs3fvNV::is_loaded = false; } }
    match loadfn("VertexAttribs3hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs3hvNV = transmute(ptr); VertexAttribs3hvNV::is_loaded = true; }, _ => unsafe { VertexAttribs3hvNV::is_loaded = false; } }
    match loadfn("VertexAttribs3svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs3svNV = transmute(ptr); VertexAttribs3svNV::is_loaded = true; }, _ => unsafe { VertexAttribs3svNV::is_loaded = false; } }
    match loadfn("VertexAttribs4dvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4dvNV = transmute(ptr); VertexAttribs4dvNV::is_loaded = true; }, _ => unsafe { VertexAttribs4dvNV::is_loaded = false; } }
    match loadfn("VertexAttribs4fvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4fvNV = transmute(ptr); VertexAttribs4fvNV::is_loaded = true; }, _ => unsafe { VertexAttribs4fvNV::is_loaded = false; } }
    match loadfn("VertexAttribs4hvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4hvNV = transmute(ptr); VertexAttribs4hvNV::is_loaded = true; }, _ => unsafe { VertexAttribs4hvNV::is_loaded = false; } }
    match loadfn("VertexAttribs4svNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4svNV = transmute(ptr); VertexAttribs4svNV::is_loaded = true; }, _ => unsafe { VertexAttribs4svNV::is_loaded = false; } }
    match loadfn("VertexAttribs4ubvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexAttribs4ubvNV = transmute(ptr); VertexAttribs4ubvNV::is_loaded = true; }, _ => unsafe { VertexAttribs4ubvNV::is_loaded = false; } }
    match loadfn("VertexBindingDivisor") { ptr if !ptr.is_null() => unsafe { storage::VertexBindingDivisor = transmute(ptr); VertexBindingDivisor::is_loaded = true; }, _ => unsafe { VertexBindingDivisor::is_loaded = false; } }
    match loadfn("VertexBlendARB") { ptr if !ptr.is_null() => unsafe { storage::VertexBlendARB = transmute(ptr); VertexBlendARB::is_loaded = true; }, _ => unsafe { VertexBlendARB::is_loaded = false; } }
    match loadfn("VertexBlendEnvfATI") { ptr if !ptr.is_null() => unsafe { storage::VertexBlendEnvfATI = transmute(ptr); VertexBlendEnvfATI::is_loaded = true; }, _ => unsafe { VertexBlendEnvfATI::is_loaded = false; } }
    match loadfn("VertexBlendEnviATI") { ptr if !ptr.is_null() => unsafe { storage::VertexBlendEnviATI = transmute(ptr); VertexBlendEnviATI::is_loaded = true; }, _ => unsafe { VertexBlendEnviATI::is_loaded = false; } }
    match loadfn("VertexFormatNV") { ptr if !ptr.is_null() => unsafe { storage::VertexFormatNV = transmute(ptr); VertexFormatNV::is_loaded = true; }, _ => unsafe { VertexFormatNV::is_loaded = false; } }
    match loadfn("VertexP2ui") { ptr if !ptr.is_null() => unsafe { storage::VertexP2ui = transmute(ptr); VertexP2ui::is_loaded = true; }, _ => unsafe { VertexP2ui::is_loaded = false; } }
    match loadfn("VertexP2uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexP2uiv = transmute(ptr); VertexP2uiv::is_loaded = true; }, _ => unsafe { VertexP2uiv::is_loaded = false; } }
    match loadfn("VertexP3ui") { ptr if !ptr.is_null() => unsafe { storage::VertexP3ui = transmute(ptr); VertexP3ui::is_loaded = true; }, _ => unsafe { VertexP3ui::is_loaded = false; } }
    match loadfn("VertexP3uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexP3uiv = transmute(ptr); VertexP3uiv::is_loaded = true; }, _ => unsafe { VertexP3uiv::is_loaded = false; } }
    match loadfn("VertexP4ui") { ptr if !ptr.is_null() => unsafe { storage::VertexP4ui = transmute(ptr); VertexP4ui::is_loaded = true; }, _ => unsafe { VertexP4ui::is_loaded = false; } }
    match loadfn("VertexP4uiv") { ptr if !ptr.is_null() => unsafe { storage::VertexP4uiv = transmute(ptr); VertexP4uiv::is_loaded = true; }, _ => unsafe { VertexP4uiv::is_loaded = false; } }
    match loadfn("VertexPointer") { ptr if !ptr.is_null() => unsafe { storage::VertexPointer = transmute(ptr); VertexPointer::is_loaded = true; }, _ => unsafe { VertexPointer::is_loaded = false; } }
    match loadfn("VertexPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexPointerEXT = transmute(ptr); VertexPointerEXT::is_loaded = true; }, _ => unsafe { VertexPointerEXT::is_loaded = false; } }
    match loadfn("VertexPointerListIBM") { ptr if !ptr.is_null() => unsafe { storage::VertexPointerListIBM = transmute(ptr); VertexPointerListIBM::is_loaded = true; }, _ => unsafe { VertexPointerListIBM::is_loaded = false; } }
    match loadfn("VertexPointervINTEL") { ptr if !ptr.is_null() => unsafe { storage::VertexPointervINTEL = transmute(ptr); VertexPointervINTEL::is_loaded = true; }, _ => unsafe { VertexPointervINTEL::is_loaded = false; } }
    match loadfn("VertexStream1dATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1dATI = transmute(ptr); VertexStream1dATI::is_loaded = true; }, _ => unsafe { VertexStream1dATI::is_loaded = false; } }
    match loadfn("VertexStream1dvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1dvATI = transmute(ptr); VertexStream1dvATI::is_loaded = true; }, _ => unsafe { VertexStream1dvATI::is_loaded = false; } }
    match loadfn("VertexStream1fATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1fATI = transmute(ptr); VertexStream1fATI::is_loaded = true; }, _ => unsafe { VertexStream1fATI::is_loaded = false; } }
    match loadfn("VertexStream1fvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1fvATI = transmute(ptr); VertexStream1fvATI::is_loaded = true; }, _ => unsafe { VertexStream1fvATI::is_loaded = false; } }
    match loadfn("VertexStream1iATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1iATI = transmute(ptr); VertexStream1iATI::is_loaded = true; }, _ => unsafe { VertexStream1iATI::is_loaded = false; } }
    match loadfn("VertexStream1ivATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1ivATI = transmute(ptr); VertexStream1ivATI::is_loaded = true; }, _ => unsafe { VertexStream1ivATI::is_loaded = false; } }
    match loadfn("VertexStream1sATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1sATI = transmute(ptr); VertexStream1sATI::is_loaded = true; }, _ => unsafe { VertexStream1sATI::is_loaded = false; } }
    match loadfn("VertexStream1svATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream1svATI = transmute(ptr); VertexStream1svATI::is_loaded = true; }, _ => unsafe { VertexStream1svATI::is_loaded = false; } }
    match loadfn("VertexStream2dATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2dATI = transmute(ptr); VertexStream2dATI::is_loaded = true; }, _ => unsafe { VertexStream2dATI::is_loaded = false; } }
    match loadfn("VertexStream2dvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2dvATI = transmute(ptr); VertexStream2dvATI::is_loaded = true; }, _ => unsafe { VertexStream2dvATI::is_loaded = false; } }
    match loadfn("VertexStream2fATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2fATI = transmute(ptr); VertexStream2fATI::is_loaded = true; }, _ => unsafe { VertexStream2fATI::is_loaded = false; } }
    match loadfn("VertexStream2fvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2fvATI = transmute(ptr); VertexStream2fvATI::is_loaded = true; }, _ => unsafe { VertexStream2fvATI::is_loaded = false; } }
    match loadfn("VertexStream2iATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2iATI = transmute(ptr); VertexStream2iATI::is_loaded = true; }, _ => unsafe { VertexStream2iATI::is_loaded = false; } }
    match loadfn("VertexStream2ivATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2ivATI = transmute(ptr); VertexStream2ivATI::is_loaded = true; }, _ => unsafe { VertexStream2ivATI::is_loaded = false; } }
    match loadfn("VertexStream2sATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2sATI = transmute(ptr); VertexStream2sATI::is_loaded = true; }, _ => unsafe { VertexStream2sATI::is_loaded = false; } }
    match loadfn("VertexStream2svATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream2svATI = transmute(ptr); VertexStream2svATI::is_loaded = true; }, _ => unsafe { VertexStream2svATI::is_loaded = false; } }
    match loadfn("VertexStream3dATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3dATI = transmute(ptr); VertexStream3dATI::is_loaded = true; }, _ => unsafe { VertexStream3dATI::is_loaded = false; } }
    match loadfn("VertexStream3dvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3dvATI = transmute(ptr); VertexStream3dvATI::is_loaded = true; }, _ => unsafe { VertexStream3dvATI::is_loaded = false; } }
    match loadfn("VertexStream3fATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3fATI = transmute(ptr); VertexStream3fATI::is_loaded = true; }, _ => unsafe { VertexStream3fATI::is_loaded = false; } }
    match loadfn("VertexStream3fvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3fvATI = transmute(ptr); VertexStream3fvATI::is_loaded = true; }, _ => unsafe { VertexStream3fvATI::is_loaded = false; } }
    match loadfn("VertexStream3iATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3iATI = transmute(ptr); VertexStream3iATI::is_loaded = true; }, _ => unsafe { VertexStream3iATI::is_loaded = false; } }
    match loadfn("VertexStream3ivATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3ivATI = transmute(ptr); VertexStream3ivATI::is_loaded = true; }, _ => unsafe { VertexStream3ivATI::is_loaded = false; } }
    match loadfn("VertexStream3sATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3sATI = transmute(ptr); VertexStream3sATI::is_loaded = true; }, _ => unsafe { VertexStream3sATI::is_loaded = false; } }
    match loadfn("VertexStream3svATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream3svATI = transmute(ptr); VertexStream3svATI::is_loaded = true; }, _ => unsafe { VertexStream3svATI::is_loaded = false; } }
    match loadfn("VertexStream4dATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4dATI = transmute(ptr); VertexStream4dATI::is_loaded = true; }, _ => unsafe { VertexStream4dATI::is_loaded = false; } }
    match loadfn("VertexStream4dvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4dvATI = transmute(ptr); VertexStream4dvATI::is_loaded = true; }, _ => unsafe { VertexStream4dvATI::is_loaded = false; } }
    match loadfn("VertexStream4fATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4fATI = transmute(ptr); VertexStream4fATI::is_loaded = true; }, _ => unsafe { VertexStream4fATI::is_loaded = false; } }
    match loadfn("VertexStream4fvATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4fvATI = transmute(ptr); VertexStream4fvATI::is_loaded = true; }, _ => unsafe { VertexStream4fvATI::is_loaded = false; } }
    match loadfn("VertexStream4iATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4iATI = transmute(ptr); VertexStream4iATI::is_loaded = true; }, _ => unsafe { VertexStream4iATI::is_loaded = false; } }
    match loadfn("VertexStream4ivATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4ivATI = transmute(ptr); VertexStream4ivATI::is_loaded = true; }, _ => unsafe { VertexStream4ivATI::is_loaded = false; } }
    match loadfn("VertexStream4sATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4sATI = transmute(ptr); VertexStream4sATI::is_loaded = true; }, _ => unsafe { VertexStream4sATI::is_loaded = false; } }
    match loadfn("VertexStream4svATI") { ptr if !ptr.is_null() => unsafe { storage::VertexStream4svATI = transmute(ptr); VertexStream4svATI::is_loaded = true; }, _ => unsafe { VertexStream4svATI::is_loaded = false; } }
    match loadfn("VertexWeightPointerEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexWeightPointerEXT = transmute(ptr); VertexWeightPointerEXT::is_loaded = true; }, _ => unsafe { VertexWeightPointerEXT::is_loaded = false; } }
    match loadfn("VertexWeightfEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexWeightfEXT = transmute(ptr); VertexWeightfEXT::is_loaded = true; }, _ => unsafe { VertexWeightfEXT::is_loaded = false; } }
    match loadfn("VertexWeightfvEXT") { ptr if !ptr.is_null() => unsafe { storage::VertexWeightfvEXT = transmute(ptr); VertexWeightfvEXT::is_loaded = true; }, _ => unsafe { VertexWeightfvEXT::is_loaded = false; } }
    match loadfn("VertexWeighthNV") { ptr if !ptr.is_null() => unsafe { storage::VertexWeighthNV = transmute(ptr); VertexWeighthNV::is_loaded = true; }, _ => unsafe { VertexWeighthNV::is_loaded = false; } }
    match loadfn("VertexWeighthvNV") { ptr if !ptr.is_null() => unsafe { storage::VertexWeighthvNV = transmute(ptr); VertexWeighthvNV::is_loaded = true; }, _ => unsafe { VertexWeighthvNV::is_loaded = false; } }
    match loadfn("VideoCaptureNV") { ptr if !ptr.is_null() => unsafe { storage::VideoCaptureNV = transmute(ptr); VideoCaptureNV::is_loaded = true; }, _ => unsafe { VideoCaptureNV::is_loaded = false; } }
    match loadfn("VideoCaptureStreamParameterdvNV") { ptr if !ptr.is_null() => unsafe { storage::VideoCaptureStreamParameterdvNV = transmute(ptr); VideoCaptureStreamParameterdvNV::is_loaded = true; }, _ => unsafe { VideoCaptureStreamParameterdvNV::is_loaded = false; } }
    match loadfn("VideoCaptureStreamParameterfvNV") { ptr if !ptr.is_null() => unsafe { storage::VideoCaptureStreamParameterfvNV = transmute(ptr); VideoCaptureStreamParameterfvNV::is_loaded = true; }, _ => unsafe { VideoCaptureStreamParameterfvNV::is_loaded = false; } }
    match loadfn("VideoCaptureStreamParameterivNV") { ptr if !ptr.is_null() => unsafe { storage::VideoCaptureStreamParameterivNV = transmute(ptr); VideoCaptureStreamParameterivNV::is_loaded = true; }, _ => unsafe { VideoCaptureStreamParameterivNV::is_loaded = false; } }
    match loadfn("Viewport") { ptr if !ptr.is_null() => unsafe { storage::Viewport = transmute(ptr); Viewport::is_loaded = true; }, _ => unsafe { Viewport::is_loaded = false; } }
    match loadfn("ViewportArrayv") { ptr if !ptr.is_null() => unsafe { storage::ViewportArrayv = transmute(ptr); ViewportArrayv::is_loaded = true; }, _ => unsafe { ViewportArrayv::is_loaded = false; } }
    match loadfn("ViewportIndexedf") { ptr if !ptr.is_null() => unsafe { storage::ViewportIndexedf = transmute(ptr); ViewportIndexedf::is_loaded = true; }, _ => unsafe { ViewportIndexedf::is_loaded = false; } }
    match loadfn("ViewportIndexedfv") { ptr if !ptr.is_null() => unsafe { storage::ViewportIndexedfv = transmute(ptr); ViewportIndexedfv::is_loaded = true; }, _ => unsafe { ViewportIndexedfv::is_loaded = false; } }
    match loadfn("WaitSync") { ptr if !ptr.is_null() => unsafe { storage::WaitSync = transmute(ptr); WaitSync::is_loaded = true; }, _ => unsafe { WaitSync::is_loaded = false; } }
    match loadfn("WaitSyncAPPLE") { ptr if !ptr.is_null() => unsafe { storage::WaitSyncAPPLE = transmute(ptr); WaitSyncAPPLE::is_loaded = true; }, _ => unsafe { WaitSyncAPPLE::is_loaded = false; } }
    match loadfn("WeightPathsNV") { ptr if !ptr.is_null() => unsafe { storage::WeightPathsNV = transmute(ptr); WeightPathsNV::is_loaded = true; }, _ => unsafe { WeightPathsNV::is_loaded = false; } }
    match loadfn("WeightPointerARB") { ptr if !ptr.is_null() => unsafe { storage::WeightPointerARB = transmute(ptr); WeightPointerARB::is_loaded = true; }, _ => unsafe { WeightPointerARB::is_loaded = false; } }
    match loadfn("WeightPointerOES") { ptr if !ptr.is_null() => unsafe { storage::WeightPointerOES = transmute(ptr); WeightPointerOES::is_loaded = true; }, _ => unsafe { WeightPointerOES::is_loaded = false; } }
    match loadfn("WeightbvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightbvARB = transmute(ptr); WeightbvARB::is_loaded = true; }, _ => unsafe { WeightbvARB::is_loaded = false; } }
    match loadfn("WeightdvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightdvARB = transmute(ptr); WeightdvARB::is_loaded = true; }, _ => unsafe { WeightdvARB::is_loaded = false; } }
    match loadfn("WeightfvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightfvARB = transmute(ptr); WeightfvARB::is_loaded = true; }, _ => unsafe { WeightfvARB::is_loaded = false; } }
    match loadfn("WeightivARB") { ptr if !ptr.is_null() => unsafe { storage::WeightivARB = transmute(ptr); WeightivARB::is_loaded = true; }, _ => unsafe { WeightivARB::is_loaded = false; } }
    match loadfn("WeightsvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightsvARB = transmute(ptr); WeightsvARB::is_loaded = true; }, _ => unsafe { WeightsvARB::is_loaded = false; } }
    match loadfn("WeightubvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightubvARB = transmute(ptr); WeightubvARB::is_loaded = true; }, _ => unsafe { WeightubvARB::is_loaded = false; } }
    match loadfn("WeightuivARB") { ptr if !ptr.is_null() => unsafe { storage::WeightuivARB = transmute(ptr); WeightuivARB::is_loaded = true; }, _ => unsafe { WeightuivARB::is_loaded = false; } }
    match loadfn("WeightusvARB") { ptr if !ptr.is_null() => unsafe { storage::WeightusvARB = transmute(ptr); WeightusvARB::is_loaded = true; }, _ => unsafe { WeightusvARB::is_loaded = false; } }
    match loadfn("WindowPos2d") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2d = transmute(ptr); WindowPos2d::is_loaded = true; }, _ => unsafe { WindowPos2d::is_loaded = false; } }
    match loadfn("WindowPos2dARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dARB = transmute(ptr); WindowPos2dARB::is_loaded = true; }, _ => unsafe { WindowPos2dARB::is_loaded = false; } }
    match loadfn("WindowPos2dMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dMESA = transmute(ptr); WindowPos2dMESA::is_loaded = true; }, _ => unsafe { WindowPos2dMESA::is_loaded = false; } }
    match loadfn("WindowPos2dv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dv = transmute(ptr); WindowPos2dv::is_loaded = true; }, _ => unsafe { WindowPos2dv::is_loaded = false; } }
    match loadfn("WindowPos2dvARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dvARB = transmute(ptr); WindowPos2dvARB::is_loaded = true; }, _ => unsafe { WindowPos2dvARB::is_loaded = false; } }
    match loadfn("WindowPos2dvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2dvMESA = transmute(ptr); WindowPos2dvMESA::is_loaded = true; }, _ => unsafe { WindowPos2dvMESA::is_loaded = false; } }
    match loadfn("WindowPos2f") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2f = transmute(ptr); WindowPos2f::is_loaded = true; }, _ => unsafe { WindowPos2f::is_loaded = false; } }
    match loadfn("WindowPos2fARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fARB = transmute(ptr); WindowPos2fARB::is_loaded = true; }, _ => unsafe { WindowPos2fARB::is_loaded = false; } }
    match loadfn("WindowPos2fMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fMESA = transmute(ptr); WindowPos2fMESA::is_loaded = true; }, _ => unsafe { WindowPos2fMESA::is_loaded = false; } }
    match loadfn("WindowPos2fv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fv = transmute(ptr); WindowPos2fv::is_loaded = true; }, _ => unsafe { WindowPos2fv::is_loaded = false; } }
    match loadfn("WindowPos2fvARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fvARB = transmute(ptr); WindowPos2fvARB::is_loaded = true; }, _ => unsafe { WindowPos2fvARB::is_loaded = false; } }
    match loadfn("WindowPos2fvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2fvMESA = transmute(ptr); WindowPos2fvMESA::is_loaded = true; }, _ => unsafe { WindowPos2fvMESA::is_loaded = false; } }
    match loadfn("WindowPos2i") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2i = transmute(ptr); WindowPos2i::is_loaded = true; }, _ => unsafe { WindowPos2i::is_loaded = false; } }
    match loadfn("WindowPos2iARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2iARB = transmute(ptr); WindowPos2iARB::is_loaded = true; }, _ => unsafe { WindowPos2iARB::is_loaded = false; } }
    match loadfn("WindowPos2iMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2iMESA = transmute(ptr); WindowPos2iMESA::is_loaded = true; }, _ => unsafe { WindowPos2iMESA::is_loaded = false; } }
    match loadfn("WindowPos2iv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2iv = transmute(ptr); WindowPos2iv::is_loaded = true; }, _ => unsafe { WindowPos2iv::is_loaded = false; } }
    match loadfn("WindowPos2ivARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2ivARB = transmute(ptr); WindowPos2ivARB::is_loaded = true; }, _ => unsafe { WindowPos2ivARB::is_loaded = false; } }
    match loadfn("WindowPos2ivMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2ivMESA = transmute(ptr); WindowPos2ivMESA::is_loaded = true; }, _ => unsafe { WindowPos2ivMESA::is_loaded = false; } }
    match loadfn("WindowPos2s") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2s = transmute(ptr); WindowPos2s::is_loaded = true; }, _ => unsafe { WindowPos2s::is_loaded = false; } }
    match loadfn("WindowPos2sARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2sARB = transmute(ptr); WindowPos2sARB::is_loaded = true; }, _ => unsafe { WindowPos2sARB::is_loaded = false; } }
    match loadfn("WindowPos2sMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2sMESA = transmute(ptr); WindowPos2sMESA::is_loaded = true; }, _ => unsafe { WindowPos2sMESA::is_loaded = false; } }
    match loadfn("WindowPos2sv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2sv = transmute(ptr); WindowPos2sv::is_loaded = true; }, _ => unsafe { WindowPos2sv::is_loaded = false; } }
    match loadfn("WindowPos2svARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2svARB = transmute(ptr); WindowPos2svARB::is_loaded = true; }, _ => unsafe { WindowPos2svARB::is_loaded = false; } }
    match loadfn("WindowPos2svMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos2svMESA = transmute(ptr); WindowPos2svMESA::is_loaded = true; }, _ => unsafe { WindowPos2svMESA::is_loaded = false; } }
    match loadfn("WindowPos3d") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3d = transmute(ptr); WindowPos3d::is_loaded = true; }, _ => unsafe { WindowPos3d::is_loaded = false; } }
    match loadfn("WindowPos3dARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dARB = transmute(ptr); WindowPos3dARB::is_loaded = true; }, _ => unsafe { WindowPos3dARB::is_loaded = false; } }
    match loadfn("WindowPos3dMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dMESA = transmute(ptr); WindowPos3dMESA::is_loaded = true; }, _ => unsafe { WindowPos3dMESA::is_loaded = false; } }
    match loadfn("WindowPos3dv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dv = transmute(ptr); WindowPos3dv::is_loaded = true; }, _ => unsafe { WindowPos3dv::is_loaded = false; } }
    match loadfn("WindowPos3dvARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dvARB = transmute(ptr); WindowPos3dvARB::is_loaded = true; }, _ => unsafe { WindowPos3dvARB::is_loaded = false; } }
    match loadfn("WindowPos3dvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3dvMESA = transmute(ptr); WindowPos3dvMESA::is_loaded = true; }, _ => unsafe { WindowPos3dvMESA::is_loaded = false; } }
    match loadfn("WindowPos3f") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3f = transmute(ptr); WindowPos3f::is_loaded = true; }, _ => unsafe { WindowPos3f::is_loaded = false; } }
    match loadfn("WindowPos3fARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fARB = transmute(ptr); WindowPos3fARB::is_loaded = true; }, _ => unsafe { WindowPos3fARB::is_loaded = false; } }
    match loadfn("WindowPos3fMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fMESA = transmute(ptr); WindowPos3fMESA::is_loaded = true; }, _ => unsafe { WindowPos3fMESA::is_loaded = false; } }
    match loadfn("WindowPos3fv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fv = transmute(ptr); WindowPos3fv::is_loaded = true; }, _ => unsafe { WindowPos3fv::is_loaded = false; } }
    match loadfn("WindowPos3fvARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fvARB = transmute(ptr); WindowPos3fvARB::is_loaded = true; }, _ => unsafe { WindowPos3fvARB::is_loaded = false; } }
    match loadfn("WindowPos3fvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3fvMESA = transmute(ptr); WindowPos3fvMESA::is_loaded = true; }, _ => unsafe { WindowPos3fvMESA::is_loaded = false; } }
    match loadfn("WindowPos3i") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3i = transmute(ptr); WindowPos3i::is_loaded = true; }, _ => unsafe { WindowPos3i::is_loaded = false; } }
    match loadfn("WindowPos3iARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3iARB = transmute(ptr); WindowPos3iARB::is_loaded = true; }, _ => unsafe { WindowPos3iARB::is_loaded = false; } }
    match loadfn("WindowPos3iMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3iMESA = transmute(ptr); WindowPos3iMESA::is_loaded = true; }, _ => unsafe { WindowPos3iMESA::is_loaded = false; } }
    match loadfn("WindowPos3iv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3iv = transmute(ptr); WindowPos3iv::is_loaded = true; }, _ => unsafe { WindowPos3iv::is_loaded = false; } }
    match loadfn("WindowPos3ivARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3ivARB = transmute(ptr); WindowPos3ivARB::is_loaded = true; }, _ => unsafe { WindowPos3ivARB::is_loaded = false; } }
    match loadfn("WindowPos3ivMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3ivMESA = transmute(ptr); WindowPos3ivMESA::is_loaded = true; }, _ => unsafe { WindowPos3ivMESA::is_loaded = false; } }
    match loadfn("WindowPos3s") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3s = transmute(ptr); WindowPos3s::is_loaded = true; }, _ => unsafe { WindowPos3s::is_loaded = false; } }
    match loadfn("WindowPos3sARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3sARB = transmute(ptr); WindowPos3sARB::is_loaded = true; }, _ => unsafe { WindowPos3sARB::is_loaded = false; } }
    match loadfn("WindowPos3sMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3sMESA = transmute(ptr); WindowPos3sMESA::is_loaded = true; }, _ => unsafe { WindowPos3sMESA::is_loaded = false; } }
    match loadfn("WindowPos3sv") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3sv = transmute(ptr); WindowPos3sv::is_loaded = true; }, _ => unsafe { WindowPos3sv::is_loaded = false; } }
    match loadfn("WindowPos3svARB") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3svARB = transmute(ptr); WindowPos3svARB::is_loaded = true; }, _ => unsafe { WindowPos3svARB::is_loaded = false; } }
    match loadfn("WindowPos3svMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos3svMESA = transmute(ptr); WindowPos3svMESA::is_loaded = true; }, _ => unsafe { WindowPos3svMESA::is_loaded = false; } }
    match loadfn("WindowPos4dMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4dMESA = transmute(ptr); WindowPos4dMESA::is_loaded = true; }, _ => unsafe { WindowPos4dMESA::is_loaded = false; } }
    match loadfn("WindowPos4dvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4dvMESA = transmute(ptr); WindowPos4dvMESA::is_loaded = true; }, _ => unsafe { WindowPos4dvMESA::is_loaded = false; } }
    match loadfn("WindowPos4fMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4fMESA = transmute(ptr); WindowPos4fMESA::is_loaded = true; }, _ => unsafe { WindowPos4fMESA::is_loaded = false; } }
    match loadfn("WindowPos4fvMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4fvMESA = transmute(ptr); WindowPos4fvMESA::is_loaded = true; }, _ => unsafe { WindowPos4fvMESA::is_loaded = false; } }
    match loadfn("WindowPos4iMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4iMESA = transmute(ptr); WindowPos4iMESA::is_loaded = true; }, _ => unsafe { WindowPos4iMESA::is_loaded = false; } }
    match loadfn("WindowPos4ivMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4ivMESA = transmute(ptr); WindowPos4ivMESA::is_loaded = true; }, _ => unsafe { WindowPos4ivMESA::is_loaded = false; } }
    match loadfn("WindowPos4sMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4sMESA = transmute(ptr); WindowPos4sMESA::is_loaded = true; }, _ => unsafe { WindowPos4sMESA::is_loaded = false; } }
    match loadfn("WindowPos4svMESA") { ptr if !ptr.is_null() => unsafe { storage::WindowPos4svMESA = transmute(ptr); WindowPos4svMESA::is_loaded = true; }, _ => unsafe { WindowPos4svMESA::is_loaded = false; } }
    match loadfn("WriteMaskEXT") { ptr if !ptr.is_null() => unsafe { storage::WriteMaskEXT = transmute(ptr); WriteMaskEXT::is_loaded = true; }, _ => unsafe { WriteMaskEXT::is_loaded = false; } }
}

