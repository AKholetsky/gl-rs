// Copyright 2013 The gl-rs developers. For a full listing of the authors,
// refer to the AUTHORS file at the top-level directory of this distribution.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#[link(name = "gl",
       author = "Brendan Zabarauskas",
       url = "https://github.com/bjz/gl-rs",
       vers = "0.1")];
#[comment = "An OpenGL function loader."];
#[license = "ASL2"];
#[crate_type = "lib"];

use std::libc::*;
use self::types::*;

mod types {
    use std::libc::*;
    
    // Common types from OpenGL 1.1
    pub type GLenum = c_uint;
    pub type GLboolean = c_uchar;
    pub type GLbitfield = c_uint;
    pub type GLvoid = c_void;
    pub type GLbyte = c_char;
    pub type GLshort = c_short;
    pub type GLint = c_int;
    pub type GLclampx = c_int;
    pub type GLubyte = c_uchar;
    pub type GLushort = c_ushort;
    pub type GLuint = c_uint;
    pub type GLsizei = c_int;
    pub type GLfloat = c_float;
    pub type GLclampf = c_float;
    pub type GLdouble = c_double;
    pub type GLclampd = c_double;
    pub type GLeglImageOES = *c_void;
    pub type GLchar = c_char;
    pub type GLcharARB = c_char;
    
    #[cfg(target_os = "macos")]
    pub type GLhandleARB = *c_void;
    #[cfg(not(target_os = "macos"))]
    pub type GLhandleARB = c_uint;
    
    pub type GLhalfARB = c_ushort;
    pub type GLhalf = c_ushort;
    
    // Must be 32 bits
    pub type GLfixed = GLint;
    
    pub type GLintptr = ptrdiff_t;
    pub type GLsizeiptr = ptrdiff_t;
    pub type GLint64 = i64;
    pub type GLuint64 = u64;
    pub type GLintptrARB = ptrdiff_t;
    pub type GLsizeiptrARB = ptrdiff_t;
    pub type GLint64EXT = i64;
    pub type GLuint64EXT = u64;
    
    pub struct __GLsync;
    pub type GLsync = *__GLsync;
    
    // compatible with OpenCL cl_context
    pub struct _cl_context;
    pub struct _cl_event;
    
    pub type GLDEBUGPROC = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLDEBUGPROCARB = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLDEBUGPROCKHR = extern "C" fn(source: GLenum, gltype: GLenum, id: GLuint, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    
    // Vendor extension types
    pub type GLDEBUGPROCAMD = extern "C" fn(id: GLuint, category: GLenum, severity: GLenum, length: GLsizei, message: *GLchar, userParam: *c_void);
    pub type GLhalfNV = c_ushort;
    pub type GLvdpauSurfaceNV = GLintptr;
}

pub static CURRENT_BIT: GLenum = 0x00000001;
pub static POINT_BIT: GLenum = 0x00000002;
pub static LINE_BIT: GLenum = 0x00000004;
pub static POLYGON_BIT: GLenum = 0x00000008;
pub static POLYGON_STIPPLE_BIT: GLenum = 0x00000010;
pub static PIXEL_MODE_BIT: GLenum = 0x00000020;
pub static LIGHTING_BIT: GLenum = 0x00000040;
pub static FOG_BIT: GLenum = 0x00000080;
pub static DEPTH_BUFFER_BIT: GLenum = 0x00000100;
pub static ACCUM_BUFFER_BIT: GLenum = 0x00000200;
pub static STENCIL_BUFFER_BIT: GLenum = 0x00000400;
pub static VIEWPORT_BIT: GLenum = 0x00000800;
pub static TRANSFORM_BIT: GLenum = 0x00001000;
pub static ENABLE_BIT: GLenum = 0x00002000;
pub static COLOR_BUFFER_BIT: GLenum = 0x00004000;
pub static HINT_BIT: GLenum = 0x00008000;
pub static EVAL_BIT: GLenum = 0x00010000;
pub static LIST_BIT: GLenum = 0x00020000;
pub static TEXTURE_BIT: GLenum = 0x00040000;
pub static SCISSOR_BIT: GLenum = 0x00080000;
pub static MULTISAMPLE_BIT: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_ARB: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_EXT: GLenum = 0x20000000;
pub static MULTISAMPLE_BIT_3DFX: GLenum = 0x20000000;
pub static ALL_ATTRIB_BITS: GLenum = 0xFFFFFFFF;
pub static COVERAGE_BUFFER_BIT_NV: GLenum = 0x00008000;
pub static CLIENT_PIXEL_STORE_BIT: GLenum = 0x00000001;
pub static CLIENT_VERTEX_ARRAY_BIT: GLenum = 0x00000002;
pub static CLIENT_ALL_ATTRIB_BITS: GLenum = 0xFFFFFFFF;
pub static CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT: GLenum = 0x00000001;
pub static CONTEXT_FLAG_DEBUG_BIT: GLenum = 0x00000002;
pub static CONTEXT_FLAG_DEBUG_BIT_KHR: GLenum = 0x00000002;
pub static CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB: GLenum = 0x00000004;
pub static CONTEXT_CORE_PROFILE_BIT: GLenum = 0x00000001;
pub static CONTEXT_COMPATIBILITY_PROFILE_BIT: GLenum = 0x00000002;
pub static MAP_READ_BIT: GLenum = 0x0001;
pub static MAP_READ_BIT_EXT: GLenum = 0x0001;
pub static MAP_WRITE_BIT: GLenum = 0x0002;
pub static MAP_WRITE_BIT_EXT: GLenum = 0x0002;
pub static MAP_INVALIDATE_RANGE_BIT: GLenum = 0x0004;
pub static MAP_INVALIDATE_RANGE_BIT_EXT: GLenum = 0x0004;
pub static MAP_INVALIDATE_BUFFER_BIT: GLenum = 0x0008;
pub static MAP_INVALIDATE_BUFFER_BIT_EXT: GLenum = 0x0008;
pub static MAP_FLUSH_EXPLICIT_BIT: GLenum = 0x0010;
pub static MAP_FLUSH_EXPLICIT_BIT_EXT: GLenum = 0x0010;
pub static MAP_UNSYNCHRONIZED_BIT: GLenum = 0x0020;
pub static MAP_UNSYNCHRONIZED_BIT_EXT: GLenum = 0x0020;
pub static MAP_PERSISTENT_BIT: GLenum = 0x0040;
pub static MAP_COHERENT_BIT: GLenum = 0x0080;
pub static DYNAMIC_STORAGE_BIT: GLenum = 0x0100;
pub static CLIENT_STORAGE_BIT: GLenum = 0x0200;
pub static VERTEX_ATTRIB_ARRAY_BARRIER_BIT: GLenum = 0x00000001;
pub static VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT: GLenum = 0x00000001;
pub static ELEMENT_ARRAY_BARRIER_BIT: GLenum = 0x00000002;
pub static ELEMENT_ARRAY_BARRIER_BIT_EXT: GLenum = 0x00000002;
pub static UNIFORM_BARRIER_BIT: GLenum = 0x00000004;
pub static UNIFORM_BARRIER_BIT_EXT: GLenum = 0x00000004;
pub static TEXTURE_FETCH_BARRIER_BIT: GLenum = 0x00000008;
pub static TEXTURE_FETCH_BARRIER_BIT_EXT: GLenum = 0x00000008;
pub static SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV: GLenum = 0x00000010;
pub static SHADER_IMAGE_ACCESS_BARRIER_BIT: GLenum = 0x00000020;
pub static SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT: GLenum = 0x00000020;
pub static COMMAND_BARRIER_BIT: GLenum = 0x00000040;
pub static COMMAND_BARRIER_BIT_EXT: GLenum = 0x00000040;
pub static PIXEL_BUFFER_BARRIER_BIT: GLenum = 0x00000080;
pub static PIXEL_BUFFER_BARRIER_BIT_EXT: GLenum = 0x00000080;
pub static TEXTURE_UPDATE_BARRIER_BIT: GLenum = 0x00000100;
pub static TEXTURE_UPDATE_BARRIER_BIT_EXT: GLenum = 0x00000100;
pub static BUFFER_UPDATE_BARRIER_BIT: GLenum = 0x00000200;
pub static BUFFER_UPDATE_BARRIER_BIT_EXT: GLenum = 0x00000200;
pub static FRAMEBUFFER_BARRIER_BIT: GLenum = 0x00000400;
pub static FRAMEBUFFER_BARRIER_BIT_EXT: GLenum = 0x00000400;
pub static TRANSFORM_FEEDBACK_BARRIER_BIT: GLenum = 0x00000800;
pub static TRANSFORM_FEEDBACK_BARRIER_BIT_EXT: GLenum = 0x00000800;
pub static ATOMIC_COUNTER_BARRIER_BIT: GLenum = 0x00001000;
pub static ATOMIC_COUNTER_BARRIER_BIT_EXT: GLenum = 0x00001000;
pub static SHADER_STORAGE_BARRIER_BIT: GLenum = 0x00002000;
pub static CLIENT_MAPPED_BUFFER_BARRIER_BIT: GLenum = 0x00004000;
pub static QUERY_BUFFER_BARRIER_BIT: GLenum = 0x00008000;
pub static ALL_BARRIER_BITS: GLenum = 0xFFFFFFFF;
pub static ALL_BARRIER_BITS_EXT: GLenum = 0xFFFFFFFF;
pub static SYNC_FLUSH_COMMANDS_BIT: GLenum = 0x00000001;
pub static SYNC_FLUSH_COMMANDS_BIT_APPLE: GLenum = 0x00000001;
pub static VERTEX_SHADER_BIT: GLenum = 0x00000001;
pub static VERTEX_SHADER_BIT_EXT: GLenum = 0x00000001;
pub static FRAGMENT_SHADER_BIT: GLenum = 0x00000002;
pub static FRAGMENT_SHADER_BIT_EXT: GLenum = 0x00000002;
pub static GEOMETRY_SHADER_BIT: GLenum = 0x00000004;
pub static TESS_CONTROL_SHADER_BIT: GLenum = 0x00000008;
pub static TESS_EVALUATION_SHADER_BIT: GLenum = 0x00000010;
pub static COMPUTE_SHADER_BIT: GLenum = 0x00000020;
pub static ALL_SHADER_BITS: GLenum = 0xFFFFFFFF;
pub static ALL_SHADER_BITS_EXT: GLenum = 0xFFFFFFFF;
pub static TEXTURE_STORAGE_SPARSE_BIT_AMD: GLenum = 0x00000001;
pub static RED_BIT_ATI: GLenum = 0x00000001;
pub static GREEN_BIT_ATI: GLenum = 0x00000002;
pub static BLUE_BIT_ATI: GLenum = 0x00000004;
pub static _2X_BIT_ATI: GLenum = 0x00000001;
pub static _4X_BIT_ATI: GLenum = 0x00000002;
pub static _8X_BIT_ATI: GLenum = 0x00000004;
pub static HALF_BIT_ATI: GLenum = 0x00000008;
pub static QUARTER_BIT_ATI: GLenum = 0x00000010;
pub static EIGHTH_BIT_ATI: GLenum = 0x00000020;
pub static SATURATE_BIT_ATI: GLenum = 0x00000040;
pub static COMP_BIT_ATI: GLenum = 0x00000002;
pub static NEGATE_BIT_ATI: GLenum = 0x00000004;
pub static BIAS_BIT_ATI: GLenum = 0x00000008;
pub static TRACE_OPERATIONS_BIT_MESA: GLenum = 0x0001;
pub static TRACE_PRIMITIVES_BIT_MESA: GLenum = 0x0002;
pub static TRACE_ARRAYS_BIT_MESA: GLenum = 0x0004;
pub static TRACE_TEXTURES_BIT_MESA: GLenum = 0x0008;
pub static TRACE_PIXELS_BIT_MESA: GLenum = 0x0010;
pub static TRACE_ERRORS_BIT_MESA: GLenum = 0x0020;
pub static TRACE_ALL_BITS_MESA: GLenum = 0xFFFF;
pub static BOLD_BIT_NV: GLenum = 0x01;
pub static ITALIC_BIT_NV: GLenum = 0x02;
pub static GLYPH_WIDTH_BIT_NV: GLenum = 0x01;
pub static GLYPH_HEIGHT_BIT_NV: GLenum = 0x02;
pub static GLYPH_HORIZONTAL_BEARING_X_BIT_NV: GLenum = 0x04;
pub static GLYPH_HORIZONTAL_BEARING_Y_BIT_NV: GLenum = 0x08;
pub static GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV: GLenum = 0x10;
pub static GLYPH_VERTICAL_BEARING_X_BIT_NV: GLenum = 0x20;
pub static GLYPH_VERTICAL_BEARING_Y_BIT_NV: GLenum = 0x40;
pub static GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV: GLenum = 0x80;
pub static GLYPH_HAS_KERNING_BIT_NV: GLenum = 0x100;
pub static FONT_X_MIN_BOUNDS_BIT_NV: GLenum = 0x00010000;
pub static FONT_Y_MIN_BOUNDS_BIT_NV: GLenum = 0x00020000;
pub static FONT_X_MAX_BOUNDS_BIT_NV: GLenum = 0x00040000;
pub static FONT_Y_MAX_BOUNDS_BIT_NV: GLenum = 0x00080000;
pub static FONT_UNITS_PER_EM_BIT_NV: GLenum = 0x00100000;
pub static FONT_ASCENDER_BIT_NV: GLenum = 0x00200000;
pub static FONT_DESCENDER_BIT_NV: GLenum = 0x00400000;
pub static FONT_HEIGHT_BIT_NV: GLenum = 0x00800000;
pub static FONT_MAX_ADVANCE_WIDTH_BIT_NV: GLenum = 0x01000000;
pub static FONT_MAX_ADVANCE_HEIGHT_BIT_NV: GLenum = 0x02000000;
pub static FONT_UNDERLINE_POSITION_BIT_NV: GLenum = 0x04000000;
pub static FONT_UNDERLINE_THICKNESS_BIT_NV: GLenum = 0x08000000;
pub static FONT_HAS_KERNING_BIT_NV: GLenum = 0x10000000;
pub static VERTEX23_BIT_PGI: GLenum = 0x00000004;
pub static VERTEX4_BIT_PGI: GLenum = 0x00000008;
pub static COLOR3_BIT_PGI: GLenum = 0x00010000;
pub static COLOR4_BIT_PGI: GLenum = 0x00020000;
pub static EDGEFLAG_BIT_PGI: GLenum = 0x00040000;
pub static INDEX_BIT_PGI: GLenum = 0x00080000;
pub static MAT_AMBIENT_BIT_PGI: GLenum = 0x00100000;
pub static MAT_AMBIENT_AND_DIFFUSE_BIT_PGI: GLenum = 0x00200000;
pub static MAT_DIFFUSE_BIT_PGI: GLenum = 0x00400000;
pub static MAT_EMISSION_BIT_PGI: GLenum = 0x00800000;
pub static MAT_COLOR_INDEXES_BIT_PGI: GLenum = 0x01000000;
pub static MAT_SHININESS_BIT_PGI: GLenum = 0x02000000;
pub static MAT_SPECULAR_BIT_PGI: GLenum = 0x04000000;
pub static NORMAL_BIT_PGI: GLenum = 0x08000000;
pub static TEXCOORD1_BIT_PGI: GLenum = 0x10000000;
pub static TEXCOORD2_BIT_PGI: GLenum = 0x20000000;
pub static TEXCOORD3_BIT_PGI: GLenum = 0x40000000;
pub static TEXCOORD4_BIT_PGI: GLenum = 0x80000000;
pub static COLOR_BUFFER_BIT0_QCOM: GLenum = 0x00000001;
pub static COLOR_BUFFER_BIT1_QCOM: GLenum = 0x00000002;
pub static COLOR_BUFFER_BIT2_QCOM: GLenum = 0x00000004;
pub static COLOR_BUFFER_BIT3_QCOM: GLenum = 0x00000008;
pub static COLOR_BUFFER_BIT4_QCOM: GLenum = 0x00000010;
pub static COLOR_BUFFER_BIT5_QCOM: GLenum = 0x00000020;
pub static COLOR_BUFFER_BIT6_QCOM: GLenum = 0x00000040;
pub static COLOR_BUFFER_BIT7_QCOM: GLenum = 0x00000080;
pub static DEPTH_BUFFER_BIT0_QCOM: GLenum = 0x00000100;
pub static DEPTH_BUFFER_BIT1_QCOM: GLenum = 0x00000200;
pub static DEPTH_BUFFER_BIT2_QCOM: GLenum = 0x00000400;
pub static DEPTH_BUFFER_BIT3_QCOM: GLenum = 0x00000800;
pub static DEPTH_BUFFER_BIT4_QCOM: GLenum = 0x00001000;
pub static DEPTH_BUFFER_BIT5_QCOM: GLenum = 0x00002000;
pub static DEPTH_BUFFER_BIT6_QCOM: GLenum = 0x00004000;
pub static DEPTH_BUFFER_BIT7_QCOM: GLenum = 0x00008000;
pub static STENCIL_BUFFER_BIT0_QCOM: GLenum = 0x00010000;
pub static STENCIL_BUFFER_BIT1_QCOM: GLenum = 0x00020000;
pub static STENCIL_BUFFER_BIT2_QCOM: GLenum = 0x00040000;
pub static STENCIL_BUFFER_BIT3_QCOM: GLenum = 0x00080000;
pub static STENCIL_BUFFER_BIT4_QCOM: GLenum = 0x00100000;
pub static STENCIL_BUFFER_BIT5_QCOM: GLenum = 0x00200000;
pub static STENCIL_BUFFER_BIT6_QCOM: GLenum = 0x00400000;
pub static STENCIL_BUFFER_BIT7_QCOM: GLenum = 0x00800000;
pub static MULTISAMPLE_BUFFER_BIT0_QCOM: GLenum = 0x01000000;
pub static MULTISAMPLE_BUFFER_BIT1_QCOM: GLenum = 0x02000000;
pub static MULTISAMPLE_BUFFER_BIT2_QCOM: GLenum = 0x04000000;
pub static MULTISAMPLE_BUFFER_BIT3_QCOM: GLenum = 0x08000000;
pub static MULTISAMPLE_BUFFER_BIT4_QCOM: GLenum = 0x10000000;
pub static MULTISAMPLE_BUFFER_BIT5_QCOM: GLenum = 0x20000000;
pub static MULTISAMPLE_BUFFER_BIT6_QCOM: GLenum = 0x40000000;
pub static MULTISAMPLE_BUFFER_BIT7_QCOM: GLenum = 0x80000000;
pub static TEXTURE_DEFORMATION_BIT_SGIX: GLenum = 0x00000001;
pub static GEOMETRY_DEFORMATION_BIT_SGIX: GLenum = 0x00000002;
pub static RESTART_SUN: GLenum = 0x0001;
pub static REPLACE_MIDDLE_SUN: GLenum = 0x0002;
pub static REPLACE_OLDEST_SUN: GLenum = 0x0003;
pub static LAYOUT_DEFAULT_INTEL: GLenum = 0;
pub static LAYOUT_LINEAR_INTEL: GLenum = 1;
pub static LAYOUT_LINEAR_CPU_CACHED_INTEL: GLenum = 2;
pub static NEXT_BUFFER_NV: GLenum = -2;
pub static SKIP_COMPONENTS4_NV: GLenum = -3;
pub static SKIP_COMPONENTS3_NV: GLenum = -4;
pub static SKIP_COMPONENTS2_NV: GLenum = -5;
pub static SKIP_COMPONENTS1_NV: GLenum = -6;
pub static CLOSE_PATH_NV: GLenum = 0x00;
pub static MOVE_TO_NV: GLenum = 0x02;
pub static RELATIVE_MOVE_TO_NV: GLenum = 0x03;
pub static LINE_TO_NV: GLenum = 0x04;
pub static RELATIVE_LINE_TO_NV: GLenum = 0x05;
pub static HORIZONTAL_LINE_TO_NV: GLenum = 0x06;
pub static RELATIVE_HORIZONTAL_LINE_TO_NV: GLenum = 0x07;
pub static VERTICAL_LINE_TO_NV: GLenum = 0x08;
pub static RELATIVE_VERTICAL_LINE_TO_NV: GLenum = 0x09;
pub static QUADRATIC_CURVE_TO_NV: GLenum = 0x0A;
pub static RELATIVE_QUADRATIC_CURVE_TO_NV: GLenum = 0x0B;
pub static CUBIC_CURVE_TO_NV: GLenum = 0x0C;
pub static RELATIVE_CUBIC_CURVE_TO_NV: GLenum = 0x0D;
pub static SMOOTH_QUADRATIC_CURVE_TO_NV: GLenum = 0x0E;
pub static RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV: GLenum = 0x0F;
pub static SMOOTH_CUBIC_CURVE_TO_NV: GLenum = 0x10;
pub static RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV: GLenum = 0x11;
pub static SMALL_CCW_ARC_TO_NV: GLenum = 0x12;
pub static RELATIVE_SMALL_CCW_ARC_TO_NV: GLenum = 0x13;
pub static SMALL_CW_ARC_TO_NV: GLenum = 0x14;
pub static RELATIVE_SMALL_CW_ARC_TO_NV: GLenum = 0x15;
pub static LARGE_CCW_ARC_TO_NV: GLenum = 0x16;
pub static RELATIVE_LARGE_CCW_ARC_TO_NV: GLenum = 0x17;
pub static LARGE_CW_ARC_TO_NV: GLenum = 0x18;
pub static RELATIVE_LARGE_CW_ARC_TO_NV: GLenum = 0x19;
pub static RESTART_PATH_NV: GLenum = 0xF0;
pub static DUP_FIRST_CUBIC_CURVE_TO_NV: GLenum = 0xF2;
pub static DUP_LAST_CUBIC_CURVE_TO_NV: GLenum = 0xF4;
pub static RECT_NV: GLenum = 0xF6;
pub static CIRCULAR_CCW_ARC_TO_NV: GLenum = 0xF8;
pub static CIRCULAR_CW_ARC_TO_NV: GLenum = 0xFA;
pub static CIRCULAR_TANGENT_ARC_TO_NV: GLenum = 0xFC;
pub static ARC_TO_NV: GLenum = 0xFE;
pub static RELATIVE_ARC_TO_NV: GLenum = 0xFF;
pub static FALSE: GLenum = 0;
pub static NO_ERROR: GLenum = 0;
pub static ZERO: GLenum = 0;
pub static NONE: GLenum = 0;
pub static TRUE: GLenum = 1;
pub static ONE: GLenum = 1;
pub static INVALID_INDEX: GLenum = 0xFFFFFFFF;
pub static TIMEOUT_IGNORED: GLenum = 0xFFFFFFFFFFFFFFFF;
pub static TIMEOUT_IGNORED_APPLE: GLenum = 0xFFFFFFFFFFFFFFFF;
pub static VERSION_ES_CL_1_0: GLenum = 1;
pub static VERSION_ES_CM_1_1: GLenum = 1;
pub static VERSION_ES_CL_1_1: GLenum = 1;
pub static POINTS: GLenum = 0x0000;
pub static LINES: GLenum = 0x0001;
pub static LINE_LOOP: GLenum = 0x0002;
pub static LINE_STRIP: GLenum = 0x0003;
pub static TRIANGLES: GLenum = 0x0004;
pub static TRIANGLE_STRIP: GLenum = 0x0005;
pub static TRIANGLE_FAN: GLenum = 0x0006;
pub static QUADS: GLenum = 0x0007;
pub static QUAD_STRIP: GLenum = 0x0008;
pub static POLYGON: GLenum = 0x0009;
pub static LINES_ADJACENCY: GLenum = 0x000A;
pub static LINES_ADJACENCY_ARB: GLenum = 0x000A;
pub static LINES_ADJACENCY_EXT: GLenum = 0x000A;
pub static LINE_STRIP_ADJACENCY: GLenum = 0x000B;
pub static LINE_STRIP_ADJACENCY_ARB: GLenum = 0x000B;
pub static LINE_STRIP_ADJACENCY_EXT: GLenum = 0x000B;
pub static TRIANGLES_ADJACENCY: GLenum = 0x000C;
pub static TRIANGLES_ADJACENCY_ARB: GLenum = 0x000C;
pub static TRIANGLES_ADJACENCY_EXT: GLenum = 0x000C;
pub static TRIANGLE_STRIP_ADJACENCY: GLenum = 0x000D;
pub static TRIANGLE_STRIP_ADJACENCY_ARB: GLenum = 0x000D;
pub static TRIANGLE_STRIP_ADJACENCY_EXT: GLenum = 0x000D;
pub static PATCHES: GLenum = 0x000E;
pub static ACCUM: GLenum = 0x0100;
pub static LOAD: GLenum = 0x0101;
pub static RETURN: GLenum = 0x0102;
pub static MULT: GLenum = 0x0103;
pub static ADD: GLenum = 0x0104;
pub static NEVER: GLenum = 0x0200;
pub static LESS: GLenum = 0x0201;
pub static EQUAL: GLenum = 0x0202;
pub static LEQUAL: GLenum = 0x0203;
pub static GREATER: GLenum = 0x0204;
pub static NOTEQUAL: GLenum = 0x0205;
pub static GEQUAL: GLenum = 0x0206;
pub static ALWAYS: GLenum = 0x0207;
pub static SRC_COLOR: GLenum = 0x0300;
pub static ONE_MINUS_SRC_COLOR: GLenum = 0x0301;
pub static SRC_ALPHA: GLenum = 0x0302;
pub static ONE_MINUS_SRC_ALPHA: GLenum = 0x0303;
pub static DST_ALPHA: GLenum = 0x0304;
pub static ONE_MINUS_DST_ALPHA: GLenum = 0x0305;
pub static DST_COLOR: GLenum = 0x0306;
pub static ONE_MINUS_DST_COLOR: GLenum = 0x0307;
pub static SRC_ALPHA_SATURATE: GLenum = 0x0308;
pub static FRONT_LEFT: GLenum = 0x0400;
pub static FRONT_RIGHT: GLenum = 0x0401;
pub static BACK_LEFT: GLenum = 0x0402;
pub static BACK_RIGHT: GLenum = 0x0403;
pub static FRONT: GLenum = 0x0404;
pub static BACK: GLenum = 0x0405;
pub static LEFT: GLenum = 0x0406;
pub static RIGHT: GLenum = 0x0407;
pub static FRONT_AND_BACK: GLenum = 0x0408;
pub static AUX0: GLenum = 0x0409;
pub static AUX1: GLenum = 0x040A;
pub static AUX2: GLenum = 0x040B;
pub static AUX3: GLenum = 0x040C;
pub static INVALID_ENUM: GLenum = 0x0500;
pub static INVALID_VALUE: GLenum = 0x0501;
pub static INVALID_OPERATION: GLenum = 0x0502;
pub static STACK_OVERFLOW: GLenum = 0x0503;
pub static STACK_OVERFLOW_KHR: GLenum = 0x0503;
pub static STACK_UNDERFLOW: GLenum = 0x0504;
pub static STACK_UNDERFLOW_KHR: GLenum = 0x0504;
pub static OUT_OF_MEMORY: GLenum = 0x0505;
pub static INVALID_FRAMEBUFFER_OPERATION: GLenum = 0x0506;
pub static INVALID_FRAMEBUFFER_OPERATION_EXT: GLenum = 0x0506;
pub static INVALID_FRAMEBUFFER_OPERATION_OES: GLenum = 0x0506;
pub static _2D: GLenum = 0x0600;
pub static _3D: GLenum = 0x0601;
pub static _3D_COLOR: GLenum = 0x0602;
pub static _3D_COLOR_TEXTURE: GLenum = 0x0603;
pub static _4D_COLOR_TEXTURE: GLenum = 0x0604;
pub static PASS_THROUGH_TOKEN: GLenum = 0x0700;
pub static POINT_TOKEN: GLenum = 0x0701;
pub static LINE_TOKEN: GLenum = 0x0702;
pub static POLYGON_TOKEN: GLenum = 0x0703;
pub static BITMAP_TOKEN: GLenum = 0x0704;
pub static DRAW_PIXEL_TOKEN: GLenum = 0x0705;
pub static COPY_PIXEL_TOKEN: GLenum = 0x0706;
pub static LINE_RESET_TOKEN: GLenum = 0x0707;
pub static EXP: GLenum = 0x0800;
pub static EXP2: GLenum = 0x0801;
pub static CW: GLenum = 0x0900;
pub static CCW: GLenum = 0x0901;
pub static COEFF: GLenum = 0x0A00;
pub static ORDER: GLenum = 0x0A01;
pub static DOMAIN: GLenum = 0x0A02;
pub static CURRENT_COLOR: GLenum = 0x0B00;
pub static CURRENT_INDEX: GLenum = 0x0B01;
pub static CURRENT_NORMAL: GLenum = 0x0B02;
pub static CURRENT_TEXTURE_COORDS: GLenum = 0x0B03;
pub static CURRENT_RASTER_COLOR: GLenum = 0x0B04;
pub static CURRENT_RASTER_INDEX: GLenum = 0x0B05;
pub static CURRENT_RASTER_TEXTURE_COORDS: GLenum = 0x0B06;
pub static CURRENT_RASTER_POSITION: GLenum = 0x0B07;
pub static CURRENT_RASTER_POSITION_VALID: GLenum = 0x0B08;
pub static CURRENT_RASTER_DISTANCE: GLenum = 0x0B09;
pub static POINT_SMOOTH: GLenum = 0x0B10;
pub static POINT_SIZE: GLenum = 0x0B11;
pub static POINT_SIZE_RANGE: GLenum = 0x0B12;
pub static SMOOTH_POINT_SIZE_RANGE: GLenum = 0x0B12;
pub static POINT_SIZE_GRANULARITY: GLenum = 0x0B13;
pub static SMOOTH_POINT_SIZE_GRANULARITY: GLenum = 0x0B13;
pub static LINE_SMOOTH: GLenum = 0x0B20;
pub static LINE_WIDTH: GLenum = 0x0B21;
pub static LINE_WIDTH_RANGE: GLenum = 0x0B22;
pub static SMOOTH_LINE_WIDTH_RANGE: GLenum = 0x0B22;
pub static LINE_WIDTH_GRANULARITY: GLenum = 0x0B23;
pub static SMOOTH_LINE_WIDTH_GRANULARITY: GLenum = 0x0B23;
pub static LINE_STIPPLE: GLenum = 0x0B24;
pub static LINE_STIPPLE_PATTERN: GLenum = 0x0B25;
pub static LINE_STIPPLE_REPEAT: GLenum = 0x0B26;
pub static LIST_MODE: GLenum = 0x0B30;
pub static MAX_LIST_NESTING: GLenum = 0x0B31;
pub static LIST_BASE: GLenum = 0x0B32;
pub static LIST_INDEX: GLenum = 0x0B33;
pub static POLYGON_MODE: GLenum = 0x0B40;
pub static POLYGON_SMOOTH: GLenum = 0x0B41;
pub static POLYGON_STIPPLE: GLenum = 0x0B42;
pub static EDGE_FLAG: GLenum = 0x0B43;
pub static CULL_FACE: GLenum = 0x0B44;
pub static CULL_FACE_MODE: GLenum = 0x0B45;
pub static FRONT_FACE: GLenum = 0x0B46;
pub static LIGHTING: GLenum = 0x0B50;
pub static LIGHT_MODEL_LOCAL_VIEWER: GLenum = 0x0B51;
pub static LIGHT_MODEL_TWO_SIDE: GLenum = 0x0B52;
pub static LIGHT_MODEL_AMBIENT: GLenum = 0x0B53;
pub static SHADE_MODEL: GLenum = 0x0B54;
pub static COLOR_MATERIAL_FACE: GLenum = 0x0B55;
pub static COLOR_MATERIAL_PARAMETER: GLenum = 0x0B56;
pub static COLOR_MATERIAL: GLenum = 0x0B57;
pub static FOG: GLenum = 0x0B60;
pub static FOG_INDEX: GLenum = 0x0B61;
pub static FOG_DENSITY: GLenum = 0x0B62;
pub static FOG_START: GLenum = 0x0B63;
pub static FOG_END: GLenum = 0x0B64;
pub static FOG_MODE: GLenum = 0x0B65;
pub static FOG_COLOR: GLenum = 0x0B66;
pub static DEPTH_RANGE: GLenum = 0x0B70;
pub static DEPTH_TEST: GLenum = 0x0B71;
pub static DEPTH_WRITEMASK: GLenum = 0x0B72;
pub static DEPTH_CLEAR_VALUE: GLenum = 0x0B73;
pub static DEPTH_FUNC: GLenum = 0x0B74;
pub static ACCUM_CLEAR_VALUE: GLenum = 0x0B80;
pub static STENCIL_TEST: GLenum = 0x0B90;
pub static STENCIL_CLEAR_VALUE: GLenum = 0x0B91;
pub static STENCIL_FUNC: GLenum = 0x0B92;
pub static STENCIL_VALUE_MASK: GLenum = 0x0B93;
pub static STENCIL_FAIL: GLenum = 0x0B94;
pub static STENCIL_PASS_DEPTH_FAIL: GLenum = 0x0B95;
pub static STENCIL_PASS_DEPTH_PASS: GLenum = 0x0B96;
pub static STENCIL_REF: GLenum = 0x0B97;
pub static STENCIL_WRITEMASK: GLenum = 0x0B98;
pub static MATRIX_MODE: GLenum = 0x0BA0;
pub static NORMALIZE: GLenum = 0x0BA1;
pub static VIEWPORT: GLenum = 0x0BA2;
pub static MODELVIEW_STACK_DEPTH: GLenum = 0x0BA3;
pub static MODELVIEW0_STACK_DEPTH_EXT: GLenum = 0x0BA3;
pub static PROJECTION_STACK_DEPTH: GLenum = 0x0BA4;
pub static TEXTURE_STACK_DEPTH: GLenum = 0x0BA5;
pub static MODELVIEW_MATRIX: GLenum = 0x0BA6;
pub static MODELVIEW0_MATRIX_EXT: GLenum = 0x0BA6;
pub static PROJECTION_MATRIX: GLenum = 0x0BA7;
pub static TEXTURE_MATRIX: GLenum = 0x0BA8;
pub static ATTRIB_STACK_DEPTH: GLenum = 0x0BB0;
pub static CLIENT_ATTRIB_STACK_DEPTH: GLenum = 0x0BB1;
pub static ALPHA_TEST: GLenum = 0x0BC0;
pub static ALPHA_TEST_QCOM: GLenum = 0x0BC0;
pub static ALPHA_TEST_FUNC: GLenum = 0x0BC1;
pub static ALPHA_TEST_FUNC_QCOM: GLenum = 0x0BC1;
pub static ALPHA_TEST_REF: GLenum = 0x0BC2;
pub static ALPHA_TEST_REF_QCOM: GLenum = 0x0BC2;
pub static DITHER: GLenum = 0x0BD0;
pub static BLEND_DST: GLenum = 0x0BE0;
pub static BLEND_SRC: GLenum = 0x0BE1;
pub static BLEND: GLenum = 0x0BE2;
pub static LOGIC_OP_MODE: GLenum = 0x0BF0;
pub static INDEX_LOGIC_OP: GLenum = 0x0BF1;
pub static LOGIC_OP: GLenum = 0x0BF1;
pub static COLOR_LOGIC_OP: GLenum = 0x0BF2;
pub static AUX_BUFFERS: GLenum = 0x0C00;
pub static DRAW_BUFFER: GLenum = 0x0C01;
pub static DRAW_BUFFER_EXT: GLenum = 0x0C01;
pub static READ_BUFFER: GLenum = 0x0C02;
pub static READ_BUFFER_EXT: GLenum = 0x0C02;
pub static READ_BUFFER_NV: GLenum = 0x0C02;
pub static SCISSOR_BOX: GLenum = 0x0C10;
pub static SCISSOR_TEST: GLenum = 0x0C11;
pub static INDEX_CLEAR_VALUE: GLenum = 0x0C20;
pub static INDEX_WRITEMASK: GLenum = 0x0C21;
pub static COLOR_CLEAR_VALUE: GLenum = 0x0C22;
pub static COLOR_WRITEMASK: GLenum = 0x0C23;
pub static INDEX_MODE: GLenum = 0x0C30;
pub static RGBA_MODE: GLenum = 0x0C31;
pub static DOUBLEBUFFER: GLenum = 0x0C32;
pub static STEREO: GLenum = 0x0C33;
pub static RENDER_MODE: GLenum = 0x0C40;
pub static PERSPECTIVE_CORRECTION_HINT: GLenum = 0x0C50;
pub static POINT_SMOOTH_HINT: GLenum = 0x0C51;
pub static LINE_SMOOTH_HINT: GLenum = 0x0C52;
pub static POLYGON_SMOOTH_HINT: GLenum = 0x0C53;
pub static FOG_HINT: GLenum = 0x0C54;
pub static TEXTURE_GEN_S: GLenum = 0x0C60;
pub static TEXTURE_GEN_T: GLenum = 0x0C61;
pub static TEXTURE_GEN_R: GLenum = 0x0C62;
pub static TEXTURE_GEN_Q: GLenum = 0x0C63;
pub static PIXEL_MAP_I_TO_I: GLenum = 0x0C70;
pub static PIXEL_MAP_S_TO_S: GLenum = 0x0C71;
pub static PIXEL_MAP_I_TO_R: GLenum = 0x0C72;
pub static PIXEL_MAP_I_TO_G: GLenum = 0x0C73;
pub static PIXEL_MAP_I_TO_B: GLenum = 0x0C74;
pub static PIXEL_MAP_I_TO_A: GLenum = 0x0C75;
pub static PIXEL_MAP_R_TO_R: GLenum = 0x0C76;
pub static PIXEL_MAP_G_TO_G: GLenum = 0x0C77;
pub static PIXEL_MAP_B_TO_B: GLenum = 0x0C78;
pub static PIXEL_MAP_A_TO_A: GLenum = 0x0C79;
pub static PIXEL_MAP_I_TO_I_SIZE: GLenum = 0x0CB0;
pub static PIXEL_MAP_S_TO_S_SIZE: GLenum = 0x0CB1;
pub static PIXEL_MAP_I_TO_R_SIZE: GLenum = 0x0CB2;
pub static PIXEL_MAP_I_TO_G_SIZE: GLenum = 0x0CB3;
pub static PIXEL_MAP_I_TO_B_SIZE: GLenum = 0x0CB4;
pub static PIXEL_MAP_I_TO_A_SIZE: GLenum = 0x0CB5;
pub static PIXEL_MAP_R_TO_R_SIZE: GLenum = 0x0CB6;
pub static PIXEL_MAP_G_TO_G_SIZE: GLenum = 0x0CB7;
pub static PIXEL_MAP_B_TO_B_SIZE: GLenum = 0x0CB8;
pub static PIXEL_MAP_A_TO_A_SIZE: GLenum = 0x0CB9;
pub static UNPACK_SWAP_BYTES: GLenum = 0x0CF0;
pub static UNPACK_LSB_FIRST: GLenum = 0x0CF1;
pub static UNPACK_ROW_LENGTH: GLenum = 0x0CF2;
pub static UNPACK_ROW_LENGTH_EXT: GLenum = 0x0CF2;
pub static UNPACK_SKIP_ROWS: GLenum = 0x0CF3;
pub static UNPACK_SKIP_ROWS_EXT: GLenum = 0x0CF3;
pub static UNPACK_SKIP_PIXELS: GLenum = 0x0CF4;
pub static UNPACK_SKIP_PIXELS_EXT: GLenum = 0x0CF4;
pub static UNPACK_ALIGNMENT: GLenum = 0x0CF5;
pub static PACK_SWAP_BYTES: GLenum = 0x0D00;
pub static PACK_LSB_FIRST: GLenum = 0x0D01;
pub static PACK_ROW_LENGTH: GLenum = 0x0D02;
pub static PACK_SKIP_ROWS: GLenum = 0x0D03;
pub static PACK_SKIP_PIXELS: GLenum = 0x0D04;
pub static PACK_ALIGNMENT: GLenum = 0x0D05;
pub static MAP_COLOR: GLenum = 0x0D10;
pub static MAP_STENCIL: GLenum = 0x0D11;
pub static INDEX_SHIFT: GLenum = 0x0D12;
pub static INDEX_OFFSET: GLenum = 0x0D13;
pub static RED_SCALE: GLenum = 0x0D14;
pub static RED_BIAS: GLenum = 0x0D15;
pub static ZOOM_X: GLenum = 0x0D16;
pub static ZOOM_Y: GLenum = 0x0D17;
pub static GREEN_SCALE: GLenum = 0x0D18;
pub static GREEN_BIAS: GLenum = 0x0D19;
pub static BLUE_SCALE: GLenum = 0x0D1A;
pub static BLUE_BIAS: GLenum = 0x0D1B;
pub static ALPHA_SCALE: GLenum = 0x0D1C;
pub static ALPHA_BIAS: GLenum = 0x0D1D;
pub static DEPTH_SCALE: GLenum = 0x0D1E;
pub static DEPTH_BIAS: GLenum = 0x0D1F;
pub static MAX_EVAL_ORDER: GLenum = 0x0D30;
pub static MAX_LIGHTS: GLenum = 0x0D31;
pub static MAX_CLIP_PLANES: GLenum = 0x0D32;
pub static MAX_CLIP_DISTANCES: GLenum = 0x0D32;
pub static MAX_TEXTURE_SIZE: GLenum = 0x0D33;
pub static MAX_PIXEL_MAP_TABLE: GLenum = 0x0D34;
pub static MAX_ATTRIB_STACK_DEPTH: GLenum = 0x0D35;
pub static MAX_MODELVIEW_STACK_DEPTH: GLenum = 0x0D36;
pub static MAX_NAME_STACK_DEPTH: GLenum = 0x0D37;
pub static MAX_PROJECTION_STACK_DEPTH: GLenum = 0x0D38;
pub static MAX_TEXTURE_STACK_DEPTH: GLenum = 0x0D39;
pub static MAX_VIEWPORT_DIMS: GLenum = 0x0D3A;
pub static MAX_CLIENT_ATTRIB_STACK_DEPTH: GLenum = 0x0D3B;
pub static SUBPIXEL_BITS: GLenum = 0x0D50;
pub static INDEX_BITS: GLenum = 0x0D51;
pub static RED_BITS: GLenum = 0x0D52;
pub static GREEN_BITS: GLenum = 0x0D53;
pub static BLUE_BITS: GLenum = 0x0D54;
pub static ALPHA_BITS: GLenum = 0x0D55;
pub static DEPTH_BITS: GLenum = 0x0D56;
pub static STENCIL_BITS: GLenum = 0x0D57;
pub static ACCUM_RED_BITS: GLenum = 0x0D58;
pub static ACCUM_GREEN_BITS: GLenum = 0x0D59;
pub static ACCUM_BLUE_BITS: GLenum = 0x0D5A;
pub static ACCUM_ALPHA_BITS: GLenum = 0x0D5B;
pub static NAME_STACK_DEPTH: GLenum = 0x0D70;
pub static AUTO_NORMAL: GLenum = 0x0D80;
pub static MAP1_COLOR_4: GLenum = 0x0D90;
pub static MAP1_INDEX: GLenum = 0x0D91;
pub static MAP1_NORMAL: GLenum = 0x0D92;
pub static MAP1_TEXTURE_COORD_1: GLenum = 0x0D93;
pub static MAP1_TEXTURE_COORD_2: GLenum = 0x0D94;
pub static MAP1_TEXTURE_COORD_3: GLenum = 0x0D95;
pub static MAP1_TEXTURE_COORD_4: GLenum = 0x0D96;
pub static MAP1_VERTEX_3: GLenum = 0x0D97;
pub static MAP1_VERTEX_4: GLenum = 0x0D98;
pub static MAP2_COLOR_4: GLenum = 0x0DB0;
pub static MAP2_INDEX: GLenum = 0x0DB1;
pub static MAP2_NORMAL: GLenum = 0x0DB2;
pub static MAP2_TEXTURE_COORD_1: GLenum = 0x0DB3;
pub static MAP2_TEXTURE_COORD_2: GLenum = 0x0DB4;
pub static MAP2_TEXTURE_COORD_3: GLenum = 0x0DB5;
pub static MAP2_TEXTURE_COORD_4: GLenum = 0x0DB6;
pub static MAP2_VERTEX_3: GLenum = 0x0DB7;
pub static MAP2_VERTEX_4: GLenum = 0x0DB8;
pub static MAP1_GRID_DOMAIN: GLenum = 0x0DD0;
pub static MAP1_GRID_SEGMENTS: GLenum = 0x0DD1;
pub static MAP2_GRID_DOMAIN: GLenum = 0x0DD2;
pub static MAP2_GRID_SEGMENTS: GLenum = 0x0DD3;
pub static TEXTURE_1D: GLenum = 0x0DE0;
pub static TEXTURE_2D: GLenum = 0x0DE1;
pub static FEEDBACK_BUFFER_POINTER: GLenum = 0x0DF0;
pub static FEEDBACK_BUFFER_SIZE: GLenum = 0x0DF1;
pub static FEEDBACK_BUFFER_TYPE: GLenum = 0x0DF2;
pub static SELECTION_BUFFER_POINTER: GLenum = 0x0DF3;
pub static SELECTION_BUFFER_SIZE: GLenum = 0x0DF4;
pub static TEXTURE_WIDTH: GLenum = 0x1000;
pub static TEXTURE_HEIGHT: GLenum = 0x1001;
pub static TEXTURE_INTERNAL_FORMAT: GLenum = 0x1003;
pub static TEXTURE_COMPONENTS: GLenum = 0x1003;
pub static TEXTURE_BORDER_COLOR: GLenum = 0x1004;
pub static TEXTURE_BORDER_COLOR_NV: GLenum = 0x1004;
pub static TEXTURE_BORDER: GLenum = 0x1005;
pub static DONT_CARE: GLenum = 0x1100;
pub static FASTEST: GLenum = 0x1101;
pub static NICEST: GLenum = 0x1102;
pub static AMBIENT: GLenum = 0x1200;
pub static DIFFUSE: GLenum = 0x1201;
pub static SPECULAR: GLenum = 0x1202;
pub static POSITION: GLenum = 0x1203;
pub static SPOT_DIRECTION: GLenum = 0x1204;
pub static SPOT_EXPONENT: GLenum = 0x1205;
pub static SPOT_CUTOFF: GLenum = 0x1206;
pub static CONSTANT_ATTENUATION: GLenum = 0x1207;
pub static LINEAR_ATTENUATION: GLenum = 0x1208;
pub static QUADRATIC_ATTENUATION: GLenum = 0x1209;
pub static COMPILE: GLenum = 0x1300;
pub static COMPILE_AND_EXECUTE: GLenum = 0x1301;
pub static BYTE: GLenum = 0x1400;
pub static UNSIGNED_BYTE: GLenum = 0x1401;
pub static SHORT: GLenum = 0x1402;
pub static UNSIGNED_SHORT: GLenum = 0x1403;
pub static INT: GLenum = 0x1404;
pub static UNSIGNED_INT: GLenum = 0x1405;
pub static FLOAT: GLenum = 0x1406;
pub static _2_BYTES: GLenum = 0x1407;
pub static _3_BYTES: GLenum = 0x1408;
pub static _4_BYTES: GLenum = 0x1409;
pub static DOUBLE: GLenum = 0x140A;
pub static DOUBLE_EXT: GLenum = 0x140A;
pub static HALF_FLOAT: GLenum = 0x140B;
pub static HALF_FLOAT_ARB: GLenum = 0x140B;
pub static HALF_FLOAT_NV: GLenum = 0x140B;
pub static HALF_APPLE: GLenum = 0x140B;
pub static FIXED: GLenum = 0x140C;
pub static FIXED_OES: GLenum = 0x140C;
pub static INT64_NV: GLenum = 0x140E;
pub static UNSIGNED_INT64_ARB: GLenum = 0x140F;
pub static UNSIGNED_INT64_NV: GLenum = 0x140F;
pub static CLEAR: GLenum = 0x1500;
pub static AND: GLenum = 0x1501;
pub static AND_REVERSE: GLenum = 0x1502;
pub static COPY: GLenum = 0x1503;
pub static AND_INVERTED: GLenum = 0x1504;
pub static NOOP: GLenum = 0x1505;
pub static XOR: GLenum = 0x1506;
pub static OR: GLenum = 0x1507;
pub static NOR: GLenum = 0x1508;
pub static EQUIV: GLenum = 0x1509;
pub static INVERT: GLenum = 0x150A;
pub static OR_REVERSE: GLenum = 0x150B;
pub static COPY_INVERTED: GLenum = 0x150C;
pub static OR_INVERTED: GLenum = 0x150D;
pub static NAND: GLenum = 0x150E;
pub static SET: GLenum = 0x150F;
pub static EMISSION: GLenum = 0x1600;
pub static SHININESS: GLenum = 0x1601;
pub static AMBIENT_AND_DIFFUSE: GLenum = 0x1602;
pub static COLOR_INDEXES: GLenum = 0x1603;
pub static MODELVIEW: GLenum = 0x1700;
pub static MODELVIEW0_ARB: GLenum = 0x1700;
pub static MODELVIEW0_EXT: GLenum = 0x1700;
pub static PROJECTION: GLenum = 0x1701;
pub static TEXTURE: GLenum = 0x1702;
pub static COLOR: GLenum = 0x1800;
pub static COLOR_EXT: GLenum = 0x1800;
pub static DEPTH: GLenum = 0x1801;
pub static DEPTH_EXT: GLenum = 0x1801;
pub static STENCIL: GLenum = 0x1802;
pub static STENCIL_EXT: GLenum = 0x1802;
pub static COLOR_INDEX: GLenum = 0x1900;
pub static STENCIL_INDEX: GLenum = 0x1901;
pub static DEPTH_COMPONENT: GLenum = 0x1902;
pub static RED: GLenum = 0x1903;
pub static RED_EXT: GLenum = 0x1903;
pub static GREEN: GLenum = 0x1904;
pub static BLUE: GLenum = 0x1905;
pub static ALPHA: GLenum = 0x1906;
pub static RGB: GLenum = 0x1907;
pub static RGBA: GLenum = 0x1908;
pub static LUMINANCE: GLenum = 0x1909;
pub static LUMINANCE_ALPHA: GLenum = 0x190A;
pub static BITMAP: GLenum = 0x1A00;
pub static POINT: GLenum = 0x1B00;
pub static LINE: GLenum = 0x1B01;
pub static FILL: GLenum = 0x1B02;
pub static RENDER: GLenum = 0x1C00;
pub static FEEDBACK: GLenum = 0x1C01;
pub static SELECT: GLenum = 0x1C02;
pub static FLAT: GLenum = 0x1D00;
pub static SMOOTH: GLenum = 0x1D01;
pub static KEEP: GLenum = 0x1E00;
pub static REPLACE: GLenum = 0x1E01;
pub static INCR: GLenum = 0x1E02;
pub static DECR: GLenum = 0x1E03;
pub static VENDOR: GLenum = 0x1F00;
pub static RENDERER: GLenum = 0x1F01;
pub static VERSION: GLenum = 0x1F02;
pub static EXTENSIONS: GLenum = 0x1F03;
pub static S: GLenum = 0x2000;
pub static T: GLenum = 0x2001;
pub static R: GLenum = 0x2002;
pub static Q: GLenum = 0x2003;
pub static MODULATE: GLenum = 0x2100;
pub static DECAL: GLenum = 0x2101;
pub static TEXTURE_ENV_MODE: GLenum = 0x2200;
pub static TEXTURE_ENV_COLOR: GLenum = 0x2201;
pub static TEXTURE_ENV: GLenum = 0x2300;
pub static EYE_LINEAR: GLenum = 0x2400;
pub static OBJECT_LINEAR: GLenum = 0x2401;
pub static SPHERE_MAP: GLenum = 0x2402;
pub static TEXTURE_GEN_MODE: GLenum = 0x2500;
pub static OBJECT_PLANE: GLenum = 0x2501;
pub static EYE_PLANE: GLenum = 0x2502;
pub static NEAREST: GLenum = 0x2600;
pub static LINEAR: GLenum = 0x2601;
pub static NEAREST_MIPMAP_NEAREST: GLenum = 0x2700;
pub static LINEAR_MIPMAP_NEAREST: GLenum = 0x2701;
pub static NEAREST_MIPMAP_LINEAR: GLenum = 0x2702;
pub static LINEAR_MIPMAP_LINEAR: GLenum = 0x2703;
pub static TEXTURE_MAG_FILTER: GLenum = 0x2800;
pub static TEXTURE_MIN_FILTER: GLenum = 0x2801;
pub static TEXTURE_WRAP_S: GLenum = 0x2802;
pub static TEXTURE_WRAP_T: GLenum = 0x2803;
pub static CLAMP: GLenum = 0x2900;
pub static REPEAT: GLenum = 0x2901;
pub static POLYGON_OFFSET_UNITS: GLenum = 0x2A00;
pub static POLYGON_OFFSET_POINT: GLenum = 0x2A01;
pub static POLYGON_OFFSET_LINE: GLenum = 0x2A02;
pub static R3_G3_B2: GLenum = 0x2A10;
pub static V2F: GLenum = 0x2A20;
pub static V3F: GLenum = 0x2A21;
pub static C4UB_V2F: GLenum = 0x2A22;
pub static C4UB_V3F: GLenum = 0x2A23;
pub static C3F_V3F: GLenum = 0x2A24;
pub static N3F_V3F: GLenum = 0x2A25;
pub static C4F_N3F_V3F: GLenum = 0x2A26;
pub static T2F_V3F: GLenum = 0x2A27;
pub static T4F_V4F: GLenum = 0x2A28;
pub static T2F_C4UB_V3F: GLenum = 0x2A29;
pub static T2F_C3F_V3F: GLenum = 0x2A2A;
pub static T2F_N3F_V3F: GLenum = 0x2A2B;
pub static T2F_C4F_N3F_V3F: GLenum = 0x2A2C;
pub static T4F_C4F_N3F_V4F: GLenum = 0x2A2D;
pub static CLIP_PLANE0: GLenum = 0x3000;
pub static CLIP_DISTANCE0: GLenum = 0x3000;
pub static CLIP_PLANE1: GLenum = 0x3001;
pub static CLIP_DISTANCE1: GLenum = 0x3001;
pub static CLIP_PLANE2: GLenum = 0x3002;
pub static CLIP_DISTANCE2: GLenum = 0x3002;
pub static CLIP_PLANE3: GLenum = 0x3003;
pub static CLIP_DISTANCE3: GLenum = 0x3003;
pub static CLIP_PLANE4: GLenum = 0x3004;
pub static CLIP_DISTANCE4: GLenum = 0x3004;
pub static CLIP_PLANE5: GLenum = 0x3005;
pub static CLIP_DISTANCE5: GLenum = 0x3005;
pub static CLIP_DISTANCE6: GLenum = 0x3006;
pub static CLIP_DISTANCE7: GLenum = 0x3007;
pub static LIGHT0: GLenum = 0x4000;
pub static LIGHT1: GLenum = 0x4001;
pub static LIGHT2: GLenum = 0x4002;
pub static LIGHT3: GLenum = 0x4003;
pub static LIGHT4: GLenum = 0x4004;
pub static LIGHT5: GLenum = 0x4005;
pub static LIGHT6: GLenum = 0x4006;
pub static LIGHT7: GLenum = 0x4007;
pub static ABGR_EXT: GLenum = 0x8000;
pub static CONSTANT_COLOR: GLenum = 0x8001;
pub static CONSTANT_COLOR_EXT: GLenum = 0x8001;
pub static ONE_MINUS_CONSTANT_COLOR: GLenum = 0x8002;
pub static ONE_MINUS_CONSTANT_COLOR_EXT: GLenum = 0x8002;
pub static CONSTANT_ALPHA: GLenum = 0x8003;
pub static CONSTANT_ALPHA_EXT: GLenum = 0x8003;
pub static ONE_MINUS_CONSTANT_ALPHA: GLenum = 0x8004;
pub static ONE_MINUS_CONSTANT_ALPHA_EXT: GLenum = 0x8004;
pub static BLEND_COLOR: GLenum = 0x8005;
pub static BLEND_COLOR_EXT: GLenum = 0x8005;
pub static FUNC_ADD: GLenum = 0x8006;
pub static FUNC_ADD_EXT: GLenum = 0x8006;
pub static FUNC_ADD_OES: GLenum = 0x8006;
pub static MIN: GLenum = 0x8007;
pub static MIN_EXT: GLenum = 0x8007;
pub static MAX: GLenum = 0x8008;
pub static MAX_EXT: GLenum = 0x8008;
pub static BLEND_EQUATION: GLenum = 0x8009;
pub static BLEND_EQUATION_EXT: GLenum = 0x8009;
pub static BLEND_EQUATION_OES: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB_EXT: GLenum = 0x8009;
pub static BLEND_EQUATION_RGB_OES: GLenum = 0x8009;
pub static FUNC_SUBTRACT: GLenum = 0x800A;
pub static FUNC_SUBTRACT_EXT: GLenum = 0x800A;
pub static FUNC_SUBTRACT_OES: GLenum = 0x800A;
pub static FUNC_REVERSE_SUBTRACT: GLenum = 0x800B;
pub static FUNC_REVERSE_SUBTRACT_EXT: GLenum = 0x800B;
pub static FUNC_REVERSE_SUBTRACT_OES: GLenum = 0x800B;
pub static CMYK_EXT: GLenum = 0x800C;
pub static CMYKA_EXT: GLenum = 0x800D;
pub static PACK_CMYK_HINT_EXT: GLenum = 0x800E;
pub static UNPACK_CMYK_HINT_EXT: GLenum = 0x800F;
pub static CONVOLUTION_1D: GLenum = 0x8010;
pub static CONVOLUTION_1D_EXT: GLenum = 0x8010;
pub static CONVOLUTION_2D: GLenum = 0x8011;
pub static CONVOLUTION_2D_EXT: GLenum = 0x8011;
pub static SEPARABLE_2D: GLenum = 0x8012;
pub static SEPARABLE_2D_EXT: GLenum = 0x8012;
pub static CONVOLUTION_BORDER_MODE: GLenum = 0x8013;
pub static CONVOLUTION_BORDER_MODE_EXT: GLenum = 0x8013;
pub static CONVOLUTION_FILTER_SCALE: GLenum = 0x8014;
pub static CONVOLUTION_FILTER_SCALE_EXT: GLenum = 0x8014;
pub static CONVOLUTION_FILTER_BIAS: GLenum = 0x8015;
pub static CONVOLUTION_FILTER_BIAS_EXT: GLenum = 0x8015;
pub static REDUCE: GLenum = 0x8016;
pub static REDUCE_EXT: GLenum = 0x8016;
pub static CONVOLUTION_FORMAT: GLenum = 0x8017;
pub static CONVOLUTION_FORMAT_EXT: GLenum = 0x8017;
pub static CONVOLUTION_WIDTH: GLenum = 0x8018;
pub static CONVOLUTION_WIDTH_EXT: GLenum = 0x8018;
pub static CONVOLUTION_HEIGHT: GLenum = 0x8019;
pub static CONVOLUTION_HEIGHT_EXT: GLenum = 0x8019;
pub static MAX_CONVOLUTION_WIDTH: GLenum = 0x801A;
pub static MAX_CONVOLUTION_WIDTH_EXT: GLenum = 0x801A;
pub static MAX_CONVOLUTION_HEIGHT: GLenum = 0x801B;
pub static MAX_CONVOLUTION_HEIGHT_EXT: GLenum = 0x801B;
pub static POST_CONVOLUTION_RED_SCALE: GLenum = 0x801C;
pub static POST_CONVOLUTION_RED_SCALE_EXT: GLenum = 0x801C;
pub static POST_CONVOLUTION_GREEN_SCALE: GLenum = 0x801D;
pub static POST_CONVOLUTION_GREEN_SCALE_EXT: GLenum = 0x801D;
pub static POST_CONVOLUTION_BLUE_SCALE: GLenum = 0x801E;
pub static POST_CONVOLUTION_BLUE_SCALE_EXT: GLenum = 0x801E;
pub static POST_CONVOLUTION_ALPHA_SCALE: GLenum = 0x801F;
pub static POST_CONVOLUTION_ALPHA_SCALE_EXT: GLenum = 0x801F;
pub static POST_CONVOLUTION_RED_BIAS: GLenum = 0x8020;
pub static POST_CONVOLUTION_RED_BIAS_EXT: GLenum = 0x8020;
pub static POST_CONVOLUTION_GREEN_BIAS: GLenum = 0x8021;
pub static POST_CONVOLUTION_GREEN_BIAS_EXT: GLenum = 0x8021;
pub static POST_CONVOLUTION_BLUE_BIAS: GLenum = 0x8022;
pub static POST_CONVOLUTION_BLUE_BIAS_EXT: GLenum = 0x8022;
pub static POST_CONVOLUTION_ALPHA_BIAS: GLenum = 0x8023;
pub static POST_CONVOLUTION_ALPHA_BIAS_EXT: GLenum = 0x8023;
pub static HISTOGRAM: GLenum = 0x8024;
pub static HISTOGRAM_EXT: GLenum = 0x8024;
pub static PROXY_HISTOGRAM: GLenum = 0x8025;
pub static PROXY_HISTOGRAM_EXT: GLenum = 0x8025;
pub static HISTOGRAM_WIDTH: GLenum = 0x8026;
pub static HISTOGRAM_WIDTH_EXT: GLenum = 0x8026;
pub static HISTOGRAM_FORMAT: GLenum = 0x8027;
pub static HISTOGRAM_FORMAT_EXT: GLenum = 0x8027;
pub static HISTOGRAM_RED_SIZE: GLenum = 0x8028;
pub static HISTOGRAM_RED_SIZE_EXT: GLenum = 0x8028;
pub static HISTOGRAM_GREEN_SIZE: GLenum = 0x8029;
pub static HISTOGRAM_GREEN_SIZE_EXT: GLenum = 0x8029;
pub static HISTOGRAM_BLUE_SIZE: GLenum = 0x802A;
pub static HISTOGRAM_BLUE_SIZE_EXT: GLenum = 0x802A;
pub static HISTOGRAM_ALPHA_SIZE: GLenum = 0x802B;
pub static HISTOGRAM_ALPHA_SIZE_EXT: GLenum = 0x802B;
pub static HISTOGRAM_LUMINANCE_SIZE: GLenum = 0x802C;
pub static HISTOGRAM_LUMINANCE_SIZE_EXT: GLenum = 0x802C;
pub static HISTOGRAM_SINK: GLenum = 0x802D;
pub static HISTOGRAM_SINK_EXT: GLenum = 0x802D;
pub static MINMAX: GLenum = 0x802E;
pub static MINMAX_EXT: GLenum = 0x802E;
pub static MINMAX_FORMAT: GLenum = 0x802F;
pub static MINMAX_FORMAT_EXT: GLenum = 0x802F;
pub static MINMAX_SINK: GLenum = 0x8030;
pub static MINMAX_SINK_EXT: GLenum = 0x8030;
pub static TABLE_TOO_LARGE_EXT: GLenum = 0x8031;
pub static TABLE_TOO_LARGE: GLenum = 0x8031;
pub static UNSIGNED_BYTE_3_3_2: GLenum = 0x8032;
pub static UNSIGNED_BYTE_3_3_2_EXT: GLenum = 0x8032;
pub static UNSIGNED_SHORT_4_4_4_4: GLenum = 0x8033;
pub static UNSIGNED_SHORT_4_4_4_4_EXT: GLenum = 0x8033;
pub static UNSIGNED_SHORT_5_5_5_1: GLenum = 0x8034;
pub static UNSIGNED_SHORT_5_5_5_1_EXT: GLenum = 0x8034;
pub static UNSIGNED_INT_8_8_8_8: GLenum = 0x8035;
pub static UNSIGNED_INT_8_8_8_8_EXT: GLenum = 0x8035;
pub static UNSIGNED_INT_10_10_10_2: GLenum = 0x8036;
pub static UNSIGNED_INT_10_10_10_2_EXT: GLenum = 0x8036;
pub static POLYGON_OFFSET_EXT: GLenum = 0x8037;
pub static POLYGON_OFFSET_FILL: GLenum = 0x8037;
pub static POLYGON_OFFSET_FACTOR: GLenum = 0x8038;
pub static POLYGON_OFFSET_FACTOR_EXT: GLenum = 0x8038;
pub static POLYGON_OFFSET_BIAS_EXT: GLenum = 0x8039;
pub static RESCALE_NORMAL: GLenum = 0x803A;
pub static RESCALE_NORMAL_EXT: GLenum = 0x803A;
pub static ALPHA4: GLenum = 0x803B;
pub static ALPHA4_EXT: GLenum = 0x803B;
pub static ALPHA8: GLenum = 0x803C;
pub static ALPHA8_EXT: GLenum = 0x803C;
pub static ALPHA12: GLenum = 0x803D;
pub static ALPHA12_EXT: GLenum = 0x803D;
pub static ALPHA16: GLenum = 0x803E;
pub static ALPHA16_EXT: GLenum = 0x803E;
pub static LUMINANCE4: GLenum = 0x803F;
pub static LUMINANCE4_EXT: GLenum = 0x803F;
pub static LUMINANCE8: GLenum = 0x8040;
pub static LUMINANCE8_EXT: GLenum = 0x8040;
pub static LUMINANCE12: GLenum = 0x8041;
pub static LUMINANCE12_EXT: GLenum = 0x8041;
pub static LUMINANCE16: GLenum = 0x8042;
pub static LUMINANCE16_EXT: GLenum = 0x8042;
pub static LUMINANCE4_ALPHA4: GLenum = 0x8043;
pub static LUMINANCE4_ALPHA4_EXT: GLenum = 0x8043;
pub static LUMINANCE6_ALPHA2: GLenum = 0x8044;
pub static LUMINANCE6_ALPHA2_EXT: GLenum = 0x8044;
pub static LUMINANCE8_ALPHA8: GLenum = 0x8045;
pub static LUMINANCE8_ALPHA8_EXT: GLenum = 0x8045;
pub static LUMINANCE12_ALPHA4: GLenum = 0x8046;
pub static LUMINANCE12_ALPHA4_EXT: GLenum = 0x8046;
pub static LUMINANCE12_ALPHA12: GLenum = 0x8047;
pub static LUMINANCE12_ALPHA12_EXT: GLenum = 0x8047;
pub static LUMINANCE16_ALPHA16: GLenum = 0x8048;
pub static LUMINANCE16_ALPHA16_EXT: GLenum = 0x8048;
pub static INTENSITY: GLenum = 0x8049;
pub static INTENSITY_EXT: GLenum = 0x8049;
pub static INTENSITY4: GLenum = 0x804A;
pub static INTENSITY4_EXT: GLenum = 0x804A;
pub static INTENSITY8: GLenum = 0x804B;
pub static INTENSITY8_EXT: GLenum = 0x804B;
pub static INTENSITY12: GLenum = 0x804C;
pub static INTENSITY12_EXT: GLenum = 0x804C;
pub static INTENSITY16: GLenum = 0x804D;
pub static INTENSITY16_EXT: GLenum = 0x804D;
pub static RGB2_EXT: GLenum = 0x804E;
pub static RGB4: GLenum = 0x804F;
pub static RGB4_EXT: GLenum = 0x804F;
pub static RGB5: GLenum = 0x8050;
pub static RGB5_EXT: GLenum = 0x8050;
pub static RGB8: GLenum = 0x8051;
pub static RGB8_EXT: GLenum = 0x8051;
pub static RGB10: GLenum = 0x8052;
pub static RGB10_EXT: GLenum = 0x8052;
pub static RGB12: GLenum = 0x8053;
pub static RGB12_EXT: GLenum = 0x8053;
pub static RGB16: GLenum = 0x8054;
pub static RGB16_EXT: GLenum = 0x8054;
pub static RGBA2: GLenum = 0x8055;
pub static RGBA2_EXT: GLenum = 0x8055;
pub static RGBA4: GLenum = 0x8056;
pub static RGBA4_EXT: GLenum = 0x8056;
pub static RGBA4_OES: GLenum = 0x8056;
pub static RGB5_A1: GLenum = 0x8057;
pub static RGB5_A1_EXT: GLenum = 0x8057;
pub static RGB5_A1_OES: GLenum = 0x8057;
pub static RGBA8: GLenum = 0x8058;
pub static RGBA8_EXT: GLenum = 0x8058;
pub static RGBA8_OES: GLenum = 0x8058;
pub static RGB10_A2: GLenum = 0x8059;
pub static RGB10_A2_EXT: GLenum = 0x8059;
pub static RGBA12: GLenum = 0x805A;
pub static RGBA12_EXT: GLenum = 0x805A;
pub static RGBA16: GLenum = 0x805B;
pub static RGBA16_EXT: GLenum = 0x805B;
pub static TEXTURE_RED_SIZE: GLenum = 0x805C;
pub static TEXTURE_RED_SIZE_EXT: GLenum = 0x805C;
pub static TEXTURE_GREEN_SIZE: GLenum = 0x805D;
pub static TEXTURE_GREEN_SIZE_EXT: GLenum = 0x805D;
pub static TEXTURE_BLUE_SIZE: GLenum = 0x805E;
pub static TEXTURE_BLUE_SIZE_EXT: GLenum = 0x805E;
pub static TEXTURE_ALPHA_SIZE: GLenum = 0x805F;
pub static TEXTURE_ALPHA_SIZE_EXT: GLenum = 0x805F;
pub static TEXTURE_LUMINANCE_SIZE: GLenum = 0x8060;
pub static TEXTURE_LUMINANCE_SIZE_EXT: GLenum = 0x8060;
pub static TEXTURE_INTENSITY_SIZE: GLenum = 0x8061;
pub static TEXTURE_INTENSITY_SIZE_EXT: GLenum = 0x8061;
pub static REPLACE_EXT: GLenum = 0x8062;
pub static PROXY_TEXTURE_1D: GLenum = 0x8063;
pub static PROXY_TEXTURE_1D_EXT: GLenum = 0x8063;
pub static PROXY_TEXTURE_2D: GLenum = 0x8064;
pub static PROXY_TEXTURE_2D_EXT: GLenum = 0x8064;
pub static TEXTURE_TOO_LARGE_EXT: GLenum = 0x8065;
pub static TEXTURE_PRIORITY: GLenum = 0x8066;
pub static TEXTURE_PRIORITY_EXT: GLenum = 0x8066;
pub static TEXTURE_RESIDENT: GLenum = 0x8067;
pub static TEXTURE_RESIDENT_EXT: GLenum = 0x8067;
pub static TEXTURE_1D_BINDING_EXT: GLenum = 0x8068;
pub static TEXTURE_BINDING_1D: GLenum = 0x8068;
pub static TEXTURE_2D_BINDING_EXT: GLenum = 0x8069;
pub static TEXTURE_BINDING_2D: GLenum = 0x8069;
pub static TEXTURE_3D_BINDING_EXT: GLenum = 0x806A;
pub static TEXTURE_3D_BINDING_OES: GLenum = 0x806A;
pub static TEXTURE_BINDING_3D: GLenum = 0x806A;
pub static PACK_SKIP_IMAGES: GLenum = 0x806B;
pub static PACK_SKIP_IMAGES_EXT: GLenum = 0x806B;
pub static PACK_IMAGE_HEIGHT: GLenum = 0x806C;
pub static PACK_IMAGE_HEIGHT_EXT: GLenum = 0x806C;
pub static UNPACK_SKIP_IMAGES: GLenum = 0x806D;
pub static UNPACK_SKIP_IMAGES_EXT: GLenum = 0x806D;
pub static UNPACK_IMAGE_HEIGHT: GLenum = 0x806E;
pub static UNPACK_IMAGE_HEIGHT_EXT: GLenum = 0x806E;
pub static TEXTURE_3D: GLenum = 0x806F;
pub static TEXTURE_3D_EXT: GLenum = 0x806F;
pub static TEXTURE_3D_OES: GLenum = 0x806F;
pub static PROXY_TEXTURE_3D: GLenum = 0x8070;
pub static PROXY_TEXTURE_3D_EXT: GLenum = 0x8070;
pub static TEXTURE_DEPTH: GLenum = 0x8071;
pub static TEXTURE_DEPTH_EXT: GLenum = 0x8071;
pub static TEXTURE_WRAP_R: GLenum = 0x8072;
pub static TEXTURE_WRAP_R_EXT: GLenum = 0x8072;
pub static TEXTURE_WRAP_R_OES: GLenum = 0x8072;
pub static MAX_3D_TEXTURE_SIZE: GLenum = 0x8073;
pub static MAX_3D_TEXTURE_SIZE_EXT: GLenum = 0x8073;
pub static MAX_3D_TEXTURE_SIZE_OES: GLenum = 0x8073;
pub static VERTEX_ARRAY: GLenum = 0x8074;
pub static VERTEX_ARRAY_EXT: GLenum = 0x8074;
pub static NORMAL_ARRAY: GLenum = 0x8075;
pub static NORMAL_ARRAY_EXT: GLenum = 0x8075;
pub static COLOR_ARRAY: GLenum = 0x8076;
pub static COLOR_ARRAY_EXT: GLenum = 0x8076;
pub static INDEX_ARRAY: GLenum = 0x8077;
pub static INDEX_ARRAY_EXT: GLenum = 0x8077;
pub static TEXTURE_COORD_ARRAY: GLenum = 0x8078;
pub static TEXTURE_COORD_ARRAY_EXT: GLenum = 0x8078;
pub static EDGE_FLAG_ARRAY: GLenum = 0x8079;
pub static EDGE_FLAG_ARRAY_EXT: GLenum = 0x8079;
pub static VERTEX_ARRAY_SIZE: GLenum = 0x807A;
pub static VERTEX_ARRAY_SIZE_EXT: GLenum = 0x807A;
pub static VERTEX_ARRAY_TYPE: GLenum = 0x807B;
pub static VERTEX_ARRAY_TYPE_EXT: GLenum = 0x807B;
pub static VERTEX_ARRAY_STRIDE: GLenum = 0x807C;
pub static VERTEX_ARRAY_STRIDE_EXT: GLenum = 0x807C;
pub static VERTEX_ARRAY_COUNT_EXT: GLenum = 0x807D;
pub static NORMAL_ARRAY_TYPE: GLenum = 0x807E;
pub static NORMAL_ARRAY_TYPE_EXT: GLenum = 0x807E;
pub static NORMAL_ARRAY_STRIDE: GLenum = 0x807F;
pub static NORMAL_ARRAY_STRIDE_EXT: GLenum = 0x807F;
pub static NORMAL_ARRAY_COUNT_EXT: GLenum = 0x8080;
pub static COLOR_ARRAY_SIZE: GLenum = 0x8081;
pub static COLOR_ARRAY_SIZE_EXT: GLenum = 0x8081;
pub static COLOR_ARRAY_TYPE: GLenum = 0x8082;
pub static COLOR_ARRAY_TYPE_EXT: GLenum = 0x8082;
pub static COLOR_ARRAY_STRIDE: GLenum = 0x8083;
pub static COLOR_ARRAY_STRIDE_EXT: GLenum = 0x8083;
pub static COLOR_ARRAY_COUNT_EXT: GLenum = 0x8084;
pub static INDEX_ARRAY_TYPE: GLenum = 0x8085;
pub static INDEX_ARRAY_TYPE_EXT: GLenum = 0x8085;
pub static INDEX_ARRAY_STRIDE: GLenum = 0x8086;
pub static INDEX_ARRAY_STRIDE_EXT: GLenum = 0x8086;
pub static INDEX_ARRAY_COUNT_EXT: GLenum = 0x8087;
pub static TEXTURE_COORD_ARRAY_SIZE: GLenum = 0x8088;
pub static TEXTURE_COORD_ARRAY_SIZE_EXT: GLenum = 0x8088;
pub static TEXTURE_COORD_ARRAY_TYPE: GLenum = 0x8089;
pub static TEXTURE_COORD_ARRAY_TYPE_EXT: GLenum = 0x8089;
pub static TEXTURE_COORD_ARRAY_STRIDE: GLenum = 0x808A;
pub static TEXTURE_COORD_ARRAY_STRIDE_EXT: GLenum = 0x808A;
pub static TEXTURE_COORD_ARRAY_COUNT_EXT: GLenum = 0x808B;
pub static EDGE_FLAG_ARRAY_STRIDE: GLenum = 0x808C;
pub static EDGE_FLAG_ARRAY_STRIDE_EXT: GLenum = 0x808C;
pub static EDGE_FLAG_ARRAY_COUNT_EXT: GLenum = 0x808D;
pub static VERTEX_ARRAY_POINTER: GLenum = 0x808E;
pub static VERTEX_ARRAY_POINTER_EXT: GLenum = 0x808E;
pub static NORMAL_ARRAY_POINTER: GLenum = 0x808F;
pub static NORMAL_ARRAY_POINTER_EXT: GLenum = 0x808F;
pub static COLOR_ARRAY_POINTER: GLenum = 0x8090;
pub static COLOR_ARRAY_POINTER_EXT: GLenum = 0x8090;
pub static INDEX_ARRAY_POINTER: GLenum = 0x8091;
pub static INDEX_ARRAY_POINTER_EXT: GLenum = 0x8091;
pub static TEXTURE_COORD_ARRAY_POINTER: GLenum = 0x8092;
pub static TEXTURE_COORD_ARRAY_POINTER_EXT: GLenum = 0x8092;
pub static EDGE_FLAG_ARRAY_POINTER: GLenum = 0x8093;
pub static EDGE_FLAG_ARRAY_POINTER_EXT: GLenum = 0x8093;
pub static INTERLACE_SGIX: GLenum = 0x8094;
pub static DETAIL_TEXTURE_2D_SGIS: GLenum = 0x8095;
pub static DETAIL_TEXTURE_2D_BINDING_SGIS: GLenum = 0x8096;
pub static LINEAR_DETAIL_SGIS: GLenum = 0x8097;
pub static LINEAR_DETAIL_ALPHA_SGIS: GLenum = 0x8098;
pub static LINEAR_DETAIL_COLOR_SGIS: GLenum = 0x8099;
pub static DETAIL_TEXTURE_LEVEL_SGIS: GLenum = 0x809A;
pub static DETAIL_TEXTURE_MODE_SGIS: GLenum = 0x809B;
pub static DETAIL_TEXTURE_FUNC_POINTS_SGIS: GLenum = 0x809C;
pub static MULTISAMPLE: GLenum = 0x809D;
pub static MULTISAMPLE_ARB: GLenum = 0x809D;
pub static MULTISAMPLE_EXT: GLenum = 0x809D;
pub static MULTISAMPLE_SGIS: GLenum = 0x809D;
pub static SAMPLE_ALPHA_TO_COVERAGE: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_COVERAGE_ARB: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_MASK_EXT: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_MASK_SGIS: GLenum = 0x809E;
pub static SAMPLE_ALPHA_TO_ONE: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_ARB: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_EXT: GLenum = 0x809F;
pub static SAMPLE_ALPHA_TO_ONE_SGIS: GLenum = 0x809F;
pub static SAMPLE_COVERAGE: GLenum = 0x80A0;
pub static SAMPLE_COVERAGE_ARB: GLenum = 0x80A0;
pub static SAMPLE_MASK_EXT: GLenum = 0x80A0;
pub static SAMPLE_MASK_SGIS: GLenum = 0x80A0;
pub static _1PASS_EXT: GLenum = 0x80A1;
pub static _1PASS_SGIS: GLenum = 0x80A1;
pub static _2PASS_0_EXT: GLenum = 0x80A2;
pub static _2PASS_0_SGIS: GLenum = 0x80A2;
pub static _2PASS_1_EXT: GLenum = 0x80A3;
pub static _2PASS_1_SGIS: GLenum = 0x80A3;
pub static _4PASS_0_EXT: GLenum = 0x80A4;
pub static _4PASS_0_SGIS: GLenum = 0x80A4;
pub static _4PASS_1_EXT: GLenum = 0x80A5;
pub static _4PASS_1_SGIS: GLenum = 0x80A5;
pub static _4PASS_2_EXT: GLenum = 0x80A6;
pub static _4PASS_2_SGIS: GLenum = 0x80A6;
pub static _4PASS_3_EXT: GLenum = 0x80A7;
pub static _4PASS_3_SGIS: GLenum = 0x80A7;
pub static SAMPLE_BUFFERS: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_ARB: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_EXT: GLenum = 0x80A8;
pub static SAMPLE_BUFFERS_SGIS: GLenum = 0x80A8;
pub static SAMPLES: GLenum = 0x80A9;
pub static SAMPLES_ARB: GLenum = 0x80A9;
pub static SAMPLES_EXT: GLenum = 0x80A9;
pub static SAMPLES_SGIS: GLenum = 0x80A9;
pub static SAMPLE_COVERAGE_VALUE: GLenum = 0x80AA;
pub static SAMPLE_COVERAGE_VALUE_ARB: GLenum = 0x80AA;
pub static SAMPLE_MASK_VALUE_EXT: GLenum = 0x80AA;
pub static SAMPLE_MASK_VALUE_SGIS: GLenum = 0x80AA;
pub static SAMPLE_COVERAGE_INVERT: GLenum = 0x80AB;
pub static SAMPLE_COVERAGE_INVERT_ARB: GLenum = 0x80AB;
pub static SAMPLE_MASK_INVERT_EXT: GLenum = 0x80AB;
pub static SAMPLE_MASK_INVERT_SGIS: GLenum = 0x80AB;
pub static SAMPLE_PATTERN_EXT: GLenum = 0x80AC;
pub static SAMPLE_PATTERN_SGIS: GLenum = 0x80AC;
pub static LINEAR_SHARPEN_SGIS: GLenum = 0x80AD;
pub static LINEAR_SHARPEN_ALPHA_SGIS: GLenum = 0x80AE;
pub static LINEAR_SHARPEN_COLOR_SGIS: GLenum = 0x80AF;
pub static SHARPEN_TEXTURE_FUNC_POINTS_SGIS: GLenum = 0x80B0;
pub static COLOR_MATRIX: GLenum = 0x80B1;
pub static COLOR_MATRIX_SGI: GLenum = 0x80B1;
pub static COLOR_MATRIX_STACK_DEPTH: GLenum = 0x80B2;
pub static COLOR_MATRIX_STACK_DEPTH_SGI: GLenum = 0x80B2;
pub static MAX_COLOR_MATRIX_STACK_DEPTH: GLenum = 0x80B3;
pub static MAX_COLOR_MATRIX_STACK_DEPTH_SGI: GLenum = 0x80B3;
pub static POST_COLOR_MATRIX_RED_SCALE: GLenum = 0x80B4;
pub static POST_COLOR_MATRIX_RED_SCALE_SGI: GLenum = 0x80B4;
pub static POST_COLOR_MATRIX_GREEN_SCALE: GLenum = 0x80B5;
pub static POST_COLOR_MATRIX_GREEN_SCALE_SGI: GLenum = 0x80B5;
pub static POST_COLOR_MATRIX_BLUE_SCALE: GLenum = 0x80B6;
pub static POST_COLOR_MATRIX_BLUE_SCALE_SGI: GLenum = 0x80B6;
pub static POST_COLOR_MATRIX_ALPHA_SCALE: GLenum = 0x80B7;
pub static POST_COLOR_MATRIX_ALPHA_SCALE_SGI: GLenum = 0x80B7;
pub static POST_COLOR_MATRIX_RED_BIAS: GLenum = 0x80B8;
pub static POST_COLOR_MATRIX_RED_BIAS_SGI: GLenum = 0x80B8;
pub static POST_COLOR_MATRIX_GREEN_BIAS: GLenum = 0x80B9;
pub static POST_COLOR_MATRIX_GREEN_BIAS_SGI: GLenum = 0x80B9;
pub static POST_COLOR_MATRIX_BLUE_BIAS: GLenum = 0x80BA;
pub static POST_COLOR_MATRIX_BLUE_BIAS_SGI: GLenum = 0x80BA;
pub static POST_COLOR_MATRIX_ALPHA_BIAS: GLenum = 0x80BB;
pub static POST_COLOR_MATRIX_ALPHA_BIAS_SGI: GLenum = 0x80BB;
pub static TEXTURE_COLOR_TABLE_SGI: GLenum = 0x80BC;
pub static PROXY_TEXTURE_COLOR_TABLE_SGI: GLenum = 0x80BD;
pub static TEXTURE_ENV_BIAS_SGIX: GLenum = 0x80BE;
pub static SHADOW_AMBIENT_SGIX: GLenum = 0x80BF;
pub static TEXTURE_COMPARE_FAIL_VALUE_ARB: GLenum = 0x80BF;
pub static BLEND_DST_RGB: GLenum = 0x80C8;
pub static BLEND_DST_RGB_EXT: GLenum = 0x80C8;
pub static BLEND_DST_RGB_OES: GLenum = 0x80C8;
pub static BLEND_SRC_RGB: GLenum = 0x80C9;
pub static BLEND_SRC_RGB_EXT: GLenum = 0x80C9;
pub static BLEND_SRC_RGB_OES: GLenum = 0x80C9;
pub static BLEND_DST_ALPHA: GLenum = 0x80CA;
pub static BLEND_DST_ALPHA_EXT: GLenum = 0x80CA;
pub static BLEND_DST_ALPHA_OES: GLenum = 0x80CA;
pub static BLEND_SRC_ALPHA: GLenum = 0x80CB;
pub static BLEND_SRC_ALPHA_EXT: GLenum = 0x80CB;
pub static BLEND_SRC_ALPHA_OES: GLenum = 0x80CB;
pub static _422_EXT: GLenum = 0x80CC;
pub static _422_REV_EXT: GLenum = 0x80CD;
pub static _422_AVERAGE_EXT: GLenum = 0x80CE;
pub static _422_REV_AVERAGE_EXT: GLenum = 0x80CF;
pub static COLOR_TABLE: GLenum = 0x80D0;
pub static COLOR_TABLE_SGI: GLenum = 0x80D0;
pub static POST_CONVOLUTION_COLOR_TABLE: GLenum = 0x80D1;
pub static POST_CONVOLUTION_COLOR_TABLE_SGI: GLenum = 0x80D1;
pub static POST_COLOR_MATRIX_COLOR_TABLE: GLenum = 0x80D2;
pub static POST_COLOR_MATRIX_COLOR_TABLE_SGI: GLenum = 0x80D2;
pub static PROXY_COLOR_TABLE: GLenum = 0x80D3;
pub static PROXY_COLOR_TABLE_SGI: GLenum = 0x80D3;
pub static PROXY_POST_CONVOLUTION_COLOR_TABLE: GLenum = 0x80D4;
pub static PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI: GLenum = 0x80D4;
pub static PROXY_POST_COLOR_MATRIX_COLOR_TABLE: GLenum = 0x80D5;
pub static PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI: GLenum = 0x80D5;
pub static COLOR_TABLE_SCALE: GLenum = 0x80D6;
pub static COLOR_TABLE_SCALE_SGI: GLenum = 0x80D6;
pub static COLOR_TABLE_BIAS: GLenum = 0x80D7;
pub static COLOR_TABLE_BIAS_SGI: GLenum = 0x80D7;
pub static COLOR_TABLE_FORMAT: GLenum = 0x80D8;
pub static COLOR_TABLE_FORMAT_SGI: GLenum = 0x80D8;
pub static COLOR_TABLE_WIDTH: GLenum = 0x80D9;
pub static COLOR_TABLE_WIDTH_SGI: GLenum = 0x80D9;
pub static COLOR_TABLE_RED_SIZE: GLenum = 0x80DA;
pub static COLOR_TABLE_RED_SIZE_SGI: GLenum = 0x80DA;
pub static COLOR_TABLE_GREEN_SIZE: GLenum = 0x80DB;
pub static COLOR_TABLE_GREEN_SIZE_SGI: GLenum = 0x80DB;
pub static COLOR_TABLE_BLUE_SIZE: GLenum = 0x80DC;
pub static COLOR_TABLE_BLUE_SIZE_SGI: GLenum = 0x80DC;
pub static COLOR_TABLE_ALPHA_SIZE: GLenum = 0x80DD;
pub static COLOR_TABLE_ALPHA_SIZE_SGI: GLenum = 0x80DD;
pub static COLOR_TABLE_LUMINANCE_SIZE: GLenum = 0x80DE;
pub static COLOR_TABLE_LUMINANCE_SIZE_SGI: GLenum = 0x80DE;
pub static COLOR_TABLE_INTENSITY_SIZE: GLenum = 0x80DF;
pub static COLOR_TABLE_INTENSITY_SIZE_SGI: GLenum = 0x80DF;
pub static BGR: GLenum = 0x80E0;
pub static BGR_EXT: GLenum = 0x80E0;
pub static BGRA: GLenum = 0x80E1;
pub static BGRA_EXT: GLenum = 0x80E1;
pub static COLOR_INDEX1_EXT: GLenum = 0x80E2;
pub static COLOR_INDEX2_EXT: GLenum = 0x80E3;
pub static COLOR_INDEX4_EXT: GLenum = 0x80E4;
pub static COLOR_INDEX8_EXT: GLenum = 0x80E5;
pub static COLOR_INDEX12_EXT: GLenum = 0x80E6;
pub static COLOR_INDEX16_EXT: GLenum = 0x80E7;
pub static MAX_ELEMENTS_VERTICES: GLenum = 0x80E8;
pub static MAX_ELEMENTS_VERTICES_EXT: GLenum = 0x80E8;
pub static MAX_ELEMENTS_INDICES: GLenum = 0x80E9;
pub static MAX_ELEMENTS_INDICES_EXT: GLenum = 0x80E9;
pub static PHONG_WIN: GLenum = 0x80EA;
pub static PHONG_HINT_WIN: GLenum = 0x80EB;
pub static FOG_SPECULAR_TEXTURE_WIN: GLenum = 0x80EC;
pub static TEXTURE_INDEX_SIZE_EXT: GLenum = 0x80ED;
pub static PARAMETER_BUFFER_ARB: GLenum = 0x80EE;
pub static PARAMETER_BUFFER_BINDING_ARB: GLenum = 0x80EF;
pub static CLIP_VOLUME_CLIPPING_HINT_EXT: GLenum = 0x80F0;
pub static DUAL_ALPHA4_SGIS: GLenum = 0x8110;
pub static DUAL_ALPHA8_SGIS: GLenum = 0x8111;
pub static DUAL_ALPHA12_SGIS: GLenum = 0x8112;
pub static DUAL_ALPHA16_SGIS: GLenum = 0x8113;
pub static DUAL_LUMINANCE4_SGIS: GLenum = 0x8114;
pub static DUAL_LUMINANCE8_SGIS: GLenum = 0x8115;
pub static DUAL_LUMINANCE12_SGIS: GLenum = 0x8116;
pub static DUAL_LUMINANCE16_SGIS: GLenum = 0x8117;
pub static DUAL_INTENSITY4_SGIS: GLenum = 0x8118;
pub static DUAL_INTENSITY8_SGIS: GLenum = 0x8119;
pub static DUAL_INTENSITY12_SGIS: GLenum = 0x811A;
pub static DUAL_INTENSITY16_SGIS: GLenum = 0x811B;
pub static DUAL_LUMINANCE_ALPHA4_SGIS: GLenum = 0x811C;
pub static DUAL_LUMINANCE_ALPHA8_SGIS: GLenum = 0x811D;
pub static QUAD_ALPHA4_SGIS: GLenum = 0x811E;
pub static QUAD_ALPHA8_SGIS: GLenum = 0x811F;
pub static QUAD_LUMINANCE4_SGIS: GLenum = 0x8120;
pub static QUAD_LUMINANCE8_SGIS: GLenum = 0x8121;
pub static QUAD_INTENSITY4_SGIS: GLenum = 0x8122;
pub static QUAD_INTENSITY8_SGIS: GLenum = 0x8123;
pub static DUAL_TEXTURE_SELECT_SGIS: GLenum = 0x8124;
pub static QUAD_TEXTURE_SELECT_SGIS: GLenum = 0x8125;
pub static POINT_SIZE_MIN: GLenum = 0x8126;
pub static POINT_SIZE_MIN_ARB: GLenum = 0x8126;
pub static POINT_SIZE_MIN_EXT: GLenum = 0x8126;
pub static POINT_SIZE_MIN_SGIS: GLenum = 0x8126;
pub static POINT_SIZE_MAX: GLenum = 0x8127;
pub static POINT_SIZE_MAX_ARB: GLenum = 0x8127;
pub static POINT_SIZE_MAX_EXT: GLenum = 0x8127;
pub static POINT_SIZE_MAX_SGIS: GLenum = 0x8127;
pub static POINT_FADE_THRESHOLD_SIZE: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_ARB: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_EXT: GLenum = 0x8128;
pub static POINT_FADE_THRESHOLD_SIZE_SGIS: GLenum = 0x8128;
pub static DISTANCE_ATTENUATION_EXT: GLenum = 0x8129;
pub static DISTANCE_ATTENUATION_SGIS: GLenum = 0x8129;
pub static POINT_DISTANCE_ATTENUATION: GLenum = 0x8129;
pub static POINT_DISTANCE_ATTENUATION_ARB: GLenum = 0x8129;
pub static FOG_FUNC_SGIS: GLenum = 0x812A;
pub static FOG_FUNC_POINTS_SGIS: GLenum = 0x812B;
pub static MAX_FOG_FUNC_POINTS_SGIS: GLenum = 0x812C;
pub static CLAMP_TO_BORDER: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_ARB: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_NV: GLenum = 0x812D;
pub static CLAMP_TO_BORDER_SGIS: GLenum = 0x812D;
pub static TEXTURE_MULTI_BUFFER_HINT_SGIX: GLenum = 0x812E;
pub static CLAMP_TO_EDGE: GLenum = 0x812F;
pub static CLAMP_TO_EDGE_SGIS: GLenum = 0x812F;
pub static PACK_SKIP_VOLUMES_SGIS: GLenum = 0x8130;
pub static PACK_IMAGE_DEPTH_SGIS: GLenum = 0x8131;
pub static UNPACK_SKIP_VOLUMES_SGIS: GLenum = 0x8132;
pub static UNPACK_IMAGE_DEPTH_SGIS: GLenum = 0x8133;
pub static TEXTURE_4D_SGIS: GLenum = 0x8134;
pub static PROXY_TEXTURE_4D_SGIS: GLenum = 0x8135;
pub static TEXTURE_4DSIZE_SGIS: GLenum = 0x8136;
pub static TEXTURE_WRAP_Q_SGIS: GLenum = 0x8137;
pub static MAX_4D_TEXTURE_SIZE_SGIS: GLenum = 0x8138;
pub static PIXEL_TEX_GEN_SGIX: GLenum = 0x8139;
pub static TEXTURE_MIN_LOD: GLenum = 0x813A;
pub static TEXTURE_MIN_LOD_SGIS: GLenum = 0x813A;
pub static TEXTURE_MAX_LOD: GLenum = 0x813B;
pub static TEXTURE_MAX_LOD_SGIS: GLenum = 0x813B;
pub static TEXTURE_BASE_LEVEL: GLenum = 0x813C;
pub static TEXTURE_BASE_LEVEL_SGIS: GLenum = 0x813C;
pub static TEXTURE_MAX_LEVEL: GLenum = 0x813D;
pub static TEXTURE_MAX_LEVEL_SGIS: GLenum = 0x813D;
pub static PIXEL_TILE_BEST_ALIGNMENT_SGIX: GLenum = 0x813E;
pub static PIXEL_TILE_CACHE_INCREMENT_SGIX: GLenum = 0x813F;
pub static PIXEL_TILE_WIDTH_SGIX: GLenum = 0x8140;
pub static PIXEL_TILE_HEIGHT_SGIX: GLenum = 0x8141;
pub static PIXEL_TILE_GRID_WIDTH_SGIX: GLenum = 0x8142;
pub static PIXEL_TILE_GRID_HEIGHT_SGIX: GLenum = 0x8143;
pub static PIXEL_TILE_GRID_DEPTH_SGIX: GLenum = 0x8144;
pub static PIXEL_TILE_CACHE_SIZE_SGIX: GLenum = 0x8145;
pub static FILTER4_SGIS: GLenum = 0x8146;
pub static TEXTURE_FILTER4_SIZE_SGIS: GLenum = 0x8147;
pub static SPRITE_SGIX: GLenum = 0x8148;
pub static SPRITE_MODE_SGIX: GLenum = 0x8149;
pub static SPRITE_AXIS_SGIX: GLenum = 0x814A;
pub static SPRITE_TRANSLATION_SGIX: GLenum = 0x814B;
pub static SPRITE_AXIAL_SGIX: GLenum = 0x814C;
pub static SPRITE_OBJECT_ALIGNED_SGIX: GLenum = 0x814D;
pub static SPRITE_EYE_ALIGNED_SGIX: GLenum = 0x814E;
pub static TEXTURE_4D_BINDING_SGIS: GLenum = 0x814F;
pub static IGNORE_BORDER_HP: GLenum = 0x8150;
pub static CONSTANT_BORDER: GLenum = 0x8151;
pub static CONSTANT_BORDER_HP: GLenum = 0x8151;
pub static REPLICATE_BORDER: GLenum = 0x8153;
pub static REPLICATE_BORDER_HP: GLenum = 0x8153;
pub static CONVOLUTION_BORDER_COLOR: GLenum = 0x8154;
pub static CONVOLUTION_BORDER_COLOR_HP: GLenum = 0x8154;
pub static IMAGE_SCALE_X_HP: GLenum = 0x8155;
pub static IMAGE_SCALE_Y_HP: GLenum = 0x8156;
pub static IMAGE_TRANSLATE_X_HP: GLenum = 0x8157;
pub static IMAGE_TRANSLATE_Y_HP: GLenum = 0x8158;
pub static IMAGE_ROTATE_ANGLE_HP: GLenum = 0x8159;
pub static IMAGE_ROTATE_ORIGIN_X_HP: GLenum = 0x815A;
pub static IMAGE_ROTATE_ORIGIN_Y_HP: GLenum = 0x815B;
pub static IMAGE_MAG_FILTER_HP: GLenum = 0x815C;
pub static IMAGE_MIN_FILTER_HP: GLenum = 0x815D;
pub static IMAGE_CUBIC_WEIGHT_HP: GLenum = 0x815E;
pub static CUBIC_HP: GLenum = 0x815F;
pub static AVERAGE_HP: GLenum = 0x8160;
pub static IMAGE_TRANSFORM_2D_HP: GLenum = 0x8161;
pub static POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: GLenum = 0x8162;
pub static PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP: GLenum = 0x8163;
pub static OCCLUSION_TEST_HP: GLenum = 0x8165;
pub static OCCLUSION_TEST_RESULT_HP: GLenum = 0x8166;
pub static TEXTURE_LIGHTING_MODE_HP: GLenum = 0x8167;
pub static TEXTURE_POST_SPECULAR_HP: GLenum = 0x8168;
pub static TEXTURE_PRE_SPECULAR_HP: GLenum = 0x8169;
pub static LINEAR_CLIPMAP_LINEAR_SGIX: GLenum = 0x8170;
pub static TEXTURE_CLIPMAP_CENTER_SGIX: GLenum = 0x8171;
pub static TEXTURE_CLIPMAP_FRAME_SGIX: GLenum = 0x8172;
pub static TEXTURE_CLIPMAP_OFFSET_SGIX: GLenum = 0x8173;
pub static TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX: GLenum = 0x8174;
pub static TEXTURE_CLIPMAP_LOD_OFFSET_SGIX: GLenum = 0x8175;
pub static TEXTURE_CLIPMAP_DEPTH_SGIX: GLenum = 0x8176;
pub static MAX_CLIPMAP_DEPTH_SGIX: GLenum = 0x8177;
pub static MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX: GLenum = 0x8178;
pub static POST_TEXTURE_FILTER_BIAS_SGIX: GLenum = 0x8179;
pub static POST_TEXTURE_FILTER_SCALE_SGIX: GLenum = 0x817A;
pub static POST_TEXTURE_FILTER_BIAS_RANGE_SGIX: GLenum = 0x817B;
pub static POST_TEXTURE_FILTER_SCALE_RANGE_SGIX: GLenum = 0x817C;
pub static REFERENCE_PLANE_SGIX: GLenum = 0x817D;
pub static REFERENCE_PLANE_EQUATION_SGIX: GLenum = 0x817E;
pub static IR_INSTRUMENT1_SGIX: GLenum = 0x817F;
pub static INSTRUMENT_BUFFER_POINTER_SGIX: GLenum = 0x8180;
pub static INSTRUMENT_MEASUREMENTS_SGIX: GLenum = 0x8181;
pub static LIST_PRIORITY_SGIX: GLenum = 0x8182;
pub static CALLIGRAPHIC_FRAGMENT_SGIX: GLenum = 0x8183;
pub static PIXEL_TEX_GEN_Q_CEILING_SGIX: GLenum = 0x8184;
pub static PIXEL_TEX_GEN_Q_ROUND_SGIX: GLenum = 0x8185;
pub static PIXEL_TEX_GEN_Q_FLOOR_SGIX: GLenum = 0x8186;
pub static PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX: GLenum = 0x8187;
pub static PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX: GLenum = 0x8188;
pub static PIXEL_TEX_GEN_ALPHA_LS_SGIX: GLenum = 0x8189;
pub static PIXEL_TEX_GEN_ALPHA_MS_SGIX: GLenum = 0x818A;
pub static FRAMEZOOM_SGIX: GLenum = 0x818B;
pub static FRAMEZOOM_FACTOR_SGIX: GLenum = 0x818C;
pub static MAX_FRAMEZOOM_FACTOR_SGIX: GLenum = 0x818D;
pub static TEXTURE_LOD_BIAS_S_SGIX: GLenum = 0x818E;
pub static TEXTURE_LOD_BIAS_T_SGIX: GLenum = 0x818F;
pub static TEXTURE_LOD_BIAS_R_SGIX: GLenum = 0x8190;
pub static GENERATE_MIPMAP: GLenum = 0x8191;
pub static GENERATE_MIPMAP_SGIS: GLenum = 0x8191;
pub static GENERATE_MIPMAP_HINT: GLenum = 0x8192;
pub static GENERATE_MIPMAP_HINT_SGIS: GLenum = 0x8192;
pub static GEOMETRY_DEFORMATION_SGIX: GLenum = 0x8194;
pub static TEXTURE_DEFORMATION_SGIX: GLenum = 0x8195;
pub static DEFORMATIONS_MASK_SGIX: GLenum = 0x8196;
pub static MAX_DEFORMATION_ORDER_SGIX: GLenum = 0x8197;
pub static FOG_OFFSET_SGIX: GLenum = 0x8198;
pub static FOG_OFFSET_VALUE_SGIX: GLenum = 0x8199;
pub static TEXTURE_COMPARE_SGIX: GLenum = 0x819A;
pub static TEXTURE_COMPARE_OPERATOR_SGIX: GLenum = 0x819B;
pub static TEXTURE_LEQUAL_R_SGIX: GLenum = 0x819C;
pub static TEXTURE_GEQUAL_R_SGIX: GLenum = 0x819D;
pub static DEPTH_COMPONENT16: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_ARB: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_OES: GLenum = 0x81A5;
pub static DEPTH_COMPONENT16_SGIX: GLenum = 0x81A5;
pub static DEPTH_COMPONENT24: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_ARB: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_OES: GLenum = 0x81A6;
pub static DEPTH_COMPONENT24_SGIX: GLenum = 0x81A6;
pub static DEPTH_COMPONENT32: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_ARB: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_OES: GLenum = 0x81A7;
pub static DEPTH_COMPONENT32_SGIX: GLenum = 0x81A7;
pub static ARRAY_ELEMENT_LOCK_FIRST_EXT: GLenum = 0x81A8;
pub static ARRAY_ELEMENT_LOCK_COUNT_EXT: GLenum = 0x81A9;
pub static CULL_VERTEX_EXT: GLenum = 0x81AA;
pub static CULL_VERTEX_EYE_POSITION_EXT: GLenum = 0x81AB;
pub static CULL_VERTEX_OBJECT_POSITION_EXT: GLenum = 0x81AC;
pub static IUI_V2F_EXT: GLenum = 0x81AD;
pub static IUI_V3F_EXT: GLenum = 0x81AE;
pub static IUI_N3F_V2F_EXT: GLenum = 0x81AF;
pub static IUI_N3F_V3F_EXT: GLenum = 0x81B0;
pub static T2F_IUI_V2F_EXT: GLenum = 0x81B1;
pub static T2F_IUI_V3F_EXT: GLenum = 0x81B2;
pub static T2F_IUI_N3F_V2F_EXT: GLenum = 0x81B3;
pub static T2F_IUI_N3F_V3F_EXT: GLenum = 0x81B4;
pub static INDEX_TEST_EXT: GLenum = 0x81B5;
pub static INDEX_TEST_FUNC_EXT: GLenum = 0x81B6;
pub static INDEX_TEST_REF_EXT: GLenum = 0x81B7;
pub static INDEX_MATERIAL_EXT: GLenum = 0x81B8;
pub static INDEX_MATERIAL_PARAMETER_EXT: GLenum = 0x81B9;
pub static INDEX_MATERIAL_FACE_EXT: GLenum = 0x81BA;
pub static YCRCB_422_SGIX: GLenum = 0x81BB;
pub static YCRCB_444_SGIX: GLenum = 0x81BC;
pub static WRAP_BORDER_SUN: GLenum = 0x81D4;
pub static UNPACK_CONSTANT_DATA_SUNX: GLenum = 0x81D5;
pub static TEXTURE_CONSTANT_DATA_SUNX: GLenum = 0x81D6;
pub static TRIANGLE_LIST_SUN: GLenum = 0x81D7;
pub static REPLACEMENT_CODE_SUN: GLenum = 0x81D8;
pub static GLOBAL_ALPHA_SUN: GLenum = 0x81D9;
pub static GLOBAL_ALPHA_FACTOR_SUN: GLenum = 0x81DA;
pub static TEXTURE_COLOR_WRITEMASK_SGIS: GLenum = 0x81EF;
pub static EYE_DISTANCE_TO_POINT_SGIS: GLenum = 0x81F0;
pub static OBJECT_DISTANCE_TO_POINT_SGIS: GLenum = 0x81F1;
pub static EYE_DISTANCE_TO_LINE_SGIS: GLenum = 0x81F2;
pub static OBJECT_DISTANCE_TO_LINE_SGIS: GLenum = 0x81F3;
pub static EYE_POINT_SGIS: GLenum = 0x81F4;
pub static OBJECT_POINT_SGIS: GLenum = 0x81F5;
pub static EYE_LINE_SGIS: GLenum = 0x81F6;
pub static OBJECT_LINE_SGIS: GLenum = 0x81F7;
pub static LIGHT_MODEL_COLOR_CONTROL: GLenum = 0x81F8;
pub static LIGHT_MODEL_COLOR_CONTROL_EXT: GLenum = 0x81F8;
pub static SINGLE_COLOR: GLenum = 0x81F9;
pub static SINGLE_COLOR_EXT: GLenum = 0x81F9;
pub static SEPARATE_SPECULAR_COLOR: GLenum = 0x81FA;
pub static SEPARATE_SPECULAR_COLOR_EXT: GLenum = 0x81FA;
pub static SHARED_TEXTURE_PALETTE_EXT: GLenum = 0x81FB;
pub static TEXT_FRAGMENT_SHADER_ATI: GLenum = 0x8200;
pub static FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum = 0x8210;
pub static FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum = 0x8211;
pub static FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: GLenum = 0x8211;
pub static FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum = 0x8212;
pub static FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum = 0x8213;
pub static FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum = 0x8214;
pub static FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum = 0x8215;
pub static FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum = 0x8216;
pub static FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum = 0x8217;
pub static FRAMEBUFFER_DEFAULT: GLenum = 0x8218;
pub static FRAMEBUFFER_UNDEFINED: GLenum = 0x8219;
pub static FRAMEBUFFER_UNDEFINED_OES: GLenum = 0x8219;
pub static DEPTH_STENCIL_ATTACHMENT: GLenum = 0x821A;
pub static MAJOR_VERSION: GLenum = 0x821B;
pub static MINOR_VERSION: GLenum = 0x821C;
pub static NUM_EXTENSIONS: GLenum = 0x821D;
pub static CONTEXT_FLAGS: GLenum = 0x821E;
pub static BUFFER_IMMUTABLE_STORAGE: GLenum = 0x821F;
pub static BUFFER_STORAGE_FLAGS: GLenum = 0x8220;
pub static INDEX: GLenum = 0x8222;
pub static COMPRESSED_RED: GLenum = 0x8225;
pub static COMPRESSED_RG: GLenum = 0x8226;
pub static RG: GLenum = 0x8227;
pub static RG_EXT: GLenum = 0x8227;
pub static RG_INTEGER: GLenum = 0x8228;
pub static R8: GLenum = 0x8229;
pub static R8_EXT: GLenum = 0x8229;
pub static R16: GLenum = 0x822A;
pub static RG8: GLenum = 0x822B;
pub static RG8_EXT: GLenum = 0x822B;
pub static RG16: GLenum = 0x822C;
pub static R16F: GLenum = 0x822D;
pub static R16F_EXT: GLenum = 0x822D;
pub static R32F: GLenum = 0x822E;
pub static RG16F: GLenum = 0x822F;
pub static RG16F_EXT: GLenum = 0x822F;
pub static RG32F: GLenum = 0x8230;
pub static R8I: GLenum = 0x8231;
pub static R8UI: GLenum = 0x8232;
pub static R16I: GLenum = 0x8233;
pub static R16UI: GLenum = 0x8234;
pub static R32I: GLenum = 0x8235;
pub static R32UI: GLenum = 0x8236;
pub static RG8I: GLenum = 0x8237;
pub static RG8UI: GLenum = 0x8238;
pub static RG16I: GLenum = 0x8239;
pub static RG16UI: GLenum = 0x823A;
pub static RG32I: GLenum = 0x823B;
pub static RG32UI: GLenum = 0x823C;
pub static SYNC_CL_EVENT_ARB: GLenum = 0x8240;
pub static SYNC_CL_EVENT_COMPLETE_ARB: GLenum = 0x8241;
pub static DEBUG_OUTPUT_SYNCHRONOUS: GLenum = 0x8242;
pub static DEBUG_OUTPUT_SYNCHRONOUS_ARB: GLenum = 0x8242;
pub static DEBUG_OUTPUT_SYNCHRONOUS_KHR: GLenum = 0x8242;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: GLenum = 0x8243;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB: GLenum = 0x8243;
pub static DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR: GLenum = 0x8243;
pub static DEBUG_CALLBACK_FUNCTION: GLenum = 0x8244;
pub static DEBUG_CALLBACK_FUNCTION_ARB: GLenum = 0x8244;
pub static DEBUG_CALLBACK_FUNCTION_KHR: GLenum = 0x8244;
pub static DEBUG_CALLBACK_USER_PARAM: GLenum = 0x8245;
pub static DEBUG_CALLBACK_USER_PARAM_ARB: GLenum = 0x8245;
pub static DEBUG_CALLBACK_USER_PARAM_KHR: GLenum = 0x8245;
pub static DEBUG_SOURCE_API: GLenum = 0x8246;
pub static DEBUG_SOURCE_API_ARB: GLenum = 0x8246;
pub static DEBUG_SOURCE_API_KHR: GLenum = 0x8246;
pub static DEBUG_SOURCE_WINDOW_SYSTEM: GLenum = 0x8247;
pub static DEBUG_SOURCE_WINDOW_SYSTEM_ARB: GLenum = 0x8247;
pub static DEBUG_SOURCE_WINDOW_SYSTEM_KHR: GLenum = 0x8247;
pub static DEBUG_SOURCE_SHADER_COMPILER: GLenum = 0x8248;
pub static DEBUG_SOURCE_SHADER_COMPILER_ARB: GLenum = 0x8248;
pub static DEBUG_SOURCE_SHADER_COMPILER_KHR: GLenum = 0x8248;
pub static DEBUG_SOURCE_THIRD_PARTY: GLenum = 0x8249;
pub static DEBUG_SOURCE_THIRD_PARTY_ARB: GLenum = 0x8249;
pub static DEBUG_SOURCE_THIRD_PARTY_KHR: GLenum = 0x8249;
pub static DEBUG_SOURCE_APPLICATION: GLenum = 0x824A;
pub static DEBUG_SOURCE_APPLICATION_ARB: GLenum = 0x824A;
pub static DEBUG_SOURCE_APPLICATION_KHR: GLenum = 0x824A;
pub static DEBUG_SOURCE_OTHER: GLenum = 0x824B;
pub static DEBUG_SOURCE_OTHER_ARB: GLenum = 0x824B;
pub static DEBUG_SOURCE_OTHER_KHR: GLenum = 0x824B;
pub static DEBUG_TYPE_ERROR: GLenum = 0x824C;
pub static DEBUG_TYPE_ERROR_ARB: GLenum = 0x824C;
pub static DEBUG_TYPE_ERROR_KHR: GLenum = 0x824C;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR: GLenum = 0x824D;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB: GLenum = 0x824D;
pub static DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR: GLenum = 0x824D;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR: GLenum = 0x824E;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB: GLenum = 0x824E;
pub static DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR: GLenum = 0x824E;
pub static DEBUG_TYPE_PORTABILITY: GLenum = 0x824F;
pub static DEBUG_TYPE_PORTABILITY_ARB: GLenum = 0x824F;
pub static DEBUG_TYPE_PORTABILITY_KHR: GLenum = 0x824F;
pub static DEBUG_TYPE_PERFORMANCE: GLenum = 0x8250;
pub static DEBUG_TYPE_PERFORMANCE_ARB: GLenum = 0x8250;
pub static DEBUG_TYPE_PERFORMANCE_KHR: GLenum = 0x8250;
pub static DEBUG_TYPE_OTHER: GLenum = 0x8251;
pub static DEBUG_TYPE_OTHER_ARB: GLenum = 0x8251;
pub static DEBUG_TYPE_OTHER_KHR: GLenum = 0x8251;
pub static LOSE_CONTEXT_ON_RESET_ARB: GLenum = 0x8252;
pub static GUILTY_CONTEXT_RESET_ARB: GLenum = 0x8253;
pub static INNOCENT_CONTEXT_RESET_ARB: GLenum = 0x8254;
pub static UNKNOWN_CONTEXT_RESET_ARB: GLenum = 0x8255;
pub static RESET_NOTIFICATION_STRATEGY_ARB: GLenum = 0x8256;
pub static PROGRAM_BINARY_RETRIEVABLE_HINT: GLenum = 0x8257;
pub static PROGRAM_SEPARABLE: GLenum = 0x8258;
pub static PROGRAM_SEPARABLE_EXT: GLenum = 0x8258;
pub static ACTIVE_PROGRAM: GLenum = 0x8259;
pub static ACTIVE_PROGRAM_EXT: GLenum = 0x8259;
pub static PROGRAM_PIPELINE_BINDING: GLenum = 0x825A;
pub static PROGRAM_PIPELINE_BINDING_EXT: GLenum = 0x825A;
pub static MAX_VIEWPORTS: GLenum = 0x825B;
pub static VIEWPORT_SUBPIXEL_BITS: GLenum = 0x825C;
pub static VIEWPORT_BOUNDS_RANGE: GLenum = 0x825D;
pub static LAYER_PROVOKING_VERTEX: GLenum = 0x825E;
pub static VIEWPORT_INDEX_PROVOKING_VERTEX: GLenum = 0x825F;
pub static UNDEFINED_VERTEX: GLenum = 0x8260;
pub static NO_RESET_NOTIFICATION_ARB: GLenum = 0x8261;
pub static MAX_COMPUTE_SHARED_MEMORY_SIZE: GLenum = 0x8262;
pub static MAX_COMPUTE_UNIFORM_COMPONENTS: GLenum = 0x8263;
pub static MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS: GLenum = 0x8264;
pub static MAX_COMPUTE_ATOMIC_COUNTERS: GLenum = 0x8265;
pub static MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS: GLenum = 0x8266;
pub static COMPUTE_LOCAL_WORK_SIZE: GLenum = 0x8267;
pub static DEBUG_TYPE_MARKER: GLenum = 0x8268;
pub static DEBUG_TYPE_MARKER_KHR: GLenum = 0x8268;
pub static DEBUG_TYPE_PUSH_GROUP: GLenum = 0x8269;
pub static DEBUG_TYPE_PUSH_GROUP_KHR: GLenum = 0x8269;
pub static DEBUG_TYPE_POP_GROUP: GLenum = 0x826A;
pub static DEBUG_TYPE_POP_GROUP_KHR: GLenum = 0x826A;
pub static DEBUG_SEVERITY_NOTIFICATION: GLenum = 0x826B;
pub static DEBUG_SEVERITY_NOTIFICATION_KHR: GLenum = 0x826B;
pub static MAX_DEBUG_GROUP_STACK_DEPTH: GLenum = 0x826C;
pub static MAX_DEBUG_GROUP_STACK_DEPTH_KHR: GLenum = 0x826C;
pub static DEBUG_GROUP_STACK_DEPTH: GLenum = 0x826D;
pub static DEBUG_GROUP_STACK_DEPTH_KHR: GLenum = 0x826D;
pub static MAX_UNIFORM_LOCATIONS: GLenum = 0x826E;
pub static INTERNALFORMAT_SUPPORTED: GLenum = 0x826F;
pub static INTERNALFORMAT_PREFERRED: GLenum = 0x8270;
pub static INTERNALFORMAT_RED_SIZE: GLenum = 0x8271;
pub static INTERNALFORMAT_GREEN_SIZE: GLenum = 0x8272;
pub static INTERNALFORMAT_BLUE_SIZE: GLenum = 0x8273;
pub static INTERNALFORMAT_ALPHA_SIZE: GLenum = 0x8274;
pub static INTERNALFORMAT_DEPTH_SIZE: GLenum = 0x8275;
pub static INTERNALFORMAT_STENCIL_SIZE: GLenum = 0x8276;
pub static INTERNALFORMAT_SHARED_SIZE: GLenum = 0x8277;
pub static INTERNALFORMAT_RED_TYPE: GLenum = 0x8278;
pub static INTERNALFORMAT_GREEN_TYPE: GLenum = 0x8279;
pub static INTERNALFORMAT_BLUE_TYPE: GLenum = 0x827A;
pub static INTERNALFORMAT_ALPHA_TYPE: GLenum = 0x827B;
pub static INTERNALFORMAT_DEPTH_TYPE: GLenum = 0x827C;
pub static INTERNALFORMAT_STENCIL_TYPE: GLenum = 0x827D;
pub static MAX_WIDTH: GLenum = 0x827E;
pub static MAX_HEIGHT: GLenum = 0x827F;
pub static MAX_DEPTH: GLenum = 0x8280;
pub static MAX_LAYERS: GLenum = 0x8281;
pub static MAX_COMBINED_DIMENSIONS: GLenum = 0x8282;
pub static COLOR_COMPONENTS: GLenum = 0x8283;
pub static DEPTH_COMPONENTS: GLenum = 0x8284;
pub static STENCIL_COMPONENTS: GLenum = 0x8285;
pub static COLOR_RENDERABLE: GLenum = 0x8286;
pub static DEPTH_RENDERABLE: GLenum = 0x8287;
pub static STENCIL_RENDERABLE: GLenum = 0x8288;
pub static FRAMEBUFFER_RENDERABLE: GLenum = 0x8289;
pub static FRAMEBUFFER_RENDERABLE_LAYERED: GLenum = 0x828A;
pub static FRAMEBUFFER_BLEND: GLenum = 0x828B;
pub static READ_PIXELS: GLenum = 0x828C;
pub static READ_PIXELS_FORMAT: GLenum = 0x828D;
pub static READ_PIXELS_TYPE: GLenum = 0x828E;
pub static TEXTURE_IMAGE_FORMAT: GLenum = 0x828F;
pub static TEXTURE_IMAGE_TYPE: GLenum = 0x8290;
pub static GET_TEXTURE_IMAGE_FORMAT: GLenum = 0x8291;
pub static GET_TEXTURE_IMAGE_TYPE: GLenum = 0x8292;
pub static MIPMAP: GLenum = 0x8293;
pub static MANUAL_GENERATE_MIPMAP: GLenum = 0x8294;
pub static AUTO_GENERATE_MIPMAP: GLenum = 0x8295;
pub static COLOR_ENCODING: GLenum = 0x8296;
pub static SRGB_READ: GLenum = 0x8297;
pub static SRGB_WRITE: GLenum = 0x8298;
pub static SRGB_DECODE_ARB: GLenum = 0x8299;
pub static FILTER: GLenum = 0x829A;
pub static VERTEX_TEXTURE: GLenum = 0x829B;
pub static TESS_CONTROL_TEXTURE: GLenum = 0x829C;
pub static TESS_EVALUATION_TEXTURE: GLenum = 0x829D;
pub static GEOMETRY_TEXTURE: GLenum = 0x829E;
pub static FRAGMENT_TEXTURE: GLenum = 0x829F;
pub static COMPUTE_TEXTURE: GLenum = 0x82A0;
pub static TEXTURE_SHADOW: GLenum = 0x82A1;
pub static TEXTURE_GATHER: GLenum = 0x82A2;
pub static TEXTURE_GATHER_SHADOW: GLenum = 0x82A3;
pub static SHADER_IMAGE_LOAD: GLenum = 0x82A4;
pub static SHADER_IMAGE_STORE: GLenum = 0x82A5;
pub static SHADER_IMAGE_ATOMIC: GLenum = 0x82A6;
pub static IMAGE_TEXEL_SIZE: GLenum = 0x82A7;
pub static IMAGE_COMPATIBILITY_CLASS: GLenum = 0x82A8;
pub static IMAGE_PIXEL_FORMAT: GLenum = 0x82A9;
pub static IMAGE_PIXEL_TYPE: GLenum = 0x82AA;
pub static SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST: GLenum = 0x82AC;
pub static SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST: GLenum = 0x82AD;
pub static SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE: GLenum = 0x82AE;
pub static SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE: GLenum = 0x82AF;
pub static TEXTURE_COMPRESSED_BLOCK_WIDTH: GLenum = 0x82B1;
pub static TEXTURE_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x82B2;
pub static TEXTURE_COMPRESSED_BLOCK_SIZE: GLenum = 0x82B3;
pub static CLEAR_BUFFER: GLenum = 0x82B4;
pub static TEXTURE_VIEW: GLenum = 0x82B5;
pub static VIEW_COMPATIBILITY_CLASS: GLenum = 0x82B6;
pub static FULL_SUPPORT: GLenum = 0x82B7;
pub static CAVEAT_SUPPORT: GLenum = 0x82B8;
pub static IMAGE_CLASS_4_X_32: GLenum = 0x82B9;
pub static IMAGE_CLASS_2_X_32: GLenum = 0x82BA;
pub static IMAGE_CLASS_1_X_32: GLenum = 0x82BB;
pub static IMAGE_CLASS_4_X_16: GLenum = 0x82BC;
pub static IMAGE_CLASS_2_X_16: GLenum = 0x82BD;
pub static IMAGE_CLASS_1_X_16: GLenum = 0x82BE;
pub static IMAGE_CLASS_4_X_8: GLenum = 0x82BF;
pub static IMAGE_CLASS_2_X_8: GLenum = 0x82C0;
pub static IMAGE_CLASS_1_X_8: GLenum = 0x82C1;
pub static IMAGE_CLASS_11_11_10: GLenum = 0x82C2;
pub static IMAGE_CLASS_10_10_10_2: GLenum = 0x82C3;
pub static VIEW_CLASS_128_BITS: GLenum = 0x82C4;
pub static VIEW_CLASS_96_BITS: GLenum = 0x82C5;
pub static VIEW_CLASS_64_BITS: GLenum = 0x82C6;
pub static VIEW_CLASS_48_BITS: GLenum = 0x82C7;
pub static VIEW_CLASS_32_BITS: GLenum = 0x82C8;
pub static VIEW_CLASS_24_BITS: GLenum = 0x82C9;
pub static VIEW_CLASS_16_BITS: GLenum = 0x82CA;
pub static VIEW_CLASS_8_BITS: GLenum = 0x82CB;
pub static VIEW_CLASS_S3TC_DXT1_RGB: GLenum = 0x82CC;
pub static VIEW_CLASS_S3TC_DXT1_RGBA: GLenum = 0x82CD;
pub static VIEW_CLASS_S3TC_DXT3_RGBA: GLenum = 0x82CE;
pub static VIEW_CLASS_S3TC_DXT5_RGBA: GLenum = 0x82CF;
pub static VIEW_CLASS_RGTC1_RED: GLenum = 0x82D0;
pub static VIEW_CLASS_RGTC2_RG: GLenum = 0x82D1;
pub static VIEW_CLASS_BPTC_UNORM: GLenum = 0x82D2;
pub static VIEW_CLASS_BPTC_FLOAT: GLenum = 0x82D3;
pub static VERTEX_ATTRIB_BINDING: GLenum = 0x82D4;
pub static VERTEX_ATTRIB_RELATIVE_OFFSET: GLenum = 0x82D5;
pub static VERTEX_BINDING_DIVISOR: GLenum = 0x82D6;
pub static VERTEX_BINDING_OFFSET: GLenum = 0x82D7;
pub static VERTEX_BINDING_STRIDE: GLenum = 0x82D8;
pub static MAX_VERTEX_ATTRIB_RELATIVE_OFFSET: GLenum = 0x82D9;
pub static MAX_VERTEX_ATTRIB_BINDINGS: GLenum = 0x82DA;
pub static TEXTURE_VIEW_MIN_LEVEL: GLenum = 0x82DB;
pub static TEXTURE_VIEW_NUM_LEVELS: GLenum = 0x82DC;
pub static TEXTURE_VIEW_MIN_LAYER: GLenum = 0x82DD;
pub static TEXTURE_VIEW_NUM_LAYERS: GLenum = 0x82DE;
pub static TEXTURE_IMMUTABLE_LEVELS: GLenum = 0x82DF;
pub static BUFFER: GLenum = 0x82E0;
pub static BUFFER_KHR: GLenum = 0x82E0;
pub static SHADER: GLenum = 0x82E1;
pub static SHADER_KHR: GLenum = 0x82E1;
pub static PROGRAM: GLenum = 0x82E2;
pub static PROGRAM_KHR: GLenum = 0x82E2;
pub static QUERY: GLenum = 0x82E3;
pub static QUERY_KHR: GLenum = 0x82E3;
pub static PROGRAM_PIPELINE: GLenum = 0x82E4;
pub static MAX_VERTEX_ATTRIB_STRIDE: GLenum = 0x82E5;
pub static SAMPLER: GLenum = 0x82E6;
pub static SAMPLER_KHR: GLenum = 0x82E6;
pub static DISPLAY_LIST: GLenum = 0x82E7;
pub static MAX_LABEL_LENGTH: GLenum = 0x82E8;
pub static MAX_LABEL_LENGTH_KHR: GLenum = 0x82E8;
pub static NUM_SHADING_LANGUAGE_VERSIONS: GLenum = 0x82E9;
pub static DEPTH_PASS_INSTRUMENT_SGIX: GLenum = 0x8310;
pub static DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX: GLenum = 0x8311;
pub static DEPTH_PASS_INSTRUMENT_MAX_SGIX: GLenum = 0x8312;
pub static FRAGMENTS_INSTRUMENT_SGIX: GLenum = 0x8313;
pub static FRAGMENTS_INSTRUMENT_COUNTERS_SGIX: GLenum = 0x8314;
pub static FRAGMENTS_INSTRUMENT_MAX_SGIX: GLenum = 0x8315;
pub static CONVOLUTION_HINT_SGIX: GLenum = 0x8316;
pub static YCRCB_SGIX: GLenum = 0x8318;
pub static YCRCBA_SGIX: GLenum = 0x8319;
pub static UNPACK_COMPRESSED_SIZE_SGIX: GLenum = 0x831A;
pub static PACK_MAX_COMPRESSED_SIZE_SGIX: GLenum = 0x831B;
pub static PACK_COMPRESSED_SIZE_SGIX: GLenum = 0x831C;
pub static SLIM8U_SGIX: GLenum = 0x831D;
pub static SLIM10U_SGIX: GLenum = 0x831E;
pub static SLIM12S_SGIX: GLenum = 0x831F;
pub static ALPHA_MIN_SGIX: GLenum = 0x8320;
pub static ALPHA_MAX_SGIX: GLenum = 0x8321;
pub static SCALEBIAS_HINT_SGIX: GLenum = 0x8322;
pub static ASYNC_MARKER_SGIX: GLenum = 0x8329;
pub static PIXEL_TEX_GEN_MODE_SGIX: GLenum = 0x832B;
pub static ASYNC_HISTOGRAM_SGIX: GLenum = 0x832C;
pub static MAX_ASYNC_HISTOGRAM_SGIX: GLenum = 0x832D;
pub static PIXEL_TRANSFORM_2D_EXT: GLenum = 0x8330;
pub static PIXEL_MAG_FILTER_EXT: GLenum = 0x8331;
pub static PIXEL_MIN_FILTER_EXT: GLenum = 0x8332;
pub static PIXEL_CUBIC_WEIGHT_EXT: GLenum = 0x8333;
pub static CUBIC_EXT: GLenum = 0x8334;
pub static AVERAGE_EXT: GLenum = 0x8335;
pub static PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: GLenum = 0x8336;
pub static MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT: GLenum = 0x8337;
pub static PIXEL_TRANSFORM_2D_MATRIX_EXT: GLenum = 0x8338;
pub static FRAGMENT_MATERIAL_EXT: GLenum = 0x8349;
pub static FRAGMENT_NORMAL_EXT: GLenum = 0x834A;
pub static FRAGMENT_COLOR_EXT: GLenum = 0x834C;
pub static ATTENUATION_EXT: GLenum = 0x834D;
pub static SHADOW_ATTENUATION_EXT: GLenum = 0x834E;
pub static TEXTURE_APPLICATION_MODE_EXT: GLenum = 0x834F;
pub static TEXTURE_LIGHT_EXT: GLenum = 0x8350;
pub static TEXTURE_MATERIAL_FACE_EXT: GLenum = 0x8351;
pub static TEXTURE_MATERIAL_PARAMETER_EXT: GLenum = 0x8352;
pub static PIXEL_TEXTURE_SGIS: GLenum = 0x8353;
pub static PIXEL_FRAGMENT_RGB_SOURCE_SGIS: GLenum = 0x8354;
pub static PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS: GLenum = 0x8355;
pub static PIXEL_GROUP_COLOR_SGIS: GLenum = 0x8356;
pub static LINE_QUALITY_HINT_SGIX: GLenum = 0x835B;
pub static ASYNC_TEX_IMAGE_SGIX: GLenum = 0x835C;
pub static ASYNC_DRAW_PIXELS_SGIX: GLenum = 0x835D;
pub static ASYNC_READ_PIXELS_SGIX: GLenum = 0x835E;
pub static MAX_ASYNC_TEX_IMAGE_SGIX: GLenum = 0x835F;
pub static MAX_ASYNC_DRAW_PIXELS_SGIX: GLenum = 0x8360;
pub static MAX_ASYNC_READ_PIXELS_SGIX: GLenum = 0x8361;
pub static UNSIGNED_BYTE_2_3_3_REV: GLenum = 0x8362;
pub static UNSIGNED_BYTE_2_3_3_REV_EXT: GLenum = 0x8362;
pub static UNSIGNED_SHORT_5_6_5: GLenum = 0x8363;
pub static UNSIGNED_SHORT_5_6_5_EXT: GLenum = 0x8363;
pub static UNSIGNED_SHORT_5_6_5_REV: GLenum = 0x8364;
pub static UNSIGNED_SHORT_5_6_5_REV_EXT: GLenum = 0x8364;
pub static UNSIGNED_SHORT_4_4_4_4_REV: GLenum = 0x8365;
pub static UNSIGNED_SHORT_4_4_4_4_REV_EXT: GLenum = 0x8365;
pub static UNSIGNED_SHORT_1_5_5_5_REV: GLenum = 0x8366;
pub static UNSIGNED_SHORT_1_5_5_5_REV_EXT: GLenum = 0x8366;
pub static UNSIGNED_INT_8_8_8_8_REV: GLenum = 0x8367;
pub static UNSIGNED_INT_8_8_8_8_REV_EXT: GLenum = 0x8367;
pub static UNSIGNED_INT_2_10_10_10_REV: GLenum = 0x8368;
pub static UNSIGNED_INT_2_10_10_10_REV_EXT: GLenum = 0x8368;
pub static TEXTURE_MAX_CLAMP_S_SGIX: GLenum = 0x8369;
pub static TEXTURE_MAX_CLAMP_T_SGIX: GLenum = 0x836A;
pub static TEXTURE_MAX_CLAMP_R_SGIX: GLenum = 0x836B;
pub static MIRRORED_REPEAT: GLenum = 0x8370;
pub static MIRRORED_REPEAT_ARB: GLenum = 0x8370;
pub static MIRRORED_REPEAT_IBM: GLenum = 0x8370;
pub static MIRRORED_REPEAT_OES: GLenum = 0x8370;
pub static RGB_S3TC: GLenum = 0x83A0;
pub static RGB4_S3TC: GLenum = 0x83A1;
pub static RGBA_S3TC: GLenum = 0x83A2;
pub static RGBA4_S3TC: GLenum = 0x83A3;
pub static RGBA_DXT5_S3TC: GLenum = 0x83A4;
pub static RGBA4_DXT5_S3TC: GLenum = 0x83A5;
pub static VERTEX_PRECLIP_SGIX: GLenum = 0x83EE;
pub static VERTEX_PRECLIP_HINT_SGIX: GLenum = 0x83EF;
pub static COMPRESSED_RGB_S3TC_DXT1_EXT: GLenum = 0x83F0;
pub static COMPRESSED_RGBA_S3TC_DXT1_EXT: GLenum = 0x83F1;
pub static COMPRESSED_RGBA_S3TC_DXT3_ANGLE: GLenum = 0x83F2;
pub static COMPRESSED_RGBA_S3TC_DXT3_EXT: GLenum = 0x83F2;
pub static COMPRESSED_RGBA_S3TC_DXT5_ANGLE: GLenum = 0x83F3;
pub static COMPRESSED_RGBA_S3TC_DXT5_EXT: GLenum = 0x83F3;
pub static PARALLEL_ARRAYS_INTEL: GLenum = 0x83F4;
pub static VERTEX_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F5;
pub static NORMAL_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F6;
pub static COLOR_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F7;
pub static TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL: GLenum = 0x83F8;
pub static TEXTURE_MEMORY_LAYOUT_INTEL: GLenum = 0x83FF;
pub static FRAGMENT_LIGHTING_SGIX: GLenum = 0x8400;
pub static FRAGMENT_COLOR_MATERIAL_SGIX: GLenum = 0x8401;
pub static FRAGMENT_COLOR_MATERIAL_FACE_SGIX: GLenum = 0x8402;
pub static FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX: GLenum = 0x8403;
pub static MAX_FRAGMENT_LIGHTS_SGIX: GLenum = 0x8404;
pub static MAX_ACTIVE_LIGHTS_SGIX: GLenum = 0x8405;
pub static CURRENT_RASTER_NORMAL_SGIX: GLenum = 0x8406;
pub static LIGHT_ENV_MODE_SGIX: GLenum = 0x8407;
pub static FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX: GLenum = 0x8408;
pub static FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX: GLenum = 0x8409;
pub static FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX: GLenum = 0x840A;
pub static FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX: GLenum = 0x840B;
pub static FRAGMENT_LIGHT0_SGIX: GLenum = 0x840C;
pub static FRAGMENT_LIGHT1_SGIX: GLenum = 0x840D;
pub static FRAGMENT_LIGHT2_SGIX: GLenum = 0x840E;
pub static FRAGMENT_LIGHT3_SGIX: GLenum = 0x840F;
pub static FRAGMENT_LIGHT4_SGIX: GLenum = 0x8410;
pub static FRAGMENT_LIGHT5_SGIX: GLenum = 0x8411;
pub static FRAGMENT_LIGHT6_SGIX: GLenum = 0x8412;
pub static FRAGMENT_LIGHT7_SGIX: GLenum = 0x8413;
pub static PACK_RESAMPLE_SGIX: GLenum = 0x842C;
pub static UNPACK_RESAMPLE_SGIX: GLenum = 0x842D;
pub static RESAMPLE_REPLICATE_SGIX: GLenum = 0x842E;
pub static RESAMPLE_ZERO_FILL_SGIX: GLenum = 0x842F;
pub static RESAMPLE_DECIMATE_SGIX: GLenum = 0x8430;
pub static TANGENT_ARRAY_EXT: GLenum = 0x8439;
pub static BINORMAL_ARRAY_EXT: GLenum = 0x843A;
pub static CURRENT_TANGENT_EXT: GLenum = 0x843B;
pub static CURRENT_BINORMAL_EXT: GLenum = 0x843C;
pub static TANGENT_ARRAY_TYPE_EXT: GLenum = 0x843E;
pub static TANGENT_ARRAY_STRIDE_EXT: GLenum = 0x843F;
pub static BINORMAL_ARRAY_TYPE_EXT: GLenum = 0x8440;
pub static BINORMAL_ARRAY_STRIDE_EXT: GLenum = 0x8441;
pub static TANGENT_ARRAY_POINTER_EXT: GLenum = 0x8442;
pub static BINORMAL_ARRAY_POINTER_EXT: GLenum = 0x8443;
pub static MAP1_TANGENT_EXT: GLenum = 0x8444;
pub static MAP2_TANGENT_EXT: GLenum = 0x8445;
pub static MAP1_BINORMAL_EXT: GLenum = 0x8446;
pub static MAP2_BINORMAL_EXT: GLenum = 0x8447;
pub static NEAREST_CLIPMAP_NEAREST_SGIX: GLenum = 0x844D;
pub static NEAREST_CLIPMAP_LINEAR_SGIX: GLenum = 0x844E;
pub static LINEAR_CLIPMAP_NEAREST_SGIX: GLenum = 0x844F;
pub static FOG_COORDINATE_SOURCE: GLenum = 0x8450;
pub static FOG_COORDINATE_SOURCE_EXT: GLenum = 0x8450;
pub static FOG_COORD_SRC: GLenum = 0x8450;
pub static FOG_COORDINATE: GLenum = 0x8451;
pub static FOG_COORD: GLenum = 0x8451;
pub static FOG_COORDINATE_EXT: GLenum = 0x8451;
pub static FRAGMENT_DEPTH: GLenum = 0x8452;
pub static FRAGMENT_DEPTH_EXT: GLenum = 0x8452;
pub static CURRENT_FOG_COORDINATE: GLenum = 0x8453;
pub static CURRENT_FOG_COORD: GLenum = 0x8453;
pub static CURRENT_FOG_COORDINATE_EXT: GLenum = 0x8453;
pub static FOG_COORDINATE_ARRAY_TYPE: GLenum = 0x8454;
pub static FOG_COORDINATE_ARRAY_TYPE_EXT: GLenum = 0x8454;
pub static FOG_COORD_ARRAY_TYPE: GLenum = 0x8454;
pub static FOG_COORDINATE_ARRAY_STRIDE: GLenum = 0x8455;
pub static FOG_COORDINATE_ARRAY_STRIDE_EXT: GLenum = 0x8455;
pub static FOG_COORD_ARRAY_STRIDE: GLenum = 0x8455;
pub static FOG_COORDINATE_ARRAY_POINTER: GLenum = 0x8456;
pub static FOG_COORDINATE_ARRAY_POINTER_EXT: GLenum = 0x8456;
pub static FOG_COORD_ARRAY_POINTER: GLenum = 0x8456;
pub static FOG_COORDINATE_ARRAY: GLenum = 0x8457;
pub static FOG_COORDINATE_ARRAY_EXT: GLenum = 0x8457;
pub static FOG_COORD_ARRAY: GLenum = 0x8457;
pub static COLOR_SUM: GLenum = 0x8458;
pub static COLOR_SUM_ARB: GLenum = 0x8458;
pub static COLOR_SUM_EXT: GLenum = 0x8458;
pub static CURRENT_SECONDARY_COLOR: GLenum = 0x8459;
pub static CURRENT_SECONDARY_COLOR_EXT: GLenum = 0x8459;
pub static SECONDARY_COLOR_ARRAY_SIZE: GLenum = 0x845A;
pub static SECONDARY_COLOR_ARRAY_SIZE_EXT: GLenum = 0x845A;
pub static SECONDARY_COLOR_ARRAY_TYPE: GLenum = 0x845B;
pub static SECONDARY_COLOR_ARRAY_TYPE_EXT: GLenum = 0x845B;
pub static SECONDARY_COLOR_ARRAY_STRIDE: GLenum = 0x845C;
pub static SECONDARY_COLOR_ARRAY_STRIDE_EXT: GLenum = 0x845C;
pub static SECONDARY_COLOR_ARRAY_POINTER: GLenum = 0x845D;
pub static SECONDARY_COLOR_ARRAY_POINTER_EXT: GLenum = 0x845D;
pub static SECONDARY_COLOR_ARRAY: GLenum = 0x845E;
pub static SECONDARY_COLOR_ARRAY_EXT: GLenum = 0x845E;
pub static CURRENT_RASTER_SECONDARY_COLOR: GLenum = 0x845F;
pub static ALIASED_POINT_SIZE_RANGE: GLenum = 0x846D;
pub static ALIASED_LINE_WIDTH_RANGE: GLenum = 0x846E;
pub static SCREEN_COORDINATES_REND: GLenum = 0x8490;
pub static INVERTED_SCREEN_W_REND: GLenum = 0x8491;
pub static TEXTURE0: GLenum = 0x84C0;
pub static TEXTURE0_ARB: GLenum = 0x84C0;
pub static TEXTURE1: GLenum = 0x84C1;
pub static TEXTURE1_ARB: GLenum = 0x84C1;
pub static TEXTURE2: GLenum = 0x84C2;
pub static TEXTURE2_ARB: GLenum = 0x84C2;
pub static TEXTURE3: GLenum = 0x84C3;
pub static TEXTURE3_ARB: GLenum = 0x84C3;
pub static TEXTURE4: GLenum = 0x84C4;
pub static TEXTURE4_ARB: GLenum = 0x84C4;
pub static TEXTURE5: GLenum = 0x84C5;
pub static TEXTURE5_ARB: GLenum = 0x84C5;
pub static TEXTURE6: GLenum = 0x84C6;
pub static TEXTURE6_ARB: GLenum = 0x84C6;
pub static TEXTURE7: GLenum = 0x84C7;
pub static TEXTURE7_ARB: GLenum = 0x84C7;
pub static TEXTURE8: GLenum = 0x84C8;
pub static TEXTURE8_ARB: GLenum = 0x84C8;
pub static TEXTURE9: GLenum = 0x84C9;
pub static TEXTURE9_ARB: GLenum = 0x84C9;
pub static TEXTURE10: GLenum = 0x84CA;
pub static TEXTURE10_ARB: GLenum = 0x84CA;
pub static TEXTURE11: GLenum = 0x84CB;
pub static TEXTURE11_ARB: GLenum = 0x84CB;
pub static TEXTURE12: GLenum = 0x84CC;
pub static TEXTURE12_ARB: GLenum = 0x84CC;
pub static TEXTURE13: GLenum = 0x84CD;
pub static TEXTURE13_ARB: GLenum = 0x84CD;
pub static TEXTURE14: GLenum = 0x84CE;
pub static TEXTURE14_ARB: GLenum = 0x84CE;
pub static TEXTURE15: GLenum = 0x84CF;
pub static TEXTURE15_ARB: GLenum = 0x84CF;
pub static TEXTURE16: GLenum = 0x84D0;
pub static TEXTURE16_ARB: GLenum = 0x84D0;
pub static TEXTURE17: GLenum = 0x84D1;
pub static TEXTURE17_ARB: GLenum = 0x84D1;
pub static TEXTURE18: GLenum = 0x84D2;
pub static TEXTURE18_ARB: GLenum = 0x84D2;
pub static TEXTURE19: GLenum = 0x84D3;
pub static TEXTURE19_ARB: GLenum = 0x84D3;
pub static TEXTURE20: GLenum = 0x84D4;
pub static TEXTURE20_ARB: GLenum = 0x84D4;
pub static TEXTURE21: GLenum = 0x84D5;
pub static TEXTURE21_ARB: GLenum = 0x84D5;
pub static TEXTURE22: GLenum = 0x84D6;
pub static TEXTURE22_ARB: GLenum = 0x84D6;
pub static TEXTURE23: GLenum = 0x84D7;
pub static TEXTURE23_ARB: GLenum = 0x84D7;
pub static TEXTURE24: GLenum = 0x84D8;
pub static TEXTURE24_ARB: GLenum = 0x84D8;
pub static TEXTURE25: GLenum = 0x84D9;
pub static TEXTURE25_ARB: GLenum = 0x84D9;
pub static TEXTURE26: GLenum = 0x84DA;
pub static TEXTURE26_ARB: GLenum = 0x84DA;
pub static TEXTURE27: GLenum = 0x84DB;
pub static TEXTURE27_ARB: GLenum = 0x84DB;
pub static TEXTURE28: GLenum = 0x84DC;
pub static TEXTURE28_ARB: GLenum = 0x84DC;
pub static TEXTURE29: GLenum = 0x84DD;
pub static TEXTURE29_ARB: GLenum = 0x84DD;
pub static TEXTURE30: GLenum = 0x84DE;
pub static TEXTURE30_ARB: GLenum = 0x84DE;
pub static TEXTURE31: GLenum = 0x84DF;
pub static TEXTURE31_ARB: GLenum = 0x84DF;
pub static ACTIVE_TEXTURE: GLenum = 0x84E0;
pub static ACTIVE_TEXTURE_ARB: GLenum = 0x84E0;
pub static CLIENT_ACTIVE_TEXTURE: GLenum = 0x84E1;
pub static CLIENT_ACTIVE_TEXTURE_ARB: GLenum = 0x84E1;
pub static MAX_TEXTURE_UNITS: GLenum = 0x84E2;
pub static MAX_TEXTURE_UNITS_ARB: GLenum = 0x84E2;
pub static TRANSPOSE_MODELVIEW_MATRIX: GLenum = 0x84E3;
pub static TRANSPOSE_MODELVIEW_MATRIX_ARB: GLenum = 0x84E3;
pub static TRANSPOSE_PROJECTION_MATRIX: GLenum = 0x84E4;
pub static TRANSPOSE_PROJECTION_MATRIX_ARB: GLenum = 0x84E4;
pub static TRANSPOSE_TEXTURE_MATRIX: GLenum = 0x84E5;
pub static TRANSPOSE_TEXTURE_MATRIX_ARB: GLenum = 0x84E5;
pub static TRANSPOSE_COLOR_MATRIX: GLenum = 0x84E6;
pub static TRANSPOSE_COLOR_MATRIX_ARB: GLenum = 0x84E6;
pub static SUBTRACT: GLenum = 0x84E7;
pub static SUBTRACT_ARB: GLenum = 0x84E7;
pub static MAX_RENDERBUFFER_SIZE: GLenum = 0x84E8;
pub static MAX_RENDERBUFFER_SIZE_EXT: GLenum = 0x84E8;
pub static MAX_RENDERBUFFER_SIZE_OES: GLenum = 0x84E8;
pub static COMPRESSED_ALPHA: GLenum = 0x84E9;
pub static COMPRESSED_ALPHA_ARB: GLenum = 0x84E9;
pub static COMPRESSED_LUMINANCE: GLenum = 0x84EA;
pub static COMPRESSED_LUMINANCE_ARB: GLenum = 0x84EA;
pub static COMPRESSED_LUMINANCE_ALPHA: GLenum = 0x84EB;
pub static COMPRESSED_LUMINANCE_ALPHA_ARB: GLenum = 0x84EB;
pub static COMPRESSED_INTENSITY: GLenum = 0x84EC;
pub static COMPRESSED_INTENSITY_ARB: GLenum = 0x84EC;
pub static COMPRESSED_RGB: GLenum = 0x84ED;
pub static COMPRESSED_RGB_ARB: GLenum = 0x84ED;
pub static COMPRESSED_RGBA: GLenum = 0x84EE;
pub static COMPRESSED_RGBA_ARB: GLenum = 0x84EE;
pub static TEXTURE_COMPRESSION_HINT: GLenum = 0x84EF;
pub static TEXTURE_COMPRESSION_HINT_ARB: GLenum = 0x84EF;
pub static UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x84F0;
pub static UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x84F1;
pub static ALL_COMPLETED_NV: GLenum = 0x84F2;
pub static FENCE_STATUS_NV: GLenum = 0x84F3;
pub static FENCE_CONDITION_NV: GLenum = 0x84F4;
pub static TEXTURE_RECTANGLE: GLenum = 0x84F5;
pub static TEXTURE_RECTANGLE_ARB: GLenum = 0x84F5;
pub static TEXTURE_RECTANGLE_NV: GLenum = 0x84F5;
pub static TEXTURE_BINDING_RECTANGLE: GLenum = 0x84F6;
pub static TEXTURE_BINDING_RECTANGLE_ARB: GLenum = 0x84F6;
pub static TEXTURE_BINDING_RECTANGLE_NV: GLenum = 0x84F6;
pub static PROXY_TEXTURE_RECTANGLE: GLenum = 0x84F7;
pub static PROXY_TEXTURE_RECTANGLE_ARB: GLenum = 0x84F7;
pub static PROXY_TEXTURE_RECTANGLE_NV: GLenum = 0x84F7;
pub static MAX_RECTANGLE_TEXTURE_SIZE: GLenum = 0x84F8;
pub static MAX_RECTANGLE_TEXTURE_SIZE_ARB: GLenum = 0x84F8;
pub static MAX_RECTANGLE_TEXTURE_SIZE_NV: GLenum = 0x84F8;
pub static DEPTH_STENCIL: GLenum = 0x84F9;
pub static DEPTH_STENCIL_EXT: GLenum = 0x84F9;
pub static DEPTH_STENCIL_NV: GLenum = 0x84F9;
pub static DEPTH_STENCIL_OES: GLenum = 0x84F9;
pub static UNSIGNED_INT_24_8: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_EXT: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_NV: GLenum = 0x84FA;
pub static UNSIGNED_INT_24_8_OES: GLenum = 0x84FA;
pub static MAX_TEXTURE_LOD_BIAS: GLenum = 0x84FD;
pub static MAX_TEXTURE_LOD_BIAS_EXT: GLenum = 0x84FD;
pub static TEXTURE_MAX_ANISOTROPY_EXT: GLenum = 0x84FE;
pub static MAX_TEXTURE_MAX_ANISOTROPY_EXT: GLenum = 0x84FF;
pub static TEXTURE_FILTER_CONTROL: GLenum = 0x8500;
pub static TEXTURE_FILTER_CONTROL_EXT: GLenum = 0x8500;
pub static TEXTURE_LOD_BIAS: GLenum = 0x8501;
pub static TEXTURE_LOD_BIAS_EXT: GLenum = 0x8501;
pub static MODELVIEW1_STACK_DEPTH_EXT: GLenum = 0x8502;
pub static COMBINE4_NV: GLenum = 0x8503;
pub static MAX_SHININESS_NV: GLenum = 0x8504;
pub static MAX_SPOT_EXPONENT_NV: GLenum = 0x8505;
pub static MODELVIEW1_MATRIX_EXT: GLenum = 0x8506;
pub static INCR_WRAP: GLenum = 0x8507;
pub static INCR_WRAP_EXT: GLenum = 0x8507;
pub static INCR_WRAP_OES: GLenum = 0x8507;
pub static DECR_WRAP: GLenum = 0x8508;
pub static DECR_WRAP_EXT: GLenum = 0x8508;
pub static DECR_WRAP_OES: GLenum = 0x8508;
pub static VERTEX_WEIGHTING_EXT: GLenum = 0x8509;
pub static MODELVIEW1_ARB: GLenum = 0x850A;
pub static MODELVIEW1_EXT: GLenum = 0x850A;
pub static CURRENT_VERTEX_WEIGHT_EXT: GLenum = 0x850B;
pub static VERTEX_WEIGHT_ARRAY_EXT: GLenum = 0x850C;
pub static VERTEX_WEIGHT_ARRAY_SIZE_EXT: GLenum = 0x850D;
pub static VERTEX_WEIGHT_ARRAY_TYPE_EXT: GLenum = 0x850E;
pub static VERTEX_WEIGHT_ARRAY_STRIDE_EXT: GLenum = 0x850F;
pub static VERTEX_WEIGHT_ARRAY_POINTER_EXT: GLenum = 0x8510;
pub static NORMAL_MAP: GLenum = 0x8511;
pub static NORMAL_MAP_ARB: GLenum = 0x8511;
pub static NORMAL_MAP_EXT: GLenum = 0x8511;
pub static NORMAL_MAP_NV: GLenum = 0x8511;
pub static NORMAL_MAP_OES: GLenum = 0x8511;
pub static REFLECTION_MAP: GLenum = 0x8512;
pub static REFLECTION_MAP_ARB: GLenum = 0x8512;
pub static REFLECTION_MAP_EXT: GLenum = 0x8512;
pub static REFLECTION_MAP_NV: GLenum = 0x8512;
pub static REFLECTION_MAP_OES: GLenum = 0x8512;
pub static TEXTURE_CUBE_MAP: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_ARB: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_EXT: GLenum = 0x8513;
pub static TEXTURE_CUBE_MAP_OES: GLenum = 0x8513;
pub static TEXTURE_BINDING_CUBE_MAP: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_ARB: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_EXT: GLenum = 0x8514;
pub static TEXTURE_BINDING_CUBE_MAP_OES: GLenum = 0x8514;
pub static TEXTURE_CUBE_MAP_POSITIVE_X: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_ARB: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_EXT: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_POSITIVE_X_OES: GLenum = 0x8515;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_ARB: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_EXT: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_NEGATIVE_X_OES: GLenum = 0x8516;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_ARB: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_EXT: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_POSITIVE_Y_OES: GLenum = 0x8517;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Y_OES: GLenum = 0x8518;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_ARB: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_EXT: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_POSITIVE_Z_OES: GLenum = 0x8519;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT: GLenum = 0x851A;
pub static TEXTURE_CUBE_MAP_NEGATIVE_Z_OES: GLenum = 0x851A;
pub static PROXY_TEXTURE_CUBE_MAP: GLenum = 0x851B;
pub static PROXY_TEXTURE_CUBE_MAP_ARB: GLenum = 0x851B;
pub static PROXY_TEXTURE_CUBE_MAP_EXT: GLenum = 0x851B;
pub static MAX_CUBE_MAP_TEXTURE_SIZE: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_ARB: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_EXT: GLenum = 0x851C;
pub static MAX_CUBE_MAP_TEXTURE_SIZE_OES: GLenum = 0x851C;
pub static VERTEX_ARRAY_RANGE_APPLE: GLenum = 0x851D;
pub static VERTEX_ARRAY_RANGE_NV: GLenum = 0x851D;
pub static VERTEX_ARRAY_RANGE_LENGTH_APPLE: GLenum = 0x851E;
pub static VERTEX_ARRAY_RANGE_LENGTH_NV: GLenum = 0x851E;
pub static VERTEX_ARRAY_RANGE_VALID_NV: GLenum = 0x851F;
pub static VERTEX_ARRAY_STORAGE_HINT_APPLE: GLenum = 0x851F;
pub static MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV: GLenum = 0x8520;
pub static VERTEX_ARRAY_RANGE_POINTER_APPLE: GLenum = 0x8521;
pub static VERTEX_ARRAY_RANGE_POINTER_NV: GLenum = 0x8521;
pub static REGISTER_COMBINERS_NV: GLenum = 0x8522;
pub static VARIABLE_A_NV: GLenum = 0x8523;
pub static VARIABLE_B_NV: GLenum = 0x8524;
pub static VARIABLE_C_NV: GLenum = 0x8525;
pub static VARIABLE_D_NV: GLenum = 0x8526;
pub static VARIABLE_E_NV: GLenum = 0x8527;
pub static VARIABLE_F_NV: GLenum = 0x8528;
pub static VARIABLE_G_NV: GLenum = 0x8529;
pub static CONSTANT_COLOR0_NV: GLenum = 0x852A;
pub static CONSTANT_COLOR1_NV: GLenum = 0x852B;
pub static PRIMARY_COLOR_NV: GLenum = 0x852C;
pub static SECONDARY_COLOR_NV: GLenum = 0x852D;
pub static SPARE0_NV: GLenum = 0x852E;
pub static SPARE1_NV: GLenum = 0x852F;
pub static DISCARD_NV: GLenum = 0x8530;
pub static E_TIMES_F_NV: GLenum = 0x8531;
pub static SPARE0_PLUS_SECONDARY_COLOR_NV: GLenum = 0x8532;
pub static VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV: GLenum = 0x8533;
pub static MULTISAMPLE_FILTER_HINT_NV: GLenum = 0x8534;
pub static PER_STAGE_CONSTANTS_NV: GLenum = 0x8535;
pub static UNSIGNED_IDENTITY_NV: GLenum = 0x8536;
pub static UNSIGNED_INVERT_NV: GLenum = 0x8537;
pub static EXPAND_NORMAL_NV: GLenum = 0x8538;
pub static EXPAND_NEGATE_NV: GLenum = 0x8539;
pub static HALF_BIAS_NORMAL_NV: GLenum = 0x853A;
pub static HALF_BIAS_NEGATE_NV: GLenum = 0x853B;
pub static SIGNED_IDENTITY_NV: GLenum = 0x853C;
pub static SIGNED_NEGATE_NV: GLenum = 0x853D;
pub static SCALE_BY_TWO_NV: GLenum = 0x853E;
pub static SCALE_BY_FOUR_NV: GLenum = 0x853F;
pub static SCALE_BY_ONE_HALF_NV: GLenum = 0x8540;
pub static BIAS_BY_NEGATIVE_ONE_HALF_NV: GLenum = 0x8541;
pub static COMBINER_INPUT_NV: GLenum = 0x8542;
pub static COMBINER_MAPPING_NV: GLenum = 0x8543;
pub static COMBINER_COMPONENT_USAGE_NV: GLenum = 0x8544;
pub static COMBINER_AB_DOT_PRODUCT_NV: GLenum = 0x8545;
pub static COMBINER_CD_DOT_PRODUCT_NV: GLenum = 0x8546;
pub static COMBINER_MUX_SUM_NV: GLenum = 0x8547;
pub static COMBINER_SCALE_NV: GLenum = 0x8548;
pub static COMBINER_BIAS_NV: GLenum = 0x8549;
pub static COMBINER_AB_OUTPUT_NV: GLenum = 0x854A;
pub static COMBINER_CD_OUTPUT_NV: GLenum = 0x854B;
pub static COMBINER_SUM_OUTPUT_NV: GLenum = 0x854C;
pub static MAX_GENERAL_COMBINERS_NV: GLenum = 0x854D;
pub static NUM_GENERAL_COMBINERS_NV: GLenum = 0x854E;
pub static COLOR_SUM_CLAMP_NV: GLenum = 0x854F;
pub static COMBINER0_NV: GLenum = 0x8550;
pub static COMBINER1_NV: GLenum = 0x8551;
pub static COMBINER2_NV: GLenum = 0x8552;
pub static COMBINER3_NV: GLenum = 0x8553;
pub static COMBINER4_NV: GLenum = 0x8554;
pub static COMBINER5_NV: GLenum = 0x8555;
pub static COMBINER6_NV: GLenum = 0x8556;
pub static COMBINER7_NV: GLenum = 0x8557;
pub static PRIMITIVE_RESTART_NV: GLenum = 0x8558;
pub static PRIMITIVE_RESTART_INDEX_NV: GLenum = 0x8559;
pub static FOG_DISTANCE_MODE_NV: GLenum = 0x855A;
pub static EYE_RADIAL_NV: GLenum = 0x855B;
pub static EYE_PLANE_ABSOLUTE_NV: GLenum = 0x855C;
pub static EMBOSS_LIGHT_NV: GLenum = 0x855D;
pub static EMBOSS_CONSTANT_NV: GLenum = 0x855E;
pub static EMBOSS_MAP_NV: GLenum = 0x855F;
pub static RED_MIN_CLAMP_INGR: GLenum = 0x8560;
pub static GREEN_MIN_CLAMP_INGR: GLenum = 0x8561;
pub static BLUE_MIN_CLAMP_INGR: GLenum = 0x8562;
pub static ALPHA_MIN_CLAMP_INGR: GLenum = 0x8563;
pub static RED_MAX_CLAMP_INGR: GLenum = 0x8564;
pub static GREEN_MAX_CLAMP_INGR: GLenum = 0x8565;
pub static BLUE_MAX_CLAMP_INGR: GLenum = 0x8566;
pub static ALPHA_MAX_CLAMP_INGR: GLenum = 0x8567;
pub static INTERLACE_READ_INGR: GLenum = 0x8568;
pub static COMBINE: GLenum = 0x8570;
pub static COMBINE_ARB: GLenum = 0x8570;
pub static COMBINE_EXT: GLenum = 0x8570;
pub static COMBINE_RGB: GLenum = 0x8571;
pub static COMBINE_RGB_ARB: GLenum = 0x8571;
pub static COMBINE_RGB_EXT: GLenum = 0x8571;
pub static COMBINE_ALPHA: GLenum = 0x8572;
pub static COMBINE_ALPHA_ARB: GLenum = 0x8572;
pub static COMBINE_ALPHA_EXT: GLenum = 0x8572;
pub static RGB_SCALE: GLenum = 0x8573;
pub static RGB_SCALE_ARB: GLenum = 0x8573;
pub static RGB_SCALE_EXT: GLenum = 0x8573;
pub static ADD_SIGNED: GLenum = 0x8574;
pub static ADD_SIGNED_ARB: GLenum = 0x8574;
pub static ADD_SIGNED_EXT: GLenum = 0x8574;
pub static INTERPOLATE: GLenum = 0x8575;
pub static INTERPOLATE_ARB: GLenum = 0x8575;
pub static INTERPOLATE_EXT: GLenum = 0x8575;
pub static CONSTANT: GLenum = 0x8576;
pub static CONSTANT_ARB: GLenum = 0x8576;
pub static CONSTANT_EXT: GLenum = 0x8576;
pub static PRIMARY_COLOR: GLenum = 0x8577;
pub static PRIMARY_COLOR_ARB: GLenum = 0x8577;
pub static PRIMARY_COLOR_EXT: GLenum = 0x8577;
pub static PREVIOUS: GLenum = 0x8578;
pub static PREVIOUS_ARB: GLenum = 0x8578;
pub static PREVIOUS_EXT: GLenum = 0x8578;
pub static SOURCE0_RGB: GLenum = 0x8580;
pub static SOURCE0_RGB_ARB: GLenum = 0x8580;
pub static SOURCE0_RGB_EXT: GLenum = 0x8580;
pub static SRC0_RGB: GLenum = 0x8580;
pub static SOURCE1_RGB: GLenum = 0x8581;
pub static SOURCE1_RGB_ARB: GLenum = 0x8581;
pub static SOURCE1_RGB_EXT: GLenum = 0x8581;
pub static SRC1_RGB: GLenum = 0x8581;
pub static SOURCE2_RGB: GLenum = 0x8582;
pub static SOURCE2_RGB_ARB: GLenum = 0x8582;
pub static SOURCE2_RGB_EXT: GLenum = 0x8582;
pub static SRC2_RGB: GLenum = 0x8582;
pub static SOURCE3_RGB_NV: GLenum = 0x8583;
pub static SOURCE0_ALPHA: GLenum = 0x8588;
pub static SOURCE0_ALPHA_ARB: GLenum = 0x8588;
pub static SOURCE0_ALPHA_EXT: GLenum = 0x8588;
pub static SRC0_ALPHA: GLenum = 0x8588;
pub static SOURCE1_ALPHA: GLenum = 0x8589;
pub static SOURCE1_ALPHA_ARB: GLenum = 0x8589;
pub static SOURCE1_ALPHA_EXT: GLenum = 0x8589;
pub static SRC1_ALPHA: GLenum = 0x8589;
pub static SOURCE2_ALPHA: GLenum = 0x858A;
pub static SOURCE2_ALPHA_ARB: GLenum = 0x858A;
pub static SOURCE2_ALPHA_EXT: GLenum = 0x858A;
pub static SRC2_ALPHA: GLenum = 0x858A;
pub static SOURCE3_ALPHA_NV: GLenum = 0x858B;
pub static OPERAND0_RGB: GLenum = 0x8590;
pub static OPERAND0_RGB_ARB: GLenum = 0x8590;
pub static OPERAND0_RGB_EXT: GLenum = 0x8590;
pub static OPERAND1_RGB: GLenum = 0x8591;
pub static OPERAND1_RGB_ARB: GLenum = 0x8591;
pub static OPERAND1_RGB_EXT: GLenum = 0x8591;
pub static OPERAND2_RGB: GLenum = 0x8592;
pub static OPERAND2_RGB_ARB: GLenum = 0x8592;
pub static OPERAND2_RGB_EXT: GLenum = 0x8592;
pub static OPERAND3_RGB_NV: GLenum = 0x8593;
pub static OPERAND0_ALPHA: GLenum = 0x8598;
pub static OPERAND0_ALPHA_ARB: GLenum = 0x8598;
pub static OPERAND0_ALPHA_EXT: GLenum = 0x8598;
pub static OPERAND1_ALPHA: GLenum = 0x8599;
pub static OPERAND1_ALPHA_ARB: GLenum = 0x8599;
pub static OPERAND1_ALPHA_EXT: GLenum = 0x8599;
pub static OPERAND2_ALPHA: GLenum = 0x859A;
pub static OPERAND2_ALPHA_ARB: GLenum = 0x859A;
pub static OPERAND2_ALPHA_EXT: GLenum = 0x859A;
pub static OPERAND3_ALPHA_NV: GLenum = 0x859B;
pub static PACK_SUBSAMPLE_RATE_SGIX: GLenum = 0x85A0;
pub static UNPACK_SUBSAMPLE_RATE_SGIX: GLenum = 0x85A1;
pub static PIXEL_SUBSAMPLE_4444_SGIX: GLenum = 0x85A2;
pub static PIXEL_SUBSAMPLE_2424_SGIX: GLenum = 0x85A3;
pub static PIXEL_SUBSAMPLE_4242_SGIX: GLenum = 0x85A4;
pub static PERTURB_EXT: GLenum = 0x85AE;
pub static TEXTURE_NORMAL_EXT: GLenum = 0x85AF;
pub static LIGHT_MODEL_SPECULAR_VECTOR_APPLE: GLenum = 0x85B0;
pub static TRANSFORM_HINT_APPLE: GLenum = 0x85B1;
pub static UNPACK_CLIENT_STORAGE_APPLE: GLenum = 0x85B2;
pub static BUFFER_OBJECT_APPLE: GLenum = 0x85B3;
pub static STORAGE_CLIENT_APPLE: GLenum = 0x85B4;
pub static VERTEX_ARRAY_BINDING: GLenum = 0x85B5;
pub static VERTEX_ARRAY_BINDING_APPLE: GLenum = 0x85B5;
pub static TEXTURE_RANGE_LENGTH_APPLE: GLenum = 0x85B7;
pub static TEXTURE_RANGE_POINTER_APPLE: GLenum = 0x85B8;
pub static YCBCR_422_APPLE: GLenum = 0x85B9;
pub static UNSIGNED_SHORT_8_8_APPLE: GLenum = 0x85BA;
pub static UNSIGNED_SHORT_8_8_MESA: GLenum = 0x85BA;
pub static UNSIGNED_SHORT_8_8_REV_APPLE: GLenum = 0x85BB;
pub static UNSIGNED_SHORT_8_8_REV_MESA: GLenum = 0x85BB;
pub static TEXTURE_STORAGE_HINT_APPLE: GLenum = 0x85BC;
pub static STORAGE_PRIVATE_APPLE: GLenum = 0x85BD;
pub static STORAGE_CACHED_APPLE: GLenum = 0x85BE;
pub static STORAGE_SHARED_APPLE: GLenum = 0x85BF;
pub static REPLACEMENT_CODE_ARRAY_SUN: GLenum = 0x85C0;
pub static REPLACEMENT_CODE_ARRAY_TYPE_SUN: GLenum = 0x85C1;
pub static REPLACEMENT_CODE_ARRAY_STRIDE_SUN: GLenum = 0x85C2;
pub static REPLACEMENT_CODE_ARRAY_POINTER_SUN: GLenum = 0x85C3;
pub static R1UI_V3F_SUN: GLenum = 0x85C4;
pub static R1UI_C4UB_V3F_SUN: GLenum = 0x85C5;
pub static R1UI_C3F_V3F_SUN: GLenum = 0x85C6;
pub static R1UI_N3F_V3F_SUN: GLenum = 0x85C7;
pub static R1UI_C4F_N3F_V3F_SUN: GLenum = 0x85C8;
pub static R1UI_T2F_V3F_SUN: GLenum = 0x85C9;
pub static R1UI_T2F_N3F_V3F_SUN: GLenum = 0x85CA;
pub static R1UI_T2F_C4F_N3F_V3F_SUN: GLenum = 0x85CB;
pub static SLICE_ACCUM_SUN: GLenum = 0x85CC;
pub static QUAD_MESH_SUN: GLenum = 0x8614;
pub static TRIANGLE_MESH_SUN: GLenum = 0x8615;
pub static VERTEX_PROGRAM_ARB: GLenum = 0x8620;
pub static VERTEX_PROGRAM_NV: GLenum = 0x8620;
pub static VERTEX_STATE_PROGRAM_NV: GLenum = 0x8621;
pub static VERTEX_ATTRIB_ARRAY_ENABLED: GLenum = 0x8622;
pub static VERTEX_ATTRIB_ARRAY_ENABLED_ARB: GLenum = 0x8622;
pub static ATTRIB_ARRAY_SIZE_NV: GLenum = 0x8623;
pub static VERTEX_ATTRIB_ARRAY_SIZE: GLenum = 0x8623;
pub static VERTEX_ATTRIB_ARRAY_SIZE_ARB: GLenum = 0x8623;
pub static ATTRIB_ARRAY_STRIDE_NV: GLenum = 0x8624;
pub static VERTEX_ATTRIB_ARRAY_STRIDE: GLenum = 0x8624;
pub static VERTEX_ATTRIB_ARRAY_STRIDE_ARB: GLenum = 0x8624;
pub static ATTRIB_ARRAY_TYPE_NV: GLenum = 0x8625;
pub static VERTEX_ATTRIB_ARRAY_TYPE: GLenum = 0x8625;
pub static VERTEX_ATTRIB_ARRAY_TYPE_ARB: GLenum = 0x8625;
pub static CURRENT_ATTRIB_NV: GLenum = 0x8626;
pub static CURRENT_VERTEX_ATTRIB: GLenum = 0x8626;
pub static CURRENT_VERTEX_ATTRIB_ARB: GLenum = 0x8626;
pub static PROGRAM_LENGTH_ARB: GLenum = 0x8627;
pub static PROGRAM_LENGTH_NV: GLenum = 0x8627;
pub static PROGRAM_STRING_ARB: GLenum = 0x8628;
pub static PROGRAM_STRING_NV: GLenum = 0x8628;
pub static MODELVIEW_PROJECTION_NV: GLenum = 0x8629;
pub static IDENTITY_NV: GLenum = 0x862A;
pub static INVERSE_NV: GLenum = 0x862B;
pub static TRANSPOSE_NV: GLenum = 0x862C;
pub static INVERSE_TRANSPOSE_NV: GLenum = 0x862D;
pub static MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB: GLenum = 0x862E;
pub static MAX_TRACK_MATRIX_STACK_DEPTH_NV: GLenum = 0x862E;
pub static MAX_PROGRAM_MATRICES_ARB: GLenum = 0x862F;
pub static MAX_TRACK_MATRICES_NV: GLenum = 0x862F;
pub static MATRIX0_NV: GLenum = 0x8630;
pub static MATRIX1_NV: GLenum = 0x8631;
pub static MATRIX2_NV: GLenum = 0x8632;
pub static MATRIX3_NV: GLenum = 0x8633;
pub static MATRIX4_NV: GLenum = 0x8634;
pub static MATRIX5_NV: GLenum = 0x8635;
pub static MATRIX6_NV: GLenum = 0x8636;
pub static MATRIX7_NV: GLenum = 0x8637;
pub static CURRENT_MATRIX_STACK_DEPTH_ARB: GLenum = 0x8640;
pub static CURRENT_MATRIX_STACK_DEPTH_NV: GLenum = 0x8640;
pub static CURRENT_MATRIX_ARB: GLenum = 0x8641;
pub static CURRENT_MATRIX_NV: GLenum = 0x8641;
pub static VERTEX_PROGRAM_POINT_SIZE: GLenum = 0x8642;
pub static VERTEX_PROGRAM_POINT_SIZE_ARB: GLenum = 0x8642;
pub static VERTEX_PROGRAM_POINT_SIZE_NV: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE_ARB: GLenum = 0x8642;
pub static PROGRAM_POINT_SIZE_EXT: GLenum = 0x8642;
pub static VERTEX_PROGRAM_TWO_SIDE: GLenum = 0x8643;
pub static VERTEX_PROGRAM_TWO_SIDE_ARB: GLenum = 0x8643;
pub static VERTEX_PROGRAM_TWO_SIDE_NV: GLenum = 0x8643;
pub static PROGRAM_PARAMETER_NV: GLenum = 0x8644;
pub static ATTRIB_ARRAY_POINTER_NV: GLenum = 0x8645;
pub static VERTEX_ATTRIB_ARRAY_POINTER: GLenum = 0x8645;
pub static VERTEX_ATTRIB_ARRAY_POINTER_ARB: GLenum = 0x8645;
pub static PROGRAM_TARGET_NV: GLenum = 0x8646;
pub static PROGRAM_RESIDENT_NV: GLenum = 0x8647;
pub static TRACK_MATRIX_NV: GLenum = 0x8648;
pub static TRACK_MATRIX_TRANSFORM_NV: GLenum = 0x8649;
pub static VERTEX_PROGRAM_BINDING_NV: GLenum = 0x864A;
pub static PROGRAM_ERROR_POSITION_ARB: GLenum = 0x864B;
pub static PROGRAM_ERROR_POSITION_NV: GLenum = 0x864B;
pub static OFFSET_TEXTURE_RECTANGLE_NV: GLenum = 0x864C;
pub static OFFSET_TEXTURE_RECTANGLE_SCALE_NV: GLenum = 0x864D;
pub static DOT_PRODUCT_TEXTURE_RECTANGLE_NV: GLenum = 0x864E;
pub static DEPTH_CLAMP: GLenum = 0x864F;
pub static DEPTH_CLAMP_NV: GLenum = 0x864F;
pub static VERTEX_ATTRIB_ARRAY0_NV: GLenum = 0x8650;
pub static VERTEX_ATTRIB_ARRAY1_NV: GLenum = 0x8651;
pub static VERTEX_ATTRIB_ARRAY2_NV: GLenum = 0x8652;
pub static VERTEX_ATTRIB_ARRAY3_NV: GLenum = 0x8653;
pub static VERTEX_ATTRIB_ARRAY4_NV: GLenum = 0x8654;
pub static VERTEX_ATTRIB_ARRAY5_NV: GLenum = 0x8655;
pub static VERTEX_ATTRIB_ARRAY6_NV: GLenum = 0x8656;
pub static VERTEX_ATTRIB_ARRAY7_NV: GLenum = 0x8657;
pub static VERTEX_ATTRIB_ARRAY8_NV: GLenum = 0x8658;
pub static VERTEX_ATTRIB_ARRAY9_NV: GLenum = 0x8659;
pub static VERTEX_ATTRIB_ARRAY10_NV: GLenum = 0x865A;
pub static VERTEX_ATTRIB_ARRAY11_NV: GLenum = 0x865B;
pub static VERTEX_ATTRIB_ARRAY12_NV: GLenum = 0x865C;
pub static VERTEX_ATTRIB_ARRAY13_NV: GLenum = 0x865D;
pub static VERTEX_ATTRIB_ARRAY14_NV: GLenum = 0x865E;
pub static VERTEX_ATTRIB_ARRAY15_NV: GLenum = 0x865F;
pub static MAP1_VERTEX_ATTRIB0_4_NV: GLenum = 0x8660;
pub static MAP1_VERTEX_ATTRIB1_4_NV: GLenum = 0x8661;
pub static MAP1_VERTEX_ATTRIB2_4_NV: GLenum = 0x8662;
pub static MAP1_VERTEX_ATTRIB3_4_NV: GLenum = 0x8663;
pub static MAP1_VERTEX_ATTRIB4_4_NV: GLenum = 0x8664;
pub static MAP1_VERTEX_ATTRIB5_4_NV: GLenum = 0x8665;
pub static MAP1_VERTEX_ATTRIB6_4_NV: GLenum = 0x8666;
pub static MAP1_VERTEX_ATTRIB7_4_NV: GLenum = 0x8667;
pub static MAP1_VERTEX_ATTRIB8_4_NV: GLenum = 0x8668;
pub static MAP1_VERTEX_ATTRIB9_4_NV: GLenum = 0x8669;
pub static MAP1_VERTEX_ATTRIB10_4_NV: GLenum = 0x866A;
pub static MAP1_VERTEX_ATTRIB11_4_NV: GLenum = 0x866B;
pub static MAP1_VERTEX_ATTRIB12_4_NV: GLenum = 0x866C;
pub static MAP1_VERTEX_ATTRIB13_4_NV: GLenum = 0x866D;
pub static MAP1_VERTEX_ATTRIB14_4_NV: GLenum = 0x866E;
pub static MAP1_VERTEX_ATTRIB15_4_NV: GLenum = 0x866F;
pub static MAP2_VERTEX_ATTRIB0_4_NV: GLenum = 0x8670;
pub static MAP2_VERTEX_ATTRIB1_4_NV: GLenum = 0x8671;
pub static MAP2_VERTEX_ATTRIB2_4_NV: GLenum = 0x8672;
pub static MAP2_VERTEX_ATTRIB3_4_NV: GLenum = 0x8673;
pub static MAP2_VERTEX_ATTRIB4_4_NV: GLenum = 0x8674;
pub static MAP2_VERTEX_ATTRIB5_4_NV: GLenum = 0x8675;
pub static MAP2_VERTEX_ATTRIB6_4_NV: GLenum = 0x8676;
pub static MAP2_VERTEX_ATTRIB7_4_NV: GLenum = 0x8677;
pub static PROGRAM_BINDING_ARB: GLenum = 0x8677;
pub static MAP2_VERTEX_ATTRIB8_4_NV: GLenum = 0x8678;
pub static MAP2_VERTEX_ATTRIB9_4_NV: GLenum = 0x8679;
pub static MAP2_VERTEX_ATTRIB10_4_NV: GLenum = 0x867A;
pub static MAP2_VERTEX_ATTRIB11_4_NV: GLenum = 0x867B;
pub static MAP2_VERTEX_ATTRIB12_4_NV: GLenum = 0x867C;
pub static MAP2_VERTEX_ATTRIB13_4_NV: GLenum = 0x867D;
pub static MAP2_VERTEX_ATTRIB14_4_NV: GLenum = 0x867E;
pub static MAP2_VERTEX_ATTRIB15_4_NV: GLenum = 0x867F;
pub static TEXTURE_COMPRESSED_IMAGE_SIZE: GLenum = 0x86A0;
pub static TEXTURE_COMPRESSED_IMAGE_SIZE_ARB: GLenum = 0x86A0;
pub static TEXTURE_COMPRESSED: GLenum = 0x86A1;
pub static TEXTURE_COMPRESSED_ARB: GLenum = 0x86A1;
pub static NUM_COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A2;
pub static NUM_COMPRESSED_TEXTURE_FORMATS_ARB: GLenum = 0x86A2;
pub static COMPRESSED_TEXTURE_FORMATS: GLenum = 0x86A3;
pub static COMPRESSED_TEXTURE_FORMATS_ARB: GLenum = 0x86A3;
pub static MAX_VERTEX_UNITS_ARB: GLenum = 0x86A4;
pub static MAX_VERTEX_UNITS_OES: GLenum = 0x86A4;
pub static ACTIVE_VERTEX_UNITS_ARB: GLenum = 0x86A5;
pub static WEIGHT_SUM_UNITY_ARB: GLenum = 0x86A6;
pub static VERTEX_BLEND_ARB: GLenum = 0x86A7;
pub static CURRENT_WEIGHT_ARB: GLenum = 0x86A8;
pub static WEIGHT_ARRAY_TYPE_ARB: GLenum = 0x86A9;
pub static WEIGHT_ARRAY_TYPE_OES: GLenum = 0x86A9;
pub static WEIGHT_ARRAY_STRIDE_ARB: GLenum = 0x86AA;
pub static WEIGHT_ARRAY_STRIDE_OES: GLenum = 0x86AA;
pub static WEIGHT_ARRAY_SIZE_ARB: GLenum = 0x86AB;
pub static WEIGHT_ARRAY_SIZE_OES: GLenum = 0x86AB;
pub static WEIGHT_ARRAY_POINTER_ARB: GLenum = 0x86AC;
pub static WEIGHT_ARRAY_POINTER_OES: GLenum = 0x86AC;
pub static WEIGHT_ARRAY_ARB: GLenum = 0x86AD;
pub static WEIGHT_ARRAY_OES: GLenum = 0x86AD;
pub static DOT3_RGB: GLenum = 0x86AE;
pub static DOT3_RGB_ARB: GLenum = 0x86AE;
pub static DOT3_RGBA: GLenum = 0x86AF;
pub static DOT3_RGBA_ARB: GLenum = 0x86AF;
pub static DOT3_RGBA_IMG: GLenum = 0x86AF;
pub static COMPRESSED_RGB_FXT1_3DFX: GLenum = 0x86B0;
pub static COMPRESSED_RGBA_FXT1_3DFX: GLenum = 0x86B1;
pub static MULTISAMPLE_3DFX: GLenum = 0x86B2;
pub static SAMPLE_BUFFERS_3DFX: GLenum = 0x86B3;
pub static SAMPLES_3DFX: GLenum = 0x86B4;
pub static EVAL_2D_NV: GLenum = 0x86C0;
pub static EVAL_TRIANGULAR_2D_NV: GLenum = 0x86C1;
pub static MAP_TESSELLATION_NV: GLenum = 0x86C2;
pub static MAP_ATTRIB_U_ORDER_NV: GLenum = 0x86C3;
pub static MAP_ATTRIB_V_ORDER_NV: GLenum = 0x86C4;
pub static EVAL_FRACTIONAL_TESSELLATION_NV: GLenum = 0x86C5;
pub static EVAL_VERTEX_ATTRIB0_NV: GLenum = 0x86C6;
pub static EVAL_VERTEX_ATTRIB1_NV: GLenum = 0x86C7;
pub static EVAL_VERTEX_ATTRIB2_NV: GLenum = 0x86C8;
pub static EVAL_VERTEX_ATTRIB3_NV: GLenum = 0x86C9;
pub static EVAL_VERTEX_ATTRIB4_NV: GLenum = 0x86CA;
pub static EVAL_VERTEX_ATTRIB5_NV: GLenum = 0x86CB;
pub static EVAL_VERTEX_ATTRIB6_NV: GLenum = 0x86CC;
pub static EVAL_VERTEX_ATTRIB7_NV: GLenum = 0x86CD;
pub static EVAL_VERTEX_ATTRIB8_NV: GLenum = 0x86CE;
pub static EVAL_VERTEX_ATTRIB9_NV: GLenum = 0x86CF;
pub static EVAL_VERTEX_ATTRIB10_NV: GLenum = 0x86D0;
pub static EVAL_VERTEX_ATTRIB11_NV: GLenum = 0x86D1;
pub static EVAL_VERTEX_ATTRIB12_NV: GLenum = 0x86D2;
pub static EVAL_VERTEX_ATTRIB13_NV: GLenum = 0x86D3;
pub static EVAL_VERTEX_ATTRIB14_NV: GLenum = 0x86D4;
pub static EVAL_VERTEX_ATTRIB15_NV: GLenum = 0x86D5;
pub static MAX_MAP_TESSELLATION_NV: GLenum = 0x86D6;
pub static MAX_RATIONAL_EVAL_ORDER_NV: GLenum = 0x86D7;
pub static MAX_PROGRAM_PATCH_ATTRIBS_NV: GLenum = 0x86D8;
pub static RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV: GLenum = 0x86D9;
pub static UNSIGNED_INT_S8_S8_8_8_NV: GLenum = 0x86DA;
pub static UNSIGNED_INT_8_8_S8_S8_REV_NV: GLenum = 0x86DB;
pub static DSDT_MAG_INTENSITY_NV: GLenum = 0x86DC;
pub static SHADER_CONSISTENT_NV: GLenum = 0x86DD;
pub static TEXTURE_SHADER_NV: GLenum = 0x86DE;
pub static SHADER_OPERATION_NV: GLenum = 0x86DF;
pub static CULL_MODES_NV: GLenum = 0x86E0;
pub static OFFSET_TEXTURE_MATRIX_NV: GLenum = 0x86E1;
pub static OFFSET_TEXTURE_2D_MATRIX_NV: GLenum = 0x86E1;
pub static OFFSET_TEXTURE_SCALE_NV: GLenum = 0x86E2;
pub static OFFSET_TEXTURE_2D_SCALE_NV: GLenum = 0x86E2;
pub static OFFSET_TEXTURE_BIAS_NV: GLenum = 0x86E3;
pub static OFFSET_TEXTURE_2D_BIAS_NV: GLenum = 0x86E3;
pub static PREVIOUS_TEXTURE_INPUT_NV: GLenum = 0x86E4;
pub static CONST_EYE_NV: GLenum = 0x86E5;
pub static PASS_THROUGH_NV: GLenum = 0x86E6;
pub static CULL_FRAGMENT_NV: GLenum = 0x86E7;
pub static OFFSET_TEXTURE_2D_NV: GLenum = 0x86E8;
pub static DEPENDENT_AR_TEXTURE_2D_NV: GLenum = 0x86E9;
pub static DEPENDENT_GB_TEXTURE_2D_NV: GLenum = 0x86EA;
pub static SURFACE_STATE_NV: GLenum = 0x86EB;
pub static DOT_PRODUCT_NV: GLenum = 0x86EC;
pub static DOT_PRODUCT_DEPTH_REPLACE_NV: GLenum = 0x86ED;
pub static DOT_PRODUCT_TEXTURE_2D_NV: GLenum = 0x86EE;
pub static DOT_PRODUCT_TEXTURE_3D_NV: GLenum = 0x86EF;
pub static DOT_PRODUCT_TEXTURE_CUBE_MAP_NV: GLenum = 0x86F0;
pub static DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV: GLenum = 0x86F1;
pub static DOT_PRODUCT_REFLECT_CUBE_MAP_NV: GLenum = 0x86F2;
pub static DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV: GLenum = 0x86F3;
pub static HILO_NV: GLenum = 0x86F4;
pub static DSDT_NV: GLenum = 0x86F5;
pub static DSDT_MAG_NV: GLenum = 0x86F6;
pub static DSDT_MAG_VIB_NV: GLenum = 0x86F7;
pub static HILO16_NV: GLenum = 0x86F8;
pub static SIGNED_HILO_NV: GLenum = 0x86F9;
pub static SIGNED_HILO16_NV: GLenum = 0x86FA;
pub static SIGNED_RGBA_NV: GLenum = 0x86FB;
pub static SIGNED_RGBA8_NV: GLenum = 0x86FC;
pub static SURFACE_REGISTERED_NV: GLenum = 0x86FD;
pub static SIGNED_RGB_NV: GLenum = 0x86FE;
pub static SIGNED_RGB8_NV: GLenum = 0x86FF;
pub static SURFACE_MAPPED_NV: GLenum = 0x8700;
pub static SIGNED_LUMINANCE_NV: GLenum = 0x8701;
pub static SIGNED_LUMINANCE8_NV: GLenum = 0x8702;
pub static SIGNED_LUMINANCE_ALPHA_NV: GLenum = 0x8703;
pub static SIGNED_LUMINANCE8_ALPHA8_NV: GLenum = 0x8704;
pub static SIGNED_ALPHA_NV: GLenum = 0x8705;
pub static SIGNED_ALPHA8_NV: GLenum = 0x8706;
pub static SIGNED_INTENSITY_NV: GLenum = 0x8707;
pub static SIGNED_INTENSITY8_NV: GLenum = 0x8708;
pub static DSDT8_NV: GLenum = 0x8709;
pub static DSDT8_MAG8_NV: GLenum = 0x870A;
pub static DSDT8_MAG8_INTENSITY8_NV: GLenum = 0x870B;
pub static SIGNED_RGB_UNSIGNED_ALPHA_NV: GLenum = 0x870C;
pub static SIGNED_RGB8_UNSIGNED_ALPHA8_NV: GLenum = 0x870D;
pub static HI_SCALE_NV: GLenum = 0x870E;
pub static LO_SCALE_NV: GLenum = 0x870F;
pub static DS_SCALE_NV: GLenum = 0x8710;
pub static DT_SCALE_NV: GLenum = 0x8711;
pub static MAGNITUDE_SCALE_NV: GLenum = 0x8712;
pub static VIBRANCE_SCALE_NV: GLenum = 0x8713;
pub static HI_BIAS_NV: GLenum = 0x8714;
pub static LO_BIAS_NV: GLenum = 0x8715;
pub static DS_BIAS_NV: GLenum = 0x8716;
pub static DT_BIAS_NV: GLenum = 0x8717;
pub static MAGNITUDE_BIAS_NV: GLenum = 0x8718;
pub static VIBRANCE_BIAS_NV: GLenum = 0x8719;
pub static TEXTURE_BORDER_VALUES_NV: GLenum = 0x871A;
pub static TEXTURE_HI_SIZE_NV: GLenum = 0x871B;
pub static TEXTURE_LO_SIZE_NV: GLenum = 0x871C;
pub static TEXTURE_DS_SIZE_NV: GLenum = 0x871D;
pub static TEXTURE_DT_SIZE_NV: GLenum = 0x871E;
pub static TEXTURE_MAG_SIZE_NV: GLenum = 0x871F;
pub static MODELVIEW2_ARB: GLenum = 0x8722;
pub static MODELVIEW3_ARB: GLenum = 0x8723;
pub static MODELVIEW4_ARB: GLenum = 0x8724;
pub static MODELVIEW5_ARB: GLenum = 0x8725;
pub static MODELVIEW6_ARB: GLenum = 0x8726;
pub static MODELVIEW7_ARB: GLenum = 0x8727;
pub static MODELVIEW8_ARB: GLenum = 0x8728;
pub static MODELVIEW9_ARB: GLenum = 0x8729;
pub static MODELVIEW10_ARB: GLenum = 0x872A;
pub static MODELVIEW11_ARB: GLenum = 0x872B;
pub static MODELVIEW12_ARB: GLenum = 0x872C;
pub static MODELVIEW13_ARB: GLenum = 0x872D;
pub static MODELVIEW14_ARB: GLenum = 0x872E;
pub static MODELVIEW15_ARB: GLenum = 0x872F;
pub static MODELVIEW16_ARB: GLenum = 0x8730;
pub static MODELVIEW17_ARB: GLenum = 0x8731;
pub static MODELVIEW18_ARB: GLenum = 0x8732;
pub static MODELVIEW19_ARB: GLenum = 0x8733;
pub static MODELVIEW20_ARB: GLenum = 0x8734;
pub static MODELVIEW21_ARB: GLenum = 0x8735;
pub static MODELVIEW22_ARB: GLenum = 0x8736;
pub static MODELVIEW23_ARB: GLenum = 0x8737;
pub static MODELVIEW24_ARB: GLenum = 0x8738;
pub static MODELVIEW25_ARB: GLenum = 0x8739;
pub static MODELVIEW26_ARB: GLenum = 0x873A;
pub static MODELVIEW27_ARB: GLenum = 0x873B;
pub static MODELVIEW28_ARB: GLenum = 0x873C;
pub static MODELVIEW29_ARB: GLenum = 0x873D;
pub static MODELVIEW30_ARB: GLenum = 0x873E;
pub static MODELVIEW31_ARB: GLenum = 0x873F;
pub static DOT3_RGB_EXT: GLenum = 0x8740;
pub static Z400_BINARY_AMD: GLenum = 0x8740;
pub static DOT3_RGBA_EXT: GLenum = 0x8741;
pub static PROGRAM_BINARY_LENGTH_OES: GLenum = 0x8741;
pub static PROGRAM_BINARY_LENGTH: GLenum = 0x8741;
pub static MIRROR_CLAMP_ATI: GLenum = 0x8742;
pub static MIRROR_CLAMP_EXT: GLenum = 0x8742;
pub static MIRROR_CLAMP_TO_EDGE: GLenum = 0x8743;
pub static MIRROR_CLAMP_TO_EDGE_ATI: GLenum = 0x8743;
pub static MIRROR_CLAMP_TO_EDGE_EXT: GLenum = 0x8743;
pub static MODULATE_ADD_ATI: GLenum = 0x8744;
pub static MODULATE_SIGNED_ADD_ATI: GLenum = 0x8745;
pub static MODULATE_SUBTRACT_ATI: GLenum = 0x8746;
pub static SET_AMD: GLenum = 0x874A;
pub static REPLACE_VALUE_AMD: GLenum = 0x874B;
pub static STENCIL_OP_VALUE_AMD: GLenum = 0x874C;
pub static STENCIL_BACK_OP_VALUE_AMD: GLenum = 0x874D;
pub static VERTEX_ATTRIB_ARRAY_LONG: GLenum = 0x874E;
pub static DEPTH_STENCIL_MESA: GLenum = 0x8750;
pub static UNSIGNED_INT_24_8_MESA: GLenum = 0x8751;
pub static UNSIGNED_INT_8_24_REV_MESA: GLenum = 0x8752;
pub static UNSIGNED_SHORT_15_1_MESA: GLenum = 0x8753;
pub static UNSIGNED_SHORT_1_15_REV_MESA: GLenum = 0x8754;
pub static TRACE_MASK_MESA: GLenum = 0x8755;
pub static TRACE_NAME_MESA: GLenum = 0x8756;
pub static YCBCR_MESA: GLenum = 0x8757;
pub static PACK_INVERT_MESA: GLenum = 0x8758;
pub static DEBUG_OBJECT_MESA: GLenum = 0x8759;
pub static TEXTURE_1D_STACK_MESAX: GLenum = 0x8759;
pub static DEBUG_PRINT_MESA: GLenum = 0x875A;
pub static TEXTURE_2D_STACK_MESAX: GLenum = 0x875A;
pub static DEBUG_ASSERT_MESA: GLenum = 0x875B;
pub static PROXY_TEXTURE_1D_STACK_MESAX: GLenum = 0x875B;
pub static PROXY_TEXTURE_2D_STACK_MESAX: GLenum = 0x875C;
pub static TEXTURE_1D_STACK_BINDING_MESAX: GLenum = 0x875D;
pub static TEXTURE_2D_STACK_BINDING_MESAX: GLenum = 0x875E;
pub static STATIC_ATI: GLenum = 0x8760;
pub static DYNAMIC_ATI: GLenum = 0x8761;
pub static PRESERVE_ATI: GLenum = 0x8762;
pub static DISCARD_ATI: GLenum = 0x8763;
pub static BUFFER_SIZE: GLenum = 0x8764;
pub static BUFFER_SIZE_ARB: GLenum = 0x8764;
pub static OBJECT_BUFFER_SIZE_ATI: GLenum = 0x8764;
pub static BUFFER_USAGE: GLenum = 0x8765;
pub static BUFFER_USAGE_ARB: GLenum = 0x8765;
pub static OBJECT_BUFFER_USAGE_ATI: GLenum = 0x8765;
pub static ARRAY_OBJECT_BUFFER_ATI: GLenum = 0x8766;
pub static ARRAY_OBJECT_OFFSET_ATI: GLenum = 0x8767;
pub static ELEMENT_ARRAY_ATI: GLenum = 0x8768;
pub static ELEMENT_ARRAY_TYPE_ATI: GLenum = 0x8769;
pub static ELEMENT_ARRAY_POINTER_ATI: GLenum = 0x876A;
pub static MAX_VERTEX_STREAMS_ATI: GLenum = 0x876B;
pub static VERTEX_STREAM0_ATI: GLenum = 0x876C;
pub static VERTEX_STREAM1_ATI: GLenum = 0x876D;
pub static VERTEX_STREAM2_ATI: GLenum = 0x876E;
pub static VERTEX_STREAM3_ATI: GLenum = 0x876F;
pub static VERTEX_STREAM4_ATI: GLenum = 0x8770;
pub static VERTEX_STREAM5_ATI: GLenum = 0x8771;
pub static VERTEX_STREAM6_ATI: GLenum = 0x8772;
pub static VERTEX_STREAM7_ATI: GLenum = 0x8773;
pub static VERTEX_SOURCE_ATI: GLenum = 0x8774;
pub static BUMP_ROT_MATRIX_ATI: GLenum = 0x8775;
pub static BUMP_ROT_MATRIX_SIZE_ATI: GLenum = 0x8776;
pub static BUMP_NUM_TEX_UNITS_ATI: GLenum = 0x8777;
pub static BUMP_TEX_UNITS_ATI: GLenum = 0x8778;
pub static DUDV_ATI: GLenum = 0x8779;
pub static DU8DV8_ATI: GLenum = 0x877A;
pub static BUMP_ENVMAP_ATI: GLenum = 0x877B;
pub static BUMP_TARGET_ATI: GLenum = 0x877C;
pub static VERTEX_SHADER_EXT: GLenum = 0x8780;
pub static VERTEX_SHADER_BINDING_EXT: GLenum = 0x8781;
pub static OP_INDEX_EXT: GLenum = 0x8782;
pub static OP_NEGATE_EXT: GLenum = 0x8783;
pub static OP_DOT3_EXT: GLenum = 0x8784;
pub static OP_DOT4_EXT: GLenum = 0x8785;
pub static OP_MUL_EXT: GLenum = 0x8786;
pub static OP_ADD_EXT: GLenum = 0x8787;
pub static OP_MADD_EXT: GLenum = 0x8788;
pub static OP_FRAC_EXT: GLenum = 0x8789;
pub static OP_MAX_EXT: GLenum = 0x878A;
pub static OP_MIN_EXT: GLenum = 0x878B;
pub static OP_SET_GE_EXT: GLenum = 0x878C;
pub static OP_SET_LT_EXT: GLenum = 0x878D;
pub static OP_CLAMP_EXT: GLenum = 0x878E;
pub static OP_FLOOR_EXT: GLenum = 0x878F;
pub static OP_ROUND_EXT: GLenum = 0x8790;
pub static OP_EXP_BASE_2_EXT: GLenum = 0x8791;
pub static OP_LOG_BASE_2_EXT: GLenum = 0x8792;
pub static OP_POWER_EXT: GLenum = 0x8793;
pub static OP_RECIP_EXT: GLenum = 0x8794;
pub static OP_RECIP_SQRT_EXT: GLenum = 0x8795;
pub static OP_SUB_EXT: GLenum = 0x8796;
pub static OP_CROSS_PRODUCT_EXT: GLenum = 0x8797;
pub static OP_MULTIPLY_MATRIX_EXT: GLenum = 0x8798;
pub static OP_MOV_EXT: GLenum = 0x8799;
pub static OUTPUT_VERTEX_EXT: GLenum = 0x879A;
pub static OUTPUT_COLOR0_EXT: GLenum = 0x879B;
pub static OUTPUT_COLOR1_EXT: GLenum = 0x879C;
pub static OUTPUT_TEXTURE_COORD0_EXT: GLenum = 0x879D;
pub static OUTPUT_TEXTURE_COORD1_EXT: GLenum = 0x879E;
pub static OUTPUT_TEXTURE_COORD2_EXT: GLenum = 0x879F;
pub static OUTPUT_TEXTURE_COORD3_EXT: GLenum = 0x87A0;
pub static OUTPUT_TEXTURE_COORD4_EXT: GLenum = 0x87A1;
pub static OUTPUT_TEXTURE_COORD5_EXT: GLenum = 0x87A2;
pub static OUTPUT_TEXTURE_COORD6_EXT: GLenum = 0x87A3;
pub static OUTPUT_TEXTURE_COORD7_EXT: GLenum = 0x87A4;
pub static OUTPUT_TEXTURE_COORD8_EXT: GLenum = 0x87A5;
pub static OUTPUT_TEXTURE_COORD9_EXT: GLenum = 0x87A6;
pub static OUTPUT_TEXTURE_COORD10_EXT: GLenum = 0x87A7;
pub static OUTPUT_TEXTURE_COORD11_EXT: GLenum = 0x87A8;
pub static OUTPUT_TEXTURE_COORD12_EXT: GLenum = 0x87A9;
pub static OUTPUT_TEXTURE_COORD13_EXT: GLenum = 0x87AA;
pub static OUTPUT_TEXTURE_COORD14_EXT: GLenum = 0x87AB;
pub static OUTPUT_TEXTURE_COORD15_EXT: GLenum = 0x87AC;
pub static OUTPUT_TEXTURE_COORD16_EXT: GLenum = 0x87AD;
pub static OUTPUT_TEXTURE_COORD17_EXT: GLenum = 0x87AE;
pub static OUTPUT_TEXTURE_COORD18_EXT: GLenum = 0x87AF;
pub static OUTPUT_TEXTURE_COORD19_EXT: GLenum = 0x87B0;
pub static OUTPUT_TEXTURE_COORD20_EXT: GLenum = 0x87B1;
pub static OUTPUT_TEXTURE_COORD21_EXT: GLenum = 0x87B2;
pub static OUTPUT_TEXTURE_COORD22_EXT: GLenum = 0x87B3;
pub static OUTPUT_TEXTURE_COORD23_EXT: GLenum = 0x87B4;
pub static OUTPUT_TEXTURE_COORD24_EXT: GLenum = 0x87B5;
pub static OUTPUT_TEXTURE_COORD25_EXT: GLenum = 0x87B6;
pub static OUTPUT_TEXTURE_COORD26_EXT: GLenum = 0x87B7;
pub static OUTPUT_TEXTURE_COORD27_EXT: GLenum = 0x87B8;
pub static OUTPUT_TEXTURE_COORD28_EXT: GLenum = 0x87B9;
pub static OUTPUT_TEXTURE_COORD29_EXT: GLenum = 0x87BA;
pub static OUTPUT_TEXTURE_COORD30_EXT: GLenum = 0x87BB;
pub static OUTPUT_TEXTURE_COORD31_EXT: GLenum = 0x87BC;
pub static OUTPUT_FOG_EXT: GLenum = 0x87BD;
pub static SCALAR_EXT: GLenum = 0x87BE;
pub static VECTOR_EXT: GLenum = 0x87BF;
pub static MATRIX_EXT: GLenum = 0x87C0;
pub static VARIANT_EXT: GLenum = 0x87C1;
pub static INVARIANT_EXT: GLenum = 0x87C2;
pub static LOCAL_CONSTANT_EXT: GLenum = 0x87C3;
pub static LOCAL_EXT: GLenum = 0x87C4;
pub static MAX_VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87C5;
pub static MAX_VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87C6;
pub static MAX_VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87C7;
pub static MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87C8;
pub static MAX_VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87C9;
pub static MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87CA;
pub static MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87CB;
pub static MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87CC;
pub static MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87CD;
pub static MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87CE;
pub static VERTEX_SHADER_INSTRUCTIONS_EXT: GLenum = 0x87CF;
pub static VERTEX_SHADER_VARIANTS_EXT: GLenum = 0x87D0;
pub static VERTEX_SHADER_INVARIANTS_EXT: GLenum = 0x87D1;
pub static VERTEX_SHADER_LOCAL_CONSTANTS_EXT: GLenum = 0x87D2;
pub static VERTEX_SHADER_LOCALS_EXT: GLenum = 0x87D3;
pub static VERTEX_SHADER_OPTIMIZED_EXT: GLenum = 0x87D4;
pub static X_EXT: GLenum = 0x87D5;
pub static Y_EXT: GLenum = 0x87D6;
pub static Z_EXT: GLenum = 0x87D7;
pub static W_EXT: GLenum = 0x87D8;
pub static NEGATIVE_X_EXT: GLenum = 0x87D9;
pub static NEGATIVE_Y_EXT: GLenum = 0x87DA;
pub static NEGATIVE_Z_EXT: GLenum = 0x87DB;
pub static NEGATIVE_W_EXT: GLenum = 0x87DC;
pub static ZERO_EXT: GLenum = 0x87DD;
pub static ONE_EXT: GLenum = 0x87DE;
pub static NEGATIVE_ONE_EXT: GLenum = 0x87DF;
pub static NORMALIZED_RANGE_EXT: GLenum = 0x87E0;
pub static FULL_RANGE_EXT: GLenum = 0x87E1;
pub static CURRENT_VERTEX_EXT: GLenum = 0x87E2;
pub static MVP_MATRIX_EXT: GLenum = 0x87E3;
pub static VARIANT_VALUE_EXT: GLenum = 0x87E4;
pub static VARIANT_DATATYPE_EXT: GLenum = 0x87E5;
pub static VARIANT_ARRAY_STRIDE_EXT: GLenum = 0x87E6;
pub static VARIANT_ARRAY_TYPE_EXT: GLenum = 0x87E7;
pub static VARIANT_ARRAY_EXT: GLenum = 0x87E8;
pub static VARIANT_ARRAY_POINTER_EXT: GLenum = 0x87E9;
pub static INVARIANT_VALUE_EXT: GLenum = 0x87EA;
pub static INVARIANT_DATATYPE_EXT: GLenum = 0x87EB;
pub static LOCAL_CONSTANT_VALUE_EXT: GLenum = 0x87EC;
pub static LOCAL_CONSTANT_DATATYPE_EXT: GLenum = 0x87ED;
pub static ATC_RGBA_INTERPOLATED_ALPHA_AMD: GLenum = 0x87EE;
pub static PN_TRIANGLES_ATI: GLenum = 0x87F0;
pub static MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI: GLenum = 0x87F1;
pub static PN_TRIANGLES_POINT_MODE_ATI: GLenum = 0x87F2;
pub static PN_TRIANGLES_NORMAL_MODE_ATI: GLenum = 0x87F3;
pub static PN_TRIANGLES_TESSELATION_LEVEL_ATI: GLenum = 0x87F4;
pub static PN_TRIANGLES_POINT_MODE_LINEAR_ATI: GLenum = 0x87F5;
pub static PN_TRIANGLES_POINT_MODE_CUBIC_ATI: GLenum = 0x87F6;
pub static PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI: GLenum = 0x87F7;
pub static PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI: GLenum = 0x87F8;
pub static _3DC_X_AMD: GLenum = 0x87F9;
pub static _3DC_XY_AMD: GLenum = 0x87FA;
pub static VBO_FREE_MEMORY_ATI: GLenum = 0x87FB;
pub static TEXTURE_FREE_MEMORY_ATI: GLenum = 0x87FC;
pub static RENDERBUFFER_FREE_MEMORY_ATI: GLenum = 0x87FD;
pub static NUM_PROGRAM_BINARY_FORMATS: GLenum = 0x87FE;
pub static NUM_PROGRAM_BINARY_FORMATS_OES: GLenum = 0x87FE;
pub static PROGRAM_BINARY_FORMATS: GLenum = 0x87FF;
pub static PROGRAM_BINARY_FORMATS_OES: GLenum = 0x87FF;
pub static STENCIL_BACK_FUNC: GLenum = 0x8800;
pub static STENCIL_BACK_FUNC_ATI: GLenum = 0x8800;
pub static STENCIL_BACK_FAIL: GLenum = 0x8801;
pub static STENCIL_BACK_FAIL_ATI: GLenum = 0x8801;
pub static STENCIL_BACK_PASS_DEPTH_FAIL: GLenum = 0x8802;
pub static STENCIL_BACK_PASS_DEPTH_FAIL_ATI: GLenum = 0x8802;
pub static STENCIL_BACK_PASS_DEPTH_PASS: GLenum = 0x8803;
pub static STENCIL_BACK_PASS_DEPTH_PASS_ATI: GLenum = 0x8803;
pub static FRAGMENT_PROGRAM_ARB: GLenum = 0x8804;
pub static PROGRAM_ALU_INSTRUCTIONS_ARB: GLenum = 0x8805;
pub static PROGRAM_TEX_INSTRUCTIONS_ARB: GLenum = 0x8806;
pub static PROGRAM_TEX_INDIRECTIONS_ARB: GLenum = 0x8807;
pub static PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: GLenum = 0x8808;
pub static PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: GLenum = 0x8809;
pub static PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: GLenum = 0x880A;
pub static MAX_PROGRAM_ALU_INSTRUCTIONS_ARB: GLenum = 0x880B;
pub static MAX_PROGRAM_TEX_INSTRUCTIONS_ARB: GLenum = 0x880C;
pub static MAX_PROGRAM_TEX_INDIRECTIONS_ARB: GLenum = 0x880D;
pub static MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB: GLenum = 0x880E;
pub static MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB: GLenum = 0x880F;
pub static MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB: GLenum = 0x8810;
pub static RGBA32F: GLenum = 0x8814;
pub static RGBA32F_ARB: GLenum = 0x8814;
pub static RGBA_FLOAT32_APPLE: GLenum = 0x8814;
pub static RGBA_FLOAT32_ATI: GLenum = 0x8814;
pub static RGB32F: GLenum = 0x8815;
pub static RGB32F_ARB: GLenum = 0x8815;
pub static RGB_FLOAT32_APPLE: GLenum = 0x8815;
pub static RGB_FLOAT32_ATI: GLenum = 0x8815;
pub static ALPHA32F_ARB: GLenum = 0x8816;
pub static ALPHA_FLOAT32_APPLE: GLenum = 0x8816;
pub static ALPHA_FLOAT32_ATI: GLenum = 0x8816;
pub static INTENSITY32F_ARB: GLenum = 0x8817;
pub static INTENSITY_FLOAT32_APPLE: GLenum = 0x8817;
pub static INTENSITY_FLOAT32_ATI: GLenum = 0x8817;
pub static LUMINANCE32F_ARB: GLenum = 0x8818;
pub static LUMINANCE_FLOAT32_APPLE: GLenum = 0x8818;
pub static LUMINANCE_FLOAT32_ATI: GLenum = 0x8818;
pub static LUMINANCE_ALPHA32F_ARB: GLenum = 0x8819;
pub static LUMINANCE_ALPHA_FLOAT32_APPLE: GLenum = 0x8819;
pub static LUMINANCE_ALPHA_FLOAT32_ATI: GLenum = 0x8819;
pub static RGBA16F: GLenum = 0x881A;
pub static RGBA16F_ARB: GLenum = 0x881A;
pub static RGBA16F_EXT: GLenum = 0x881A;
pub static RGBA_FLOAT16_APPLE: GLenum = 0x881A;
pub static RGBA_FLOAT16_ATI: GLenum = 0x881A;
pub static RGB16F: GLenum = 0x881B;
pub static RGB16F_ARB: GLenum = 0x881B;
pub static RGB16F_EXT: GLenum = 0x881B;
pub static RGB_FLOAT16_APPLE: GLenum = 0x881B;
pub static RGB_FLOAT16_ATI: GLenum = 0x881B;
pub static ALPHA16F_ARB: GLenum = 0x881C;
pub static ALPHA_FLOAT16_APPLE: GLenum = 0x881C;
pub static ALPHA_FLOAT16_ATI: GLenum = 0x881C;
pub static INTENSITY16F_ARB: GLenum = 0x881D;
pub static INTENSITY_FLOAT16_APPLE: GLenum = 0x881D;
pub static INTENSITY_FLOAT16_ATI: GLenum = 0x881D;
pub static LUMINANCE16F_ARB: GLenum = 0x881E;
pub static LUMINANCE_FLOAT16_APPLE: GLenum = 0x881E;
pub static LUMINANCE_FLOAT16_ATI: GLenum = 0x881E;
pub static LUMINANCE_ALPHA16F_ARB: GLenum = 0x881F;
pub static LUMINANCE_ALPHA_FLOAT16_APPLE: GLenum = 0x881F;
pub static LUMINANCE_ALPHA_FLOAT16_ATI: GLenum = 0x881F;
pub static RGBA_FLOAT_MODE_ARB: GLenum = 0x8820;
pub static RGBA_FLOAT_MODE_ATI: GLenum = 0x8820;
pub static WRITEONLY_RENDERING_QCOM: GLenum = 0x8823;
pub static MAX_DRAW_BUFFERS: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_ARB: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_ATI: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_EXT: GLenum = 0x8824;
pub static MAX_DRAW_BUFFERS_NV: GLenum = 0x8824;
pub static DRAW_BUFFER0: GLenum = 0x8825;
pub static DRAW_BUFFER0_ARB: GLenum = 0x8825;
pub static DRAW_BUFFER0_ATI: GLenum = 0x8825;
pub static DRAW_BUFFER0_EXT: GLenum = 0x8825;
pub static DRAW_BUFFER0_NV: GLenum = 0x8825;
pub static DRAW_BUFFER1: GLenum = 0x8826;
pub static DRAW_BUFFER1_ARB: GLenum = 0x8826;
pub static DRAW_BUFFER1_ATI: GLenum = 0x8826;
pub static DRAW_BUFFER1_EXT: GLenum = 0x8826;
pub static DRAW_BUFFER1_NV: GLenum = 0x8826;
pub static DRAW_BUFFER2: GLenum = 0x8827;
pub static DRAW_BUFFER2_ARB: GLenum = 0x8827;
pub static DRAW_BUFFER2_ATI: GLenum = 0x8827;
pub static DRAW_BUFFER2_EXT: GLenum = 0x8827;
pub static DRAW_BUFFER2_NV: GLenum = 0x8827;
pub static DRAW_BUFFER3: GLenum = 0x8828;
pub static DRAW_BUFFER3_ARB: GLenum = 0x8828;
pub static DRAW_BUFFER3_ATI: GLenum = 0x8828;
pub static DRAW_BUFFER3_EXT: GLenum = 0x8828;
pub static DRAW_BUFFER3_NV: GLenum = 0x8828;
pub static DRAW_BUFFER4: GLenum = 0x8829;
pub static DRAW_BUFFER4_ARB: GLenum = 0x8829;
pub static DRAW_BUFFER4_ATI: GLenum = 0x8829;
pub static DRAW_BUFFER4_EXT: GLenum = 0x8829;
pub static DRAW_BUFFER4_NV: GLenum = 0x8829;
pub static DRAW_BUFFER5: GLenum = 0x882A;
pub static DRAW_BUFFER5_ARB: GLenum = 0x882A;
pub static DRAW_BUFFER5_ATI: GLenum = 0x882A;
pub static DRAW_BUFFER5_EXT: GLenum = 0x882A;
pub static DRAW_BUFFER5_NV: GLenum = 0x882A;
pub static DRAW_BUFFER6: GLenum = 0x882B;
pub static DRAW_BUFFER6_ARB: GLenum = 0x882B;
pub static DRAW_BUFFER6_ATI: GLenum = 0x882B;
pub static DRAW_BUFFER6_EXT: GLenum = 0x882B;
pub static DRAW_BUFFER6_NV: GLenum = 0x882B;
pub static DRAW_BUFFER7: GLenum = 0x882C;
pub static DRAW_BUFFER7_ARB: GLenum = 0x882C;
pub static DRAW_BUFFER7_ATI: GLenum = 0x882C;
pub static DRAW_BUFFER7_EXT: GLenum = 0x882C;
pub static DRAW_BUFFER7_NV: GLenum = 0x882C;
pub static DRAW_BUFFER8: GLenum = 0x882D;
pub static DRAW_BUFFER8_ARB: GLenum = 0x882D;
pub static DRAW_BUFFER8_ATI: GLenum = 0x882D;
pub static DRAW_BUFFER8_EXT: GLenum = 0x882D;
pub static DRAW_BUFFER8_NV: GLenum = 0x882D;
pub static DRAW_BUFFER9: GLenum = 0x882E;
pub static DRAW_BUFFER9_ARB: GLenum = 0x882E;
pub static DRAW_BUFFER9_ATI: GLenum = 0x882E;
pub static DRAW_BUFFER9_EXT: GLenum = 0x882E;
pub static DRAW_BUFFER9_NV: GLenum = 0x882E;
pub static DRAW_BUFFER10: GLenum = 0x882F;
pub static DRAW_BUFFER10_ARB: GLenum = 0x882F;
pub static DRAW_BUFFER10_ATI: GLenum = 0x882F;
pub static DRAW_BUFFER10_EXT: GLenum = 0x882F;
pub static DRAW_BUFFER10_NV: GLenum = 0x882F;
pub static DRAW_BUFFER11: GLenum = 0x8830;
pub static DRAW_BUFFER11_ARB: GLenum = 0x8830;
pub static DRAW_BUFFER11_ATI: GLenum = 0x8830;
pub static DRAW_BUFFER11_EXT: GLenum = 0x8830;
pub static DRAW_BUFFER11_NV: GLenum = 0x8830;
pub static DRAW_BUFFER12: GLenum = 0x8831;
pub static DRAW_BUFFER12_ARB: GLenum = 0x8831;
pub static DRAW_BUFFER12_ATI: GLenum = 0x8831;
pub static DRAW_BUFFER12_EXT: GLenum = 0x8831;
pub static DRAW_BUFFER12_NV: GLenum = 0x8831;
pub static DRAW_BUFFER13: GLenum = 0x8832;
pub static DRAW_BUFFER13_ARB: GLenum = 0x8832;
pub static DRAW_BUFFER13_ATI: GLenum = 0x8832;
pub static DRAW_BUFFER13_EXT: GLenum = 0x8832;
pub static DRAW_BUFFER13_NV: GLenum = 0x8832;
pub static DRAW_BUFFER14: GLenum = 0x8833;
pub static DRAW_BUFFER14_ARB: GLenum = 0x8833;
pub static DRAW_BUFFER14_ATI: GLenum = 0x8833;
pub static DRAW_BUFFER14_EXT: GLenum = 0x8833;
pub static DRAW_BUFFER14_NV: GLenum = 0x8833;
pub static DRAW_BUFFER15: GLenum = 0x8834;
pub static DRAW_BUFFER15_ARB: GLenum = 0x8834;
pub static DRAW_BUFFER15_ATI: GLenum = 0x8834;
pub static DRAW_BUFFER15_EXT: GLenum = 0x8834;
pub static DRAW_BUFFER15_NV: GLenum = 0x8834;
pub static COLOR_CLEAR_UNCLAMPED_VALUE_ATI: GLenum = 0x8835;
pub static BLEND_EQUATION_ALPHA: GLenum = 0x883D;
pub static BLEND_EQUATION_ALPHA_EXT: GLenum = 0x883D;
pub static BLEND_EQUATION_ALPHA_OES: GLenum = 0x883D;
pub static SUBSAMPLE_DISTANCE_AMD: GLenum = 0x883F;
pub static MATRIX_PALETTE_ARB: GLenum = 0x8840;
pub static MATRIX_PALETTE_OES: GLenum = 0x8840;
pub static MAX_MATRIX_PALETTE_STACK_DEPTH_ARB: GLenum = 0x8841;
pub static MAX_PALETTE_MATRICES_ARB: GLenum = 0x8842;
pub static MAX_PALETTE_MATRICES_OES: GLenum = 0x8842;
pub static CURRENT_PALETTE_MATRIX_ARB: GLenum = 0x8843;
pub static CURRENT_PALETTE_MATRIX_OES: GLenum = 0x8843;
pub static MATRIX_INDEX_ARRAY_ARB: GLenum = 0x8844;
pub static MATRIX_INDEX_ARRAY_OES: GLenum = 0x8844;
pub static CURRENT_MATRIX_INDEX_ARB: GLenum = 0x8845;
pub static MATRIX_INDEX_ARRAY_SIZE_ARB: GLenum = 0x8846;
pub static MATRIX_INDEX_ARRAY_SIZE_OES: GLenum = 0x8846;
pub static MATRIX_INDEX_ARRAY_TYPE_ARB: GLenum = 0x8847;
pub static MATRIX_INDEX_ARRAY_TYPE_OES: GLenum = 0x8847;
pub static MATRIX_INDEX_ARRAY_STRIDE_ARB: GLenum = 0x8848;
pub static MATRIX_INDEX_ARRAY_STRIDE_OES: GLenum = 0x8848;
pub static MATRIX_INDEX_ARRAY_POINTER_ARB: GLenum = 0x8849;
pub static MATRIX_INDEX_ARRAY_POINTER_OES: GLenum = 0x8849;
pub static TEXTURE_DEPTH_SIZE: GLenum = 0x884A;
pub static TEXTURE_DEPTH_SIZE_ARB: GLenum = 0x884A;
pub static DEPTH_TEXTURE_MODE: GLenum = 0x884B;
pub static DEPTH_TEXTURE_MODE_ARB: GLenum = 0x884B;
pub static TEXTURE_COMPARE_MODE: GLenum = 0x884C;
pub static TEXTURE_COMPARE_MODE_ARB: GLenum = 0x884C;
pub static TEXTURE_COMPARE_MODE_EXT: GLenum = 0x884C;
pub static TEXTURE_COMPARE_FUNC: GLenum = 0x884D;
pub static TEXTURE_COMPARE_FUNC_ARB: GLenum = 0x884D;
pub static TEXTURE_COMPARE_FUNC_EXT: GLenum = 0x884D;
pub static COMPARE_R_TO_TEXTURE: GLenum = 0x884E;
pub static COMPARE_R_TO_TEXTURE_ARB: GLenum = 0x884E;
pub static COMPARE_REF_DEPTH_TO_TEXTURE_EXT: GLenum = 0x884E;
pub static COMPARE_REF_TO_TEXTURE: GLenum = 0x884E;
pub static COMPARE_REF_TO_TEXTURE_EXT: GLenum = 0x884E;
pub static TEXTURE_CUBE_MAP_SEAMLESS: GLenum = 0x884F;
pub static OFFSET_PROJECTIVE_TEXTURE_2D_NV: GLenum = 0x8850;
pub static OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV: GLenum = 0x8851;
pub static OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV: GLenum = 0x8852;
pub static OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV: GLenum = 0x8853;
pub static OFFSET_HILO_TEXTURE_2D_NV: GLenum = 0x8854;
pub static OFFSET_HILO_TEXTURE_RECTANGLE_NV: GLenum = 0x8855;
pub static OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV: GLenum = 0x8856;
pub static OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV: GLenum = 0x8857;
pub static DEPENDENT_HILO_TEXTURE_2D_NV: GLenum = 0x8858;
pub static DEPENDENT_RGB_TEXTURE_3D_NV: GLenum = 0x8859;
pub static DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV: GLenum = 0x885A;
pub static DOT_PRODUCT_PASS_THROUGH_NV: GLenum = 0x885B;
pub static DOT_PRODUCT_TEXTURE_1D_NV: GLenum = 0x885C;
pub static DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV: GLenum = 0x885D;
pub static HILO8_NV: GLenum = 0x885E;
pub static SIGNED_HILO8_NV: GLenum = 0x885F;
pub static FORCE_BLUE_TO_ONE_NV: GLenum = 0x8860;
pub static POINT_SPRITE: GLenum = 0x8861;
pub static POINT_SPRITE_ARB: GLenum = 0x8861;
pub static POINT_SPRITE_NV: GLenum = 0x8861;
pub static POINT_SPRITE_OES: GLenum = 0x8861;
pub static COORD_REPLACE: GLenum = 0x8862;
pub static COORD_REPLACE_ARB: GLenum = 0x8862;
pub static COORD_REPLACE_NV: GLenum = 0x8862;
pub static COORD_REPLACE_OES: GLenum = 0x8862;
pub static POINT_SPRITE_R_MODE_NV: GLenum = 0x8863;
pub static PIXEL_COUNTER_BITS_NV: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS_ARB: GLenum = 0x8864;
pub static QUERY_COUNTER_BITS_EXT: GLenum = 0x8864;
pub static CURRENT_OCCLUSION_QUERY_ID_NV: GLenum = 0x8865;
pub static CURRENT_QUERY: GLenum = 0x8865;
pub static CURRENT_QUERY_ARB: GLenum = 0x8865;
pub static CURRENT_QUERY_EXT: GLenum = 0x8865;
pub static PIXEL_COUNT_NV: GLenum = 0x8866;
pub static QUERY_RESULT: GLenum = 0x8866;
pub static QUERY_RESULT_ARB: GLenum = 0x8866;
pub static QUERY_RESULT_EXT: GLenum = 0x8866;
pub static PIXEL_COUNT_AVAILABLE_NV: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE_ARB: GLenum = 0x8867;
pub static QUERY_RESULT_AVAILABLE_EXT: GLenum = 0x8867;
pub static MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV: GLenum = 0x8868;
pub static MAX_VERTEX_ATTRIBS: GLenum = 0x8869;
pub static MAX_VERTEX_ATTRIBS_ARB: GLenum = 0x8869;
pub static VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum = 0x886A;
pub static VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB: GLenum = 0x886A;
pub static MAX_TESS_CONTROL_INPUT_COMPONENTS: GLenum = 0x886C;
pub static MAX_TESS_EVALUATION_INPUT_COMPONENTS: GLenum = 0x886D;
pub static DEPTH_STENCIL_TO_RGBA_NV: GLenum = 0x886E;
pub static DEPTH_STENCIL_TO_BGRA_NV: GLenum = 0x886F;
pub static FRAGMENT_PROGRAM_NV: GLenum = 0x8870;
pub static MAX_TEXTURE_COORDS: GLenum = 0x8871;
pub static MAX_TEXTURE_COORDS_ARB: GLenum = 0x8871;
pub static MAX_TEXTURE_COORDS_NV: GLenum = 0x8871;
pub static MAX_TEXTURE_IMAGE_UNITS: GLenum = 0x8872;
pub static MAX_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8872;
pub static MAX_TEXTURE_IMAGE_UNITS_NV: GLenum = 0x8872;
pub static FRAGMENT_PROGRAM_BINDING_NV: GLenum = 0x8873;
pub static PROGRAM_ERROR_STRING_ARB: GLenum = 0x8874;
pub static PROGRAM_ERROR_STRING_NV: GLenum = 0x8874;
pub static PROGRAM_FORMAT_ASCII_ARB: GLenum = 0x8875;
pub static PROGRAM_FORMAT_ARB: GLenum = 0x8876;
pub static WRITE_PIXEL_DATA_RANGE_NV: GLenum = 0x8878;
pub static READ_PIXEL_DATA_RANGE_NV: GLenum = 0x8879;
pub static WRITE_PIXEL_DATA_RANGE_LENGTH_NV: GLenum = 0x887A;
pub static READ_PIXEL_DATA_RANGE_LENGTH_NV: GLenum = 0x887B;
pub static WRITE_PIXEL_DATA_RANGE_POINTER_NV: GLenum = 0x887C;
pub static READ_PIXEL_DATA_RANGE_POINTER_NV: GLenum = 0x887D;
pub static GEOMETRY_SHADER_INVOCATIONS: GLenum = 0x887F;
pub static FLOAT_R_NV: GLenum = 0x8880;
pub static FLOAT_RG_NV: GLenum = 0x8881;
pub static FLOAT_RGB_NV: GLenum = 0x8882;
pub static FLOAT_RGBA_NV: GLenum = 0x8883;
pub static FLOAT_R16_NV: GLenum = 0x8884;
pub static FLOAT_R32_NV: GLenum = 0x8885;
pub static FLOAT_RG16_NV: GLenum = 0x8886;
pub static FLOAT_RG32_NV: GLenum = 0x8887;
pub static FLOAT_RGB16_NV: GLenum = 0x8888;
pub static FLOAT_RGB32_NV: GLenum = 0x8889;
pub static FLOAT_RGBA16_NV: GLenum = 0x888A;
pub static FLOAT_RGBA32_NV: GLenum = 0x888B;
pub static TEXTURE_FLOAT_COMPONENTS_NV: GLenum = 0x888C;
pub static FLOAT_CLEAR_COLOR_VALUE_NV: GLenum = 0x888D;
pub static FLOAT_RGBA_MODE_NV: GLenum = 0x888E;
pub static TEXTURE_UNSIGNED_REMAP_MODE_NV: GLenum = 0x888F;
pub static DEPTH_BOUNDS_TEST_EXT: GLenum = 0x8890;
pub static DEPTH_BOUNDS_EXT: GLenum = 0x8891;
pub static ARRAY_BUFFER: GLenum = 0x8892;
pub static ARRAY_BUFFER_ARB: GLenum = 0x8892;
pub static ELEMENT_ARRAY_BUFFER: GLenum = 0x8893;
pub static ELEMENT_ARRAY_BUFFER_ARB: GLenum = 0x8893;
pub static ARRAY_BUFFER_BINDING: GLenum = 0x8894;
pub static ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8894;
pub static ELEMENT_ARRAY_BUFFER_BINDING: GLenum = 0x8895;
pub static ELEMENT_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8895;
pub static VERTEX_ARRAY_BUFFER_BINDING: GLenum = 0x8896;
pub static VERTEX_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8896;
pub static NORMAL_ARRAY_BUFFER_BINDING: GLenum = 0x8897;
pub static NORMAL_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8897;
pub static COLOR_ARRAY_BUFFER_BINDING: GLenum = 0x8898;
pub static COLOR_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8898;
pub static INDEX_ARRAY_BUFFER_BINDING: GLenum = 0x8899;
pub static INDEX_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x8899;
pub static TEXTURE_COORD_ARRAY_BUFFER_BINDING: GLenum = 0x889A;
pub static TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889A;
pub static EDGE_FLAG_ARRAY_BUFFER_BINDING: GLenum = 0x889B;
pub static EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889B;
pub static SECONDARY_COLOR_ARRAY_BUFFER_BINDING: GLenum = 0x889C;
pub static SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889C;
pub static FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889D;
pub static FOG_COORDINATE_ARRAY_BUFFER_BINDING: GLenum = 0x889D;
pub static FOG_COORD_ARRAY_BUFFER_BINDING: GLenum = 0x889D;
pub static WEIGHT_ARRAY_BUFFER_BINDING: GLenum = 0x889E;
pub static WEIGHT_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889E;
pub static WEIGHT_ARRAY_BUFFER_BINDING_OES: GLenum = 0x889E;
pub static VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum = 0x889F;
pub static VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB: GLenum = 0x889F;
pub static PROGRAM_INSTRUCTIONS_ARB: GLenum = 0x88A0;
pub static MAX_PROGRAM_INSTRUCTIONS_ARB: GLenum = 0x88A1;
pub static PROGRAM_NATIVE_INSTRUCTIONS_ARB: GLenum = 0x88A2;
pub static MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB: GLenum = 0x88A3;
pub static PROGRAM_TEMPORARIES_ARB: GLenum = 0x88A4;
pub static MAX_PROGRAM_TEMPORARIES_ARB: GLenum = 0x88A5;
pub static PROGRAM_NATIVE_TEMPORARIES_ARB: GLenum = 0x88A6;
pub static MAX_PROGRAM_NATIVE_TEMPORARIES_ARB: GLenum = 0x88A7;
pub static PROGRAM_PARAMETERS_ARB: GLenum = 0x88A8;
pub static MAX_PROGRAM_PARAMETERS_ARB: GLenum = 0x88A9;
pub static PROGRAM_NATIVE_PARAMETERS_ARB: GLenum = 0x88AA;
pub static MAX_PROGRAM_NATIVE_PARAMETERS_ARB: GLenum = 0x88AB;
pub static PROGRAM_ATTRIBS_ARB: GLenum = 0x88AC;
pub static MAX_PROGRAM_ATTRIBS_ARB: GLenum = 0x88AD;
pub static PROGRAM_NATIVE_ATTRIBS_ARB: GLenum = 0x88AE;
pub static MAX_PROGRAM_NATIVE_ATTRIBS_ARB: GLenum = 0x88AF;
pub static PROGRAM_ADDRESS_REGISTERS_ARB: GLenum = 0x88B0;
pub static MAX_PROGRAM_ADDRESS_REGISTERS_ARB: GLenum = 0x88B1;
pub static PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: GLenum = 0x88B2;
pub static MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB: GLenum = 0x88B3;
pub static MAX_PROGRAM_LOCAL_PARAMETERS_ARB: GLenum = 0x88B4;
pub static MAX_PROGRAM_ENV_PARAMETERS_ARB: GLenum = 0x88B5;
pub static PROGRAM_UNDER_NATIVE_LIMITS_ARB: GLenum = 0x88B6;
pub static TRANSPOSE_CURRENT_MATRIX_ARB: GLenum = 0x88B7;
pub static READ_ONLY: GLenum = 0x88B8;
pub static READ_ONLY_ARB: GLenum = 0x88B8;
pub static WRITE_ONLY: GLenum = 0x88B9;
pub static WRITE_ONLY_ARB: GLenum = 0x88B9;
pub static WRITE_ONLY_OES: GLenum = 0x88B9;
pub static READ_WRITE: GLenum = 0x88BA;
pub static READ_WRITE_ARB: GLenum = 0x88BA;
pub static BUFFER_ACCESS: GLenum = 0x88BB;
pub static BUFFER_ACCESS_ARB: GLenum = 0x88BB;
pub static BUFFER_ACCESS_OES: GLenum = 0x88BB;
pub static BUFFER_MAPPED: GLenum = 0x88BC;
pub static BUFFER_MAPPED_ARB: GLenum = 0x88BC;
pub static BUFFER_MAPPED_OES: GLenum = 0x88BC;
pub static BUFFER_MAP_POINTER: GLenum = 0x88BD;
pub static BUFFER_MAP_POINTER_ARB: GLenum = 0x88BD;
pub static BUFFER_MAP_POINTER_OES: GLenum = 0x88BD;
pub static WRITE_DISCARD_NV: GLenum = 0x88BE;
pub static TIME_ELAPSED: GLenum = 0x88BF;
pub static TIME_ELAPSED_EXT: GLenum = 0x88BF;
pub static MATRIX0_ARB: GLenum = 0x88C0;
pub static MATRIX1_ARB: GLenum = 0x88C1;
pub static MATRIX2_ARB: GLenum = 0x88C2;
pub static MATRIX3_ARB: GLenum = 0x88C3;
pub static MATRIX4_ARB: GLenum = 0x88C4;
pub static MATRIX5_ARB: GLenum = 0x88C5;
pub static MATRIX6_ARB: GLenum = 0x88C6;
pub static MATRIX7_ARB: GLenum = 0x88C7;
pub static MATRIX8_ARB: GLenum = 0x88C8;
pub static MATRIX9_ARB: GLenum = 0x88C9;
pub static MATRIX10_ARB: GLenum = 0x88CA;
pub static MATRIX11_ARB: GLenum = 0x88CB;
pub static MATRIX12_ARB: GLenum = 0x88CC;
pub static MATRIX13_ARB: GLenum = 0x88CD;
pub static MATRIX14_ARB: GLenum = 0x88CE;
pub static MATRIX15_ARB: GLenum = 0x88CF;
pub static MATRIX16_ARB: GLenum = 0x88D0;
pub static MATRIX17_ARB: GLenum = 0x88D1;
pub static MATRIX18_ARB: GLenum = 0x88D2;
pub static MATRIX19_ARB: GLenum = 0x88D3;
pub static MATRIX20_ARB: GLenum = 0x88D4;
pub static MATRIX21_ARB: GLenum = 0x88D5;
pub static MATRIX22_ARB: GLenum = 0x88D6;
pub static MATRIX23_ARB: GLenum = 0x88D7;
pub static MATRIX24_ARB: GLenum = 0x88D8;
pub static MATRIX25_ARB: GLenum = 0x88D9;
pub static MATRIX26_ARB: GLenum = 0x88DA;
pub static MATRIX27_ARB: GLenum = 0x88DB;
pub static MATRIX28_ARB: GLenum = 0x88DC;
pub static MATRIX29_ARB: GLenum = 0x88DD;
pub static MATRIX30_ARB: GLenum = 0x88DE;
pub static MATRIX31_ARB: GLenum = 0x88DF;
pub static STREAM_DRAW: GLenum = 0x88E0;
pub static STREAM_DRAW_ARB: GLenum = 0x88E0;
pub static STREAM_READ: GLenum = 0x88E1;
pub static STREAM_READ_ARB: GLenum = 0x88E1;
pub static STREAM_COPY: GLenum = 0x88E2;
pub static STREAM_COPY_ARB: GLenum = 0x88E2;
pub static STATIC_DRAW: GLenum = 0x88E4;
pub static STATIC_DRAW_ARB: GLenum = 0x88E4;
pub static STATIC_READ: GLenum = 0x88E5;
pub static STATIC_READ_ARB: GLenum = 0x88E5;
pub static STATIC_COPY: GLenum = 0x88E6;
pub static STATIC_COPY_ARB: GLenum = 0x88E6;
pub static DYNAMIC_DRAW: GLenum = 0x88E8;
pub static DYNAMIC_DRAW_ARB: GLenum = 0x88E8;
pub static DYNAMIC_READ: GLenum = 0x88E9;
pub static DYNAMIC_READ_ARB: GLenum = 0x88E9;
pub static DYNAMIC_COPY: GLenum = 0x88EA;
pub static DYNAMIC_COPY_ARB: GLenum = 0x88EA;
pub static PIXEL_PACK_BUFFER: GLenum = 0x88EB;
pub static PIXEL_PACK_BUFFER_ARB: GLenum = 0x88EB;
pub static PIXEL_PACK_BUFFER_EXT: GLenum = 0x88EB;
pub static PIXEL_UNPACK_BUFFER: GLenum = 0x88EC;
pub static PIXEL_UNPACK_BUFFER_ARB: GLenum = 0x88EC;
pub static PIXEL_UNPACK_BUFFER_EXT: GLenum = 0x88EC;
pub static PIXEL_PACK_BUFFER_BINDING: GLenum = 0x88ED;
pub static PIXEL_PACK_BUFFER_BINDING_ARB: GLenum = 0x88ED;
pub static PIXEL_PACK_BUFFER_BINDING_EXT: GLenum = 0x88ED;
pub static ETC1_SRGB8_NV: GLenum = 0x88EE;
pub static PIXEL_UNPACK_BUFFER_BINDING: GLenum = 0x88EF;
pub static PIXEL_UNPACK_BUFFER_BINDING_ARB: GLenum = 0x88EF;
pub static PIXEL_UNPACK_BUFFER_BINDING_EXT: GLenum = 0x88EF;
pub static DEPTH24_STENCIL8: GLenum = 0x88F0;
pub static DEPTH24_STENCIL8_EXT: GLenum = 0x88F0;
pub static DEPTH24_STENCIL8_OES: GLenum = 0x88F0;
pub static TEXTURE_STENCIL_SIZE: GLenum = 0x88F1;
pub static TEXTURE_STENCIL_SIZE_EXT: GLenum = 0x88F1;
pub static STENCIL_TAG_BITS_EXT: GLenum = 0x88F2;
pub static STENCIL_CLEAR_TAG_VALUE_EXT: GLenum = 0x88F3;
pub static MAX_PROGRAM_EXEC_INSTRUCTIONS_NV: GLenum = 0x88F4;
pub static MAX_PROGRAM_CALL_DEPTH_NV: GLenum = 0x88F5;
pub static MAX_PROGRAM_IF_DEPTH_NV: GLenum = 0x88F6;
pub static MAX_PROGRAM_LOOP_DEPTH_NV: GLenum = 0x88F7;
pub static MAX_PROGRAM_LOOP_COUNT_NV: GLenum = 0x88F8;
pub static SRC1_COLOR: GLenum = 0x88F9;
pub static ONE_MINUS_SRC1_COLOR: GLenum = 0x88FA;
pub static ONE_MINUS_SRC1_ALPHA: GLenum = 0x88FB;
pub static MAX_DUAL_SOURCE_DRAW_BUFFERS: GLenum = 0x88FC;
pub static VERTEX_ATTRIB_ARRAY_INTEGER: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_INTEGER_EXT: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_INTEGER_NV: GLenum = 0x88FD;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_ARB: GLenum = 0x88FE;
pub static VERTEX_ATTRIB_ARRAY_DIVISOR_NV: GLenum = 0x88FE;
pub static MAX_ARRAY_TEXTURE_LAYERS: GLenum = 0x88FF;
pub static MAX_ARRAY_TEXTURE_LAYERS_EXT: GLenum = 0x88FF;
pub static MIN_PROGRAM_TEXEL_OFFSET: GLenum = 0x8904;
pub static MIN_PROGRAM_TEXEL_OFFSET_EXT: GLenum = 0x8904;
pub static MIN_PROGRAM_TEXEL_OFFSET_NV: GLenum = 0x8904;
pub static MAX_PROGRAM_TEXEL_OFFSET: GLenum = 0x8905;
pub static MAX_PROGRAM_TEXEL_OFFSET_EXT: GLenum = 0x8905;
pub static MAX_PROGRAM_TEXEL_OFFSET_NV: GLenum = 0x8905;
pub static PROGRAM_ATTRIB_COMPONENTS_NV: GLenum = 0x8906;
pub static PROGRAM_RESULT_COMPONENTS_NV: GLenum = 0x8907;
pub static MAX_PROGRAM_ATTRIB_COMPONENTS_NV: GLenum = 0x8908;
pub static MAX_PROGRAM_RESULT_COMPONENTS_NV: GLenum = 0x8909;
pub static STENCIL_TEST_TWO_SIDE_EXT: GLenum = 0x8910;
pub static ACTIVE_STENCIL_FACE_EXT: GLenum = 0x8911;
pub static MIRROR_CLAMP_TO_BORDER_EXT: GLenum = 0x8912;
pub static SAMPLES_PASSED: GLenum = 0x8914;
pub static SAMPLES_PASSED_ARB: GLenum = 0x8914;
pub static GEOMETRY_VERTICES_OUT: GLenum = 0x8916;
pub static GEOMETRY_INPUT_TYPE: GLenum = 0x8917;
pub static GEOMETRY_OUTPUT_TYPE: GLenum = 0x8918;
pub static SAMPLER_BINDING: GLenum = 0x8919;
pub static CLAMP_VERTEX_COLOR: GLenum = 0x891A;
pub static CLAMP_VERTEX_COLOR_ARB: GLenum = 0x891A;
pub static CLAMP_FRAGMENT_COLOR: GLenum = 0x891B;
pub static CLAMP_FRAGMENT_COLOR_ARB: GLenum = 0x891B;
pub static CLAMP_READ_COLOR: GLenum = 0x891C;
pub static CLAMP_READ_COLOR_ARB: GLenum = 0x891C;
pub static FIXED_ONLY: GLenum = 0x891D;
pub static FIXED_ONLY_ARB: GLenum = 0x891D;
pub static TESS_CONTROL_PROGRAM_NV: GLenum = 0x891E;
pub static TESS_EVALUATION_PROGRAM_NV: GLenum = 0x891F;
pub static FRAGMENT_SHADER_ATI: GLenum = 0x8920;
pub static REG_0_ATI: GLenum = 0x8921;
pub static REG_1_ATI: GLenum = 0x8922;
pub static REG_2_ATI: GLenum = 0x8923;
pub static REG_3_ATI: GLenum = 0x8924;
pub static REG_4_ATI: GLenum = 0x8925;
pub static REG_5_ATI: GLenum = 0x8926;
pub static REG_6_ATI: GLenum = 0x8927;
pub static REG_7_ATI: GLenum = 0x8928;
pub static REG_8_ATI: GLenum = 0x8929;
pub static REG_9_ATI: GLenum = 0x892A;
pub static REG_10_ATI: GLenum = 0x892B;
pub static REG_11_ATI: GLenum = 0x892C;
pub static REG_12_ATI: GLenum = 0x892D;
pub static REG_13_ATI: GLenum = 0x892E;
pub static REG_14_ATI: GLenum = 0x892F;
pub static REG_15_ATI: GLenum = 0x8930;
pub static REG_16_ATI: GLenum = 0x8931;
pub static REG_17_ATI: GLenum = 0x8932;
pub static REG_18_ATI: GLenum = 0x8933;
pub static REG_19_ATI: GLenum = 0x8934;
pub static REG_20_ATI: GLenum = 0x8935;
pub static REG_21_ATI: GLenum = 0x8936;
pub static REG_22_ATI: GLenum = 0x8937;
pub static REG_23_ATI: GLenum = 0x8938;
pub static REG_24_ATI: GLenum = 0x8939;
pub static REG_25_ATI: GLenum = 0x893A;
pub static REG_26_ATI: GLenum = 0x893B;
pub static REG_27_ATI: GLenum = 0x893C;
pub static REG_28_ATI: GLenum = 0x893D;
pub static REG_29_ATI: GLenum = 0x893E;
pub static REG_30_ATI: GLenum = 0x893F;
pub static REG_31_ATI: GLenum = 0x8940;
pub static CON_0_ATI: GLenum = 0x8941;
pub static CON_1_ATI: GLenum = 0x8942;
pub static CON_2_ATI: GLenum = 0x8943;
pub static CON_3_ATI: GLenum = 0x8944;
pub static CON_4_ATI: GLenum = 0x8945;
pub static CON_5_ATI: GLenum = 0x8946;
pub static CON_6_ATI: GLenum = 0x8947;
pub static CON_7_ATI: GLenum = 0x8948;
pub static CON_8_ATI: GLenum = 0x8949;
pub static CON_9_ATI: GLenum = 0x894A;
pub static CON_10_ATI: GLenum = 0x894B;
pub static CON_11_ATI: GLenum = 0x894C;
pub static CON_12_ATI: GLenum = 0x894D;
pub static CON_13_ATI: GLenum = 0x894E;
pub static CON_14_ATI: GLenum = 0x894F;
pub static CON_15_ATI: GLenum = 0x8950;
pub static CON_16_ATI: GLenum = 0x8951;
pub static CON_17_ATI: GLenum = 0x8952;
pub static CON_18_ATI: GLenum = 0x8953;
pub static CON_19_ATI: GLenum = 0x8954;
pub static CON_20_ATI: GLenum = 0x8955;
pub static CON_21_ATI: GLenum = 0x8956;
pub static CON_22_ATI: GLenum = 0x8957;
pub static CON_23_ATI: GLenum = 0x8958;
pub static CON_24_ATI: GLenum = 0x8959;
pub static CON_25_ATI: GLenum = 0x895A;
pub static CON_26_ATI: GLenum = 0x895B;
pub static CON_27_ATI: GLenum = 0x895C;
pub static CON_28_ATI: GLenum = 0x895D;
pub static CON_29_ATI: GLenum = 0x895E;
pub static CON_30_ATI: GLenum = 0x895F;
pub static CON_31_ATI: GLenum = 0x8960;
pub static MOV_ATI: GLenum = 0x8961;
pub static ADD_ATI: GLenum = 0x8963;
pub static MUL_ATI: GLenum = 0x8964;
pub static SUB_ATI: GLenum = 0x8965;
pub static DOT3_ATI: GLenum = 0x8966;
pub static DOT4_ATI: GLenum = 0x8967;
pub static MAD_ATI: GLenum = 0x8968;
pub static LERP_ATI: GLenum = 0x8969;
pub static CND_ATI: GLenum = 0x896A;
pub static CND0_ATI: GLenum = 0x896B;
pub static DOT2_ADD_ATI: GLenum = 0x896C;
pub static SECONDARY_INTERPOLATOR_ATI: GLenum = 0x896D;
pub static NUM_FRAGMENT_REGISTERS_ATI: GLenum = 0x896E;
pub static NUM_FRAGMENT_CONSTANTS_ATI: GLenum = 0x896F;
pub static NUM_PASSES_ATI: GLenum = 0x8970;
pub static NUM_INSTRUCTIONS_PER_PASS_ATI: GLenum = 0x8971;
pub static NUM_INSTRUCTIONS_TOTAL_ATI: GLenum = 0x8972;
pub static NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI: GLenum = 0x8973;
pub static NUM_LOOPBACK_COMPONENTS_ATI: GLenum = 0x8974;
pub static COLOR_ALPHA_PAIRING_ATI: GLenum = 0x8975;
pub static SWIZZLE_STR_ATI: GLenum = 0x8976;
pub static SWIZZLE_STQ_ATI: GLenum = 0x8977;
pub static SWIZZLE_STR_DR_ATI: GLenum = 0x8978;
pub static SWIZZLE_STQ_DQ_ATI: GLenum = 0x8979;
pub static SWIZZLE_STRQ_ATI: GLenum = 0x897A;
pub static SWIZZLE_STRQ_DQ_ATI: GLenum = 0x897B;
pub static INTERLACE_OML: GLenum = 0x8980;
pub static INTERLACE_READ_OML: GLenum = 0x8981;
pub static FORMAT_SUBSAMPLE_24_24_OML: GLenum = 0x8982;
pub static FORMAT_SUBSAMPLE_244_244_OML: GLenum = 0x8983;
pub static PACK_RESAMPLE_OML: GLenum = 0x8984;
pub static UNPACK_RESAMPLE_OML: GLenum = 0x8985;
pub static RESAMPLE_REPLICATE_OML: GLenum = 0x8986;
pub static RESAMPLE_ZERO_FILL_OML: GLenum = 0x8987;
pub static RESAMPLE_AVERAGE_OML: GLenum = 0x8988;
pub static RESAMPLE_DECIMATE_OML: GLenum = 0x8989;
pub static POINT_SIZE_ARRAY_TYPE_OES: GLenum = 0x898A;
pub static POINT_SIZE_ARRAY_STRIDE_OES: GLenum = 0x898B;
pub static POINT_SIZE_ARRAY_POINTER_OES: GLenum = 0x898C;
pub static MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898D;
pub static PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898E;
pub static TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES: GLenum = 0x898F;
pub static VERTEX_ATTRIB_MAP1_APPLE: GLenum = 0x8A00;
pub static VERTEX_ATTRIB_MAP2_APPLE: GLenum = 0x8A01;
pub static VERTEX_ATTRIB_MAP1_SIZE_APPLE: GLenum = 0x8A02;
pub static VERTEX_ATTRIB_MAP1_COEFF_APPLE: GLenum = 0x8A03;
pub static VERTEX_ATTRIB_MAP1_ORDER_APPLE: GLenum = 0x8A04;
pub static VERTEX_ATTRIB_MAP1_DOMAIN_APPLE: GLenum = 0x8A05;
pub static VERTEX_ATTRIB_MAP2_SIZE_APPLE: GLenum = 0x8A06;
pub static VERTEX_ATTRIB_MAP2_COEFF_APPLE: GLenum = 0x8A07;
pub static VERTEX_ATTRIB_MAP2_ORDER_APPLE: GLenum = 0x8A08;
pub static VERTEX_ATTRIB_MAP2_DOMAIN_APPLE: GLenum = 0x8A09;
pub static DRAW_PIXELS_APPLE: GLenum = 0x8A0A;
pub static FENCE_APPLE: GLenum = 0x8A0B;
pub static ELEMENT_ARRAY_APPLE: GLenum = 0x8A0C;
pub static ELEMENT_ARRAY_TYPE_APPLE: GLenum = 0x8A0D;
pub static ELEMENT_ARRAY_POINTER_APPLE: GLenum = 0x8A0E;
pub static COLOR_FLOAT_APPLE: GLenum = 0x8A0F;
pub static UNIFORM_BUFFER: GLenum = 0x8A11;
pub static BUFFER_SERIALIZED_MODIFY_APPLE: GLenum = 0x8A12;
pub static BUFFER_FLUSHING_UNMAP_APPLE: GLenum = 0x8A13;
pub static AUX_DEPTH_STENCIL_APPLE: GLenum = 0x8A14;
pub static PACK_ROW_BYTES_APPLE: GLenum = 0x8A15;
pub static UNPACK_ROW_BYTES_APPLE: GLenum = 0x8A16;
pub static RELEASED_APPLE: GLenum = 0x8A19;
pub static VOLATILE_APPLE: GLenum = 0x8A1A;
pub static RETAINED_APPLE: GLenum = 0x8A1B;
pub static UNDEFINED_APPLE: GLenum = 0x8A1C;
pub static PURGEABLE_APPLE: GLenum = 0x8A1D;
pub static RGB_422_APPLE: GLenum = 0x8A1F;
pub static UNIFORM_BUFFER_BINDING: GLenum = 0x8A28;
pub static UNIFORM_BUFFER_START: GLenum = 0x8A29;
pub static UNIFORM_BUFFER_SIZE: GLenum = 0x8A2A;
pub static MAX_VERTEX_UNIFORM_BLOCKS: GLenum = 0x8A2B;
pub static MAX_GEOMETRY_UNIFORM_BLOCKS: GLenum = 0x8A2C;
pub static MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum = 0x8A2D;
pub static MAX_COMBINED_UNIFORM_BLOCKS: GLenum = 0x8A2E;
pub static MAX_UNIFORM_BUFFER_BINDINGS: GLenum = 0x8A2F;
pub static MAX_UNIFORM_BLOCK_SIZE: GLenum = 0x8A30;
pub static MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8A31;
pub static MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS: GLenum = 0x8A32;
pub static MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8A33;
pub static UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x8A34;
pub static ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH: GLenum = 0x8A35;
pub static ACTIVE_UNIFORM_BLOCKS: GLenum = 0x8A36;
pub static UNIFORM_TYPE: GLenum = 0x8A37;
pub static UNIFORM_SIZE: GLenum = 0x8A38;
pub static UNIFORM_NAME_LENGTH: GLenum = 0x8A39;
pub static UNIFORM_BLOCK_INDEX: GLenum = 0x8A3A;
pub static UNIFORM_OFFSET: GLenum = 0x8A3B;
pub static UNIFORM_ARRAY_STRIDE: GLenum = 0x8A3C;
pub static UNIFORM_MATRIX_STRIDE: GLenum = 0x8A3D;
pub static UNIFORM_IS_ROW_MAJOR: GLenum = 0x8A3E;
pub static UNIFORM_BLOCK_BINDING: GLenum = 0x8A3F;
pub static UNIFORM_BLOCK_DATA_SIZE: GLenum = 0x8A40;
pub static UNIFORM_BLOCK_NAME_LENGTH: GLenum = 0x8A41;
pub static UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum = 0x8A42;
pub static UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum = 0x8A43;
pub static UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x8A44;
pub static UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x8A45;
pub static UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x8A46;
pub static TEXTURE_SRGB_DECODE_EXT: GLenum = 0x8A48;
pub static DECODE_EXT: GLenum = 0x8A49;
pub static SKIP_DECODE_EXT: GLenum = 0x8A4A;
pub static PROGRAM_PIPELINE_OBJECT_EXT: GLenum = 0x8A4F;
pub static FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT: GLenum = 0x8A52;
pub static SYNC_OBJECT_APPLE: GLenum = 0x8A53;
pub static FRAGMENT_SHADER: GLenum = 0x8B30;
pub static FRAGMENT_SHADER_ARB: GLenum = 0x8B30;
pub static VERTEX_SHADER: GLenum = 0x8B31;
pub static VERTEX_SHADER_ARB: GLenum = 0x8B31;
pub static PROGRAM_OBJECT_ARB: GLenum = 0x8B40;
pub static PROGRAM_OBJECT_EXT: GLenum = 0x8B40;
pub static SHADER_OBJECT_ARB: GLenum = 0x8B48;
pub static SHADER_OBJECT_EXT: GLenum = 0x8B48;
pub static MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum = 0x8B49;
pub static MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB: GLenum = 0x8B49;
pub static MAX_VERTEX_UNIFORM_COMPONENTS: GLenum = 0x8B4A;
pub static MAX_VERTEX_UNIFORM_COMPONENTS_ARB: GLenum = 0x8B4A;
pub static MAX_VARYING_FLOATS: GLenum = 0x8B4B;
pub static MAX_VARYING_COMPONENTS: GLenum = 0x8B4B;
pub static MAX_VARYING_COMPONENTS_EXT: GLenum = 0x8B4B;
pub static MAX_VARYING_FLOATS_ARB: GLenum = 0x8B4B;
pub static MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4C;
pub static MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8B4C;
pub static MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum = 0x8B4D;
pub static MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8B4D;
pub static OBJECT_TYPE_ARB: GLenum = 0x8B4E;
pub static SHADER_TYPE: GLenum = 0x8B4F;
pub static OBJECT_SUBTYPE_ARB: GLenum = 0x8B4F;
pub static FLOAT_VEC2: GLenum = 0x8B50;
pub static FLOAT_VEC2_ARB: GLenum = 0x8B50;
pub static FLOAT_VEC3: GLenum = 0x8B51;
pub static FLOAT_VEC3_ARB: GLenum = 0x8B51;
pub static FLOAT_VEC4: GLenum = 0x8B52;
pub static FLOAT_VEC4_ARB: GLenum = 0x8B52;
pub static INT_VEC2: GLenum = 0x8B53;
pub static INT_VEC2_ARB: GLenum = 0x8B53;
pub static INT_VEC3: GLenum = 0x8B54;
pub static INT_VEC3_ARB: GLenum = 0x8B54;
pub static INT_VEC4: GLenum = 0x8B55;
pub static INT_VEC4_ARB: GLenum = 0x8B55;
pub static BOOL: GLenum = 0x8B56;
pub static BOOL_ARB: GLenum = 0x8B56;
pub static BOOL_VEC2: GLenum = 0x8B57;
pub static BOOL_VEC2_ARB: GLenum = 0x8B57;
pub static BOOL_VEC3: GLenum = 0x8B58;
pub static BOOL_VEC3_ARB: GLenum = 0x8B58;
pub static BOOL_VEC4: GLenum = 0x8B59;
pub static BOOL_VEC4_ARB: GLenum = 0x8B59;
pub static FLOAT_MAT2: GLenum = 0x8B5A;
pub static FLOAT_MAT2_ARB: GLenum = 0x8B5A;
pub static FLOAT_MAT3: GLenum = 0x8B5B;
pub static FLOAT_MAT3_ARB: GLenum = 0x8B5B;
pub static FLOAT_MAT4: GLenum = 0x8B5C;
pub static FLOAT_MAT4_ARB: GLenum = 0x8B5C;
pub static SAMPLER_1D: GLenum = 0x8B5D;
pub static SAMPLER_1D_ARB: GLenum = 0x8B5D;
pub static SAMPLER_2D: GLenum = 0x8B5E;
pub static SAMPLER_2D_ARB: GLenum = 0x8B5E;
pub static SAMPLER_3D: GLenum = 0x8B5F;
pub static SAMPLER_3D_ARB: GLenum = 0x8B5F;
pub static SAMPLER_3D_OES: GLenum = 0x8B5F;
pub static SAMPLER_CUBE: GLenum = 0x8B60;
pub static SAMPLER_CUBE_ARB: GLenum = 0x8B60;
pub static SAMPLER_1D_SHADOW: GLenum = 0x8B61;
pub static SAMPLER_1D_SHADOW_ARB: GLenum = 0x8B61;
pub static SAMPLER_2D_SHADOW: GLenum = 0x8B62;
pub static SAMPLER_2D_SHADOW_ARB: GLenum = 0x8B62;
pub static SAMPLER_2D_SHADOW_EXT: GLenum = 0x8B62;
pub static SAMPLER_2D_RECT: GLenum = 0x8B63;
pub static SAMPLER_2D_RECT_ARB: GLenum = 0x8B63;
pub static SAMPLER_2D_RECT_SHADOW: GLenum = 0x8B64;
pub static SAMPLER_2D_RECT_SHADOW_ARB: GLenum = 0x8B64;
pub static FLOAT_MAT2x3: GLenum = 0x8B65;
pub static FLOAT_MAT2x4: GLenum = 0x8B66;
pub static FLOAT_MAT3x2: GLenum = 0x8B67;
pub static FLOAT_MAT3x4: GLenum = 0x8B68;
pub static FLOAT_MAT4x2: GLenum = 0x8B69;
pub static FLOAT_MAT4x3: GLenum = 0x8B6A;
pub static DELETE_STATUS: GLenum = 0x8B80;
pub static OBJECT_DELETE_STATUS_ARB: GLenum = 0x8B80;
pub static COMPILE_STATUS: GLenum = 0x8B81;
pub static OBJECT_COMPILE_STATUS_ARB: GLenum = 0x8B81;
pub static LINK_STATUS: GLenum = 0x8B82;
pub static OBJECT_LINK_STATUS_ARB: GLenum = 0x8B82;
pub static VALIDATE_STATUS: GLenum = 0x8B83;
pub static OBJECT_VALIDATE_STATUS_ARB: GLenum = 0x8B83;
pub static INFO_LOG_LENGTH: GLenum = 0x8B84;
pub static OBJECT_INFO_LOG_LENGTH_ARB: GLenum = 0x8B84;
pub static ATTACHED_SHADERS: GLenum = 0x8B85;
pub static OBJECT_ATTACHED_OBJECTS_ARB: GLenum = 0x8B85;
pub static ACTIVE_UNIFORMS: GLenum = 0x8B86;
pub static OBJECT_ACTIVE_UNIFORMS_ARB: GLenum = 0x8B86;
pub static ACTIVE_UNIFORM_MAX_LENGTH: GLenum = 0x8B87;
pub static OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB: GLenum = 0x8B87;
pub static SHADER_SOURCE_LENGTH: GLenum = 0x8B88;
pub static OBJECT_SHADER_SOURCE_LENGTH_ARB: GLenum = 0x8B88;
pub static ACTIVE_ATTRIBUTES: GLenum = 0x8B89;
pub static OBJECT_ACTIVE_ATTRIBUTES_ARB: GLenum = 0x8B89;
pub static ACTIVE_ATTRIBUTE_MAX_LENGTH: GLenum = 0x8B8A;
pub static OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB: GLenum = 0x8B8A;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum = 0x8B8B;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT_ARB: GLenum = 0x8B8B;
pub static FRAGMENT_SHADER_DERIVATIVE_HINT_OES: GLenum = 0x8B8B;
pub static SHADING_LANGUAGE_VERSION: GLenum = 0x8B8C;
pub static SHADING_LANGUAGE_VERSION_ARB: GLenum = 0x8B8C;
pub static CURRENT_PROGRAM: GLenum = 0x8B8D;
pub static PALETTE4_RGB8_OES: GLenum = 0x8B90;
pub static PALETTE4_RGBA8_OES: GLenum = 0x8B91;
pub static PALETTE4_R5_G6_B5_OES: GLenum = 0x8B92;
pub static PALETTE4_RGBA4_OES: GLenum = 0x8B93;
pub static PALETTE4_RGB5_A1_OES: GLenum = 0x8B94;
pub static PALETTE8_RGB8_OES: GLenum = 0x8B95;
pub static PALETTE8_RGBA8_OES: GLenum = 0x8B96;
pub static PALETTE8_R5_G6_B5_OES: GLenum = 0x8B97;
pub static PALETTE8_RGBA4_OES: GLenum = 0x8B98;
pub static PALETTE8_RGB5_A1_OES: GLenum = 0x8B99;
pub static IMPLEMENTATION_COLOR_READ_TYPE: GLenum = 0x8B9A;
pub static IMPLEMENTATION_COLOR_READ_TYPE_OES: GLenum = 0x8B9A;
pub static IMPLEMENTATION_COLOR_READ_FORMAT: GLenum = 0x8B9B;
pub static IMPLEMENTATION_COLOR_READ_FORMAT_OES: GLenum = 0x8B9B;
pub static POINT_SIZE_ARRAY_OES: GLenum = 0x8B9C;
pub static TEXTURE_CROP_RECT_OES: GLenum = 0x8B9D;
pub static MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES: GLenum = 0x8B9E;
pub static POINT_SIZE_ARRAY_BUFFER_BINDING_OES: GLenum = 0x8B9F;
pub static FRAGMENT_PROGRAM_POSITION_MESA: GLenum = 0x8BB0;
pub static FRAGMENT_PROGRAM_CALLBACK_MESA: GLenum = 0x8BB1;
pub static FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA: GLenum = 0x8BB2;
pub static FRAGMENT_PROGRAM_CALLBACK_DATA_MESA: GLenum = 0x8BB3;
pub static VERTEX_PROGRAM_CALLBACK_MESA: GLenum = 0x8BB4;
pub static VERTEX_PROGRAM_POSITION_MESA: GLenum = 0x8BB4;
pub static VERTEX_PROGRAM_CALLBACK_FUNC_MESA: GLenum = 0x8BB6;
pub static VERTEX_PROGRAM_CALLBACK_DATA_MESA: GLenum = 0x8BB7;
pub static COUNTER_TYPE_AMD: GLenum = 0x8BC0;
pub static COUNTER_RANGE_AMD: GLenum = 0x8BC1;
pub static UNSIGNED_INT64_AMD: GLenum = 0x8BC2;
pub static PERCENTAGE_AMD: GLenum = 0x8BC3;
pub static PERFMON_RESULT_AVAILABLE_AMD: GLenum = 0x8BC4;
pub static PERFMON_RESULT_SIZE_AMD: GLenum = 0x8BC5;
pub static PERFMON_RESULT_AMD: GLenum = 0x8BC6;
pub static TEXTURE_WIDTH_QCOM: GLenum = 0x8BD2;
pub static TEXTURE_HEIGHT_QCOM: GLenum = 0x8BD3;
pub static TEXTURE_DEPTH_QCOM: GLenum = 0x8BD4;
pub static TEXTURE_INTERNAL_FORMAT_QCOM: GLenum = 0x8BD5;
pub static TEXTURE_FORMAT_QCOM: GLenum = 0x8BD6;
pub static TEXTURE_TYPE_QCOM: GLenum = 0x8BD7;
pub static TEXTURE_IMAGE_VALID_QCOM: GLenum = 0x8BD8;
pub static TEXTURE_NUM_LEVELS_QCOM: GLenum = 0x8BD9;
pub static TEXTURE_TARGET_QCOM: GLenum = 0x8BDA;
pub static TEXTURE_OBJECT_VALID_QCOM: GLenum = 0x8BDB;
pub static STATE_RESTORE: GLenum = 0x8BDC;
pub static COMPRESSED_RGB_PVRTC_4BPPV1_IMG: GLenum = 0x8C00;
pub static COMPRESSED_RGB_PVRTC_2BPPV1_IMG: GLenum = 0x8C01;
pub static COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: GLenum = 0x8C02;
pub static COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: GLenum = 0x8C03;
pub static MODULATE_COLOR_IMG: GLenum = 0x8C04;
pub static RECIP_ADD_SIGNED_ALPHA_IMG: GLenum = 0x8C05;
pub static TEXTURE_ALPHA_MODULATE_IMG: GLenum = 0x8C06;
pub static FACTOR_ALPHA_MODULATE_IMG: GLenum = 0x8C07;
pub static FRAGMENT_ALPHA_MODULATE_IMG: GLenum = 0x8C08;
pub static ADD_BLEND_IMG: GLenum = 0x8C09;
pub static SGX_BINARY_IMG: GLenum = 0x8C0A;
pub static TEXTURE_RED_TYPE: GLenum = 0x8C10;
pub static TEXTURE_RED_TYPE_ARB: GLenum = 0x8C10;
pub static TEXTURE_GREEN_TYPE: GLenum = 0x8C11;
pub static TEXTURE_GREEN_TYPE_ARB: GLenum = 0x8C11;
pub static TEXTURE_BLUE_TYPE: GLenum = 0x8C12;
pub static TEXTURE_BLUE_TYPE_ARB: GLenum = 0x8C12;
pub static TEXTURE_ALPHA_TYPE: GLenum = 0x8C13;
pub static TEXTURE_ALPHA_TYPE_ARB: GLenum = 0x8C13;
pub static TEXTURE_LUMINANCE_TYPE: GLenum = 0x8C14;
pub static TEXTURE_LUMINANCE_TYPE_ARB: GLenum = 0x8C14;
pub static TEXTURE_INTENSITY_TYPE: GLenum = 0x8C15;
pub static TEXTURE_INTENSITY_TYPE_ARB: GLenum = 0x8C15;
pub static TEXTURE_DEPTH_TYPE: GLenum = 0x8C16;
pub static TEXTURE_DEPTH_TYPE_ARB: GLenum = 0x8C16;
pub static UNSIGNED_NORMALIZED: GLenum = 0x8C17;
pub static UNSIGNED_NORMALIZED_ARB: GLenum = 0x8C17;
pub static UNSIGNED_NORMALIZED_EXT: GLenum = 0x8C17;
pub static TEXTURE_1D_ARRAY: GLenum = 0x8C18;
pub static TEXTURE_1D_ARRAY_EXT: GLenum = 0x8C18;
pub static PROXY_TEXTURE_1D_ARRAY: GLenum = 0x8C19;
pub static PROXY_TEXTURE_1D_ARRAY_EXT: GLenum = 0x8C19;
pub static TEXTURE_2D_ARRAY: GLenum = 0x8C1A;
pub static TEXTURE_2D_ARRAY_EXT: GLenum = 0x8C1A;
pub static PROXY_TEXTURE_2D_ARRAY: GLenum = 0x8C1B;
pub static PROXY_TEXTURE_2D_ARRAY_EXT: GLenum = 0x8C1B;
pub static TEXTURE_BINDING_1D_ARRAY: GLenum = 0x8C1C;
pub static TEXTURE_BINDING_1D_ARRAY_EXT: GLenum = 0x8C1C;
pub static TEXTURE_BINDING_2D_ARRAY: GLenum = 0x8C1D;
pub static TEXTURE_BINDING_2D_ARRAY_EXT: GLenum = 0x8C1D;
pub static GEOMETRY_PROGRAM_NV: GLenum = 0x8C26;
pub static MAX_PROGRAM_OUTPUT_VERTICES_NV: GLenum = 0x8C27;
pub static MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV: GLenum = 0x8C28;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS: GLenum = 0x8C29;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB: GLenum = 0x8C29;
pub static MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT: GLenum = 0x8C29;
pub static TEXTURE_BUFFER: GLenum = 0x8C2A;
pub static TEXTURE_BUFFER_ARB: GLenum = 0x8C2A;
pub static TEXTURE_BUFFER_EXT: GLenum = 0x8C2A;
pub static MAX_TEXTURE_BUFFER_SIZE: GLenum = 0x8C2B;
pub static MAX_TEXTURE_BUFFER_SIZE_ARB: GLenum = 0x8C2B;
pub static MAX_TEXTURE_BUFFER_SIZE_EXT: GLenum = 0x8C2B;
pub static TEXTURE_BINDING_BUFFER: GLenum = 0x8C2C;
pub static TEXTURE_BINDING_BUFFER_ARB: GLenum = 0x8C2C;
pub static TEXTURE_BINDING_BUFFER_EXT: GLenum = 0x8C2C;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING_ARB: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_DATA_STORE_BINDING_EXT: GLenum = 0x8C2D;
pub static TEXTURE_BUFFER_FORMAT_ARB: GLenum = 0x8C2E;
pub static TEXTURE_BUFFER_FORMAT_EXT: GLenum = 0x8C2E;
pub static ANY_SAMPLES_PASSED: GLenum = 0x8C2F;
pub static ANY_SAMPLES_PASSED_EXT: GLenum = 0x8C2F;
pub static SAMPLE_SHADING: GLenum = 0x8C36;
pub static SAMPLE_SHADING_ARB: GLenum = 0x8C36;
pub static MIN_SAMPLE_SHADING_VALUE: GLenum = 0x8C37;
pub static MIN_SAMPLE_SHADING_VALUE_ARB: GLenum = 0x8C37;
pub static R11F_G11F_B10F: GLenum = 0x8C3A;
pub static R11F_G11F_B10F_EXT: GLenum = 0x8C3A;
pub static UNSIGNED_INT_10F_11F_11F_REV: GLenum = 0x8C3B;
pub static UNSIGNED_INT_10F_11F_11F_REV_EXT: GLenum = 0x8C3B;
pub static RGBA_SIGNED_COMPONENTS_EXT: GLenum = 0x8C3C;
pub static RGB9_E5: GLenum = 0x8C3D;
pub static RGB9_E5_EXT: GLenum = 0x8C3D;
pub static UNSIGNED_INT_5_9_9_9_REV: GLenum = 0x8C3E;
pub static UNSIGNED_INT_5_9_9_9_REV_EXT: GLenum = 0x8C3E;
pub static TEXTURE_SHARED_SIZE: GLenum = 0x8C3F;
pub static TEXTURE_SHARED_SIZE_EXT: GLenum = 0x8C3F;
pub static SRGB: GLenum = 0x8C40;
pub static SRGB_EXT: GLenum = 0x8C40;
pub static SRGB8: GLenum = 0x8C41;
pub static SRGB8_EXT: GLenum = 0x8C41;
pub static SRGB8_NV: GLenum = 0x8C41;
pub static SRGB_ALPHA: GLenum = 0x8C42;
pub static SRGB_ALPHA_EXT: GLenum = 0x8C42;
pub static SRGB8_ALPHA8: GLenum = 0x8C43;
pub static SRGB8_ALPHA8_EXT: GLenum = 0x8C43;
pub static SLUMINANCE_ALPHA: GLenum = 0x8C44;
pub static SLUMINANCE_ALPHA_EXT: GLenum = 0x8C44;
pub static SLUMINANCE_ALPHA_NV: GLenum = 0x8C44;
pub static SLUMINANCE8_ALPHA8: GLenum = 0x8C45;
pub static SLUMINANCE8_ALPHA8_EXT: GLenum = 0x8C45;
pub static SLUMINANCE8_ALPHA8_NV: GLenum = 0x8C45;
pub static SLUMINANCE: GLenum = 0x8C46;
pub static SLUMINANCE_EXT: GLenum = 0x8C46;
pub static SLUMINANCE_NV: GLenum = 0x8C46;
pub static SLUMINANCE8: GLenum = 0x8C47;
pub static SLUMINANCE8_EXT: GLenum = 0x8C47;
pub static SLUMINANCE8_NV: GLenum = 0x8C47;
pub static COMPRESSED_SRGB: GLenum = 0x8C48;
pub static COMPRESSED_SRGB_EXT: GLenum = 0x8C48;
pub static COMPRESSED_SRGB_ALPHA: GLenum = 0x8C49;
pub static COMPRESSED_SRGB_ALPHA_EXT: GLenum = 0x8C49;
pub static COMPRESSED_SLUMINANCE: GLenum = 0x8C4A;
pub static COMPRESSED_SLUMINANCE_EXT: GLenum = 0x8C4A;
pub static COMPRESSED_SLUMINANCE_ALPHA: GLenum = 0x8C4B;
pub static COMPRESSED_SLUMINANCE_ALPHA_EXT: GLenum = 0x8C4B;
pub static COMPRESSED_SRGB_S3TC_DXT1_EXT: GLenum = 0x8C4C;
pub static COMPRESSED_SRGB_S3TC_DXT1_NV: GLenum = 0x8C4C;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: GLenum = 0x8C4D;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV: GLenum = 0x8C4D;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: GLenum = 0x8C4E;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV: GLenum = 0x8C4E;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: GLenum = 0x8C4F;
pub static COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV: GLenum = 0x8C4F;
pub static COMPRESSED_LUMINANCE_LATC1_EXT: GLenum = 0x8C70;
pub static COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT: GLenum = 0x8C71;
pub static COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT: GLenum = 0x8C72;
pub static COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT: GLenum = 0x8C73;
pub static TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8C74;
pub static TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8C75;
pub static TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH: GLenum = 0x8C76;
pub static TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT: GLenum = 0x8C76;
pub static BACK_PRIMARY_COLOR_NV: GLenum = 0x8C77;
pub static BACK_SECONDARY_COLOR_NV: GLenum = 0x8C78;
pub static TEXTURE_COORD_NV: GLenum = 0x8C79;
pub static CLIP_DISTANCE_NV: GLenum = 0x8C7A;
pub static VERTEX_ID_NV: GLenum = 0x8C7B;
pub static PRIMITIVE_ID_NV: GLenum = 0x8C7C;
pub static GENERIC_ATTRIB_NV: GLenum = 0x8C7D;
pub static TRANSFORM_FEEDBACK_ATTRIBS_NV: GLenum = 0x8C7E;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum = 0x8C7F;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE_EXT: GLenum = 0x8C7F;
pub static TRANSFORM_FEEDBACK_BUFFER_MODE_NV: GLenum = 0x8C7F;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum = 0x8C80;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT: GLenum = 0x8C80;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV: GLenum = 0x8C80;
pub static ACTIVE_VARYINGS_NV: GLenum = 0x8C81;
pub static ACTIVE_VARYING_MAX_LENGTH_NV: GLenum = 0x8C82;
pub static TRANSFORM_FEEDBACK_VARYINGS: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_VARYINGS_EXT: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_VARYINGS_NV: GLenum = 0x8C83;
pub static TRANSFORM_FEEDBACK_BUFFER_START: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_START_EXT: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_START_NV: GLenum = 0x8C84;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_BUFFER_SIZE_NV: GLenum = 0x8C85;
pub static TRANSFORM_FEEDBACK_RECORD_NV: GLenum = 0x8C86;
pub static PRIMITIVES_GENERATED: GLenum = 0x8C87;
pub static PRIMITIVES_GENERATED_EXT: GLenum = 0x8C87;
pub static PRIMITIVES_GENERATED_NV: GLenum = 0x8C87;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum = 0x8C88;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT: GLenum = 0x8C88;
pub static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV: GLenum = 0x8C88;
pub static RASTERIZER_DISCARD: GLenum = 0x8C89;
pub static RASTERIZER_DISCARD_EXT: GLenum = 0x8C89;
pub static RASTERIZER_DISCARD_NV: GLenum = 0x8C89;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV: GLenum = 0x8C8A;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum = 0x8C8B;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT: GLenum = 0x8C8B;
pub static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV: GLenum = 0x8C8B;
pub static INTERLEAVED_ATTRIBS: GLenum = 0x8C8C;
pub static INTERLEAVED_ATTRIBS_EXT: GLenum = 0x8C8C;
pub static INTERLEAVED_ATTRIBS_NV: GLenum = 0x8C8C;
pub static SEPARATE_ATTRIBS: GLenum = 0x8C8D;
pub static SEPARATE_ATTRIBS_EXT: GLenum = 0x8C8D;
pub static SEPARATE_ATTRIBS_NV: GLenum = 0x8C8D;
pub static TRANSFORM_FEEDBACK_BUFFER: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_EXT: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_NV: GLenum = 0x8C8E;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum = 0x8C8F;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT: GLenum = 0x8C8F;
pub static TRANSFORM_FEEDBACK_BUFFER_BINDING_NV: GLenum = 0x8C8F;
pub static ATC_RGB_AMD: GLenum = 0x8C92;
pub static ATC_RGBA_EXPLICIT_ALPHA_AMD: GLenum = 0x8C93;
pub static POINT_SPRITE_COORD_ORIGIN: GLenum = 0x8CA0;
pub static LOWER_LEFT: GLenum = 0x8CA1;
pub static UPPER_LEFT: GLenum = 0x8CA2;
pub static STENCIL_BACK_REF: GLenum = 0x8CA3;
pub static STENCIL_BACK_VALUE_MASK: GLenum = 0x8CA4;
pub static STENCIL_BACK_WRITEMASK: GLenum = 0x8CA5;
pub static DRAW_FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_NV: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CA6;
pub static FRAMEBUFFER_BINDING_OES: GLenum = 0x8CA6;
pub static RENDERBUFFER_BINDING: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_ANGLE: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_EXT: GLenum = 0x8CA7;
pub static RENDERBUFFER_BINDING_OES: GLenum = 0x8CA7;
pub static READ_FRAMEBUFFER: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_ANGLE: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_EXT: GLenum = 0x8CA8;
pub static READ_FRAMEBUFFER_NV: GLenum = 0x8CA8;
pub static DRAW_FRAMEBUFFER: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_ANGLE: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_EXT: GLenum = 0x8CA9;
pub static DRAW_FRAMEBUFFER_NV: GLenum = 0x8CA9;
pub static READ_FRAMEBUFFER_BINDING: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_EXT: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_NV: GLenum = 0x8CAA;
pub static RENDERBUFFER_COVERAGE_SAMPLES_NV: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_ANGLE: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_EXT: GLenum = 0x8CAB;
pub static RENDERBUFFER_SAMPLES_NV: GLenum = 0x8CAB;
pub static DEPTH_COMPONENT32F: GLenum = 0x8CAC;
pub static DEPTH32F_STENCIL8: GLenum = 0x8CAD;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES: GLenum = 0x8CD0;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES: GLenum = 0x8CD1;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES: GLenum = 0x8CD2;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES: GLenum = 0x8CD3;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum = 0x8CD4;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT: GLenum = 0x8CD4;
pub static FRAMEBUFFER_COMPLETE: GLenum = 0x8CD5;
pub static FRAMEBUFFER_COMPLETE_EXT: GLenum = 0x8CD5;
pub static FRAMEBUFFER_COMPLETE_OES: GLenum = 0x8CD5;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES: GLenum = 0x8CD6;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES: GLenum = 0x8CD7;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES: GLenum = 0x8CD9;
pub static FRAMEBUFFER_INCOMPLETE_FORMATS_EXT: GLenum = 0x8CDA;
pub static FRAMEBUFFER_INCOMPLETE_FORMATS_OES: GLenum = 0x8CDA;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES: GLenum = 0x8CDB;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER: GLenum = 0x8CDC;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT: GLenum = 0x8CDC;
pub static FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES: GLenum = 0x8CDC;
pub static FRAMEBUFFER_UNSUPPORTED: GLenum = 0x8CDD;
pub static FRAMEBUFFER_UNSUPPORTED_EXT: GLenum = 0x8CDD;
pub static FRAMEBUFFER_UNSUPPORTED_OES: GLenum = 0x8CDD;
pub static MAX_COLOR_ATTACHMENTS: GLenum = 0x8CDF;
pub static MAX_COLOR_ATTACHMENTS_EXT: GLenum = 0x8CDF;
pub static MAX_COLOR_ATTACHMENTS_NV: GLenum = 0x8CDF;
pub static COLOR_ATTACHMENT0: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_EXT: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_NV: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT0_OES: GLenum = 0x8CE0;
pub static COLOR_ATTACHMENT1: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT1_EXT: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT1_NV: GLenum = 0x8CE1;
pub static COLOR_ATTACHMENT2: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT2_EXT: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT2_NV: GLenum = 0x8CE2;
pub static COLOR_ATTACHMENT3: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT3_EXT: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT3_NV: GLenum = 0x8CE3;
pub static COLOR_ATTACHMENT4: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT4_EXT: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT4_NV: GLenum = 0x8CE4;
pub static COLOR_ATTACHMENT5: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT5_EXT: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT5_NV: GLenum = 0x8CE5;
pub static COLOR_ATTACHMENT6: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT6_EXT: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT6_NV: GLenum = 0x8CE6;
pub static COLOR_ATTACHMENT7: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT7_EXT: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT7_NV: GLenum = 0x8CE7;
pub static COLOR_ATTACHMENT8: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT8_EXT: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT8_NV: GLenum = 0x8CE8;
pub static COLOR_ATTACHMENT9: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT9_EXT: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT9_NV: GLenum = 0x8CE9;
pub static COLOR_ATTACHMENT10: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT10_EXT: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT10_NV: GLenum = 0x8CEA;
pub static COLOR_ATTACHMENT11: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT11_EXT: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT11_NV: GLenum = 0x8CEB;
pub static COLOR_ATTACHMENT12: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT12_EXT: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT12_NV: GLenum = 0x8CEC;
pub static COLOR_ATTACHMENT13: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT13_EXT: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT13_NV: GLenum = 0x8CED;
pub static COLOR_ATTACHMENT14: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT14_EXT: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT14_NV: GLenum = 0x8CEE;
pub static COLOR_ATTACHMENT15: GLenum = 0x8CEF;
pub static COLOR_ATTACHMENT15_EXT: GLenum = 0x8CEF;
pub static COLOR_ATTACHMENT15_NV: GLenum = 0x8CEF;
pub static DEPTH_ATTACHMENT: GLenum = 0x8D00;
pub static DEPTH_ATTACHMENT_EXT: GLenum = 0x8D00;
pub static DEPTH_ATTACHMENT_OES: GLenum = 0x8D00;
pub static STENCIL_ATTACHMENT: GLenum = 0x8D20;
pub static STENCIL_ATTACHMENT_EXT: GLenum = 0x8D20;
pub static STENCIL_ATTACHMENT_OES: GLenum = 0x8D20;
pub static FRAMEBUFFER: GLenum = 0x8D40;
pub static FRAMEBUFFER_EXT: GLenum = 0x8D40;
pub static FRAMEBUFFER_OES: GLenum = 0x8D40;
pub static RENDERBUFFER: GLenum = 0x8D41;
pub static RENDERBUFFER_EXT: GLenum = 0x8D41;
pub static RENDERBUFFER_OES: GLenum = 0x8D41;
pub static RENDERBUFFER_WIDTH: GLenum = 0x8D42;
pub static RENDERBUFFER_WIDTH_EXT: GLenum = 0x8D42;
pub static RENDERBUFFER_WIDTH_OES: GLenum = 0x8D42;
pub static RENDERBUFFER_HEIGHT: GLenum = 0x8D43;
pub static RENDERBUFFER_HEIGHT_EXT: GLenum = 0x8D43;
pub static RENDERBUFFER_HEIGHT_OES: GLenum = 0x8D43;
pub static RENDERBUFFER_INTERNAL_FORMAT: GLenum = 0x8D44;
pub static RENDERBUFFER_INTERNAL_FORMAT_EXT: GLenum = 0x8D44;
pub static RENDERBUFFER_INTERNAL_FORMAT_OES: GLenum = 0x8D44;
pub static STENCIL_INDEX1: GLenum = 0x8D46;
pub static STENCIL_INDEX1_EXT: GLenum = 0x8D46;
pub static STENCIL_INDEX1_OES: GLenum = 0x8D46;
pub static STENCIL_INDEX4: GLenum = 0x8D47;
pub static STENCIL_INDEX4_EXT: GLenum = 0x8D47;
pub static STENCIL_INDEX4_OES: GLenum = 0x8D47;
pub static STENCIL_INDEX8: GLenum = 0x8D48;
pub static STENCIL_INDEX8_EXT: GLenum = 0x8D48;
pub static STENCIL_INDEX8_OES: GLenum = 0x8D48;
pub static STENCIL_INDEX16: GLenum = 0x8D49;
pub static STENCIL_INDEX16_EXT: GLenum = 0x8D49;
pub static RENDERBUFFER_RED_SIZE: GLenum = 0x8D50;
pub static RENDERBUFFER_RED_SIZE_EXT: GLenum = 0x8D50;
pub static RENDERBUFFER_RED_SIZE_OES: GLenum = 0x8D50;
pub static RENDERBUFFER_GREEN_SIZE: GLenum = 0x8D51;
pub static RENDERBUFFER_GREEN_SIZE_EXT: GLenum = 0x8D51;
pub static RENDERBUFFER_GREEN_SIZE_OES: GLenum = 0x8D51;
pub static RENDERBUFFER_BLUE_SIZE: GLenum = 0x8D52;
pub static RENDERBUFFER_BLUE_SIZE_EXT: GLenum = 0x8D52;
pub static RENDERBUFFER_BLUE_SIZE_OES: GLenum = 0x8D52;
pub static RENDERBUFFER_ALPHA_SIZE: GLenum = 0x8D53;
pub static RENDERBUFFER_ALPHA_SIZE_EXT: GLenum = 0x8D53;
pub static RENDERBUFFER_ALPHA_SIZE_OES: GLenum = 0x8D53;
pub static RENDERBUFFER_DEPTH_SIZE: GLenum = 0x8D54;
pub static RENDERBUFFER_DEPTH_SIZE_EXT: GLenum = 0x8D54;
pub static RENDERBUFFER_DEPTH_SIZE_OES: GLenum = 0x8D54;
pub static RENDERBUFFER_STENCIL_SIZE: GLenum = 0x8D55;
pub static RENDERBUFFER_STENCIL_SIZE_EXT: GLenum = 0x8D55;
pub static RENDERBUFFER_STENCIL_SIZE_OES: GLenum = 0x8D55;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT: GLenum = 0x8D56;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV: GLenum = 0x8D56;
pub static MAX_SAMPLES: GLenum = 0x8D57;
pub static MAX_SAMPLES_ANGLE: GLenum = 0x8D57;
pub static MAX_SAMPLES_EXT: GLenum = 0x8D57;
pub static MAX_SAMPLES_NV: GLenum = 0x8D57;
pub static TEXTURE_GEN_STR_OES: GLenum = 0x8D60;
pub static HALF_FLOAT_OES: GLenum = 0x8D61;
pub static RGB565_OES: GLenum = 0x8D62;
pub static RGB565: GLenum = 0x8D62;
pub static ETC1_RGB8_OES: GLenum = 0x8D64;
pub static TEXTURE_EXTERNAL_OES: GLenum = 0x8D65;
pub static SAMPLER_EXTERNAL_OES: GLenum = 0x8D66;
pub static TEXTURE_BINDING_EXTERNAL_OES: GLenum = 0x8D67;
pub static REQUIRED_TEXTURE_IMAGE_UNITS_OES: GLenum = 0x8D68;
pub static PRIMITIVE_RESTART_FIXED_INDEX: GLenum = 0x8D69;
pub static ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum = 0x8D6A;
pub static ANY_SAMPLES_PASSED_CONSERVATIVE_EXT: GLenum = 0x8D6A;
pub static MAX_ELEMENT_INDEX: GLenum = 0x8D6B;
pub static FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT: GLenum = 0x8D6C;
pub static RGBA32UI: GLenum = 0x8D70;
pub static RGBA32UI_EXT: GLenum = 0x8D70;
pub static RGB32UI: GLenum = 0x8D71;
pub static RGB32UI_EXT: GLenum = 0x8D71;
pub static ALPHA32UI_EXT: GLenum = 0x8D72;
pub static INTENSITY32UI_EXT: GLenum = 0x8D73;
pub static LUMINANCE32UI_EXT: GLenum = 0x8D74;
pub static LUMINANCE_ALPHA32UI_EXT: GLenum = 0x8D75;
pub static RGBA16UI: GLenum = 0x8D76;
pub static RGBA16UI_EXT: GLenum = 0x8D76;
pub static RGB16UI: GLenum = 0x8D77;
pub static RGB16UI_EXT: GLenum = 0x8D77;
pub static ALPHA16UI_EXT: GLenum = 0x8D78;
pub static INTENSITY16UI_EXT: GLenum = 0x8D79;
pub static LUMINANCE16UI_EXT: GLenum = 0x8D7A;
pub static LUMINANCE_ALPHA16UI_EXT: GLenum = 0x8D7B;
pub static RGBA8UI: GLenum = 0x8D7C;
pub static RGBA8UI_EXT: GLenum = 0x8D7C;
pub static RGB8UI: GLenum = 0x8D7D;
pub static RGB8UI_EXT: GLenum = 0x8D7D;
pub static ALPHA8UI_EXT: GLenum = 0x8D7E;
pub static INTENSITY8UI_EXT: GLenum = 0x8D7F;
pub static LUMINANCE8UI_EXT: GLenum = 0x8D80;
pub static LUMINANCE_ALPHA8UI_EXT: GLenum = 0x8D81;
pub static RGBA32I: GLenum = 0x8D82;
pub static RGBA32I_EXT: GLenum = 0x8D82;
pub static RGB32I: GLenum = 0x8D83;
pub static RGB32I_EXT: GLenum = 0x8D83;
pub static ALPHA32I_EXT: GLenum = 0x8D84;
pub static INTENSITY32I_EXT: GLenum = 0x8D85;
pub static LUMINANCE32I_EXT: GLenum = 0x8D86;
pub static LUMINANCE_ALPHA32I_EXT: GLenum = 0x8D87;
pub static RGBA16I: GLenum = 0x8D88;
pub static RGBA16I_EXT: GLenum = 0x8D88;
pub static RGB16I: GLenum = 0x8D89;
pub static RGB16I_EXT: GLenum = 0x8D89;
pub static ALPHA16I_EXT: GLenum = 0x8D8A;
pub static INTENSITY16I_EXT: GLenum = 0x8D8B;
pub static LUMINANCE16I_EXT: GLenum = 0x8D8C;
pub static LUMINANCE_ALPHA16I_EXT: GLenum = 0x8D8D;
pub static RGBA8I: GLenum = 0x8D8E;
pub static RGBA8I_EXT: GLenum = 0x8D8E;
pub static RGB8I: GLenum = 0x8D8F;
pub static RGB8I_EXT: GLenum = 0x8D8F;
pub static ALPHA8I_EXT: GLenum = 0x8D90;
pub static INTENSITY8I_EXT: GLenum = 0x8D91;
pub static LUMINANCE8I_EXT: GLenum = 0x8D92;
pub static LUMINANCE_ALPHA8I_EXT: GLenum = 0x8D93;
pub static RED_INTEGER: GLenum = 0x8D94;
pub static RED_INTEGER_EXT: GLenum = 0x8D94;
pub static GREEN_INTEGER: GLenum = 0x8D95;
pub static GREEN_INTEGER_EXT: GLenum = 0x8D95;
pub static BLUE_INTEGER: GLenum = 0x8D96;
pub static BLUE_INTEGER_EXT: GLenum = 0x8D96;
pub static ALPHA_INTEGER: GLenum = 0x8D97;
pub static ALPHA_INTEGER_EXT: GLenum = 0x8D97;
pub static RGB_INTEGER: GLenum = 0x8D98;
pub static RGB_INTEGER_EXT: GLenum = 0x8D98;
pub static RGBA_INTEGER: GLenum = 0x8D99;
pub static RGBA_INTEGER_EXT: GLenum = 0x8D99;
pub static BGR_INTEGER: GLenum = 0x8D9A;
pub static BGR_INTEGER_EXT: GLenum = 0x8D9A;
pub static BGRA_INTEGER: GLenum = 0x8D9B;
pub static BGRA_INTEGER_EXT: GLenum = 0x8D9B;
pub static LUMINANCE_INTEGER_EXT: GLenum = 0x8D9C;
pub static LUMINANCE_ALPHA_INTEGER_EXT: GLenum = 0x8D9D;
pub static RGBA_INTEGER_MODE_EXT: GLenum = 0x8D9E;
pub static INT_2_10_10_10_REV: GLenum = 0x8D9F;
pub static MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV: GLenum = 0x8DA0;
pub static MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV: GLenum = 0x8DA1;
pub static VERTEX_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA2;
pub static GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA3;
pub static FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x8DA4;
pub static MAX_PROGRAM_GENERIC_ATTRIBS_NV: GLenum = 0x8DA5;
pub static MAX_PROGRAM_GENERIC_RESULTS_NV: GLenum = 0x8DA6;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED: GLenum = 0x8DA7;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED_ARB: GLenum = 0x8DA7;
pub static FRAMEBUFFER_ATTACHMENT_LAYERED_EXT: GLenum = 0x8DA7;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT: GLenum = 0x8DA8;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB: GLenum = 0x8DA9;
pub static FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT: GLenum = 0x8DA9;
pub static LAYER_NV: GLenum = 0x8DAA;
pub static DEPTH_COMPONENT32F_NV: GLenum = 0x8DAB;
pub static DEPTH32F_STENCIL8_NV: GLenum = 0x8DAC;
pub static FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum = 0x8DAD;
pub static FLOAT_32_UNSIGNED_INT_24_8_REV_NV: GLenum = 0x8DAD;
pub static SHADER_INCLUDE_ARB: GLenum = 0x8DAE;
pub static DEPTH_BUFFER_FLOAT_MODE_NV: GLenum = 0x8DAF;
pub static FRAMEBUFFER_SRGB: GLenum = 0x8DB9;
pub static FRAMEBUFFER_SRGB_EXT: GLenum = 0x8DB9;
pub static FRAMEBUFFER_SRGB_CAPABLE_EXT: GLenum = 0x8DBA;
pub static COMPRESSED_RED_RGTC1: GLenum = 0x8DBB;
pub static COMPRESSED_RED_RGTC1_EXT: GLenum = 0x8DBB;
pub static COMPRESSED_SIGNED_RED_RGTC1: GLenum = 0x8DBC;
pub static COMPRESSED_SIGNED_RED_RGTC1_EXT: GLenum = 0x8DBC;
pub static COMPRESSED_RED_GREEN_RGTC2_EXT: GLenum = 0x8DBD;
pub static COMPRESSED_RG_RGTC2: GLenum = 0x8DBD;
pub static COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: GLenum = 0x8DBE;
pub static COMPRESSED_SIGNED_RG_RGTC2: GLenum = 0x8DBE;
pub static SAMPLER_1D_ARRAY: GLenum = 0x8DC0;
pub static SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DC0;
pub static SAMPLER_2D_ARRAY: GLenum = 0x8DC1;
pub static SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DC1;
pub static SAMPLER_BUFFER: GLenum = 0x8DC2;
pub static SAMPLER_BUFFER_EXT: GLenum = 0x8DC2;
pub static SAMPLER_1D_ARRAY_SHADOW: GLenum = 0x8DC3;
pub static SAMPLER_1D_ARRAY_SHADOW_EXT: GLenum = 0x8DC3;
pub static SAMPLER_2D_ARRAY_SHADOW: GLenum = 0x8DC4;
pub static SAMPLER_2D_ARRAY_SHADOW_EXT: GLenum = 0x8DC4;
pub static SAMPLER_2D_ARRAY_SHADOW_NV: GLenum = 0x8DC4;
pub static SAMPLER_CUBE_SHADOW: GLenum = 0x8DC5;
pub static SAMPLER_CUBE_SHADOW_EXT: GLenum = 0x8DC5;
pub static SAMPLER_CUBE_SHADOW_NV: GLenum = 0x8DC5;
pub static UNSIGNED_INT_VEC2: GLenum = 0x8DC6;
pub static UNSIGNED_INT_VEC2_EXT: GLenum = 0x8DC6;
pub static UNSIGNED_INT_VEC3: GLenum = 0x8DC7;
pub static UNSIGNED_INT_VEC3_EXT: GLenum = 0x8DC7;
pub static UNSIGNED_INT_VEC4: GLenum = 0x8DC8;
pub static UNSIGNED_INT_VEC4_EXT: GLenum = 0x8DC8;
pub static INT_SAMPLER_1D: GLenum = 0x8DC9;
pub static INT_SAMPLER_1D_EXT: GLenum = 0x8DC9;
pub static INT_SAMPLER_2D: GLenum = 0x8DCA;
pub static INT_SAMPLER_2D_EXT: GLenum = 0x8DCA;
pub static INT_SAMPLER_3D: GLenum = 0x8DCB;
pub static INT_SAMPLER_3D_EXT: GLenum = 0x8DCB;
pub static INT_SAMPLER_CUBE: GLenum = 0x8DCC;
pub static INT_SAMPLER_CUBE_EXT: GLenum = 0x8DCC;
pub static INT_SAMPLER_2D_RECT: GLenum = 0x8DCD;
pub static INT_SAMPLER_2D_RECT_EXT: GLenum = 0x8DCD;
pub static INT_SAMPLER_1D_ARRAY: GLenum = 0x8DCE;
pub static INT_SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DCE;
pub static INT_SAMPLER_2D_ARRAY: GLenum = 0x8DCF;
pub static INT_SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DCF;
pub static INT_SAMPLER_BUFFER: GLenum = 0x8DD0;
pub static INT_SAMPLER_BUFFER_EXT: GLenum = 0x8DD0;
pub static UNSIGNED_INT_SAMPLER_1D: GLenum = 0x8DD1;
pub static UNSIGNED_INT_SAMPLER_1D_EXT: GLenum = 0x8DD1;
pub static UNSIGNED_INT_SAMPLER_2D: GLenum = 0x8DD2;
pub static UNSIGNED_INT_SAMPLER_2D_EXT: GLenum = 0x8DD2;
pub static UNSIGNED_INT_SAMPLER_3D: GLenum = 0x8DD3;
pub static UNSIGNED_INT_SAMPLER_3D_EXT: GLenum = 0x8DD3;
pub static UNSIGNED_INT_SAMPLER_CUBE: GLenum = 0x8DD4;
pub static UNSIGNED_INT_SAMPLER_CUBE_EXT: GLenum = 0x8DD4;
pub static UNSIGNED_INT_SAMPLER_2D_RECT: GLenum = 0x8DD5;
pub static UNSIGNED_INT_SAMPLER_2D_RECT_EXT: GLenum = 0x8DD5;
pub static UNSIGNED_INT_SAMPLER_1D_ARRAY: GLenum = 0x8DD6;
pub static UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT: GLenum = 0x8DD6;
pub static UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum = 0x8DD7;
pub static UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT: GLenum = 0x8DD7;
pub static UNSIGNED_INT_SAMPLER_BUFFER: GLenum = 0x8DD8;
pub static UNSIGNED_INT_SAMPLER_BUFFER_EXT: GLenum = 0x8DD8;
pub static GEOMETRY_SHADER: GLenum = 0x8DD9;
pub static GEOMETRY_SHADER_ARB: GLenum = 0x8DD9;
pub static GEOMETRY_SHADER_EXT: GLenum = 0x8DD9;
pub static GEOMETRY_VERTICES_OUT_ARB: GLenum = 0x8DDA;
pub static GEOMETRY_VERTICES_OUT_EXT: GLenum = 0x8DDA;
pub static GEOMETRY_INPUT_TYPE_ARB: GLenum = 0x8DDB;
pub static GEOMETRY_INPUT_TYPE_EXT: GLenum = 0x8DDB;
pub static GEOMETRY_OUTPUT_TYPE_ARB: GLenum = 0x8DDC;
pub static GEOMETRY_OUTPUT_TYPE_EXT: GLenum = 0x8DDC;
pub static MAX_GEOMETRY_VARYING_COMPONENTS_ARB: GLenum = 0x8DDD;
pub static MAX_GEOMETRY_VARYING_COMPONENTS_EXT: GLenum = 0x8DDD;
pub static MAX_VERTEX_VARYING_COMPONENTS_ARB: GLenum = 0x8DDE;
pub static MAX_VERTEX_VARYING_COMPONENTS_EXT: GLenum = 0x8DDE;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT: GLenum = 0x8DDF;
pub static MAX_GEOMETRY_OUTPUT_VERTICES: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_OUTPUT_VERTICES_ARB: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_OUTPUT_VERTICES_EXT: GLenum = 0x8DE0;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS: GLenum = 0x8DE1;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB: GLenum = 0x8DE1;
pub static MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT: GLenum = 0x8DE1;
pub static MAX_VERTEX_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE2;
pub static MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE3;
pub static MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT: GLenum = 0x8DE4;
pub static ACTIVE_SUBROUTINES: GLenum = 0x8DE5;
pub static ACTIVE_SUBROUTINE_UNIFORMS: GLenum = 0x8DE6;
pub static MAX_SUBROUTINES: GLenum = 0x8DE7;
pub static MAX_SUBROUTINE_UNIFORM_LOCATIONS: GLenum = 0x8DE8;
pub static NAMED_STRING_LENGTH_ARB: GLenum = 0x8DE9;
pub static NAMED_STRING_TYPE_ARB: GLenum = 0x8DEA;
pub static MAX_BINDABLE_UNIFORM_SIZE_EXT: GLenum = 0x8DED;
pub static UNIFORM_BUFFER_EXT: GLenum = 0x8DEE;
pub static UNIFORM_BUFFER_BINDING_EXT: GLenum = 0x8DEF;
pub static LOW_FLOAT: GLenum = 0x8DF0;
pub static MEDIUM_FLOAT: GLenum = 0x8DF1;
pub static HIGH_FLOAT: GLenum = 0x8DF2;
pub static LOW_INT: GLenum = 0x8DF3;
pub static MEDIUM_INT: GLenum = 0x8DF4;
pub static HIGH_INT: GLenum = 0x8DF5;
pub static UNSIGNED_INT_10_10_10_2_OES: GLenum = 0x8DF6;
pub static INT_10_10_10_2_OES: GLenum = 0x8DF7;
pub static SHADER_BINARY_FORMATS: GLenum = 0x8DF8;
pub static NUM_SHADER_BINARY_FORMATS: GLenum = 0x8DF9;
pub static SHADER_COMPILER: GLenum = 0x8DFA;
pub static MAX_VERTEX_UNIFORM_VECTORS: GLenum = 0x8DFB;
pub static MAX_VARYING_VECTORS: GLenum = 0x8DFC;
pub static MAX_FRAGMENT_UNIFORM_VECTORS: GLenum = 0x8DFD;
pub static RENDERBUFFER_COLOR_SAMPLES_NV: GLenum = 0x8E10;
pub static MAX_MULTISAMPLE_COVERAGE_MODES_NV: GLenum = 0x8E11;
pub static MULTISAMPLE_COVERAGE_MODES_NV: GLenum = 0x8E12;
pub static QUERY_WAIT: GLenum = 0x8E13;
pub static QUERY_WAIT_NV: GLenum = 0x8E13;
pub static QUERY_NO_WAIT: GLenum = 0x8E14;
pub static QUERY_NO_WAIT_NV: GLenum = 0x8E14;
pub static QUERY_BY_REGION_WAIT: GLenum = 0x8E15;
pub static QUERY_BY_REGION_WAIT_NV: GLenum = 0x8E15;
pub static QUERY_BY_REGION_NO_WAIT: GLenum = 0x8E16;
pub static QUERY_BY_REGION_NO_WAIT_NV: GLenum = 0x8E16;
pub static MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS: GLenum = 0x8E1E;
pub static MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS: GLenum = 0x8E1F;
pub static COLOR_SAMPLES_NV: GLenum = 0x8E20;
pub static TRANSFORM_FEEDBACK: GLenum = 0x8E22;
pub static TRANSFORM_FEEDBACK_NV: GLenum = 0x8E22;
pub static TRANSFORM_FEEDBACK_BUFFER_PAUSED: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_PAUSED: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV: GLenum = 0x8E23;
pub static TRANSFORM_FEEDBACK_BUFFER_ACTIVE: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_ACTIVE: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV: GLenum = 0x8E24;
pub static TRANSFORM_FEEDBACK_BINDING: GLenum = 0x8E25;
pub static TRANSFORM_FEEDBACK_BINDING_NV: GLenum = 0x8E25;
pub static FRAME_NV: GLenum = 0x8E26;
pub static FIELDS_NV: GLenum = 0x8E27;
pub static CURRENT_TIME_NV: GLenum = 0x8E28;
pub static TIMESTAMP: GLenum = 0x8E28;
pub static TIMESTAMP_EXT: GLenum = 0x8E28;
pub static NUM_FILL_STREAMS_NV: GLenum = 0x8E29;
pub static PRESENT_TIME_NV: GLenum = 0x8E2A;
pub static PRESENT_DURATION_NV: GLenum = 0x8E2B;
pub static DEPTH_COMPONENT16_NONLINEAR_NV: GLenum = 0x8E2C;
pub static PROGRAM_MATRIX_EXT: GLenum = 0x8E2D;
pub static TRANSPOSE_PROGRAM_MATRIX_EXT: GLenum = 0x8E2E;
pub static PROGRAM_MATRIX_STACK_DEPTH_EXT: GLenum = 0x8E2F;
pub static TEXTURE_SWIZZLE_R: GLenum = 0x8E42;
pub static TEXTURE_SWIZZLE_R_EXT: GLenum = 0x8E42;
pub static TEXTURE_SWIZZLE_G: GLenum = 0x8E43;
pub static TEXTURE_SWIZZLE_G_EXT: GLenum = 0x8E43;
pub static TEXTURE_SWIZZLE_B: GLenum = 0x8E44;
pub static TEXTURE_SWIZZLE_B_EXT: GLenum = 0x8E44;
pub static TEXTURE_SWIZZLE_A: GLenum = 0x8E45;
pub static TEXTURE_SWIZZLE_A_EXT: GLenum = 0x8E45;
pub static TEXTURE_SWIZZLE_RGBA: GLenum = 0x8E46;
pub static TEXTURE_SWIZZLE_RGBA_EXT: GLenum = 0x8E46;
pub static ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS: GLenum = 0x8E47;
pub static ACTIVE_SUBROUTINE_MAX_LENGTH: GLenum = 0x8E48;
pub static ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH: GLenum = 0x8E49;
pub static NUM_COMPATIBLE_SUBROUTINES: GLenum = 0x8E4A;
pub static COMPATIBLE_SUBROUTINES: GLenum = 0x8E4B;
pub static QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION: GLenum = 0x8E4C;
pub static QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT: GLenum = 0x8E4C;
pub static FIRST_VERTEX_CONVENTION: GLenum = 0x8E4D;
pub static FIRST_VERTEX_CONVENTION_EXT: GLenum = 0x8E4D;
pub static LAST_VERTEX_CONVENTION: GLenum = 0x8E4E;
pub static LAST_VERTEX_CONVENTION_EXT: GLenum = 0x8E4E;
pub static PROVOKING_VERTEX: GLenum = 0x8E4F;
pub static PROVOKING_VERTEX_EXT: GLenum = 0x8E4F;
pub static SAMPLE_POSITION: GLenum = 0x8E50;
pub static SAMPLE_POSITION_NV: GLenum = 0x8E50;
pub static SAMPLE_MASK: GLenum = 0x8E51;
pub static SAMPLE_MASK_NV: GLenum = 0x8E51;
pub static SAMPLE_MASK_VALUE: GLenum = 0x8E52;
pub static SAMPLE_MASK_VALUE_NV: GLenum = 0x8E52;
pub static TEXTURE_BINDING_RENDERBUFFER_NV: GLenum = 0x8E53;
pub static TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV: GLenum = 0x8E54;
pub static TEXTURE_RENDERBUFFER_NV: GLenum = 0x8E55;
pub static SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E56;
pub static INT_SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E57;
pub static UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV: GLenum = 0x8E58;
pub static MAX_SAMPLE_MASK_WORDS: GLenum = 0x8E59;
pub static MAX_SAMPLE_MASK_WORDS_NV: GLenum = 0x8E59;
pub static MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV: GLenum = 0x8E5A;
pub static MAX_GEOMETRY_SHADER_INVOCATIONS: GLenum = 0x8E5A;
pub static MIN_FRAGMENT_INTERPOLATION_OFFSET: GLenum = 0x8E5B;
pub static MIN_FRAGMENT_INTERPOLATION_OFFSET_NV: GLenum = 0x8E5B;
pub static MAX_FRAGMENT_INTERPOLATION_OFFSET: GLenum = 0x8E5C;
pub static MAX_FRAGMENT_INTERPOLATION_OFFSET_NV: GLenum = 0x8E5C;
pub static FRAGMENT_INTERPOLATION_OFFSET_BITS: GLenum = 0x8E5D;
pub static FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV: GLenum = 0x8E5D;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET: GLenum = 0x8E5E;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: GLenum = 0x8E5E;
pub static MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV: GLenum = 0x8E5E;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET: GLenum = 0x8E5F;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB: GLenum = 0x8E5F;
pub static MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV: GLenum = 0x8E5F;
pub static MAX_TRANSFORM_FEEDBACK_BUFFERS: GLenum = 0x8E70;
pub static MAX_VERTEX_STREAMS: GLenum = 0x8E71;
pub static PATCH_VERTICES: GLenum = 0x8E72;
pub static PATCH_DEFAULT_INNER_LEVEL: GLenum = 0x8E73;
pub static PATCH_DEFAULT_OUTER_LEVEL: GLenum = 0x8E74;
pub static TESS_CONTROL_OUTPUT_VERTICES: GLenum = 0x8E75;
pub static TESS_GEN_MODE: GLenum = 0x8E76;
pub static TESS_GEN_SPACING: GLenum = 0x8E77;
pub static TESS_GEN_VERTEX_ORDER: GLenum = 0x8E78;
pub static TESS_GEN_POINT_MODE: GLenum = 0x8E79;
pub static ISOLINES: GLenum = 0x8E7A;
pub static FRACTIONAL_ODD: GLenum = 0x8E7B;
pub static FRACTIONAL_EVEN: GLenum = 0x8E7C;
pub static MAX_PATCH_VERTICES: GLenum = 0x8E7D;
pub static MAX_TESS_GEN_LEVEL: GLenum = 0x8E7E;
pub static MAX_TESS_CONTROL_UNIFORM_COMPONENTS: GLenum = 0x8E7F;
pub static MAX_TESS_EVALUATION_UNIFORM_COMPONENTS: GLenum = 0x8E80;
pub static MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS: GLenum = 0x8E81;
pub static MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS: GLenum = 0x8E82;
pub static MAX_TESS_CONTROL_OUTPUT_COMPONENTS: GLenum = 0x8E83;
pub static MAX_TESS_PATCH_COMPONENTS: GLenum = 0x8E84;
pub static MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS: GLenum = 0x8E85;
pub static MAX_TESS_EVALUATION_OUTPUT_COMPONENTS: GLenum = 0x8E86;
pub static TESS_EVALUATION_SHADER: GLenum = 0x8E87;
pub static TESS_CONTROL_SHADER: GLenum = 0x8E88;
pub static MAX_TESS_CONTROL_UNIFORM_BLOCKS: GLenum = 0x8E89;
pub static MAX_TESS_EVALUATION_UNIFORM_BLOCKS: GLenum = 0x8E8A;
pub static COMPRESSED_RGBA_BPTC_UNORM_ARB: GLenum = 0x8E8C;
pub static COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB: GLenum = 0x8E8D;
pub static COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB: GLenum = 0x8E8E;
pub static COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB: GLenum = 0x8E8F;
pub static COVERAGE_COMPONENT_NV: GLenum = 0x8ED0;
pub static COVERAGE_COMPONENT4_NV: GLenum = 0x8ED1;
pub static COVERAGE_ATTACHMENT_NV: GLenum = 0x8ED2;
pub static COVERAGE_BUFFERS_NV: GLenum = 0x8ED3;
pub static COVERAGE_SAMPLES_NV: GLenum = 0x8ED4;
pub static COVERAGE_ALL_FRAGMENTS_NV: GLenum = 0x8ED5;
pub static COVERAGE_EDGE_FRAGMENTS_NV: GLenum = 0x8ED6;
pub static COVERAGE_AUTOMATIC_NV: GLenum = 0x8ED7;
pub static BUFFER_GPU_ADDRESS_NV: GLenum = 0x8F1D;
pub static VERTEX_ATTRIB_ARRAY_UNIFIED_NV: GLenum = 0x8F1E;
pub static ELEMENT_ARRAY_UNIFIED_NV: GLenum = 0x8F1F;
pub static VERTEX_ATTRIB_ARRAY_ADDRESS_NV: GLenum = 0x8F20;
pub static VERTEX_ARRAY_ADDRESS_NV: GLenum = 0x8F21;
pub static NORMAL_ARRAY_ADDRESS_NV: GLenum = 0x8F22;
pub static COLOR_ARRAY_ADDRESS_NV: GLenum = 0x8F23;
pub static INDEX_ARRAY_ADDRESS_NV: GLenum = 0x8F24;
pub static TEXTURE_COORD_ARRAY_ADDRESS_NV: GLenum = 0x8F25;
pub static EDGE_FLAG_ARRAY_ADDRESS_NV: GLenum = 0x8F26;
pub static SECONDARY_COLOR_ARRAY_ADDRESS_NV: GLenum = 0x8F27;
pub static FOG_COORD_ARRAY_ADDRESS_NV: GLenum = 0x8F28;
pub static ELEMENT_ARRAY_ADDRESS_NV: GLenum = 0x8F29;
pub static VERTEX_ATTRIB_ARRAY_LENGTH_NV: GLenum = 0x8F2A;
pub static VERTEX_ARRAY_LENGTH_NV: GLenum = 0x8F2B;
pub static NORMAL_ARRAY_LENGTH_NV: GLenum = 0x8F2C;
pub static COLOR_ARRAY_LENGTH_NV: GLenum = 0x8F2D;
pub static INDEX_ARRAY_LENGTH_NV: GLenum = 0x8F2E;
pub static TEXTURE_COORD_ARRAY_LENGTH_NV: GLenum = 0x8F2F;
pub static EDGE_FLAG_ARRAY_LENGTH_NV: GLenum = 0x8F30;
pub static SECONDARY_COLOR_ARRAY_LENGTH_NV: GLenum = 0x8F31;
pub static FOG_COORD_ARRAY_LENGTH_NV: GLenum = 0x8F32;
pub static ELEMENT_ARRAY_LENGTH_NV: GLenum = 0x8F33;
pub static GPU_ADDRESS_NV: GLenum = 0x8F34;
pub static MAX_SHADER_BUFFER_ADDRESS_NV: GLenum = 0x8F35;
pub static COPY_READ_BUFFER: GLenum = 0x8F36;
pub static COPY_READ_BUFFER_BINDING: GLenum = 0x8F36;
pub static COPY_WRITE_BUFFER: GLenum = 0x8F37;
pub static COPY_WRITE_BUFFER_BINDING: GLenum = 0x8F37;
pub static MAX_IMAGE_UNITS: GLenum = 0x8F38;
pub static MAX_IMAGE_UNITS_EXT: GLenum = 0x8F38;
pub static MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS: GLenum = 0x8F39;
pub static MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT: GLenum = 0x8F39;
pub static MAX_COMBINED_SHADER_OUTPUT_RESOURCES: GLenum = 0x8F39;
pub static IMAGE_BINDING_NAME: GLenum = 0x8F3A;
pub static IMAGE_BINDING_NAME_EXT: GLenum = 0x8F3A;
pub static IMAGE_BINDING_LEVEL: GLenum = 0x8F3B;
pub static IMAGE_BINDING_LEVEL_EXT: GLenum = 0x8F3B;
pub static IMAGE_BINDING_LAYERED: GLenum = 0x8F3C;
pub static IMAGE_BINDING_LAYERED_EXT: GLenum = 0x8F3C;
pub static IMAGE_BINDING_LAYER: GLenum = 0x8F3D;
pub static IMAGE_BINDING_LAYER_EXT: GLenum = 0x8F3D;
pub static IMAGE_BINDING_ACCESS: GLenum = 0x8F3E;
pub static IMAGE_BINDING_ACCESS_EXT: GLenum = 0x8F3E;
pub static DRAW_INDIRECT_BUFFER: GLenum = 0x8F3F;
pub static DRAW_INDIRECT_UNIFIED_NV: GLenum = 0x8F40;
pub static DRAW_INDIRECT_ADDRESS_NV: GLenum = 0x8F41;
pub static DRAW_INDIRECT_LENGTH_NV: GLenum = 0x8F42;
pub static DRAW_INDIRECT_BUFFER_BINDING: GLenum = 0x8F43;
pub static MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV: GLenum = 0x8F44;
pub static MAX_PROGRAM_SUBROUTINE_NUM_NV: GLenum = 0x8F45;
pub static DOUBLE_MAT2: GLenum = 0x8F46;
pub static DOUBLE_MAT2_EXT: GLenum = 0x8F46;
pub static DOUBLE_MAT3: GLenum = 0x8F47;
pub static DOUBLE_MAT3_EXT: GLenum = 0x8F47;
pub static DOUBLE_MAT4: GLenum = 0x8F48;
pub static DOUBLE_MAT4_EXT: GLenum = 0x8F48;
pub static DOUBLE_MAT2x3: GLenum = 0x8F49;
pub static DOUBLE_MAT2x3_EXT: GLenum = 0x8F49;
pub static DOUBLE_MAT2x4: GLenum = 0x8F4A;
pub static DOUBLE_MAT2x4_EXT: GLenum = 0x8F4A;
pub static DOUBLE_MAT3x2: GLenum = 0x8F4B;
pub static DOUBLE_MAT3x2_EXT: GLenum = 0x8F4B;
pub static DOUBLE_MAT3x4: GLenum = 0x8F4C;
pub static DOUBLE_MAT3x4_EXT: GLenum = 0x8F4C;
pub static DOUBLE_MAT4x2: GLenum = 0x8F4D;
pub static DOUBLE_MAT4x2_EXT: GLenum = 0x8F4D;
pub static DOUBLE_MAT4x3: GLenum = 0x8F4E;
pub static DOUBLE_MAT4x3_EXT: GLenum = 0x8F4E;
pub static MALI_SHADER_BINARY_ARM: GLenum = 0x8F60;
pub static MALI_PROGRAM_BINARY_ARM: GLenum = 0x8F61;
pub static RED_SNORM: GLenum = 0x8F90;
pub static RG_SNORM: GLenum = 0x8F91;
pub static RGB_SNORM: GLenum = 0x8F92;
pub static RGBA_SNORM: GLenum = 0x8F93;
pub static R8_SNORM: GLenum = 0x8F94;
pub static RG8_SNORM: GLenum = 0x8F95;
pub static RGB8_SNORM: GLenum = 0x8F96;
pub static RGBA8_SNORM: GLenum = 0x8F97;
pub static R16_SNORM: GLenum = 0x8F98;
pub static RG16_SNORM: GLenum = 0x8F99;
pub static RGB16_SNORM: GLenum = 0x8F9A;
pub static RGBA16_SNORM: GLenum = 0x8F9B;
pub static SIGNED_NORMALIZED: GLenum = 0x8F9C;
pub static PRIMITIVE_RESTART: GLenum = 0x8F9D;
pub static PRIMITIVE_RESTART_INDEX: GLenum = 0x8F9E;
pub static MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB: GLenum = 0x8F9F;
pub static PERFMON_GLOBAL_MODE_QCOM: GLenum = 0x8FA0;
pub static BINNING_CONTROL_HINT_QCOM: GLenum = 0x8FB0;
pub static CPU_OPTIMIZED_QCOM: GLenum = 0x8FB1;
pub static GPU_OPTIMIZED_QCOM: GLenum = 0x8FB2;
pub static RENDER_DIRECT_TO_FRAMEBUFFER_QCOM: GLenum = 0x8FB3;
pub static GPU_DISJOINT_EXT: GLenum = 0x8FBB;
pub static SHADER_BINARY_VIV: GLenum = 0x8FC4;
pub static INT8_NV: GLenum = 0x8FE0;
pub static INT8_VEC2_NV: GLenum = 0x8FE1;
pub static INT8_VEC3_NV: GLenum = 0x8FE2;
pub static INT8_VEC4_NV: GLenum = 0x8FE3;
pub static INT16_NV: GLenum = 0x8FE4;
pub static INT16_VEC2_NV: GLenum = 0x8FE5;
pub static INT16_VEC3_NV: GLenum = 0x8FE6;
pub static INT16_VEC4_NV: GLenum = 0x8FE7;
pub static INT64_VEC2_NV: GLenum = 0x8FE9;
pub static INT64_VEC3_NV: GLenum = 0x8FEA;
pub static INT64_VEC4_NV: GLenum = 0x8FEB;
pub static UNSIGNED_INT8_NV: GLenum = 0x8FEC;
pub static UNSIGNED_INT8_VEC2_NV: GLenum = 0x8FED;
pub static UNSIGNED_INT8_VEC3_NV: GLenum = 0x8FEE;
pub static UNSIGNED_INT8_VEC4_NV: GLenum = 0x8FEF;
pub static UNSIGNED_INT16_NV: GLenum = 0x8FF0;
pub static UNSIGNED_INT16_VEC2_NV: GLenum = 0x8FF1;
pub static UNSIGNED_INT16_VEC3_NV: GLenum = 0x8FF2;
pub static UNSIGNED_INT16_VEC4_NV: GLenum = 0x8FF3;
pub static UNSIGNED_INT64_VEC2_NV: GLenum = 0x8FF5;
pub static UNSIGNED_INT64_VEC3_NV: GLenum = 0x8FF6;
pub static UNSIGNED_INT64_VEC4_NV: GLenum = 0x8FF7;
pub static FLOAT16_NV: GLenum = 0x8FF8;
pub static FLOAT16_VEC2_NV: GLenum = 0x8FF9;
pub static FLOAT16_VEC3_NV: GLenum = 0x8FFA;
pub static FLOAT16_VEC4_NV: GLenum = 0x8FFB;
pub static DOUBLE_VEC2: GLenum = 0x8FFC;
pub static DOUBLE_VEC2_EXT: GLenum = 0x8FFC;
pub static DOUBLE_VEC3: GLenum = 0x8FFD;
pub static DOUBLE_VEC3_EXT: GLenum = 0x8FFD;
pub static DOUBLE_VEC4: GLenum = 0x8FFE;
pub static DOUBLE_VEC4_EXT: GLenum = 0x8FFE;
pub static SAMPLER_BUFFER_AMD: GLenum = 0x9001;
pub static INT_SAMPLER_BUFFER_AMD: GLenum = 0x9002;
pub static UNSIGNED_INT_SAMPLER_BUFFER_AMD: GLenum = 0x9003;
pub static TESSELLATION_MODE_AMD: GLenum = 0x9004;
pub static TESSELLATION_FACTOR_AMD: GLenum = 0x9005;
pub static DISCRETE_AMD: GLenum = 0x9006;
pub static CONTINUOUS_AMD: GLenum = 0x9007;
pub static TEXTURE_CUBE_MAP_ARRAY: GLenum = 0x9009;
pub static TEXTURE_CUBE_MAP_ARRAY_ARB: GLenum = 0x9009;
pub static TEXTURE_BINDING_CUBE_MAP_ARRAY: GLenum = 0x900A;
pub static TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB: GLenum = 0x900A;
pub static PROXY_TEXTURE_CUBE_MAP_ARRAY: GLenum = 0x900B;
pub static PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB: GLenum = 0x900B;
pub static SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900C;
pub static SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900C;
pub static SAMPLER_CUBE_MAP_ARRAY_SHADOW: GLenum = 0x900D;
pub static SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB: GLenum = 0x900D;
pub static INT_SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900E;
pub static INT_SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900E;
pub static UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY: GLenum = 0x900F;
pub static UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB: GLenum = 0x900F;
pub static ALPHA_SNORM: GLenum = 0x9010;
pub static LUMINANCE_SNORM: GLenum = 0x9011;
pub static LUMINANCE_ALPHA_SNORM: GLenum = 0x9012;
pub static INTENSITY_SNORM: GLenum = 0x9013;
pub static ALPHA8_SNORM: GLenum = 0x9014;
pub static LUMINANCE8_SNORM: GLenum = 0x9015;
pub static LUMINANCE8_ALPHA8_SNORM: GLenum = 0x9016;
pub static INTENSITY8_SNORM: GLenum = 0x9017;
pub static ALPHA16_SNORM: GLenum = 0x9018;
pub static LUMINANCE16_SNORM: GLenum = 0x9019;
pub static LUMINANCE16_ALPHA16_SNORM: GLenum = 0x901A;
pub static INTENSITY16_SNORM: GLenum = 0x901B;
pub static FACTOR_MIN_AMD: GLenum = 0x901C;
pub static FACTOR_MAX_AMD: GLenum = 0x901D;
pub static DEPTH_CLAMP_NEAR_AMD: GLenum = 0x901E;
pub static DEPTH_CLAMP_FAR_AMD: GLenum = 0x901F;
pub static VIDEO_BUFFER_NV: GLenum = 0x9020;
pub static VIDEO_BUFFER_BINDING_NV: GLenum = 0x9021;
pub static FIELD_UPPER_NV: GLenum = 0x9022;
pub static FIELD_LOWER_NV: GLenum = 0x9023;
pub static NUM_VIDEO_CAPTURE_STREAMS_NV: GLenum = 0x9024;
pub static NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV: GLenum = 0x9025;
pub static VIDEO_CAPTURE_TO_422_SUPPORTED_NV: GLenum = 0x9026;
pub static LAST_VIDEO_CAPTURE_STATUS_NV: GLenum = 0x9027;
pub static VIDEO_BUFFER_PITCH_NV: GLenum = 0x9028;
pub static VIDEO_COLOR_CONVERSION_MATRIX_NV: GLenum = 0x9029;
pub static VIDEO_COLOR_CONVERSION_MAX_NV: GLenum = 0x902A;
pub static VIDEO_COLOR_CONVERSION_MIN_NV: GLenum = 0x902B;
pub static VIDEO_COLOR_CONVERSION_OFFSET_NV: GLenum = 0x902C;
pub static VIDEO_BUFFER_INTERNAL_FORMAT_NV: GLenum = 0x902D;
pub static PARTIAL_SUCCESS_NV: GLenum = 0x902E;
pub static SUCCESS_NV: GLenum = 0x902F;
pub static FAILURE_NV: GLenum = 0x9030;
pub static YCBYCR8_422_NV: GLenum = 0x9031;
pub static YCBAYCR8A_4224_NV: GLenum = 0x9032;
pub static Z6Y10Z6CB10Z6Y10Z6CR10_422_NV: GLenum = 0x9033;
pub static Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV: GLenum = 0x9034;
pub static Z4Y12Z4CB12Z4Y12Z4CR12_422_NV: GLenum = 0x9035;
pub static Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV: GLenum = 0x9036;
pub static Z4Y12Z4CB12Z4CR12_444_NV: GLenum = 0x9037;
pub static VIDEO_CAPTURE_FRAME_WIDTH_NV: GLenum = 0x9038;
pub static VIDEO_CAPTURE_FRAME_HEIGHT_NV: GLenum = 0x9039;
pub static VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV: GLenum = 0x903A;
pub static VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV: GLenum = 0x903B;
pub static VIDEO_CAPTURE_SURFACE_ORIGIN_NV: GLenum = 0x903C;
pub static TEXTURE_COVERAGE_SAMPLES_NV: GLenum = 0x9045;
pub static TEXTURE_COLOR_SAMPLES_NV: GLenum = 0x9046;
pub static IMAGE_1D: GLenum = 0x904C;
pub static IMAGE_1D_EXT: GLenum = 0x904C;
pub static IMAGE_2D: GLenum = 0x904D;
pub static IMAGE_2D_EXT: GLenum = 0x904D;
pub static IMAGE_3D: GLenum = 0x904E;
pub static IMAGE_3D_EXT: GLenum = 0x904E;
pub static IMAGE_2D_RECT: GLenum = 0x904F;
pub static IMAGE_2D_RECT_EXT: GLenum = 0x904F;
pub static IMAGE_CUBE: GLenum = 0x9050;
pub static IMAGE_CUBE_EXT: GLenum = 0x9050;
pub static IMAGE_BUFFER: GLenum = 0x9051;
pub static IMAGE_BUFFER_EXT: GLenum = 0x9051;
pub static IMAGE_1D_ARRAY: GLenum = 0x9052;
pub static IMAGE_1D_ARRAY_EXT: GLenum = 0x9052;
pub static IMAGE_2D_ARRAY: GLenum = 0x9053;
pub static IMAGE_2D_ARRAY_EXT: GLenum = 0x9053;
pub static IMAGE_CUBE_MAP_ARRAY: GLenum = 0x9054;
pub static IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x9054;
pub static IMAGE_2D_MULTISAMPLE: GLenum = 0x9055;
pub static IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x9055;
pub static IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9056;
pub static IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x9056;
pub static INT_IMAGE_1D: GLenum = 0x9057;
pub static INT_IMAGE_1D_EXT: GLenum = 0x9057;
pub static INT_IMAGE_2D: GLenum = 0x9058;
pub static INT_IMAGE_2D_EXT: GLenum = 0x9058;
pub static INT_IMAGE_3D: GLenum = 0x9059;
pub static INT_IMAGE_3D_EXT: GLenum = 0x9059;
pub static INT_IMAGE_2D_RECT: GLenum = 0x905A;
pub static INT_IMAGE_2D_RECT_EXT: GLenum = 0x905A;
pub static INT_IMAGE_CUBE: GLenum = 0x905B;
pub static INT_IMAGE_CUBE_EXT: GLenum = 0x905B;
pub static INT_IMAGE_BUFFER: GLenum = 0x905C;
pub static INT_IMAGE_BUFFER_EXT: GLenum = 0x905C;
pub static INT_IMAGE_1D_ARRAY: GLenum = 0x905D;
pub static INT_IMAGE_1D_ARRAY_EXT: GLenum = 0x905D;
pub static INT_IMAGE_2D_ARRAY: GLenum = 0x905E;
pub static INT_IMAGE_2D_ARRAY_EXT: GLenum = 0x905E;
pub static INT_IMAGE_CUBE_MAP_ARRAY: GLenum = 0x905F;
pub static INT_IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x905F;
pub static INT_IMAGE_2D_MULTISAMPLE: GLenum = 0x9060;
pub static INT_IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x9060;
pub static INT_IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9061;
pub static INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x9061;
pub static UNSIGNED_INT_IMAGE_1D: GLenum = 0x9062;
pub static UNSIGNED_INT_IMAGE_1D_EXT: GLenum = 0x9062;
pub static UNSIGNED_INT_IMAGE_2D: GLenum = 0x9063;
pub static UNSIGNED_INT_IMAGE_2D_EXT: GLenum = 0x9063;
pub static UNSIGNED_INT_IMAGE_3D: GLenum = 0x9064;
pub static UNSIGNED_INT_IMAGE_3D_EXT: GLenum = 0x9064;
pub static UNSIGNED_INT_IMAGE_2D_RECT: GLenum = 0x9065;
pub static UNSIGNED_INT_IMAGE_2D_RECT_EXT: GLenum = 0x9065;
pub static UNSIGNED_INT_IMAGE_CUBE: GLenum = 0x9066;
pub static UNSIGNED_INT_IMAGE_CUBE_EXT: GLenum = 0x9066;
pub static UNSIGNED_INT_IMAGE_BUFFER: GLenum = 0x9067;
pub static UNSIGNED_INT_IMAGE_BUFFER_EXT: GLenum = 0x9067;
pub static UNSIGNED_INT_IMAGE_1D_ARRAY: GLenum = 0x9068;
pub static UNSIGNED_INT_IMAGE_1D_ARRAY_EXT: GLenum = 0x9068;
pub static UNSIGNED_INT_IMAGE_2D_ARRAY: GLenum = 0x9069;
pub static UNSIGNED_INT_IMAGE_2D_ARRAY_EXT: GLenum = 0x9069;
pub static UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY: GLenum = 0x906A;
pub static UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT: GLenum = 0x906A;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE: GLenum = 0x906B;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT: GLenum = 0x906B;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY: GLenum = 0x906C;
pub static UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT: GLenum = 0x906C;
pub static MAX_IMAGE_SAMPLES: GLenum = 0x906D;
pub static MAX_IMAGE_SAMPLES_EXT: GLenum = 0x906D;
pub static IMAGE_BINDING_FORMAT: GLenum = 0x906E;
pub static IMAGE_BINDING_FORMAT_EXT: GLenum = 0x906E;
pub static RGB10_A2UI: GLenum = 0x906F;
pub static PATH_FORMAT_SVG_NV: GLenum = 0x9070;
pub static PATH_FORMAT_PS_NV: GLenum = 0x9071;
pub static STANDARD_FONT_NAME_NV: GLenum = 0x9072;
pub static SYSTEM_FONT_NAME_NV: GLenum = 0x9073;
pub static FILE_NAME_NV: GLenum = 0x9074;
pub static PATH_STROKE_WIDTH_NV: GLenum = 0x9075;
pub static PATH_END_CAPS_NV: GLenum = 0x9076;
pub static PATH_INITIAL_END_CAP_NV: GLenum = 0x9077;
pub static PATH_TERMINAL_END_CAP_NV: GLenum = 0x9078;
pub static PATH_JOIN_STYLE_NV: GLenum = 0x9079;
pub static PATH_MITER_LIMIT_NV: GLenum = 0x907A;
pub static PATH_DASH_CAPS_NV: GLenum = 0x907B;
pub static PATH_INITIAL_DASH_CAP_NV: GLenum = 0x907C;
pub static PATH_TERMINAL_DASH_CAP_NV: GLenum = 0x907D;
pub static PATH_DASH_OFFSET_NV: GLenum = 0x907E;
pub static PATH_CLIENT_LENGTH_NV: GLenum = 0x907F;
pub static PATH_FILL_MODE_NV: GLenum = 0x9080;
pub static PATH_FILL_MASK_NV: GLenum = 0x9081;
pub static PATH_FILL_COVER_MODE_NV: GLenum = 0x9082;
pub static PATH_STROKE_COVER_MODE_NV: GLenum = 0x9083;
pub static PATH_STROKE_MASK_NV: GLenum = 0x9084;
pub static COUNT_UP_NV: GLenum = 0x9088;
pub static COUNT_DOWN_NV: GLenum = 0x9089;
pub static PATH_OBJECT_BOUNDING_BOX_NV: GLenum = 0x908A;
pub static CONVEX_HULL_NV: GLenum = 0x908B;
pub static BOUNDING_BOX_NV: GLenum = 0x908D;
pub static TRANSLATE_X_NV: GLenum = 0x908E;
pub static TRANSLATE_Y_NV: GLenum = 0x908F;
pub static TRANSLATE_2D_NV: GLenum = 0x9090;
pub static TRANSLATE_3D_NV: GLenum = 0x9091;
pub static AFFINE_2D_NV: GLenum = 0x9092;
pub static AFFINE_3D_NV: GLenum = 0x9094;
pub static TRANSPOSE_AFFINE_2D_NV: GLenum = 0x9096;
pub static TRANSPOSE_AFFINE_3D_NV: GLenum = 0x9098;
pub static UTF8_NV: GLenum = 0x909A;
pub static UTF16_NV: GLenum = 0x909B;
pub static BOUNDING_BOX_OF_BOUNDING_BOXES_NV: GLenum = 0x909C;
pub static PATH_COMMAND_COUNT_NV: GLenum = 0x909D;
pub static PATH_COORD_COUNT_NV: GLenum = 0x909E;
pub static PATH_DASH_ARRAY_COUNT_NV: GLenum = 0x909F;
pub static PATH_COMPUTED_LENGTH_NV: GLenum = 0x90A0;
pub static PATH_FILL_BOUNDING_BOX_NV: GLenum = 0x90A1;
pub static PATH_STROKE_BOUNDING_BOX_NV: GLenum = 0x90A2;
pub static SQUARE_NV: GLenum = 0x90A3;
pub static ROUND_NV: GLenum = 0x90A4;
pub static TRIANGULAR_NV: GLenum = 0x90A5;
pub static BEVEL_NV: GLenum = 0x90A6;
pub static MITER_REVERT_NV: GLenum = 0x90A7;
pub static MITER_TRUNCATE_NV: GLenum = 0x90A8;
pub static SKIP_MISSING_GLYPH_NV: GLenum = 0x90A9;
pub static USE_MISSING_GLYPH_NV: GLenum = 0x90AA;
pub static PATH_ERROR_POSITION_NV: GLenum = 0x90AB;
pub static PATH_FOG_GEN_MODE_NV: GLenum = 0x90AC;
pub static ACCUM_ADJACENT_PAIRS_NV: GLenum = 0x90AD;
pub static ADJACENT_PAIRS_NV: GLenum = 0x90AE;
pub static FIRST_TO_REST_NV: GLenum = 0x90AF;
pub static PATH_GEN_MODE_NV: GLenum = 0x90B0;
pub static PATH_GEN_COEFF_NV: GLenum = 0x90B1;
pub static PATH_GEN_COLOR_FORMAT_NV: GLenum = 0x90B2;
pub static PATH_GEN_COMPONENTS_NV: GLenum = 0x90B3;
pub static PATH_DASH_OFFSET_RESET_NV: GLenum = 0x90B4;
pub static MOVE_TO_RESETS_NV: GLenum = 0x90B5;
pub static MOVE_TO_CONTINUES_NV: GLenum = 0x90B6;
pub static PATH_STENCIL_FUNC_NV: GLenum = 0x90B7;
pub static PATH_STENCIL_REF_NV: GLenum = 0x90B8;
pub static PATH_STENCIL_VALUE_MASK_NV: GLenum = 0x90B9;
pub static SCALED_RESOLVE_FASTEST_EXT: GLenum = 0x90BA;
pub static SCALED_RESOLVE_NICEST_EXT: GLenum = 0x90BB;
pub static MIN_MAP_BUFFER_ALIGNMENT: GLenum = 0x90BC;
pub static PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV: GLenum = 0x90BD;
pub static PATH_STENCIL_DEPTH_OFFSET_UNITS_NV: GLenum = 0x90BE;
pub static PATH_COVER_DEPTH_FUNC_NV: GLenum = 0x90BF;
pub static IMAGE_FORMAT_COMPATIBILITY_TYPE: GLenum = 0x90C7;
pub static IMAGE_FORMAT_COMPATIBILITY_BY_SIZE: GLenum = 0x90C8;
pub static IMAGE_FORMAT_COMPATIBILITY_BY_CLASS: GLenum = 0x90C9;
pub static MAX_VERTEX_IMAGE_UNIFORMS: GLenum = 0x90CA;
pub static MAX_TESS_CONTROL_IMAGE_UNIFORMS: GLenum = 0x90CB;
pub static MAX_TESS_EVALUATION_IMAGE_UNIFORMS: GLenum = 0x90CC;
pub static MAX_GEOMETRY_IMAGE_UNIFORMS: GLenum = 0x90CD;
pub static MAX_FRAGMENT_IMAGE_UNIFORMS: GLenum = 0x90CE;
pub static MAX_COMBINED_IMAGE_UNIFORMS: GLenum = 0x90CF;
pub static MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV: GLenum = 0x90D0;
pub static MAX_DEEP_3D_TEXTURE_DEPTH_NV: GLenum = 0x90D1;
pub static SHADER_STORAGE_BUFFER: GLenum = 0x90D2;
pub static SHADER_STORAGE_BUFFER_BINDING: GLenum = 0x90D3;
pub static SHADER_STORAGE_BUFFER_START: GLenum = 0x90D4;
pub static SHADER_STORAGE_BUFFER_SIZE: GLenum = 0x90D5;
pub static MAX_VERTEX_SHADER_STORAGE_BLOCKS: GLenum = 0x90D6;
pub static MAX_GEOMETRY_SHADER_STORAGE_BLOCKS: GLenum = 0x90D7;
pub static MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS: GLenum = 0x90D8;
pub static MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS: GLenum = 0x90D9;
pub static MAX_FRAGMENT_SHADER_STORAGE_BLOCKS: GLenum = 0x90DA;
pub static MAX_COMPUTE_SHADER_STORAGE_BLOCKS: GLenum = 0x90DB;
pub static MAX_COMBINED_SHADER_STORAGE_BLOCKS: GLenum = 0x90DC;
pub static MAX_SHADER_STORAGE_BUFFER_BINDINGS: GLenum = 0x90DD;
pub static MAX_SHADER_STORAGE_BLOCK_SIZE: GLenum = 0x90DE;
pub static SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x90DF;
pub static SYNC_X11_FENCE_EXT: GLenum = 0x90E1;
pub static DEPTH_STENCIL_TEXTURE_MODE: GLenum = 0x90EA;
pub static MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB: GLenum = 0x90EB;
pub static MAX_COMPUTE_LOCAL_INVOCATIONS: GLenum = 0x90EB;
pub static UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x90EC;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x90ED;
pub static DISPATCH_INDIRECT_BUFFER: GLenum = 0x90EE;
pub static DISPATCH_INDIRECT_BUFFER_BINDING: GLenum = 0x90EF;
pub static COLOR_ATTACHMENT_EXT: GLenum = 0x90F0;
pub static MULTIVIEW_EXT: GLenum = 0x90F1;
pub static MAX_MULTIVIEW_BUFFERS_EXT: GLenum = 0x90F2;
pub static COMPUTE_PROGRAM_NV: GLenum = 0x90FB;
pub static COMPUTE_PROGRAM_PARAMETER_BUFFER_NV: GLenum = 0x90FC;
pub static TEXTURE_2D_MULTISAMPLE: GLenum = 0x9100;
pub static PROXY_TEXTURE_2D_MULTISAMPLE: GLenum = 0x9101;
pub static TEXTURE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9102;
pub static PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY: GLenum = 0x9103;
pub static TEXTURE_BINDING_2D_MULTISAMPLE: GLenum = 0x9104;
pub static TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY: GLenum = 0x9105;
pub static TEXTURE_SAMPLES: GLenum = 0x9106;
pub static TEXTURE_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9107;
pub static SAMPLER_2D_MULTISAMPLE: GLenum = 0x9108;
pub static INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x9109;
pub static UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE: GLenum = 0x910A;
pub static SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910B;
pub static INT_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910C;
pub static UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY: GLenum = 0x910D;
pub static MAX_COLOR_TEXTURE_SAMPLES: GLenum = 0x910E;
pub static MAX_DEPTH_TEXTURE_SAMPLES: GLenum = 0x910F;
pub static MAX_INTEGER_SAMPLES: GLenum = 0x9110;
pub static MAX_SERVER_WAIT_TIMEOUT: GLenum = 0x9111;
pub static MAX_SERVER_WAIT_TIMEOUT_APPLE: GLenum = 0x9111;
pub static OBJECT_TYPE: GLenum = 0x9112;
pub static OBJECT_TYPE_APPLE: GLenum = 0x9112;
pub static SYNC_CONDITION: GLenum = 0x9113;
pub static SYNC_CONDITION_APPLE: GLenum = 0x9113;
pub static SYNC_STATUS: GLenum = 0x9114;
pub static SYNC_STATUS_APPLE: GLenum = 0x9114;
pub static SYNC_FLAGS: GLenum = 0x9115;
pub static SYNC_FLAGS_APPLE: GLenum = 0x9115;
pub static SYNC_FENCE: GLenum = 0x9116;
pub static SYNC_FENCE_APPLE: GLenum = 0x9116;
pub static SYNC_GPU_COMMANDS_COMPLETE: GLenum = 0x9117;
pub static SYNC_GPU_COMMANDS_COMPLETE_APPLE: GLenum = 0x9117;
pub static UNSIGNALED: GLenum = 0x9118;
pub static UNSIGNALED_APPLE: GLenum = 0x9118;
pub static SIGNALED: GLenum = 0x9119;
pub static SIGNALED_APPLE: GLenum = 0x9119;
pub static ALREADY_SIGNALED: GLenum = 0x911A;
pub static ALREADY_SIGNALED_APPLE: GLenum = 0x911A;
pub static TIMEOUT_EXPIRED: GLenum = 0x911B;
pub static TIMEOUT_EXPIRED_APPLE: GLenum = 0x911B;
pub static CONDITION_SATISFIED: GLenum = 0x911C;
pub static CONDITION_SATISFIED_APPLE: GLenum = 0x911C;
pub static WAIT_FAILED: GLenum = 0x911D;
pub static WAIT_FAILED_APPLE: GLenum = 0x911D;
pub static BUFFER_ACCESS_FLAGS: GLenum = 0x911F;
pub static BUFFER_MAP_LENGTH: GLenum = 0x9120;
pub static BUFFER_MAP_OFFSET: GLenum = 0x9121;
pub static MAX_VERTEX_OUTPUT_COMPONENTS: GLenum = 0x9122;
pub static MAX_GEOMETRY_INPUT_COMPONENTS: GLenum = 0x9123;
pub static MAX_GEOMETRY_OUTPUT_COMPONENTS: GLenum = 0x9124;
pub static MAX_FRAGMENT_INPUT_COMPONENTS: GLenum = 0x9125;
pub static CONTEXT_PROFILE_MASK: GLenum = 0x9126;
pub static UNPACK_COMPRESSED_BLOCK_WIDTH: GLenum = 0x9127;
pub static UNPACK_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x9128;
pub static UNPACK_COMPRESSED_BLOCK_DEPTH: GLenum = 0x9129;
pub static UNPACK_COMPRESSED_BLOCK_SIZE: GLenum = 0x912A;
pub static PACK_COMPRESSED_BLOCK_WIDTH: GLenum = 0x912B;
pub static PACK_COMPRESSED_BLOCK_HEIGHT: GLenum = 0x912C;
pub static PACK_COMPRESSED_BLOCK_DEPTH: GLenum = 0x912D;
pub static PACK_COMPRESSED_BLOCK_SIZE: GLenum = 0x912E;
pub static TEXTURE_IMMUTABLE_FORMAT: GLenum = 0x912F;
pub static SGX_PROGRAM_BINARY_IMG: GLenum = 0x9130;
pub static RENDERBUFFER_SAMPLES_IMG: GLenum = 0x9133;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG: GLenum = 0x9134;
pub static MAX_SAMPLES_IMG: GLenum = 0x9135;
pub static TEXTURE_SAMPLES_IMG: GLenum = 0x9136;
pub static COMPRESSED_RGBA_PVRTC_2BPPV2_IMG: GLenum = 0x9137;
pub static COMPRESSED_RGBA_PVRTC_4BPPV2_IMG: GLenum = 0x9138;
pub static MAX_DEBUG_MESSAGE_LENGTH: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_AMD: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_ARB: GLenum = 0x9143;
pub static MAX_DEBUG_MESSAGE_LENGTH_KHR: GLenum = 0x9143;
pub static MAX_DEBUG_LOGGED_MESSAGES: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_AMD: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_ARB: GLenum = 0x9144;
pub static MAX_DEBUG_LOGGED_MESSAGES_KHR: GLenum = 0x9144;
pub static DEBUG_LOGGED_MESSAGES: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_AMD: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_ARB: GLenum = 0x9145;
pub static DEBUG_LOGGED_MESSAGES_KHR: GLenum = 0x9145;
pub static DEBUG_SEVERITY_HIGH: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_AMD: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_ARB: GLenum = 0x9146;
pub static DEBUG_SEVERITY_HIGH_KHR: GLenum = 0x9146;
pub static DEBUG_SEVERITY_MEDIUM: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_AMD: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_ARB: GLenum = 0x9147;
pub static DEBUG_SEVERITY_MEDIUM_KHR: GLenum = 0x9147;
pub static DEBUG_SEVERITY_LOW: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_AMD: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_ARB: GLenum = 0x9148;
pub static DEBUG_SEVERITY_LOW_KHR: GLenum = 0x9148;
pub static DEBUG_CATEGORY_API_ERROR_AMD: GLenum = 0x9149;
pub static DEBUG_CATEGORY_WINDOW_SYSTEM_AMD: GLenum = 0x914A;
pub static DEBUG_CATEGORY_DEPRECATION_AMD: GLenum = 0x914B;
pub static DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD: GLenum = 0x914C;
pub static DEBUG_CATEGORY_PERFORMANCE_AMD: GLenum = 0x914D;
pub static DEBUG_CATEGORY_SHADER_COMPILER_AMD: GLenum = 0x914E;
pub static DEBUG_CATEGORY_APPLICATION_AMD: GLenum = 0x914F;
pub static DEBUG_CATEGORY_OTHER_AMD: GLenum = 0x9150;
pub static BUFFER_OBJECT_EXT: GLenum = 0x9151;
pub static DATA_BUFFER_AMD: GLenum = 0x9151;
pub static PERFORMANCE_MONITOR_AMD: GLenum = 0x9152;
pub static QUERY_OBJECT_AMD: GLenum = 0x9153;
pub static QUERY_OBJECT_EXT: GLenum = 0x9153;
pub static VERTEX_ARRAY_OBJECT_AMD: GLenum = 0x9154;
pub static VERTEX_ARRAY_OBJECT_EXT: GLenum = 0x9154;
pub static SAMPLER_OBJECT_AMD: GLenum = 0x9155;
pub static EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD: GLenum = 0x9160;
pub static QUERY_BUFFER: GLenum = 0x9192;
pub static QUERY_BUFFER_AMD: GLenum = 0x9192;
pub static QUERY_BUFFER_BINDING: GLenum = 0x9193;
pub static QUERY_BUFFER_BINDING_AMD: GLenum = 0x9193;
pub static QUERY_RESULT_NO_WAIT: GLenum = 0x9194;
pub static QUERY_RESULT_NO_WAIT_AMD: GLenum = 0x9194;
pub static VIRTUAL_PAGE_SIZE_X_ARB: GLenum = 0x9195;
pub static VIRTUAL_PAGE_SIZE_X_AMD: GLenum = 0x9195;
pub static VIRTUAL_PAGE_SIZE_Y_ARB: GLenum = 0x9196;
pub static VIRTUAL_PAGE_SIZE_Y_AMD: GLenum = 0x9196;
pub static VIRTUAL_PAGE_SIZE_Z_ARB: GLenum = 0x9197;
pub static VIRTUAL_PAGE_SIZE_Z_AMD: GLenum = 0x9197;
pub static MAX_SPARSE_TEXTURE_SIZE_ARB: GLenum = 0x9198;
pub static MAX_SPARSE_TEXTURE_SIZE_AMD: GLenum = 0x9198;
pub static MAX_SPARSE_3D_TEXTURE_SIZE_ARB: GLenum = 0x9199;
pub static MAX_SPARSE_3D_TEXTURE_SIZE_AMD: GLenum = 0x9199;
pub static MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB: GLenum = 0x919A;
pub static MAX_SPARSE_ARRAY_TEXTURE_LAYERS: GLenum = 0x919A;
pub static MIN_SPARSE_LEVEL_ARB: GLenum = 0x919B;
pub static MIN_SPARSE_LEVEL_AMD: GLenum = 0x919B;
pub static MIN_LOD_WARNING_AMD: GLenum = 0x919C;
pub static TEXTURE_BUFFER_OFFSET: GLenum = 0x919D;
pub static TEXTURE_BUFFER_SIZE: GLenum = 0x919E;
pub static TEXTURE_BUFFER_OFFSET_ALIGNMENT: GLenum = 0x919F;
pub static VERTEX_ELEMENT_SWIZZLE_AMD: GLenum = 0x91A4;
pub static VERTEX_ID_SWIZZLE_AMD: GLenum = 0x91A5;
pub static TEXTURE_SPARSE_ARB: GLenum = 0x91A6;
pub static VIRTUAL_PAGE_SIZE_INDEX_ARB: GLenum = 0x91A7;
pub static NUM_VIRTUAL_PAGE_SIZES_ARB: GLenum = 0x91A8;
pub static SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB: GLenum = 0x91A9;
pub static COMPUTE_SHADER: GLenum = 0x91B9;
pub static MAX_COMPUTE_UNIFORM_BLOCKS: GLenum = 0x91BB;
pub static MAX_COMPUTE_TEXTURE_IMAGE_UNITS: GLenum = 0x91BC;
pub static MAX_COMPUTE_IMAGE_UNIFORMS: GLenum = 0x91BD;
pub static MAX_COMPUTE_WORK_GROUP_COUNT: GLenum = 0x91BE;
pub static MAX_COMPUTE_FIXED_GROUP_SIZE_ARB: GLenum = 0x91BF;
pub static MAX_COMPUTE_WORK_GROUP_SIZE: GLenum = 0x91BF;
pub static UNPACK_FLIP_Y_WEBGL: GLenum = 0x9240;
pub static UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum = 0x9241;
pub static CONTEXT_LOST_WEBGL: GLenum = 0x9242;
pub static UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum = 0x9243;
pub static BROWSER_DEFAULT_WEBGL: GLenum = 0x9244;
pub static SHADER_BINARY_DMP: GLenum = 0x9250;
pub static GCCSO_SHADER_BINARY_FJ: GLenum = 0x9260;
pub static COMPRESSED_R11_EAC: GLenum = 0x9270;
pub static COMPRESSED_R11_EAC_OES: GLenum = 0x9270;
pub static COMPRESSED_SIGNED_R11_EAC: GLenum = 0x9271;
pub static COMPRESSED_SIGNED_R11_EAC_OES: GLenum = 0x9271;
pub static COMPRESSED_RG11_EAC: GLenum = 0x9272;
pub static COMPRESSED_RG11_EAC_OES: GLenum = 0x9272;
pub static COMPRESSED_SIGNED_RG11_EAC: GLenum = 0x9273;
pub static COMPRESSED_SIGNED_RG11_EAC_OES: GLenum = 0x9273;
pub static COMPRESSED_RGB8_ETC2: GLenum = 0x9274;
pub static COMPRESSED_RGB8_ETC2_OES: GLenum = 0x9274;
pub static COMPRESSED_SRGB8_ETC2: GLenum = 0x9275;
pub static COMPRESSED_SRGB8_ETC2_OES: GLenum = 0x9275;
pub static COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = 0x9276;
pub static COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES: GLenum = 0x9276;
pub static COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: GLenum = 0x9277;
pub static COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES: GLenum = 0x9277;
pub static COMPRESSED_RGBA8_ETC2_EAC: GLenum = 0x9278;
pub static COMPRESSED_RGBA8_ETC2_EAC_OES: GLenum = 0x9278;
pub static COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: GLenum = 0x9279;
pub static COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES: GLenum = 0x9279;
pub static BLEND_PREMULTIPLIED_SRC_NV: GLenum = 0x9280;
pub static BLEND_OVERLAP_NV: GLenum = 0x9281;
pub static UNCORRELATED_NV: GLenum = 0x9282;
pub static DISJOINT_NV: GLenum = 0x9283;
pub static CONJOINT_NV: GLenum = 0x9284;
pub static BLEND_ADVANCED_COHERENT_NV: GLenum = 0x9285;
pub static SRC_NV: GLenum = 0x9286;
pub static DST_NV: GLenum = 0x9287;
pub static SRC_OVER_NV: GLenum = 0x9288;
pub static DST_OVER_NV: GLenum = 0x9289;
pub static SRC_IN_NV: GLenum = 0x928A;
pub static DST_IN_NV: GLenum = 0x928B;
pub static SRC_OUT_NV: GLenum = 0x928C;
pub static DST_OUT_NV: GLenum = 0x928D;
pub static SRC_ATOP_NV: GLenum = 0x928E;
pub static DST_ATOP_NV: GLenum = 0x928F;
pub static PLUS_NV: GLenum = 0x9291;
pub static PLUS_DARKER_NV: GLenum = 0x9292;
pub static MULTIPLY_NV: GLenum = 0x9294;
pub static SCREEN_NV: GLenum = 0x9295;
pub static OVERLAY_NV: GLenum = 0x9296;
pub static DARKEN_NV: GLenum = 0x9297;
pub static LIGHTEN_NV: GLenum = 0x9298;
pub static COLORDODGE_NV: GLenum = 0x9299;
pub static COLORBURN_NV: GLenum = 0x929A;
pub static HARDLIGHT_NV: GLenum = 0x929B;
pub static SOFTLIGHT_NV: GLenum = 0x929C;
pub static DIFFERENCE_NV: GLenum = 0x929E;
pub static MINUS_NV: GLenum = 0x929F;
pub static EXCLUSION_NV: GLenum = 0x92A0;
pub static CONTRAST_NV: GLenum = 0x92A1;
pub static INVERT_RGB_NV: GLenum = 0x92A3;
pub static LINEARDODGE_NV: GLenum = 0x92A4;
pub static LINEARBURN_NV: GLenum = 0x92A5;
pub static VIVIDLIGHT_NV: GLenum = 0x92A6;
pub static LINEARLIGHT_NV: GLenum = 0x92A7;
pub static PINLIGHT_NV: GLenum = 0x92A8;
pub static HARDMIX_NV: GLenum = 0x92A9;
pub static HSL_HUE_NV: GLenum = 0x92AD;
pub static HSL_SATURATION_NV: GLenum = 0x92AE;
pub static HSL_COLOR_NV: GLenum = 0x92AF;
pub static HSL_LUMINOSITY_NV: GLenum = 0x92B0;
pub static PLUS_CLAMPED_NV: GLenum = 0x92B1;
pub static PLUS_CLAMPED_ALPHA_NV: GLenum = 0x92B2;
pub static MINUS_CLAMPED_NV: GLenum = 0x92B3;
pub static INVERT_OVG_NV: GLenum = 0x92B4;
pub static ATOMIC_COUNTER_BUFFER: GLenum = 0x92C0;
pub static ATOMIC_COUNTER_BUFFER_BINDING: GLenum = 0x92C1;
pub static ATOMIC_COUNTER_BUFFER_START: GLenum = 0x92C2;
pub static ATOMIC_COUNTER_BUFFER_SIZE: GLenum = 0x92C3;
pub static ATOMIC_COUNTER_BUFFER_DATA_SIZE: GLenum = 0x92C4;
pub static ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS: GLenum = 0x92C5;
pub static ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES: GLenum = 0x92C6;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER: GLenum = 0x92C7;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x92C8;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x92C9;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x92CA;
pub static ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x92CB;
pub static MAX_VERTEX_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CC;
pub static MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CD;
pub static MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CE;
pub static MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92CF;
pub static MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D0;
pub static MAX_COMBINED_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D1;
pub static MAX_VERTEX_ATOMIC_COUNTERS: GLenum = 0x92D2;
pub static MAX_TESS_CONTROL_ATOMIC_COUNTERS: GLenum = 0x92D3;
pub static MAX_TESS_EVALUATION_ATOMIC_COUNTERS: GLenum = 0x92D4;
pub static MAX_GEOMETRY_ATOMIC_COUNTERS: GLenum = 0x92D5;
pub static MAX_FRAGMENT_ATOMIC_COUNTERS: GLenum = 0x92D6;
pub static MAX_COMBINED_ATOMIC_COUNTERS: GLenum = 0x92D7;
pub static MAX_ATOMIC_COUNTER_BUFFER_SIZE: GLenum = 0x92D8;
pub static ACTIVE_ATOMIC_COUNTER_BUFFERS: GLenum = 0x92D9;
pub static UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX: GLenum = 0x92DA;
pub static UNSIGNED_INT_ATOMIC_COUNTER: GLenum = 0x92DB;
pub static MAX_ATOMIC_COUNTER_BUFFER_BINDINGS: GLenum = 0x92DC;
pub static DEBUG_OUTPUT: GLenum = 0x92E0;
pub static DEBUG_OUTPUT_KHR: GLenum = 0x92E0;
pub static UNIFORM: GLenum = 0x92E1;
pub static UNIFORM_BLOCK: GLenum = 0x92E2;
pub static PROGRAM_INPUT: GLenum = 0x92E3;
pub static PROGRAM_OUTPUT: GLenum = 0x92E4;
pub static BUFFER_VARIABLE: GLenum = 0x92E5;
pub static SHADER_STORAGE_BLOCK: GLenum = 0x92E6;
pub static IS_PER_PATCH: GLenum = 0x92E7;
pub static VERTEX_SUBROUTINE: GLenum = 0x92E8;
pub static TESS_CONTROL_SUBROUTINE: GLenum = 0x92E9;
pub static TESS_EVALUATION_SUBROUTINE: GLenum = 0x92EA;
pub static GEOMETRY_SUBROUTINE: GLenum = 0x92EB;
pub static FRAGMENT_SUBROUTINE: GLenum = 0x92EC;
pub static COMPUTE_SUBROUTINE: GLenum = 0x92ED;
pub static VERTEX_SUBROUTINE_UNIFORM: GLenum = 0x92EE;
pub static TESS_CONTROL_SUBROUTINE_UNIFORM: GLenum = 0x92EF;
pub static TESS_EVALUATION_SUBROUTINE_UNIFORM: GLenum = 0x92F0;
pub static GEOMETRY_SUBROUTINE_UNIFORM: GLenum = 0x92F1;
pub static FRAGMENT_SUBROUTINE_UNIFORM: GLenum = 0x92F2;
pub static COMPUTE_SUBROUTINE_UNIFORM: GLenum = 0x92F3;
pub static TRANSFORM_FEEDBACK_VARYING: GLenum = 0x92F4;
pub static ACTIVE_RESOURCES: GLenum = 0x92F5;
pub static MAX_NAME_LENGTH: GLenum = 0x92F6;
pub static MAX_NUM_ACTIVE_VARIABLES: GLenum = 0x92F7;
pub static MAX_NUM_COMPATIBLE_SUBROUTINES: GLenum = 0x92F8;
pub static NAME_LENGTH: GLenum = 0x92F9;
pub static TYPE: GLenum = 0x92FA;
pub static ARRAY_SIZE: GLenum = 0x92FB;
pub static OFFSET: GLenum = 0x92FC;
pub static BLOCK_INDEX: GLenum = 0x92FD;
pub static ARRAY_STRIDE: GLenum = 0x92FE;
pub static MATRIX_STRIDE: GLenum = 0x92FF;
pub static IS_ROW_MAJOR: GLenum = 0x9300;
pub static ATOMIC_COUNTER_BUFFER_INDEX: GLenum = 0x9301;
pub static BUFFER_BINDING: GLenum = 0x9302;
pub static BUFFER_DATA_SIZE: GLenum = 0x9303;
pub static NUM_ACTIVE_VARIABLES: GLenum = 0x9304;
pub static ACTIVE_VARIABLES: GLenum = 0x9305;
pub static REFERENCED_BY_VERTEX_SHADER: GLenum = 0x9306;
pub static REFERENCED_BY_TESS_CONTROL_SHADER: GLenum = 0x9307;
pub static REFERENCED_BY_TESS_EVALUATION_SHADER: GLenum = 0x9308;
pub static REFERENCED_BY_GEOMETRY_SHADER: GLenum = 0x9309;
pub static REFERENCED_BY_FRAGMENT_SHADER: GLenum = 0x930A;
pub static REFERENCED_BY_COMPUTE_SHADER: GLenum = 0x930B;
pub static TOP_LEVEL_ARRAY_SIZE: GLenum = 0x930C;
pub static TOP_LEVEL_ARRAY_STRIDE: GLenum = 0x930D;
pub static LOCATION: GLenum = 0x930E;
pub static LOCATION_INDEX: GLenum = 0x930F;
pub static FRAMEBUFFER_DEFAULT_WIDTH: GLenum = 0x9310;
pub static FRAMEBUFFER_DEFAULT_HEIGHT: GLenum = 0x9311;
pub static FRAMEBUFFER_DEFAULT_LAYERS: GLenum = 0x9312;
pub static FRAMEBUFFER_DEFAULT_SAMPLES: GLenum = 0x9313;
pub static FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS: GLenum = 0x9314;
pub static MAX_FRAMEBUFFER_WIDTH: GLenum = 0x9315;
pub static MAX_FRAMEBUFFER_HEIGHT: GLenum = 0x9316;
pub static MAX_FRAMEBUFFER_LAYERS: GLenum = 0x9317;
pub static MAX_FRAMEBUFFER_SAMPLES: GLenum = 0x9318;
pub static MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB: GLenum = 0x9344;
pub static MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB: GLenum = 0x9345;
pub static LOCATION_COMPONENT: GLenum = 0x934A;
pub static TRANSFORM_FEEDBACK_BUFFER_INDEX: GLenum = 0x934B;
pub static TRANSFORM_FEEDBACK_BUFFER_STRIDE: GLenum = 0x934C;
pub static CLEAR_TEXTURE: GLenum = 0x9365;
pub static NUM_SAMPLE_COUNTS: GLenum = 0x9380;
pub static TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE: GLenum = 0x93A0;
pub static TEXTURE_USAGE_ANGLE: GLenum = 0x93A2;
pub static FRAMEBUFFER_ATTACHMENT_ANGLE: GLenum = 0x93A3;
pub static PACK_REVERSE_ROW_ORDER_ANGLE: GLenum = 0x93A4;
pub static PROGRAM_BINARY_ANGLE: GLenum = 0x93A6;
pub static COMPRESSED_RGBA_ASTC_4x4_KHR: GLenum = 0x93B0;
pub static COMPRESSED_RGBA_ASTC_5x4_KHR: GLenum = 0x93B1;
pub static COMPRESSED_RGBA_ASTC_5x5_KHR: GLenum = 0x93B2;
pub static COMPRESSED_RGBA_ASTC_6x5_KHR: GLenum = 0x93B3;
pub static COMPRESSED_RGBA_ASTC_6x6_KHR: GLenum = 0x93B4;
pub static COMPRESSED_RGBA_ASTC_8x5_KHR: GLenum = 0x93B5;
pub static COMPRESSED_RGBA_ASTC_8x6_KHR: GLenum = 0x93B6;
pub static COMPRESSED_RGBA_ASTC_8x8_KHR: GLenum = 0x93B7;
pub static COMPRESSED_RGBA_ASTC_10x5_KHR: GLenum = 0x93B8;
pub static COMPRESSED_RGBA_ASTC_10x6_KHR: GLenum = 0x93B9;
pub static COMPRESSED_RGBA_ASTC_10x8_KHR: GLenum = 0x93BA;
pub static COMPRESSED_RGBA_ASTC_10x10_KHR: GLenum = 0x93BB;
pub static COMPRESSED_RGBA_ASTC_12x10_KHR: GLenum = 0x93BC;
pub static COMPRESSED_RGBA_ASTC_12x12_KHR: GLenum = 0x93BD;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: GLenum = 0x93D0;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: GLenum = 0x93D1;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: GLenum = 0x93D2;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: GLenum = 0x93D3;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: GLenum = 0x93D4;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: GLenum = 0x93D5;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: GLenum = 0x93D6;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: GLenum = 0x93D7;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: GLenum = 0x93D8;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: GLenum = 0x93D9;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: GLenum = 0x93DA;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: GLenum = 0x93DB;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: GLenum = 0x93DC;
pub static COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: GLenum = 0x93DD;
pub static RASTER_POSITION_UNCLIPPED_IBM: GLenum = 0x19262;
pub static CULL_VERTEX_IBM: GLenum = 103050;
pub static ALL_STATIC_DATA_IBM: GLenum = 103060;
pub static STATIC_VERTEX_ARRAY_IBM: GLenum = 103061;
pub static VERTEX_ARRAY_LIST_IBM: GLenum = 103070;
pub static NORMAL_ARRAY_LIST_IBM: GLenum = 103071;
pub static COLOR_ARRAY_LIST_IBM: GLenum = 103072;
pub static INDEX_ARRAY_LIST_IBM: GLenum = 103073;
pub static TEXTURE_COORD_ARRAY_LIST_IBM: GLenum = 103074;
pub static EDGE_FLAG_ARRAY_LIST_IBM: GLenum = 103075;
pub static FOG_COORDINATE_ARRAY_LIST_IBM: GLenum = 103076;
pub static SECONDARY_COLOR_ARRAY_LIST_IBM: GLenum = 103077;
pub static VERTEX_ARRAY_LIST_STRIDE_IBM: GLenum = 103080;
pub static NORMAL_ARRAY_LIST_STRIDE_IBM: GLenum = 103081;
pub static COLOR_ARRAY_LIST_STRIDE_IBM: GLenum = 103082;
pub static INDEX_ARRAY_LIST_STRIDE_IBM: GLenum = 103083;
pub static TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM: GLenum = 103084;
pub static EDGE_FLAG_ARRAY_LIST_STRIDE_IBM: GLenum = 103085;
pub static FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM: GLenum = 103086;
pub static SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM: GLenum = 103087;
pub static PREFER_DOUBLEBUFFER_HINT_PGI: GLenum = 0x1A1F8;
pub static CONSERVE_MEMORY_HINT_PGI: GLenum = 0x1A1FD;
pub static RECLAIM_MEMORY_HINT_PGI: GLenum = 0x1A1FE;
pub static NATIVE_GRAPHICS_HANDLE_PGI: GLenum = 0x1A202;
pub static NATIVE_GRAPHICS_BEGIN_HINT_PGI: GLenum = 0x1A203;
pub static NATIVE_GRAPHICS_END_HINT_PGI: GLenum = 0x1A204;
pub static ALWAYS_FAST_HINT_PGI: GLenum = 0x1A20C;
pub static ALWAYS_SOFT_HINT_PGI: GLenum = 0x1A20D;
pub static ALLOW_DRAW_OBJ_HINT_PGI: GLenum = 0x1A20E;
pub static ALLOW_DRAW_WIN_HINT_PGI: GLenum = 0x1A20F;
pub static ALLOW_DRAW_FRG_HINT_PGI: GLenum = 0x1A210;
pub static ALLOW_DRAW_MEM_HINT_PGI: GLenum = 0x1A211;
pub static STRICT_DEPTHFUNC_HINT_PGI: GLenum = 0x1A216;
pub static STRICT_LIGHTING_HINT_PGI: GLenum = 0x1A217;
pub static STRICT_SCISSOR_HINT_PGI: GLenum = 0x1A218;
pub static FULL_STIPPLE_HINT_PGI: GLenum = 0x1A219;
pub static CLIP_NEAR_HINT_PGI: GLenum = 0x1A220;
pub static CLIP_FAR_HINT_PGI: GLenum = 0x1A221;
pub static WIDE_LINE_HINT_PGI: GLenum = 0x1A222;
pub static BACK_NORMALS_HINT_PGI: GLenum = 0x1A223;
pub static VERTEX_DATA_HINT_PGI: GLenum = 0x1A22A;
pub static VERTEX_CONSISTENT_HINT_PGI: GLenum = 0x1A22B;
pub static MATERIAL_SIDE_HINT_PGI: GLenum = 0x1A22C;
pub static MAX_VERTEX_HINT_PGI: GLenum = 0x1A22D;
pub static MAX_CLIP_PLANES_IMG: GLenum = 0x0D32;
pub static TEXTURE_GEN_MODE_OES: GLenum = 0x2500;
pub static CLIP_PLANE0_IMG: GLenum = 0x3000;
pub static CLIP_PLANE1_IMG: GLenum = 0x3001;
pub static CLIP_PLANE2_IMG: GLenum = 0x3002;
pub static CLIP_PLANE3_IMG: GLenum = 0x3003;
pub static CLIP_PLANE4_IMG: GLenum = 0x3004;
pub static CLIP_PLANE5_IMG: GLenum = 0x3005;
pub static ALPHA8_OES: GLenum = 0x803C;
pub static LUMINANCE8_OES: GLenum = 0x8040;
pub static LUMINANCE4_ALPHA4_OES: GLenum = 0x8043;
pub static LUMINANCE8_ALPHA8_OES: GLenum = 0x8045;
pub static RGB8_OES: GLenum = 0x8051;
pub static TEXTURE_BINDING_3D_OES: GLenum = 0x806A;
pub static BGRA_IMG: GLenum = 0x80E1;
pub static TEXTURE_MAX_LEVEL_APPLE: GLenum = 0x813D;
pub static FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: GLenum = 0x8210;
pub static R32F_EXT: GLenum = 0x822E;
pub static RG32F_EXT: GLenum = 0x8230;
pub static LOSE_CONTEXT_ON_RESET_EXT: GLenum = 0x8252;
pub static GUILTY_CONTEXT_RESET_EXT: GLenum = 0x8253;
pub static INNOCENT_CONTEXT_RESET_EXT: GLenum = 0x8254;
pub static UNKNOWN_CONTEXT_RESET_EXT: GLenum = 0x8255;
pub static RESET_NOTIFICATION_STRATEGY_EXT: GLenum = 0x8256;
pub static NO_RESET_NOTIFICATION_EXT: GLenum = 0x8261;
pub static UNSIGNED_SHORT_4_4_4_4_REV_IMG: GLenum = 0x8365;
pub static VERTEX_ARRAY_BINDING_OES: GLenum = 0x85B5;
pub static RGBA32F_EXT: GLenum = 0x8814;
pub static RGB32F_EXT: GLenum = 0x8815;
pub static ALPHA32F_EXT: GLenum = 0x8816;
pub static LUMINANCE32F_EXT: GLenum = 0x8818;
pub static LUMINANCE_ALPHA32F_EXT: GLenum = 0x8819;
pub static ALPHA16F_EXT: GLenum = 0x881C;
pub static LUMINANCE16F_EXT: GLenum = 0x881E;
pub static LUMINANCE_ALPHA16F_EXT: GLenum = 0x881F;
pub static DRAW_FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CA6;
pub static DRAW_FRAMEBUFFER_BINDING_APPLE: GLenum = 0x8CA6;
pub static READ_FRAMEBUFFER_APPLE: GLenum = 0x8CA8;
pub static DRAW_FRAMEBUFFER_APPLE: GLenum = 0x8CA9;
pub static READ_FRAMEBUFFER_BINDING_ANGLE: GLenum = 0x8CAA;
pub static READ_FRAMEBUFFER_BINDING_APPLE: GLenum = 0x8CAA;
pub static RENDERBUFFER_SAMPLES_APPLE: GLenum = 0x8CAB;
pub static FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE: GLenum = 0x8D56;
pub static MAX_SAMPLES_APPLE: GLenum = 0x8D57;
pub static CONTEXT_ROBUST_ACCESS_EXT: GLenum = 0x90F3;
pub static TEXTURE_IMMUTABLE_FORMAT_EXT: GLenum = 0x912F;
pub static BGRA8_EXT: GLenum = 0x93A1;

pub struct FnPtr<F> { f: F, is_loaded: bool }

impl<F> FnPtr<F> {
    pub fn new(ptr: Option<extern "C" fn()>, failing_fn: F) -> FnPtr<F> {
        use std::cast::transmute;
        match ptr {
            Some(p) => FnPtr { f: unsafe { transmute(p) }, is_loaded: true },
            None => FnPtr { f: failing_fn, is_loaded: false },
        }
    }
}

pub struct GL {
    Accum: FnPtr<extern "C" fn(op: GLenum, value: GLfloat) -> c_void>,
    AccumxOES: FnPtr<extern "C" fn(op: GLenum, value: GLfixed) -> c_void>,
    ActiveProgramEXT: FnPtr<extern "C" fn(program: GLuint) -> c_void>,
    ActiveShaderProgram: FnPtr<extern "C" fn(pipeline: GLuint, program: GLuint) -> c_void>,
    ActiveShaderProgramEXT: FnPtr<extern "C" fn(pipeline: GLuint, program: GLuint) -> c_void>,
    ActiveStencilFaceEXT: FnPtr<extern "C" fn(face: GLenum) -> c_void>,
    ActiveTexture: FnPtr<extern "C" fn(texture: GLenum) -> c_void>,
    ActiveTextureARB: FnPtr<extern "C" fn(texture: GLenum) -> c_void>,
    ActiveVaryingNV: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> c_void>,
    AlphaFragmentOp1ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void>,
    AlphaFragmentOp2ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void>,
    AlphaFragmentOp3ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void>,
    AlphaFunc: FnPtr<extern "C" fn(func: GLenum, ref_: GLfloat) -> c_void>,
    AlphaFuncQCOM: FnPtr<extern "C" fn(func: GLenum, ref_: GLclampf) -> c_void>,
    AlphaFuncx: FnPtr<extern "C" fn(func: GLenum, ref_: GLfixed) -> c_void>,
    AlphaFuncxOES: FnPtr<extern "C" fn(func: GLenum, ref_: GLfixed) -> c_void>,
    ApplyTextureEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    AreProgramsResidentNV: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint, residences: *GLboolean) -> GLboolean>,
    AreTexturesResident: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean>,
    AreTexturesResidentEXT: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean>,
    ArrayElement: FnPtr<extern "C" fn(i: GLint) -> c_void>,
    ArrayElementEXT: FnPtr<extern "C" fn(i: GLint) -> c_void>,
    ArrayObjectATI: FnPtr<extern "C" fn(array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void>,
    AsyncMarkerSGIX: FnPtr<extern "C" fn(marker: GLuint) -> c_void>,
    AttachObjectARB: FnPtr<extern "C" fn(containerObj: GLhandleARB, obj: GLhandleARB) -> c_void>,
    AttachShader: FnPtr<extern "C" fn(program: GLuint, shader: GLuint) -> c_void>,
    Begin: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    BeginConditionalRender: FnPtr<extern "C" fn(id: GLuint, mode: GLenum) -> c_void>,
    BeginConditionalRenderNV: FnPtr<extern "C" fn(id: GLuint, mode: GLenum) -> c_void>,
    BeginConditionalRenderNVX: FnPtr<extern "C" fn(id: GLuint) -> c_void>,
    BeginFragmentShaderATI: FnPtr<extern "C" fn() -> c_void>,
    BeginOcclusionQueryNV: FnPtr<extern "C" fn(id: GLuint) -> c_void>,
    BeginPerfMonitorAMD: FnPtr<extern "C" fn(monitor: GLuint) -> c_void>,
    BeginQuery: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void>,
    BeginQueryARB: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void>,
    BeginQueryEXT: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void>,
    BeginQueryIndexed: FnPtr<extern "C" fn(target: GLenum, index: GLuint, id: GLuint) -> c_void>,
    BeginTransformFeedback: FnPtr<extern "C" fn(primitiveMode: GLenum) -> c_void>,
    BeginTransformFeedbackEXT: FnPtr<extern "C" fn(primitiveMode: GLenum) -> c_void>,
    BeginTransformFeedbackNV: FnPtr<extern "C" fn(primitiveMode: GLenum) -> c_void>,
    BeginVertexShaderEXT: FnPtr<extern "C" fn() -> c_void>,
    BeginVideoCaptureNV: FnPtr<extern "C" fn(video_capture_slot: GLuint) -> c_void>,
    BindAttribLocation: FnPtr<extern "C" fn(program: GLuint, index: GLuint, name: *GLchar) -> c_void>,
    BindAttribLocationARB: FnPtr<extern "C" fn(programObj: GLhandleARB, index: GLuint, name: *GLcharARB) -> c_void>,
    BindBuffer: FnPtr<extern "C" fn(target: GLenum, buffer: GLuint) -> c_void>,
    BindBufferARB: FnPtr<extern "C" fn(target: GLenum, buffer: GLuint) -> c_void>,
    BindBufferBase: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void>,
    BindBufferBaseEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void>,
    BindBufferBaseNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint) -> c_void>,
    BindBufferOffsetEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void>,
    BindBufferOffsetNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void>,
    BindBufferRange: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void>,
    BindBufferRangeEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void>,
    BindBufferRangeNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void>,
    BindBuffersBase: FnPtr<extern "C" fn(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) -> c_void>,
    BindBuffersRange: FnPtr<extern "C" fn(target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) -> c_void>,
    BindFragDataLocation: FnPtr<extern "C" fn(program: GLuint, color: GLuint, name: *GLchar) -> c_void>,
    BindFragDataLocationEXT: FnPtr<extern "C" fn(program: GLuint, color: GLuint, name: *GLchar) -> c_void>,
    BindFragDataLocationIndexed: FnPtr<extern "C" fn(program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) -> c_void>,
    BindFragmentShaderATI: FnPtr<extern "C" fn(id: GLuint) -> c_void>,
    BindFramebuffer: FnPtr<extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void>,
    BindFramebufferEXT: FnPtr<extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void>,
    BindFramebufferOES: FnPtr<extern "C" fn(target: GLenum, framebuffer: GLuint) -> c_void>,
    BindImageTexture: FnPtr<extern "C" fn(unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> c_void>,
    BindImageTextureEXT: FnPtr<extern "C" fn(index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) -> c_void>,
    BindImageTextures: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void>,
    BindLightParameterEXT: FnPtr<extern "C" fn(light: GLenum, value: GLenum) -> GLuint>,
    BindMaterialParameterEXT: FnPtr<extern "C" fn(face: GLenum, value: GLenum) -> GLuint>,
    BindMultiTextureEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, texture: GLuint) -> c_void>,
    BindParameterEXT: FnPtr<extern "C" fn(value: GLenum) -> GLuint>,
    BindProgramARB: FnPtr<extern "C" fn(target: GLenum, program: GLuint) -> c_void>,
    BindProgramNV: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void>,
    BindProgramPipeline: FnPtr<extern "C" fn(pipeline: GLuint) -> c_void>,
    BindProgramPipelineEXT: FnPtr<extern "C" fn(pipeline: GLuint) -> c_void>,
    BindRenderbuffer: FnPtr<extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void>,
    BindRenderbufferEXT: FnPtr<extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void>,
    BindRenderbufferOES: FnPtr<extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void>,
    BindSampler: FnPtr<extern "C" fn(unit: GLuint, sampler: GLuint) -> c_void>,
    BindSamplers: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, samplers: *GLuint) -> c_void>,
    BindTexGenParameterEXT: FnPtr<extern "C" fn(unit: GLenum, coord: GLenum, value: GLenum) -> GLuint>,
    BindTexture: FnPtr<extern "C" fn(target: GLenum, texture: GLuint) -> c_void>,
    BindTextureEXT: FnPtr<extern "C" fn(target: GLenum, texture: GLuint) -> c_void>,
    BindTextureUnitParameterEXT: FnPtr<extern "C" fn(unit: GLenum, value: GLenum) -> GLuint>,
    BindTextures: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, textures: *GLuint) -> c_void>,
    BindTransformFeedback: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void>,
    BindTransformFeedbackNV: FnPtr<extern "C" fn(target: GLenum, id: GLuint) -> c_void>,
    BindVertexArray: FnPtr<extern "C" fn(array: GLuint) -> c_void>,
    BindVertexArrayAPPLE: FnPtr<extern "C" fn(array: GLuint) -> c_void>,
    BindVertexArrayOES: FnPtr<extern "C" fn(array: GLuint) -> c_void>,
    BindVertexBuffer: FnPtr<extern "C" fn(bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void>,
    BindVertexBuffers: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) -> c_void>,
    BindVertexShaderEXT: FnPtr<extern "C" fn(id: GLuint) -> c_void>,
    BindVideoCaptureStreamBufferNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) -> c_void>,
    BindVideoCaptureStreamTextureNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) -> c_void>,
    Binormal3bEXT: FnPtr<extern "C" fn(bx: GLbyte, by: GLbyte, bz: GLbyte) -> c_void>,
    Binormal3bvEXT: FnPtr<extern "C" fn(v: *GLbyte) -> c_void>,
    Binormal3dEXT: FnPtr<extern "C" fn(bx: GLdouble, by: GLdouble, bz: GLdouble) -> c_void>,
    Binormal3dvEXT: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    Binormal3fEXT: FnPtr<extern "C" fn(bx: GLfloat, by: GLfloat, bz: GLfloat) -> c_void>,
    Binormal3fvEXT: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    Binormal3iEXT: FnPtr<extern "C" fn(bx: GLint, by: GLint, bz: GLint) -> c_void>,
    Binormal3ivEXT: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    Binormal3sEXT: FnPtr<extern "C" fn(bx: GLshort, by: GLshort, bz: GLshort) -> c_void>,
    Binormal3svEXT: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    BinormalPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    Bitmap: FnPtr<extern "C" fn(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) -> c_void>,
    BitmapxOES: FnPtr<extern "C" fn(width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *GLubyte) -> c_void>,
    BlendColor: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void>,
    BlendColorEXT: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void>,
    BlendColorxOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void>,
    BlendEquation: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    BlendEquationEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    BlendEquationIndexedAMD: FnPtr<extern "C" fn(buf: GLuint, mode: GLenum) -> c_void>,
    BlendEquationOES: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    BlendEquationSeparate: FnPtr<extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void>,
    BlendEquationSeparateEXT: FnPtr<extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void>,
    BlendEquationSeparateIndexedAMD: FnPtr<extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void>,
    BlendEquationSeparateOES: FnPtr<extern "C" fn(modeRGB: GLenum, modeAlpha: GLenum) -> c_void>,
    BlendEquationSeparatei: FnPtr<extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void>,
    BlendEquationSeparateiARB: FnPtr<extern "C" fn(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void>,
    BlendEquationi: FnPtr<extern "C" fn(buf: GLuint, mode: GLenum) -> c_void>,
    BlendEquationiARB: FnPtr<extern "C" fn(buf: GLuint, mode: GLenum) -> c_void>,
    BlendFunc: FnPtr<extern "C" fn(sfactor: GLenum, dfactor: GLenum) -> c_void>,
    BlendFuncIndexedAMD: FnPtr<extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void>,
    BlendFuncSeparate: FnPtr<extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void>,
    BlendFuncSeparateEXT: FnPtr<extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void>,
    BlendFuncSeparateINGR: FnPtr<extern "C" fn(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void>,
    BlendFuncSeparateIndexedAMD: FnPtr<extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void>,
    BlendFuncSeparateOES: FnPtr<extern "C" fn(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void>,
    BlendFuncSeparatei: FnPtr<extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void>,
    BlendFuncSeparateiARB: FnPtr<extern "C" fn(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void>,
    BlendFunci: FnPtr<extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void>,
    BlendFunciARB: FnPtr<extern "C" fn(buf: GLuint, src: GLenum, dst: GLenum) -> c_void>,
    BlendParameteriNV: FnPtr<extern "C" fn(pname: GLenum, value: GLint) -> c_void>,
    BlendBarrierNV: FnPtr<extern "C" fn() -> c_void>,
    BlitFramebuffer: FnPtr<extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void>,
    BlitFramebufferANGLE: FnPtr<extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void>,
    BlitFramebufferEXT: FnPtr<extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void>,
    BlitFramebufferNV: FnPtr<extern "C" fn(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void>,
    BufferAddressRangeNV: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) -> c_void>,
    BufferData: FnPtr<extern "C" fn(target: GLenum, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void>,
    BufferDataARB: FnPtr<extern "C" fn(target: GLenum, size: GLsizeiptrARB, data: *GLvoid, usage: GLenum) -> c_void>,
    BufferParameteriAPPLE: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    BufferStorage: FnPtr<extern "C" fn(target: GLenum, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void>,
    BufferSubData: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void>,
    BufferSubDataARB: FnPtr<extern "C" fn(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void>,
    CallList: FnPtr<extern "C" fn(list: GLuint) -> c_void>,
    CallLists: FnPtr<extern "C" fn(n: GLsizei, type_: GLenum, lists: *GLvoid) -> c_void>,
    CheckFramebufferStatus: FnPtr<extern "C" fn(target: GLenum) -> GLenum>,
    CheckFramebufferStatusEXT: FnPtr<extern "C" fn(target: GLenum) -> GLenum>,
    CheckFramebufferStatusOES: FnPtr<extern "C" fn(target: GLenum) -> GLenum>,
    CheckNamedFramebufferStatusEXT: FnPtr<extern "C" fn(framebuffer: GLuint, target: GLenum) -> GLenum>,
    ClampColor: FnPtr<extern "C" fn(target: GLenum, clamp: GLenum) -> c_void>,
    ClampColorARB: FnPtr<extern "C" fn(target: GLenum, clamp: GLenum) -> c_void>,
    Clear: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void>,
    ClearAccum: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void>,
    ClearAccumxOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void>,
    ClearBufferData: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void>,
    ClearBufferSubData: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *c_void) -> c_void>,
    ClearBufferfi: FnPtr<extern "C" fn(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> c_void>,
    ClearBufferfv: FnPtr<extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> c_void>,
    ClearBufferiv: FnPtr<extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLint) -> c_void>,
    ClearBufferuiv: FnPtr<extern "C" fn(buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> c_void>,
    ClearColor: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void>,
    ClearColorIiEXT: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void>,
    ClearColorIuiEXT: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void>,
    ClearColorx: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void>,
    ClearColorxOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void>,
    ClearDepth: FnPtr<extern "C" fn(depth: GLdouble) -> c_void>,
    ClearDepthdNV: FnPtr<extern "C" fn(depth: GLdouble) -> c_void>,
    ClearDepthf: FnPtr<extern "C" fn(d: GLfloat) -> c_void>,
    ClearDepthfOES: FnPtr<extern "C" fn(depth: GLclampf) -> c_void>,
    ClearDepthx: FnPtr<extern "C" fn(depth: GLfixed) -> c_void>,
    ClearDepthxOES: FnPtr<extern "C" fn(depth: GLfixed) -> c_void>,
    ClearIndex: FnPtr<extern "C" fn(c: GLfloat) -> c_void>,
    ClearNamedBufferDataEXT: FnPtr<extern "C" fn(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void>,
    ClearNamedBufferSubDataEXT: FnPtr<extern "C" fn(buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, offset: GLsizeiptr, size: GLsizeiptr, data: *c_void) -> c_void>,
    ClearStencil: FnPtr<extern "C" fn(s: GLint) -> c_void>,
    ClearTexImage: FnPtr<extern "C" fn(texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *c_void) -> c_void>,
    ClearTexSubImage: FnPtr<extern "C" fn(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *c_void) -> c_void>,
    ClientActiveTexture: FnPtr<extern "C" fn(texture: GLenum) -> c_void>,
    ClientActiveTextureARB: FnPtr<extern "C" fn(texture: GLenum) -> c_void>,
    ClientActiveVertexStreamATI: FnPtr<extern "C" fn(stream: GLenum) -> c_void>,
    ClientAttribDefaultEXT: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void>,
    ClientWaitSync: FnPtr<extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum>,
    ClientWaitSyncAPPLE: FnPtr<extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum>,
    ClipControlARB: FnPtr<extern "C" fn(origin: GLenum, depth: GLenum) -> c_void>,
    ClipPlane: FnPtr<extern "C" fn(plane: GLenum, equation: *GLdouble) -> c_void>,
    ClipPlanef: FnPtr<extern "C" fn(p: GLenum, eqn: *GLfloat) -> c_void>,
    ClipPlanefIMG: FnPtr<extern "C" fn(p: GLenum, eqn: *GLfloat) -> c_void>,
    ClipPlanefOES: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void>,
    ClipPlanex: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void>,
    ClipPlanexIMG: FnPtr<extern "C" fn(p: GLenum, eqn: *GLfixed) -> c_void>,
    ClipPlanexOES: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void>,
    Color3b: FnPtr<extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void>,
    Color3bv: FnPtr<extern "C" fn(v: *GLbyte) -> c_void>,
    Color3d: FnPtr<extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void>,
    Color3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    Color3f: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void>,
    Color3fVertex3fSUN: FnPtr<extern "C" fn(r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    Color3fVertex3fvSUN: FnPtr<extern "C" fn(c: *GLfloat, v: *GLfloat) -> c_void>,
    Color3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    Color3hNV: FnPtr<extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void>,
    Color3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    Color3i: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void>,
    Color3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    Color3s: FnPtr<extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void>,
    Color3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    Color3ub: FnPtr<extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void>,
    Color3ubv: FnPtr<extern "C" fn(v: *GLubyte) -> c_void>,
    Color3ui: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void>,
    Color3uiv: FnPtr<extern "C" fn(v: *GLuint) -> c_void>,
    Color3us: FnPtr<extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void>,
    Color3usv: FnPtr<extern "C" fn(v: *GLushort) -> c_void>,
    Color3xOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed) -> c_void>,
    Color3xvOES: FnPtr<extern "C" fn(components: *GLfixed) -> c_void>,
    Color4b: FnPtr<extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> c_void>,
    Color4bv: FnPtr<extern "C" fn(v: *GLbyte) -> c_void>,
    Color4d: FnPtr<extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> c_void>,
    Color4dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    Color4f: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void>,
    Color4fNormal3fVertex3fSUN: FnPtr<extern "C" fn(r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    Color4fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void>,
    Color4fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    Color4hNV: FnPtr<extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) -> c_void>,
    Color4hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    Color4i: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void>,
    Color4iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    Color4s: FnPtr<extern "C" fn(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> c_void>,
    Color4sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    Color4ub: FnPtr<extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> c_void>,
    Color4ubVertex2fSUN: FnPtr<extern "C" fn(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) -> c_void>,
    Color4ubVertex2fvSUN: FnPtr<extern "C" fn(c: *GLubyte, v: *GLfloat) -> c_void>,
    Color4ubVertex3fSUN: FnPtr<extern "C" fn(r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    Color4ubVertex3fvSUN: FnPtr<extern "C" fn(c: *GLubyte, v: *GLfloat) -> c_void>,
    Color4ubv: FnPtr<extern "C" fn(v: *GLubyte) -> c_void>,
    Color4ui: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void>,
    Color4uiv: FnPtr<extern "C" fn(v: *GLuint) -> c_void>,
    Color4us: FnPtr<extern "C" fn(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> c_void>,
    Color4usv: FnPtr<extern "C" fn(v: *GLushort) -> c_void>,
    Color4x: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void>,
    Color4xOES: FnPtr<extern "C" fn(red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void>,
    Color4xvOES: FnPtr<extern "C" fn(components: *GLfixed) -> c_void>,
    ColorFormatNV: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void>,
    ColorFragmentOp1ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void>,
    ColorFragmentOp2ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void>,
    ColorFragmentOp3ATI: FnPtr<extern "C" fn(op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void>,
    ColorMask: FnPtr<extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void>,
    ColorMaskIndexedEXT: FnPtr<extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void>,
    ColorMaski: FnPtr<extern "C" fn(index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void>,
    ColorMaterial: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void>,
    ColorP3ui: FnPtr<extern "C" fn(type_: GLenum, color: GLuint) -> c_void>,
    ColorP3uiv: FnPtr<extern "C" fn(type_: GLenum, color: *GLuint) -> c_void>,
    ColorP4ui: FnPtr<extern "C" fn(type_: GLenum, color: GLuint) -> c_void>,
    ColorP4uiv: FnPtr<extern "C" fn(type_: GLenum, color: *GLuint) -> c_void>,
    ColorPointer: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    ColorPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void>,
    ColorPointerListIBM: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void>,
    ColorPointervINTEL: FnPtr<extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void>,
    ColorSubTable: FnPtr<extern "C" fn(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void>,
    ColorSubTableEXT: FnPtr<extern "C" fn(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void>,
    ColorTable: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void>,
    ColorTableEXT: FnPtr<extern "C" fn(target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void>,
    ColorTableParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    ColorTableParameterfvSGI: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    ColorTableParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    ColorTableParameterivSGI: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    ColorTableSGI: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void>,
    CombinerInputNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void>,
    CombinerOutputNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) -> c_void>,
    CombinerParameterfNV: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    CombinerParameterfvNV: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    CombinerParameteriNV: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    CombinerParameterivNV: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    CombinerStageParameterfvNV: FnPtr<extern "C" fn(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    CompileShader: FnPtr<extern "C" fn(shader: GLuint) -> c_void>,
    CompileShaderARB: FnPtr<extern "C" fn(shaderObj: GLhandleARB) -> c_void>,
    CompileShaderIncludeARB: FnPtr<extern "C" fn(shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) -> c_void>,
    CompressedMultiTexImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedMultiTexImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedMultiTexImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedMultiTexSubImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedMultiTexSubImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedMultiTexSubImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedTexImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexImage1DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexImage2DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexImage3DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexSubImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexSubImage1DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexSubImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexSubImage2DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexSubImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexSubImage3DARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTexSubImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void>,
    CompressedTextureImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedTextureImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedTextureImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedTextureSubImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedTextureSubImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    CompressedTextureSubImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void>,
    ConvolutionFilter1D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void>,
    ConvolutionFilter1DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void>,
    ConvolutionFilter2D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void>,
    ConvolutionFilter2DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void>,
    ConvolutionParameterf: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat) -> c_void>,
    ConvolutionParameterfEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: GLfloat) -> c_void>,
    ConvolutionParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    ConvolutionParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    ConvolutionParameteri: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: GLint) -> c_void>,
    ConvolutionParameteriEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: GLint) -> c_void>,
    ConvolutionParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    ConvolutionParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    ConvolutionParameterxOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    ConvolutionParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    CopyBufferSubData: FnPtr<extern "C" fn(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void>,
    CopyColorSubTable: FnPtr<extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyColorSubTableEXT: FnPtr<extern "C" fn(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyColorTable: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyColorTableSGI: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyConvolutionFilter1D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyConvolutionFilter1DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyConvolutionFilter2D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyConvolutionFilter2DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyImageSubData: FnPtr<extern "C" fn(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> c_void>,
    CopyImageSubDataNV: FnPtr<extern "C" fn(srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void>,
    CopyMultiTexImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void>,
    CopyMultiTexImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void>,
    CopyMultiTexSubImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyMultiTexSubImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyMultiTexSubImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyPathNV: FnPtr<extern "C" fn(resultPath: GLuint, srcPath: GLuint) -> c_void>,
    CopyPixels: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum) -> c_void>,
    CopyTexImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void>,
    CopyTexImage1DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void>,
    CopyTexImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void>,
    CopyTexImage2DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void>,
    CopyTexSubImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyTexSubImage1DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyTexSubImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyTexSubImage2DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyTexSubImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyTexSubImage3DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyTexSubImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyTextureImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void>,
    CopyTextureImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void>,
    CopyTextureLevelsAPPLE: FnPtr<extern "C" fn(destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) -> c_void>,
    CopyTextureSubImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void>,
    CopyTextureSubImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CopyTextureSubImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    CoverFillPathInstancedNV: FnPtr<extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void>,
    CoverFillPathNV: FnPtr<extern "C" fn(path: GLuint, coverMode: GLenum) -> c_void>,
    CoverStrokePathInstancedNV: FnPtr<extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void>,
    CoverStrokePathNV: FnPtr<extern "C" fn(path: GLuint, coverMode: GLenum) -> c_void>,
    CoverageMaskNV: FnPtr<extern "C" fn(mask: GLboolean) -> c_void>,
    CoverageOperationNV: FnPtr<extern "C" fn(operation: GLenum) -> c_void>,
    CreateProgram: FnPtr<extern "C" fn() -> GLuint>,
    CreateProgramObjectARB: FnPtr<extern "C" fn() -> GLhandleARB>,
    CreateShader: FnPtr<extern "C" fn(type_: GLenum) -> GLuint>,
    CreateShaderObjectARB: FnPtr<extern "C" fn(shaderType: GLenum) -> GLhandleARB>,
    CreateShaderProgramEXT: FnPtr<extern "C" fn(type_: GLenum, string: *GLchar) -> GLuint>,
    CreateShaderProgramv: FnPtr<extern "C" fn(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint>,
    CreateShaderProgramvEXT: FnPtr<extern "C" fn(type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint>,
    CreateSyncFromCLeventARB: FnPtr<extern "C" fn(context: *_cl_context, event: *_cl_event, flags: GLbitfield) -> GLsync>,
    CullFace: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    CullParameterdvEXT: FnPtr<extern "C" fn(pname: GLenum, params: *GLdouble) -> c_void>,
    CullParameterfvEXT: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    CurrentPaletteMatrixARB: FnPtr<extern "C" fn(index: GLint) -> c_void>,
    CurrentPaletteMatrixOES: FnPtr<extern "C" fn(matrixpaletteindex: GLuint) -> c_void>,
    DebugMessageCallback: FnPtr<extern "C" fn(callback: GLDEBUGPROC, userParam: *c_void) -> c_void>,
    DebugMessageCallbackAMD: FnPtr<extern "C" fn(callback: GLDEBUGPROCAMD, userParam: *c_void) -> c_void>,
    DebugMessageCallbackARB: FnPtr<extern "C" fn(callback: GLDEBUGPROCARB, userParam: *c_void) -> c_void>,
    DebugMessageCallbackKHR: FnPtr<extern "C" fn(callback: GLDEBUGPROCKHR, userParam: *c_void) -> c_void>,
    DebugMessageControl: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void>,
    DebugMessageControlARB: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void>,
    DebugMessageControlKHR: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void>,
    DebugMessageEnableAMD: FnPtr<extern "C" fn(category: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void>,
    DebugMessageInsert: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void>,
    DebugMessageInsertAMD: FnPtr<extern "C" fn(category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *GLchar) -> c_void>,
    DebugMessageInsertARB: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void>,
    DebugMessageInsertKHR: FnPtr<extern "C" fn(source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void>,
    DeformSGIX: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void>,
    DeformationMap3dSGIX: FnPtr<extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *GLdouble) -> c_void>,
    DeformationMap3fSGIX: FnPtr<extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *GLfloat) -> c_void>,
    DeleteAsyncMarkersSGIX: FnPtr<extern "C" fn(marker: GLuint, range: GLsizei) -> c_void>,
    DeleteBuffers: FnPtr<extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void>,
    DeleteBuffersARB: FnPtr<extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void>,
    DeleteFencesAPPLE: FnPtr<extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void>,
    DeleteFencesNV: FnPtr<extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void>,
    DeleteFragmentShaderATI: FnPtr<extern "C" fn(id: GLuint) -> c_void>,
    DeleteFramebuffers: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void>,
    DeleteFramebuffersEXT: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void>,
    DeleteFramebuffersOES: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void>,
    DeleteLists: FnPtr<extern "C" fn(list: GLuint, range: GLsizei) -> c_void>,
    DeleteNamedStringARB: FnPtr<extern "C" fn(namelen: GLint, name: *GLchar) -> c_void>,
    DeleteNamesAMD: FnPtr<extern "C" fn(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void>,
    DeleteObjectARB: FnPtr<extern "C" fn(obj: GLhandleARB) -> c_void>,
    DeleteOcclusionQueriesNV: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    DeletePathsNV: FnPtr<extern "C" fn(path: GLuint, range: GLsizei) -> c_void>,
    DeletePerfMonitorsAMD: FnPtr<extern "C" fn(n: GLsizei, monitors: *GLuint) -> c_void>,
    DeleteProgram: FnPtr<extern "C" fn(program: GLuint) -> c_void>,
    DeleteProgramPipelines: FnPtr<extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void>,
    DeleteProgramPipelinesEXT: FnPtr<extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void>,
    DeleteProgramsARB: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void>,
    DeleteProgramsNV: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void>,
    DeleteQueries: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    DeleteQueriesARB: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    DeleteQueriesEXT: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    DeleteRenderbuffers: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void>,
    DeleteRenderbuffersEXT: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void>,
    DeleteRenderbuffersOES: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void>,
    DeleteSamplers: FnPtr<extern "C" fn(count: GLsizei, samplers: *GLuint) -> c_void>,
    DeleteShader: FnPtr<extern "C" fn(shader: GLuint) -> c_void>,
    DeleteSync: FnPtr<extern "C" fn(sync: GLsync) -> c_void>,
    DeleteSyncAPPLE: FnPtr<extern "C" fn(sync: GLsync) -> c_void>,
    DeleteTextures: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void>,
    DeleteTexturesEXT: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void>,
    DeleteTransformFeedbacks: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    DeleteTransformFeedbacksNV: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    DeleteVertexArrays: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void>,
    DeleteVertexArraysAPPLE: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void>,
    DeleteVertexArraysOES: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void>,
    DeleteVertexShaderEXT: FnPtr<extern "C" fn(id: GLuint) -> c_void>,
    DepthBoundsEXT: FnPtr<extern "C" fn(zmin: GLclampd, zmax: GLclampd) -> c_void>,
    DepthBoundsdNV: FnPtr<extern "C" fn(zmin: GLdouble, zmax: GLdouble) -> c_void>,
    DepthFunc: FnPtr<extern "C" fn(func: GLenum) -> c_void>,
    DepthMask: FnPtr<extern "C" fn(flag: GLboolean) -> c_void>,
    DepthRange: FnPtr<extern "C" fn(near: GLdouble, far: GLdouble) -> c_void>,
    DepthRangeArrayv: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, v: *GLdouble) -> c_void>,
    DepthRangeIndexed: FnPtr<extern "C" fn(index: GLuint, n: GLdouble, f: GLdouble) -> c_void>,
    DepthRangedNV: FnPtr<extern "C" fn(zNear: GLdouble, zFar: GLdouble) -> c_void>,
    DepthRangef: FnPtr<extern "C" fn(n: GLfloat, f: GLfloat) -> c_void>,
    DepthRangefOES: FnPtr<extern "C" fn(n: GLclampf, f: GLclampf) -> c_void>,
    DepthRangex: FnPtr<extern "C" fn(n: GLfixed, f: GLfixed) -> c_void>,
    DepthRangexOES: FnPtr<extern "C" fn(n: GLfixed, f: GLfixed) -> c_void>,
    DetachObjectARB: FnPtr<extern "C" fn(containerObj: GLhandleARB, attachedObj: GLhandleARB) -> c_void>,
    DetachShader: FnPtr<extern "C" fn(program: GLuint, shader: GLuint) -> c_void>,
    DetailTexFuncSGIS: FnPtr<extern "C" fn(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void>,
    Disable: FnPtr<extern "C" fn(cap: GLenum) -> c_void>,
    DisableClientState: FnPtr<extern "C" fn(array: GLenum) -> c_void>,
    DisableClientStateIndexedEXT: FnPtr<extern "C" fn(array: GLenum, index: GLuint) -> c_void>,
    DisableClientStateiEXT: FnPtr<extern "C" fn(array: GLenum, index: GLuint) -> c_void>,
    DisableDriverControlQCOM: FnPtr<extern "C" fn(driverControl: GLuint) -> c_void>,
    DisableIndexedEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void>,
    DisableVariantClientStateEXT: FnPtr<extern "C" fn(id: GLuint) -> c_void>,
    DisableVertexArrayAttribEXT: FnPtr<extern "C" fn(vaobj: GLuint, index: GLuint) -> c_void>,
    DisableVertexArrayEXT: FnPtr<extern "C" fn(vaobj: GLuint, array: GLenum) -> c_void>,
    DisableVertexAttribAPPLE: FnPtr<extern "C" fn(index: GLuint, pname: GLenum) -> c_void>,
    DisableVertexAttribArray: FnPtr<extern "C" fn(index: GLuint) -> c_void>,
    DisableVertexAttribArrayARB: FnPtr<extern "C" fn(index: GLuint) -> c_void>,
    Disablei: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void>,
    DiscardFramebufferEXT: FnPtr<extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void>,
    DispatchCompute: FnPtr<extern "C" fn(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> c_void>,
    DispatchComputeGroupSizeARB: FnPtr<extern "C" fn(num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) -> c_void>,
    DispatchComputeIndirect: FnPtr<extern "C" fn(indirect: GLintptr) -> c_void>,
    DrawArrays: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void>,
    DrawArraysEXT: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void>,
    DrawArraysIndirect: FnPtr<extern "C" fn(mode: GLenum, indirect: *GLvoid) -> c_void>,
    DrawArraysInstanced: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> c_void>,
    DrawArraysInstancedANGLE: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void>,
    DrawArraysInstancedARB: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void>,
    DrawArraysInstancedBaseInstance: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> c_void>,
    DrawArraysInstancedEXT: FnPtr<extern "C" fn(mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> c_void>,
    DrawArraysInstancedNV: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void>,
    DrawBuffer: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    DrawBuffers: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void>,
    DrawBuffersARB: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void>,
    DrawBuffersATI: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void>,
    DrawBuffersEXT: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void>,
    DrawBuffersIndexedEXT: FnPtr<extern "C" fn(n: GLint, location: *GLenum, indices: *GLint) -> c_void>,
    DrawBuffersNV: FnPtr<extern "C" fn(n: GLsizei, bufs: *GLenum) -> c_void>,
    DrawElementArrayAPPLE: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei) -> c_void>,
    DrawElementArrayATI: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei) -> c_void>,
    DrawElements: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void>,
    DrawElementsBaseVertex: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void>,
    DrawElementsIndirect: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid) -> c_void>,
    DrawElementsInstanced: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei) -> c_void>,
    DrawElementsInstancedANGLE: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, primcount: GLsizei) -> c_void>,
    DrawElementsInstancedARB: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void>,
    DrawElementsInstancedBaseInstance: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, baseinstance: GLuint) -> c_void>,
    DrawElementsInstancedBaseVertex: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei, basevertex: GLint) -> c_void>,
    DrawElementsInstancedBaseVertexBaseInstance: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> c_void>,
    DrawElementsInstancedEXT: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void>,
    DrawElementsInstancedNV: FnPtr<extern "C" fn(mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void>,
    DrawMeshArraysSUN: FnPtr<extern "C" fn(mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) -> c_void>,
    DrawPixels: FnPtr<extern "C" fn(width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    DrawRangeElementArrayAPPLE: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) -> c_void>,
    DrawRangeElementArrayATI: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) -> c_void>,
    DrawRangeElements: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void>,
    DrawRangeElementsBaseVertex: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void>,
    DrawRangeElementsEXT: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void>,
    DrawTexfOES: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, width: GLfloat, height: GLfloat) -> c_void>,
    DrawTexfvOES: FnPtr<extern "C" fn(coords: *GLfloat) -> c_void>,
    DrawTexiOES: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint, width: GLint, height: GLint) -> c_void>,
    DrawTexivOES: FnPtr<extern "C" fn(coords: *GLint) -> c_void>,
    DrawTexsOES: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort, width: GLshort, height: GLshort) -> c_void>,
    DrawTexsvOES: FnPtr<extern "C" fn(coords: *GLshort) -> c_void>,
    DrawTextureNV: FnPtr<extern "C" fn(texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> c_void>,
    DrawTexxOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed, width: GLfixed, height: GLfixed) -> c_void>,
    DrawTexxvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    DrawTransformFeedback: FnPtr<extern "C" fn(mode: GLenum, id: GLuint) -> c_void>,
    DrawTransformFeedbackInstanced: FnPtr<extern "C" fn(mode: GLenum, id: GLuint, instancecount: GLsizei) -> c_void>,
    DrawTransformFeedbackNV: FnPtr<extern "C" fn(mode: GLenum, id: GLuint) -> c_void>,
    DrawTransformFeedbackStream: FnPtr<extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint) -> c_void>,
    DrawTransformFeedbackStreamInstanced: FnPtr<extern "C" fn(mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> c_void>,
    EGLImageTargetRenderbufferStorageOES: FnPtr<extern "C" fn(target: GLenum, image: GLeglImageOES) -> c_void>,
    EGLImageTargetTexture2DOES: FnPtr<extern "C" fn(target: GLenum, image: GLeglImageOES) -> c_void>,
    EdgeFlag: FnPtr<extern "C" fn(flag: GLboolean) -> c_void>,
    EdgeFlagFormatNV: FnPtr<extern "C" fn(stride: GLsizei) -> c_void>,
    EdgeFlagPointer: FnPtr<extern "C" fn(stride: GLsizei, pointer: *GLvoid) -> c_void>,
    EdgeFlagPointerEXT: FnPtr<extern "C" fn(stride: GLsizei, count: GLsizei, pointer: *GLboolean) -> c_void>,
    EdgeFlagPointerListIBM: FnPtr<extern "C" fn(stride: GLint, pointer: **GLboolean, ptrstride: GLint) -> c_void>,
    EdgeFlagv: FnPtr<extern "C" fn(flag: *GLboolean) -> c_void>,
    ElementPointerAPPLE: FnPtr<extern "C" fn(type_: GLenum, pointer: *GLvoid) -> c_void>,
    ElementPointerATI: FnPtr<extern "C" fn(type_: GLenum, pointer: *GLvoid) -> c_void>,
    Enable: FnPtr<extern "C" fn(cap: GLenum) -> c_void>,
    EnableClientState: FnPtr<extern "C" fn(array: GLenum) -> c_void>,
    EnableClientStateIndexedEXT: FnPtr<extern "C" fn(array: GLenum, index: GLuint) -> c_void>,
    EnableClientStateiEXT: FnPtr<extern "C" fn(array: GLenum, index: GLuint) -> c_void>,
    EnableDriverControlQCOM: FnPtr<extern "C" fn(driverControl: GLuint) -> c_void>,
    EnableIndexedEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void>,
    EnableVariantClientStateEXT: FnPtr<extern "C" fn(id: GLuint) -> c_void>,
    EnableVertexArrayAttribEXT: FnPtr<extern "C" fn(vaobj: GLuint, index: GLuint) -> c_void>,
    EnableVertexArrayEXT: FnPtr<extern "C" fn(vaobj: GLuint, array: GLenum) -> c_void>,
    EnableVertexAttribAPPLE: FnPtr<extern "C" fn(index: GLuint, pname: GLenum) -> c_void>,
    EnableVertexAttribArray: FnPtr<extern "C" fn(index: GLuint) -> c_void>,
    EnableVertexAttribArrayARB: FnPtr<extern "C" fn(index: GLuint) -> c_void>,
    Enablei: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void>,
    End: FnPtr<extern "C" fn() -> c_void>,
    EndConditionalRender: FnPtr<extern "C" fn() -> c_void>,
    EndConditionalRenderNV: FnPtr<extern "C" fn() -> c_void>,
    EndConditionalRenderNVX: FnPtr<extern "C" fn() -> c_void>,
    EndFragmentShaderATI: FnPtr<extern "C" fn() -> c_void>,
    EndList: FnPtr<extern "C" fn() -> c_void>,
    EndOcclusionQueryNV: FnPtr<extern "C" fn() -> c_void>,
    EndPerfMonitorAMD: FnPtr<extern "C" fn(monitor: GLuint) -> c_void>,
    EndQuery: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    EndQueryARB: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    EndQueryEXT: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    EndQueryIndexed: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> c_void>,
    EndTilingQCOM: FnPtr<extern "C" fn(preserveMask: GLbitfield) -> c_void>,
    EndTransformFeedback: FnPtr<extern "C" fn() -> c_void>,
    EndTransformFeedbackEXT: FnPtr<extern "C" fn() -> c_void>,
    EndTransformFeedbackNV: FnPtr<extern "C" fn() -> c_void>,
    EndVertexShaderEXT: FnPtr<extern "C" fn() -> c_void>,
    EndVideoCaptureNV: FnPtr<extern "C" fn(video_capture_slot: GLuint) -> c_void>,
    EvalCoord1d: FnPtr<extern "C" fn(u: GLdouble) -> c_void>,
    EvalCoord1dv: FnPtr<extern "C" fn(u: *GLdouble) -> c_void>,
    EvalCoord1f: FnPtr<extern "C" fn(u: GLfloat) -> c_void>,
    EvalCoord1fv: FnPtr<extern "C" fn(u: *GLfloat) -> c_void>,
    EvalCoord1xOES: FnPtr<extern "C" fn(u: GLfixed) -> c_void>,
    EvalCoord1xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    EvalCoord2d: FnPtr<extern "C" fn(u: GLdouble, v: GLdouble) -> c_void>,
    EvalCoord2dv: FnPtr<extern "C" fn(u: *GLdouble) -> c_void>,
    EvalCoord2f: FnPtr<extern "C" fn(u: GLfloat, v: GLfloat) -> c_void>,
    EvalCoord2fv: FnPtr<extern "C" fn(u: *GLfloat) -> c_void>,
    EvalCoord2xOES: FnPtr<extern "C" fn(u: GLfixed, v: GLfixed) -> c_void>,
    EvalCoord2xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    EvalMapsNV: FnPtr<extern "C" fn(target: GLenum, mode: GLenum) -> c_void>,
    EvalMesh1: FnPtr<extern "C" fn(mode: GLenum, i1: GLint, i2: GLint) -> c_void>,
    EvalMesh2: FnPtr<extern "C" fn(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> c_void>,
    EvalPoint1: FnPtr<extern "C" fn(i: GLint) -> c_void>,
    EvalPoint2: FnPtr<extern "C" fn(i: GLint, j: GLint) -> c_void>,
    ExecuteProgramNV: FnPtr<extern "C" fn(target: GLenum, id: GLuint, params: *GLfloat) -> c_void>,
    ExtGetBufferPointervQCOM: FnPtr<extern "C" fn(target: GLenum, params: **GLvoid) -> c_void>,
    ExtGetBuffersQCOM: FnPtr<extern "C" fn(buffers: *GLuint, maxBuffers: GLint, numBuffers: *GLint) -> c_void>,
    ExtGetFramebuffersQCOM: FnPtr<extern "C" fn(framebuffers: *GLuint, maxFramebuffers: GLint, numFramebuffers: *GLint) -> c_void>,
    ExtGetProgramBinarySourceQCOM: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, source: *GLchar, length: *GLint) -> c_void>,
    ExtGetProgramsQCOM: FnPtr<extern "C" fn(programs: *GLuint, maxPrograms: GLint, numPrograms: *GLint) -> c_void>,
    ExtGetRenderbuffersQCOM: FnPtr<extern "C" fn(renderbuffers: *GLuint, maxRenderbuffers: GLint, numRenderbuffers: *GLint) -> c_void>,
    ExtGetShadersQCOM: FnPtr<extern "C" fn(shaders: *GLuint, maxShaders: GLint, numShaders: *GLint) -> c_void>,
    ExtGetTexLevelParameterivQCOM: FnPtr<extern "C" fn(texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void>,
    ExtGetTexSubImageQCOM: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, texels: *GLvoid) -> c_void>,
    ExtGetTexturesQCOM: FnPtr<extern "C" fn(textures: *GLuint, maxTextures: GLint, numTextures: *GLint) -> c_void>,
    ExtIsProgramBinaryQCOM: FnPtr<extern "C" fn(program: GLuint) -> GLboolean>,
    ExtTexObjectStateOverrideiQCOM: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    ExtractComponentEXT: FnPtr<extern "C" fn(res: GLuint, src: GLuint, num: GLuint) -> c_void>,
    FeedbackBuffer: FnPtr<extern "C" fn(size: GLsizei, type_: GLenum, buffer: *GLfloat) -> c_void>,
    FeedbackBufferxOES: FnPtr<extern "C" fn(n: GLsizei, type_: GLenum, buffer: *GLfixed) -> c_void>,
    FenceSync: FnPtr<extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync>,
    FenceSyncAPPLE: FnPtr<extern "C" fn(condition: GLenum, flags: GLbitfield) -> GLsync>,
    FinalCombinerInputNV: FnPtr<extern "C" fn(variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void>,
    Finish: FnPtr<extern "C" fn() -> c_void>,
    FinishAsyncSGIX: FnPtr<extern "C" fn(markerp: *GLuint) -> GLint>,
    FinishFenceAPPLE: FnPtr<extern "C" fn(fence: GLuint) -> c_void>,
    FinishFenceNV: FnPtr<extern "C" fn(fence: GLuint) -> c_void>,
    FinishObjectAPPLE: FnPtr<extern "C" fn(object: GLenum, name: GLint) -> c_void>,
    FinishTextureSUNX: FnPtr<extern "C" fn() -> c_void>,
    Flush: FnPtr<extern "C" fn() -> c_void>,
    FlushMappedBufferRange: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void>,
    FlushMappedBufferRangeAPPLE: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr) -> c_void>,
    FlushMappedBufferRangeEXT: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void>,
    FlushMappedNamedBufferRangeEXT: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void>,
    FlushPixelDataRangeNV: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    FlushRasterSGIX: FnPtr<extern "C" fn() -> c_void>,
    FlushStaticDataIBM: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    FlushVertexArrayRangeAPPLE: FnPtr<extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void>,
    FlushVertexArrayRangeNV: FnPtr<extern "C" fn() -> c_void>,
    FogCoordFormatNV: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void>,
    FogCoordPointer: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    FogCoordPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    FogCoordPointerListIBM: FnPtr<extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void>,
    FogCoordd: FnPtr<extern "C" fn(coord: GLdouble) -> c_void>,
    FogCoorddEXT: FnPtr<extern "C" fn(coord: GLdouble) -> c_void>,
    FogCoorddv: FnPtr<extern "C" fn(coord: *GLdouble) -> c_void>,
    FogCoorddvEXT: FnPtr<extern "C" fn(coord: *GLdouble) -> c_void>,
    FogCoordf: FnPtr<extern "C" fn(coord: GLfloat) -> c_void>,
    FogCoordfEXT: FnPtr<extern "C" fn(coord: GLfloat) -> c_void>,
    FogCoordfv: FnPtr<extern "C" fn(coord: *GLfloat) -> c_void>,
    FogCoordfvEXT: FnPtr<extern "C" fn(coord: *GLfloat) -> c_void>,
    FogCoordhNV: FnPtr<extern "C" fn(fog: GLhalfNV) -> c_void>,
    FogCoordhvNV: FnPtr<extern "C" fn(fog: *GLhalfNV) -> c_void>,
    FogFuncSGIS: FnPtr<extern "C" fn(n: GLsizei, points: *GLfloat) -> c_void>,
    Fogf: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    Fogfv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    Fogi: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    Fogiv: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    Fogx: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void>,
    FogxOES: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void>,
    Fogxv: FnPtr<extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void>,
    FogxvOES: FnPtr<extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void>,
    FragmentColorMaterialSGIX: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void>,
    FragmentLightModelfSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    FragmentLightModelfvSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    FragmentLightModeliSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    FragmentLightModelivSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    FragmentLightfSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    FragmentLightfvSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    FragmentLightiSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLint) -> c_void>,
    FragmentLightivSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    FragmentMaterialfSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    FragmentMaterialfvSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    FragmentMaterialiSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLint) -> c_void>,
    FragmentMaterialivSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    FrameTerminatorGREMEDY: FnPtr<extern "C" fn() -> c_void>,
    FrameZoomSGIX: FnPtr<extern "C" fn(factor: GLint) -> c_void>,
    FramebufferDrawBufferEXT: FnPtr<extern "C" fn(framebuffer: GLuint, mode: GLenum) -> c_void>,
    FramebufferDrawBuffersEXT: FnPtr<extern "C" fn(framebuffer: GLuint, n: GLsizei, bufs: *GLenum) -> c_void>,
    FramebufferParameteri: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    FramebufferReadBufferEXT: FnPtr<extern "C" fn(framebuffer: GLuint, mode: GLenum) -> c_void>,
    FramebufferRenderbuffer: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void>,
    FramebufferRenderbufferEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void>,
    FramebufferRenderbufferOES: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void>,
    FramebufferTexture: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void>,
    FramebufferTexture1D: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void>,
    FramebufferTexture1DEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void>,
    FramebufferTexture2D: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void>,
    FramebufferTexture2DEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void>,
    FramebufferTexture2DMultisampleEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void>,
    FramebufferTexture2DMultisampleIMG: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void>,
    FramebufferTexture2DOES: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void>,
    FramebufferTexture3D: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void>,
    FramebufferTexture3DEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void>,
    FramebufferTexture3DOES: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void>,
    FramebufferTextureARB: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void>,
    FramebufferTextureEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void>,
    FramebufferTextureFaceARB: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void>,
    FramebufferTextureFaceEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void>,
    FramebufferTextureLayer: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void>,
    FramebufferTextureLayerARB: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void>,
    FramebufferTextureLayerEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void>,
    FreeObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint) -> c_void>,
    FrontFace: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    Frustum: FnPtr<extern "C" fn(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void>,
    Frustumf: FnPtr<extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void>,
    FrustumfOES: FnPtr<extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void>,
    Frustumx: FnPtr<extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void>,
    FrustumxOES: FnPtr<extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void>,
    GenAsyncMarkersSGIX: FnPtr<extern "C" fn(range: GLsizei) -> GLuint>,
    GenBuffers: FnPtr<extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void>,
    GenBuffersARB: FnPtr<extern "C" fn(n: GLsizei, buffers: *GLuint) -> c_void>,
    GenFencesAPPLE: FnPtr<extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void>,
    GenFencesNV: FnPtr<extern "C" fn(n: GLsizei, fences: *GLuint) -> c_void>,
    GenFragmentShadersATI: FnPtr<extern "C" fn(range: GLuint) -> GLuint>,
    GenFramebuffers: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void>,
    GenFramebuffersEXT: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void>,
    GenFramebuffersOES: FnPtr<extern "C" fn(n: GLsizei, framebuffers: *GLuint) -> c_void>,
    GenLists: FnPtr<extern "C" fn(range: GLsizei) -> GLuint>,
    GenNamesAMD: FnPtr<extern "C" fn(identifier: GLenum, num: GLuint, names: *GLuint) -> c_void>,
    GenOcclusionQueriesNV: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    GenPathsNV: FnPtr<extern "C" fn(range: GLsizei) -> GLuint>,
    GenPerfMonitorsAMD: FnPtr<extern "C" fn(n: GLsizei, monitors: *GLuint) -> c_void>,
    GenProgramPipelines: FnPtr<extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void>,
    GenProgramPipelinesEXT: FnPtr<extern "C" fn(n: GLsizei, pipelines: *GLuint) -> c_void>,
    GenProgramsARB: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void>,
    GenProgramsNV: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void>,
    GenQueries: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    GenQueriesARB: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    GenQueriesEXT: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    GenRenderbuffers: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void>,
    GenRenderbuffersEXT: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void>,
    GenRenderbuffersOES: FnPtr<extern "C" fn(n: GLsizei, renderbuffers: *GLuint) -> c_void>,
    GenSamplers: FnPtr<extern "C" fn(count: GLsizei, samplers: *GLuint) -> c_void>,
    GenSymbolsEXT: FnPtr<extern "C" fn(datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint>,
    GenTextures: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void>,
    GenTexturesEXT: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint) -> c_void>,
    GenTransformFeedbacks: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    GenTransformFeedbacksNV: FnPtr<extern "C" fn(n: GLsizei, ids: *GLuint) -> c_void>,
    GenVertexArrays: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void>,
    GenVertexArraysAPPLE: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void>,
    GenVertexArraysOES: FnPtr<extern "C" fn(n: GLsizei, arrays: *GLuint) -> c_void>,
    GenVertexShadersEXT: FnPtr<extern "C" fn(range: GLuint) -> GLuint>,
    GenerateMipmap: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    GenerateMipmapEXT: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    GenerateMipmapOES: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    GenerateMultiTexMipmapEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum) -> c_void>,
    GenerateTextureMipmapEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum) -> c_void>,
    GetActiveAtomicCounterBufferiv: FnPtr<extern "C" fn(program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetActiveAttrib: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void>,
    GetActiveAttribARB: FnPtr<extern "C" fn(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void>,
    GetActiveSubroutineName: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void>,
    GetActiveSubroutineUniformName: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void>,
    GetActiveSubroutineUniformiv: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) -> c_void>,
    GetActiveUniform: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void>,
    GetActiveUniformARB: FnPtr<extern "C" fn(programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void>,
    GetActiveUniformBlockName: FnPtr<extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> c_void>,
    GetActiveUniformBlockiv: FnPtr<extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetActiveUniformName: FnPtr<extern "C" fn(program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) -> c_void>,
    GetActiveUniformsiv: FnPtr<extern "C" fn(program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetActiveVaryingNV: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void>,
    GetArrayObjectfvATI: FnPtr<extern "C" fn(array: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetArrayObjectivATI: FnPtr<extern "C" fn(array: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetAttachedObjectsARB: FnPtr<extern "C" fn(containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) -> c_void>,
    GetAttachedShaders: FnPtr<extern "C" fn(program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> c_void>,
    GetAttribLocation: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint>,
    GetAttribLocationARB: FnPtr<extern "C" fn(programObj: GLhandleARB, name: *GLcharARB) -> GLint>,
    GetBooleanIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLboolean) -> c_void>,
    GetBooleani_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLboolean) -> c_void>,
    GetBooleanv: FnPtr<extern "C" fn(pname: GLenum, params: *GLboolean) -> c_void>,
    GetBufferParameteri64v: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint64) -> c_void>,
    GetBufferParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetBufferParameterivARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetBufferParameterui64vNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint64EXT) -> c_void>,
    GetBufferPointerv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void>,
    GetBufferPointervARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void>,
    GetBufferPointervOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void>,
    GetBufferSubData: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void>,
    GetBufferSubDataARB: FnPtr<extern "C" fn(target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void>,
    GetClipPlane: FnPtr<extern "C" fn(plane: GLenum, equation: *GLdouble) -> c_void>,
    GetClipPlanef: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void>,
    GetClipPlanefOES: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfloat) -> c_void>,
    GetClipPlanex: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void>,
    GetClipPlanexOES: FnPtr<extern "C" fn(plane: GLenum, equation: *GLfixed) -> c_void>,
    GetColorTable: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void>,
    GetColorTableEXT: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void>,
    GetColorTableParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetColorTableParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetColorTableParameterfvSGI: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetColorTableParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetColorTableParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetColorTableParameterivSGI: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetColorTableSGI: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void>,
    GetCombinerInputParameterfvNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetCombinerInputParameterivNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetCombinerOutputParameterfvNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetCombinerOutputParameterivNV: FnPtr<extern "C" fn(stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetCombinerStageParameterfvNV: FnPtr<extern "C" fn(stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetCompressedMultiTexImageEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, lod: GLint, img: *GLvoid) -> c_void>,
    GetCompressedTexImage: FnPtr<extern "C" fn(target: GLenum, level: GLint, img: *GLvoid) -> c_void>,
    GetCompressedTexImageARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, img: *GLvoid) -> c_void>,
    GetCompressedTextureImageEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, lod: GLint, img: *GLvoid) -> c_void>,
    GetConvolutionFilter: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void>,
    GetConvolutionFilterEXT: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void>,
    GetConvolutionParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetConvolutionParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetConvolutionParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetConvolutionParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetConvolutionParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetDebugMessageLog: FnPtr<extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint>,
    GetDebugMessageLogAMD: FnPtr<extern "C" fn(count: GLuint, bufsize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) -> GLuint>,
    GetDebugMessageLogARB: FnPtr<extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint>,
    GetDebugMessageLogKHR: FnPtr<extern "C" fn(count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint>,
    GetDetailTexFuncSGIS: FnPtr<extern "C" fn(target: GLenum, points: *GLfloat) -> c_void>,
    GetDoubleIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLdouble) -> c_void>,
    GetDoublei_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLdouble) -> c_void>,
    GetDoublei_vEXT: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, params: *GLdouble) -> c_void>,
    GetDoublev: FnPtr<extern "C" fn(pname: GLenum, params: *GLdouble) -> c_void>,
    GetDriverControlStringQCOM: FnPtr<extern "C" fn(driverControl: GLuint, bufSize: GLsizei, length: *GLsizei, driverControlString: *GLchar) -> c_void>,
    GetDriverControlsQCOM: FnPtr<extern "C" fn(num: *GLint, size: GLsizei, driverControls: *GLuint) -> c_void>,
    GetError: FnPtr<extern "C" fn() -> GLenum>,
    GetFenceivNV: FnPtr<extern "C" fn(fence: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetFinalCombinerInputParameterfvNV: FnPtr<extern "C" fn(variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetFinalCombinerInputParameterivNV: FnPtr<extern "C" fn(variable: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetFixedv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void>,
    GetFixedvOES: FnPtr<extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void>,
    GetFloatIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLfloat) -> c_void>,
    GetFloati_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLfloat) -> c_void>,
    GetFloati_vEXT: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, params: *GLfloat) -> c_void>,
    GetFloatv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    GetFogFuncSGIS: FnPtr<extern "C" fn(points: *GLfloat) -> c_void>,
    GetFragDataIndex: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint>,
    GetFragDataLocation: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint>,
    GetFragDataLocationEXT: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint>,
    GetFragmentLightfvSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetFragmentLightivSGIX: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetFragmentMaterialfvSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetFragmentMaterialivSGIX: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetFramebufferAttachmentParameteriv: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetFramebufferAttachmentParameterivEXT: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetFramebufferAttachmentParameterivOES: FnPtr<extern "C" fn(target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetFramebufferParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetFramebufferParameterivEXT: FnPtr<extern "C" fn(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetGraphicsResetStatusARB: FnPtr<extern "C" fn() -> GLenum>,
    GetGraphicsResetStatusEXT: FnPtr<extern "C" fn() -> GLenum>,
    GetHandleARB: FnPtr<extern "C" fn(pname: GLenum) -> GLhandleARB>,
    GetHistogram: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void>,
    GetHistogramEXT: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void>,
    GetHistogramParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetHistogramParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetHistogramParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetHistogramParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetHistogramParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetImageHandleARB: FnPtr<extern "C" fn(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64>,
    GetImageHandleNV: FnPtr<extern "C" fn(texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64>,
    GetImageTransformParameterfvHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetImageTransformParameterivHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetInfoLogARB: FnPtr<extern "C" fn(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) -> c_void>,
    GetInstrumentsSGIX: FnPtr<extern "C" fn() -> GLint>,
    GetInteger64i_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLint64) -> c_void>,
    GetInteger64v: FnPtr<extern "C" fn(pname: GLenum, params: *GLint64) -> c_void>,
    GetInteger64vAPPLE: FnPtr<extern "C" fn(pname: GLenum, params: *GLint64) -> c_void>,
    GetIntegerIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void>,
    GetIntegeri_v: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void>,
    GetIntegeri_vEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: *GLint) -> c_void>,
    GetIntegerui64i_vNV: FnPtr<extern "C" fn(value: GLenum, index: GLuint, result: *GLuint64EXT) -> c_void>,
    GetIntegerui64vNV: FnPtr<extern "C" fn(value: GLenum, result: *GLuint64EXT) -> c_void>,
    GetIntegerv: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    GetInternalformati64v: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) -> c_void>,
    GetInternalformativ: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) -> c_void>,
    GetInvariantBooleanvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void>,
    GetInvariantFloatvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void>,
    GetInvariantIntegervEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void>,
    GetLightfv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetLightiv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetLightx: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetLightxOES: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetLightxv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetLightxvOES: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetListParameterfvSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetListParameterivSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetLocalConstantBooleanvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void>,
    GetLocalConstantFloatvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void>,
    GetLocalConstantIntegervEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void>,
    GetMapAttribParameterfvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMapAttribParameterivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetMapControlPointsNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *GLvoid) -> c_void>,
    GetMapParameterfvNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMapParameterivNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetMapdv: FnPtr<extern "C" fn(target: GLenum, query: GLenum, v: *GLdouble) -> c_void>,
    GetMapfv: FnPtr<extern "C" fn(target: GLenum, query: GLenum, v: *GLfloat) -> c_void>,
    GetMapiv: FnPtr<extern "C" fn(target: GLenum, query: GLenum, v: *GLint) -> c_void>,
    GetMapxvOES: FnPtr<extern "C" fn(target: GLenum, query: GLenum, v: *GLfixed) -> c_void>,
    GetMaterialfv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMaterialiv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetMaterialx: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    GetMaterialxOES: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    GetMaterialxv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetMaterialxvOES: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetMinmax: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void>,
    GetMinmaxEXT: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void>,
    GetMinmaxParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMinmaxParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMinmaxParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetMinmaxParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetMultiTexEnvfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMultiTexEnvivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetMultiTexGendvEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void>,
    GetMultiTexGenfvEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMultiTexGenivEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetMultiTexImageEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    GetMultiTexLevelParameterfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMultiTexLevelParameterivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void>,
    GetMultiTexParameterIivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetMultiTexParameterIuivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void>,
    GetMultiTexParameterfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetMultiTexParameterivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetMultisamplefv: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void>,
    GetMultisamplefvNV: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void>,
    GetNamedBufferParameterivEXT: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetNamedBufferParameterui64vNV: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void>,
    GetNamedBufferPointervEXT: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: **GLvoid) -> c_void>,
    GetNamedBufferSubDataEXT: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void>,
    GetNamedFramebufferAttachmentParameterivEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetNamedFramebufferParameterivEXT: FnPtr<extern "C" fn(framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetNamedProgramLocalParameterIivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void>,
    GetNamedProgramLocalParameterIuivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void>,
    GetNamedProgramLocalParameterdvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void>,
    GetNamedProgramLocalParameterfvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void>,
    GetNamedProgramStringEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, pname: GLenum, string: *GLvoid) -> c_void>,
    GetNamedProgramivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetNamedRenderbufferParameterivEXT: FnPtr<extern "C" fn(renderbuffer: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetNamedStringARB: FnPtr<extern "C" fn(namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, string: *GLchar) -> c_void>,
    GetNamedStringivARB: FnPtr<extern "C" fn(namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) -> c_void>,
    GetObjectBufferfvATI: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetObjectBufferivATI: FnPtr<extern "C" fn(buffer: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetObjectLabel: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void>,
    GetObjectLabelEXT: FnPtr<extern "C" fn(type_: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void>,
    GetObjectLabelKHR: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void>,
    GetObjectParameterfvARB: FnPtr<extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *GLfloat) -> c_void>,
    GetObjectParameterivAPPLE: FnPtr<extern "C" fn(objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetObjectParameterivARB: FnPtr<extern "C" fn(obj: GLhandleARB, pname: GLenum, params: *GLint) -> c_void>,
    GetObjectPtrLabel: FnPtr<extern "C" fn(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void>,
    GetObjectPtrLabelKHR: FnPtr<extern "C" fn(ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void>,
    GetOcclusionQueryivNV: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetOcclusionQueryuivNV: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void>,
    GetPathColorGenfvNV: FnPtr<extern "C" fn(color: GLenum, pname: GLenum, value: *GLfloat) -> c_void>,
    GetPathColorGenivNV: FnPtr<extern "C" fn(color: GLenum, pname: GLenum, value: *GLint) -> c_void>,
    GetPathCommandsNV: FnPtr<extern "C" fn(path: GLuint, commands: *GLubyte) -> c_void>,
    GetPathCoordsNV: FnPtr<extern "C" fn(path: GLuint, coords: *GLfloat) -> c_void>,
    GetPathDashArrayNV: FnPtr<extern "C" fn(path: GLuint, dashArray: *GLfloat) -> c_void>,
    GetPathLengthNV: FnPtr<extern "C" fn(path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat>,
    GetPathMetricRangeNV: FnPtr<extern "C" fn(metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) -> c_void>,
    GetPathMetricsNV: FnPtr<extern "C" fn(metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) -> c_void>,
    GetPathParameterfvNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void>,
    GetPathParameterivNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: *GLint) -> c_void>,
    GetPathSpacingNV: FnPtr<extern "C" fn(pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) -> c_void>,
    GetPathTexGenfvNV: FnPtr<extern "C" fn(texCoordSet: GLenum, pname: GLenum, value: *GLfloat) -> c_void>,
    GetPathTexGenivNV: FnPtr<extern "C" fn(texCoordSet: GLenum, pname: GLenum, value: *GLint) -> c_void>,
    GetPerfMonitorCounterDataAMD: FnPtr<extern "C" fn(monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) -> c_void>,
    GetPerfMonitorCounterInfoAMD: FnPtr<extern "C" fn(group: GLuint, counter: GLuint, pname: GLenum, data: *GLvoid) -> c_void>,
    GetPerfMonitorCounterStringAMD: FnPtr<extern "C" fn(group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) -> c_void>,
    GetPerfMonitorCountersAMD: FnPtr<extern "C" fn(group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) -> c_void>,
    GetPerfMonitorGroupStringAMD: FnPtr<extern "C" fn(group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) -> c_void>,
    GetPerfMonitorGroupsAMD: FnPtr<extern "C" fn(numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) -> c_void>,
    GetPixelMapfv: FnPtr<extern "C" fn(map: GLenum, values: *GLfloat) -> c_void>,
    GetPixelMapuiv: FnPtr<extern "C" fn(map: GLenum, values: *GLuint) -> c_void>,
    GetPixelMapusv: FnPtr<extern "C" fn(map: GLenum, values: *GLushort) -> c_void>,
    GetPixelMapxv: FnPtr<extern "C" fn(map: GLenum, size: GLint, values: *GLfixed) -> c_void>,
    GetPixelTexGenParameterfvSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    GetPixelTexGenParameterivSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    GetPixelTransformParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetPixelTransformParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetPointerIndexedvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, data: **GLvoid) -> c_void>,
    GetPointeri_vEXT: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, params: **GLvoid) -> c_void>,
    GetPointerv: FnPtr<extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void>,
    GetPointervEXT: FnPtr<extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void>,
    GetPointervKHR: FnPtr<extern "C" fn(pname: GLenum, params: **GLvoid) -> c_void>,
    GetPolygonStipple: FnPtr<extern "C" fn(mask: *GLubyte) -> c_void>,
    GetProgramBinary: FnPtr<extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void>,
    GetProgramBinaryOES: FnPtr<extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void>,
    GetProgramEnvParameterIivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void>,
    GetProgramEnvParameterIuivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void>,
    GetProgramEnvParameterdvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void>,
    GetProgramEnvParameterfvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void>,
    GetProgramInfoLog: FnPtr<extern "C" fn(program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void>,
    GetProgramInterfaceiv: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetProgramLocalParameterIivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void>,
    GetProgramLocalParameterIuivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void>,
    GetProgramLocalParameterdvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void>,
    GetProgramLocalParameterfvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void>,
    GetProgramNamedParameterdvNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLdouble) -> c_void>,
    GetProgramNamedParameterfvNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, params: *GLfloat) -> c_void>,
    GetProgramParameterdvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void>,
    GetProgramParameterfvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetProgramPipelineInfoLog: FnPtr<extern "C" fn(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void>,
    GetProgramPipelineInfoLogEXT: FnPtr<extern "C" fn(pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void>,
    GetProgramPipelineiv: FnPtr<extern "C" fn(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetProgramPipelineivEXT: FnPtr<extern "C" fn(pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetProgramResourceIndex: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint>,
    GetProgramResourceLocation: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint>,
    GetProgramResourceLocationIndex: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint>,
    GetProgramResourceName: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void>,
    GetProgramResourceiv: FnPtr<extern "C" fn(program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> c_void>,
    GetProgramStageiv: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) -> c_void>,
    GetProgramStringARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, string: *GLvoid) -> c_void>,
    GetProgramStringNV: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, program: *GLubyte) -> c_void>,
    GetProgramSubroutineParameteruivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, param: *GLuint) -> c_void>,
    GetProgramiv: FnPtr<extern "C" fn(program: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetProgramivARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetProgramivNV: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetQueryIndexediv: FnPtr<extern "C" fn(target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetQueryObjecti64v: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint64) -> c_void>,
    GetQueryObjecti64vEXT: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint64) -> c_void>,
    GetQueryObjectiv: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetQueryObjectivARB: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetQueryObjectivEXT: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetQueryObjectui64v: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void>,
    GetQueryObjectui64vEXT: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint64) -> c_void>,
    GetQueryObjectuiv: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void>,
    GetQueryObjectuivARB: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void>,
    GetQueryObjectuivEXT: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLuint) -> c_void>,
    GetQueryiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetQueryivARB: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetQueryivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetRenderbufferParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetRenderbufferParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetRenderbufferParameterivOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetSamplerParameterIiv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetSamplerParameterIuiv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLuint) -> c_void>,
    GetSamplerParameterfv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetSamplerParameteriv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetSeparableFilter: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void>,
    GetSeparableFilterEXT: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void>,
    GetShaderInfoLog: FnPtr<extern "C" fn(shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void>,
    GetShaderPrecisionFormat: FnPtr<extern "C" fn(shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> c_void>,
    GetShaderSource: FnPtr<extern "C" fn(shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void>,
    GetShaderSourceARB: FnPtr<extern "C" fn(obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) -> c_void>,
    GetShaderiv: FnPtr<extern "C" fn(shader: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetSharpenTexFuncSGIS: FnPtr<extern "C" fn(target: GLenum, points: *GLfloat) -> c_void>,
    GetString: FnPtr<extern "C" fn(name: GLenum) -> *GLubyte>,
    GetStringi: FnPtr<extern "C" fn(name: GLenum, index: GLuint) -> *GLubyte>,
    GetSubroutineIndex: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint>,
    GetSubroutineUniformLocation: FnPtr<extern "C" fn(program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint>,
    GetSynciv: FnPtr<extern "C" fn(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void>,
    GetSyncivAPPLE: FnPtr<extern "C" fn(sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void>,
    GetTexBumpParameterfvATI: FnPtr<extern "C" fn(pname: GLenum, param: *GLfloat) -> c_void>,
    GetTexBumpParameterivATI: FnPtr<extern "C" fn(pname: GLenum, param: *GLint) -> c_void>,
    GetTexEnvfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetTexEnviv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetTexEnvxv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetTexEnvxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetTexFilterFuncSGIS: FnPtr<extern "C" fn(target: GLenum, filter: GLenum, weights: *GLfloat) -> c_void>,
    GetTexGendv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void>,
    GetTexGenfv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetTexGenfvOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetTexGeniv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetTexGenivOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetTexGenxvOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetTexImage: FnPtr<extern "C" fn(target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    GetTexLevelParameterfv: FnPtr<extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetTexLevelParameteriv: FnPtr<extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void>,
    GetTexLevelParameterxvOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) -> c_void>,
    GetTexParameterIiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetTexParameterIivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetTexParameterIuiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void>,
    GetTexParameterIuivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void>,
    GetTexParameterPointervAPPLE: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: **GLvoid) -> c_void>,
    GetTexParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetTexParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetTexParameterxv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetTexParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    GetTextureHandleARB: FnPtr<extern "C" fn(texture: GLuint) -> GLuint64>,
    GetTextureHandleNV: FnPtr<extern "C" fn(texture: GLuint) -> GLuint64>,
    GetTextureImageEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    GetTextureLevelParameterfvEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetTextureLevelParameterivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void>,
    GetTextureParameterIivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetTextureParameterIuivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void>,
    GetTextureParameterfvEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    GetTextureParameterivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    GetTextureSamplerHandleARB: FnPtr<extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64>,
    GetTextureSamplerHandleNV: FnPtr<extern "C" fn(texture: GLuint, sampler: GLuint) -> GLuint64>,
    GetTrackMatrixivNV: FnPtr<extern "C" fn(target: GLenum, address: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetTransformFeedbackVarying: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void>,
    GetTransformFeedbackVaryingEXT: FnPtr<extern "C" fn(program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void>,
    GetTransformFeedbackVaryingNV: FnPtr<extern "C" fn(program: GLuint, index: GLuint, location: *GLint) -> c_void>,
    GetTranslatedShaderSourceANGLE: FnPtr<extern "C" fn(shader: GLuint, bufsize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void>,
    GetUniformBlockIndex: FnPtr<extern "C" fn(program: GLuint, uniformBlockName: *GLchar) -> GLuint>,
    GetUniformBufferSizeEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint) -> GLint>,
    GetUniformIndices: FnPtr<extern "C" fn(program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> c_void>,
    GetUniformLocation: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint>,
    GetUniformLocationARB: FnPtr<extern "C" fn(programObj: GLhandleARB, name: *GLcharARB) -> GLint>,
    GetUniformOffsetEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint) -> GLintptr>,
    GetUniformSubroutineuiv: FnPtr<extern "C" fn(shadertype: GLenum, location: GLint, params: *GLuint) -> c_void>,
    GetUniformdv: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLdouble) -> c_void>,
    GetUniformfv: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLfloat) -> c_void>,
    GetUniformfvARB: FnPtr<extern "C" fn(programObj: GLhandleARB, location: GLint, params: *GLfloat) -> c_void>,
    GetUniformi64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLint64EXT) -> c_void>,
    GetUniformiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLint) -> c_void>,
    GetUniformivARB: FnPtr<extern "C" fn(programObj: GLhandleARB, location: GLint, params: *GLint) -> c_void>,
    GetUniformui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLuint64EXT) -> c_void>,
    GetUniformuiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLuint) -> c_void>,
    GetUniformuivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, params: *GLuint) -> c_void>,
    GetVariantArrayObjectfvATI: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetVariantArrayObjectivATI: FnPtr<extern "C" fn(id: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVariantBooleanvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLboolean) -> c_void>,
    GetVariantFloatvEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLfloat) -> c_void>,
    GetVariantIntegervEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: *GLint) -> c_void>,
    GetVariantPointervEXT: FnPtr<extern "C" fn(id: GLuint, value: GLenum, data: **GLvoid) -> c_void>,
    GetVaryingLocationNV: FnPtr<extern "C" fn(program: GLuint, name: *GLchar) -> GLint>,
    GetVertexArrayIntegeri_vEXT: FnPtr<extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) -> c_void>,
    GetVertexArrayIntegervEXT: FnPtr<extern "C" fn(vaobj: GLuint, pname: GLenum, param: *GLint) -> c_void>,
    GetVertexArrayPointeri_vEXT: FnPtr<extern "C" fn(vaobj: GLuint, index: GLuint, pname: GLenum, param: **GLvoid) -> c_void>,
    GetVertexArrayPointervEXT: FnPtr<extern "C" fn(vaobj: GLuint, pname: GLenum, param: **GLvoid) -> c_void>,
    GetVertexAttribArrayObjectfvATI: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetVertexAttribArrayObjectivATI: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVertexAttribIiv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVertexAttribIivEXT: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVertexAttribIuiv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint) -> c_void>,
    GetVertexAttribIuivEXT: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint) -> c_void>,
    GetVertexAttribLdv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void>,
    GetVertexAttribLdvEXT: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void>,
    GetVertexAttribLi64vNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void>,
    GetVertexAttribLui64vARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void>,
    GetVertexAttribLui64vNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void>,
    GetVertexAttribPointerv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void>,
    GetVertexAttribPointervARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void>,
    GetVertexAttribPointervNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void>,
    GetVertexAttribdv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void>,
    GetVertexAttribdvARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void>,
    GetVertexAttribdvNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLdouble) -> c_void>,
    GetVertexAttribfv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetVertexAttribfvARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetVertexAttribfvNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetVertexAttribiv: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVertexAttribivARB: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVertexAttribivNV: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVideoCaptureStreamdvNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void>,
    GetVideoCaptureStreamfvNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    GetVideoCaptureStreamivNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVideoCaptureivNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVideoi64vNV: FnPtr<extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void>,
    GetVideoivNV: FnPtr<extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    GetVideoui64vNV: FnPtr<extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void>,
    GetVideouivNV: FnPtr<extern "C" fn(video_slot: GLuint, pname: GLenum, params: *GLuint) -> c_void>,
    GetnColorTableARB: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, table: *GLvoid) -> c_void>,
    GetnCompressedTexImageARB: FnPtr<extern "C" fn(target: GLenum, lod: GLint, bufSize: GLsizei, img: *GLvoid) -> c_void>,
    GetnConvolutionFilterARB: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, image: *GLvoid) -> c_void>,
    GetnHistogramARB: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void>,
    GetnMapdvARB: FnPtr<extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) -> c_void>,
    GetnMapfvARB: FnPtr<extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) -> c_void>,
    GetnMapivARB: FnPtr<extern "C" fn(target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) -> c_void>,
    GetnMinmaxARB: FnPtr<extern "C" fn(target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void>,
    GetnPixelMapfvARB: FnPtr<extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLfloat) -> c_void>,
    GetnPixelMapuivARB: FnPtr<extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLuint) -> c_void>,
    GetnPixelMapusvARB: FnPtr<extern "C" fn(map: GLenum, bufSize: GLsizei, values: *GLushort) -> c_void>,
    GetnPolygonStippleARB: FnPtr<extern "C" fn(bufSize: GLsizei, pattern: *GLubyte) -> c_void>,
    GetnSeparableFilterARB: FnPtr<extern "C" fn(target: GLenum, format: GLenum, type_: GLenum, rowBufSize: GLsizei, row: *GLvoid, columnBufSize: GLsizei, column: *GLvoid, span: *GLvoid) -> c_void>,
    GetnTexImageARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: *GLvoid) -> c_void>,
    GetnUniformdvARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) -> c_void>,
    GetnUniformfvARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void>,
    GetnUniformfvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void>,
    GetnUniformivARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void>,
    GetnUniformivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void>,
    GetnUniformuivARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> c_void>,
    GlobalAlphaFactorbSUN: FnPtr<extern "C" fn(factor: GLbyte) -> c_void>,
    GlobalAlphaFactordSUN: FnPtr<extern "C" fn(factor: GLdouble) -> c_void>,
    GlobalAlphaFactorfSUN: FnPtr<extern "C" fn(factor: GLfloat) -> c_void>,
    GlobalAlphaFactoriSUN: FnPtr<extern "C" fn(factor: GLint) -> c_void>,
    GlobalAlphaFactorsSUN: FnPtr<extern "C" fn(factor: GLshort) -> c_void>,
    GlobalAlphaFactorubSUN: FnPtr<extern "C" fn(factor: GLubyte) -> c_void>,
    GlobalAlphaFactoruiSUN: FnPtr<extern "C" fn(factor: GLuint) -> c_void>,
    GlobalAlphaFactorusSUN: FnPtr<extern "C" fn(factor: GLushort) -> c_void>,
    Hint: FnPtr<extern "C" fn(target: GLenum, mode: GLenum) -> c_void>,
    HintPGI: FnPtr<extern "C" fn(target: GLenum, mode: GLint) -> c_void>,
    Histogram: FnPtr<extern "C" fn(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void>,
    HistogramEXT: FnPtr<extern "C" fn(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void>,
    IglooInterfaceSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLvoid) -> c_void>,
    ImageTransformParameterfHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    ImageTransformParameterfvHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    ImageTransformParameteriHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    ImageTransformParameterivHP: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    ImportSyncEXT: FnPtr<extern "C" fn(external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync>,
    IndexFormatNV: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void>,
    IndexFuncEXT: FnPtr<extern "C" fn(func: GLenum, ref_: GLclampf) -> c_void>,
    IndexMask: FnPtr<extern "C" fn(mask: GLuint) -> c_void>,
    IndexMaterialEXT: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void>,
    IndexPointer: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    IndexPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void>,
    IndexPointerListIBM: FnPtr<extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void>,
    Indexd: FnPtr<extern "C" fn(c: GLdouble) -> c_void>,
    Indexdv: FnPtr<extern "C" fn(c: *GLdouble) -> c_void>,
    Indexf: FnPtr<extern "C" fn(c: GLfloat) -> c_void>,
    Indexfv: FnPtr<extern "C" fn(c: *GLfloat) -> c_void>,
    Indexi: FnPtr<extern "C" fn(c: GLint) -> c_void>,
    Indexiv: FnPtr<extern "C" fn(c: *GLint) -> c_void>,
    Indexs: FnPtr<extern "C" fn(c: GLshort) -> c_void>,
    Indexsv: FnPtr<extern "C" fn(c: *GLshort) -> c_void>,
    Indexub: FnPtr<extern "C" fn(c: GLubyte) -> c_void>,
    Indexubv: FnPtr<extern "C" fn(c: *GLubyte) -> c_void>,
    IndexxOES: FnPtr<extern "C" fn(component: GLfixed) -> c_void>,
    IndexxvOES: FnPtr<extern "C" fn(component: *GLfixed) -> c_void>,
    InitNames: FnPtr<extern "C" fn() -> c_void>,
    InsertComponentEXT: FnPtr<extern "C" fn(res: GLuint, src: GLuint, num: GLuint) -> c_void>,
    InsertEventMarkerEXT: FnPtr<extern "C" fn(length: GLsizei, marker: *GLchar) -> c_void>,
    InstrumentsBufferSGIX: FnPtr<extern "C" fn(size: GLsizei, buffer: *GLint) -> c_void>,
    InterleavedArrays: FnPtr<extern "C" fn(format: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    InterpolatePathsNV: FnPtr<extern "C" fn(resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> c_void>,
    InvalidateBufferData: FnPtr<extern "C" fn(buffer: GLuint) -> c_void>,
    InvalidateBufferSubData: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void>,
    InvalidateFramebuffer: FnPtr<extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void>,
    InvalidateSubFramebuffer: FnPtr<extern "C" fn(target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    InvalidateTexImage: FnPtr<extern "C" fn(texture: GLuint, level: GLint) -> c_void>,
    InvalidateTexSubImage: FnPtr<extern "C" fn(texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void>,
    IsAsyncMarkerSGIX: FnPtr<extern "C" fn(marker: GLuint) -> GLboolean>,
    IsBuffer: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean>,
    IsBufferARB: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean>,
    IsBufferResidentNV: FnPtr<extern "C" fn(target: GLenum) -> GLboolean>,
    IsEnabled: FnPtr<extern "C" fn(cap: GLenum) -> GLboolean>,
    IsEnabledIndexedEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>,
    IsEnabledi: FnPtr<extern "C" fn(target: GLenum, index: GLuint) -> GLboolean>,
    IsFenceAPPLE: FnPtr<extern "C" fn(fence: GLuint) -> GLboolean>,
    IsFenceNV: FnPtr<extern "C" fn(fence: GLuint) -> GLboolean>,
    IsFramebuffer: FnPtr<extern "C" fn(framebuffer: GLuint) -> GLboolean>,
    IsFramebufferEXT: FnPtr<extern "C" fn(framebuffer: GLuint) -> GLboolean>,
    IsFramebufferOES: FnPtr<extern "C" fn(framebuffer: GLuint) -> GLboolean>,
    IsImageHandleResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> GLboolean>,
    IsImageHandleResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> GLboolean>,
    IsList: FnPtr<extern "C" fn(list: GLuint) -> GLboolean>,
    IsNameAMD: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint) -> GLboolean>,
    IsNamedBufferResidentNV: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean>,
    IsNamedStringARB: FnPtr<extern "C" fn(namelen: GLint, name: *GLchar) -> GLboolean>,
    IsObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean>,
    IsOcclusionQueryNV: FnPtr<extern "C" fn(id: GLuint) -> GLboolean>,
    IsPathNV: FnPtr<extern "C" fn(path: GLuint) -> GLboolean>,
    IsPointInFillPathNV: FnPtr<extern "C" fn(path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean>,
    IsPointInStrokePathNV: FnPtr<extern "C" fn(path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean>,
    IsProgram: FnPtr<extern "C" fn(program: GLuint) -> GLboolean>,
    IsProgramARB: FnPtr<extern "C" fn(program: GLuint) -> GLboolean>,
    IsProgramNV: FnPtr<extern "C" fn(id: GLuint) -> GLboolean>,
    IsProgramPipeline: FnPtr<extern "C" fn(pipeline: GLuint) -> GLboolean>,
    IsProgramPipelineEXT: FnPtr<extern "C" fn(pipeline: GLuint) -> GLboolean>,
    IsQuery: FnPtr<extern "C" fn(id: GLuint) -> GLboolean>,
    IsQueryARB: FnPtr<extern "C" fn(id: GLuint) -> GLboolean>,
    IsQueryEXT: FnPtr<extern "C" fn(id: GLuint) -> GLboolean>,
    IsRenderbuffer: FnPtr<extern "C" fn(renderbuffer: GLuint) -> GLboolean>,
    IsRenderbufferEXT: FnPtr<extern "C" fn(renderbuffer: GLuint) -> GLboolean>,
    IsRenderbufferOES: FnPtr<extern "C" fn(renderbuffer: GLuint) -> GLboolean>,
    IsSampler: FnPtr<extern "C" fn(sampler: GLuint) -> GLboolean>,
    IsShader: FnPtr<extern "C" fn(shader: GLuint) -> GLboolean>,
    IsSync: FnPtr<extern "C" fn(sync: GLsync) -> GLboolean>,
    IsSyncAPPLE: FnPtr<extern "C" fn(sync: GLsync) -> GLboolean>,
    IsTexture: FnPtr<extern "C" fn(texture: GLuint) -> GLboolean>,
    IsTextureEXT: FnPtr<extern "C" fn(texture: GLuint) -> GLboolean>,
    IsTextureHandleResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> GLboolean>,
    IsTextureHandleResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> GLboolean>,
    IsTransformFeedback: FnPtr<extern "C" fn(id: GLuint) -> GLboolean>,
    IsTransformFeedbackNV: FnPtr<extern "C" fn(id: GLuint) -> GLboolean>,
    IsVariantEnabledEXT: FnPtr<extern "C" fn(id: GLuint, cap: GLenum) -> GLboolean>,
    IsVertexArray: FnPtr<extern "C" fn(array: GLuint) -> GLboolean>,
    IsVertexArrayAPPLE: FnPtr<extern "C" fn(array: GLuint) -> GLboolean>,
    IsVertexArrayOES: FnPtr<extern "C" fn(array: GLuint) -> GLboolean>,
    IsVertexAttribEnabledAPPLE: FnPtr<extern "C" fn(index: GLuint, pname: GLenum) -> GLboolean>,
    LabelObjectEXT: FnPtr<extern "C" fn(type_: GLenum, object: GLuint, length: GLsizei, label: *GLchar) -> c_void>,
    LightEnviSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    LightModelf: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    LightModelfv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    LightModeli: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    LightModeliv: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    LightModelx: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void>,
    LightModelxOES: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void>,
    LightModelxv: FnPtr<extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void>,
    LightModelxvOES: FnPtr<extern "C" fn(pname: GLenum, param: *GLfixed) -> c_void>,
    Lightf: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    Lightfv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    Lighti: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLint) -> c_void>,
    Lightiv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    Lightx: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    LightxOES: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    Lightxv: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    LightxvOES: FnPtr<extern "C" fn(light: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    LineStipple: FnPtr<extern "C" fn(factor: GLint, pattern: GLushort) -> c_void>,
    LineWidth: FnPtr<extern "C" fn(width: GLfloat) -> c_void>,
    LineWidthx: FnPtr<extern "C" fn(width: GLfixed) -> c_void>,
    LineWidthxOES: FnPtr<extern "C" fn(width: GLfixed) -> c_void>,
    LinkProgram: FnPtr<extern "C" fn(program: GLuint) -> c_void>,
    LinkProgramARB: FnPtr<extern "C" fn(programObj: GLhandleARB) -> c_void>,
    ListBase: FnPtr<extern "C" fn(base: GLuint) -> c_void>,
    ListParameterfSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, param: GLfloat) -> c_void>,
    ListParameterfvSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    ListParameteriSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, param: GLint) -> c_void>,
    ListParameterivSGIX: FnPtr<extern "C" fn(list: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    LoadIdentity: FnPtr<extern "C" fn() -> c_void>,
    LoadIdentityDeformationMapSGIX: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void>,
    LoadMatrixd: FnPtr<extern "C" fn(m: *GLdouble) -> c_void>,
    LoadMatrixf: FnPtr<extern "C" fn(m: *GLfloat) -> c_void>,
    LoadMatrixx: FnPtr<extern "C" fn(m: *GLfixed) -> c_void>,
    LoadMatrixxOES: FnPtr<extern "C" fn(m: *GLfixed) -> c_void>,
    LoadName: FnPtr<extern "C" fn(name: GLuint) -> c_void>,
    LoadPaletteFromModelViewMatrixOES: FnPtr<extern "C" fn() -> c_void>,
    LoadProgramNV: FnPtr<extern "C" fn(target: GLenum, id: GLuint, len: GLsizei, program: *GLubyte) -> c_void>,
    LoadTransposeMatrixd: FnPtr<extern "C" fn(m: *GLdouble) -> c_void>,
    LoadTransposeMatrixdARB: FnPtr<extern "C" fn(m: *GLdouble) -> c_void>,
    LoadTransposeMatrixf: FnPtr<extern "C" fn(m: *GLfloat) -> c_void>,
    LoadTransposeMatrixfARB: FnPtr<extern "C" fn(m: *GLfloat) -> c_void>,
    LoadTransposeMatrixxOES: FnPtr<extern "C" fn(m: *GLfixed) -> c_void>,
    LockArraysEXT: FnPtr<extern "C" fn(first: GLint, count: GLsizei) -> c_void>,
    LogicOp: FnPtr<extern "C" fn(opcode: GLenum) -> c_void>,
    MakeBufferNonResidentNV: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    MakeBufferResidentNV: FnPtr<extern "C" fn(target: GLenum, access: GLenum) -> c_void>,
    MakeImageHandleNonResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> c_void>,
    MakeImageHandleNonResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> c_void>,
    MakeImageHandleResidentARB: FnPtr<extern "C" fn(handle: GLuint64, access: GLenum) -> c_void>,
    MakeImageHandleResidentNV: FnPtr<extern "C" fn(handle: GLuint64, access: GLenum) -> c_void>,
    MakeNamedBufferNonResidentNV: FnPtr<extern "C" fn(buffer: GLuint) -> c_void>,
    MakeNamedBufferResidentNV: FnPtr<extern "C" fn(buffer: GLuint, access: GLenum) -> c_void>,
    MakeTextureHandleNonResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> c_void>,
    MakeTextureHandleNonResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> c_void>,
    MakeTextureHandleResidentARB: FnPtr<extern "C" fn(handle: GLuint64) -> c_void>,
    MakeTextureHandleResidentNV: FnPtr<extern "C" fn(handle: GLuint64) -> c_void>,
    Map1d: FnPtr<extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void>,
    Map1f: FnPtr<extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void>,
    Map1xOES: FnPtr<extern "C" fn(target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) -> c_void>,
    Map2d: FnPtr<extern "C" fn(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void>,
    Map2f: FnPtr<extern "C" fn(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void>,
    Map2xOES: FnPtr<extern "C" fn(target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) -> c_void>,
    MapBuffer: FnPtr<extern "C" fn(target: GLenum, access: GLenum) -> *c_void>,
    MapBufferARB: FnPtr<extern "C" fn(target: GLenum, access: GLenum) -> *c_void>,
    MapBufferOES: FnPtr<extern "C" fn(target: GLenum, access: GLenum) -> *c_void>,
    MapBufferRange: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void>,
    MapBufferRangeEXT: FnPtr<extern "C" fn(target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void>,
    MapControlPointsNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *GLvoid) -> c_void>,
    MapGrid1d: FnPtr<extern "C" fn(un: GLint, u1: GLdouble, u2: GLdouble) -> c_void>,
    MapGrid1f: FnPtr<extern "C" fn(un: GLint, u1: GLfloat, u2: GLfloat) -> c_void>,
    MapGrid1xOES: FnPtr<extern "C" fn(n: GLint, u1: GLfixed, u2: GLfixed) -> c_void>,
    MapGrid2d: FnPtr<extern "C" fn(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> c_void>,
    MapGrid2f: FnPtr<extern "C" fn(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> c_void>,
    MapGrid2xOES: FnPtr<extern "C" fn(n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) -> c_void>,
    MapNamedBufferEXT: FnPtr<extern "C" fn(buffer: GLuint, access: GLenum) -> *c_void>,
    MapNamedBufferRangeEXT: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void>,
    MapObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint) -> *c_void>,
    MapParameterfvNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    MapParameterivNV: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    MapTexture2DINTEL: FnPtr<extern "C" fn(texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) -> *c_void>,
    MapVertexAttrib1dAPPLE: FnPtr<extern "C" fn(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void>,
    MapVertexAttrib1fAPPLE: FnPtr<extern "C" fn(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void>,
    MapVertexAttrib2dAPPLE: FnPtr<extern "C" fn(index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void>,
    MapVertexAttrib2fAPPLE: FnPtr<extern "C" fn(index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void>,
    Materialf: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    Materialfv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    Materiali: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLint) -> c_void>,
    Materialiv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    Materialx: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    MaterialxOES: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    Materialxv: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void>,
    MaterialxvOES: FnPtr<extern "C" fn(face: GLenum, pname: GLenum, param: *GLfixed) -> c_void>,
    MatrixFrustumEXT: FnPtr<extern "C" fn(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void>,
    MatrixIndexPointerARB: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    MatrixIndexPointerOES: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    MatrixIndexubvARB: FnPtr<extern "C" fn(size: GLint, indices: *GLubyte) -> c_void>,
    MatrixIndexuivARB: FnPtr<extern "C" fn(size: GLint, indices: *GLuint) -> c_void>,
    MatrixIndexusvARB: FnPtr<extern "C" fn(size: GLint, indices: *GLushort) -> c_void>,
    MatrixLoadIdentityEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    MatrixLoadTransposedEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void>,
    MatrixLoadTransposefEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void>,
    MatrixLoaddEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void>,
    MatrixLoadfEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void>,
    MatrixMode: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    MatrixMultTransposedEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void>,
    MatrixMultTransposefEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void>,
    MatrixMultdEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLdouble) -> c_void>,
    MatrixMultfEXT: FnPtr<extern "C" fn(mode: GLenum, m: *GLfloat) -> c_void>,
    MatrixOrthoEXT: FnPtr<extern "C" fn(mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void>,
    MatrixPopEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    MatrixPushEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    MatrixRotatedEXT: FnPtr<extern "C" fn(mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    MatrixRotatefEXT: FnPtr<extern "C" fn(mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    MatrixScaledEXT: FnPtr<extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    MatrixScalefEXT: FnPtr<extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    MatrixTranslatedEXT: FnPtr<extern "C" fn(mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    MatrixTranslatefEXT: FnPtr<extern "C" fn(mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    MemoryBarrier: FnPtr<extern "C" fn(barriers: GLbitfield) -> c_void>,
    MemoryBarrierEXT: FnPtr<extern "C" fn(barriers: GLbitfield) -> c_void>,
    MinSampleShading: FnPtr<extern "C" fn(value: GLfloat) -> c_void>,
    MinSampleShadingARB: FnPtr<extern "C" fn(value: GLfloat) -> c_void>,
    Minmax: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void>,
    MinmaxEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void>,
    MultMatrixd: FnPtr<extern "C" fn(m: *GLdouble) -> c_void>,
    MultMatrixf: FnPtr<extern "C" fn(m: *GLfloat) -> c_void>,
    MultMatrixx: FnPtr<extern "C" fn(m: *GLfixed) -> c_void>,
    MultMatrixxOES: FnPtr<extern "C" fn(m: *GLfixed) -> c_void>,
    MultTransposeMatrixd: FnPtr<extern "C" fn(m: *GLdouble) -> c_void>,
    MultTransposeMatrixdARB: FnPtr<extern "C" fn(m: *GLdouble) -> c_void>,
    MultTransposeMatrixf: FnPtr<extern "C" fn(m: *GLfloat) -> c_void>,
    MultTransposeMatrixfARB: FnPtr<extern "C" fn(m: *GLfloat) -> c_void>,
    MultTransposeMatrixxOES: FnPtr<extern "C" fn(m: *GLfixed) -> c_void>,
    MultiDrawArrays: FnPtr<extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) -> c_void>,
    MultiDrawArraysEXT: FnPtr<extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void>,
    MultiDrawArraysIndirect: FnPtr<extern "C" fn(mode: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void>,
    MultiDrawArraysIndirectAMD: FnPtr<extern "C" fn(mode: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void>,
    MultiDrawArraysIndirectBindlessNV: FnPtr<extern "C" fn(mode: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void>,
    MultiDrawElementsIndirectBindlessNV: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void>,
    MultiDrawArraysIndirectCountARB: FnPtr<extern "C" fn(mode: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void>,
    MultiDrawElementArrayAPPLE: FnPtr<extern "C" fn(mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void>,
    MultiDrawElements: FnPtr<extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei) -> c_void>,
    MultiDrawElementsBaseVertex: FnPtr<extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei, basevertex: *GLint) -> c_void>,
    MultiDrawElementsEXT: FnPtr<extern "C" fn(mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei) -> c_void>,
    MultiDrawElementsIndirect: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void>,
    MultiDrawElementsIndirectAMD: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void>,
    MultiDrawElementsIndirectCountARB: FnPtr<extern "C" fn(mode: GLenum, type_: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void>,
    MultiDrawRangeElementArrayAPPLE: FnPtr<extern "C" fn(mode: GLenum, start: GLuint, end: GLuint, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void>,
    MultiModeDrawArraysIBM: FnPtr<extern "C" fn(mode: *GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei, modestride: GLint) -> c_void>,
    MultiModeDrawElementsIBM: FnPtr<extern "C" fn(mode: *GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei, modestride: GLint) -> c_void>,
    MultiTexBufferEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void>,
    MultiTexCoord1bOES: FnPtr<extern "C" fn(texture: GLenum, s: GLbyte) -> c_void>,
    MultiTexCoord1bvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void>,
    MultiTexCoord1d: FnPtr<extern "C" fn(target: GLenum, s: GLdouble) -> c_void>,
    MultiTexCoord1dARB: FnPtr<extern "C" fn(target: GLenum, s: GLdouble) -> c_void>,
    MultiTexCoord1dv: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void>,
    MultiTexCoord1dvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void>,
    MultiTexCoord1f: FnPtr<extern "C" fn(target: GLenum, s: GLfloat) -> c_void>,
    MultiTexCoord1fARB: FnPtr<extern "C" fn(target: GLenum, s: GLfloat) -> c_void>,
    MultiTexCoord1fv: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void>,
    MultiTexCoord1fvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void>,
    MultiTexCoord1hNV: FnPtr<extern "C" fn(target: GLenum, s: GLhalfNV) -> c_void>,
    MultiTexCoord1hvNV: FnPtr<extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void>,
    MultiTexCoord1i: FnPtr<extern "C" fn(target: GLenum, s: GLint) -> c_void>,
    MultiTexCoord1iARB: FnPtr<extern "C" fn(target: GLenum, s: GLint) -> c_void>,
    MultiTexCoord1iv: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void>,
    MultiTexCoord1ivARB: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void>,
    MultiTexCoord1s: FnPtr<extern "C" fn(target: GLenum, s: GLshort) -> c_void>,
    MultiTexCoord1sARB: FnPtr<extern "C" fn(target: GLenum, s: GLshort) -> c_void>,
    MultiTexCoord1sv: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void>,
    MultiTexCoord1svARB: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void>,
    MultiTexCoord1xOES: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed) -> c_void>,
    MultiTexCoord1xvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void>,
    MultiTexCoord2bOES: FnPtr<extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte) -> c_void>,
    MultiTexCoord2bvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void>,
    MultiTexCoord2d: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble) -> c_void>,
    MultiTexCoord2dARB: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble) -> c_void>,
    MultiTexCoord2dv: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void>,
    MultiTexCoord2dvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void>,
    MultiTexCoord2f: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat) -> c_void>,
    MultiTexCoord2fARB: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat) -> c_void>,
    MultiTexCoord2fv: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void>,
    MultiTexCoord2fvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void>,
    MultiTexCoord2hNV: FnPtr<extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV) -> c_void>,
    MultiTexCoord2hvNV: FnPtr<extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void>,
    MultiTexCoord2i: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint) -> c_void>,
    MultiTexCoord2iARB: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint) -> c_void>,
    MultiTexCoord2iv: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void>,
    MultiTexCoord2ivARB: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void>,
    MultiTexCoord2s: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort) -> c_void>,
    MultiTexCoord2sARB: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort) -> c_void>,
    MultiTexCoord2sv: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void>,
    MultiTexCoord2svARB: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void>,
    MultiTexCoord2xOES: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed) -> c_void>,
    MultiTexCoord2xvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void>,
    MultiTexCoord3bOES: FnPtr<extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) -> c_void>,
    MultiTexCoord3bvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void>,
    MultiTexCoord3d: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void>,
    MultiTexCoord3dARB: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void>,
    MultiTexCoord3dv: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void>,
    MultiTexCoord3dvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void>,
    MultiTexCoord3f: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void>,
    MultiTexCoord3fARB: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void>,
    MultiTexCoord3fv: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void>,
    MultiTexCoord3fvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void>,
    MultiTexCoord3hNV: FnPtr<extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void>,
    MultiTexCoord3hvNV: FnPtr<extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void>,
    MultiTexCoord3i: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void>,
    MultiTexCoord3iARB: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void>,
    MultiTexCoord3iv: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void>,
    MultiTexCoord3ivARB: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void>,
    MultiTexCoord3s: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void>,
    MultiTexCoord3sARB: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void>,
    MultiTexCoord3sv: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void>,
    MultiTexCoord3svARB: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void>,
    MultiTexCoord3xOES: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) -> c_void>,
    MultiTexCoord3xvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void>,
    MultiTexCoord4bOES: FnPtr<extern "C" fn(texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void>,
    MultiTexCoord4bvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLbyte) -> c_void>,
    MultiTexCoord4d: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void>,
    MultiTexCoord4dARB: FnPtr<extern "C" fn(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void>,
    MultiTexCoord4dv: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void>,
    MultiTexCoord4dvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLdouble) -> c_void>,
    MultiTexCoord4f: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void>,
    MultiTexCoord4fARB: FnPtr<extern "C" fn(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void>,
    MultiTexCoord4fv: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void>,
    MultiTexCoord4fvARB: FnPtr<extern "C" fn(target: GLenum, v: *GLfloat) -> c_void>,
    MultiTexCoord4hNV: FnPtr<extern "C" fn(target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void>,
    MultiTexCoord4hvNV: FnPtr<extern "C" fn(target: GLenum, v: *GLhalfNV) -> c_void>,
    MultiTexCoord4i: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void>,
    MultiTexCoord4iARB: FnPtr<extern "C" fn(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void>,
    MultiTexCoord4iv: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void>,
    MultiTexCoord4ivARB: FnPtr<extern "C" fn(target: GLenum, v: *GLint) -> c_void>,
    MultiTexCoord4s: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void>,
    MultiTexCoord4sARB: FnPtr<extern "C" fn(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void>,
    MultiTexCoord4sv: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void>,
    MultiTexCoord4svARB: FnPtr<extern "C" fn(target: GLenum, v: *GLshort) -> c_void>,
    MultiTexCoord4x: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void>,
    MultiTexCoord4xOES: FnPtr<extern "C" fn(texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void>,
    MultiTexCoord4xvOES: FnPtr<extern "C" fn(texture: GLenum, coords: *GLfixed) -> c_void>,
    MultiTexCoordP1ui: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void>,
    MultiTexCoordP1uiv: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void>,
    MultiTexCoordP2ui: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void>,
    MultiTexCoordP2uiv: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void>,
    MultiTexCoordP3ui: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void>,
    MultiTexCoordP3uiv: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void>,
    MultiTexCoordP4ui: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: GLuint) -> c_void>,
    MultiTexCoordP4uiv: FnPtr<extern "C" fn(texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void>,
    MultiTexCoordPointerEXT: FnPtr<extern "C" fn(texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    MultiTexEnvfEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    MultiTexEnvfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    MultiTexEnviEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    MultiTexEnvivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    MultiTexGendEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) -> c_void>,
    MultiTexGendvEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void>,
    MultiTexGenfEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    MultiTexGenfvEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    MultiTexGeniEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) -> c_void>,
    MultiTexGenivEXT: FnPtr<extern "C" fn(texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    MultiTexImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    MultiTexImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    MultiTexImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    MultiTexParameterIivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    MultiTexParameterIuivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void>,
    MultiTexParameterfEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    MultiTexParameterfvEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    MultiTexParameteriEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    MultiTexParameterivEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    MultiTexRenderbufferEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, renderbuffer: GLuint) -> c_void>,
    MultiTexSubImage1DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    MultiTexSubImage2DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    MultiTexSubImage3DEXT: FnPtr<extern "C" fn(texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    NamedBufferDataEXT: FnPtr<extern "C" fn(buffer: GLuint, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void>,
    NamedBufferStorageEXT: FnPtr<extern "C" fn(buffer: GLuint, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void>,
    NamedBufferSubDataEXT: FnPtr<extern "C" fn(buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void>,
    NamedCopyBufferSubDataEXT: FnPtr<extern "C" fn(readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void>,
    NamedFramebufferParameteriEXT: FnPtr<extern "C" fn(framebuffer: GLuint, pname: GLenum, param: GLint) -> c_void>,
    NamedFramebufferRenderbufferEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void>,
    NamedFramebufferTexture1DEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void>,
    NamedFramebufferTexture2DEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void>,
    NamedFramebufferTexture3DEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void>,
    NamedFramebufferTextureEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> c_void>,
    NamedFramebufferTextureFaceEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void>,
    NamedFramebufferTextureLayerEXT: FnPtr<extern "C" fn(framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void>,
    NamedProgramLocalParameter4dEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    NamedProgramLocalParameter4dvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void>,
    NamedProgramLocalParameter4fEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    NamedProgramLocalParameter4fvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void>,
    NamedProgramLocalParameterI4iEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    NamedProgramLocalParameterI4ivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void>,
    NamedProgramLocalParameterI4uiEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void>,
    NamedProgramLocalParameterI4uivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void>,
    NamedProgramLocalParameters4fvEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void>,
    NamedProgramLocalParametersI4ivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void>,
    NamedProgramLocalParametersI4uivEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void>,
    NamedProgramStringEXT: FnPtr<extern "C" fn(program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void>,
    NamedRenderbufferStorageEXT: FnPtr<extern "C" fn(renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    NamedRenderbufferStorageMultisampleCoverageEXT: FnPtr<extern "C" fn(renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    NamedRenderbufferStorageMultisampleEXT: FnPtr<extern "C" fn(renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    NamedStringARB: FnPtr<extern "C" fn(type_: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, string: *GLchar) -> c_void>,
    NewList: FnPtr<extern "C" fn(list: GLuint, mode: GLenum) -> c_void>,
    NewObjectBufferATI: FnPtr<extern "C" fn(size: GLsizei, pointer: *GLvoid, usage: GLenum) -> GLuint>,
    Normal3b: FnPtr<extern "C" fn(nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void>,
    Normal3bv: FnPtr<extern "C" fn(v: *GLbyte) -> c_void>,
    Normal3d: FnPtr<extern "C" fn(nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void>,
    Normal3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    Normal3f: FnPtr<extern "C" fn(nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void>,
    Normal3fVertex3fSUN: FnPtr<extern "C" fn(nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    Normal3fVertex3fvSUN: FnPtr<extern "C" fn(n: *GLfloat, v: *GLfloat) -> c_void>,
    Normal3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    Normal3hNV: FnPtr<extern "C" fn(nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) -> c_void>,
    Normal3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    Normal3i: FnPtr<extern "C" fn(nx: GLint, ny: GLint, nz: GLint) -> c_void>,
    Normal3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    Normal3s: FnPtr<extern "C" fn(nx: GLshort, ny: GLshort, nz: GLshort) -> c_void>,
    Normal3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    Normal3x: FnPtr<extern "C" fn(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void>,
    Normal3xOES: FnPtr<extern "C" fn(nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void>,
    Normal3xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    NormalFormatNV: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei) -> c_void>,
    NormalP3ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void>,
    NormalP3uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void>,
    NormalPointer: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    NormalPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void>,
    NormalPointerListIBM: FnPtr<extern "C" fn(type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void>,
    NormalPointervINTEL: FnPtr<extern "C" fn(type_: GLenum, pointer: **GLvoid) -> c_void>,
    NormalStream3bATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void>,
    NormalStream3bvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLbyte) -> c_void>,
    NormalStream3dATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void>,
    NormalStream3dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void>,
    NormalStream3fATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void>,
    NormalStream3fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void>,
    NormalStream3iATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLint, ny: GLint, nz: GLint) -> c_void>,
    NormalStream3ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void>,
    NormalStream3sATI: FnPtr<extern "C" fn(stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) -> c_void>,
    NormalStream3svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void>,
    ObjectLabel: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void>,
    ObjectLabelKHR: FnPtr<extern "C" fn(identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void>,
    ObjectPtrLabel: FnPtr<extern "C" fn(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void>,
    ObjectPtrLabelKHR: FnPtr<extern "C" fn(ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void>,
    ObjectPurgeableAPPLE: FnPtr<extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum>,
    ObjectUnpurgeableAPPLE: FnPtr<extern "C" fn(objectType: GLenum, name: GLuint, option: GLenum) -> GLenum>,
    Ortho: FnPtr<extern "C" fn(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void>,
    Orthof: FnPtr<extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void>,
    OrthofOES: FnPtr<extern "C" fn(l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void>,
    Orthox: FnPtr<extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void>,
    OrthoxOES: FnPtr<extern "C" fn(l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void>,
    PNTrianglesfATI: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    PNTrianglesiATI: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    PassTexCoordATI: FnPtr<extern "C" fn(dst: GLuint, coord: GLuint, swizzle: GLenum) -> c_void>,
    PassThrough: FnPtr<extern "C" fn(token: GLfloat) -> c_void>,
    PassThroughxOES: FnPtr<extern "C" fn(token: GLfixed) -> c_void>,
    PatchParameterfv: FnPtr<extern "C" fn(pname: GLenum, values: *GLfloat) -> c_void>,
    PatchParameteri: FnPtr<extern "C" fn(pname: GLenum, value: GLint) -> c_void>,
    PathColorGenNV: FnPtr<extern "C" fn(color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: *GLfloat) -> c_void>,
    PathCommandsNV: FnPtr<extern "C" fn(path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void>,
    PathCoordsNV: FnPtr<extern "C" fn(path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void>,
    PathCoverDepthFuncNV: FnPtr<extern "C" fn(func: GLenum) -> c_void>,
    PathDashArrayNV: FnPtr<extern "C" fn(path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) -> c_void>,
    PathFogGenNV: FnPtr<extern "C" fn(genMode: GLenum) -> c_void>,
    PathGlyphRangeNV: FnPtr<extern "C" fn(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void>,
    PathGlyphsNV: FnPtr<extern "C" fn(firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: *GLvoid, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void>,
    PathParameterfNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: GLfloat) -> c_void>,
    PathParameterfvNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: *GLfloat) -> c_void>,
    PathParameteriNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: GLint) -> c_void>,
    PathParameterivNV: FnPtr<extern "C" fn(path: GLuint, pname: GLenum, value: *GLint) -> c_void>,
    PathStencilDepthOffsetNV: FnPtr<extern "C" fn(factor: GLfloat, units: GLfloat) -> c_void>,
    PathStencilFuncNV: FnPtr<extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint) -> c_void>,
    PathStringNV: FnPtr<extern "C" fn(path: GLuint, format: GLenum, length: GLsizei, pathString: *GLvoid) -> c_void>,
    PathSubCommandsNV: FnPtr<extern "C" fn(path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void>,
    PathSubCoordsNV: FnPtr<extern "C" fn(path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void>,
    PathTexGenNV: FnPtr<extern "C" fn(texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: *GLfloat) -> c_void>,
    PauseTransformFeedback: FnPtr<extern "C" fn() -> c_void>,
    PauseTransformFeedbackNV: FnPtr<extern "C" fn() -> c_void>,
    PixelDataRangeNV: FnPtr<extern "C" fn(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void>,
    PixelMapfv: FnPtr<extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLfloat) -> c_void>,
    PixelMapuiv: FnPtr<extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLuint) -> c_void>,
    PixelMapusv: FnPtr<extern "C" fn(map: GLenum, mapsize: GLsizei, values: *GLushort) -> c_void>,
    PixelMapx: FnPtr<extern "C" fn(map: GLenum, size: GLint, values: *GLfixed) -> c_void>,
    PixelStoref: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    PixelStorei: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    PixelStorex: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void>,
    PixelTexGenParameterfSGIS: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    PixelTexGenParameterfvSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    PixelTexGenParameteriSGIS: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    PixelTexGenParameterivSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    PixelTexGenSGIX: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    PixelTransferf: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    PixelTransferi: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    PixelTransferxOES: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void>,
    PixelTransformParameterfEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    PixelTransformParameterfvEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    PixelTransformParameteriEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    PixelTransformParameterivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    PixelZoom: FnPtr<extern "C" fn(xfactor: GLfloat, yfactor: GLfloat) -> c_void>,
    PixelZoomxOES: FnPtr<extern "C" fn(xfactor: GLfixed, yfactor: GLfixed) -> c_void>,
    PointAlongPathNV: FnPtr<extern "C" fn(path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean>,
    PointParameterf: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    PointParameterfARB: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    PointParameterfEXT: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    PointParameterfSGIS: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    PointParameterfv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    PointParameterfvARB: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    PointParameterfvEXT: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    PointParameterfvSGIS: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    PointParameteri: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    PointParameteriNV: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    PointParameteriv: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    PointParameterivNV: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    PointParameterx: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void>,
    PointParameterxOES: FnPtr<extern "C" fn(pname: GLenum, param: GLfixed) -> c_void>,
    PointParameterxv: FnPtr<extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void>,
    PointParameterxvOES: FnPtr<extern "C" fn(pname: GLenum, params: *GLfixed) -> c_void>,
    PointSize: FnPtr<extern "C" fn(size: GLfloat) -> c_void>,
    PointSizePointerOES: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *c_void) -> c_void>,
    PointSizex: FnPtr<extern "C" fn(size: GLfixed) -> c_void>,
    PointSizexOES: FnPtr<extern "C" fn(size: GLfixed) -> c_void>,
    PollAsyncSGIX: FnPtr<extern "C" fn(markerp: *GLuint) -> GLint>,
    PollInstrumentsSGIX: FnPtr<extern "C" fn(marker_p: *GLint) -> GLint>,
    PolygonMode: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void>,
    PolygonOffset: FnPtr<extern "C" fn(factor: GLfloat, units: GLfloat) -> c_void>,
    PolygonOffsetEXT: FnPtr<extern "C" fn(factor: GLfloat, bias: GLfloat) -> c_void>,
    PolygonOffsetx: FnPtr<extern "C" fn(factor: GLfixed, units: GLfixed) -> c_void>,
    PolygonOffsetxOES: FnPtr<extern "C" fn(factor: GLfixed, units: GLfixed) -> c_void>,
    PolygonStipple: FnPtr<extern "C" fn(mask: *GLubyte) -> c_void>,
    PopAttrib: FnPtr<extern "C" fn() -> c_void>,
    PopClientAttrib: FnPtr<extern "C" fn() -> c_void>,
    PopDebugGroup: FnPtr<extern "C" fn() -> c_void>,
    PopDebugGroupKHR: FnPtr<extern "C" fn() -> c_void>,
    PopGroupMarkerEXT: FnPtr<extern "C" fn() -> c_void>,
    PopMatrix: FnPtr<extern "C" fn() -> c_void>,
    PopName: FnPtr<extern "C" fn() -> c_void>,
    PresentFrameDualFillNV: FnPtr<extern "C" fn(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) -> c_void>,
    PresentFrameKeyedNV: FnPtr<extern "C" fn(video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) -> c_void>,
    PrimitiveRestartIndex: FnPtr<extern "C" fn(index: GLuint) -> c_void>,
    PrimitiveRestartIndexNV: FnPtr<extern "C" fn(index: GLuint) -> c_void>,
    PrimitiveRestartNV: FnPtr<extern "C" fn() -> c_void>,
    PrioritizeTextures: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLfloat) -> c_void>,
    PrioritizeTexturesEXT: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLclampf) -> c_void>,
    PrioritizeTexturesxOES: FnPtr<extern "C" fn(n: GLsizei, textures: *GLuint, priorities: *GLfixed) -> c_void>,
    ProgramBinary: FnPtr<extern "C" fn(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void>,
    ProgramBinaryOES: FnPtr<extern "C" fn(program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLint) -> c_void>,
    ProgramBufferParametersIivNV: FnPtr<extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLint) -> c_void>,
    ProgramBufferParametersIuivNV: FnPtr<extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLuint) -> c_void>,
    ProgramBufferParametersfvNV: FnPtr<extern "C" fn(target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLfloat) -> c_void>,
    ProgramEnvParameter4dARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    ProgramEnvParameter4dvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void>,
    ProgramEnvParameter4fARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    ProgramEnvParameter4fvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void>,
    ProgramEnvParameterI4iNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    ProgramEnvParameterI4ivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void>,
    ProgramEnvParameterI4uiNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void>,
    ProgramEnvParameterI4uivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void>,
    ProgramEnvParameters4fvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void>,
    ProgramEnvParametersI4ivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void>,
    ProgramEnvParametersI4uivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void>,
    ProgramLocalParameter4dARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    ProgramLocalParameter4dvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLdouble) -> c_void>,
    ProgramLocalParameter4fARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    ProgramLocalParameter4fvARB: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLfloat) -> c_void>,
    ProgramLocalParameterI4iNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    ProgramLocalParameterI4ivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLint) -> c_void>,
    ProgramLocalParameterI4uiNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void>,
    ProgramLocalParameterI4uivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, params: *GLuint) -> c_void>,
    ProgramLocalParameters4fvEXT: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void>,
    ProgramLocalParametersI4ivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void>,
    ProgramLocalParametersI4uivNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void>,
    ProgramNamedParameter4dNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    ProgramNamedParameter4dvNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLdouble) -> c_void>,
    ProgramNamedParameter4fNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    ProgramNamedParameter4fvNV: FnPtr<extern "C" fn(id: GLuint, len: GLsizei, name: *GLubyte, v: *GLfloat) -> c_void>,
    ProgramParameter4dNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    ProgramParameter4dvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, v: *GLdouble) -> c_void>,
    ProgramParameter4fNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    ProgramParameter4fvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, v: *GLfloat) -> c_void>,
    ProgramParameteri: FnPtr<extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void>,
    ProgramParameteriARB: FnPtr<extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void>,
    ProgramParameteriEXT: FnPtr<extern "C" fn(program: GLuint, pname: GLenum, value: GLint) -> c_void>,
    ProgramParameters4dvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void>,
    ProgramParameters4fvNV: FnPtr<extern "C" fn(target: GLenum, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void>,
    ProgramStringARB: FnPtr<extern "C" fn(target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void>,
    ProgramSubroutineParametersuivNV: FnPtr<extern "C" fn(target: GLenum, count: GLsizei, params: *GLuint) -> c_void>,
    ProgramUniform1d: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLdouble) -> c_void>,
    ProgramUniform1dEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLdouble) -> c_void>,
    ProgramUniform1dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    ProgramUniform1dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    ProgramUniform1f: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat) -> c_void>,
    ProgramUniform1fEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat) -> c_void>,
    ProgramUniform1fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    ProgramUniform1fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    ProgramUniform1i: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint) -> c_void>,
    ProgramUniform1i64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT) -> c_void>,
    ProgramUniform1i64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void>,
    ProgramUniform1iEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint) -> c_void>,
    ProgramUniform1iv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    ProgramUniform1ivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    ProgramUniform1ui: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint) -> c_void>,
    ProgramUniform1ui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT) -> c_void>,
    ProgramUniform1ui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    ProgramUniform1uiEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint) -> c_void>,
    ProgramUniform1uiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    ProgramUniform1uivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    ProgramUniform2d: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> c_void>,
    ProgramUniform2dEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble) -> c_void>,
    ProgramUniform2dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    ProgramUniform2dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    ProgramUniform2f: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void>,
    ProgramUniform2fEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void>,
    ProgramUniform2fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    ProgramUniform2fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    ProgramUniform2i: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void>,
    ProgramUniform2i64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void>,
    ProgramUniform2i64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void>,
    ProgramUniform2iEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void>,
    ProgramUniform2iv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    ProgramUniform2ivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    ProgramUniform2ui: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void>,
    ProgramUniform2ui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void>,
    ProgramUniform2ui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    ProgramUniform2uiEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void>,
    ProgramUniform2uiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    ProgramUniform2uivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    ProgramUniform3d: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> c_void>,
    ProgramUniform3dEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    ProgramUniform3dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    ProgramUniform3dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    ProgramUniform3f: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void>,
    ProgramUniform3fEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void>,
    ProgramUniform3fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    ProgramUniform3fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    ProgramUniform3i: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void>,
    ProgramUniform3i64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void>,
    ProgramUniform3i64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void>,
    ProgramUniform3iEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void>,
    ProgramUniform3iv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    ProgramUniform3ivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    ProgramUniform3ui: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void>,
    ProgramUniform3ui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void>,
    ProgramUniform3ui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    ProgramUniform3uiEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void>,
    ProgramUniform3uiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    ProgramUniform3uivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    ProgramUniform4d: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> c_void>,
    ProgramUniform4dEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    ProgramUniform4dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    ProgramUniform4dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    ProgramUniform4f: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void>,
    ProgramUniform4fEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void>,
    ProgramUniform4fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    ProgramUniform4fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    ProgramUniform4i: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void>,
    ProgramUniform4i64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void>,
    ProgramUniform4i64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void>,
    ProgramUniform4iEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void>,
    ProgramUniform4iv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    ProgramUniform4ivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    ProgramUniform4ui: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void>,
    ProgramUniform4ui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void>,
    ProgramUniform4ui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    ProgramUniform4uiEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void>,
    ProgramUniform4uiv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    ProgramUniform4uivEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    ProgramUniformHandleui64ARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, value: GLuint64) -> c_void>,
    ProgramUniformHandleui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, value: GLuint64) -> c_void>,
    ProgramUniformHandleui64vARB: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void>,
    ProgramUniformHandleui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void>,
    ProgramUniformMatrix2dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix2dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix2fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix2fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix2x3dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix2x3dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix2x3fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix2x3fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix2x4dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix2x4dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix2x4fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix2x4fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix3dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix3dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix3fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix3fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix3x2dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix3x2dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix3x2fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix3x2fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix3x4dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix3x4dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix3x4fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix3x4fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix4dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix4dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix4fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix4fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix4x2dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix4x2dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix4x2fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix4x2fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix4x3dv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix4x3dvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    ProgramUniformMatrix4x3fv: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformMatrix4x3fvEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    ProgramUniformui64NV: FnPtr<extern "C" fn(program: GLuint, location: GLint, value: GLuint64EXT) -> c_void>,
    ProgramUniformui64vNV: FnPtr<extern "C" fn(program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    ProgramVertexLimitNV: FnPtr<extern "C" fn(target: GLenum, limit: GLint) -> c_void>,
    ProvokingVertex: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    ProvokingVertexEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    PushAttrib: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void>,
    PushClientAttrib: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void>,
    PushClientAttribDefaultEXT: FnPtr<extern "C" fn(mask: GLbitfield) -> c_void>,
    PushDebugGroup: FnPtr<extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void>,
    PushDebugGroupKHR: FnPtr<extern "C" fn(source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void>,
    PushGroupMarkerEXT: FnPtr<extern "C" fn(length: GLsizei, marker: *GLchar) -> c_void>,
    PushMatrix: FnPtr<extern "C" fn() -> c_void>,
    PushName: FnPtr<extern "C" fn(name: GLuint) -> c_void>,
    QueryCounter: FnPtr<extern "C" fn(id: GLuint, target: GLenum) -> c_void>,
    QueryCounterEXT: FnPtr<extern "C" fn(id: GLuint, target: GLenum) -> c_void>,
    QueryMatrixxOES: FnPtr<extern "C" fn(mantissa: *GLfixed, exponent: *GLint) -> GLbitfield>,
    RasterPos2d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void>,
    RasterPos2dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    RasterPos2f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void>,
    RasterPos2fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    RasterPos2i: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void>,
    RasterPos2iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    RasterPos2s: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void>,
    RasterPos2sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    RasterPos2xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed) -> c_void>,
    RasterPos2xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    RasterPos3d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    RasterPos3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    RasterPos3f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    RasterPos3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    RasterPos3i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void>,
    RasterPos3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    RasterPos3s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    RasterPos3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    RasterPos3xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void>,
    RasterPos3xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    RasterPos4d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    RasterPos4dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    RasterPos4f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    RasterPos4fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    RasterPos4i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    RasterPos4iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    RasterPos4s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void>,
    RasterPos4sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    RasterPos4xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) -> c_void>,
    RasterPos4xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    ReadBuffer: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    ReadBufferIndexedEXT: FnPtr<extern "C" fn(src: GLenum, index: GLint) -> c_void>,
    ReadBufferNV: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    ReadInstrumentsSGIX: FnPtr<extern "C" fn(marker: GLint) -> c_void>,
    ReadPixels: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    ReadnPixelsARB: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void>,
    ReadnPixelsEXT: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void>,
    Rectd: FnPtr<extern "C" fn(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> c_void>,
    Rectdv: FnPtr<extern "C" fn(v1: *GLdouble, v2: *GLdouble) -> c_void>,
    Rectf: FnPtr<extern "C" fn(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> c_void>,
    Rectfv: FnPtr<extern "C" fn(v1: *GLfloat, v2: *GLfloat) -> c_void>,
    Recti: FnPtr<extern "C" fn(x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> c_void>,
    Rectiv: FnPtr<extern "C" fn(v1: *GLint, v2: *GLint) -> c_void>,
    Rects: FnPtr<extern "C" fn(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> c_void>,
    Rectsv: FnPtr<extern "C" fn(v1: *GLshort, v2: *GLshort) -> c_void>,
    RectxOES: FnPtr<extern "C" fn(x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) -> c_void>,
    RectxvOES: FnPtr<extern "C" fn(v1: *GLfixed, v2: *GLfixed) -> c_void>,
    ReferencePlaneSGIX: FnPtr<extern "C" fn(equation: *GLdouble) -> c_void>,
    ReleaseShaderCompiler: FnPtr<extern "C" fn() -> c_void>,
    RenderMode: FnPtr<extern "C" fn(mode: GLenum) -> GLint>,
    RenderbufferStorage: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageMultisampleANGLE: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageMultisampleAPPLE: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageMultisampleCoverageNV: FnPtr<extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageMultisampleEXT: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageMultisampleIMG: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageMultisampleNV: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    RenderbufferStorageOES: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    ReplacementCodePointerSUN: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: **GLvoid) -> c_void>,
    ReplacementCodeubSUN: FnPtr<extern "C" fn(code: GLubyte) -> c_void>,
    ReplacementCodeubvSUN: FnPtr<extern "C" fn(code: *GLubyte) -> c_void>,
    ReplacementCodeuiColor3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    ReplacementCodeuiColor3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, c: *GLfloat, v: *GLfloat) -> c_void>,
    ReplacementCodeuiColor4fNormal3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    ReplacementCodeuiColor4fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void>,
    ReplacementCodeuiColor4ubVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    ReplacementCodeuiColor4ubVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, c: *GLubyte, v: *GLfloat) -> c_void>,
    ReplacementCodeuiNormal3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    ReplacementCodeuiNormal3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, n: *GLfloat, v: *GLfloat) -> c_void>,
    ReplacementCodeuiSUN: FnPtr<extern "C" fn(code: GLuint) -> c_void>,
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void>,
    ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void>,
    ReplacementCodeuiTexCoord2fVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    ReplacementCodeuiTexCoord2fVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, tc: *GLfloat, v: *GLfloat) -> c_void>,
    ReplacementCodeuiVertex3fSUN: FnPtr<extern "C" fn(rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    ReplacementCodeuiVertex3fvSUN: FnPtr<extern "C" fn(rc: *GLuint, v: *GLfloat) -> c_void>,
    ReplacementCodeuivSUN: FnPtr<extern "C" fn(code: *GLuint) -> c_void>,
    ReplacementCodeusSUN: FnPtr<extern "C" fn(code: GLushort) -> c_void>,
    ReplacementCodeusvSUN: FnPtr<extern "C" fn(code: *GLushort) -> c_void>,
    RequestResidentProgramsNV: FnPtr<extern "C" fn(n: GLsizei, programs: *GLuint) -> c_void>,
    ResetHistogram: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    ResetHistogramEXT: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    ResetMinmax: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    ResetMinmaxEXT: FnPtr<extern "C" fn(target: GLenum) -> c_void>,
    ResizeBuffersMESA: FnPtr<extern "C" fn() -> c_void>,
    ResolveMultisampleFramebufferAPPLE: FnPtr<extern "C" fn() -> c_void>,
    ResumeTransformFeedback: FnPtr<extern "C" fn() -> c_void>,
    ResumeTransformFeedbackNV: FnPtr<extern "C" fn() -> c_void>,
    Rotated: FnPtr<extern "C" fn(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    Rotatef: FnPtr<extern "C" fn(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    Rotatex: FnPtr<extern "C" fn(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void>,
    RotatexOES: FnPtr<extern "C" fn(angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void>,
    SampleCoverage: FnPtr<extern "C" fn(value: GLfloat, invert: GLboolean) -> c_void>,
    SampleCoverageARB: FnPtr<extern "C" fn(value: GLfloat, invert: GLboolean) -> c_void>,
    SampleCoverageOES: FnPtr<extern "C" fn(value: GLfixed, invert: GLboolean) -> c_void>,
    SampleCoveragex: FnPtr<extern "C" fn(value: GLclampx, invert: GLboolean) -> c_void>,
    SampleCoveragexOES: FnPtr<extern "C" fn(value: GLclampx, invert: GLboolean) -> c_void>,
    SampleMapATI: FnPtr<extern "C" fn(dst: GLuint, interp: GLuint, swizzle: GLenum) -> c_void>,
    SampleMaskEXT: FnPtr<extern "C" fn(value: GLclampf, invert: GLboolean) -> c_void>,
    SampleMaskIndexedNV: FnPtr<extern "C" fn(index: GLuint, mask: GLbitfield) -> c_void>,
    SampleMaskSGIS: FnPtr<extern "C" fn(value: GLclampf, invert: GLboolean) -> c_void>,
    SampleMaski: FnPtr<extern "C" fn(index: GLuint, mask: GLbitfield) -> c_void>,
    SamplePatternEXT: FnPtr<extern "C" fn(pattern: GLenum) -> c_void>,
    SamplePatternSGIS: FnPtr<extern "C" fn(pattern: GLenum) -> c_void>,
    SamplerParameterIiv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void>,
    SamplerParameterIuiv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLuint) -> c_void>,
    SamplerParameterf: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: GLfloat) -> c_void>,
    SamplerParameterfv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLfloat) -> c_void>,
    SamplerParameteri: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: GLint) -> c_void>,
    SamplerParameteriv: FnPtr<extern "C" fn(sampler: GLuint, pname: GLenum, param: *GLint) -> c_void>,
    Scaled: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    Scalef: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    Scalex: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void>,
    ScalexOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void>,
    Scissor: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    ScissorArrayv: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, v: *GLint) -> c_void>,
    ScissorIndexed: FnPtr<extern "C" fn(index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    ScissorIndexedv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    SecondaryColor3b: FnPtr<extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void>,
    SecondaryColor3bEXT: FnPtr<extern "C" fn(red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void>,
    SecondaryColor3bv: FnPtr<extern "C" fn(v: *GLbyte) -> c_void>,
    SecondaryColor3bvEXT: FnPtr<extern "C" fn(v: *GLbyte) -> c_void>,
    SecondaryColor3d: FnPtr<extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void>,
    SecondaryColor3dEXT: FnPtr<extern "C" fn(red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void>,
    SecondaryColor3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    SecondaryColor3dvEXT: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    SecondaryColor3f: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void>,
    SecondaryColor3fEXT: FnPtr<extern "C" fn(red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void>,
    SecondaryColor3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    SecondaryColor3fvEXT: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    SecondaryColor3hNV: FnPtr<extern "C" fn(red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void>,
    SecondaryColor3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    SecondaryColor3i: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void>,
    SecondaryColor3iEXT: FnPtr<extern "C" fn(red: GLint, green: GLint, blue: GLint) -> c_void>,
    SecondaryColor3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    SecondaryColor3ivEXT: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    SecondaryColor3s: FnPtr<extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void>,
    SecondaryColor3sEXT: FnPtr<extern "C" fn(red: GLshort, green: GLshort, blue: GLshort) -> c_void>,
    SecondaryColor3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    SecondaryColor3svEXT: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    SecondaryColor3ub: FnPtr<extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void>,
    SecondaryColor3ubEXT: FnPtr<extern "C" fn(red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void>,
    SecondaryColor3ubv: FnPtr<extern "C" fn(v: *GLubyte) -> c_void>,
    SecondaryColor3ubvEXT: FnPtr<extern "C" fn(v: *GLubyte) -> c_void>,
    SecondaryColor3ui: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void>,
    SecondaryColor3uiEXT: FnPtr<extern "C" fn(red: GLuint, green: GLuint, blue: GLuint) -> c_void>,
    SecondaryColor3uiv: FnPtr<extern "C" fn(v: *GLuint) -> c_void>,
    SecondaryColor3uivEXT: FnPtr<extern "C" fn(v: *GLuint) -> c_void>,
    SecondaryColor3us: FnPtr<extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void>,
    SecondaryColor3usEXT: FnPtr<extern "C" fn(red: GLushort, green: GLushort, blue: GLushort) -> c_void>,
    SecondaryColor3usv: FnPtr<extern "C" fn(v: *GLushort) -> c_void>,
    SecondaryColor3usvEXT: FnPtr<extern "C" fn(v: *GLushort) -> c_void>,
    SecondaryColorFormatNV: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void>,
    SecondaryColorP3ui: FnPtr<extern "C" fn(type_: GLenum, color: GLuint) -> c_void>,
    SecondaryColorP3uiv: FnPtr<extern "C" fn(type_: GLenum, color: *GLuint) -> c_void>,
    SecondaryColorPointer: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    SecondaryColorPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    SecondaryColorPointerListIBM: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void>,
    SelectBuffer: FnPtr<extern "C" fn(size: GLsizei, buffer: *GLuint) -> c_void>,
    SelectPerfMonitorCountersAMD: FnPtr<extern "C" fn(monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) -> c_void>,
    SeparableFilter2D: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void>,
    SeparableFilter2DEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void>,
    SetFenceAPPLE: FnPtr<extern "C" fn(fence: GLuint) -> c_void>,
    SetFenceNV: FnPtr<extern "C" fn(fence: GLuint, condition: GLenum) -> c_void>,
    SetFragmentShaderConstantATI: FnPtr<extern "C" fn(dst: GLuint, value: *GLfloat) -> c_void>,
    SetInvariantEXT: FnPtr<extern "C" fn(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void>,
    SetLocalConstantEXT: FnPtr<extern "C" fn(id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void>,
    SetMultisamplefvAMD: FnPtr<extern "C" fn(pname: GLenum, index: GLuint, val: *GLfloat) -> c_void>,
    ShadeModel: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    ShaderBinary: FnPtr<extern "C" fn(count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void>,
    ShaderOp1EXT: FnPtr<extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint) -> c_void>,
    ShaderOp2EXT: FnPtr<extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) -> c_void>,
    ShaderOp3EXT: FnPtr<extern "C" fn(op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) -> c_void>,
    ShaderSource: FnPtr<extern "C" fn(shader: GLuint, count: GLsizei, string: **GLchar, length: *GLint) -> c_void>,
    ShaderSourceARB: FnPtr<extern "C" fn(shaderObj: GLhandleARB, count: GLsizei, string: **GLcharARB, length: *GLint) -> c_void>,
    ShaderStorageBlockBinding: FnPtr<extern "C" fn(program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> c_void>,
    SharpenTexFuncSGIS: FnPtr<extern "C" fn(target: GLenum, n: GLsizei, points: *GLfloat) -> c_void>,
    SpriteParameterfSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    SpriteParameterfvSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLfloat) -> c_void>,
    SpriteParameteriSGIX: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    SpriteParameterivSGIX: FnPtr<extern "C" fn(pname: GLenum, params: *GLint) -> c_void>,
    StartInstrumentsSGIX: FnPtr<extern "C" fn() -> c_void>,
    StartTilingQCOM: FnPtr<extern "C" fn(x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) -> c_void>,
    StencilClearTagEXT: FnPtr<extern "C" fn(stencilTagBits: GLsizei, stencilClearTag: GLuint) -> c_void>,
    StencilFillPathInstancedNV: FnPtr<extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void>,
    StencilFillPathNV: FnPtr<extern "C" fn(path: GLuint, fillMode: GLenum, mask: GLuint) -> c_void>,
    StencilFunc: FnPtr<extern "C" fn(func: GLenum, ref_: GLint, mask: GLuint) -> c_void>,
    StencilFuncSeparate: FnPtr<extern "C" fn(face: GLenum, func: GLenum, ref_: GLint, mask: GLuint) -> c_void>,
    StencilFuncSeparateATI: FnPtr<extern "C" fn(frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint) -> c_void>,
    StencilMask: FnPtr<extern "C" fn(mask: GLuint) -> c_void>,
    StencilMaskSeparate: FnPtr<extern "C" fn(face: GLenum, mask: GLuint) -> c_void>,
    StencilOp: FnPtr<extern "C" fn(fail: GLenum, zfail: GLenum, zpass: GLenum) -> c_void>,
    StencilOpSeparate: FnPtr<extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void>,
    StencilOpSeparateATI: FnPtr<extern "C" fn(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void>,
    StencilOpValueAMD: FnPtr<extern "C" fn(face: GLenum, value: GLuint) -> c_void>,
    StencilStrokePathInstancedNV: FnPtr<extern "C" fn(numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void>,
    StencilStrokePathNV: FnPtr<extern "C" fn(path: GLuint, reference: GLint, mask: GLuint) -> c_void>,
    StopInstrumentsSGIX: FnPtr<extern "C" fn(marker: GLint) -> c_void>,
    StringMarkerGREMEDY: FnPtr<extern "C" fn(len: GLsizei, string: *GLvoid) -> c_void>,
    SwizzleEXT: FnPtr<extern "C" fn(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void>,
    SyncTextureINTEL: FnPtr<extern "C" fn(texture: GLuint) -> c_void>,
    TagSampleBufferSGIX: FnPtr<extern "C" fn() -> c_void>,
    Tangent3bEXT: FnPtr<extern "C" fn(tx: GLbyte, ty: GLbyte, tz: GLbyte) -> c_void>,
    Tangent3bvEXT: FnPtr<extern "C" fn(v: *GLbyte) -> c_void>,
    Tangent3dEXT: FnPtr<extern "C" fn(tx: GLdouble, ty: GLdouble, tz: GLdouble) -> c_void>,
    Tangent3dvEXT: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    Tangent3fEXT: FnPtr<extern "C" fn(tx: GLfloat, ty: GLfloat, tz: GLfloat) -> c_void>,
    Tangent3fvEXT: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    Tangent3iEXT: FnPtr<extern "C" fn(tx: GLint, ty: GLint, tz: GLint) -> c_void>,
    Tangent3ivEXT: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    Tangent3sEXT: FnPtr<extern "C" fn(tx: GLshort, ty: GLshort, tz: GLshort) -> c_void>,
    Tangent3svEXT: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    TangentPointerEXT: FnPtr<extern "C" fn(type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    TbufferMask3DFX: FnPtr<extern "C" fn(mask: GLuint) -> c_void>,
    TessellationFactorAMD: FnPtr<extern "C" fn(factor: GLfloat) -> c_void>,
    TessellationModeAMD: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    TestFenceAPPLE: FnPtr<extern "C" fn(fence: GLuint) -> GLboolean>,
    TestFenceNV: FnPtr<extern "C" fn(fence: GLuint) -> GLboolean>,
    TestObjectAPPLE: FnPtr<extern "C" fn(object: GLenum, name: GLuint) -> GLboolean>,
    TexBuffer: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void>,
    TexBufferARB: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void>,
    TexBufferEXT: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void>,
    TexBufferRange: FnPtr<extern "C" fn(target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void>,
    TexBumpParameterfvATI: FnPtr<extern "C" fn(pname: GLenum, param: *GLfloat) -> c_void>,
    TexBumpParameterivATI: FnPtr<extern "C" fn(pname: GLenum, param: *GLint) -> c_void>,
    TexCoord1bOES: FnPtr<extern "C" fn(s: GLbyte) -> c_void>,
    TexCoord1bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void>,
    TexCoord1d: FnPtr<extern "C" fn(s: GLdouble) -> c_void>,
    TexCoord1dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    TexCoord1f: FnPtr<extern "C" fn(s: GLfloat) -> c_void>,
    TexCoord1fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    TexCoord1hNV: FnPtr<extern "C" fn(s: GLhalfNV) -> c_void>,
    TexCoord1hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    TexCoord1i: FnPtr<extern "C" fn(s: GLint) -> c_void>,
    TexCoord1iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    TexCoord1s: FnPtr<extern "C" fn(s: GLshort) -> c_void>,
    TexCoord1sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    TexCoord1xOES: FnPtr<extern "C" fn(s: GLfixed) -> c_void>,
    TexCoord1xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    TexCoord2bOES: FnPtr<extern "C" fn(s: GLbyte, t: GLbyte) -> c_void>,
    TexCoord2bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void>,
    TexCoord2d: FnPtr<extern "C" fn(s: GLdouble, t: GLdouble) -> c_void>,
    TexCoord2dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    TexCoord2f: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat) -> c_void>,
    TexCoord2fColor3fVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    TexCoord2fColor3fVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, c: *GLfloat, v: *GLfloat) -> c_void>,
    TexCoord2fColor4fNormal3fVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    TexCoord2fColor4fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void>,
    TexCoord2fColor4ubVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    TexCoord2fColor4ubVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, c: *GLubyte, v: *GLfloat) -> c_void>,
    TexCoord2fNormal3fVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    TexCoord2fNormal3fVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void>,
    TexCoord2fVertex3fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    TexCoord2fVertex3fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, v: *GLfloat) -> c_void>,
    TexCoord2fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    TexCoord2hNV: FnPtr<extern "C" fn(s: GLhalfNV, t: GLhalfNV) -> c_void>,
    TexCoord2hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    TexCoord2i: FnPtr<extern "C" fn(s: GLint, t: GLint) -> c_void>,
    TexCoord2iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    TexCoord2s: FnPtr<extern "C" fn(s: GLshort, t: GLshort) -> c_void>,
    TexCoord2sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    TexCoord2xOES: FnPtr<extern "C" fn(s: GLfixed, t: GLfixed) -> c_void>,
    TexCoord2xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    TexCoord3bOES: FnPtr<extern "C" fn(s: GLbyte, t: GLbyte, r: GLbyte) -> c_void>,
    TexCoord3bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void>,
    TexCoord3d: FnPtr<extern "C" fn(s: GLdouble, t: GLdouble, r: GLdouble) -> c_void>,
    TexCoord3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    TexCoord3f: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat) -> c_void>,
    TexCoord3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    TexCoord3hNV: FnPtr<extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void>,
    TexCoord3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    TexCoord3i: FnPtr<extern "C" fn(s: GLint, t: GLint, r: GLint) -> c_void>,
    TexCoord3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    TexCoord3s: FnPtr<extern "C" fn(s: GLshort, t: GLshort, r: GLshort) -> c_void>,
    TexCoord3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    TexCoord3xOES: FnPtr<extern "C" fn(s: GLfixed, t: GLfixed, r: GLfixed) -> c_void>,
    TexCoord3xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    TexCoord4bOES: FnPtr<extern "C" fn(s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void>,
    TexCoord4bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void>,
    TexCoord4d: FnPtr<extern "C" fn(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void>,
    TexCoord4dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    TexCoord4f: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void>,
    TexCoord4fColor4fNormal3fVertex4fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    TexCoord4fColor4fNormal3fVertex4fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void>,
    TexCoord4fVertex4fSUN: FnPtr<extern "C" fn(s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    TexCoord4fVertex4fvSUN: FnPtr<extern "C" fn(tc: *GLfloat, v: *GLfloat) -> c_void>,
    TexCoord4fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    TexCoord4hNV: FnPtr<extern "C" fn(s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void>,
    TexCoord4hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    TexCoord4i: FnPtr<extern "C" fn(s: GLint, t: GLint, r: GLint, q: GLint) -> c_void>,
    TexCoord4iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    TexCoord4s: FnPtr<extern "C" fn(s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void>,
    TexCoord4sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    TexCoord4xOES: FnPtr<extern "C" fn(s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void>,
    TexCoord4xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    TexCoordFormatNV: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void>,
    TexCoordP1ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void>,
    TexCoordP1uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void>,
    TexCoordP2ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void>,
    TexCoordP2uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void>,
    TexCoordP3ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void>,
    TexCoordP3uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void>,
    TexCoordP4ui: FnPtr<extern "C" fn(type_: GLenum, coords: GLuint) -> c_void>,
    TexCoordP4uiv: FnPtr<extern "C" fn(type_: GLenum, coords: *GLuint) -> c_void>,
    TexCoordPointer: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    TexCoordPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void>,
    TexCoordPointerListIBM: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void>,
    TexCoordPointervINTEL: FnPtr<extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void>,
    TexEnvf: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    TexEnvfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    TexEnvi: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    TexEnviv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    TexEnvx: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    TexEnvxOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    TexEnvxv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    TexEnvxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    TexFilterFuncSGIS: FnPtr<extern "C" fn(target: GLenum, filter: GLenum, n: GLsizei, weights: *GLfloat) -> c_void>,
    TexGend: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLdouble) -> c_void>,
    TexGendv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void>,
    TexGenf: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    TexGenfOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    TexGenfv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    TexGenfvOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    TexGeni: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLint) -> c_void>,
    TexGeniOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLint) -> c_void>,
    TexGeniv: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    TexGenivOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    TexGenxOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    TexGenxvOES: FnPtr<extern "C" fn(coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    TexImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexImage2DMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void>,
    TexImage2DMultisampleCoverageNV: FnPtr<extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void>,
    TexImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexImage3DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexImage3DMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void>,
    TexImage3DMultisampleCoverageNV: FnPtr<extern "C" fn(target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void>,
    TexImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexImage4DSGIS: FnPtr<extern "C" fn(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexPageCommitmentARB: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void>,
    TexParameterIiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    TexParameterIivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    TexParameterIuiv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void>,
    TexParameterIuivEXT: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLuint) -> c_void>,
    TexParameterf: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    TexParameterfv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    TexParameteri: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    TexParameteriv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    TexParameterx: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    TexParameterxOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, param: GLfixed) -> c_void>,
    TexParameterxv: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    TexParameterxvOES: FnPtr<extern "C" fn(target: GLenum, pname: GLenum, params: *GLfixed) -> c_void>,
    TexRenderbufferNV: FnPtr<extern "C" fn(target: GLenum, renderbuffer: GLuint) -> c_void>,
    TexStorage1D: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void>,
    TexStorage1DEXT: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void>,
    TexStorage2D: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    TexStorage2DEXT: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    TexStorage2DMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void>,
    TexStorage3D: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void>,
    TexStorage3DEXT: FnPtr<extern "C" fn(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void>,
    TexStorage3DMultisample: FnPtr<extern "C" fn(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void>,
    TexStorageSparseAMD: FnPtr<extern "C" fn(target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void>,
    TexSubImage1D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexSubImage1DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexSubImage2D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexSubImage2DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexSubImage3D: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexSubImage3DEXT: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexSubImage3DOES: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TexSubImage4DSGIS: FnPtr<extern "C" fn(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TextureBarrierNV: FnPtr<extern "C" fn() -> c_void>,
    TextureBufferEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void>,
    TextureBufferRangeEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void>,
    TextureColorMaskSGIS: FnPtr<extern "C" fn(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void>,
    TextureImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TextureImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TextureImage2DMultisampleCoverageNV: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void>,
    TextureImage2DMultisampleNV: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void>,
    TextureImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TextureImage3DMultisampleCoverageNV: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void>,
    TextureImage3DMultisampleNV: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void>,
    TextureLightEXT: FnPtr<extern "C" fn(pname: GLenum) -> c_void>,
    TextureMaterialEXT: FnPtr<extern "C" fn(face: GLenum, mode: GLenum) -> c_void>,
    TextureNormalEXT: FnPtr<extern "C" fn(mode: GLenum) -> c_void>,
    TexturePageCommitmentEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void>,
    TextureParameterIivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    TextureParameterIuivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void>,
    TextureParameterfEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) -> c_void>,
    TextureParameterfvEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void>,
    TextureParameteriEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, param: GLint) -> c_void>,
    TextureParameterivEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void>,
    TextureRangeAPPLE: FnPtr<extern "C" fn(target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void>,
    TextureRenderbufferEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, renderbuffer: GLuint) -> c_void>,
    TextureStorage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void>,
    TextureStorage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void>,
    TextureStorage2DMultisampleEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void>,
    TextureStorage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void>,
    TextureStorage3DMultisampleEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void>,
    TextureStorageSparseAMD: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void>,
    TextureSubImage1DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TextureSubImage2DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TextureSubImage3DEXT: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void>,
    TextureView: FnPtr<extern "C" fn(texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> c_void>,
    TrackMatrixNV: FnPtr<extern "C" fn(target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) -> c_void>,
    TransformFeedbackAttribsNV: FnPtr<extern "C" fn(count: GLuint, attribs: *GLint, bufferMode: GLenum) -> c_void>,
    TransformFeedbackStreamAttribsNV: FnPtr<extern "C" fn(count: GLsizei, attribs: *GLint, nbuffers: GLsizei, bufstreams: *GLint, bufferMode: GLenum) -> c_void>,
    TransformFeedbackVaryings: FnPtr<extern "C" fn(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void>,
    TransformFeedbackVaryingsEXT: FnPtr<extern "C" fn(program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void>,
    TransformFeedbackVaryingsNV: FnPtr<extern "C" fn(program: GLuint, count: GLsizei, locations: *GLint, bufferMode: GLenum) -> c_void>,
    TransformPathNV: FnPtr<extern "C" fn(resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void>,
    Translated: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    Translatef: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    Translatex: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void>,
    TranslatexOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void>,
    Uniform1d: FnPtr<extern "C" fn(location: GLint, x: GLdouble) -> c_void>,
    Uniform1dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    Uniform1f: FnPtr<extern "C" fn(location: GLint, v0: GLfloat) -> c_void>,
    Uniform1fARB: FnPtr<extern "C" fn(location: GLint, v0: GLfloat) -> c_void>,
    Uniform1fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    Uniform1fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    Uniform1i: FnPtr<extern "C" fn(location: GLint, v0: GLint) -> c_void>,
    Uniform1i64NV: FnPtr<extern "C" fn(location: GLint, x: GLint64EXT) -> c_void>,
    Uniform1i64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void>,
    Uniform1iARB: FnPtr<extern "C" fn(location: GLint, v0: GLint) -> c_void>,
    Uniform1iv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    Uniform1ivARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    Uniform1ui: FnPtr<extern "C" fn(location: GLint, v0: GLuint) -> c_void>,
    Uniform1ui64NV: FnPtr<extern "C" fn(location: GLint, x: GLuint64EXT) -> c_void>,
    Uniform1ui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    Uniform1uiEXT: FnPtr<extern "C" fn(location: GLint, v0: GLuint) -> c_void>,
    Uniform1uiv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    Uniform1uivEXT: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    Uniform2d: FnPtr<extern "C" fn(location: GLint, x: GLdouble, y: GLdouble) -> c_void>,
    Uniform2dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    Uniform2f: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void>,
    Uniform2fARB: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat) -> c_void>,
    Uniform2fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    Uniform2fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    Uniform2i: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint) -> c_void>,
    Uniform2i64NV: FnPtr<extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void>,
    Uniform2i64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void>,
    Uniform2iARB: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint) -> c_void>,
    Uniform2iv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    Uniform2ivARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    Uniform2ui: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint) -> c_void>,
    Uniform2ui64NV: FnPtr<extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void>,
    Uniform2ui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    Uniform2uiEXT: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint) -> c_void>,
    Uniform2uiv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    Uniform2uivEXT: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    Uniform3d: FnPtr<extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    Uniform3dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    Uniform3f: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void>,
    Uniform3fARB: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void>,
    Uniform3fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    Uniform3fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    Uniform3i: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void>,
    Uniform3i64NV: FnPtr<extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void>,
    Uniform3i64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void>,
    Uniform3iARB: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void>,
    Uniform3iv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    Uniform3ivARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    Uniform3ui: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void>,
    Uniform3ui64NV: FnPtr<extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void>,
    Uniform3ui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    Uniform3uiEXT: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void>,
    Uniform3uiv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    Uniform3uivEXT: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    Uniform4d: FnPtr<extern "C" fn(location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    Uniform4dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLdouble) -> c_void>,
    Uniform4f: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void>,
    Uniform4fARB: FnPtr<extern "C" fn(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void>,
    Uniform4fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    Uniform4fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLfloat) -> c_void>,
    Uniform4i: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void>,
    Uniform4i64NV: FnPtr<extern "C" fn(location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void>,
    Uniform4i64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void>,
    Uniform4iARB: FnPtr<extern "C" fn(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void>,
    Uniform4iv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    Uniform4ivARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLint) -> c_void>,
    Uniform4ui: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void>,
    Uniform4ui64NV: FnPtr<extern "C" fn(location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void>,
    Uniform4ui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    Uniform4uiEXT: FnPtr<extern "C" fn(location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void>,
    Uniform4uiv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    Uniform4uivEXT: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint) -> c_void>,
    UniformBlockBinding: FnPtr<extern "C" fn(program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> c_void>,
    UniformBufferEXT: FnPtr<extern "C" fn(program: GLuint, location: GLint, buffer: GLuint) -> c_void>,
    UniformHandleui64ARB: FnPtr<extern "C" fn(location: GLint, value: GLuint64) -> c_void>,
    UniformHandleui64NV: FnPtr<extern "C" fn(location: GLint, value: GLuint64) -> c_void>,
    UniformHandleui64vARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64) -> c_void>,
    UniformHandleui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64) -> c_void>,
    UniformMatrix2dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix2fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix2fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix2x3dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix2x3fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix2x4dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix2x4fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix3dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix3fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix3fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix3x2dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix3x2fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix3x4dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix3x4fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix4dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix4fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix4fvARB: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix4x2dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix4x2fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformMatrix4x3dv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void>,
    UniformMatrix4x3fv: FnPtr<extern "C" fn(location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void>,
    UniformSubroutinesuiv: FnPtr<extern "C" fn(shadertype: GLenum, count: GLsizei, indices: *GLuint) -> c_void>,
    Uniformui64NV: FnPtr<extern "C" fn(location: GLint, value: GLuint64EXT) -> c_void>,
    Uniformui64vNV: FnPtr<extern "C" fn(location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void>,
    UnlockArraysEXT: FnPtr<extern "C" fn() -> c_void>,
    UnmapBuffer: FnPtr<extern "C" fn(target: GLenum) -> GLboolean>,
    UnmapBufferARB: FnPtr<extern "C" fn(target: GLenum) -> GLboolean>,
    UnmapBufferOES: FnPtr<extern "C" fn(target: GLenum) -> GLboolean>,
    UnmapNamedBufferEXT: FnPtr<extern "C" fn(buffer: GLuint) -> GLboolean>,
    UnmapObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint) -> c_void>,
    UnmapTexture2DINTEL: FnPtr<extern "C" fn(texture: GLuint, level: GLint) -> c_void>,
    UpdateObjectBufferATI: FnPtr<extern "C" fn(buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *GLvoid, preserve: GLenum) -> c_void>,
    UseProgram: FnPtr<extern "C" fn(program: GLuint) -> c_void>,
    UseProgramObjectARB: FnPtr<extern "C" fn(programObj: GLhandleARB) -> c_void>,
    UseProgramStages: FnPtr<extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void>,
    UseProgramStagesEXT: FnPtr<extern "C" fn(pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void>,
    UseShaderProgramEXT: FnPtr<extern "C" fn(type_: GLenum, program: GLuint) -> c_void>,
    VDPAUFiniNV: FnPtr<extern "C" fn() -> c_void>,
    VDPAUGetSurfaceivNV: FnPtr<extern "C" fn(surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void>,
    VDPAUInitNV: FnPtr<extern "C" fn(vdpDevice: *GLvoid, getProcAddress: *GLvoid) -> c_void>,
    VDPAUIsSurfaceNV: FnPtr<extern "C" fn(surface: GLvdpauSurfaceNV) -> c_void>,
    VDPAUMapSurfacesNV: FnPtr<extern "C" fn(numSurfaces: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void>,
    VDPAURegisterOutputSurfaceNV: FnPtr<extern "C" fn(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV>,
    VDPAURegisterVideoSurfaceNV: FnPtr<extern "C" fn(vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV>,
    VDPAUSurfaceAccessNV: FnPtr<extern "C" fn(surface: GLvdpauSurfaceNV, access: GLenum) -> c_void>,
    VDPAUUnmapSurfacesNV: FnPtr<extern "C" fn(numSurface: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void>,
    VDPAUUnregisterSurfaceNV: FnPtr<extern "C" fn(surface: GLvdpauSurfaceNV) -> c_void>,
    ValidateProgram: FnPtr<extern "C" fn(program: GLuint) -> c_void>,
    ValidateProgramARB: FnPtr<extern "C" fn(programObj: GLhandleARB) -> c_void>,
    ValidateProgramPipeline: FnPtr<extern "C" fn(pipeline: GLuint) -> c_void>,
    ValidateProgramPipelineEXT: FnPtr<extern "C" fn(pipeline: GLuint) -> c_void>,
    VariantArrayObjectATI: FnPtr<extern "C" fn(id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void>,
    VariantPointerEXT: FnPtr<extern "C" fn(id: GLuint, type_: GLenum, stride: GLuint, addr: *GLvoid) -> c_void>,
    VariantbvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLbyte) -> c_void>,
    VariantdvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLdouble) -> c_void>,
    VariantfvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLfloat) -> c_void>,
    VariantivEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLint) -> c_void>,
    VariantsvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLshort) -> c_void>,
    VariantubvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLubyte) -> c_void>,
    VariantuivEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLuint) -> c_void>,
    VariantusvEXT: FnPtr<extern "C" fn(id: GLuint, addr: *GLushort) -> c_void>,
    Vertex2bOES: FnPtr<extern "C" fn(x: GLbyte) -> c_void>,
    Vertex2bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void>,
    Vertex2d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void>,
    Vertex2dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    Vertex2f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void>,
    Vertex2fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    Vertex2hNV: FnPtr<extern "C" fn(x: GLhalfNV, y: GLhalfNV) -> c_void>,
    Vertex2hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    Vertex2i: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void>,
    Vertex2iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    Vertex2s: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void>,
    Vertex2sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    Vertex2xOES: FnPtr<extern "C" fn(x: GLfixed) -> c_void>,
    Vertex2xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    Vertex3bOES: FnPtr<extern "C" fn(x: GLbyte, y: GLbyte) -> c_void>,
    Vertex3bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void>,
    Vertex3d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    Vertex3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    Vertex3f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    Vertex3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    Vertex3hNV: FnPtr<extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void>,
    Vertex3hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    Vertex3i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void>,
    Vertex3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    Vertex3s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    Vertex3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    Vertex3xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed) -> c_void>,
    Vertex3xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    Vertex4bOES: FnPtr<extern "C" fn(x: GLbyte, y: GLbyte, z: GLbyte) -> c_void>,
    Vertex4bvOES: FnPtr<extern "C" fn(coords: *GLbyte) -> c_void>,
    Vertex4d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    Vertex4dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    Vertex4f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    Vertex4fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    Vertex4hNV: FnPtr<extern "C" fn(x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void>,
    Vertex4hvNV: FnPtr<extern "C" fn(v: *GLhalfNV) -> c_void>,
    Vertex4i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    Vertex4iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    Vertex4s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void>,
    Vertex4sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    Vertex4xOES: FnPtr<extern "C" fn(x: GLfixed, y: GLfixed, z: GLfixed) -> c_void>,
    Vertex4xvOES: FnPtr<extern "C" fn(coords: *GLfixed) -> c_void>,
    VertexArrayBindVertexBufferEXT: FnPtr<extern "C" fn(vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void>,
    VertexArrayColorOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayEdgeFlagOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayFogCoordOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayIndexOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayMultiTexCoordOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayNormalOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayParameteriAPPLE: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    VertexArrayRangeAPPLE: FnPtr<extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexArrayRangeNV: FnPtr<extern "C" fn(length: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexArraySecondaryColorOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayTexCoordOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayVertexAttribBindingEXT: FnPtr<extern "C" fn(vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> c_void>,
    VertexArrayVertexAttribFormatEXT: FnPtr<extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void>,
    VertexArrayVertexAttribIFormatEXT: FnPtr<extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void>,
    VertexArrayVertexAttribIOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayVertexAttribLFormatEXT: FnPtr<extern "C" fn(vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void>,
    VertexArrayVertexAttribLOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayVertexAttribOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexArrayVertexBindingDivisorEXT: FnPtr<extern "C" fn(vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> c_void>,
    VertexArrayVertexOffsetEXT: FnPtr<extern "C" fn(vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void>,
    VertexAttrib1d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void>,
    VertexAttrib1dARB: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void>,
    VertexAttrib1dNV: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void>,
    VertexAttrib1dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib1dvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib1dvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib1f: FnPtr<extern "C" fn(index: GLuint, x: GLfloat) -> c_void>,
    VertexAttrib1fARB: FnPtr<extern "C" fn(index: GLuint, x: GLfloat) -> c_void>,
    VertexAttrib1fNV: FnPtr<extern "C" fn(index: GLuint, x: GLfloat) -> c_void>,
    VertexAttrib1fv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib1fvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib1fvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib1hNV: FnPtr<extern "C" fn(index: GLuint, x: GLhalfNV) -> c_void>,
    VertexAttrib1hvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void>,
    VertexAttrib1s: FnPtr<extern "C" fn(index: GLuint, x: GLshort) -> c_void>,
    VertexAttrib1sARB: FnPtr<extern "C" fn(index: GLuint, x: GLshort) -> c_void>,
    VertexAttrib1sNV: FnPtr<extern "C" fn(index: GLuint, x: GLshort) -> c_void>,
    VertexAttrib1sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib1svARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib1svNV: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib2d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void>,
    VertexAttrib2dARB: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void>,
    VertexAttrib2dNV: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void>,
    VertexAttrib2dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib2dvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib2dvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib2f: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void>,
    VertexAttrib2fARB: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void>,
    VertexAttrib2fNV: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat) -> c_void>,
    VertexAttrib2fv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib2fvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib2fvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib2hNV: FnPtr<extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV) -> c_void>,
    VertexAttrib2hvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void>,
    VertexAttrib2s: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void>,
    VertexAttrib2sARB: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void>,
    VertexAttrib2sNV: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort) -> c_void>,
    VertexAttrib2sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib2svARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib2svNV: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib3d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    VertexAttrib3dARB: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    VertexAttrib3dNV: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    VertexAttrib3dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib3dvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib3dvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib3f: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    VertexAttrib3fARB: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    VertexAttrib3fNV: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    VertexAttrib3fv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib3fvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib3fvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib3hNV: FnPtr<extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void>,
    VertexAttrib3hvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void>,
    VertexAttrib3s: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    VertexAttrib3sARB: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    VertexAttrib3sNV: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    VertexAttrib3sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib3svARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib3svNV: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib4Nbv: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void>,
    VertexAttrib4NbvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void>,
    VertexAttrib4Niv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttrib4NivARB: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttrib4Nsv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib4NsvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib4Nub: FnPtr<extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void>,
    VertexAttrib4NubARB: FnPtr<extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void>,
    VertexAttrib4Nubv: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void>,
    VertexAttrib4NubvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void>,
    VertexAttrib4Nuiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttrib4NuivARB: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttrib4Nusv: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void>,
    VertexAttrib4NusvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void>,
    VertexAttrib4bv: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void>,
    VertexAttrib4bvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void>,
    VertexAttrib4d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    VertexAttrib4dARB: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    VertexAttrib4dNV: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    VertexAttrib4dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib4dvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib4dvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttrib4f: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    VertexAttrib4fARB: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    VertexAttrib4fNV: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    VertexAttrib4fv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib4fvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib4fvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    VertexAttrib4hNV: FnPtr<extern "C" fn(index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void>,
    VertexAttrib4hvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLhalfNV) -> c_void>,
    VertexAttrib4iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttrib4ivARB: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttrib4s: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void>,
    VertexAttrib4sARB: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void>,
    VertexAttrib4sNV: FnPtr<extern "C" fn(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void>,
    VertexAttrib4sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib4svARB: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib4svNV: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttrib4ubNV: FnPtr<extern "C" fn(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void>,
    VertexAttrib4ubv: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void>,
    VertexAttrib4ubvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void>,
    VertexAttrib4ubvNV: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void>,
    VertexAttrib4uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttrib4uivARB: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttrib4usv: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void>,
    VertexAttrib4usvARB: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void>,
    VertexAttribArrayObjectATI: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void>,
    VertexAttribBinding: FnPtr<extern "C" fn(attribindex: GLuint, bindingindex: GLuint) -> c_void>,
    VertexAttribDivisor: FnPtr<extern "C" fn(index: GLuint, divisor: GLuint) -> c_void>,
    VertexAttribDivisorANGLE: FnPtr<extern "C" fn(index: GLuint, divisor: GLuint) -> c_void>,
    VertexAttribDivisorARB: FnPtr<extern "C" fn(index: GLuint, divisor: GLuint) -> c_void>,
    VertexAttribDivisorNV: FnPtr<extern "C" fn(index: GLuint, divisor: GLuint) -> c_void>,
    VertexAttribFormat: FnPtr<extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void>,
    VertexAttribFormatNV: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) -> c_void>,
    VertexAttribI1i: FnPtr<extern "C" fn(index: GLuint, x: GLint) -> c_void>,
    VertexAttribI1iEXT: FnPtr<extern "C" fn(index: GLuint, x: GLint) -> c_void>,
    VertexAttribI1iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttribI1ivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttribI1ui: FnPtr<extern "C" fn(index: GLuint, x: GLuint) -> c_void>,
    VertexAttribI1uiEXT: FnPtr<extern "C" fn(index: GLuint, x: GLuint) -> c_void>,
    VertexAttribI1uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttribI1uivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttribI2i: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint) -> c_void>,
    VertexAttribI2iEXT: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint) -> c_void>,
    VertexAttribI2iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttribI2ivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttribI2ui: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint) -> c_void>,
    VertexAttribI2uiEXT: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint) -> c_void>,
    VertexAttribI2uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttribI2uivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttribI3i: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void>,
    VertexAttribI3iEXT: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void>,
    VertexAttribI3iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttribI3ivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttribI3ui: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void>,
    VertexAttribI3uiEXT: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void>,
    VertexAttribI3uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttribI3uivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttribI4bv: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void>,
    VertexAttribI4bvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLbyte) -> c_void>,
    VertexAttribI4i: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    VertexAttribI4iEXT: FnPtr<extern "C" fn(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    VertexAttribI4iv: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttribI4ivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLint) -> c_void>,
    VertexAttribI4sv: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttribI4svEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLshort) -> c_void>,
    VertexAttribI4ubv: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void>,
    VertexAttribI4ubvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLubyte) -> c_void>,
    VertexAttribI4ui: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void>,
    VertexAttribI4uiEXT: FnPtr<extern "C" fn(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void>,
    VertexAttribI4uiv: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttribI4uivEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLuint) -> c_void>,
    VertexAttribI4usv: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void>,
    VertexAttribI4usvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLushort) -> c_void>,
    VertexAttribIFormat: FnPtr<extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void>,
    VertexAttribIFormatNV: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void>,
    VertexAttribIPointer: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexAttribIPointerEXT: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexAttribL1d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void>,
    VertexAttribL1dEXT: FnPtr<extern "C" fn(index: GLuint, x: GLdouble) -> c_void>,
    VertexAttribL1dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttribL1dvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttribL1i64NV: FnPtr<extern "C" fn(index: GLuint, x: GLint64EXT) -> c_void>,
    VertexAttribL1i64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void>,
    VertexAttribL1ui64ARB: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT) -> c_void>,
    VertexAttribL1ui64NV: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT) -> c_void>,
    VertexAttribL1ui64vARB: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void>,
    VertexAttribL1ui64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void>,
    VertexAttribL2d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void>,
    VertexAttribL2dEXT: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble) -> c_void>,
    VertexAttribL2dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttribL2dvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttribL2i64NV: FnPtr<extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT) -> c_void>,
    VertexAttribL2i64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void>,
    VertexAttribL2ui64NV: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT) -> c_void>,
    VertexAttribL2ui64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void>,
    VertexAttribL3d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    VertexAttribL3dEXT: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    VertexAttribL3dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttribL3dvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttribL3i64NV: FnPtr<extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void>,
    VertexAttribL3i64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void>,
    VertexAttribL3ui64NV: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void>,
    VertexAttribL3ui64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void>,
    VertexAttribL4d: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    VertexAttribL4dEXT: FnPtr<extern "C" fn(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    VertexAttribL4dv: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttribL4dvEXT: FnPtr<extern "C" fn(index: GLuint, v: *GLdouble) -> c_void>,
    VertexAttribL4i64NV: FnPtr<extern "C" fn(index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void>,
    VertexAttribL4i64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLint64EXT) -> c_void>,
    VertexAttribL4ui64NV: FnPtr<extern "C" fn(index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void>,
    VertexAttribL4ui64vNV: FnPtr<extern "C" fn(index: GLuint, v: *GLuint64EXT) -> c_void>,
    VertexAttribLFormat: FnPtr<extern "C" fn(attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void>,
    VertexAttribLFormatNV: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void>,
    VertexAttribLPointer: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexAttribLPointerEXT: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexAttribP1ui: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void>,
    VertexAttribP1uiv: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void>,
    VertexAttribP2ui: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void>,
    VertexAttribP2uiv: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void>,
    VertexAttribP3ui: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void>,
    VertexAttribP3uiv: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void>,
    VertexAttribP4ui: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void>,
    VertexAttribP4uiv: FnPtr<extern "C" fn(index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void>,
    VertexAttribParameteriAMD: FnPtr<extern "C" fn(index: GLuint, pname: GLenum, param: GLint) -> c_void>,
    VertexAttribPointer: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexAttribPointerARB: FnPtr<extern "C" fn(index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexAttribPointerNV: FnPtr<extern "C" fn(index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexAttribs1dvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void>,
    VertexAttribs1fvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void>,
    VertexAttribs1hvNV: FnPtr<extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void>,
    VertexAttribs1svNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void>,
    VertexAttribs2dvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void>,
    VertexAttribs2fvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void>,
    VertexAttribs2hvNV: FnPtr<extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void>,
    VertexAttribs2svNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void>,
    VertexAttribs3dvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void>,
    VertexAttribs3fvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void>,
    VertexAttribs3hvNV: FnPtr<extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void>,
    VertexAttribs3svNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void>,
    VertexAttribs4dvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLdouble) -> c_void>,
    VertexAttribs4fvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLfloat) -> c_void>,
    VertexAttribs4hvNV: FnPtr<extern "C" fn(index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void>,
    VertexAttribs4svNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLshort) -> c_void>,
    VertexAttribs4ubvNV: FnPtr<extern "C" fn(index: GLuint, count: GLsizei, v: *GLubyte) -> c_void>,
    VertexBindingDivisor: FnPtr<extern "C" fn(bindingindex: GLuint, divisor: GLuint) -> c_void>,
    VertexBlendARB: FnPtr<extern "C" fn(count: GLint) -> c_void>,
    VertexBlendEnvfATI: FnPtr<extern "C" fn(pname: GLenum, param: GLfloat) -> c_void>,
    VertexBlendEnviATI: FnPtr<extern "C" fn(pname: GLenum, param: GLint) -> c_void>,
    VertexFormatNV: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei) -> c_void>,
    VertexP2ui: FnPtr<extern "C" fn(type_: GLenum, value: GLuint) -> c_void>,
    VertexP2uiv: FnPtr<extern "C" fn(type_: GLenum, value: *GLuint) -> c_void>,
    VertexP3ui: FnPtr<extern "C" fn(type_: GLenum, value: GLuint) -> c_void>,
    VertexP3uiv: FnPtr<extern "C" fn(type_: GLenum, value: *GLuint) -> c_void>,
    VertexP4ui: FnPtr<extern "C" fn(type_: GLenum, value: GLuint) -> c_void>,
    VertexP4uiv: FnPtr<extern "C" fn(type_: GLenum, value: *GLuint) -> c_void>,
    VertexPointer: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexPointerListIBM: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void>,
    VertexPointervINTEL: FnPtr<extern "C" fn(size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void>,
    VertexStream1dATI: FnPtr<extern "C" fn(stream: GLenum, x: GLdouble) -> c_void>,
    VertexStream1dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void>,
    VertexStream1fATI: FnPtr<extern "C" fn(stream: GLenum, x: GLfloat) -> c_void>,
    VertexStream1fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void>,
    VertexStream1iATI: FnPtr<extern "C" fn(stream: GLenum, x: GLint) -> c_void>,
    VertexStream1ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void>,
    VertexStream1sATI: FnPtr<extern "C" fn(stream: GLenum, x: GLshort) -> c_void>,
    VertexStream1svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void>,
    VertexStream2dATI: FnPtr<extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble) -> c_void>,
    VertexStream2dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void>,
    VertexStream2fATI: FnPtr<extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat) -> c_void>,
    VertexStream2fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void>,
    VertexStream2iATI: FnPtr<extern "C" fn(stream: GLenum, x: GLint, y: GLint) -> c_void>,
    VertexStream2ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void>,
    VertexStream2sATI: FnPtr<extern "C" fn(stream: GLenum, x: GLshort, y: GLshort) -> c_void>,
    VertexStream2svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void>,
    VertexStream3dATI: FnPtr<extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    VertexStream3dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void>,
    VertexStream3fATI: FnPtr<extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    VertexStream3fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void>,
    VertexStream3iATI: FnPtr<extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint) -> c_void>,
    VertexStream3ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void>,
    VertexStream3sATI: FnPtr<extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    VertexStream3svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void>,
    VertexStream4dATI: FnPtr<extern "C" fn(stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    VertexStream4dvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLdouble) -> c_void>,
    VertexStream4fATI: FnPtr<extern "C" fn(stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    VertexStream4fvATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLfloat) -> c_void>,
    VertexStream4iATI: FnPtr<extern "C" fn(stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    VertexStream4ivATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLint) -> c_void>,
    VertexStream4sATI: FnPtr<extern "C" fn(stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void>,
    VertexStream4svATI: FnPtr<extern "C" fn(stream: GLenum, coords: *GLshort) -> c_void>,
    VertexWeightPointerEXT: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    VertexWeightfEXT: FnPtr<extern "C" fn(weight: GLfloat) -> c_void>,
    VertexWeightfvEXT: FnPtr<extern "C" fn(weight: *GLfloat) -> c_void>,
    VertexWeighthNV: FnPtr<extern "C" fn(weight: GLhalfNV) -> c_void>,
    VertexWeighthvNV: FnPtr<extern "C" fn(weight: *GLhalfNV) -> c_void>,
    VideoCaptureNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) -> GLenum>,
    VideoCaptureStreamParameterdvNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void>,
    VideoCaptureStreamParameterfvNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void>,
    VideoCaptureStreamParameterivNV: FnPtr<extern "C" fn(video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void>,
    Viewport: FnPtr<extern "C" fn(x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void>,
    ViewportArrayv: FnPtr<extern "C" fn(first: GLuint, count: GLsizei, v: *GLfloat) -> c_void>,
    ViewportIndexedf: FnPtr<extern "C" fn(index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> c_void>,
    ViewportIndexedfv: FnPtr<extern "C" fn(index: GLuint, v: *GLfloat) -> c_void>,
    WaitSync: FnPtr<extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void>,
    WaitSyncAPPLE: FnPtr<extern "C" fn(sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void>,
    WeightPathsNV: FnPtr<extern "C" fn(resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) -> c_void>,
    WeightPointerARB: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    WeightPointerOES: FnPtr<extern "C" fn(size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void>,
    WeightbvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLbyte) -> c_void>,
    WeightdvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLdouble) -> c_void>,
    WeightfvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLfloat) -> c_void>,
    WeightivARB: FnPtr<extern "C" fn(size: GLint, weights: *GLint) -> c_void>,
    WeightsvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLshort) -> c_void>,
    WeightubvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLubyte) -> c_void>,
    WeightuivARB: FnPtr<extern "C" fn(size: GLint, weights: *GLuint) -> c_void>,
    WeightusvARB: FnPtr<extern "C" fn(size: GLint, weights: *GLushort) -> c_void>,
    WindowPos2d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void>,
    WindowPos2dARB: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void>,
    WindowPos2dMESA: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble) -> c_void>,
    WindowPos2dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    WindowPos2dvARB: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    WindowPos2dvMESA: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    WindowPos2f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void>,
    WindowPos2fARB: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void>,
    WindowPos2fMESA: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat) -> c_void>,
    WindowPos2fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    WindowPos2fvARB: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    WindowPos2fvMESA: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    WindowPos2i: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void>,
    WindowPos2iARB: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void>,
    WindowPos2iMESA: FnPtr<extern "C" fn(x: GLint, y: GLint) -> c_void>,
    WindowPos2iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    WindowPos2ivARB: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    WindowPos2ivMESA: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    WindowPos2s: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void>,
    WindowPos2sARB: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void>,
    WindowPos2sMESA: FnPtr<extern "C" fn(x: GLshort, y: GLshort) -> c_void>,
    WindowPos2sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    WindowPos2svARB: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    WindowPos2svMESA: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    WindowPos3d: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    WindowPos3dARB: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    WindowPos3dMESA: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble) -> c_void>,
    WindowPos3dv: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    WindowPos3dvARB: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    WindowPos3dvMESA: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    WindowPos3f: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    WindowPos3fARB: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    WindowPos3fMESA: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat) -> c_void>,
    WindowPos3fv: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    WindowPos3fvARB: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    WindowPos3fvMESA: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    WindowPos3i: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void>,
    WindowPos3iARB: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void>,
    WindowPos3iMESA: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint) -> c_void>,
    WindowPos3iv: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    WindowPos3ivARB: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    WindowPos3ivMESA: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    WindowPos3s: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    WindowPos3sARB: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    WindowPos3sMESA: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort) -> c_void>,
    WindowPos3sv: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    WindowPos3svARB: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    WindowPos3svMESA: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    WindowPos4dMESA: FnPtr<extern "C" fn(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void>,
    WindowPos4dvMESA: FnPtr<extern "C" fn(v: *GLdouble) -> c_void>,
    WindowPos4fMESA: FnPtr<extern "C" fn(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void>,
    WindowPos4fvMESA: FnPtr<extern "C" fn(v: *GLfloat) -> c_void>,
    WindowPos4iMESA: FnPtr<extern "C" fn(x: GLint, y: GLint, z: GLint, w: GLint) -> c_void>,
    WindowPos4ivMESA: FnPtr<extern "C" fn(v: *GLint) -> c_void>,
    WindowPos4sMESA: FnPtr<extern "C" fn(x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void>,
    WindowPos4svMESA: FnPtr<extern "C" fn(v: *GLshort) -> c_void>,
    WriteMaskEXT: FnPtr<extern "C" fn(res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void>,
}

mod failing {
    use std::libc::*;
    use super::types::*;
    
    macro_rules! failing(
        (fn $name:ident()) => (pub extern "C" fn $name() { fail!(stringify!($name was not loaded)) });
        (fn $name:ident() -> $ret_ty:ty) => (pub extern "C" fn $name() -> $ret_ty { fail!(stringify!($name was not loaded)) });
        (fn $name:ident($($arg_ty:ty),*)) => (pub extern "C" fn $name($(_: $arg_ty),*) { fail!(stringify!($name was not loaded)) });
        (fn $name:ident($($arg_ty:ty),*) -> $ret_ty:ty) => (pub extern "C" fn $name($(_: $arg_ty),*) -> $ret_ty { fail!(stringify!($name was not loaded)) });
    )
    
    failing!(fn Accum(GLenum, GLfloat) -> c_void)
    failing!(fn AccumxOES(GLenum, GLfixed) -> c_void)
    failing!(fn ActiveProgramEXT(GLuint) -> c_void)
    failing!(fn ActiveShaderProgram(GLuint, GLuint) -> c_void)
    failing!(fn ActiveShaderProgramEXT(GLuint, GLuint) -> c_void)
    failing!(fn ActiveStencilFaceEXT(GLenum) -> c_void)
    failing!(fn ActiveTexture(GLenum) -> c_void)
    failing!(fn ActiveTextureARB(GLenum) -> c_void)
    failing!(fn ActiveVaryingNV(GLuint, *GLchar) -> c_void)
    failing!(fn AlphaFragmentOp1ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn AlphaFragmentOp2ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn AlphaFragmentOp3ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn AlphaFunc(GLenum, GLfloat) -> c_void)
    failing!(fn AlphaFuncQCOM(GLenum, GLclampf) -> c_void)
    failing!(fn AlphaFuncx(GLenum, GLfixed) -> c_void)
    failing!(fn AlphaFuncxOES(GLenum, GLfixed) -> c_void)
    failing!(fn ApplyTextureEXT(GLenum) -> c_void)
    failing!(fn AreProgramsResidentNV(GLsizei, *GLuint, *GLboolean) -> GLboolean)
    failing!(fn AreTexturesResident(GLsizei, *GLuint, *GLboolean) -> GLboolean)
    failing!(fn AreTexturesResidentEXT(GLsizei, *GLuint, *GLboolean) -> GLboolean)
    failing!(fn ArrayElement(GLint) -> c_void)
    failing!(fn ArrayElementEXT(GLint) -> c_void)
    failing!(fn ArrayObjectATI(GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) -> c_void)
    failing!(fn AsyncMarkerSGIX(GLuint) -> c_void)
    failing!(fn AttachObjectARB(GLhandleARB, GLhandleARB) -> c_void)
    failing!(fn AttachShader(GLuint, GLuint) -> c_void)
    failing!(fn Begin(GLenum) -> c_void)
    failing!(fn BeginConditionalRender(GLuint, GLenum) -> c_void)
    failing!(fn BeginConditionalRenderNV(GLuint, GLenum) -> c_void)
    failing!(fn BeginConditionalRenderNVX(GLuint) -> c_void)
    failing!(fn BeginFragmentShaderATI() -> c_void)
    failing!(fn BeginOcclusionQueryNV(GLuint) -> c_void)
    failing!(fn BeginPerfMonitorAMD(GLuint) -> c_void)
    failing!(fn BeginQuery(GLenum, GLuint) -> c_void)
    failing!(fn BeginQueryARB(GLenum, GLuint) -> c_void)
    failing!(fn BeginQueryEXT(GLenum, GLuint) -> c_void)
    failing!(fn BeginQueryIndexed(GLenum, GLuint, GLuint) -> c_void)
    failing!(fn BeginTransformFeedback(GLenum) -> c_void)
    failing!(fn BeginTransformFeedbackEXT(GLenum) -> c_void)
    failing!(fn BeginTransformFeedbackNV(GLenum) -> c_void)
    failing!(fn BeginVertexShaderEXT() -> c_void)
    failing!(fn BeginVideoCaptureNV(GLuint) -> c_void)
    failing!(fn BindAttribLocation(GLuint, GLuint, *GLchar) -> c_void)
    failing!(fn BindAttribLocationARB(GLhandleARB, GLuint, *GLcharARB) -> c_void)
    failing!(fn BindBuffer(GLenum, GLuint) -> c_void)
    failing!(fn BindBufferARB(GLenum, GLuint) -> c_void)
    failing!(fn BindBufferBase(GLenum, GLuint, GLuint) -> c_void)
    failing!(fn BindBufferBaseEXT(GLenum, GLuint, GLuint) -> c_void)
    failing!(fn BindBufferBaseNV(GLenum, GLuint, GLuint) -> c_void)
    failing!(fn BindBufferOffsetEXT(GLenum, GLuint, GLuint, GLintptr) -> c_void)
    failing!(fn BindBufferOffsetNV(GLenum, GLuint, GLuint, GLintptr) -> c_void)
    failing!(fn BindBufferRange(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn BindBufferRangeEXT(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn BindBufferRangeNV(GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn BindBuffersBase(GLenum, GLuint, GLsizei, *GLuint) -> c_void)
    failing!(fn BindBuffersRange(GLenum, GLuint, GLsizei, *GLuint, *GLintptr, *GLsizeiptr) -> c_void)
    failing!(fn BindFragDataLocation(GLuint, GLuint, *GLchar) -> c_void)
    failing!(fn BindFragDataLocationEXT(GLuint, GLuint, *GLchar) -> c_void)
    failing!(fn BindFragDataLocationIndexed(GLuint, GLuint, GLuint, *GLchar) -> c_void)
    failing!(fn BindFragmentShaderATI(GLuint) -> c_void)
    failing!(fn BindFramebuffer(GLenum, GLuint) -> c_void)
    failing!(fn BindFramebufferEXT(GLenum, GLuint) -> c_void)
    failing!(fn BindFramebufferOES(GLenum, GLuint) -> c_void)
    failing!(fn BindImageTexture(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) -> c_void)
    failing!(fn BindImageTextureEXT(GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) -> c_void)
    failing!(fn BindImageTextures(GLuint, GLsizei, *GLuint) -> c_void)
    failing!(fn BindLightParameterEXT(GLenum, GLenum) -> GLuint)
    failing!(fn BindMaterialParameterEXT(GLenum, GLenum) -> GLuint)
    failing!(fn BindMultiTextureEXT(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn BindParameterEXT(GLenum) -> GLuint)
    failing!(fn BindProgramARB(GLenum, GLuint) -> c_void)
    failing!(fn BindProgramNV(GLenum, GLuint) -> c_void)
    failing!(fn BindProgramPipeline(GLuint) -> c_void)
    failing!(fn BindProgramPipelineEXT(GLuint) -> c_void)
    failing!(fn BindRenderbuffer(GLenum, GLuint) -> c_void)
    failing!(fn BindRenderbufferEXT(GLenum, GLuint) -> c_void)
    failing!(fn BindRenderbufferOES(GLenum, GLuint) -> c_void)
    failing!(fn BindSampler(GLuint, GLuint) -> c_void)
    failing!(fn BindSamplers(GLuint, GLsizei, *GLuint) -> c_void)
    failing!(fn BindTexGenParameterEXT(GLenum, GLenum, GLenum) -> GLuint)
    failing!(fn BindTexture(GLenum, GLuint) -> c_void)
    failing!(fn BindTextureEXT(GLenum, GLuint) -> c_void)
    failing!(fn BindTextureUnitParameterEXT(GLenum, GLenum) -> GLuint)
    failing!(fn BindTextures(GLuint, GLsizei, *GLuint) -> c_void)
    failing!(fn BindTransformFeedback(GLenum, GLuint) -> c_void)
    failing!(fn BindTransformFeedbackNV(GLenum, GLuint) -> c_void)
    failing!(fn BindVertexArray(GLuint) -> c_void)
    failing!(fn BindVertexArrayAPPLE(GLuint) -> c_void)
    failing!(fn BindVertexArrayOES(GLuint) -> c_void)
    failing!(fn BindVertexBuffer(GLuint, GLuint, GLintptr, GLsizei) -> c_void)
    failing!(fn BindVertexBuffers(GLuint, GLsizei, *GLuint, *GLintptr, *GLsizei) -> c_void)
    failing!(fn BindVertexShaderEXT(GLuint) -> c_void)
    failing!(fn BindVideoCaptureStreamBufferNV(GLuint, GLuint, GLenum, GLintptrARB) -> c_void)
    failing!(fn BindVideoCaptureStreamTextureNV(GLuint, GLuint, GLenum, GLenum, GLuint) -> c_void)
    failing!(fn Binormal3bEXT(GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn Binormal3bvEXT(*GLbyte) -> c_void)
    failing!(fn Binormal3dEXT(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Binormal3dvEXT(*GLdouble) -> c_void)
    failing!(fn Binormal3fEXT(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Binormal3fvEXT(*GLfloat) -> c_void)
    failing!(fn Binormal3iEXT(GLint, GLint, GLint) -> c_void)
    failing!(fn Binormal3ivEXT(*GLint) -> c_void)
    failing!(fn Binormal3sEXT(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn Binormal3svEXT(*GLshort) -> c_void)
    failing!(fn BinormalPointerEXT(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn Bitmap(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, *GLubyte) -> c_void)
    failing!(fn BitmapxOES(GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, *GLubyte) -> c_void)
    failing!(fn BlendColor(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn BlendColorEXT(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn BlendColorxOES(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn BlendEquation(GLenum) -> c_void)
    failing!(fn BlendEquationEXT(GLenum) -> c_void)
    failing!(fn BlendEquationIndexedAMD(GLuint, GLenum) -> c_void)
    failing!(fn BlendEquationOES(GLenum) -> c_void)
    failing!(fn BlendEquationSeparate(GLenum, GLenum) -> c_void)
    failing!(fn BlendEquationSeparateEXT(GLenum, GLenum) -> c_void)
    failing!(fn BlendEquationSeparateIndexedAMD(GLuint, GLenum, GLenum) -> c_void)
    failing!(fn BlendEquationSeparateOES(GLenum, GLenum) -> c_void)
    failing!(fn BlendEquationSeparatei(GLuint, GLenum, GLenum) -> c_void)
    failing!(fn BlendEquationSeparateiARB(GLuint, GLenum, GLenum) -> c_void)
    failing!(fn BlendEquationi(GLuint, GLenum) -> c_void)
    failing!(fn BlendEquationiARB(GLuint, GLenum) -> c_void)
    failing!(fn BlendFunc(GLenum, GLenum) -> c_void)
    failing!(fn BlendFuncIndexedAMD(GLuint, GLenum, GLenum) -> c_void)
    failing!(fn BlendFuncSeparate(GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn BlendFuncSeparateEXT(GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn BlendFuncSeparateINGR(GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn BlendFuncSeparateIndexedAMD(GLuint, GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn BlendFuncSeparateOES(GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn BlendFuncSeparatei(GLuint, GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn BlendFuncSeparateiARB(GLuint, GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn BlendFunci(GLuint, GLenum, GLenum) -> c_void)
    failing!(fn BlendFunciARB(GLuint, GLenum, GLenum) -> c_void)
    failing!(fn BlendParameteriNV(GLenum, GLint) -> c_void)
    failing!(fn BlendBarrierNV() -> c_void)
    failing!(fn BlitFramebuffer(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> c_void)
    failing!(fn BlitFramebufferANGLE(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> c_void)
    failing!(fn BlitFramebufferEXT(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> c_void)
    failing!(fn BlitFramebufferNV(GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) -> c_void)
    failing!(fn BufferAddressRangeNV(GLenum, GLuint, GLuint64EXT, GLsizeiptr) -> c_void)
    failing!(fn BufferData(GLenum, GLsizeiptr, *GLvoid, GLenum) -> c_void)
    failing!(fn BufferDataARB(GLenum, GLsizeiptrARB, *GLvoid, GLenum) -> c_void)
    failing!(fn BufferParameteriAPPLE(GLenum, GLenum, GLint) -> c_void)
    failing!(fn BufferStorage(GLenum, GLsizeiptr, *c_void, GLbitfield) -> c_void)
    failing!(fn BufferSubData(GLenum, GLintptr, GLsizeiptr, *GLvoid) -> c_void)
    failing!(fn BufferSubDataARB(GLenum, GLintptrARB, GLsizeiptrARB, *GLvoid) -> c_void)
    failing!(fn CallList(GLuint) -> c_void)
    failing!(fn CallLists(GLsizei, GLenum, *GLvoid) -> c_void)
    failing!(fn CheckFramebufferStatus(GLenum) -> GLenum)
    failing!(fn CheckFramebufferStatusEXT(GLenum) -> GLenum)
    failing!(fn CheckFramebufferStatusOES(GLenum) -> GLenum)
    failing!(fn CheckNamedFramebufferStatusEXT(GLuint, GLenum) -> GLenum)
    failing!(fn ClampColor(GLenum, GLenum) -> c_void)
    failing!(fn ClampColorARB(GLenum, GLenum) -> c_void)
    failing!(fn Clear(GLbitfield) -> c_void)
    failing!(fn ClearAccum(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ClearAccumxOES(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn ClearBufferData(GLenum, GLenum, GLenum, GLenum, *c_void) -> c_void)
    failing!(fn ClearBufferSubData(GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, *c_void) -> c_void)
    failing!(fn ClearBufferfi(GLenum, GLint, GLfloat, GLint) -> c_void)
    failing!(fn ClearBufferfv(GLenum, GLint, *GLfloat) -> c_void)
    failing!(fn ClearBufferiv(GLenum, GLint, *GLint) -> c_void)
    failing!(fn ClearBufferuiv(GLenum, GLint, *GLuint) -> c_void)
    failing!(fn ClearColor(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ClearColorIiEXT(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn ClearColorIuiEXT(GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ClearColorx(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn ClearColorxOES(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn ClearDepth(GLdouble) -> c_void)
    failing!(fn ClearDepthdNV(GLdouble) -> c_void)
    failing!(fn ClearDepthf(GLfloat) -> c_void)
    failing!(fn ClearDepthfOES(GLclampf) -> c_void)
    failing!(fn ClearDepthx(GLfixed) -> c_void)
    failing!(fn ClearDepthxOES(GLfixed) -> c_void)
    failing!(fn ClearIndex(GLfloat) -> c_void)
    failing!(fn ClearNamedBufferDataEXT(GLuint, GLenum, GLenum, GLenum, *c_void) -> c_void)
    failing!(fn ClearNamedBufferSubDataEXT(GLuint, GLenum, GLenum, GLenum, GLsizeiptr, GLsizeiptr, *c_void) -> c_void)
    failing!(fn ClearStencil(GLint) -> c_void)
    failing!(fn ClearTexImage(GLuint, GLint, GLenum, GLenum, *c_void) -> c_void)
    failing!(fn ClearTexSubImage(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *c_void) -> c_void)
    failing!(fn ClientActiveTexture(GLenum) -> c_void)
    failing!(fn ClientActiveTextureARB(GLenum) -> c_void)
    failing!(fn ClientActiveVertexStreamATI(GLenum) -> c_void)
    failing!(fn ClientAttribDefaultEXT(GLbitfield) -> c_void)
    failing!(fn ClientWaitSync(GLsync, GLbitfield, GLuint64) -> GLenum)
    failing!(fn ClientWaitSyncAPPLE(GLsync, GLbitfield, GLuint64) -> GLenum)
    failing!(fn ClipControlARB(GLenum, GLenum) -> c_void)
    failing!(fn ClipPlane(GLenum, *GLdouble) -> c_void)
    failing!(fn ClipPlanef(GLenum, *GLfloat) -> c_void)
    failing!(fn ClipPlanefIMG(GLenum, *GLfloat) -> c_void)
    failing!(fn ClipPlanefOES(GLenum, *GLfloat) -> c_void)
    failing!(fn ClipPlanex(GLenum, *GLfixed) -> c_void)
    failing!(fn ClipPlanexIMG(GLenum, *GLfixed) -> c_void)
    failing!(fn ClipPlanexOES(GLenum, *GLfixed) -> c_void)
    failing!(fn Color3b(GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn Color3bv(*GLbyte) -> c_void)
    failing!(fn Color3d(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Color3dv(*GLdouble) -> c_void)
    failing!(fn Color3f(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Color3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Color3fVertex3fvSUN(*GLfloat, *GLfloat) -> c_void)
    failing!(fn Color3fv(*GLfloat) -> c_void)
    failing!(fn Color3hNV(GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn Color3hvNV(*GLhalfNV) -> c_void)
    failing!(fn Color3i(GLint, GLint, GLint) -> c_void)
    failing!(fn Color3iv(*GLint) -> c_void)
    failing!(fn Color3s(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn Color3sv(*GLshort) -> c_void)
    failing!(fn Color3ub(GLubyte, GLubyte, GLubyte) -> c_void)
    failing!(fn Color3ubv(*GLubyte) -> c_void)
    failing!(fn Color3ui(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn Color3uiv(*GLuint) -> c_void)
    failing!(fn Color3us(GLushort, GLushort, GLushort) -> c_void)
    failing!(fn Color3usv(*GLushort) -> c_void)
    failing!(fn Color3xOES(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn Color3xvOES(*GLfixed) -> c_void)
    failing!(fn Color4b(GLbyte, GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn Color4bv(*GLbyte) -> c_void)
    failing!(fn Color4d(GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Color4dv(*GLdouble) -> c_void)
    failing!(fn Color4f(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Color4fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Color4fNormal3fVertex3fvSUN(*GLfloat, *GLfloat, *GLfloat) -> c_void)
    failing!(fn Color4fv(*GLfloat) -> c_void)
    failing!(fn Color4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn Color4hvNV(*GLhalfNV) -> c_void)
    failing!(fn Color4i(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn Color4iv(*GLint) -> c_void)
    failing!(fn Color4s(GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn Color4sv(*GLshort) -> c_void)
    failing!(fn Color4ub(GLubyte, GLubyte, GLubyte, GLubyte) -> c_void)
    failing!(fn Color4ubVertex2fSUN(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) -> c_void)
    failing!(fn Color4ubVertex2fvSUN(*GLubyte, *GLfloat) -> c_void)
    failing!(fn Color4ubVertex3fSUN(GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Color4ubVertex3fvSUN(*GLubyte, *GLfloat) -> c_void)
    failing!(fn Color4ubv(*GLubyte) -> c_void)
    failing!(fn Color4ui(GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn Color4uiv(*GLuint) -> c_void)
    failing!(fn Color4us(GLushort, GLushort, GLushort, GLushort) -> c_void)
    failing!(fn Color4usv(*GLushort) -> c_void)
    failing!(fn Color4x(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn Color4xOES(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn Color4xvOES(*GLfixed) -> c_void)
    failing!(fn ColorFormatNV(GLint, GLenum, GLsizei) -> c_void)
    failing!(fn ColorFragmentOp1ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ColorFragmentOp2ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ColorFragmentOp3ATI(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ColorMask(GLboolean, GLboolean, GLboolean, GLboolean) -> c_void)
    failing!(fn ColorMaskIndexedEXT(GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> c_void)
    failing!(fn ColorMaski(GLuint, GLboolean, GLboolean, GLboolean, GLboolean) -> c_void)
    failing!(fn ColorMaterial(GLenum, GLenum) -> c_void)
    failing!(fn ColorP3ui(GLenum, GLuint) -> c_void)
    failing!(fn ColorP3uiv(GLenum, *GLuint) -> c_void)
    failing!(fn ColorP4ui(GLenum, GLuint) -> c_void)
    failing!(fn ColorP4uiv(GLenum, *GLuint) -> c_void)
    failing!(fn ColorPointer(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn ColorPointerEXT(GLint, GLenum, GLsizei, GLsizei, *GLvoid) -> c_void)
    failing!(fn ColorPointerListIBM(GLint, GLenum, GLint, **GLvoid, GLint) -> c_void)
    failing!(fn ColorPointervINTEL(GLint, GLenum, **GLvoid) -> c_void)
    failing!(fn ColorSubTable(GLenum, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ColorSubTableEXT(GLenum, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ColorTable(GLenum, GLenum, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ColorTableEXT(GLenum, GLenum, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ColorTableParameterfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn ColorTableParameterfvSGI(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn ColorTableParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn ColorTableParameterivSGI(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn ColorTableSGI(GLenum, GLenum, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn CombinerInputNV(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn CombinerOutputNV(GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) -> c_void)
    failing!(fn CombinerParameterfNV(GLenum, GLfloat) -> c_void)
    failing!(fn CombinerParameterfvNV(GLenum, *GLfloat) -> c_void)
    failing!(fn CombinerParameteriNV(GLenum, GLint) -> c_void)
    failing!(fn CombinerParameterivNV(GLenum, *GLint) -> c_void)
    failing!(fn CombinerStageParameterfvNV(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn CompileShader(GLuint) -> c_void)
    failing!(fn CompileShaderARB(GLhandleARB) -> c_void)
    failing!(fn CompileShaderIncludeARB(GLuint, GLsizei, **GLchar, *GLint) -> c_void)
    failing!(fn CompressedMultiTexImage1DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedMultiTexImage2DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedMultiTexImage3DEXT(GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedMultiTexSubImage1DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedMultiTexSubImage2DEXT(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedMultiTexSubImage3DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexImage1D(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexImage1DARB(GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexImage2D(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexImage2DARB(GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexImage3D(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexImage3DARB(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexImage3DOES(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexSubImage1D(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexSubImage1DARB(GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexSubImage2D(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexSubImage2DARB(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexSubImage3DARB(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTexSubImage3DOES(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTextureImage1DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTextureImage2DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTextureImage3DEXT(GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTextureSubImage1DEXT(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTextureSubImage2DEXT(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn CompressedTextureSubImage3DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn ConvolutionFilter1D(GLenum, GLenum, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ConvolutionFilter1DEXT(GLenum, GLenum, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ConvolutionFilter2D(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ConvolutionFilter2DEXT(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ConvolutionParameterf(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn ConvolutionParameterfEXT(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn ConvolutionParameterfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn ConvolutionParameterfvEXT(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn ConvolutionParameteri(GLenum, GLenum, GLint) -> c_void)
    failing!(fn ConvolutionParameteriEXT(GLenum, GLenum, GLint) -> c_void)
    failing!(fn ConvolutionParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn ConvolutionParameterivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn ConvolutionParameterxOES(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn ConvolutionParameterxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn CopyBufferSubData(GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn CopyColorSubTable(GLenum, GLsizei, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyColorSubTableEXT(GLenum, GLsizei, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyColorTable(GLenum, GLenum, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyColorTableSGI(GLenum, GLenum, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyConvolutionFilter1D(GLenum, GLenum, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyConvolutionFilter1DEXT(GLenum, GLenum, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyConvolutionFilter2D(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyConvolutionFilter2DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyImageSubData(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyImageSubDataNV(GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyMultiTexImage1DEXT(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> c_void)
    failing!(fn CopyMultiTexImage2DEXT(GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> c_void)
    failing!(fn CopyMultiTexSubImage1DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyMultiTexSubImage2DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyMultiTexSubImage3DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyPathNV(GLuint, GLuint) -> c_void)
    failing!(fn CopyPixels(GLint, GLint, GLsizei, GLsizei, GLenum) -> c_void)
    failing!(fn CopyTexImage1D(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> c_void)
    failing!(fn CopyTexImage1DEXT(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> c_void)
    failing!(fn CopyTexImage2D(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> c_void)
    failing!(fn CopyTexImage2DEXT(GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> c_void)
    failing!(fn CopyTexSubImage1D(GLenum, GLint, GLint, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyTexSubImage1DEXT(GLenum, GLint, GLint, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyTexSubImage2D(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyTexSubImage2DEXT(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyTexSubImage3DEXT(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyTexSubImage3DOES(GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyTextureImage1DEXT(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) -> c_void)
    failing!(fn CopyTextureImage2DEXT(GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) -> c_void)
    failing!(fn CopyTextureLevelsAPPLE(GLuint, GLuint, GLint, GLsizei) -> c_void)
    failing!(fn CopyTextureSubImage1DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) -> c_void)
    failing!(fn CopyTextureSubImage2DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CopyTextureSubImage3DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn CoverFillPathInstancedNV(GLsizei, GLenum, *GLvoid, GLuint, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn CoverFillPathNV(GLuint, GLenum) -> c_void)
    failing!(fn CoverStrokePathInstancedNV(GLsizei, GLenum, *GLvoid, GLuint, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn CoverStrokePathNV(GLuint, GLenum) -> c_void)
    failing!(fn CoverageMaskNV(GLboolean) -> c_void)
    failing!(fn CoverageOperationNV(GLenum) -> c_void)
    failing!(fn CreateProgram() -> GLuint)
    failing!(fn CreateProgramObjectARB() -> GLhandleARB)
    failing!(fn CreateShader(GLenum) -> GLuint)
    failing!(fn CreateShaderObjectARB(GLenum) -> GLhandleARB)
    failing!(fn CreateShaderProgramEXT(GLenum, *GLchar) -> GLuint)
    failing!(fn CreateShaderProgramv(GLenum, GLsizei, **GLchar) -> GLuint)
    failing!(fn CreateShaderProgramvEXT(GLenum, GLsizei, **GLchar) -> GLuint)
    failing!(fn CreateSyncFromCLeventARB(*_cl_context, *_cl_event, GLbitfield) -> GLsync)
    failing!(fn CullFace(GLenum) -> c_void)
    failing!(fn CullParameterdvEXT(GLenum, *GLdouble) -> c_void)
    failing!(fn CullParameterfvEXT(GLenum, *GLfloat) -> c_void)
    failing!(fn CurrentPaletteMatrixARB(GLint) -> c_void)
    failing!(fn CurrentPaletteMatrixOES(GLuint) -> c_void)
    failing!(fn DebugMessageCallback(GLDEBUGPROC, *c_void) -> c_void)
    failing!(fn DebugMessageCallbackAMD(GLDEBUGPROCAMD, *c_void) -> c_void)
    failing!(fn DebugMessageCallbackARB(GLDEBUGPROCARB, *c_void) -> c_void)
    failing!(fn DebugMessageCallbackKHR(GLDEBUGPROCKHR, *c_void) -> c_void)
    failing!(fn DebugMessageControl(GLenum, GLenum, GLenum, GLsizei, *GLuint, GLboolean) -> c_void)
    failing!(fn DebugMessageControlARB(GLenum, GLenum, GLenum, GLsizei, *GLuint, GLboolean) -> c_void)
    failing!(fn DebugMessageControlKHR(GLenum, GLenum, GLenum, GLsizei, *GLuint, GLboolean) -> c_void)
    failing!(fn DebugMessageEnableAMD(GLenum, GLenum, GLsizei, *GLuint, GLboolean) -> c_void)
    failing!(fn DebugMessageInsert(GLenum, GLenum, GLuint, GLenum, GLsizei, *GLchar) -> c_void)
    failing!(fn DebugMessageInsertAMD(GLenum, GLenum, GLuint, GLsizei, *GLchar) -> c_void)
    failing!(fn DebugMessageInsertARB(GLenum, GLenum, GLuint, GLenum, GLsizei, *GLchar) -> c_void)
    failing!(fn DebugMessageInsertKHR(GLenum, GLenum, GLuint, GLenum, GLsizei, *GLchar) -> c_void)
    failing!(fn DeformSGIX(GLbitfield) -> c_void)
    failing!(fn DeformationMap3dSGIX(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, *GLdouble) -> c_void)
    failing!(fn DeformationMap3fSGIX(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, *GLfloat) -> c_void)
    failing!(fn DeleteAsyncMarkersSGIX(GLuint, GLsizei) -> c_void)
    failing!(fn DeleteBuffers(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteBuffersARB(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteFencesAPPLE(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteFencesNV(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteFragmentShaderATI(GLuint) -> c_void)
    failing!(fn DeleteFramebuffers(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteFramebuffersEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteFramebuffersOES(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteLists(GLuint, GLsizei) -> c_void)
    failing!(fn DeleteNamedStringARB(GLint, *GLchar) -> c_void)
    failing!(fn DeleteNamesAMD(GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn DeleteObjectARB(GLhandleARB) -> c_void)
    failing!(fn DeleteOcclusionQueriesNV(GLsizei, *GLuint) -> c_void)
    failing!(fn DeletePathsNV(GLuint, GLsizei) -> c_void)
    failing!(fn DeletePerfMonitorsAMD(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteProgram(GLuint) -> c_void)
    failing!(fn DeleteProgramPipelines(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteProgramPipelinesEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteProgramsARB(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteProgramsNV(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteQueries(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteQueriesARB(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteQueriesEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteRenderbuffers(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteRenderbuffersEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteRenderbuffersOES(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteSamplers(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteShader(GLuint) -> c_void)
    failing!(fn DeleteSync(GLsync) -> c_void)
    failing!(fn DeleteSyncAPPLE(GLsync) -> c_void)
    failing!(fn DeleteTextures(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteTexturesEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteTransformFeedbacks(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteTransformFeedbacksNV(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteVertexArrays(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteVertexArraysAPPLE(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteVertexArraysOES(GLsizei, *GLuint) -> c_void)
    failing!(fn DeleteVertexShaderEXT(GLuint) -> c_void)
    failing!(fn DepthBoundsEXT(GLclampd, GLclampd) -> c_void)
    failing!(fn DepthBoundsdNV(GLdouble, GLdouble) -> c_void)
    failing!(fn DepthFunc(GLenum) -> c_void)
    failing!(fn DepthMask(GLboolean) -> c_void)
    failing!(fn DepthRange(GLdouble, GLdouble) -> c_void)
    failing!(fn DepthRangeArrayv(GLuint, GLsizei, *GLdouble) -> c_void)
    failing!(fn DepthRangeIndexed(GLuint, GLdouble, GLdouble) -> c_void)
    failing!(fn DepthRangedNV(GLdouble, GLdouble) -> c_void)
    failing!(fn DepthRangef(GLfloat, GLfloat) -> c_void)
    failing!(fn DepthRangefOES(GLclampf, GLclampf) -> c_void)
    failing!(fn DepthRangex(GLfixed, GLfixed) -> c_void)
    failing!(fn DepthRangexOES(GLfixed, GLfixed) -> c_void)
    failing!(fn DetachObjectARB(GLhandleARB, GLhandleARB) -> c_void)
    failing!(fn DetachShader(GLuint, GLuint) -> c_void)
    failing!(fn DetailTexFuncSGIS(GLenum, GLsizei, *GLfloat) -> c_void)
    failing!(fn Disable(GLenum) -> c_void)
    failing!(fn DisableClientState(GLenum) -> c_void)
    failing!(fn DisableClientStateIndexedEXT(GLenum, GLuint) -> c_void)
    failing!(fn DisableClientStateiEXT(GLenum, GLuint) -> c_void)
    failing!(fn DisableDriverControlQCOM(GLuint) -> c_void)
    failing!(fn DisableIndexedEXT(GLenum, GLuint) -> c_void)
    failing!(fn DisableVariantClientStateEXT(GLuint) -> c_void)
    failing!(fn DisableVertexArrayAttribEXT(GLuint, GLuint) -> c_void)
    failing!(fn DisableVertexArrayEXT(GLuint, GLenum) -> c_void)
    failing!(fn DisableVertexAttribAPPLE(GLuint, GLenum) -> c_void)
    failing!(fn DisableVertexAttribArray(GLuint) -> c_void)
    failing!(fn DisableVertexAttribArrayARB(GLuint) -> c_void)
    failing!(fn Disablei(GLenum, GLuint) -> c_void)
    failing!(fn DiscardFramebufferEXT(GLenum, GLsizei, *GLenum) -> c_void)
    failing!(fn DispatchCompute(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn DispatchComputeGroupSizeARB(GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn DispatchComputeIndirect(GLintptr) -> c_void)
    failing!(fn DrawArrays(GLenum, GLint, GLsizei) -> c_void)
    failing!(fn DrawArraysEXT(GLenum, GLint, GLsizei) -> c_void)
    failing!(fn DrawArraysIndirect(GLenum, *GLvoid) -> c_void)
    failing!(fn DrawArraysInstanced(GLenum, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn DrawArraysInstancedANGLE(GLenum, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn DrawArraysInstancedARB(GLenum, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn DrawArraysInstancedBaseInstance(GLenum, GLint, GLsizei, GLsizei, GLuint) -> c_void)
    failing!(fn DrawArraysInstancedEXT(GLenum, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn DrawArraysInstancedNV(GLenum, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn DrawBuffer(GLenum) -> c_void)
    failing!(fn DrawBuffers(GLsizei, *GLenum) -> c_void)
    failing!(fn DrawBuffersARB(GLsizei, *GLenum) -> c_void)
    failing!(fn DrawBuffersATI(GLsizei, *GLenum) -> c_void)
    failing!(fn DrawBuffersEXT(GLsizei, *GLenum) -> c_void)
    failing!(fn DrawBuffersIndexedEXT(GLint, *GLenum, *GLint) -> c_void)
    failing!(fn DrawBuffersNV(GLsizei, *GLenum) -> c_void)
    failing!(fn DrawElementArrayAPPLE(GLenum, GLint, GLsizei) -> c_void)
    failing!(fn DrawElementArrayATI(GLenum, GLsizei) -> c_void)
    failing!(fn DrawElements(GLenum, GLsizei, GLenum, *GLvoid) -> c_void)
    failing!(fn DrawElementsBaseVertex(GLenum, GLsizei, GLenum, *GLvoid, GLint) -> c_void)
    failing!(fn DrawElementsIndirect(GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn DrawElementsInstanced(GLenum, GLsizei, GLenum, *GLvoid, GLsizei) -> c_void)
    failing!(fn DrawElementsInstancedANGLE(GLenum, GLsizei, GLenum, *c_void, GLsizei) -> c_void)
    failing!(fn DrawElementsInstancedARB(GLenum, GLsizei, GLenum, *GLvoid, GLsizei) -> c_void)
    failing!(fn DrawElementsInstancedBaseInstance(GLenum, GLsizei, GLenum, *c_void, GLsizei, GLuint) -> c_void)
    failing!(fn DrawElementsInstancedBaseVertex(GLenum, GLsizei, GLenum, *GLvoid, GLsizei, GLint) -> c_void)
    failing!(fn DrawElementsInstancedBaseVertexBaseInstance(GLenum, GLsizei, GLenum, *c_void, GLsizei, GLint, GLuint) -> c_void)
    failing!(fn DrawElementsInstancedEXT(GLenum, GLsizei, GLenum, *GLvoid, GLsizei) -> c_void)
    failing!(fn DrawElementsInstancedNV(GLenum, GLsizei, GLenum, *GLvoid, GLsizei) -> c_void)
    failing!(fn DrawMeshArraysSUN(GLenum, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn DrawPixels(GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn DrawRangeElementArrayAPPLE(GLenum, GLuint, GLuint, GLint, GLsizei) -> c_void)
    failing!(fn DrawRangeElementArrayATI(GLenum, GLuint, GLuint, GLsizei) -> c_void)
    failing!(fn DrawRangeElements(GLenum, GLuint, GLuint, GLsizei, GLenum, *GLvoid) -> c_void)
    failing!(fn DrawRangeElementsBaseVertex(GLenum, GLuint, GLuint, GLsizei, GLenum, *GLvoid, GLint) -> c_void)
    failing!(fn DrawRangeElementsEXT(GLenum, GLuint, GLuint, GLsizei, GLenum, *GLvoid) -> c_void)
    failing!(fn DrawTexfOES(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn DrawTexfvOES(*GLfloat) -> c_void)
    failing!(fn DrawTexiOES(GLint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn DrawTexivOES(*GLint) -> c_void)
    failing!(fn DrawTexsOES(GLshort, GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn DrawTexsvOES(*GLshort) -> c_void)
    failing!(fn DrawTextureNV(GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn DrawTexxOES(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn DrawTexxvOES(*GLfixed) -> c_void)
    failing!(fn DrawTransformFeedback(GLenum, GLuint) -> c_void)
    failing!(fn DrawTransformFeedbackInstanced(GLenum, GLuint, GLsizei) -> c_void)
    failing!(fn DrawTransformFeedbackNV(GLenum, GLuint) -> c_void)
    failing!(fn DrawTransformFeedbackStream(GLenum, GLuint, GLuint) -> c_void)
    failing!(fn DrawTransformFeedbackStreamInstanced(GLenum, GLuint, GLuint, GLsizei) -> c_void)
    failing!(fn EGLImageTargetRenderbufferStorageOES(GLenum, GLeglImageOES) -> c_void)
    failing!(fn EGLImageTargetTexture2DOES(GLenum, GLeglImageOES) -> c_void)
    failing!(fn EdgeFlag(GLboolean) -> c_void)
    failing!(fn EdgeFlagFormatNV(GLsizei) -> c_void)
    failing!(fn EdgeFlagPointer(GLsizei, *GLvoid) -> c_void)
    failing!(fn EdgeFlagPointerEXT(GLsizei, GLsizei, *GLboolean) -> c_void)
    failing!(fn EdgeFlagPointerListIBM(GLint, **GLboolean, GLint) -> c_void)
    failing!(fn EdgeFlagv(*GLboolean) -> c_void)
    failing!(fn ElementPointerAPPLE(GLenum, *GLvoid) -> c_void)
    failing!(fn ElementPointerATI(GLenum, *GLvoid) -> c_void)
    failing!(fn Enable(GLenum) -> c_void)
    failing!(fn EnableClientState(GLenum) -> c_void)
    failing!(fn EnableClientStateIndexedEXT(GLenum, GLuint) -> c_void)
    failing!(fn EnableClientStateiEXT(GLenum, GLuint) -> c_void)
    failing!(fn EnableDriverControlQCOM(GLuint) -> c_void)
    failing!(fn EnableIndexedEXT(GLenum, GLuint) -> c_void)
    failing!(fn EnableVariantClientStateEXT(GLuint) -> c_void)
    failing!(fn EnableVertexArrayAttribEXT(GLuint, GLuint) -> c_void)
    failing!(fn EnableVertexArrayEXT(GLuint, GLenum) -> c_void)
    failing!(fn EnableVertexAttribAPPLE(GLuint, GLenum) -> c_void)
    failing!(fn EnableVertexAttribArray(GLuint) -> c_void)
    failing!(fn EnableVertexAttribArrayARB(GLuint) -> c_void)
    failing!(fn Enablei(GLenum, GLuint) -> c_void)
    failing!(fn End() -> c_void)
    failing!(fn EndConditionalRender() -> c_void)
    failing!(fn EndConditionalRenderNV() -> c_void)
    failing!(fn EndConditionalRenderNVX() -> c_void)
    failing!(fn EndFragmentShaderATI() -> c_void)
    failing!(fn EndList() -> c_void)
    failing!(fn EndOcclusionQueryNV() -> c_void)
    failing!(fn EndPerfMonitorAMD(GLuint) -> c_void)
    failing!(fn EndQuery(GLenum) -> c_void)
    failing!(fn EndQueryARB(GLenum) -> c_void)
    failing!(fn EndQueryEXT(GLenum) -> c_void)
    failing!(fn EndQueryIndexed(GLenum, GLuint) -> c_void)
    failing!(fn EndTilingQCOM(GLbitfield) -> c_void)
    failing!(fn EndTransformFeedback() -> c_void)
    failing!(fn EndTransformFeedbackEXT() -> c_void)
    failing!(fn EndTransformFeedbackNV() -> c_void)
    failing!(fn EndVertexShaderEXT() -> c_void)
    failing!(fn EndVideoCaptureNV(GLuint) -> c_void)
    failing!(fn EvalCoord1d(GLdouble) -> c_void)
    failing!(fn EvalCoord1dv(*GLdouble) -> c_void)
    failing!(fn EvalCoord1f(GLfloat) -> c_void)
    failing!(fn EvalCoord1fv(*GLfloat) -> c_void)
    failing!(fn EvalCoord1xOES(GLfixed) -> c_void)
    failing!(fn EvalCoord1xvOES(*GLfixed) -> c_void)
    failing!(fn EvalCoord2d(GLdouble, GLdouble) -> c_void)
    failing!(fn EvalCoord2dv(*GLdouble) -> c_void)
    failing!(fn EvalCoord2f(GLfloat, GLfloat) -> c_void)
    failing!(fn EvalCoord2fv(*GLfloat) -> c_void)
    failing!(fn EvalCoord2xOES(GLfixed, GLfixed) -> c_void)
    failing!(fn EvalCoord2xvOES(*GLfixed) -> c_void)
    failing!(fn EvalMapsNV(GLenum, GLenum) -> c_void)
    failing!(fn EvalMesh1(GLenum, GLint, GLint) -> c_void)
    failing!(fn EvalMesh2(GLenum, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn EvalPoint1(GLint) -> c_void)
    failing!(fn EvalPoint2(GLint, GLint) -> c_void)
    failing!(fn ExecuteProgramNV(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn ExtGetBufferPointervQCOM(GLenum, **GLvoid) -> c_void)
    failing!(fn ExtGetBuffersQCOM(*GLuint, GLint, *GLint) -> c_void)
    failing!(fn ExtGetFramebuffersQCOM(*GLuint, GLint, *GLint) -> c_void)
    failing!(fn ExtGetProgramBinarySourceQCOM(GLuint, GLenum, *GLchar, *GLint) -> c_void)
    failing!(fn ExtGetProgramsQCOM(*GLuint, GLint, *GLint) -> c_void)
    failing!(fn ExtGetRenderbuffersQCOM(*GLuint, GLint, *GLint) -> c_void)
    failing!(fn ExtGetShadersQCOM(*GLuint, GLint, *GLint) -> c_void)
    failing!(fn ExtGetTexLevelParameterivQCOM(GLuint, GLenum, GLint, GLenum, *GLint) -> c_void)
    failing!(fn ExtGetTexSubImageQCOM(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ExtGetTexturesQCOM(*GLuint, GLint, *GLint) -> c_void)
    failing!(fn ExtIsProgramBinaryQCOM(GLuint) -> GLboolean)
    failing!(fn ExtTexObjectStateOverrideiQCOM(GLenum, GLenum, GLint) -> c_void)
    failing!(fn ExtractComponentEXT(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn FeedbackBuffer(GLsizei, GLenum, *GLfloat) -> c_void)
    failing!(fn FeedbackBufferxOES(GLsizei, GLenum, *GLfixed) -> c_void)
    failing!(fn FenceSync(GLenum, GLbitfield) -> GLsync)
    failing!(fn FenceSyncAPPLE(GLenum, GLbitfield) -> GLsync)
    failing!(fn FinalCombinerInputNV(GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn Finish() -> c_void)
    failing!(fn FinishAsyncSGIX(*GLuint) -> GLint)
    failing!(fn FinishFenceAPPLE(GLuint) -> c_void)
    failing!(fn FinishFenceNV(GLuint) -> c_void)
    failing!(fn FinishObjectAPPLE(GLenum, GLint) -> c_void)
    failing!(fn FinishTextureSUNX() -> c_void)
    failing!(fn Flush() -> c_void)
    failing!(fn FlushMappedBufferRange(GLenum, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn FlushMappedBufferRangeAPPLE(GLenum, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn FlushMappedBufferRangeEXT(GLenum, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn FlushMappedNamedBufferRangeEXT(GLuint, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn FlushPixelDataRangeNV(GLenum) -> c_void)
    failing!(fn FlushRasterSGIX() -> c_void)
    failing!(fn FlushStaticDataIBM(GLenum) -> c_void)
    failing!(fn FlushVertexArrayRangeAPPLE(GLsizei, *GLvoid) -> c_void)
    failing!(fn FlushVertexArrayRangeNV() -> c_void)
    failing!(fn FogCoordFormatNV(GLenum, GLsizei) -> c_void)
    failing!(fn FogCoordPointer(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn FogCoordPointerEXT(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn FogCoordPointerListIBM(GLenum, GLint, **GLvoid, GLint) -> c_void)
    failing!(fn FogCoordd(GLdouble) -> c_void)
    failing!(fn FogCoorddEXT(GLdouble) -> c_void)
    failing!(fn FogCoorddv(*GLdouble) -> c_void)
    failing!(fn FogCoorddvEXT(*GLdouble) -> c_void)
    failing!(fn FogCoordf(GLfloat) -> c_void)
    failing!(fn FogCoordfEXT(GLfloat) -> c_void)
    failing!(fn FogCoordfv(*GLfloat) -> c_void)
    failing!(fn FogCoordfvEXT(*GLfloat) -> c_void)
    failing!(fn FogCoordhNV(GLhalfNV) -> c_void)
    failing!(fn FogCoordhvNV(*GLhalfNV) -> c_void)
    failing!(fn FogFuncSGIS(GLsizei, *GLfloat) -> c_void)
    failing!(fn Fogf(GLenum, GLfloat) -> c_void)
    failing!(fn Fogfv(GLenum, *GLfloat) -> c_void)
    failing!(fn Fogi(GLenum, GLint) -> c_void)
    failing!(fn Fogiv(GLenum, *GLint) -> c_void)
    failing!(fn Fogx(GLenum, GLfixed) -> c_void)
    failing!(fn FogxOES(GLenum, GLfixed) -> c_void)
    failing!(fn Fogxv(GLenum, *GLfixed) -> c_void)
    failing!(fn FogxvOES(GLenum, *GLfixed) -> c_void)
    failing!(fn FragmentColorMaterialSGIX(GLenum, GLenum) -> c_void)
    failing!(fn FragmentLightModelfSGIX(GLenum, GLfloat) -> c_void)
    failing!(fn FragmentLightModelfvSGIX(GLenum, *GLfloat) -> c_void)
    failing!(fn FragmentLightModeliSGIX(GLenum, GLint) -> c_void)
    failing!(fn FragmentLightModelivSGIX(GLenum, *GLint) -> c_void)
    failing!(fn FragmentLightfSGIX(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn FragmentLightfvSGIX(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn FragmentLightiSGIX(GLenum, GLenum, GLint) -> c_void)
    failing!(fn FragmentLightivSGIX(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn FragmentMaterialfSGIX(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn FragmentMaterialfvSGIX(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn FragmentMaterialiSGIX(GLenum, GLenum, GLint) -> c_void)
    failing!(fn FragmentMaterialivSGIX(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn FrameTerminatorGREMEDY() -> c_void)
    failing!(fn FrameZoomSGIX(GLint) -> c_void)
    failing!(fn FramebufferDrawBufferEXT(GLuint, GLenum) -> c_void)
    failing!(fn FramebufferDrawBuffersEXT(GLuint, GLsizei, *GLenum) -> c_void)
    failing!(fn FramebufferParameteri(GLenum, GLenum, GLint) -> c_void)
    failing!(fn FramebufferReadBufferEXT(GLuint, GLenum) -> c_void)
    failing!(fn FramebufferRenderbuffer(GLenum, GLenum, GLenum, GLuint) -> c_void)
    failing!(fn FramebufferRenderbufferEXT(GLenum, GLenum, GLenum, GLuint) -> c_void)
    failing!(fn FramebufferRenderbufferOES(GLenum, GLenum, GLenum, GLuint) -> c_void)
    failing!(fn FramebufferTexture(GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn FramebufferTexture1D(GLenum, GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn FramebufferTexture1DEXT(GLenum, GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn FramebufferTexture2D(GLenum, GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn FramebufferTexture2DEXT(GLenum, GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn FramebufferTexture2DMultisampleEXT(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) -> c_void)
    failing!(fn FramebufferTexture2DMultisampleIMG(GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) -> c_void)
    failing!(fn FramebufferTexture2DOES(GLenum, GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn FramebufferTexture3D(GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> c_void)
    failing!(fn FramebufferTexture3DEXT(GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> c_void)
    failing!(fn FramebufferTexture3DOES(GLenum, GLenum, GLenum, GLuint, GLint, GLint) -> c_void)
    failing!(fn FramebufferTextureARB(GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn FramebufferTextureEXT(GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn FramebufferTextureFaceARB(GLenum, GLenum, GLuint, GLint, GLenum) -> c_void)
    failing!(fn FramebufferTextureFaceEXT(GLenum, GLenum, GLuint, GLint, GLenum) -> c_void)
    failing!(fn FramebufferTextureLayer(GLenum, GLenum, GLuint, GLint, GLint) -> c_void)
    failing!(fn FramebufferTextureLayerARB(GLenum, GLenum, GLuint, GLint, GLint) -> c_void)
    failing!(fn FramebufferTextureLayerEXT(GLenum, GLenum, GLuint, GLint, GLint) -> c_void)
    failing!(fn FreeObjectBufferATI(GLuint) -> c_void)
    failing!(fn FrontFace(GLenum) -> c_void)
    failing!(fn Frustum(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Frustumf(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn FrustumfOES(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Frustumx(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn FrustumxOES(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn GenAsyncMarkersSGIX(GLsizei) -> GLuint)
    failing!(fn GenBuffers(GLsizei, *GLuint) -> c_void)
    failing!(fn GenBuffersARB(GLsizei, *GLuint) -> c_void)
    failing!(fn GenFencesAPPLE(GLsizei, *GLuint) -> c_void)
    failing!(fn GenFencesNV(GLsizei, *GLuint) -> c_void)
    failing!(fn GenFragmentShadersATI(GLuint) -> GLuint)
    failing!(fn GenFramebuffers(GLsizei, *GLuint) -> c_void)
    failing!(fn GenFramebuffersEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn GenFramebuffersOES(GLsizei, *GLuint) -> c_void)
    failing!(fn GenLists(GLsizei) -> GLuint)
    failing!(fn GenNamesAMD(GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn GenOcclusionQueriesNV(GLsizei, *GLuint) -> c_void)
    failing!(fn GenPathsNV(GLsizei) -> GLuint)
    failing!(fn GenPerfMonitorsAMD(GLsizei, *GLuint) -> c_void)
    failing!(fn GenProgramPipelines(GLsizei, *GLuint) -> c_void)
    failing!(fn GenProgramPipelinesEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn GenProgramsARB(GLsizei, *GLuint) -> c_void)
    failing!(fn GenProgramsNV(GLsizei, *GLuint) -> c_void)
    failing!(fn GenQueries(GLsizei, *GLuint) -> c_void)
    failing!(fn GenQueriesARB(GLsizei, *GLuint) -> c_void)
    failing!(fn GenQueriesEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn GenRenderbuffers(GLsizei, *GLuint) -> c_void)
    failing!(fn GenRenderbuffersEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn GenRenderbuffersOES(GLsizei, *GLuint) -> c_void)
    failing!(fn GenSamplers(GLsizei, *GLuint) -> c_void)
    failing!(fn GenSymbolsEXT(GLenum, GLenum, GLenum, GLuint) -> GLuint)
    failing!(fn GenTextures(GLsizei, *GLuint) -> c_void)
    failing!(fn GenTexturesEXT(GLsizei, *GLuint) -> c_void)
    failing!(fn GenTransformFeedbacks(GLsizei, *GLuint) -> c_void)
    failing!(fn GenTransformFeedbacksNV(GLsizei, *GLuint) -> c_void)
    failing!(fn GenVertexArrays(GLsizei, *GLuint) -> c_void)
    failing!(fn GenVertexArraysAPPLE(GLsizei, *GLuint) -> c_void)
    failing!(fn GenVertexArraysOES(GLsizei, *GLuint) -> c_void)
    failing!(fn GenVertexShadersEXT(GLuint) -> GLuint)
    failing!(fn GenerateMipmap(GLenum) -> c_void)
    failing!(fn GenerateMipmapEXT(GLenum) -> c_void)
    failing!(fn GenerateMipmapOES(GLenum) -> c_void)
    failing!(fn GenerateMultiTexMipmapEXT(GLenum, GLenum) -> c_void)
    failing!(fn GenerateTextureMipmapEXT(GLuint, GLenum) -> c_void)
    failing!(fn GetActiveAtomicCounterBufferiv(GLuint, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetActiveAttrib(GLuint, GLuint, GLsizei, *GLsizei, *GLint, *GLenum, *GLchar) -> c_void)
    failing!(fn GetActiveAttribARB(GLhandleARB, GLuint, GLsizei, *GLsizei, *GLint, *GLenum, *GLcharARB) -> c_void)
    failing!(fn GetActiveSubroutineName(GLuint, GLenum, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetActiveSubroutineUniformName(GLuint, GLenum, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetActiveSubroutineUniformiv(GLuint, GLenum, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetActiveUniform(GLuint, GLuint, GLsizei, *GLsizei, *GLint, *GLenum, *GLchar) -> c_void)
    failing!(fn GetActiveUniformARB(GLhandleARB, GLuint, GLsizei, *GLsizei, *GLint, *GLenum, *GLcharARB) -> c_void)
    failing!(fn GetActiveUniformBlockName(GLuint, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetActiveUniformBlockiv(GLuint, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetActiveUniformName(GLuint, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetActiveUniformsiv(GLuint, GLsizei, *GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetActiveVaryingNV(GLuint, GLuint, GLsizei, *GLsizei, *GLsizei, *GLenum, *GLchar) -> c_void)
    failing!(fn GetArrayObjectfvATI(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetArrayObjectivATI(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetAttachedObjectsARB(GLhandleARB, GLsizei, *GLsizei, *GLhandleARB) -> c_void)
    failing!(fn GetAttachedShaders(GLuint, GLsizei, *GLsizei, *GLuint) -> c_void)
    failing!(fn GetAttribLocation(GLuint, *GLchar) -> GLint)
    failing!(fn GetAttribLocationARB(GLhandleARB, *GLcharARB) -> GLint)
    failing!(fn GetBooleanIndexedvEXT(GLenum, GLuint, *GLboolean) -> c_void)
    failing!(fn GetBooleani_v(GLenum, GLuint, *GLboolean) -> c_void)
    failing!(fn GetBooleanv(GLenum, *GLboolean) -> c_void)
    failing!(fn GetBufferParameteri64v(GLenum, GLenum, *GLint64) -> c_void)
    failing!(fn GetBufferParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetBufferParameterivARB(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetBufferParameterui64vNV(GLenum, GLenum, *GLuint64EXT) -> c_void)
    failing!(fn GetBufferPointerv(GLenum, GLenum, **GLvoid) -> c_void)
    failing!(fn GetBufferPointervARB(GLenum, GLenum, **GLvoid) -> c_void)
    failing!(fn GetBufferPointervOES(GLenum, GLenum, **GLvoid) -> c_void)
    failing!(fn GetBufferSubData(GLenum, GLintptr, GLsizeiptr, *GLvoid) -> c_void)
    failing!(fn GetBufferSubDataARB(GLenum, GLintptrARB, GLsizeiptrARB, *GLvoid) -> c_void)
    failing!(fn GetClipPlane(GLenum, *GLdouble) -> c_void)
    failing!(fn GetClipPlanef(GLenum, *GLfloat) -> c_void)
    failing!(fn GetClipPlanefOES(GLenum, *GLfloat) -> c_void)
    failing!(fn GetClipPlanex(GLenum, *GLfixed) -> c_void)
    failing!(fn GetClipPlanexOES(GLenum, *GLfixed) -> c_void)
    failing!(fn GetColorTable(GLenum, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetColorTableEXT(GLenum, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetColorTableParameterfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetColorTableParameterfvEXT(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetColorTableParameterfvSGI(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetColorTableParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetColorTableParameterivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetColorTableParameterivSGI(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetColorTableSGI(GLenum, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetCombinerInputParameterfvNV(GLenum, GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetCombinerInputParameterivNV(GLenum, GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetCombinerOutputParameterfvNV(GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetCombinerOutputParameterivNV(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetCombinerStageParameterfvNV(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetCompressedMultiTexImageEXT(GLenum, GLenum, GLint, *GLvoid) -> c_void)
    failing!(fn GetCompressedTexImage(GLenum, GLint, *GLvoid) -> c_void)
    failing!(fn GetCompressedTexImageARB(GLenum, GLint, *GLvoid) -> c_void)
    failing!(fn GetCompressedTextureImageEXT(GLuint, GLenum, GLint, *GLvoid) -> c_void)
    failing!(fn GetConvolutionFilter(GLenum, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetConvolutionFilterEXT(GLenum, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetConvolutionParameterfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetConvolutionParameterfvEXT(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetConvolutionParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetConvolutionParameterivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetConvolutionParameterxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetDebugMessageLog(GLuint, GLsizei, *GLenum, *GLenum, *GLuint, *GLenum, *GLsizei, *GLchar) -> GLuint)
    failing!(fn GetDebugMessageLogAMD(GLuint, GLsizei, *GLenum, *GLuint, *GLuint, *GLsizei, *GLchar) -> GLuint)
    failing!(fn GetDebugMessageLogARB(GLuint, GLsizei, *GLenum, *GLenum, *GLuint, *GLenum, *GLsizei, *GLchar) -> GLuint)
    failing!(fn GetDebugMessageLogKHR(GLuint, GLsizei, *GLenum, *GLenum, *GLuint, *GLenum, *GLsizei, *GLchar) -> GLuint)
    failing!(fn GetDetailTexFuncSGIS(GLenum, *GLfloat) -> c_void)
    failing!(fn GetDoubleIndexedvEXT(GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn GetDoublei_v(GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn GetDoublei_vEXT(GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn GetDoublev(GLenum, *GLdouble) -> c_void)
    failing!(fn GetDriverControlStringQCOM(GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetDriverControlsQCOM(*GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn GetError() -> GLenum)
    failing!(fn GetFenceivNV(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetFinalCombinerInputParameterfvNV(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetFinalCombinerInputParameterivNV(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetFixedv(GLenum, *GLfixed) -> c_void)
    failing!(fn GetFixedvOES(GLenum, *GLfixed) -> c_void)
    failing!(fn GetFloatIndexedvEXT(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn GetFloati_v(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn GetFloati_vEXT(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn GetFloatv(GLenum, *GLfloat) -> c_void)
    failing!(fn GetFogFuncSGIS(*GLfloat) -> c_void)
    failing!(fn GetFragDataIndex(GLuint, *GLchar) -> GLint)
    failing!(fn GetFragDataLocation(GLuint, *GLchar) -> GLint)
    failing!(fn GetFragDataLocationEXT(GLuint, *GLchar) -> GLint)
    failing!(fn GetFragmentLightfvSGIX(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetFragmentLightivSGIX(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetFragmentMaterialfvSGIX(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetFragmentMaterialivSGIX(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetFramebufferAttachmentParameteriv(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetFramebufferAttachmentParameterivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetFramebufferAttachmentParameterivOES(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetFramebufferParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetFramebufferParameterivEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetGraphicsResetStatusARB() -> GLenum)
    failing!(fn GetGraphicsResetStatusEXT() -> GLenum)
    failing!(fn GetHandleARB(GLenum) -> GLhandleARB)
    failing!(fn GetHistogram(GLenum, GLboolean, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetHistogramEXT(GLenum, GLboolean, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetHistogramParameterfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetHistogramParameterfvEXT(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetHistogramParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetHistogramParameterivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetHistogramParameterxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetImageHandleARB(GLuint, GLint, GLboolean, GLint, GLenum) -> GLuint64)
    failing!(fn GetImageHandleNV(GLuint, GLint, GLboolean, GLint, GLenum) -> GLuint64)
    failing!(fn GetImageTransformParameterfvHP(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetImageTransformParameterivHP(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetInfoLogARB(GLhandleARB, GLsizei, *GLsizei, *GLcharARB) -> c_void)
    failing!(fn GetInstrumentsSGIX() -> GLint)
    failing!(fn GetInteger64i_v(GLenum, GLuint, *GLint64) -> c_void)
    failing!(fn GetInteger64v(GLenum, *GLint64) -> c_void)
    failing!(fn GetInteger64vAPPLE(GLenum, *GLint64) -> c_void)
    failing!(fn GetIntegerIndexedvEXT(GLenum, GLuint, *GLint) -> c_void)
    failing!(fn GetIntegeri_v(GLenum, GLuint, *GLint) -> c_void)
    failing!(fn GetIntegeri_vEXT(GLenum, GLuint, *GLint) -> c_void)
    failing!(fn GetIntegerui64i_vNV(GLenum, GLuint, *GLuint64EXT) -> c_void)
    failing!(fn GetIntegerui64vNV(GLenum, *GLuint64EXT) -> c_void)
    failing!(fn GetIntegerv(GLenum, *GLint) -> c_void)
    failing!(fn GetInternalformati64v(GLenum, GLenum, GLenum, GLsizei, *GLint64) -> c_void)
    failing!(fn GetInternalformativ(GLenum, GLenum, GLenum, GLsizei, *GLint) -> c_void)
    failing!(fn GetInvariantBooleanvEXT(GLuint, GLenum, *GLboolean) -> c_void)
    failing!(fn GetInvariantFloatvEXT(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetInvariantIntegervEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetLightfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetLightiv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetLightx(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetLightxOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetLightxv(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetLightxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetListParameterfvSGIX(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetListParameterivSGIX(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetLocalConstantBooleanvEXT(GLuint, GLenum, *GLboolean) -> c_void)
    failing!(fn GetLocalConstantFloatvEXT(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetLocalConstantIntegervEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetMapAttribParameterfvNV(GLenum, GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMapAttribParameterivNV(GLenum, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetMapControlPointsNV(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, *GLvoid) -> c_void)
    failing!(fn GetMapParameterfvNV(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMapParameterivNV(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMapdv(GLenum, GLenum, *GLdouble) -> c_void)
    failing!(fn GetMapfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMapiv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMapxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetMaterialfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMaterialiv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMaterialx(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn GetMaterialxOES(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn GetMaterialxv(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetMaterialxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetMinmax(GLenum, GLboolean, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetMinmaxEXT(GLenum, GLboolean, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetMinmaxParameterfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMinmaxParameterfvEXT(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMinmaxParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMinmaxParameterivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMultiTexEnvfvEXT(GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMultiTexEnvivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMultiTexGendvEXT(GLenum, GLenum, GLenum, *GLdouble) -> c_void)
    failing!(fn GetMultiTexGenfvEXT(GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMultiTexGenivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMultiTexImageEXT(GLenum, GLenum, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetMultiTexLevelParameterfvEXT(GLenum, GLenum, GLint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMultiTexLevelParameterivEXT(GLenum, GLenum, GLint, GLenum, *GLint) -> c_void)
    failing!(fn GetMultiTexParameterIivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMultiTexParameterIuivEXT(GLenum, GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn GetMultiTexParameterfvEXT(GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetMultiTexParameterivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetMultisamplefv(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn GetMultisamplefvNV(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn GetNamedBufferParameterivEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetNamedBufferParameterui64vNV(GLuint, GLenum, *GLuint64EXT) -> c_void)
    failing!(fn GetNamedBufferPointervEXT(GLuint, GLenum, **GLvoid) -> c_void)
    failing!(fn GetNamedBufferSubDataEXT(GLuint, GLintptr, GLsizeiptr, *GLvoid) -> c_void)
    failing!(fn GetNamedFramebufferAttachmentParameterivEXT(GLuint, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetNamedFramebufferParameterivEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetNamedProgramLocalParameterIivEXT(GLuint, GLenum, GLuint, *GLint) -> c_void)
    failing!(fn GetNamedProgramLocalParameterIuivEXT(GLuint, GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn GetNamedProgramLocalParameterdvEXT(GLuint, GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn GetNamedProgramLocalParameterfvEXT(GLuint, GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn GetNamedProgramStringEXT(GLuint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetNamedProgramivEXT(GLuint, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetNamedRenderbufferParameterivEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetNamedStringARB(GLint, *GLchar, GLsizei, *GLint, *GLchar) -> c_void)
    failing!(fn GetNamedStringivARB(GLint, *GLchar, GLenum, *GLint) -> c_void)
    failing!(fn GetObjectBufferfvATI(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetObjectBufferivATI(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetObjectLabel(GLenum, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetObjectLabelEXT(GLenum, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetObjectLabelKHR(GLenum, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetObjectParameterfvARB(GLhandleARB, GLenum, *GLfloat) -> c_void)
    failing!(fn GetObjectParameterivAPPLE(GLenum, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetObjectParameterivARB(GLhandleARB, GLenum, *GLint) -> c_void)
    failing!(fn GetObjectPtrLabel(*c_void, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetObjectPtrLabelKHR(*c_void, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetOcclusionQueryivNV(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetOcclusionQueryuivNV(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn GetPathColorGenfvNV(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetPathColorGenivNV(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetPathCommandsNV(GLuint, *GLubyte) -> c_void)
    failing!(fn GetPathCoordsNV(GLuint, *GLfloat) -> c_void)
    failing!(fn GetPathDashArrayNV(GLuint, *GLfloat) -> c_void)
    failing!(fn GetPathLengthNV(GLuint, GLsizei, GLsizei) -> GLfloat)
    failing!(fn GetPathMetricRangeNV(GLbitfield, GLuint, GLsizei, GLsizei, *GLfloat) -> c_void)
    failing!(fn GetPathMetricsNV(GLbitfield, GLsizei, GLenum, *GLvoid, GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn GetPathParameterfvNV(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetPathParameterivNV(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetPathSpacingNV(GLenum, GLsizei, GLenum, *GLvoid, GLuint, GLfloat, GLfloat, GLenum, *GLfloat) -> c_void)
    failing!(fn GetPathTexGenfvNV(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetPathTexGenivNV(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetPerfMonitorCounterDataAMD(GLuint, GLenum, GLsizei, *GLuint, *GLint) -> c_void)
    failing!(fn GetPerfMonitorCounterInfoAMD(GLuint, GLuint, GLenum, *GLvoid) -> c_void)
    failing!(fn GetPerfMonitorCounterStringAMD(GLuint, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetPerfMonitorCountersAMD(GLuint, *GLint, *GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn GetPerfMonitorGroupStringAMD(GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetPerfMonitorGroupsAMD(*GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn GetPixelMapfv(GLenum, *GLfloat) -> c_void)
    failing!(fn GetPixelMapuiv(GLenum, *GLuint) -> c_void)
    failing!(fn GetPixelMapusv(GLenum, *GLushort) -> c_void)
    failing!(fn GetPixelMapxv(GLenum, GLint, *GLfixed) -> c_void)
    failing!(fn GetPixelTexGenParameterfvSGIS(GLenum, *GLfloat) -> c_void)
    failing!(fn GetPixelTexGenParameterivSGIS(GLenum, *GLint) -> c_void)
    failing!(fn GetPixelTransformParameterfvEXT(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetPixelTransformParameterivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetPointerIndexedvEXT(GLenum, GLuint, **GLvoid) -> c_void)
    failing!(fn GetPointeri_vEXT(GLenum, GLuint, **GLvoid) -> c_void)
    failing!(fn GetPointerv(GLenum, **GLvoid) -> c_void)
    failing!(fn GetPointervEXT(GLenum, **GLvoid) -> c_void)
    failing!(fn GetPointervKHR(GLenum, **GLvoid) -> c_void)
    failing!(fn GetPolygonStipple(*GLubyte) -> c_void)
    failing!(fn GetProgramBinary(GLuint, GLsizei, *GLsizei, *GLenum, *GLvoid) -> c_void)
    failing!(fn GetProgramBinaryOES(GLuint, GLsizei, *GLsizei, *GLenum, *GLvoid) -> c_void)
    failing!(fn GetProgramEnvParameterIivNV(GLenum, GLuint, *GLint) -> c_void)
    failing!(fn GetProgramEnvParameterIuivNV(GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn GetProgramEnvParameterdvARB(GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn GetProgramEnvParameterfvARB(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn GetProgramInfoLog(GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetProgramInterfaceiv(GLuint, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetProgramLocalParameterIivNV(GLenum, GLuint, *GLint) -> c_void)
    failing!(fn GetProgramLocalParameterIuivNV(GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn GetProgramLocalParameterdvARB(GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn GetProgramLocalParameterfvARB(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn GetProgramNamedParameterdvNV(GLuint, GLsizei, *GLubyte, *GLdouble) -> c_void)
    failing!(fn GetProgramNamedParameterfvNV(GLuint, GLsizei, *GLubyte, *GLfloat) -> c_void)
    failing!(fn GetProgramParameterdvNV(GLenum, GLuint, GLenum, *GLdouble) -> c_void)
    failing!(fn GetProgramParameterfvNV(GLenum, GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetProgramPipelineInfoLog(GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetProgramPipelineInfoLogEXT(GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetProgramPipelineiv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetProgramPipelineivEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetProgramResourceIndex(GLuint, GLenum, *GLchar) -> GLuint)
    failing!(fn GetProgramResourceLocation(GLuint, GLenum, *GLchar) -> GLint)
    failing!(fn GetProgramResourceLocationIndex(GLuint, GLenum, *GLchar) -> GLint)
    failing!(fn GetProgramResourceName(GLuint, GLenum, GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetProgramResourceiv(GLuint, GLenum, GLuint, GLsizei, *GLenum, GLsizei, *GLsizei, *GLint) -> c_void)
    failing!(fn GetProgramStageiv(GLuint, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetProgramStringARB(GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetProgramStringNV(GLuint, GLenum, *GLubyte) -> c_void)
    failing!(fn GetProgramSubroutineParameteruivNV(GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn GetProgramiv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetProgramivARB(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetProgramivNV(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetQueryIndexediv(GLenum, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetQueryObjecti64v(GLuint, GLenum, *GLint64) -> c_void)
    failing!(fn GetQueryObjecti64vEXT(GLuint, GLenum, *GLint64) -> c_void)
    failing!(fn GetQueryObjectiv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetQueryObjectivARB(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetQueryObjectivEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetQueryObjectui64v(GLuint, GLenum, *GLuint64) -> c_void)
    failing!(fn GetQueryObjectui64vEXT(GLuint, GLenum, *GLuint64) -> c_void)
    failing!(fn GetQueryObjectuiv(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn GetQueryObjectuivARB(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn GetQueryObjectuivEXT(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn GetQueryiv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetQueryivARB(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetQueryivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetRenderbufferParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetRenderbufferParameterivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetRenderbufferParameterivOES(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetSamplerParameterIiv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetSamplerParameterIuiv(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn GetSamplerParameterfv(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetSamplerParameteriv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetSeparableFilter(GLenum, GLenum, GLenum, *GLvoid, *GLvoid, *GLvoid) -> c_void)
    failing!(fn GetSeparableFilterEXT(GLenum, GLenum, GLenum, *GLvoid, *GLvoid, *GLvoid) -> c_void)
    failing!(fn GetShaderInfoLog(GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetShaderPrecisionFormat(GLenum, GLenum, *GLint, *GLint) -> c_void)
    failing!(fn GetShaderSource(GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetShaderSourceARB(GLhandleARB, GLsizei, *GLsizei, *GLcharARB) -> c_void)
    failing!(fn GetShaderiv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetSharpenTexFuncSGIS(GLenum, *GLfloat) -> c_void)
    failing!(fn GetString(GLenum) -> *GLubyte)
    failing!(fn GetStringi(GLenum, GLuint) -> *GLubyte)
    failing!(fn GetSubroutineIndex(GLuint, GLenum, *GLchar) -> GLuint)
    failing!(fn GetSubroutineUniformLocation(GLuint, GLenum, *GLchar) -> GLint)
    failing!(fn GetSynciv(GLsync, GLenum, GLsizei, *GLsizei, *GLint) -> c_void)
    failing!(fn GetSyncivAPPLE(GLsync, GLenum, GLsizei, *GLsizei, *GLint) -> c_void)
    failing!(fn GetTexBumpParameterfvATI(GLenum, *GLfloat) -> c_void)
    failing!(fn GetTexBumpParameterivATI(GLenum, *GLint) -> c_void)
    failing!(fn GetTexEnvfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetTexEnviv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetTexEnvxv(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetTexEnvxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetTexFilterFuncSGIS(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetTexGendv(GLenum, GLenum, *GLdouble) -> c_void)
    failing!(fn GetTexGenfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetTexGenfvOES(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetTexGeniv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetTexGenivOES(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetTexGenxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetTexImage(GLenum, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetTexLevelParameterfv(GLenum, GLint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetTexLevelParameteriv(GLenum, GLint, GLenum, *GLint) -> c_void)
    failing!(fn GetTexLevelParameterxvOES(GLenum, GLint, GLenum, *GLfixed) -> c_void)
    failing!(fn GetTexParameterIiv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetTexParameterIivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetTexParameterIuiv(GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn GetTexParameterIuivEXT(GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn GetTexParameterPointervAPPLE(GLenum, GLenum, **GLvoid) -> c_void)
    failing!(fn GetTexParameterfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetTexParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetTexParameterxv(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetTexParameterxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn GetTextureHandleARB(GLuint) -> GLuint64)
    failing!(fn GetTextureHandleNV(GLuint) -> GLuint64)
    failing!(fn GetTextureImageEXT(GLuint, GLenum, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn GetTextureLevelParameterfvEXT(GLuint, GLenum, GLint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetTextureLevelParameterivEXT(GLuint, GLenum, GLint, GLenum, *GLint) -> c_void)
    failing!(fn GetTextureParameterIivEXT(GLuint, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetTextureParameterIuivEXT(GLuint, GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn GetTextureParameterfvEXT(GLuint, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn GetTextureParameterivEXT(GLuint, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn GetTextureSamplerHandleARB(GLuint, GLuint) -> GLuint64)
    failing!(fn GetTextureSamplerHandleNV(GLuint, GLuint) -> GLuint64)
    failing!(fn GetTrackMatrixivNV(GLenum, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetTransformFeedbackVarying(GLuint, GLuint, GLsizei, *GLsizei, *GLsizei, *GLenum, *GLchar) -> c_void)
    failing!(fn GetTransformFeedbackVaryingEXT(GLuint, GLuint, GLsizei, *GLsizei, *GLsizei, *GLenum, *GLchar) -> c_void)
    failing!(fn GetTransformFeedbackVaryingNV(GLuint, GLuint, *GLint) -> c_void)
    failing!(fn GetTranslatedShaderSourceANGLE(GLuint, GLsizei, *GLsizei, *GLchar) -> c_void)
    failing!(fn GetUniformBlockIndex(GLuint, *GLchar) -> GLuint)
    failing!(fn GetUniformBufferSizeEXT(GLuint, GLint) -> GLint)
    failing!(fn GetUniformIndices(GLuint, GLsizei, **GLchar, *GLuint) -> c_void)
    failing!(fn GetUniformLocation(GLuint, *GLchar) -> GLint)
    failing!(fn GetUniformLocationARB(GLhandleARB, *GLcharARB) -> GLint)
    failing!(fn GetUniformOffsetEXT(GLuint, GLint) -> GLintptr)
    failing!(fn GetUniformSubroutineuiv(GLenum, GLint, *GLuint) -> c_void)
    failing!(fn GetUniformdv(GLuint, GLint, *GLdouble) -> c_void)
    failing!(fn GetUniformfv(GLuint, GLint, *GLfloat) -> c_void)
    failing!(fn GetUniformfvARB(GLhandleARB, GLint, *GLfloat) -> c_void)
    failing!(fn GetUniformi64vNV(GLuint, GLint, *GLint64EXT) -> c_void)
    failing!(fn GetUniformiv(GLuint, GLint, *GLint) -> c_void)
    failing!(fn GetUniformivARB(GLhandleARB, GLint, *GLint) -> c_void)
    failing!(fn GetUniformui64vNV(GLuint, GLint, *GLuint64EXT) -> c_void)
    failing!(fn GetUniformuiv(GLuint, GLint, *GLuint) -> c_void)
    failing!(fn GetUniformuivEXT(GLuint, GLint, *GLuint) -> c_void)
    failing!(fn GetVariantArrayObjectfvATI(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetVariantArrayObjectivATI(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVariantBooleanvEXT(GLuint, GLenum, *GLboolean) -> c_void)
    failing!(fn GetVariantFloatvEXT(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetVariantIntegervEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVariantPointervEXT(GLuint, GLenum, **GLvoid) -> c_void)
    failing!(fn GetVaryingLocationNV(GLuint, *GLchar) -> GLint)
    failing!(fn GetVertexArrayIntegeri_vEXT(GLuint, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVertexArrayIntegervEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVertexArrayPointeri_vEXT(GLuint, GLuint, GLenum, **GLvoid) -> c_void)
    failing!(fn GetVertexArrayPointervEXT(GLuint, GLenum, **GLvoid) -> c_void)
    failing!(fn GetVertexAttribArrayObjectfvATI(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetVertexAttribArrayObjectivATI(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVertexAttribIiv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVertexAttribIivEXT(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVertexAttribIuiv(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn GetVertexAttribIuivEXT(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn GetVertexAttribLdv(GLuint, GLenum, *GLdouble) -> c_void)
    failing!(fn GetVertexAttribLdvEXT(GLuint, GLenum, *GLdouble) -> c_void)
    failing!(fn GetVertexAttribLi64vNV(GLuint, GLenum, *GLint64EXT) -> c_void)
    failing!(fn GetVertexAttribLui64vARB(GLuint, GLenum, *GLuint64EXT) -> c_void)
    failing!(fn GetVertexAttribLui64vNV(GLuint, GLenum, *GLuint64EXT) -> c_void)
    failing!(fn GetVertexAttribPointerv(GLuint, GLenum, **GLvoid) -> c_void)
    failing!(fn GetVertexAttribPointervARB(GLuint, GLenum, **GLvoid) -> c_void)
    failing!(fn GetVertexAttribPointervNV(GLuint, GLenum, **GLvoid) -> c_void)
    failing!(fn GetVertexAttribdv(GLuint, GLenum, *GLdouble) -> c_void)
    failing!(fn GetVertexAttribdvARB(GLuint, GLenum, *GLdouble) -> c_void)
    failing!(fn GetVertexAttribdvNV(GLuint, GLenum, *GLdouble) -> c_void)
    failing!(fn GetVertexAttribfv(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetVertexAttribfvARB(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetVertexAttribfvNV(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetVertexAttribiv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVertexAttribivARB(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVertexAttribivNV(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVideoCaptureStreamdvNV(GLuint, GLuint, GLenum, *GLdouble) -> c_void)
    failing!(fn GetVideoCaptureStreamfvNV(GLuint, GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn GetVideoCaptureStreamivNV(GLuint, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVideoCaptureivNV(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVideoi64vNV(GLuint, GLenum, *GLint64EXT) -> c_void)
    failing!(fn GetVideoivNV(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn GetVideoui64vNV(GLuint, GLenum, *GLuint64EXT) -> c_void)
    failing!(fn GetVideouivNV(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn GetnColorTableARB(GLenum, GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn GetnCompressedTexImageARB(GLenum, GLint, GLsizei, *GLvoid) -> c_void)
    failing!(fn GetnConvolutionFilterARB(GLenum, GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn GetnHistogramARB(GLenum, GLboolean, GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn GetnMapdvARB(GLenum, GLenum, GLsizei, *GLdouble) -> c_void)
    failing!(fn GetnMapfvARB(GLenum, GLenum, GLsizei, *GLfloat) -> c_void)
    failing!(fn GetnMapivARB(GLenum, GLenum, GLsizei, *GLint) -> c_void)
    failing!(fn GetnMinmaxARB(GLenum, GLboolean, GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn GetnPixelMapfvARB(GLenum, GLsizei, *GLfloat) -> c_void)
    failing!(fn GetnPixelMapuivARB(GLenum, GLsizei, *GLuint) -> c_void)
    failing!(fn GetnPixelMapusvARB(GLenum, GLsizei, *GLushort) -> c_void)
    failing!(fn GetnPolygonStippleARB(GLsizei, *GLubyte) -> c_void)
    failing!(fn GetnSeparableFilterARB(GLenum, GLenum, GLenum, GLsizei, *GLvoid, GLsizei, *GLvoid, *GLvoid) -> c_void)
    failing!(fn GetnTexImageARB(GLenum, GLint, GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn GetnUniformdvARB(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn GetnUniformfvARB(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn GetnUniformfvEXT(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn GetnUniformivARB(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn GetnUniformivEXT(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn GetnUniformuivARB(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn GlobalAlphaFactorbSUN(GLbyte) -> c_void)
    failing!(fn GlobalAlphaFactordSUN(GLdouble) -> c_void)
    failing!(fn GlobalAlphaFactorfSUN(GLfloat) -> c_void)
    failing!(fn GlobalAlphaFactoriSUN(GLint) -> c_void)
    failing!(fn GlobalAlphaFactorsSUN(GLshort) -> c_void)
    failing!(fn GlobalAlphaFactorubSUN(GLubyte) -> c_void)
    failing!(fn GlobalAlphaFactoruiSUN(GLuint) -> c_void)
    failing!(fn GlobalAlphaFactorusSUN(GLushort) -> c_void)
    failing!(fn Hint(GLenum, GLenum) -> c_void)
    failing!(fn HintPGI(GLenum, GLint) -> c_void)
    failing!(fn Histogram(GLenum, GLsizei, GLenum, GLboolean) -> c_void)
    failing!(fn HistogramEXT(GLenum, GLsizei, GLenum, GLboolean) -> c_void)
    failing!(fn IglooInterfaceSGIX(GLenum, *GLvoid) -> c_void)
    failing!(fn ImageTransformParameterfHP(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn ImageTransformParameterfvHP(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn ImageTransformParameteriHP(GLenum, GLenum, GLint) -> c_void)
    failing!(fn ImageTransformParameterivHP(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn ImportSyncEXT(GLenum, GLintptr, GLbitfield) -> GLsync)
    failing!(fn IndexFormatNV(GLenum, GLsizei) -> c_void)
    failing!(fn IndexFuncEXT(GLenum, GLclampf) -> c_void)
    failing!(fn IndexMask(GLuint) -> c_void)
    failing!(fn IndexMaterialEXT(GLenum, GLenum) -> c_void)
    failing!(fn IndexPointer(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn IndexPointerEXT(GLenum, GLsizei, GLsizei, *GLvoid) -> c_void)
    failing!(fn IndexPointerListIBM(GLenum, GLint, **GLvoid, GLint) -> c_void)
    failing!(fn Indexd(GLdouble) -> c_void)
    failing!(fn Indexdv(*GLdouble) -> c_void)
    failing!(fn Indexf(GLfloat) -> c_void)
    failing!(fn Indexfv(*GLfloat) -> c_void)
    failing!(fn Indexi(GLint) -> c_void)
    failing!(fn Indexiv(*GLint) -> c_void)
    failing!(fn Indexs(GLshort) -> c_void)
    failing!(fn Indexsv(*GLshort) -> c_void)
    failing!(fn Indexub(GLubyte) -> c_void)
    failing!(fn Indexubv(*GLubyte) -> c_void)
    failing!(fn IndexxOES(GLfixed) -> c_void)
    failing!(fn IndexxvOES(*GLfixed) -> c_void)
    failing!(fn InitNames() -> c_void)
    failing!(fn InsertComponentEXT(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn InsertEventMarkerEXT(GLsizei, *GLchar) -> c_void)
    failing!(fn InstrumentsBufferSGIX(GLsizei, *GLint) -> c_void)
    failing!(fn InterleavedArrays(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn InterpolatePathsNV(GLuint, GLuint, GLuint, GLfloat) -> c_void)
    failing!(fn InvalidateBufferData(GLuint) -> c_void)
    failing!(fn InvalidateBufferSubData(GLuint, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn InvalidateFramebuffer(GLenum, GLsizei, *GLenum) -> c_void)
    failing!(fn InvalidateSubFramebuffer(GLenum, GLsizei, *GLenum, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn InvalidateTexImage(GLuint, GLint) -> c_void)
    failing!(fn InvalidateTexSubImage(GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) -> c_void)
    failing!(fn IsAsyncMarkerSGIX(GLuint) -> GLboolean)
    failing!(fn IsBuffer(GLuint) -> GLboolean)
    failing!(fn IsBufferARB(GLuint) -> GLboolean)
    failing!(fn IsBufferResidentNV(GLenum) -> GLboolean)
    failing!(fn IsEnabled(GLenum) -> GLboolean)
    failing!(fn IsEnabledIndexedEXT(GLenum, GLuint) -> GLboolean)
    failing!(fn IsEnabledi(GLenum, GLuint) -> GLboolean)
    failing!(fn IsFenceAPPLE(GLuint) -> GLboolean)
    failing!(fn IsFenceNV(GLuint) -> GLboolean)
    failing!(fn IsFramebuffer(GLuint) -> GLboolean)
    failing!(fn IsFramebufferEXT(GLuint) -> GLboolean)
    failing!(fn IsFramebufferOES(GLuint) -> GLboolean)
    failing!(fn IsImageHandleResidentARB(GLuint64) -> GLboolean)
    failing!(fn IsImageHandleResidentNV(GLuint64) -> GLboolean)
    failing!(fn IsList(GLuint) -> GLboolean)
    failing!(fn IsNameAMD(GLenum, GLuint) -> GLboolean)
    failing!(fn IsNamedBufferResidentNV(GLuint) -> GLboolean)
    failing!(fn IsNamedStringARB(GLint, *GLchar) -> GLboolean)
    failing!(fn IsObjectBufferATI(GLuint) -> GLboolean)
    failing!(fn IsOcclusionQueryNV(GLuint) -> GLboolean)
    failing!(fn IsPathNV(GLuint) -> GLboolean)
    failing!(fn IsPointInFillPathNV(GLuint, GLuint, GLfloat, GLfloat) -> GLboolean)
    failing!(fn IsPointInStrokePathNV(GLuint, GLfloat, GLfloat) -> GLboolean)
    failing!(fn IsProgram(GLuint) -> GLboolean)
    failing!(fn IsProgramARB(GLuint) -> GLboolean)
    failing!(fn IsProgramNV(GLuint) -> GLboolean)
    failing!(fn IsProgramPipeline(GLuint) -> GLboolean)
    failing!(fn IsProgramPipelineEXT(GLuint) -> GLboolean)
    failing!(fn IsQuery(GLuint) -> GLboolean)
    failing!(fn IsQueryARB(GLuint) -> GLboolean)
    failing!(fn IsQueryEXT(GLuint) -> GLboolean)
    failing!(fn IsRenderbuffer(GLuint) -> GLboolean)
    failing!(fn IsRenderbufferEXT(GLuint) -> GLboolean)
    failing!(fn IsRenderbufferOES(GLuint) -> GLboolean)
    failing!(fn IsSampler(GLuint) -> GLboolean)
    failing!(fn IsShader(GLuint) -> GLboolean)
    failing!(fn IsSync(GLsync) -> GLboolean)
    failing!(fn IsSyncAPPLE(GLsync) -> GLboolean)
    failing!(fn IsTexture(GLuint) -> GLboolean)
    failing!(fn IsTextureEXT(GLuint) -> GLboolean)
    failing!(fn IsTextureHandleResidentARB(GLuint64) -> GLboolean)
    failing!(fn IsTextureHandleResidentNV(GLuint64) -> GLboolean)
    failing!(fn IsTransformFeedback(GLuint) -> GLboolean)
    failing!(fn IsTransformFeedbackNV(GLuint) -> GLboolean)
    failing!(fn IsVariantEnabledEXT(GLuint, GLenum) -> GLboolean)
    failing!(fn IsVertexArray(GLuint) -> GLboolean)
    failing!(fn IsVertexArrayAPPLE(GLuint) -> GLboolean)
    failing!(fn IsVertexArrayOES(GLuint) -> GLboolean)
    failing!(fn IsVertexAttribEnabledAPPLE(GLuint, GLenum) -> GLboolean)
    failing!(fn LabelObjectEXT(GLenum, GLuint, GLsizei, *GLchar) -> c_void)
    failing!(fn LightEnviSGIX(GLenum, GLint) -> c_void)
    failing!(fn LightModelf(GLenum, GLfloat) -> c_void)
    failing!(fn LightModelfv(GLenum, *GLfloat) -> c_void)
    failing!(fn LightModeli(GLenum, GLint) -> c_void)
    failing!(fn LightModeliv(GLenum, *GLint) -> c_void)
    failing!(fn LightModelx(GLenum, GLfixed) -> c_void)
    failing!(fn LightModelxOES(GLenum, GLfixed) -> c_void)
    failing!(fn LightModelxv(GLenum, *GLfixed) -> c_void)
    failing!(fn LightModelxvOES(GLenum, *GLfixed) -> c_void)
    failing!(fn Lightf(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn Lightfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn Lighti(GLenum, GLenum, GLint) -> c_void)
    failing!(fn Lightiv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn Lightx(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn LightxOES(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn Lightxv(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn LightxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn LineStipple(GLint, GLushort) -> c_void)
    failing!(fn LineWidth(GLfloat) -> c_void)
    failing!(fn LineWidthx(GLfixed) -> c_void)
    failing!(fn LineWidthxOES(GLfixed) -> c_void)
    failing!(fn LinkProgram(GLuint) -> c_void)
    failing!(fn LinkProgramARB(GLhandleARB) -> c_void)
    failing!(fn ListBase(GLuint) -> c_void)
    failing!(fn ListParameterfSGIX(GLuint, GLenum, GLfloat) -> c_void)
    failing!(fn ListParameterfvSGIX(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn ListParameteriSGIX(GLuint, GLenum, GLint) -> c_void)
    failing!(fn ListParameterivSGIX(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn LoadIdentity() -> c_void)
    failing!(fn LoadIdentityDeformationMapSGIX(GLbitfield) -> c_void)
    failing!(fn LoadMatrixd(*GLdouble) -> c_void)
    failing!(fn LoadMatrixf(*GLfloat) -> c_void)
    failing!(fn LoadMatrixx(*GLfixed) -> c_void)
    failing!(fn LoadMatrixxOES(*GLfixed) -> c_void)
    failing!(fn LoadName(GLuint) -> c_void)
    failing!(fn LoadPaletteFromModelViewMatrixOES() -> c_void)
    failing!(fn LoadProgramNV(GLenum, GLuint, GLsizei, *GLubyte) -> c_void)
    failing!(fn LoadTransposeMatrixd(*GLdouble) -> c_void)
    failing!(fn LoadTransposeMatrixdARB(*GLdouble) -> c_void)
    failing!(fn LoadTransposeMatrixf(*GLfloat) -> c_void)
    failing!(fn LoadTransposeMatrixfARB(*GLfloat) -> c_void)
    failing!(fn LoadTransposeMatrixxOES(*GLfixed) -> c_void)
    failing!(fn LockArraysEXT(GLint, GLsizei) -> c_void)
    failing!(fn LogicOp(GLenum) -> c_void)
    failing!(fn MakeBufferNonResidentNV(GLenum) -> c_void)
    failing!(fn MakeBufferResidentNV(GLenum, GLenum) -> c_void)
    failing!(fn MakeImageHandleNonResidentARB(GLuint64) -> c_void)
    failing!(fn MakeImageHandleNonResidentNV(GLuint64) -> c_void)
    failing!(fn MakeImageHandleResidentARB(GLuint64, GLenum) -> c_void)
    failing!(fn MakeImageHandleResidentNV(GLuint64, GLenum) -> c_void)
    failing!(fn MakeNamedBufferNonResidentNV(GLuint) -> c_void)
    failing!(fn MakeNamedBufferResidentNV(GLuint, GLenum) -> c_void)
    failing!(fn MakeTextureHandleNonResidentARB(GLuint64) -> c_void)
    failing!(fn MakeTextureHandleNonResidentNV(GLuint64) -> c_void)
    failing!(fn MakeTextureHandleResidentARB(GLuint64) -> c_void)
    failing!(fn MakeTextureHandleResidentNV(GLuint64) -> c_void)
    failing!(fn Map1d(GLenum, GLdouble, GLdouble, GLint, GLint, *GLdouble) -> c_void)
    failing!(fn Map1f(GLenum, GLfloat, GLfloat, GLint, GLint, *GLfloat) -> c_void)
    failing!(fn Map1xOES(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) -> c_void)
    failing!(fn Map2d(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, *GLdouble) -> c_void)
    failing!(fn Map2f(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, *GLfloat) -> c_void)
    failing!(fn Map2xOES(GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) -> c_void)
    failing!(fn MapBuffer(GLenum, GLenum) -> *c_void)
    failing!(fn MapBufferARB(GLenum, GLenum) -> *c_void)
    failing!(fn MapBufferOES(GLenum, GLenum) -> *c_void)
    failing!(fn MapBufferRange(GLenum, GLintptr, GLsizeiptr, GLbitfield) -> *c_void)
    failing!(fn MapBufferRangeEXT(GLenum, GLintptr, GLsizeiptr, GLbitfield) -> *c_void)
    failing!(fn MapControlPointsNV(GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, *GLvoid) -> c_void)
    failing!(fn MapGrid1d(GLint, GLdouble, GLdouble) -> c_void)
    failing!(fn MapGrid1f(GLint, GLfloat, GLfloat) -> c_void)
    failing!(fn MapGrid1xOES(GLint, GLfixed, GLfixed) -> c_void)
    failing!(fn MapGrid2d(GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble) -> c_void)
    failing!(fn MapGrid2f(GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat) -> c_void)
    failing!(fn MapGrid2xOES(GLint, GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn MapNamedBufferEXT(GLuint, GLenum) -> *c_void)
    failing!(fn MapNamedBufferRangeEXT(GLuint, GLintptr, GLsizeiptr, GLbitfield) -> *c_void)
    failing!(fn MapObjectBufferATI(GLuint) -> *c_void)
    failing!(fn MapParameterfvNV(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn MapParameterivNV(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn MapTexture2DINTEL(GLuint, GLint, GLbitfield, *GLint, *GLenum) -> *c_void)
    failing!(fn MapVertexAttrib1dAPPLE(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, *GLdouble) -> c_void)
    failing!(fn MapVertexAttrib1fAPPLE(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, *GLfloat) -> c_void)
    failing!(fn MapVertexAttrib2dAPPLE(GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, *GLdouble) -> c_void)
    failing!(fn MapVertexAttrib2fAPPLE(GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, *GLfloat) -> c_void)
    failing!(fn Materialf(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn Materialfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn Materiali(GLenum, GLenum, GLint) -> c_void)
    failing!(fn Materialiv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn Materialx(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn MaterialxOES(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn Materialxv(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn MaterialxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn MatrixFrustumEXT(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MatrixIndexPointerARB(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn MatrixIndexPointerOES(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn MatrixIndexubvARB(GLint, *GLubyte) -> c_void)
    failing!(fn MatrixIndexuivARB(GLint, *GLuint) -> c_void)
    failing!(fn MatrixIndexusvARB(GLint, *GLushort) -> c_void)
    failing!(fn MatrixLoadIdentityEXT(GLenum) -> c_void)
    failing!(fn MatrixLoadTransposedEXT(GLenum, *GLdouble) -> c_void)
    failing!(fn MatrixLoadTransposefEXT(GLenum, *GLfloat) -> c_void)
    failing!(fn MatrixLoaddEXT(GLenum, *GLdouble) -> c_void)
    failing!(fn MatrixLoadfEXT(GLenum, *GLfloat) -> c_void)
    failing!(fn MatrixMode(GLenum) -> c_void)
    failing!(fn MatrixMultTransposedEXT(GLenum, *GLdouble) -> c_void)
    failing!(fn MatrixMultTransposefEXT(GLenum, *GLfloat) -> c_void)
    failing!(fn MatrixMultdEXT(GLenum, *GLdouble) -> c_void)
    failing!(fn MatrixMultfEXT(GLenum, *GLfloat) -> c_void)
    failing!(fn MatrixOrthoEXT(GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MatrixPopEXT(GLenum) -> c_void)
    failing!(fn MatrixPushEXT(GLenum) -> c_void)
    failing!(fn MatrixRotatedEXT(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MatrixRotatefEXT(GLenum, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn MatrixScaledEXT(GLenum, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MatrixScalefEXT(GLenum, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn MatrixTranslatedEXT(GLenum, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MatrixTranslatefEXT(GLenum, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn MemoryBarrier(GLbitfield) -> c_void)
    failing!(fn MemoryBarrierEXT(GLbitfield) -> c_void)
    failing!(fn MinSampleShading(GLfloat) -> c_void)
    failing!(fn MinSampleShadingARB(GLfloat) -> c_void)
    failing!(fn Minmax(GLenum, GLenum, GLboolean) -> c_void)
    failing!(fn MinmaxEXT(GLenum, GLenum, GLboolean) -> c_void)
    failing!(fn MultMatrixd(*GLdouble) -> c_void)
    failing!(fn MultMatrixf(*GLfloat) -> c_void)
    failing!(fn MultMatrixx(*GLfixed) -> c_void)
    failing!(fn MultMatrixxOES(*GLfixed) -> c_void)
    failing!(fn MultTransposeMatrixd(*GLdouble) -> c_void)
    failing!(fn MultTransposeMatrixdARB(*GLdouble) -> c_void)
    failing!(fn MultTransposeMatrixf(*GLfloat) -> c_void)
    failing!(fn MultTransposeMatrixfARB(*GLfloat) -> c_void)
    failing!(fn MultTransposeMatrixxOES(*GLfixed) -> c_void)
    failing!(fn MultiDrawArrays(GLenum, *GLint, *GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawArraysEXT(GLenum, *GLint, *GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawArraysIndirect(GLenum, *c_void, GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawArraysIndirectAMD(GLenum, *GLvoid, GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawArraysIndirectBindlessNV(GLenum, *GLvoid, GLsizei, GLsizei, GLint) -> c_void)
    failing!(fn MultiDrawElementsIndirectBindlessNV(GLenum, GLenum, *GLvoid, GLsizei, GLsizei, GLint) -> c_void)
    failing!(fn MultiDrawArraysIndirectCountARB(GLenum, GLintptr, GLintptr, GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawElementArrayAPPLE(GLenum, *GLint, *GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawElements(GLenum, *GLsizei, GLenum, **GLvoid, GLsizei) -> c_void)
    failing!(fn MultiDrawElementsBaseVertex(GLenum, *GLsizei, GLenum, **GLvoid, GLsizei, *GLint) -> c_void)
    failing!(fn MultiDrawElementsEXT(GLenum, *GLsizei, GLenum, **GLvoid, GLsizei) -> c_void)
    failing!(fn MultiDrawElementsIndirect(GLenum, GLenum, *c_void, GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawElementsIndirectAMD(GLenum, GLenum, *GLvoid, GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawElementsIndirectCountARB(GLenum, GLenum, GLintptr, GLintptr, GLsizei, GLsizei) -> c_void)
    failing!(fn MultiDrawRangeElementArrayAPPLE(GLenum, GLuint, GLuint, *GLint, *GLsizei, GLsizei) -> c_void)
    failing!(fn MultiModeDrawArraysIBM(*GLenum, *GLint, *GLsizei, GLsizei, GLint) -> c_void)
    failing!(fn MultiModeDrawElementsIBM(*GLenum, *GLsizei, GLenum, **GLvoid, GLsizei, GLint) -> c_void)
    failing!(fn MultiTexBufferEXT(GLenum, GLenum, GLenum, GLuint) -> c_void)
    failing!(fn MultiTexCoord1bOES(GLenum, GLbyte) -> c_void)
    failing!(fn MultiTexCoord1bvOES(GLenum, *GLbyte) -> c_void)
    failing!(fn MultiTexCoord1d(GLenum, GLdouble) -> c_void)
    failing!(fn MultiTexCoord1dARB(GLenum, GLdouble) -> c_void)
    failing!(fn MultiTexCoord1dv(GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexCoord1dvARB(GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexCoord1f(GLenum, GLfloat) -> c_void)
    failing!(fn MultiTexCoord1fARB(GLenum, GLfloat) -> c_void)
    failing!(fn MultiTexCoord1fv(GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexCoord1fvARB(GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexCoord1hNV(GLenum, GLhalfNV) -> c_void)
    failing!(fn MultiTexCoord1hvNV(GLenum, *GLhalfNV) -> c_void)
    failing!(fn MultiTexCoord1i(GLenum, GLint) -> c_void)
    failing!(fn MultiTexCoord1iARB(GLenum, GLint) -> c_void)
    failing!(fn MultiTexCoord1iv(GLenum, *GLint) -> c_void)
    failing!(fn MultiTexCoord1ivARB(GLenum, *GLint) -> c_void)
    failing!(fn MultiTexCoord1s(GLenum, GLshort) -> c_void)
    failing!(fn MultiTexCoord1sARB(GLenum, GLshort) -> c_void)
    failing!(fn MultiTexCoord1sv(GLenum, *GLshort) -> c_void)
    failing!(fn MultiTexCoord1svARB(GLenum, *GLshort) -> c_void)
    failing!(fn MultiTexCoord1xOES(GLenum, GLfixed) -> c_void)
    failing!(fn MultiTexCoord1xvOES(GLenum, *GLfixed) -> c_void)
    failing!(fn MultiTexCoord2bOES(GLenum, GLbyte, GLbyte) -> c_void)
    failing!(fn MultiTexCoord2bvOES(GLenum, *GLbyte) -> c_void)
    failing!(fn MultiTexCoord2d(GLenum, GLdouble, GLdouble) -> c_void)
    failing!(fn MultiTexCoord2dARB(GLenum, GLdouble, GLdouble) -> c_void)
    failing!(fn MultiTexCoord2dv(GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexCoord2dvARB(GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexCoord2f(GLenum, GLfloat, GLfloat) -> c_void)
    failing!(fn MultiTexCoord2fARB(GLenum, GLfloat, GLfloat) -> c_void)
    failing!(fn MultiTexCoord2fv(GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexCoord2fvARB(GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexCoord2hNV(GLenum, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn MultiTexCoord2hvNV(GLenum, *GLhalfNV) -> c_void)
    failing!(fn MultiTexCoord2i(GLenum, GLint, GLint) -> c_void)
    failing!(fn MultiTexCoord2iARB(GLenum, GLint, GLint) -> c_void)
    failing!(fn MultiTexCoord2iv(GLenum, *GLint) -> c_void)
    failing!(fn MultiTexCoord2ivARB(GLenum, *GLint) -> c_void)
    failing!(fn MultiTexCoord2s(GLenum, GLshort, GLshort) -> c_void)
    failing!(fn MultiTexCoord2sARB(GLenum, GLshort, GLshort) -> c_void)
    failing!(fn MultiTexCoord2sv(GLenum, *GLshort) -> c_void)
    failing!(fn MultiTexCoord2svARB(GLenum, *GLshort) -> c_void)
    failing!(fn MultiTexCoord2xOES(GLenum, GLfixed, GLfixed) -> c_void)
    failing!(fn MultiTexCoord2xvOES(GLenum, *GLfixed) -> c_void)
    failing!(fn MultiTexCoord3bOES(GLenum, GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn MultiTexCoord3bvOES(GLenum, *GLbyte) -> c_void)
    failing!(fn MultiTexCoord3d(GLenum, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MultiTexCoord3dARB(GLenum, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MultiTexCoord3dv(GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexCoord3dvARB(GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexCoord3f(GLenum, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn MultiTexCoord3fARB(GLenum, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn MultiTexCoord3fv(GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexCoord3fvARB(GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexCoord3hNV(GLenum, GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn MultiTexCoord3hvNV(GLenum, *GLhalfNV) -> c_void)
    failing!(fn MultiTexCoord3i(GLenum, GLint, GLint, GLint) -> c_void)
    failing!(fn MultiTexCoord3iARB(GLenum, GLint, GLint, GLint) -> c_void)
    failing!(fn MultiTexCoord3iv(GLenum, *GLint) -> c_void)
    failing!(fn MultiTexCoord3ivARB(GLenum, *GLint) -> c_void)
    failing!(fn MultiTexCoord3s(GLenum, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn MultiTexCoord3sARB(GLenum, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn MultiTexCoord3sv(GLenum, *GLshort) -> c_void)
    failing!(fn MultiTexCoord3svARB(GLenum, *GLshort) -> c_void)
    failing!(fn MultiTexCoord3xOES(GLenum, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn MultiTexCoord3xvOES(GLenum, *GLfixed) -> c_void)
    failing!(fn MultiTexCoord4bOES(GLenum, GLbyte, GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn MultiTexCoord4bvOES(GLenum, *GLbyte) -> c_void)
    failing!(fn MultiTexCoord4d(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MultiTexCoord4dARB(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn MultiTexCoord4dv(GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexCoord4dvARB(GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexCoord4f(GLenum, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn MultiTexCoord4fARB(GLenum, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn MultiTexCoord4fv(GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexCoord4fvARB(GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexCoord4hNV(GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn MultiTexCoord4hvNV(GLenum, *GLhalfNV) -> c_void)
    failing!(fn MultiTexCoord4i(GLenum, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn MultiTexCoord4iARB(GLenum, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn MultiTexCoord4iv(GLenum, *GLint) -> c_void)
    failing!(fn MultiTexCoord4ivARB(GLenum, *GLint) -> c_void)
    failing!(fn MultiTexCoord4s(GLenum, GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn MultiTexCoord4sARB(GLenum, GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn MultiTexCoord4sv(GLenum, *GLshort) -> c_void)
    failing!(fn MultiTexCoord4svARB(GLenum, *GLshort) -> c_void)
    failing!(fn MultiTexCoord4x(GLenum, GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn MultiTexCoord4xOES(GLenum, GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn MultiTexCoord4xvOES(GLenum, *GLfixed) -> c_void)
    failing!(fn MultiTexCoordP1ui(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn MultiTexCoordP1uiv(GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn MultiTexCoordP2ui(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn MultiTexCoordP2uiv(GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn MultiTexCoordP3ui(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn MultiTexCoordP3uiv(GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn MultiTexCoordP4ui(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn MultiTexCoordP4uiv(GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn MultiTexCoordPointerEXT(GLenum, GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn MultiTexEnvfEXT(GLenum, GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn MultiTexEnvfvEXT(GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexEnviEXT(GLenum, GLenum, GLenum, GLint) -> c_void)
    failing!(fn MultiTexEnvivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn MultiTexGendEXT(GLenum, GLenum, GLenum, GLdouble) -> c_void)
    failing!(fn MultiTexGendvEXT(GLenum, GLenum, GLenum, *GLdouble) -> c_void)
    failing!(fn MultiTexGenfEXT(GLenum, GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn MultiTexGenfvEXT(GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexGeniEXT(GLenum, GLenum, GLenum, GLint) -> c_void)
    failing!(fn MultiTexGenivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn MultiTexImage1DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn MultiTexImage2DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn MultiTexImage3DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn MultiTexParameterIivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn MultiTexParameterIuivEXT(GLenum, GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn MultiTexParameterfEXT(GLenum, GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn MultiTexParameterfvEXT(GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn MultiTexParameteriEXT(GLenum, GLenum, GLenum, GLint) -> c_void)
    failing!(fn MultiTexParameterivEXT(GLenum, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn MultiTexRenderbufferEXT(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn MultiTexSubImage1DEXT(GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn MultiTexSubImage2DEXT(GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn MultiTexSubImage3DEXT(GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn NamedBufferDataEXT(GLuint, GLsizeiptr, *GLvoid, GLenum) -> c_void)
    failing!(fn NamedBufferStorageEXT(GLuint, GLsizeiptr, *c_void, GLbitfield) -> c_void)
    failing!(fn NamedBufferSubDataEXT(GLuint, GLintptr, GLsizeiptr, *GLvoid) -> c_void)
    failing!(fn NamedCopyBufferSubDataEXT(GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn NamedFramebufferParameteriEXT(GLuint, GLenum, GLint) -> c_void)
    failing!(fn NamedFramebufferRenderbufferEXT(GLuint, GLenum, GLenum, GLuint) -> c_void)
    failing!(fn NamedFramebufferTexture1DEXT(GLuint, GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn NamedFramebufferTexture2DEXT(GLuint, GLenum, GLenum, GLuint, GLint) -> c_void)
    failing!(fn NamedFramebufferTexture3DEXT(GLuint, GLenum, GLenum, GLuint, GLint, GLint) -> c_void)
    failing!(fn NamedFramebufferTextureEXT(GLuint, GLenum, GLuint, GLint) -> c_void)
    failing!(fn NamedFramebufferTextureFaceEXT(GLuint, GLenum, GLuint, GLint, GLenum) -> c_void)
    failing!(fn NamedFramebufferTextureLayerEXT(GLuint, GLenum, GLuint, GLint, GLint) -> c_void)
    failing!(fn NamedProgramLocalParameter4dEXT(GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn NamedProgramLocalParameter4dvEXT(GLuint, GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn NamedProgramLocalParameter4fEXT(GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn NamedProgramLocalParameter4fvEXT(GLuint, GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn NamedProgramLocalParameterI4iEXT(GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn NamedProgramLocalParameterI4ivEXT(GLuint, GLenum, GLuint, *GLint) -> c_void)
    failing!(fn NamedProgramLocalParameterI4uiEXT(GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn NamedProgramLocalParameterI4uivEXT(GLuint, GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn NamedProgramLocalParameters4fvEXT(GLuint, GLenum, GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn NamedProgramLocalParametersI4ivEXT(GLuint, GLenum, GLuint, GLsizei, *GLint) -> c_void)
    failing!(fn NamedProgramLocalParametersI4uivEXT(GLuint, GLenum, GLuint, GLsizei, *GLuint) -> c_void)
    failing!(fn NamedProgramStringEXT(GLuint, GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn NamedRenderbufferStorageEXT(GLuint, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn NamedRenderbufferStorageMultisampleCoverageEXT(GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn NamedRenderbufferStorageMultisampleEXT(GLuint, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn NamedStringARB(GLenum, GLint, *GLchar, GLint, *GLchar) -> c_void)
    failing!(fn NewList(GLuint, GLenum) -> c_void)
    failing!(fn NewObjectBufferATI(GLsizei, *GLvoid, GLenum) -> GLuint)
    failing!(fn Normal3b(GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn Normal3bv(*GLbyte) -> c_void)
    failing!(fn Normal3d(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Normal3dv(*GLdouble) -> c_void)
    failing!(fn Normal3f(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Normal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Normal3fVertex3fvSUN(*GLfloat, *GLfloat) -> c_void)
    failing!(fn Normal3fv(*GLfloat) -> c_void)
    failing!(fn Normal3hNV(GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn Normal3hvNV(*GLhalfNV) -> c_void)
    failing!(fn Normal3i(GLint, GLint, GLint) -> c_void)
    failing!(fn Normal3iv(*GLint) -> c_void)
    failing!(fn Normal3s(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn Normal3sv(*GLshort) -> c_void)
    failing!(fn Normal3x(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn Normal3xOES(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn Normal3xvOES(*GLfixed) -> c_void)
    failing!(fn NormalFormatNV(GLenum, GLsizei) -> c_void)
    failing!(fn NormalP3ui(GLenum, GLuint) -> c_void)
    failing!(fn NormalP3uiv(GLenum, *GLuint) -> c_void)
    failing!(fn NormalPointer(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn NormalPointerEXT(GLenum, GLsizei, GLsizei, *GLvoid) -> c_void)
    failing!(fn NormalPointerListIBM(GLenum, GLint, **GLvoid, GLint) -> c_void)
    failing!(fn NormalPointervINTEL(GLenum, **GLvoid) -> c_void)
    failing!(fn NormalStream3bATI(GLenum, GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn NormalStream3bvATI(GLenum, *GLbyte) -> c_void)
    failing!(fn NormalStream3dATI(GLenum, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn NormalStream3dvATI(GLenum, *GLdouble) -> c_void)
    failing!(fn NormalStream3fATI(GLenum, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn NormalStream3fvATI(GLenum, *GLfloat) -> c_void)
    failing!(fn NormalStream3iATI(GLenum, GLint, GLint, GLint) -> c_void)
    failing!(fn NormalStream3ivATI(GLenum, *GLint) -> c_void)
    failing!(fn NormalStream3sATI(GLenum, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn NormalStream3svATI(GLenum, *GLshort) -> c_void)
    failing!(fn ObjectLabel(GLenum, GLuint, GLsizei, *GLchar) -> c_void)
    failing!(fn ObjectLabelKHR(GLenum, GLuint, GLsizei, *GLchar) -> c_void)
    failing!(fn ObjectPtrLabel(*c_void, GLsizei, *GLchar) -> c_void)
    failing!(fn ObjectPtrLabelKHR(*c_void, GLsizei, *GLchar) -> c_void)
    failing!(fn ObjectPurgeableAPPLE(GLenum, GLuint, GLenum) -> GLenum)
    failing!(fn ObjectUnpurgeableAPPLE(GLenum, GLuint, GLenum) -> GLenum)
    failing!(fn Ortho(GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Orthof(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn OrthofOES(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Orthox(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn OrthoxOES(GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn PNTrianglesfATI(GLenum, GLfloat) -> c_void)
    failing!(fn PNTrianglesiATI(GLenum, GLint) -> c_void)
    failing!(fn PassTexCoordATI(GLuint, GLuint, GLenum) -> c_void)
    failing!(fn PassThrough(GLfloat) -> c_void)
    failing!(fn PassThroughxOES(GLfixed) -> c_void)
    failing!(fn PatchParameterfv(GLenum, *GLfloat) -> c_void)
    failing!(fn PatchParameteri(GLenum, GLint) -> c_void)
    failing!(fn PathColorGenNV(GLenum, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn PathCommandsNV(GLuint, GLsizei, *GLubyte, GLsizei, GLenum, *GLvoid) -> c_void)
    failing!(fn PathCoordsNV(GLuint, GLsizei, GLenum, *GLvoid) -> c_void)
    failing!(fn PathCoverDepthFuncNV(GLenum) -> c_void)
    failing!(fn PathDashArrayNV(GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn PathFogGenNV(GLenum) -> c_void)
    failing!(fn PathGlyphRangeNV(GLuint, GLenum, *GLvoid, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) -> c_void)
    failing!(fn PathGlyphsNV(GLuint, GLenum, *GLvoid, GLbitfield, GLsizei, GLenum, *GLvoid, GLenum, GLuint, GLfloat) -> c_void)
    failing!(fn PathParameterfNV(GLuint, GLenum, GLfloat) -> c_void)
    failing!(fn PathParameterfvNV(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn PathParameteriNV(GLuint, GLenum, GLint) -> c_void)
    failing!(fn PathParameterivNV(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn PathStencilDepthOffsetNV(GLfloat, GLfloat) -> c_void)
    failing!(fn PathStencilFuncNV(GLenum, GLint, GLuint) -> c_void)
    failing!(fn PathStringNV(GLuint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn PathSubCommandsNV(GLuint, GLsizei, GLsizei, GLsizei, *GLubyte, GLsizei, GLenum, *GLvoid) -> c_void)
    failing!(fn PathSubCoordsNV(GLuint, GLsizei, GLsizei, GLenum, *GLvoid) -> c_void)
    failing!(fn PathTexGenNV(GLenum, GLenum, GLint, *GLfloat) -> c_void)
    failing!(fn PauseTransformFeedback() -> c_void)
    failing!(fn PauseTransformFeedbackNV() -> c_void)
    failing!(fn PixelDataRangeNV(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn PixelMapfv(GLenum, GLsizei, *GLfloat) -> c_void)
    failing!(fn PixelMapuiv(GLenum, GLsizei, *GLuint) -> c_void)
    failing!(fn PixelMapusv(GLenum, GLsizei, *GLushort) -> c_void)
    failing!(fn PixelMapx(GLenum, GLint, *GLfixed) -> c_void)
    failing!(fn PixelStoref(GLenum, GLfloat) -> c_void)
    failing!(fn PixelStorei(GLenum, GLint) -> c_void)
    failing!(fn PixelStorex(GLenum, GLfixed) -> c_void)
    failing!(fn PixelTexGenParameterfSGIS(GLenum, GLfloat) -> c_void)
    failing!(fn PixelTexGenParameterfvSGIS(GLenum, *GLfloat) -> c_void)
    failing!(fn PixelTexGenParameteriSGIS(GLenum, GLint) -> c_void)
    failing!(fn PixelTexGenParameterivSGIS(GLenum, *GLint) -> c_void)
    failing!(fn PixelTexGenSGIX(GLenum) -> c_void)
    failing!(fn PixelTransferf(GLenum, GLfloat) -> c_void)
    failing!(fn PixelTransferi(GLenum, GLint) -> c_void)
    failing!(fn PixelTransferxOES(GLenum, GLfixed) -> c_void)
    failing!(fn PixelTransformParameterfEXT(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn PixelTransformParameterfvEXT(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn PixelTransformParameteriEXT(GLenum, GLenum, GLint) -> c_void)
    failing!(fn PixelTransformParameterivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn PixelZoom(GLfloat, GLfloat) -> c_void)
    failing!(fn PixelZoomxOES(GLfixed, GLfixed) -> c_void)
    failing!(fn PointAlongPathNV(GLuint, GLsizei, GLsizei, GLfloat, *GLfloat, *GLfloat, *GLfloat, *GLfloat) -> GLboolean)
    failing!(fn PointParameterf(GLenum, GLfloat) -> c_void)
    failing!(fn PointParameterfARB(GLenum, GLfloat) -> c_void)
    failing!(fn PointParameterfEXT(GLenum, GLfloat) -> c_void)
    failing!(fn PointParameterfSGIS(GLenum, GLfloat) -> c_void)
    failing!(fn PointParameterfv(GLenum, *GLfloat) -> c_void)
    failing!(fn PointParameterfvARB(GLenum, *GLfloat) -> c_void)
    failing!(fn PointParameterfvEXT(GLenum, *GLfloat) -> c_void)
    failing!(fn PointParameterfvSGIS(GLenum, *GLfloat) -> c_void)
    failing!(fn PointParameteri(GLenum, GLint) -> c_void)
    failing!(fn PointParameteriNV(GLenum, GLint) -> c_void)
    failing!(fn PointParameteriv(GLenum, *GLint) -> c_void)
    failing!(fn PointParameterivNV(GLenum, *GLint) -> c_void)
    failing!(fn PointParameterx(GLenum, GLfixed) -> c_void)
    failing!(fn PointParameterxOES(GLenum, GLfixed) -> c_void)
    failing!(fn PointParameterxv(GLenum, *GLfixed) -> c_void)
    failing!(fn PointParameterxvOES(GLenum, *GLfixed) -> c_void)
    failing!(fn PointSize(GLfloat) -> c_void)
    failing!(fn PointSizePointerOES(GLenum, GLsizei, *c_void) -> c_void)
    failing!(fn PointSizex(GLfixed) -> c_void)
    failing!(fn PointSizexOES(GLfixed) -> c_void)
    failing!(fn PollAsyncSGIX(*GLuint) -> GLint)
    failing!(fn PollInstrumentsSGIX(*GLint) -> GLint)
    failing!(fn PolygonMode(GLenum, GLenum) -> c_void)
    failing!(fn PolygonOffset(GLfloat, GLfloat) -> c_void)
    failing!(fn PolygonOffsetEXT(GLfloat, GLfloat) -> c_void)
    failing!(fn PolygonOffsetx(GLfixed, GLfixed) -> c_void)
    failing!(fn PolygonOffsetxOES(GLfixed, GLfixed) -> c_void)
    failing!(fn PolygonStipple(*GLubyte) -> c_void)
    failing!(fn PopAttrib() -> c_void)
    failing!(fn PopClientAttrib() -> c_void)
    failing!(fn PopDebugGroup() -> c_void)
    failing!(fn PopDebugGroupKHR() -> c_void)
    failing!(fn PopGroupMarkerEXT() -> c_void)
    failing!(fn PopMatrix() -> c_void)
    failing!(fn PopName() -> c_void)
    failing!(fn PresentFrameDualFillNV(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) -> c_void)
    failing!(fn PresentFrameKeyedNV(GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) -> c_void)
    failing!(fn PrimitiveRestartIndex(GLuint) -> c_void)
    failing!(fn PrimitiveRestartIndexNV(GLuint) -> c_void)
    failing!(fn PrimitiveRestartNV() -> c_void)
    failing!(fn PrioritizeTextures(GLsizei, *GLuint, *GLfloat) -> c_void)
    failing!(fn PrioritizeTexturesEXT(GLsizei, *GLuint, *GLclampf) -> c_void)
    failing!(fn PrioritizeTexturesxOES(GLsizei, *GLuint, *GLfixed) -> c_void)
    failing!(fn ProgramBinary(GLuint, GLenum, *GLvoid, GLsizei) -> c_void)
    failing!(fn ProgramBinaryOES(GLuint, GLenum, *GLvoid, GLint) -> c_void)
    failing!(fn ProgramBufferParametersIivNV(GLenum, GLuint, GLuint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramBufferParametersIuivNV(GLenum, GLuint, GLuint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramBufferParametersfvNV(GLenum, GLuint, GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramEnvParameter4dARB(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramEnvParameter4dvARB(GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn ProgramEnvParameter4fARB(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramEnvParameter4fvARB(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn ProgramEnvParameterI4iNV(GLenum, GLuint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn ProgramEnvParameterI4ivNV(GLenum, GLuint, *GLint) -> c_void)
    failing!(fn ProgramEnvParameterI4uiNV(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ProgramEnvParameterI4uivNV(GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn ProgramEnvParameters4fvEXT(GLenum, GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramEnvParametersI4ivNV(GLenum, GLuint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramEnvParametersI4uivNV(GLenum, GLuint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramLocalParameter4dARB(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramLocalParameter4dvARB(GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn ProgramLocalParameter4fARB(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramLocalParameter4fvARB(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn ProgramLocalParameterI4iNV(GLenum, GLuint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn ProgramLocalParameterI4ivNV(GLenum, GLuint, *GLint) -> c_void)
    failing!(fn ProgramLocalParameterI4uiNV(GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ProgramLocalParameterI4uivNV(GLenum, GLuint, *GLuint) -> c_void)
    failing!(fn ProgramLocalParameters4fvEXT(GLenum, GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramLocalParametersI4ivNV(GLenum, GLuint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramLocalParametersI4uivNV(GLenum, GLuint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramNamedParameter4dNV(GLuint, GLsizei, *GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramNamedParameter4dvNV(GLuint, GLsizei, *GLubyte, *GLdouble) -> c_void)
    failing!(fn ProgramNamedParameter4fNV(GLuint, GLsizei, *GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramNamedParameter4fvNV(GLuint, GLsizei, *GLubyte, *GLfloat) -> c_void)
    failing!(fn ProgramParameter4dNV(GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramParameter4dvNV(GLenum, GLuint, *GLdouble) -> c_void)
    failing!(fn ProgramParameter4fNV(GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramParameter4fvNV(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn ProgramParameteri(GLuint, GLenum, GLint) -> c_void)
    failing!(fn ProgramParameteriARB(GLuint, GLenum, GLint) -> c_void)
    failing!(fn ProgramParameteriEXT(GLuint, GLenum, GLint) -> c_void)
    failing!(fn ProgramParameters4dvNV(GLenum, GLuint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramParameters4fvNV(GLenum, GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramStringARB(GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn ProgramSubroutineParametersuivNV(GLenum, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniform1d(GLuint, GLint, GLdouble) -> c_void)
    failing!(fn ProgramUniform1dEXT(GLuint, GLint, GLdouble) -> c_void)
    failing!(fn ProgramUniform1dv(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramUniform1dvEXT(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramUniform1f(GLuint, GLint, GLfloat) -> c_void)
    failing!(fn ProgramUniform1fEXT(GLuint, GLint, GLfloat) -> c_void)
    failing!(fn ProgramUniform1fv(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramUniform1fvEXT(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramUniform1i(GLuint, GLint, GLint) -> c_void)
    failing!(fn ProgramUniform1i64NV(GLuint, GLint, GLint64EXT) -> c_void)
    failing!(fn ProgramUniform1i64vNV(GLuint, GLint, GLsizei, *GLint64EXT) -> c_void)
    failing!(fn ProgramUniform1iEXT(GLuint, GLint, GLint) -> c_void)
    failing!(fn ProgramUniform1iv(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramUniform1ivEXT(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramUniform1ui(GLuint, GLint, GLuint) -> c_void)
    failing!(fn ProgramUniform1ui64NV(GLuint, GLint, GLuint64EXT) -> c_void)
    failing!(fn ProgramUniform1ui64vNV(GLuint, GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn ProgramUniform1uiEXT(GLuint, GLint, GLuint) -> c_void)
    failing!(fn ProgramUniform1uiv(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniform1uivEXT(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniform2d(GLuint, GLint, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramUniform2dEXT(GLuint, GLint, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramUniform2dv(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramUniform2dvEXT(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramUniform2f(GLuint, GLint, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramUniform2fEXT(GLuint, GLint, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramUniform2fv(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramUniform2fvEXT(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramUniform2i(GLuint, GLint, GLint, GLint) -> c_void)
    failing!(fn ProgramUniform2i64NV(GLuint, GLint, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn ProgramUniform2i64vNV(GLuint, GLint, GLsizei, *GLint64EXT) -> c_void)
    failing!(fn ProgramUniform2iEXT(GLuint, GLint, GLint, GLint) -> c_void)
    failing!(fn ProgramUniform2iv(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramUniform2ivEXT(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramUniform2ui(GLuint, GLint, GLuint, GLuint) -> c_void)
    failing!(fn ProgramUniform2ui64NV(GLuint, GLint, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn ProgramUniform2ui64vNV(GLuint, GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn ProgramUniform2uiEXT(GLuint, GLint, GLuint, GLuint) -> c_void)
    failing!(fn ProgramUniform2uiv(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniform2uivEXT(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniform3d(GLuint, GLint, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramUniform3dEXT(GLuint, GLint, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramUniform3dv(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramUniform3dvEXT(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramUniform3f(GLuint, GLint, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramUniform3fEXT(GLuint, GLint, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramUniform3fv(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramUniform3fvEXT(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramUniform3i(GLuint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn ProgramUniform3i64NV(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn ProgramUniform3i64vNV(GLuint, GLint, GLsizei, *GLint64EXT) -> c_void)
    failing!(fn ProgramUniform3iEXT(GLuint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn ProgramUniform3iv(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramUniform3ivEXT(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramUniform3ui(GLuint, GLint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ProgramUniform3ui64NV(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn ProgramUniform3ui64vNV(GLuint, GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn ProgramUniform3uiEXT(GLuint, GLint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ProgramUniform3uiv(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniform3uivEXT(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniform4d(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramUniform4dEXT(GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn ProgramUniform4dv(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramUniform4dvEXT(GLuint, GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn ProgramUniform4f(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramUniform4fEXT(GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ProgramUniform4fv(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramUniform4fvEXT(GLuint, GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ProgramUniform4i(GLuint, GLint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn ProgramUniform4i64NV(GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn ProgramUniform4i64vNV(GLuint, GLint, GLsizei, *GLint64EXT) -> c_void)
    failing!(fn ProgramUniform4iEXT(GLuint, GLint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn ProgramUniform4iv(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramUniform4ivEXT(GLuint, GLint, GLsizei, *GLint) -> c_void)
    failing!(fn ProgramUniform4ui(GLuint, GLint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ProgramUniform4ui64NV(GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn ProgramUniform4ui64vNV(GLuint, GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn ProgramUniform4uiEXT(GLuint, GLint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ProgramUniform4uiv(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniform4uivEXT(GLuint, GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn ProgramUniformHandleui64ARB(GLuint, GLint, GLuint64) -> c_void)
    failing!(fn ProgramUniformHandleui64NV(GLuint, GLint, GLuint64) -> c_void)
    failing!(fn ProgramUniformHandleui64vARB(GLuint, GLint, GLsizei, *GLuint64) -> c_void)
    failing!(fn ProgramUniformHandleui64vNV(GLuint, GLint, GLsizei, *GLuint64) -> c_void)
    failing!(fn ProgramUniformMatrix2dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix2dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix2fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix2fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix2x3dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix2x3dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix2x3fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix2x3fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix2x4dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix2x4dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix2x4fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix2x4fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix3dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix3dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix3fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix3fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix3x2dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix3x2dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix3x2fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix3x2fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix3x4dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix3x4dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix3x4fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix3x4fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix4dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix4dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix4fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix4fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix4x2dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix4x2dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix4x2fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix4x2fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix4x3dv(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix4x3dvEXT(GLuint, GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn ProgramUniformMatrix4x3fv(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformMatrix4x3fvEXT(GLuint, GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn ProgramUniformui64NV(GLuint, GLint, GLuint64EXT) -> c_void)
    failing!(fn ProgramUniformui64vNV(GLuint, GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn ProgramVertexLimitNV(GLenum, GLint) -> c_void)
    failing!(fn ProvokingVertex(GLenum) -> c_void)
    failing!(fn ProvokingVertexEXT(GLenum) -> c_void)
    failing!(fn PushAttrib(GLbitfield) -> c_void)
    failing!(fn PushClientAttrib(GLbitfield) -> c_void)
    failing!(fn PushClientAttribDefaultEXT(GLbitfield) -> c_void)
    failing!(fn PushDebugGroup(GLenum, GLuint, GLsizei, *GLchar) -> c_void)
    failing!(fn PushDebugGroupKHR(GLenum, GLuint, GLsizei, *GLchar) -> c_void)
    failing!(fn PushGroupMarkerEXT(GLsizei, *GLchar) -> c_void)
    failing!(fn PushMatrix() -> c_void)
    failing!(fn PushName(GLuint) -> c_void)
    failing!(fn QueryCounter(GLuint, GLenum) -> c_void)
    failing!(fn QueryCounterEXT(GLuint, GLenum) -> c_void)
    failing!(fn QueryMatrixxOES(*GLfixed, *GLint) -> GLbitfield)
    failing!(fn RasterPos2d(GLdouble, GLdouble) -> c_void)
    failing!(fn RasterPos2dv(*GLdouble) -> c_void)
    failing!(fn RasterPos2f(GLfloat, GLfloat) -> c_void)
    failing!(fn RasterPos2fv(*GLfloat) -> c_void)
    failing!(fn RasterPos2i(GLint, GLint) -> c_void)
    failing!(fn RasterPos2iv(*GLint) -> c_void)
    failing!(fn RasterPos2s(GLshort, GLshort) -> c_void)
    failing!(fn RasterPos2sv(*GLshort) -> c_void)
    failing!(fn RasterPos2xOES(GLfixed, GLfixed) -> c_void)
    failing!(fn RasterPos2xvOES(*GLfixed) -> c_void)
    failing!(fn RasterPos3d(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn RasterPos3dv(*GLdouble) -> c_void)
    failing!(fn RasterPos3f(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn RasterPos3fv(*GLfloat) -> c_void)
    failing!(fn RasterPos3i(GLint, GLint, GLint) -> c_void)
    failing!(fn RasterPos3iv(*GLint) -> c_void)
    failing!(fn RasterPos3s(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn RasterPos3sv(*GLshort) -> c_void)
    failing!(fn RasterPos3xOES(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn RasterPos3xvOES(*GLfixed) -> c_void)
    failing!(fn RasterPos4d(GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn RasterPos4dv(*GLdouble) -> c_void)
    failing!(fn RasterPos4f(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn RasterPos4fv(*GLfloat) -> c_void)
    failing!(fn RasterPos4i(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn RasterPos4iv(*GLint) -> c_void)
    failing!(fn RasterPos4s(GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn RasterPos4sv(*GLshort) -> c_void)
    failing!(fn RasterPos4xOES(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn RasterPos4xvOES(*GLfixed) -> c_void)
    failing!(fn ReadBuffer(GLenum) -> c_void)
    failing!(fn ReadBufferIndexedEXT(GLenum, GLint) -> c_void)
    failing!(fn ReadBufferNV(GLenum) -> c_void)
    failing!(fn ReadInstrumentsSGIX(GLint) -> c_void)
    failing!(fn ReadPixels(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn ReadnPixelsARB(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn ReadnPixelsEXT(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn Rectd(GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Rectdv(*GLdouble, *GLdouble) -> c_void)
    failing!(fn Rectf(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Rectfv(*GLfloat, *GLfloat) -> c_void)
    failing!(fn Recti(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn Rectiv(*GLint, *GLint) -> c_void)
    failing!(fn Rects(GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn Rectsv(*GLshort, *GLshort) -> c_void)
    failing!(fn RectxOES(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn RectxvOES(*GLfixed, *GLfixed) -> c_void)
    failing!(fn ReferencePlaneSGIX(*GLdouble) -> c_void)
    failing!(fn ReleaseShaderCompiler() -> c_void)
    failing!(fn RenderMode(GLenum) -> GLint)
    failing!(fn RenderbufferStorage(GLenum, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageEXT(GLenum, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageMultisample(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageMultisampleANGLE(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageMultisampleAPPLE(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageMultisampleCoverageNV(GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageMultisampleEXT(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageMultisampleIMG(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageMultisampleNV(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn RenderbufferStorageOES(GLenum, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn ReplacementCodePointerSUN(GLenum, GLsizei, **GLvoid) -> c_void)
    failing!(fn ReplacementCodeubSUN(GLubyte) -> c_void)
    failing!(fn ReplacementCodeubvSUN(*GLubyte) -> c_void)
    failing!(fn ReplacementCodeuiColor3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiColor3fVertex3fvSUN(*GLuint, *GLfloat, *GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiColor4fNormal3fVertex3fvSUN(*GLuint, *GLfloat, *GLfloat, *GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiColor4ubVertex3fSUN(GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiColor4ubVertex3fvSUN(*GLuint, *GLubyte, *GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiNormal3fVertex3fvSUN(*GLuint, *GLfloat, *GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiSUN(GLuint) -> c_void)
    failing!(fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(*GLuint, *GLfloat, *GLfloat, *GLfloat, *GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(*GLuint, *GLfloat, *GLfloat, *GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiTexCoord2fVertex3fvSUN(*GLuint, *GLfloat, *GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiVertex3fSUN(GLuint, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ReplacementCodeuiVertex3fvSUN(*GLuint, *GLfloat) -> c_void)
    failing!(fn ReplacementCodeuivSUN(*GLuint) -> c_void)
    failing!(fn ReplacementCodeusSUN(GLushort) -> c_void)
    failing!(fn ReplacementCodeusvSUN(*GLushort) -> c_void)
    failing!(fn RequestResidentProgramsNV(GLsizei, *GLuint) -> c_void)
    failing!(fn ResetHistogram(GLenum) -> c_void)
    failing!(fn ResetHistogramEXT(GLenum) -> c_void)
    failing!(fn ResetMinmax(GLenum) -> c_void)
    failing!(fn ResetMinmaxEXT(GLenum) -> c_void)
    failing!(fn ResizeBuffersMESA() -> c_void)
    failing!(fn ResolveMultisampleFramebufferAPPLE() -> c_void)
    failing!(fn ResumeTransformFeedback() -> c_void)
    failing!(fn ResumeTransformFeedbackNV() -> c_void)
    failing!(fn Rotated(GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Rotatef(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Rotatex(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn RotatexOES(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn SampleCoverage(GLfloat, GLboolean) -> c_void)
    failing!(fn SampleCoverageARB(GLfloat, GLboolean) -> c_void)
    failing!(fn SampleCoverageOES(GLfixed, GLboolean) -> c_void)
    failing!(fn SampleCoveragex(GLclampx, GLboolean) -> c_void)
    failing!(fn SampleCoveragexOES(GLclampx, GLboolean) -> c_void)
    failing!(fn SampleMapATI(GLuint, GLuint, GLenum) -> c_void)
    failing!(fn SampleMaskEXT(GLclampf, GLboolean) -> c_void)
    failing!(fn SampleMaskIndexedNV(GLuint, GLbitfield) -> c_void)
    failing!(fn SampleMaskSGIS(GLclampf, GLboolean) -> c_void)
    failing!(fn SampleMaski(GLuint, GLbitfield) -> c_void)
    failing!(fn SamplePatternEXT(GLenum) -> c_void)
    failing!(fn SamplePatternSGIS(GLenum) -> c_void)
    failing!(fn SamplerParameterIiv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn SamplerParameterIuiv(GLuint, GLenum, *GLuint) -> c_void)
    failing!(fn SamplerParameterf(GLuint, GLenum, GLfloat) -> c_void)
    failing!(fn SamplerParameterfv(GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn SamplerParameteri(GLuint, GLenum, GLint) -> c_void)
    failing!(fn SamplerParameteriv(GLuint, GLenum, *GLint) -> c_void)
    failing!(fn Scaled(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Scalef(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Scalex(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn ScalexOES(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn Scissor(GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn ScissorArrayv(GLuint, GLsizei, *GLint) -> c_void)
    failing!(fn ScissorIndexed(GLuint, GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn ScissorIndexedv(GLuint, *GLint) -> c_void)
    failing!(fn SecondaryColor3b(GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn SecondaryColor3bEXT(GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn SecondaryColor3bv(*GLbyte) -> c_void)
    failing!(fn SecondaryColor3bvEXT(*GLbyte) -> c_void)
    failing!(fn SecondaryColor3d(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn SecondaryColor3dEXT(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn SecondaryColor3dv(*GLdouble) -> c_void)
    failing!(fn SecondaryColor3dvEXT(*GLdouble) -> c_void)
    failing!(fn SecondaryColor3f(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn SecondaryColor3fEXT(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn SecondaryColor3fv(*GLfloat) -> c_void)
    failing!(fn SecondaryColor3fvEXT(*GLfloat) -> c_void)
    failing!(fn SecondaryColor3hNV(GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn SecondaryColor3hvNV(*GLhalfNV) -> c_void)
    failing!(fn SecondaryColor3i(GLint, GLint, GLint) -> c_void)
    failing!(fn SecondaryColor3iEXT(GLint, GLint, GLint) -> c_void)
    failing!(fn SecondaryColor3iv(*GLint) -> c_void)
    failing!(fn SecondaryColor3ivEXT(*GLint) -> c_void)
    failing!(fn SecondaryColor3s(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn SecondaryColor3sEXT(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn SecondaryColor3sv(*GLshort) -> c_void)
    failing!(fn SecondaryColor3svEXT(*GLshort) -> c_void)
    failing!(fn SecondaryColor3ub(GLubyte, GLubyte, GLubyte) -> c_void)
    failing!(fn SecondaryColor3ubEXT(GLubyte, GLubyte, GLubyte) -> c_void)
    failing!(fn SecondaryColor3ubv(*GLubyte) -> c_void)
    failing!(fn SecondaryColor3ubvEXT(*GLubyte) -> c_void)
    failing!(fn SecondaryColor3ui(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn SecondaryColor3uiEXT(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn SecondaryColor3uiv(*GLuint) -> c_void)
    failing!(fn SecondaryColor3uivEXT(*GLuint) -> c_void)
    failing!(fn SecondaryColor3us(GLushort, GLushort, GLushort) -> c_void)
    failing!(fn SecondaryColor3usEXT(GLushort, GLushort, GLushort) -> c_void)
    failing!(fn SecondaryColor3usv(*GLushort) -> c_void)
    failing!(fn SecondaryColor3usvEXT(*GLushort) -> c_void)
    failing!(fn SecondaryColorFormatNV(GLint, GLenum, GLsizei) -> c_void)
    failing!(fn SecondaryColorP3ui(GLenum, GLuint) -> c_void)
    failing!(fn SecondaryColorP3uiv(GLenum, *GLuint) -> c_void)
    failing!(fn SecondaryColorPointer(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn SecondaryColorPointerEXT(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn SecondaryColorPointerListIBM(GLint, GLenum, GLint, **GLvoid, GLint) -> c_void)
    failing!(fn SelectBuffer(GLsizei, *GLuint) -> c_void)
    failing!(fn SelectPerfMonitorCountersAMD(GLuint, GLboolean, GLuint, GLint, *GLuint) -> c_void)
    failing!(fn SeparableFilter2D(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, *GLvoid, *GLvoid) -> c_void)
    failing!(fn SeparableFilter2DEXT(GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, *GLvoid, *GLvoid) -> c_void)
    failing!(fn SetFenceAPPLE(GLuint) -> c_void)
    failing!(fn SetFenceNV(GLuint, GLenum) -> c_void)
    failing!(fn SetFragmentShaderConstantATI(GLuint, *GLfloat) -> c_void)
    failing!(fn SetInvariantEXT(GLuint, GLenum, *GLvoid) -> c_void)
    failing!(fn SetLocalConstantEXT(GLuint, GLenum, *GLvoid) -> c_void)
    failing!(fn SetMultisamplefvAMD(GLenum, GLuint, *GLfloat) -> c_void)
    failing!(fn ShadeModel(GLenum) -> c_void)
    failing!(fn ShaderBinary(GLsizei, *GLuint, GLenum, *GLvoid, GLsizei) -> c_void)
    failing!(fn ShaderOp1EXT(GLenum, GLuint, GLuint) -> c_void)
    failing!(fn ShaderOp2EXT(GLenum, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ShaderOp3EXT(GLenum, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn ShaderSource(GLuint, GLsizei, **GLchar, *GLint) -> c_void)
    failing!(fn ShaderSourceARB(GLhandleARB, GLsizei, **GLcharARB, *GLint) -> c_void)
    failing!(fn ShaderStorageBlockBinding(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn SharpenTexFuncSGIS(GLenum, GLsizei, *GLfloat) -> c_void)
    failing!(fn SpriteParameterfSGIX(GLenum, GLfloat) -> c_void)
    failing!(fn SpriteParameterfvSGIX(GLenum, *GLfloat) -> c_void)
    failing!(fn SpriteParameteriSGIX(GLenum, GLint) -> c_void)
    failing!(fn SpriteParameterivSGIX(GLenum, *GLint) -> c_void)
    failing!(fn StartInstrumentsSGIX() -> c_void)
    failing!(fn StartTilingQCOM(GLuint, GLuint, GLuint, GLuint, GLbitfield) -> c_void)
    failing!(fn StencilClearTagEXT(GLsizei, GLuint) -> c_void)
    failing!(fn StencilFillPathInstancedNV(GLsizei, GLenum, *GLvoid, GLuint, GLenum, GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn StencilFillPathNV(GLuint, GLenum, GLuint) -> c_void)
    failing!(fn StencilFunc(GLenum, GLint, GLuint) -> c_void)
    failing!(fn StencilFuncSeparate(GLenum, GLenum, GLint, GLuint) -> c_void)
    failing!(fn StencilFuncSeparateATI(GLenum, GLenum, GLint, GLuint) -> c_void)
    failing!(fn StencilMask(GLuint) -> c_void)
    failing!(fn StencilMaskSeparate(GLenum, GLuint) -> c_void)
    failing!(fn StencilOp(GLenum, GLenum, GLenum) -> c_void)
    failing!(fn StencilOpSeparate(GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn StencilOpSeparateATI(GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn StencilOpValueAMD(GLenum, GLuint) -> c_void)
    failing!(fn StencilStrokePathInstancedNV(GLsizei, GLenum, *GLvoid, GLuint, GLint, GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn StencilStrokePathNV(GLuint, GLint, GLuint) -> c_void)
    failing!(fn StopInstrumentsSGIX(GLint) -> c_void)
    failing!(fn StringMarkerGREMEDY(GLsizei, *GLvoid) -> c_void)
    failing!(fn SwizzleEXT(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) -> c_void)
    failing!(fn SyncTextureINTEL(GLuint) -> c_void)
    failing!(fn TagSampleBufferSGIX() -> c_void)
    failing!(fn Tangent3bEXT(GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn Tangent3bvEXT(*GLbyte) -> c_void)
    failing!(fn Tangent3dEXT(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Tangent3dvEXT(*GLdouble) -> c_void)
    failing!(fn Tangent3fEXT(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Tangent3fvEXT(*GLfloat) -> c_void)
    failing!(fn Tangent3iEXT(GLint, GLint, GLint) -> c_void)
    failing!(fn Tangent3ivEXT(*GLint) -> c_void)
    failing!(fn Tangent3sEXT(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn Tangent3svEXT(*GLshort) -> c_void)
    failing!(fn TangentPointerEXT(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn TbufferMask3DFX(GLuint) -> c_void)
    failing!(fn TessellationFactorAMD(GLfloat) -> c_void)
    failing!(fn TessellationModeAMD(GLenum) -> c_void)
    failing!(fn TestFenceAPPLE(GLuint) -> GLboolean)
    failing!(fn TestFenceNV(GLuint) -> GLboolean)
    failing!(fn TestObjectAPPLE(GLenum, GLuint) -> GLboolean)
    failing!(fn TexBuffer(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn TexBufferARB(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn TexBufferEXT(GLenum, GLenum, GLuint) -> c_void)
    failing!(fn TexBufferRange(GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn TexBumpParameterfvATI(GLenum, *GLfloat) -> c_void)
    failing!(fn TexBumpParameterivATI(GLenum, *GLint) -> c_void)
    failing!(fn TexCoord1bOES(GLbyte) -> c_void)
    failing!(fn TexCoord1bvOES(*GLbyte) -> c_void)
    failing!(fn TexCoord1d(GLdouble) -> c_void)
    failing!(fn TexCoord1dv(*GLdouble) -> c_void)
    failing!(fn TexCoord1f(GLfloat) -> c_void)
    failing!(fn TexCoord1fv(*GLfloat) -> c_void)
    failing!(fn TexCoord1hNV(GLhalfNV) -> c_void)
    failing!(fn TexCoord1hvNV(*GLhalfNV) -> c_void)
    failing!(fn TexCoord1i(GLint) -> c_void)
    failing!(fn TexCoord1iv(*GLint) -> c_void)
    failing!(fn TexCoord1s(GLshort) -> c_void)
    failing!(fn TexCoord1sv(*GLshort) -> c_void)
    failing!(fn TexCoord1xOES(GLfixed) -> c_void)
    failing!(fn TexCoord1xvOES(*GLfixed) -> c_void)
    failing!(fn TexCoord2bOES(GLbyte, GLbyte) -> c_void)
    failing!(fn TexCoord2bvOES(*GLbyte) -> c_void)
    failing!(fn TexCoord2d(GLdouble, GLdouble) -> c_void)
    failing!(fn TexCoord2dv(*GLdouble) -> c_void)
    failing!(fn TexCoord2f(GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord2fColor3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord2fColor3fVertex3fvSUN(*GLfloat, *GLfloat, *GLfloat) -> c_void)
    failing!(fn TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord2fColor4fNormal3fVertex3fvSUN(*GLfloat, *GLfloat, *GLfloat, *GLfloat) -> c_void)
    failing!(fn TexCoord2fColor4ubVertex3fSUN(GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord2fColor4ubVertex3fvSUN(*GLfloat, *GLubyte, *GLfloat) -> c_void)
    failing!(fn TexCoord2fNormal3fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord2fNormal3fVertex3fvSUN(*GLfloat, *GLfloat, *GLfloat) -> c_void)
    failing!(fn TexCoord2fVertex3fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord2fVertex3fvSUN(*GLfloat, *GLfloat) -> c_void)
    failing!(fn TexCoord2fv(*GLfloat) -> c_void)
    failing!(fn TexCoord2hNV(GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn TexCoord2hvNV(*GLhalfNV) -> c_void)
    failing!(fn TexCoord2i(GLint, GLint) -> c_void)
    failing!(fn TexCoord2iv(*GLint) -> c_void)
    failing!(fn TexCoord2s(GLshort, GLshort) -> c_void)
    failing!(fn TexCoord2sv(*GLshort) -> c_void)
    failing!(fn TexCoord2xOES(GLfixed, GLfixed) -> c_void)
    failing!(fn TexCoord2xvOES(*GLfixed) -> c_void)
    failing!(fn TexCoord3bOES(GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn TexCoord3bvOES(*GLbyte) -> c_void)
    failing!(fn TexCoord3d(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn TexCoord3dv(*GLdouble) -> c_void)
    failing!(fn TexCoord3f(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord3fv(*GLfloat) -> c_void)
    failing!(fn TexCoord3hNV(GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn TexCoord3hvNV(*GLhalfNV) -> c_void)
    failing!(fn TexCoord3i(GLint, GLint, GLint) -> c_void)
    failing!(fn TexCoord3iv(*GLint) -> c_void)
    failing!(fn TexCoord3s(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn TexCoord3sv(*GLshort) -> c_void)
    failing!(fn TexCoord3xOES(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn TexCoord3xvOES(*GLfixed) -> c_void)
    failing!(fn TexCoord4bOES(GLbyte, GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn TexCoord4bvOES(*GLbyte) -> c_void)
    failing!(fn TexCoord4d(GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn TexCoord4dv(*GLdouble) -> c_void)
    failing!(fn TexCoord4f(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord4fColor4fNormal3fVertex4fvSUN(*GLfloat, *GLfloat, *GLfloat, *GLfloat) -> c_void)
    failing!(fn TexCoord4fVertex4fSUN(GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn TexCoord4fVertex4fvSUN(*GLfloat, *GLfloat) -> c_void)
    failing!(fn TexCoord4fv(*GLfloat) -> c_void)
    failing!(fn TexCoord4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn TexCoord4hvNV(*GLhalfNV) -> c_void)
    failing!(fn TexCoord4i(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn TexCoord4iv(*GLint) -> c_void)
    failing!(fn TexCoord4s(GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn TexCoord4sv(*GLshort) -> c_void)
    failing!(fn TexCoord4xOES(GLfixed, GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn TexCoord4xvOES(*GLfixed) -> c_void)
    failing!(fn TexCoordFormatNV(GLint, GLenum, GLsizei) -> c_void)
    failing!(fn TexCoordP1ui(GLenum, GLuint) -> c_void)
    failing!(fn TexCoordP1uiv(GLenum, *GLuint) -> c_void)
    failing!(fn TexCoordP2ui(GLenum, GLuint) -> c_void)
    failing!(fn TexCoordP2uiv(GLenum, *GLuint) -> c_void)
    failing!(fn TexCoordP3ui(GLenum, GLuint) -> c_void)
    failing!(fn TexCoordP3uiv(GLenum, *GLuint) -> c_void)
    failing!(fn TexCoordP4ui(GLenum, GLuint) -> c_void)
    failing!(fn TexCoordP4uiv(GLenum, *GLuint) -> c_void)
    failing!(fn TexCoordPointer(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn TexCoordPointerEXT(GLint, GLenum, GLsizei, GLsizei, *GLvoid) -> c_void)
    failing!(fn TexCoordPointerListIBM(GLint, GLenum, GLint, **GLvoid, GLint) -> c_void)
    failing!(fn TexCoordPointervINTEL(GLint, GLenum, **GLvoid) -> c_void)
    failing!(fn TexEnvf(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn TexEnvfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn TexEnvi(GLenum, GLenum, GLint) -> c_void)
    failing!(fn TexEnviv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn TexEnvx(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn TexEnvxOES(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn TexEnvxv(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn TexEnvxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn TexFilterFuncSGIS(GLenum, GLenum, GLsizei, *GLfloat) -> c_void)
    failing!(fn TexGend(GLenum, GLenum, GLdouble) -> c_void)
    failing!(fn TexGendv(GLenum, GLenum, *GLdouble) -> c_void)
    failing!(fn TexGenf(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn TexGenfOES(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn TexGenfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn TexGenfvOES(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn TexGeni(GLenum, GLenum, GLint) -> c_void)
    failing!(fn TexGeniOES(GLenum, GLenum, GLint) -> c_void)
    failing!(fn TexGeniv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn TexGenivOES(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn TexGenxOES(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn TexGenxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn TexImage1D(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexImage2D(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexImage2DMultisample(GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TexImage2DMultisampleCoverageNV(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TexImage3D(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexImage3DEXT(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexImage3DMultisample(GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TexImage3DMultisampleCoverageNV(GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TexImage3DOES(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexImage4DSGIS(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexPageCommitmentARB(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TexParameterIiv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn TexParameterIivEXT(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn TexParameterIuiv(GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn TexParameterIuivEXT(GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn TexParameterf(GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn TexParameterfv(GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn TexParameteri(GLenum, GLenum, GLint) -> c_void)
    failing!(fn TexParameteriv(GLenum, GLenum, *GLint) -> c_void)
    failing!(fn TexParameterx(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn TexParameterxOES(GLenum, GLenum, GLfixed) -> c_void)
    failing!(fn TexParameterxv(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn TexParameterxvOES(GLenum, GLenum, *GLfixed) -> c_void)
    failing!(fn TexRenderbufferNV(GLenum, GLuint) -> c_void)
    failing!(fn TexStorage1D(GLenum, GLsizei, GLenum, GLsizei) -> c_void)
    failing!(fn TexStorage1DEXT(GLenum, GLsizei, GLenum, GLsizei) -> c_void)
    failing!(fn TexStorage2D(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn TexStorage2DEXT(GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn TexStorage2DMultisample(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TexStorage3D(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> c_void)
    failing!(fn TexStorage3DEXT(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> c_void)
    failing!(fn TexStorage3DMultisample(GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TexStorageSparseAMD(GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) -> c_void)
    failing!(fn TexSubImage1D(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexSubImage1DEXT(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexSubImage2D(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexSubImage2DEXT(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexSubImage3DEXT(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexSubImage3DOES(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TexSubImage4DSGIS(GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TextureBarrierNV() -> c_void)
    failing!(fn TextureBufferEXT(GLuint, GLenum, GLenum, GLuint) -> c_void)
    failing!(fn TextureBufferRangeEXT(GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) -> c_void)
    failing!(fn TextureColorMaskSGIS(GLboolean, GLboolean, GLboolean, GLboolean) -> c_void)
    failing!(fn TextureImage1DEXT(GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TextureImage2DEXT(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TextureImage2DMultisampleCoverageNV(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TextureImage2DMultisampleNV(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TextureImage3DEXT(GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TextureImage3DMultisampleCoverageNV(GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TextureImage3DMultisampleNV(GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TextureLightEXT(GLenum) -> c_void)
    failing!(fn TextureMaterialEXT(GLenum, GLenum) -> c_void)
    failing!(fn TextureNormalEXT(GLenum) -> c_void)
    failing!(fn TexturePageCommitmentEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TextureParameterIivEXT(GLuint, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn TextureParameterIuivEXT(GLuint, GLenum, GLenum, *GLuint) -> c_void)
    failing!(fn TextureParameterfEXT(GLuint, GLenum, GLenum, GLfloat) -> c_void)
    failing!(fn TextureParameterfvEXT(GLuint, GLenum, GLenum, *GLfloat) -> c_void)
    failing!(fn TextureParameteriEXT(GLuint, GLenum, GLenum, GLint) -> c_void)
    failing!(fn TextureParameterivEXT(GLuint, GLenum, GLenum, *GLint) -> c_void)
    failing!(fn TextureRangeAPPLE(GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn TextureRenderbufferEXT(GLuint, GLenum, GLuint) -> c_void)
    failing!(fn TextureStorage1DEXT(GLuint, GLenum, GLsizei, GLenum, GLsizei) -> c_void)
    failing!(fn TextureStorage2DEXT(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) -> c_void)
    failing!(fn TextureStorage2DMultisampleEXT(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TextureStorage3DEXT(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) -> c_void)
    failing!(fn TextureStorage3DMultisampleEXT(GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) -> c_void)
    failing!(fn TextureStorageSparseAMD(GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) -> c_void)
    failing!(fn TextureSubImage1DEXT(GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TextureSubImage2DEXT(GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TextureSubImage3DEXT(GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, *GLvoid) -> c_void)
    failing!(fn TextureView(GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn TrackMatrixNV(GLenum, GLuint, GLenum, GLenum) -> c_void)
    failing!(fn TransformFeedbackAttribsNV(GLuint, *GLint, GLenum) -> c_void)
    failing!(fn TransformFeedbackStreamAttribsNV(GLsizei, *GLint, GLsizei, *GLint, GLenum) -> c_void)
    failing!(fn TransformFeedbackVaryings(GLuint, GLsizei, **GLchar, GLenum) -> c_void)
    failing!(fn TransformFeedbackVaryingsEXT(GLuint, GLsizei, **GLchar, GLenum) -> c_void)
    failing!(fn TransformFeedbackVaryingsNV(GLuint, GLsizei, *GLint, GLenum) -> c_void)
    failing!(fn TransformPathNV(GLuint, GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn Translated(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Translatef(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Translatex(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn TranslatexOES(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn Uniform1d(GLint, GLdouble) -> c_void)
    failing!(fn Uniform1dv(GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn Uniform1f(GLint, GLfloat) -> c_void)
    failing!(fn Uniform1fARB(GLint, GLfloat) -> c_void)
    failing!(fn Uniform1fv(GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn Uniform1fvARB(GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn Uniform1i(GLint, GLint) -> c_void)
    failing!(fn Uniform1i64NV(GLint, GLint64EXT) -> c_void)
    failing!(fn Uniform1i64vNV(GLint, GLsizei, *GLint64EXT) -> c_void)
    failing!(fn Uniform1iARB(GLint, GLint) -> c_void)
    failing!(fn Uniform1iv(GLint, GLsizei, *GLint) -> c_void)
    failing!(fn Uniform1ivARB(GLint, GLsizei, *GLint) -> c_void)
    failing!(fn Uniform1ui(GLint, GLuint) -> c_void)
    failing!(fn Uniform1ui64NV(GLint, GLuint64EXT) -> c_void)
    failing!(fn Uniform1ui64vNV(GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn Uniform1uiEXT(GLint, GLuint) -> c_void)
    failing!(fn Uniform1uiv(GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn Uniform1uivEXT(GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn Uniform2d(GLint, GLdouble, GLdouble) -> c_void)
    failing!(fn Uniform2dv(GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn Uniform2f(GLint, GLfloat, GLfloat) -> c_void)
    failing!(fn Uniform2fARB(GLint, GLfloat, GLfloat) -> c_void)
    failing!(fn Uniform2fv(GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn Uniform2fvARB(GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn Uniform2i(GLint, GLint, GLint) -> c_void)
    failing!(fn Uniform2i64NV(GLint, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn Uniform2i64vNV(GLint, GLsizei, *GLint64EXT) -> c_void)
    failing!(fn Uniform2iARB(GLint, GLint, GLint) -> c_void)
    failing!(fn Uniform2iv(GLint, GLsizei, *GLint) -> c_void)
    failing!(fn Uniform2ivARB(GLint, GLsizei, *GLint) -> c_void)
    failing!(fn Uniform2ui(GLint, GLuint, GLuint) -> c_void)
    failing!(fn Uniform2ui64NV(GLint, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn Uniform2ui64vNV(GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn Uniform2uiEXT(GLint, GLuint, GLuint) -> c_void)
    failing!(fn Uniform2uiv(GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn Uniform2uivEXT(GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn Uniform3d(GLint, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Uniform3dv(GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn Uniform3f(GLint, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Uniform3fARB(GLint, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Uniform3fv(GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn Uniform3fvARB(GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn Uniform3i(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn Uniform3i64NV(GLint, GLint64EXT, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn Uniform3i64vNV(GLint, GLsizei, *GLint64EXT) -> c_void)
    failing!(fn Uniform3iARB(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn Uniform3iv(GLint, GLsizei, *GLint) -> c_void)
    failing!(fn Uniform3ivARB(GLint, GLsizei, *GLint) -> c_void)
    failing!(fn Uniform3ui(GLint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn Uniform3ui64NV(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn Uniform3ui64vNV(GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn Uniform3uiEXT(GLint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn Uniform3uiv(GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn Uniform3uivEXT(GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn Uniform4d(GLint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Uniform4dv(GLint, GLsizei, *GLdouble) -> c_void)
    failing!(fn Uniform4f(GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Uniform4fARB(GLint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Uniform4fv(GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn Uniform4fvARB(GLint, GLsizei, *GLfloat) -> c_void)
    failing!(fn Uniform4i(GLint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn Uniform4i64NV(GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn Uniform4i64vNV(GLint, GLsizei, *GLint64EXT) -> c_void)
    failing!(fn Uniform4iARB(GLint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn Uniform4iv(GLint, GLsizei, *GLint) -> c_void)
    failing!(fn Uniform4ivARB(GLint, GLsizei, *GLint) -> c_void)
    failing!(fn Uniform4ui(GLint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn Uniform4ui64NV(GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn Uniform4ui64vNV(GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn Uniform4uiEXT(GLint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn Uniform4uiv(GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn Uniform4uivEXT(GLint, GLsizei, *GLuint) -> c_void)
    failing!(fn UniformBlockBinding(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn UniformBufferEXT(GLuint, GLint, GLuint) -> c_void)
    failing!(fn UniformHandleui64ARB(GLint, GLuint64) -> c_void)
    failing!(fn UniformHandleui64NV(GLint, GLuint64) -> c_void)
    failing!(fn UniformHandleui64vARB(GLint, GLsizei, *GLuint64) -> c_void)
    failing!(fn UniformHandleui64vNV(GLint, GLsizei, *GLuint64) -> c_void)
    failing!(fn UniformMatrix2dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix2fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix2fvARB(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix2x3dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix2x3fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix2x4dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix2x4fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix3dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix3fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix3fvARB(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix3x2dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix3x2fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix3x4dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix3x4fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix4dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix4fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix4fvARB(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix4x2dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix4x2fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformMatrix4x3dv(GLint, GLsizei, GLboolean, *GLdouble) -> c_void)
    failing!(fn UniformMatrix4x3fv(GLint, GLsizei, GLboolean, *GLfloat) -> c_void)
    failing!(fn UniformSubroutinesuiv(GLenum, GLsizei, *GLuint) -> c_void)
    failing!(fn Uniformui64NV(GLint, GLuint64EXT) -> c_void)
    failing!(fn Uniformui64vNV(GLint, GLsizei, *GLuint64EXT) -> c_void)
    failing!(fn UnlockArraysEXT() -> c_void)
    failing!(fn UnmapBuffer(GLenum) -> GLboolean)
    failing!(fn UnmapBufferARB(GLenum) -> GLboolean)
    failing!(fn UnmapBufferOES(GLenum) -> GLboolean)
    failing!(fn UnmapNamedBufferEXT(GLuint) -> GLboolean)
    failing!(fn UnmapObjectBufferATI(GLuint) -> c_void)
    failing!(fn UnmapTexture2DINTEL(GLuint, GLint) -> c_void)
    failing!(fn UpdateObjectBufferATI(GLuint, GLuint, GLsizei, *GLvoid, GLenum) -> c_void)
    failing!(fn UseProgram(GLuint) -> c_void)
    failing!(fn UseProgramObjectARB(GLhandleARB) -> c_void)
    failing!(fn UseProgramStages(GLuint, GLbitfield, GLuint) -> c_void)
    failing!(fn UseProgramStagesEXT(GLuint, GLbitfield, GLuint) -> c_void)
    failing!(fn UseShaderProgramEXT(GLenum, GLuint) -> c_void)
    failing!(fn VDPAUFiniNV() -> c_void)
    failing!(fn VDPAUGetSurfaceivNV(GLvdpauSurfaceNV, GLenum, GLsizei, *GLsizei, *GLint) -> c_void)
    failing!(fn VDPAUInitNV(*GLvoid, *GLvoid) -> c_void)
    failing!(fn VDPAUIsSurfaceNV(GLvdpauSurfaceNV) -> c_void)
    failing!(fn VDPAUMapSurfacesNV(GLsizei, *GLvdpauSurfaceNV) -> c_void)
    failing!(fn VDPAURegisterOutputSurfaceNV(*GLvoid, GLenum, GLsizei, *GLuint) -> GLvdpauSurfaceNV)
    failing!(fn VDPAURegisterVideoSurfaceNV(*GLvoid, GLenum, GLsizei, *GLuint) -> GLvdpauSurfaceNV)
    failing!(fn VDPAUSurfaceAccessNV(GLvdpauSurfaceNV, GLenum) -> c_void)
    failing!(fn VDPAUUnmapSurfacesNV(GLsizei, *GLvdpauSurfaceNV) -> c_void)
    failing!(fn VDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV) -> c_void)
    failing!(fn ValidateProgram(GLuint) -> c_void)
    failing!(fn ValidateProgramARB(GLhandleARB) -> c_void)
    failing!(fn ValidateProgramPipeline(GLuint) -> c_void)
    failing!(fn ValidateProgramPipelineEXT(GLuint) -> c_void)
    failing!(fn VariantArrayObjectATI(GLuint, GLenum, GLsizei, GLuint, GLuint) -> c_void)
    failing!(fn VariantPointerEXT(GLuint, GLenum, GLuint, *GLvoid) -> c_void)
    failing!(fn VariantbvEXT(GLuint, *GLbyte) -> c_void)
    failing!(fn VariantdvEXT(GLuint, *GLdouble) -> c_void)
    failing!(fn VariantfvEXT(GLuint, *GLfloat) -> c_void)
    failing!(fn VariantivEXT(GLuint, *GLint) -> c_void)
    failing!(fn VariantsvEXT(GLuint, *GLshort) -> c_void)
    failing!(fn VariantubvEXT(GLuint, *GLubyte) -> c_void)
    failing!(fn VariantuivEXT(GLuint, *GLuint) -> c_void)
    failing!(fn VariantusvEXT(GLuint, *GLushort) -> c_void)
    failing!(fn Vertex2bOES(GLbyte) -> c_void)
    failing!(fn Vertex2bvOES(*GLbyte) -> c_void)
    failing!(fn Vertex2d(GLdouble, GLdouble) -> c_void)
    failing!(fn Vertex2dv(*GLdouble) -> c_void)
    failing!(fn Vertex2f(GLfloat, GLfloat) -> c_void)
    failing!(fn Vertex2fv(*GLfloat) -> c_void)
    failing!(fn Vertex2hNV(GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn Vertex2hvNV(*GLhalfNV) -> c_void)
    failing!(fn Vertex2i(GLint, GLint) -> c_void)
    failing!(fn Vertex2iv(*GLint) -> c_void)
    failing!(fn Vertex2s(GLshort, GLshort) -> c_void)
    failing!(fn Vertex2sv(*GLshort) -> c_void)
    failing!(fn Vertex2xOES(GLfixed) -> c_void)
    failing!(fn Vertex2xvOES(*GLfixed) -> c_void)
    failing!(fn Vertex3bOES(GLbyte, GLbyte) -> c_void)
    failing!(fn Vertex3bvOES(*GLbyte) -> c_void)
    failing!(fn Vertex3d(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Vertex3dv(*GLdouble) -> c_void)
    failing!(fn Vertex3f(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Vertex3fv(*GLfloat) -> c_void)
    failing!(fn Vertex3hNV(GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn Vertex3hvNV(*GLhalfNV) -> c_void)
    failing!(fn Vertex3i(GLint, GLint, GLint) -> c_void)
    failing!(fn Vertex3iv(*GLint) -> c_void)
    failing!(fn Vertex3s(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn Vertex3sv(*GLshort) -> c_void)
    failing!(fn Vertex3xOES(GLfixed, GLfixed) -> c_void)
    failing!(fn Vertex3xvOES(*GLfixed) -> c_void)
    failing!(fn Vertex4bOES(GLbyte, GLbyte, GLbyte) -> c_void)
    failing!(fn Vertex4bvOES(*GLbyte) -> c_void)
    failing!(fn Vertex4d(GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn Vertex4dv(*GLdouble) -> c_void)
    failing!(fn Vertex4f(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn Vertex4fv(*GLfloat) -> c_void)
    failing!(fn Vertex4hNV(GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn Vertex4hvNV(*GLhalfNV) -> c_void)
    failing!(fn Vertex4i(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn Vertex4iv(*GLint) -> c_void)
    failing!(fn Vertex4s(GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn Vertex4sv(*GLshort) -> c_void)
    failing!(fn Vertex4xOES(GLfixed, GLfixed, GLfixed) -> c_void)
    failing!(fn Vertex4xvOES(*GLfixed) -> c_void)
    failing!(fn VertexArrayBindVertexBufferEXT(GLuint, GLuint, GLuint, GLintptr, GLsizei) -> c_void)
    failing!(fn VertexArrayColorOffsetEXT(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayEdgeFlagOffsetEXT(GLuint, GLuint, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayFogCoordOffsetEXT(GLuint, GLuint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayIndexOffsetEXT(GLuint, GLuint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayMultiTexCoordOffsetEXT(GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayNormalOffsetEXT(GLuint, GLuint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayParameteriAPPLE(GLenum, GLint) -> c_void)
    failing!(fn VertexArrayRangeAPPLE(GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexArrayRangeNV(GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexArraySecondaryColorOffsetEXT(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayTexCoordOffsetEXT(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayVertexAttribBindingEXT(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn VertexArrayVertexAttribFormatEXT(GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) -> c_void)
    failing!(fn VertexArrayVertexAttribIFormatEXT(GLuint, GLuint, GLint, GLenum, GLuint) -> c_void)
    failing!(fn VertexArrayVertexAttribIOffsetEXT(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayVertexAttribLFormatEXT(GLuint, GLuint, GLint, GLenum, GLuint) -> c_void)
    failing!(fn VertexArrayVertexAttribLOffsetEXT(GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayVertexAttribOffsetEXT(GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexArrayVertexBindingDivisorEXT(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn VertexArrayVertexOffsetEXT(GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) -> c_void)
    failing!(fn VertexAttrib1d(GLuint, GLdouble) -> c_void)
    failing!(fn VertexAttrib1dARB(GLuint, GLdouble) -> c_void)
    failing!(fn VertexAttrib1dNV(GLuint, GLdouble) -> c_void)
    failing!(fn VertexAttrib1dv(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib1dvARB(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib1dvNV(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib1f(GLuint, GLfloat) -> c_void)
    failing!(fn VertexAttrib1fARB(GLuint, GLfloat) -> c_void)
    failing!(fn VertexAttrib1fNV(GLuint, GLfloat) -> c_void)
    failing!(fn VertexAttrib1fv(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib1fvARB(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib1fvNV(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib1hNV(GLuint, GLhalfNV) -> c_void)
    failing!(fn VertexAttrib1hvNV(GLuint, *GLhalfNV) -> c_void)
    failing!(fn VertexAttrib1s(GLuint, GLshort) -> c_void)
    failing!(fn VertexAttrib1sARB(GLuint, GLshort) -> c_void)
    failing!(fn VertexAttrib1sNV(GLuint, GLshort) -> c_void)
    failing!(fn VertexAttrib1sv(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib1svARB(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib1svNV(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib2d(GLuint, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib2dARB(GLuint, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib2dNV(GLuint, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib2dv(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib2dvARB(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib2dvNV(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib2f(GLuint, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib2fARB(GLuint, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib2fNV(GLuint, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib2fv(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib2fvARB(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib2fvNV(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib2hNV(GLuint, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn VertexAttrib2hvNV(GLuint, *GLhalfNV) -> c_void)
    failing!(fn VertexAttrib2s(GLuint, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib2sARB(GLuint, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib2sNV(GLuint, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib2sv(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib2svARB(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib2svNV(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib3d(GLuint, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib3dARB(GLuint, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib3dNV(GLuint, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib3dv(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib3dvARB(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib3dvNV(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib3f(GLuint, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib3fARB(GLuint, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib3fNV(GLuint, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib3fv(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib3fvARB(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib3fvNV(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib3hNV(GLuint, GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn VertexAttrib3hvNV(GLuint, *GLhalfNV) -> c_void)
    failing!(fn VertexAttrib3s(GLuint, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib3sARB(GLuint, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib3sNV(GLuint, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib3sv(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib3svARB(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib3svNV(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib4Nbv(GLuint, *GLbyte) -> c_void)
    failing!(fn VertexAttrib4NbvARB(GLuint, *GLbyte) -> c_void)
    failing!(fn VertexAttrib4Niv(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttrib4NivARB(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttrib4Nsv(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib4NsvARB(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib4Nub(GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> c_void)
    failing!(fn VertexAttrib4NubARB(GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> c_void)
    failing!(fn VertexAttrib4Nubv(GLuint, *GLubyte) -> c_void)
    failing!(fn VertexAttrib4NubvARB(GLuint, *GLubyte) -> c_void)
    failing!(fn VertexAttrib4Nuiv(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttrib4NuivARB(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttrib4Nusv(GLuint, *GLushort) -> c_void)
    failing!(fn VertexAttrib4NusvARB(GLuint, *GLushort) -> c_void)
    failing!(fn VertexAttrib4bv(GLuint, *GLbyte) -> c_void)
    failing!(fn VertexAttrib4bvARB(GLuint, *GLbyte) -> c_void)
    failing!(fn VertexAttrib4d(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib4dARB(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib4dNV(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttrib4dv(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib4dvARB(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib4dvNV(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttrib4f(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib4fARB(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib4fNV(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexAttrib4fv(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib4fvARB(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib4fvNV(GLuint, *GLfloat) -> c_void)
    failing!(fn VertexAttrib4hNV(GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) -> c_void)
    failing!(fn VertexAttrib4hvNV(GLuint, *GLhalfNV) -> c_void)
    failing!(fn VertexAttrib4iv(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttrib4ivARB(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttrib4s(GLuint, GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib4sARB(GLuint, GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib4sNV(GLuint, GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn VertexAttrib4sv(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib4svARB(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib4svNV(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttrib4ubNV(GLuint, GLubyte, GLubyte, GLubyte, GLubyte) -> c_void)
    failing!(fn VertexAttrib4ubv(GLuint, *GLubyte) -> c_void)
    failing!(fn VertexAttrib4ubvARB(GLuint, *GLubyte) -> c_void)
    failing!(fn VertexAttrib4ubvNV(GLuint, *GLubyte) -> c_void)
    failing!(fn VertexAttrib4uiv(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttrib4uivARB(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttrib4usv(GLuint, *GLushort) -> c_void)
    failing!(fn VertexAttrib4usvARB(GLuint, *GLushort) -> c_void)
    failing!(fn VertexAttribArrayObjectATI(GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribBinding(GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribDivisor(GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribDivisorANGLE(GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribDivisorARB(GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribDivisorNV(GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribFormat(GLuint, GLint, GLenum, GLboolean, GLuint) -> c_void)
    failing!(fn VertexAttribFormatNV(GLuint, GLint, GLenum, GLboolean, GLsizei) -> c_void)
    failing!(fn VertexAttribI1i(GLuint, GLint) -> c_void)
    failing!(fn VertexAttribI1iEXT(GLuint, GLint) -> c_void)
    failing!(fn VertexAttribI1iv(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttribI1ivEXT(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttribI1ui(GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribI1uiEXT(GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribI1uiv(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttribI1uivEXT(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttribI2i(GLuint, GLint, GLint) -> c_void)
    failing!(fn VertexAttribI2iEXT(GLuint, GLint, GLint) -> c_void)
    failing!(fn VertexAttribI2iv(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttribI2ivEXT(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttribI2ui(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribI2uiEXT(GLuint, GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribI2uiv(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttribI2uivEXT(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttribI3i(GLuint, GLint, GLint, GLint) -> c_void)
    failing!(fn VertexAttribI3iEXT(GLuint, GLint, GLint, GLint) -> c_void)
    failing!(fn VertexAttribI3iv(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttribI3ivEXT(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttribI3ui(GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribI3uiEXT(GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribI3uiv(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttribI3uivEXT(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttribI4bv(GLuint, *GLbyte) -> c_void)
    failing!(fn VertexAttribI4bvEXT(GLuint, *GLbyte) -> c_void)
    failing!(fn VertexAttribI4i(GLuint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn VertexAttribI4iEXT(GLuint, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn VertexAttribI4iv(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttribI4ivEXT(GLuint, *GLint) -> c_void)
    failing!(fn VertexAttribI4sv(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttribI4svEXT(GLuint, *GLshort) -> c_void)
    failing!(fn VertexAttribI4ubv(GLuint, *GLubyte) -> c_void)
    failing!(fn VertexAttribI4ubvEXT(GLuint, *GLubyte) -> c_void)
    failing!(fn VertexAttribI4ui(GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribI4uiEXT(GLuint, GLuint, GLuint, GLuint, GLuint) -> c_void)
    failing!(fn VertexAttribI4uiv(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttribI4uivEXT(GLuint, *GLuint) -> c_void)
    failing!(fn VertexAttribI4usv(GLuint, *GLushort) -> c_void)
    failing!(fn VertexAttribI4usvEXT(GLuint, *GLushort) -> c_void)
    failing!(fn VertexAttribIFormat(GLuint, GLint, GLenum, GLuint) -> c_void)
    failing!(fn VertexAttribIFormatNV(GLuint, GLint, GLenum, GLsizei) -> c_void)
    failing!(fn VertexAttribIPointer(GLuint, GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexAttribIPointerEXT(GLuint, GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexAttribL1d(GLuint, GLdouble) -> c_void)
    failing!(fn VertexAttribL1dEXT(GLuint, GLdouble) -> c_void)
    failing!(fn VertexAttribL1dv(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttribL1dvEXT(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttribL1i64NV(GLuint, GLint64EXT) -> c_void)
    failing!(fn VertexAttribL1i64vNV(GLuint, *GLint64EXT) -> c_void)
    failing!(fn VertexAttribL1ui64ARB(GLuint, GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL1ui64NV(GLuint, GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL1ui64vARB(GLuint, *GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL1ui64vNV(GLuint, *GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL2d(GLuint, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttribL2dEXT(GLuint, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttribL2dv(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttribL2dvEXT(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttribL2i64NV(GLuint, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn VertexAttribL2i64vNV(GLuint, *GLint64EXT) -> c_void)
    failing!(fn VertexAttribL2ui64NV(GLuint, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL2ui64vNV(GLuint, *GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL3d(GLuint, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttribL3dEXT(GLuint, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttribL3dv(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttribL3dvEXT(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttribL3i64NV(GLuint, GLint64EXT, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn VertexAttribL3i64vNV(GLuint, *GLint64EXT) -> c_void)
    failing!(fn VertexAttribL3ui64NV(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL3ui64vNV(GLuint, *GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL4d(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttribL4dEXT(GLuint, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexAttribL4dv(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttribL4dvEXT(GLuint, *GLdouble) -> c_void)
    failing!(fn VertexAttribL4i64NV(GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) -> c_void)
    failing!(fn VertexAttribL4i64vNV(GLuint, *GLint64EXT) -> c_void)
    failing!(fn VertexAttribL4ui64NV(GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) -> c_void)
    failing!(fn VertexAttribL4ui64vNV(GLuint, *GLuint64EXT) -> c_void)
    failing!(fn VertexAttribLFormat(GLuint, GLint, GLenum, GLuint) -> c_void)
    failing!(fn VertexAttribLFormatNV(GLuint, GLint, GLenum, GLsizei) -> c_void)
    failing!(fn VertexAttribLPointer(GLuint, GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexAttribLPointerEXT(GLuint, GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexAttribP1ui(GLuint, GLenum, GLboolean, GLuint) -> c_void)
    failing!(fn VertexAttribP1uiv(GLuint, GLenum, GLboolean, *GLuint) -> c_void)
    failing!(fn VertexAttribP2ui(GLuint, GLenum, GLboolean, GLuint) -> c_void)
    failing!(fn VertexAttribP2uiv(GLuint, GLenum, GLboolean, *GLuint) -> c_void)
    failing!(fn VertexAttribP3ui(GLuint, GLenum, GLboolean, GLuint) -> c_void)
    failing!(fn VertexAttribP3uiv(GLuint, GLenum, GLboolean, *GLuint) -> c_void)
    failing!(fn VertexAttribP4ui(GLuint, GLenum, GLboolean, GLuint) -> c_void)
    failing!(fn VertexAttribP4uiv(GLuint, GLenum, GLboolean, *GLuint) -> c_void)
    failing!(fn VertexAttribParameteriAMD(GLuint, GLenum, GLint) -> c_void)
    failing!(fn VertexAttribPointer(GLuint, GLint, GLenum, GLboolean, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexAttribPointerARB(GLuint, GLint, GLenum, GLboolean, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexAttribPointerNV(GLuint, GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexAttribs1dvNV(GLuint, GLsizei, *GLdouble) -> c_void)
    failing!(fn VertexAttribs1fvNV(GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn VertexAttribs1hvNV(GLuint, GLsizei, *GLhalfNV) -> c_void)
    failing!(fn VertexAttribs1svNV(GLuint, GLsizei, *GLshort) -> c_void)
    failing!(fn VertexAttribs2dvNV(GLuint, GLsizei, *GLdouble) -> c_void)
    failing!(fn VertexAttribs2fvNV(GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn VertexAttribs2hvNV(GLuint, GLsizei, *GLhalfNV) -> c_void)
    failing!(fn VertexAttribs2svNV(GLuint, GLsizei, *GLshort) -> c_void)
    failing!(fn VertexAttribs3dvNV(GLuint, GLsizei, *GLdouble) -> c_void)
    failing!(fn VertexAttribs3fvNV(GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn VertexAttribs3hvNV(GLuint, GLsizei, *GLhalfNV) -> c_void)
    failing!(fn VertexAttribs3svNV(GLuint, GLsizei, *GLshort) -> c_void)
    failing!(fn VertexAttribs4dvNV(GLuint, GLsizei, *GLdouble) -> c_void)
    failing!(fn VertexAttribs4fvNV(GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn VertexAttribs4hvNV(GLuint, GLsizei, *GLhalfNV) -> c_void)
    failing!(fn VertexAttribs4svNV(GLuint, GLsizei, *GLshort) -> c_void)
    failing!(fn VertexAttribs4ubvNV(GLuint, GLsizei, *GLubyte) -> c_void)
    failing!(fn VertexBindingDivisor(GLuint, GLuint) -> c_void)
    failing!(fn VertexBlendARB(GLint) -> c_void)
    failing!(fn VertexBlendEnvfATI(GLenum, GLfloat) -> c_void)
    failing!(fn VertexBlendEnviATI(GLenum, GLint) -> c_void)
    failing!(fn VertexFormatNV(GLint, GLenum, GLsizei) -> c_void)
    failing!(fn VertexP2ui(GLenum, GLuint) -> c_void)
    failing!(fn VertexP2uiv(GLenum, *GLuint) -> c_void)
    failing!(fn VertexP3ui(GLenum, GLuint) -> c_void)
    failing!(fn VertexP3uiv(GLenum, *GLuint) -> c_void)
    failing!(fn VertexP4ui(GLenum, GLuint) -> c_void)
    failing!(fn VertexP4uiv(GLenum, *GLuint) -> c_void)
    failing!(fn VertexPointer(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexPointerEXT(GLint, GLenum, GLsizei, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexPointerListIBM(GLint, GLenum, GLint, **GLvoid, GLint) -> c_void)
    failing!(fn VertexPointervINTEL(GLint, GLenum, **GLvoid) -> c_void)
    failing!(fn VertexStream1dATI(GLenum, GLdouble) -> c_void)
    failing!(fn VertexStream1dvATI(GLenum, *GLdouble) -> c_void)
    failing!(fn VertexStream1fATI(GLenum, GLfloat) -> c_void)
    failing!(fn VertexStream1fvATI(GLenum, *GLfloat) -> c_void)
    failing!(fn VertexStream1iATI(GLenum, GLint) -> c_void)
    failing!(fn VertexStream1ivATI(GLenum, *GLint) -> c_void)
    failing!(fn VertexStream1sATI(GLenum, GLshort) -> c_void)
    failing!(fn VertexStream1svATI(GLenum, *GLshort) -> c_void)
    failing!(fn VertexStream2dATI(GLenum, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexStream2dvATI(GLenum, *GLdouble) -> c_void)
    failing!(fn VertexStream2fATI(GLenum, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexStream2fvATI(GLenum, *GLfloat) -> c_void)
    failing!(fn VertexStream2iATI(GLenum, GLint, GLint) -> c_void)
    failing!(fn VertexStream2ivATI(GLenum, *GLint) -> c_void)
    failing!(fn VertexStream2sATI(GLenum, GLshort, GLshort) -> c_void)
    failing!(fn VertexStream2svATI(GLenum, *GLshort) -> c_void)
    failing!(fn VertexStream3dATI(GLenum, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexStream3dvATI(GLenum, *GLdouble) -> c_void)
    failing!(fn VertexStream3fATI(GLenum, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexStream3fvATI(GLenum, *GLfloat) -> c_void)
    failing!(fn VertexStream3iATI(GLenum, GLint, GLint, GLint) -> c_void)
    failing!(fn VertexStream3ivATI(GLenum, *GLint) -> c_void)
    failing!(fn VertexStream3sATI(GLenum, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn VertexStream3svATI(GLenum, *GLshort) -> c_void)
    failing!(fn VertexStream4dATI(GLenum, GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn VertexStream4dvATI(GLenum, *GLdouble) -> c_void)
    failing!(fn VertexStream4fATI(GLenum, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn VertexStream4fvATI(GLenum, *GLfloat) -> c_void)
    failing!(fn VertexStream4iATI(GLenum, GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn VertexStream4ivATI(GLenum, *GLint) -> c_void)
    failing!(fn VertexStream4sATI(GLenum, GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn VertexStream4svATI(GLenum, *GLshort) -> c_void)
    failing!(fn VertexWeightPointerEXT(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn VertexWeightfEXT(GLfloat) -> c_void)
    failing!(fn VertexWeightfvEXT(*GLfloat) -> c_void)
    failing!(fn VertexWeighthNV(GLhalfNV) -> c_void)
    failing!(fn VertexWeighthvNV(*GLhalfNV) -> c_void)
    failing!(fn VideoCaptureNV(GLuint, *GLuint, *GLuint64EXT) -> GLenum)
    failing!(fn VideoCaptureStreamParameterdvNV(GLuint, GLuint, GLenum, *GLdouble) -> c_void)
    failing!(fn VideoCaptureStreamParameterfvNV(GLuint, GLuint, GLenum, *GLfloat) -> c_void)
    failing!(fn VideoCaptureStreamParameterivNV(GLuint, GLuint, GLenum, *GLint) -> c_void)
    failing!(fn Viewport(GLint, GLint, GLsizei, GLsizei) -> c_void)
    failing!(fn ViewportArrayv(GLuint, GLsizei, *GLfloat) -> c_void)
    failing!(fn ViewportIndexedf(GLuint, GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn ViewportIndexedfv(GLuint, *GLfloat) -> c_void)
    failing!(fn WaitSync(GLsync, GLbitfield, GLuint64) -> c_void)
    failing!(fn WaitSyncAPPLE(GLsync, GLbitfield, GLuint64) -> c_void)
    failing!(fn WeightPathsNV(GLuint, GLsizei, *GLuint, *GLfloat) -> c_void)
    failing!(fn WeightPointerARB(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn WeightPointerOES(GLint, GLenum, GLsizei, *GLvoid) -> c_void)
    failing!(fn WeightbvARB(GLint, *GLbyte) -> c_void)
    failing!(fn WeightdvARB(GLint, *GLdouble) -> c_void)
    failing!(fn WeightfvARB(GLint, *GLfloat) -> c_void)
    failing!(fn WeightivARB(GLint, *GLint) -> c_void)
    failing!(fn WeightsvARB(GLint, *GLshort) -> c_void)
    failing!(fn WeightubvARB(GLint, *GLubyte) -> c_void)
    failing!(fn WeightuivARB(GLint, *GLuint) -> c_void)
    failing!(fn WeightusvARB(GLint, *GLushort) -> c_void)
    failing!(fn WindowPos2d(GLdouble, GLdouble) -> c_void)
    failing!(fn WindowPos2dARB(GLdouble, GLdouble) -> c_void)
    failing!(fn WindowPos2dMESA(GLdouble, GLdouble) -> c_void)
    failing!(fn WindowPos2dv(*GLdouble) -> c_void)
    failing!(fn WindowPos2dvARB(*GLdouble) -> c_void)
    failing!(fn WindowPos2dvMESA(*GLdouble) -> c_void)
    failing!(fn WindowPos2f(GLfloat, GLfloat) -> c_void)
    failing!(fn WindowPos2fARB(GLfloat, GLfloat) -> c_void)
    failing!(fn WindowPos2fMESA(GLfloat, GLfloat) -> c_void)
    failing!(fn WindowPos2fv(*GLfloat) -> c_void)
    failing!(fn WindowPos2fvARB(*GLfloat) -> c_void)
    failing!(fn WindowPos2fvMESA(*GLfloat) -> c_void)
    failing!(fn WindowPos2i(GLint, GLint) -> c_void)
    failing!(fn WindowPos2iARB(GLint, GLint) -> c_void)
    failing!(fn WindowPos2iMESA(GLint, GLint) -> c_void)
    failing!(fn WindowPos2iv(*GLint) -> c_void)
    failing!(fn WindowPos2ivARB(*GLint) -> c_void)
    failing!(fn WindowPos2ivMESA(*GLint) -> c_void)
    failing!(fn WindowPos2s(GLshort, GLshort) -> c_void)
    failing!(fn WindowPos2sARB(GLshort, GLshort) -> c_void)
    failing!(fn WindowPos2sMESA(GLshort, GLshort) -> c_void)
    failing!(fn WindowPos2sv(*GLshort) -> c_void)
    failing!(fn WindowPos2svARB(*GLshort) -> c_void)
    failing!(fn WindowPos2svMESA(*GLshort) -> c_void)
    failing!(fn WindowPos3d(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn WindowPos3dARB(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn WindowPos3dMESA(GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn WindowPos3dv(*GLdouble) -> c_void)
    failing!(fn WindowPos3dvARB(*GLdouble) -> c_void)
    failing!(fn WindowPos3dvMESA(*GLdouble) -> c_void)
    failing!(fn WindowPos3f(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn WindowPos3fARB(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn WindowPos3fMESA(GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn WindowPos3fv(*GLfloat) -> c_void)
    failing!(fn WindowPos3fvARB(*GLfloat) -> c_void)
    failing!(fn WindowPos3fvMESA(*GLfloat) -> c_void)
    failing!(fn WindowPos3i(GLint, GLint, GLint) -> c_void)
    failing!(fn WindowPos3iARB(GLint, GLint, GLint) -> c_void)
    failing!(fn WindowPos3iMESA(GLint, GLint, GLint) -> c_void)
    failing!(fn WindowPos3iv(*GLint) -> c_void)
    failing!(fn WindowPos3ivARB(*GLint) -> c_void)
    failing!(fn WindowPos3ivMESA(*GLint) -> c_void)
    failing!(fn WindowPos3s(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn WindowPos3sARB(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn WindowPos3sMESA(GLshort, GLshort, GLshort) -> c_void)
    failing!(fn WindowPos3sv(*GLshort) -> c_void)
    failing!(fn WindowPos3svARB(*GLshort) -> c_void)
    failing!(fn WindowPos3svMESA(*GLshort) -> c_void)
    failing!(fn WindowPos4dMESA(GLdouble, GLdouble, GLdouble, GLdouble) -> c_void)
    failing!(fn WindowPos4dvMESA(*GLdouble) -> c_void)
    failing!(fn WindowPos4fMESA(GLfloat, GLfloat, GLfloat, GLfloat) -> c_void)
    failing!(fn WindowPos4fvMESA(*GLfloat) -> c_void)
    failing!(fn WindowPos4iMESA(GLint, GLint, GLint, GLint) -> c_void)
    failing!(fn WindowPos4ivMESA(*GLint) -> c_void)
    failing!(fn WindowPos4sMESA(GLshort, GLshort, GLshort, GLshort) -> c_void)
    failing!(fn WindowPos4svMESA(*GLshort) -> c_void)
    failing!(fn WriteMaskEXT(GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) -> c_void)
}

/// Load each OpenGL symbol using a custom load function. This allows for the
/// use of functions like `glfwGetProcAddress` or `SDL_GL_GetProcAddress`.
///
/// ~~~
/// let gl = gl::load_with(glfw::get_proc_address);
/// ~~~
pub fn load_with(loadfn: &fn(symbol: &str) -> Option<extern "C" fn()>) -> ~GL {
~GL {
    Accum: FnPtr::new(loadfn("glAccum"), failing::Accum),
    AccumxOES: FnPtr::new(loadfn("glAccumxOES"), failing::AccumxOES),
    ActiveProgramEXT: FnPtr::new(loadfn("glActiveProgramEXT"), failing::ActiveProgramEXT),
    ActiveShaderProgram: FnPtr::new(loadfn("glActiveShaderProgram"), failing::ActiveShaderProgram),
    ActiveShaderProgramEXT: FnPtr::new(loadfn("glActiveShaderProgramEXT"), failing::ActiveShaderProgramEXT),
    ActiveStencilFaceEXT: FnPtr::new(loadfn("glActiveStencilFaceEXT"), failing::ActiveStencilFaceEXT),
    ActiveTexture: FnPtr::new(loadfn("glActiveTexture"), failing::ActiveTexture),
    ActiveTextureARB: FnPtr::new(loadfn("glActiveTextureARB"), failing::ActiveTextureARB),
    ActiveVaryingNV: FnPtr::new(loadfn("glActiveVaryingNV"), failing::ActiveVaryingNV),
    AlphaFragmentOp1ATI: FnPtr::new(loadfn("glAlphaFragmentOp1ATI"), failing::AlphaFragmentOp1ATI),
    AlphaFragmentOp2ATI: FnPtr::new(loadfn("glAlphaFragmentOp2ATI"), failing::AlphaFragmentOp2ATI),
    AlphaFragmentOp3ATI: FnPtr::new(loadfn("glAlphaFragmentOp3ATI"), failing::AlphaFragmentOp3ATI),
    AlphaFunc: FnPtr::new(loadfn("glAlphaFunc"), failing::AlphaFunc),
    AlphaFuncQCOM: FnPtr::new(loadfn("glAlphaFuncQCOM"), failing::AlphaFuncQCOM),
    AlphaFuncx: FnPtr::new(loadfn("glAlphaFuncx"), failing::AlphaFuncx),
    AlphaFuncxOES: FnPtr::new(loadfn("glAlphaFuncxOES"), failing::AlphaFuncxOES),
    ApplyTextureEXT: FnPtr::new(loadfn("glApplyTextureEXT"), failing::ApplyTextureEXT),
    AreProgramsResidentNV: FnPtr::new(loadfn("glAreProgramsResidentNV"), failing::AreProgramsResidentNV),
    AreTexturesResident: FnPtr::new(loadfn("glAreTexturesResident"), failing::AreTexturesResident),
    AreTexturesResidentEXT: FnPtr::new(loadfn("glAreTexturesResidentEXT"), failing::AreTexturesResidentEXT),
    ArrayElement: FnPtr::new(loadfn("glArrayElement"), failing::ArrayElement),
    ArrayElementEXT: FnPtr::new(loadfn("glArrayElementEXT"), failing::ArrayElementEXT),
    ArrayObjectATI: FnPtr::new(loadfn("glArrayObjectATI"), failing::ArrayObjectATI),
    AsyncMarkerSGIX: FnPtr::new(loadfn("glAsyncMarkerSGIX"), failing::AsyncMarkerSGIX),
    AttachObjectARB: FnPtr::new(loadfn("glAttachObjectARB"), failing::AttachObjectARB),
    AttachShader: FnPtr::new(loadfn("glAttachShader"), failing::AttachShader),
    Begin: FnPtr::new(loadfn("glBegin"), failing::Begin),
    BeginConditionalRender: FnPtr::new(loadfn("glBeginConditionalRender"), failing::BeginConditionalRender),
    BeginConditionalRenderNV: FnPtr::new(loadfn("glBeginConditionalRenderNV"), failing::BeginConditionalRenderNV),
    BeginConditionalRenderNVX: FnPtr::new(loadfn("glBeginConditionalRenderNVX"), failing::BeginConditionalRenderNVX),
    BeginFragmentShaderATI: FnPtr::new(loadfn("glBeginFragmentShaderATI"), failing::BeginFragmentShaderATI),
    BeginOcclusionQueryNV: FnPtr::new(loadfn("glBeginOcclusionQueryNV"), failing::BeginOcclusionQueryNV),
    BeginPerfMonitorAMD: FnPtr::new(loadfn("glBeginPerfMonitorAMD"), failing::BeginPerfMonitorAMD),
    BeginQuery: FnPtr::new(loadfn("glBeginQuery"), failing::BeginQuery),
    BeginQueryARB: FnPtr::new(loadfn("glBeginQueryARB"), failing::BeginQueryARB),
    BeginQueryEXT: FnPtr::new(loadfn("glBeginQueryEXT"), failing::BeginQueryEXT),
    BeginQueryIndexed: FnPtr::new(loadfn("glBeginQueryIndexed"), failing::BeginQueryIndexed),
    BeginTransformFeedback: FnPtr::new(loadfn("glBeginTransformFeedback"), failing::BeginTransformFeedback),
    BeginTransformFeedbackEXT: FnPtr::new(loadfn("glBeginTransformFeedbackEXT"), failing::BeginTransformFeedbackEXT),
    BeginTransformFeedbackNV: FnPtr::new(loadfn("glBeginTransformFeedbackNV"), failing::BeginTransformFeedbackNV),
    BeginVertexShaderEXT: FnPtr::new(loadfn("glBeginVertexShaderEXT"), failing::BeginVertexShaderEXT),
    BeginVideoCaptureNV: FnPtr::new(loadfn("glBeginVideoCaptureNV"), failing::BeginVideoCaptureNV),
    BindAttribLocation: FnPtr::new(loadfn("glBindAttribLocation"), failing::BindAttribLocation),
    BindAttribLocationARB: FnPtr::new(loadfn("glBindAttribLocationARB"), failing::BindAttribLocationARB),
    BindBuffer: FnPtr::new(loadfn("glBindBuffer"), failing::BindBuffer),
    BindBufferARB: FnPtr::new(loadfn("glBindBufferARB"), failing::BindBufferARB),
    BindBufferBase: FnPtr::new(loadfn("glBindBufferBase"), failing::BindBufferBase),
    BindBufferBaseEXT: FnPtr::new(loadfn("glBindBufferBaseEXT"), failing::BindBufferBaseEXT),
    BindBufferBaseNV: FnPtr::new(loadfn("glBindBufferBaseNV"), failing::BindBufferBaseNV),
    BindBufferOffsetEXT: FnPtr::new(loadfn("glBindBufferOffsetEXT"), failing::BindBufferOffsetEXT),
    BindBufferOffsetNV: FnPtr::new(loadfn("glBindBufferOffsetNV"), failing::BindBufferOffsetNV),
    BindBufferRange: FnPtr::new(loadfn("glBindBufferRange"), failing::BindBufferRange),
    BindBufferRangeEXT: FnPtr::new(loadfn("glBindBufferRangeEXT"), failing::BindBufferRangeEXT),
    BindBufferRangeNV: FnPtr::new(loadfn("glBindBufferRangeNV"), failing::BindBufferRangeNV),
    BindBuffersBase: FnPtr::new(loadfn("glBindBuffersBase"), failing::BindBuffersBase),
    BindBuffersRange: FnPtr::new(loadfn("glBindBuffersRange"), failing::BindBuffersRange),
    BindFragDataLocation: FnPtr::new(loadfn("glBindFragDataLocation"), failing::BindFragDataLocation),
    BindFragDataLocationEXT: FnPtr::new(loadfn("glBindFragDataLocationEXT"), failing::BindFragDataLocationEXT),
    BindFragDataLocationIndexed: FnPtr::new(loadfn("glBindFragDataLocationIndexed"), failing::BindFragDataLocationIndexed),
    BindFragmentShaderATI: FnPtr::new(loadfn("glBindFragmentShaderATI"), failing::BindFragmentShaderATI),
    BindFramebuffer: FnPtr::new(loadfn("glBindFramebuffer"), failing::BindFramebuffer),
    BindFramebufferEXT: FnPtr::new(loadfn("glBindFramebufferEXT"), failing::BindFramebufferEXT),
    BindFramebufferOES: FnPtr::new(loadfn("glBindFramebufferOES"), failing::BindFramebufferOES),
    BindImageTexture: FnPtr::new(loadfn("glBindImageTexture"), failing::BindImageTexture),
    BindImageTextureEXT: FnPtr::new(loadfn("glBindImageTextureEXT"), failing::BindImageTextureEXT),
    BindImageTextures: FnPtr::new(loadfn("glBindImageTextures"), failing::BindImageTextures),
    BindLightParameterEXT: FnPtr::new(loadfn("glBindLightParameterEXT"), failing::BindLightParameterEXT),
    BindMaterialParameterEXT: FnPtr::new(loadfn("glBindMaterialParameterEXT"), failing::BindMaterialParameterEXT),
    BindMultiTextureEXT: FnPtr::new(loadfn("glBindMultiTextureEXT"), failing::BindMultiTextureEXT),
    BindParameterEXT: FnPtr::new(loadfn("glBindParameterEXT"), failing::BindParameterEXT),
    BindProgramARB: FnPtr::new(loadfn("glBindProgramARB"), failing::BindProgramARB),
    BindProgramNV: FnPtr::new(loadfn("glBindProgramNV"), failing::BindProgramNV),
    BindProgramPipeline: FnPtr::new(loadfn("glBindProgramPipeline"), failing::BindProgramPipeline),
    BindProgramPipelineEXT: FnPtr::new(loadfn("glBindProgramPipelineEXT"), failing::BindProgramPipelineEXT),
    BindRenderbuffer: FnPtr::new(loadfn("glBindRenderbuffer"), failing::BindRenderbuffer),
    BindRenderbufferEXT: FnPtr::new(loadfn("glBindRenderbufferEXT"), failing::BindRenderbufferEXT),
    BindRenderbufferOES: FnPtr::new(loadfn("glBindRenderbufferOES"), failing::BindRenderbufferOES),
    BindSampler: FnPtr::new(loadfn("glBindSampler"), failing::BindSampler),
    BindSamplers: FnPtr::new(loadfn("glBindSamplers"), failing::BindSamplers),
    BindTexGenParameterEXT: FnPtr::new(loadfn("glBindTexGenParameterEXT"), failing::BindTexGenParameterEXT),
    BindTexture: FnPtr::new(loadfn("glBindTexture"), failing::BindTexture),
    BindTextureEXT: FnPtr::new(loadfn("glBindTextureEXT"), failing::BindTextureEXT),
    BindTextureUnitParameterEXT: FnPtr::new(loadfn("glBindTextureUnitParameterEXT"), failing::BindTextureUnitParameterEXT),
    BindTextures: FnPtr::new(loadfn("glBindTextures"), failing::BindTextures),
    BindTransformFeedback: FnPtr::new(loadfn("glBindTransformFeedback"), failing::BindTransformFeedback),
    BindTransformFeedbackNV: FnPtr::new(loadfn("glBindTransformFeedbackNV"), failing::BindTransformFeedbackNV),
    BindVertexArray: FnPtr::new(loadfn("glBindVertexArray"), failing::BindVertexArray),
    BindVertexArrayAPPLE: FnPtr::new(loadfn("glBindVertexArrayAPPLE"), failing::BindVertexArrayAPPLE),
    BindVertexArrayOES: FnPtr::new(loadfn("glBindVertexArrayOES"), failing::BindVertexArrayOES),
    BindVertexBuffer: FnPtr::new(loadfn("glBindVertexBuffer"), failing::BindVertexBuffer),
    BindVertexBuffers: FnPtr::new(loadfn("glBindVertexBuffers"), failing::BindVertexBuffers),
    BindVertexShaderEXT: FnPtr::new(loadfn("glBindVertexShaderEXT"), failing::BindVertexShaderEXT),
    BindVideoCaptureStreamBufferNV: FnPtr::new(loadfn("glBindVideoCaptureStreamBufferNV"), failing::BindVideoCaptureStreamBufferNV),
    BindVideoCaptureStreamTextureNV: FnPtr::new(loadfn("glBindVideoCaptureStreamTextureNV"), failing::BindVideoCaptureStreamTextureNV),
    Binormal3bEXT: FnPtr::new(loadfn("glBinormal3bEXT"), failing::Binormal3bEXT),
    Binormal3bvEXT: FnPtr::new(loadfn("glBinormal3bvEXT"), failing::Binormal3bvEXT),
    Binormal3dEXT: FnPtr::new(loadfn("glBinormal3dEXT"), failing::Binormal3dEXT),
    Binormal3dvEXT: FnPtr::new(loadfn("glBinormal3dvEXT"), failing::Binormal3dvEXT),
    Binormal3fEXT: FnPtr::new(loadfn("glBinormal3fEXT"), failing::Binormal3fEXT),
    Binormal3fvEXT: FnPtr::new(loadfn("glBinormal3fvEXT"), failing::Binormal3fvEXT),
    Binormal3iEXT: FnPtr::new(loadfn("glBinormal3iEXT"), failing::Binormal3iEXT),
    Binormal3ivEXT: FnPtr::new(loadfn("glBinormal3ivEXT"), failing::Binormal3ivEXT),
    Binormal3sEXT: FnPtr::new(loadfn("glBinormal3sEXT"), failing::Binormal3sEXT),
    Binormal3svEXT: FnPtr::new(loadfn("glBinormal3svEXT"), failing::Binormal3svEXT),
    BinormalPointerEXT: FnPtr::new(loadfn("glBinormalPointerEXT"), failing::BinormalPointerEXT),
    Bitmap: FnPtr::new(loadfn("glBitmap"), failing::Bitmap),
    BitmapxOES: FnPtr::new(loadfn("glBitmapxOES"), failing::BitmapxOES),
    BlendColor: FnPtr::new(loadfn("glBlendColor"), failing::BlendColor),
    BlendColorEXT: FnPtr::new(loadfn("glBlendColorEXT"), failing::BlendColorEXT),
    BlendColorxOES: FnPtr::new(loadfn("glBlendColorxOES"), failing::BlendColorxOES),
    BlendEquation: FnPtr::new(loadfn("glBlendEquation"), failing::BlendEquation),
    BlendEquationEXT: FnPtr::new(loadfn("glBlendEquationEXT"), failing::BlendEquationEXT),
    BlendEquationIndexedAMD: FnPtr::new(loadfn("glBlendEquationIndexedAMD"), failing::BlendEquationIndexedAMD),
    BlendEquationOES: FnPtr::new(loadfn("glBlendEquationOES"), failing::BlendEquationOES),
    BlendEquationSeparate: FnPtr::new(loadfn("glBlendEquationSeparate"), failing::BlendEquationSeparate),
    BlendEquationSeparateEXT: FnPtr::new(loadfn("glBlendEquationSeparateEXT"), failing::BlendEquationSeparateEXT),
    BlendEquationSeparateIndexedAMD: FnPtr::new(loadfn("glBlendEquationSeparateIndexedAMD"), failing::BlendEquationSeparateIndexedAMD),
    BlendEquationSeparateOES: FnPtr::new(loadfn("glBlendEquationSeparateOES"), failing::BlendEquationSeparateOES),
    BlendEquationSeparatei: FnPtr::new(loadfn("glBlendEquationSeparatei"), failing::BlendEquationSeparatei),
    BlendEquationSeparateiARB: FnPtr::new(loadfn("glBlendEquationSeparateiARB"), failing::BlendEquationSeparateiARB),
    BlendEquationi: FnPtr::new(loadfn("glBlendEquationi"), failing::BlendEquationi),
    BlendEquationiARB: FnPtr::new(loadfn("glBlendEquationiARB"), failing::BlendEquationiARB),
    BlendFunc: FnPtr::new(loadfn("glBlendFunc"), failing::BlendFunc),
    BlendFuncIndexedAMD: FnPtr::new(loadfn("glBlendFuncIndexedAMD"), failing::BlendFuncIndexedAMD),
    BlendFuncSeparate: FnPtr::new(loadfn("glBlendFuncSeparate"), failing::BlendFuncSeparate),
    BlendFuncSeparateEXT: FnPtr::new(loadfn("glBlendFuncSeparateEXT"), failing::BlendFuncSeparateEXT),
    BlendFuncSeparateINGR: FnPtr::new(loadfn("glBlendFuncSeparateINGR"), failing::BlendFuncSeparateINGR),
    BlendFuncSeparateIndexedAMD: FnPtr::new(loadfn("glBlendFuncSeparateIndexedAMD"), failing::BlendFuncSeparateIndexedAMD),
    BlendFuncSeparateOES: FnPtr::new(loadfn("glBlendFuncSeparateOES"), failing::BlendFuncSeparateOES),
    BlendFuncSeparatei: FnPtr::new(loadfn("glBlendFuncSeparatei"), failing::BlendFuncSeparatei),
    BlendFuncSeparateiARB: FnPtr::new(loadfn("glBlendFuncSeparateiARB"), failing::BlendFuncSeparateiARB),
    BlendFunci: FnPtr::new(loadfn("glBlendFunci"), failing::BlendFunci),
    BlendFunciARB: FnPtr::new(loadfn("glBlendFunciARB"), failing::BlendFunciARB),
    BlendParameteriNV: FnPtr::new(loadfn("glBlendParameteriNV"), failing::BlendParameteriNV),
    BlendBarrierNV: FnPtr::new(loadfn("glBlendBarrierNV"), failing::BlendBarrierNV),
    BlitFramebuffer: FnPtr::new(loadfn("glBlitFramebuffer"), failing::BlitFramebuffer),
    BlitFramebufferANGLE: FnPtr::new(loadfn("glBlitFramebufferANGLE"), failing::BlitFramebufferANGLE),
    BlitFramebufferEXT: FnPtr::new(loadfn("glBlitFramebufferEXT"), failing::BlitFramebufferEXT),
    BlitFramebufferNV: FnPtr::new(loadfn("glBlitFramebufferNV"), failing::BlitFramebufferNV),
    BufferAddressRangeNV: FnPtr::new(loadfn("glBufferAddressRangeNV"), failing::BufferAddressRangeNV),
    BufferData: FnPtr::new(loadfn("glBufferData"), failing::BufferData),
    BufferDataARB: FnPtr::new(loadfn("glBufferDataARB"), failing::BufferDataARB),
    BufferParameteriAPPLE: FnPtr::new(loadfn("glBufferParameteriAPPLE"), failing::BufferParameteriAPPLE),
    BufferStorage: FnPtr::new(loadfn("glBufferStorage"), failing::BufferStorage),
    BufferSubData: FnPtr::new(loadfn("glBufferSubData"), failing::BufferSubData),
    BufferSubDataARB: FnPtr::new(loadfn("glBufferSubDataARB"), failing::BufferSubDataARB),
    CallList: FnPtr::new(loadfn("glCallList"), failing::CallList),
    CallLists: FnPtr::new(loadfn("glCallLists"), failing::CallLists),
    CheckFramebufferStatus: FnPtr::new(loadfn("glCheckFramebufferStatus"), failing::CheckFramebufferStatus),
    CheckFramebufferStatusEXT: FnPtr::new(loadfn("glCheckFramebufferStatusEXT"), failing::CheckFramebufferStatusEXT),
    CheckFramebufferStatusOES: FnPtr::new(loadfn("glCheckFramebufferStatusOES"), failing::CheckFramebufferStatusOES),
    CheckNamedFramebufferStatusEXT: FnPtr::new(loadfn("glCheckNamedFramebufferStatusEXT"), failing::CheckNamedFramebufferStatusEXT),
    ClampColor: FnPtr::new(loadfn("glClampColor"), failing::ClampColor),
    ClampColorARB: FnPtr::new(loadfn("glClampColorARB"), failing::ClampColorARB),
    Clear: FnPtr::new(loadfn("glClear"), failing::Clear),
    ClearAccum: FnPtr::new(loadfn("glClearAccum"), failing::ClearAccum),
    ClearAccumxOES: FnPtr::new(loadfn("glClearAccumxOES"), failing::ClearAccumxOES),
    ClearBufferData: FnPtr::new(loadfn("glClearBufferData"), failing::ClearBufferData),
    ClearBufferSubData: FnPtr::new(loadfn("glClearBufferSubData"), failing::ClearBufferSubData),
    ClearBufferfi: FnPtr::new(loadfn("glClearBufferfi"), failing::ClearBufferfi),
    ClearBufferfv: FnPtr::new(loadfn("glClearBufferfv"), failing::ClearBufferfv),
    ClearBufferiv: FnPtr::new(loadfn("glClearBufferiv"), failing::ClearBufferiv),
    ClearBufferuiv: FnPtr::new(loadfn("glClearBufferuiv"), failing::ClearBufferuiv),
    ClearColor: FnPtr::new(loadfn("glClearColor"), failing::ClearColor),
    ClearColorIiEXT: FnPtr::new(loadfn("glClearColorIiEXT"), failing::ClearColorIiEXT),
    ClearColorIuiEXT: FnPtr::new(loadfn("glClearColorIuiEXT"), failing::ClearColorIuiEXT),
    ClearColorx: FnPtr::new(loadfn("glClearColorx"), failing::ClearColorx),
    ClearColorxOES: FnPtr::new(loadfn("glClearColorxOES"), failing::ClearColorxOES),
    ClearDepth: FnPtr::new(loadfn("glClearDepth"), failing::ClearDepth),
    ClearDepthdNV: FnPtr::new(loadfn("glClearDepthdNV"), failing::ClearDepthdNV),
    ClearDepthf: FnPtr::new(loadfn("glClearDepthf"), failing::ClearDepthf),
    ClearDepthfOES: FnPtr::new(loadfn("glClearDepthfOES"), failing::ClearDepthfOES),
    ClearDepthx: FnPtr::new(loadfn("glClearDepthx"), failing::ClearDepthx),
    ClearDepthxOES: FnPtr::new(loadfn("glClearDepthxOES"), failing::ClearDepthxOES),
    ClearIndex: FnPtr::new(loadfn("glClearIndex"), failing::ClearIndex),
    ClearNamedBufferDataEXT: FnPtr::new(loadfn("glClearNamedBufferDataEXT"), failing::ClearNamedBufferDataEXT),
    ClearNamedBufferSubDataEXT: FnPtr::new(loadfn("glClearNamedBufferSubDataEXT"), failing::ClearNamedBufferSubDataEXT),
    ClearStencil: FnPtr::new(loadfn("glClearStencil"), failing::ClearStencil),
    ClearTexImage: FnPtr::new(loadfn("glClearTexImage"), failing::ClearTexImage),
    ClearTexSubImage: FnPtr::new(loadfn("glClearTexSubImage"), failing::ClearTexSubImage),
    ClientActiveTexture: FnPtr::new(loadfn("glClientActiveTexture"), failing::ClientActiveTexture),
    ClientActiveTextureARB: FnPtr::new(loadfn("glClientActiveTextureARB"), failing::ClientActiveTextureARB),
    ClientActiveVertexStreamATI: FnPtr::new(loadfn("glClientActiveVertexStreamATI"), failing::ClientActiveVertexStreamATI),
    ClientAttribDefaultEXT: FnPtr::new(loadfn("glClientAttribDefaultEXT"), failing::ClientAttribDefaultEXT),
    ClientWaitSync: FnPtr::new(loadfn("glClientWaitSync"), failing::ClientWaitSync),
    ClientWaitSyncAPPLE: FnPtr::new(loadfn("glClientWaitSyncAPPLE"), failing::ClientWaitSyncAPPLE),
    ClipControlARB: FnPtr::new(loadfn("glClipControlARB"), failing::ClipControlARB),
    ClipPlane: FnPtr::new(loadfn("glClipPlane"), failing::ClipPlane),
    ClipPlanef: FnPtr::new(loadfn("glClipPlanef"), failing::ClipPlanef),
    ClipPlanefIMG: FnPtr::new(loadfn("glClipPlanefIMG"), failing::ClipPlanefIMG),
    ClipPlanefOES: FnPtr::new(loadfn("glClipPlanefOES"), failing::ClipPlanefOES),
    ClipPlanex: FnPtr::new(loadfn("glClipPlanex"), failing::ClipPlanex),
    ClipPlanexIMG: FnPtr::new(loadfn("glClipPlanexIMG"), failing::ClipPlanexIMG),
    ClipPlanexOES: FnPtr::new(loadfn("glClipPlanexOES"), failing::ClipPlanexOES),
    Color3b: FnPtr::new(loadfn("glColor3b"), failing::Color3b),
    Color3bv: FnPtr::new(loadfn("glColor3bv"), failing::Color3bv),
    Color3d: FnPtr::new(loadfn("glColor3d"), failing::Color3d),
    Color3dv: FnPtr::new(loadfn("glColor3dv"), failing::Color3dv),
    Color3f: FnPtr::new(loadfn("glColor3f"), failing::Color3f),
    Color3fVertex3fSUN: FnPtr::new(loadfn("glColor3fVertex3fSUN"), failing::Color3fVertex3fSUN),
    Color3fVertex3fvSUN: FnPtr::new(loadfn("glColor3fVertex3fvSUN"), failing::Color3fVertex3fvSUN),
    Color3fv: FnPtr::new(loadfn("glColor3fv"), failing::Color3fv),
    Color3hNV: FnPtr::new(loadfn("glColor3hNV"), failing::Color3hNV),
    Color3hvNV: FnPtr::new(loadfn("glColor3hvNV"), failing::Color3hvNV),
    Color3i: FnPtr::new(loadfn("glColor3i"), failing::Color3i),
    Color3iv: FnPtr::new(loadfn("glColor3iv"), failing::Color3iv),
    Color3s: FnPtr::new(loadfn("glColor3s"), failing::Color3s),
    Color3sv: FnPtr::new(loadfn("glColor3sv"), failing::Color3sv),
    Color3ub: FnPtr::new(loadfn("glColor3ub"), failing::Color3ub),
    Color3ubv: FnPtr::new(loadfn("glColor3ubv"), failing::Color3ubv),
    Color3ui: FnPtr::new(loadfn("glColor3ui"), failing::Color3ui),
    Color3uiv: FnPtr::new(loadfn("glColor3uiv"), failing::Color3uiv),
    Color3us: FnPtr::new(loadfn("glColor3us"), failing::Color3us),
    Color3usv: FnPtr::new(loadfn("glColor3usv"), failing::Color3usv),
    Color3xOES: FnPtr::new(loadfn("glColor3xOES"), failing::Color3xOES),
    Color3xvOES: FnPtr::new(loadfn("glColor3xvOES"), failing::Color3xvOES),
    Color4b: FnPtr::new(loadfn("glColor4b"), failing::Color4b),
    Color4bv: FnPtr::new(loadfn("glColor4bv"), failing::Color4bv),
    Color4d: FnPtr::new(loadfn("glColor4d"), failing::Color4d),
    Color4dv: FnPtr::new(loadfn("glColor4dv"), failing::Color4dv),
    Color4f: FnPtr::new(loadfn("glColor4f"), failing::Color4f),
    Color4fNormal3fVertex3fSUN: FnPtr::new(loadfn("glColor4fNormal3fVertex3fSUN"), failing::Color4fNormal3fVertex3fSUN),
    Color4fNormal3fVertex3fvSUN: FnPtr::new(loadfn("glColor4fNormal3fVertex3fvSUN"), failing::Color4fNormal3fVertex3fvSUN),
    Color4fv: FnPtr::new(loadfn("glColor4fv"), failing::Color4fv),
    Color4hNV: FnPtr::new(loadfn("glColor4hNV"), failing::Color4hNV),
    Color4hvNV: FnPtr::new(loadfn("glColor4hvNV"), failing::Color4hvNV),
    Color4i: FnPtr::new(loadfn("glColor4i"), failing::Color4i),
    Color4iv: FnPtr::new(loadfn("glColor4iv"), failing::Color4iv),
    Color4s: FnPtr::new(loadfn("glColor4s"), failing::Color4s),
    Color4sv: FnPtr::new(loadfn("glColor4sv"), failing::Color4sv),
    Color4ub: FnPtr::new(loadfn("glColor4ub"), failing::Color4ub),
    Color4ubVertex2fSUN: FnPtr::new(loadfn("glColor4ubVertex2fSUN"), failing::Color4ubVertex2fSUN),
    Color4ubVertex2fvSUN: FnPtr::new(loadfn("glColor4ubVertex2fvSUN"), failing::Color4ubVertex2fvSUN),
    Color4ubVertex3fSUN: FnPtr::new(loadfn("glColor4ubVertex3fSUN"), failing::Color4ubVertex3fSUN),
    Color4ubVertex3fvSUN: FnPtr::new(loadfn("glColor4ubVertex3fvSUN"), failing::Color4ubVertex3fvSUN),
    Color4ubv: FnPtr::new(loadfn("glColor4ubv"), failing::Color4ubv),
    Color4ui: FnPtr::new(loadfn("glColor4ui"), failing::Color4ui),
    Color4uiv: FnPtr::new(loadfn("glColor4uiv"), failing::Color4uiv),
    Color4us: FnPtr::new(loadfn("glColor4us"), failing::Color4us),
    Color4usv: FnPtr::new(loadfn("glColor4usv"), failing::Color4usv),
    Color4x: FnPtr::new(loadfn("glColor4x"), failing::Color4x),
    Color4xOES: FnPtr::new(loadfn("glColor4xOES"), failing::Color4xOES),
    Color4xvOES: FnPtr::new(loadfn("glColor4xvOES"), failing::Color4xvOES),
    ColorFormatNV: FnPtr::new(loadfn("glColorFormatNV"), failing::ColorFormatNV),
    ColorFragmentOp1ATI: FnPtr::new(loadfn("glColorFragmentOp1ATI"), failing::ColorFragmentOp1ATI),
    ColorFragmentOp2ATI: FnPtr::new(loadfn("glColorFragmentOp2ATI"), failing::ColorFragmentOp2ATI),
    ColorFragmentOp3ATI: FnPtr::new(loadfn("glColorFragmentOp3ATI"), failing::ColorFragmentOp3ATI),
    ColorMask: FnPtr::new(loadfn("glColorMask"), failing::ColorMask),
    ColorMaskIndexedEXT: FnPtr::new(loadfn("glColorMaskIndexedEXT"), failing::ColorMaskIndexedEXT),
    ColorMaski: FnPtr::new(loadfn("glColorMaski"), failing::ColorMaski),
    ColorMaterial: FnPtr::new(loadfn("glColorMaterial"), failing::ColorMaterial),
    ColorP3ui: FnPtr::new(loadfn("glColorP3ui"), failing::ColorP3ui),
    ColorP3uiv: FnPtr::new(loadfn("glColorP3uiv"), failing::ColorP3uiv),
    ColorP4ui: FnPtr::new(loadfn("glColorP4ui"), failing::ColorP4ui),
    ColorP4uiv: FnPtr::new(loadfn("glColorP4uiv"), failing::ColorP4uiv),
    ColorPointer: FnPtr::new(loadfn("glColorPointer"), failing::ColorPointer),
    ColorPointerEXT: FnPtr::new(loadfn("glColorPointerEXT"), failing::ColorPointerEXT),
    ColorPointerListIBM: FnPtr::new(loadfn("glColorPointerListIBM"), failing::ColorPointerListIBM),
    ColorPointervINTEL: FnPtr::new(loadfn("glColorPointervINTEL"), failing::ColorPointervINTEL),
    ColorSubTable: FnPtr::new(loadfn("glColorSubTable"), failing::ColorSubTable),
    ColorSubTableEXT: FnPtr::new(loadfn("glColorSubTableEXT"), failing::ColorSubTableEXT),
    ColorTable: FnPtr::new(loadfn("glColorTable"), failing::ColorTable),
    ColorTableEXT: FnPtr::new(loadfn("glColorTableEXT"), failing::ColorTableEXT),
    ColorTableParameterfv: FnPtr::new(loadfn("glColorTableParameterfv"), failing::ColorTableParameterfv),
    ColorTableParameterfvSGI: FnPtr::new(loadfn("glColorTableParameterfvSGI"), failing::ColorTableParameterfvSGI),
    ColorTableParameteriv: FnPtr::new(loadfn("glColorTableParameteriv"), failing::ColorTableParameteriv),
    ColorTableParameterivSGI: FnPtr::new(loadfn("glColorTableParameterivSGI"), failing::ColorTableParameterivSGI),
    ColorTableSGI: FnPtr::new(loadfn("glColorTableSGI"), failing::ColorTableSGI),
    CombinerInputNV: FnPtr::new(loadfn("glCombinerInputNV"), failing::CombinerInputNV),
    CombinerOutputNV: FnPtr::new(loadfn("glCombinerOutputNV"), failing::CombinerOutputNV),
    CombinerParameterfNV: FnPtr::new(loadfn("glCombinerParameterfNV"), failing::CombinerParameterfNV),
    CombinerParameterfvNV: FnPtr::new(loadfn("glCombinerParameterfvNV"), failing::CombinerParameterfvNV),
    CombinerParameteriNV: FnPtr::new(loadfn("glCombinerParameteriNV"), failing::CombinerParameteriNV),
    CombinerParameterivNV: FnPtr::new(loadfn("glCombinerParameterivNV"), failing::CombinerParameterivNV),
    CombinerStageParameterfvNV: FnPtr::new(loadfn("glCombinerStageParameterfvNV"), failing::CombinerStageParameterfvNV),
    CompileShader: FnPtr::new(loadfn("glCompileShader"), failing::CompileShader),
    CompileShaderARB: FnPtr::new(loadfn("glCompileShaderARB"), failing::CompileShaderARB),
    CompileShaderIncludeARB: FnPtr::new(loadfn("glCompileShaderIncludeARB"), failing::CompileShaderIncludeARB),
    CompressedMultiTexImage1DEXT: FnPtr::new(loadfn("glCompressedMultiTexImage1DEXT"), failing::CompressedMultiTexImage1DEXT),
    CompressedMultiTexImage2DEXT: FnPtr::new(loadfn("glCompressedMultiTexImage2DEXT"), failing::CompressedMultiTexImage2DEXT),
    CompressedMultiTexImage3DEXT: FnPtr::new(loadfn("glCompressedMultiTexImage3DEXT"), failing::CompressedMultiTexImage3DEXT),
    CompressedMultiTexSubImage1DEXT: FnPtr::new(loadfn("glCompressedMultiTexSubImage1DEXT"), failing::CompressedMultiTexSubImage1DEXT),
    CompressedMultiTexSubImage2DEXT: FnPtr::new(loadfn("glCompressedMultiTexSubImage2DEXT"), failing::CompressedMultiTexSubImage2DEXT),
    CompressedMultiTexSubImage3DEXT: FnPtr::new(loadfn("glCompressedMultiTexSubImage3DEXT"), failing::CompressedMultiTexSubImage3DEXT),
    CompressedTexImage1D: FnPtr::new(loadfn("glCompressedTexImage1D"), failing::CompressedTexImage1D),
    CompressedTexImage1DARB: FnPtr::new(loadfn("glCompressedTexImage1DARB"), failing::CompressedTexImage1DARB),
    CompressedTexImage2D: FnPtr::new(loadfn("glCompressedTexImage2D"), failing::CompressedTexImage2D),
    CompressedTexImage2DARB: FnPtr::new(loadfn("glCompressedTexImage2DARB"), failing::CompressedTexImage2DARB),
    CompressedTexImage3D: FnPtr::new(loadfn("glCompressedTexImage3D"), failing::CompressedTexImage3D),
    CompressedTexImage3DARB: FnPtr::new(loadfn("glCompressedTexImage3DARB"), failing::CompressedTexImage3DARB),
    CompressedTexImage3DOES: FnPtr::new(loadfn("glCompressedTexImage3DOES"), failing::CompressedTexImage3DOES),
    CompressedTexSubImage1D: FnPtr::new(loadfn("glCompressedTexSubImage1D"), failing::CompressedTexSubImage1D),
    CompressedTexSubImage1DARB: FnPtr::new(loadfn("glCompressedTexSubImage1DARB"), failing::CompressedTexSubImage1DARB),
    CompressedTexSubImage2D: FnPtr::new(loadfn("glCompressedTexSubImage2D"), failing::CompressedTexSubImage2D),
    CompressedTexSubImage2DARB: FnPtr::new(loadfn("glCompressedTexSubImage2DARB"), failing::CompressedTexSubImage2DARB),
    CompressedTexSubImage3D: FnPtr::new(loadfn("glCompressedTexSubImage3D"), failing::CompressedTexSubImage3D),
    CompressedTexSubImage3DARB: FnPtr::new(loadfn("glCompressedTexSubImage3DARB"), failing::CompressedTexSubImage3DARB),
    CompressedTexSubImage3DOES: FnPtr::new(loadfn("glCompressedTexSubImage3DOES"), failing::CompressedTexSubImage3DOES),
    CompressedTextureImage1DEXT: FnPtr::new(loadfn("glCompressedTextureImage1DEXT"), failing::CompressedTextureImage1DEXT),
    CompressedTextureImage2DEXT: FnPtr::new(loadfn("glCompressedTextureImage2DEXT"), failing::CompressedTextureImage2DEXT),
    CompressedTextureImage3DEXT: FnPtr::new(loadfn("glCompressedTextureImage3DEXT"), failing::CompressedTextureImage3DEXT),
    CompressedTextureSubImage1DEXT: FnPtr::new(loadfn("glCompressedTextureSubImage1DEXT"), failing::CompressedTextureSubImage1DEXT),
    CompressedTextureSubImage2DEXT: FnPtr::new(loadfn("glCompressedTextureSubImage2DEXT"), failing::CompressedTextureSubImage2DEXT),
    CompressedTextureSubImage3DEXT: FnPtr::new(loadfn("glCompressedTextureSubImage3DEXT"), failing::CompressedTextureSubImage3DEXT),
    ConvolutionFilter1D: FnPtr::new(loadfn("glConvolutionFilter1D"), failing::ConvolutionFilter1D),
    ConvolutionFilter1DEXT: FnPtr::new(loadfn("glConvolutionFilter1DEXT"), failing::ConvolutionFilter1DEXT),
    ConvolutionFilter2D: FnPtr::new(loadfn("glConvolutionFilter2D"), failing::ConvolutionFilter2D),
    ConvolutionFilter2DEXT: FnPtr::new(loadfn("glConvolutionFilter2DEXT"), failing::ConvolutionFilter2DEXT),
    ConvolutionParameterf: FnPtr::new(loadfn("glConvolutionParameterf"), failing::ConvolutionParameterf),
    ConvolutionParameterfEXT: FnPtr::new(loadfn("glConvolutionParameterfEXT"), failing::ConvolutionParameterfEXT),
    ConvolutionParameterfv: FnPtr::new(loadfn("glConvolutionParameterfv"), failing::ConvolutionParameterfv),
    ConvolutionParameterfvEXT: FnPtr::new(loadfn("glConvolutionParameterfvEXT"), failing::ConvolutionParameterfvEXT),
    ConvolutionParameteri: FnPtr::new(loadfn("glConvolutionParameteri"), failing::ConvolutionParameteri),
    ConvolutionParameteriEXT: FnPtr::new(loadfn("glConvolutionParameteriEXT"), failing::ConvolutionParameteriEXT),
    ConvolutionParameteriv: FnPtr::new(loadfn("glConvolutionParameteriv"), failing::ConvolutionParameteriv),
    ConvolutionParameterivEXT: FnPtr::new(loadfn("glConvolutionParameterivEXT"), failing::ConvolutionParameterivEXT),
    ConvolutionParameterxOES: FnPtr::new(loadfn("glConvolutionParameterxOES"), failing::ConvolutionParameterxOES),
    ConvolutionParameterxvOES: FnPtr::new(loadfn("glConvolutionParameterxvOES"), failing::ConvolutionParameterxvOES),
    CopyBufferSubData: FnPtr::new(loadfn("glCopyBufferSubData"), failing::CopyBufferSubData),
    CopyColorSubTable: FnPtr::new(loadfn("glCopyColorSubTable"), failing::CopyColorSubTable),
    CopyColorSubTableEXT: FnPtr::new(loadfn("glCopyColorSubTableEXT"), failing::CopyColorSubTableEXT),
    CopyColorTable: FnPtr::new(loadfn("glCopyColorTable"), failing::CopyColorTable),
    CopyColorTableSGI: FnPtr::new(loadfn("glCopyColorTableSGI"), failing::CopyColorTableSGI),
    CopyConvolutionFilter1D: FnPtr::new(loadfn("glCopyConvolutionFilter1D"), failing::CopyConvolutionFilter1D),
    CopyConvolutionFilter1DEXT: FnPtr::new(loadfn("glCopyConvolutionFilter1DEXT"), failing::CopyConvolutionFilter1DEXT),
    CopyConvolutionFilter2D: FnPtr::new(loadfn("glCopyConvolutionFilter2D"), failing::CopyConvolutionFilter2D),
    CopyConvolutionFilter2DEXT: FnPtr::new(loadfn("glCopyConvolutionFilter2DEXT"), failing::CopyConvolutionFilter2DEXT),
    CopyImageSubData: FnPtr::new(loadfn("glCopyImageSubData"), failing::CopyImageSubData),
    CopyImageSubDataNV: FnPtr::new(loadfn("glCopyImageSubDataNV"), failing::CopyImageSubDataNV),
    CopyMultiTexImage1DEXT: FnPtr::new(loadfn("glCopyMultiTexImage1DEXT"), failing::CopyMultiTexImage1DEXT),
    CopyMultiTexImage2DEXT: FnPtr::new(loadfn("glCopyMultiTexImage2DEXT"), failing::CopyMultiTexImage2DEXT),
    CopyMultiTexSubImage1DEXT: FnPtr::new(loadfn("glCopyMultiTexSubImage1DEXT"), failing::CopyMultiTexSubImage1DEXT),
    CopyMultiTexSubImage2DEXT: FnPtr::new(loadfn("glCopyMultiTexSubImage2DEXT"), failing::CopyMultiTexSubImage2DEXT),
    CopyMultiTexSubImage3DEXT: FnPtr::new(loadfn("glCopyMultiTexSubImage3DEXT"), failing::CopyMultiTexSubImage3DEXT),
    CopyPathNV: FnPtr::new(loadfn("glCopyPathNV"), failing::CopyPathNV),
    CopyPixels: FnPtr::new(loadfn("glCopyPixels"), failing::CopyPixels),
    CopyTexImage1D: FnPtr::new(loadfn("glCopyTexImage1D"), failing::CopyTexImage1D),
    CopyTexImage1DEXT: FnPtr::new(loadfn("glCopyTexImage1DEXT"), failing::CopyTexImage1DEXT),
    CopyTexImage2D: FnPtr::new(loadfn("glCopyTexImage2D"), failing::CopyTexImage2D),
    CopyTexImage2DEXT: FnPtr::new(loadfn("glCopyTexImage2DEXT"), failing::CopyTexImage2DEXT),
    CopyTexSubImage1D: FnPtr::new(loadfn("glCopyTexSubImage1D"), failing::CopyTexSubImage1D),
    CopyTexSubImage1DEXT: FnPtr::new(loadfn("glCopyTexSubImage1DEXT"), failing::CopyTexSubImage1DEXT),
    CopyTexSubImage2D: FnPtr::new(loadfn("glCopyTexSubImage2D"), failing::CopyTexSubImage2D),
    CopyTexSubImage2DEXT: FnPtr::new(loadfn("glCopyTexSubImage2DEXT"), failing::CopyTexSubImage2DEXT),
    CopyTexSubImage3D: FnPtr::new(loadfn("glCopyTexSubImage3D"), failing::CopyTexSubImage3D),
    CopyTexSubImage3DEXT: FnPtr::new(loadfn("glCopyTexSubImage3DEXT"), failing::CopyTexSubImage3DEXT),
    CopyTexSubImage3DOES: FnPtr::new(loadfn("glCopyTexSubImage3DOES"), failing::CopyTexSubImage3DOES),
    CopyTextureImage1DEXT: FnPtr::new(loadfn("glCopyTextureImage1DEXT"), failing::CopyTextureImage1DEXT),
    CopyTextureImage2DEXT: FnPtr::new(loadfn("glCopyTextureImage2DEXT"), failing::CopyTextureImage2DEXT),
    CopyTextureLevelsAPPLE: FnPtr::new(loadfn("glCopyTextureLevelsAPPLE"), failing::CopyTextureLevelsAPPLE),
    CopyTextureSubImage1DEXT: FnPtr::new(loadfn("glCopyTextureSubImage1DEXT"), failing::CopyTextureSubImage1DEXT),
    CopyTextureSubImage2DEXT: FnPtr::new(loadfn("glCopyTextureSubImage2DEXT"), failing::CopyTextureSubImage2DEXT),
    CopyTextureSubImage3DEXT: FnPtr::new(loadfn("glCopyTextureSubImage3DEXT"), failing::CopyTextureSubImage3DEXT),
    CoverFillPathInstancedNV: FnPtr::new(loadfn("glCoverFillPathInstancedNV"), failing::CoverFillPathInstancedNV),
    CoverFillPathNV: FnPtr::new(loadfn("glCoverFillPathNV"), failing::CoverFillPathNV),
    CoverStrokePathInstancedNV: FnPtr::new(loadfn("glCoverStrokePathInstancedNV"), failing::CoverStrokePathInstancedNV),
    CoverStrokePathNV: FnPtr::new(loadfn("glCoverStrokePathNV"), failing::CoverStrokePathNV),
    CoverageMaskNV: FnPtr::new(loadfn("glCoverageMaskNV"), failing::CoverageMaskNV),
    CoverageOperationNV: FnPtr::new(loadfn("glCoverageOperationNV"), failing::CoverageOperationNV),
    CreateProgram: FnPtr::new(loadfn("glCreateProgram"), failing::CreateProgram),
    CreateProgramObjectARB: FnPtr::new(loadfn("glCreateProgramObjectARB"), failing::CreateProgramObjectARB),
    CreateShader: FnPtr::new(loadfn("glCreateShader"), failing::CreateShader),
    CreateShaderObjectARB: FnPtr::new(loadfn("glCreateShaderObjectARB"), failing::CreateShaderObjectARB),
    CreateShaderProgramEXT: FnPtr::new(loadfn("glCreateShaderProgramEXT"), failing::CreateShaderProgramEXT),
    CreateShaderProgramv: FnPtr::new(loadfn("glCreateShaderProgramv"), failing::CreateShaderProgramv),
    CreateShaderProgramvEXT: FnPtr::new(loadfn("glCreateShaderProgramvEXT"), failing::CreateShaderProgramvEXT),
    CreateSyncFromCLeventARB: FnPtr::new(loadfn("glCreateSyncFromCLeventARB"), failing::CreateSyncFromCLeventARB),
    CullFace: FnPtr::new(loadfn("glCullFace"), failing::CullFace),
    CullParameterdvEXT: FnPtr::new(loadfn("glCullParameterdvEXT"), failing::CullParameterdvEXT),
    CullParameterfvEXT: FnPtr::new(loadfn("glCullParameterfvEXT"), failing::CullParameterfvEXT),
    CurrentPaletteMatrixARB: FnPtr::new(loadfn("glCurrentPaletteMatrixARB"), failing::CurrentPaletteMatrixARB),
    CurrentPaletteMatrixOES: FnPtr::new(loadfn("glCurrentPaletteMatrixOES"), failing::CurrentPaletteMatrixOES),
    DebugMessageCallback: FnPtr::new(loadfn("glDebugMessageCallback"), failing::DebugMessageCallback),
    DebugMessageCallbackAMD: FnPtr::new(loadfn("glDebugMessageCallbackAMD"), failing::DebugMessageCallbackAMD),
    DebugMessageCallbackARB: FnPtr::new(loadfn("glDebugMessageCallbackARB"), failing::DebugMessageCallbackARB),
    DebugMessageCallbackKHR: FnPtr::new(loadfn("glDebugMessageCallbackKHR"), failing::DebugMessageCallbackKHR),
    DebugMessageControl: FnPtr::new(loadfn("glDebugMessageControl"), failing::DebugMessageControl),
    DebugMessageControlARB: FnPtr::new(loadfn("glDebugMessageControlARB"), failing::DebugMessageControlARB),
    DebugMessageControlKHR: FnPtr::new(loadfn("glDebugMessageControlKHR"), failing::DebugMessageControlKHR),
    DebugMessageEnableAMD: FnPtr::new(loadfn("glDebugMessageEnableAMD"), failing::DebugMessageEnableAMD),
    DebugMessageInsert: FnPtr::new(loadfn("glDebugMessageInsert"), failing::DebugMessageInsert),
    DebugMessageInsertAMD: FnPtr::new(loadfn("glDebugMessageInsertAMD"), failing::DebugMessageInsertAMD),
    DebugMessageInsertARB: FnPtr::new(loadfn("glDebugMessageInsertARB"), failing::DebugMessageInsertARB),
    DebugMessageInsertKHR: FnPtr::new(loadfn("glDebugMessageInsertKHR"), failing::DebugMessageInsertKHR),
    DeformSGIX: FnPtr::new(loadfn("glDeformSGIX"), failing::DeformSGIX),
    DeformationMap3dSGIX: FnPtr::new(loadfn("glDeformationMap3dSGIX"), failing::DeformationMap3dSGIX),
    DeformationMap3fSGIX: FnPtr::new(loadfn("glDeformationMap3fSGIX"), failing::DeformationMap3fSGIX),
    DeleteAsyncMarkersSGIX: FnPtr::new(loadfn("glDeleteAsyncMarkersSGIX"), failing::DeleteAsyncMarkersSGIX),
    DeleteBuffers: FnPtr::new(loadfn("glDeleteBuffers"), failing::DeleteBuffers),
    DeleteBuffersARB: FnPtr::new(loadfn("glDeleteBuffersARB"), failing::DeleteBuffersARB),
    DeleteFencesAPPLE: FnPtr::new(loadfn("glDeleteFencesAPPLE"), failing::DeleteFencesAPPLE),
    DeleteFencesNV: FnPtr::new(loadfn("glDeleteFencesNV"), failing::DeleteFencesNV),
    DeleteFragmentShaderATI: FnPtr::new(loadfn("glDeleteFragmentShaderATI"), failing::DeleteFragmentShaderATI),
    DeleteFramebuffers: FnPtr::new(loadfn("glDeleteFramebuffers"), failing::DeleteFramebuffers),
    DeleteFramebuffersEXT: FnPtr::new(loadfn("glDeleteFramebuffersEXT"), failing::DeleteFramebuffersEXT),
    DeleteFramebuffersOES: FnPtr::new(loadfn("glDeleteFramebuffersOES"), failing::DeleteFramebuffersOES),
    DeleteLists: FnPtr::new(loadfn("glDeleteLists"), failing::DeleteLists),
    DeleteNamedStringARB: FnPtr::new(loadfn("glDeleteNamedStringARB"), failing::DeleteNamedStringARB),
    DeleteNamesAMD: FnPtr::new(loadfn("glDeleteNamesAMD"), failing::DeleteNamesAMD),
    DeleteObjectARB: FnPtr::new(loadfn("glDeleteObjectARB"), failing::DeleteObjectARB),
    DeleteOcclusionQueriesNV: FnPtr::new(loadfn("glDeleteOcclusionQueriesNV"), failing::DeleteOcclusionQueriesNV),
    DeletePathsNV: FnPtr::new(loadfn("glDeletePathsNV"), failing::DeletePathsNV),
    DeletePerfMonitorsAMD: FnPtr::new(loadfn("glDeletePerfMonitorsAMD"), failing::DeletePerfMonitorsAMD),
    DeleteProgram: FnPtr::new(loadfn("glDeleteProgram"), failing::DeleteProgram),
    DeleteProgramPipelines: FnPtr::new(loadfn("glDeleteProgramPipelines"), failing::DeleteProgramPipelines),
    DeleteProgramPipelinesEXT: FnPtr::new(loadfn("glDeleteProgramPipelinesEXT"), failing::DeleteProgramPipelinesEXT),
    DeleteProgramsARB: FnPtr::new(loadfn("glDeleteProgramsARB"), failing::DeleteProgramsARB),
    DeleteProgramsNV: FnPtr::new(loadfn("glDeleteProgramsNV"), failing::DeleteProgramsNV),
    DeleteQueries: FnPtr::new(loadfn("glDeleteQueries"), failing::DeleteQueries),
    DeleteQueriesARB: FnPtr::new(loadfn("glDeleteQueriesARB"), failing::DeleteQueriesARB),
    DeleteQueriesEXT: FnPtr::new(loadfn("glDeleteQueriesEXT"), failing::DeleteQueriesEXT),
    DeleteRenderbuffers: FnPtr::new(loadfn("glDeleteRenderbuffers"), failing::DeleteRenderbuffers),
    DeleteRenderbuffersEXT: FnPtr::new(loadfn("glDeleteRenderbuffersEXT"), failing::DeleteRenderbuffersEXT),
    DeleteRenderbuffersOES: FnPtr::new(loadfn("glDeleteRenderbuffersOES"), failing::DeleteRenderbuffersOES),
    DeleteSamplers: FnPtr::new(loadfn("glDeleteSamplers"), failing::DeleteSamplers),
    DeleteShader: FnPtr::new(loadfn("glDeleteShader"), failing::DeleteShader),
    DeleteSync: FnPtr::new(loadfn("glDeleteSync"), failing::DeleteSync),
    DeleteSyncAPPLE: FnPtr::new(loadfn("glDeleteSyncAPPLE"), failing::DeleteSyncAPPLE),
    DeleteTextures: FnPtr::new(loadfn("glDeleteTextures"), failing::DeleteTextures),
    DeleteTexturesEXT: FnPtr::new(loadfn("glDeleteTexturesEXT"), failing::DeleteTexturesEXT),
    DeleteTransformFeedbacks: FnPtr::new(loadfn("glDeleteTransformFeedbacks"), failing::DeleteTransformFeedbacks),
    DeleteTransformFeedbacksNV: FnPtr::new(loadfn("glDeleteTransformFeedbacksNV"), failing::DeleteTransformFeedbacksNV),
    DeleteVertexArrays: FnPtr::new(loadfn("glDeleteVertexArrays"), failing::DeleteVertexArrays),
    DeleteVertexArraysAPPLE: FnPtr::new(loadfn("glDeleteVertexArraysAPPLE"), failing::DeleteVertexArraysAPPLE),
    DeleteVertexArraysOES: FnPtr::new(loadfn("glDeleteVertexArraysOES"), failing::DeleteVertexArraysOES),
    DeleteVertexShaderEXT: FnPtr::new(loadfn("glDeleteVertexShaderEXT"), failing::DeleteVertexShaderEXT),
    DepthBoundsEXT: FnPtr::new(loadfn("glDepthBoundsEXT"), failing::DepthBoundsEXT),
    DepthBoundsdNV: FnPtr::new(loadfn("glDepthBoundsdNV"), failing::DepthBoundsdNV),
    DepthFunc: FnPtr::new(loadfn("glDepthFunc"), failing::DepthFunc),
    DepthMask: FnPtr::new(loadfn("glDepthMask"), failing::DepthMask),
    DepthRange: FnPtr::new(loadfn("glDepthRange"), failing::DepthRange),
    DepthRangeArrayv: FnPtr::new(loadfn("glDepthRangeArrayv"), failing::DepthRangeArrayv),
    DepthRangeIndexed: FnPtr::new(loadfn("glDepthRangeIndexed"), failing::DepthRangeIndexed),
    DepthRangedNV: FnPtr::new(loadfn("glDepthRangedNV"), failing::DepthRangedNV),
    DepthRangef: FnPtr::new(loadfn("glDepthRangef"), failing::DepthRangef),
    DepthRangefOES: FnPtr::new(loadfn("glDepthRangefOES"), failing::DepthRangefOES),
    DepthRangex: FnPtr::new(loadfn("glDepthRangex"), failing::DepthRangex),
    DepthRangexOES: FnPtr::new(loadfn("glDepthRangexOES"), failing::DepthRangexOES),
    DetachObjectARB: FnPtr::new(loadfn("glDetachObjectARB"), failing::DetachObjectARB),
    DetachShader: FnPtr::new(loadfn("glDetachShader"), failing::DetachShader),
    DetailTexFuncSGIS: FnPtr::new(loadfn("glDetailTexFuncSGIS"), failing::DetailTexFuncSGIS),
    Disable: FnPtr::new(loadfn("glDisable"), failing::Disable),
    DisableClientState: FnPtr::new(loadfn("glDisableClientState"), failing::DisableClientState),
    DisableClientStateIndexedEXT: FnPtr::new(loadfn("glDisableClientStateIndexedEXT"), failing::DisableClientStateIndexedEXT),
    DisableClientStateiEXT: FnPtr::new(loadfn("glDisableClientStateiEXT"), failing::DisableClientStateiEXT),
    DisableDriverControlQCOM: FnPtr::new(loadfn("glDisableDriverControlQCOM"), failing::DisableDriverControlQCOM),
    DisableIndexedEXT: FnPtr::new(loadfn("glDisableIndexedEXT"), failing::DisableIndexedEXT),
    DisableVariantClientStateEXT: FnPtr::new(loadfn("glDisableVariantClientStateEXT"), failing::DisableVariantClientStateEXT),
    DisableVertexArrayAttribEXT: FnPtr::new(loadfn("glDisableVertexArrayAttribEXT"), failing::DisableVertexArrayAttribEXT),
    DisableVertexArrayEXT: FnPtr::new(loadfn("glDisableVertexArrayEXT"), failing::DisableVertexArrayEXT),
    DisableVertexAttribAPPLE: FnPtr::new(loadfn("glDisableVertexAttribAPPLE"), failing::DisableVertexAttribAPPLE),
    DisableVertexAttribArray: FnPtr::new(loadfn("glDisableVertexAttribArray"), failing::DisableVertexAttribArray),
    DisableVertexAttribArrayARB: FnPtr::new(loadfn("glDisableVertexAttribArrayARB"), failing::DisableVertexAttribArrayARB),
    Disablei: FnPtr::new(loadfn("glDisablei"), failing::Disablei),
    DiscardFramebufferEXT: FnPtr::new(loadfn("glDiscardFramebufferEXT"), failing::DiscardFramebufferEXT),
    DispatchCompute: FnPtr::new(loadfn("glDispatchCompute"), failing::DispatchCompute),
    DispatchComputeGroupSizeARB: FnPtr::new(loadfn("glDispatchComputeGroupSizeARB"), failing::DispatchComputeGroupSizeARB),
    DispatchComputeIndirect: FnPtr::new(loadfn("glDispatchComputeIndirect"), failing::DispatchComputeIndirect),
    DrawArrays: FnPtr::new(loadfn("glDrawArrays"), failing::DrawArrays),
    DrawArraysEXT: FnPtr::new(loadfn("glDrawArraysEXT"), failing::DrawArraysEXT),
    DrawArraysIndirect: FnPtr::new(loadfn("glDrawArraysIndirect"), failing::DrawArraysIndirect),
    DrawArraysInstanced: FnPtr::new(loadfn("glDrawArraysInstanced"), failing::DrawArraysInstanced),
    DrawArraysInstancedANGLE: FnPtr::new(loadfn("glDrawArraysInstancedANGLE"), failing::DrawArraysInstancedANGLE),
    DrawArraysInstancedARB: FnPtr::new(loadfn("glDrawArraysInstancedARB"), failing::DrawArraysInstancedARB),
    DrawArraysInstancedBaseInstance: FnPtr::new(loadfn("glDrawArraysInstancedBaseInstance"), failing::DrawArraysInstancedBaseInstance),
    DrawArraysInstancedEXT: FnPtr::new(loadfn("glDrawArraysInstancedEXT"), failing::DrawArraysInstancedEXT),
    DrawArraysInstancedNV: FnPtr::new(loadfn("glDrawArraysInstancedNV"), failing::DrawArraysInstancedNV),
    DrawBuffer: FnPtr::new(loadfn("glDrawBuffer"), failing::DrawBuffer),
    DrawBuffers: FnPtr::new(loadfn("glDrawBuffers"), failing::DrawBuffers),
    DrawBuffersARB: FnPtr::new(loadfn("glDrawBuffersARB"), failing::DrawBuffersARB),
    DrawBuffersATI: FnPtr::new(loadfn("glDrawBuffersATI"), failing::DrawBuffersATI),
    DrawBuffersEXT: FnPtr::new(loadfn("glDrawBuffersEXT"), failing::DrawBuffersEXT),
    DrawBuffersIndexedEXT: FnPtr::new(loadfn("glDrawBuffersIndexedEXT"), failing::DrawBuffersIndexedEXT),
    DrawBuffersNV: FnPtr::new(loadfn("glDrawBuffersNV"), failing::DrawBuffersNV),
    DrawElementArrayAPPLE: FnPtr::new(loadfn("glDrawElementArrayAPPLE"), failing::DrawElementArrayAPPLE),
    DrawElementArrayATI: FnPtr::new(loadfn("glDrawElementArrayATI"), failing::DrawElementArrayATI),
    DrawElements: FnPtr::new(loadfn("glDrawElements"), failing::DrawElements),
    DrawElementsBaseVertex: FnPtr::new(loadfn("glDrawElementsBaseVertex"), failing::DrawElementsBaseVertex),
    DrawElementsIndirect: FnPtr::new(loadfn("glDrawElementsIndirect"), failing::DrawElementsIndirect),
    DrawElementsInstanced: FnPtr::new(loadfn("glDrawElementsInstanced"), failing::DrawElementsInstanced),
    DrawElementsInstancedANGLE: FnPtr::new(loadfn("glDrawElementsInstancedANGLE"), failing::DrawElementsInstancedANGLE),
    DrawElementsInstancedARB: FnPtr::new(loadfn("glDrawElementsInstancedARB"), failing::DrawElementsInstancedARB),
    DrawElementsInstancedBaseInstance: FnPtr::new(loadfn("glDrawElementsInstancedBaseInstance"), failing::DrawElementsInstancedBaseInstance),
    DrawElementsInstancedBaseVertex: FnPtr::new(loadfn("glDrawElementsInstancedBaseVertex"), failing::DrawElementsInstancedBaseVertex),
    DrawElementsInstancedBaseVertexBaseInstance: FnPtr::new(loadfn("glDrawElementsInstancedBaseVertexBaseInstance"), failing::DrawElementsInstancedBaseVertexBaseInstance),
    DrawElementsInstancedEXT: FnPtr::new(loadfn("glDrawElementsInstancedEXT"), failing::DrawElementsInstancedEXT),
    DrawElementsInstancedNV: FnPtr::new(loadfn("glDrawElementsInstancedNV"), failing::DrawElementsInstancedNV),
    DrawMeshArraysSUN: FnPtr::new(loadfn("glDrawMeshArraysSUN"), failing::DrawMeshArraysSUN),
    DrawPixels: FnPtr::new(loadfn("glDrawPixels"), failing::DrawPixels),
    DrawRangeElementArrayAPPLE: FnPtr::new(loadfn("glDrawRangeElementArrayAPPLE"), failing::DrawRangeElementArrayAPPLE),
    DrawRangeElementArrayATI: FnPtr::new(loadfn("glDrawRangeElementArrayATI"), failing::DrawRangeElementArrayATI),
    DrawRangeElements: FnPtr::new(loadfn("glDrawRangeElements"), failing::DrawRangeElements),
    DrawRangeElementsBaseVertex: FnPtr::new(loadfn("glDrawRangeElementsBaseVertex"), failing::DrawRangeElementsBaseVertex),
    DrawRangeElementsEXT: FnPtr::new(loadfn("glDrawRangeElementsEXT"), failing::DrawRangeElementsEXT),
    DrawTexfOES: FnPtr::new(loadfn("glDrawTexfOES"), failing::DrawTexfOES),
    DrawTexfvOES: FnPtr::new(loadfn("glDrawTexfvOES"), failing::DrawTexfvOES),
    DrawTexiOES: FnPtr::new(loadfn("glDrawTexiOES"), failing::DrawTexiOES),
    DrawTexivOES: FnPtr::new(loadfn("glDrawTexivOES"), failing::DrawTexivOES),
    DrawTexsOES: FnPtr::new(loadfn("glDrawTexsOES"), failing::DrawTexsOES),
    DrawTexsvOES: FnPtr::new(loadfn("glDrawTexsvOES"), failing::DrawTexsvOES),
    DrawTextureNV: FnPtr::new(loadfn("glDrawTextureNV"), failing::DrawTextureNV),
    DrawTexxOES: FnPtr::new(loadfn("glDrawTexxOES"), failing::DrawTexxOES),
    DrawTexxvOES: FnPtr::new(loadfn("glDrawTexxvOES"), failing::DrawTexxvOES),
    DrawTransformFeedback: FnPtr::new(loadfn("glDrawTransformFeedback"), failing::DrawTransformFeedback),
    DrawTransformFeedbackInstanced: FnPtr::new(loadfn("glDrawTransformFeedbackInstanced"), failing::DrawTransformFeedbackInstanced),
    DrawTransformFeedbackNV: FnPtr::new(loadfn("glDrawTransformFeedbackNV"), failing::DrawTransformFeedbackNV),
    DrawTransformFeedbackStream: FnPtr::new(loadfn("glDrawTransformFeedbackStream"), failing::DrawTransformFeedbackStream),
    DrawTransformFeedbackStreamInstanced: FnPtr::new(loadfn("glDrawTransformFeedbackStreamInstanced"), failing::DrawTransformFeedbackStreamInstanced),
    EGLImageTargetRenderbufferStorageOES: FnPtr::new(loadfn("glEGLImageTargetRenderbufferStorageOES"), failing::EGLImageTargetRenderbufferStorageOES),
    EGLImageTargetTexture2DOES: FnPtr::new(loadfn("glEGLImageTargetTexture2DOES"), failing::EGLImageTargetTexture2DOES),
    EdgeFlag: FnPtr::new(loadfn("glEdgeFlag"), failing::EdgeFlag),
    EdgeFlagFormatNV: FnPtr::new(loadfn("glEdgeFlagFormatNV"), failing::EdgeFlagFormatNV),
    EdgeFlagPointer: FnPtr::new(loadfn("glEdgeFlagPointer"), failing::EdgeFlagPointer),
    EdgeFlagPointerEXT: FnPtr::new(loadfn("glEdgeFlagPointerEXT"), failing::EdgeFlagPointerEXT),
    EdgeFlagPointerListIBM: FnPtr::new(loadfn("glEdgeFlagPointerListIBM"), failing::EdgeFlagPointerListIBM),
    EdgeFlagv: FnPtr::new(loadfn("glEdgeFlagv"), failing::EdgeFlagv),
    ElementPointerAPPLE: FnPtr::new(loadfn("glElementPointerAPPLE"), failing::ElementPointerAPPLE),
    ElementPointerATI: FnPtr::new(loadfn("glElementPointerATI"), failing::ElementPointerATI),
    Enable: FnPtr::new(loadfn("glEnable"), failing::Enable),
    EnableClientState: FnPtr::new(loadfn("glEnableClientState"), failing::EnableClientState),
    EnableClientStateIndexedEXT: FnPtr::new(loadfn("glEnableClientStateIndexedEXT"), failing::EnableClientStateIndexedEXT),
    EnableClientStateiEXT: FnPtr::new(loadfn("glEnableClientStateiEXT"), failing::EnableClientStateiEXT),
    EnableDriverControlQCOM: FnPtr::new(loadfn("glEnableDriverControlQCOM"), failing::EnableDriverControlQCOM),
    EnableIndexedEXT: FnPtr::new(loadfn("glEnableIndexedEXT"), failing::EnableIndexedEXT),
    EnableVariantClientStateEXT: FnPtr::new(loadfn("glEnableVariantClientStateEXT"), failing::EnableVariantClientStateEXT),
    EnableVertexArrayAttribEXT: FnPtr::new(loadfn("glEnableVertexArrayAttribEXT"), failing::EnableVertexArrayAttribEXT),
    EnableVertexArrayEXT: FnPtr::new(loadfn("glEnableVertexArrayEXT"), failing::EnableVertexArrayEXT),
    EnableVertexAttribAPPLE: FnPtr::new(loadfn("glEnableVertexAttribAPPLE"), failing::EnableVertexAttribAPPLE),
    EnableVertexAttribArray: FnPtr::new(loadfn("glEnableVertexAttribArray"), failing::EnableVertexAttribArray),
    EnableVertexAttribArrayARB: FnPtr::new(loadfn("glEnableVertexAttribArrayARB"), failing::EnableVertexAttribArrayARB),
    Enablei: FnPtr::new(loadfn("glEnablei"), failing::Enablei),
    End: FnPtr::new(loadfn("glEnd"), failing::End),
    EndConditionalRender: FnPtr::new(loadfn("glEndConditionalRender"), failing::EndConditionalRender),
    EndConditionalRenderNV: FnPtr::new(loadfn("glEndConditionalRenderNV"), failing::EndConditionalRenderNV),
    EndConditionalRenderNVX: FnPtr::new(loadfn("glEndConditionalRenderNVX"), failing::EndConditionalRenderNVX),
    EndFragmentShaderATI: FnPtr::new(loadfn("glEndFragmentShaderATI"), failing::EndFragmentShaderATI),
    EndList: FnPtr::new(loadfn("glEndList"), failing::EndList),
    EndOcclusionQueryNV: FnPtr::new(loadfn("glEndOcclusionQueryNV"), failing::EndOcclusionQueryNV),
    EndPerfMonitorAMD: FnPtr::new(loadfn("glEndPerfMonitorAMD"), failing::EndPerfMonitorAMD),
    EndQuery: FnPtr::new(loadfn("glEndQuery"), failing::EndQuery),
    EndQueryARB: FnPtr::new(loadfn("glEndQueryARB"), failing::EndQueryARB),
    EndQueryEXT: FnPtr::new(loadfn("glEndQueryEXT"), failing::EndQueryEXT),
    EndQueryIndexed: FnPtr::new(loadfn("glEndQueryIndexed"), failing::EndQueryIndexed),
    EndTilingQCOM: FnPtr::new(loadfn("glEndTilingQCOM"), failing::EndTilingQCOM),
    EndTransformFeedback: FnPtr::new(loadfn("glEndTransformFeedback"), failing::EndTransformFeedback),
    EndTransformFeedbackEXT: FnPtr::new(loadfn("glEndTransformFeedbackEXT"), failing::EndTransformFeedbackEXT),
    EndTransformFeedbackNV: FnPtr::new(loadfn("glEndTransformFeedbackNV"), failing::EndTransformFeedbackNV),
    EndVertexShaderEXT: FnPtr::new(loadfn("glEndVertexShaderEXT"), failing::EndVertexShaderEXT),
    EndVideoCaptureNV: FnPtr::new(loadfn("glEndVideoCaptureNV"), failing::EndVideoCaptureNV),
    EvalCoord1d: FnPtr::new(loadfn("glEvalCoord1d"), failing::EvalCoord1d),
    EvalCoord1dv: FnPtr::new(loadfn("glEvalCoord1dv"), failing::EvalCoord1dv),
    EvalCoord1f: FnPtr::new(loadfn("glEvalCoord1f"), failing::EvalCoord1f),
    EvalCoord1fv: FnPtr::new(loadfn("glEvalCoord1fv"), failing::EvalCoord1fv),
    EvalCoord1xOES: FnPtr::new(loadfn("glEvalCoord1xOES"), failing::EvalCoord1xOES),
    EvalCoord1xvOES: FnPtr::new(loadfn("glEvalCoord1xvOES"), failing::EvalCoord1xvOES),
    EvalCoord2d: FnPtr::new(loadfn("glEvalCoord2d"), failing::EvalCoord2d),
    EvalCoord2dv: FnPtr::new(loadfn("glEvalCoord2dv"), failing::EvalCoord2dv),
    EvalCoord2f: FnPtr::new(loadfn("glEvalCoord2f"), failing::EvalCoord2f),
    EvalCoord2fv: FnPtr::new(loadfn("glEvalCoord2fv"), failing::EvalCoord2fv),
    EvalCoord2xOES: FnPtr::new(loadfn("glEvalCoord2xOES"), failing::EvalCoord2xOES),
    EvalCoord2xvOES: FnPtr::new(loadfn("glEvalCoord2xvOES"), failing::EvalCoord2xvOES),
    EvalMapsNV: FnPtr::new(loadfn("glEvalMapsNV"), failing::EvalMapsNV),
    EvalMesh1: FnPtr::new(loadfn("glEvalMesh1"), failing::EvalMesh1),
    EvalMesh2: FnPtr::new(loadfn("glEvalMesh2"), failing::EvalMesh2),
    EvalPoint1: FnPtr::new(loadfn("glEvalPoint1"), failing::EvalPoint1),
    EvalPoint2: FnPtr::new(loadfn("glEvalPoint2"), failing::EvalPoint2),
    ExecuteProgramNV: FnPtr::new(loadfn("glExecuteProgramNV"), failing::ExecuteProgramNV),
    ExtGetBufferPointervQCOM: FnPtr::new(loadfn("glExtGetBufferPointervQCOM"), failing::ExtGetBufferPointervQCOM),
    ExtGetBuffersQCOM: FnPtr::new(loadfn("glExtGetBuffersQCOM"), failing::ExtGetBuffersQCOM),
    ExtGetFramebuffersQCOM: FnPtr::new(loadfn("glExtGetFramebuffersQCOM"), failing::ExtGetFramebuffersQCOM),
    ExtGetProgramBinarySourceQCOM: FnPtr::new(loadfn("glExtGetProgramBinarySourceQCOM"), failing::ExtGetProgramBinarySourceQCOM),
    ExtGetProgramsQCOM: FnPtr::new(loadfn("glExtGetProgramsQCOM"), failing::ExtGetProgramsQCOM),
    ExtGetRenderbuffersQCOM: FnPtr::new(loadfn("glExtGetRenderbuffersQCOM"), failing::ExtGetRenderbuffersQCOM),
    ExtGetShadersQCOM: FnPtr::new(loadfn("glExtGetShadersQCOM"), failing::ExtGetShadersQCOM),
    ExtGetTexLevelParameterivQCOM: FnPtr::new(loadfn("glExtGetTexLevelParameterivQCOM"), failing::ExtGetTexLevelParameterivQCOM),
    ExtGetTexSubImageQCOM: FnPtr::new(loadfn("glExtGetTexSubImageQCOM"), failing::ExtGetTexSubImageQCOM),
    ExtGetTexturesQCOM: FnPtr::new(loadfn("glExtGetTexturesQCOM"), failing::ExtGetTexturesQCOM),
    ExtIsProgramBinaryQCOM: FnPtr::new(loadfn("glExtIsProgramBinaryQCOM"), failing::ExtIsProgramBinaryQCOM),
    ExtTexObjectStateOverrideiQCOM: FnPtr::new(loadfn("glExtTexObjectStateOverrideiQCOM"), failing::ExtTexObjectStateOverrideiQCOM),
    ExtractComponentEXT: FnPtr::new(loadfn("glExtractComponentEXT"), failing::ExtractComponentEXT),
    FeedbackBuffer: FnPtr::new(loadfn("glFeedbackBuffer"), failing::FeedbackBuffer),
    FeedbackBufferxOES: FnPtr::new(loadfn("glFeedbackBufferxOES"), failing::FeedbackBufferxOES),
    FenceSync: FnPtr::new(loadfn("glFenceSync"), failing::FenceSync),
    FenceSyncAPPLE: FnPtr::new(loadfn("glFenceSyncAPPLE"), failing::FenceSyncAPPLE),
    FinalCombinerInputNV: FnPtr::new(loadfn("glFinalCombinerInputNV"), failing::FinalCombinerInputNV),
    Finish: FnPtr::new(loadfn("glFinish"), failing::Finish),
    FinishAsyncSGIX: FnPtr::new(loadfn("glFinishAsyncSGIX"), failing::FinishAsyncSGIX),
    FinishFenceAPPLE: FnPtr::new(loadfn("glFinishFenceAPPLE"), failing::FinishFenceAPPLE),
    FinishFenceNV: FnPtr::new(loadfn("glFinishFenceNV"), failing::FinishFenceNV),
    FinishObjectAPPLE: FnPtr::new(loadfn("glFinishObjectAPPLE"), failing::FinishObjectAPPLE),
    FinishTextureSUNX: FnPtr::new(loadfn("glFinishTextureSUNX"), failing::FinishTextureSUNX),
    Flush: FnPtr::new(loadfn("glFlush"), failing::Flush),
    FlushMappedBufferRange: FnPtr::new(loadfn("glFlushMappedBufferRange"), failing::FlushMappedBufferRange),
    FlushMappedBufferRangeAPPLE: FnPtr::new(loadfn("glFlushMappedBufferRangeAPPLE"), failing::FlushMappedBufferRangeAPPLE),
    FlushMappedBufferRangeEXT: FnPtr::new(loadfn("glFlushMappedBufferRangeEXT"), failing::FlushMappedBufferRangeEXT),
    FlushMappedNamedBufferRangeEXT: FnPtr::new(loadfn("glFlushMappedNamedBufferRangeEXT"), failing::FlushMappedNamedBufferRangeEXT),
    FlushPixelDataRangeNV: FnPtr::new(loadfn("glFlushPixelDataRangeNV"), failing::FlushPixelDataRangeNV),
    FlushRasterSGIX: FnPtr::new(loadfn("glFlushRasterSGIX"), failing::FlushRasterSGIX),
    FlushStaticDataIBM: FnPtr::new(loadfn("glFlushStaticDataIBM"), failing::FlushStaticDataIBM),
    FlushVertexArrayRangeAPPLE: FnPtr::new(loadfn("glFlushVertexArrayRangeAPPLE"), failing::FlushVertexArrayRangeAPPLE),
    FlushVertexArrayRangeNV: FnPtr::new(loadfn("glFlushVertexArrayRangeNV"), failing::FlushVertexArrayRangeNV),
    FogCoordFormatNV: FnPtr::new(loadfn("glFogCoordFormatNV"), failing::FogCoordFormatNV),
    FogCoordPointer: FnPtr::new(loadfn("glFogCoordPointer"), failing::FogCoordPointer),
    FogCoordPointerEXT: FnPtr::new(loadfn("glFogCoordPointerEXT"), failing::FogCoordPointerEXT),
    FogCoordPointerListIBM: FnPtr::new(loadfn("glFogCoordPointerListIBM"), failing::FogCoordPointerListIBM),
    FogCoordd: FnPtr::new(loadfn("glFogCoordd"), failing::FogCoordd),
    FogCoorddEXT: FnPtr::new(loadfn("glFogCoorddEXT"), failing::FogCoorddEXT),
    FogCoorddv: FnPtr::new(loadfn("glFogCoorddv"), failing::FogCoorddv),
    FogCoorddvEXT: FnPtr::new(loadfn("glFogCoorddvEXT"), failing::FogCoorddvEXT),
    FogCoordf: FnPtr::new(loadfn("glFogCoordf"), failing::FogCoordf),
    FogCoordfEXT: FnPtr::new(loadfn("glFogCoordfEXT"), failing::FogCoordfEXT),
    FogCoordfv: FnPtr::new(loadfn("glFogCoordfv"), failing::FogCoordfv),
    FogCoordfvEXT: FnPtr::new(loadfn("glFogCoordfvEXT"), failing::FogCoordfvEXT),
    FogCoordhNV: FnPtr::new(loadfn("glFogCoordhNV"), failing::FogCoordhNV),
    FogCoordhvNV: FnPtr::new(loadfn("glFogCoordhvNV"), failing::FogCoordhvNV),
    FogFuncSGIS: FnPtr::new(loadfn("glFogFuncSGIS"), failing::FogFuncSGIS),
    Fogf: FnPtr::new(loadfn("glFogf"), failing::Fogf),
    Fogfv: FnPtr::new(loadfn("glFogfv"), failing::Fogfv),
    Fogi: FnPtr::new(loadfn("glFogi"), failing::Fogi),
    Fogiv: FnPtr::new(loadfn("glFogiv"), failing::Fogiv),
    Fogx: FnPtr::new(loadfn("glFogx"), failing::Fogx),
    FogxOES: FnPtr::new(loadfn("glFogxOES"), failing::FogxOES),
    Fogxv: FnPtr::new(loadfn("glFogxv"), failing::Fogxv),
    FogxvOES: FnPtr::new(loadfn("glFogxvOES"), failing::FogxvOES),
    FragmentColorMaterialSGIX: FnPtr::new(loadfn("glFragmentColorMaterialSGIX"), failing::FragmentColorMaterialSGIX),
    FragmentLightModelfSGIX: FnPtr::new(loadfn("glFragmentLightModelfSGIX"), failing::FragmentLightModelfSGIX),
    FragmentLightModelfvSGIX: FnPtr::new(loadfn("glFragmentLightModelfvSGIX"), failing::FragmentLightModelfvSGIX),
    FragmentLightModeliSGIX: FnPtr::new(loadfn("glFragmentLightModeliSGIX"), failing::FragmentLightModeliSGIX),
    FragmentLightModelivSGIX: FnPtr::new(loadfn("glFragmentLightModelivSGIX"), failing::FragmentLightModelivSGIX),
    FragmentLightfSGIX: FnPtr::new(loadfn("glFragmentLightfSGIX"), failing::FragmentLightfSGIX),
    FragmentLightfvSGIX: FnPtr::new(loadfn("glFragmentLightfvSGIX"), failing::FragmentLightfvSGIX),
    FragmentLightiSGIX: FnPtr::new(loadfn("glFragmentLightiSGIX"), failing::FragmentLightiSGIX),
    FragmentLightivSGIX: FnPtr::new(loadfn("glFragmentLightivSGIX"), failing::FragmentLightivSGIX),
    FragmentMaterialfSGIX: FnPtr::new(loadfn("glFragmentMaterialfSGIX"), failing::FragmentMaterialfSGIX),
    FragmentMaterialfvSGIX: FnPtr::new(loadfn("glFragmentMaterialfvSGIX"), failing::FragmentMaterialfvSGIX),
    FragmentMaterialiSGIX: FnPtr::new(loadfn("glFragmentMaterialiSGIX"), failing::FragmentMaterialiSGIX),
    FragmentMaterialivSGIX: FnPtr::new(loadfn("glFragmentMaterialivSGIX"), failing::FragmentMaterialivSGIX),
    FrameTerminatorGREMEDY: FnPtr::new(loadfn("glFrameTerminatorGREMEDY"), failing::FrameTerminatorGREMEDY),
    FrameZoomSGIX: FnPtr::new(loadfn("glFrameZoomSGIX"), failing::FrameZoomSGIX),
    FramebufferDrawBufferEXT: FnPtr::new(loadfn("glFramebufferDrawBufferEXT"), failing::FramebufferDrawBufferEXT),
    FramebufferDrawBuffersEXT: FnPtr::new(loadfn("glFramebufferDrawBuffersEXT"), failing::FramebufferDrawBuffersEXT),
    FramebufferParameteri: FnPtr::new(loadfn("glFramebufferParameteri"), failing::FramebufferParameteri),
    FramebufferReadBufferEXT: FnPtr::new(loadfn("glFramebufferReadBufferEXT"), failing::FramebufferReadBufferEXT),
    FramebufferRenderbuffer: FnPtr::new(loadfn("glFramebufferRenderbuffer"), failing::FramebufferRenderbuffer),
    FramebufferRenderbufferEXT: FnPtr::new(loadfn("glFramebufferRenderbufferEXT"), failing::FramebufferRenderbufferEXT),
    FramebufferRenderbufferOES: FnPtr::new(loadfn("glFramebufferRenderbufferOES"), failing::FramebufferRenderbufferOES),
    FramebufferTexture: FnPtr::new(loadfn("glFramebufferTexture"), failing::FramebufferTexture),
    FramebufferTexture1D: FnPtr::new(loadfn("glFramebufferTexture1D"), failing::FramebufferTexture1D),
    FramebufferTexture1DEXT: FnPtr::new(loadfn("glFramebufferTexture1DEXT"), failing::FramebufferTexture1DEXT),
    FramebufferTexture2D: FnPtr::new(loadfn("glFramebufferTexture2D"), failing::FramebufferTexture2D),
    FramebufferTexture2DEXT: FnPtr::new(loadfn("glFramebufferTexture2DEXT"), failing::FramebufferTexture2DEXT),
    FramebufferTexture2DMultisampleEXT: FnPtr::new(loadfn("glFramebufferTexture2DMultisampleEXT"), failing::FramebufferTexture2DMultisampleEXT),
    FramebufferTexture2DMultisampleIMG: FnPtr::new(loadfn("glFramebufferTexture2DMultisampleIMG"), failing::FramebufferTexture2DMultisampleIMG),
    FramebufferTexture2DOES: FnPtr::new(loadfn("glFramebufferTexture2DOES"), failing::FramebufferTexture2DOES),
    FramebufferTexture3D: FnPtr::new(loadfn("glFramebufferTexture3D"), failing::FramebufferTexture3D),
    FramebufferTexture3DEXT: FnPtr::new(loadfn("glFramebufferTexture3DEXT"), failing::FramebufferTexture3DEXT),
    FramebufferTexture3DOES: FnPtr::new(loadfn("glFramebufferTexture3DOES"), failing::FramebufferTexture3DOES),
    FramebufferTextureARB: FnPtr::new(loadfn("glFramebufferTextureARB"), failing::FramebufferTextureARB),
    FramebufferTextureEXT: FnPtr::new(loadfn("glFramebufferTextureEXT"), failing::FramebufferTextureEXT),
    FramebufferTextureFaceARB: FnPtr::new(loadfn("glFramebufferTextureFaceARB"), failing::FramebufferTextureFaceARB),
    FramebufferTextureFaceEXT: FnPtr::new(loadfn("glFramebufferTextureFaceEXT"), failing::FramebufferTextureFaceEXT),
    FramebufferTextureLayer: FnPtr::new(loadfn("glFramebufferTextureLayer"), failing::FramebufferTextureLayer),
    FramebufferTextureLayerARB: FnPtr::new(loadfn("glFramebufferTextureLayerARB"), failing::FramebufferTextureLayerARB),
    FramebufferTextureLayerEXT: FnPtr::new(loadfn("glFramebufferTextureLayerEXT"), failing::FramebufferTextureLayerEXT),
    FreeObjectBufferATI: FnPtr::new(loadfn("glFreeObjectBufferATI"), failing::FreeObjectBufferATI),
    FrontFace: FnPtr::new(loadfn("glFrontFace"), failing::FrontFace),
    Frustum: FnPtr::new(loadfn("glFrustum"), failing::Frustum),
    Frustumf: FnPtr::new(loadfn("glFrustumf"), failing::Frustumf),
    FrustumfOES: FnPtr::new(loadfn("glFrustumfOES"), failing::FrustumfOES),
    Frustumx: FnPtr::new(loadfn("glFrustumx"), failing::Frustumx),
    FrustumxOES: FnPtr::new(loadfn("glFrustumxOES"), failing::FrustumxOES),
    GenAsyncMarkersSGIX: FnPtr::new(loadfn("glGenAsyncMarkersSGIX"), failing::GenAsyncMarkersSGIX),
    GenBuffers: FnPtr::new(loadfn("glGenBuffers"), failing::GenBuffers),
    GenBuffersARB: FnPtr::new(loadfn("glGenBuffersARB"), failing::GenBuffersARB),
    GenFencesAPPLE: FnPtr::new(loadfn("glGenFencesAPPLE"), failing::GenFencesAPPLE),
    GenFencesNV: FnPtr::new(loadfn("glGenFencesNV"), failing::GenFencesNV),
    GenFragmentShadersATI: FnPtr::new(loadfn("glGenFragmentShadersATI"), failing::GenFragmentShadersATI),
    GenFramebuffers: FnPtr::new(loadfn("glGenFramebuffers"), failing::GenFramebuffers),
    GenFramebuffersEXT: FnPtr::new(loadfn("glGenFramebuffersEXT"), failing::GenFramebuffersEXT),
    GenFramebuffersOES: FnPtr::new(loadfn("glGenFramebuffersOES"), failing::GenFramebuffersOES),
    GenLists: FnPtr::new(loadfn("glGenLists"), failing::GenLists),
    GenNamesAMD: FnPtr::new(loadfn("glGenNamesAMD"), failing::GenNamesAMD),
    GenOcclusionQueriesNV: FnPtr::new(loadfn("glGenOcclusionQueriesNV"), failing::GenOcclusionQueriesNV),
    GenPathsNV: FnPtr::new(loadfn("glGenPathsNV"), failing::GenPathsNV),
    GenPerfMonitorsAMD: FnPtr::new(loadfn("glGenPerfMonitorsAMD"), failing::GenPerfMonitorsAMD),
    GenProgramPipelines: FnPtr::new(loadfn("glGenProgramPipelines"), failing::GenProgramPipelines),
    GenProgramPipelinesEXT: FnPtr::new(loadfn("glGenProgramPipelinesEXT"), failing::GenProgramPipelinesEXT),
    GenProgramsARB: FnPtr::new(loadfn("glGenProgramsARB"), failing::GenProgramsARB),
    GenProgramsNV: FnPtr::new(loadfn("glGenProgramsNV"), failing::GenProgramsNV),
    GenQueries: FnPtr::new(loadfn("glGenQueries"), failing::GenQueries),
    GenQueriesARB: FnPtr::new(loadfn("glGenQueriesARB"), failing::GenQueriesARB),
    GenQueriesEXT: FnPtr::new(loadfn("glGenQueriesEXT"), failing::GenQueriesEXT),
    GenRenderbuffers: FnPtr::new(loadfn("glGenRenderbuffers"), failing::GenRenderbuffers),
    GenRenderbuffersEXT: FnPtr::new(loadfn("glGenRenderbuffersEXT"), failing::GenRenderbuffersEXT),
    GenRenderbuffersOES: FnPtr::new(loadfn("glGenRenderbuffersOES"), failing::GenRenderbuffersOES),
    GenSamplers: FnPtr::new(loadfn("glGenSamplers"), failing::GenSamplers),
    GenSymbolsEXT: FnPtr::new(loadfn("glGenSymbolsEXT"), failing::GenSymbolsEXT),
    GenTextures: FnPtr::new(loadfn("glGenTextures"), failing::GenTextures),
    GenTexturesEXT: FnPtr::new(loadfn("glGenTexturesEXT"), failing::GenTexturesEXT),
    GenTransformFeedbacks: FnPtr::new(loadfn("glGenTransformFeedbacks"), failing::GenTransformFeedbacks),
    GenTransformFeedbacksNV: FnPtr::new(loadfn("glGenTransformFeedbacksNV"), failing::GenTransformFeedbacksNV),
    GenVertexArrays: FnPtr::new(loadfn("glGenVertexArrays"), failing::GenVertexArrays),
    GenVertexArraysAPPLE: FnPtr::new(loadfn("glGenVertexArraysAPPLE"), failing::GenVertexArraysAPPLE),
    GenVertexArraysOES: FnPtr::new(loadfn("glGenVertexArraysOES"), failing::GenVertexArraysOES),
    GenVertexShadersEXT: FnPtr::new(loadfn("glGenVertexShadersEXT"), failing::GenVertexShadersEXT),
    GenerateMipmap: FnPtr::new(loadfn("glGenerateMipmap"), failing::GenerateMipmap),
    GenerateMipmapEXT: FnPtr::new(loadfn("glGenerateMipmapEXT"), failing::GenerateMipmapEXT),
    GenerateMipmapOES: FnPtr::new(loadfn("glGenerateMipmapOES"), failing::GenerateMipmapOES),
    GenerateMultiTexMipmapEXT: FnPtr::new(loadfn("glGenerateMultiTexMipmapEXT"), failing::GenerateMultiTexMipmapEXT),
    GenerateTextureMipmapEXT: FnPtr::new(loadfn("glGenerateTextureMipmapEXT"), failing::GenerateTextureMipmapEXT),
    GetActiveAtomicCounterBufferiv: FnPtr::new(loadfn("glGetActiveAtomicCounterBufferiv"), failing::GetActiveAtomicCounterBufferiv),
    GetActiveAttrib: FnPtr::new(loadfn("glGetActiveAttrib"), failing::GetActiveAttrib),
    GetActiveAttribARB: FnPtr::new(loadfn("glGetActiveAttribARB"), failing::GetActiveAttribARB),
    GetActiveSubroutineName: FnPtr::new(loadfn("glGetActiveSubroutineName"), failing::GetActiveSubroutineName),
    GetActiveSubroutineUniformName: FnPtr::new(loadfn("glGetActiveSubroutineUniformName"), failing::GetActiveSubroutineUniformName),
    GetActiveSubroutineUniformiv: FnPtr::new(loadfn("glGetActiveSubroutineUniformiv"), failing::GetActiveSubroutineUniformiv),
    GetActiveUniform: FnPtr::new(loadfn("glGetActiveUniform"), failing::GetActiveUniform),
    GetActiveUniformARB: FnPtr::new(loadfn("glGetActiveUniformARB"), failing::GetActiveUniformARB),
    GetActiveUniformBlockName: FnPtr::new(loadfn("glGetActiveUniformBlockName"), failing::GetActiveUniformBlockName),
    GetActiveUniformBlockiv: FnPtr::new(loadfn("glGetActiveUniformBlockiv"), failing::GetActiveUniformBlockiv),
    GetActiveUniformName: FnPtr::new(loadfn("glGetActiveUniformName"), failing::GetActiveUniformName),
    GetActiveUniformsiv: FnPtr::new(loadfn("glGetActiveUniformsiv"), failing::GetActiveUniformsiv),
    GetActiveVaryingNV: FnPtr::new(loadfn("glGetActiveVaryingNV"), failing::GetActiveVaryingNV),
    GetArrayObjectfvATI: FnPtr::new(loadfn("glGetArrayObjectfvATI"), failing::GetArrayObjectfvATI),
    GetArrayObjectivATI: FnPtr::new(loadfn("glGetArrayObjectivATI"), failing::GetArrayObjectivATI),
    GetAttachedObjectsARB: FnPtr::new(loadfn("glGetAttachedObjectsARB"), failing::GetAttachedObjectsARB),
    GetAttachedShaders: FnPtr::new(loadfn("glGetAttachedShaders"), failing::GetAttachedShaders),
    GetAttribLocation: FnPtr::new(loadfn("glGetAttribLocation"), failing::GetAttribLocation),
    GetAttribLocationARB: FnPtr::new(loadfn("glGetAttribLocationARB"), failing::GetAttribLocationARB),
    GetBooleanIndexedvEXT: FnPtr::new(loadfn("glGetBooleanIndexedvEXT"), failing::GetBooleanIndexedvEXT),
    GetBooleani_v: FnPtr::new(loadfn("glGetBooleani_v"), failing::GetBooleani_v),
    GetBooleanv: FnPtr::new(loadfn("glGetBooleanv"), failing::GetBooleanv),
    GetBufferParameteri64v: FnPtr::new(loadfn("glGetBufferParameteri64v"), failing::GetBufferParameteri64v),
    GetBufferParameteriv: FnPtr::new(loadfn("glGetBufferParameteriv"), failing::GetBufferParameteriv),
    GetBufferParameterivARB: FnPtr::new(loadfn("glGetBufferParameterivARB"), failing::GetBufferParameterivARB),
    GetBufferParameterui64vNV: FnPtr::new(loadfn("glGetBufferParameterui64vNV"), failing::GetBufferParameterui64vNV),
    GetBufferPointerv: FnPtr::new(loadfn("glGetBufferPointerv"), failing::GetBufferPointerv),
    GetBufferPointervARB: FnPtr::new(loadfn("glGetBufferPointervARB"), failing::GetBufferPointervARB),
    GetBufferPointervOES: FnPtr::new(loadfn("glGetBufferPointervOES"), failing::GetBufferPointervOES),
    GetBufferSubData: FnPtr::new(loadfn("glGetBufferSubData"), failing::GetBufferSubData),
    GetBufferSubDataARB: FnPtr::new(loadfn("glGetBufferSubDataARB"), failing::GetBufferSubDataARB),
    GetClipPlane: FnPtr::new(loadfn("glGetClipPlane"), failing::GetClipPlane),
    GetClipPlanef: FnPtr::new(loadfn("glGetClipPlanef"), failing::GetClipPlanef),
    GetClipPlanefOES: FnPtr::new(loadfn("glGetClipPlanefOES"), failing::GetClipPlanefOES),
    GetClipPlanex: FnPtr::new(loadfn("glGetClipPlanex"), failing::GetClipPlanex),
    GetClipPlanexOES: FnPtr::new(loadfn("glGetClipPlanexOES"), failing::GetClipPlanexOES),
    GetColorTable: FnPtr::new(loadfn("glGetColorTable"), failing::GetColorTable),
    GetColorTableEXT: FnPtr::new(loadfn("glGetColorTableEXT"), failing::GetColorTableEXT),
    GetColorTableParameterfv: FnPtr::new(loadfn("glGetColorTableParameterfv"), failing::GetColorTableParameterfv),
    GetColorTableParameterfvEXT: FnPtr::new(loadfn("glGetColorTableParameterfvEXT"), failing::GetColorTableParameterfvEXT),
    GetColorTableParameterfvSGI: FnPtr::new(loadfn("glGetColorTableParameterfvSGI"), failing::GetColorTableParameterfvSGI),
    GetColorTableParameteriv: FnPtr::new(loadfn("glGetColorTableParameteriv"), failing::GetColorTableParameteriv),
    GetColorTableParameterivEXT: FnPtr::new(loadfn("glGetColorTableParameterivEXT"), failing::GetColorTableParameterivEXT),
    GetColorTableParameterivSGI: FnPtr::new(loadfn("glGetColorTableParameterivSGI"), failing::GetColorTableParameterivSGI),
    GetColorTableSGI: FnPtr::new(loadfn("glGetColorTableSGI"), failing::GetColorTableSGI),
    GetCombinerInputParameterfvNV: FnPtr::new(loadfn("glGetCombinerInputParameterfvNV"), failing::GetCombinerInputParameterfvNV),
    GetCombinerInputParameterivNV: FnPtr::new(loadfn("glGetCombinerInputParameterivNV"), failing::GetCombinerInputParameterivNV),
    GetCombinerOutputParameterfvNV: FnPtr::new(loadfn("glGetCombinerOutputParameterfvNV"), failing::GetCombinerOutputParameterfvNV),
    GetCombinerOutputParameterivNV: FnPtr::new(loadfn("glGetCombinerOutputParameterivNV"), failing::GetCombinerOutputParameterivNV),
    GetCombinerStageParameterfvNV: FnPtr::new(loadfn("glGetCombinerStageParameterfvNV"), failing::GetCombinerStageParameterfvNV),
    GetCompressedMultiTexImageEXT: FnPtr::new(loadfn("glGetCompressedMultiTexImageEXT"), failing::GetCompressedMultiTexImageEXT),
    GetCompressedTexImage: FnPtr::new(loadfn("glGetCompressedTexImage"), failing::GetCompressedTexImage),
    GetCompressedTexImageARB: FnPtr::new(loadfn("glGetCompressedTexImageARB"), failing::GetCompressedTexImageARB),
    GetCompressedTextureImageEXT: FnPtr::new(loadfn("glGetCompressedTextureImageEXT"), failing::GetCompressedTextureImageEXT),
    GetConvolutionFilter: FnPtr::new(loadfn("glGetConvolutionFilter"), failing::GetConvolutionFilter),
    GetConvolutionFilterEXT: FnPtr::new(loadfn("glGetConvolutionFilterEXT"), failing::GetConvolutionFilterEXT),
    GetConvolutionParameterfv: FnPtr::new(loadfn("glGetConvolutionParameterfv"), failing::GetConvolutionParameterfv),
    GetConvolutionParameterfvEXT: FnPtr::new(loadfn("glGetConvolutionParameterfvEXT"), failing::GetConvolutionParameterfvEXT),
    GetConvolutionParameteriv: FnPtr::new(loadfn("glGetConvolutionParameteriv"), failing::GetConvolutionParameteriv),
    GetConvolutionParameterivEXT: FnPtr::new(loadfn("glGetConvolutionParameterivEXT"), failing::GetConvolutionParameterivEXT),
    GetConvolutionParameterxvOES: FnPtr::new(loadfn("glGetConvolutionParameterxvOES"), failing::GetConvolutionParameterxvOES),
    GetDebugMessageLog: FnPtr::new(loadfn("glGetDebugMessageLog"), failing::GetDebugMessageLog),
    GetDebugMessageLogAMD: FnPtr::new(loadfn("glGetDebugMessageLogAMD"), failing::GetDebugMessageLogAMD),
    GetDebugMessageLogARB: FnPtr::new(loadfn("glGetDebugMessageLogARB"), failing::GetDebugMessageLogARB),
    GetDebugMessageLogKHR: FnPtr::new(loadfn("glGetDebugMessageLogKHR"), failing::GetDebugMessageLogKHR),
    GetDetailTexFuncSGIS: FnPtr::new(loadfn("glGetDetailTexFuncSGIS"), failing::GetDetailTexFuncSGIS),
    GetDoubleIndexedvEXT: FnPtr::new(loadfn("glGetDoubleIndexedvEXT"), failing::GetDoubleIndexedvEXT),
    GetDoublei_v: FnPtr::new(loadfn("glGetDoublei_v"), failing::GetDoublei_v),
    GetDoublei_vEXT: FnPtr::new(loadfn("glGetDoublei_vEXT"), failing::GetDoublei_vEXT),
    GetDoublev: FnPtr::new(loadfn("glGetDoublev"), failing::GetDoublev),
    GetDriverControlStringQCOM: FnPtr::new(loadfn("glGetDriverControlStringQCOM"), failing::GetDriverControlStringQCOM),
    GetDriverControlsQCOM: FnPtr::new(loadfn("glGetDriverControlsQCOM"), failing::GetDriverControlsQCOM),
    GetError: FnPtr::new(loadfn("glGetError"), failing::GetError),
    GetFenceivNV: FnPtr::new(loadfn("glGetFenceivNV"), failing::GetFenceivNV),
    GetFinalCombinerInputParameterfvNV: FnPtr::new(loadfn("glGetFinalCombinerInputParameterfvNV"), failing::GetFinalCombinerInputParameterfvNV),
    GetFinalCombinerInputParameterivNV: FnPtr::new(loadfn("glGetFinalCombinerInputParameterivNV"), failing::GetFinalCombinerInputParameterivNV),
    GetFixedv: FnPtr::new(loadfn("glGetFixedv"), failing::GetFixedv),
    GetFixedvOES: FnPtr::new(loadfn("glGetFixedvOES"), failing::GetFixedvOES),
    GetFloatIndexedvEXT: FnPtr::new(loadfn("glGetFloatIndexedvEXT"), failing::GetFloatIndexedvEXT),
    GetFloati_v: FnPtr::new(loadfn("glGetFloati_v"), failing::GetFloati_v),
    GetFloati_vEXT: FnPtr::new(loadfn("glGetFloati_vEXT"), failing::GetFloati_vEXT),
    GetFloatv: FnPtr::new(loadfn("glGetFloatv"), failing::GetFloatv),
    GetFogFuncSGIS: FnPtr::new(loadfn("glGetFogFuncSGIS"), failing::GetFogFuncSGIS),
    GetFragDataIndex: FnPtr::new(loadfn("glGetFragDataIndex"), failing::GetFragDataIndex),
    GetFragDataLocation: FnPtr::new(loadfn("glGetFragDataLocation"), failing::GetFragDataLocation),
    GetFragDataLocationEXT: FnPtr::new(loadfn("glGetFragDataLocationEXT"), failing::GetFragDataLocationEXT),
    GetFragmentLightfvSGIX: FnPtr::new(loadfn("glGetFragmentLightfvSGIX"), failing::GetFragmentLightfvSGIX),
    GetFragmentLightivSGIX: FnPtr::new(loadfn("glGetFragmentLightivSGIX"), failing::GetFragmentLightivSGIX),
    GetFragmentMaterialfvSGIX: FnPtr::new(loadfn("glGetFragmentMaterialfvSGIX"), failing::GetFragmentMaterialfvSGIX),
    GetFragmentMaterialivSGIX: FnPtr::new(loadfn("glGetFragmentMaterialivSGIX"), failing::GetFragmentMaterialivSGIX),
    GetFramebufferAttachmentParameteriv: FnPtr::new(loadfn("glGetFramebufferAttachmentParameteriv"), failing::GetFramebufferAttachmentParameteriv),
    GetFramebufferAttachmentParameterivEXT: FnPtr::new(loadfn("glGetFramebufferAttachmentParameterivEXT"), failing::GetFramebufferAttachmentParameterivEXT),
    GetFramebufferAttachmentParameterivOES: FnPtr::new(loadfn("glGetFramebufferAttachmentParameterivOES"), failing::GetFramebufferAttachmentParameterivOES),
    GetFramebufferParameteriv: FnPtr::new(loadfn("glGetFramebufferParameteriv"), failing::GetFramebufferParameteriv),
    GetFramebufferParameterivEXT: FnPtr::new(loadfn("glGetFramebufferParameterivEXT"), failing::GetFramebufferParameterivEXT),
    GetGraphicsResetStatusARB: FnPtr::new(loadfn("glGetGraphicsResetStatusARB"), failing::GetGraphicsResetStatusARB),
    GetGraphicsResetStatusEXT: FnPtr::new(loadfn("glGetGraphicsResetStatusEXT"), failing::GetGraphicsResetStatusEXT),
    GetHandleARB: FnPtr::new(loadfn("glGetHandleARB"), failing::GetHandleARB),
    GetHistogram: FnPtr::new(loadfn("glGetHistogram"), failing::GetHistogram),
    GetHistogramEXT: FnPtr::new(loadfn("glGetHistogramEXT"), failing::GetHistogramEXT),
    GetHistogramParameterfv: FnPtr::new(loadfn("glGetHistogramParameterfv"), failing::GetHistogramParameterfv),
    GetHistogramParameterfvEXT: FnPtr::new(loadfn("glGetHistogramParameterfvEXT"), failing::GetHistogramParameterfvEXT),
    GetHistogramParameteriv: FnPtr::new(loadfn("glGetHistogramParameteriv"), failing::GetHistogramParameteriv),
    GetHistogramParameterivEXT: FnPtr::new(loadfn("glGetHistogramParameterivEXT"), failing::GetHistogramParameterivEXT),
    GetHistogramParameterxvOES: FnPtr::new(loadfn("glGetHistogramParameterxvOES"), failing::GetHistogramParameterxvOES),
    GetImageHandleARB: FnPtr::new(loadfn("glGetImageHandleARB"), failing::GetImageHandleARB),
    GetImageHandleNV: FnPtr::new(loadfn("glGetImageHandleNV"), failing::GetImageHandleNV),
    GetImageTransformParameterfvHP: FnPtr::new(loadfn("glGetImageTransformParameterfvHP"), failing::GetImageTransformParameterfvHP),
    GetImageTransformParameterivHP: FnPtr::new(loadfn("glGetImageTransformParameterivHP"), failing::GetImageTransformParameterivHP),
    GetInfoLogARB: FnPtr::new(loadfn("glGetInfoLogARB"), failing::GetInfoLogARB),
    GetInstrumentsSGIX: FnPtr::new(loadfn("glGetInstrumentsSGIX"), failing::GetInstrumentsSGIX),
    GetInteger64i_v: FnPtr::new(loadfn("glGetInteger64i_v"), failing::GetInteger64i_v),
    GetInteger64v: FnPtr::new(loadfn("glGetInteger64v"), failing::GetInteger64v),
    GetInteger64vAPPLE: FnPtr::new(loadfn("glGetInteger64vAPPLE"), failing::GetInteger64vAPPLE),
    GetIntegerIndexedvEXT: FnPtr::new(loadfn("glGetIntegerIndexedvEXT"), failing::GetIntegerIndexedvEXT),
    GetIntegeri_v: FnPtr::new(loadfn("glGetIntegeri_v"), failing::GetIntegeri_v),
    GetIntegeri_vEXT: FnPtr::new(loadfn("glGetIntegeri_vEXT"), failing::GetIntegeri_vEXT),
    GetIntegerui64i_vNV: FnPtr::new(loadfn("glGetIntegerui64i_vNV"), failing::GetIntegerui64i_vNV),
    GetIntegerui64vNV: FnPtr::new(loadfn("glGetIntegerui64vNV"), failing::GetIntegerui64vNV),
    GetIntegerv: FnPtr::new(loadfn("glGetIntegerv"), failing::GetIntegerv),
    GetInternalformati64v: FnPtr::new(loadfn("glGetInternalformati64v"), failing::GetInternalformati64v),
    GetInternalformativ: FnPtr::new(loadfn("glGetInternalformativ"), failing::GetInternalformativ),
    GetInvariantBooleanvEXT: FnPtr::new(loadfn("glGetInvariantBooleanvEXT"), failing::GetInvariantBooleanvEXT),
    GetInvariantFloatvEXT: FnPtr::new(loadfn("glGetInvariantFloatvEXT"), failing::GetInvariantFloatvEXT),
    GetInvariantIntegervEXT: FnPtr::new(loadfn("glGetInvariantIntegervEXT"), failing::GetInvariantIntegervEXT),
    GetLightfv: FnPtr::new(loadfn("glGetLightfv"), failing::GetLightfv),
    GetLightiv: FnPtr::new(loadfn("glGetLightiv"), failing::GetLightiv),
    GetLightx: FnPtr::new(loadfn("glGetLightx"), failing::GetLightx),
    GetLightxOES: FnPtr::new(loadfn("glGetLightxOES"), failing::GetLightxOES),
    GetLightxv: FnPtr::new(loadfn("glGetLightxv"), failing::GetLightxv),
    GetLightxvOES: FnPtr::new(loadfn("glGetLightxvOES"), failing::GetLightxvOES),
    GetListParameterfvSGIX: FnPtr::new(loadfn("glGetListParameterfvSGIX"), failing::GetListParameterfvSGIX),
    GetListParameterivSGIX: FnPtr::new(loadfn("glGetListParameterivSGIX"), failing::GetListParameterivSGIX),
    GetLocalConstantBooleanvEXT: FnPtr::new(loadfn("glGetLocalConstantBooleanvEXT"), failing::GetLocalConstantBooleanvEXT),
    GetLocalConstantFloatvEXT: FnPtr::new(loadfn("glGetLocalConstantFloatvEXT"), failing::GetLocalConstantFloatvEXT),
    GetLocalConstantIntegervEXT: FnPtr::new(loadfn("glGetLocalConstantIntegervEXT"), failing::GetLocalConstantIntegervEXT),
    GetMapAttribParameterfvNV: FnPtr::new(loadfn("glGetMapAttribParameterfvNV"), failing::GetMapAttribParameterfvNV),
    GetMapAttribParameterivNV: FnPtr::new(loadfn("glGetMapAttribParameterivNV"), failing::GetMapAttribParameterivNV),
    GetMapControlPointsNV: FnPtr::new(loadfn("glGetMapControlPointsNV"), failing::GetMapControlPointsNV),
    GetMapParameterfvNV: FnPtr::new(loadfn("glGetMapParameterfvNV"), failing::GetMapParameterfvNV),
    GetMapParameterivNV: FnPtr::new(loadfn("glGetMapParameterivNV"), failing::GetMapParameterivNV),
    GetMapdv: FnPtr::new(loadfn("glGetMapdv"), failing::GetMapdv),
    GetMapfv: FnPtr::new(loadfn("glGetMapfv"), failing::GetMapfv),
    GetMapiv: FnPtr::new(loadfn("glGetMapiv"), failing::GetMapiv),
    GetMapxvOES: FnPtr::new(loadfn("glGetMapxvOES"), failing::GetMapxvOES),
    GetMaterialfv: FnPtr::new(loadfn("glGetMaterialfv"), failing::GetMaterialfv),
    GetMaterialiv: FnPtr::new(loadfn("glGetMaterialiv"), failing::GetMaterialiv),
    GetMaterialx: FnPtr::new(loadfn("glGetMaterialx"), failing::GetMaterialx),
    GetMaterialxOES: FnPtr::new(loadfn("glGetMaterialxOES"), failing::GetMaterialxOES),
    GetMaterialxv: FnPtr::new(loadfn("glGetMaterialxv"), failing::GetMaterialxv),
    GetMaterialxvOES: FnPtr::new(loadfn("glGetMaterialxvOES"), failing::GetMaterialxvOES),
    GetMinmax: FnPtr::new(loadfn("glGetMinmax"), failing::GetMinmax),
    GetMinmaxEXT: FnPtr::new(loadfn("glGetMinmaxEXT"), failing::GetMinmaxEXT),
    GetMinmaxParameterfv: FnPtr::new(loadfn("glGetMinmaxParameterfv"), failing::GetMinmaxParameterfv),
    GetMinmaxParameterfvEXT: FnPtr::new(loadfn("glGetMinmaxParameterfvEXT"), failing::GetMinmaxParameterfvEXT),
    GetMinmaxParameteriv: FnPtr::new(loadfn("glGetMinmaxParameteriv"), failing::GetMinmaxParameteriv),
    GetMinmaxParameterivEXT: FnPtr::new(loadfn("glGetMinmaxParameterivEXT"), failing::GetMinmaxParameterivEXT),
    GetMultiTexEnvfvEXT: FnPtr::new(loadfn("glGetMultiTexEnvfvEXT"), failing::GetMultiTexEnvfvEXT),
    GetMultiTexEnvivEXT: FnPtr::new(loadfn("glGetMultiTexEnvivEXT"), failing::GetMultiTexEnvivEXT),
    GetMultiTexGendvEXT: FnPtr::new(loadfn("glGetMultiTexGendvEXT"), failing::GetMultiTexGendvEXT),
    GetMultiTexGenfvEXT: FnPtr::new(loadfn("glGetMultiTexGenfvEXT"), failing::GetMultiTexGenfvEXT),
    GetMultiTexGenivEXT: FnPtr::new(loadfn("glGetMultiTexGenivEXT"), failing::GetMultiTexGenivEXT),
    GetMultiTexImageEXT: FnPtr::new(loadfn("glGetMultiTexImageEXT"), failing::GetMultiTexImageEXT),
    GetMultiTexLevelParameterfvEXT: FnPtr::new(loadfn("glGetMultiTexLevelParameterfvEXT"), failing::GetMultiTexLevelParameterfvEXT),
    GetMultiTexLevelParameterivEXT: FnPtr::new(loadfn("glGetMultiTexLevelParameterivEXT"), failing::GetMultiTexLevelParameterivEXT),
    GetMultiTexParameterIivEXT: FnPtr::new(loadfn("glGetMultiTexParameterIivEXT"), failing::GetMultiTexParameterIivEXT),
    GetMultiTexParameterIuivEXT: FnPtr::new(loadfn("glGetMultiTexParameterIuivEXT"), failing::GetMultiTexParameterIuivEXT),
    GetMultiTexParameterfvEXT: FnPtr::new(loadfn("glGetMultiTexParameterfvEXT"), failing::GetMultiTexParameterfvEXT),
    GetMultiTexParameterivEXT: FnPtr::new(loadfn("glGetMultiTexParameterivEXT"), failing::GetMultiTexParameterivEXT),
    GetMultisamplefv: FnPtr::new(loadfn("glGetMultisamplefv"), failing::GetMultisamplefv),
    GetMultisamplefvNV: FnPtr::new(loadfn("glGetMultisamplefvNV"), failing::GetMultisamplefvNV),
    GetNamedBufferParameterivEXT: FnPtr::new(loadfn("glGetNamedBufferParameterivEXT"), failing::GetNamedBufferParameterivEXT),
    GetNamedBufferParameterui64vNV: FnPtr::new(loadfn("glGetNamedBufferParameterui64vNV"), failing::GetNamedBufferParameterui64vNV),
    GetNamedBufferPointervEXT: FnPtr::new(loadfn("glGetNamedBufferPointervEXT"), failing::GetNamedBufferPointervEXT),
    GetNamedBufferSubDataEXT: FnPtr::new(loadfn("glGetNamedBufferSubDataEXT"), failing::GetNamedBufferSubDataEXT),
    GetNamedFramebufferAttachmentParameterivEXT: FnPtr::new(loadfn("glGetNamedFramebufferAttachmentParameterivEXT"), failing::GetNamedFramebufferAttachmentParameterivEXT),
    GetNamedFramebufferParameterivEXT: FnPtr::new(loadfn("glGetNamedFramebufferParameterivEXT"), failing::GetNamedFramebufferParameterivEXT),
    GetNamedProgramLocalParameterIivEXT: FnPtr::new(loadfn("glGetNamedProgramLocalParameterIivEXT"), failing::GetNamedProgramLocalParameterIivEXT),
    GetNamedProgramLocalParameterIuivEXT: FnPtr::new(loadfn("glGetNamedProgramLocalParameterIuivEXT"), failing::GetNamedProgramLocalParameterIuivEXT),
    GetNamedProgramLocalParameterdvEXT: FnPtr::new(loadfn("glGetNamedProgramLocalParameterdvEXT"), failing::GetNamedProgramLocalParameterdvEXT),
    GetNamedProgramLocalParameterfvEXT: FnPtr::new(loadfn("glGetNamedProgramLocalParameterfvEXT"), failing::GetNamedProgramLocalParameterfvEXT),
    GetNamedProgramStringEXT: FnPtr::new(loadfn("glGetNamedProgramStringEXT"), failing::GetNamedProgramStringEXT),
    GetNamedProgramivEXT: FnPtr::new(loadfn("glGetNamedProgramivEXT"), failing::GetNamedProgramivEXT),
    GetNamedRenderbufferParameterivEXT: FnPtr::new(loadfn("glGetNamedRenderbufferParameterivEXT"), failing::GetNamedRenderbufferParameterivEXT),
    GetNamedStringARB: FnPtr::new(loadfn("glGetNamedStringARB"), failing::GetNamedStringARB),
    GetNamedStringivARB: FnPtr::new(loadfn("glGetNamedStringivARB"), failing::GetNamedStringivARB),
    GetObjectBufferfvATI: FnPtr::new(loadfn("glGetObjectBufferfvATI"), failing::GetObjectBufferfvATI),
    GetObjectBufferivATI: FnPtr::new(loadfn("glGetObjectBufferivATI"), failing::GetObjectBufferivATI),
    GetObjectLabel: FnPtr::new(loadfn("glGetObjectLabel"), failing::GetObjectLabel),
    GetObjectLabelEXT: FnPtr::new(loadfn("glGetObjectLabelEXT"), failing::GetObjectLabelEXT),
    GetObjectLabelKHR: FnPtr::new(loadfn("glGetObjectLabelKHR"), failing::GetObjectLabelKHR),
    GetObjectParameterfvARB: FnPtr::new(loadfn("glGetObjectParameterfvARB"), failing::GetObjectParameterfvARB),
    GetObjectParameterivAPPLE: FnPtr::new(loadfn("glGetObjectParameterivAPPLE"), failing::GetObjectParameterivAPPLE),
    GetObjectParameterivARB: FnPtr::new(loadfn("glGetObjectParameterivARB"), failing::GetObjectParameterivARB),
    GetObjectPtrLabel: FnPtr::new(loadfn("glGetObjectPtrLabel"), failing::GetObjectPtrLabel),
    GetObjectPtrLabelKHR: FnPtr::new(loadfn("glGetObjectPtrLabelKHR"), failing::GetObjectPtrLabelKHR),
    GetOcclusionQueryivNV: FnPtr::new(loadfn("glGetOcclusionQueryivNV"), failing::GetOcclusionQueryivNV),
    GetOcclusionQueryuivNV: FnPtr::new(loadfn("glGetOcclusionQueryuivNV"), failing::GetOcclusionQueryuivNV),
    GetPathColorGenfvNV: FnPtr::new(loadfn("glGetPathColorGenfvNV"), failing::GetPathColorGenfvNV),
    GetPathColorGenivNV: FnPtr::new(loadfn("glGetPathColorGenivNV"), failing::GetPathColorGenivNV),
    GetPathCommandsNV: FnPtr::new(loadfn("glGetPathCommandsNV"), failing::GetPathCommandsNV),
    GetPathCoordsNV: FnPtr::new(loadfn("glGetPathCoordsNV"), failing::GetPathCoordsNV),
    GetPathDashArrayNV: FnPtr::new(loadfn("glGetPathDashArrayNV"), failing::GetPathDashArrayNV),
    GetPathLengthNV: FnPtr::new(loadfn("glGetPathLengthNV"), failing::GetPathLengthNV),
    GetPathMetricRangeNV: FnPtr::new(loadfn("glGetPathMetricRangeNV"), failing::GetPathMetricRangeNV),
    GetPathMetricsNV: FnPtr::new(loadfn("glGetPathMetricsNV"), failing::GetPathMetricsNV),
    GetPathParameterfvNV: FnPtr::new(loadfn("glGetPathParameterfvNV"), failing::GetPathParameterfvNV),
    GetPathParameterivNV: FnPtr::new(loadfn("glGetPathParameterivNV"), failing::GetPathParameterivNV),
    GetPathSpacingNV: FnPtr::new(loadfn("glGetPathSpacingNV"), failing::GetPathSpacingNV),
    GetPathTexGenfvNV: FnPtr::new(loadfn("glGetPathTexGenfvNV"), failing::GetPathTexGenfvNV),
    GetPathTexGenivNV: FnPtr::new(loadfn("glGetPathTexGenivNV"), failing::GetPathTexGenivNV),
    GetPerfMonitorCounterDataAMD: FnPtr::new(loadfn("glGetPerfMonitorCounterDataAMD"), failing::GetPerfMonitorCounterDataAMD),
    GetPerfMonitorCounterInfoAMD: FnPtr::new(loadfn("glGetPerfMonitorCounterInfoAMD"), failing::GetPerfMonitorCounterInfoAMD),
    GetPerfMonitorCounterStringAMD: FnPtr::new(loadfn("glGetPerfMonitorCounterStringAMD"), failing::GetPerfMonitorCounterStringAMD),
    GetPerfMonitorCountersAMD: FnPtr::new(loadfn("glGetPerfMonitorCountersAMD"), failing::GetPerfMonitorCountersAMD),
    GetPerfMonitorGroupStringAMD: FnPtr::new(loadfn("glGetPerfMonitorGroupStringAMD"), failing::GetPerfMonitorGroupStringAMD),
    GetPerfMonitorGroupsAMD: FnPtr::new(loadfn("glGetPerfMonitorGroupsAMD"), failing::GetPerfMonitorGroupsAMD),
    GetPixelMapfv: FnPtr::new(loadfn("glGetPixelMapfv"), failing::GetPixelMapfv),
    GetPixelMapuiv: FnPtr::new(loadfn("glGetPixelMapuiv"), failing::GetPixelMapuiv),
    GetPixelMapusv: FnPtr::new(loadfn("glGetPixelMapusv"), failing::GetPixelMapusv),
    GetPixelMapxv: FnPtr::new(loadfn("glGetPixelMapxv"), failing::GetPixelMapxv),
    GetPixelTexGenParameterfvSGIS: FnPtr::new(loadfn("glGetPixelTexGenParameterfvSGIS"), failing::GetPixelTexGenParameterfvSGIS),
    GetPixelTexGenParameterivSGIS: FnPtr::new(loadfn("glGetPixelTexGenParameterivSGIS"), failing::GetPixelTexGenParameterivSGIS),
    GetPixelTransformParameterfvEXT: FnPtr::new(loadfn("glGetPixelTransformParameterfvEXT"), failing::GetPixelTransformParameterfvEXT),
    GetPixelTransformParameterivEXT: FnPtr::new(loadfn("glGetPixelTransformParameterivEXT"), failing::GetPixelTransformParameterivEXT),
    GetPointerIndexedvEXT: FnPtr::new(loadfn("glGetPointerIndexedvEXT"), failing::GetPointerIndexedvEXT),
    GetPointeri_vEXT: FnPtr::new(loadfn("glGetPointeri_vEXT"), failing::GetPointeri_vEXT),
    GetPointerv: FnPtr::new(loadfn("glGetPointerv"), failing::GetPointerv),
    GetPointervEXT: FnPtr::new(loadfn("glGetPointervEXT"), failing::GetPointervEXT),
    GetPointervKHR: FnPtr::new(loadfn("glGetPointervKHR"), failing::GetPointervKHR),
    GetPolygonStipple: FnPtr::new(loadfn("glGetPolygonStipple"), failing::GetPolygonStipple),
    GetProgramBinary: FnPtr::new(loadfn("glGetProgramBinary"), failing::GetProgramBinary),
    GetProgramBinaryOES: FnPtr::new(loadfn("glGetProgramBinaryOES"), failing::GetProgramBinaryOES),
    GetProgramEnvParameterIivNV: FnPtr::new(loadfn("glGetProgramEnvParameterIivNV"), failing::GetProgramEnvParameterIivNV),
    GetProgramEnvParameterIuivNV: FnPtr::new(loadfn("glGetProgramEnvParameterIuivNV"), failing::GetProgramEnvParameterIuivNV),
    GetProgramEnvParameterdvARB: FnPtr::new(loadfn("glGetProgramEnvParameterdvARB"), failing::GetProgramEnvParameterdvARB),
    GetProgramEnvParameterfvARB: FnPtr::new(loadfn("glGetProgramEnvParameterfvARB"), failing::GetProgramEnvParameterfvARB),
    GetProgramInfoLog: FnPtr::new(loadfn("glGetProgramInfoLog"), failing::GetProgramInfoLog),
    GetProgramInterfaceiv: FnPtr::new(loadfn("glGetProgramInterfaceiv"), failing::GetProgramInterfaceiv),
    GetProgramLocalParameterIivNV: FnPtr::new(loadfn("glGetProgramLocalParameterIivNV"), failing::GetProgramLocalParameterIivNV),
    GetProgramLocalParameterIuivNV: FnPtr::new(loadfn("glGetProgramLocalParameterIuivNV"), failing::GetProgramLocalParameterIuivNV),
    GetProgramLocalParameterdvARB: FnPtr::new(loadfn("glGetProgramLocalParameterdvARB"), failing::GetProgramLocalParameterdvARB),
    GetProgramLocalParameterfvARB: FnPtr::new(loadfn("glGetProgramLocalParameterfvARB"), failing::GetProgramLocalParameterfvARB),
    GetProgramNamedParameterdvNV: FnPtr::new(loadfn("glGetProgramNamedParameterdvNV"), failing::GetProgramNamedParameterdvNV),
    GetProgramNamedParameterfvNV: FnPtr::new(loadfn("glGetProgramNamedParameterfvNV"), failing::GetProgramNamedParameterfvNV),
    GetProgramParameterdvNV: FnPtr::new(loadfn("glGetProgramParameterdvNV"), failing::GetProgramParameterdvNV),
    GetProgramParameterfvNV: FnPtr::new(loadfn("glGetProgramParameterfvNV"), failing::GetProgramParameterfvNV),
    GetProgramPipelineInfoLog: FnPtr::new(loadfn("glGetProgramPipelineInfoLog"), failing::GetProgramPipelineInfoLog),
    GetProgramPipelineInfoLogEXT: FnPtr::new(loadfn("glGetProgramPipelineInfoLogEXT"), failing::GetProgramPipelineInfoLogEXT),
    GetProgramPipelineiv: FnPtr::new(loadfn("glGetProgramPipelineiv"), failing::GetProgramPipelineiv),
    GetProgramPipelineivEXT: FnPtr::new(loadfn("glGetProgramPipelineivEXT"), failing::GetProgramPipelineivEXT),
    GetProgramResourceIndex: FnPtr::new(loadfn("glGetProgramResourceIndex"), failing::GetProgramResourceIndex),
    GetProgramResourceLocation: FnPtr::new(loadfn("glGetProgramResourceLocation"), failing::GetProgramResourceLocation),
    GetProgramResourceLocationIndex: FnPtr::new(loadfn("glGetProgramResourceLocationIndex"), failing::GetProgramResourceLocationIndex),
    GetProgramResourceName: FnPtr::new(loadfn("glGetProgramResourceName"), failing::GetProgramResourceName),
    GetProgramResourceiv: FnPtr::new(loadfn("glGetProgramResourceiv"), failing::GetProgramResourceiv),
    GetProgramStageiv: FnPtr::new(loadfn("glGetProgramStageiv"), failing::GetProgramStageiv),
    GetProgramStringARB: FnPtr::new(loadfn("glGetProgramStringARB"), failing::GetProgramStringARB),
    GetProgramStringNV: FnPtr::new(loadfn("glGetProgramStringNV"), failing::GetProgramStringNV),
    GetProgramSubroutineParameteruivNV: FnPtr::new(loadfn("glGetProgramSubroutineParameteruivNV"), failing::GetProgramSubroutineParameteruivNV),
    GetProgramiv: FnPtr::new(loadfn("glGetProgramiv"), failing::GetProgramiv),
    GetProgramivARB: FnPtr::new(loadfn("glGetProgramivARB"), failing::GetProgramivARB),
    GetProgramivNV: FnPtr::new(loadfn("glGetProgramivNV"), failing::GetProgramivNV),
    GetQueryIndexediv: FnPtr::new(loadfn("glGetQueryIndexediv"), failing::GetQueryIndexediv),
    GetQueryObjecti64v: FnPtr::new(loadfn("glGetQueryObjecti64v"), failing::GetQueryObjecti64v),
    GetQueryObjecti64vEXT: FnPtr::new(loadfn("glGetQueryObjecti64vEXT"), failing::GetQueryObjecti64vEXT),
    GetQueryObjectiv: FnPtr::new(loadfn("glGetQueryObjectiv"), failing::GetQueryObjectiv),
    GetQueryObjectivARB: FnPtr::new(loadfn("glGetQueryObjectivARB"), failing::GetQueryObjectivARB),
    GetQueryObjectivEXT: FnPtr::new(loadfn("glGetQueryObjectivEXT"), failing::GetQueryObjectivEXT),
    GetQueryObjectui64v: FnPtr::new(loadfn("glGetQueryObjectui64v"), failing::GetQueryObjectui64v),
    GetQueryObjectui64vEXT: FnPtr::new(loadfn("glGetQueryObjectui64vEXT"), failing::GetQueryObjectui64vEXT),
    GetQueryObjectuiv: FnPtr::new(loadfn("glGetQueryObjectuiv"), failing::GetQueryObjectuiv),
    GetQueryObjectuivARB: FnPtr::new(loadfn("glGetQueryObjectuivARB"), failing::GetQueryObjectuivARB),
    GetQueryObjectuivEXT: FnPtr::new(loadfn("glGetQueryObjectuivEXT"), failing::GetQueryObjectuivEXT),
    GetQueryiv: FnPtr::new(loadfn("glGetQueryiv"), failing::GetQueryiv),
    GetQueryivARB: FnPtr::new(loadfn("glGetQueryivARB"), failing::GetQueryivARB),
    GetQueryivEXT: FnPtr::new(loadfn("glGetQueryivEXT"), failing::GetQueryivEXT),
    GetRenderbufferParameteriv: FnPtr::new(loadfn("glGetRenderbufferParameteriv"), failing::GetRenderbufferParameteriv),
    GetRenderbufferParameterivEXT: FnPtr::new(loadfn("glGetRenderbufferParameterivEXT"), failing::GetRenderbufferParameterivEXT),
    GetRenderbufferParameterivOES: FnPtr::new(loadfn("glGetRenderbufferParameterivOES"), failing::GetRenderbufferParameterivOES),
    GetSamplerParameterIiv: FnPtr::new(loadfn("glGetSamplerParameterIiv"), failing::GetSamplerParameterIiv),
    GetSamplerParameterIuiv: FnPtr::new(loadfn("glGetSamplerParameterIuiv"), failing::GetSamplerParameterIuiv),
    GetSamplerParameterfv: FnPtr::new(loadfn("glGetSamplerParameterfv"), failing::GetSamplerParameterfv),
    GetSamplerParameteriv: FnPtr::new(loadfn("glGetSamplerParameteriv"), failing::GetSamplerParameteriv),
    GetSeparableFilter: FnPtr::new(loadfn("glGetSeparableFilter"), failing::GetSeparableFilter),
    GetSeparableFilterEXT: FnPtr::new(loadfn("glGetSeparableFilterEXT"), failing::GetSeparableFilterEXT),
    GetShaderInfoLog: FnPtr::new(loadfn("glGetShaderInfoLog"), failing::GetShaderInfoLog),
    GetShaderPrecisionFormat: FnPtr::new(loadfn("glGetShaderPrecisionFormat"), failing::GetShaderPrecisionFormat),
    GetShaderSource: FnPtr::new(loadfn("glGetShaderSource"), failing::GetShaderSource),
    GetShaderSourceARB: FnPtr::new(loadfn("glGetShaderSourceARB"), failing::GetShaderSourceARB),
    GetShaderiv: FnPtr::new(loadfn("glGetShaderiv"), failing::GetShaderiv),
    GetSharpenTexFuncSGIS: FnPtr::new(loadfn("glGetSharpenTexFuncSGIS"), failing::GetSharpenTexFuncSGIS),
    GetString: FnPtr::new(loadfn("glGetString"), failing::GetString),
    GetStringi: FnPtr::new(loadfn("glGetStringi"), failing::GetStringi),
    GetSubroutineIndex: FnPtr::new(loadfn("glGetSubroutineIndex"), failing::GetSubroutineIndex),
    GetSubroutineUniformLocation: FnPtr::new(loadfn("glGetSubroutineUniformLocation"), failing::GetSubroutineUniformLocation),
    GetSynciv: FnPtr::new(loadfn("glGetSynciv"), failing::GetSynciv),
    GetSyncivAPPLE: FnPtr::new(loadfn("glGetSyncivAPPLE"), failing::GetSyncivAPPLE),
    GetTexBumpParameterfvATI: FnPtr::new(loadfn("glGetTexBumpParameterfvATI"), failing::GetTexBumpParameterfvATI),
    GetTexBumpParameterivATI: FnPtr::new(loadfn("glGetTexBumpParameterivATI"), failing::GetTexBumpParameterivATI),
    GetTexEnvfv: FnPtr::new(loadfn("glGetTexEnvfv"), failing::GetTexEnvfv),
    GetTexEnviv: FnPtr::new(loadfn("glGetTexEnviv"), failing::GetTexEnviv),
    GetTexEnvxv: FnPtr::new(loadfn("glGetTexEnvxv"), failing::GetTexEnvxv),
    GetTexEnvxvOES: FnPtr::new(loadfn("glGetTexEnvxvOES"), failing::GetTexEnvxvOES),
    GetTexFilterFuncSGIS: FnPtr::new(loadfn("glGetTexFilterFuncSGIS"), failing::GetTexFilterFuncSGIS),
    GetTexGendv: FnPtr::new(loadfn("glGetTexGendv"), failing::GetTexGendv),
    GetTexGenfv: FnPtr::new(loadfn("glGetTexGenfv"), failing::GetTexGenfv),
    GetTexGenfvOES: FnPtr::new(loadfn("glGetTexGenfvOES"), failing::GetTexGenfvOES),
    GetTexGeniv: FnPtr::new(loadfn("glGetTexGeniv"), failing::GetTexGeniv),
    GetTexGenivOES: FnPtr::new(loadfn("glGetTexGenivOES"), failing::GetTexGenivOES),
    GetTexGenxvOES: FnPtr::new(loadfn("glGetTexGenxvOES"), failing::GetTexGenxvOES),
    GetTexImage: FnPtr::new(loadfn("glGetTexImage"), failing::GetTexImage),
    GetTexLevelParameterfv: FnPtr::new(loadfn("glGetTexLevelParameterfv"), failing::GetTexLevelParameterfv),
    GetTexLevelParameteriv: FnPtr::new(loadfn("glGetTexLevelParameteriv"), failing::GetTexLevelParameteriv),
    GetTexLevelParameterxvOES: FnPtr::new(loadfn("glGetTexLevelParameterxvOES"), failing::GetTexLevelParameterxvOES),
    GetTexParameterIiv: FnPtr::new(loadfn("glGetTexParameterIiv"), failing::GetTexParameterIiv),
    GetTexParameterIivEXT: FnPtr::new(loadfn("glGetTexParameterIivEXT"), failing::GetTexParameterIivEXT),
    GetTexParameterIuiv: FnPtr::new(loadfn("glGetTexParameterIuiv"), failing::GetTexParameterIuiv),
    GetTexParameterIuivEXT: FnPtr::new(loadfn("glGetTexParameterIuivEXT"), failing::GetTexParameterIuivEXT),
    GetTexParameterPointervAPPLE: FnPtr::new(loadfn("glGetTexParameterPointervAPPLE"), failing::GetTexParameterPointervAPPLE),
    GetTexParameterfv: FnPtr::new(loadfn("glGetTexParameterfv"), failing::GetTexParameterfv),
    GetTexParameteriv: FnPtr::new(loadfn("glGetTexParameteriv"), failing::GetTexParameteriv),
    GetTexParameterxv: FnPtr::new(loadfn("glGetTexParameterxv"), failing::GetTexParameterxv),
    GetTexParameterxvOES: FnPtr::new(loadfn("glGetTexParameterxvOES"), failing::GetTexParameterxvOES),
    GetTextureHandleARB: FnPtr::new(loadfn("glGetTextureHandleARB"), failing::GetTextureHandleARB),
    GetTextureHandleNV: FnPtr::new(loadfn("glGetTextureHandleNV"), failing::GetTextureHandleNV),
    GetTextureImageEXT: FnPtr::new(loadfn("glGetTextureImageEXT"), failing::GetTextureImageEXT),
    GetTextureLevelParameterfvEXT: FnPtr::new(loadfn("glGetTextureLevelParameterfvEXT"), failing::GetTextureLevelParameterfvEXT),
    GetTextureLevelParameterivEXT: FnPtr::new(loadfn("glGetTextureLevelParameterivEXT"), failing::GetTextureLevelParameterivEXT),
    GetTextureParameterIivEXT: FnPtr::new(loadfn("glGetTextureParameterIivEXT"), failing::GetTextureParameterIivEXT),
    GetTextureParameterIuivEXT: FnPtr::new(loadfn("glGetTextureParameterIuivEXT"), failing::GetTextureParameterIuivEXT),
    GetTextureParameterfvEXT: FnPtr::new(loadfn("glGetTextureParameterfvEXT"), failing::GetTextureParameterfvEXT),
    GetTextureParameterivEXT: FnPtr::new(loadfn("glGetTextureParameterivEXT"), failing::GetTextureParameterivEXT),
    GetTextureSamplerHandleARB: FnPtr::new(loadfn("glGetTextureSamplerHandleARB"), failing::GetTextureSamplerHandleARB),
    GetTextureSamplerHandleNV: FnPtr::new(loadfn("glGetTextureSamplerHandleNV"), failing::GetTextureSamplerHandleNV),
    GetTrackMatrixivNV: FnPtr::new(loadfn("glGetTrackMatrixivNV"), failing::GetTrackMatrixivNV),
    GetTransformFeedbackVarying: FnPtr::new(loadfn("glGetTransformFeedbackVarying"), failing::GetTransformFeedbackVarying),
    GetTransformFeedbackVaryingEXT: FnPtr::new(loadfn("glGetTransformFeedbackVaryingEXT"), failing::GetTransformFeedbackVaryingEXT),
    GetTransformFeedbackVaryingNV: FnPtr::new(loadfn("glGetTransformFeedbackVaryingNV"), failing::GetTransformFeedbackVaryingNV),
    GetTranslatedShaderSourceANGLE: FnPtr::new(loadfn("glGetTranslatedShaderSourceANGLE"), failing::GetTranslatedShaderSourceANGLE),
    GetUniformBlockIndex: FnPtr::new(loadfn("glGetUniformBlockIndex"), failing::GetUniformBlockIndex),
    GetUniformBufferSizeEXT: FnPtr::new(loadfn("glGetUniformBufferSizeEXT"), failing::GetUniformBufferSizeEXT),
    GetUniformIndices: FnPtr::new(loadfn("glGetUniformIndices"), failing::GetUniformIndices),
    GetUniformLocation: FnPtr::new(loadfn("glGetUniformLocation"), failing::GetUniformLocation),
    GetUniformLocationARB: FnPtr::new(loadfn("glGetUniformLocationARB"), failing::GetUniformLocationARB),
    GetUniformOffsetEXT: FnPtr::new(loadfn("glGetUniformOffsetEXT"), failing::GetUniformOffsetEXT),
    GetUniformSubroutineuiv: FnPtr::new(loadfn("glGetUniformSubroutineuiv"), failing::GetUniformSubroutineuiv),
    GetUniformdv: FnPtr::new(loadfn("glGetUniformdv"), failing::GetUniformdv),
    GetUniformfv: FnPtr::new(loadfn("glGetUniformfv"), failing::GetUniformfv),
    GetUniformfvARB: FnPtr::new(loadfn("glGetUniformfvARB"), failing::GetUniformfvARB),
    GetUniformi64vNV: FnPtr::new(loadfn("glGetUniformi64vNV"), failing::GetUniformi64vNV),
    GetUniformiv: FnPtr::new(loadfn("glGetUniformiv"), failing::GetUniformiv),
    GetUniformivARB: FnPtr::new(loadfn("glGetUniformivARB"), failing::GetUniformivARB),
    GetUniformui64vNV: FnPtr::new(loadfn("glGetUniformui64vNV"), failing::GetUniformui64vNV),
    GetUniformuiv: FnPtr::new(loadfn("glGetUniformuiv"), failing::GetUniformuiv),
    GetUniformuivEXT: FnPtr::new(loadfn("glGetUniformuivEXT"), failing::GetUniformuivEXT),
    GetVariantArrayObjectfvATI: FnPtr::new(loadfn("glGetVariantArrayObjectfvATI"), failing::GetVariantArrayObjectfvATI),
    GetVariantArrayObjectivATI: FnPtr::new(loadfn("glGetVariantArrayObjectivATI"), failing::GetVariantArrayObjectivATI),
    GetVariantBooleanvEXT: FnPtr::new(loadfn("glGetVariantBooleanvEXT"), failing::GetVariantBooleanvEXT),
    GetVariantFloatvEXT: FnPtr::new(loadfn("glGetVariantFloatvEXT"), failing::GetVariantFloatvEXT),
    GetVariantIntegervEXT: FnPtr::new(loadfn("glGetVariantIntegervEXT"), failing::GetVariantIntegervEXT),
    GetVariantPointervEXT: FnPtr::new(loadfn("glGetVariantPointervEXT"), failing::GetVariantPointervEXT),
    GetVaryingLocationNV: FnPtr::new(loadfn("glGetVaryingLocationNV"), failing::GetVaryingLocationNV),
    GetVertexArrayIntegeri_vEXT: FnPtr::new(loadfn("glGetVertexArrayIntegeri_vEXT"), failing::GetVertexArrayIntegeri_vEXT),
    GetVertexArrayIntegervEXT: FnPtr::new(loadfn("glGetVertexArrayIntegervEXT"), failing::GetVertexArrayIntegervEXT),
    GetVertexArrayPointeri_vEXT: FnPtr::new(loadfn("glGetVertexArrayPointeri_vEXT"), failing::GetVertexArrayPointeri_vEXT),
    GetVertexArrayPointervEXT: FnPtr::new(loadfn("glGetVertexArrayPointervEXT"), failing::GetVertexArrayPointervEXT),
    GetVertexAttribArrayObjectfvATI: FnPtr::new(loadfn("glGetVertexAttribArrayObjectfvATI"), failing::GetVertexAttribArrayObjectfvATI),
    GetVertexAttribArrayObjectivATI: FnPtr::new(loadfn("glGetVertexAttribArrayObjectivATI"), failing::GetVertexAttribArrayObjectivATI),
    GetVertexAttribIiv: FnPtr::new(loadfn("glGetVertexAttribIiv"), failing::GetVertexAttribIiv),
    GetVertexAttribIivEXT: FnPtr::new(loadfn("glGetVertexAttribIivEXT"), failing::GetVertexAttribIivEXT),
    GetVertexAttribIuiv: FnPtr::new(loadfn("glGetVertexAttribIuiv"), failing::GetVertexAttribIuiv),
    GetVertexAttribIuivEXT: FnPtr::new(loadfn("glGetVertexAttribIuivEXT"), failing::GetVertexAttribIuivEXT),
    GetVertexAttribLdv: FnPtr::new(loadfn("glGetVertexAttribLdv"), failing::GetVertexAttribLdv),
    GetVertexAttribLdvEXT: FnPtr::new(loadfn("glGetVertexAttribLdvEXT"), failing::GetVertexAttribLdvEXT),
    GetVertexAttribLi64vNV: FnPtr::new(loadfn("glGetVertexAttribLi64vNV"), failing::GetVertexAttribLi64vNV),
    GetVertexAttribLui64vARB: FnPtr::new(loadfn("glGetVertexAttribLui64vARB"), failing::GetVertexAttribLui64vARB),
    GetVertexAttribLui64vNV: FnPtr::new(loadfn("glGetVertexAttribLui64vNV"), failing::GetVertexAttribLui64vNV),
    GetVertexAttribPointerv: FnPtr::new(loadfn("glGetVertexAttribPointerv"), failing::GetVertexAttribPointerv),
    GetVertexAttribPointervARB: FnPtr::new(loadfn("glGetVertexAttribPointervARB"), failing::GetVertexAttribPointervARB),
    GetVertexAttribPointervNV: FnPtr::new(loadfn("glGetVertexAttribPointervNV"), failing::GetVertexAttribPointervNV),
    GetVertexAttribdv: FnPtr::new(loadfn("glGetVertexAttribdv"), failing::GetVertexAttribdv),
    GetVertexAttribdvARB: FnPtr::new(loadfn("glGetVertexAttribdvARB"), failing::GetVertexAttribdvARB),
    GetVertexAttribdvNV: FnPtr::new(loadfn("glGetVertexAttribdvNV"), failing::GetVertexAttribdvNV),
    GetVertexAttribfv: FnPtr::new(loadfn("glGetVertexAttribfv"), failing::GetVertexAttribfv),
    GetVertexAttribfvARB: FnPtr::new(loadfn("glGetVertexAttribfvARB"), failing::GetVertexAttribfvARB),
    GetVertexAttribfvNV: FnPtr::new(loadfn("glGetVertexAttribfvNV"), failing::GetVertexAttribfvNV),
    GetVertexAttribiv: FnPtr::new(loadfn("glGetVertexAttribiv"), failing::GetVertexAttribiv),
    GetVertexAttribivARB: FnPtr::new(loadfn("glGetVertexAttribivARB"), failing::GetVertexAttribivARB),
    GetVertexAttribivNV: FnPtr::new(loadfn("glGetVertexAttribivNV"), failing::GetVertexAttribivNV),
    GetVideoCaptureStreamdvNV: FnPtr::new(loadfn("glGetVideoCaptureStreamdvNV"), failing::GetVideoCaptureStreamdvNV),
    GetVideoCaptureStreamfvNV: FnPtr::new(loadfn("glGetVideoCaptureStreamfvNV"), failing::GetVideoCaptureStreamfvNV),
    GetVideoCaptureStreamivNV: FnPtr::new(loadfn("glGetVideoCaptureStreamivNV"), failing::GetVideoCaptureStreamivNV),
    GetVideoCaptureivNV: FnPtr::new(loadfn("glGetVideoCaptureivNV"), failing::GetVideoCaptureivNV),
    GetVideoi64vNV: FnPtr::new(loadfn("glGetVideoi64vNV"), failing::GetVideoi64vNV),
    GetVideoivNV: FnPtr::new(loadfn("glGetVideoivNV"), failing::GetVideoivNV),
    GetVideoui64vNV: FnPtr::new(loadfn("glGetVideoui64vNV"), failing::GetVideoui64vNV),
    GetVideouivNV: FnPtr::new(loadfn("glGetVideouivNV"), failing::GetVideouivNV),
    GetnColorTableARB: FnPtr::new(loadfn("glGetnColorTableARB"), failing::GetnColorTableARB),
    GetnCompressedTexImageARB: FnPtr::new(loadfn("glGetnCompressedTexImageARB"), failing::GetnCompressedTexImageARB),
    GetnConvolutionFilterARB: FnPtr::new(loadfn("glGetnConvolutionFilterARB"), failing::GetnConvolutionFilterARB),
    GetnHistogramARB: FnPtr::new(loadfn("glGetnHistogramARB"), failing::GetnHistogramARB),
    GetnMapdvARB: FnPtr::new(loadfn("glGetnMapdvARB"), failing::GetnMapdvARB),
    GetnMapfvARB: FnPtr::new(loadfn("glGetnMapfvARB"), failing::GetnMapfvARB),
    GetnMapivARB: FnPtr::new(loadfn("glGetnMapivARB"), failing::GetnMapivARB),
    GetnMinmaxARB: FnPtr::new(loadfn("glGetnMinmaxARB"), failing::GetnMinmaxARB),
    GetnPixelMapfvARB: FnPtr::new(loadfn("glGetnPixelMapfvARB"), failing::GetnPixelMapfvARB),
    GetnPixelMapuivARB: FnPtr::new(loadfn("glGetnPixelMapuivARB"), failing::GetnPixelMapuivARB),
    GetnPixelMapusvARB: FnPtr::new(loadfn("glGetnPixelMapusvARB"), failing::GetnPixelMapusvARB),
    GetnPolygonStippleARB: FnPtr::new(loadfn("glGetnPolygonStippleARB"), failing::GetnPolygonStippleARB),
    GetnSeparableFilterARB: FnPtr::new(loadfn("glGetnSeparableFilterARB"), failing::GetnSeparableFilterARB),
    GetnTexImageARB: FnPtr::new(loadfn("glGetnTexImageARB"), failing::GetnTexImageARB),
    GetnUniformdvARB: FnPtr::new(loadfn("glGetnUniformdvARB"), failing::GetnUniformdvARB),
    GetnUniformfvARB: FnPtr::new(loadfn("glGetnUniformfvARB"), failing::GetnUniformfvARB),
    GetnUniformfvEXT: FnPtr::new(loadfn("glGetnUniformfvEXT"), failing::GetnUniformfvEXT),
    GetnUniformivARB: FnPtr::new(loadfn("glGetnUniformivARB"), failing::GetnUniformivARB),
    GetnUniformivEXT: FnPtr::new(loadfn("glGetnUniformivEXT"), failing::GetnUniformivEXT),
    GetnUniformuivARB: FnPtr::new(loadfn("glGetnUniformuivARB"), failing::GetnUniformuivARB),
    GlobalAlphaFactorbSUN: FnPtr::new(loadfn("glGlobalAlphaFactorbSUN"), failing::GlobalAlphaFactorbSUN),
    GlobalAlphaFactordSUN: FnPtr::new(loadfn("glGlobalAlphaFactordSUN"), failing::GlobalAlphaFactordSUN),
    GlobalAlphaFactorfSUN: FnPtr::new(loadfn("glGlobalAlphaFactorfSUN"), failing::GlobalAlphaFactorfSUN),
    GlobalAlphaFactoriSUN: FnPtr::new(loadfn("glGlobalAlphaFactoriSUN"), failing::GlobalAlphaFactoriSUN),
    GlobalAlphaFactorsSUN: FnPtr::new(loadfn("glGlobalAlphaFactorsSUN"), failing::GlobalAlphaFactorsSUN),
    GlobalAlphaFactorubSUN: FnPtr::new(loadfn("glGlobalAlphaFactorubSUN"), failing::GlobalAlphaFactorubSUN),
    GlobalAlphaFactoruiSUN: FnPtr::new(loadfn("glGlobalAlphaFactoruiSUN"), failing::GlobalAlphaFactoruiSUN),
    GlobalAlphaFactorusSUN: FnPtr::new(loadfn("glGlobalAlphaFactorusSUN"), failing::GlobalAlphaFactorusSUN),
    Hint: FnPtr::new(loadfn("glHint"), failing::Hint),
    HintPGI: FnPtr::new(loadfn("glHintPGI"), failing::HintPGI),
    Histogram: FnPtr::new(loadfn("glHistogram"), failing::Histogram),
    HistogramEXT: FnPtr::new(loadfn("glHistogramEXT"), failing::HistogramEXT),
    IglooInterfaceSGIX: FnPtr::new(loadfn("glIglooInterfaceSGIX"), failing::IglooInterfaceSGIX),
    ImageTransformParameterfHP: FnPtr::new(loadfn("glImageTransformParameterfHP"), failing::ImageTransformParameterfHP),
    ImageTransformParameterfvHP: FnPtr::new(loadfn("glImageTransformParameterfvHP"), failing::ImageTransformParameterfvHP),
    ImageTransformParameteriHP: FnPtr::new(loadfn("glImageTransformParameteriHP"), failing::ImageTransformParameteriHP),
    ImageTransformParameterivHP: FnPtr::new(loadfn("glImageTransformParameterivHP"), failing::ImageTransformParameterivHP),
    ImportSyncEXT: FnPtr::new(loadfn("glImportSyncEXT"), failing::ImportSyncEXT),
    IndexFormatNV: FnPtr::new(loadfn("glIndexFormatNV"), failing::IndexFormatNV),
    IndexFuncEXT: FnPtr::new(loadfn("glIndexFuncEXT"), failing::IndexFuncEXT),
    IndexMask: FnPtr::new(loadfn("glIndexMask"), failing::IndexMask),
    IndexMaterialEXT: FnPtr::new(loadfn("glIndexMaterialEXT"), failing::IndexMaterialEXT),
    IndexPointer: FnPtr::new(loadfn("glIndexPointer"), failing::IndexPointer),
    IndexPointerEXT: FnPtr::new(loadfn("glIndexPointerEXT"), failing::IndexPointerEXT),
    IndexPointerListIBM: FnPtr::new(loadfn("glIndexPointerListIBM"), failing::IndexPointerListIBM),
    Indexd: FnPtr::new(loadfn("glIndexd"), failing::Indexd),
    Indexdv: FnPtr::new(loadfn("glIndexdv"), failing::Indexdv),
    Indexf: FnPtr::new(loadfn("glIndexf"), failing::Indexf),
    Indexfv: FnPtr::new(loadfn("glIndexfv"), failing::Indexfv),
    Indexi: FnPtr::new(loadfn("glIndexi"), failing::Indexi),
    Indexiv: FnPtr::new(loadfn("glIndexiv"), failing::Indexiv),
    Indexs: FnPtr::new(loadfn("glIndexs"), failing::Indexs),
    Indexsv: FnPtr::new(loadfn("glIndexsv"), failing::Indexsv),
    Indexub: FnPtr::new(loadfn("glIndexub"), failing::Indexub),
    Indexubv: FnPtr::new(loadfn("glIndexubv"), failing::Indexubv),
    IndexxOES: FnPtr::new(loadfn("glIndexxOES"), failing::IndexxOES),
    IndexxvOES: FnPtr::new(loadfn("glIndexxvOES"), failing::IndexxvOES),
    InitNames: FnPtr::new(loadfn("glInitNames"), failing::InitNames),
    InsertComponentEXT: FnPtr::new(loadfn("glInsertComponentEXT"), failing::InsertComponentEXT),
    InsertEventMarkerEXT: FnPtr::new(loadfn("glInsertEventMarkerEXT"), failing::InsertEventMarkerEXT),
    InstrumentsBufferSGIX: FnPtr::new(loadfn("glInstrumentsBufferSGIX"), failing::InstrumentsBufferSGIX),
    InterleavedArrays: FnPtr::new(loadfn("glInterleavedArrays"), failing::InterleavedArrays),
    InterpolatePathsNV: FnPtr::new(loadfn("glInterpolatePathsNV"), failing::InterpolatePathsNV),
    InvalidateBufferData: FnPtr::new(loadfn("glInvalidateBufferData"), failing::InvalidateBufferData),
    InvalidateBufferSubData: FnPtr::new(loadfn("glInvalidateBufferSubData"), failing::InvalidateBufferSubData),
    InvalidateFramebuffer: FnPtr::new(loadfn("glInvalidateFramebuffer"), failing::InvalidateFramebuffer),
    InvalidateSubFramebuffer: FnPtr::new(loadfn("glInvalidateSubFramebuffer"), failing::InvalidateSubFramebuffer),
    InvalidateTexImage: FnPtr::new(loadfn("glInvalidateTexImage"), failing::InvalidateTexImage),
    InvalidateTexSubImage: FnPtr::new(loadfn("glInvalidateTexSubImage"), failing::InvalidateTexSubImage),
    IsAsyncMarkerSGIX: FnPtr::new(loadfn("glIsAsyncMarkerSGIX"), failing::IsAsyncMarkerSGIX),
    IsBuffer: FnPtr::new(loadfn("glIsBuffer"), failing::IsBuffer),
    IsBufferARB: FnPtr::new(loadfn("glIsBufferARB"), failing::IsBufferARB),
    IsBufferResidentNV: FnPtr::new(loadfn("glIsBufferResidentNV"), failing::IsBufferResidentNV),
    IsEnabled: FnPtr::new(loadfn("glIsEnabled"), failing::IsEnabled),
    IsEnabledIndexedEXT: FnPtr::new(loadfn("glIsEnabledIndexedEXT"), failing::IsEnabledIndexedEXT),
    IsEnabledi: FnPtr::new(loadfn("glIsEnabledi"), failing::IsEnabledi),
    IsFenceAPPLE: FnPtr::new(loadfn("glIsFenceAPPLE"), failing::IsFenceAPPLE),
    IsFenceNV: FnPtr::new(loadfn("glIsFenceNV"), failing::IsFenceNV),
    IsFramebuffer: FnPtr::new(loadfn("glIsFramebuffer"), failing::IsFramebuffer),
    IsFramebufferEXT: FnPtr::new(loadfn("glIsFramebufferEXT"), failing::IsFramebufferEXT),
    IsFramebufferOES: FnPtr::new(loadfn("glIsFramebufferOES"), failing::IsFramebufferOES),
    IsImageHandleResidentARB: FnPtr::new(loadfn("glIsImageHandleResidentARB"), failing::IsImageHandleResidentARB),
    IsImageHandleResidentNV: FnPtr::new(loadfn("glIsImageHandleResidentNV"), failing::IsImageHandleResidentNV),
    IsList: FnPtr::new(loadfn("glIsList"), failing::IsList),
    IsNameAMD: FnPtr::new(loadfn("glIsNameAMD"), failing::IsNameAMD),
    IsNamedBufferResidentNV: FnPtr::new(loadfn("glIsNamedBufferResidentNV"), failing::IsNamedBufferResidentNV),
    IsNamedStringARB: FnPtr::new(loadfn("glIsNamedStringARB"), failing::IsNamedStringARB),
    IsObjectBufferATI: FnPtr::new(loadfn("glIsObjectBufferATI"), failing::IsObjectBufferATI),
    IsOcclusionQueryNV: FnPtr::new(loadfn("glIsOcclusionQueryNV"), failing::IsOcclusionQueryNV),
    IsPathNV: FnPtr::new(loadfn("glIsPathNV"), failing::IsPathNV),
    IsPointInFillPathNV: FnPtr::new(loadfn("glIsPointInFillPathNV"), failing::IsPointInFillPathNV),
    IsPointInStrokePathNV: FnPtr::new(loadfn("glIsPointInStrokePathNV"), failing::IsPointInStrokePathNV),
    IsProgram: FnPtr::new(loadfn("glIsProgram"), failing::IsProgram),
    IsProgramARB: FnPtr::new(loadfn("glIsProgramARB"), failing::IsProgramARB),
    IsProgramNV: FnPtr::new(loadfn("glIsProgramNV"), failing::IsProgramNV),
    IsProgramPipeline: FnPtr::new(loadfn("glIsProgramPipeline"), failing::IsProgramPipeline),
    IsProgramPipelineEXT: FnPtr::new(loadfn("glIsProgramPipelineEXT"), failing::IsProgramPipelineEXT),
    IsQuery: FnPtr::new(loadfn("glIsQuery"), failing::IsQuery),
    IsQueryARB: FnPtr::new(loadfn("glIsQueryARB"), failing::IsQueryARB),
    IsQueryEXT: FnPtr::new(loadfn("glIsQueryEXT"), failing::IsQueryEXT),
    IsRenderbuffer: FnPtr::new(loadfn("glIsRenderbuffer"), failing::IsRenderbuffer),
    IsRenderbufferEXT: FnPtr::new(loadfn("glIsRenderbufferEXT"), failing::IsRenderbufferEXT),
    IsRenderbufferOES: FnPtr::new(loadfn("glIsRenderbufferOES"), failing::IsRenderbufferOES),
    IsSampler: FnPtr::new(loadfn("glIsSampler"), failing::IsSampler),
    IsShader: FnPtr::new(loadfn("glIsShader"), failing::IsShader),
    IsSync: FnPtr::new(loadfn("glIsSync"), failing::IsSync),
    IsSyncAPPLE: FnPtr::new(loadfn("glIsSyncAPPLE"), failing::IsSyncAPPLE),
    IsTexture: FnPtr::new(loadfn("glIsTexture"), failing::IsTexture),
    IsTextureEXT: FnPtr::new(loadfn("glIsTextureEXT"), failing::IsTextureEXT),
    IsTextureHandleResidentARB: FnPtr::new(loadfn("glIsTextureHandleResidentARB"), failing::IsTextureHandleResidentARB),
    IsTextureHandleResidentNV: FnPtr::new(loadfn("glIsTextureHandleResidentNV"), failing::IsTextureHandleResidentNV),
    IsTransformFeedback: FnPtr::new(loadfn("glIsTransformFeedback"), failing::IsTransformFeedback),
    IsTransformFeedbackNV: FnPtr::new(loadfn("glIsTransformFeedbackNV"), failing::IsTransformFeedbackNV),
    IsVariantEnabledEXT: FnPtr::new(loadfn("glIsVariantEnabledEXT"), failing::IsVariantEnabledEXT),
    IsVertexArray: FnPtr::new(loadfn("glIsVertexArray"), failing::IsVertexArray),
    IsVertexArrayAPPLE: FnPtr::new(loadfn("glIsVertexArrayAPPLE"), failing::IsVertexArrayAPPLE),
    IsVertexArrayOES: FnPtr::new(loadfn("glIsVertexArrayOES"), failing::IsVertexArrayOES),
    IsVertexAttribEnabledAPPLE: FnPtr::new(loadfn("glIsVertexAttribEnabledAPPLE"), failing::IsVertexAttribEnabledAPPLE),
    LabelObjectEXT: FnPtr::new(loadfn("glLabelObjectEXT"), failing::LabelObjectEXT),
    LightEnviSGIX: FnPtr::new(loadfn("glLightEnviSGIX"), failing::LightEnviSGIX),
    LightModelf: FnPtr::new(loadfn("glLightModelf"), failing::LightModelf),
    LightModelfv: FnPtr::new(loadfn("glLightModelfv"), failing::LightModelfv),
    LightModeli: FnPtr::new(loadfn("glLightModeli"), failing::LightModeli),
    LightModeliv: FnPtr::new(loadfn("glLightModeliv"), failing::LightModeliv),
    LightModelx: FnPtr::new(loadfn("glLightModelx"), failing::LightModelx),
    LightModelxOES: FnPtr::new(loadfn("glLightModelxOES"), failing::LightModelxOES),
    LightModelxv: FnPtr::new(loadfn("glLightModelxv"), failing::LightModelxv),
    LightModelxvOES: FnPtr::new(loadfn("glLightModelxvOES"), failing::LightModelxvOES),
    Lightf: FnPtr::new(loadfn("glLightf"), failing::Lightf),
    Lightfv: FnPtr::new(loadfn("glLightfv"), failing::Lightfv),
    Lighti: FnPtr::new(loadfn("glLighti"), failing::Lighti),
    Lightiv: FnPtr::new(loadfn("glLightiv"), failing::Lightiv),
    Lightx: FnPtr::new(loadfn("glLightx"), failing::Lightx),
    LightxOES: FnPtr::new(loadfn("glLightxOES"), failing::LightxOES),
    Lightxv: FnPtr::new(loadfn("glLightxv"), failing::Lightxv),
    LightxvOES: FnPtr::new(loadfn("glLightxvOES"), failing::LightxvOES),
    LineStipple: FnPtr::new(loadfn("glLineStipple"), failing::LineStipple),
    LineWidth: FnPtr::new(loadfn("glLineWidth"), failing::LineWidth),
    LineWidthx: FnPtr::new(loadfn("glLineWidthx"), failing::LineWidthx),
    LineWidthxOES: FnPtr::new(loadfn("glLineWidthxOES"), failing::LineWidthxOES),
    LinkProgram: FnPtr::new(loadfn("glLinkProgram"), failing::LinkProgram),
    LinkProgramARB: FnPtr::new(loadfn("glLinkProgramARB"), failing::LinkProgramARB),
    ListBase: FnPtr::new(loadfn("glListBase"), failing::ListBase),
    ListParameterfSGIX: FnPtr::new(loadfn("glListParameterfSGIX"), failing::ListParameterfSGIX),
    ListParameterfvSGIX: FnPtr::new(loadfn("glListParameterfvSGIX"), failing::ListParameterfvSGIX),
    ListParameteriSGIX: FnPtr::new(loadfn("glListParameteriSGIX"), failing::ListParameteriSGIX),
    ListParameterivSGIX: FnPtr::new(loadfn("glListParameterivSGIX"), failing::ListParameterivSGIX),
    LoadIdentity: FnPtr::new(loadfn("glLoadIdentity"), failing::LoadIdentity),
    LoadIdentityDeformationMapSGIX: FnPtr::new(loadfn("glLoadIdentityDeformationMapSGIX"), failing::LoadIdentityDeformationMapSGIX),
    LoadMatrixd: FnPtr::new(loadfn("glLoadMatrixd"), failing::LoadMatrixd),
    LoadMatrixf: FnPtr::new(loadfn("glLoadMatrixf"), failing::LoadMatrixf),
    LoadMatrixx: FnPtr::new(loadfn("glLoadMatrixx"), failing::LoadMatrixx),
    LoadMatrixxOES: FnPtr::new(loadfn("glLoadMatrixxOES"), failing::LoadMatrixxOES),
    LoadName: FnPtr::new(loadfn("glLoadName"), failing::LoadName),
    LoadPaletteFromModelViewMatrixOES: FnPtr::new(loadfn("glLoadPaletteFromModelViewMatrixOES"), failing::LoadPaletteFromModelViewMatrixOES),
    LoadProgramNV: FnPtr::new(loadfn("glLoadProgramNV"), failing::LoadProgramNV),
    LoadTransposeMatrixd: FnPtr::new(loadfn("glLoadTransposeMatrixd"), failing::LoadTransposeMatrixd),
    LoadTransposeMatrixdARB: FnPtr::new(loadfn("glLoadTransposeMatrixdARB"), failing::LoadTransposeMatrixdARB),
    LoadTransposeMatrixf: FnPtr::new(loadfn("glLoadTransposeMatrixf"), failing::LoadTransposeMatrixf),
    LoadTransposeMatrixfARB: FnPtr::new(loadfn("glLoadTransposeMatrixfARB"), failing::LoadTransposeMatrixfARB),
    LoadTransposeMatrixxOES: FnPtr::new(loadfn("glLoadTransposeMatrixxOES"), failing::LoadTransposeMatrixxOES),
    LockArraysEXT: FnPtr::new(loadfn("glLockArraysEXT"), failing::LockArraysEXT),
    LogicOp: FnPtr::new(loadfn("glLogicOp"), failing::LogicOp),
    MakeBufferNonResidentNV: FnPtr::new(loadfn("glMakeBufferNonResidentNV"), failing::MakeBufferNonResidentNV),
    MakeBufferResidentNV: FnPtr::new(loadfn("glMakeBufferResidentNV"), failing::MakeBufferResidentNV),
    MakeImageHandleNonResidentARB: FnPtr::new(loadfn("glMakeImageHandleNonResidentARB"), failing::MakeImageHandleNonResidentARB),
    MakeImageHandleNonResidentNV: FnPtr::new(loadfn("glMakeImageHandleNonResidentNV"), failing::MakeImageHandleNonResidentNV),
    MakeImageHandleResidentARB: FnPtr::new(loadfn("glMakeImageHandleResidentARB"), failing::MakeImageHandleResidentARB),
    MakeImageHandleResidentNV: FnPtr::new(loadfn("glMakeImageHandleResidentNV"), failing::MakeImageHandleResidentNV),
    MakeNamedBufferNonResidentNV: FnPtr::new(loadfn("glMakeNamedBufferNonResidentNV"), failing::MakeNamedBufferNonResidentNV),
    MakeNamedBufferResidentNV: FnPtr::new(loadfn("glMakeNamedBufferResidentNV"), failing::MakeNamedBufferResidentNV),
    MakeTextureHandleNonResidentARB: FnPtr::new(loadfn("glMakeTextureHandleNonResidentARB"), failing::MakeTextureHandleNonResidentARB),
    MakeTextureHandleNonResidentNV: FnPtr::new(loadfn("glMakeTextureHandleNonResidentNV"), failing::MakeTextureHandleNonResidentNV),
    MakeTextureHandleResidentARB: FnPtr::new(loadfn("glMakeTextureHandleResidentARB"), failing::MakeTextureHandleResidentARB),
    MakeTextureHandleResidentNV: FnPtr::new(loadfn("glMakeTextureHandleResidentNV"), failing::MakeTextureHandleResidentNV),
    Map1d: FnPtr::new(loadfn("glMap1d"), failing::Map1d),
    Map1f: FnPtr::new(loadfn("glMap1f"), failing::Map1f),
    Map1xOES: FnPtr::new(loadfn("glMap1xOES"), failing::Map1xOES),
    Map2d: FnPtr::new(loadfn("glMap2d"), failing::Map2d),
    Map2f: FnPtr::new(loadfn("glMap2f"), failing::Map2f),
    Map2xOES: FnPtr::new(loadfn("glMap2xOES"), failing::Map2xOES),
    MapBuffer: FnPtr::new(loadfn("glMapBuffer"), failing::MapBuffer),
    MapBufferARB: FnPtr::new(loadfn("glMapBufferARB"), failing::MapBufferARB),
    MapBufferOES: FnPtr::new(loadfn("glMapBufferOES"), failing::MapBufferOES),
    MapBufferRange: FnPtr::new(loadfn("glMapBufferRange"), failing::MapBufferRange),
    MapBufferRangeEXT: FnPtr::new(loadfn("glMapBufferRangeEXT"), failing::MapBufferRangeEXT),
    MapControlPointsNV: FnPtr::new(loadfn("glMapControlPointsNV"), failing::MapControlPointsNV),
    MapGrid1d: FnPtr::new(loadfn("glMapGrid1d"), failing::MapGrid1d),
    MapGrid1f: FnPtr::new(loadfn("glMapGrid1f"), failing::MapGrid1f),
    MapGrid1xOES: FnPtr::new(loadfn("glMapGrid1xOES"), failing::MapGrid1xOES),
    MapGrid2d: FnPtr::new(loadfn("glMapGrid2d"), failing::MapGrid2d),
    MapGrid2f: FnPtr::new(loadfn("glMapGrid2f"), failing::MapGrid2f),
    MapGrid2xOES: FnPtr::new(loadfn("glMapGrid2xOES"), failing::MapGrid2xOES),
    MapNamedBufferEXT: FnPtr::new(loadfn("glMapNamedBufferEXT"), failing::MapNamedBufferEXT),
    MapNamedBufferRangeEXT: FnPtr::new(loadfn("glMapNamedBufferRangeEXT"), failing::MapNamedBufferRangeEXT),
    MapObjectBufferATI: FnPtr::new(loadfn("glMapObjectBufferATI"), failing::MapObjectBufferATI),
    MapParameterfvNV: FnPtr::new(loadfn("glMapParameterfvNV"), failing::MapParameterfvNV),
    MapParameterivNV: FnPtr::new(loadfn("glMapParameterivNV"), failing::MapParameterivNV),
    MapTexture2DINTEL: FnPtr::new(loadfn("glMapTexture2DINTEL"), failing::MapTexture2DINTEL),
    MapVertexAttrib1dAPPLE: FnPtr::new(loadfn("glMapVertexAttrib1dAPPLE"), failing::MapVertexAttrib1dAPPLE),
    MapVertexAttrib1fAPPLE: FnPtr::new(loadfn("glMapVertexAttrib1fAPPLE"), failing::MapVertexAttrib1fAPPLE),
    MapVertexAttrib2dAPPLE: FnPtr::new(loadfn("glMapVertexAttrib2dAPPLE"), failing::MapVertexAttrib2dAPPLE),
    MapVertexAttrib2fAPPLE: FnPtr::new(loadfn("glMapVertexAttrib2fAPPLE"), failing::MapVertexAttrib2fAPPLE),
    Materialf: FnPtr::new(loadfn("glMaterialf"), failing::Materialf),
    Materialfv: FnPtr::new(loadfn("glMaterialfv"), failing::Materialfv),
    Materiali: FnPtr::new(loadfn("glMateriali"), failing::Materiali),
    Materialiv: FnPtr::new(loadfn("glMaterialiv"), failing::Materialiv),
    Materialx: FnPtr::new(loadfn("glMaterialx"), failing::Materialx),
    MaterialxOES: FnPtr::new(loadfn("glMaterialxOES"), failing::MaterialxOES),
    Materialxv: FnPtr::new(loadfn("glMaterialxv"), failing::Materialxv),
    MaterialxvOES: FnPtr::new(loadfn("glMaterialxvOES"), failing::MaterialxvOES),
    MatrixFrustumEXT: FnPtr::new(loadfn("glMatrixFrustumEXT"), failing::MatrixFrustumEXT),
    MatrixIndexPointerARB: FnPtr::new(loadfn("glMatrixIndexPointerARB"), failing::MatrixIndexPointerARB),
    MatrixIndexPointerOES: FnPtr::new(loadfn("glMatrixIndexPointerOES"), failing::MatrixIndexPointerOES),
    MatrixIndexubvARB: FnPtr::new(loadfn("glMatrixIndexubvARB"), failing::MatrixIndexubvARB),
    MatrixIndexuivARB: FnPtr::new(loadfn("glMatrixIndexuivARB"), failing::MatrixIndexuivARB),
    MatrixIndexusvARB: FnPtr::new(loadfn("glMatrixIndexusvARB"), failing::MatrixIndexusvARB),
    MatrixLoadIdentityEXT: FnPtr::new(loadfn("glMatrixLoadIdentityEXT"), failing::MatrixLoadIdentityEXT),
    MatrixLoadTransposedEXT: FnPtr::new(loadfn("glMatrixLoadTransposedEXT"), failing::MatrixLoadTransposedEXT),
    MatrixLoadTransposefEXT: FnPtr::new(loadfn("glMatrixLoadTransposefEXT"), failing::MatrixLoadTransposefEXT),
    MatrixLoaddEXT: FnPtr::new(loadfn("glMatrixLoaddEXT"), failing::MatrixLoaddEXT),
    MatrixLoadfEXT: FnPtr::new(loadfn("glMatrixLoadfEXT"), failing::MatrixLoadfEXT),
    MatrixMode: FnPtr::new(loadfn("glMatrixMode"), failing::MatrixMode),
    MatrixMultTransposedEXT: FnPtr::new(loadfn("glMatrixMultTransposedEXT"), failing::MatrixMultTransposedEXT),
    MatrixMultTransposefEXT: FnPtr::new(loadfn("glMatrixMultTransposefEXT"), failing::MatrixMultTransposefEXT),
    MatrixMultdEXT: FnPtr::new(loadfn("glMatrixMultdEXT"), failing::MatrixMultdEXT),
    MatrixMultfEXT: FnPtr::new(loadfn("glMatrixMultfEXT"), failing::MatrixMultfEXT),
    MatrixOrthoEXT: FnPtr::new(loadfn("glMatrixOrthoEXT"), failing::MatrixOrthoEXT),
    MatrixPopEXT: FnPtr::new(loadfn("glMatrixPopEXT"), failing::MatrixPopEXT),
    MatrixPushEXT: FnPtr::new(loadfn("glMatrixPushEXT"), failing::MatrixPushEXT),
    MatrixRotatedEXT: FnPtr::new(loadfn("glMatrixRotatedEXT"), failing::MatrixRotatedEXT),
    MatrixRotatefEXT: FnPtr::new(loadfn("glMatrixRotatefEXT"), failing::MatrixRotatefEXT),
    MatrixScaledEXT: FnPtr::new(loadfn("glMatrixScaledEXT"), failing::MatrixScaledEXT),
    MatrixScalefEXT: FnPtr::new(loadfn("glMatrixScalefEXT"), failing::MatrixScalefEXT),
    MatrixTranslatedEXT: FnPtr::new(loadfn("glMatrixTranslatedEXT"), failing::MatrixTranslatedEXT),
    MatrixTranslatefEXT: FnPtr::new(loadfn("glMatrixTranslatefEXT"), failing::MatrixTranslatefEXT),
    MemoryBarrier: FnPtr::new(loadfn("glMemoryBarrier"), failing::MemoryBarrier),
    MemoryBarrierEXT: FnPtr::new(loadfn("glMemoryBarrierEXT"), failing::MemoryBarrierEXT),
    MinSampleShading: FnPtr::new(loadfn("glMinSampleShading"), failing::MinSampleShading),
    MinSampleShadingARB: FnPtr::new(loadfn("glMinSampleShadingARB"), failing::MinSampleShadingARB),
    Minmax: FnPtr::new(loadfn("glMinmax"), failing::Minmax),
    MinmaxEXT: FnPtr::new(loadfn("glMinmaxEXT"), failing::MinmaxEXT),
    MultMatrixd: FnPtr::new(loadfn("glMultMatrixd"), failing::MultMatrixd),
    MultMatrixf: FnPtr::new(loadfn("glMultMatrixf"), failing::MultMatrixf),
    MultMatrixx: FnPtr::new(loadfn("glMultMatrixx"), failing::MultMatrixx),
    MultMatrixxOES: FnPtr::new(loadfn("glMultMatrixxOES"), failing::MultMatrixxOES),
    MultTransposeMatrixd: FnPtr::new(loadfn("glMultTransposeMatrixd"), failing::MultTransposeMatrixd),
    MultTransposeMatrixdARB: FnPtr::new(loadfn("glMultTransposeMatrixdARB"), failing::MultTransposeMatrixdARB),
    MultTransposeMatrixf: FnPtr::new(loadfn("glMultTransposeMatrixf"), failing::MultTransposeMatrixf),
    MultTransposeMatrixfARB: FnPtr::new(loadfn("glMultTransposeMatrixfARB"), failing::MultTransposeMatrixfARB),
    MultTransposeMatrixxOES: FnPtr::new(loadfn("glMultTransposeMatrixxOES"), failing::MultTransposeMatrixxOES),
    MultiDrawArrays: FnPtr::new(loadfn("glMultiDrawArrays"), failing::MultiDrawArrays),
    MultiDrawArraysEXT: FnPtr::new(loadfn("glMultiDrawArraysEXT"), failing::MultiDrawArraysEXT),
    MultiDrawArraysIndirect: FnPtr::new(loadfn("glMultiDrawArraysIndirect"), failing::MultiDrawArraysIndirect),
    MultiDrawArraysIndirectAMD: FnPtr::new(loadfn("glMultiDrawArraysIndirectAMD"), failing::MultiDrawArraysIndirectAMD),
    MultiDrawArraysIndirectBindlessNV: FnPtr::new(loadfn("glMultiDrawArraysIndirectBindlessNV"), failing::MultiDrawArraysIndirectBindlessNV),
    MultiDrawElementsIndirectBindlessNV: FnPtr::new(loadfn("glMultiDrawElementsIndirectBindlessNV"), failing::MultiDrawElementsIndirectBindlessNV),
    MultiDrawArraysIndirectCountARB: FnPtr::new(loadfn("glMultiDrawArraysIndirectCountARB"), failing::MultiDrawArraysIndirectCountARB),
    MultiDrawElementArrayAPPLE: FnPtr::new(loadfn("glMultiDrawElementArrayAPPLE"), failing::MultiDrawElementArrayAPPLE),
    MultiDrawElements: FnPtr::new(loadfn("glMultiDrawElements"), failing::MultiDrawElements),
    MultiDrawElementsBaseVertex: FnPtr::new(loadfn("glMultiDrawElementsBaseVertex"), failing::MultiDrawElementsBaseVertex),
    MultiDrawElementsEXT: FnPtr::new(loadfn("glMultiDrawElementsEXT"), failing::MultiDrawElementsEXT),
    MultiDrawElementsIndirect: FnPtr::new(loadfn("glMultiDrawElementsIndirect"), failing::MultiDrawElementsIndirect),
    MultiDrawElementsIndirectAMD: FnPtr::new(loadfn("glMultiDrawElementsIndirectAMD"), failing::MultiDrawElementsIndirectAMD),
    MultiDrawElementsIndirectCountARB: FnPtr::new(loadfn("glMultiDrawElementsIndirectCountARB"), failing::MultiDrawElementsIndirectCountARB),
    MultiDrawRangeElementArrayAPPLE: FnPtr::new(loadfn("glMultiDrawRangeElementArrayAPPLE"), failing::MultiDrawRangeElementArrayAPPLE),
    MultiModeDrawArraysIBM: FnPtr::new(loadfn("glMultiModeDrawArraysIBM"), failing::MultiModeDrawArraysIBM),
    MultiModeDrawElementsIBM: FnPtr::new(loadfn("glMultiModeDrawElementsIBM"), failing::MultiModeDrawElementsIBM),
    MultiTexBufferEXT: FnPtr::new(loadfn("glMultiTexBufferEXT"), failing::MultiTexBufferEXT),
    MultiTexCoord1bOES: FnPtr::new(loadfn("glMultiTexCoord1bOES"), failing::MultiTexCoord1bOES),
    MultiTexCoord1bvOES: FnPtr::new(loadfn("glMultiTexCoord1bvOES"), failing::MultiTexCoord1bvOES),
    MultiTexCoord1d: FnPtr::new(loadfn("glMultiTexCoord1d"), failing::MultiTexCoord1d),
    MultiTexCoord1dARB: FnPtr::new(loadfn("glMultiTexCoord1dARB"), failing::MultiTexCoord1dARB),
    MultiTexCoord1dv: FnPtr::new(loadfn("glMultiTexCoord1dv"), failing::MultiTexCoord1dv),
    MultiTexCoord1dvARB: FnPtr::new(loadfn("glMultiTexCoord1dvARB"), failing::MultiTexCoord1dvARB),
    MultiTexCoord1f: FnPtr::new(loadfn("glMultiTexCoord1f"), failing::MultiTexCoord1f),
    MultiTexCoord1fARB: FnPtr::new(loadfn("glMultiTexCoord1fARB"), failing::MultiTexCoord1fARB),
    MultiTexCoord1fv: FnPtr::new(loadfn("glMultiTexCoord1fv"), failing::MultiTexCoord1fv),
    MultiTexCoord1fvARB: FnPtr::new(loadfn("glMultiTexCoord1fvARB"), failing::MultiTexCoord1fvARB),
    MultiTexCoord1hNV: FnPtr::new(loadfn("glMultiTexCoord1hNV"), failing::MultiTexCoord1hNV),
    MultiTexCoord1hvNV: FnPtr::new(loadfn("glMultiTexCoord1hvNV"), failing::MultiTexCoord1hvNV),
    MultiTexCoord1i: FnPtr::new(loadfn("glMultiTexCoord1i"), failing::MultiTexCoord1i),
    MultiTexCoord1iARB: FnPtr::new(loadfn("glMultiTexCoord1iARB"), failing::MultiTexCoord1iARB),
    MultiTexCoord1iv: FnPtr::new(loadfn("glMultiTexCoord1iv"), failing::MultiTexCoord1iv),
    MultiTexCoord1ivARB: FnPtr::new(loadfn("glMultiTexCoord1ivARB"), failing::MultiTexCoord1ivARB),
    MultiTexCoord1s: FnPtr::new(loadfn("glMultiTexCoord1s"), failing::MultiTexCoord1s),
    MultiTexCoord1sARB: FnPtr::new(loadfn("glMultiTexCoord1sARB"), failing::MultiTexCoord1sARB),
    MultiTexCoord1sv: FnPtr::new(loadfn("glMultiTexCoord1sv"), failing::MultiTexCoord1sv),
    MultiTexCoord1svARB: FnPtr::new(loadfn("glMultiTexCoord1svARB"), failing::MultiTexCoord1svARB),
    MultiTexCoord1xOES: FnPtr::new(loadfn("glMultiTexCoord1xOES"), failing::MultiTexCoord1xOES),
    MultiTexCoord1xvOES: FnPtr::new(loadfn("glMultiTexCoord1xvOES"), failing::MultiTexCoord1xvOES),
    MultiTexCoord2bOES: FnPtr::new(loadfn("glMultiTexCoord2bOES"), failing::MultiTexCoord2bOES),
    MultiTexCoord2bvOES: FnPtr::new(loadfn("glMultiTexCoord2bvOES"), failing::MultiTexCoord2bvOES),
    MultiTexCoord2d: FnPtr::new(loadfn("glMultiTexCoord2d"), failing::MultiTexCoord2d),
    MultiTexCoord2dARB: FnPtr::new(loadfn("glMultiTexCoord2dARB"), failing::MultiTexCoord2dARB),
    MultiTexCoord2dv: FnPtr::new(loadfn("glMultiTexCoord2dv"), failing::MultiTexCoord2dv),
    MultiTexCoord2dvARB: FnPtr::new(loadfn("glMultiTexCoord2dvARB"), failing::MultiTexCoord2dvARB),
    MultiTexCoord2f: FnPtr::new(loadfn("glMultiTexCoord2f"), failing::MultiTexCoord2f),
    MultiTexCoord2fARB: FnPtr::new(loadfn("glMultiTexCoord2fARB"), failing::MultiTexCoord2fARB),
    MultiTexCoord2fv: FnPtr::new(loadfn("glMultiTexCoord2fv"), failing::MultiTexCoord2fv),
    MultiTexCoord2fvARB: FnPtr::new(loadfn("glMultiTexCoord2fvARB"), failing::MultiTexCoord2fvARB),
    MultiTexCoord2hNV: FnPtr::new(loadfn("glMultiTexCoord2hNV"), failing::MultiTexCoord2hNV),
    MultiTexCoord2hvNV: FnPtr::new(loadfn("glMultiTexCoord2hvNV"), failing::MultiTexCoord2hvNV),
    MultiTexCoord2i: FnPtr::new(loadfn("glMultiTexCoord2i"), failing::MultiTexCoord2i),
    MultiTexCoord2iARB: FnPtr::new(loadfn("glMultiTexCoord2iARB"), failing::MultiTexCoord2iARB),
    MultiTexCoord2iv: FnPtr::new(loadfn("glMultiTexCoord2iv"), failing::MultiTexCoord2iv),
    MultiTexCoord2ivARB: FnPtr::new(loadfn("glMultiTexCoord2ivARB"), failing::MultiTexCoord2ivARB),
    MultiTexCoord2s: FnPtr::new(loadfn("glMultiTexCoord2s"), failing::MultiTexCoord2s),
    MultiTexCoord2sARB: FnPtr::new(loadfn("glMultiTexCoord2sARB"), failing::MultiTexCoord2sARB),
    MultiTexCoord2sv: FnPtr::new(loadfn("glMultiTexCoord2sv"), failing::MultiTexCoord2sv),
    MultiTexCoord2svARB: FnPtr::new(loadfn("glMultiTexCoord2svARB"), failing::MultiTexCoord2svARB),
    MultiTexCoord2xOES: FnPtr::new(loadfn("glMultiTexCoord2xOES"), failing::MultiTexCoord2xOES),
    MultiTexCoord2xvOES: FnPtr::new(loadfn("glMultiTexCoord2xvOES"), failing::MultiTexCoord2xvOES),
    MultiTexCoord3bOES: FnPtr::new(loadfn("glMultiTexCoord3bOES"), failing::MultiTexCoord3bOES),
    MultiTexCoord3bvOES: FnPtr::new(loadfn("glMultiTexCoord3bvOES"), failing::MultiTexCoord3bvOES),
    MultiTexCoord3d: FnPtr::new(loadfn("glMultiTexCoord3d"), failing::MultiTexCoord3d),
    MultiTexCoord3dARB: FnPtr::new(loadfn("glMultiTexCoord3dARB"), failing::MultiTexCoord3dARB),
    MultiTexCoord3dv: FnPtr::new(loadfn("glMultiTexCoord3dv"), failing::MultiTexCoord3dv),
    MultiTexCoord3dvARB: FnPtr::new(loadfn("glMultiTexCoord3dvARB"), failing::MultiTexCoord3dvARB),
    MultiTexCoord3f: FnPtr::new(loadfn("glMultiTexCoord3f"), failing::MultiTexCoord3f),
    MultiTexCoord3fARB: FnPtr::new(loadfn("glMultiTexCoord3fARB"), failing::MultiTexCoord3fARB),
    MultiTexCoord3fv: FnPtr::new(loadfn("glMultiTexCoord3fv"), failing::MultiTexCoord3fv),
    MultiTexCoord3fvARB: FnPtr::new(loadfn("glMultiTexCoord3fvARB"), failing::MultiTexCoord3fvARB),
    MultiTexCoord3hNV: FnPtr::new(loadfn("glMultiTexCoord3hNV"), failing::MultiTexCoord3hNV),
    MultiTexCoord3hvNV: FnPtr::new(loadfn("glMultiTexCoord3hvNV"), failing::MultiTexCoord3hvNV),
    MultiTexCoord3i: FnPtr::new(loadfn("glMultiTexCoord3i"), failing::MultiTexCoord3i),
    MultiTexCoord3iARB: FnPtr::new(loadfn("glMultiTexCoord3iARB"), failing::MultiTexCoord3iARB),
    MultiTexCoord3iv: FnPtr::new(loadfn("glMultiTexCoord3iv"), failing::MultiTexCoord3iv),
    MultiTexCoord3ivARB: FnPtr::new(loadfn("glMultiTexCoord3ivARB"), failing::MultiTexCoord3ivARB),
    MultiTexCoord3s: FnPtr::new(loadfn("glMultiTexCoord3s"), failing::MultiTexCoord3s),
    MultiTexCoord3sARB: FnPtr::new(loadfn("glMultiTexCoord3sARB"), failing::MultiTexCoord3sARB),
    MultiTexCoord3sv: FnPtr::new(loadfn("glMultiTexCoord3sv"), failing::MultiTexCoord3sv),
    MultiTexCoord3svARB: FnPtr::new(loadfn("glMultiTexCoord3svARB"), failing::MultiTexCoord3svARB),
    MultiTexCoord3xOES: FnPtr::new(loadfn("glMultiTexCoord3xOES"), failing::MultiTexCoord3xOES),
    MultiTexCoord3xvOES: FnPtr::new(loadfn("glMultiTexCoord3xvOES"), failing::MultiTexCoord3xvOES),
    MultiTexCoord4bOES: FnPtr::new(loadfn("glMultiTexCoord4bOES"), failing::MultiTexCoord4bOES),
    MultiTexCoord4bvOES: FnPtr::new(loadfn("glMultiTexCoord4bvOES"), failing::MultiTexCoord4bvOES),
    MultiTexCoord4d: FnPtr::new(loadfn("glMultiTexCoord4d"), failing::MultiTexCoord4d),
    MultiTexCoord4dARB: FnPtr::new(loadfn("glMultiTexCoord4dARB"), failing::MultiTexCoord4dARB),
    MultiTexCoord4dv: FnPtr::new(loadfn("glMultiTexCoord4dv"), failing::MultiTexCoord4dv),
    MultiTexCoord4dvARB: FnPtr::new(loadfn("glMultiTexCoord4dvARB"), failing::MultiTexCoord4dvARB),
    MultiTexCoord4f: FnPtr::new(loadfn("glMultiTexCoord4f"), failing::MultiTexCoord4f),
    MultiTexCoord4fARB: FnPtr::new(loadfn("glMultiTexCoord4fARB"), failing::MultiTexCoord4fARB),
    MultiTexCoord4fv: FnPtr::new(loadfn("glMultiTexCoord4fv"), failing::MultiTexCoord4fv),
    MultiTexCoord4fvARB: FnPtr::new(loadfn("glMultiTexCoord4fvARB"), failing::MultiTexCoord4fvARB),
    MultiTexCoord4hNV: FnPtr::new(loadfn("glMultiTexCoord4hNV"), failing::MultiTexCoord4hNV),
    MultiTexCoord4hvNV: FnPtr::new(loadfn("glMultiTexCoord4hvNV"), failing::MultiTexCoord4hvNV),
    MultiTexCoord4i: FnPtr::new(loadfn("glMultiTexCoord4i"), failing::MultiTexCoord4i),
    MultiTexCoord4iARB: FnPtr::new(loadfn("glMultiTexCoord4iARB"), failing::MultiTexCoord4iARB),
    MultiTexCoord4iv: FnPtr::new(loadfn("glMultiTexCoord4iv"), failing::MultiTexCoord4iv),
    MultiTexCoord4ivARB: FnPtr::new(loadfn("glMultiTexCoord4ivARB"), failing::MultiTexCoord4ivARB),
    MultiTexCoord4s: FnPtr::new(loadfn("glMultiTexCoord4s"), failing::MultiTexCoord4s),
    MultiTexCoord4sARB: FnPtr::new(loadfn("glMultiTexCoord4sARB"), failing::MultiTexCoord4sARB),
    MultiTexCoord4sv: FnPtr::new(loadfn("glMultiTexCoord4sv"), failing::MultiTexCoord4sv),
    MultiTexCoord4svARB: FnPtr::new(loadfn("glMultiTexCoord4svARB"), failing::MultiTexCoord4svARB),
    MultiTexCoord4x: FnPtr::new(loadfn("glMultiTexCoord4x"), failing::MultiTexCoord4x),
    MultiTexCoord4xOES: FnPtr::new(loadfn("glMultiTexCoord4xOES"), failing::MultiTexCoord4xOES),
    MultiTexCoord4xvOES: FnPtr::new(loadfn("glMultiTexCoord4xvOES"), failing::MultiTexCoord4xvOES),
    MultiTexCoordP1ui: FnPtr::new(loadfn("glMultiTexCoordP1ui"), failing::MultiTexCoordP1ui),
    MultiTexCoordP1uiv: FnPtr::new(loadfn("glMultiTexCoordP1uiv"), failing::MultiTexCoordP1uiv),
    MultiTexCoordP2ui: FnPtr::new(loadfn("glMultiTexCoordP2ui"), failing::MultiTexCoordP2ui),
    MultiTexCoordP2uiv: FnPtr::new(loadfn("glMultiTexCoordP2uiv"), failing::MultiTexCoordP2uiv),
    MultiTexCoordP3ui: FnPtr::new(loadfn("glMultiTexCoordP3ui"), failing::MultiTexCoordP3ui),
    MultiTexCoordP3uiv: FnPtr::new(loadfn("glMultiTexCoordP3uiv"), failing::MultiTexCoordP3uiv),
    MultiTexCoordP4ui: FnPtr::new(loadfn("glMultiTexCoordP4ui"), failing::MultiTexCoordP4ui),
    MultiTexCoordP4uiv: FnPtr::new(loadfn("glMultiTexCoordP4uiv"), failing::MultiTexCoordP4uiv),
    MultiTexCoordPointerEXT: FnPtr::new(loadfn("glMultiTexCoordPointerEXT"), failing::MultiTexCoordPointerEXT),
    MultiTexEnvfEXT: FnPtr::new(loadfn("glMultiTexEnvfEXT"), failing::MultiTexEnvfEXT),
    MultiTexEnvfvEXT: FnPtr::new(loadfn("glMultiTexEnvfvEXT"), failing::MultiTexEnvfvEXT),
    MultiTexEnviEXT: FnPtr::new(loadfn("glMultiTexEnviEXT"), failing::MultiTexEnviEXT),
    MultiTexEnvivEXT: FnPtr::new(loadfn("glMultiTexEnvivEXT"), failing::MultiTexEnvivEXT),
    MultiTexGendEXT: FnPtr::new(loadfn("glMultiTexGendEXT"), failing::MultiTexGendEXT),
    MultiTexGendvEXT: FnPtr::new(loadfn("glMultiTexGendvEXT"), failing::MultiTexGendvEXT),
    MultiTexGenfEXT: FnPtr::new(loadfn("glMultiTexGenfEXT"), failing::MultiTexGenfEXT),
    MultiTexGenfvEXT: FnPtr::new(loadfn("glMultiTexGenfvEXT"), failing::MultiTexGenfvEXT),
    MultiTexGeniEXT: FnPtr::new(loadfn("glMultiTexGeniEXT"), failing::MultiTexGeniEXT),
    MultiTexGenivEXT: FnPtr::new(loadfn("glMultiTexGenivEXT"), failing::MultiTexGenivEXT),
    MultiTexImage1DEXT: FnPtr::new(loadfn("glMultiTexImage1DEXT"), failing::MultiTexImage1DEXT),
    MultiTexImage2DEXT: FnPtr::new(loadfn("glMultiTexImage2DEXT"), failing::MultiTexImage2DEXT),
    MultiTexImage3DEXT: FnPtr::new(loadfn("glMultiTexImage3DEXT"), failing::MultiTexImage3DEXT),
    MultiTexParameterIivEXT: FnPtr::new(loadfn("glMultiTexParameterIivEXT"), failing::MultiTexParameterIivEXT),
    MultiTexParameterIuivEXT: FnPtr::new(loadfn("glMultiTexParameterIuivEXT"), failing::MultiTexParameterIuivEXT),
    MultiTexParameterfEXT: FnPtr::new(loadfn("glMultiTexParameterfEXT"), failing::MultiTexParameterfEXT),
    MultiTexParameterfvEXT: FnPtr::new(loadfn("glMultiTexParameterfvEXT"), failing::MultiTexParameterfvEXT),
    MultiTexParameteriEXT: FnPtr::new(loadfn("glMultiTexParameteriEXT"), failing::MultiTexParameteriEXT),
    MultiTexParameterivEXT: FnPtr::new(loadfn("glMultiTexParameterivEXT"), failing::MultiTexParameterivEXT),
    MultiTexRenderbufferEXT: FnPtr::new(loadfn("glMultiTexRenderbufferEXT"), failing::MultiTexRenderbufferEXT),
    MultiTexSubImage1DEXT: FnPtr::new(loadfn("glMultiTexSubImage1DEXT"), failing::MultiTexSubImage1DEXT),
    MultiTexSubImage2DEXT: FnPtr::new(loadfn("glMultiTexSubImage2DEXT"), failing::MultiTexSubImage2DEXT),
    MultiTexSubImage3DEXT: FnPtr::new(loadfn("glMultiTexSubImage3DEXT"), failing::MultiTexSubImage3DEXT),
    NamedBufferDataEXT: FnPtr::new(loadfn("glNamedBufferDataEXT"), failing::NamedBufferDataEXT),
    NamedBufferStorageEXT: FnPtr::new(loadfn("glNamedBufferStorageEXT"), failing::NamedBufferStorageEXT),
    NamedBufferSubDataEXT: FnPtr::new(loadfn("glNamedBufferSubDataEXT"), failing::NamedBufferSubDataEXT),
    NamedCopyBufferSubDataEXT: FnPtr::new(loadfn("glNamedCopyBufferSubDataEXT"), failing::NamedCopyBufferSubDataEXT),
    NamedFramebufferParameteriEXT: FnPtr::new(loadfn("glNamedFramebufferParameteriEXT"), failing::NamedFramebufferParameteriEXT),
    NamedFramebufferRenderbufferEXT: FnPtr::new(loadfn("glNamedFramebufferRenderbufferEXT"), failing::NamedFramebufferRenderbufferEXT),
    NamedFramebufferTexture1DEXT: FnPtr::new(loadfn("glNamedFramebufferTexture1DEXT"), failing::NamedFramebufferTexture1DEXT),
    NamedFramebufferTexture2DEXT: FnPtr::new(loadfn("glNamedFramebufferTexture2DEXT"), failing::NamedFramebufferTexture2DEXT),
    NamedFramebufferTexture3DEXT: FnPtr::new(loadfn("glNamedFramebufferTexture3DEXT"), failing::NamedFramebufferTexture3DEXT),
    NamedFramebufferTextureEXT: FnPtr::new(loadfn("glNamedFramebufferTextureEXT"), failing::NamedFramebufferTextureEXT),
    NamedFramebufferTextureFaceEXT: FnPtr::new(loadfn("glNamedFramebufferTextureFaceEXT"), failing::NamedFramebufferTextureFaceEXT),
    NamedFramebufferTextureLayerEXT: FnPtr::new(loadfn("glNamedFramebufferTextureLayerEXT"), failing::NamedFramebufferTextureLayerEXT),
    NamedProgramLocalParameter4dEXT: FnPtr::new(loadfn("glNamedProgramLocalParameter4dEXT"), failing::NamedProgramLocalParameter4dEXT),
    NamedProgramLocalParameter4dvEXT: FnPtr::new(loadfn("glNamedProgramLocalParameter4dvEXT"), failing::NamedProgramLocalParameter4dvEXT),
    NamedProgramLocalParameter4fEXT: FnPtr::new(loadfn("glNamedProgramLocalParameter4fEXT"), failing::NamedProgramLocalParameter4fEXT),
    NamedProgramLocalParameter4fvEXT: FnPtr::new(loadfn("glNamedProgramLocalParameter4fvEXT"), failing::NamedProgramLocalParameter4fvEXT),
    NamedProgramLocalParameterI4iEXT: FnPtr::new(loadfn("glNamedProgramLocalParameterI4iEXT"), failing::NamedProgramLocalParameterI4iEXT),
    NamedProgramLocalParameterI4ivEXT: FnPtr::new(loadfn("glNamedProgramLocalParameterI4ivEXT"), failing::NamedProgramLocalParameterI4ivEXT),
    NamedProgramLocalParameterI4uiEXT: FnPtr::new(loadfn("glNamedProgramLocalParameterI4uiEXT"), failing::NamedProgramLocalParameterI4uiEXT),
    NamedProgramLocalParameterI4uivEXT: FnPtr::new(loadfn("glNamedProgramLocalParameterI4uivEXT"), failing::NamedProgramLocalParameterI4uivEXT),
    NamedProgramLocalParameters4fvEXT: FnPtr::new(loadfn("glNamedProgramLocalParameters4fvEXT"), failing::NamedProgramLocalParameters4fvEXT),
    NamedProgramLocalParametersI4ivEXT: FnPtr::new(loadfn("glNamedProgramLocalParametersI4ivEXT"), failing::NamedProgramLocalParametersI4ivEXT),
    NamedProgramLocalParametersI4uivEXT: FnPtr::new(loadfn("glNamedProgramLocalParametersI4uivEXT"), failing::NamedProgramLocalParametersI4uivEXT),
    NamedProgramStringEXT: FnPtr::new(loadfn("glNamedProgramStringEXT"), failing::NamedProgramStringEXT),
    NamedRenderbufferStorageEXT: FnPtr::new(loadfn("glNamedRenderbufferStorageEXT"), failing::NamedRenderbufferStorageEXT),
    NamedRenderbufferStorageMultisampleCoverageEXT: FnPtr::new(loadfn("glNamedRenderbufferStorageMultisampleCoverageEXT"), failing::NamedRenderbufferStorageMultisampleCoverageEXT),
    NamedRenderbufferStorageMultisampleEXT: FnPtr::new(loadfn("glNamedRenderbufferStorageMultisampleEXT"), failing::NamedRenderbufferStorageMultisampleEXT),
    NamedStringARB: FnPtr::new(loadfn("glNamedStringARB"), failing::NamedStringARB),
    NewList: FnPtr::new(loadfn("glNewList"), failing::NewList),
    NewObjectBufferATI: FnPtr::new(loadfn("glNewObjectBufferATI"), failing::NewObjectBufferATI),
    Normal3b: FnPtr::new(loadfn("glNormal3b"), failing::Normal3b),
    Normal3bv: FnPtr::new(loadfn("glNormal3bv"), failing::Normal3bv),
    Normal3d: FnPtr::new(loadfn("glNormal3d"), failing::Normal3d),
    Normal3dv: FnPtr::new(loadfn("glNormal3dv"), failing::Normal3dv),
    Normal3f: FnPtr::new(loadfn("glNormal3f"), failing::Normal3f),
    Normal3fVertex3fSUN: FnPtr::new(loadfn("glNormal3fVertex3fSUN"), failing::Normal3fVertex3fSUN),
    Normal3fVertex3fvSUN: FnPtr::new(loadfn("glNormal3fVertex3fvSUN"), failing::Normal3fVertex3fvSUN),
    Normal3fv: FnPtr::new(loadfn("glNormal3fv"), failing::Normal3fv),
    Normal3hNV: FnPtr::new(loadfn("glNormal3hNV"), failing::Normal3hNV),
    Normal3hvNV: FnPtr::new(loadfn("glNormal3hvNV"), failing::Normal3hvNV),
    Normal3i: FnPtr::new(loadfn("glNormal3i"), failing::Normal3i),
    Normal3iv: FnPtr::new(loadfn("glNormal3iv"), failing::Normal3iv),
    Normal3s: FnPtr::new(loadfn("glNormal3s"), failing::Normal3s),
    Normal3sv: FnPtr::new(loadfn("glNormal3sv"), failing::Normal3sv),
    Normal3x: FnPtr::new(loadfn("glNormal3x"), failing::Normal3x),
    Normal3xOES: FnPtr::new(loadfn("glNormal3xOES"), failing::Normal3xOES),
    Normal3xvOES: FnPtr::new(loadfn("glNormal3xvOES"), failing::Normal3xvOES),
    NormalFormatNV: FnPtr::new(loadfn("glNormalFormatNV"), failing::NormalFormatNV),
    NormalP3ui: FnPtr::new(loadfn("glNormalP3ui"), failing::NormalP3ui),
    NormalP3uiv: FnPtr::new(loadfn("glNormalP3uiv"), failing::NormalP3uiv),
    NormalPointer: FnPtr::new(loadfn("glNormalPointer"), failing::NormalPointer),
    NormalPointerEXT: FnPtr::new(loadfn("glNormalPointerEXT"), failing::NormalPointerEXT),
    NormalPointerListIBM: FnPtr::new(loadfn("glNormalPointerListIBM"), failing::NormalPointerListIBM),
    NormalPointervINTEL: FnPtr::new(loadfn("glNormalPointervINTEL"), failing::NormalPointervINTEL),
    NormalStream3bATI: FnPtr::new(loadfn("glNormalStream3bATI"), failing::NormalStream3bATI),
    NormalStream3bvATI: FnPtr::new(loadfn("glNormalStream3bvATI"), failing::NormalStream3bvATI),
    NormalStream3dATI: FnPtr::new(loadfn("glNormalStream3dATI"), failing::NormalStream3dATI),
    NormalStream3dvATI: FnPtr::new(loadfn("glNormalStream3dvATI"), failing::NormalStream3dvATI),
    NormalStream3fATI: FnPtr::new(loadfn("glNormalStream3fATI"), failing::NormalStream3fATI),
    NormalStream3fvATI: FnPtr::new(loadfn("glNormalStream3fvATI"), failing::NormalStream3fvATI),
    NormalStream3iATI: FnPtr::new(loadfn("glNormalStream3iATI"), failing::NormalStream3iATI),
    NormalStream3ivATI: FnPtr::new(loadfn("glNormalStream3ivATI"), failing::NormalStream3ivATI),
    NormalStream3sATI: FnPtr::new(loadfn("glNormalStream3sATI"), failing::NormalStream3sATI),
    NormalStream3svATI: FnPtr::new(loadfn("glNormalStream3svATI"), failing::NormalStream3svATI),
    ObjectLabel: FnPtr::new(loadfn("glObjectLabel"), failing::ObjectLabel),
    ObjectLabelKHR: FnPtr::new(loadfn("glObjectLabelKHR"), failing::ObjectLabelKHR),
    ObjectPtrLabel: FnPtr::new(loadfn("glObjectPtrLabel"), failing::ObjectPtrLabel),
    ObjectPtrLabelKHR: FnPtr::new(loadfn("glObjectPtrLabelKHR"), failing::ObjectPtrLabelKHR),
    ObjectPurgeableAPPLE: FnPtr::new(loadfn("glObjectPurgeableAPPLE"), failing::ObjectPurgeableAPPLE),
    ObjectUnpurgeableAPPLE: FnPtr::new(loadfn("glObjectUnpurgeableAPPLE"), failing::ObjectUnpurgeableAPPLE),
    Ortho: FnPtr::new(loadfn("glOrtho"), failing::Ortho),
    Orthof: FnPtr::new(loadfn("glOrthof"), failing::Orthof),
    OrthofOES: FnPtr::new(loadfn("glOrthofOES"), failing::OrthofOES),
    Orthox: FnPtr::new(loadfn("glOrthox"), failing::Orthox),
    OrthoxOES: FnPtr::new(loadfn("glOrthoxOES"), failing::OrthoxOES),
    PNTrianglesfATI: FnPtr::new(loadfn("glPNTrianglesfATI"), failing::PNTrianglesfATI),
    PNTrianglesiATI: FnPtr::new(loadfn("glPNTrianglesiATI"), failing::PNTrianglesiATI),
    PassTexCoordATI: FnPtr::new(loadfn("glPassTexCoordATI"), failing::PassTexCoordATI),
    PassThrough: FnPtr::new(loadfn("glPassThrough"), failing::PassThrough),
    PassThroughxOES: FnPtr::new(loadfn("glPassThroughxOES"), failing::PassThroughxOES),
    PatchParameterfv: FnPtr::new(loadfn("glPatchParameterfv"), failing::PatchParameterfv),
    PatchParameteri: FnPtr::new(loadfn("glPatchParameteri"), failing::PatchParameteri),
    PathColorGenNV: FnPtr::new(loadfn("glPathColorGenNV"), failing::PathColorGenNV),
    PathCommandsNV: FnPtr::new(loadfn("glPathCommandsNV"), failing::PathCommandsNV),
    PathCoordsNV: FnPtr::new(loadfn("glPathCoordsNV"), failing::PathCoordsNV),
    PathCoverDepthFuncNV: FnPtr::new(loadfn("glPathCoverDepthFuncNV"), failing::PathCoverDepthFuncNV),
    PathDashArrayNV: FnPtr::new(loadfn("glPathDashArrayNV"), failing::PathDashArrayNV),
    PathFogGenNV: FnPtr::new(loadfn("glPathFogGenNV"), failing::PathFogGenNV),
    PathGlyphRangeNV: FnPtr::new(loadfn("glPathGlyphRangeNV"), failing::PathGlyphRangeNV),
    PathGlyphsNV: FnPtr::new(loadfn("glPathGlyphsNV"), failing::PathGlyphsNV),
    PathParameterfNV: FnPtr::new(loadfn("glPathParameterfNV"), failing::PathParameterfNV),
    PathParameterfvNV: FnPtr::new(loadfn("glPathParameterfvNV"), failing::PathParameterfvNV),
    PathParameteriNV: FnPtr::new(loadfn("glPathParameteriNV"), failing::PathParameteriNV),
    PathParameterivNV: FnPtr::new(loadfn("glPathParameterivNV"), failing::PathParameterivNV),
    PathStencilDepthOffsetNV: FnPtr::new(loadfn("glPathStencilDepthOffsetNV"), failing::PathStencilDepthOffsetNV),
    PathStencilFuncNV: FnPtr::new(loadfn("glPathStencilFuncNV"), failing::PathStencilFuncNV),
    PathStringNV: FnPtr::new(loadfn("glPathStringNV"), failing::PathStringNV),
    PathSubCommandsNV: FnPtr::new(loadfn("glPathSubCommandsNV"), failing::PathSubCommandsNV),
    PathSubCoordsNV: FnPtr::new(loadfn("glPathSubCoordsNV"), failing::PathSubCoordsNV),
    PathTexGenNV: FnPtr::new(loadfn("glPathTexGenNV"), failing::PathTexGenNV),
    PauseTransformFeedback: FnPtr::new(loadfn("glPauseTransformFeedback"), failing::PauseTransformFeedback),
    PauseTransformFeedbackNV: FnPtr::new(loadfn("glPauseTransformFeedbackNV"), failing::PauseTransformFeedbackNV),
    PixelDataRangeNV: FnPtr::new(loadfn("glPixelDataRangeNV"), failing::PixelDataRangeNV),
    PixelMapfv: FnPtr::new(loadfn("glPixelMapfv"), failing::PixelMapfv),
    PixelMapuiv: FnPtr::new(loadfn("glPixelMapuiv"), failing::PixelMapuiv),
    PixelMapusv: FnPtr::new(loadfn("glPixelMapusv"), failing::PixelMapusv),
    PixelMapx: FnPtr::new(loadfn("glPixelMapx"), failing::PixelMapx),
    PixelStoref: FnPtr::new(loadfn("glPixelStoref"), failing::PixelStoref),
    PixelStorei: FnPtr::new(loadfn("glPixelStorei"), failing::PixelStorei),
    PixelStorex: FnPtr::new(loadfn("glPixelStorex"), failing::PixelStorex),
    PixelTexGenParameterfSGIS: FnPtr::new(loadfn("glPixelTexGenParameterfSGIS"), failing::PixelTexGenParameterfSGIS),
    PixelTexGenParameterfvSGIS: FnPtr::new(loadfn("glPixelTexGenParameterfvSGIS"), failing::PixelTexGenParameterfvSGIS),
    PixelTexGenParameteriSGIS: FnPtr::new(loadfn("glPixelTexGenParameteriSGIS"), failing::PixelTexGenParameteriSGIS),
    PixelTexGenParameterivSGIS: FnPtr::new(loadfn("glPixelTexGenParameterivSGIS"), failing::PixelTexGenParameterivSGIS),
    PixelTexGenSGIX: FnPtr::new(loadfn("glPixelTexGenSGIX"), failing::PixelTexGenSGIX),
    PixelTransferf: FnPtr::new(loadfn("glPixelTransferf"), failing::PixelTransferf),
    PixelTransferi: FnPtr::new(loadfn("glPixelTransferi"), failing::PixelTransferi),
    PixelTransferxOES: FnPtr::new(loadfn("glPixelTransferxOES"), failing::PixelTransferxOES),
    PixelTransformParameterfEXT: FnPtr::new(loadfn("glPixelTransformParameterfEXT"), failing::PixelTransformParameterfEXT),
    PixelTransformParameterfvEXT: FnPtr::new(loadfn("glPixelTransformParameterfvEXT"), failing::PixelTransformParameterfvEXT),
    PixelTransformParameteriEXT: FnPtr::new(loadfn("glPixelTransformParameteriEXT"), failing::PixelTransformParameteriEXT),
    PixelTransformParameterivEXT: FnPtr::new(loadfn("glPixelTransformParameterivEXT"), failing::PixelTransformParameterivEXT),
    PixelZoom: FnPtr::new(loadfn("glPixelZoom"), failing::PixelZoom),
    PixelZoomxOES: FnPtr::new(loadfn("glPixelZoomxOES"), failing::PixelZoomxOES),
    PointAlongPathNV: FnPtr::new(loadfn("glPointAlongPathNV"), failing::PointAlongPathNV),
    PointParameterf: FnPtr::new(loadfn("glPointParameterf"), failing::PointParameterf),
    PointParameterfARB: FnPtr::new(loadfn("glPointParameterfARB"), failing::PointParameterfARB),
    PointParameterfEXT: FnPtr::new(loadfn("glPointParameterfEXT"), failing::PointParameterfEXT),
    PointParameterfSGIS: FnPtr::new(loadfn("glPointParameterfSGIS"), failing::PointParameterfSGIS),
    PointParameterfv: FnPtr::new(loadfn("glPointParameterfv"), failing::PointParameterfv),
    PointParameterfvARB: FnPtr::new(loadfn("glPointParameterfvARB"), failing::PointParameterfvARB),
    PointParameterfvEXT: FnPtr::new(loadfn("glPointParameterfvEXT"), failing::PointParameterfvEXT),
    PointParameterfvSGIS: FnPtr::new(loadfn("glPointParameterfvSGIS"), failing::PointParameterfvSGIS),
    PointParameteri: FnPtr::new(loadfn("glPointParameteri"), failing::PointParameteri),
    PointParameteriNV: FnPtr::new(loadfn("glPointParameteriNV"), failing::PointParameteriNV),
    PointParameteriv: FnPtr::new(loadfn("glPointParameteriv"), failing::PointParameteriv),
    PointParameterivNV: FnPtr::new(loadfn("glPointParameterivNV"), failing::PointParameterivNV),
    PointParameterx: FnPtr::new(loadfn("glPointParameterx"), failing::PointParameterx),
    PointParameterxOES: FnPtr::new(loadfn("glPointParameterxOES"), failing::PointParameterxOES),
    PointParameterxv: FnPtr::new(loadfn("glPointParameterxv"), failing::PointParameterxv),
    PointParameterxvOES: FnPtr::new(loadfn("glPointParameterxvOES"), failing::PointParameterxvOES),
    PointSize: FnPtr::new(loadfn("glPointSize"), failing::PointSize),
    PointSizePointerOES: FnPtr::new(loadfn("glPointSizePointerOES"), failing::PointSizePointerOES),
    PointSizex: FnPtr::new(loadfn("glPointSizex"), failing::PointSizex),
    PointSizexOES: FnPtr::new(loadfn("glPointSizexOES"), failing::PointSizexOES),
    PollAsyncSGIX: FnPtr::new(loadfn("glPollAsyncSGIX"), failing::PollAsyncSGIX),
    PollInstrumentsSGIX: FnPtr::new(loadfn("glPollInstrumentsSGIX"), failing::PollInstrumentsSGIX),
    PolygonMode: FnPtr::new(loadfn("glPolygonMode"), failing::PolygonMode),
    PolygonOffset: FnPtr::new(loadfn("glPolygonOffset"), failing::PolygonOffset),
    PolygonOffsetEXT: FnPtr::new(loadfn("glPolygonOffsetEXT"), failing::PolygonOffsetEXT),
    PolygonOffsetx: FnPtr::new(loadfn("glPolygonOffsetx"), failing::PolygonOffsetx),
    PolygonOffsetxOES: FnPtr::new(loadfn("glPolygonOffsetxOES"), failing::PolygonOffsetxOES),
    PolygonStipple: FnPtr::new(loadfn("glPolygonStipple"), failing::PolygonStipple),
    PopAttrib: FnPtr::new(loadfn("glPopAttrib"), failing::PopAttrib),
    PopClientAttrib: FnPtr::new(loadfn("glPopClientAttrib"), failing::PopClientAttrib),
    PopDebugGroup: FnPtr::new(loadfn("glPopDebugGroup"), failing::PopDebugGroup),
    PopDebugGroupKHR: FnPtr::new(loadfn("glPopDebugGroupKHR"), failing::PopDebugGroupKHR),
    PopGroupMarkerEXT: FnPtr::new(loadfn("glPopGroupMarkerEXT"), failing::PopGroupMarkerEXT),
    PopMatrix: FnPtr::new(loadfn("glPopMatrix"), failing::PopMatrix),
    PopName: FnPtr::new(loadfn("glPopName"), failing::PopName),
    PresentFrameDualFillNV: FnPtr::new(loadfn("glPresentFrameDualFillNV"), failing::PresentFrameDualFillNV),
    PresentFrameKeyedNV: FnPtr::new(loadfn("glPresentFrameKeyedNV"), failing::PresentFrameKeyedNV),
    PrimitiveRestartIndex: FnPtr::new(loadfn("glPrimitiveRestartIndex"), failing::PrimitiveRestartIndex),
    PrimitiveRestartIndexNV: FnPtr::new(loadfn("glPrimitiveRestartIndexNV"), failing::PrimitiveRestartIndexNV),
    PrimitiveRestartNV: FnPtr::new(loadfn("glPrimitiveRestartNV"), failing::PrimitiveRestartNV),
    PrioritizeTextures: FnPtr::new(loadfn("glPrioritizeTextures"), failing::PrioritizeTextures),
    PrioritizeTexturesEXT: FnPtr::new(loadfn("glPrioritizeTexturesEXT"), failing::PrioritizeTexturesEXT),
    PrioritizeTexturesxOES: FnPtr::new(loadfn("glPrioritizeTexturesxOES"), failing::PrioritizeTexturesxOES),
    ProgramBinary: FnPtr::new(loadfn("glProgramBinary"), failing::ProgramBinary),
    ProgramBinaryOES: FnPtr::new(loadfn("glProgramBinaryOES"), failing::ProgramBinaryOES),
    ProgramBufferParametersIivNV: FnPtr::new(loadfn("glProgramBufferParametersIivNV"), failing::ProgramBufferParametersIivNV),
    ProgramBufferParametersIuivNV: FnPtr::new(loadfn("glProgramBufferParametersIuivNV"), failing::ProgramBufferParametersIuivNV),
    ProgramBufferParametersfvNV: FnPtr::new(loadfn("glProgramBufferParametersfvNV"), failing::ProgramBufferParametersfvNV),
    ProgramEnvParameter4dARB: FnPtr::new(loadfn("glProgramEnvParameter4dARB"), failing::ProgramEnvParameter4dARB),
    ProgramEnvParameter4dvARB: FnPtr::new(loadfn("glProgramEnvParameter4dvARB"), failing::ProgramEnvParameter4dvARB),
    ProgramEnvParameter4fARB: FnPtr::new(loadfn("glProgramEnvParameter4fARB"), failing::ProgramEnvParameter4fARB),
    ProgramEnvParameter4fvARB: FnPtr::new(loadfn("glProgramEnvParameter4fvARB"), failing::ProgramEnvParameter4fvARB),
    ProgramEnvParameterI4iNV: FnPtr::new(loadfn("glProgramEnvParameterI4iNV"), failing::ProgramEnvParameterI4iNV),
    ProgramEnvParameterI4ivNV: FnPtr::new(loadfn("glProgramEnvParameterI4ivNV"), failing::ProgramEnvParameterI4ivNV),
    ProgramEnvParameterI4uiNV: FnPtr::new(loadfn("glProgramEnvParameterI4uiNV"), failing::ProgramEnvParameterI4uiNV),
    ProgramEnvParameterI4uivNV: FnPtr::new(loadfn("glProgramEnvParameterI4uivNV"), failing::ProgramEnvParameterI4uivNV),
    ProgramEnvParameters4fvEXT: FnPtr::new(loadfn("glProgramEnvParameters4fvEXT"), failing::ProgramEnvParameters4fvEXT),
    ProgramEnvParametersI4ivNV: FnPtr::new(loadfn("glProgramEnvParametersI4ivNV"), failing::ProgramEnvParametersI4ivNV),
    ProgramEnvParametersI4uivNV: FnPtr::new(loadfn("glProgramEnvParametersI4uivNV"), failing::ProgramEnvParametersI4uivNV),
    ProgramLocalParameter4dARB: FnPtr::new(loadfn("glProgramLocalParameter4dARB"), failing::ProgramLocalParameter4dARB),
    ProgramLocalParameter4dvARB: FnPtr::new(loadfn("glProgramLocalParameter4dvARB"), failing::ProgramLocalParameter4dvARB),
    ProgramLocalParameter4fARB: FnPtr::new(loadfn("glProgramLocalParameter4fARB"), failing::ProgramLocalParameter4fARB),
    ProgramLocalParameter4fvARB: FnPtr::new(loadfn("glProgramLocalParameter4fvARB"), failing::ProgramLocalParameter4fvARB),
    ProgramLocalParameterI4iNV: FnPtr::new(loadfn("glProgramLocalParameterI4iNV"), failing::ProgramLocalParameterI4iNV),
    ProgramLocalParameterI4ivNV: FnPtr::new(loadfn("glProgramLocalParameterI4ivNV"), failing::ProgramLocalParameterI4ivNV),
    ProgramLocalParameterI4uiNV: FnPtr::new(loadfn("glProgramLocalParameterI4uiNV"), failing::ProgramLocalParameterI4uiNV),
    ProgramLocalParameterI4uivNV: FnPtr::new(loadfn("glProgramLocalParameterI4uivNV"), failing::ProgramLocalParameterI4uivNV),
    ProgramLocalParameters4fvEXT: FnPtr::new(loadfn("glProgramLocalParameters4fvEXT"), failing::ProgramLocalParameters4fvEXT),
    ProgramLocalParametersI4ivNV: FnPtr::new(loadfn("glProgramLocalParametersI4ivNV"), failing::ProgramLocalParametersI4ivNV),
    ProgramLocalParametersI4uivNV: FnPtr::new(loadfn("glProgramLocalParametersI4uivNV"), failing::ProgramLocalParametersI4uivNV),
    ProgramNamedParameter4dNV: FnPtr::new(loadfn("glProgramNamedParameter4dNV"), failing::ProgramNamedParameter4dNV),
    ProgramNamedParameter4dvNV: FnPtr::new(loadfn("glProgramNamedParameter4dvNV"), failing::ProgramNamedParameter4dvNV),
    ProgramNamedParameter4fNV: FnPtr::new(loadfn("glProgramNamedParameter4fNV"), failing::ProgramNamedParameter4fNV),
    ProgramNamedParameter4fvNV: FnPtr::new(loadfn("glProgramNamedParameter4fvNV"), failing::ProgramNamedParameter4fvNV),
    ProgramParameter4dNV: FnPtr::new(loadfn("glProgramParameter4dNV"), failing::ProgramParameter4dNV),
    ProgramParameter4dvNV: FnPtr::new(loadfn("glProgramParameter4dvNV"), failing::ProgramParameter4dvNV),
    ProgramParameter4fNV: FnPtr::new(loadfn("glProgramParameter4fNV"), failing::ProgramParameter4fNV),
    ProgramParameter4fvNV: FnPtr::new(loadfn("glProgramParameter4fvNV"), failing::ProgramParameter4fvNV),
    ProgramParameteri: FnPtr::new(loadfn("glProgramParameteri"), failing::ProgramParameteri),
    ProgramParameteriARB: FnPtr::new(loadfn("glProgramParameteriARB"), failing::ProgramParameteriARB),
    ProgramParameteriEXT: FnPtr::new(loadfn("glProgramParameteriEXT"), failing::ProgramParameteriEXT),
    ProgramParameters4dvNV: FnPtr::new(loadfn("glProgramParameters4dvNV"), failing::ProgramParameters4dvNV),
    ProgramParameters4fvNV: FnPtr::new(loadfn("glProgramParameters4fvNV"), failing::ProgramParameters4fvNV),
    ProgramStringARB: FnPtr::new(loadfn("glProgramStringARB"), failing::ProgramStringARB),
    ProgramSubroutineParametersuivNV: FnPtr::new(loadfn("glProgramSubroutineParametersuivNV"), failing::ProgramSubroutineParametersuivNV),
    ProgramUniform1d: FnPtr::new(loadfn("glProgramUniform1d"), failing::ProgramUniform1d),
    ProgramUniform1dEXT: FnPtr::new(loadfn("glProgramUniform1dEXT"), failing::ProgramUniform1dEXT),
    ProgramUniform1dv: FnPtr::new(loadfn("glProgramUniform1dv"), failing::ProgramUniform1dv),
    ProgramUniform1dvEXT: FnPtr::new(loadfn("glProgramUniform1dvEXT"), failing::ProgramUniform1dvEXT),
    ProgramUniform1f: FnPtr::new(loadfn("glProgramUniform1f"), failing::ProgramUniform1f),
    ProgramUniform1fEXT: FnPtr::new(loadfn("glProgramUniform1fEXT"), failing::ProgramUniform1fEXT),
    ProgramUniform1fv: FnPtr::new(loadfn("glProgramUniform1fv"), failing::ProgramUniform1fv),
    ProgramUniform1fvEXT: FnPtr::new(loadfn("glProgramUniform1fvEXT"), failing::ProgramUniform1fvEXT),
    ProgramUniform1i: FnPtr::new(loadfn("glProgramUniform1i"), failing::ProgramUniform1i),
    ProgramUniform1i64NV: FnPtr::new(loadfn("glProgramUniform1i64NV"), failing::ProgramUniform1i64NV),
    ProgramUniform1i64vNV: FnPtr::new(loadfn("glProgramUniform1i64vNV"), failing::ProgramUniform1i64vNV),
    ProgramUniform1iEXT: FnPtr::new(loadfn("glProgramUniform1iEXT"), failing::ProgramUniform1iEXT),
    ProgramUniform1iv: FnPtr::new(loadfn("glProgramUniform1iv"), failing::ProgramUniform1iv),
    ProgramUniform1ivEXT: FnPtr::new(loadfn("glProgramUniform1ivEXT"), failing::ProgramUniform1ivEXT),
    ProgramUniform1ui: FnPtr::new(loadfn("glProgramUniform1ui"), failing::ProgramUniform1ui),
    ProgramUniform1ui64NV: FnPtr::new(loadfn("glProgramUniform1ui64NV"), failing::ProgramUniform1ui64NV),
    ProgramUniform1ui64vNV: FnPtr::new(loadfn("glProgramUniform1ui64vNV"), failing::ProgramUniform1ui64vNV),
    ProgramUniform1uiEXT: FnPtr::new(loadfn("glProgramUniform1uiEXT"), failing::ProgramUniform1uiEXT),
    ProgramUniform1uiv: FnPtr::new(loadfn("glProgramUniform1uiv"), failing::ProgramUniform1uiv),
    ProgramUniform1uivEXT: FnPtr::new(loadfn("glProgramUniform1uivEXT"), failing::ProgramUniform1uivEXT),
    ProgramUniform2d: FnPtr::new(loadfn("glProgramUniform2d"), failing::ProgramUniform2d),
    ProgramUniform2dEXT: FnPtr::new(loadfn("glProgramUniform2dEXT"), failing::ProgramUniform2dEXT),
    ProgramUniform2dv: FnPtr::new(loadfn("glProgramUniform2dv"), failing::ProgramUniform2dv),
    ProgramUniform2dvEXT: FnPtr::new(loadfn("glProgramUniform2dvEXT"), failing::ProgramUniform2dvEXT),
    ProgramUniform2f: FnPtr::new(loadfn("glProgramUniform2f"), failing::ProgramUniform2f),
    ProgramUniform2fEXT: FnPtr::new(loadfn("glProgramUniform2fEXT"), failing::ProgramUniform2fEXT),
    ProgramUniform2fv: FnPtr::new(loadfn("glProgramUniform2fv"), failing::ProgramUniform2fv),
    ProgramUniform2fvEXT: FnPtr::new(loadfn("glProgramUniform2fvEXT"), failing::ProgramUniform2fvEXT),
    ProgramUniform2i: FnPtr::new(loadfn("glProgramUniform2i"), failing::ProgramUniform2i),
    ProgramUniform2i64NV: FnPtr::new(loadfn("glProgramUniform2i64NV"), failing::ProgramUniform2i64NV),
    ProgramUniform2i64vNV: FnPtr::new(loadfn("glProgramUniform2i64vNV"), failing::ProgramUniform2i64vNV),
    ProgramUniform2iEXT: FnPtr::new(loadfn("glProgramUniform2iEXT"), failing::ProgramUniform2iEXT),
    ProgramUniform2iv: FnPtr::new(loadfn("glProgramUniform2iv"), failing::ProgramUniform2iv),
    ProgramUniform2ivEXT: FnPtr::new(loadfn("glProgramUniform2ivEXT"), failing::ProgramUniform2ivEXT),
    ProgramUniform2ui: FnPtr::new(loadfn("glProgramUniform2ui"), failing::ProgramUniform2ui),
    ProgramUniform2ui64NV: FnPtr::new(loadfn("glProgramUniform2ui64NV"), failing::ProgramUniform2ui64NV),
    ProgramUniform2ui64vNV: FnPtr::new(loadfn("glProgramUniform2ui64vNV"), failing::ProgramUniform2ui64vNV),
    ProgramUniform2uiEXT: FnPtr::new(loadfn("glProgramUniform2uiEXT"), failing::ProgramUniform2uiEXT),
    ProgramUniform2uiv: FnPtr::new(loadfn("glProgramUniform2uiv"), failing::ProgramUniform2uiv),
    ProgramUniform2uivEXT: FnPtr::new(loadfn("glProgramUniform2uivEXT"), failing::ProgramUniform2uivEXT),
    ProgramUniform3d: FnPtr::new(loadfn("glProgramUniform3d"), failing::ProgramUniform3d),
    ProgramUniform3dEXT: FnPtr::new(loadfn("glProgramUniform3dEXT"), failing::ProgramUniform3dEXT),
    ProgramUniform3dv: FnPtr::new(loadfn("glProgramUniform3dv"), failing::ProgramUniform3dv),
    ProgramUniform3dvEXT: FnPtr::new(loadfn("glProgramUniform3dvEXT"), failing::ProgramUniform3dvEXT),
    ProgramUniform3f: FnPtr::new(loadfn("glProgramUniform3f"), failing::ProgramUniform3f),
    ProgramUniform3fEXT: FnPtr::new(loadfn("glProgramUniform3fEXT"), failing::ProgramUniform3fEXT),
    ProgramUniform3fv: FnPtr::new(loadfn("glProgramUniform3fv"), failing::ProgramUniform3fv),
    ProgramUniform3fvEXT: FnPtr::new(loadfn("glProgramUniform3fvEXT"), failing::ProgramUniform3fvEXT),
    ProgramUniform3i: FnPtr::new(loadfn("glProgramUniform3i"), failing::ProgramUniform3i),
    ProgramUniform3i64NV: FnPtr::new(loadfn("glProgramUniform3i64NV"), failing::ProgramUniform3i64NV),
    ProgramUniform3i64vNV: FnPtr::new(loadfn("glProgramUniform3i64vNV"), failing::ProgramUniform3i64vNV),
    ProgramUniform3iEXT: FnPtr::new(loadfn("glProgramUniform3iEXT"), failing::ProgramUniform3iEXT),
    ProgramUniform3iv: FnPtr::new(loadfn("glProgramUniform3iv"), failing::ProgramUniform3iv),
    ProgramUniform3ivEXT: FnPtr::new(loadfn("glProgramUniform3ivEXT"), failing::ProgramUniform3ivEXT),
    ProgramUniform3ui: FnPtr::new(loadfn("glProgramUniform3ui"), failing::ProgramUniform3ui),
    ProgramUniform3ui64NV: FnPtr::new(loadfn("glProgramUniform3ui64NV"), failing::ProgramUniform3ui64NV),
    ProgramUniform3ui64vNV: FnPtr::new(loadfn("glProgramUniform3ui64vNV"), failing::ProgramUniform3ui64vNV),
    ProgramUniform3uiEXT: FnPtr::new(loadfn("glProgramUniform3uiEXT"), failing::ProgramUniform3uiEXT),
    ProgramUniform3uiv: FnPtr::new(loadfn("glProgramUniform3uiv"), failing::ProgramUniform3uiv),
    ProgramUniform3uivEXT: FnPtr::new(loadfn("glProgramUniform3uivEXT"), failing::ProgramUniform3uivEXT),
    ProgramUniform4d: FnPtr::new(loadfn("glProgramUniform4d"), failing::ProgramUniform4d),
    ProgramUniform4dEXT: FnPtr::new(loadfn("glProgramUniform4dEXT"), failing::ProgramUniform4dEXT),
    ProgramUniform4dv: FnPtr::new(loadfn("glProgramUniform4dv"), failing::ProgramUniform4dv),
    ProgramUniform4dvEXT: FnPtr::new(loadfn("glProgramUniform4dvEXT"), failing::ProgramUniform4dvEXT),
    ProgramUniform4f: FnPtr::new(loadfn("glProgramUniform4f"), failing::ProgramUniform4f),
    ProgramUniform4fEXT: FnPtr::new(loadfn("glProgramUniform4fEXT"), failing::ProgramUniform4fEXT),
    ProgramUniform4fv: FnPtr::new(loadfn("glProgramUniform4fv"), failing::ProgramUniform4fv),
    ProgramUniform4fvEXT: FnPtr::new(loadfn("glProgramUniform4fvEXT"), failing::ProgramUniform4fvEXT),
    ProgramUniform4i: FnPtr::new(loadfn("glProgramUniform4i"), failing::ProgramUniform4i),
    ProgramUniform4i64NV: FnPtr::new(loadfn("glProgramUniform4i64NV"), failing::ProgramUniform4i64NV),
    ProgramUniform4i64vNV: FnPtr::new(loadfn("glProgramUniform4i64vNV"), failing::ProgramUniform4i64vNV),
    ProgramUniform4iEXT: FnPtr::new(loadfn("glProgramUniform4iEXT"), failing::ProgramUniform4iEXT),
    ProgramUniform4iv: FnPtr::new(loadfn("glProgramUniform4iv"), failing::ProgramUniform4iv),
    ProgramUniform4ivEXT: FnPtr::new(loadfn("glProgramUniform4ivEXT"), failing::ProgramUniform4ivEXT),
    ProgramUniform4ui: FnPtr::new(loadfn("glProgramUniform4ui"), failing::ProgramUniform4ui),
    ProgramUniform4ui64NV: FnPtr::new(loadfn("glProgramUniform4ui64NV"), failing::ProgramUniform4ui64NV),
    ProgramUniform4ui64vNV: FnPtr::new(loadfn("glProgramUniform4ui64vNV"), failing::ProgramUniform4ui64vNV),
    ProgramUniform4uiEXT: FnPtr::new(loadfn("glProgramUniform4uiEXT"), failing::ProgramUniform4uiEXT),
    ProgramUniform4uiv: FnPtr::new(loadfn("glProgramUniform4uiv"), failing::ProgramUniform4uiv),
    ProgramUniform4uivEXT: FnPtr::new(loadfn("glProgramUniform4uivEXT"), failing::ProgramUniform4uivEXT),
    ProgramUniformHandleui64ARB: FnPtr::new(loadfn("glProgramUniformHandleui64ARB"), failing::ProgramUniformHandleui64ARB),
    ProgramUniformHandleui64NV: FnPtr::new(loadfn("glProgramUniformHandleui64NV"), failing::ProgramUniformHandleui64NV),
    ProgramUniformHandleui64vARB: FnPtr::new(loadfn("glProgramUniformHandleui64vARB"), failing::ProgramUniformHandleui64vARB),
    ProgramUniformHandleui64vNV: FnPtr::new(loadfn("glProgramUniformHandleui64vNV"), failing::ProgramUniformHandleui64vNV),
    ProgramUniformMatrix2dv: FnPtr::new(loadfn("glProgramUniformMatrix2dv"), failing::ProgramUniformMatrix2dv),
    ProgramUniformMatrix2dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix2dvEXT"), failing::ProgramUniformMatrix2dvEXT),
    ProgramUniformMatrix2fv: FnPtr::new(loadfn("glProgramUniformMatrix2fv"), failing::ProgramUniformMatrix2fv),
    ProgramUniformMatrix2fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix2fvEXT"), failing::ProgramUniformMatrix2fvEXT),
    ProgramUniformMatrix2x3dv: FnPtr::new(loadfn("glProgramUniformMatrix2x3dv"), failing::ProgramUniformMatrix2x3dv),
    ProgramUniformMatrix2x3dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix2x3dvEXT"), failing::ProgramUniformMatrix2x3dvEXT),
    ProgramUniformMatrix2x3fv: FnPtr::new(loadfn("glProgramUniformMatrix2x3fv"), failing::ProgramUniformMatrix2x3fv),
    ProgramUniformMatrix2x3fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix2x3fvEXT"), failing::ProgramUniformMatrix2x3fvEXT),
    ProgramUniformMatrix2x4dv: FnPtr::new(loadfn("glProgramUniformMatrix2x4dv"), failing::ProgramUniformMatrix2x4dv),
    ProgramUniformMatrix2x4dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix2x4dvEXT"), failing::ProgramUniformMatrix2x4dvEXT),
    ProgramUniformMatrix2x4fv: FnPtr::new(loadfn("glProgramUniformMatrix2x4fv"), failing::ProgramUniformMatrix2x4fv),
    ProgramUniformMatrix2x4fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix2x4fvEXT"), failing::ProgramUniformMatrix2x4fvEXT),
    ProgramUniformMatrix3dv: FnPtr::new(loadfn("glProgramUniformMatrix3dv"), failing::ProgramUniformMatrix3dv),
    ProgramUniformMatrix3dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix3dvEXT"), failing::ProgramUniformMatrix3dvEXT),
    ProgramUniformMatrix3fv: FnPtr::new(loadfn("glProgramUniformMatrix3fv"), failing::ProgramUniformMatrix3fv),
    ProgramUniformMatrix3fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix3fvEXT"), failing::ProgramUniformMatrix3fvEXT),
    ProgramUniformMatrix3x2dv: FnPtr::new(loadfn("glProgramUniformMatrix3x2dv"), failing::ProgramUniformMatrix3x2dv),
    ProgramUniformMatrix3x2dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix3x2dvEXT"), failing::ProgramUniformMatrix3x2dvEXT),
    ProgramUniformMatrix3x2fv: FnPtr::new(loadfn("glProgramUniformMatrix3x2fv"), failing::ProgramUniformMatrix3x2fv),
    ProgramUniformMatrix3x2fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix3x2fvEXT"), failing::ProgramUniformMatrix3x2fvEXT),
    ProgramUniformMatrix3x4dv: FnPtr::new(loadfn("glProgramUniformMatrix3x4dv"), failing::ProgramUniformMatrix3x4dv),
    ProgramUniformMatrix3x4dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix3x4dvEXT"), failing::ProgramUniformMatrix3x4dvEXT),
    ProgramUniformMatrix3x4fv: FnPtr::new(loadfn("glProgramUniformMatrix3x4fv"), failing::ProgramUniformMatrix3x4fv),
    ProgramUniformMatrix3x4fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix3x4fvEXT"), failing::ProgramUniformMatrix3x4fvEXT),
    ProgramUniformMatrix4dv: FnPtr::new(loadfn("glProgramUniformMatrix4dv"), failing::ProgramUniformMatrix4dv),
    ProgramUniformMatrix4dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix4dvEXT"), failing::ProgramUniformMatrix4dvEXT),
    ProgramUniformMatrix4fv: FnPtr::new(loadfn("glProgramUniformMatrix4fv"), failing::ProgramUniformMatrix4fv),
    ProgramUniformMatrix4fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix4fvEXT"), failing::ProgramUniformMatrix4fvEXT),
    ProgramUniformMatrix4x2dv: FnPtr::new(loadfn("glProgramUniformMatrix4x2dv"), failing::ProgramUniformMatrix4x2dv),
    ProgramUniformMatrix4x2dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix4x2dvEXT"), failing::ProgramUniformMatrix4x2dvEXT),
    ProgramUniformMatrix4x2fv: FnPtr::new(loadfn("glProgramUniformMatrix4x2fv"), failing::ProgramUniformMatrix4x2fv),
    ProgramUniformMatrix4x2fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix4x2fvEXT"), failing::ProgramUniformMatrix4x2fvEXT),
    ProgramUniformMatrix4x3dv: FnPtr::new(loadfn("glProgramUniformMatrix4x3dv"), failing::ProgramUniformMatrix4x3dv),
    ProgramUniformMatrix4x3dvEXT: FnPtr::new(loadfn("glProgramUniformMatrix4x3dvEXT"), failing::ProgramUniformMatrix4x3dvEXT),
    ProgramUniformMatrix4x3fv: FnPtr::new(loadfn("glProgramUniformMatrix4x3fv"), failing::ProgramUniformMatrix4x3fv),
    ProgramUniformMatrix4x3fvEXT: FnPtr::new(loadfn("glProgramUniformMatrix4x3fvEXT"), failing::ProgramUniformMatrix4x3fvEXT),
    ProgramUniformui64NV: FnPtr::new(loadfn("glProgramUniformui64NV"), failing::ProgramUniformui64NV),
    ProgramUniformui64vNV: FnPtr::new(loadfn("glProgramUniformui64vNV"), failing::ProgramUniformui64vNV),
    ProgramVertexLimitNV: FnPtr::new(loadfn("glProgramVertexLimitNV"), failing::ProgramVertexLimitNV),
    ProvokingVertex: FnPtr::new(loadfn("glProvokingVertex"), failing::ProvokingVertex),
    ProvokingVertexEXT: FnPtr::new(loadfn("glProvokingVertexEXT"), failing::ProvokingVertexEXT),
    PushAttrib: FnPtr::new(loadfn("glPushAttrib"), failing::PushAttrib),
    PushClientAttrib: FnPtr::new(loadfn("glPushClientAttrib"), failing::PushClientAttrib),
    PushClientAttribDefaultEXT: FnPtr::new(loadfn("glPushClientAttribDefaultEXT"), failing::PushClientAttribDefaultEXT),
    PushDebugGroup: FnPtr::new(loadfn("glPushDebugGroup"), failing::PushDebugGroup),
    PushDebugGroupKHR: FnPtr::new(loadfn("glPushDebugGroupKHR"), failing::PushDebugGroupKHR),
    PushGroupMarkerEXT: FnPtr::new(loadfn("glPushGroupMarkerEXT"), failing::PushGroupMarkerEXT),
    PushMatrix: FnPtr::new(loadfn("glPushMatrix"), failing::PushMatrix),
    PushName: FnPtr::new(loadfn("glPushName"), failing::PushName),
    QueryCounter: FnPtr::new(loadfn("glQueryCounter"), failing::QueryCounter),
    QueryCounterEXT: FnPtr::new(loadfn("glQueryCounterEXT"), failing::QueryCounterEXT),
    QueryMatrixxOES: FnPtr::new(loadfn("glQueryMatrixxOES"), failing::QueryMatrixxOES),
    RasterPos2d: FnPtr::new(loadfn("glRasterPos2d"), failing::RasterPos2d),
    RasterPos2dv: FnPtr::new(loadfn("glRasterPos2dv"), failing::RasterPos2dv),
    RasterPos2f: FnPtr::new(loadfn("glRasterPos2f"), failing::RasterPos2f),
    RasterPos2fv: FnPtr::new(loadfn("glRasterPos2fv"), failing::RasterPos2fv),
    RasterPos2i: FnPtr::new(loadfn("glRasterPos2i"), failing::RasterPos2i),
    RasterPos2iv: FnPtr::new(loadfn("glRasterPos2iv"), failing::RasterPos2iv),
    RasterPos2s: FnPtr::new(loadfn("glRasterPos2s"), failing::RasterPos2s),
    RasterPos2sv: FnPtr::new(loadfn("glRasterPos2sv"), failing::RasterPos2sv),
    RasterPos2xOES: FnPtr::new(loadfn("glRasterPos2xOES"), failing::RasterPos2xOES),
    RasterPos2xvOES: FnPtr::new(loadfn("glRasterPos2xvOES"), failing::RasterPos2xvOES),
    RasterPos3d: FnPtr::new(loadfn("glRasterPos3d"), failing::RasterPos3d),
    RasterPos3dv: FnPtr::new(loadfn("glRasterPos3dv"), failing::RasterPos3dv),
    RasterPos3f: FnPtr::new(loadfn("glRasterPos3f"), failing::RasterPos3f),
    RasterPos3fv: FnPtr::new(loadfn("glRasterPos3fv"), failing::RasterPos3fv),
    RasterPos3i: FnPtr::new(loadfn("glRasterPos3i"), failing::RasterPos3i),
    RasterPos3iv: FnPtr::new(loadfn("glRasterPos3iv"), failing::RasterPos3iv),
    RasterPos3s: FnPtr::new(loadfn("glRasterPos3s"), failing::RasterPos3s),
    RasterPos3sv: FnPtr::new(loadfn("glRasterPos3sv"), failing::RasterPos3sv),
    RasterPos3xOES: FnPtr::new(loadfn("glRasterPos3xOES"), failing::RasterPos3xOES),
    RasterPos3xvOES: FnPtr::new(loadfn("glRasterPos3xvOES"), failing::RasterPos3xvOES),
    RasterPos4d: FnPtr::new(loadfn("glRasterPos4d"), failing::RasterPos4d),
    RasterPos4dv: FnPtr::new(loadfn("glRasterPos4dv"), failing::RasterPos4dv),
    RasterPos4f: FnPtr::new(loadfn("glRasterPos4f"), failing::RasterPos4f),
    RasterPos4fv: FnPtr::new(loadfn("glRasterPos4fv"), failing::RasterPos4fv),
    RasterPos4i: FnPtr::new(loadfn("glRasterPos4i"), failing::RasterPos4i),
    RasterPos4iv: FnPtr::new(loadfn("glRasterPos4iv"), failing::RasterPos4iv),
    RasterPos4s: FnPtr::new(loadfn("glRasterPos4s"), failing::RasterPos4s),
    RasterPos4sv: FnPtr::new(loadfn("glRasterPos4sv"), failing::RasterPos4sv),
    RasterPos4xOES: FnPtr::new(loadfn("glRasterPos4xOES"), failing::RasterPos4xOES),
    RasterPos4xvOES: FnPtr::new(loadfn("glRasterPos4xvOES"), failing::RasterPos4xvOES),
    ReadBuffer: FnPtr::new(loadfn("glReadBuffer"), failing::ReadBuffer),
    ReadBufferIndexedEXT: FnPtr::new(loadfn("glReadBufferIndexedEXT"), failing::ReadBufferIndexedEXT),
    ReadBufferNV: FnPtr::new(loadfn("glReadBufferNV"), failing::ReadBufferNV),
    ReadInstrumentsSGIX: FnPtr::new(loadfn("glReadInstrumentsSGIX"), failing::ReadInstrumentsSGIX),
    ReadPixels: FnPtr::new(loadfn("glReadPixels"), failing::ReadPixels),
    ReadnPixelsARB: FnPtr::new(loadfn("glReadnPixelsARB"), failing::ReadnPixelsARB),
    ReadnPixelsEXT: FnPtr::new(loadfn("glReadnPixelsEXT"), failing::ReadnPixelsEXT),
    Rectd: FnPtr::new(loadfn("glRectd"), failing::Rectd),
    Rectdv: FnPtr::new(loadfn("glRectdv"), failing::Rectdv),
    Rectf: FnPtr::new(loadfn("glRectf"), failing::Rectf),
    Rectfv: FnPtr::new(loadfn("glRectfv"), failing::Rectfv),
    Recti: FnPtr::new(loadfn("glRecti"), failing::Recti),
    Rectiv: FnPtr::new(loadfn("glRectiv"), failing::Rectiv),
    Rects: FnPtr::new(loadfn("glRects"), failing::Rects),
    Rectsv: FnPtr::new(loadfn("glRectsv"), failing::Rectsv),
    RectxOES: FnPtr::new(loadfn("glRectxOES"), failing::RectxOES),
    RectxvOES: FnPtr::new(loadfn("glRectxvOES"), failing::RectxvOES),
    ReferencePlaneSGIX: FnPtr::new(loadfn("glReferencePlaneSGIX"), failing::ReferencePlaneSGIX),
    ReleaseShaderCompiler: FnPtr::new(loadfn("glReleaseShaderCompiler"), failing::ReleaseShaderCompiler),
    RenderMode: FnPtr::new(loadfn("glRenderMode"), failing::RenderMode),
    RenderbufferStorage: FnPtr::new(loadfn("glRenderbufferStorage"), failing::RenderbufferStorage),
    RenderbufferStorageEXT: FnPtr::new(loadfn("glRenderbufferStorageEXT"), failing::RenderbufferStorageEXT),
    RenderbufferStorageMultisample: FnPtr::new(loadfn("glRenderbufferStorageMultisample"), failing::RenderbufferStorageMultisample),
    RenderbufferStorageMultisampleANGLE: FnPtr::new(loadfn("glRenderbufferStorageMultisampleANGLE"), failing::RenderbufferStorageMultisampleANGLE),
    RenderbufferStorageMultisampleAPPLE: FnPtr::new(loadfn("glRenderbufferStorageMultisampleAPPLE"), failing::RenderbufferStorageMultisampleAPPLE),
    RenderbufferStorageMultisampleCoverageNV: FnPtr::new(loadfn("glRenderbufferStorageMultisampleCoverageNV"), failing::RenderbufferStorageMultisampleCoverageNV),
    RenderbufferStorageMultisampleEXT: FnPtr::new(loadfn("glRenderbufferStorageMultisampleEXT"), failing::RenderbufferStorageMultisampleEXT),
    RenderbufferStorageMultisampleIMG: FnPtr::new(loadfn("glRenderbufferStorageMultisampleIMG"), failing::RenderbufferStorageMultisampleIMG),
    RenderbufferStorageMultisampleNV: FnPtr::new(loadfn("glRenderbufferStorageMultisampleNV"), failing::RenderbufferStorageMultisampleNV),
    RenderbufferStorageOES: FnPtr::new(loadfn("glRenderbufferStorageOES"), failing::RenderbufferStorageOES),
    ReplacementCodePointerSUN: FnPtr::new(loadfn("glReplacementCodePointerSUN"), failing::ReplacementCodePointerSUN),
    ReplacementCodeubSUN: FnPtr::new(loadfn("glReplacementCodeubSUN"), failing::ReplacementCodeubSUN),
    ReplacementCodeubvSUN: FnPtr::new(loadfn("glReplacementCodeubvSUN"), failing::ReplacementCodeubvSUN),
    ReplacementCodeuiColor3fVertex3fSUN: FnPtr::new(loadfn("glReplacementCodeuiColor3fVertex3fSUN"), failing::ReplacementCodeuiColor3fVertex3fSUN),
    ReplacementCodeuiColor3fVertex3fvSUN: FnPtr::new(loadfn("glReplacementCodeuiColor3fVertex3fvSUN"), failing::ReplacementCodeuiColor3fVertex3fvSUN),
    ReplacementCodeuiColor4fNormal3fVertex3fSUN: FnPtr::new(loadfn("glReplacementCodeuiColor4fNormal3fVertex3fSUN"), failing::ReplacementCodeuiColor4fNormal3fVertex3fSUN),
    ReplacementCodeuiColor4fNormal3fVertex3fvSUN: FnPtr::new(loadfn("glReplacementCodeuiColor4fNormal3fVertex3fvSUN"), failing::ReplacementCodeuiColor4fNormal3fVertex3fvSUN),
    ReplacementCodeuiColor4ubVertex3fSUN: FnPtr::new(loadfn("glReplacementCodeuiColor4ubVertex3fSUN"), failing::ReplacementCodeuiColor4ubVertex3fSUN),
    ReplacementCodeuiColor4ubVertex3fvSUN: FnPtr::new(loadfn("glReplacementCodeuiColor4ubVertex3fvSUN"), failing::ReplacementCodeuiColor4ubVertex3fvSUN),
    ReplacementCodeuiNormal3fVertex3fSUN: FnPtr::new(loadfn("glReplacementCodeuiNormal3fVertex3fSUN"), failing::ReplacementCodeuiNormal3fVertex3fSUN),
    ReplacementCodeuiNormal3fVertex3fvSUN: FnPtr::new(loadfn("glReplacementCodeuiNormal3fVertex3fvSUN"), failing::ReplacementCodeuiNormal3fVertex3fvSUN),
    ReplacementCodeuiSUN: FnPtr::new(loadfn("glReplacementCodeuiSUN"), failing::ReplacementCodeuiSUN),
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: FnPtr::new(loadfn("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN"), failing::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN),
    ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: FnPtr::new(loadfn("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN"), failing::ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN),
    ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: FnPtr::new(loadfn("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN"), failing::ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN),
    ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: FnPtr::new(loadfn("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN"), failing::ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN),
    ReplacementCodeuiTexCoord2fVertex3fSUN: FnPtr::new(loadfn("glReplacementCodeuiTexCoord2fVertex3fSUN"), failing::ReplacementCodeuiTexCoord2fVertex3fSUN),
    ReplacementCodeuiTexCoord2fVertex3fvSUN: FnPtr::new(loadfn("glReplacementCodeuiTexCoord2fVertex3fvSUN"), failing::ReplacementCodeuiTexCoord2fVertex3fvSUN),
    ReplacementCodeuiVertex3fSUN: FnPtr::new(loadfn("glReplacementCodeuiVertex3fSUN"), failing::ReplacementCodeuiVertex3fSUN),
    ReplacementCodeuiVertex3fvSUN: FnPtr::new(loadfn("glReplacementCodeuiVertex3fvSUN"), failing::ReplacementCodeuiVertex3fvSUN),
    ReplacementCodeuivSUN: FnPtr::new(loadfn("glReplacementCodeuivSUN"), failing::ReplacementCodeuivSUN),
    ReplacementCodeusSUN: FnPtr::new(loadfn("glReplacementCodeusSUN"), failing::ReplacementCodeusSUN),
    ReplacementCodeusvSUN: FnPtr::new(loadfn("glReplacementCodeusvSUN"), failing::ReplacementCodeusvSUN),
    RequestResidentProgramsNV: FnPtr::new(loadfn("glRequestResidentProgramsNV"), failing::RequestResidentProgramsNV),
    ResetHistogram: FnPtr::new(loadfn("glResetHistogram"), failing::ResetHistogram),
    ResetHistogramEXT: FnPtr::new(loadfn("glResetHistogramEXT"), failing::ResetHistogramEXT),
    ResetMinmax: FnPtr::new(loadfn("glResetMinmax"), failing::ResetMinmax),
    ResetMinmaxEXT: FnPtr::new(loadfn("glResetMinmaxEXT"), failing::ResetMinmaxEXT),
    ResizeBuffersMESA: FnPtr::new(loadfn("glResizeBuffersMESA"), failing::ResizeBuffersMESA),
    ResolveMultisampleFramebufferAPPLE: FnPtr::new(loadfn("glResolveMultisampleFramebufferAPPLE"), failing::ResolveMultisampleFramebufferAPPLE),
    ResumeTransformFeedback: FnPtr::new(loadfn("glResumeTransformFeedback"), failing::ResumeTransformFeedback),
    ResumeTransformFeedbackNV: FnPtr::new(loadfn("glResumeTransformFeedbackNV"), failing::ResumeTransformFeedbackNV),
    Rotated: FnPtr::new(loadfn("glRotated"), failing::Rotated),
    Rotatef: FnPtr::new(loadfn("glRotatef"), failing::Rotatef),
    Rotatex: FnPtr::new(loadfn("glRotatex"), failing::Rotatex),
    RotatexOES: FnPtr::new(loadfn("glRotatexOES"), failing::RotatexOES),
    SampleCoverage: FnPtr::new(loadfn("glSampleCoverage"), failing::SampleCoverage),
    SampleCoverageARB: FnPtr::new(loadfn("glSampleCoverageARB"), failing::SampleCoverageARB),
    SampleCoverageOES: FnPtr::new(loadfn("glSampleCoverageOES"), failing::SampleCoverageOES),
    SampleCoveragex: FnPtr::new(loadfn("glSampleCoveragex"), failing::SampleCoveragex),
    SampleCoveragexOES: FnPtr::new(loadfn("glSampleCoveragexOES"), failing::SampleCoveragexOES),
    SampleMapATI: FnPtr::new(loadfn("glSampleMapATI"), failing::SampleMapATI),
    SampleMaskEXT: FnPtr::new(loadfn("glSampleMaskEXT"), failing::SampleMaskEXT),
    SampleMaskIndexedNV: FnPtr::new(loadfn("glSampleMaskIndexedNV"), failing::SampleMaskIndexedNV),
    SampleMaskSGIS: FnPtr::new(loadfn("glSampleMaskSGIS"), failing::SampleMaskSGIS),
    SampleMaski: FnPtr::new(loadfn("glSampleMaski"), failing::SampleMaski),
    SamplePatternEXT: FnPtr::new(loadfn("glSamplePatternEXT"), failing::SamplePatternEXT),
    SamplePatternSGIS: FnPtr::new(loadfn("glSamplePatternSGIS"), failing::SamplePatternSGIS),
    SamplerParameterIiv: FnPtr::new(loadfn("glSamplerParameterIiv"), failing::SamplerParameterIiv),
    SamplerParameterIuiv: FnPtr::new(loadfn("glSamplerParameterIuiv"), failing::SamplerParameterIuiv),
    SamplerParameterf: FnPtr::new(loadfn("glSamplerParameterf"), failing::SamplerParameterf),
    SamplerParameterfv: FnPtr::new(loadfn("glSamplerParameterfv"), failing::SamplerParameterfv),
    SamplerParameteri: FnPtr::new(loadfn("glSamplerParameteri"), failing::SamplerParameteri),
    SamplerParameteriv: FnPtr::new(loadfn("glSamplerParameteriv"), failing::SamplerParameteriv),
    Scaled: FnPtr::new(loadfn("glScaled"), failing::Scaled),
    Scalef: FnPtr::new(loadfn("glScalef"), failing::Scalef),
    Scalex: FnPtr::new(loadfn("glScalex"), failing::Scalex),
    ScalexOES: FnPtr::new(loadfn("glScalexOES"), failing::ScalexOES),
    Scissor: FnPtr::new(loadfn("glScissor"), failing::Scissor),
    ScissorArrayv: FnPtr::new(loadfn("glScissorArrayv"), failing::ScissorArrayv),
    ScissorIndexed: FnPtr::new(loadfn("glScissorIndexed"), failing::ScissorIndexed),
    ScissorIndexedv: FnPtr::new(loadfn("glScissorIndexedv"), failing::ScissorIndexedv),
    SecondaryColor3b: FnPtr::new(loadfn("glSecondaryColor3b"), failing::SecondaryColor3b),
    SecondaryColor3bEXT: FnPtr::new(loadfn("glSecondaryColor3bEXT"), failing::SecondaryColor3bEXT),
    SecondaryColor3bv: FnPtr::new(loadfn("glSecondaryColor3bv"), failing::SecondaryColor3bv),
    SecondaryColor3bvEXT: FnPtr::new(loadfn("glSecondaryColor3bvEXT"), failing::SecondaryColor3bvEXT),
    SecondaryColor3d: FnPtr::new(loadfn("glSecondaryColor3d"), failing::SecondaryColor3d),
    SecondaryColor3dEXT: FnPtr::new(loadfn("glSecondaryColor3dEXT"), failing::SecondaryColor3dEXT),
    SecondaryColor3dv: FnPtr::new(loadfn("glSecondaryColor3dv"), failing::SecondaryColor3dv),
    SecondaryColor3dvEXT: FnPtr::new(loadfn("glSecondaryColor3dvEXT"), failing::SecondaryColor3dvEXT),
    SecondaryColor3f: FnPtr::new(loadfn("glSecondaryColor3f"), failing::SecondaryColor3f),
    SecondaryColor3fEXT: FnPtr::new(loadfn("glSecondaryColor3fEXT"), failing::SecondaryColor3fEXT),
    SecondaryColor3fv: FnPtr::new(loadfn("glSecondaryColor3fv"), failing::SecondaryColor3fv),
    SecondaryColor3fvEXT: FnPtr::new(loadfn("glSecondaryColor3fvEXT"), failing::SecondaryColor3fvEXT),
    SecondaryColor3hNV: FnPtr::new(loadfn("glSecondaryColor3hNV"), failing::SecondaryColor3hNV),
    SecondaryColor3hvNV: FnPtr::new(loadfn("glSecondaryColor3hvNV"), failing::SecondaryColor3hvNV),
    SecondaryColor3i: FnPtr::new(loadfn("glSecondaryColor3i"), failing::SecondaryColor3i),
    SecondaryColor3iEXT: FnPtr::new(loadfn("glSecondaryColor3iEXT"), failing::SecondaryColor3iEXT),
    SecondaryColor3iv: FnPtr::new(loadfn("glSecondaryColor3iv"), failing::SecondaryColor3iv),
    SecondaryColor3ivEXT: FnPtr::new(loadfn("glSecondaryColor3ivEXT"), failing::SecondaryColor3ivEXT),
    SecondaryColor3s: FnPtr::new(loadfn("glSecondaryColor3s"), failing::SecondaryColor3s),
    SecondaryColor3sEXT: FnPtr::new(loadfn("glSecondaryColor3sEXT"), failing::SecondaryColor3sEXT),
    SecondaryColor3sv: FnPtr::new(loadfn("glSecondaryColor3sv"), failing::SecondaryColor3sv),
    SecondaryColor3svEXT: FnPtr::new(loadfn("glSecondaryColor3svEXT"), failing::SecondaryColor3svEXT),
    SecondaryColor3ub: FnPtr::new(loadfn("glSecondaryColor3ub"), failing::SecondaryColor3ub),
    SecondaryColor3ubEXT: FnPtr::new(loadfn("glSecondaryColor3ubEXT"), failing::SecondaryColor3ubEXT),
    SecondaryColor3ubv: FnPtr::new(loadfn("glSecondaryColor3ubv"), failing::SecondaryColor3ubv),
    SecondaryColor3ubvEXT: FnPtr::new(loadfn("glSecondaryColor3ubvEXT"), failing::SecondaryColor3ubvEXT),
    SecondaryColor3ui: FnPtr::new(loadfn("glSecondaryColor3ui"), failing::SecondaryColor3ui),
    SecondaryColor3uiEXT: FnPtr::new(loadfn("glSecondaryColor3uiEXT"), failing::SecondaryColor3uiEXT),
    SecondaryColor3uiv: FnPtr::new(loadfn("glSecondaryColor3uiv"), failing::SecondaryColor3uiv),
    SecondaryColor3uivEXT: FnPtr::new(loadfn("glSecondaryColor3uivEXT"), failing::SecondaryColor3uivEXT),
    SecondaryColor3us: FnPtr::new(loadfn("glSecondaryColor3us"), failing::SecondaryColor3us),
    SecondaryColor3usEXT: FnPtr::new(loadfn("glSecondaryColor3usEXT"), failing::SecondaryColor3usEXT),
    SecondaryColor3usv: FnPtr::new(loadfn("glSecondaryColor3usv"), failing::SecondaryColor3usv),
    SecondaryColor3usvEXT: FnPtr::new(loadfn("glSecondaryColor3usvEXT"), failing::SecondaryColor3usvEXT),
    SecondaryColorFormatNV: FnPtr::new(loadfn("glSecondaryColorFormatNV"), failing::SecondaryColorFormatNV),
    SecondaryColorP3ui: FnPtr::new(loadfn("glSecondaryColorP3ui"), failing::SecondaryColorP3ui),
    SecondaryColorP3uiv: FnPtr::new(loadfn("glSecondaryColorP3uiv"), failing::SecondaryColorP3uiv),
    SecondaryColorPointer: FnPtr::new(loadfn("glSecondaryColorPointer"), failing::SecondaryColorPointer),
    SecondaryColorPointerEXT: FnPtr::new(loadfn("glSecondaryColorPointerEXT"), failing::SecondaryColorPointerEXT),
    SecondaryColorPointerListIBM: FnPtr::new(loadfn("glSecondaryColorPointerListIBM"), failing::SecondaryColorPointerListIBM),
    SelectBuffer: FnPtr::new(loadfn("glSelectBuffer"), failing::SelectBuffer),
    SelectPerfMonitorCountersAMD: FnPtr::new(loadfn("glSelectPerfMonitorCountersAMD"), failing::SelectPerfMonitorCountersAMD),
    SeparableFilter2D: FnPtr::new(loadfn("glSeparableFilter2D"), failing::SeparableFilter2D),
    SeparableFilter2DEXT: FnPtr::new(loadfn("glSeparableFilter2DEXT"), failing::SeparableFilter2DEXT),
    SetFenceAPPLE: FnPtr::new(loadfn("glSetFenceAPPLE"), failing::SetFenceAPPLE),
    SetFenceNV: FnPtr::new(loadfn("glSetFenceNV"), failing::SetFenceNV),
    SetFragmentShaderConstantATI: FnPtr::new(loadfn("glSetFragmentShaderConstantATI"), failing::SetFragmentShaderConstantATI),
    SetInvariantEXT: FnPtr::new(loadfn("glSetInvariantEXT"), failing::SetInvariantEXT),
    SetLocalConstantEXT: FnPtr::new(loadfn("glSetLocalConstantEXT"), failing::SetLocalConstantEXT),
    SetMultisamplefvAMD: FnPtr::new(loadfn("glSetMultisamplefvAMD"), failing::SetMultisamplefvAMD),
    ShadeModel: FnPtr::new(loadfn("glShadeModel"), failing::ShadeModel),
    ShaderBinary: FnPtr::new(loadfn("glShaderBinary"), failing::ShaderBinary),
    ShaderOp1EXT: FnPtr::new(loadfn("glShaderOp1EXT"), failing::ShaderOp1EXT),
    ShaderOp2EXT: FnPtr::new(loadfn("glShaderOp2EXT"), failing::ShaderOp2EXT),
    ShaderOp3EXT: FnPtr::new(loadfn("glShaderOp3EXT"), failing::ShaderOp3EXT),
    ShaderSource: FnPtr::new(loadfn("glShaderSource"), failing::ShaderSource),
    ShaderSourceARB: FnPtr::new(loadfn("glShaderSourceARB"), failing::ShaderSourceARB),
    ShaderStorageBlockBinding: FnPtr::new(loadfn("glShaderStorageBlockBinding"), failing::ShaderStorageBlockBinding),
    SharpenTexFuncSGIS: FnPtr::new(loadfn("glSharpenTexFuncSGIS"), failing::SharpenTexFuncSGIS),
    SpriteParameterfSGIX: FnPtr::new(loadfn("glSpriteParameterfSGIX"), failing::SpriteParameterfSGIX),
    SpriteParameterfvSGIX: FnPtr::new(loadfn("glSpriteParameterfvSGIX"), failing::SpriteParameterfvSGIX),
    SpriteParameteriSGIX: FnPtr::new(loadfn("glSpriteParameteriSGIX"), failing::SpriteParameteriSGIX),
    SpriteParameterivSGIX: FnPtr::new(loadfn("glSpriteParameterivSGIX"), failing::SpriteParameterivSGIX),
    StartInstrumentsSGIX: FnPtr::new(loadfn("glStartInstrumentsSGIX"), failing::StartInstrumentsSGIX),
    StartTilingQCOM: FnPtr::new(loadfn("glStartTilingQCOM"), failing::StartTilingQCOM),
    StencilClearTagEXT: FnPtr::new(loadfn("glStencilClearTagEXT"), failing::StencilClearTagEXT),
    StencilFillPathInstancedNV: FnPtr::new(loadfn("glStencilFillPathInstancedNV"), failing::StencilFillPathInstancedNV),
    StencilFillPathNV: FnPtr::new(loadfn("glStencilFillPathNV"), failing::StencilFillPathNV),
    StencilFunc: FnPtr::new(loadfn("glStencilFunc"), failing::StencilFunc),
    StencilFuncSeparate: FnPtr::new(loadfn("glStencilFuncSeparate"), failing::StencilFuncSeparate),
    StencilFuncSeparateATI: FnPtr::new(loadfn("glStencilFuncSeparateATI"), failing::StencilFuncSeparateATI),
    StencilMask: FnPtr::new(loadfn("glStencilMask"), failing::StencilMask),
    StencilMaskSeparate: FnPtr::new(loadfn("glStencilMaskSeparate"), failing::StencilMaskSeparate),
    StencilOp: FnPtr::new(loadfn("glStencilOp"), failing::StencilOp),
    StencilOpSeparate: FnPtr::new(loadfn("glStencilOpSeparate"), failing::StencilOpSeparate),
    StencilOpSeparateATI: FnPtr::new(loadfn("glStencilOpSeparateATI"), failing::StencilOpSeparateATI),
    StencilOpValueAMD: FnPtr::new(loadfn("glStencilOpValueAMD"), failing::StencilOpValueAMD),
    StencilStrokePathInstancedNV: FnPtr::new(loadfn("glStencilStrokePathInstancedNV"), failing::StencilStrokePathInstancedNV),
    StencilStrokePathNV: FnPtr::new(loadfn("glStencilStrokePathNV"), failing::StencilStrokePathNV),
    StopInstrumentsSGIX: FnPtr::new(loadfn("glStopInstrumentsSGIX"), failing::StopInstrumentsSGIX),
    StringMarkerGREMEDY: FnPtr::new(loadfn("glStringMarkerGREMEDY"), failing::StringMarkerGREMEDY),
    SwizzleEXT: FnPtr::new(loadfn("glSwizzleEXT"), failing::SwizzleEXT),
    SyncTextureINTEL: FnPtr::new(loadfn("glSyncTextureINTEL"), failing::SyncTextureINTEL),
    TagSampleBufferSGIX: FnPtr::new(loadfn("glTagSampleBufferSGIX"), failing::TagSampleBufferSGIX),
    Tangent3bEXT: FnPtr::new(loadfn("glTangent3bEXT"), failing::Tangent3bEXT),
    Tangent3bvEXT: FnPtr::new(loadfn("glTangent3bvEXT"), failing::Tangent3bvEXT),
    Tangent3dEXT: FnPtr::new(loadfn("glTangent3dEXT"), failing::Tangent3dEXT),
    Tangent3dvEXT: FnPtr::new(loadfn("glTangent3dvEXT"), failing::Tangent3dvEXT),
    Tangent3fEXT: FnPtr::new(loadfn("glTangent3fEXT"), failing::Tangent3fEXT),
    Tangent3fvEXT: FnPtr::new(loadfn("glTangent3fvEXT"), failing::Tangent3fvEXT),
    Tangent3iEXT: FnPtr::new(loadfn("glTangent3iEXT"), failing::Tangent3iEXT),
    Tangent3ivEXT: FnPtr::new(loadfn("glTangent3ivEXT"), failing::Tangent3ivEXT),
    Tangent3sEXT: FnPtr::new(loadfn("glTangent3sEXT"), failing::Tangent3sEXT),
    Tangent3svEXT: FnPtr::new(loadfn("glTangent3svEXT"), failing::Tangent3svEXT),
    TangentPointerEXT: FnPtr::new(loadfn("glTangentPointerEXT"), failing::TangentPointerEXT),
    TbufferMask3DFX: FnPtr::new(loadfn("glTbufferMask3DFX"), failing::TbufferMask3DFX),
    TessellationFactorAMD: FnPtr::new(loadfn("glTessellationFactorAMD"), failing::TessellationFactorAMD),
    TessellationModeAMD: FnPtr::new(loadfn("glTessellationModeAMD"), failing::TessellationModeAMD),
    TestFenceAPPLE: FnPtr::new(loadfn("glTestFenceAPPLE"), failing::TestFenceAPPLE),
    TestFenceNV: FnPtr::new(loadfn("glTestFenceNV"), failing::TestFenceNV),
    TestObjectAPPLE: FnPtr::new(loadfn("glTestObjectAPPLE"), failing::TestObjectAPPLE),
    TexBuffer: FnPtr::new(loadfn("glTexBuffer"), failing::TexBuffer),
    TexBufferARB: FnPtr::new(loadfn("glTexBufferARB"), failing::TexBufferARB),
    TexBufferEXT: FnPtr::new(loadfn("glTexBufferEXT"), failing::TexBufferEXT),
    TexBufferRange: FnPtr::new(loadfn("glTexBufferRange"), failing::TexBufferRange),
    TexBumpParameterfvATI: FnPtr::new(loadfn("glTexBumpParameterfvATI"), failing::TexBumpParameterfvATI),
    TexBumpParameterivATI: FnPtr::new(loadfn("glTexBumpParameterivATI"), failing::TexBumpParameterivATI),
    TexCoord1bOES: FnPtr::new(loadfn("glTexCoord1bOES"), failing::TexCoord1bOES),
    TexCoord1bvOES: FnPtr::new(loadfn("glTexCoord1bvOES"), failing::TexCoord1bvOES),
    TexCoord1d: FnPtr::new(loadfn("glTexCoord1d"), failing::TexCoord1d),
    TexCoord1dv: FnPtr::new(loadfn("glTexCoord1dv"), failing::TexCoord1dv),
    TexCoord1f: FnPtr::new(loadfn("glTexCoord1f"), failing::TexCoord1f),
    TexCoord1fv: FnPtr::new(loadfn("glTexCoord1fv"), failing::TexCoord1fv),
    TexCoord1hNV: FnPtr::new(loadfn("glTexCoord1hNV"), failing::TexCoord1hNV),
    TexCoord1hvNV: FnPtr::new(loadfn("glTexCoord1hvNV"), failing::TexCoord1hvNV),
    TexCoord1i: FnPtr::new(loadfn("glTexCoord1i"), failing::TexCoord1i),
    TexCoord1iv: FnPtr::new(loadfn("glTexCoord1iv"), failing::TexCoord1iv),
    TexCoord1s: FnPtr::new(loadfn("glTexCoord1s"), failing::TexCoord1s),
    TexCoord1sv: FnPtr::new(loadfn("glTexCoord1sv"), failing::TexCoord1sv),
    TexCoord1xOES: FnPtr::new(loadfn("glTexCoord1xOES"), failing::TexCoord1xOES),
    TexCoord1xvOES: FnPtr::new(loadfn("glTexCoord1xvOES"), failing::TexCoord1xvOES),
    TexCoord2bOES: FnPtr::new(loadfn("glTexCoord2bOES"), failing::TexCoord2bOES),
    TexCoord2bvOES: FnPtr::new(loadfn("glTexCoord2bvOES"), failing::TexCoord2bvOES),
    TexCoord2d: FnPtr::new(loadfn("glTexCoord2d"), failing::TexCoord2d),
    TexCoord2dv: FnPtr::new(loadfn("glTexCoord2dv"), failing::TexCoord2dv),
    TexCoord2f: FnPtr::new(loadfn("glTexCoord2f"), failing::TexCoord2f),
    TexCoord2fColor3fVertex3fSUN: FnPtr::new(loadfn("glTexCoord2fColor3fVertex3fSUN"), failing::TexCoord2fColor3fVertex3fSUN),
    TexCoord2fColor3fVertex3fvSUN: FnPtr::new(loadfn("glTexCoord2fColor3fVertex3fvSUN"), failing::TexCoord2fColor3fVertex3fvSUN),
    TexCoord2fColor4fNormal3fVertex3fSUN: FnPtr::new(loadfn("glTexCoord2fColor4fNormal3fVertex3fSUN"), failing::TexCoord2fColor4fNormal3fVertex3fSUN),
    TexCoord2fColor4fNormal3fVertex3fvSUN: FnPtr::new(loadfn("glTexCoord2fColor4fNormal3fVertex3fvSUN"), failing::TexCoord2fColor4fNormal3fVertex3fvSUN),
    TexCoord2fColor4ubVertex3fSUN: FnPtr::new(loadfn("glTexCoord2fColor4ubVertex3fSUN"), failing::TexCoord2fColor4ubVertex3fSUN),
    TexCoord2fColor4ubVertex3fvSUN: FnPtr::new(loadfn("glTexCoord2fColor4ubVertex3fvSUN"), failing::TexCoord2fColor4ubVertex3fvSUN),
    TexCoord2fNormal3fVertex3fSUN: FnPtr::new(loadfn("glTexCoord2fNormal3fVertex3fSUN"), failing::TexCoord2fNormal3fVertex3fSUN),
    TexCoord2fNormal3fVertex3fvSUN: FnPtr::new(loadfn("glTexCoord2fNormal3fVertex3fvSUN"), failing::TexCoord2fNormal3fVertex3fvSUN),
    TexCoord2fVertex3fSUN: FnPtr::new(loadfn("glTexCoord2fVertex3fSUN"), failing::TexCoord2fVertex3fSUN),
    TexCoord2fVertex3fvSUN: FnPtr::new(loadfn("glTexCoord2fVertex3fvSUN"), failing::TexCoord2fVertex3fvSUN),
    TexCoord2fv: FnPtr::new(loadfn("glTexCoord2fv"), failing::TexCoord2fv),
    TexCoord2hNV: FnPtr::new(loadfn("glTexCoord2hNV"), failing::TexCoord2hNV),
    TexCoord2hvNV: FnPtr::new(loadfn("glTexCoord2hvNV"), failing::TexCoord2hvNV),
    TexCoord2i: FnPtr::new(loadfn("glTexCoord2i"), failing::TexCoord2i),
    TexCoord2iv: FnPtr::new(loadfn("glTexCoord2iv"), failing::TexCoord2iv),
    TexCoord2s: FnPtr::new(loadfn("glTexCoord2s"), failing::TexCoord2s),
    TexCoord2sv: FnPtr::new(loadfn("glTexCoord2sv"), failing::TexCoord2sv),
    TexCoord2xOES: FnPtr::new(loadfn("glTexCoord2xOES"), failing::TexCoord2xOES),
    TexCoord2xvOES: FnPtr::new(loadfn("glTexCoord2xvOES"), failing::TexCoord2xvOES),
    TexCoord3bOES: FnPtr::new(loadfn("glTexCoord3bOES"), failing::TexCoord3bOES),
    TexCoord3bvOES: FnPtr::new(loadfn("glTexCoord3bvOES"), failing::TexCoord3bvOES),
    TexCoord3d: FnPtr::new(loadfn("glTexCoord3d"), failing::TexCoord3d),
    TexCoord3dv: FnPtr::new(loadfn("glTexCoord3dv"), failing::TexCoord3dv),
    TexCoord3f: FnPtr::new(loadfn("glTexCoord3f"), failing::TexCoord3f),
    TexCoord3fv: FnPtr::new(loadfn("glTexCoord3fv"), failing::TexCoord3fv),
    TexCoord3hNV: FnPtr::new(loadfn("glTexCoord3hNV"), failing::TexCoord3hNV),
    TexCoord3hvNV: FnPtr::new(loadfn("glTexCoord3hvNV"), failing::TexCoord3hvNV),
    TexCoord3i: FnPtr::new(loadfn("glTexCoord3i"), failing::TexCoord3i),
    TexCoord3iv: FnPtr::new(loadfn("glTexCoord3iv"), failing::TexCoord3iv),
    TexCoord3s: FnPtr::new(loadfn("glTexCoord3s"), failing::TexCoord3s),
    TexCoord3sv: FnPtr::new(loadfn("glTexCoord3sv"), failing::TexCoord3sv),
    TexCoord3xOES: FnPtr::new(loadfn("glTexCoord3xOES"), failing::TexCoord3xOES),
    TexCoord3xvOES: FnPtr::new(loadfn("glTexCoord3xvOES"), failing::TexCoord3xvOES),
    TexCoord4bOES: FnPtr::new(loadfn("glTexCoord4bOES"), failing::TexCoord4bOES),
    TexCoord4bvOES: FnPtr::new(loadfn("glTexCoord4bvOES"), failing::TexCoord4bvOES),
    TexCoord4d: FnPtr::new(loadfn("glTexCoord4d"), failing::TexCoord4d),
    TexCoord4dv: FnPtr::new(loadfn("glTexCoord4dv"), failing::TexCoord4dv),
    TexCoord4f: FnPtr::new(loadfn("glTexCoord4f"), failing::TexCoord4f),
    TexCoord4fColor4fNormal3fVertex4fSUN: FnPtr::new(loadfn("glTexCoord4fColor4fNormal3fVertex4fSUN"), failing::TexCoord4fColor4fNormal3fVertex4fSUN),
    TexCoord4fColor4fNormal3fVertex4fvSUN: FnPtr::new(loadfn("glTexCoord4fColor4fNormal3fVertex4fvSUN"), failing::TexCoord4fColor4fNormal3fVertex4fvSUN),
    TexCoord4fVertex4fSUN: FnPtr::new(loadfn("glTexCoord4fVertex4fSUN"), failing::TexCoord4fVertex4fSUN),
    TexCoord4fVertex4fvSUN: FnPtr::new(loadfn("glTexCoord4fVertex4fvSUN"), failing::TexCoord4fVertex4fvSUN),
    TexCoord4fv: FnPtr::new(loadfn("glTexCoord4fv"), failing::TexCoord4fv),
    TexCoord4hNV: FnPtr::new(loadfn("glTexCoord4hNV"), failing::TexCoord4hNV),
    TexCoord4hvNV: FnPtr::new(loadfn("glTexCoord4hvNV"), failing::TexCoord4hvNV),
    TexCoord4i: FnPtr::new(loadfn("glTexCoord4i"), failing::TexCoord4i),
    TexCoord4iv: FnPtr::new(loadfn("glTexCoord4iv"), failing::TexCoord4iv),
    TexCoord4s: FnPtr::new(loadfn("glTexCoord4s"), failing::TexCoord4s),
    TexCoord4sv: FnPtr::new(loadfn("glTexCoord4sv"), failing::TexCoord4sv),
    TexCoord4xOES: FnPtr::new(loadfn("glTexCoord4xOES"), failing::TexCoord4xOES),
    TexCoord4xvOES: FnPtr::new(loadfn("glTexCoord4xvOES"), failing::TexCoord4xvOES),
    TexCoordFormatNV: FnPtr::new(loadfn("glTexCoordFormatNV"), failing::TexCoordFormatNV),
    TexCoordP1ui: FnPtr::new(loadfn("glTexCoordP1ui"), failing::TexCoordP1ui),
    TexCoordP1uiv: FnPtr::new(loadfn("glTexCoordP1uiv"), failing::TexCoordP1uiv),
    TexCoordP2ui: FnPtr::new(loadfn("glTexCoordP2ui"), failing::TexCoordP2ui),
    TexCoordP2uiv: FnPtr::new(loadfn("glTexCoordP2uiv"), failing::TexCoordP2uiv),
    TexCoordP3ui: FnPtr::new(loadfn("glTexCoordP3ui"), failing::TexCoordP3ui),
    TexCoordP3uiv: FnPtr::new(loadfn("glTexCoordP3uiv"), failing::TexCoordP3uiv),
    TexCoordP4ui: FnPtr::new(loadfn("glTexCoordP4ui"), failing::TexCoordP4ui),
    TexCoordP4uiv: FnPtr::new(loadfn("glTexCoordP4uiv"), failing::TexCoordP4uiv),
    TexCoordPointer: FnPtr::new(loadfn("glTexCoordPointer"), failing::TexCoordPointer),
    TexCoordPointerEXT: FnPtr::new(loadfn("glTexCoordPointerEXT"), failing::TexCoordPointerEXT),
    TexCoordPointerListIBM: FnPtr::new(loadfn("glTexCoordPointerListIBM"), failing::TexCoordPointerListIBM),
    TexCoordPointervINTEL: FnPtr::new(loadfn("glTexCoordPointervINTEL"), failing::TexCoordPointervINTEL),
    TexEnvf: FnPtr::new(loadfn("glTexEnvf"), failing::TexEnvf),
    TexEnvfv: FnPtr::new(loadfn("glTexEnvfv"), failing::TexEnvfv),
    TexEnvi: FnPtr::new(loadfn("glTexEnvi"), failing::TexEnvi),
    TexEnviv: FnPtr::new(loadfn("glTexEnviv"), failing::TexEnviv),
    TexEnvx: FnPtr::new(loadfn("glTexEnvx"), failing::TexEnvx),
    TexEnvxOES: FnPtr::new(loadfn("glTexEnvxOES"), failing::TexEnvxOES),
    TexEnvxv: FnPtr::new(loadfn("glTexEnvxv"), failing::TexEnvxv),
    TexEnvxvOES: FnPtr::new(loadfn("glTexEnvxvOES"), failing::TexEnvxvOES),
    TexFilterFuncSGIS: FnPtr::new(loadfn("glTexFilterFuncSGIS"), failing::TexFilterFuncSGIS),
    TexGend: FnPtr::new(loadfn("glTexGend"), failing::TexGend),
    TexGendv: FnPtr::new(loadfn("glTexGendv"), failing::TexGendv),
    TexGenf: FnPtr::new(loadfn("glTexGenf"), failing::TexGenf),
    TexGenfOES: FnPtr::new(loadfn("glTexGenfOES"), failing::TexGenfOES),
    TexGenfv: FnPtr::new(loadfn("glTexGenfv"), failing::TexGenfv),
    TexGenfvOES: FnPtr::new(loadfn("glTexGenfvOES"), failing::TexGenfvOES),
    TexGeni: FnPtr::new(loadfn("glTexGeni"), failing::TexGeni),
    TexGeniOES: FnPtr::new(loadfn("glTexGeniOES"), failing::TexGeniOES),
    TexGeniv: FnPtr::new(loadfn("glTexGeniv"), failing::TexGeniv),
    TexGenivOES: FnPtr::new(loadfn("glTexGenivOES"), failing::TexGenivOES),
    TexGenxOES: FnPtr::new(loadfn("glTexGenxOES"), failing::TexGenxOES),
    TexGenxvOES: FnPtr::new(loadfn("glTexGenxvOES"), failing::TexGenxvOES),
    TexImage1D: FnPtr::new(loadfn("glTexImage1D"), failing::TexImage1D),
    TexImage2D: FnPtr::new(loadfn("glTexImage2D"), failing::TexImage2D),
    TexImage2DMultisample: FnPtr::new(loadfn("glTexImage2DMultisample"), failing::TexImage2DMultisample),
    TexImage2DMultisampleCoverageNV: FnPtr::new(loadfn("glTexImage2DMultisampleCoverageNV"), failing::TexImage2DMultisampleCoverageNV),
    TexImage3D: FnPtr::new(loadfn("glTexImage3D"), failing::TexImage3D),
    TexImage3DEXT: FnPtr::new(loadfn("glTexImage3DEXT"), failing::TexImage3DEXT),
    TexImage3DMultisample: FnPtr::new(loadfn("glTexImage3DMultisample"), failing::TexImage3DMultisample),
    TexImage3DMultisampleCoverageNV: FnPtr::new(loadfn("glTexImage3DMultisampleCoverageNV"), failing::TexImage3DMultisampleCoverageNV),
    TexImage3DOES: FnPtr::new(loadfn("glTexImage3DOES"), failing::TexImage3DOES),
    TexImage4DSGIS: FnPtr::new(loadfn("glTexImage4DSGIS"), failing::TexImage4DSGIS),
    TexPageCommitmentARB: FnPtr::new(loadfn("glTexPageCommitmentARB"), failing::TexPageCommitmentARB),
    TexParameterIiv: FnPtr::new(loadfn("glTexParameterIiv"), failing::TexParameterIiv),
    TexParameterIivEXT: FnPtr::new(loadfn("glTexParameterIivEXT"), failing::TexParameterIivEXT),
    TexParameterIuiv: FnPtr::new(loadfn("glTexParameterIuiv"), failing::TexParameterIuiv),
    TexParameterIuivEXT: FnPtr::new(loadfn("glTexParameterIuivEXT"), failing::TexParameterIuivEXT),
    TexParameterf: FnPtr::new(loadfn("glTexParameterf"), failing::TexParameterf),
    TexParameterfv: FnPtr::new(loadfn("glTexParameterfv"), failing::TexParameterfv),
    TexParameteri: FnPtr::new(loadfn("glTexParameteri"), failing::TexParameteri),
    TexParameteriv: FnPtr::new(loadfn("glTexParameteriv"), failing::TexParameteriv),
    TexParameterx: FnPtr::new(loadfn("glTexParameterx"), failing::TexParameterx),
    TexParameterxOES: FnPtr::new(loadfn("glTexParameterxOES"), failing::TexParameterxOES),
    TexParameterxv: FnPtr::new(loadfn("glTexParameterxv"), failing::TexParameterxv),
    TexParameterxvOES: FnPtr::new(loadfn("glTexParameterxvOES"), failing::TexParameterxvOES),
    TexRenderbufferNV: FnPtr::new(loadfn("glTexRenderbufferNV"), failing::TexRenderbufferNV),
    TexStorage1D: FnPtr::new(loadfn("glTexStorage1D"), failing::TexStorage1D),
    TexStorage1DEXT: FnPtr::new(loadfn("glTexStorage1DEXT"), failing::TexStorage1DEXT),
    TexStorage2D: FnPtr::new(loadfn("glTexStorage2D"), failing::TexStorage2D),
    TexStorage2DEXT: FnPtr::new(loadfn("glTexStorage2DEXT"), failing::TexStorage2DEXT),
    TexStorage2DMultisample: FnPtr::new(loadfn("glTexStorage2DMultisample"), failing::TexStorage2DMultisample),
    TexStorage3D: FnPtr::new(loadfn("glTexStorage3D"), failing::TexStorage3D),
    TexStorage3DEXT: FnPtr::new(loadfn("glTexStorage3DEXT"), failing::TexStorage3DEXT),
    TexStorage3DMultisample: FnPtr::new(loadfn("glTexStorage3DMultisample"), failing::TexStorage3DMultisample),
    TexStorageSparseAMD: FnPtr::new(loadfn("glTexStorageSparseAMD"), failing::TexStorageSparseAMD),
    TexSubImage1D: FnPtr::new(loadfn("glTexSubImage1D"), failing::TexSubImage1D),
    TexSubImage1DEXT: FnPtr::new(loadfn("glTexSubImage1DEXT"), failing::TexSubImage1DEXT),
    TexSubImage2D: FnPtr::new(loadfn("glTexSubImage2D"), failing::TexSubImage2D),
    TexSubImage2DEXT: FnPtr::new(loadfn("glTexSubImage2DEXT"), failing::TexSubImage2DEXT),
    TexSubImage3D: FnPtr::new(loadfn("glTexSubImage3D"), failing::TexSubImage3D),
    TexSubImage3DEXT: FnPtr::new(loadfn("glTexSubImage3DEXT"), failing::TexSubImage3DEXT),
    TexSubImage3DOES: FnPtr::new(loadfn("glTexSubImage3DOES"), failing::TexSubImage3DOES),
    TexSubImage4DSGIS: FnPtr::new(loadfn("glTexSubImage4DSGIS"), failing::TexSubImage4DSGIS),
    TextureBarrierNV: FnPtr::new(loadfn("glTextureBarrierNV"), failing::TextureBarrierNV),
    TextureBufferEXT: FnPtr::new(loadfn("glTextureBufferEXT"), failing::TextureBufferEXT),
    TextureBufferRangeEXT: FnPtr::new(loadfn("glTextureBufferRangeEXT"), failing::TextureBufferRangeEXT),
    TextureColorMaskSGIS: FnPtr::new(loadfn("glTextureColorMaskSGIS"), failing::TextureColorMaskSGIS),
    TextureImage1DEXT: FnPtr::new(loadfn("glTextureImage1DEXT"), failing::TextureImage1DEXT),
    TextureImage2DEXT: FnPtr::new(loadfn("glTextureImage2DEXT"), failing::TextureImage2DEXT),
    TextureImage2DMultisampleCoverageNV: FnPtr::new(loadfn("glTextureImage2DMultisampleCoverageNV"), failing::TextureImage2DMultisampleCoverageNV),
    TextureImage2DMultisampleNV: FnPtr::new(loadfn("glTextureImage2DMultisampleNV"), failing::TextureImage2DMultisampleNV),
    TextureImage3DEXT: FnPtr::new(loadfn("glTextureImage3DEXT"), failing::TextureImage3DEXT),
    TextureImage3DMultisampleCoverageNV: FnPtr::new(loadfn("glTextureImage3DMultisampleCoverageNV"), failing::TextureImage3DMultisampleCoverageNV),
    TextureImage3DMultisampleNV: FnPtr::new(loadfn("glTextureImage3DMultisampleNV"), failing::TextureImage3DMultisampleNV),
    TextureLightEXT: FnPtr::new(loadfn("glTextureLightEXT"), failing::TextureLightEXT),
    TextureMaterialEXT: FnPtr::new(loadfn("glTextureMaterialEXT"), failing::TextureMaterialEXT),
    TextureNormalEXT: FnPtr::new(loadfn("glTextureNormalEXT"), failing::TextureNormalEXT),
    TexturePageCommitmentEXT: FnPtr::new(loadfn("glTexturePageCommitmentEXT"), failing::TexturePageCommitmentEXT),
    TextureParameterIivEXT: FnPtr::new(loadfn("glTextureParameterIivEXT"), failing::TextureParameterIivEXT),
    TextureParameterIuivEXT: FnPtr::new(loadfn("glTextureParameterIuivEXT"), failing::TextureParameterIuivEXT),
    TextureParameterfEXT: FnPtr::new(loadfn("glTextureParameterfEXT"), failing::TextureParameterfEXT),
    TextureParameterfvEXT: FnPtr::new(loadfn("glTextureParameterfvEXT"), failing::TextureParameterfvEXT),
    TextureParameteriEXT: FnPtr::new(loadfn("glTextureParameteriEXT"), failing::TextureParameteriEXT),
    TextureParameterivEXT: FnPtr::new(loadfn("glTextureParameterivEXT"), failing::TextureParameterivEXT),
    TextureRangeAPPLE: FnPtr::new(loadfn("glTextureRangeAPPLE"), failing::TextureRangeAPPLE),
    TextureRenderbufferEXT: FnPtr::new(loadfn("glTextureRenderbufferEXT"), failing::TextureRenderbufferEXT),
    TextureStorage1DEXT: FnPtr::new(loadfn("glTextureStorage1DEXT"), failing::TextureStorage1DEXT),
    TextureStorage2DEXT: FnPtr::new(loadfn("glTextureStorage2DEXT"), failing::TextureStorage2DEXT),
    TextureStorage2DMultisampleEXT: FnPtr::new(loadfn("glTextureStorage2DMultisampleEXT"), failing::TextureStorage2DMultisampleEXT),
    TextureStorage3DEXT: FnPtr::new(loadfn("glTextureStorage3DEXT"), failing::TextureStorage3DEXT),
    TextureStorage3DMultisampleEXT: FnPtr::new(loadfn("glTextureStorage3DMultisampleEXT"), failing::TextureStorage3DMultisampleEXT),
    TextureStorageSparseAMD: FnPtr::new(loadfn("glTextureStorageSparseAMD"), failing::TextureStorageSparseAMD),
    TextureSubImage1DEXT: FnPtr::new(loadfn("glTextureSubImage1DEXT"), failing::TextureSubImage1DEXT),
    TextureSubImage2DEXT: FnPtr::new(loadfn("glTextureSubImage2DEXT"), failing::TextureSubImage2DEXT),
    TextureSubImage3DEXT: FnPtr::new(loadfn("glTextureSubImage3DEXT"), failing::TextureSubImage3DEXT),
    TextureView: FnPtr::new(loadfn("glTextureView"), failing::TextureView),
    TrackMatrixNV: FnPtr::new(loadfn("glTrackMatrixNV"), failing::TrackMatrixNV),
    TransformFeedbackAttribsNV: FnPtr::new(loadfn("glTransformFeedbackAttribsNV"), failing::TransformFeedbackAttribsNV),
    TransformFeedbackStreamAttribsNV: FnPtr::new(loadfn("glTransformFeedbackStreamAttribsNV"), failing::TransformFeedbackStreamAttribsNV),
    TransformFeedbackVaryings: FnPtr::new(loadfn("glTransformFeedbackVaryings"), failing::TransformFeedbackVaryings),
    TransformFeedbackVaryingsEXT: FnPtr::new(loadfn("glTransformFeedbackVaryingsEXT"), failing::TransformFeedbackVaryingsEXT),
    TransformFeedbackVaryingsNV: FnPtr::new(loadfn("glTransformFeedbackVaryingsNV"), failing::TransformFeedbackVaryingsNV),
    TransformPathNV: FnPtr::new(loadfn("glTransformPathNV"), failing::TransformPathNV),
    Translated: FnPtr::new(loadfn("glTranslated"), failing::Translated),
    Translatef: FnPtr::new(loadfn("glTranslatef"), failing::Translatef),
    Translatex: FnPtr::new(loadfn("glTranslatex"), failing::Translatex),
    TranslatexOES: FnPtr::new(loadfn("glTranslatexOES"), failing::TranslatexOES),
    Uniform1d: FnPtr::new(loadfn("glUniform1d"), failing::Uniform1d),
    Uniform1dv: FnPtr::new(loadfn("glUniform1dv"), failing::Uniform1dv),
    Uniform1f: FnPtr::new(loadfn("glUniform1f"), failing::Uniform1f),
    Uniform1fARB: FnPtr::new(loadfn("glUniform1fARB"), failing::Uniform1fARB),
    Uniform1fv: FnPtr::new(loadfn("glUniform1fv"), failing::Uniform1fv),
    Uniform1fvARB: FnPtr::new(loadfn("glUniform1fvARB"), failing::Uniform1fvARB),
    Uniform1i: FnPtr::new(loadfn("glUniform1i"), failing::Uniform1i),
    Uniform1i64NV: FnPtr::new(loadfn("glUniform1i64NV"), failing::Uniform1i64NV),
    Uniform1i64vNV: FnPtr::new(loadfn("glUniform1i64vNV"), failing::Uniform1i64vNV),
    Uniform1iARB: FnPtr::new(loadfn("glUniform1iARB"), failing::Uniform1iARB),
    Uniform1iv: FnPtr::new(loadfn("glUniform1iv"), failing::Uniform1iv),
    Uniform1ivARB: FnPtr::new(loadfn("glUniform1ivARB"), failing::Uniform1ivARB),
    Uniform1ui: FnPtr::new(loadfn("glUniform1ui"), failing::Uniform1ui),
    Uniform1ui64NV: FnPtr::new(loadfn("glUniform1ui64NV"), failing::Uniform1ui64NV),
    Uniform1ui64vNV: FnPtr::new(loadfn("glUniform1ui64vNV"), failing::Uniform1ui64vNV),
    Uniform1uiEXT: FnPtr::new(loadfn("glUniform1uiEXT"), failing::Uniform1uiEXT),
    Uniform1uiv: FnPtr::new(loadfn("glUniform1uiv"), failing::Uniform1uiv),
    Uniform1uivEXT: FnPtr::new(loadfn("glUniform1uivEXT"), failing::Uniform1uivEXT),
    Uniform2d: FnPtr::new(loadfn("glUniform2d"), failing::Uniform2d),
    Uniform2dv: FnPtr::new(loadfn("glUniform2dv"), failing::Uniform2dv),
    Uniform2f: FnPtr::new(loadfn("glUniform2f"), failing::Uniform2f),
    Uniform2fARB: FnPtr::new(loadfn("glUniform2fARB"), failing::Uniform2fARB),
    Uniform2fv: FnPtr::new(loadfn("glUniform2fv"), failing::Uniform2fv),
    Uniform2fvARB: FnPtr::new(loadfn("glUniform2fvARB"), failing::Uniform2fvARB),
    Uniform2i: FnPtr::new(loadfn("glUniform2i"), failing::Uniform2i),
    Uniform2i64NV: FnPtr::new(loadfn("glUniform2i64NV"), failing::Uniform2i64NV),
    Uniform2i64vNV: FnPtr::new(loadfn("glUniform2i64vNV"), failing::Uniform2i64vNV),
    Uniform2iARB: FnPtr::new(loadfn("glUniform2iARB"), failing::Uniform2iARB),
    Uniform2iv: FnPtr::new(loadfn("glUniform2iv"), failing::Uniform2iv),
    Uniform2ivARB: FnPtr::new(loadfn("glUniform2ivARB"), failing::Uniform2ivARB),
    Uniform2ui: FnPtr::new(loadfn("glUniform2ui"), failing::Uniform2ui),
    Uniform2ui64NV: FnPtr::new(loadfn("glUniform2ui64NV"), failing::Uniform2ui64NV),
    Uniform2ui64vNV: FnPtr::new(loadfn("glUniform2ui64vNV"), failing::Uniform2ui64vNV),
    Uniform2uiEXT: FnPtr::new(loadfn("glUniform2uiEXT"), failing::Uniform2uiEXT),
    Uniform2uiv: FnPtr::new(loadfn("glUniform2uiv"), failing::Uniform2uiv),
    Uniform2uivEXT: FnPtr::new(loadfn("glUniform2uivEXT"), failing::Uniform2uivEXT),
    Uniform3d: FnPtr::new(loadfn("glUniform3d"), failing::Uniform3d),
    Uniform3dv: FnPtr::new(loadfn("glUniform3dv"), failing::Uniform3dv),
    Uniform3f: FnPtr::new(loadfn("glUniform3f"), failing::Uniform3f),
    Uniform3fARB: FnPtr::new(loadfn("glUniform3fARB"), failing::Uniform3fARB),
    Uniform3fv: FnPtr::new(loadfn("glUniform3fv"), failing::Uniform3fv),
    Uniform3fvARB: FnPtr::new(loadfn("glUniform3fvARB"), failing::Uniform3fvARB),
    Uniform3i: FnPtr::new(loadfn("glUniform3i"), failing::Uniform3i),
    Uniform3i64NV: FnPtr::new(loadfn("glUniform3i64NV"), failing::Uniform3i64NV),
    Uniform3i64vNV: FnPtr::new(loadfn("glUniform3i64vNV"), failing::Uniform3i64vNV),
    Uniform3iARB: FnPtr::new(loadfn("glUniform3iARB"), failing::Uniform3iARB),
    Uniform3iv: FnPtr::new(loadfn("glUniform3iv"), failing::Uniform3iv),
    Uniform3ivARB: FnPtr::new(loadfn("glUniform3ivARB"), failing::Uniform3ivARB),
    Uniform3ui: FnPtr::new(loadfn("glUniform3ui"), failing::Uniform3ui),
    Uniform3ui64NV: FnPtr::new(loadfn("glUniform3ui64NV"), failing::Uniform3ui64NV),
    Uniform3ui64vNV: FnPtr::new(loadfn("glUniform3ui64vNV"), failing::Uniform3ui64vNV),
    Uniform3uiEXT: FnPtr::new(loadfn("glUniform3uiEXT"), failing::Uniform3uiEXT),
    Uniform3uiv: FnPtr::new(loadfn("glUniform3uiv"), failing::Uniform3uiv),
    Uniform3uivEXT: FnPtr::new(loadfn("glUniform3uivEXT"), failing::Uniform3uivEXT),
    Uniform4d: FnPtr::new(loadfn("glUniform4d"), failing::Uniform4d),
    Uniform4dv: FnPtr::new(loadfn("glUniform4dv"), failing::Uniform4dv),
    Uniform4f: FnPtr::new(loadfn("glUniform4f"), failing::Uniform4f),
    Uniform4fARB: FnPtr::new(loadfn("glUniform4fARB"), failing::Uniform4fARB),
    Uniform4fv: FnPtr::new(loadfn("glUniform4fv"), failing::Uniform4fv),
    Uniform4fvARB: FnPtr::new(loadfn("glUniform4fvARB"), failing::Uniform4fvARB),
    Uniform4i: FnPtr::new(loadfn("glUniform4i"), failing::Uniform4i),
    Uniform4i64NV: FnPtr::new(loadfn("glUniform4i64NV"), failing::Uniform4i64NV),
    Uniform4i64vNV: FnPtr::new(loadfn("glUniform4i64vNV"), failing::Uniform4i64vNV),
    Uniform4iARB: FnPtr::new(loadfn("glUniform4iARB"), failing::Uniform4iARB),
    Uniform4iv: FnPtr::new(loadfn("glUniform4iv"), failing::Uniform4iv),
    Uniform4ivARB: FnPtr::new(loadfn("glUniform4ivARB"), failing::Uniform4ivARB),
    Uniform4ui: FnPtr::new(loadfn("glUniform4ui"), failing::Uniform4ui),
    Uniform4ui64NV: FnPtr::new(loadfn("glUniform4ui64NV"), failing::Uniform4ui64NV),
    Uniform4ui64vNV: FnPtr::new(loadfn("glUniform4ui64vNV"), failing::Uniform4ui64vNV),
    Uniform4uiEXT: FnPtr::new(loadfn("glUniform4uiEXT"), failing::Uniform4uiEXT),
    Uniform4uiv: FnPtr::new(loadfn("glUniform4uiv"), failing::Uniform4uiv),
    Uniform4uivEXT: FnPtr::new(loadfn("glUniform4uivEXT"), failing::Uniform4uivEXT),
    UniformBlockBinding: FnPtr::new(loadfn("glUniformBlockBinding"), failing::UniformBlockBinding),
    UniformBufferEXT: FnPtr::new(loadfn("glUniformBufferEXT"), failing::UniformBufferEXT),
    UniformHandleui64ARB: FnPtr::new(loadfn("glUniformHandleui64ARB"), failing::UniformHandleui64ARB),
    UniformHandleui64NV: FnPtr::new(loadfn("glUniformHandleui64NV"), failing::UniformHandleui64NV),
    UniformHandleui64vARB: FnPtr::new(loadfn("glUniformHandleui64vARB"), failing::UniformHandleui64vARB),
    UniformHandleui64vNV: FnPtr::new(loadfn("glUniformHandleui64vNV"), failing::UniformHandleui64vNV),
    UniformMatrix2dv: FnPtr::new(loadfn("glUniformMatrix2dv"), failing::UniformMatrix2dv),
    UniformMatrix2fv: FnPtr::new(loadfn("glUniformMatrix2fv"), failing::UniformMatrix2fv),
    UniformMatrix2fvARB: FnPtr::new(loadfn("glUniformMatrix2fvARB"), failing::UniformMatrix2fvARB),
    UniformMatrix2x3dv: FnPtr::new(loadfn("glUniformMatrix2x3dv"), failing::UniformMatrix2x3dv),
    UniformMatrix2x3fv: FnPtr::new(loadfn("glUniformMatrix2x3fv"), failing::UniformMatrix2x3fv),
    UniformMatrix2x4dv: FnPtr::new(loadfn("glUniformMatrix2x4dv"), failing::UniformMatrix2x4dv),
    UniformMatrix2x4fv: FnPtr::new(loadfn("glUniformMatrix2x4fv"), failing::UniformMatrix2x4fv),
    UniformMatrix3dv: FnPtr::new(loadfn("glUniformMatrix3dv"), failing::UniformMatrix3dv),
    UniformMatrix3fv: FnPtr::new(loadfn("glUniformMatrix3fv"), failing::UniformMatrix3fv),
    UniformMatrix3fvARB: FnPtr::new(loadfn("glUniformMatrix3fvARB"), failing::UniformMatrix3fvARB),
    UniformMatrix3x2dv: FnPtr::new(loadfn("glUniformMatrix3x2dv"), failing::UniformMatrix3x2dv),
    UniformMatrix3x2fv: FnPtr::new(loadfn("glUniformMatrix3x2fv"), failing::UniformMatrix3x2fv),
    UniformMatrix3x4dv: FnPtr::new(loadfn("glUniformMatrix3x4dv"), failing::UniformMatrix3x4dv),
    UniformMatrix3x4fv: FnPtr::new(loadfn("glUniformMatrix3x4fv"), failing::UniformMatrix3x4fv),
    UniformMatrix4dv: FnPtr::new(loadfn("glUniformMatrix4dv"), failing::UniformMatrix4dv),
    UniformMatrix4fv: FnPtr::new(loadfn("glUniformMatrix4fv"), failing::UniformMatrix4fv),
    UniformMatrix4fvARB: FnPtr::new(loadfn("glUniformMatrix4fvARB"), failing::UniformMatrix4fvARB),
    UniformMatrix4x2dv: FnPtr::new(loadfn("glUniformMatrix4x2dv"), failing::UniformMatrix4x2dv),
    UniformMatrix4x2fv: FnPtr::new(loadfn("glUniformMatrix4x2fv"), failing::UniformMatrix4x2fv),
    UniformMatrix4x3dv: FnPtr::new(loadfn("glUniformMatrix4x3dv"), failing::UniformMatrix4x3dv),
    UniformMatrix4x3fv: FnPtr::new(loadfn("glUniformMatrix4x3fv"), failing::UniformMatrix4x3fv),
    UniformSubroutinesuiv: FnPtr::new(loadfn("glUniformSubroutinesuiv"), failing::UniformSubroutinesuiv),
    Uniformui64NV: FnPtr::new(loadfn("glUniformui64NV"), failing::Uniformui64NV),
    Uniformui64vNV: FnPtr::new(loadfn("glUniformui64vNV"), failing::Uniformui64vNV),
    UnlockArraysEXT: FnPtr::new(loadfn("glUnlockArraysEXT"), failing::UnlockArraysEXT),
    UnmapBuffer: FnPtr::new(loadfn("glUnmapBuffer"), failing::UnmapBuffer),
    UnmapBufferARB: FnPtr::new(loadfn("glUnmapBufferARB"), failing::UnmapBufferARB),
    UnmapBufferOES: FnPtr::new(loadfn("glUnmapBufferOES"), failing::UnmapBufferOES),
    UnmapNamedBufferEXT: FnPtr::new(loadfn("glUnmapNamedBufferEXT"), failing::UnmapNamedBufferEXT),
    UnmapObjectBufferATI: FnPtr::new(loadfn("glUnmapObjectBufferATI"), failing::UnmapObjectBufferATI),
    UnmapTexture2DINTEL: FnPtr::new(loadfn("glUnmapTexture2DINTEL"), failing::UnmapTexture2DINTEL),
    UpdateObjectBufferATI: FnPtr::new(loadfn("glUpdateObjectBufferATI"), failing::UpdateObjectBufferATI),
    UseProgram: FnPtr::new(loadfn("glUseProgram"), failing::UseProgram),
    UseProgramObjectARB: FnPtr::new(loadfn("glUseProgramObjectARB"), failing::UseProgramObjectARB),
    UseProgramStages: FnPtr::new(loadfn("glUseProgramStages"), failing::UseProgramStages),
    UseProgramStagesEXT: FnPtr::new(loadfn("glUseProgramStagesEXT"), failing::UseProgramStagesEXT),
    UseShaderProgramEXT: FnPtr::new(loadfn("glUseShaderProgramEXT"), failing::UseShaderProgramEXT),
    VDPAUFiniNV: FnPtr::new(loadfn("glVDPAUFiniNV"), failing::VDPAUFiniNV),
    VDPAUGetSurfaceivNV: FnPtr::new(loadfn("glVDPAUGetSurfaceivNV"), failing::VDPAUGetSurfaceivNV),
    VDPAUInitNV: FnPtr::new(loadfn("glVDPAUInitNV"), failing::VDPAUInitNV),
    VDPAUIsSurfaceNV: FnPtr::new(loadfn("glVDPAUIsSurfaceNV"), failing::VDPAUIsSurfaceNV),
    VDPAUMapSurfacesNV: FnPtr::new(loadfn("glVDPAUMapSurfacesNV"), failing::VDPAUMapSurfacesNV),
    VDPAURegisterOutputSurfaceNV: FnPtr::new(loadfn("glVDPAURegisterOutputSurfaceNV"), failing::VDPAURegisterOutputSurfaceNV),
    VDPAURegisterVideoSurfaceNV: FnPtr::new(loadfn("glVDPAURegisterVideoSurfaceNV"), failing::VDPAURegisterVideoSurfaceNV),
    VDPAUSurfaceAccessNV: FnPtr::new(loadfn("glVDPAUSurfaceAccessNV"), failing::VDPAUSurfaceAccessNV),
    VDPAUUnmapSurfacesNV: FnPtr::new(loadfn("glVDPAUUnmapSurfacesNV"), failing::VDPAUUnmapSurfacesNV),
    VDPAUUnregisterSurfaceNV: FnPtr::new(loadfn("glVDPAUUnregisterSurfaceNV"), failing::VDPAUUnregisterSurfaceNV),
    ValidateProgram: FnPtr::new(loadfn("glValidateProgram"), failing::ValidateProgram),
    ValidateProgramARB: FnPtr::new(loadfn("glValidateProgramARB"), failing::ValidateProgramARB),
    ValidateProgramPipeline: FnPtr::new(loadfn("glValidateProgramPipeline"), failing::ValidateProgramPipeline),
    ValidateProgramPipelineEXT: FnPtr::new(loadfn("glValidateProgramPipelineEXT"), failing::ValidateProgramPipelineEXT),
    VariantArrayObjectATI: FnPtr::new(loadfn("glVariantArrayObjectATI"), failing::VariantArrayObjectATI),
    VariantPointerEXT: FnPtr::new(loadfn("glVariantPointerEXT"), failing::VariantPointerEXT),
    VariantbvEXT: FnPtr::new(loadfn("glVariantbvEXT"), failing::VariantbvEXT),
    VariantdvEXT: FnPtr::new(loadfn("glVariantdvEXT"), failing::VariantdvEXT),
    VariantfvEXT: FnPtr::new(loadfn("glVariantfvEXT"), failing::VariantfvEXT),
    VariantivEXT: FnPtr::new(loadfn("glVariantivEXT"), failing::VariantivEXT),
    VariantsvEXT: FnPtr::new(loadfn("glVariantsvEXT"), failing::VariantsvEXT),
    VariantubvEXT: FnPtr::new(loadfn("glVariantubvEXT"), failing::VariantubvEXT),
    VariantuivEXT: FnPtr::new(loadfn("glVariantuivEXT"), failing::VariantuivEXT),
    VariantusvEXT: FnPtr::new(loadfn("glVariantusvEXT"), failing::VariantusvEXT),
    Vertex2bOES: FnPtr::new(loadfn("glVertex2bOES"), failing::Vertex2bOES),
    Vertex2bvOES: FnPtr::new(loadfn("glVertex2bvOES"), failing::Vertex2bvOES),
    Vertex2d: FnPtr::new(loadfn("glVertex2d"), failing::Vertex2d),
    Vertex2dv: FnPtr::new(loadfn("glVertex2dv"), failing::Vertex2dv),
    Vertex2f: FnPtr::new(loadfn("glVertex2f"), failing::Vertex2f),
    Vertex2fv: FnPtr::new(loadfn("glVertex2fv"), failing::Vertex2fv),
    Vertex2hNV: FnPtr::new(loadfn("glVertex2hNV"), failing::Vertex2hNV),
    Vertex2hvNV: FnPtr::new(loadfn("glVertex2hvNV"), failing::Vertex2hvNV),
    Vertex2i: FnPtr::new(loadfn("glVertex2i"), failing::Vertex2i),
    Vertex2iv: FnPtr::new(loadfn("glVertex2iv"), failing::Vertex2iv),
    Vertex2s: FnPtr::new(loadfn("glVertex2s"), failing::Vertex2s),
    Vertex2sv: FnPtr::new(loadfn("glVertex2sv"), failing::Vertex2sv),
    Vertex2xOES: FnPtr::new(loadfn("glVertex2xOES"), failing::Vertex2xOES),
    Vertex2xvOES: FnPtr::new(loadfn("glVertex2xvOES"), failing::Vertex2xvOES),
    Vertex3bOES: FnPtr::new(loadfn("glVertex3bOES"), failing::Vertex3bOES),
    Vertex3bvOES: FnPtr::new(loadfn("glVertex3bvOES"), failing::Vertex3bvOES),
    Vertex3d: FnPtr::new(loadfn("glVertex3d"), failing::Vertex3d),
    Vertex3dv: FnPtr::new(loadfn("glVertex3dv"), failing::Vertex3dv),
    Vertex3f: FnPtr::new(loadfn("glVertex3f"), failing::Vertex3f),
    Vertex3fv: FnPtr::new(loadfn("glVertex3fv"), failing::Vertex3fv),
    Vertex3hNV: FnPtr::new(loadfn("glVertex3hNV"), failing::Vertex3hNV),
    Vertex3hvNV: FnPtr::new(loadfn("glVertex3hvNV"), failing::Vertex3hvNV),
    Vertex3i: FnPtr::new(loadfn("glVertex3i"), failing::Vertex3i),
    Vertex3iv: FnPtr::new(loadfn("glVertex3iv"), failing::Vertex3iv),
    Vertex3s: FnPtr::new(loadfn("glVertex3s"), failing::Vertex3s),
    Vertex3sv: FnPtr::new(loadfn("glVertex3sv"), failing::Vertex3sv),
    Vertex3xOES: FnPtr::new(loadfn("glVertex3xOES"), failing::Vertex3xOES),
    Vertex3xvOES: FnPtr::new(loadfn("glVertex3xvOES"), failing::Vertex3xvOES),
    Vertex4bOES: FnPtr::new(loadfn("glVertex4bOES"), failing::Vertex4bOES),
    Vertex4bvOES: FnPtr::new(loadfn("glVertex4bvOES"), failing::Vertex4bvOES),
    Vertex4d: FnPtr::new(loadfn("glVertex4d"), failing::Vertex4d),
    Vertex4dv: FnPtr::new(loadfn("glVertex4dv"), failing::Vertex4dv),
    Vertex4f: FnPtr::new(loadfn("glVertex4f"), failing::Vertex4f),
    Vertex4fv: FnPtr::new(loadfn("glVertex4fv"), failing::Vertex4fv),
    Vertex4hNV: FnPtr::new(loadfn("glVertex4hNV"), failing::Vertex4hNV),
    Vertex4hvNV: FnPtr::new(loadfn("glVertex4hvNV"), failing::Vertex4hvNV),
    Vertex4i: FnPtr::new(loadfn("glVertex4i"), failing::Vertex4i),
    Vertex4iv: FnPtr::new(loadfn("glVertex4iv"), failing::Vertex4iv),
    Vertex4s: FnPtr::new(loadfn("glVertex4s"), failing::Vertex4s),
    Vertex4sv: FnPtr::new(loadfn("glVertex4sv"), failing::Vertex4sv),
    Vertex4xOES: FnPtr::new(loadfn("glVertex4xOES"), failing::Vertex4xOES),
    Vertex4xvOES: FnPtr::new(loadfn("glVertex4xvOES"), failing::Vertex4xvOES),
    VertexArrayBindVertexBufferEXT: FnPtr::new(loadfn("glVertexArrayBindVertexBufferEXT"), failing::VertexArrayBindVertexBufferEXT),
    VertexArrayColorOffsetEXT: FnPtr::new(loadfn("glVertexArrayColorOffsetEXT"), failing::VertexArrayColorOffsetEXT),
    VertexArrayEdgeFlagOffsetEXT: FnPtr::new(loadfn("glVertexArrayEdgeFlagOffsetEXT"), failing::VertexArrayEdgeFlagOffsetEXT),
    VertexArrayFogCoordOffsetEXT: FnPtr::new(loadfn("glVertexArrayFogCoordOffsetEXT"), failing::VertexArrayFogCoordOffsetEXT),
    VertexArrayIndexOffsetEXT: FnPtr::new(loadfn("glVertexArrayIndexOffsetEXT"), failing::VertexArrayIndexOffsetEXT),
    VertexArrayMultiTexCoordOffsetEXT: FnPtr::new(loadfn("glVertexArrayMultiTexCoordOffsetEXT"), failing::VertexArrayMultiTexCoordOffsetEXT),
    VertexArrayNormalOffsetEXT: FnPtr::new(loadfn("glVertexArrayNormalOffsetEXT"), failing::VertexArrayNormalOffsetEXT),
    VertexArrayParameteriAPPLE: FnPtr::new(loadfn("glVertexArrayParameteriAPPLE"), failing::VertexArrayParameteriAPPLE),
    VertexArrayRangeAPPLE: FnPtr::new(loadfn("glVertexArrayRangeAPPLE"), failing::VertexArrayRangeAPPLE),
    VertexArrayRangeNV: FnPtr::new(loadfn("glVertexArrayRangeNV"), failing::VertexArrayRangeNV),
    VertexArraySecondaryColorOffsetEXT: FnPtr::new(loadfn("glVertexArraySecondaryColorOffsetEXT"), failing::VertexArraySecondaryColorOffsetEXT),
    VertexArrayTexCoordOffsetEXT: FnPtr::new(loadfn("glVertexArrayTexCoordOffsetEXT"), failing::VertexArrayTexCoordOffsetEXT),
    VertexArrayVertexAttribBindingEXT: FnPtr::new(loadfn("glVertexArrayVertexAttribBindingEXT"), failing::VertexArrayVertexAttribBindingEXT),
    VertexArrayVertexAttribFormatEXT: FnPtr::new(loadfn("glVertexArrayVertexAttribFormatEXT"), failing::VertexArrayVertexAttribFormatEXT),
    VertexArrayVertexAttribIFormatEXT: FnPtr::new(loadfn("glVertexArrayVertexAttribIFormatEXT"), failing::VertexArrayVertexAttribIFormatEXT),
    VertexArrayVertexAttribIOffsetEXT: FnPtr::new(loadfn("glVertexArrayVertexAttribIOffsetEXT"), failing::VertexArrayVertexAttribIOffsetEXT),
    VertexArrayVertexAttribLFormatEXT: FnPtr::new(loadfn("glVertexArrayVertexAttribLFormatEXT"), failing::VertexArrayVertexAttribLFormatEXT),
    VertexArrayVertexAttribLOffsetEXT: FnPtr::new(loadfn("glVertexArrayVertexAttribLOffsetEXT"), failing::VertexArrayVertexAttribLOffsetEXT),
    VertexArrayVertexAttribOffsetEXT: FnPtr::new(loadfn("glVertexArrayVertexAttribOffsetEXT"), failing::VertexArrayVertexAttribOffsetEXT),
    VertexArrayVertexBindingDivisorEXT: FnPtr::new(loadfn("glVertexArrayVertexBindingDivisorEXT"), failing::VertexArrayVertexBindingDivisorEXT),
    VertexArrayVertexOffsetEXT: FnPtr::new(loadfn("glVertexArrayVertexOffsetEXT"), failing::VertexArrayVertexOffsetEXT),
    VertexAttrib1d: FnPtr::new(loadfn("glVertexAttrib1d"), failing::VertexAttrib1d),
    VertexAttrib1dARB: FnPtr::new(loadfn("glVertexAttrib1dARB"), failing::VertexAttrib1dARB),
    VertexAttrib1dNV: FnPtr::new(loadfn("glVertexAttrib1dNV"), failing::VertexAttrib1dNV),
    VertexAttrib1dv: FnPtr::new(loadfn("glVertexAttrib1dv"), failing::VertexAttrib1dv),
    VertexAttrib1dvARB: FnPtr::new(loadfn("glVertexAttrib1dvARB"), failing::VertexAttrib1dvARB),
    VertexAttrib1dvNV: FnPtr::new(loadfn("glVertexAttrib1dvNV"), failing::VertexAttrib1dvNV),
    VertexAttrib1f: FnPtr::new(loadfn("glVertexAttrib1f"), failing::VertexAttrib1f),
    VertexAttrib1fARB: FnPtr::new(loadfn("glVertexAttrib1fARB"), failing::VertexAttrib1fARB),
    VertexAttrib1fNV: FnPtr::new(loadfn("glVertexAttrib1fNV"), failing::VertexAttrib1fNV),
    VertexAttrib1fv: FnPtr::new(loadfn("glVertexAttrib1fv"), failing::VertexAttrib1fv),
    VertexAttrib1fvARB: FnPtr::new(loadfn("glVertexAttrib1fvARB"), failing::VertexAttrib1fvARB),
    VertexAttrib1fvNV: FnPtr::new(loadfn("glVertexAttrib1fvNV"), failing::VertexAttrib1fvNV),
    VertexAttrib1hNV: FnPtr::new(loadfn("glVertexAttrib1hNV"), failing::VertexAttrib1hNV),
    VertexAttrib1hvNV: FnPtr::new(loadfn("glVertexAttrib1hvNV"), failing::VertexAttrib1hvNV),
    VertexAttrib1s: FnPtr::new(loadfn("glVertexAttrib1s"), failing::VertexAttrib1s),
    VertexAttrib1sARB: FnPtr::new(loadfn("glVertexAttrib1sARB"), failing::VertexAttrib1sARB),
    VertexAttrib1sNV: FnPtr::new(loadfn("glVertexAttrib1sNV"), failing::VertexAttrib1sNV),
    VertexAttrib1sv: FnPtr::new(loadfn("glVertexAttrib1sv"), failing::VertexAttrib1sv),
    VertexAttrib1svARB: FnPtr::new(loadfn("glVertexAttrib1svARB"), failing::VertexAttrib1svARB),
    VertexAttrib1svNV: FnPtr::new(loadfn("glVertexAttrib1svNV"), failing::VertexAttrib1svNV),
    VertexAttrib2d: FnPtr::new(loadfn("glVertexAttrib2d"), failing::VertexAttrib2d),
    VertexAttrib2dARB: FnPtr::new(loadfn("glVertexAttrib2dARB"), failing::VertexAttrib2dARB),
    VertexAttrib2dNV: FnPtr::new(loadfn("glVertexAttrib2dNV"), failing::VertexAttrib2dNV),
    VertexAttrib2dv: FnPtr::new(loadfn("glVertexAttrib2dv"), failing::VertexAttrib2dv),
    VertexAttrib2dvARB: FnPtr::new(loadfn("glVertexAttrib2dvARB"), failing::VertexAttrib2dvARB),
    VertexAttrib2dvNV: FnPtr::new(loadfn("glVertexAttrib2dvNV"), failing::VertexAttrib2dvNV),
    VertexAttrib2f: FnPtr::new(loadfn("glVertexAttrib2f"), failing::VertexAttrib2f),
    VertexAttrib2fARB: FnPtr::new(loadfn("glVertexAttrib2fARB"), failing::VertexAttrib2fARB),
    VertexAttrib2fNV: FnPtr::new(loadfn("glVertexAttrib2fNV"), failing::VertexAttrib2fNV),
    VertexAttrib2fv: FnPtr::new(loadfn("glVertexAttrib2fv"), failing::VertexAttrib2fv),
    VertexAttrib2fvARB: FnPtr::new(loadfn("glVertexAttrib2fvARB"), failing::VertexAttrib2fvARB),
    VertexAttrib2fvNV: FnPtr::new(loadfn("glVertexAttrib2fvNV"), failing::VertexAttrib2fvNV),
    VertexAttrib2hNV: FnPtr::new(loadfn("glVertexAttrib2hNV"), failing::VertexAttrib2hNV),
    VertexAttrib2hvNV: FnPtr::new(loadfn("glVertexAttrib2hvNV"), failing::VertexAttrib2hvNV),
    VertexAttrib2s: FnPtr::new(loadfn("glVertexAttrib2s"), failing::VertexAttrib2s),
    VertexAttrib2sARB: FnPtr::new(loadfn("glVertexAttrib2sARB"), failing::VertexAttrib2sARB),
    VertexAttrib2sNV: FnPtr::new(loadfn("glVertexAttrib2sNV"), failing::VertexAttrib2sNV),
    VertexAttrib2sv: FnPtr::new(loadfn("glVertexAttrib2sv"), failing::VertexAttrib2sv),
    VertexAttrib2svARB: FnPtr::new(loadfn("glVertexAttrib2svARB"), failing::VertexAttrib2svARB),
    VertexAttrib2svNV: FnPtr::new(loadfn("glVertexAttrib2svNV"), failing::VertexAttrib2svNV),
    VertexAttrib3d: FnPtr::new(loadfn("glVertexAttrib3d"), failing::VertexAttrib3d),
    VertexAttrib3dARB: FnPtr::new(loadfn("glVertexAttrib3dARB"), failing::VertexAttrib3dARB),
    VertexAttrib3dNV: FnPtr::new(loadfn("glVertexAttrib3dNV"), failing::VertexAttrib3dNV),
    VertexAttrib3dv: FnPtr::new(loadfn("glVertexAttrib3dv"), failing::VertexAttrib3dv),
    VertexAttrib3dvARB: FnPtr::new(loadfn("glVertexAttrib3dvARB"), failing::VertexAttrib3dvARB),
    VertexAttrib3dvNV: FnPtr::new(loadfn("glVertexAttrib3dvNV"), failing::VertexAttrib3dvNV),
    VertexAttrib3f: FnPtr::new(loadfn("glVertexAttrib3f"), failing::VertexAttrib3f),
    VertexAttrib3fARB: FnPtr::new(loadfn("glVertexAttrib3fARB"), failing::VertexAttrib3fARB),
    VertexAttrib3fNV: FnPtr::new(loadfn("glVertexAttrib3fNV"), failing::VertexAttrib3fNV),
    VertexAttrib3fv: FnPtr::new(loadfn("glVertexAttrib3fv"), failing::VertexAttrib3fv),
    VertexAttrib3fvARB: FnPtr::new(loadfn("glVertexAttrib3fvARB"), failing::VertexAttrib3fvARB),
    VertexAttrib3fvNV: FnPtr::new(loadfn("glVertexAttrib3fvNV"), failing::VertexAttrib3fvNV),
    VertexAttrib3hNV: FnPtr::new(loadfn("glVertexAttrib3hNV"), failing::VertexAttrib3hNV),
    VertexAttrib3hvNV: FnPtr::new(loadfn("glVertexAttrib3hvNV"), failing::VertexAttrib3hvNV),
    VertexAttrib3s: FnPtr::new(loadfn("glVertexAttrib3s"), failing::VertexAttrib3s),
    VertexAttrib3sARB: FnPtr::new(loadfn("glVertexAttrib3sARB"), failing::VertexAttrib3sARB),
    VertexAttrib3sNV: FnPtr::new(loadfn("glVertexAttrib3sNV"), failing::VertexAttrib3sNV),
    VertexAttrib3sv: FnPtr::new(loadfn("glVertexAttrib3sv"), failing::VertexAttrib3sv),
    VertexAttrib3svARB: FnPtr::new(loadfn("glVertexAttrib3svARB"), failing::VertexAttrib3svARB),
    VertexAttrib3svNV: FnPtr::new(loadfn("glVertexAttrib3svNV"), failing::VertexAttrib3svNV),
    VertexAttrib4Nbv: FnPtr::new(loadfn("glVertexAttrib4Nbv"), failing::VertexAttrib4Nbv),
    VertexAttrib4NbvARB: FnPtr::new(loadfn("glVertexAttrib4NbvARB"), failing::VertexAttrib4NbvARB),
    VertexAttrib4Niv: FnPtr::new(loadfn("glVertexAttrib4Niv"), failing::VertexAttrib4Niv),
    VertexAttrib4NivARB: FnPtr::new(loadfn("glVertexAttrib4NivARB"), failing::VertexAttrib4NivARB),
    VertexAttrib4Nsv: FnPtr::new(loadfn("glVertexAttrib4Nsv"), failing::VertexAttrib4Nsv),
    VertexAttrib4NsvARB: FnPtr::new(loadfn("glVertexAttrib4NsvARB"), failing::VertexAttrib4NsvARB),
    VertexAttrib4Nub: FnPtr::new(loadfn("glVertexAttrib4Nub"), failing::VertexAttrib4Nub),
    VertexAttrib4NubARB: FnPtr::new(loadfn("glVertexAttrib4NubARB"), failing::VertexAttrib4NubARB),
    VertexAttrib4Nubv: FnPtr::new(loadfn("glVertexAttrib4Nubv"), failing::VertexAttrib4Nubv),
    VertexAttrib4NubvARB: FnPtr::new(loadfn("glVertexAttrib4NubvARB"), failing::VertexAttrib4NubvARB),
    VertexAttrib4Nuiv: FnPtr::new(loadfn("glVertexAttrib4Nuiv"), failing::VertexAttrib4Nuiv),
    VertexAttrib4NuivARB: FnPtr::new(loadfn("glVertexAttrib4NuivARB"), failing::VertexAttrib4NuivARB),
    VertexAttrib4Nusv: FnPtr::new(loadfn("glVertexAttrib4Nusv"), failing::VertexAttrib4Nusv),
    VertexAttrib4NusvARB: FnPtr::new(loadfn("glVertexAttrib4NusvARB"), failing::VertexAttrib4NusvARB),
    VertexAttrib4bv: FnPtr::new(loadfn("glVertexAttrib4bv"), failing::VertexAttrib4bv),
    VertexAttrib4bvARB: FnPtr::new(loadfn("glVertexAttrib4bvARB"), failing::VertexAttrib4bvARB),
    VertexAttrib4d: FnPtr::new(loadfn("glVertexAttrib4d"), failing::VertexAttrib4d),
    VertexAttrib4dARB: FnPtr::new(loadfn("glVertexAttrib4dARB"), failing::VertexAttrib4dARB),
    VertexAttrib4dNV: FnPtr::new(loadfn("glVertexAttrib4dNV"), failing::VertexAttrib4dNV),
    VertexAttrib4dv: FnPtr::new(loadfn("glVertexAttrib4dv"), failing::VertexAttrib4dv),
    VertexAttrib4dvARB: FnPtr::new(loadfn("glVertexAttrib4dvARB"), failing::VertexAttrib4dvARB),
    VertexAttrib4dvNV: FnPtr::new(loadfn("glVertexAttrib4dvNV"), failing::VertexAttrib4dvNV),
    VertexAttrib4f: FnPtr::new(loadfn("glVertexAttrib4f"), failing::VertexAttrib4f),
    VertexAttrib4fARB: FnPtr::new(loadfn("glVertexAttrib4fARB"), failing::VertexAttrib4fARB),
    VertexAttrib4fNV: FnPtr::new(loadfn("glVertexAttrib4fNV"), failing::VertexAttrib4fNV),
    VertexAttrib4fv: FnPtr::new(loadfn("glVertexAttrib4fv"), failing::VertexAttrib4fv),
    VertexAttrib4fvARB: FnPtr::new(loadfn("glVertexAttrib4fvARB"), failing::VertexAttrib4fvARB),
    VertexAttrib4fvNV: FnPtr::new(loadfn("glVertexAttrib4fvNV"), failing::VertexAttrib4fvNV),
    VertexAttrib4hNV: FnPtr::new(loadfn("glVertexAttrib4hNV"), failing::VertexAttrib4hNV),
    VertexAttrib4hvNV: FnPtr::new(loadfn("glVertexAttrib4hvNV"), failing::VertexAttrib4hvNV),
    VertexAttrib4iv: FnPtr::new(loadfn("glVertexAttrib4iv"), failing::VertexAttrib4iv),
    VertexAttrib4ivARB: FnPtr::new(loadfn("glVertexAttrib4ivARB"), failing::VertexAttrib4ivARB),
    VertexAttrib4s: FnPtr::new(loadfn("glVertexAttrib4s"), failing::VertexAttrib4s),
    VertexAttrib4sARB: FnPtr::new(loadfn("glVertexAttrib4sARB"), failing::VertexAttrib4sARB),
    VertexAttrib4sNV: FnPtr::new(loadfn("glVertexAttrib4sNV"), failing::VertexAttrib4sNV),
    VertexAttrib4sv: FnPtr::new(loadfn("glVertexAttrib4sv"), failing::VertexAttrib4sv),
    VertexAttrib4svARB: FnPtr::new(loadfn("glVertexAttrib4svARB"), failing::VertexAttrib4svARB),
    VertexAttrib4svNV: FnPtr::new(loadfn("glVertexAttrib4svNV"), failing::VertexAttrib4svNV),
    VertexAttrib4ubNV: FnPtr::new(loadfn("glVertexAttrib4ubNV"), failing::VertexAttrib4ubNV),
    VertexAttrib4ubv: FnPtr::new(loadfn("glVertexAttrib4ubv"), failing::VertexAttrib4ubv),
    VertexAttrib4ubvARB: FnPtr::new(loadfn("glVertexAttrib4ubvARB"), failing::VertexAttrib4ubvARB),
    VertexAttrib4ubvNV: FnPtr::new(loadfn("glVertexAttrib4ubvNV"), failing::VertexAttrib4ubvNV),
    VertexAttrib4uiv: FnPtr::new(loadfn("glVertexAttrib4uiv"), failing::VertexAttrib4uiv),
    VertexAttrib4uivARB: FnPtr::new(loadfn("glVertexAttrib4uivARB"), failing::VertexAttrib4uivARB),
    VertexAttrib4usv: FnPtr::new(loadfn("glVertexAttrib4usv"), failing::VertexAttrib4usv),
    VertexAttrib4usvARB: FnPtr::new(loadfn("glVertexAttrib4usvARB"), failing::VertexAttrib4usvARB),
    VertexAttribArrayObjectATI: FnPtr::new(loadfn("glVertexAttribArrayObjectATI"), failing::VertexAttribArrayObjectATI),
    VertexAttribBinding: FnPtr::new(loadfn("glVertexAttribBinding"), failing::VertexAttribBinding),
    VertexAttribDivisor: FnPtr::new(loadfn("glVertexAttribDivisor"), failing::VertexAttribDivisor),
    VertexAttribDivisorANGLE: FnPtr::new(loadfn("glVertexAttribDivisorANGLE"), failing::VertexAttribDivisorANGLE),
    VertexAttribDivisorARB: FnPtr::new(loadfn("glVertexAttribDivisorARB"), failing::VertexAttribDivisorARB),
    VertexAttribDivisorNV: FnPtr::new(loadfn("glVertexAttribDivisorNV"), failing::VertexAttribDivisorNV),
    VertexAttribFormat: FnPtr::new(loadfn("glVertexAttribFormat"), failing::VertexAttribFormat),
    VertexAttribFormatNV: FnPtr::new(loadfn("glVertexAttribFormatNV"), failing::VertexAttribFormatNV),
    VertexAttribI1i: FnPtr::new(loadfn("glVertexAttribI1i"), failing::VertexAttribI1i),
    VertexAttribI1iEXT: FnPtr::new(loadfn("glVertexAttribI1iEXT"), failing::VertexAttribI1iEXT),
    VertexAttribI1iv: FnPtr::new(loadfn("glVertexAttribI1iv"), failing::VertexAttribI1iv),
    VertexAttribI1ivEXT: FnPtr::new(loadfn("glVertexAttribI1ivEXT"), failing::VertexAttribI1ivEXT),
    VertexAttribI1ui: FnPtr::new(loadfn("glVertexAttribI1ui"), failing::VertexAttribI1ui),
    VertexAttribI1uiEXT: FnPtr::new(loadfn("glVertexAttribI1uiEXT"), failing::VertexAttribI1uiEXT),
    VertexAttribI1uiv: FnPtr::new(loadfn("glVertexAttribI1uiv"), failing::VertexAttribI1uiv),
    VertexAttribI1uivEXT: FnPtr::new(loadfn("glVertexAttribI1uivEXT"), failing::VertexAttribI1uivEXT),
    VertexAttribI2i: FnPtr::new(loadfn("glVertexAttribI2i"), failing::VertexAttribI2i),
    VertexAttribI2iEXT: FnPtr::new(loadfn("glVertexAttribI2iEXT"), failing::VertexAttribI2iEXT),
    VertexAttribI2iv: FnPtr::new(loadfn("glVertexAttribI2iv"), failing::VertexAttribI2iv),
    VertexAttribI2ivEXT: FnPtr::new(loadfn("glVertexAttribI2ivEXT"), failing::VertexAttribI2ivEXT),
    VertexAttribI2ui: FnPtr::new(loadfn("glVertexAttribI2ui"), failing::VertexAttribI2ui),
    VertexAttribI2uiEXT: FnPtr::new(loadfn("glVertexAttribI2uiEXT"), failing::VertexAttribI2uiEXT),
    VertexAttribI2uiv: FnPtr::new(loadfn("glVertexAttribI2uiv"), failing::VertexAttribI2uiv),
    VertexAttribI2uivEXT: FnPtr::new(loadfn("glVertexAttribI2uivEXT"), failing::VertexAttribI2uivEXT),
    VertexAttribI3i: FnPtr::new(loadfn("glVertexAttribI3i"), failing::VertexAttribI3i),
    VertexAttribI3iEXT: FnPtr::new(loadfn("glVertexAttribI3iEXT"), failing::VertexAttribI3iEXT),
    VertexAttribI3iv: FnPtr::new(loadfn("glVertexAttribI3iv"), failing::VertexAttribI3iv),
    VertexAttribI3ivEXT: FnPtr::new(loadfn("glVertexAttribI3ivEXT"), failing::VertexAttribI3ivEXT),
    VertexAttribI3ui: FnPtr::new(loadfn("glVertexAttribI3ui"), failing::VertexAttribI3ui),
    VertexAttribI3uiEXT: FnPtr::new(loadfn("glVertexAttribI3uiEXT"), failing::VertexAttribI3uiEXT),
    VertexAttribI3uiv: FnPtr::new(loadfn("glVertexAttribI3uiv"), failing::VertexAttribI3uiv),
    VertexAttribI3uivEXT: FnPtr::new(loadfn("glVertexAttribI3uivEXT"), failing::VertexAttribI3uivEXT),
    VertexAttribI4bv: FnPtr::new(loadfn("glVertexAttribI4bv"), failing::VertexAttribI4bv),
    VertexAttribI4bvEXT: FnPtr::new(loadfn("glVertexAttribI4bvEXT"), failing::VertexAttribI4bvEXT),
    VertexAttribI4i: FnPtr::new(loadfn("glVertexAttribI4i"), failing::VertexAttribI4i),
    VertexAttribI4iEXT: FnPtr::new(loadfn("glVertexAttribI4iEXT"), failing::VertexAttribI4iEXT),
    VertexAttribI4iv: FnPtr::new(loadfn("glVertexAttribI4iv"), failing::VertexAttribI4iv),
    VertexAttribI4ivEXT: FnPtr::new(loadfn("glVertexAttribI4ivEXT"), failing::VertexAttribI4ivEXT),
    VertexAttribI4sv: FnPtr::new(loadfn("glVertexAttribI4sv"), failing::VertexAttribI4sv),
    VertexAttribI4svEXT: FnPtr::new(loadfn("glVertexAttribI4svEXT"), failing::VertexAttribI4svEXT),
    VertexAttribI4ubv: FnPtr::new(loadfn("glVertexAttribI4ubv"), failing::VertexAttribI4ubv),
    VertexAttribI4ubvEXT: FnPtr::new(loadfn("glVertexAttribI4ubvEXT"), failing::VertexAttribI4ubvEXT),
    VertexAttribI4ui: FnPtr::new(loadfn("glVertexAttribI4ui"), failing::VertexAttribI4ui),
    VertexAttribI4uiEXT: FnPtr::new(loadfn("glVertexAttribI4uiEXT"), failing::VertexAttribI4uiEXT),
    VertexAttribI4uiv: FnPtr::new(loadfn("glVertexAttribI4uiv"), failing::VertexAttribI4uiv),
    VertexAttribI4uivEXT: FnPtr::new(loadfn("glVertexAttribI4uivEXT"), failing::VertexAttribI4uivEXT),
    VertexAttribI4usv: FnPtr::new(loadfn("glVertexAttribI4usv"), failing::VertexAttribI4usv),
    VertexAttribI4usvEXT: FnPtr::new(loadfn("glVertexAttribI4usvEXT"), failing::VertexAttribI4usvEXT),
    VertexAttribIFormat: FnPtr::new(loadfn("glVertexAttribIFormat"), failing::VertexAttribIFormat),
    VertexAttribIFormatNV: FnPtr::new(loadfn("glVertexAttribIFormatNV"), failing::VertexAttribIFormatNV),
    VertexAttribIPointer: FnPtr::new(loadfn("glVertexAttribIPointer"), failing::VertexAttribIPointer),
    VertexAttribIPointerEXT: FnPtr::new(loadfn("glVertexAttribIPointerEXT"), failing::VertexAttribIPointerEXT),
    VertexAttribL1d: FnPtr::new(loadfn("glVertexAttribL1d"), failing::VertexAttribL1d),
    VertexAttribL1dEXT: FnPtr::new(loadfn("glVertexAttribL1dEXT"), failing::VertexAttribL1dEXT),
    VertexAttribL1dv: FnPtr::new(loadfn("glVertexAttribL1dv"), failing::VertexAttribL1dv),
    VertexAttribL1dvEXT: FnPtr::new(loadfn("glVertexAttribL1dvEXT"), failing::VertexAttribL1dvEXT),
    VertexAttribL1i64NV: FnPtr::new(loadfn("glVertexAttribL1i64NV"), failing::VertexAttribL1i64NV),
    VertexAttribL1i64vNV: FnPtr::new(loadfn("glVertexAttribL1i64vNV"), failing::VertexAttribL1i64vNV),
    VertexAttribL1ui64ARB: FnPtr::new(loadfn("glVertexAttribL1ui64ARB"), failing::VertexAttribL1ui64ARB),
    VertexAttribL1ui64NV: FnPtr::new(loadfn("glVertexAttribL1ui64NV"), failing::VertexAttribL1ui64NV),
    VertexAttribL1ui64vARB: FnPtr::new(loadfn("glVertexAttribL1ui64vARB"), failing::VertexAttribL1ui64vARB),
    VertexAttribL1ui64vNV: FnPtr::new(loadfn("glVertexAttribL1ui64vNV"), failing::VertexAttribL1ui64vNV),
    VertexAttribL2d: FnPtr::new(loadfn("glVertexAttribL2d"), failing::VertexAttribL2d),
    VertexAttribL2dEXT: FnPtr::new(loadfn("glVertexAttribL2dEXT"), failing::VertexAttribL2dEXT),
    VertexAttribL2dv: FnPtr::new(loadfn("glVertexAttribL2dv"), failing::VertexAttribL2dv),
    VertexAttribL2dvEXT: FnPtr::new(loadfn("glVertexAttribL2dvEXT"), failing::VertexAttribL2dvEXT),
    VertexAttribL2i64NV: FnPtr::new(loadfn("glVertexAttribL2i64NV"), failing::VertexAttribL2i64NV),
    VertexAttribL2i64vNV: FnPtr::new(loadfn("glVertexAttribL2i64vNV"), failing::VertexAttribL2i64vNV),
    VertexAttribL2ui64NV: FnPtr::new(loadfn("glVertexAttribL2ui64NV"), failing::VertexAttribL2ui64NV),
    VertexAttribL2ui64vNV: FnPtr::new(loadfn("glVertexAttribL2ui64vNV"), failing::VertexAttribL2ui64vNV),
    VertexAttribL3d: FnPtr::new(loadfn("glVertexAttribL3d"), failing::VertexAttribL3d),
    VertexAttribL3dEXT: FnPtr::new(loadfn("glVertexAttribL3dEXT"), failing::VertexAttribL3dEXT),
    VertexAttribL3dv: FnPtr::new(loadfn("glVertexAttribL3dv"), failing::VertexAttribL3dv),
    VertexAttribL3dvEXT: FnPtr::new(loadfn("glVertexAttribL3dvEXT"), failing::VertexAttribL3dvEXT),
    VertexAttribL3i64NV: FnPtr::new(loadfn("glVertexAttribL3i64NV"), failing::VertexAttribL3i64NV),
    VertexAttribL3i64vNV: FnPtr::new(loadfn("glVertexAttribL3i64vNV"), failing::VertexAttribL3i64vNV),
    VertexAttribL3ui64NV: FnPtr::new(loadfn("glVertexAttribL3ui64NV"), failing::VertexAttribL3ui64NV),
    VertexAttribL3ui64vNV: FnPtr::new(loadfn("glVertexAttribL3ui64vNV"), failing::VertexAttribL3ui64vNV),
    VertexAttribL4d: FnPtr::new(loadfn("glVertexAttribL4d"), failing::VertexAttribL4d),
    VertexAttribL4dEXT: FnPtr::new(loadfn("glVertexAttribL4dEXT"), failing::VertexAttribL4dEXT),
    VertexAttribL4dv: FnPtr::new(loadfn("glVertexAttribL4dv"), failing::VertexAttribL4dv),
    VertexAttribL4dvEXT: FnPtr::new(loadfn("glVertexAttribL4dvEXT"), failing::VertexAttribL4dvEXT),
    VertexAttribL4i64NV: FnPtr::new(loadfn("glVertexAttribL4i64NV"), failing::VertexAttribL4i64NV),
    VertexAttribL4i64vNV: FnPtr::new(loadfn("glVertexAttribL4i64vNV"), failing::VertexAttribL4i64vNV),
    VertexAttribL4ui64NV: FnPtr::new(loadfn("glVertexAttribL4ui64NV"), failing::VertexAttribL4ui64NV),
    VertexAttribL4ui64vNV: FnPtr::new(loadfn("glVertexAttribL4ui64vNV"), failing::VertexAttribL4ui64vNV),
    VertexAttribLFormat: FnPtr::new(loadfn("glVertexAttribLFormat"), failing::VertexAttribLFormat),
    VertexAttribLFormatNV: FnPtr::new(loadfn("glVertexAttribLFormatNV"), failing::VertexAttribLFormatNV),
    VertexAttribLPointer: FnPtr::new(loadfn("glVertexAttribLPointer"), failing::VertexAttribLPointer),
    VertexAttribLPointerEXT: FnPtr::new(loadfn("glVertexAttribLPointerEXT"), failing::VertexAttribLPointerEXT),
    VertexAttribP1ui: FnPtr::new(loadfn("glVertexAttribP1ui"), failing::VertexAttribP1ui),
    VertexAttribP1uiv: FnPtr::new(loadfn("glVertexAttribP1uiv"), failing::VertexAttribP1uiv),
    VertexAttribP2ui: FnPtr::new(loadfn("glVertexAttribP2ui"), failing::VertexAttribP2ui),
    VertexAttribP2uiv: FnPtr::new(loadfn("glVertexAttribP2uiv"), failing::VertexAttribP2uiv),
    VertexAttribP3ui: FnPtr::new(loadfn("glVertexAttribP3ui"), failing::VertexAttribP3ui),
    VertexAttribP3uiv: FnPtr::new(loadfn("glVertexAttribP3uiv"), failing::VertexAttribP3uiv),
    VertexAttribP4ui: FnPtr::new(loadfn("glVertexAttribP4ui"), failing::VertexAttribP4ui),
    VertexAttribP4uiv: FnPtr::new(loadfn("glVertexAttribP4uiv"), failing::VertexAttribP4uiv),
    VertexAttribParameteriAMD: FnPtr::new(loadfn("glVertexAttribParameteriAMD"), failing::VertexAttribParameteriAMD),
    VertexAttribPointer: FnPtr::new(loadfn("glVertexAttribPointer"), failing::VertexAttribPointer),
    VertexAttribPointerARB: FnPtr::new(loadfn("glVertexAttribPointerARB"), failing::VertexAttribPointerARB),
    VertexAttribPointerNV: FnPtr::new(loadfn("glVertexAttribPointerNV"), failing::VertexAttribPointerNV),
    VertexAttribs1dvNV: FnPtr::new(loadfn("glVertexAttribs1dvNV"), failing::VertexAttribs1dvNV),
    VertexAttribs1fvNV: FnPtr::new(loadfn("glVertexAttribs1fvNV"), failing::VertexAttribs1fvNV),
    VertexAttribs1hvNV: FnPtr::new(loadfn("glVertexAttribs1hvNV"), failing::VertexAttribs1hvNV),
    VertexAttribs1svNV: FnPtr::new(loadfn("glVertexAttribs1svNV"), failing::VertexAttribs1svNV),
    VertexAttribs2dvNV: FnPtr::new(loadfn("glVertexAttribs2dvNV"), failing::VertexAttribs2dvNV),
    VertexAttribs2fvNV: FnPtr::new(loadfn("glVertexAttribs2fvNV"), failing::VertexAttribs2fvNV),
    VertexAttribs2hvNV: FnPtr::new(loadfn("glVertexAttribs2hvNV"), failing::VertexAttribs2hvNV),
    VertexAttribs2svNV: FnPtr::new(loadfn("glVertexAttribs2svNV"), failing::VertexAttribs2svNV),
    VertexAttribs3dvNV: FnPtr::new(loadfn("glVertexAttribs3dvNV"), failing::VertexAttribs3dvNV),
    VertexAttribs3fvNV: FnPtr::new(loadfn("glVertexAttribs3fvNV"), failing::VertexAttribs3fvNV),
    VertexAttribs3hvNV: FnPtr::new(loadfn("glVertexAttribs3hvNV"), failing::VertexAttribs3hvNV),
    VertexAttribs3svNV: FnPtr::new(loadfn("glVertexAttribs3svNV"), failing::VertexAttribs3svNV),
    VertexAttribs4dvNV: FnPtr::new(loadfn("glVertexAttribs4dvNV"), failing::VertexAttribs4dvNV),
    VertexAttribs4fvNV: FnPtr::new(loadfn("glVertexAttribs4fvNV"), failing::VertexAttribs4fvNV),
    VertexAttribs4hvNV: FnPtr::new(loadfn("glVertexAttribs4hvNV"), failing::VertexAttribs4hvNV),
    VertexAttribs4svNV: FnPtr::new(loadfn("glVertexAttribs4svNV"), failing::VertexAttribs4svNV),
    VertexAttribs4ubvNV: FnPtr::new(loadfn("glVertexAttribs4ubvNV"), failing::VertexAttribs4ubvNV),
    VertexBindingDivisor: FnPtr::new(loadfn("glVertexBindingDivisor"), failing::VertexBindingDivisor),
    VertexBlendARB: FnPtr::new(loadfn("glVertexBlendARB"), failing::VertexBlendARB),
    VertexBlendEnvfATI: FnPtr::new(loadfn("glVertexBlendEnvfATI"), failing::VertexBlendEnvfATI),
    VertexBlendEnviATI: FnPtr::new(loadfn("glVertexBlendEnviATI"), failing::VertexBlendEnviATI),
    VertexFormatNV: FnPtr::new(loadfn("glVertexFormatNV"), failing::VertexFormatNV),
    VertexP2ui: FnPtr::new(loadfn("glVertexP2ui"), failing::VertexP2ui),
    VertexP2uiv: FnPtr::new(loadfn("glVertexP2uiv"), failing::VertexP2uiv),
    VertexP3ui: FnPtr::new(loadfn("glVertexP3ui"), failing::VertexP3ui),
    VertexP3uiv: FnPtr::new(loadfn("glVertexP3uiv"), failing::VertexP3uiv),
    VertexP4ui: FnPtr::new(loadfn("glVertexP4ui"), failing::VertexP4ui),
    VertexP4uiv: FnPtr::new(loadfn("glVertexP4uiv"), failing::VertexP4uiv),
    VertexPointer: FnPtr::new(loadfn("glVertexPointer"), failing::VertexPointer),
    VertexPointerEXT: FnPtr::new(loadfn("glVertexPointerEXT"), failing::VertexPointerEXT),
    VertexPointerListIBM: FnPtr::new(loadfn("glVertexPointerListIBM"), failing::VertexPointerListIBM),
    VertexPointervINTEL: FnPtr::new(loadfn("glVertexPointervINTEL"), failing::VertexPointervINTEL),
    VertexStream1dATI: FnPtr::new(loadfn("glVertexStream1dATI"), failing::VertexStream1dATI),
    VertexStream1dvATI: FnPtr::new(loadfn("glVertexStream1dvATI"), failing::VertexStream1dvATI),
    VertexStream1fATI: FnPtr::new(loadfn("glVertexStream1fATI"), failing::VertexStream1fATI),
    VertexStream1fvATI: FnPtr::new(loadfn("glVertexStream1fvATI"), failing::VertexStream1fvATI),
    VertexStream1iATI: FnPtr::new(loadfn("glVertexStream1iATI"), failing::VertexStream1iATI),
    VertexStream1ivATI: FnPtr::new(loadfn("glVertexStream1ivATI"), failing::VertexStream1ivATI),
    VertexStream1sATI: FnPtr::new(loadfn("glVertexStream1sATI"), failing::VertexStream1sATI),
    VertexStream1svATI: FnPtr::new(loadfn("glVertexStream1svATI"), failing::VertexStream1svATI),
    VertexStream2dATI: FnPtr::new(loadfn("glVertexStream2dATI"), failing::VertexStream2dATI),
    VertexStream2dvATI: FnPtr::new(loadfn("glVertexStream2dvATI"), failing::VertexStream2dvATI),
    VertexStream2fATI: FnPtr::new(loadfn("glVertexStream2fATI"), failing::VertexStream2fATI),
    VertexStream2fvATI: FnPtr::new(loadfn("glVertexStream2fvATI"), failing::VertexStream2fvATI),
    VertexStream2iATI: FnPtr::new(loadfn("glVertexStream2iATI"), failing::VertexStream2iATI),
    VertexStream2ivATI: FnPtr::new(loadfn("glVertexStream2ivATI"), failing::VertexStream2ivATI),
    VertexStream2sATI: FnPtr::new(loadfn("glVertexStream2sATI"), failing::VertexStream2sATI),
    VertexStream2svATI: FnPtr::new(loadfn("glVertexStream2svATI"), failing::VertexStream2svATI),
    VertexStream3dATI: FnPtr::new(loadfn("glVertexStream3dATI"), failing::VertexStream3dATI),
    VertexStream3dvATI: FnPtr::new(loadfn("glVertexStream3dvATI"), failing::VertexStream3dvATI),
    VertexStream3fATI: FnPtr::new(loadfn("glVertexStream3fATI"), failing::VertexStream3fATI),
    VertexStream3fvATI: FnPtr::new(loadfn("glVertexStream3fvATI"), failing::VertexStream3fvATI),
    VertexStream3iATI: FnPtr::new(loadfn("glVertexStream3iATI"), failing::VertexStream3iATI),
    VertexStream3ivATI: FnPtr::new(loadfn("glVertexStream3ivATI"), failing::VertexStream3ivATI),
    VertexStream3sATI: FnPtr::new(loadfn("glVertexStream3sATI"), failing::VertexStream3sATI),
    VertexStream3svATI: FnPtr::new(loadfn("glVertexStream3svATI"), failing::VertexStream3svATI),
    VertexStream4dATI: FnPtr::new(loadfn("glVertexStream4dATI"), failing::VertexStream4dATI),
    VertexStream4dvATI: FnPtr::new(loadfn("glVertexStream4dvATI"), failing::VertexStream4dvATI),
    VertexStream4fATI: FnPtr::new(loadfn("glVertexStream4fATI"), failing::VertexStream4fATI),
    VertexStream4fvATI: FnPtr::new(loadfn("glVertexStream4fvATI"), failing::VertexStream4fvATI),
    VertexStream4iATI: FnPtr::new(loadfn("glVertexStream4iATI"), failing::VertexStream4iATI),
    VertexStream4ivATI: FnPtr::new(loadfn("glVertexStream4ivATI"), failing::VertexStream4ivATI),
    VertexStream4sATI: FnPtr::new(loadfn("glVertexStream4sATI"), failing::VertexStream4sATI),
    VertexStream4svATI: FnPtr::new(loadfn("glVertexStream4svATI"), failing::VertexStream4svATI),
    VertexWeightPointerEXT: FnPtr::new(loadfn("glVertexWeightPointerEXT"), failing::VertexWeightPointerEXT),
    VertexWeightfEXT: FnPtr::new(loadfn("glVertexWeightfEXT"), failing::VertexWeightfEXT),
    VertexWeightfvEXT: FnPtr::new(loadfn("glVertexWeightfvEXT"), failing::VertexWeightfvEXT),
    VertexWeighthNV: FnPtr::new(loadfn("glVertexWeighthNV"), failing::VertexWeighthNV),
    VertexWeighthvNV: FnPtr::new(loadfn("glVertexWeighthvNV"), failing::VertexWeighthvNV),
    VideoCaptureNV: FnPtr::new(loadfn("glVideoCaptureNV"), failing::VideoCaptureNV),
    VideoCaptureStreamParameterdvNV: FnPtr::new(loadfn("glVideoCaptureStreamParameterdvNV"), failing::VideoCaptureStreamParameterdvNV),
    VideoCaptureStreamParameterfvNV: FnPtr::new(loadfn("glVideoCaptureStreamParameterfvNV"), failing::VideoCaptureStreamParameterfvNV),
    VideoCaptureStreamParameterivNV: FnPtr::new(loadfn("glVideoCaptureStreamParameterivNV"), failing::VideoCaptureStreamParameterivNV),
    Viewport: FnPtr::new(loadfn("glViewport"), failing::Viewport),
    ViewportArrayv: FnPtr::new(loadfn("glViewportArrayv"), failing::ViewportArrayv),
    ViewportIndexedf: FnPtr::new(loadfn("glViewportIndexedf"), failing::ViewportIndexedf),
    ViewportIndexedfv: FnPtr::new(loadfn("glViewportIndexedfv"), failing::ViewportIndexedfv),
    WaitSync: FnPtr::new(loadfn("glWaitSync"), failing::WaitSync),
    WaitSyncAPPLE: FnPtr::new(loadfn("glWaitSyncAPPLE"), failing::WaitSyncAPPLE),
    WeightPathsNV: FnPtr::new(loadfn("glWeightPathsNV"), failing::WeightPathsNV),
    WeightPointerARB: FnPtr::new(loadfn("glWeightPointerARB"), failing::WeightPointerARB),
    WeightPointerOES: FnPtr::new(loadfn("glWeightPointerOES"), failing::WeightPointerOES),
    WeightbvARB: FnPtr::new(loadfn("glWeightbvARB"), failing::WeightbvARB),
    WeightdvARB: FnPtr::new(loadfn("glWeightdvARB"), failing::WeightdvARB),
    WeightfvARB: FnPtr::new(loadfn("glWeightfvARB"), failing::WeightfvARB),
    WeightivARB: FnPtr::new(loadfn("glWeightivARB"), failing::WeightivARB),
    WeightsvARB: FnPtr::new(loadfn("glWeightsvARB"), failing::WeightsvARB),
    WeightubvARB: FnPtr::new(loadfn("glWeightubvARB"), failing::WeightubvARB),
    WeightuivARB: FnPtr::new(loadfn("glWeightuivARB"), failing::WeightuivARB),
    WeightusvARB: FnPtr::new(loadfn("glWeightusvARB"), failing::WeightusvARB),
    WindowPos2d: FnPtr::new(loadfn("glWindowPos2d"), failing::WindowPos2d),
    WindowPos2dARB: FnPtr::new(loadfn("glWindowPos2dARB"), failing::WindowPos2dARB),
    WindowPos2dMESA: FnPtr::new(loadfn("glWindowPos2dMESA"), failing::WindowPos2dMESA),
    WindowPos2dv: FnPtr::new(loadfn("glWindowPos2dv"), failing::WindowPos2dv),
    WindowPos2dvARB: FnPtr::new(loadfn("glWindowPos2dvARB"), failing::WindowPos2dvARB),
    WindowPos2dvMESA: FnPtr::new(loadfn("glWindowPos2dvMESA"), failing::WindowPos2dvMESA),
    WindowPos2f: FnPtr::new(loadfn("glWindowPos2f"), failing::WindowPos2f),
    WindowPos2fARB: FnPtr::new(loadfn("glWindowPos2fARB"), failing::WindowPos2fARB),
    WindowPos2fMESA: FnPtr::new(loadfn("glWindowPos2fMESA"), failing::WindowPos2fMESA),
    WindowPos2fv: FnPtr::new(loadfn("glWindowPos2fv"), failing::WindowPos2fv),
    WindowPos2fvARB: FnPtr::new(loadfn("glWindowPos2fvARB"), failing::WindowPos2fvARB),
    WindowPos2fvMESA: FnPtr::new(loadfn("glWindowPos2fvMESA"), failing::WindowPos2fvMESA),
    WindowPos2i: FnPtr::new(loadfn("glWindowPos2i"), failing::WindowPos2i),
    WindowPos2iARB: FnPtr::new(loadfn("glWindowPos2iARB"), failing::WindowPos2iARB),
    WindowPos2iMESA: FnPtr::new(loadfn("glWindowPos2iMESA"), failing::WindowPos2iMESA),
    WindowPos2iv: FnPtr::new(loadfn("glWindowPos2iv"), failing::WindowPos2iv),
    WindowPos2ivARB: FnPtr::new(loadfn("glWindowPos2ivARB"), failing::WindowPos2ivARB),
    WindowPos2ivMESA: FnPtr::new(loadfn("glWindowPos2ivMESA"), failing::WindowPos2ivMESA),
    WindowPos2s: FnPtr::new(loadfn("glWindowPos2s"), failing::WindowPos2s),
    WindowPos2sARB: FnPtr::new(loadfn("glWindowPos2sARB"), failing::WindowPos2sARB),
    WindowPos2sMESA: FnPtr::new(loadfn("glWindowPos2sMESA"), failing::WindowPos2sMESA),
    WindowPos2sv: FnPtr::new(loadfn("glWindowPos2sv"), failing::WindowPos2sv),
    WindowPos2svARB: FnPtr::new(loadfn("glWindowPos2svARB"), failing::WindowPos2svARB),
    WindowPos2svMESA: FnPtr::new(loadfn("glWindowPos2svMESA"), failing::WindowPos2svMESA),
    WindowPos3d: FnPtr::new(loadfn("glWindowPos3d"), failing::WindowPos3d),
    WindowPos3dARB: FnPtr::new(loadfn("glWindowPos3dARB"), failing::WindowPos3dARB),
    WindowPos3dMESA: FnPtr::new(loadfn("glWindowPos3dMESA"), failing::WindowPos3dMESA),
    WindowPos3dv: FnPtr::new(loadfn("glWindowPos3dv"), failing::WindowPos3dv),
    WindowPos3dvARB: FnPtr::new(loadfn("glWindowPos3dvARB"), failing::WindowPos3dvARB),
    WindowPos3dvMESA: FnPtr::new(loadfn("glWindowPos3dvMESA"), failing::WindowPos3dvMESA),
    WindowPos3f: FnPtr::new(loadfn("glWindowPos3f"), failing::WindowPos3f),
    WindowPos3fARB: FnPtr::new(loadfn("glWindowPos3fARB"), failing::WindowPos3fARB),
    WindowPos3fMESA: FnPtr::new(loadfn("glWindowPos3fMESA"), failing::WindowPos3fMESA),
    WindowPos3fv: FnPtr::new(loadfn("glWindowPos3fv"), failing::WindowPos3fv),
    WindowPos3fvARB: FnPtr::new(loadfn("glWindowPos3fvARB"), failing::WindowPos3fvARB),
    WindowPos3fvMESA: FnPtr::new(loadfn("glWindowPos3fvMESA"), failing::WindowPos3fvMESA),
    WindowPos3i: FnPtr::new(loadfn("glWindowPos3i"), failing::WindowPos3i),
    WindowPos3iARB: FnPtr::new(loadfn("glWindowPos3iARB"), failing::WindowPos3iARB),
    WindowPos3iMESA: FnPtr::new(loadfn("glWindowPos3iMESA"), failing::WindowPos3iMESA),
    WindowPos3iv: FnPtr::new(loadfn("glWindowPos3iv"), failing::WindowPos3iv),
    WindowPos3ivARB: FnPtr::new(loadfn("glWindowPos3ivARB"), failing::WindowPos3ivARB),
    WindowPos3ivMESA: FnPtr::new(loadfn("glWindowPos3ivMESA"), failing::WindowPos3ivMESA),
    WindowPos3s: FnPtr::new(loadfn("glWindowPos3s"), failing::WindowPos3s),
    WindowPos3sARB: FnPtr::new(loadfn("glWindowPos3sARB"), failing::WindowPos3sARB),
    WindowPos3sMESA: FnPtr::new(loadfn("glWindowPos3sMESA"), failing::WindowPos3sMESA),
    WindowPos3sv: FnPtr::new(loadfn("glWindowPos3sv"), failing::WindowPos3sv),
    WindowPos3svARB: FnPtr::new(loadfn("glWindowPos3svARB"), failing::WindowPos3svARB),
    WindowPos3svMESA: FnPtr::new(loadfn("glWindowPos3svMESA"), failing::WindowPos3svMESA),
    WindowPos4dMESA: FnPtr::new(loadfn("glWindowPos4dMESA"), failing::WindowPos4dMESA),
    WindowPos4dvMESA: FnPtr::new(loadfn("glWindowPos4dvMESA"), failing::WindowPos4dvMESA),
    WindowPos4fMESA: FnPtr::new(loadfn("glWindowPos4fMESA"), failing::WindowPos4fMESA),
    WindowPos4fvMESA: FnPtr::new(loadfn("glWindowPos4fvMESA"), failing::WindowPos4fvMESA),
    WindowPos4iMESA: FnPtr::new(loadfn("glWindowPos4iMESA"), failing::WindowPos4iMESA),
    WindowPos4ivMESA: FnPtr::new(loadfn("glWindowPos4ivMESA"), failing::WindowPos4ivMESA),
    WindowPos4sMESA: FnPtr::new(loadfn("glWindowPos4sMESA"), failing::WindowPos4sMESA),
    WindowPos4svMESA: FnPtr::new(loadfn("glWindowPos4svMESA"), failing::WindowPos4svMESA),
    WriteMaskEXT: FnPtr::new(loadfn("glWriteMaskEXT"), failing::WriteMaskEXT),
}
}

impl GL {
    #[fixed_stack_segment] #[inline] pub fn Accum(&self, op: GLenum, value: GLfloat) -> c_void { unsafe { (self.Accum.f)(op, value) } }
    #[fixed_stack_segment] #[inline] pub fn AccumxOES(&self, op: GLenum, value: GLfixed) -> c_void { unsafe { (self.AccumxOES.f)(op, value) } }
    #[fixed_stack_segment] #[inline] pub fn ActiveProgramEXT(&self, program: GLuint) -> c_void { unsafe { (self.ActiveProgramEXT.f)(program) } }
    #[fixed_stack_segment] #[inline] pub fn ActiveShaderProgram(&self, pipeline: GLuint, program: GLuint) -> c_void { unsafe { (self.ActiveShaderProgram.f)(pipeline, program) } }
    #[fixed_stack_segment] #[inline] pub fn ActiveShaderProgramEXT(&self, pipeline: GLuint, program: GLuint) -> c_void { unsafe { (self.ActiveShaderProgramEXT.f)(pipeline, program) } }
    #[fixed_stack_segment] #[inline] pub fn ActiveStencilFaceEXT(&self, face: GLenum) -> c_void { unsafe { (self.ActiveStencilFaceEXT.f)(face) } }
    #[fixed_stack_segment] #[inline] pub fn ActiveTexture(&self, texture: GLenum) -> c_void { unsafe { (self.ActiveTexture.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub fn ActiveTextureARB(&self, texture: GLenum) -> c_void { unsafe { (self.ActiveTextureARB.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ActiveVaryingNV(&self, program: GLuint, name: *GLchar) -> c_void { (self.ActiveVaryingNV.f)(program, name) }
    #[fixed_stack_segment] #[inline] pub fn AlphaFragmentOp1ATI(&self, op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void { unsafe { (self.AlphaFragmentOp1ATI.f)(op, dst, dstMod, arg1, arg1Rep, arg1Mod) } }
    #[fixed_stack_segment] #[inline] pub fn AlphaFragmentOp2ATI(&self, op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void { unsafe { (self.AlphaFragmentOp2ATI.f)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) } }
    #[fixed_stack_segment] #[inline] pub fn AlphaFragmentOp3ATI(&self, op: GLenum, dst: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void { unsafe { (self.AlphaFragmentOp3ATI.f)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) } }
    #[fixed_stack_segment] #[inline] pub fn AlphaFunc(&self, func: GLenum, ref_: GLfloat) -> c_void { unsafe { (self.AlphaFunc.f)(func, ref_) } }
    #[fixed_stack_segment] #[inline] pub fn AlphaFuncQCOM(&self, func: GLenum, ref_: GLclampf) -> c_void { unsafe { (self.AlphaFuncQCOM.f)(func, ref_) } }
    #[fixed_stack_segment] #[inline] pub fn AlphaFuncx(&self, func: GLenum, ref_: GLfixed) -> c_void { unsafe { (self.AlphaFuncx.f)(func, ref_) } }
    #[fixed_stack_segment] #[inline] pub fn AlphaFuncxOES(&self, func: GLenum, ref_: GLfixed) -> c_void { unsafe { (self.AlphaFuncxOES.f)(func, ref_) } }
    #[fixed_stack_segment] #[inline] pub fn ApplyTextureEXT(&self, mode: GLenum) -> c_void { unsafe { (self.ApplyTextureEXT.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn AreProgramsResidentNV(&self, n: GLsizei, programs: *GLuint, residences: *GLboolean) -> GLboolean { (self.AreProgramsResidentNV.f)(n, programs, residences) }
    #[fixed_stack_segment] #[inline] pub unsafe fn AreTexturesResident(&self, n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean { (self.AreTexturesResident.f)(n, textures, residences) }
    #[fixed_stack_segment] #[inline] pub unsafe fn AreTexturesResidentEXT(&self, n: GLsizei, textures: *GLuint, residences: *GLboolean) -> GLboolean { (self.AreTexturesResidentEXT.f)(n, textures, residences) }
    #[fixed_stack_segment] #[inline] pub fn ArrayElement(&self, i: GLint) -> c_void { unsafe { (self.ArrayElement.f)(i) } }
    #[fixed_stack_segment] #[inline] pub fn ArrayElementEXT(&self, i: GLint) -> c_void { unsafe { (self.ArrayElementEXT.f)(i) } }
    #[fixed_stack_segment] #[inline] pub fn ArrayObjectATI(&self, array: GLenum, size: GLint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { (self.ArrayObjectATI.f)(array, size, type_, stride, buffer, offset) } }
    #[fixed_stack_segment] #[inline] pub fn AsyncMarkerSGIX(&self, marker: GLuint) -> c_void { unsafe { (self.AsyncMarkerSGIX.f)(marker) } }
    #[fixed_stack_segment] #[inline] pub fn AttachObjectARB(&self, containerObj: GLhandleARB, obj: GLhandleARB) -> c_void { unsafe { (self.AttachObjectARB.f)(containerObj, obj) } }
    #[fixed_stack_segment] #[inline] pub fn AttachShader(&self, program: GLuint, shader: GLuint) -> c_void { unsafe { (self.AttachShader.f)(program, shader) } }
    #[fixed_stack_segment] #[inline] pub fn Begin(&self, mode: GLenum) -> c_void { unsafe { (self.Begin.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn BeginConditionalRender(&self, id: GLuint, mode: GLenum) -> c_void { unsafe { (self.BeginConditionalRender.f)(id, mode) } }
    #[fixed_stack_segment] #[inline] pub fn BeginConditionalRenderNV(&self, id: GLuint, mode: GLenum) -> c_void { unsafe { (self.BeginConditionalRenderNV.f)(id, mode) } }
    #[fixed_stack_segment] #[inline] pub fn BeginConditionalRenderNVX(&self, id: GLuint) -> c_void { unsafe { (self.BeginConditionalRenderNVX.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn BeginFragmentShaderATI(&self) -> c_void { unsafe { (self.BeginFragmentShaderATI.f)() } }
    #[fixed_stack_segment] #[inline] pub fn BeginOcclusionQueryNV(&self, id: GLuint) -> c_void { unsafe { (self.BeginOcclusionQueryNV.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn BeginPerfMonitorAMD(&self, monitor: GLuint) -> c_void { unsafe { (self.BeginPerfMonitorAMD.f)(monitor) } }
    #[fixed_stack_segment] #[inline] pub fn BeginQuery(&self, target: GLenum, id: GLuint) -> c_void { unsafe { (self.BeginQuery.f)(target, id) } }
    #[fixed_stack_segment] #[inline] pub fn BeginQueryARB(&self, target: GLenum, id: GLuint) -> c_void { unsafe { (self.BeginQueryARB.f)(target, id) } }
    #[fixed_stack_segment] #[inline] pub fn BeginQueryEXT(&self, target: GLenum, id: GLuint) -> c_void { unsafe { (self.BeginQueryEXT.f)(target, id) } }
    #[fixed_stack_segment] #[inline] pub fn BeginQueryIndexed(&self, target: GLenum, index: GLuint, id: GLuint) -> c_void { unsafe { (self.BeginQueryIndexed.f)(target, index, id) } }
    #[fixed_stack_segment] #[inline] pub fn BeginTransformFeedback(&self, primitiveMode: GLenum) -> c_void { unsafe { (self.BeginTransformFeedback.f)(primitiveMode) } }
    #[fixed_stack_segment] #[inline] pub fn BeginTransformFeedbackEXT(&self, primitiveMode: GLenum) -> c_void { unsafe { (self.BeginTransformFeedbackEXT.f)(primitiveMode) } }
    #[fixed_stack_segment] #[inline] pub fn BeginTransformFeedbackNV(&self, primitiveMode: GLenum) -> c_void { unsafe { (self.BeginTransformFeedbackNV.f)(primitiveMode) } }
    #[fixed_stack_segment] #[inline] pub fn BeginVertexShaderEXT(&self) -> c_void { unsafe { (self.BeginVertexShaderEXT.f)() } }
    #[fixed_stack_segment] #[inline] pub fn BeginVideoCaptureNV(&self, video_capture_slot: GLuint) -> c_void { unsafe { (self.BeginVideoCaptureNV.f)(video_capture_slot) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindAttribLocation(&self, program: GLuint, index: GLuint, name: *GLchar) -> c_void { (self.BindAttribLocation.f)(program, index, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindAttribLocationARB(&self, programObj: GLhandleARB, index: GLuint, name: *GLcharARB) -> c_void { (self.BindAttribLocationARB.f)(programObj, index, name) }
    #[fixed_stack_segment] #[inline] pub fn BindBuffer(&self, target: GLenum, buffer: GLuint) -> c_void { unsafe { (self.BindBuffer.f)(target, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferARB(&self, target: GLenum, buffer: GLuint) -> c_void { unsafe { (self.BindBufferARB.f)(target, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferBase(&self, target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { (self.BindBufferBase.f)(target, index, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferBaseEXT(&self, target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { (self.BindBufferBaseEXT.f)(target, index, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferBaseNV(&self, target: GLenum, index: GLuint, buffer: GLuint) -> c_void { unsafe { (self.BindBufferBaseNV.f)(target, index, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferOffsetEXT(&self, target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void { unsafe { (self.BindBufferOffsetEXT.f)(target, index, buffer, offset) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferOffsetNV(&self, target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr) -> c_void { unsafe { (self.BindBufferOffsetNV.f)(target, index, buffer, offset) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferRange(&self, target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (self.BindBufferRange.f)(target, index, buffer, offset, size) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferRangeEXT(&self, target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (self.BindBufferRangeEXT.f)(target, index, buffer, offset, size) } }
    #[fixed_stack_segment] #[inline] pub fn BindBufferRangeNV(&self, target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (self.BindBufferRangeNV.f)(target, index, buffer, offset, size) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindBuffersBase(&self, target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint) -> c_void { (self.BindBuffersBase.f)(target, first, count, buffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindBuffersRange(&self, target: GLenum, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, sizes: *GLsizeiptr) -> c_void { (self.BindBuffersRange.f)(target, first, count, buffers, offsets, sizes) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindFragDataLocation(&self, program: GLuint, color: GLuint, name: *GLchar) -> c_void { (self.BindFragDataLocation.f)(program, color, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindFragDataLocationEXT(&self, program: GLuint, color: GLuint, name: *GLchar) -> c_void { (self.BindFragDataLocationEXT.f)(program, color, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindFragDataLocationIndexed(&self, program: GLuint, colorNumber: GLuint, index: GLuint, name: *GLchar) -> c_void { (self.BindFragDataLocationIndexed.f)(program, colorNumber, index, name) }
    #[fixed_stack_segment] #[inline] pub fn BindFragmentShaderATI(&self, id: GLuint) -> c_void { unsafe { (self.BindFragmentShaderATI.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn BindFramebuffer(&self, target: GLenum, framebuffer: GLuint) -> c_void { unsafe { (self.BindFramebuffer.f)(target, framebuffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindFramebufferEXT(&self, target: GLenum, framebuffer: GLuint) -> c_void { unsafe { (self.BindFramebufferEXT.f)(target, framebuffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindFramebufferOES(&self, target: GLenum, framebuffer: GLuint) -> c_void { unsafe { (self.BindFramebufferOES.f)(target, framebuffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindImageTexture(&self, unit: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> c_void { unsafe { (self.BindImageTexture.f)(unit, texture, level, layered, layer, access, format) } }
    #[fixed_stack_segment] #[inline] pub fn BindImageTextureEXT(&self, index: GLuint, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLint) -> c_void { unsafe { (self.BindImageTextureEXT.f)(index, texture, level, layered, layer, access, format) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindImageTextures(&self, first: GLuint, count: GLsizei, textures: *GLuint) -> c_void { (self.BindImageTextures.f)(first, count, textures) }
    #[fixed_stack_segment] #[inline] pub fn BindLightParameterEXT(&self, light: GLenum, value: GLenum) -> GLuint { unsafe { (self.BindLightParameterEXT.f)(light, value) } }
    #[fixed_stack_segment] #[inline] pub fn BindMaterialParameterEXT(&self, face: GLenum, value: GLenum) -> GLuint { unsafe { (self.BindMaterialParameterEXT.f)(face, value) } }
    #[fixed_stack_segment] #[inline] pub fn BindMultiTextureEXT(&self, texunit: GLenum, target: GLenum, texture: GLuint) -> c_void { unsafe { (self.BindMultiTextureEXT.f)(texunit, target, texture) } }
    #[fixed_stack_segment] #[inline] pub fn BindParameterEXT(&self, value: GLenum) -> GLuint { unsafe { (self.BindParameterEXT.f)(value) } }
    #[fixed_stack_segment] #[inline] pub fn BindProgramARB(&self, target: GLenum, program: GLuint) -> c_void { unsafe { (self.BindProgramARB.f)(target, program) } }
    #[fixed_stack_segment] #[inline] pub fn BindProgramNV(&self, target: GLenum, id: GLuint) -> c_void { unsafe { (self.BindProgramNV.f)(target, id) } }
    #[fixed_stack_segment] #[inline] pub fn BindProgramPipeline(&self, pipeline: GLuint) -> c_void { unsafe { (self.BindProgramPipeline.f)(pipeline) } }
    #[fixed_stack_segment] #[inline] pub fn BindProgramPipelineEXT(&self, pipeline: GLuint) -> c_void { unsafe { (self.BindProgramPipelineEXT.f)(pipeline) } }
    #[fixed_stack_segment] #[inline] pub fn BindRenderbuffer(&self, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.BindRenderbuffer.f)(target, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindRenderbufferEXT(&self, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.BindRenderbufferEXT.f)(target, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindRenderbufferOES(&self, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.BindRenderbufferOES.f)(target, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn BindSampler(&self, unit: GLuint, sampler: GLuint) -> c_void { unsafe { (self.BindSampler.f)(unit, sampler) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindSamplers(&self, first: GLuint, count: GLsizei, samplers: *GLuint) -> c_void { (self.BindSamplers.f)(first, count, samplers) }
    #[fixed_stack_segment] #[inline] pub fn BindTexGenParameterEXT(&self, unit: GLenum, coord: GLenum, value: GLenum) -> GLuint { unsafe { (self.BindTexGenParameterEXT.f)(unit, coord, value) } }
    #[fixed_stack_segment] #[inline] pub fn BindTexture(&self, target: GLenum, texture: GLuint) -> c_void { unsafe { (self.BindTexture.f)(target, texture) } }
    #[fixed_stack_segment] #[inline] pub fn BindTextureEXT(&self, target: GLenum, texture: GLuint) -> c_void { unsafe { (self.BindTextureEXT.f)(target, texture) } }
    #[fixed_stack_segment] #[inline] pub fn BindTextureUnitParameterEXT(&self, unit: GLenum, value: GLenum) -> GLuint { unsafe { (self.BindTextureUnitParameterEXT.f)(unit, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindTextures(&self, first: GLuint, count: GLsizei, textures: *GLuint) -> c_void { (self.BindTextures.f)(first, count, textures) }
    #[fixed_stack_segment] #[inline] pub fn BindTransformFeedback(&self, target: GLenum, id: GLuint) -> c_void { unsafe { (self.BindTransformFeedback.f)(target, id) } }
    #[fixed_stack_segment] #[inline] pub fn BindTransformFeedbackNV(&self, target: GLenum, id: GLuint) -> c_void { unsafe { (self.BindTransformFeedbackNV.f)(target, id) } }
    #[fixed_stack_segment] #[inline] pub fn BindVertexArray(&self, array: GLuint) -> c_void { unsafe { (self.BindVertexArray.f)(array) } }
    #[fixed_stack_segment] #[inline] pub fn BindVertexArrayAPPLE(&self, array: GLuint) -> c_void { unsafe { (self.BindVertexArrayAPPLE.f)(array) } }
    #[fixed_stack_segment] #[inline] pub fn BindVertexArrayOES(&self, array: GLuint) -> c_void { unsafe { (self.BindVertexArrayOES.f)(array) } }
    #[fixed_stack_segment] #[inline] pub fn BindVertexBuffer(&self, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void { unsafe { (self.BindVertexBuffer.f)(bindingindex, buffer, offset, stride) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn BindVertexBuffers(&self, first: GLuint, count: GLsizei, buffers: *GLuint, offsets: *GLintptr, strides: *GLsizei) -> c_void { (self.BindVertexBuffers.f)(first, count, buffers, offsets, strides) }
    #[fixed_stack_segment] #[inline] pub fn BindVertexShaderEXT(&self, id: GLuint) -> c_void { unsafe { (self.BindVertexShaderEXT.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn BindVideoCaptureStreamBufferNV(&self, video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, offset: GLintptrARB) -> c_void { unsafe { (self.BindVideoCaptureStreamBufferNV.f)(video_capture_slot, stream, frame_region, offset) } }
    #[fixed_stack_segment] #[inline] pub fn BindVideoCaptureStreamTextureNV(&self, video_capture_slot: GLuint, stream: GLuint, frame_region: GLenum, target: GLenum, texture: GLuint) -> c_void { unsafe { (self.BindVideoCaptureStreamTextureNV.f)(video_capture_slot, stream, frame_region, target, texture) } }
    #[fixed_stack_segment] #[inline] pub fn Binormal3bEXT(&self, bx: GLbyte, by: GLbyte, bz: GLbyte) -> c_void { unsafe { (self.Binormal3bEXT.f)(bx, by, bz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Binormal3bvEXT(&self, v: *GLbyte) -> c_void { (self.Binormal3bvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Binormal3dEXT(&self, bx: GLdouble, by: GLdouble, bz: GLdouble) -> c_void { unsafe { (self.Binormal3dEXT.f)(bx, by, bz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Binormal3dvEXT(&self, v: *GLdouble) -> c_void { (self.Binormal3dvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Binormal3fEXT(&self, bx: GLfloat, by: GLfloat, bz: GLfloat) -> c_void { unsafe { (self.Binormal3fEXT.f)(bx, by, bz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Binormal3fvEXT(&self, v: *GLfloat) -> c_void { (self.Binormal3fvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Binormal3iEXT(&self, bx: GLint, by: GLint, bz: GLint) -> c_void { unsafe { (self.Binormal3iEXT.f)(bx, by, bz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Binormal3ivEXT(&self, v: *GLint) -> c_void { (self.Binormal3ivEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Binormal3sEXT(&self, bx: GLshort, by: GLshort, bz: GLshort) -> c_void { unsafe { (self.Binormal3sEXT.f)(bx, by, bz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Binormal3svEXT(&self, v: *GLshort) -> c_void { (self.Binormal3svEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BinormalPointerEXT(&self, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.BinormalPointerEXT.f)(type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Bitmap(&self, width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *GLubyte) -> c_void { (self.Bitmap.f)(width, height, xorig, yorig, xmove, ymove, bitmap) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BitmapxOES(&self, width: GLsizei, height: GLsizei, xorig: GLfixed, yorig: GLfixed, xmove: GLfixed, ymove: GLfixed, bitmap: *GLubyte) -> c_void { (self.BitmapxOES.f)(width, height, xorig, yorig, xmove, ymove, bitmap) }
    #[fixed_stack_segment] #[inline] pub fn BlendColor(&self, red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (self.BlendColor.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendColorEXT(&self, red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (self.BlendColorEXT.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendColorxOES(&self, red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (self.BlendColorxOES.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquation(&self, mode: GLenum) -> c_void { unsafe { (self.BlendEquation.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationEXT(&self, mode: GLenum) -> c_void { unsafe { (self.BlendEquationEXT.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationIndexedAMD(&self, buf: GLuint, mode: GLenum) -> c_void { unsafe { (self.BlendEquationIndexedAMD.f)(buf, mode) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationOES(&self, mode: GLenum) -> c_void { unsafe { (self.BlendEquationOES.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationSeparate(&self, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (self.BlendEquationSeparate.f)(modeRGB, modeAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationSeparateEXT(&self, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (self.BlendEquationSeparateEXT.f)(modeRGB, modeAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationSeparateIndexedAMD(&self, buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (self.BlendEquationSeparateIndexedAMD.f)(buf, modeRGB, modeAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationSeparateOES(&self, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (self.BlendEquationSeparateOES.f)(modeRGB, modeAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationSeparatei(&self, buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (self.BlendEquationSeparatei.f)(buf, modeRGB, modeAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationSeparateiARB(&self, buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum) -> c_void { unsafe { (self.BlendEquationSeparateiARB.f)(buf, modeRGB, modeAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationi(&self, buf: GLuint, mode: GLenum) -> c_void { unsafe { (self.BlendEquationi.f)(buf, mode) } }
    #[fixed_stack_segment] #[inline] pub fn BlendEquationiARB(&self, buf: GLuint, mode: GLenum) -> c_void { unsafe { (self.BlendEquationiARB.f)(buf, mode) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFunc(&self, sfactor: GLenum, dfactor: GLenum) -> c_void { unsafe { (self.BlendFunc.f)(sfactor, dfactor) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFuncIndexedAMD(&self, buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { (self.BlendFuncIndexedAMD.f)(buf, src, dst) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFuncSeparate(&self, sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { (self.BlendFuncSeparate.f)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFuncSeparateEXT(&self, sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { (self.BlendFuncSeparateEXT.f)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFuncSeparateINGR(&self, sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> c_void { unsafe { (self.BlendFuncSeparateINGR.f)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFuncSeparateIndexedAMD(&self, buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { (self.BlendFuncSeparateIndexedAMD.f)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFuncSeparateOES(&self, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { (self.BlendFuncSeparateOES.f)(srcRGB, dstRGB, srcAlpha, dstAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFuncSeparatei(&self, buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { (self.BlendFuncSeparatei.f)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFuncSeparateiARB(&self, buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) -> c_void { unsafe { (self.BlendFuncSeparateiARB.f)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFunci(&self, buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { (self.BlendFunci.f)(buf, src, dst) } }
    #[fixed_stack_segment] #[inline] pub fn BlendFunciARB(&self, buf: GLuint, src: GLenum, dst: GLenum) -> c_void { unsafe { (self.BlendFunciARB.f)(buf, src, dst) } }
    #[fixed_stack_segment] #[inline] pub fn BlendParameteriNV(&self, pname: GLenum, value: GLint) -> c_void { unsafe { (self.BlendParameteriNV.f)(pname, value) } }
    #[fixed_stack_segment] #[inline] pub fn BlendBarrierNV(&self) -> c_void { unsafe { (self.BlendBarrierNV.f)() } }
    #[fixed_stack_segment] #[inline] pub fn BlitFramebuffer(&self, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { (self.BlitFramebuffer.f)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
    #[fixed_stack_segment] #[inline] pub fn BlitFramebufferANGLE(&self, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { (self.BlitFramebufferANGLE.f)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
    #[fixed_stack_segment] #[inline] pub fn BlitFramebufferEXT(&self, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { (self.BlitFramebufferEXT.f)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
    #[fixed_stack_segment] #[inline] pub fn BlitFramebufferNV(&self, srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> c_void { unsafe { (self.BlitFramebufferNV.f)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter) } }
    #[fixed_stack_segment] #[inline] pub fn BufferAddressRangeNV(&self, pname: GLenum, index: GLuint, address: GLuint64EXT, length: GLsizeiptr) -> c_void { unsafe { (self.BufferAddressRangeNV.f)(pname, index, address, length) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn BufferData(&self, target: GLenum, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void { (self.BufferData.f)(target, size, data, usage) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BufferDataARB(&self, target: GLenum, size: GLsizeiptrARB, data: *GLvoid, usage: GLenum) -> c_void { (self.BufferDataARB.f)(target, size, data, usage) }
    #[fixed_stack_segment] #[inline] pub fn BufferParameteriAPPLE(&self, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.BufferParameteriAPPLE.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn BufferStorage(&self, target: GLenum, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void { (self.BufferStorage.f)(target, size, data, flags) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BufferSubData(&self, target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { (self.BufferSubData.f)(target, offset, size, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn BufferSubDataARB(&self, target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void { (self.BufferSubDataARB.f)(target, offset, size, data) }
    #[fixed_stack_segment] #[inline] pub fn CallList(&self, list: GLuint) -> c_void { unsafe { (self.CallList.f)(list) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn CallLists(&self, n: GLsizei, type_: GLenum, lists: *GLvoid) -> c_void { (self.CallLists.f)(n, type_, lists) }
    #[fixed_stack_segment] #[inline] pub fn CheckFramebufferStatus(&self, target: GLenum) -> GLenum { unsafe { (self.CheckFramebufferStatus.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn CheckFramebufferStatusEXT(&self, target: GLenum) -> GLenum { unsafe { (self.CheckFramebufferStatusEXT.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn CheckFramebufferStatusOES(&self, target: GLenum) -> GLenum { unsafe { (self.CheckFramebufferStatusOES.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn CheckNamedFramebufferStatusEXT(&self, framebuffer: GLuint, target: GLenum) -> GLenum { unsafe { (self.CheckNamedFramebufferStatusEXT.f)(framebuffer, target) } }
    #[fixed_stack_segment] #[inline] pub fn ClampColor(&self, target: GLenum, clamp: GLenum) -> c_void { unsafe { (self.ClampColor.f)(target, clamp) } }
    #[fixed_stack_segment] #[inline] pub fn ClampColorARB(&self, target: GLenum, clamp: GLenum) -> c_void { unsafe { (self.ClampColorARB.f)(target, clamp) } }
    #[fixed_stack_segment] #[inline] pub fn Clear(&self, mask: GLbitfield) -> c_void { unsafe { (self.Clear.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub fn ClearAccum(&self, red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (self.ClearAccum.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn ClearAccumxOES(&self, red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (self.ClearAccumxOES.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearBufferData(&self, target: GLenum, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void { (self.ClearBufferData.f)(target, internalformat, format, type_, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearBufferSubData(&self, target: GLenum, internalformat: GLenum, offset: GLintptr, size: GLsizeiptr, format: GLenum, type_: GLenum, data: *c_void) -> c_void { (self.ClearBufferSubData.f)(target, internalformat, offset, size, format, type_, data) }
    #[fixed_stack_segment] #[inline] pub fn ClearBufferfi(&self, buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> c_void { unsafe { (self.ClearBufferfi.f)(buffer, drawbuffer, depth, stencil) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearBufferfv(&self, buffer: GLenum, drawbuffer: GLint, value: *GLfloat) -> c_void { (self.ClearBufferfv.f)(buffer, drawbuffer, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearBufferiv(&self, buffer: GLenum, drawbuffer: GLint, value: *GLint) -> c_void { (self.ClearBufferiv.f)(buffer, drawbuffer, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearBufferuiv(&self, buffer: GLenum, drawbuffer: GLint, value: *GLuint) -> c_void { (self.ClearBufferuiv.f)(buffer, drawbuffer, value) }
    #[fixed_stack_segment] #[inline] pub fn ClearColor(&self, red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (self.ClearColor.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn ClearColorIiEXT(&self, red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void { unsafe { (self.ClearColorIiEXT.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn ClearColorIuiEXT(&self, red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void { unsafe { (self.ClearColorIuiEXT.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn ClearColorx(&self, red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (self.ClearColorx.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn ClearColorxOES(&self, red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (self.ClearColorxOES.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn ClearDepth(&self, depth: GLdouble) -> c_void { unsafe { (self.ClearDepth.f)(depth) } }
    #[fixed_stack_segment] #[inline] pub fn ClearDepthdNV(&self, depth: GLdouble) -> c_void { unsafe { (self.ClearDepthdNV.f)(depth) } }
    #[fixed_stack_segment] #[inline] pub fn ClearDepthf(&self, d: GLfloat) -> c_void { unsafe { (self.ClearDepthf.f)(d) } }
    #[fixed_stack_segment] #[inline] pub fn ClearDepthfOES(&self, depth: GLclampf) -> c_void { unsafe { (self.ClearDepthfOES.f)(depth) } }
    #[fixed_stack_segment] #[inline] pub fn ClearDepthx(&self, depth: GLfixed) -> c_void { unsafe { (self.ClearDepthx.f)(depth) } }
    #[fixed_stack_segment] #[inline] pub fn ClearDepthxOES(&self, depth: GLfixed) -> c_void { unsafe { (self.ClearDepthxOES.f)(depth) } }
    #[fixed_stack_segment] #[inline] pub fn ClearIndex(&self, c: GLfloat) -> c_void { unsafe { (self.ClearIndex.f)(c) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearNamedBufferDataEXT(&self, buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, data: *c_void) -> c_void { (self.ClearNamedBufferDataEXT.f)(buffer, internalformat, format, type_, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearNamedBufferSubDataEXT(&self, buffer: GLuint, internalformat: GLenum, format: GLenum, type_: GLenum, offset: GLsizeiptr, size: GLsizeiptr, data: *c_void) -> c_void { (self.ClearNamedBufferSubDataEXT.f)(buffer, internalformat, format, type_, offset, size, data) }
    #[fixed_stack_segment] #[inline] pub fn ClearStencil(&self, s: GLint) -> c_void { unsafe { (self.ClearStencil.f)(s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearTexImage(&self, texture: GLuint, level: GLint, format: GLenum, type_: GLenum, data: *c_void) -> c_void { (self.ClearTexImage.f)(texture, level, format, type_, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClearTexSubImage(&self, texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, data: *c_void) -> c_void { (self.ClearTexSubImage.f)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, data) }
    #[fixed_stack_segment] #[inline] pub fn ClientActiveTexture(&self, texture: GLenum) -> c_void { unsafe { (self.ClientActiveTexture.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub fn ClientActiveTextureARB(&self, texture: GLenum) -> c_void { unsafe { (self.ClientActiveTextureARB.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub fn ClientActiveVertexStreamATI(&self, stream: GLenum) -> c_void { unsafe { (self.ClientActiveVertexStreamATI.f)(stream) } }
    #[fixed_stack_segment] #[inline] pub fn ClientAttribDefaultEXT(&self, mask: GLbitfield) -> c_void { unsafe { (self.ClientAttribDefaultEXT.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub fn ClientWaitSync(&self, sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum { unsafe { (self.ClientWaitSync.f)(sync, flags, timeout) } }
    #[fixed_stack_segment] #[inline] pub fn ClientWaitSyncAPPLE(&self, sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum { unsafe { (self.ClientWaitSyncAPPLE.f)(sync, flags, timeout) } }
    #[fixed_stack_segment] #[inline] pub fn ClipControlARB(&self, origin: GLenum, depth: GLenum) -> c_void { unsafe { (self.ClipControlARB.f)(origin, depth) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClipPlane(&self, plane: GLenum, equation: *GLdouble) -> c_void { (self.ClipPlane.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClipPlanef(&self, p: GLenum, eqn: *GLfloat) -> c_void { (self.ClipPlanef.f)(p, eqn) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClipPlanefIMG(&self, p: GLenum, eqn: *GLfloat) -> c_void { (self.ClipPlanefIMG.f)(p, eqn) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClipPlanefOES(&self, plane: GLenum, equation: *GLfloat) -> c_void { (self.ClipPlanefOES.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClipPlanex(&self, plane: GLenum, equation: *GLfixed) -> c_void { (self.ClipPlanex.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClipPlanexIMG(&self, p: GLenum, eqn: *GLfixed) -> c_void { (self.ClipPlanexIMG.f)(p, eqn) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ClipPlanexOES(&self, plane: GLenum, equation: *GLfixed) -> c_void { (self.ClipPlanexOES.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub fn Color3b(&self, red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { (self.Color3b.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3bv(&self, v: *GLbyte) -> c_void { (self.Color3bv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3d(&self, red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { (self.Color3d.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3dv(&self, v: *GLdouble) -> c_void { (self.Color3dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3f(&self, red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { (self.Color3f.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn Color3fVertex3fSUN(&self, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.Color3fVertex3fSUN.f)(r, g, b, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3fVertex3fvSUN(&self, c: *GLfloat, v: *GLfloat) -> c_void { (self.Color3fVertex3fvSUN.f)(c, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3fv(&self, v: *GLfloat) -> c_void { (self.Color3fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3hNV(&self, red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void { unsafe { (self.Color3hNV.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3hvNV(&self, v: *GLhalfNV) -> c_void { (self.Color3hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3i(&self, red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { (self.Color3i.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3iv(&self, v: *GLint) -> c_void { (self.Color3iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3s(&self, red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { (self.Color3s.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3sv(&self, v: *GLshort) -> c_void { (self.Color3sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3ub(&self, red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { (self.Color3ub.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3ubv(&self, v: *GLubyte) -> c_void { (self.Color3ubv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3ui(&self, red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { (self.Color3ui.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3uiv(&self, v: *GLuint) -> c_void { (self.Color3uiv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3us(&self, red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { (self.Color3us.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3usv(&self, v: *GLushort) -> c_void { (self.Color3usv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color3xOES(&self, red: GLfixed, green: GLfixed, blue: GLfixed) -> c_void { unsafe { (self.Color3xOES.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color3xvOES(&self, components: *GLfixed) -> c_void { (self.Color3xvOES.f)(components) }
    #[fixed_stack_segment] #[inline] pub fn Color4b(&self, red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) -> c_void { unsafe { (self.Color4b.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4bv(&self, v: *GLbyte) -> c_void { (self.Color4bv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4d(&self, red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) -> c_void { unsafe { (self.Color4d.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4dv(&self, v: *GLdouble) -> c_void { (self.Color4dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4f(&self, red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> c_void { unsafe { (self.Color4f.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn Color4fNormal3fVertex3fSUN(&self, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.Color4fNormal3fVertex3fSUN.f)(r, g, b, a, nx, ny, nz, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4fNormal3fVertex3fvSUN(&self, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (self.Color4fNormal3fVertex3fvSUN.f)(c, n, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4fv(&self, v: *GLfloat) -> c_void { (self.Color4fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4hNV(&self, red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV, alpha: GLhalfNV) -> c_void { unsafe { (self.Color4hNV.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4hvNV(&self, v: *GLhalfNV) -> c_void { (self.Color4hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4i(&self, red: GLint, green: GLint, blue: GLint, alpha: GLint) -> c_void { unsafe { (self.Color4i.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4iv(&self, v: *GLint) -> c_void { (self.Color4iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4s(&self, red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) -> c_void { unsafe { (self.Color4s.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4sv(&self, v: *GLshort) -> c_void { (self.Color4sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4ub(&self, red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) -> c_void { unsafe { (self.Color4ub.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn Color4ubVertex2fSUN(&self, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.Color4ubVertex2fSUN.f)(r, g, b, a, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4ubVertex2fvSUN(&self, c: *GLubyte, v: *GLfloat) -> c_void { (self.Color4ubVertex2fvSUN.f)(c, v) }
    #[fixed_stack_segment] #[inline] pub fn Color4ubVertex3fSUN(&self, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.Color4ubVertex3fSUN.f)(r, g, b, a, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4ubVertex3fvSUN(&self, c: *GLubyte, v: *GLfloat) -> c_void { (self.Color4ubVertex3fvSUN.f)(c, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4ubv(&self, v: *GLubyte) -> c_void { (self.Color4ubv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4ui(&self, red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) -> c_void { unsafe { (self.Color4ui.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4uiv(&self, v: *GLuint) -> c_void { (self.Color4uiv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4us(&self, red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) -> c_void { unsafe { (self.Color4us.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4usv(&self, v: *GLushort) -> c_void { (self.Color4usv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Color4x(&self, red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (self.Color4x.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn Color4xOES(&self, red: GLfixed, green: GLfixed, blue: GLfixed, alpha: GLfixed) -> c_void { unsafe { (self.Color4xOES.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Color4xvOES(&self, components: *GLfixed) -> c_void { (self.Color4xvOES.f)(components) }
    #[fixed_stack_segment] #[inline] pub fn ColorFormatNV(&self, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.ColorFormatNV.f)(size, type_, stride) } }
    #[fixed_stack_segment] #[inline] pub fn ColorFragmentOp1ATI(&self, op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint) -> c_void { unsafe { (self.ColorFragmentOp1ATI.f)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod) } }
    #[fixed_stack_segment] #[inline] pub fn ColorFragmentOp2ATI(&self, op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint) -> c_void { unsafe { (self.ColorFragmentOp2ATI.f)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod) } }
    #[fixed_stack_segment] #[inline] pub fn ColorFragmentOp3ATI(&self, op: GLenum, dst: GLuint, dstMask: GLuint, dstMod: GLuint, arg1: GLuint, arg1Rep: GLuint, arg1Mod: GLuint, arg2: GLuint, arg2Rep: GLuint, arg2Mod: GLuint, arg3: GLuint, arg3Rep: GLuint, arg3Mod: GLuint) -> c_void { unsafe { (self.ColorFragmentOp3ATI.f)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod) } }
    #[fixed_stack_segment] #[inline] pub fn ColorMask(&self, red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void { unsafe { (self.ColorMask.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub fn ColorMaskIndexedEXT(&self, index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void { unsafe { (self.ColorMaskIndexedEXT.f)(index, r, g, b, a) } }
    #[fixed_stack_segment] #[inline] pub fn ColorMaski(&self, index: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean) -> c_void { unsafe { (self.ColorMaski.f)(index, r, g, b, a) } }
    #[fixed_stack_segment] #[inline] pub fn ColorMaterial(&self, face: GLenum, mode: GLenum) -> c_void { unsafe { (self.ColorMaterial.f)(face, mode) } }
    #[fixed_stack_segment] #[inline] pub fn ColorP3ui(&self, type_: GLenum, color: GLuint) -> c_void { unsafe { (self.ColorP3ui.f)(type_, color) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorP3uiv(&self, type_: GLenum, color: *GLuint) -> c_void { (self.ColorP3uiv.f)(type_, color) }
    #[fixed_stack_segment] #[inline] pub fn ColorP4ui(&self, type_: GLenum, color: GLuint) -> c_void { unsafe { (self.ColorP4ui.f)(type_, color) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorP4uiv(&self, type_: GLenum, color: *GLuint) -> c_void { (self.ColorP4uiv.f)(type_, color) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorPointer(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.ColorPointer.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorPointerEXT(&self, size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { (self.ColorPointerEXT.f)(size, type_, stride, count, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorPointerListIBM(&self, size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { (self.ColorPointerListIBM.f)(size, type_, stride, pointer, ptrstride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorPointervINTEL(&self, size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { (self.ColorPointervINTEL.f)(size, type_, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorSubTable(&self, target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { (self.ColorSubTable.f)(target, start, count, format, type_, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorSubTableEXT(&self, target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { (self.ColorSubTableEXT.f)(target, start, count, format, type_, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorTable(&self, target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { (self.ColorTable.f)(target, internalformat, width, format, type_, table) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorTableEXT(&self, target: GLenum, internalFormat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { (self.ColorTableEXT.f)(target, internalFormat, width, format, type_, table) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorTableParameterfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.ColorTableParameterfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorTableParameterfvSGI(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.ColorTableParameterfvSGI.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorTableParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.ColorTableParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorTableParameterivSGI(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.ColorTableParameterivSGI.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ColorTableSGI(&self, target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { (self.ColorTableSGI.f)(target, internalformat, width, format, type_, table) }
    #[fixed_stack_segment] #[inline] pub fn CombinerInputNV(&self, stage: GLenum, portion: GLenum, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void { unsafe { (self.CombinerInputNV.f)(stage, portion, variable, input, mapping, componentUsage) } }
    #[fixed_stack_segment] #[inline] pub fn CombinerOutputNV(&self, stage: GLenum, portion: GLenum, abOutput: GLenum, cdOutput: GLenum, sumOutput: GLenum, scale: GLenum, bias: GLenum, abDotProduct: GLboolean, cdDotProduct: GLboolean, muxSum: GLboolean) -> c_void { unsafe { (self.CombinerOutputNV.f)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum) } }
    #[fixed_stack_segment] #[inline] pub fn CombinerParameterfNV(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.CombinerParameterfNV.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn CombinerParameterfvNV(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.CombinerParameterfvNV.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn CombinerParameteriNV(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.CombinerParameteriNV.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn CombinerParameterivNV(&self, pname: GLenum, params: *GLint) -> c_void { (self.CombinerParameterivNV.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CombinerStageParameterfvNV(&self, stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.CombinerStageParameterfvNV.f)(stage, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn CompileShader(&self, shader: GLuint) -> c_void { unsafe { (self.CompileShader.f)(shader) } }
    #[fixed_stack_segment] #[inline] pub fn CompileShaderARB(&self, shaderObj: GLhandleARB) -> c_void { unsafe { (self.CompileShaderARB.f)(shaderObj) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompileShaderIncludeARB(&self, shader: GLuint, count: GLsizei, path: **GLchar, length: *GLint) -> c_void { (self.CompileShaderIncludeARB.f)(shader, count, path, length) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedMultiTexImage1DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedMultiTexImage1DEXT.f)(texunit, target, level, internalformat, width, border, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedMultiTexImage2DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedMultiTexImage2DEXT.f)(texunit, target, level, internalformat, width, height, border, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedMultiTexImage3DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedMultiTexImage3DEXT.f)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedMultiTexSubImage1DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedMultiTexSubImage1DEXT.f)(texunit, target, level, xoffset, width, format, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedMultiTexSubImage2DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedMultiTexSubImage2DEXT.f)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedMultiTexSubImage3DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedMultiTexSubImage3DEXT.f)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexImage1D(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexImage1D.f)(target, level, internalformat, width, border, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexImage1DARB(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexImage1DARB.f)(target, level, internalformat, width, border, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexImage2D(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexImage2D.f)(target, level, internalformat, width, height, border, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexImage2DARB(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexImage2DARB.f)(target, level, internalformat, width, height, border, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexImage3D(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexImage3D.f)(target, level, internalformat, width, height, depth, border, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexImage3DARB(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexImage3DARB.f)(target, level, internalformat, width, height, depth, border, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexImage3DOES(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexImage3DOES.f)(target, level, internalformat, width, height, depth, border, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexSubImage1D(&self, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexSubImage1D.f)(target, level, xoffset, width, format, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexSubImage1DARB(&self, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexSubImage1DARB.f)(target, level, xoffset, width, format, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexSubImage2D(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexSubImage2D.f)(target, level, xoffset, yoffset, width, height, format, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexSubImage2DARB(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexSubImage2DARB.f)(target, level, xoffset, yoffset, width, height, format, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexSubImage3D(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexSubImage3D.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexSubImage3DARB(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexSubImage3DARB.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTexSubImage3DOES(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: *GLvoid) -> c_void { (self.CompressedTexSubImage3DOES.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTextureImage1DEXT(&self, texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedTextureImage1DEXT.f)(texture, target, level, internalformat, width, border, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTextureImage2DEXT(&self, texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedTextureImage2DEXT.f)(texture, target, level, internalformat, width, height, border, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTextureImage3DEXT(&self, texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedTextureImage3DEXT.f)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTextureSubImage1DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedTextureSubImage1DEXT.f)(texture, target, level, xoffset, width, format, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTextureSubImage2DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedTextureSubImage2DEXT.f)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CompressedTextureSubImage3DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, bits: *GLvoid) -> c_void { (self.CompressedTextureSubImage3DEXT.f)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionFilter1D(&self, target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { (self.ConvolutionFilter1D.f)(target, internalformat, width, format, type_, image) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionFilter1DEXT(&self, target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { (self.ConvolutionFilter1DEXT.f)(target, internalformat, width, format, type_, image) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionFilter2D(&self, target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { (self.ConvolutionFilter2D.f)(target, internalformat, width, height, format, type_, image) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionFilter2DEXT(&self, target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { (self.ConvolutionFilter2DEXT.f)(target, internalformat, width, height, format, type_, image) }
    #[fixed_stack_segment] #[inline] pub fn ConvolutionParameterf(&self, target: GLenum, pname: GLenum, params: GLfloat) -> c_void { unsafe { (self.ConvolutionParameterf.f)(target, pname, params) } }
    #[fixed_stack_segment] #[inline] pub fn ConvolutionParameterfEXT(&self, target: GLenum, pname: GLenum, params: GLfloat) -> c_void { unsafe { (self.ConvolutionParameterfEXT.f)(target, pname, params) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionParameterfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.ConvolutionParameterfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionParameterfvEXT(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.ConvolutionParameterfvEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn ConvolutionParameteri(&self, target: GLenum, pname: GLenum, params: GLint) -> c_void { unsafe { (self.ConvolutionParameteri.f)(target, pname, params) } }
    #[fixed_stack_segment] #[inline] pub fn ConvolutionParameteriEXT(&self, target: GLenum, pname: GLenum, params: GLint) -> c_void { unsafe { (self.ConvolutionParameteriEXT.f)(target, pname, params) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.ConvolutionParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionParameterivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.ConvolutionParameterivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn ConvolutionParameterxOES(&self, target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.ConvolutionParameterxOES.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ConvolutionParameterxvOES(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.ConvolutionParameterxvOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn CopyBufferSubData(&self, readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (self.CopyBufferSubData.f)(readTarget, writeTarget, readOffset, writeOffset, size) } }
    #[fixed_stack_segment] #[inline] pub fn CopyColorSubTable(&self, target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyColorSubTable.f)(target, start, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyColorSubTableEXT(&self, target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyColorSubTableEXT.f)(target, start, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyColorTable(&self, target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyColorTable.f)(target, internalformat, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyColorTableSGI(&self, target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyColorTableSGI.f)(target, internalformat, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyConvolutionFilter1D(&self, target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyConvolutionFilter1D.f)(target, internalformat, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyConvolutionFilter1DEXT(&self, target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyConvolutionFilter1DEXT.f)(target, internalformat, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyConvolutionFilter2D(&self, target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyConvolutionFilter2D.f)(target, internalformat, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyConvolutionFilter2DEXT(&self, target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyConvolutionFilter2DEXT.f)(target, internalformat, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyImageSubData(&self, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, srcWidth: GLsizei, srcHeight: GLsizei, srcDepth: GLsizei) -> c_void { unsafe { (self.CopyImageSubData.f)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth) } }
    #[fixed_stack_segment] #[inline] pub fn CopyImageSubDataNV(&self, srcName: GLuint, srcTarget: GLenum, srcLevel: GLint, srcX: GLint, srcY: GLint, srcZ: GLint, dstName: GLuint, dstTarget: GLenum, dstLevel: GLint, dstX: GLint, dstY: GLint, dstZ: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (self.CopyImageSubDataNV.f)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth) } }
    #[fixed_stack_segment] #[inline] pub fn CopyMultiTexImage1DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { (self.CopyMultiTexImage1DEXT.f)(texunit, target, level, internalformat, x, y, width, border) } }
    #[fixed_stack_segment] #[inline] pub fn CopyMultiTexImage2DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { (self.CopyMultiTexImage2DEXT.f)(texunit, target, level, internalformat, x, y, width, height, border) } }
    #[fixed_stack_segment] #[inline] pub fn CopyMultiTexSubImage1DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyMultiTexSubImage1DEXT.f)(texunit, target, level, xoffset, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyMultiTexSubImage2DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyMultiTexSubImage2DEXT.f)(texunit, target, level, xoffset, yoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyMultiTexSubImage3DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyMultiTexSubImage3DEXT.f)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyPathNV(&self, resultPath: GLuint, srcPath: GLuint) -> c_void { unsafe { (self.CopyPathNV.f)(resultPath, srcPath) } }
    #[fixed_stack_segment] #[inline] pub fn CopyPixels(&self, x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum) -> c_void { unsafe { (self.CopyPixels.f)(x, y, width, height, type_) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexImage1D(&self, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { (self.CopyTexImage1D.f)(target, level, internalformat, x, y, width, border) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexImage1DEXT(&self, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { (self.CopyTexImage1DEXT.f)(target, level, internalformat, x, y, width, border) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexImage2D(&self, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { (self.CopyTexImage2D.f)(target, level, internalformat, x, y, width, height, border) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexImage2DEXT(&self, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { (self.CopyTexImage2DEXT.f)(target, level, internalformat, x, y, width, height, border) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexSubImage1D(&self, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyTexSubImage1D.f)(target, level, xoffset, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexSubImage1DEXT(&self, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyTexSubImage1DEXT.f)(target, level, xoffset, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexSubImage2D(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyTexSubImage2D.f)(target, level, xoffset, yoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexSubImage2DEXT(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyTexSubImage2DEXT.f)(target, level, xoffset, yoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexSubImage3D(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyTexSubImage3D.f)(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexSubImage3DEXT(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyTexSubImage3DEXT.f)(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTexSubImage3DOES(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyTexSubImage3DOES.f)(target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTextureImage1DEXT(&self, texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) -> c_void { unsafe { (self.CopyTextureImage1DEXT.f)(texture, target, level, internalformat, x, y, width, border) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTextureImage2DEXT(&self, texture: GLuint, target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> c_void { unsafe { (self.CopyTextureImage2DEXT.f)(texture, target, level, internalformat, x, y, width, height, border) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTextureLevelsAPPLE(&self, destinationTexture: GLuint, sourceTexture: GLuint, sourceBaseLevel: GLint, sourceLevelCount: GLsizei) -> c_void { unsafe { (self.CopyTextureLevelsAPPLE.f)(destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTextureSubImage1DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) -> c_void { unsafe { (self.CopyTextureSubImage1DEXT.f)(texture, target, level, xoffset, x, y, width) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTextureSubImage2DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyTextureSubImage2DEXT.f)(texture, target, level, xoffset, yoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn CopyTextureSubImage3DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.CopyTextureSubImage3DEXT.f)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn CoverFillPathInstancedNV(&self, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void { (self.CoverFillPathInstancedNV.f)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) }
    #[fixed_stack_segment] #[inline] pub fn CoverFillPathNV(&self, path: GLuint, coverMode: GLenum) -> c_void { unsafe { (self.CoverFillPathNV.f)(path, coverMode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn CoverStrokePathInstancedNV(&self, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, coverMode: GLenum, transformType: GLenum, transformValues: *GLfloat) -> c_void { (self.CoverStrokePathInstancedNV.f)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues) }
    #[fixed_stack_segment] #[inline] pub fn CoverStrokePathNV(&self, path: GLuint, coverMode: GLenum) -> c_void { unsafe { (self.CoverStrokePathNV.f)(path, coverMode) } }
    #[fixed_stack_segment] #[inline] pub fn CoverageMaskNV(&self, mask: GLboolean) -> c_void { unsafe { (self.CoverageMaskNV.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub fn CoverageOperationNV(&self, operation: GLenum) -> c_void { unsafe { (self.CoverageOperationNV.f)(operation) } }
    #[fixed_stack_segment] #[inline] pub fn CreateProgram(&self) -> GLuint { unsafe { (self.CreateProgram.f)() } }
    #[fixed_stack_segment] #[inline] pub fn CreateProgramObjectARB(&self) -> GLhandleARB { unsafe { (self.CreateProgramObjectARB.f)() } }
    #[fixed_stack_segment] #[inline] pub fn CreateShader(&self, type_: GLenum) -> GLuint { unsafe { (self.CreateShader.f)(type_) } }
    #[fixed_stack_segment] #[inline] pub fn CreateShaderObjectARB(&self, shaderType: GLenum) -> GLhandleARB { unsafe { (self.CreateShaderObjectARB.f)(shaderType) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn CreateShaderProgramEXT(&self, type_: GLenum, string: *GLchar) -> GLuint { (self.CreateShaderProgramEXT.f)(type_, string) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CreateShaderProgramv(&self, type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint { (self.CreateShaderProgramv.f)(type_, count, strings) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CreateShaderProgramvEXT(&self, type_: GLenum, count: GLsizei, strings: **GLchar) -> GLuint { (self.CreateShaderProgramvEXT.f)(type_, count, strings) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CreateSyncFromCLeventARB(&self, context: *_cl_context, event: *_cl_event, flags: GLbitfield) -> GLsync { (self.CreateSyncFromCLeventARB.f)(context, event, flags) }
    #[fixed_stack_segment] #[inline] pub fn CullFace(&self, mode: GLenum) -> c_void { unsafe { (self.CullFace.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn CullParameterdvEXT(&self, pname: GLenum, params: *GLdouble) -> c_void { (self.CullParameterdvEXT.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn CullParameterfvEXT(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.CullParameterfvEXT.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn CurrentPaletteMatrixARB(&self, index: GLint) -> c_void { unsafe { (self.CurrentPaletteMatrixARB.f)(index) } }
    #[fixed_stack_segment] #[inline] pub fn CurrentPaletteMatrixOES(&self, matrixpaletteindex: GLuint) -> c_void { unsafe { (self.CurrentPaletteMatrixOES.f)(matrixpaletteindex) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageCallback(&self, callback: GLDEBUGPROC, userParam: *c_void) -> c_void { (self.DebugMessageCallback.f)(callback, userParam) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageCallbackAMD(&self, callback: GLDEBUGPROCAMD, userParam: *c_void) -> c_void { (self.DebugMessageCallbackAMD.f)(callback, userParam) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageCallbackARB(&self, callback: GLDEBUGPROCARB, userParam: *c_void) -> c_void { (self.DebugMessageCallbackARB.f)(callback, userParam) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageCallbackKHR(&self, callback: GLDEBUGPROCKHR, userParam: *c_void) -> c_void { (self.DebugMessageCallbackKHR.f)(callback, userParam) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageControl(&self, source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { (self.DebugMessageControl.f)(source, type_, severity, count, ids, enabled) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageControlARB(&self, source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { (self.DebugMessageControlARB.f)(source, type_, severity, count, ids, enabled) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageControlKHR(&self, source: GLenum, type_: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { (self.DebugMessageControlKHR.f)(source, type_, severity, count, ids, enabled) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageEnableAMD(&self, category: GLenum, severity: GLenum, count: GLsizei, ids: *GLuint, enabled: GLboolean) -> c_void { (self.DebugMessageEnableAMD.f)(category, severity, count, ids, enabled) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageInsert(&self, source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { (self.DebugMessageInsert.f)(source, type_, id, severity, length, buf) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageInsertAMD(&self, category: GLenum, severity: GLenum, id: GLuint, length: GLsizei, buf: *GLchar) -> c_void { (self.DebugMessageInsertAMD.f)(category, severity, id, length, buf) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageInsertARB(&self, source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { (self.DebugMessageInsertARB.f)(source, type_, id, severity, length, buf) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DebugMessageInsertKHR(&self, source: GLenum, type_: GLenum, id: GLuint, severity: GLenum, length: GLsizei, buf: *GLchar) -> c_void { (self.DebugMessageInsertKHR.f)(source, type_, id, severity, length, buf) }
    #[fixed_stack_segment] #[inline] pub fn DeformSGIX(&self, mask: GLbitfield) -> c_void { unsafe { (self.DeformSGIX.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeformationMap3dSGIX(&self, target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, w1: GLdouble, w2: GLdouble, wstride: GLint, worder: GLint, points: *GLdouble) -> c_void { (self.DeformationMap3dSGIX.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeformationMap3fSGIX(&self, target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, w1: GLfloat, w2: GLfloat, wstride: GLint, worder: GLint, points: *GLfloat) -> c_void { (self.DeformationMap3fSGIX.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points) }
    #[fixed_stack_segment] #[inline] pub fn DeleteAsyncMarkersSGIX(&self, marker: GLuint, range: GLsizei) -> c_void { unsafe { (self.DeleteAsyncMarkersSGIX.f)(marker, range) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteBuffers(&self, n: GLsizei, buffers: *GLuint) -> c_void { (self.DeleteBuffers.f)(n, buffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteBuffersARB(&self, n: GLsizei, buffers: *GLuint) -> c_void { (self.DeleteBuffersARB.f)(n, buffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteFencesAPPLE(&self, n: GLsizei, fences: *GLuint) -> c_void { (self.DeleteFencesAPPLE.f)(n, fences) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteFencesNV(&self, n: GLsizei, fences: *GLuint) -> c_void { (self.DeleteFencesNV.f)(n, fences) }
    #[fixed_stack_segment] #[inline] pub fn DeleteFragmentShaderATI(&self, id: GLuint) -> c_void { unsafe { (self.DeleteFragmentShaderATI.f)(id) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteFramebuffers(&self, n: GLsizei, framebuffers: *GLuint) -> c_void { (self.DeleteFramebuffers.f)(n, framebuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteFramebuffersEXT(&self, n: GLsizei, framebuffers: *GLuint) -> c_void { (self.DeleteFramebuffersEXT.f)(n, framebuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteFramebuffersOES(&self, n: GLsizei, framebuffers: *GLuint) -> c_void { (self.DeleteFramebuffersOES.f)(n, framebuffers) }
    #[fixed_stack_segment] #[inline] pub fn DeleteLists(&self, list: GLuint, range: GLsizei) -> c_void { unsafe { (self.DeleteLists.f)(list, range) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteNamedStringARB(&self, namelen: GLint, name: *GLchar) -> c_void { (self.DeleteNamedStringARB.f)(namelen, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteNamesAMD(&self, identifier: GLenum, num: GLuint, names: *GLuint) -> c_void { (self.DeleteNamesAMD.f)(identifier, num, names) }
    #[fixed_stack_segment] #[inline] pub fn DeleteObjectARB(&self, obj: GLhandleARB) -> c_void { unsafe { (self.DeleteObjectARB.f)(obj) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteOcclusionQueriesNV(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.DeleteOcclusionQueriesNV.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub fn DeletePathsNV(&self, path: GLuint, range: GLsizei) -> c_void { unsafe { (self.DeletePathsNV.f)(path, range) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeletePerfMonitorsAMD(&self, n: GLsizei, monitors: *GLuint) -> c_void { (self.DeletePerfMonitorsAMD.f)(n, monitors) }
    #[fixed_stack_segment] #[inline] pub fn DeleteProgram(&self, program: GLuint) -> c_void { unsafe { (self.DeleteProgram.f)(program) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteProgramPipelines(&self, n: GLsizei, pipelines: *GLuint) -> c_void { (self.DeleteProgramPipelines.f)(n, pipelines) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteProgramPipelinesEXT(&self, n: GLsizei, pipelines: *GLuint) -> c_void { (self.DeleteProgramPipelinesEXT.f)(n, pipelines) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteProgramsARB(&self, n: GLsizei, programs: *GLuint) -> c_void { (self.DeleteProgramsARB.f)(n, programs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteProgramsNV(&self, n: GLsizei, programs: *GLuint) -> c_void { (self.DeleteProgramsNV.f)(n, programs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteQueries(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.DeleteQueries.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteQueriesARB(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.DeleteQueriesARB.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteQueriesEXT(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.DeleteQueriesEXT.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteRenderbuffers(&self, n: GLsizei, renderbuffers: *GLuint) -> c_void { (self.DeleteRenderbuffers.f)(n, renderbuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteRenderbuffersEXT(&self, n: GLsizei, renderbuffers: *GLuint) -> c_void { (self.DeleteRenderbuffersEXT.f)(n, renderbuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteRenderbuffersOES(&self, n: GLsizei, renderbuffers: *GLuint) -> c_void { (self.DeleteRenderbuffersOES.f)(n, renderbuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteSamplers(&self, count: GLsizei, samplers: *GLuint) -> c_void { (self.DeleteSamplers.f)(count, samplers) }
    #[fixed_stack_segment] #[inline] pub fn DeleteShader(&self, shader: GLuint) -> c_void { unsafe { (self.DeleteShader.f)(shader) } }
    #[fixed_stack_segment] #[inline] pub fn DeleteSync(&self, sync: GLsync) -> c_void { unsafe { (self.DeleteSync.f)(sync) } }
    #[fixed_stack_segment] #[inline] pub fn DeleteSyncAPPLE(&self, sync: GLsync) -> c_void { unsafe { (self.DeleteSyncAPPLE.f)(sync) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteTextures(&self, n: GLsizei, textures: *GLuint) -> c_void { (self.DeleteTextures.f)(n, textures) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteTexturesEXT(&self, n: GLsizei, textures: *GLuint) -> c_void { (self.DeleteTexturesEXT.f)(n, textures) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteTransformFeedbacks(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.DeleteTransformFeedbacks.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteTransformFeedbacksNV(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.DeleteTransformFeedbacksNV.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteVertexArrays(&self, n: GLsizei, arrays: *GLuint) -> c_void { (self.DeleteVertexArrays.f)(n, arrays) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteVertexArraysAPPLE(&self, n: GLsizei, arrays: *GLuint) -> c_void { (self.DeleteVertexArraysAPPLE.f)(n, arrays) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DeleteVertexArraysOES(&self, n: GLsizei, arrays: *GLuint) -> c_void { (self.DeleteVertexArraysOES.f)(n, arrays) }
    #[fixed_stack_segment] #[inline] pub fn DeleteVertexShaderEXT(&self, id: GLuint) -> c_void { unsafe { (self.DeleteVertexShaderEXT.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn DepthBoundsEXT(&self, zmin: GLclampd, zmax: GLclampd) -> c_void { unsafe { (self.DepthBoundsEXT.f)(zmin, zmax) } }
    #[fixed_stack_segment] #[inline] pub fn DepthBoundsdNV(&self, zmin: GLdouble, zmax: GLdouble) -> c_void { unsafe { (self.DepthBoundsdNV.f)(zmin, zmax) } }
    #[fixed_stack_segment] #[inline] pub fn DepthFunc(&self, func: GLenum) -> c_void { unsafe { (self.DepthFunc.f)(func) } }
    #[fixed_stack_segment] #[inline] pub fn DepthMask(&self, flag: GLboolean) -> c_void { unsafe { (self.DepthMask.f)(flag) } }
    #[fixed_stack_segment] #[inline] pub fn DepthRange(&self, near: GLdouble, far: GLdouble) -> c_void { unsafe { (self.DepthRange.f)(near, far) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DepthRangeArrayv(&self, first: GLuint, count: GLsizei, v: *GLdouble) -> c_void { (self.DepthRangeArrayv.f)(first, count, v) }
    #[fixed_stack_segment] #[inline] pub fn DepthRangeIndexed(&self, index: GLuint, n: GLdouble, f: GLdouble) -> c_void { unsafe { (self.DepthRangeIndexed.f)(index, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn DepthRangedNV(&self, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (self.DepthRangedNV.f)(zNear, zFar) } }
    #[fixed_stack_segment] #[inline] pub fn DepthRangef(&self, n: GLfloat, f: GLfloat) -> c_void { unsafe { (self.DepthRangef.f)(n, f) } }
    #[fixed_stack_segment] #[inline] pub fn DepthRangefOES(&self, n: GLclampf, f: GLclampf) -> c_void { unsafe { (self.DepthRangefOES.f)(n, f) } }
    #[fixed_stack_segment] #[inline] pub fn DepthRangex(&self, n: GLfixed, f: GLfixed) -> c_void { unsafe { (self.DepthRangex.f)(n, f) } }
    #[fixed_stack_segment] #[inline] pub fn DepthRangexOES(&self, n: GLfixed, f: GLfixed) -> c_void { unsafe { (self.DepthRangexOES.f)(n, f) } }
    #[fixed_stack_segment] #[inline] pub fn DetachObjectARB(&self, containerObj: GLhandleARB, attachedObj: GLhandleARB) -> c_void { unsafe { (self.DetachObjectARB.f)(containerObj, attachedObj) } }
    #[fixed_stack_segment] #[inline] pub fn DetachShader(&self, program: GLuint, shader: GLuint) -> c_void { unsafe { (self.DetachShader.f)(program, shader) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DetailTexFuncSGIS(&self, target: GLenum, n: GLsizei, points: *GLfloat) -> c_void { (self.DetailTexFuncSGIS.f)(target, n, points) }
    #[fixed_stack_segment] #[inline] pub fn Disable(&self, cap: GLenum) -> c_void { unsafe { (self.Disable.f)(cap) } }
    #[fixed_stack_segment] #[inline] pub fn DisableClientState(&self, array: GLenum) -> c_void { unsafe { (self.DisableClientState.f)(array) } }
    #[fixed_stack_segment] #[inline] pub fn DisableClientStateIndexedEXT(&self, array: GLenum, index: GLuint) -> c_void { unsafe { (self.DisableClientStateIndexedEXT.f)(array, index) } }
    #[fixed_stack_segment] #[inline] pub fn DisableClientStateiEXT(&self, array: GLenum, index: GLuint) -> c_void { unsafe { (self.DisableClientStateiEXT.f)(array, index) } }
    #[fixed_stack_segment] #[inline] pub fn DisableDriverControlQCOM(&self, driverControl: GLuint) -> c_void { unsafe { (self.DisableDriverControlQCOM.f)(driverControl) } }
    #[fixed_stack_segment] #[inline] pub fn DisableIndexedEXT(&self, target: GLenum, index: GLuint) -> c_void { unsafe { (self.DisableIndexedEXT.f)(target, index) } }
    #[fixed_stack_segment] #[inline] pub fn DisableVariantClientStateEXT(&self, id: GLuint) -> c_void { unsafe { (self.DisableVariantClientStateEXT.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn DisableVertexArrayAttribEXT(&self, vaobj: GLuint, index: GLuint) -> c_void { unsafe { (self.DisableVertexArrayAttribEXT.f)(vaobj, index) } }
    #[fixed_stack_segment] #[inline] pub fn DisableVertexArrayEXT(&self, vaobj: GLuint, array: GLenum) -> c_void { unsafe { (self.DisableVertexArrayEXT.f)(vaobj, array) } }
    #[fixed_stack_segment] #[inline] pub fn DisableVertexAttribAPPLE(&self, index: GLuint, pname: GLenum) -> c_void { unsafe { (self.DisableVertexAttribAPPLE.f)(index, pname) } }
    #[fixed_stack_segment] #[inline] pub fn DisableVertexAttribArray(&self, index: GLuint) -> c_void { unsafe { (self.DisableVertexAttribArray.f)(index) } }
    #[fixed_stack_segment] #[inline] pub fn DisableVertexAttribArrayARB(&self, index: GLuint) -> c_void { unsafe { (self.DisableVertexAttribArrayARB.f)(index) } }
    #[fixed_stack_segment] #[inline] pub fn Disablei(&self, target: GLenum, index: GLuint) -> c_void { unsafe { (self.Disablei.f)(target, index) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DiscardFramebufferEXT(&self, target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void { (self.DiscardFramebufferEXT.f)(target, numAttachments, attachments) }
    #[fixed_stack_segment] #[inline] pub fn DispatchCompute(&self, num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint) -> c_void { unsafe { (self.DispatchCompute.f)(num_groups_x, num_groups_y, num_groups_z) } }
    #[fixed_stack_segment] #[inline] pub fn DispatchComputeGroupSizeARB(&self, num_groups_x: GLuint, num_groups_y: GLuint, num_groups_z: GLuint, group_size_x: GLuint, group_size_y: GLuint, group_size_z: GLuint) -> c_void { unsafe { (self.DispatchComputeGroupSizeARB.f)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z) } }
    #[fixed_stack_segment] #[inline] pub fn DispatchComputeIndirect(&self, indirect: GLintptr) -> c_void { unsafe { (self.DispatchComputeIndirect.f)(indirect) } }
    #[fixed_stack_segment] #[inline] pub fn DrawArrays(&self, mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { (self.DrawArrays.f)(mode, first, count) } }
    #[fixed_stack_segment] #[inline] pub fn DrawArraysEXT(&self, mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { (self.DrawArraysEXT.f)(mode, first, count) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawArraysIndirect(&self, mode: GLenum, indirect: *GLvoid) -> c_void { (self.DrawArraysIndirect.f)(mode, indirect) }
    #[fixed_stack_segment] #[inline] pub fn DrawArraysInstanced(&self, mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> c_void { unsafe { (self.DrawArraysInstanced.f)(mode, first, count, instancecount) } }
    #[fixed_stack_segment] #[inline] pub fn DrawArraysInstancedANGLE(&self, mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { (self.DrawArraysInstancedANGLE.f)(mode, first, count, primcount) } }
    #[fixed_stack_segment] #[inline] pub fn DrawArraysInstancedARB(&self, mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { (self.DrawArraysInstancedARB.f)(mode, first, count, primcount) } }
    #[fixed_stack_segment] #[inline] pub fn DrawArraysInstancedBaseInstance(&self, mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei, baseinstance: GLuint) -> c_void { unsafe { (self.DrawArraysInstancedBaseInstance.f)(mode, first, count, instancecount, baseinstance) } }
    #[fixed_stack_segment] #[inline] pub fn DrawArraysInstancedEXT(&self, mode: GLenum, start: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { (self.DrawArraysInstancedEXT.f)(mode, start, count, primcount) } }
    #[fixed_stack_segment] #[inline] pub fn DrawArraysInstancedNV(&self, mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei) -> c_void { unsafe { (self.DrawArraysInstancedNV.f)(mode, first, count, primcount) } }
    #[fixed_stack_segment] #[inline] pub fn DrawBuffer(&self, mode: GLenum) -> c_void { unsafe { (self.DrawBuffer.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawBuffers(&self, n: GLsizei, bufs: *GLenum) -> c_void { (self.DrawBuffers.f)(n, bufs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawBuffersARB(&self, n: GLsizei, bufs: *GLenum) -> c_void { (self.DrawBuffersARB.f)(n, bufs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawBuffersATI(&self, n: GLsizei, bufs: *GLenum) -> c_void { (self.DrawBuffersATI.f)(n, bufs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawBuffersEXT(&self, n: GLsizei, bufs: *GLenum) -> c_void { (self.DrawBuffersEXT.f)(n, bufs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawBuffersIndexedEXT(&self, n: GLint, location: *GLenum, indices: *GLint) -> c_void { (self.DrawBuffersIndexedEXT.f)(n, location, indices) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawBuffersNV(&self, n: GLsizei, bufs: *GLenum) -> c_void { (self.DrawBuffersNV.f)(n, bufs) }
    #[fixed_stack_segment] #[inline] pub fn DrawElementArrayAPPLE(&self, mode: GLenum, first: GLint, count: GLsizei) -> c_void { unsafe { (self.DrawElementArrayAPPLE.f)(mode, first, count) } }
    #[fixed_stack_segment] #[inline] pub fn DrawElementArrayATI(&self, mode: GLenum, count: GLsizei) -> c_void { unsafe { (self.DrawElementArrayATI.f)(mode, count) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElements(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { (self.DrawElements.f)(mode, count, type_, indices) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsBaseVertex(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void { (self.DrawElementsBaseVertex.f)(mode, count, type_, indices, basevertex) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsIndirect(&self, mode: GLenum, type_: GLenum, indirect: *GLvoid) -> c_void { (self.DrawElementsIndirect.f)(mode, type_, indirect) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsInstanced(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei) -> c_void { (self.DrawElementsInstanced.f)(mode, count, type_, indices, instancecount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsInstancedANGLE(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, primcount: GLsizei) -> c_void { (self.DrawElementsInstancedANGLE.f)(mode, count, type_, indices, primcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsInstancedARB(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { (self.DrawElementsInstancedARB.f)(mode, count, type_, indices, primcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsInstancedBaseInstance(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, baseinstance: GLuint) -> c_void { (self.DrawElementsInstancedBaseInstance.f)(mode, count, type_, indices, instancecount, baseinstance) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsInstancedBaseVertex(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, instancecount: GLsizei, basevertex: GLint) -> c_void { (self.DrawElementsInstancedBaseVertex.f)(mode, count, type_, indices, instancecount, basevertex) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsInstancedBaseVertexBaseInstance(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *c_void, instancecount: GLsizei, basevertex: GLint, baseinstance: GLuint) -> c_void { (self.DrawElementsInstancedBaseVertexBaseInstance.f)(mode, count, type_, indices, instancecount, basevertex, baseinstance) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsInstancedEXT(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { (self.DrawElementsInstancedEXT.f)(mode, count, type_, indices, primcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawElementsInstancedNV(&self, mode: GLenum, count: GLsizei, type_: GLenum, indices: *GLvoid, primcount: GLsizei) -> c_void { (self.DrawElementsInstancedNV.f)(mode, count, type_, indices, primcount) }
    #[fixed_stack_segment] #[inline] pub fn DrawMeshArraysSUN(&self, mode: GLenum, first: GLint, count: GLsizei, width: GLsizei) -> c_void { unsafe { (self.DrawMeshArraysSUN.f)(mode, first, count, width) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawPixels(&self, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.DrawPixels.f)(width, height, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub fn DrawRangeElementArrayAPPLE(&self, mode: GLenum, start: GLuint, end: GLuint, first: GLint, count: GLsizei) -> c_void { unsafe { (self.DrawRangeElementArrayAPPLE.f)(mode, start, end, first, count) } }
    #[fixed_stack_segment] #[inline] pub fn DrawRangeElementArrayATI(&self, mode: GLenum, start: GLuint, end: GLuint, count: GLsizei) -> c_void { unsafe { (self.DrawRangeElementArrayATI.f)(mode, start, end, count) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawRangeElements(&self, mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { (self.DrawRangeElements.f)(mode, start, end, count, type_, indices) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawRangeElementsBaseVertex(&self, mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid, basevertex: GLint) -> c_void { (self.DrawRangeElementsBaseVertex.f)(mode, start, end, count, type_, indices, basevertex) }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawRangeElementsEXT(&self, mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type_: GLenum, indices: *GLvoid) -> c_void { (self.DrawRangeElementsEXT.f)(mode, start, end, count, type_, indices) }
    #[fixed_stack_segment] #[inline] pub fn DrawTexfOES(&self, x: GLfloat, y: GLfloat, z: GLfloat, width: GLfloat, height: GLfloat) -> c_void { unsafe { (self.DrawTexfOES.f)(x, y, z, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawTexfvOES(&self, coords: *GLfloat) -> c_void { (self.DrawTexfvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn DrawTexiOES(&self, x: GLint, y: GLint, z: GLint, width: GLint, height: GLint) -> c_void { unsafe { (self.DrawTexiOES.f)(x, y, z, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawTexivOES(&self, coords: *GLint) -> c_void { (self.DrawTexivOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn DrawTexsOES(&self, x: GLshort, y: GLshort, z: GLshort, width: GLshort, height: GLshort) -> c_void { unsafe { (self.DrawTexsOES.f)(x, y, z, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawTexsvOES(&self, coords: *GLshort) -> c_void { (self.DrawTexsvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn DrawTextureNV(&self, texture: GLuint, sampler: GLuint, x0: GLfloat, y0: GLfloat, x1: GLfloat, y1: GLfloat, z: GLfloat, s0: GLfloat, t0: GLfloat, s1: GLfloat, t1: GLfloat) -> c_void { unsafe { (self.DrawTextureNV.f)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1) } }
    #[fixed_stack_segment] #[inline] pub fn DrawTexxOES(&self, x: GLfixed, y: GLfixed, z: GLfixed, width: GLfixed, height: GLfixed) -> c_void { unsafe { (self.DrawTexxOES.f)(x, y, z, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn DrawTexxvOES(&self, coords: *GLfixed) -> c_void { (self.DrawTexxvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn DrawTransformFeedback(&self, mode: GLenum, id: GLuint) -> c_void { unsafe { (self.DrawTransformFeedback.f)(mode, id) } }
    #[fixed_stack_segment] #[inline] pub fn DrawTransformFeedbackInstanced(&self, mode: GLenum, id: GLuint, instancecount: GLsizei) -> c_void { unsafe { (self.DrawTransformFeedbackInstanced.f)(mode, id, instancecount) } }
    #[fixed_stack_segment] #[inline] pub fn DrawTransformFeedbackNV(&self, mode: GLenum, id: GLuint) -> c_void { unsafe { (self.DrawTransformFeedbackNV.f)(mode, id) } }
    #[fixed_stack_segment] #[inline] pub fn DrawTransformFeedbackStream(&self, mode: GLenum, id: GLuint, stream: GLuint) -> c_void { unsafe { (self.DrawTransformFeedbackStream.f)(mode, id, stream) } }
    #[fixed_stack_segment] #[inline] pub fn DrawTransformFeedbackStreamInstanced(&self, mode: GLenum, id: GLuint, stream: GLuint, instancecount: GLsizei) -> c_void { unsafe { (self.DrawTransformFeedbackStreamInstanced.f)(mode, id, stream, instancecount) } }
    #[fixed_stack_segment] #[inline] pub fn EGLImageTargetRenderbufferStorageOES(&self, target: GLenum, image: GLeglImageOES) -> c_void { unsafe { (self.EGLImageTargetRenderbufferStorageOES.f)(target, image) } }
    #[fixed_stack_segment] #[inline] pub fn EGLImageTargetTexture2DOES(&self, target: GLenum, image: GLeglImageOES) -> c_void { unsafe { (self.EGLImageTargetTexture2DOES.f)(target, image) } }
    #[fixed_stack_segment] #[inline] pub fn EdgeFlag(&self, flag: GLboolean) -> c_void { unsafe { (self.EdgeFlag.f)(flag) } }
    #[fixed_stack_segment] #[inline] pub fn EdgeFlagFormatNV(&self, stride: GLsizei) -> c_void { unsafe { (self.EdgeFlagFormatNV.f)(stride) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn EdgeFlagPointer(&self, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.EdgeFlagPointer.f)(stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn EdgeFlagPointerEXT(&self, stride: GLsizei, count: GLsizei, pointer: *GLboolean) -> c_void { (self.EdgeFlagPointerEXT.f)(stride, count, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn EdgeFlagPointerListIBM(&self, stride: GLint, pointer: **GLboolean, ptrstride: GLint) -> c_void { (self.EdgeFlagPointerListIBM.f)(stride, pointer, ptrstride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn EdgeFlagv(&self, flag: *GLboolean) -> c_void { (self.EdgeFlagv.f)(flag) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ElementPointerAPPLE(&self, type_: GLenum, pointer: *GLvoid) -> c_void { (self.ElementPointerAPPLE.f)(type_, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ElementPointerATI(&self, type_: GLenum, pointer: *GLvoid) -> c_void { (self.ElementPointerATI.f)(type_, pointer) }
    #[fixed_stack_segment] #[inline] pub fn Enable(&self, cap: GLenum) -> c_void { unsafe { (self.Enable.f)(cap) } }
    #[fixed_stack_segment] #[inline] pub fn EnableClientState(&self, array: GLenum) -> c_void { unsafe { (self.EnableClientState.f)(array) } }
    #[fixed_stack_segment] #[inline] pub fn EnableClientStateIndexedEXT(&self, array: GLenum, index: GLuint) -> c_void { unsafe { (self.EnableClientStateIndexedEXT.f)(array, index) } }
    #[fixed_stack_segment] #[inline] pub fn EnableClientStateiEXT(&self, array: GLenum, index: GLuint) -> c_void { unsafe { (self.EnableClientStateiEXT.f)(array, index) } }
    #[fixed_stack_segment] #[inline] pub fn EnableDriverControlQCOM(&self, driverControl: GLuint) -> c_void { unsafe { (self.EnableDriverControlQCOM.f)(driverControl) } }
    #[fixed_stack_segment] #[inline] pub fn EnableIndexedEXT(&self, target: GLenum, index: GLuint) -> c_void { unsafe { (self.EnableIndexedEXT.f)(target, index) } }
    #[fixed_stack_segment] #[inline] pub fn EnableVariantClientStateEXT(&self, id: GLuint) -> c_void { unsafe { (self.EnableVariantClientStateEXT.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn EnableVertexArrayAttribEXT(&self, vaobj: GLuint, index: GLuint) -> c_void { unsafe { (self.EnableVertexArrayAttribEXT.f)(vaobj, index) } }
    #[fixed_stack_segment] #[inline] pub fn EnableVertexArrayEXT(&self, vaobj: GLuint, array: GLenum) -> c_void { unsafe { (self.EnableVertexArrayEXT.f)(vaobj, array) } }
    #[fixed_stack_segment] #[inline] pub fn EnableVertexAttribAPPLE(&self, index: GLuint, pname: GLenum) -> c_void { unsafe { (self.EnableVertexAttribAPPLE.f)(index, pname) } }
    #[fixed_stack_segment] #[inline] pub fn EnableVertexAttribArray(&self, index: GLuint) -> c_void { unsafe { (self.EnableVertexAttribArray.f)(index) } }
    #[fixed_stack_segment] #[inline] pub fn EnableVertexAttribArrayARB(&self, index: GLuint) -> c_void { unsafe { (self.EnableVertexAttribArrayARB.f)(index) } }
    #[fixed_stack_segment] #[inline] pub fn Enablei(&self, target: GLenum, index: GLuint) -> c_void { unsafe { (self.Enablei.f)(target, index) } }
    #[fixed_stack_segment] #[inline] pub fn End(&self) -> c_void { unsafe { (self.End.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndConditionalRender(&self) -> c_void { unsafe { (self.EndConditionalRender.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndConditionalRenderNV(&self) -> c_void { unsafe { (self.EndConditionalRenderNV.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndConditionalRenderNVX(&self) -> c_void { unsafe { (self.EndConditionalRenderNVX.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndFragmentShaderATI(&self) -> c_void { unsafe { (self.EndFragmentShaderATI.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndList(&self) -> c_void { unsafe { (self.EndList.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndOcclusionQueryNV(&self) -> c_void { unsafe { (self.EndOcclusionQueryNV.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndPerfMonitorAMD(&self, monitor: GLuint) -> c_void { unsafe { (self.EndPerfMonitorAMD.f)(monitor) } }
    #[fixed_stack_segment] #[inline] pub fn EndQuery(&self, target: GLenum) -> c_void { unsafe { (self.EndQuery.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn EndQueryARB(&self, target: GLenum) -> c_void { unsafe { (self.EndQueryARB.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn EndQueryEXT(&self, target: GLenum) -> c_void { unsafe { (self.EndQueryEXT.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn EndQueryIndexed(&self, target: GLenum, index: GLuint) -> c_void { unsafe { (self.EndQueryIndexed.f)(target, index) } }
    #[fixed_stack_segment] #[inline] pub fn EndTilingQCOM(&self, preserveMask: GLbitfield) -> c_void { unsafe { (self.EndTilingQCOM.f)(preserveMask) } }
    #[fixed_stack_segment] #[inline] pub fn EndTransformFeedback(&self) -> c_void { unsafe { (self.EndTransformFeedback.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndTransformFeedbackEXT(&self) -> c_void { unsafe { (self.EndTransformFeedbackEXT.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndTransformFeedbackNV(&self) -> c_void { unsafe { (self.EndTransformFeedbackNV.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndVertexShaderEXT(&self) -> c_void { unsafe { (self.EndVertexShaderEXT.f)() } }
    #[fixed_stack_segment] #[inline] pub fn EndVideoCaptureNV(&self, video_capture_slot: GLuint) -> c_void { unsafe { (self.EndVideoCaptureNV.f)(video_capture_slot) } }
    #[fixed_stack_segment] #[inline] pub fn EvalCoord1d(&self, u: GLdouble) -> c_void { unsafe { (self.EvalCoord1d.f)(u) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn EvalCoord1dv(&self, u: *GLdouble) -> c_void { (self.EvalCoord1dv.f)(u) }
    #[fixed_stack_segment] #[inline] pub fn EvalCoord1f(&self, u: GLfloat) -> c_void { unsafe { (self.EvalCoord1f.f)(u) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn EvalCoord1fv(&self, u: *GLfloat) -> c_void { (self.EvalCoord1fv.f)(u) }
    #[fixed_stack_segment] #[inline] pub fn EvalCoord1xOES(&self, u: GLfixed) -> c_void { unsafe { (self.EvalCoord1xOES.f)(u) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn EvalCoord1xvOES(&self, coords: *GLfixed) -> c_void { (self.EvalCoord1xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn EvalCoord2d(&self, u: GLdouble, v: GLdouble) -> c_void { unsafe { (self.EvalCoord2d.f)(u, v) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn EvalCoord2dv(&self, u: *GLdouble) -> c_void { (self.EvalCoord2dv.f)(u) }
    #[fixed_stack_segment] #[inline] pub fn EvalCoord2f(&self, u: GLfloat, v: GLfloat) -> c_void { unsafe { (self.EvalCoord2f.f)(u, v) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn EvalCoord2fv(&self, u: *GLfloat) -> c_void { (self.EvalCoord2fv.f)(u) }
    #[fixed_stack_segment] #[inline] pub fn EvalCoord2xOES(&self, u: GLfixed, v: GLfixed) -> c_void { unsafe { (self.EvalCoord2xOES.f)(u, v) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn EvalCoord2xvOES(&self, coords: *GLfixed) -> c_void { (self.EvalCoord2xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn EvalMapsNV(&self, target: GLenum, mode: GLenum) -> c_void { unsafe { (self.EvalMapsNV.f)(target, mode) } }
    #[fixed_stack_segment] #[inline] pub fn EvalMesh1(&self, mode: GLenum, i1: GLint, i2: GLint) -> c_void { unsafe { (self.EvalMesh1.f)(mode, i1, i2) } }
    #[fixed_stack_segment] #[inline] pub fn EvalMesh2(&self, mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint) -> c_void { unsafe { (self.EvalMesh2.f)(mode, i1, i2, j1, j2) } }
    #[fixed_stack_segment] #[inline] pub fn EvalPoint1(&self, i: GLint) -> c_void { unsafe { (self.EvalPoint1.f)(i) } }
    #[fixed_stack_segment] #[inline] pub fn EvalPoint2(&self, i: GLint, j: GLint) -> c_void { unsafe { (self.EvalPoint2.f)(i, j) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExecuteProgramNV(&self, target: GLenum, id: GLuint, params: *GLfloat) -> c_void { (self.ExecuteProgramNV.f)(target, id, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetBufferPointervQCOM(&self, target: GLenum, params: **GLvoid) -> c_void { (self.ExtGetBufferPointervQCOM.f)(target, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetBuffersQCOM(&self, buffers: *GLuint, maxBuffers: GLint, numBuffers: *GLint) -> c_void { (self.ExtGetBuffersQCOM.f)(buffers, maxBuffers, numBuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetFramebuffersQCOM(&self, framebuffers: *GLuint, maxFramebuffers: GLint, numFramebuffers: *GLint) -> c_void { (self.ExtGetFramebuffersQCOM.f)(framebuffers, maxFramebuffers, numFramebuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetProgramBinarySourceQCOM(&self, program: GLuint, shadertype: GLenum, source: *GLchar, length: *GLint) -> c_void { (self.ExtGetProgramBinarySourceQCOM.f)(program, shadertype, source, length) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetProgramsQCOM(&self, programs: *GLuint, maxPrograms: GLint, numPrograms: *GLint) -> c_void { (self.ExtGetProgramsQCOM.f)(programs, maxPrograms, numPrograms) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetRenderbuffersQCOM(&self, renderbuffers: *GLuint, maxRenderbuffers: GLint, numRenderbuffers: *GLint) -> c_void { (self.ExtGetRenderbuffersQCOM.f)(renderbuffers, maxRenderbuffers, numRenderbuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetShadersQCOM(&self, shaders: *GLuint, maxShaders: GLint, numShaders: *GLint) -> c_void { (self.ExtGetShadersQCOM.f)(shaders, maxShaders, numShaders) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetTexLevelParameterivQCOM(&self, texture: GLuint, face: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { (self.ExtGetTexLevelParameterivQCOM.f)(texture, face, level, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetTexSubImageQCOM(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, texels: *GLvoid) -> c_void { (self.ExtGetTexSubImageQCOM.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, texels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ExtGetTexturesQCOM(&self, textures: *GLuint, maxTextures: GLint, numTextures: *GLint) -> c_void { (self.ExtGetTexturesQCOM.f)(textures, maxTextures, numTextures) }
    #[fixed_stack_segment] #[inline] pub fn ExtIsProgramBinaryQCOM(&self, program: GLuint) -> GLboolean { unsafe { (self.ExtIsProgramBinaryQCOM.f)(program) } }
    #[fixed_stack_segment] #[inline] pub fn ExtTexObjectStateOverrideiQCOM(&self, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.ExtTexObjectStateOverrideiQCOM.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn ExtractComponentEXT(&self, res: GLuint, src: GLuint, num: GLuint) -> c_void { unsafe { (self.ExtractComponentEXT.f)(res, src, num) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FeedbackBuffer(&self, size: GLsizei, type_: GLenum, buffer: *GLfloat) -> c_void { (self.FeedbackBuffer.f)(size, type_, buffer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn FeedbackBufferxOES(&self, n: GLsizei, type_: GLenum, buffer: *GLfixed) -> c_void { (self.FeedbackBufferxOES.f)(n, type_, buffer) }
    #[fixed_stack_segment] #[inline] pub fn FenceSync(&self, condition: GLenum, flags: GLbitfield) -> GLsync { unsafe { (self.FenceSync.f)(condition, flags) } }
    #[fixed_stack_segment] #[inline] pub fn FenceSyncAPPLE(&self, condition: GLenum, flags: GLbitfield) -> GLsync { unsafe { (self.FenceSyncAPPLE.f)(condition, flags) } }
    #[fixed_stack_segment] #[inline] pub fn FinalCombinerInputNV(&self, variable: GLenum, input: GLenum, mapping: GLenum, componentUsage: GLenum) -> c_void { unsafe { (self.FinalCombinerInputNV.f)(variable, input, mapping, componentUsage) } }
    #[fixed_stack_segment] #[inline] pub fn Finish(&self) -> c_void { unsafe { (self.Finish.f)() } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FinishAsyncSGIX(&self, markerp: *GLuint) -> GLint { (self.FinishAsyncSGIX.f)(markerp) }
    #[fixed_stack_segment] #[inline] pub fn FinishFenceAPPLE(&self, fence: GLuint) -> c_void { unsafe { (self.FinishFenceAPPLE.f)(fence) } }
    #[fixed_stack_segment] #[inline] pub fn FinishFenceNV(&self, fence: GLuint) -> c_void { unsafe { (self.FinishFenceNV.f)(fence) } }
    #[fixed_stack_segment] #[inline] pub fn FinishObjectAPPLE(&self, object: GLenum, name: GLint) -> c_void { unsafe { (self.FinishObjectAPPLE.f)(object, name) } }
    #[fixed_stack_segment] #[inline] pub fn FinishTextureSUNX(&self) -> c_void { unsafe { (self.FinishTextureSUNX.f)() } }
    #[fixed_stack_segment] #[inline] pub fn Flush(&self) -> c_void { unsafe { (self.Flush.f)() } }
    #[fixed_stack_segment] #[inline] pub fn FlushMappedBufferRange(&self, target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { (self.FlushMappedBufferRange.f)(target, offset, length) } }
    #[fixed_stack_segment] #[inline] pub fn FlushMappedBufferRangeAPPLE(&self, target: GLenum, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (self.FlushMappedBufferRangeAPPLE.f)(target, offset, size) } }
    #[fixed_stack_segment] #[inline] pub fn FlushMappedBufferRangeEXT(&self, target: GLenum, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { (self.FlushMappedBufferRangeEXT.f)(target, offset, length) } }
    #[fixed_stack_segment] #[inline] pub fn FlushMappedNamedBufferRangeEXT(&self, buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { (self.FlushMappedNamedBufferRangeEXT.f)(buffer, offset, length) } }
    #[fixed_stack_segment] #[inline] pub fn FlushPixelDataRangeNV(&self, target: GLenum) -> c_void { unsafe { (self.FlushPixelDataRangeNV.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn FlushRasterSGIX(&self) -> c_void { unsafe { (self.FlushRasterSGIX.f)() } }
    #[fixed_stack_segment] #[inline] pub fn FlushStaticDataIBM(&self, target: GLenum) -> c_void { unsafe { (self.FlushStaticDataIBM.f)(target) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FlushVertexArrayRangeAPPLE(&self, length: GLsizei, pointer: *GLvoid) -> c_void { (self.FlushVertexArrayRangeAPPLE.f)(length, pointer) }
    #[fixed_stack_segment] #[inline] pub fn FlushVertexArrayRangeNV(&self) -> c_void { unsafe { (self.FlushVertexArrayRangeNV.f)() } }
    #[fixed_stack_segment] #[inline] pub fn FogCoordFormatNV(&self, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.FogCoordFormatNV.f)(type_, stride) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogCoordPointer(&self, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.FogCoordPointer.f)(type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogCoordPointerEXT(&self, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.FogCoordPointerEXT.f)(type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogCoordPointerListIBM(&self, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { (self.FogCoordPointerListIBM.f)(type_, stride, pointer, ptrstride) }
    #[fixed_stack_segment] #[inline] pub fn FogCoordd(&self, coord: GLdouble) -> c_void { unsafe { (self.FogCoordd.f)(coord) } }
    #[fixed_stack_segment] #[inline] pub fn FogCoorddEXT(&self, coord: GLdouble) -> c_void { unsafe { (self.FogCoorddEXT.f)(coord) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogCoorddv(&self, coord: *GLdouble) -> c_void { (self.FogCoorddv.f)(coord) }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogCoorddvEXT(&self, coord: *GLdouble) -> c_void { (self.FogCoorddvEXT.f)(coord) }
    #[fixed_stack_segment] #[inline] pub fn FogCoordf(&self, coord: GLfloat) -> c_void { unsafe { (self.FogCoordf.f)(coord) } }
    #[fixed_stack_segment] #[inline] pub fn FogCoordfEXT(&self, coord: GLfloat) -> c_void { unsafe { (self.FogCoordfEXT.f)(coord) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogCoordfv(&self, coord: *GLfloat) -> c_void { (self.FogCoordfv.f)(coord) }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogCoordfvEXT(&self, coord: *GLfloat) -> c_void { (self.FogCoordfvEXT.f)(coord) }
    #[fixed_stack_segment] #[inline] pub fn FogCoordhNV(&self, fog: GLhalfNV) -> c_void { unsafe { (self.FogCoordhNV.f)(fog) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogCoordhvNV(&self, fog: *GLhalfNV) -> c_void { (self.FogCoordhvNV.f)(fog) }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogFuncSGIS(&self, n: GLsizei, points: *GLfloat) -> c_void { (self.FogFuncSGIS.f)(n, points) }
    #[fixed_stack_segment] #[inline] pub fn Fogf(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.Fogf.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Fogfv(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.Fogfv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn Fogi(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.Fogi.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Fogiv(&self, pname: GLenum, params: *GLint) -> c_void { (self.Fogiv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn Fogx(&self, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.Fogx.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn FogxOES(&self, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.FogxOES.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Fogxv(&self, pname: GLenum, param: *GLfixed) -> c_void { (self.Fogxv.f)(pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn FogxvOES(&self, pname: GLenum, param: *GLfixed) -> c_void { (self.FogxvOES.f)(pname, param) }
    #[fixed_stack_segment] #[inline] pub fn FragmentColorMaterialSGIX(&self, face: GLenum, mode: GLenum) -> c_void { unsafe { (self.FragmentColorMaterialSGIX.f)(face, mode) } }
    #[fixed_stack_segment] #[inline] pub fn FragmentLightModelfSGIX(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.FragmentLightModelfSGIX.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FragmentLightModelfvSGIX(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.FragmentLightModelfvSGIX.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn FragmentLightModeliSGIX(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.FragmentLightModeliSGIX.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FragmentLightModelivSGIX(&self, pname: GLenum, params: *GLint) -> c_void { (self.FragmentLightModelivSGIX.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn FragmentLightfSGIX(&self, light: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.FragmentLightfSGIX.f)(light, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FragmentLightfvSGIX(&self, light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.FragmentLightfvSGIX.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn FragmentLightiSGIX(&self, light: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.FragmentLightiSGIX.f)(light, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FragmentLightivSGIX(&self, light: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.FragmentLightivSGIX.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn FragmentMaterialfSGIX(&self, face: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.FragmentMaterialfSGIX.f)(face, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FragmentMaterialfvSGIX(&self, face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.FragmentMaterialfvSGIX.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn FragmentMaterialiSGIX(&self, face: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.FragmentMaterialiSGIX.f)(face, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FragmentMaterialivSGIX(&self, face: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.FragmentMaterialivSGIX.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn FrameTerminatorGREMEDY(&self) -> c_void { unsafe { (self.FrameTerminatorGREMEDY.f)() } }
    #[fixed_stack_segment] #[inline] pub fn FrameZoomSGIX(&self, factor: GLint) -> c_void { unsafe { (self.FrameZoomSGIX.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferDrawBufferEXT(&self, framebuffer: GLuint, mode: GLenum) -> c_void { unsafe { (self.FramebufferDrawBufferEXT.f)(framebuffer, mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn FramebufferDrawBuffersEXT(&self, framebuffer: GLuint, n: GLsizei, bufs: *GLenum) -> c_void { (self.FramebufferDrawBuffersEXT.f)(framebuffer, n, bufs) }
    #[fixed_stack_segment] #[inline] pub fn FramebufferParameteri(&self, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.FramebufferParameteri.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferReadBufferEXT(&self, framebuffer: GLuint, mode: GLenum) -> c_void { unsafe { (self.FramebufferReadBufferEXT.f)(framebuffer, mode) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferRenderbuffer(&self, target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.FramebufferRenderbuffer.f)(target, attachment, renderbuffertarget, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferRenderbufferEXT(&self, target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.FramebufferRenderbufferEXT.f)(target, attachment, renderbuffertarget, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferRenderbufferOES(&self, target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.FramebufferRenderbufferOES.f)(target, attachment, renderbuffertarget, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture(&self, target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.FramebufferTexture.f)(target, attachment, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture1D(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.FramebufferTexture1D.f)(target, attachment, textarget, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture1DEXT(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.FramebufferTexture1DEXT.f)(target, attachment, textarget, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture2D(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.FramebufferTexture2D.f)(target, attachment, textarget, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture2DEXT(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.FramebufferTexture2DEXT.f)(target, attachment, textarget, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture2DMultisampleEXT(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void { unsafe { (self.FramebufferTexture2DMultisampleEXT.f)(target, attachment, textarget, texture, level, samples) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture2DMultisampleIMG(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, samples: GLsizei) -> c_void { unsafe { (self.FramebufferTexture2DMultisampleIMG.f)(target, attachment, textarget, texture, level, samples) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture2DOES(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.FramebufferTexture2DOES.f)(target, attachment, textarget, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture3D(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { (self.FramebufferTexture3D.f)(target, attachment, textarget, texture, level, zoffset) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture3DEXT(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { (self.FramebufferTexture3DEXT.f)(target, attachment, textarget, texture, level, zoffset) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTexture3DOES(&self, target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { (self.FramebufferTexture3DOES.f)(target, attachment, textarget, texture, level, zoffset) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTextureARB(&self, target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.FramebufferTextureARB.f)(target, attachment, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTextureEXT(&self, target: GLenum, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.FramebufferTextureEXT.f)(target, attachment, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTextureFaceARB(&self, target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { (self.FramebufferTextureFaceARB.f)(target, attachment, texture, level, face) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTextureFaceEXT(&self, target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { (self.FramebufferTextureFaceEXT.f)(target, attachment, texture, level, face) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTextureLayer(&self, target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { (self.FramebufferTextureLayer.f)(target, attachment, texture, level, layer) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTextureLayerARB(&self, target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { (self.FramebufferTextureLayerARB.f)(target, attachment, texture, level, layer) } }
    #[fixed_stack_segment] #[inline] pub fn FramebufferTextureLayerEXT(&self, target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { (self.FramebufferTextureLayerEXT.f)(target, attachment, texture, level, layer) } }
    #[fixed_stack_segment] #[inline] pub fn FreeObjectBufferATI(&self, buffer: GLuint) -> c_void { unsafe { (self.FreeObjectBufferATI.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub fn FrontFace(&self, mode: GLenum) -> c_void { unsafe { (self.FrontFace.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn Frustum(&self, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (self.Frustum.f)(left, right, bottom, top, zNear, zFar) } }
    #[fixed_stack_segment] #[inline] pub fn Frustumf(&self, l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { (self.Frustumf.f)(l, r, b, t, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn FrustumfOES(&self, l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { (self.FrustumfOES.f)(l, r, b, t, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn Frustumx(&self, l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { (self.Frustumx.f)(l, r, b, t, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn FrustumxOES(&self, l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { (self.FrustumxOES.f)(l, r, b, t, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn GenAsyncMarkersSGIX(&self, range: GLsizei) -> GLuint { unsafe { (self.GenAsyncMarkersSGIX.f)(range) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenBuffers(&self, n: GLsizei, buffers: *GLuint) -> c_void { (self.GenBuffers.f)(n, buffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenBuffersARB(&self, n: GLsizei, buffers: *GLuint) -> c_void { (self.GenBuffersARB.f)(n, buffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenFencesAPPLE(&self, n: GLsizei, fences: *GLuint) -> c_void { (self.GenFencesAPPLE.f)(n, fences) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenFencesNV(&self, n: GLsizei, fences: *GLuint) -> c_void { (self.GenFencesNV.f)(n, fences) }
    #[fixed_stack_segment] #[inline] pub fn GenFragmentShadersATI(&self, range: GLuint) -> GLuint { unsafe { (self.GenFragmentShadersATI.f)(range) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenFramebuffers(&self, n: GLsizei, framebuffers: *GLuint) -> c_void { (self.GenFramebuffers.f)(n, framebuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenFramebuffersEXT(&self, n: GLsizei, framebuffers: *GLuint) -> c_void { (self.GenFramebuffersEXT.f)(n, framebuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenFramebuffersOES(&self, n: GLsizei, framebuffers: *GLuint) -> c_void { (self.GenFramebuffersOES.f)(n, framebuffers) }
    #[fixed_stack_segment] #[inline] pub fn GenLists(&self, range: GLsizei) -> GLuint { unsafe { (self.GenLists.f)(range) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenNamesAMD(&self, identifier: GLenum, num: GLuint, names: *GLuint) -> c_void { (self.GenNamesAMD.f)(identifier, num, names) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenOcclusionQueriesNV(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.GenOcclusionQueriesNV.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub fn GenPathsNV(&self, range: GLsizei) -> GLuint { unsafe { (self.GenPathsNV.f)(range) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenPerfMonitorsAMD(&self, n: GLsizei, monitors: *GLuint) -> c_void { (self.GenPerfMonitorsAMD.f)(n, monitors) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenProgramPipelines(&self, n: GLsizei, pipelines: *GLuint) -> c_void { (self.GenProgramPipelines.f)(n, pipelines) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenProgramPipelinesEXT(&self, n: GLsizei, pipelines: *GLuint) -> c_void { (self.GenProgramPipelinesEXT.f)(n, pipelines) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenProgramsARB(&self, n: GLsizei, programs: *GLuint) -> c_void { (self.GenProgramsARB.f)(n, programs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenProgramsNV(&self, n: GLsizei, programs: *GLuint) -> c_void { (self.GenProgramsNV.f)(n, programs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenQueries(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.GenQueries.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenQueriesARB(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.GenQueriesARB.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenQueriesEXT(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.GenQueriesEXT.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenRenderbuffers(&self, n: GLsizei, renderbuffers: *GLuint) -> c_void { (self.GenRenderbuffers.f)(n, renderbuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenRenderbuffersEXT(&self, n: GLsizei, renderbuffers: *GLuint) -> c_void { (self.GenRenderbuffersEXT.f)(n, renderbuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenRenderbuffersOES(&self, n: GLsizei, renderbuffers: *GLuint) -> c_void { (self.GenRenderbuffersOES.f)(n, renderbuffers) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenSamplers(&self, count: GLsizei, samplers: *GLuint) -> c_void { (self.GenSamplers.f)(count, samplers) }
    #[fixed_stack_segment] #[inline] pub fn GenSymbolsEXT(&self, datatype: GLenum, storagetype: GLenum, range: GLenum, components: GLuint) -> GLuint { unsafe { (self.GenSymbolsEXT.f)(datatype, storagetype, range, components) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenTextures(&self, n: GLsizei, textures: *GLuint) -> c_void { (self.GenTextures.f)(n, textures) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenTexturesEXT(&self, n: GLsizei, textures: *GLuint) -> c_void { (self.GenTexturesEXT.f)(n, textures) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenTransformFeedbacks(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.GenTransformFeedbacks.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenTransformFeedbacksNV(&self, n: GLsizei, ids: *GLuint) -> c_void { (self.GenTransformFeedbacksNV.f)(n, ids) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenVertexArrays(&self, n: GLsizei, arrays: *GLuint) -> c_void { (self.GenVertexArrays.f)(n, arrays) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenVertexArraysAPPLE(&self, n: GLsizei, arrays: *GLuint) -> c_void { (self.GenVertexArraysAPPLE.f)(n, arrays) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GenVertexArraysOES(&self, n: GLsizei, arrays: *GLuint) -> c_void { (self.GenVertexArraysOES.f)(n, arrays) }
    #[fixed_stack_segment] #[inline] pub fn GenVertexShadersEXT(&self, range: GLuint) -> GLuint { unsafe { (self.GenVertexShadersEXT.f)(range) } }
    #[fixed_stack_segment] #[inline] pub fn GenerateMipmap(&self, target: GLenum) -> c_void { unsafe { (self.GenerateMipmap.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn GenerateMipmapEXT(&self, target: GLenum) -> c_void { unsafe { (self.GenerateMipmapEXT.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn GenerateMipmapOES(&self, target: GLenum) -> c_void { unsafe { (self.GenerateMipmapOES.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn GenerateMultiTexMipmapEXT(&self, texunit: GLenum, target: GLenum) -> c_void { unsafe { (self.GenerateMultiTexMipmapEXT.f)(texunit, target) } }
    #[fixed_stack_segment] #[inline] pub fn GenerateTextureMipmapEXT(&self, texture: GLuint, target: GLenum) -> c_void { unsafe { (self.GenerateTextureMipmapEXT.f)(texture, target) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveAtomicCounterBufferiv(&self, program: GLuint, bufferIndex: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetActiveAtomicCounterBufferiv.f)(program, bufferIndex, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveAttrib(&self, program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void { (self.GetActiveAttrib.f)(program, index, bufSize, length, size, type_, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveAttribARB(&self, programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void { (self.GetActiveAttribARB.f)(programObj, index, maxLength, length, size, type_, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveSubroutineName(&self, program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { (self.GetActiveSubroutineName.f)(program, shadertype, index, bufsize, length, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveSubroutineUniformName(&self, program: GLuint, shadertype: GLenum, index: GLuint, bufsize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { (self.GetActiveSubroutineUniformName.f)(program, shadertype, index, bufsize, length, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveSubroutineUniformiv(&self, program: GLuint, shadertype: GLenum, index: GLuint, pname: GLenum, values: *GLint) -> c_void { (self.GetActiveSubroutineUniformiv.f)(program, shadertype, index, pname, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveUniform(&self, program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLchar) -> c_void { (self.GetActiveUniform.f)(program, index, bufSize, length, size, type_, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveUniformARB(&self, programObj: GLhandleARB, index: GLuint, maxLength: GLsizei, length: *GLsizei, size: *GLint, type_: *GLenum, name: *GLcharARB) -> c_void { (self.GetActiveUniformARB.f)(programObj, index, maxLength, length, size, type_, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveUniformBlockName(&self, program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformBlockName: *GLchar) -> c_void { (self.GetActiveUniformBlockName.f)(program, uniformBlockIndex, bufSize, length, uniformBlockName) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveUniformBlockiv(&self, program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetActiveUniformBlockiv.f)(program, uniformBlockIndex, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveUniformName(&self, program: GLuint, uniformIndex: GLuint, bufSize: GLsizei, length: *GLsizei, uniformName: *GLchar) -> c_void { (self.GetActiveUniformName.f)(program, uniformIndex, bufSize, length, uniformName) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveUniformsiv(&self, program: GLuint, uniformCount: GLsizei, uniformIndices: *GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetActiveUniformsiv.f)(program, uniformCount, uniformIndices, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetActiveVaryingNV(&self, program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { (self.GetActiveVaryingNV.f)(program, index, bufSize, length, size, type_, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetArrayObjectfvATI(&self, array: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetArrayObjectfvATI.f)(array, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetArrayObjectivATI(&self, array: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetArrayObjectivATI.f)(array, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetAttachedObjectsARB(&self, containerObj: GLhandleARB, maxCount: GLsizei, count: *GLsizei, obj: *GLhandleARB) -> c_void { (self.GetAttachedObjectsARB.f)(containerObj, maxCount, count, obj) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetAttachedShaders(&self, program: GLuint, maxCount: GLsizei, count: *GLsizei, shaders: *GLuint) -> c_void { (self.GetAttachedShaders.f)(program, maxCount, count, shaders) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetAttribLocation(&self, program: GLuint, name: *GLchar) -> GLint { (self.GetAttribLocation.f)(program, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetAttribLocationARB(&self, programObj: GLhandleARB, name: *GLcharARB) -> GLint { (self.GetAttribLocationARB.f)(programObj, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBooleanIndexedvEXT(&self, target: GLenum, index: GLuint, data: *GLboolean) -> c_void { (self.GetBooleanIndexedvEXT.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBooleani_v(&self, target: GLenum, index: GLuint, data: *GLboolean) -> c_void { (self.GetBooleani_v.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBooleanv(&self, pname: GLenum, params: *GLboolean) -> c_void { (self.GetBooleanv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferParameteri64v(&self, target: GLenum, pname: GLenum, params: *GLint64) -> c_void { (self.GetBufferParameteri64v.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetBufferParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferParameterivARB(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetBufferParameterivARB.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferParameterui64vNV(&self, target: GLenum, pname: GLenum, params: *GLuint64EXT) -> c_void { (self.GetBufferParameterui64vNV.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferPointerv(&self, target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { (self.GetBufferPointerv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferPointervARB(&self, target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { (self.GetBufferPointervARB.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferPointervOES(&self, target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { (self.GetBufferPointervOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferSubData(&self, target: GLenum, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { (self.GetBufferSubData.f)(target, offset, size, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetBufferSubDataARB(&self, target: GLenum, offset: GLintptrARB, size: GLsizeiptrARB, data: *GLvoid) -> c_void { (self.GetBufferSubDataARB.f)(target, offset, size, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetClipPlane(&self, plane: GLenum, equation: *GLdouble) -> c_void { (self.GetClipPlane.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetClipPlanef(&self, plane: GLenum, equation: *GLfloat) -> c_void { (self.GetClipPlanef.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetClipPlanefOES(&self, plane: GLenum, equation: *GLfloat) -> c_void { (self.GetClipPlanefOES.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetClipPlanex(&self, plane: GLenum, equation: *GLfixed) -> c_void { (self.GetClipPlanex.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetClipPlanexOES(&self, plane: GLenum, equation: *GLfixed) -> c_void { (self.GetClipPlanexOES.f)(plane, equation) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTable(&self, target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { (self.GetColorTable.f)(target, format, type_, table) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTableEXT(&self, target: GLenum, format: GLenum, type_: GLenum, data: *GLvoid) -> c_void { (self.GetColorTableEXT.f)(target, format, type_, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTableParameterfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetColorTableParameterfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTableParameterfvEXT(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetColorTableParameterfvEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTableParameterfvSGI(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetColorTableParameterfvSGI.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTableParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetColorTableParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTableParameterivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetColorTableParameterivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTableParameterivSGI(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetColorTableParameterivSGI.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetColorTableSGI(&self, target: GLenum, format: GLenum, type_: GLenum, table: *GLvoid) -> c_void { (self.GetColorTableSGI.f)(target, format, type_, table) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCombinerInputParameterfvNV(&self, stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetCombinerInputParameterfvNV.f)(stage, portion, variable, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCombinerInputParameterivNV(&self, stage: GLenum, portion: GLenum, variable: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetCombinerInputParameterivNV.f)(stage, portion, variable, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCombinerOutputParameterfvNV(&self, stage: GLenum, portion: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetCombinerOutputParameterfvNV.f)(stage, portion, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCombinerOutputParameterivNV(&self, stage: GLenum, portion: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetCombinerOutputParameterivNV.f)(stage, portion, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCombinerStageParameterfvNV(&self, stage: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetCombinerStageParameterfvNV.f)(stage, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCompressedMultiTexImageEXT(&self, texunit: GLenum, target: GLenum, lod: GLint, img: *GLvoid) -> c_void { (self.GetCompressedMultiTexImageEXT.f)(texunit, target, lod, img) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCompressedTexImage(&self, target: GLenum, level: GLint, img: *GLvoid) -> c_void { (self.GetCompressedTexImage.f)(target, level, img) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCompressedTexImageARB(&self, target: GLenum, level: GLint, img: *GLvoid) -> c_void { (self.GetCompressedTexImageARB.f)(target, level, img) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetCompressedTextureImageEXT(&self, texture: GLuint, target: GLenum, lod: GLint, img: *GLvoid) -> c_void { (self.GetCompressedTextureImageEXT.f)(texture, target, lod, img) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetConvolutionFilter(&self, target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { (self.GetConvolutionFilter.f)(target, format, type_, image) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetConvolutionFilterEXT(&self, target: GLenum, format: GLenum, type_: GLenum, image: *GLvoid) -> c_void { (self.GetConvolutionFilterEXT.f)(target, format, type_, image) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetConvolutionParameterfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetConvolutionParameterfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetConvolutionParameterfvEXT(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetConvolutionParameterfvEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetConvolutionParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetConvolutionParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetConvolutionParameterivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetConvolutionParameterivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetConvolutionParameterxvOES(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetConvolutionParameterxvOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDebugMessageLog(&self, count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { (self.GetDebugMessageLog.f)(count, bufsize, sources, types, ids, severities, lengths, messageLog) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDebugMessageLogAMD(&self, count: GLuint, bufsize: GLsizei, categories: *GLenum, severities: *GLuint, ids: *GLuint, lengths: *GLsizei, message: *GLchar) -> GLuint { (self.GetDebugMessageLogAMD.f)(count, bufsize, categories, severities, ids, lengths, message) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDebugMessageLogARB(&self, count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { (self.GetDebugMessageLogARB.f)(count, bufsize, sources, types, ids, severities, lengths, messageLog) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDebugMessageLogKHR(&self, count: GLuint, bufsize: GLsizei, sources: *GLenum, types: *GLenum, ids: *GLuint, severities: *GLenum, lengths: *GLsizei, messageLog: *GLchar) -> GLuint { (self.GetDebugMessageLogKHR.f)(count, bufsize, sources, types, ids, severities, lengths, messageLog) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDetailTexFuncSGIS(&self, target: GLenum, points: *GLfloat) -> c_void { (self.GetDetailTexFuncSGIS.f)(target, points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDoubleIndexedvEXT(&self, target: GLenum, index: GLuint, data: *GLdouble) -> c_void { (self.GetDoubleIndexedvEXT.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDoublei_v(&self, target: GLenum, index: GLuint, data: *GLdouble) -> c_void { (self.GetDoublei_v.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDoublei_vEXT(&self, pname: GLenum, index: GLuint, params: *GLdouble) -> c_void { (self.GetDoublei_vEXT.f)(pname, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDoublev(&self, pname: GLenum, params: *GLdouble) -> c_void { (self.GetDoublev.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDriverControlStringQCOM(&self, driverControl: GLuint, bufSize: GLsizei, length: *GLsizei, driverControlString: *GLchar) -> c_void { (self.GetDriverControlStringQCOM.f)(driverControl, bufSize, length, driverControlString) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetDriverControlsQCOM(&self, num: *GLint, size: GLsizei, driverControls: *GLuint) -> c_void { (self.GetDriverControlsQCOM.f)(num, size, driverControls) }
    #[fixed_stack_segment] #[inline] pub fn GetError(&self) -> GLenum { unsafe { (self.GetError.f)() } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFenceivNV(&self, fence: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetFenceivNV.f)(fence, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFinalCombinerInputParameterfvNV(&self, variable: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetFinalCombinerInputParameterfvNV.f)(variable, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFinalCombinerInputParameterivNV(&self, variable: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetFinalCombinerInputParameterivNV.f)(variable, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFixedv(&self, pname: GLenum, params: *GLfixed) -> c_void { (self.GetFixedv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFixedvOES(&self, pname: GLenum, params: *GLfixed) -> c_void { (self.GetFixedvOES.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFloatIndexedvEXT(&self, target: GLenum, index: GLuint, data: *GLfloat) -> c_void { (self.GetFloatIndexedvEXT.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFloati_v(&self, target: GLenum, index: GLuint, data: *GLfloat) -> c_void { (self.GetFloati_v.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFloati_vEXT(&self, pname: GLenum, index: GLuint, params: *GLfloat) -> c_void { (self.GetFloati_vEXT.f)(pname, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFloatv(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.GetFloatv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFogFuncSGIS(&self, points: *GLfloat) -> c_void { (self.GetFogFuncSGIS.f)(points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFragDataIndex(&self, program: GLuint, name: *GLchar) -> GLint { (self.GetFragDataIndex.f)(program, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFragDataLocation(&self, program: GLuint, name: *GLchar) -> GLint { (self.GetFragDataLocation.f)(program, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFragDataLocationEXT(&self, program: GLuint, name: *GLchar) -> GLint { (self.GetFragDataLocationEXT.f)(program, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFragmentLightfvSGIX(&self, light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetFragmentLightfvSGIX.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFragmentLightivSGIX(&self, light: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetFragmentLightivSGIX.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFragmentMaterialfvSGIX(&self, face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetFragmentMaterialfvSGIX.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFragmentMaterialivSGIX(&self, face: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetFragmentMaterialivSGIX.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFramebufferAttachmentParameteriv(&self, target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetFramebufferAttachmentParameteriv.f)(target, attachment, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFramebufferAttachmentParameterivEXT(&self, target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetFramebufferAttachmentParameterivEXT.f)(target, attachment, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFramebufferAttachmentParameterivOES(&self, target: GLenum, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetFramebufferAttachmentParameterivOES.f)(target, attachment, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFramebufferParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetFramebufferParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetFramebufferParameterivEXT(&self, framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetFramebufferParameterivEXT.f)(framebuffer, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn GetGraphicsResetStatusARB(&self) -> GLenum { unsafe { (self.GetGraphicsResetStatusARB.f)() } }
    #[fixed_stack_segment] #[inline] pub fn GetGraphicsResetStatusEXT(&self) -> GLenum { unsafe { (self.GetGraphicsResetStatusEXT.f)() } }
    #[fixed_stack_segment] #[inline] pub fn GetHandleARB(&self, pname: GLenum) -> GLhandleARB { unsafe { (self.GetHandleARB.f)(pname) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetHistogram(&self, target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { (self.GetHistogram.f)(target, reset, format, type_, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetHistogramEXT(&self, target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { (self.GetHistogramEXT.f)(target, reset, format, type_, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetHistogramParameterfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetHistogramParameterfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetHistogramParameterfvEXT(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetHistogramParameterfvEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetHistogramParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetHistogramParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetHistogramParameterivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetHistogramParameterivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetHistogramParameterxvOES(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetHistogramParameterxvOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn GetImageHandleARB(&self, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 { unsafe { (self.GetImageHandleARB.f)(texture, level, layered, layer, format) } }
    #[fixed_stack_segment] #[inline] pub fn GetImageHandleNV(&self, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, format: GLenum) -> GLuint64 { unsafe { (self.GetImageHandleNV.f)(texture, level, layered, layer, format) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetImageTransformParameterfvHP(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetImageTransformParameterfvHP.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetImageTransformParameterivHP(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetImageTransformParameterivHP.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInfoLogARB(&self, obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, infoLog: *GLcharARB) -> c_void { (self.GetInfoLogARB.f)(obj, maxLength, length, infoLog) }
    #[fixed_stack_segment] #[inline] pub fn GetInstrumentsSGIX(&self) -> GLint { unsafe { (self.GetInstrumentsSGIX.f)() } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInteger64i_v(&self, target: GLenum, index: GLuint, data: *GLint64) -> c_void { (self.GetInteger64i_v.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInteger64v(&self, pname: GLenum, params: *GLint64) -> c_void { (self.GetInteger64v.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInteger64vAPPLE(&self, pname: GLenum, params: *GLint64) -> c_void { (self.GetInteger64vAPPLE.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetIntegerIndexedvEXT(&self, target: GLenum, index: GLuint, data: *GLint) -> c_void { (self.GetIntegerIndexedvEXT.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetIntegeri_v(&self, target: GLenum, index: GLuint, data: *GLint) -> c_void { (self.GetIntegeri_v.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetIntegeri_vEXT(&self, target: GLenum, index: GLuint, data: *GLint) -> c_void { (self.GetIntegeri_vEXT.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetIntegerui64i_vNV(&self, value: GLenum, index: GLuint, result: *GLuint64EXT) -> c_void { (self.GetIntegerui64i_vNV.f)(value, index, result) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetIntegerui64vNV(&self, value: GLenum, result: *GLuint64EXT) -> c_void { (self.GetIntegerui64vNV.f)(value, result) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetIntegerv(&self, pname: GLenum, params: *GLint) -> c_void { (self.GetIntegerv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInternalformati64v(&self, target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint64) -> c_void { (self.GetInternalformati64v.f)(target, internalformat, pname, bufSize, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInternalformativ(&self, target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: *GLint) -> c_void { (self.GetInternalformativ.f)(target, internalformat, pname, bufSize, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInvariantBooleanvEXT(&self, id: GLuint, value: GLenum, data: *GLboolean) -> c_void { (self.GetInvariantBooleanvEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInvariantFloatvEXT(&self, id: GLuint, value: GLenum, data: *GLfloat) -> c_void { (self.GetInvariantFloatvEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetInvariantIntegervEXT(&self, id: GLuint, value: GLenum, data: *GLint) -> c_void { (self.GetInvariantIntegervEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLightfv(&self, light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetLightfv.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLightiv(&self, light: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetLightiv.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLightx(&self, light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetLightx.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLightxOES(&self, light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetLightxOES.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLightxv(&self, light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetLightxv.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLightxvOES(&self, light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetLightxvOES.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetListParameterfvSGIX(&self, list: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetListParameterfvSGIX.f)(list, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetListParameterivSGIX(&self, list: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetListParameterivSGIX.f)(list, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLocalConstantBooleanvEXT(&self, id: GLuint, value: GLenum, data: *GLboolean) -> c_void { (self.GetLocalConstantBooleanvEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLocalConstantFloatvEXT(&self, id: GLuint, value: GLenum, data: *GLfloat) -> c_void { (self.GetLocalConstantFloatvEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetLocalConstantIntegervEXT(&self, id: GLuint, value: GLenum, data: *GLint) -> c_void { (self.GetLocalConstantIntegervEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapAttribParameterfvNV(&self, target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMapAttribParameterfvNV.f)(target, index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapAttribParameterivNV(&self, target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetMapAttribParameterivNV.f)(target, index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapControlPointsNV(&self, target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, packed: GLboolean, points: *GLvoid) -> c_void { (self.GetMapControlPointsNV.f)(target, index, type_, ustride, vstride, packed, points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapParameterfvNV(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMapParameterfvNV.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapParameterivNV(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetMapParameterivNV.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapdv(&self, target: GLenum, query: GLenum, v: *GLdouble) -> c_void { (self.GetMapdv.f)(target, query, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapfv(&self, target: GLenum, query: GLenum, v: *GLfloat) -> c_void { (self.GetMapfv.f)(target, query, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapiv(&self, target: GLenum, query: GLenum, v: *GLint) -> c_void { (self.GetMapiv.f)(target, query, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMapxvOES(&self, target: GLenum, query: GLenum, v: *GLfixed) -> c_void { (self.GetMapxvOES.f)(target, query, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMaterialfv(&self, face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMaterialfv.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMaterialiv(&self, face: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetMaterialiv.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn GetMaterialx(&self, face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.GetMaterialx.f)(face, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn GetMaterialxOES(&self, face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.GetMaterialxOES.f)(face, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMaterialxv(&self, face: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetMaterialxv.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMaterialxvOES(&self, face: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetMaterialxvOES.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMinmax(&self, target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { (self.GetMinmax.f)(target, reset, format, type_, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMinmaxEXT(&self, target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, values: *GLvoid) -> c_void { (self.GetMinmaxEXT.f)(target, reset, format, type_, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMinmaxParameterfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMinmaxParameterfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMinmaxParameterfvEXT(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMinmaxParameterfvEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMinmaxParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetMinmaxParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMinmaxParameterivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetMinmaxParameterivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexEnvfvEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMultiTexEnvfvEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexEnvivEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetMultiTexEnvivEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexGendvEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { (self.GetMultiTexGendvEXT.f)(texunit, coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexGenfvEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMultiTexGenfvEXT.f)(texunit, coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexGenivEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetMultiTexGenivEXT.f)(texunit, coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexImageEXT(&self, texunit: GLenum, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.GetMultiTexImageEXT.f)(texunit, target, level, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexLevelParameterfvEXT(&self, texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMultiTexLevelParameterfvEXT.f)(texunit, target, level, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexLevelParameterivEXT(&self, texunit: GLenum, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { (self.GetMultiTexLevelParameterivEXT.f)(texunit, target, level, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexParameterIivEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetMultiTexParameterIivEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexParameterIuivEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { (self.GetMultiTexParameterIuivEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexParameterfvEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetMultiTexParameterfvEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultiTexParameterivEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetMultiTexParameterivEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultisamplefv(&self, pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { (self.GetMultisamplefv.f)(pname, index, val) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetMultisamplefvNV(&self, pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { (self.GetMultisamplefvNV.f)(pname, index, val) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedBufferParameterivEXT(&self, buffer: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetNamedBufferParameterivEXT.f)(buffer, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedBufferParameterui64vNV(&self, buffer: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { (self.GetNamedBufferParameterui64vNV.f)(buffer, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedBufferPointervEXT(&self, buffer: GLuint, pname: GLenum, params: **GLvoid) -> c_void { (self.GetNamedBufferPointervEXT.f)(buffer, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedBufferSubDataEXT(&self, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { (self.GetNamedBufferSubDataEXT.f)(buffer, offset, size, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedFramebufferAttachmentParameterivEXT(&self, framebuffer: GLuint, attachment: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetNamedFramebufferAttachmentParameterivEXT.f)(framebuffer, attachment, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedFramebufferParameterivEXT(&self, framebuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetNamedFramebufferParameterivEXT.f)(framebuffer, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedProgramLocalParameterIivEXT(&self, program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void { (self.GetNamedProgramLocalParameterIivEXT.f)(program, target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedProgramLocalParameterIuivEXT(&self, program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void { (self.GetNamedProgramLocalParameterIuivEXT.f)(program, target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedProgramLocalParameterdvEXT(&self, program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { (self.GetNamedProgramLocalParameterdvEXT.f)(program, target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedProgramLocalParameterfvEXT(&self, program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { (self.GetNamedProgramLocalParameterfvEXT.f)(program, target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedProgramStringEXT(&self, program: GLuint, target: GLenum, pname: GLenum, string: *GLvoid) -> c_void { (self.GetNamedProgramStringEXT.f)(program, target, pname, string) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedProgramivEXT(&self, program: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetNamedProgramivEXT.f)(program, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedRenderbufferParameterivEXT(&self, renderbuffer: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetNamedRenderbufferParameterivEXT.f)(renderbuffer, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedStringARB(&self, namelen: GLint, name: *GLchar, bufSize: GLsizei, stringlen: *GLint, string: *GLchar) -> c_void { (self.GetNamedStringARB.f)(namelen, name, bufSize, stringlen, string) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetNamedStringivARB(&self, namelen: GLint, name: *GLchar, pname: GLenum, params: *GLint) -> c_void { (self.GetNamedStringivARB.f)(namelen, name, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectBufferfvATI(&self, buffer: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetObjectBufferfvATI.f)(buffer, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectBufferivATI(&self, buffer: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetObjectBufferivATI.f)(buffer, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectLabel(&self, identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { (self.GetObjectLabel.f)(identifier, name, bufSize, length, label) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectLabelEXT(&self, type_: GLenum, object: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { (self.GetObjectLabelEXT.f)(type_, object, bufSize, length, label) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectLabelKHR(&self, identifier: GLenum, name: GLuint, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { (self.GetObjectLabelKHR.f)(identifier, name, bufSize, length, label) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectParameterfvARB(&self, obj: GLhandleARB, pname: GLenum, params: *GLfloat) -> c_void { (self.GetObjectParameterfvARB.f)(obj, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectParameterivAPPLE(&self, objectType: GLenum, name: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetObjectParameterivAPPLE.f)(objectType, name, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectParameterivARB(&self, obj: GLhandleARB, pname: GLenum, params: *GLint) -> c_void { (self.GetObjectParameterivARB.f)(obj, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectPtrLabel(&self, ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { (self.GetObjectPtrLabel.f)(ptr, bufSize, length, label) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetObjectPtrLabelKHR(&self, ptr: *c_void, bufSize: GLsizei, length: *GLsizei, label: *GLchar) -> c_void { (self.GetObjectPtrLabelKHR.f)(ptr, bufSize, length, label) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetOcclusionQueryivNV(&self, id: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetOcclusionQueryivNV.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetOcclusionQueryuivNV(&self, id: GLuint, pname: GLenum, params: *GLuint) -> c_void { (self.GetOcclusionQueryuivNV.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathColorGenfvNV(&self, color: GLenum, pname: GLenum, value: *GLfloat) -> c_void { (self.GetPathColorGenfvNV.f)(color, pname, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathColorGenivNV(&self, color: GLenum, pname: GLenum, value: *GLint) -> c_void { (self.GetPathColorGenivNV.f)(color, pname, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathCommandsNV(&self, path: GLuint, commands: *GLubyte) -> c_void { (self.GetPathCommandsNV.f)(path, commands) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathCoordsNV(&self, path: GLuint, coords: *GLfloat) -> c_void { (self.GetPathCoordsNV.f)(path, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathDashArrayNV(&self, path: GLuint, dashArray: *GLfloat) -> c_void { (self.GetPathDashArrayNV.f)(path, dashArray) }
    #[fixed_stack_segment] #[inline] pub fn GetPathLengthNV(&self, path: GLuint, startSegment: GLsizei, numSegments: GLsizei) -> GLfloat { unsafe { (self.GetPathLengthNV.f)(path, startSegment, numSegments) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathMetricRangeNV(&self, metricQueryMask: GLbitfield, firstPathName: GLuint, numPaths: GLsizei, stride: GLsizei, metrics: *GLfloat) -> c_void { (self.GetPathMetricRangeNV.f)(metricQueryMask, firstPathName, numPaths, stride, metrics) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathMetricsNV(&self, metricQueryMask: GLbitfield, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, stride: GLsizei, metrics: *GLfloat) -> c_void { (self.GetPathMetricsNV.f)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathParameterfvNV(&self, path: GLuint, pname: GLenum, value: *GLfloat) -> c_void { (self.GetPathParameterfvNV.f)(path, pname, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathParameterivNV(&self, path: GLuint, pname: GLenum, value: *GLint) -> c_void { (self.GetPathParameterivNV.f)(path, pname, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathSpacingNV(&self, pathListMode: GLenum, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, advanceScale: GLfloat, kerningScale: GLfloat, transformType: GLenum, returnedSpacing: *GLfloat) -> c_void { (self.GetPathSpacingNV.f)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathTexGenfvNV(&self, texCoordSet: GLenum, pname: GLenum, value: *GLfloat) -> c_void { (self.GetPathTexGenfvNV.f)(texCoordSet, pname, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPathTexGenivNV(&self, texCoordSet: GLenum, pname: GLenum, value: *GLint) -> c_void { (self.GetPathTexGenivNV.f)(texCoordSet, pname, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPerfMonitorCounterDataAMD(&self, monitor: GLuint, pname: GLenum, dataSize: GLsizei, data: *GLuint, bytesWritten: *GLint) -> c_void { (self.GetPerfMonitorCounterDataAMD.f)(monitor, pname, dataSize, data, bytesWritten) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPerfMonitorCounterInfoAMD(&self, group: GLuint, counter: GLuint, pname: GLenum, data: *GLvoid) -> c_void { (self.GetPerfMonitorCounterInfoAMD.f)(group, counter, pname, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPerfMonitorCounterStringAMD(&self, group: GLuint, counter: GLuint, bufSize: GLsizei, length: *GLsizei, counterString: *GLchar) -> c_void { (self.GetPerfMonitorCounterStringAMD.f)(group, counter, bufSize, length, counterString) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPerfMonitorCountersAMD(&self, group: GLuint, numCounters: *GLint, maxActiveCounters: *GLint, counterSize: GLsizei, counters: *GLuint) -> c_void { (self.GetPerfMonitorCountersAMD.f)(group, numCounters, maxActiveCounters, counterSize, counters) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPerfMonitorGroupStringAMD(&self, group: GLuint, bufSize: GLsizei, length: *GLsizei, groupString: *GLchar) -> c_void { (self.GetPerfMonitorGroupStringAMD.f)(group, bufSize, length, groupString) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPerfMonitorGroupsAMD(&self, numGroups: *GLint, groupsSize: GLsizei, groups: *GLuint) -> c_void { (self.GetPerfMonitorGroupsAMD.f)(numGroups, groupsSize, groups) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPixelMapfv(&self, map: GLenum, values: *GLfloat) -> c_void { (self.GetPixelMapfv.f)(map, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPixelMapuiv(&self, map: GLenum, values: *GLuint) -> c_void { (self.GetPixelMapuiv.f)(map, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPixelMapusv(&self, map: GLenum, values: *GLushort) -> c_void { (self.GetPixelMapusv.f)(map, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPixelMapxv(&self, map: GLenum, size: GLint, values: *GLfixed) -> c_void { (self.GetPixelMapxv.f)(map, size, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPixelTexGenParameterfvSGIS(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.GetPixelTexGenParameterfvSGIS.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPixelTexGenParameterivSGIS(&self, pname: GLenum, params: *GLint) -> c_void { (self.GetPixelTexGenParameterivSGIS.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPixelTransformParameterfvEXT(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetPixelTransformParameterfvEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPixelTransformParameterivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetPixelTransformParameterivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPointerIndexedvEXT(&self, target: GLenum, index: GLuint, data: **GLvoid) -> c_void { (self.GetPointerIndexedvEXT.f)(target, index, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPointeri_vEXT(&self, pname: GLenum, index: GLuint, params: **GLvoid) -> c_void { (self.GetPointeri_vEXT.f)(pname, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPointerv(&self, pname: GLenum, params: **GLvoid) -> c_void { (self.GetPointerv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPointervEXT(&self, pname: GLenum, params: **GLvoid) -> c_void { (self.GetPointervEXT.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPointervKHR(&self, pname: GLenum, params: **GLvoid) -> c_void { (self.GetPointervKHR.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetPolygonStipple(&self, mask: *GLubyte) -> c_void { (self.GetPolygonStipple.f)(mask) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramBinary(&self, program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void { (self.GetProgramBinary.f)(program, bufSize, length, binaryFormat, binary) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramBinaryOES(&self, program: GLuint, bufSize: GLsizei, length: *GLsizei, binaryFormat: *GLenum, binary: *GLvoid) -> c_void { (self.GetProgramBinaryOES.f)(program, bufSize, length, binaryFormat, binary) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramEnvParameterIivNV(&self, target: GLenum, index: GLuint, params: *GLint) -> c_void { (self.GetProgramEnvParameterIivNV.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramEnvParameterIuivNV(&self, target: GLenum, index: GLuint, params: *GLuint) -> c_void { (self.GetProgramEnvParameterIuivNV.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramEnvParameterdvARB(&self, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { (self.GetProgramEnvParameterdvARB.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramEnvParameterfvARB(&self, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { (self.GetProgramEnvParameterfvARB.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramInfoLog(&self, program: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { (self.GetProgramInfoLog.f)(program, bufSize, length, infoLog) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramInterfaceiv(&self, program: GLuint, programInterface: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetProgramInterfaceiv.f)(program, programInterface, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramLocalParameterIivNV(&self, target: GLenum, index: GLuint, params: *GLint) -> c_void { (self.GetProgramLocalParameterIivNV.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramLocalParameterIuivNV(&self, target: GLenum, index: GLuint, params: *GLuint) -> c_void { (self.GetProgramLocalParameterIuivNV.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramLocalParameterdvARB(&self, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { (self.GetProgramLocalParameterdvARB.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramLocalParameterfvARB(&self, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { (self.GetProgramLocalParameterfvARB.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramNamedParameterdvNV(&self, id: GLuint, len: GLsizei, name: *GLubyte, params: *GLdouble) -> c_void { (self.GetProgramNamedParameterdvNV.f)(id, len, name, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramNamedParameterfvNV(&self, id: GLuint, len: GLsizei, name: *GLubyte, params: *GLfloat) -> c_void { (self.GetProgramNamedParameterfvNV.f)(id, len, name, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramParameterdvNV(&self, target: GLenum, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { (self.GetProgramParameterdvNV.f)(target, index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramParameterfvNV(&self, target: GLenum, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetProgramParameterfvNV.f)(target, index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramPipelineInfoLog(&self, pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { (self.GetProgramPipelineInfoLog.f)(pipeline, bufSize, length, infoLog) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramPipelineInfoLogEXT(&self, pipeline: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { (self.GetProgramPipelineInfoLogEXT.f)(pipeline, bufSize, length, infoLog) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramPipelineiv(&self, pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetProgramPipelineiv.f)(pipeline, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramPipelineivEXT(&self, pipeline: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetProgramPipelineivEXT.f)(pipeline, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramResourceIndex(&self, program: GLuint, programInterface: GLenum, name: *GLchar) -> GLuint { (self.GetProgramResourceIndex.f)(program, programInterface, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramResourceLocation(&self, program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint { (self.GetProgramResourceLocation.f)(program, programInterface, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramResourceLocationIndex(&self, program: GLuint, programInterface: GLenum, name: *GLchar) -> GLint { (self.GetProgramResourceLocationIndex.f)(program, programInterface, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramResourceName(&self, program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: *GLsizei, name: *GLchar) -> c_void { (self.GetProgramResourceName.f)(program, programInterface, index, bufSize, length, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramResourceiv(&self, program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: *GLenum, bufSize: GLsizei, length: *GLsizei, params: *GLint) -> c_void { (self.GetProgramResourceiv.f)(program, programInterface, index, propCount, props, bufSize, length, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramStageiv(&self, program: GLuint, shadertype: GLenum, pname: GLenum, values: *GLint) -> c_void { (self.GetProgramStageiv.f)(program, shadertype, pname, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramStringARB(&self, target: GLenum, pname: GLenum, string: *GLvoid) -> c_void { (self.GetProgramStringARB.f)(target, pname, string) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramStringNV(&self, id: GLuint, pname: GLenum, program: *GLubyte) -> c_void { (self.GetProgramStringNV.f)(id, pname, program) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramSubroutineParameteruivNV(&self, target: GLenum, index: GLuint, param: *GLuint) -> c_void { (self.GetProgramSubroutineParameteruivNV.f)(target, index, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramiv(&self, program: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetProgramiv.f)(program, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramivARB(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetProgramivARB.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetProgramivNV(&self, id: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetProgramivNV.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryIndexediv(&self, target: GLenum, index: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetQueryIndexediv.f)(target, index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjecti64v(&self, id: GLuint, pname: GLenum, params: *GLint64) -> c_void { (self.GetQueryObjecti64v.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjecti64vEXT(&self, id: GLuint, pname: GLenum, params: *GLint64) -> c_void { (self.GetQueryObjecti64vEXT.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjectiv(&self, id: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetQueryObjectiv.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjectivARB(&self, id: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetQueryObjectivARB.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjectivEXT(&self, id: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetQueryObjectivEXT.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjectui64v(&self, id: GLuint, pname: GLenum, params: *GLuint64) -> c_void { (self.GetQueryObjectui64v.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjectui64vEXT(&self, id: GLuint, pname: GLenum, params: *GLuint64) -> c_void { (self.GetQueryObjectui64vEXT.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjectuiv(&self, id: GLuint, pname: GLenum, params: *GLuint) -> c_void { (self.GetQueryObjectuiv.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjectuivARB(&self, id: GLuint, pname: GLenum, params: *GLuint) -> c_void { (self.GetQueryObjectuivARB.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryObjectuivEXT(&self, id: GLuint, pname: GLenum, params: *GLuint) -> c_void { (self.GetQueryObjectuivEXT.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryiv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetQueryiv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryivARB(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetQueryivARB.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetQueryivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetQueryivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetRenderbufferParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetRenderbufferParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetRenderbufferParameterivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetRenderbufferParameterivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetRenderbufferParameterivOES(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetRenderbufferParameterivOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSamplerParameterIiv(&self, sampler: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetSamplerParameterIiv.f)(sampler, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSamplerParameterIuiv(&self, sampler: GLuint, pname: GLenum, params: *GLuint) -> c_void { (self.GetSamplerParameterIuiv.f)(sampler, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSamplerParameterfv(&self, sampler: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetSamplerParameterfv.f)(sampler, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSamplerParameteriv(&self, sampler: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetSamplerParameteriv.f)(sampler, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSeparableFilter(&self, target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void { (self.GetSeparableFilter.f)(target, format, type_, row, column, span) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSeparableFilterEXT(&self, target: GLenum, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid, span: *GLvoid) -> c_void { (self.GetSeparableFilterEXT.f)(target, format, type_, row, column, span) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetShaderInfoLog(&self, shader: GLuint, bufSize: GLsizei, length: *GLsizei, infoLog: *GLchar) -> c_void { (self.GetShaderInfoLog.f)(shader, bufSize, length, infoLog) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetShaderPrecisionFormat(&self, shadertype: GLenum, precisiontype: GLenum, range: *GLint, precision: *GLint) -> c_void { (self.GetShaderPrecisionFormat.f)(shadertype, precisiontype, range, precision) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetShaderSource(&self, shader: GLuint, bufSize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void { (self.GetShaderSource.f)(shader, bufSize, length, source) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetShaderSourceARB(&self, obj: GLhandleARB, maxLength: GLsizei, length: *GLsizei, source: *GLcharARB) -> c_void { (self.GetShaderSourceARB.f)(obj, maxLength, length, source) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetShaderiv(&self, shader: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetShaderiv.f)(shader, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSharpenTexFuncSGIS(&self, target: GLenum, points: *GLfloat) -> c_void { (self.GetSharpenTexFuncSGIS.f)(target, points) }
    #[fixed_stack_segment] #[inline] pub fn GetString(&self, name: GLenum) -> *GLubyte { unsafe { (self.GetString.f)(name) } }
    #[fixed_stack_segment] #[inline] pub fn GetStringi(&self, name: GLenum, index: GLuint) -> *GLubyte { unsafe { (self.GetStringi.f)(name, index) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSubroutineIndex(&self, program: GLuint, shadertype: GLenum, name: *GLchar) -> GLuint { (self.GetSubroutineIndex.f)(program, shadertype, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSubroutineUniformLocation(&self, program: GLuint, shadertype: GLenum, name: *GLchar) -> GLint { (self.GetSubroutineUniformLocation.f)(program, shadertype, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSynciv(&self, sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { (self.GetSynciv.f)(sync, pname, bufSize, length, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetSyncivAPPLE(&self, sync: GLsync, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { (self.GetSyncivAPPLE.f)(sync, pname, bufSize, length, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexBumpParameterfvATI(&self, pname: GLenum, param: *GLfloat) -> c_void { (self.GetTexBumpParameterfvATI.f)(pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexBumpParameterivATI(&self, pname: GLenum, param: *GLint) -> c_void { (self.GetTexBumpParameterivATI.f)(pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexEnvfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetTexEnvfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexEnviv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetTexEnviv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexEnvxv(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetTexEnvxv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexEnvxvOES(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetTexEnvxvOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexFilterFuncSGIS(&self, target: GLenum, filter: GLenum, weights: *GLfloat) -> c_void { (self.GetTexFilterFuncSGIS.f)(target, filter, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexGendv(&self, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { (self.GetTexGendv.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexGenfv(&self, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetTexGenfv.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexGenfvOES(&self, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetTexGenfvOES.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexGeniv(&self, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetTexGeniv.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexGenivOES(&self, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetTexGenivOES.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexGenxvOES(&self, coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetTexGenxvOES.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexImage(&self, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.GetTexImage.f)(target, level, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexLevelParameterfv(&self, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetTexLevelParameterfv.f)(target, level, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexLevelParameteriv(&self, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { (self.GetTexLevelParameteriv.f)(target, level, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexLevelParameterxvOES(&self, target: GLenum, level: GLint, pname: GLenum, params: *GLfixed) -> c_void { (self.GetTexLevelParameterxvOES.f)(target, level, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameterIiv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetTexParameterIiv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameterIivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetTexParameterIivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameterIuiv(&self, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { (self.GetTexParameterIuiv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameterIuivEXT(&self, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { (self.GetTexParameterIuivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameterPointervAPPLE(&self, target: GLenum, pname: GLenum, params: **GLvoid) -> c_void { (self.GetTexParameterPointervAPPLE.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameterfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetTexParameterfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetTexParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameterxv(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetTexParameterxv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTexParameterxvOES(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.GetTexParameterxvOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn GetTextureHandleARB(&self, texture: GLuint) -> GLuint64 { unsafe { (self.GetTextureHandleARB.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub fn GetTextureHandleNV(&self, texture: GLuint) -> GLuint64 { unsafe { (self.GetTextureHandleNV.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTextureImageEXT(&self, texture: GLuint, target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.GetTextureImageEXT.f)(texture, target, level, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTextureLevelParameterfvEXT(&self, texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetTextureLevelParameterfvEXT.f)(texture, target, level, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTextureLevelParameterivEXT(&self, texture: GLuint, target: GLenum, level: GLint, pname: GLenum, params: *GLint) -> c_void { (self.GetTextureLevelParameterivEXT.f)(texture, target, level, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTextureParameterIivEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetTextureParameterIivEXT.f)(texture, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTextureParameterIuivEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { (self.GetTextureParameterIuivEXT.f)(texture, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTextureParameterfvEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.GetTextureParameterfvEXT.f)(texture, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTextureParameterivEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.GetTextureParameterivEXT.f)(texture, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn GetTextureSamplerHandleARB(&self, texture: GLuint, sampler: GLuint) -> GLuint64 { unsafe { (self.GetTextureSamplerHandleARB.f)(texture, sampler) } }
    #[fixed_stack_segment] #[inline] pub fn GetTextureSamplerHandleNV(&self, texture: GLuint, sampler: GLuint) -> GLuint64 { unsafe { (self.GetTextureSamplerHandleNV.f)(texture, sampler) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTrackMatrixivNV(&self, target: GLenum, address: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetTrackMatrixivNV.f)(target, address, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTransformFeedbackVarying(&self, program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { (self.GetTransformFeedbackVarying.f)(program, index, bufSize, length, size, type_, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTransformFeedbackVaryingEXT(&self, program: GLuint, index: GLuint, bufSize: GLsizei, length: *GLsizei, size: *GLsizei, type_: *GLenum, name: *GLchar) -> c_void { (self.GetTransformFeedbackVaryingEXT.f)(program, index, bufSize, length, size, type_, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTransformFeedbackVaryingNV(&self, program: GLuint, index: GLuint, location: *GLint) -> c_void { (self.GetTransformFeedbackVaryingNV.f)(program, index, location) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetTranslatedShaderSourceANGLE(&self, shader: GLuint, bufsize: GLsizei, length: *GLsizei, source: *GLchar) -> c_void { (self.GetTranslatedShaderSourceANGLE.f)(shader, bufsize, length, source) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformBlockIndex(&self, program: GLuint, uniformBlockName: *GLchar) -> GLuint { (self.GetUniformBlockIndex.f)(program, uniformBlockName) }
    #[fixed_stack_segment] #[inline] pub fn GetUniformBufferSizeEXT(&self, program: GLuint, location: GLint) -> GLint { unsafe { (self.GetUniformBufferSizeEXT.f)(program, location) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformIndices(&self, program: GLuint, uniformCount: GLsizei, uniformNames: **GLchar, uniformIndices: *GLuint) -> c_void { (self.GetUniformIndices.f)(program, uniformCount, uniformNames, uniformIndices) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformLocation(&self, program: GLuint, name: *GLchar) -> GLint { (self.GetUniformLocation.f)(program, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformLocationARB(&self, programObj: GLhandleARB, name: *GLcharARB) -> GLint { (self.GetUniformLocationARB.f)(programObj, name) }
    #[fixed_stack_segment] #[inline] pub fn GetUniformOffsetEXT(&self, program: GLuint, location: GLint) -> GLintptr { unsafe { (self.GetUniformOffsetEXT.f)(program, location) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformSubroutineuiv(&self, shadertype: GLenum, location: GLint, params: *GLuint) -> c_void { (self.GetUniformSubroutineuiv.f)(shadertype, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformdv(&self, program: GLuint, location: GLint, params: *GLdouble) -> c_void { (self.GetUniformdv.f)(program, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformfv(&self, program: GLuint, location: GLint, params: *GLfloat) -> c_void { (self.GetUniformfv.f)(program, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformfvARB(&self, programObj: GLhandleARB, location: GLint, params: *GLfloat) -> c_void { (self.GetUniformfvARB.f)(programObj, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformi64vNV(&self, program: GLuint, location: GLint, params: *GLint64EXT) -> c_void { (self.GetUniformi64vNV.f)(program, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformiv(&self, program: GLuint, location: GLint, params: *GLint) -> c_void { (self.GetUniformiv.f)(program, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformivARB(&self, programObj: GLhandleARB, location: GLint, params: *GLint) -> c_void { (self.GetUniformivARB.f)(programObj, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformui64vNV(&self, program: GLuint, location: GLint, params: *GLuint64EXT) -> c_void { (self.GetUniformui64vNV.f)(program, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformuiv(&self, program: GLuint, location: GLint, params: *GLuint) -> c_void { (self.GetUniformuiv.f)(program, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetUniformuivEXT(&self, program: GLuint, location: GLint, params: *GLuint) -> c_void { (self.GetUniformuivEXT.f)(program, location, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVariantArrayObjectfvATI(&self, id: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetVariantArrayObjectfvATI.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVariantArrayObjectivATI(&self, id: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVariantArrayObjectivATI.f)(id, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVariantBooleanvEXT(&self, id: GLuint, value: GLenum, data: *GLboolean) -> c_void { (self.GetVariantBooleanvEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVariantFloatvEXT(&self, id: GLuint, value: GLenum, data: *GLfloat) -> c_void { (self.GetVariantFloatvEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVariantIntegervEXT(&self, id: GLuint, value: GLenum, data: *GLint) -> c_void { (self.GetVariantIntegervEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVariantPointervEXT(&self, id: GLuint, value: GLenum, data: **GLvoid) -> c_void { (self.GetVariantPointervEXT.f)(id, value, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVaryingLocationNV(&self, program: GLuint, name: *GLchar) -> GLint { (self.GetVaryingLocationNV.f)(program, name) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexArrayIntegeri_vEXT(&self, vaobj: GLuint, index: GLuint, pname: GLenum, param: *GLint) -> c_void { (self.GetVertexArrayIntegeri_vEXT.f)(vaobj, index, pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexArrayIntegervEXT(&self, vaobj: GLuint, pname: GLenum, param: *GLint) -> c_void { (self.GetVertexArrayIntegervEXT.f)(vaobj, pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexArrayPointeri_vEXT(&self, vaobj: GLuint, index: GLuint, pname: GLenum, param: **GLvoid) -> c_void { (self.GetVertexArrayPointeri_vEXT.f)(vaobj, index, pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexArrayPointervEXT(&self, vaobj: GLuint, pname: GLenum, param: **GLvoid) -> c_void { (self.GetVertexArrayPointervEXT.f)(vaobj, pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribArrayObjectfvATI(&self, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetVertexAttribArrayObjectfvATI.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribArrayObjectivATI(&self, index: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVertexAttribArrayObjectivATI.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribIiv(&self, index: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVertexAttribIiv.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribIivEXT(&self, index: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVertexAttribIivEXT.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribIuiv(&self, index: GLuint, pname: GLenum, params: *GLuint) -> c_void { (self.GetVertexAttribIuiv.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribIuivEXT(&self, index: GLuint, pname: GLenum, params: *GLuint) -> c_void { (self.GetVertexAttribIuivEXT.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribLdv(&self, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { (self.GetVertexAttribLdv.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribLdvEXT(&self, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { (self.GetVertexAttribLdvEXT.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribLi64vNV(&self, index: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void { (self.GetVertexAttribLi64vNV.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribLui64vARB(&self, index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { (self.GetVertexAttribLui64vARB.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribLui64vNV(&self, index: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { (self.GetVertexAttribLui64vNV.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribPointerv(&self, index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { (self.GetVertexAttribPointerv.f)(index, pname, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribPointervARB(&self, index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { (self.GetVertexAttribPointervARB.f)(index, pname, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribPointervNV(&self, index: GLuint, pname: GLenum, pointer: **GLvoid) -> c_void { (self.GetVertexAttribPointervNV.f)(index, pname, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribdv(&self, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { (self.GetVertexAttribdv.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribdvARB(&self, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { (self.GetVertexAttribdvARB.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribdvNV(&self, index: GLuint, pname: GLenum, params: *GLdouble) -> c_void { (self.GetVertexAttribdvNV.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribfv(&self, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetVertexAttribfv.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribfvARB(&self, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetVertexAttribfvARB.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribfvNV(&self, index: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetVertexAttribfvNV.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribiv(&self, index: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVertexAttribiv.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribivARB(&self, index: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVertexAttribivARB.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVertexAttribivNV(&self, index: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVertexAttribivNV.f)(index, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVideoCaptureStreamdvNV(&self, video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void { (self.GetVideoCaptureStreamdvNV.f)(video_capture_slot, stream, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVideoCaptureStreamfvNV(&self, video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.GetVideoCaptureStreamfvNV.f)(video_capture_slot, stream, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVideoCaptureStreamivNV(&self, video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVideoCaptureStreamivNV.f)(video_capture_slot, stream, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVideoCaptureivNV(&self, video_capture_slot: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVideoCaptureivNV.f)(video_capture_slot, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVideoi64vNV(&self, video_slot: GLuint, pname: GLenum, params: *GLint64EXT) -> c_void { (self.GetVideoi64vNV.f)(video_slot, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVideoivNV(&self, video_slot: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.GetVideoivNV.f)(video_slot, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVideoui64vNV(&self, video_slot: GLuint, pname: GLenum, params: *GLuint64EXT) -> c_void { (self.GetVideoui64vNV.f)(video_slot, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetVideouivNV(&self, video_slot: GLuint, pname: GLenum, params: *GLuint) -> c_void { (self.GetVideouivNV.f)(video_slot, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnColorTableARB(&self, target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, table: *GLvoid) -> c_void { (self.GetnColorTableARB.f)(target, format, type_, bufSize, table) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnCompressedTexImageARB(&self, target: GLenum, lod: GLint, bufSize: GLsizei, img: *GLvoid) -> c_void { (self.GetnCompressedTexImageARB.f)(target, lod, bufSize, img) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnConvolutionFilterARB(&self, target: GLenum, format: GLenum, type_: GLenum, bufSize: GLsizei, image: *GLvoid) -> c_void { (self.GetnConvolutionFilterARB.f)(target, format, type_, bufSize, image) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnHistogramARB(&self, target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void { (self.GetnHistogramARB.f)(target, reset, format, type_, bufSize, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnMapdvARB(&self, target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLdouble) -> c_void { (self.GetnMapdvARB.f)(target, query, bufSize, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnMapfvARB(&self, target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLfloat) -> c_void { (self.GetnMapfvARB.f)(target, query, bufSize, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnMapivARB(&self, target: GLenum, query: GLenum, bufSize: GLsizei, v: *GLint) -> c_void { (self.GetnMapivARB.f)(target, query, bufSize, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnMinmaxARB(&self, target: GLenum, reset: GLboolean, format: GLenum, type_: GLenum, bufSize: GLsizei, values: *GLvoid) -> c_void { (self.GetnMinmaxARB.f)(target, reset, format, type_, bufSize, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnPixelMapfvARB(&self, map: GLenum, bufSize: GLsizei, values: *GLfloat) -> c_void { (self.GetnPixelMapfvARB.f)(map, bufSize, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnPixelMapuivARB(&self, map: GLenum, bufSize: GLsizei, values: *GLuint) -> c_void { (self.GetnPixelMapuivARB.f)(map, bufSize, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnPixelMapusvARB(&self, map: GLenum, bufSize: GLsizei, values: *GLushort) -> c_void { (self.GetnPixelMapusvARB.f)(map, bufSize, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnPolygonStippleARB(&self, bufSize: GLsizei, pattern: *GLubyte) -> c_void { (self.GetnPolygonStippleARB.f)(bufSize, pattern) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnSeparableFilterARB(&self, target: GLenum, format: GLenum, type_: GLenum, rowBufSize: GLsizei, row: *GLvoid, columnBufSize: GLsizei, column: *GLvoid, span: *GLvoid) -> c_void { (self.GetnSeparableFilterARB.f)(target, format, type_, rowBufSize, row, columnBufSize, column, span) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnTexImageARB(&self, target: GLenum, level: GLint, format: GLenum, type_: GLenum, bufSize: GLsizei, img: *GLvoid) -> c_void { (self.GetnTexImageARB.f)(target, level, format, type_, bufSize, img) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnUniformdvARB(&self, program: GLuint, location: GLint, bufSize: GLsizei, params: *GLdouble) -> c_void { (self.GetnUniformdvARB.f)(program, location, bufSize, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnUniformfvARB(&self, program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void { (self.GetnUniformfvARB.f)(program, location, bufSize, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnUniformfvEXT(&self, program: GLuint, location: GLint, bufSize: GLsizei, params: *GLfloat) -> c_void { (self.GetnUniformfvEXT.f)(program, location, bufSize, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnUniformivARB(&self, program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void { (self.GetnUniformivARB.f)(program, location, bufSize, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnUniformivEXT(&self, program: GLuint, location: GLint, bufSize: GLsizei, params: *GLint) -> c_void { (self.GetnUniformivEXT.f)(program, location, bufSize, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn GetnUniformuivARB(&self, program: GLuint, location: GLint, bufSize: GLsizei, params: *GLuint) -> c_void { (self.GetnUniformuivARB.f)(program, location, bufSize, params) }
    #[fixed_stack_segment] #[inline] pub fn GlobalAlphaFactorbSUN(&self, factor: GLbyte) -> c_void { unsafe { (self.GlobalAlphaFactorbSUN.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn GlobalAlphaFactordSUN(&self, factor: GLdouble) -> c_void { unsafe { (self.GlobalAlphaFactordSUN.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn GlobalAlphaFactorfSUN(&self, factor: GLfloat) -> c_void { unsafe { (self.GlobalAlphaFactorfSUN.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn GlobalAlphaFactoriSUN(&self, factor: GLint) -> c_void { unsafe { (self.GlobalAlphaFactoriSUN.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn GlobalAlphaFactorsSUN(&self, factor: GLshort) -> c_void { unsafe { (self.GlobalAlphaFactorsSUN.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn GlobalAlphaFactorubSUN(&self, factor: GLubyte) -> c_void { unsafe { (self.GlobalAlphaFactorubSUN.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn GlobalAlphaFactoruiSUN(&self, factor: GLuint) -> c_void { unsafe { (self.GlobalAlphaFactoruiSUN.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn GlobalAlphaFactorusSUN(&self, factor: GLushort) -> c_void { unsafe { (self.GlobalAlphaFactorusSUN.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn Hint(&self, target: GLenum, mode: GLenum) -> c_void { unsafe { (self.Hint.f)(target, mode) } }
    #[fixed_stack_segment] #[inline] pub fn HintPGI(&self, target: GLenum, mode: GLint) -> c_void { unsafe { (self.HintPGI.f)(target, mode) } }
    #[fixed_stack_segment] #[inline] pub fn Histogram(&self, target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { (self.Histogram.f)(target, width, internalformat, sink) } }
    #[fixed_stack_segment] #[inline] pub fn HistogramEXT(&self, target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { (self.HistogramEXT.f)(target, width, internalformat, sink) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn IglooInterfaceSGIX(&self, pname: GLenum, params: *GLvoid) -> c_void { (self.IglooInterfaceSGIX.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn ImageTransformParameterfHP(&self, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.ImageTransformParameterfHP.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ImageTransformParameterfvHP(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.ImageTransformParameterfvHP.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn ImageTransformParameteriHP(&self, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.ImageTransformParameteriHP.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ImageTransformParameterivHP(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.ImageTransformParameterivHP.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn ImportSyncEXT(&self, external_sync_type: GLenum, external_sync: GLintptr, flags: GLbitfield) -> GLsync { unsafe { (self.ImportSyncEXT.f)(external_sync_type, external_sync, flags) } }
    #[fixed_stack_segment] #[inline] pub fn IndexFormatNV(&self, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.IndexFormatNV.f)(type_, stride) } }
    #[fixed_stack_segment] #[inline] pub fn IndexFuncEXT(&self, func: GLenum, ref_: GLclampf) -> c_void { unsafe { (self.IndexFuncEXT.f)(func, ref_) } }
    #[fixed_stack_segment] #[inline] pub fn IndexMask(&self, mask: GLuint) -> c_void { unsafe { (self.IndexMask.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub fn IndexMaterialEXT(&self, face: GLenum, mode: GLenum) -> c_void { unsafe { (self.IndexMaterialEXT.f)(face, mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn IndexPointer(&self, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.IndexPointer.f)(type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn IndexPointerEXT(&self, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { (self.IndexPointerEXT.f)(type_, stride, count, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn IndexPointerListIBM(&self, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { (self.IndexPointerListIBM.f)(type_, stride, pointer, ptrstride) }
    #[fixed_stack_segment] #[inline] pub fn Indexd(&self, c: GLdouble) -> c_void { unsafe { (self.Indexd.f)(c) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Indexdv(&self, c: *GLdouble) -> c_void { (self.Indexdv.f)(c) }
    #[fixed_stack_segment] #[inline] pub fn Indexf(&self, c: GLfloat) -> c_void { unsafe { (self.Indexf.f)(c) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Indexfv(&self, c: *GLfloat) -> c_void { (self.Indexfv.f)(c) }
    #[fixed_stack_segment] #[inline] pub fn Indexi(&self, c: GLint) -> c_void { unsafe { (self.Indexi.f)(c) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Indexiv(&self, c: *GLint) -> c_void { (self.Indexiv.f)(c) }
    #[fixed_stack_segment] #[inline] pub fn Indexs(&self, c: GLshort) -> c_void { unsafe { (self.Indexs.f)(c) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Indexsv(&self, c: *GLshort) -> c_void { (self.Indexsv.f)(c) }
    #[fixed_stack_segment] #[inline] pub fn Indexub(&self, c: GLubyte) -> c_void { unsafe { (self.Indexub.f)(c) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Indexubv(&self, c: *GLubyte) -> c_void { (self.Indexubv.f)(c) }
    #[fixed_stack_segment] #[inline] pub fn IndexxOES(&self, component: GLfixed) -> c_void { unsafe { (self.IndexxOES.f)(component) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn IndexxvOES(&self, component: *GLfixed) -> c_void { (self.IndexxvOES.f)(component) }
    #[fixed_stack_segment] #[inline] pub fn InitNames(&self) -> c_void { unsafe { (self.InitNames.f)() } }
    #[fixed_stack_segment] #[inline] pub fn InsertComponentEXT(&self, res: GLuint, src: GLuint, num: GLuint) -> c_void { unsafe { (self.InsertComponentEXT.f)(res, src, num) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn InsertEventMarkerEXT(&self, length: GLsizei, marker: *GLchar) -> c_void { (self.InsertEventMarkerEXT.f)(length, marker) }
    #[fixed_stack_segment] #[inline] pub unsafe fn InstrumentsBufferSGIX(&self, size: GLsizei, buffer: *GLint) -> c_void { (self.InstrumentsBufferSGIX.f)(size, buffer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn InterleavedArrays(&self, format: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.InterleavedArrays.f)(format, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub fn InterpolatePathsNV(&self, resultPath: GLuint, pathA: GLuint, pathB: GLuint, weight: GLfloat) -> c_void { unsafe { (self.InterpolatePathsNV.f)(resultPath, pathA, pathB, weight) } }
    #[fixed_stack_segment] #[inline] pub fn InvalidateBufferData(&self, buffer: GLuint) -> c_void { unsafe { (self.InvalidateBufferData.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub fn InvalidateBufferSubData(&self, buffer: GLuint, offset: GLintptr, length: GLsizeiptr) -> c_void { unsafe { (self.InvalidateBufferSubData.f)(buffer, offset, length) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn InvalidateFramebuffer(&self, target: GLenum, numAttachments: GLsizei, attachments: *GLenum) -> c_void { (self.InvalidateFramebuffer.f)(target, numAttachments, attachments) }
    #[fixed_stack_segment] #[inline] pub unsafe fn InvalidateSubFramebuffer(&self, target: GLenum, numAttachments: GLsizei, attachments: *GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { (self.InvalidateSubFramebuffer.f)(target, numAttachments, attachments, x, y, width, height) }
    #[fixed_stack_segment] #[inline] pub fn InvalidateTexImage(&self, texture: GLuint, level: GLint) -> c_void { unsafe { (self.InvalidateTexImage.f)(texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn InvalidateTexSubImage(&self, texture: GLuint, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (self.InvalidateTexSubImage.f)(texture, level, xoffset, yoffset, zoffset, width, height, depth) } }
    #[fixed_stack_segment] #[inline] pub fn IsAsyncMarkerSGIX(&self, marker: GLuint) -> GLboolean { unsafe { (self.IsAsyncMarkerSGIX.f)(marker) } }
    #[fixed_stack_segment] #[inline] pub fn IsBuffer(&self, buffer: GLuint) -> GLboolean { unsafe { (self.IsBuffer.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsBufferARB(&self, buffer: GLuint) -> GLboolean { unsafe { (self.IsBufferARB.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsBufferResidentNV(&self, target: GLenum) -> GLboolean { unsafe { (self.IsBufferResidentNV.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn IsEnabled(&self, cap: GLenum) -> GLboolean { unsafe { (self.IsEnabled.f)(cap) } }
    #[fixed_stack_segment] #[inline] pub fn IsEnabledIndexedEXT(&self, target: GLenum, index: GLuint) -> GLboolean { unsafe { (self.IsEnabledIndexedEXT.f)(target, index) } }
    #[fixed_stack_segment] #[inline] pub fn IsEnabledi(&self, target: GLenum, index: GLuint) -> GLboolean { unsafe { (self.IsEnabledi.f)(target, index) } }
    #[fixed_stack_segment] #[inline] pub fn IsFenceAPPLE(&self, fence: GLuint) -> GLboolean { unsafe { (self.IsFenceAPPLE.f)(fence) } }
    #[fixed_stack_segment] #[inline] pub fn IsFenceNV(&self, fence: GLuint) -> GLboolean { unsafe { (self.IsFenceNV.f)(fence) } }
    #[fixed_stack_segment] #[inline] pub fn IsFramebuffer(&self, framebuffer: GLuint) -> GLboolean { unsafe { (self.IsFramebuffer.f)(framebuffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsFramebufferEXT(&self, framebuffer: GLuint) -> GLboolean { unsafe { (self.IsFramebufferEXT.f)(framebuffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsFramebufferOES(&self, framebuffer: GLuint) -> GLboolean { unsafe { (self.IsFramebufferOES.f)(framebuffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsImageHandleResidentARB(&self, handle: GLuint64) -> GLboolean { unsafe { (self.IsImageHandleResidentARB.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn IsImageHandleResidentNV(&self, handle: GLuint64) -> GLboolean { unsafe { (self.IsImageHandleResidentNV.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn IsList(&self, list: GLuint) -> GLboolean { unsafe { (self.IsList.f)(list) } }
    #[fixed_stack_segment] #[inline] pub fn IsNameAMD(&self, identifier: GLenum, name: GLuint) -> GLboolean { unsafe { (self.IsNameAMD.f)(identifier, name) } }
    #[fixed_stack_segment] #[inline] pub fn IsNamedBufferResidentNV(&self, buffer: GLuint) -> GLboolean { unsafe { (self.IsNamedBufferResidentNV.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn IsNamedStringARB(&self, namelen: GLint, name: *GLchar) -> GLboolean { (self.IsNamedStringARB.f)(namelen, name) }
    #[fixed_stack_segment] #[inline] pub fn IsObjectBufferATI(&self, buffer: GLuint) -> GLboolean { unsafe { (self.IsObjectBufferATI.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsOcclusionQueryNV(&self, id: GLuint) -> GLboolean { unsafe { (self.IsOcclusionQueryNV.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn IsPathNV(&self, path: GLuint) -> GLboolean { unsafe { (self.IsPathNV.f)(path) } }
    #[fixed_stack_segment] #[inline] pub fn IsPointInFillPathNV(&self, path: GLuint, mask: GLuint, x: GLfloat, y: GLfloat) -> GLboolean { unsafe { (self.IsPointInFillPathNV.f)(path, mask, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn IsPointInStrokePathNV(&self, path: GLuint, x: GLfloat, y: GLfloat) -> GLboolean { unsafe { (self.IsPointInStrokePathNV.f)(path, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn IsProgram(&self, program: GLuint) -> GLboolean { unsafe { (self.IsProgram.f)(program) } }
    #[fixed_stack_segment] #[inline] pub fn IsProgramARB(&self, program: GLuint) -> GLboolean { unsafe { (self.IsProgramARB.f)(program) } }
    #[fixed_stack_segment] #[inline] pub fn IsProgramNV(&self, id: GLuint) -> GLboolean { unsafe { (self.IsProgramNV.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn IsProgramPipeline(&self, pipeline: GLuint) -> GLboolean { unsafe { (self.IsProgramPipeline.f)(pipeline) } }
    #[fixed_stack_segment] #[inline] pub fn IsProgramPipelineEXT(&self, pipeline: GLuint) -> GLboolean { unsafe { (self.IsProgramPipelineEXT.f)(pipeline) } }
    #[fixed_stack_segment] #[inline] pub fn IsQuery(&self, id: GLuint) -> GLboolean { unsafe { (self.IsQuery.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn IsQueryARB(&self, id: GLuint) -> GLboolean { unsafe { (self.IsQueryARB.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn IsQueryEXT(&self, id: GLuint) -> GLboolean { unsafe { (self.IsQueryEXT.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn IsRenderbuffer(&self, renderbuffer: GLuint) -> GLboolean { unsafe { (self.IsRenderbuffer.f)(renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsRenderbufferEXT(&self, renderbuffer: GLuint) -> GLboolean { unsafe { (self.IsRenderbufferEXT.f)(renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsRenderbufferOES(&self, renderbuffer: GLuint) -> GLboolean { unsafe { (self.IsRenderbufferOES.f)(renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn IsSampler(&self, sampler: GLuint) -> GLboolean { unsafe { (self.IsSampler.f)(sampler) } }
    #[fixed_stack_segment] #[inline] pub fn IsShader(&self, shader: GLuint) -> GLboolean { unsafe { (self.IsShader.f)(shader) } }
    #[fixed_stack_segment] #[inline] pub fn IsSync(&self, sync: GLsync) -> GLboolean { unsafe { (self.IsSync.f)(sync) } }
    #[fixed_stack_segment] #[inline] pub fn IsSyncAPPLE(&self, sync: GLsync) -> GLboolean { unsafe { (self.IsSyncAPPLE.f)(sync) } }
    #[fixed_stack_segment] #[inline] pub fn IsTexture(&self, texture: GLuint) -> GLboolean { unsafe { (self.IsTexture.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub fn IsTextureEXT(&self, texture: GLuint) -> GLboolean { unsafe { (self.IsTextureEXT.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub fn IsTextureHandleResidentARB(&self, handle: GLuint64) -> GLboolean { unsafe { (self.IsTextureHandleResidentARB.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn IsTextureHandleResidentNV(&self, handle: GLuint64) -> GLboolean { unsafe { (self.IsTextureHandleResidentNV.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn IsTransformFeedback(&self, id: GLuint) -> GLboolean { unsafe { (self.IsTransformFeedback.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn IsTransformFeedbackNV(&self, id: GLuint) -> GLboolean { unsafe { (self.IsTransformFeedbackNV.f)(id) } }
    #[fixed_stack_segment] #[inline] pub fn IsVariantEnabledEXT(&self, id: GLuint, cap: GLenum) -> GLboolean { unsafe { (self.IsVariantEnabledEXT.f)(id, cap) } }
    #[fixed_stack_segment] #[inline] pub fn IsVertexArray(&self, array: GLuint) -> GLboolean { unsafe { (self.IsVertexArray.f)(array) } }
    #[fixed_stack_segment] #[inline] pub fn IsVertexArrayAPPLE(&self, array: GLuint) -> GLboolean { unsafe { (self.IsVertexArrayAPPLE.f)(array) } }
    #[fixed_stack_segment] #[inline] pub fn IsVertexArrayOES(&self, array: GLuint) -> GLboolean { unsafe { (self.IsVertexArrayOES.f)(array) } }
    #[fixed_stack_segment] #[inline] pub fn IsVertexAttribEnabledAPPLE(&self, index: GLuint, pname: GLenum) -> GLboolean { unsafe { (self.IsVertexAttribEnabledAPPLE.f)(index, pname) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn LabelObjectEXT(&self, type_: GLenum, object: GLuint, length: GLsizei, label: *GLchar) -> c_void { (self.LabelObjectEXT.f)(type_, object, length, label) }
    #[fixed_stack_segment] #[inline] pub fn LightEnviSGIX(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.LightEnviSGIX.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn LightModelf(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.LightModelf.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn LightModelfv(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.LightModelfv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn LightModeli(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.LightModeli.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn LightModeliv(&self, pname: GLenum, params: *GLint) -> c_void { (self.LightModeliv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn LightModelx(&self, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.LightModelx.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn LightModelxOES(&self, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.LightModelxOES.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn LightModelxv(&self, pname: GLenum, param: *GLfixed) -> c_void { (self.LightModelxv.f)(pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LightModelxvOES(&self, pname: GLenum, param: *GLfixed) -> c_void { (self.LightModelxvOES.f)(pname, param) }
    #[fixed_stack_segment] #[inline] pub fn Lightf(&self, light: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.Lightf.f)(light, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Lightfv(&self, light: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.Lightfv.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn Lighti(&self, light: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.Lighti.f)(light, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Lightiv(&self, light: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.Lightiv.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn Lightx(&self, light: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.Lightx.f)(light, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn LightxOES(&self, light: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.LightxOES.f)(light, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Lightxv(&self, light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.Lightxv.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LightxvOES(&self, light: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.LightxvOES.f)(light, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn LineStipple(&self, factor: GLint, pattern: GLushort) -> c_void { unsafe { (self.LineStipple.f)(factor, pattern) } }
    #[fixed_stack_segment] #[inline] pub fn LineWidth(&self, width: GLfloat) -> c_void { unsafe { (self.LineWidth.f)(width) } }
    #[fixed_stack_segment] #[inline] pub fn LineWidthx(&self, width: GLfixed) -> c_void { unsafe { (self.LineWidthx.f)(width) } }
    #[fixed_stack_segment] #[inline] pub fn LineWidthxOES(&self, width: GLfixed) -> c_void { unsafe { (self.LineWidthxOES.f)(width) } }
    #[fixed_stack_segment] #[inline] pub fn LinkProgram(&self, program: GLuint) -> c_void { unsafe { (self.LinkProgram.f)(program) } }
    #[fixed_stack_segment] #[inline] pub fn LinkProgramARB(&self, programObj: GLhandleARB) -> c_void { unsafe { (self.LinkProgramARB.f)(programObj) } }
    #[fixed_stack_segment] #[inline] pub fn ListBase(&self, base: GLuint) -> c_void { unsafe { (self.ListBase.f)(base) } }
    #[fixed_stack_segment] #[inline] pub fn ListParameterfSGIX(&self, list: GLuint, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.ListParameterfSGIX.f)(list, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ListParameterfvSGIX(&self, list: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.ListParameterfvSGIX.f)(list, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn ListParameteriSGIX(&self, list: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { (self.ListParameteriSGIX.f)(list, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ListParameterivSGIX(&self, list: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.ListParameterivSGIX.f)(list, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn LoadIdentity(&self) -> c_void { unsafe { (self.LoadIdentity.f)() } }
    #[fixed_stack_segment] #[inline] pub fn LoadIdentityDeformationMapSGIX(&self, mask: GLbitfield) -> c_void { unsafe { (self.LoadIdentityDeformationMapSGIX.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadMatrixd(&self, m: *GLdouble) -> c_void { (self.LoadMatrixd.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadMatrixf(&self, m: *GLfloat) -> c_void { (self.LoadMatrixf.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadMatrixx(&self, m: *GLfixed) -> c_void { (self.LoadMatrixx.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadMatrixxOES(&self, m: *GLfixed) -> c_void { (self.LoadMatrixxOES.f)(m) }
    #[fixed_stack_segment] #[inline] pub fn LoadName(&self, name: GLuint) -> c_void { unsafe { (self.LoadName.f)(name) } }
    #[fixed_stack_segment] #[inline] pub fn LoadPaletteFromModelViewMatrixOES(&self) -> c_void { unsafe { (self.LoadPaletteFromModelViewMatrixOES.f)() } }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadProgramNV(&self, target: GLenum, id: GLuint, len: GLsizei, program: *GLubyte) -> c_void { (self.LoadProgramNV.f)(target, id, len, program) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadTransposeMatrixd(&self, m: *GLdouble) -> c_void { (self.LoadTransposeMatrixd.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadTransposeMatrixdARB(&self, m: *GLdouble) -> c_void { (self.LoadTransposeMatrixdARB.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadTransposeMatrixf(&self, m: *GLfloat) -> c_void { (self.LoadTransposeMatrixf.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadTransposeMatrixfARB(&self, m: *GLfloat) -> c_void { (self.LoadTransposeMatrixfARB.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn LoadTransposeMatrixxOES(&self, m: *GLfixed) -> c_void { (self.LoadTransposeMatrixxOES.f)(m) }
    #[fixed_stack_segment] #[inline] pub fn LockArraysEXT(&self, first: GLint, count: GLsizei) -> c_void { unsafe { (self.LockArraysEXT.f)(first, count) } }
    #[fixed_stack_segment] #[inline] pub fn LogicOp(&self, opcode: GLenum) -> c_void { unsafe { (self.LogicOp.f)(opcode) } }
    #[fixed_stack_segment] #[inline] pub fn MakeBufferNonResidentNV(&self, target: GLenum) -> c_void { unsafe { (self.MakeBufferNonResidentNV.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn MakeBufferResidentNV(&self, target: GLenum, access: GLenum) -> c_void { unsafe { (self.MakeBufferResidentNV.f)(target, access) } }
    #[fixed_stack_segment] #[inline] pub fn MakeImageHandleNonResidentARB(&self, handle: GLuint64) -> c_void { unsafe { (self.MakeImageHandleNonResidentARB.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn MakeImageHandleNonResidentNV(&self, handle: GLuint64) -> c_void { unsafe { (self.MakeImageHandleNonResidentNV.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn MakeImageHandleResidentARB(&self, handle: GLuint64, access: GLenum) -> c_void { unsafe { (self.MakeImageHandleResidentARB.f)(handle, access) } }
    #[fixed_stack_segment] #[inline] pub fn MakeImageHandleResidentNV(&self, handle: GLuint64, access: GLenum) -> c_void { unsafe { (self.MakeImageHandleResidentNV.f)(handle, access) } }
    #[fixed_stack_segment] #[inline] pub fn MakeNamedBufferNonResidentNV(&self, buffer: GLuint) -> c_void { unsafe { (self.MakeNamedBufferNonResidentNV.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub fn MakeNamedBufferResidentNV(&self, buffer: GLuint, access: GLenum) -> c_void { unsafe { (self.MakeNamedBufferResidentNV.f)(buffer, access) } }
    #[fixed_stack_segment] #[inline] pub fn MakeTextureHandleNonResidentARB(&self, handle: GLuint64) -> c_void { unsafe { (self.MakeTextureHandleNonResidentARB.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn MakeTextureHandleNonResidentNV(&self, handle: GLuint64) -> c_void { unsafe { (self.MakeTextureHandleNonResidentNV.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn MakeTextureHandleResidentARB(&self, handle: GLuint64) -> c_void { unsafe { (self.MakeTextureHandleResidentARB.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub fn MakeTextureHandleResidentNV(&self, handle: GLuint64) -> c_void { unsafe { (self.MakeTextureHandleResidentNV.f)(handle) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Map1d(&self, target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void { (self.Map1d.f)(target, u1, u2, stride, order, points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Map1f(&self, target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void { (self.Map1f.f)(target, u1, u2, stride, order, points) }
    #[fixed_stack_segment] #[inline] pub fn Map1xOES(&self, target: GLenum, u1: GLfixed, u2: GLfixed, stride: GLint, order: GLint, points: GLfixed) -> c_void { unsafe { (self.Map1xOES.f)(target, u1, u2, stride, order, points) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Map2d(&self, target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void { (self.Map2d.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Map2f(&self, target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void { (self.Map2f.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) }
    #[fixed_stack_segment] #[inline] pub fn Map2xOES(&self, target: GLenum, u1: GLfixed, u2: GLfixed, ustride: GLint, uorder: GLint, v1: GLfixed, v2: GLfixed, vstride: GLint, vorder: GLint, points: GLfixed) -> c_void { unsafe { (self.Map2xOES.f)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) } }
    #[fixed_stack_segment] #[inline] pub fn MapBuffer(&self, target: GLenum, access: GLenum) -> *c_void { unsafe { (self.MapBuffer.f)(target, access) } }
    #[fixed_stack_segment] #[inline] pub fn MapBufferARB(&self, target: GLenum, access: GLenum) -> *c_void { unsafe { (self.MapBufferARB.f)(target, access) } }
    #[fixed_stack_segment] #[inline] pub fn MapBufferOES(&self, target: GLenum, access: GLenum) -> *c_void { unsafe { (self.MapBufferOES.f)(target, access) } }
    #[fixed_stack_segment] #[inline] pub fn MapBufferRange(&self, target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { (self.MapBufferRange.f)(target, offset, length, access) } }
    #[fixed_stack_segment] #[inline] pub fn MapBufferRangeEXT(&self, target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { (self.MapBufferRangeEXT.f)(target, offset, length, access) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MapControlPointsNV(&self, target: GLenum, index: GLuint, type_: GLenum, ustride: GLsizei, vstride: GLsizei, uorder: GLint, vorder: GLint, packed: GLboolean, points: *GLvoid) -> c_void { (self.MapControlPointsNV.f)(target, index, type_, ustride, vstride, uorder, vorder, packed, points) }
    #[fixed_stack_segment] #[inline] pub fn MapGrid1d(&self, un: GLint, u1: GLdouble, u2: GLdouble) -> c_void { unsafe { (self.MapGrid1d.f)(un, u1, u2) } }
    #[fixed_stack_segment] #[inline] pub fn MapGrid1f(&self, un: GLint, u1: GLfloat, u2: GLfloat) -> c_void { unsafe { (self.MapGrid1f.f)(un, u1, u2) } }
    #[fixed_stack_segment] #[inline] pub fn MapGrid1xOES(&self, n: GLint, u1: GLfixed, u2: GLfixed) -> c_void { unsafe { (self.MapGrid1xOES.f)(n, u1, u2) } }
    #[fixed_stack_segment] #[inline] pub fn MapGrid2d(&self, un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) -> c_void { unsafe { (self.MapGrid2d.f)(un, u1, u2, vn, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn MapGrid2f(&self, un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (self.MapGrid2f.f)(un, u1, u2, vn, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn MapGrid2xOES(&self, n: GLint, u1: GLfixed, u2: GLfixed, v1: GLfixed, v2: GLfixed) -> c_void { unsafe { (self.MapGrid2xOES.f)(n, u1, u2, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn MapNamedBufferEXT(&self, buffer: GLuint, access: GLenum) -> *c_void { unsafe { (self.MapNamedBufferEXT.f)(buffer, access) } }
    #[fixed_stack_segment] #[inline] pub fn MapNamedBufferRangeEXT(&self, buffer: GLuint, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> *c_void { unsafe { (self.MapNamedBufferRangeEXT.f)(buffer, offset, length, access) } }
    #[fixed_stack_segment] #[inline] pub fn MapObjectBufferATI(&self, buffer: GLuint) -> *c_void { unsafe { (self.MapObjectBufferATI.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MapParameterfvNV(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.MapParameterfvNV.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MapParameterivNV(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.MapParameterivNV.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MapTexture2DINTEL(&self, texture: GLuint, level: GLint, access: GLbitfield, stride: *GLint, layout: *GLenum) -> *c_void { (self.MapTexture2DINTEL.f)(texture, level, access, stride, layout) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MapVertexAttrib1dAPPLE(&self, index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *GLdouble) -> c_void { (self.MapVertexAttrib1dAPPLE.f)(index, size, u1, u2, stride, order, points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MapVertexAttrib1fAPPLE(&self, index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *GLfloat) -> c_void { (self.MapVertexAttrib1fAPPLE.f)(index, size, u1, u2, stride, order, points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MapVertexAttrib2dAPPLE(&self, index: GLuint, size: GLuint, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *GLdouble) -> c_void { (self.MapVertexAttrib2dAPPLE.f)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MapVertexAttrib2fAPPLE(&self, index: GLuint, size: GLuint, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *GLfloat) -> c_void { (self.MapVertexAttrib2fAPPLE.f)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points) }
    #[fixed_stack_segment] #[inline] pub fn Materialf(&self, face: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.Materialf.f)(face, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Materialfv(&self, face: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.Materialfv.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn Materiali(&self, face: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.Materiali.f)(face, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Materialiv(&self, face: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.Materialiv.f)(face, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn Materialx(&self, face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.Materialx.f)(face, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn MaterialxOES(&self, face: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.MaterialxOES.f)(face, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Materialxv(&self, face: GLenum, pname: GLenum, param: *GLfixed) -> c_void { (self.Materialxv.f)(face, pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MaterialxvOES(&self, face: GLenum, pname: GLenum, param: *GLfixed) -> c_void { (self.MaterialxvOES.f)(face, pname, param) }
    #[fixed_stack_segment] #[inline] pub fn MatrixFrustumEXT(&self, mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (self.MatrixFrustumEXT.f)(mode, left, right, bottom, top, zNear, zFar) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixIndexPointerARB(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.MatrixIndexPointerARB.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixIndexPointerOES(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.MatrixIndexPointerOES.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixIndexubvARB(&self, size: GLint, indices: *GLubyte) -> c_void { (self.MatrixIndexubvARB.f)(size, indices) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixIndexuivARB(&self, size: GLint, indices: *GLuint) -> c_void { (self.MatrixIndexuivARB.f)(size, indices) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixIndexusvARB(&self, size: GLint, indices: *GLushort) -> c_void { (self.MatrixIndexusvARB.f)(size, indices) }
    #[fixed_stack_segment] #[inline] pub fn MatrixLoadIdentityEXT(&self, mode: GLenum) -> c_void { unsafe { (self.MatrixLoadIdentityEXT.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixLoadTransposedEXT(&self, mode: GLenum, m: *GLdouble) -> c_void { (self.MatrixLoadTransposedEXT.f)(mode, m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixLoadTransposefEXT(&self, mode: GLenum, m: *GLfloat) -> c_void { (self.MatrixLoadTransposefEXT.f)(mode, m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixLoaddEXT(&self, mode: GLenum, m: *GLdouble) -> c_void { (self.MatrixLoaddEXT.f)(mode, m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixLoadfEXT(&self, mode: GLenum, m: *GLfloat) -> c_void { (self.MatrixLoadfEXT.f)(mode, m) }
    #[fixed_stack_segment] #[inline] pub fn MatrixMode(&self, mode: GLenum) -> c_void { unsafe { (self.MatrixMode.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixMultTransposedEXT(&self, mode: GLenum, m: *GLdouble) -> c_void { (self.MatrixMultTransposedEXT.f)(mode, m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixMultTransposefEXT(&self, mode: GLenum, m: *GLfloat) -> c_void { (self.MatrixMultTransposefEXT.f)(mode, m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixMultdEXT(&self, mode: GLenum, m: *GLdouble) -> c_void { (self.MatrixMultdEXT.f)(mode, m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MatrixMultfEXT(&self, mode: GLenum, m: *GLfloat) -> c_void { (self.MatrixMultfEXT.f)(mode, m) }
    #[fixed_stack_segment] #[inline] pub fn MatrixOrthoEXT(&self, mode: GLenum, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (self.MatrixOrthoEXT.f)(mode, left, right, bottom, top, zNear, zFar) } }
    #[fixed_stack_segment] #[inline] pub fn MatrixPopEXT(&self, mode: GLenum) -> c_void { unsafe { (self.MatrixPopEXT.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn MatrixPushEXT(&self, mode: GLenum) -> c_void { unsafe { (self.MatrixPushEXT.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn MatrixRotatedEXT(&self, mode: GLenum, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.MatrixRotatedEXT.f)(mode, angle, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn MatrixRotatefEXT(&self, mode: GLenum, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.MatrixRotatefEXT.f)(mode, angle, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn MatrixScaledEXT(&self, mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.MatrixScaledEXT.f)(mode, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn MatrixScalefEXT(&self, mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.MatrixScalefEXT.f)(mode, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn MatrixTranslatedEXT(&self, mode: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.MatrixTranslatedEXT.f)(mode, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn MatrixTranslatefEXT(&self, mode: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.MatrixTranslatefEXT.f)(mode, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn MemoryBarrier(&self, barriers: GLbitfield) -> c_void { unsafe { (self.MemoryBarrier.f)(barriers) } }
    #[fixed_stack_segment] #[inline] pub fn MemoryBarrierEXT(&self, barriers: GLbitfield) -> c_void { unsafe { (self.MemoryBarrierEXT.f)(barriers) } }
    #[fixed_stack_segment] #[inline] pub fn MinSampleShading(&self, value: GLfloat) -> c_void { unsafe { (self.MinSampleShading.f)(value) } }
    #[fixed_stack_segment] #[inline] pub fn MinSampleShadingARB(&self, value: GLfloat) -> c_void { unsafe { (self.MinSampleShadingARB.f)(value) } }
    #[fixed_stack_segment] #[inline] pub fn Minmax(&self, target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { (self.Minmax.f)(target, internalformat, sink) } }
    #[fixed_stack_segment] #[inline] pub fn MinmaxEXT(&self, target: GLenum, internalformat: GLenum, sink: GLboolean) -> c_void { unsafe { (self.MinmaxEXT.f)(target, internalformat, sink) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultMatrixd(&self, m: *GLdouble) -> c_void { (self.MultMatrixd.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultMatrixf(&self, m: *GLfloat) -> c_void { (self.MultMatrixf.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultMatrixx(&self, m: *GLfixed) -> c_void { (self.MultMatrixx.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultMatrixxOES(&self, m: *GLfixed) -> c_void { (self.MultMatrixxOES.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultTransposeMatrixd(&self, m: *GLdouble) -> c_void { (self.MultTransposeMatrixd.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultTransposeMatrixdARB(&self, m: *GLdouble) -> c_void { (self.MultTransposeMatrixdARB.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultTransposeMatrixf(&self, m: *GLfloat) -> c_void { (self.MultTransposeMatrixf.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultTransposeMatrixfARB(&self, m: *GLfloat) -> c_void { (self.MultTransposeMatrixfARB.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultTransposeMatrixxOES(&self, m: *GLfixed) -> c_void { (self.MultTransposeMatrixxOES.f)(m) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawArrays(&self, mode: GLenum, first: *GLint, count: *GLsizei, drawcount: GLsizei) -> c_void { (self.MultiDrawArrays.f)(mode, first, count, drawcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawArraysEXT(&self, mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { (self.MultiDrawArraysEXT.f)(mode, first, count, primcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawArraysIndirect(&self, mode: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void { (self.MultiDrawArraysIndirect.f)(mode, indirect, drawcount, stride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawArraysIndirectAMD(&self, mode: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void { (self.MultiDrawArraysIndirectAMD.f)(mode, indirect, primcount, stride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawArraysIndirectBindlessNV(&self, mode: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void { (self.MultiDrawArraysIndirectBindlessNV.f)(mode, indirect, drawCount, stride, vertexBufferCount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawElementsIndirectBindlessNV(&self, mode: GLenum, type_: GLenum, indirect: *GLvoid, drawCount: GLsizei, stride: GLsizei, vertexBufferCount: GLint) -> c_void { (self.MultiDrawElementsIndirectBindlessNV.f)(mode, type_, indirect, drawCount, stride, vertexBufferCount) }
    #[fixed_stack_segment] #[inline] pub fn MultiDrawArraysIndirectCountARB(&self, mode: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { (self.MultiDrawArraysIndirectCountARB.f)(mode, indirect, drawcount, maxdrawcount, stride) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawElementArrayAPPLE(&self, mode: GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { (self.MultiDrawElementArrayAPPLE.f)(mode, first, count, primcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawElements(&self, mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei) -> c_void { (self.MultiDrawElements.f)(mode, count, type_, indices, drawcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawElementsBaseVertex(&self, mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, drawcount: GLsizei, basevertex: *GLint) -> c_void { (self.MultiDrawElementsBaseVertex.f)(mode, count, type_, indices, drawcount, basevertex) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawElementsEXT(&self, mode: GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei) -> c_void { (self.MultiDrawElementsEXT.f)(mode, count, type_, indices, primcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawElementsIndirect(&self, mode: GLenum, type_: GLenum, indirect: *c_void, drawcount: GLsizei, stride: GLsizei) -> c_void { (self.MultiDrawElementsIndirect.f)(mode, type_, indirect, drawcount, stride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawElementsIndirectAMD(&self, mode: GLenum, type_: GLenum, indirect: *GLvoid, primcount: GLsizei, stride: GLsizei) -> c_void { (self.MultiDrawElementsIndirectAMD.f)(mode, type_, indirect, primcount, stride) }
    #[fixed_stack_segment] #[inline] pub fn MultiDrawElementsIndirectCountARB(&self, mode: GLenum, type_: GLenum, indirect: GLintptr, drawcount: GLintptr, maxdrawcount: GLsizei, stride: GLsizei) -> c_void { unsafe { (self.MultiDrawElementsIndirectCountARB.f)(mode, type_, indirect, drawcount, maxdrawcount, stride) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiDrawRangeElementArrayAPPLE(&self, mode: GLenum, start: GLuint, end: GLuint, first: *GLint, count: *GLsizei, primcount: GLsizei) -> c_void { (self.MultiDrawRangeElementArrayAPPLE.f)(mode, start, end, first, count, primcount) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiModeDrawArraysIBM(&self, mode: *GLenum, first: *GLint, count: *GLsizei, primcount: GLsizei, modestride: GLint) -> c_void { (self.MultiModeDrawArraysIBM.f)(mode, first, count, primcount, modestride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiModeDrawElementsIBM(&self, mode: *GLenum, count: *GLsizei, type_: GLenum, indices: **GLvoid, primcount: GLsizei, modestride: GLint) -> c_void { (self.MultiModeDrawElementsIBM.f)(mode, count, type_, indices, primcount, modestride) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexBufferEXT(&self, texunit: GLenum, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (self.MultiTexBufferEXT.f)(texunit, target, internalformat, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1bOES(&self, texture: GLenum, s: GLbyte) -> c_void { unsafe { (self.MultiTexCoord1bOES.f)(texture, s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1bvOES(&self, texture: GLenum, coords: *GLbyte) -> c_void { (self.MultiTexCoord1bvOES.f)(texture, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1d(&self, target: GLenum, s: GLdouble) -> c_void { unsafe { (self.MultiTexCoord1d.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1dARB(&self, target: GLenum, s: GLdouble) -> c_void { unsafe { (self.MultiTexCoord1dARB.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1dv(&self, target: GLenum, v: *GLdouble) -> c_void { (self.MultiTexCoord1dv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1dvARB(&self, target: GLenum, v: *GLdouble) -> c_void { (self.MultiTexCoord1dvARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1f(&self, target: GLenum, s: GLfloat) -> c_void { unsafe { (self.MultiTexCoord1f.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1fARB(&self, target: GLenum, s: GLfloat) -> c_void { unsafe { (self.MultiTexCoord1fARB.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1fv(&self, target: GLenum, v: *GLfloat) -> c_void { (self.MultiTexCoord1fv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1fvARB(&self, target: GLenum, v: *GLfloat) -> c_void { (self.MultiTexCoord1fvARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1hNV(&self, target: GLenum, s: GLhalfNV) -> c_void { unsafe { (self.MultiTexCoord1hNV.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1hvNV(&self, target: GLenum, v: *GLhalfNV) -> c_void { (self.MultiTexCoord1hvNV.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1i(&self, target: GLenum, s: GLint) -> c_void { unsafe { (self.MultiTexCoord1i.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1iARB(&self, target: GLenum, s: GLint) -> c_void { unsafe { (self.MultiTexCoord1iARB.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1iv(&self, target: GLenum, v: *GLint) -> c_void { (self.MultiTexCoord1iv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1ivARB(&self, target: GLenum, v: *GLint) -> c_void { (self.MultiTexCoord1ivARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1s(&self, target: GLenum, s: GLshort) -> c_void { unsafe { (self.MultiTexCoord1s.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1sARB(&self, target: GLenum, s: GLshort) -> c_void { unsafe { (self.MultiTexCoord1sARB.f)(target, s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1sv(&self, target: GLenum, v: *GLshort) -> c_void { (self.MultiTexCoord1sv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1svARB(&self, target: GLenum, v: *GLshort) -> c_void { (self.MultiTexCoord1svARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord1xOES(&self, texture: GLenum, s: GLfixed) -> c_void { unsafe { (self.MultiTexCoord1xOES.f)(texture, s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord1xvOES(&self, texture: GLenum, coords: *GLfixed) -> c_void { (self.MultiTexCoord1xvOES.f)(texture, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2bOES(&self, texture: GLenum, s: GLbyte, t: GLbyte) -> c_void { unsafe { (self.MultiTexCoord2bOES.f)(texture, s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2bvOES(&self, texture: GLenum, coords: *GLbyte) -> c_void { (self.MultiTexCoord2bvOES.f)(texture, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2d(&self, target: GLenum, s: GLdouble, t: GLdouble) -> c_void { unsafe { (self.MultiTexCoord2d.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2dARB(&self, target: GLenum, s: GLdouble, t: GLdouble) -> c_void { unsafe { (self.MultiTexCoord2dARB.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2dv(&self, target: GLenum, v: *GLdouble) -> c_void { (self.MultiTexCoord2dv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2dvARB(&self, target: GLenum, v: *GLdouble) -> c_void { (self.MultiTexCoord2dvARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2f(&self, target: GLenum, s: GLfloat, t: GLfloat) -> c_void { unsafe { (self.MultiTexCoord2f.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2fARB(&self, target: GLenum, s: GLfloat, t: GLfloat) -> c_void { unsafe { (self.MultiTexCoord2fARB.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2fv(&self, target: GLenum, v: *GLfloat) -> c_void { (self.MultiTexCoord2fv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2fvARB(&self, target: GLenum, v: *GLfloat) -> c_void { (self.MultiTexCoord2fvARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2hNV(&self, target: GLenum, s: GLhalfNV, t: GLhalfNV) -> c_void { unsafe { (self.MultiTexCoord2hNV.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2hvNV(&self, target: GLenum, v: *GLhalfNV) -> c_void { (self.MultiTexCoord2hvNV.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2i(&self, target: GLenum, s: GLint, t: GLint) -> c_void { unsafe { (self.MultiTexCoord2i.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2iARB(&self, target: GLenum, s: GLint, t: GLint) -> c_void { unsafe { (self.MultiTexCoord2iARB.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2iv(&self, target: GLenum, v: *GLint) -> c_void { (self.MultiTexCoord2iv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2ivARB(&self, target: GLenum, v: *GLint) -> c_void { (self.MultiTexCoord2ivARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2s(&self, target: GLenum, s: GLshort, t: GLshort) -> c_void { unsafe { (self.MultiTexCoord2s.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2sARB(&self, target: GLenum, s: GLshort, t: GLshort) -> c_void { unsafe { (self.MultiTexCoord2sARB.f)(target, s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2sv(&self, target: GLenum, v: *GLshort) -> c_void { (self.MultiTexCoord2sv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2svARB(&self, target: GLenum, v: *GLshort) -> c_void { (self.MultiTexCoord2svARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord2xOES(&self, texture: GLenum, s: GLfixed, t: GLfixed) -> c_void { unsafe { (self.MultiTexCoord2xOES.f)(texture, s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord2xvOES(&self, texture: GLenum, coords: *GLfixed) -> c_void { (self.MultiTexCoord2xvOES.f)(texture, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3bOES(&self, texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte) -> c_void { unsafe { (self.MultiTexCoord3bOES.f)(texture, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3bvOES(&self, texture: GLenum, coords: *GLbyte) -> c_void { (self.MultiTexCoord3bvOES.f)(texture, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3d(&self, target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { (self.MultiTexCoord3d.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3dARB(&self, target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { (self.MultiTexCoord3dARB.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3dv(&self, target: GLenum, v: *GLdouble) -> c_void { (self.MultiTexCoord3dv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3dvARB(&self, target: GLenum, v: *GLdouble) -> c_void { (self.MultiTexCoord3dvARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3f(&self, target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { (self.MultiTexCoord3f.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3fARB(&self, target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { (self.MultiTexCoord3fARB.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3fv(&self, target: GLenum, v: *GLfloat) -> c_void { (self.MultiTexCoord3fv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3fvARB(&self, target: GLenum, v: *GLfloat) -> c_void { (self.MultiTexCoord3fvARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3hNV(&self, target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void { unsafe { (self.MultiTexCoord3hNV.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3hvNV(&self, target: GLenum, v: *GLhalfNV) -> c_void { (self.MultiTexCoord3hvNV.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3i(&self, target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void { unsafe { (self.MultiTexCoord3i.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3iARB(&self, target: GLenum, s: GLint, t: GLint, r: GLint) -> c_void { unsafe { (self.MultiTexCoord3iARB.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3iv(&self, target: GLenum, v: *GLint) -> c_void { (self.MultiTexCoord3iv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3ivARB(&self, target: GLenum, v: *GLint) -> c_void { (self.MultiTexCoord3ivARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3s(&self, target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { (self.MultiTexCoord3s.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3sARB(&self, target: GLenum, s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { (self.MultiTexCoord3sARB.f)(target, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3sv(&self, target: GLenum, v: *GLshort) -> c_void { (self.MultiTexCoord3sv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3svARB(&self, target: GLenum, v: *GLshort) -> c_void { (self.MultiTexCoord3svARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord3xOES(&self, texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed) -> c_void { unsafe { (self.MultiTexCoord3xOES.f)(texture, s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord3xvOES(&self, texture: GLenum, coords: *GLfixed) -> c_void { (self.MultiTexCoord3xvOES.f)(texture, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4bOES(&self, texture: GLenum, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void { unsafe { (self.MultiTexCoord4bOES.f)(texture, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4bvOES(&self, texture: GLenum, coords: *GLbyte) -> c_void { (self.MultiTexCoord4bvOES.f)(texture, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4d(&self, target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { (self.MultiTexCoord4d.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4dARB(&self, target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { (self.MultiTexCoord4dARB.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4dv(&self, target: GLenum, v: *GLdouble) -> c_void { (self.MultiTexCoord4dv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4dvARB(&self, target: GLenum, v: *GLdouble) -> c_void { (self.MultiTexCoord4dvARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4f(&self, target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { (self.MultiTexCoord4f.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4fARB(&self, target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { (self.MultiTexCoord4fARB.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4fv(&self, target: GLenum, v: *GLfloat) -> c_void { (self.MultiTexCoord4fv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4fvARB(&self, target: GLenum, v: *GLfloat) -> c_void { (self.MultiTexCoord4fvARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4hNV(&self, target: GLenum, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void { unsafe { (self.MultiTexCoord4hNV.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4hvNV(&self, target: GLenum, v: *GLhalfNV) -> c_void { (self.MultiTexCoord4hvNV.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4i(&self, target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { (self.MultiTexCoord4i.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4iARB(&self, target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { (self.MultiTexCoord4iARB.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4iv(&self, target: GLenum, v: *GLint) -> c_void { (self.MultiTexCoord4iv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4ivARB(&self, target: GLenum, v: *GLint) -> c_void { (self.MultiTexCoord4ivARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4s(&self, target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { (self.MultiTexCoord4s.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4sARB(&self, target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { (self.MultiTexCoord4sARB.f)(target, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4sv(&self, target: GLenum, v: *GLshort) -> c_void { (self.MultiTexCoord4sv.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4svARB(&self, target: GLenum, v: *GLshort) -> c_void { (self.MultiTexCoord4svARB.f)(target, v) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4x(&self, texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { (self.MultiTexCoord4x.f)(texture, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoord4xOES(&self, texture: GLenum, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { (self.MultiTexCoord4xOES.f)(texture, s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoord4xvOES(&self, texture: GLenum, coords: *GLfixed) -> c_void { (self.MultiTexCoord4xvOES.f)(texture, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoordP1ui(&self, texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.MultiTexCoordP1ui.f)(texture, type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoordP1uiv(&self, texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { (self.MultiTexCoordP1uiv.f)(texture, type_, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoordP2ui(&self, texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.MultiTexCoordP2ui.f)(texture, type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoordP2uiv(&self, texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { (self.MultiTexCoordP2uiv.f)(texture, type_, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoordP3ui(&self, texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.MultiTexCoordP3ui.f)(texture, type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoordP3uiv(&self, texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { (self.MultiTexCoordP3uiv.f)(texture, type_, coords) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexCoordP4ui(&self, texture: GLenum, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.MultiTexCoordP4ui.f)(texture, type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoordP4uiv(&self, texture: GLenum, type_: GLenum, coords: *GLuint) -> c_void { (self.MultiTexCoordP4uiv.f)(texture, type_, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexCoordPointerEXT(&self, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.MultiTexCoordPointerEXT.f)(texunit, size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexEnvfEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.MultiTexEnvfEXT.f)(texunit, target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexEnvfvEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.MultiTexEnvfvEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexEnviEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.MultiTexEnviEXT.f)(texunit, target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexEnvivEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.MultiTexEnvivEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexGendEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, param: GLdouble) -> c_void { unsafe { (self.MultiTexGendEXT.f)(texunit, coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexGendvEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { (self.MultiTexGendvEXT.f)(texunit, coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexGenfEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.MultiTexGenfEXT.f)(texunit, coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexGenfvEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.MultiTexGenfvEXT.f)(texunit, coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexGeniEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.MultiTexGeniEXT.f)(texunit, coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexGenivEXT(&self, texunit: GLenum, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.MultiTexGenivEXT.f)(texunit, coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexImage1DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.MultiTexImage1DEXT.f)(texunit, target, level, internalformat, width, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexImage2DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.MultiTexImage2DEXT.f)(texunit, target, level, internalformat, width, height, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexImage3DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.MultiTexImage3DEXT.f)(texunit, target, level, internalformat, width, height, depth, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexParameterIivEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.MultiTexParameterIivEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexParameterIuivEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { (self.MultiTexParameterIuivEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexParameterfEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.MultiTexParameterfEXT.f)(texunit, target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexParameterfvEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.MultiTexParameterfvEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexParameteriEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.MultiTexParameteriEXT.f)(texunit, target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexParameterivEXT(&self, texunit: GLenum, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.MultiTexParameterivEXT.f)(texunit, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn MultiTexRenderbufferEXT(&self, texunit: GLenum, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.MultiTexRenderbufferEXT.f)(texunit, target, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexSubImage1DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.MultiTexSubImage1DEXT.f)(texunit, target, level, xoffset, width, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexSubImage2DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.MultiTexSubImage2DEXT.f)(texunit, target, level, xoffset, yoffset, width, height, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn MultiTexSubImage3DEXT(&self, texunit: GLenum, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.MultiTexSubImage3DEXT.f)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedBufferDataEXT(&self, buffer: GLuint, size: GLsizeiptr, data: *GLvoid, usage: GLenum) -> c_void { (self.NamedBufferDataEXT.f)(buffer, size, data, usage) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedBufferStorageEXT(&self, buffer: GLuint, size: GLsizeiptr, data: *c_void, flags: GLbitfield) -> c_void { (self.NamedBufferStorageEXT.f)(buffer, size, data, flags) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedBufferSubDataEXT(&self, buffer: GLuint, offset: GLintptr, size: GLsizeiptr, data: *GLvoid) -> c_void { (self.NamedBufferSubDataEXT.f)(buffer, offset, size, data) }
    #[fixed_stack_segment] #[inline] pub fn NamedCopyBufferSubDataEXT(&self, readBuffer: GLuint, writeBuffer: GLuint, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (self.NamedCopyBufferSubDataEXT.f)(readBuffer, writeBuffer, readOffset, writeOffset, size) } }
    #[fixed_stack_segment] #[inline] pub fn NamedFramebufferParameteriEXT(&self, framebuffer: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { (self.NamedFramebufferParameteriEXT.f)(framebuffer, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn NamedFramebufferRenderbufferEXT(&self, framebuffer: GLuint, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.NamedFramebufferRenderbufferEXT.f)(framebuffer, attachment, renderbuffertarget, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn NamedFramebufferTexture1DEXT(&self, framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.NamedFramebufferTexture1DEXT.f)(framebuffer, attachment, textarget, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn NamedFramebufferTexture2DEXT(&self, framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.NamedFramebufferTexture2DEXT.f)(framebuffer, attachment, textarget, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn NamedFramebufferTexture3DEXT(&self, framebuffer: GLuint, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint, zoffset: GLint) -> c_void { unsafe { (self.NamedFramebufferTexture3DEXT.f)(framebuffer, attachment, textarget, texture, level, zoffset) } }
    #[fixed_stack_segment] #[inline] pub fn NamedFramebufferTextureEXT(&self, framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint) -> c_void { unsafe { (self.NamedFramebufferTextureEXT.f)(framebuffer, attachment, texture, level) } }
    #[fixed_stack_segment] #[inline] pub fn NamedFramebufferTextureFaceEXT(&self, framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, face: GLenum) -> c_void { unsafe { (self.NamedFramebufferTextureFaceEXT.f)(framebuffer, attachment, texture, level, face) } }
    #[fixed_stack_segment] #[inline] pub fn NamedFramebufferTextureLayerEXT(&self, framebuffer: GLuint, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> c_void { unsafe { (self.NamedFramebufferTextureLayerEXT.f)(framebuffer, attachment, texture, level, layer) } }
    #[fixed_stack_segment] #[inline] pub fn NamedProgramLocalParameter4dEXT(&self, program: GLuint, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.NamedProgramLocalParameter4dEXT.f)(program, target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedProgramLocalParameter4dvEXT(&self, program: GLuint, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { (self.NamedProgramLocalParameter4dvEXT.f)(program, target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn NamedProgramLocalParameter4fEXT(&self, program: GLuint, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.NamedProgramLocalParameter4fEXT.f)(program, target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedProgramLocalParameter4fvEXT(&self, program: GLuint, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { (self.NamedProgramLocalParameter4fvEXT.f)(program, target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn NamedProgramLocalParameterI4iEXT(&self, program: GLuint, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.NamedProgramLocalParameterI4iEXT.f)(program, target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedProgramLocalParameterI4ivEXT(&self, program: GLuint, target: GLenum, index: GLuint, params: *GLint) -> c_void { (self.NamedProgramLocalParameterI4ivEXT.f)(program, target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn NamedProgramLocalParameterI4uiEXT(&self, program: GLuint, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (self.NamedProgramLocalParameterI4uiEXT.f)(program, target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedProgramLocalParameterI4uivEXT(&self, program: GLuint, target: GLenum, index: GLuint, params: *GLuint) -> c_void { (self.NamedProgramLocalParameterI4uivEXT.f)(program, target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedProgramLocalParameters4fvEXT(&self, program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { (self.NamedProgramLocalParameters4fvEXT.f)(program, target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedProgramLocalParametersI4ivEXT(&self, program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { (self.NamedProgramLocalParametersI4ivEXT.f)(program, target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedProgramLocalParametersI4uivEXT(&self, program: GLuint, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { (self.NamedProgramLocalParametersI4uivEXT.f)(program, target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedProgramStringEXT(&self, program: GLuint, target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void { (self.NamedProgramStringEXT.f)(program, target, format, len, string) }
    #[fixed_stack_segment] #[inline] pub fn NamedRenderbufferStorageEXT(&self, renderbuffer: GLuint, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.NamedRenderbufferStorageEXT.f)(renderbuffer, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn NamedRenderbufferStorageMultisampleCoverageEXT(&self, renderbuffer: GLuint, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.NamedRenderbufferStorageMultisampleCoverageEXT.f)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn NamedRenderbufferStorageMultisampleEXT(&self, renderbuffer: GLuint, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.NamedRenderbufferStorageMultisampleEXT.f)(renderbuffer, samples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NamedStringARB(&self, type_: GLenum, namelen: GLint, name: *GLchar, stringlen: GLint, string: *GLchar) -> c_void { (self.NamedStringARB.f)(type_, namelen, name, stringlen, string) }
    #[fixed_stack_segment] #[inline] pub fn NewList(&self, list: GLuint, mode: GLenum) -> c_void { unsafe { (self.NewList.f)(list, mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NewObjectBufferATI(&self, size: GLsizei, pointer: *GLvoid, usage: GLenum) -> GLuint { (self.NewObjectBufferATI.f)(size, pointer, usage) }
    #[fixed_stack_segment] #[inline] pub fn Normal3b(&self, nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void { unsafe { (self.Normal3b.f)(nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Normal3bv(&self, v: *GLbyte) -> c_void { (self.Normal3bv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Normal3d(&self, nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void { unsafe { (self.Normal3d.f)(nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Normal3dv(&self, v: *GLdouble) -> c_void { (self.Normal3dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Normal3f(&self, nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void { unsafe { (self.Normal3f.f)(nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub fn Normal3fVertex3fSUN(&self, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.Normal3fVertex3fSUN.f)(nx, ny, nz, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Normal3fVertex3fvSUN(&self, n: *GLfloat, v: *GLfloat) -> c_void { (self.Normal3fVertex3fvSUN.f)(n, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Normal3fv(&self, v: *GLfloat) -> c_void { (self.Normal3fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Normal3hNV(&self, nx: GLhalfNV, ny: GLhalfNV, nz: GLhalfNV) -> c_void { unsafe { (self.Normal3hNV.f)(nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Normal3hvNV(&self, v: *GLhalfNV) -> c_void { (self.Normal3hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Normal3i(&self, nx: GLint, ny: GLint, nz: GLint) -> c_void { unsafe { (self.Normal3i.f)(nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Normal3iv(&self, v: *GLint) -> c_void { (self.Normal3iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Normal3s(&self, nx: GLshort, ny: GLshort, nz: GLshort) -> c_void { unsafe { (self.Normal3s.f)(nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Normal3sv(&self, v: *GLshort) -> c_void { (self.Normal3sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Normal3x(&self, nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void { unsafe { (self.Normal3x.f)(nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub fn Normal3xOES(&self, nx: GLfixed, ny: GLfixed, nz: GLfixed) -> c_void { unsafe { (self.Normal3xOES.f)(nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Normal3xvOES(&self, coords: *GLfixed) -> c_void { (self.Normal3xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn NormalFormatNV(&self, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.NormalFormatNV.f)(type_, stride) } }
    #[fixed_stack_segment] #[inline] pub fn NormalP3ui(&self, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.NormalP3ui.f)(type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalP3uiv(&self, type_: GLenum, coords: *GLuint) -> c_void { (self.NormalP3uiv.f)(type_, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalPointer(&self, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.NormalPointer.f)(type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalPointerEXT(&self, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { (self.NormalPointerEXT.f)(type_, stride, count, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalPointerListIBM(&self, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { (self.NormalPointerListIBM.f)(type_, stride, pointer, ptrstride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalPointervINTEL(&self, type_: GLenum, pointer: **GLvoid) -> c_void { (self.NormalPointervINTEL.f)(type_, pointer) }
    #[fixed_stack_segment] #[inline] pub fn NormalStream3bATI(&self, stream: GLenum, nx: GLbyte, ny: GLbyte, nz: GLbyte) -> c_void { unsafe { (self.NormalStream3bATI.f)(stream, nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalStream3bvATI(&self, stream: GLenum, coords: *GLbyte) -> c_void { (self.NormalStream3bvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn NormalStream3dATI(&self, stream: GLenum, nx: GLdouble, ny: GLdouble, nz: GLdouble) -> c_void { unsafe { (self.NormalStream3dATI.f)(stream, nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalStream3dvATI(&self, stream: GLenum, coords: *GLdouble) -> c_void { (self.NormalStream3dvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn NormalStream3fATI(&self, stream: GLenum, nx: GLfloat, ny: GLfloat, nz: GLfloat) -> c_void { unsafe { (self.NormalStream3fATI.f)(stream, nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalStream3fvATI(&self, stream: GLenum, coords: *GLfloat) -> c_void { (self.NormalStream3fvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn NormalStream3iATI(&self, stream: GLenum, nx: GLint, ny: GLint, nz: GLint) -> c_void { unsafe { (self.NormalStream3iATI.f)(stream, nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalStream3ivATI(&self, stream: GLenum, coords: *GLint) -> c_void { (self.NormalStream3ivATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn NormalStream3sATI(&self, stream: GLenum, nx: GLshort, ny: GLshort, nz: GLshort) -> c_void { unsafe { (self.NormalStream3sATI.f)(stream, nx, ny, nz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn NormalStream3svATI(&self, stream: GLenum, coords: *GLshort) -> c_void { (self.NormalStream3svATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ObjectLabel(&self, identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void { (self.ObjectLabel.f)(identifier, name, length, label) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ObjectLabelKHR(&self, identifier: GLenum, name: GLuint, length: GLsizei, label: *GLchar) -> c_void { (self.ObjectLabelKHR.f)(identifier, name, length, label) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ObjectPtrLabel(&self, ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void { (self.ObjectPtrLabel.f)(ptr, length, label) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ObjectPtrLabelKHR(&self, ptr: *c_void, length: GLsizei, label: *GLchar) -> c_void { (self.ObjectPtrLabelKHR.f)(ptr, length, label) }
    #[fixed_stack_segment] #[inline] pub fn ObjectPurgeableAPPLE(&self, objectType: GLenum, name: GLuint, option: GLenum) -> GLenum { unsafe { (self.ObjectPurgeableAPPLE.f)(objectType, name, option) } }
    #[fixed_stack_segment] #[inline] pub fn ObjectUnpurgeableAPPLE(&self, objectType: GLenum, name: GLuint, option: GLenum) -> GLenum { unsafe { (self.ObjectUnpurgeableAPPLE.f)(objectType, name, option) } }
    #[fixed_stack_segment] #[inline] pub fn Ortho(&self, left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) -> c_void { unsafe { (self.Ortho.f)(left, right, bottom, top, zNear, zFar) } }
    #[fixed_stack_segment] #[inline] pub fn Orthof(&self, l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { (self.Orthof.f)(l, r, b, t, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn OrthofOES(&self, l: GLfloat, r: GLfloat, b: GLfloat, t: GLfloat, n: GLfloat, f: GLfloat) -> c_void { unsafe { (self.OrthofOES.f)(l, r, b, t, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn Orthox(&self, l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { (self.Orthox.f)(l, r, b, t, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn OrthoxOES(&self, l: GLfixed, r: GLfixed, b: GLfixed, t: GLfixed, n: GLfixed, f: GLfixed) -> c_void { unsafe { (self.OrthoxOES.f)(l, r, b, t, n, f) } }
    #[fixed_stack_segment] #[inline] pub fn PNTrianglesfATI(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PNTrianglesfATI.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PNTrianglesiATI(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.PNTrianglesiATI.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PassTexCoordATI(&self, dst: GLuint, coord: GLuint, swizzle: GLenum) -> c_void { unsafe { (self.PassTexCoordATI.f)(dst, coord, swizzle) } }
    #[fixed_stack_segment] #[inline] pub fn PassThrough(&self, token: GLfloat) -> c_void { unsafe { (self.PassThrough.f)(token) } }
    #[fixed_stack_segment] #[inline] pub fn PassThroughxOES(&self, token: GLfixed) -> c_void { unsafe { (self.PassThroughxOES.f)(token) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PatchParameterfv(&self, pname: GLenum, values: *GLfloat) -> c_void { (self.PatchParameterfv.f)(pname, values) }
    #[fixed_stack_segment] #[inline] pub fn PatchParameteri(&self, pname: GLenum, value: GLint) -> c_void { unsafe { (self.PatchParameteri.f)(pname, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathColorGenNV(&self, color: GLenum, genMode: GLenum, colorFormat: GLenum, coeffs: *GLfloat) -> c_void { (self.PathColorGenNV.f)(color, genMode, colorFormat, coeffs) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathCommandsNV(&self, path: GLuint, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { (self.PathCommandsNV.f)(path, numCommands, commands, numCoords, coordType, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathCoordsNV(&self, path: GLuint, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { (self.PathCoordsNV.f)(path, numCoords, coordType, coords) }
    #[fixed_stack_segment] #[inline] pub fn PathCoverDepthFuncNV(&self, func: GLenum) -> c_void { unsafe { (self.PathCoverDepthFuncNV.f)(func) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathDashArrayNV(&self, path: GLuint, dashCount: GLsizei, dashArray: *GLfloat) -> c_void { (self.PathDashArrayNV.f)(path, dashCount, dashArray) }
    #[fixed_stack_segment] #[inline] pub fn PathFogGenNV(&self, genMode: GLenum) -> c_void { unsafe { (self.PathFogGenNV.f)(genMode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathGlyphRangeNV(&self, firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, firstGlyph: GLuint, numGlyphs: GLsizei, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void { (self.PathGlyphRangeNV.f)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathGlyphsNV(&self, firstPathName: GLuint, fontTarget: GLenum, fontName: *GLvoid, fontStyle: GLbitfield, numGlyphs: GLsizei, type_: GLenum, charcodes: *GLvoid, handleMissingGlyphs: GLenum, pathParameterTemplate: GLuint, emScale: GLfloat) -> c_void { (self.PathGlyphsNV.f)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type_, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale) }
    #[fixed_stack_segment] #[inline] pub fn PathParameterfNV(&self, path: GLuint, pname: GLenum, value: GLfloat) -> c_void { unsafe { (self.PathParameterfNV.f)(path, pname, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathParameterfvNV(&self, path: GLuint, pname: GLenum, value: *GLfloat) -> c_void { (self.PathParameterfvNV.f)(path, pname, value) }
    #[fixed_stack_segment] #[inline] pub fn PathParameteriNV(&self, path: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { (self.PathParameteriNV.f)(path, pname, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathParameterivNV(&self, path: GLuint, pname: GLenum, value: *GLint) -> c_void { (self.PathParameterivNV.f)(path, pname, value) }
    #[fixed_stack_segment] #[inline] pub fn PathStencilDepthOffsetNV(&self, factor: GLfloat, units: GLfloat) -> c_void { unsafe { (self.PathStencilDepthOffsetNV.f)(factor, units) } }
    #[fixed_stack_segment] #[inline] pub fn PathStencilFuncNV(&self, func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { (self.PathStencilFuncNV.f)(func, ref_, mask) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathStringNV(&self, path: GLuint, format: GLenum, length: GLsizei, pathString: *GLvoid) -> c_void { (self.PathStringNV.f)(path, format, length, pathString) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathSubCommandsNV(&self, path: GLuint, commandStart: GLsizei, commandsToDelete: GLsizei, numCommands: GLsizei, commands: *GLubyte, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { (self.PathSubCommandsNV.f)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathSubCoordsNV(&self, path: GLuint, coordStart: GLsizei, numCoords: GLsizei, coordType: GLenum, coords: *GLvoid) -> c_void { (self.PathSubCoordsNV.f)(path, coordStart, numCoords, coordType, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PathTexGenNV(&self, texCoordSet: GLenum, genMode: GLenum, components: GLint, coeffs: *GLfloat) -> c_void { (self.PathTexGenNV.f)(texCoordSet, genMode, components, coeffs) }
    #[fixed_stack_segment] #[inline] pub fn PauseTransformFeedback(&self) -> c_void { unsafe { (self.PauseTransformFeedback.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PauseTransformFeedbackNV(&self) -> c_void { unsafe { (self.PauseTransformFeedbackNV.f)() } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelDataRangeNV(&self, target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void { (self.PixelDataRangeNV.f)(target, length, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelMapfv(&self, map: GLenum, mapsize: GLsizei, values: *GLfloat) -> c_void { (self.PixelMapfv.f)(map, mapsize, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelMapuiv(&self, map: GLenum, mapsize: GLsizei, values: *GLuint) -> c_void { (self.PixelMapuiv.f)(map, mapsize, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelMapusv(&self, map: GLenum, mapsize: GLsizei, values: *GLushort) -> c_void { (self.PixelMapusv.f)(map, mapsize, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelMapx(&self, map: GLenum, size: GLint, values: *GLfixed) -> c_void { (self.PixelMapx.f)(map, size, values) }
    #[fixed_stack_segment] #[inline] pub fn PixelStoref(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PixelStoref.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PixelStorei(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.PixelStorei.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PixelStorex(&self, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.PixelStorex.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PixelTexGenParameterfSGIS(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PixelTexGenParameterfSGIS.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelTexGenParameterfvSGIS(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.PixelTexGenParameterfvSGIS.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn PixelTexGenParameteriSGIS(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.PixelTexGenParameteriSGIS.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelTexGenParameterivSGIS(&self, pname: GLenum, params: *GLint) -> c_void { (self.PixelTexGenParameterivSGIS.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn PixelTexGenSGIX(&self, mode: GLenum) -> c_void { unsafe { (self.PixelTexGenSGIX.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn PixelTransferf(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PixelTransferf.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PixelTransferi(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.PixelTransferi.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PixelTransferxOES(&self, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.PixelTransferxOES.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PixelTransformParameterfEXT(&self, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PixelTransformParameterfEXT.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelTransformParameterfvEXT(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.PixelTransformParameterfvEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn PixelTransformParameteriEXT(&self, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.PixelTransformParameteriEXT.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PixelTransformParameterivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.PixelTransformParameterivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn PixelZoom(&self, xfactor: GLfloat, yfactor: GLfloat) -> c_void { unsafe { (self.PixelZoom.f)(xfactor, yfactor) } }
    #[fixed_stack_segment] #[inline] pub fn PixelZoomxOES(&self, xfactor: GLfixed, yfactor: GLfixed) -> c_void { unsafe { (self.PixelZoomxOES.f)(xfactor, yfactor) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointAlongPathNV(&self, path: GLuint, startSegment: GLsizei, numSegments: GLsizei, distance: GLfloat, x: *GLfloat, y: *GLfloat, tangentX: *GLfloat, tangentY: *GLfloat) -> GLboolean { (self.PointAlongPathNV.f)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY) }
    #[fixed_stack_segment] #[inline] pub fn PointParameterf(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PointParameterf.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PointParameterfARB(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PointParameterfARB.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PointParameterfEXT(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PointParameterfEXT.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PointParameterfSGIS(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.PointParameterfSGIS.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointParameterfv(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.PointParameterfv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointParameterfvARB(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.PointParameterfvARB.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointParameterfvEXT(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.PointParameterfvEXT.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointParameterfvSGIS(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.PointParameterfvSGIS.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn PointParameteri(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.PointParameteri.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PointParameteriNV(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.PointParameteriNV.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointParameteriv(&self, pname: GLenum, params: *GLint) -> c_void { (self.PointParameteriv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointParameterivNV(&self, pname: GLenum, params: *GLint) -> c_void { (self.PointParameterivNV.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn PointParameterx(&self, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.PointParameterx.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn PointParameterxOES(&self, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.PointParameterxOES.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointParameterxv(&self, pname: GLenum, params: *GLfixed) -> c_void { (self.PointParameterxv.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointParameterxvOES(&self, pname: GLenum, params: *GLfixed) -> c_void { (self.PointParameterxvOES.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn PointSize(&self, size: GLfloat) -> c_void { unsafe { (self.PointSize.f)(size) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PointSizePointerOES(&self, type_: GLenum, stride: GLsizei, pointer: *c_void) -> c_void { (self.PointSizePointerOES.f)(type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub fn PointSizex(&self, size: GLfixed) -> c_void { unsafe { (self.PointSizex.f)(size) } }
    #[fixed_stack_segment] #[inline] pub fn PointSizexOES(&self, size: GLfixed) -> c_void { unsafe { (self.PointSizexOES.f)(size) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PollAsyncSGIX(&self, markerp: *GLuint) -> GLint { (self.PollAsyncSGIX.f)(markerp) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PollInstrumentsSGIX(&self, marker_p: *GLint) -> GLint { (self.PollInstrumentsSGIX.f)(marker_p) }
    #[fixed_stack_segment] #[inline] pub fn PolygonMode(&self, face: GLenum, mode: GLenum) -> c_void { unsafe { (self.PolygonMode.f)(face, mode) } }
    #[fixed_stack_segment] #[inline] pub fn PolygonOffset(&self, factor: GLfloat, units: GLfloat) -> c_void { unsafe { (self.PolygonOffset.f)(factor, units) } }
    #[fixed_stack_segment] #[inline] pub fn PolygonOffsetEXT(&self, factor: GLfloat, bias: GLfloat) -> c_void { unsafe { (self.PolygonOffsetEXT.f)(factor, bias) } }
    #[fixed_stack_segment] #[inline] pub fn PolygonOffsetx(&self, factor: GLfixed, units: GLfixed) -> c_void { unsafe { (self.PolygonOffsetx.f)(factor, units) } }
    #[fixed_stack_segment] #[inline] pub fn PolygonOffsetxOES(&self, factor: GLfixed, units: GLfixed) -> c_void { unsafe { (self.PolygonOffsetxOES.f)(factor, units) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PolygonStipple(&self, mask: *GLubyte) -> c_void { (self.PolygonStipple.f)(mask) }
    #[fixed_stack_segment] #[inline] pub fn PopAttrib(&self) -> c_void { unsafe { (self.PopAttrib.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PopClientAttrib(&self) -> c_void { unsafe { (self.PopClientAttrib.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PopDebugGroup(&self) -> c_void { unsafe { (self.PopDebugGroup.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PopDebugGroupKHR(&self) -> c_void { unsafe { (self.PopDebugGroupKHR.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PopGroupMarkerEXT(&self) -> c_void { unsafe { (self.PopGroupMarkerEXT.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PopMatrix(&self) -> c_void { unsafe { (self.PopMatrix.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PopName(&self) -> c_void { unsafe { (self.PopName.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PresentFrameDualFillNV(&self, video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, target1: GLenum, fill1: GLuint, target2: GLenum, fill2: GLuint, target3: GLenum, fill3: GLuint) -> c_void { unsafe { (self.PresentFrameDualFillNV.f)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type_, target0, fill0, target1, fill1, target2, fill2, target3, fill3) } }
    #[fixed_stack_segment] #[inline] pub fn PresentFrameKeyedNV(&self, video_slot: GLuint, minPresentTime: GLuint64EXT, beginPresentTimeId: GLuint, presentDurationId: GLuint, type_: GLenum, target0: GLenum, fill0: GLuint, key0: GLuint, target1: GLenum, fill1: GLuint, key1: GLuint) -> c_void { unsafe { (self.PresentFrameKeyedNV.f)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type_, target0, fill0, key0, target1, fill1, key1) } }
    #[fixed_stack_segment] #[inline] pub fn PrimitiveRestartIndex(&self, index: GLuint) -> c_void { unsafe { (self.PrimitiveRestartIndex.f)(index) } }
    #[fixed_stack_segment] #[inline] pub fn PrimitiveRestartIndexNV(&self, index: GLuint) -> c_void { unsafe { (self.PrimitiveRestartIndexNV.f)(index) } }
    #[fixed_stack_segment] #[inline] pub fn PrimitiveRestartNV(&self) -> c_void { unsafe { (self.PrimitiveRestartNV.f)() } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PrioritizeTextures(&self, n: GLsizei, textures: *GLuint, priorities: *GLfloat) -> c_void { (self.PrioritizeTextures.f)(n, textures, priorities) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PrioritizeTexturesEXT(&self, n: GLsizei, textures: *GLuint, priorities: *GLclampf) -> c_void { (self.PrioritizeTexturesEXT.f)(n, textures, priorities) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PrioritizeTexturesxOES(&self, n: GLsizei, textures: *GLuint, priorities: *GLfixed) -> c_void { (self.PrioritizeTexturesxOES.f)(n, textures, priorities) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramBinary(&self, program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void { (self.ProgramBinary.f)(program, binaryFormat, binary, length) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramBinaryOES(&self, program: GLuint, binaryFormat: GLenum, binary: *GLvoid, length: GLint) -> c_void { (self.ProgramBinaryOES.f)(program, binaryFormat, binary, length) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramBufferParametersIivNV(&self, target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLint) -> c_void { (self.ProgramBufferParametersIivNV.f)(target, bindingIndex, wordIndex, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramBufferParametersIuivNV(&self, target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLuint) -> c_void { (self.ProgramBufferParametersIuivNV.f)(target, bindingIndex, wordIndex, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramBufferParametersfvNV(&self, target: GLenum, bindingIndex: GLuint, wordIndex: GLuint, count: GLsizei, params: *GLfloat) -> c_void { (self.ProgramBufferParametersfvNV.f)(target, bindingIndex, wordIndex, count, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramEnvParameter4dARB(&self, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.ProgramEnvParameter4dARB.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramEnvParameter4dvARB(&self, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { (self.ProgramEnvParameter4dvARB.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramEnvParameter4fARB(&self, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.ProgramEnvParameter4fARB.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramEnvParameter4fvARB(&self, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { (self.ProgramEnvParameter4fvARB.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramEnvParameterI4iNV(&self, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.ProgramEnvParameterI4iNV.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramEnvParameterI4ivNV(&self, target: GLenum, index: GLuint, params: *GLint) -> c_void { (self.ProgramEnvParameterI4ivNV.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramEnvParameterI4uiNV(&self, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (self.ProgramEnvParameterI4uiNV.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramEnvParameterI4uivNV(&self, target: GLenum, index: GLuint, params: *GLuint) -> c_void { (self.ProgramEnvParameterI4uivNV.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramEnvParameters4fvEXT(&self, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { (self.ProgramEnvParameters4fvEXT.f)(target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramEnvParametersI4ivNV(&self, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { (self.ProgramEnvParametersI4ivNV.f)(target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramEnvParametersI4uivNV(&self, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { (self.ProgramEnvParametersI4uivNV.f)(target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramLocalParameter4dARB(&self, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.ProgramLocalParameter4dARB.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramLocalParameter4dvARB(&self, target: GLenum, index: GLuint, params: *GLdouble) -> c_void { (self.ProgramLocalParameter4dvARB.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramLocalParameter4fARB(&self, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.ProgramLocalParameter4fARB.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramLocalParameter4fvARB(&self, target: GLenum, index: GLuint, params: *GLfloat) -> c_void { (self.ProgramLocalParameter4fvARB.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramLocalParameterI4iNV(&self, target: GLenum, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.ProgramLocalParameterI4iNV.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramLocalParameterI4ivNV(&self, target: GLenum, index: GLuint, params: *GLint) -> c_void { (self.ProgramLocalParameterI4ivNV.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramLocalParameterI4uiNV(&self, target: GLenum, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (self.ProgramLocalParameterI4uiNV.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramLocalParameterI4uivNV(&self, target: GLenum, index: GLuint, params: *GLuint) -> c_void { (self.ProgramLocalParameterI4uivNV.f)(target, index, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramLocalParameters4fvEXT(&self, target: GLenum, index: GLuint, count: GLsizei, params: *GLfloat) -> c_void { (self.ProgramLocalParameters4fvEXT.f)(target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramLocalParametersI4ivNV(&self, target: GLenum, index: GLuint, count: GLsizei, params: *GLint) -> c_void { (self.ProgramLocalParametersI4ivNV.f)(target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramLocalParametersI4uivNV(&self, target: GLenum, index: GLuint, count: GLsizei, params: *GLuint) -> c_void { (self.ProgramLocalParametersI4uivNV.f)(target, index, count, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramNamedParameter4dNV(&self, id: GLuint, len: GLsizei, name: *GLubyte, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { (self.ProgramNamedParameter4dNV.f)(id, len, name, x, y, z, w) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramNamedParameter4dvNV(&self, id: GLuint, len: GLsizei, name: *GLubyte, v: *GLdouble) -> c_void { (self.ProgramNamedParameter4dvNV.f)(id, len, name, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramNamedParameter4fNV(&self, id: GLuint, len: GLsizei, name: *GLubyte, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { (self.ProgramNamedParameter4fNV.f)(id, len, name, x, y, z, w) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramNamedParameter4fvNV(&self, id: GLuint, len: GLsizei, name: *GLubyte, v: *GLfloat) -> c_void { (self.ProgramNamedParameter4fvNV.f)(id, len, name, v) }
    #[fixed_stack_segment] #[inline] pub fn ProgramParameter4dNV(&self, target: GLenum, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.ProgramParameter4dNV.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramParameter4dvNV(&self, target: GLenum, index: GLuint, v: *GLdouble) -> c_void { (self.ProgramParameter4dvNV.f)(target, index, v) }
    #[fixed_stack_segment] #[inline] pub fn ProgramParameter4fNV(&self, target: GLenum, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.ProgramParameter4fNV.f)(target, index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramParameter4fvNV(&self, target: GLenum, index: GLuint, v: *GLfloat) -> c_void { (self.ProgramParameter4fvNV.f)(target, index, v) }
    #[fixed_stack_segment] #[inline] pub fn ProgramParameteri(&self, program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { (self.ProgramParameteri.f)(program, pname, value) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramParameteriARB(&self, program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { (self.ProgramParameteriARB.f)(program, pname, value) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramParameteriEXT(&self, program: GLuint, pname: GLenum, value: GLint) -> c_void { unsafe { (self.ProgramParameteriEXT.f)(program, pname, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramParameters4dvNV(&self, target: GLenum, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { (self.ProgramParameters4dvNV.f)(target, index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramParameters4fvNV(&self, target: GLenum, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { (self.ProgramParameters4fvNV.f)(target, index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramStringARB(&self, target: GLenum, format: GLenum, len: GLsizei, string: *GLvoid) -> c_void { (self.ProgramStringARB.f)(target, format, len, string) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramSubroutineParametersuivNV(&self, target: GLenum, count: GLsizei, params: *GLuint) -> c_void { (self.ProgramSubroutineParametersuivNV.f)(target, count, params) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1d(&self, program: GLuint, location: GLint, v0: GLdouble) -> c_void { unsafe { (self.ProgramUniform1d.f)(program, location, v0) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1dEXT(&self, program: GLuint, location: GLint, x: GLdouble) -> c_void { unsafe { (self.ProgramUniform1dEXT.f)(program, location, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1dv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.ProgramUniform1dv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.ProgramUniform1dvEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1f(&self, program: GLuint, location: GLint, v0: GLfloat) -> c_void { unsafe { (self.ProgramUniform1f.f)(program, location, v0) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1fEXT(&self, program: GLuint, location: GLint, v0: GLfloat) -> c_void { unsafe { (self.ProgramUniform1fEXT.f)(program, location, v0) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1fv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.ProgramUniform1fv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.ProgramUniform1fvEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1i(&self, program: GLuint, location: GLint, v0: GLint) -> c_void { unsafe { (self.ProgramUniform1i.f)(program, location, v0) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1i64NV(&self, program: GLuint, location: GLint, x: GLint64EXT) -> c_void { unsafe { (self.ProgramUniform1i64NV.f)(program, location, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1i64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { (self.ProgramUniform1i64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1iEXT(&self, program: GLuint, location: GLint, v0: GLint) -> c_void { unsafe { (self.ProgramUniform1iEXT.f)(program, location, v0) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1iv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.ProgramUniform1iv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1ivEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.ProgramUniform1ivEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1ui(&self, program: GLuint, location: GLint, v0: GLuint) -> c_void { unsafe { (self.ProgramUniform1ui.f)(program, location, v0) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1ui64NV(&self, program: GLuint, location: GLint, x: GLuint64EXT) -> c_void { unsafe { (self.ProgramUniform1ui64NV.f)(program, location, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1ui64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.ProgramUniform1ui64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform1uiEXT(&self, program: GLuint, location: GLint, v0: GLuint) -> c_void { unsafe { (self.ProgramUniform1uiEXT.f)(program, location, v0) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1uiv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.ProgramUniform1uiv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform1uivEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.ProgramUniform1uivEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2d(&self, program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble) -> c_void { unsafe { (self.ProgramUniform2d.f)(program, location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2dEXT(&self, program: GLuint, location: GLint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.ProgramUniform2dEXT.f)(program, location, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2dv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.ProgramUniform2dv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.ProgramUniform2dvEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2f(&self, program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { (self.ProgramUniform2f.f)(program, location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2fEXT(&self, program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { (self.ProgramUniform2fEXT.f)(program, location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2fv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.ProgramUniform2fv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.ProgramUniform2fvEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2i(&self, program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { (self.ProgramUniform2i.f)(program, location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2i64NV(&self, program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { (self.ProgramUniform2i64NV.f)(program, location, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2i64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { (self.ProgramUniform2i64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2iEXT(&self, program: GLuint, location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { (self.ProgramUniform2iEXT.f)(program, location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2iv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.ProgramUniform2iv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2ivEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.ProgramUniform2ivEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2ui(&self, program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { (self.ProgramUniform2ui.f)(program, location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2ui64NV(&self, program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { (self.ProgramUniform2ui64NV.f)(program, location, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2ui64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.ProgramUniform2ui64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform2uiEXT(&self, program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { (self.ProgramUniform2uiEXT.f)(program, location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2uiv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.ProgramUniform2uiv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform2uivEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.ProgramUniform2uivEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3d(&self, program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble) -> c_void { unsafe { (self.ProgramUniform3d.f)(program, location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3dEXT(&self, program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.ProgramUniform3dEXT.f)(program, location, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3dv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.ProgramUniform3dv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.ProgramUniform3dvEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3f(&self, program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (self.ProgramUniform3f.f)(program, location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3fEXT(&self, program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (self.ProgramUniform3fEXT.f)(program, location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3fv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.ProgramUniform3fv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.ProgramUniform3fvEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3i(&self, program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { (self.ProgramUniform3i.f)(program, location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3i64NV(&self, program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { (self.ProgramUniform3i64NV.f)(program, location, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3i64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { (self.ProgramUniform3i64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3iEXT(&self, program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { (self.ProgramUniform3iEXT.f)(program, location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3iv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.ProgramUniform3iv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3ivEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.ProgramUniform3ivEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3ui(&self, program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { (self.ProgramUniform3ui.f)(program, location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3ui64NV(&self, program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { (self.ProgramUniform3ui64NV.f)(program, location, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3ui64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.ProgramUniform3ui64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform3uiEXT(&self, program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { (self.ProgramUniform3uiEXT.f)(program, location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3uiv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.ProgramUniform3uiv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform3uivEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.ProgramUniform3uivEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4d(&self, program: GLuint, location: GLint, v0: GLdouble, v1: GLdouble, v2: GLdouble, v3: GLdouble) -> c_void { unsafe { (self.ProgramUniform4d.f)(program, location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4dEXT(&self, program: GLuint, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.ProgramUniform4dEXT.f)(program, location, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4dv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.ProgramUniform4dv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.ProgramUniform4dvEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4f(&self, program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { (self.ProgramUniform4f.f)(program, location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4fEXT(&self, program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { (self.ProgramUniform4fEXT.f)(program, location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4fv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.ProgramUniform4fv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.ProgramUniform4fvEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4i(&self, program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { (self.ProgramUniform4i.f)(program, location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4i64NV(&self, program: GLuint, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { (self.ProgramUniform4i64NV.f)(program, location, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4i64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { (self.ProgramUniform4i64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4iEXT(&self, program: GLuint, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { (self.ProgramUniform4iEXT.f)(program, location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4iv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.ProgramUniform4iv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4ivEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.ProgramUniform4ivEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4ui(&self, program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { (self.ProgramUniform4ui.f)(program, location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4ui64NV(&self, program: GLuint, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { (self.ProgramUniform4ui64NV.f)(program, location, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4ui64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.ProgramUniform4ui64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniform4uiEXT(&self, program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { (self.ProgramUniform4uiEXT.f)(program, location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4uiv(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.ProgramUniform4uiv.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniform4uivEXT(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.ProgramUniform4uivEXT.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniformHandleui64ARB(&self, program: GLuint, location: GLint, value: GLuint64) -> c_void { unsafe { (self.ProgramUniformHandleui64ARB.f)(program, location, value) } }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniformHandleui64NV(&self, program: GLuint, location: GLint, value: GLuint64) -> c_void { unsafe { (self.ProgramUniformHandleui64NV.f)(program, location, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformHandleui64vARB(&self, program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void { (self.ProgramUniformHandleui64vARB.f)(program, location, count, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformHandleui64vNV(&self, program: GLuint, location: GLint, count: GLsizei, values: *GLuint64) -> c_void { (self.ProgramUniformHandleui64vNV.f)(program, location, count, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix2dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix2dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix2fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix2fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2x3dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix2x3dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2x3dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix2x3dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2x3fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix2x3fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2x3fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix2x3fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2x4dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix2x4dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2x4dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix2x4dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2x4fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix2x4fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix2x4fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix2x4fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix3dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix3dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix3fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix3fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3x2dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix3x2dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3x2dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix3x2dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3x2fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix3x2fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3x2fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix3x2fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3x4dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix3x4dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3x4dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix3x4dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3x4fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix3x4fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix3x4fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix3x4fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix4dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix4dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix4fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix4fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4x2dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix4x2dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4x2dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix4x2dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4x2fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix4x2fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4x2fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix4x2fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4x3dv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix4x3dv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4x3dvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.ProgramUniformMatrix4x3dvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4x3fv(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix4x3fv.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformMatrix4x3fvEXT(&self, program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.ProgramUniformMatrix4x3fvEXT.f)(program, location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramUniformui64NV(&self, program: GLuint, location: GLint, value: GLuint64EXT) -> c_void { unsafe { (self.ProgramUniformui64NV.f)(program, location, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ProgramUniformui64vNV(&self, program: GLuint, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.ProgramUniformui64vNV.f)(program, location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn ProgramVertexLimitNV(&self, target: GLenum, limit: GLint) -> c_void { unsafe { (self.ProgramVertexLimitNV.f)(target, limit) } }
    #[fixed_stack_segment] #[inline] pub fn ProvokingVertex(&self, mode: GLenum) -> c_void { unsafe { (self.ProvokingVertex.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn ProvokingVertexEXT(&self, mode: GLenum) -> c_void { unsafe { (self.ProvokingVertexEXT.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn PushAttrib(&self, mask: GLbitfield) -> c_void { unsafe { (self.PushAttrib.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub fn PushClientAttrib(&self, mask: GLbitfield) -> c_void { unsafe { (self.PushClientAttrib.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub fn PushClientAttribDefaultEXT(&self, mask: GLbitfield) -> c_void { unsafe { (self.PushClientAttribDefaultEXT.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn PushDebugGroup(&self, source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void { (self.PushDebugGroup.f)(source, id, length, message) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PushDebugGroupKHR(&self, source: GLenum, id: GLuint, length: GLsizei, message: *GLchar) -> c_void { (self.PushDebugGroupKHR.f)(source, id, length, message) }
    #[fixed_stack_segment] #[inline] pub unsafe fn PushGroupMarkerEXT(&self, length: GLsizei, marker: *GLchar) -> c_void { (self.PushGroupMarkerEXT.f)(length, marker) }
    #[fixed_stack_segment] #[inline] pub fn PushMatrix(&self) -> c_void { unsafe { (self.PushMatrix.f)() } }
    #[fixed_stack_segment] #[inline] pub fn PushName(&self, name: GLuint) -> c_void { unsafe { (self.PushName.f)(name) } }
    #[fixed_stack_segment] #[inline] pub fn QueryCounter(&self, id: GLuint, target: GLenum) -> c_void { unsafe { (self.QueryCounter.f)(id, target) } }
    #[fixed_stack_segment] #[inline] pub fn QueryCounterEXT(&self, id: GLuint, target: GLenum) -> c_void { unsafe { (self.QueryCounterEXT.f)(id, target) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn QueryMatrixxOES(&self, mantissa: *GLfixed, exponent: *GLint) -> GLbitfield { (self.QueryMatrixxOES.f)(mantissa, exponent) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos2d(&self, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.RasterPos2d.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos2dv(&self, v: *GLdouble) -> c_void { (self.RasterPos2dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos2f(&self, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.RasterPos2f.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos2fv(&self, v: *GLfloat) -> c_void { (self.RasterPos2fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos2i(&self, x: GLint, y: GLint) -> c_void { unsafe { (self.RasterPos2i.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos2iv(&self, v: *GLint) -> c_void { (self.RasterPos2iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos2s(&self, x: GLshort, y: GLshort) -> c_void { unsafe { (self.RasterPos2s.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos2sv(&self, v: *GLshort) -> c_void { (self.RasterPos2sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos2xOES(&self, x: GLfixed, y: GLfixed) -> c_void { unsafe { (self.RasterPos2xOES.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos2xvOES(&self, coords: *GLfixed) -> c_void { (self.RasterPos2xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos3d(&self, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.RasterPos3d.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos3dv(&self, v: *GLdouble) -> c_void { (self.RasterPos3dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos3f(&self, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.RasterPos3f.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos3fv(&self, v: *GLfloat) -> c_void { (self.RasterPos3fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos3i(&self, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (self.RasterPos3i.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos3iv(&self, v: *GLint) -> c_void { (self.RasterPos3iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos3s(&self, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.RasterPos3s.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos3sv(&self, v: *GLshort) -> c_void { (self.RasterPos3sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos3xOES(&self, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (self.RasterPos3xOES.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos3xvOES(&self, coords: *GLfixed) -> c_void { (self.RasterPos3xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos4d(&self, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.RasterPos4d.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos4dv(&self, v: *GLdouble) -> c_void { (self.RasterPos4dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos4f(&self, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.RasterPos4f.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos4fv(&self, v: *GLfloat) -> c_void { (self.RasterPos4fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos4i(&self, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.RasterPos4i.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos4iv(&self, v: *GLint) -> c_void { (self.RasterPos4iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos4s(&self, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (self.RasterPos4s.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos4sv(&self, v: *GLshort) -> c_void { (self.RasterPos4sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn RasterPos4xOES(&self, x: GLfixed, y: GLfixed, z: GLfixed, w: GLfixed) -> c_void { unsafe { (self.RasterPos4xOES.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RasterPos4xvOES(&self, coords: *GLfixed) -> c_void { (self.RasterPos4xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn ReadBuffer(&self, mode: GLenum) -> c_void { unsafe { (self.ReadBuffer.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn ReadBufferIndexedEXT(&self, src: GLenum, index: GLint) -> c_void { unsafe { (self.ReadBufferIndexedEXT.f)(src, index) } }
    #[fixed_stack_segment] #[inline] pub fn ReadBufferNV(&self, mode: GLenum) -> c_void { unsafe { (self.ReadBufferNV.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn ReadInstrumentsSGIX(&self, marker: GLint) -> c_void { unsafe { (self.ReadInstrumentsSGIX.f)(marker) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReadPixels(&self, x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.ReadPixels.f)(x, y, width, height, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReadnPixelsARB(&self, x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void { (self.ReadnPixelsARB.f)(x, y, width, height, format, type_, bufSize, data) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReadnPixelsEXT(&self, x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, bufSize: GLsizei, data: *GLvoid) -> c_void { (self.ReadnPixelsEXT.f)(x, y, width, height, format, type_, bufSize, data) }
    #[fixed_stack_segment] #[inline] pub fn Rectd(&self, x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) -> c_void { unsafe { (self.Rectd.f)(x1, y1, x2, y2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Rectdv(&self, v1: *GLdouble, v2: *GLdouble) -> c_void { (self.Rectdv.f)(v1, v2) }
    #[fixed_stack_segment] #[inline] pub fn Rectf(&self, x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) -> c_void { unsafe { (self.Rectf.f)(x1, y1, x2, y2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Rectfv(&self, v1: *GLfloat, v2: *GLfloat) -> c_void { (self.Rectfv.f)(v1, v2) }
    #[fixed_stack_segment] #[inline] pub fn Recti(&self, x1: GLint, y1: GLint, x2: GLint, y2: GLint) -> c_void { unsafe { (self.Recti.f)(x1, y1, x2, y2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Rectiv(&self, v1: *GLint, v2: *GLint) -> c_void { (self.Rectiv.f)(v1, v2) }
    #[fixed_stack_segment] #[inline] pub fn Rects(&self, x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) -> c_void { unsafe { (self.Rects.f)(x1, y1, x2, y2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Rectsv(&self, v1: *GLshort, v2: *GLshort) -> c_void { (self.Rectsv.f)(v1, v2) }
    #[fixed_stack_segment] #[inline] pub fn RectxOES(&self, x1: GLfixed, y1: GLfixed, x2: GLfixed, y2: GLfixed) -> c_void { unsafe { (self.RectxOES.f)(x1, y1, x2, y2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn RectxvOES(&self, v1: *GLfixed, v2: *GLfixed) -> c_void { (self.RectxvOES.f)(v1, v2) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReferencePlaneSGIX(&self, equation: *GLdouble) -> c_void { (self.ReferencePlaneSGIX.f)(equation) }
    #[fixed_stack_segment] #[inline] pub fn ReleaseShaderCompiler(&self) -> c_void { unsafe { (self.ReleaseShaderCompiler.f)() } }
    #[fixed_stack_segment] #[inline] pub fn RenderMode(&self, mode: GLenum) -> GLint { unsafe { (self.RenderMode.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorage(&self, target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorage.f)(target, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageEXT(&self, target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageEXT.f)(target, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageMultisample(&self, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageMultisample.f)(target, samples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageMultisampleANGLE(&self, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageMultisampleANGLE.f)(target, samples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageMultisampleAPPLE(&self, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageMultisampleAPPLE.f)(target, samples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageMultisampleCoverageNV(&self, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageMultisampleCoverageNV.f)(target, coverageSamples, colorSamples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageMultisampleEXT(&self, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageMultisampleEXT.f)(target, samples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageMultisampleIMG(&self, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageMultisampleIMG.f)(target, samples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageMultisampleNV(&self, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageMultisampleNV.f)(target, samples, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn RenderbufferStorageOES(&self, target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.RenderbufferStorageOES.f)(target, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodePointerSUN(&self, type_: GLenum, stride: GLsizei, pointer: **GLvoid) -> c_void { (self.ReplacementCodePointerSUN.f)(type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeubSUN(&self, code: GLubyte) -> c_void { unsafe { (self.ReplacementCodeubSUN.f)(code) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeubvSUN(&self, code: *GLubyte) -> c_void { (self.ReplacementCodeubvSUN.f)(code) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiColor3fVertex3fSUN(&self, rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.ReplacementCodeuiColor3fVertex3fSUN.f)(rc, r, g, b, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuiColor3fVertex3fvSUN(&self, rc: *GLuint, c: *GLfloat, v: *GLfloat) -> c_void { (self.ReplacementCodeuiColor3fVertex3fvSUN.f)(rc, c, v) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiColor4fNormal3fVertex3fSUN(&self, rc: GLuint, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.ReplacementCodeuiColor4fNormal3fVertex3fSUN.f)(rc, r, g, b, a, nx, ny, nz, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuiColor4fNormal3fVertex3fvSUN(&self, rc: *GLuint, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (self.ReplacementCodeuiColor4fNormal3fVertex3fvSUN.f)(rc, c, n, v) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiColor4ubVertex3fSUN(&self, rc: GLuint, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.ReplacementCodeuiColor4ubVertex3fSUN.f)(rc, r, g, b, a, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuiColor4ubVertex3fvSUN(&self, rc: *GLuint, c: *GLubyte, v: *GLfloat) -> c_void { (self.ReplacementCodeuiColor4ubVertex3fvSUN.f)(rc, c, v) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiNormal3fVertex3fSUN(&self, rc: GLuint, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.ReplacementCodeuiNormal3fVertex3fSUN.f)(rc, nx, ny, nz, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuiNormal3fVertex3fvSUN(&self, rc: *GLuint, n: *GLfloat, v: *GLfloat) -> c_void { (self.ReplacementCodeuiNormal3fVertex3fvSUN.f)(rc, n, v) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiSUN(&self, code: GLuint) -> c_void { unsafe { (self.ReplacementCodeuiSUN.f)(code) } }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(&self, rc: GLuint, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.f)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(&self, rc: *GLuint, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (self.ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.f)(rc, tc, c, n, v) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(&self, rc: GLuint, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.f)(rc, s, t, nx, ny, nz, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(&self, rc: *GLuint, tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (self.ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.f)(rc, tc, n, v) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiTexCoord2fVertex3fSUN(&self, rc: GLuint, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.ReplacementCodeuiTexCoord2fVertex3fSUN.f)(rc, s, t, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuiTexCoord2fVertex3fvSUN(&self, rc: *GLuint, tc: *GLfloat, v: *GLfloat) -> c_void { (self.ReplacementCodeuiTexCoord2fVertex3fvSUN.f)(rc, tc, v) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeuiVertex3fSUN(&self, rc: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.ReplacementCodeuiVertex3fSUN.f)(rc, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuiVertex3fvSUN(&self, rc: *GLuint, v: *GLfloat) -> c_void { (self.ReplacementCodeuiVertex3fvSUN.f)(rc, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeuivSUN(&self, code: *GLuint) -> c_void { (self.ReplacementCodeuivSUN.f)(code) }
    #[fixed_stack_segment] #[inline] pub fn ReplacementCodeusSUN(&self, code: GLushort) -> c_void { unsafe { (self.ReplacementCodeusSUN.f)(code) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ReplacementCodeusvSUN(&self, code: *GLushort) -> c_void { (self.ReplacementCodeusvSUN.f)(code) }
    #[fixed_stack_segment] #[inline] pub unsafe fn RequestResidentProgramsNV(&self, n: GLsizei, programs: *GLuint) -> c_void { (self.RequestResidentProgramsNV.f)(n, programs) }
    #[fixed_stack_segment] #[inline] pub fn ResetHistogram(&self, target: GLenum) -> c_void { unsafe { (self.ResetHistogram.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn ResetHistogramEXT(&self, target: GLenum) -> c_void { unsafe { (self.ResetHistogramEXT.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn ResetMinmax(&self, target: GLenum) -> c_void { unsafe { (self.ResetMinmax.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn ResetMinmaxEXT(&self, target: GLenum) -> c_void { unsafe { (self.ResetMinmaxEXT.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn ResizeBuffersMESA(&self) -> c_void { unsafe { (self.ResizeBuffersMESA.f)() } }
    #[fixed_stack_segment] #[inline] pub fn ResolveMultisampleFramebufferAPPLE(&self) -> c_void { unsafe { (self.ResolveMultisampleFramebufferAPPLE.f)() } }
    #[fixed_stack_segment] #[inline] pub fn ResumeTransformFeedback(&self) -> c_void { unsafe { (self.ResumeTransformFeedback.f)() } }
    #[fixed_stack_segment] #[inline] pub fn ResumeTransformFeedbackNV(&self) -> c_void { unsafe { (self.ResumeTransformFeedbackNV.f)() } }
    #[fixed_stack_segment] #[inline] pub fn Rotated(&self, angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.Rotated.f)(angle, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn Rotatef(&self, angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.Rotatef.f)(angle, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn Rotatex(&self, angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (self.Rotatex.f)(angle, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn RotatexOES(&self, angle: GLfixed, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (self.RotatexOES.f)(angle, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn SampleCoverage(&self, value: GLfloat, invert: GLboolean) -> c_void { unsafe { (self.SampleCoverage.f)(value, invert) } }
    #[fixed_stack_segment] #[inline] pub fn SampleCoverageARB(&self, value: GLfloat, invert: GLboolean) -> c_void { unsafe { (self.SampleCoverageARB.f)(value, invert) } }
    #[fixed_stack_segment] #[inline] pub fn SampleCoverageOES(&self, value: GLfixed, invert: GLboolean) -> c_void { unsafe { (self.SampleCoverageOES.f)(value, invert) } }
    #[fixed_stack_segment] #[inline] pub fn SampleCoveragex(&self, value: GLclampx, invert: GLboolean) -> c_void { unsafe { (self.SampleCoveragex.f)(value, invert) } }
    #[fixed_stack_segment] #[inline] pub fn SampleCoveragexOES(&self, value: GLclampx, invert: GLboolean) -> c_void { unsafe { (self.SampleCoveragexOES.f)(value, invert) } }
    #[fixed_stack_segment] #[inline] pub fn SampleMapATI(&self, dst: GLuint, interp: GLuint, swizzle: GLenum) -> c_void { unsafe { (self.SampleMapATI.f)(dst, interp, swizzle) } }
    #[fixed_stack_segment] #[inline] pub fn SampleMaskEXT(&self, value: GLclampf, invert: GLboolean) -> c_void { unsafe { (self.SampleMaskEXT.f)(value, invert) } }
    #[fixed_stack_segment] #[inline] pub fn SampleMaskIndexedNV(&self, index: GLuint, mask: GLbitfield) -> c_void { unsafe { (self.SampleMaskIndexedNV.f)(index, mask) } }
    #[fixed_stack_segment] #[inline] pub fn SampleMaskSGIS(&self, value: GLclampf, invert: GLboolean) -> c_void { unsafe { (self.SampleMaskSGIS.f)(value, invert) } }
    #[fixed_stack_segment] #[inline] pub fn SampleMaski(&self, index: GLuint, mask: GLbitfield) -> c_void { unsafe { (self.SampleMaski.f)(index, mask) } }
    #[fixed_stack_segment] #[inline] pub fn SamplePatternEXT(&self, pattern: GLenum) -> c_void { unsafe { (self.SamplePatternEXT.f)(pattern) } }
    #[fixed_stack_segment] #[inline] pub fn SamplePatternSGIS(&self, pattern: GLenum) -> c_void { unsafe { (self.SamplePatternSGIS.f)(pattern) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SamplerParameterIiv(&self, sampler: GLuint, pname: GLenum, param: *GLint) -> c_void { (self.SamplerParameterIiv.f)(sampler, pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SamplerParameterIuiv(&self, sampler: GLuint, pname: GLenum, param: *GLuint) -> c_void { (self.SamplerParameterIuiv.f)(sampler, pname, param) }
    #[fixed_stack_segment] #[inline] pub fn SamplerParameterf(&self, sampler: GLuint, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.SamplerParameterf.f)(sampler, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SamplerParameterfv(&self, sampler: GLuint, pname: GLenum, param: *GLfloat) -> c_void { (self.SamplerParameterfv.f)(sampler, pname, param) }
    #[fixed_stack_segment] #[inline] pub fn SamplerParameteri(&self, sampler: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { (self.SamplerParameteri.f)(sampler, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SamplerParameteriv(&self, sampler: GLuint, pname: GLenum, param: *GLint) -> c_void { (self.SamplerParameteriv.f)(sampler, pname, param) }
    #[fixed_stack_segment] #[inline] pub fn Scaled(&self, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.Scaled.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn Scalef(&self, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.Scalef.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn Scalex(&self, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (self.Scalex.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn ScalexOES(&self, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (self.ScalexOES.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn Scissor(&self, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.Scissor.f)(x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ScissorArrayv(&self, first: GLuint, count: GLsizei, v: *GLint) -> c_void { (self.ScissorArrayv.f)(first, count, v) }
    #[fixed_stack_segment] #[inline] pub fn ScissorIndexed(&self, index: GLuint, left: GLint, bottom: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.ScissorIndexed.f)(index, left, bottom, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ScissorIndexedv(&self, index: GLuint, v: *GLint) -> c_void { (self.ScissorIndexedv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3b(&self, red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { (self.SecondaryColor3b.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3bEXT(&self, red: GLbyte, green: GLbyte, blue: GLbyte) -> c_void { unsafe { (self.SecondaryColor3bEXT.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3bv(&self, v: *GLbyte) -> c_void { (self.SecondaryColor3bv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3bvEXT(&self, v: *GLbyte) -> c_void { (self.SecondaryColor3bvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3d(&self, red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { (self.SecondaryColor3d.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3dEXT(&self, red: GLdouble, green: GLdouble, blue: GLdouble) -> c_void { unsafe { (self.SecondaryColor3dEXT.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3dv(&self, v: *GLdouble) -> c_void { (self.SecondaryColor3dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3dvEXT(&self, v: *GLdouble) -> c_void { (self.SecondaryColor3dvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3f(&self, red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { (self.SecondaryColor3f.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3fEXT(&self, red: GLfloat, green: GLfloat, blue: GLfloat) -> c_void { unsafe { (self.SecondaryColor3fEXT.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3fv(&self, v: *GLfloat) -> c_void { (self.SecondaryColor3fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3fvEXT(&self, v: *GLfloat) -> c_void { (self.SecondaryColor3fvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3hNV(&self, red: GLhalfNV, green: GLhalfNV, blue: GLhalfNV) -> c_void { unsafe { (self.SecondaryColor3hNV.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3hvNV(&self, v: *GLhalfNV) -> c_void { (self.SecondaryColor3hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3i(&self, red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { (self.SecondaryColor3i.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3iEXT(&self, red: GLint, green: GLint, blue: GLint) -> c_void { unsafe { (self.SecondaryColor3iEXT.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3iv(&self, v: *GLint) -> c_void { (self.SecondaryColor3iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3ivEXT(&self, v: *GLint) -> c_void { (self.SecondaryColor3ivEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3s(&self, red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { (self.SecondaryColor3s.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3sEXT(&self, red: GLshort, green: GLshort, blue: GLshort) -> c_void { unsafe { (self.SecondaryColor3sEXT.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3sv(&self, v: *GLshort) -> c_void { (self.SecondaryColor3sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3svEXT(&self, v: *GLshort) -> c_void { (self.SecondaryColor3svEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3ub(&self, red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { (self.SecondaryColor3ub.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3ubEXT(&self, red: GLubyte, green: GLubyte, blue: GLubyte) -> c_void { unsafe { (self.SecondaryColor3ubEXT.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3ubv(&self, v: *GLubyte) -> c_void { (self.SecondaryColor3ubv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3ubvEXT(&self, v: *GLubyte) -> c_void { (self.SecondaryColor3ubvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3ui(&self, red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { (self.SecondaryColor3ui.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3uiEXT(&self, red: GLuint, green: GLuint, blue: GLuint) -> c_void { unsafe { (self.SecondaryColor3uiEXT.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3uiv(&self, v: *GLuint) -> c_void { (self.SecondaryColor3uiv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3uivEXT(&self, v: *GLuint) -> c_void { (self.SecondaryColor3uivEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3us(&self, red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { (self.SecondaryColor3us.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColor3usEXT(&self, red: GLushort, green: GLushort, blue: GLushort) -> c_void { unsafe { (self.SecondaryColor3usEXT.f)(red, green, blue) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3usv(&self, v: *GLushort) -> c_void { (self.SecondaryColor3usv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColor3usvEXT(&self, v: *GLushort) -> c_void { (self.SecondaryColor3usvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColorFormatNV(&self, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.SecondaryColorFormatNV.f)(size, type_, stride) } }
    #[fixed_stack_segment] #[inline] pub fn SecondaryColorP3ui(&self, type_: GLenum, color: GLuint) -> c_void { unsafe { (self.SecondaryColorP3ui.f)(type_, color) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColorP3uiv(&self, type_: GLenum, color: *GLuint) -> c_void { (self.SecondaryColorP3uiv.f)(type_, color) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColorPointer(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.SecondaryColorPointer.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColorPointerEXT(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.SecondaryColorPointerEXT.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SecondaryColorPointerListIBM(&self, size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { (self.SecondaryColorPointerListIBM.f)(size, type_, stride, pointer, ptrstride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SelectBuffer(&self, size: GLsizei, buffer: *GLuint) -> c_void { (self.SelectBuffer.f)(size, buffer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SelectPerfMonitorCountersAMD(&self, monitor: GLuint, enable: GLboolean, group: GLuint, numCounters: GLint, counterList: *GLuint) -> c_void { (self.SelectPerfMonitorCountersAMD.f)(monitor, enable, group, numCounters, counterList) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SeparableFilter2D(&self, target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void { (self.SeparableFilter2D.f)(target, internalformat, width, height, format, type_, row, column) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SeparableFilter2DEXT(&self, target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, row: *GLvoid, column: *GLvoid) -> c_void { (self.SeparableFilter2DEXT.f)(target, internalformat, width, height, format, type_, row, column) }
    #[fixed_stack_segment] #[inline] pub fn SetFenceAPPLE(&self, fence: GLuint) -> c_void { unsafe { (self.SetFenceAPPLE.f)(fence) } }
    #[fixed_stack_segment] #[inline] pub fn SetFenceNV(&self, fence: GLuint, condition: GLenum) -> c_void { unsafe { (self.SetFenceNV.f)(fence, condition) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SetFragmentShaderConstantATI(&self, dst: GLuint, value: *GLfloat) -> c_void { (self.SetFragmentShaderConstantATI.f)(dst, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SetInvariantEXT(&self, id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void { (self.SetInvariantEXT.f)(id, type_, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SetLocalConstantEXT(&self, id: GLuint, type_: GLenum, addr: *GLvoid) -> c_void { (self.SetLocalConstantEXT.f)(id, type_, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn SetMultisamplefvAMD(&self, pname: GLenum, index: GLuint, val: *GLfloat) -> c_void { (self.SetMultisamplefvAMD.f)(pname, index, val) }
    #[fixed_stack_segment] #[inline] pub fn ShadeModel(&self, mode: GLenum) -> c_void { unsafe { (self.ShadeModel.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ShaderBinary(&self, count: GLsizei, shaders: *GLuint, binaryformat: GLenum, binary: *GLvoid, length: GLsizei) -> c_void { (self.ShaderBinary.f)(count, shaders, binaryformat, binary, length) }
    #[fixed_stack_segment] #[inline] pub fn ShaderOp1EXT(&self, op: GLenum, res: GLuint, arg1: GLuint) -> c_void { unsafe { (self.ShaderOp1EXT.f)(op, res, arg1) } }
    #[fixed_stack_segment] #[inline] pub fn ShaderOp2EXT(&self, op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint) -> c_void { unsafe { (self.ShaderOp2EXT.f)(op, res, arg1, arg2) } }
    #[fixed_stack_segment] #[inline] pub fn ShaderOp3EXT(&self, op: GLenum, res: GLuint, arg1: GLuint, arg2: GLuint, arg3: GLuint) -> c_void { unsafe { (self.ShaderOp3EXT.f)(op, res, arg1, arg2, arg3) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ShaderSource(&self, shader: GLuint, count: GLsizei, string: **GLchar, length: *GLint) -> c_void { (self.ShaderSource.f)(shader, count, string, length) }
    #[fixed_stack_segment] #[inline] pub unsafe fn ShaderSourceARB(&self, shaderObj: GLhandleARB, count: GLsizei, string: **GLcharARB, length: *GLint) -> c_void { (self.ShaderSourceARB.f)(shaderObj, count, string, length) }
    #[fixed_stack_segment] #[inline] pub fn ShaderStorageBlockBinding(&self, program: GLuint, storageBlockIndex: GLuint, storageBlockBinding: GLuint) -> c_void { unsafe { (self.ShaderStorageBlockBinding.f)(program, storageBlockIndex, storageBlockBinding) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SharpenTexFuncSGIS(&self, target: GLenum, n: GLsizei, points: *GLfloat) -> c_void { (self.SharpenTexFuncSGIS.f)(target, n, points) }
    #[fixed_stack_segment] #[inline] pub fn SpriteParameterfSGIX(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.SpriteParameterfSGIX.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SpriteParameterfvSGIX(&self, pname: GLenum, params: *GLfloat) -> c_void { (self.SpriteParameterfvSGIX.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn SpriteParameteriSGIX(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.SpriteParameteriSGIX.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn SpriteParameterivSGIX(&self, pname: GLenum, params: *GLint) -> c_void { (self.SpriteParameterivSGIX.f)(pname, params) }
    #[fixed_stack_segment] #[inline] pub fn StartInstrumentsSGIX(&self) -> c_void { unsafe { (self.StartInstrumentsSGIX.f)() } }
    #[fixed_stack_segment] #[inline] pub fn StartTilingQCOM(&self, x: GLuint, y: GLuint, width: GLuint, height: GLuint, preserveMask: GLbitfield) -> c_void { unsafe { (self.StartTilingQCOM.f)(x, y, width, height, preserveMask) } }
    #[fixed_stack_segment] #[inline] pub fn StencilClearTagEXT(&self, stencilTagBits: GLsizei, stencilClearTag: GLuint) -> c_void { unsafe { (self.StencilClearTagEXT.f)(stencilTagBits, stencilClearTag) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn StencilFillPathInstancedNV(&self, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, fillMode: GLenum, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { (self.StencilFillPathInstancedNV.f)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues) }
    #[fixed_stack_segment] #[inline] pub fn StencilFillPathNV(&self, path: GLuint, fillMode: GLenum, mask: GLuint) -> c_void { unsafe { (self.StencilFillPathNV.f)(path, fillMode, mask) } }
    #[fixed_stack_segment] #[inline] pub fn StencilFunc(&self, func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { (self.StencilFunc.f)(func, ref_, mask) } }
    #[fixed_stack_segment] #[inline] pub fn StencilFuncSeparate(&self, face: GLenum, func: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { (self.StencilFuncSeparate.f)(face, func, ref_, mask) } }
    #[fixed_stack_segment] #[inline] pub fn StencilFuncSeparateATI(&self, frontfunc: GLenum, backfunc: GLenum, ref_: GLint, mask: GLuint) -> c_void { unsafe { (self.StencilFuncSeparateATI.f)(frontfunc, backfunc, ref_, mask) } }
    #[fixed_stack_segment] #[inline] pub fn StencilMask(&self, mask: GLuint) -> c_void { unsafe { (self.StencilMask.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub fn StencilMaskSeparate(&self, face: GLenum, mask: GLuint) -> c_void { unsafe { (self.StencilMaskSeparate.f)(face, mask) } }
    #[fixed_stack_segment] #[inline] pub fn StencilOp(&self, fail: GLenum, zfail: GLenum, zpass: GLenum) -> c_void { unsafe { (self.StencilOp.f)(fail, zfail, zpass) } }
    #[fixed_stack_segment] #[inline] pub fn StencilOpSeparate(&self, face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void { unsafe { (self.StencilOpSeparate.f)(face, sfail, dpfail, dppass) } }
    #[fixed_stack_segment] #[inline] pub fn StencilOpSeparateATI(&self, face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> c_void { unsafe { (self.StencilOpSeparateATI.f)(face, sfail, dpfail, dppass) } }
    #[fixed_stack_segment] #[inline] pub fn StencilOpValueAMD(&self, face: GLenum, value: GLuint) -> c_void { unsafe { (self.StencilOpValueAMD.f)(face, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn StencilStrokePathInstancedNV(&self, numPaths: GLsizei, pathNameType: GLenum, paths: *GLvoid, pathBase: GLuint, reference: GLint, mask: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { (self.StencilStrokePathInstancedNV.f)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues) }
    #[fixed_stack_segment] #[inline] pub fn StencilStrokePathNV(&self, path: GLuint, reference: GLint, mask: GLuint) -> c_void { unsafe { (self.StencilStrokePathNV.f)(path, reference, mask) } }
    #[fixed_stack_segment] #[inline] pub fn StopInstrumentsSGIX(&self, marker: GLint) -> c_void { unsafe { (self.StopInstrumentsSGIX.f)(marker) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn StringMarkerGREMEDY(&self, len: GLsizei, string: *GLvoid) -> c_void { (self.StringMarkerGREMEDY.f)(len, string) }
    #[fixed_stack_segment] #[inline] pub fn SwizzleEXT(&self, res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void { unsafe { (self.SwizzleEXT.f)(res, in_, outX, outY, outZ, outW) } }
    #[fixed_stack_segment] #[inline] pub fn SyncTextureINTEL(&self, texture: GLuint) -> c_void { unsafe { (self.SyncTextureINTEL.f)(texture) } }
    #[fixed_stack_segment] #[inline] pub fn TagSampleBufferSGIX(&self) -> c_void { unsafe { (self.TagSampleBufferSGIX.f)() } }
    #[fixed_stack_segment] #[inline] pub fn Tangent3bEXT(&self, tx: GLbyte, ty: GLbyte, tz: GLbyte) -> c_void { unsafe { (self.Tangent3bEXT.f)(tx, ty, tz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Tangent3bvEXT(&self, v: *GLbyte) -> c_void { (self.Tangent3bvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Tangent3dEXT(&self, tx: GLdouble, ty: GLdouble, tz: GLdouble) -> c_void { unsafe { (self.Tangent3dEXT.f)(tx, ty, tz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Tangent3dvEXT(&self, v: *GLdouble) -> c_void { (self.Tangent3dvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Tangent3fEXT(&self, tx: GLfloat, ty: GLfloat, tz: GLfloat) -> c_void { unsafe { (self.Tangent3fEXT.f)(tx, ty, tz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Tangent3fvEXT(&self, v: *GLfloat) -> c_void { (self.Tangent3fvEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Tangent3iEXT(&self, tx: GLint, ty: GLint, tz: GLint) -> c_void { unsafe { (self.Tangent3iEXT.f)(tx, ty, tz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Tangent3ivEXT(&self, v: *GLint) -> c_void { (self.Tangent3ivEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Tangent3sEXT(&self, tx: GLshort, ty: GLshort, tz: GLshort) -> c_void { unsafe { (self.Tangent3sEXT.f)(tx, ty, tz) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Tangent3svEXT(&self, v: *GLshort) -> c_void { (self.Tangent3svEXT.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TangentPointerEXT(&self, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.TangentPointerEXT.f)(type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub fn TbufferMask3DFX(&self, mask: GLuint) -> c_void { unsafe { (self.TbufferMask3DFX.f)(mask) } }
    #[fixed_stack_segment] #[inline] pub fn TessellationFactorAMD(&self, factor: GLfloat) -> c_void { unsafe { (self.TessellationFactorAMD.f)(factor) } }
    #[fixed_stack_segment] #[inline] pub fn TessellationModeAMD(&self, mode: GLenum) -> c_void { unsafe { (self.TessellationModeAMD.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn TestFenceAPPLE(&self, fence: GLuint) -> GLboolean { unsafe { (self.TestFenceAPPLE.f)(fence) } }
    #[fixed_stack_segment] #[inline] pub fn TestFenceNV(&self, fence: GLuint) -> GLboolean { unsafe { (self.TestFenceNV.f)(fence) } }
    #[fixed_stack_segment] #[inline] pub fn TestObjectAPPLE(&self, object: GLenum, name: GLuint) -> GLboolean { unsafe { (self.TestObjectAPPLE.f)(object, name) } }
    #[fixed_stack_segment] #[inline] pub fn TexBuffer(&self, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (self.TexBuffer.f)(target, internalformat, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn TexBufferARB(&self, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (self.TexBufferARB.f)(target, internalformat, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn TexBufferEXT(&self, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (self.TexBufferEXT.f)(target, internalformat, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn TexBufferRange(&self, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (self.TexBufferRange.f)(target, internalformat, buffer, offset, size) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexBumpParameterfvATI(&self, pname: GLenum, param: *GLfloat) -> c_void { (self.TexBumpParameterfvATI.f)(pname, param) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexBumpParameterivATI(&self, pname: GLenum, param: *GLint) -> c_void { (self.TexBumpParameterivATI.f)(pname, param) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord1bOES(&self, s: GLbyte) -> c_void { unsafe { (self.TexCoord1bOES.f)(s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord1bvOES(&self, coords: *GLbyte) -> c_void { (self.TexCoord1bvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord1d(&self, s: GLdouble) -> c_void { unsafe { (self.TexCoord1d.f)(s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord1dv(&self, v: *GLdouble) -> c_void { (self.TexCoord1dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord1f(&self, s: GLfloat) -> c_void { unsafe { (self.TexCoord1f.f)(s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord1fv(&self, v: *GLfloat) -> c_void { (self.TexCoord1fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord1hNV(&self, s: GLhalfNV) -> c_void { unsafe { (self.TexCoord1hNV.f)(s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord1hvNV(&self, v: *GLhalfNV) -> c_void { (self.TexCoord1hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord1i(&self, s: GLint) -> c_void { unsafe { (self.TexCoord1i.f)(s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord1iv(&self, v: *GLint) -> c_void { (self.TexCoord1iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord1s(&self, s: GLshort) -> c_void { unsafe { (self.TexCoord1s.f)(s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord1sv(&self, v: *GLshort) -> c_void { (self.TexCoord1sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord1xOES(&self, s: GLfixed) -> c_void { unsafe { (self.TexCoord1xOES.f)(s) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord1xvOES(&self, coords: *GLfixed) -> c_void { (self.TexCoord1xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2bOES(&self, s: GLbyte, t: GLbyte) -> c_void { unsafe { (self.TexCoord2bOES.f)(s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2bvOES(&self, coords: *GLbyte) -> c_void { (self.TexCoord2bvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2d(&self, s: GLdouble, t: GLdouble) -> c_void { unsafe { (self.TexCoord2d.f)(s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2dv(&self, v: *GLdouble) -> c_void { (self.TexCoord2dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2f(&self, s: GLfloat, t: GLfloat) -> c_void { unsafe { (self.TexCoord2f.f)(s, t) } }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2fColor3fVertex3fSUN(&self, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.TexCoord2fColor3fVertex3fSUN.f)(s, t, r, g, b, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2fColor3fVertex3fvSUN(&self, tc: *GLfloat, c: *GLfloat, v: *GLfloat) -> c_void { (self.TexCoord2fColor3fVertex3fvSUN.f)(tc, c, v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2fColor4fNormal3fVertex3fSUN(&self, s: GLfloat, t: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.TexCoord2fColor4fNormal3fVertex3fSUN.f)(s, t, r, g, b, a, nx, ny, nz, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2fColor4fNormal3fVertex3fvSUN(&self, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (self.TexCoord2fColor4fNormal3fVertex3fvSUN.f)(tc, c, n, v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2fColor4ubVertex3fSUN(&self, s: GLfloat, t: GLfloat, r: GLubyte, g: GLubyte, b: GLubyte, a: GLubyte, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.TexCoord2fColor4ubVertex3fSUN.f)(s, t, r, g, b, a, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2fColor4ubVertex3fvSUN(&self, tc: *GLfloat, c: *GLubyte, v: *GLfloat) -> c_void { (self.TexCoord2fColor4ubVertex3fvSUN.f)(tc, c, v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2fNormal3fVertex3fSUN(&self, s: GLfloat, t: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.TexCoord2fNormal3fVertex3fSUN.f)(s, t, nx, ny, nz, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2fNormal3fVertex3fvSUN(&self, tc: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (self.TexCoord2fNormal3fVertex3fvSUN.f)(tc, n, v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2fVertex3fSUN(&self, s: GLfloat, t: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.TexCoord2fVertex3fSUN.f)(s, t, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2fVertex3fvSUN(&self, tc: *GLfloat, v: *GLfloat) -> c_void { (self.TexCoord2fVertex3fvSUN.f)(tc, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2fv(&self, v: *GLfloat) -> c_void { (self.TexCoord2fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2hNV(&self, s: GLhalfNV, t: GLhalfNV) -> c_void { unsafe { (self.TexCoord2hNV.f)(s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2hvNV(&self, v: *GLhalfNV) -> c_void { (self.TexCoord2hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2i(&self, s: GLint, t: GLint) -> c_void { unsafe { (self.TexCoord2i.f)(s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2iv(&self, v: *GLint) -> c_void { (self.TexCoord2iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2s(&self, s: GLshort, t: GLshort) -> c_void { unsafe { (self.TexCoord2s.f)(s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2sv(&self, v: *GLshort) -> c_void { (self.TexCoord2sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord2xOES(&self, s: GLfixed, t: GLfixed) -> c_void { unsafe { (self.TexCoord2xOES.f)(s, t) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord2xvOES(&self, coords: *GLfixed) -> c_void { (self.TexCoord2xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord3bOES(&self, s: GLbyte, t: GLbyte, r: GLbyte) -> c_void { unsafe { (self.TexCoord3bOES.f)(s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord3bvOES(&self, coords: *GLbyte) -> c_void { (self.TexCoord3bvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord3d(&self, s: GLdouble, t: GLdouble, r: GLdouble) -> c_void { unsafe { (self.TexCoord3d.f)(s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord3dv(&self, v: *GLdouble) -> c_void { (self.TexCoord3dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord3f(&self, s: GLfloat, t: GLfloat, r: GLfloat) -> c_void { unsafe { (self.TexCoord3f.f)(s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord3fv(&self, v: *GLfloat) -> c_void { (self.TexCoord3fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord3hNV(&self, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV) -> c_void { unsafe { (self.TexCoord3hNV.f)(s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord3hvNV(&self, v: *GLhalfNV) -> c_void { (self.TexCoord3hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord3i(&self, s: GLint, t: GLint, r: GLint) -> c_void { unsafe { (self.TexCoord3i.f)(s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord3iv(&self, v: *GLint) -> c_void { (self.TexCoord3iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord3s(&self, s: GLshort, t: GLshort, r: GLshort) -> c_void { unsafe { (self.TexCoord3s.f)(s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord3sv(&self, v: *GLshort) -> c_void { (self.TexCoord3sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord3xOES(&self, s: GLfixed, t: GLfixed, r: GLfixed) -> c_void { unsafe { (self.TexCoord3xOES.f)(s, t, r) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord3xvOES(&self, coords: *GLfixed) -> c_void { (self.TexCoord3xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4bOES(&self, s: GLbyte, t: GLbyte, r: GLbyte, q: GLbyte) -> c_void { unsafe { (self.TexCoord4bOES.f)(s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4bvOES(&self, coords: *GLbyte) -> c_void { (self.TexCoord4bvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4d(&self, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) -> c_void { unsafe { (self.TexCoord4d.f)(s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4dv(&self, v: *GLdouble) -> c_void { (self.TexCoord4dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4f(&self, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) -> c_void { unsafe { (self.TexCoord4f.f)(s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4fColor4fNormal3fVertex4fSUN(&self, s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, r: GLfloat, g: GLfloat, b: GLfloat, a: GLfloat, nx: GLfloat, ny: GLfloat, nz: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.TexCoord4fColor4fNormal3fVertex4fSUN.f)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4fColor4fNormal3fVertex4fvSUN(&self, tc: *GLfloat, c: *GLfloat, n: *GLfloat, v: *GLfloat) -> c_void { (self.TexCoord4fColor4fNormal3fVertex4fvSUN.f)(tc, c, n, v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4fVertex4fSUN(&self, s: GLfloat, t: GLfloat, p: GLfloat, q: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.TexCoord4fVertex4fSUN.f)(s, t, p, q, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4fVertex4fvSUN(&self, tc: *GLfloat, v: *GLfloat) -> c_void { (self.TexCoord4fVertex4fvSUN.f)(tc, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4fv(&self, v: *GLfloat) -> c_void { (self.TexCoord4fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4hNV(&self, s: GLhalfNV, t: GLhalfNV, r: GLhalfNV, q: GLhalfNV) -> c_void { unsafe { (self.TexCoord4hNV.f)(s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4hvNV(&self, v: *GLhalfNV) -> c_void { (self.TexCoord4hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4i(&self, s: GLint, t: GLint, r: GLint, q: GLint) -> c_void { unsafe { (self.TexCoord4i.f)(s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4iv(&self, v: *GLint) -> c_void { (self.TexCoord4iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4s(&self, s: GLshort, t: GLshort, r: GLshort, q: GLshort) -> c_void { unsafe { (self.TexCoord4s.f)(s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4sv(&self, v: *GLshort) -> c_void { (self.TexCoord4sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn TexCoord4xOES(&self, s: GLfixed, t: GLfixed, r: GLfixed, q: GLfixed) -> c_void { unsafe { (self.TexCoord4xOES.f)(s, t, r, q) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoord4xvOES(&self, coords: *GLfixed) -> c_void { (self.TexCoord4xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoordFormatNV(&self, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.TexCoordFormatNV.f)(size, type_, stride) } }
    #[fixed_stack_segment] #[inline] pub fn TexCoordP1ui(&self, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.TexCoordP1ui.f)(type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoordP1uiv(&self, type_: GLenum, coords: *GLuint) -> c_void { (self.TexCoordP1uiv.f)(type_, coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoordP2ui(&self, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.TexCoordP2ui.f)(type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoordP2uiv(&self, type_: GLenum, coords: *GLuint) -> c_void { (self.TexCoordP2uiv.f)(type_, coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoordP3ui(&self, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.TexCoordP3ui.f)(type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoordP3uiv(&self, type_: GLenum, coords: *GLuint) -> c_void { (self.TexCoordP3uiv.f)(type_, coords) }
    #[fixed_stack_segment] #[inline] pub fn TexCoordP4ui(&self, type_: GLenum, coords: GLuint) -> c_void { unsafe { (self.TexCoordP4ui.f)(type_, coords) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoordP4uiv(&self, type_: GLenum, coords: *GLuint) -> c_void { (self.TexCoordP4uiv.f)(type_, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoordPointer(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.TexCoordPointer.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoordPointerEXT(&self, size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { (self.TexCoordPointerEXT.f)(size, type_, stride, count, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoordPointerListIBM(&self, size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { (self.TexCoordPointerListIBM.f)(size, type_, stride, pointer, ptrstride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexCoordPointervINTEL(&self, size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { (self.TexCoordPointervINTEL.f)(size, type_, pointer) }
    #[fixed_stack_segment] #[inline] pub fn TexEnvf(&self, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.TexEnvf.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexEnvfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.TexEnvfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexEnvi(&self, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.TexEnvi.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexEnviv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.TexEnviv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexEnvx(&self, target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.TexEnvx.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn TexEnvxOES(&self, target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.TexEnvxOES.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexEnvxv(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.TexEnvxv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexEnvxvOES(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.TexEnvxvOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexFilterFuncSGIS(&self, target: GLenum, filter: GLenum, n: GLsizei, weights: *GLfloat) -> c_void { (self.TexFilterFuncSGIS.f)(target, filter, n, weights) }
    #[fixed_stack_segment] #[inline] pub fn TexGend(&self, coord: GLenum, pname: GLenum, param: GLdouble) -> c_void { unsafe { (self.TexGend.f)(coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexGendv(&self, coord: GLenum, pname: GLenum, params: *GLdouble) -> c_void { (self.TexGendv.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexGenf(&self, coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.TexGenf.f)(coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn TexGenfOES(&self, coord: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.TexGenfOES.f)(coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexGenfv(&self, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.TexGenfv.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexGenfvOES(&self, coord: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.TexGenfvOES.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexGeni(&self, coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.TexGeni.f)(coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn TexGeniOES(&self, coord: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.TexGeniOES.f)(coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexGeniv(&self, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.TexGeniv.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexGenivOES(&self, coord: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.TexGenivOES.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexGenxOES(&self, coord: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.TexGenxOES.f)(coord, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexGenxvOES(&self, coord: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.TexGenxvOES.f)(coord, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexImage1D(&self, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexImage1D.f)(target, level, internalformat, width, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexImage2D(&self, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexImage2D.f)(target, level, internalformat, width, height, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub fn TexImage2DMultisample(&self, target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (self.TexImage2DMultisample.f)(target, samples, internalformat, width, height, fixedsamplelocations) } }
    #[fixed_stack_segment] #[inline] pub fn TexImage2DMultisampleCoverageNV(&self, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (self.TexImage2DMultisampleCoverageNV.f)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexImage3D(&self, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexImage3D.f)(target, level, internalformat, width, height, depth, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexImage3DEXT(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexImage3DEXT.f)(target, level, internalformat, width, height, depth, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub fn TexImage3DMultisample(&self, target: GLenum, samples: GLsizei, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (self.TexImage3DMultisample.f)(target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
    #[fixed_stack_segment] #[inline] pub fn TexImage3DMultisampleCoverageNV(&self, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (self.TexImage3DMultisampleCoverageNV.f)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexImage3DOES(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexImage3DOES.f)(target, level, internalformat, width, height, depth, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexImage4DSGIS(&self, target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexImage4DSGIS.f)(target, level, internalformat, width, height, depth, size4d, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub fn TexPageCommitmentARB(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void { unsafe { (self.TexPageCommitmentARB.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, resident) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexParameterIiv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.TexParameterIiv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexParameterIivEXT(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.TexParameterIivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexParameterIuiv(&self, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { (self.TexParameterIuiv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexParameterIuivEXT(&self, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { (self.TexParameterIuivEXT.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexParameterf(&self, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.TexParameterf.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexParameterfv(&self, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.TexParameterfv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexParameteri(&self, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.TexParameteri.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexParameteriv(&self, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.TexParameteriv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexParameterx(&self, target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.TexParameterx.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn TexParameterxOES(&self, target: GLenum, pname: GLenum, param: GLfixed) -> c_void { unsafe { (self.TexParameterxOES.f)(target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexParameterxv(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.TexParameterxv.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexParameterxvOES(&self, target: GLenum, pname: GLenum, params: *GLfixed) -> c_void { (self.TexParameterxvOES.f)(target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TexRenderbufferNV(&self, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.TexRenderbufferNV.f)(target, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorage1D(&self, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { (self.TexStorage1D.f)(target, levels, internalformat, width) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorage1DEXT(&self, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { (self.TexStorage1DEXT.f)(target, levels, internalformat, width) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorage2D(&self, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.TexStorage2D.f)(target, levels, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorage2DEXT(&self, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.TexStorage2DEXT.f)(target, levels, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorage2DMultisample(&self, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (self.TexStorage2DMultisample.f)(target, samples, internalformat, width, height, fixedsamplelocations) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorage3D(&self, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (self.TexStorage3D.f)(target, levels, internalformat, width, height, depth) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorage3DEXT(&self, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (self.TexStorage3DEXT.f)(target, levels, internalformat, width, height, depth) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorage3DMultisample(&self, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (self.TexStorage3DMultisample.f)(target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
    #[fixed_stack_segment] #[inline] pub fn TexStorageSparseAMD(&self, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void { unsafe { (self.TexStorageSparseAMD.f)(target, internalFormat, width, height, depth, layers, flags) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexSubImage1D(&self, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexSubImage1D.f)(target, level, xoffset, width, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexSubImage1DEXT(&self, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexSubImage1DEXT.f)(target, level, xoffset, width, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexSubImage2D(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexSubImage2D.f)(target, level, xoffset, yoffset, width, height, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexSubImage2DEXT(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexSubImage2DEXT.f)(target, level, xoffset, yoffset, width, height, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexSubImage3D(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexSubImage3D.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexSubImage3DEXT(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexSubImage3DEXT.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexSubImage3DOES(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexSubImage3DOES.f)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TexSubImage4DSGIS(&self, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, woffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, size4d: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TexSubImage4DSGIS.f)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub fn TextureBarrierNV(&self) -> c_void { unsafe { (self.TextureBarrierNV.f)() } }
    #[fixed_stack_segment] #[inline] pub fn TextureBufferEXT(&self, texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint) -> c_void { unsafe { (self.TextureBufferEXT.f)(texture, target, internalformat, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn TextureBufferRangeEXT(&self, texture: GLuint, target: GLenum, internalformat: GLenum, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> c_void { unsafe { (self.TextureBufferRangeEXT.f)(texture, target, internalformat, buffer, offset, size) } }
    #[fixed_stack_segment] #[inline] pub fn TextureColorMaskSGIS(&self, red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> c_void { unsafe { (self.TextureColorMaskSGIS.f)(red, green, blue, alpha) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureImage1DEXT(&self, texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TextureImage1DEXT.f)(texture, target, level, internalformat, width, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureImage2DEXT(&self, texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TextureImage2DEXT.f)(texture, target, level, internalformat, width, height, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub fn TextureImage2DMultisampleCoverageNV(&self, texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (self.TextureImage2DMultisampleCoverageNV.f)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations) } }
    #[fixed_stack_segment] #[inline] pub fn TextureImage2DMultisampleNV(&self, texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (self.TextureImage2DMultisampleNV.f)(texture, target, samples, internalFormat, width, height, fixedSampleLocations) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureImage3DEXT(&self, texture: GLuint, target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TextureImage3DEXT.f)(texture, target, level, internalformat, width, height, depth, border, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub fn TextureImage3DMultisampleCoverageNV(&self, texture: GLuint, target: GLenum, coverageSamples: GLsizei, colorSamples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (self.TextureImage3DMultisampleCoverageNV.f)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations) } }
    #[fixed_stack_segment] #[inline] pub fn TextureImage3DMultisampleNV(&self, texture: GLuint, target: GLenum, samples: GLsizei, internalFormat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, fixedSampleLocations: GLboolean) -> c_void { unsafe { (self.TextureImage3DMultisampleNV.f)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations) } }
    #[fixed_stack_segment] #[inline] pub fn TextureLightEXT(&self, pname: GLenum) -> c_void { unsafe { (self.TextureLightEXT.f)(pname) } }
    #[fixed_stack_segment] #[inline] pub fn TextureMaterialEXT(&self, face: GLenum, mode: GLenum) -> c_void { unsafe { (self.TextureMaterialEXT.f)(face, mode) } }
    #[fixed_stack_segment] #[inline] pub fn TextureNormalEXT(&self, mode: GLenum) -> c_void { unsafe { (self.TextureNormalEXT.f)(mode) } }
    #[fixed_stack_segment] #[inline] pub fn TexturePageCommitmentEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, resident: GLboolean) -> c_void { unsafe { (self.TexturePageCommitmentEXT.f)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, resident) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureParameterIivEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.TextureParameterIivEXT.f)(texture, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureParameterIuivEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, params: *GLuint) -> c_void { (self.TextureParameterIuivEXT.f)(texture, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TextureParameterfEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.TextureParameterfEXT.f)(texture, target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureParameterfvEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, params: *GLfloat) -> c_void { (self.TextureParameterfvEXT.f)(texture, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn TextureParameteriEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, param: GLint) -> c_void { unsafe { (self.TextureParameteriEXT.f)(texture, target, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureParameterivEXT(&self, texture: GLuint, target: GLenum, pname: GLenum, params: *GLint) -> c_void { (self.TextureParameterivEXT.f)(texture, target, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureRangeAPPLE(&self, target: GLenum, length: GLsizei, pointer: *GLvoid) -> c_void { (self.TextureRangeAPPLE.f)(target, length, pointer) }
    #[fixed_stack_segment] #[inline] pub fn TextureRenderbufferEXT(&self, texture: GLuint, target: GLenum, renderbuffer: GLuint) -> c_void { unsafe { (self.TextureRenderbufferEXT.f)(texture, target, renderbuffer) } }
    #[fixed_stack_segment] #[inline] pub fn TextureStorage1DEXT(&self, texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei) -> c_void { unsafe { (self.TextureStorage1DEXT.f)(texture, target, levels, internalformat, width) } }
    #[fixed_stack_segment] #[inline] pub fn TextureStorage2DEXT(&self, texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.TextureStorage2DEXT.f)(texture, target, levels, internalformat, width, height) } }
    #[fixed_stack_segment] #[inline] pub fn TextureStorage2DMultisampleEXT(&self, texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (self.TextureStorage2DMultisampleEXT.f)(texture, target, samples, internalformat, width, height, fixedsamplelocations) } }
    #[fixed_stack_segment] #[inline] pub fn TextureStorage3DEXT(&self, texture: GLuint, target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> c_void { unsafe { (self.TextureStorage3DEXT.f)(texture, target, levels, internalformat, width, height, depth) } }
    #[fixed_stack_segment] #[inline] pub fn TextureStorage3DMultisampleEXT(&self, texture: GLuint, target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, fixedsamplelocations: GLboolean) -> c_void { unsafe { (self.TextureStorage3DMultisampleEXT.f)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations) } }
    #[fixed_stack_segment] #[inline] pub fn TextureStorageSparseAMD(&self, texture: GLuint, target: GLenum, internalFormat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, layers: GLsizei, flags: GLbitfield) -> c_void { unsafe { (self.TextureStorageSparseAMD.f)(texture, target, internalFormat, width, height, depth, layers, flags) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureSubImage1DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TextureSubImage1DEXT.f)(texture, target, level, xoffset, width, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureSubImage2DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TextureSubImage2DEXT.f)(texture, target, level, xoffset, yoffset, width, height, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TextureSubImage3DEXT(&self, texture: GLuint, target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type_: GLenum, pixels: *GLvoid) -> c_void { (self.TextureSubImage3DEXT.f)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type_, pixels) }
    #[fixed_stack_segment] #[inline] pub fn TextureView(&self, texture: GLuint, target: GLenum, origtexture: GLuint, internalformat: GLenum, minlevel: GLuint, numlevels: GLuint, minlayer: GLuint, numlayers: GLuint) -> c_void { unsafe { (self.TextureView.f)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers) } }
    #[fixed_stack_segment] #[inline] pub fn TrackMatrixNV(&self, target: GLenum, address: GLuint, matrix: GLenum, transform: GLenum) -> c_void { unsafe { (self.TrackMatrixNV.f)(target, address, matrix, transform) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn TransformFeedbackAttribsNV(&self, count: GLuint, attribs: *GLint, bufferMode: GLenum) -> c_void { (self.TransformFeedbackAttribsNV.f)(count, attribs, bufferMode) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TransformFeedbackStreamAttribsNV(&self, count: GLsizei, attribs: *GLint, nbuffers: GLsizei, bufstreams: *GLint, bufferMode: GLenum) -> c_void { (self.TransformFeedbackStreamAttribsNV.f)(count, attribs, nbuffers, bufstreams, bufferMode) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TransformFeedbackVaryings(&self, program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void { (self.TransformFeedbackVaryings.f)(program, count, varyings, bufferMode) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TransformFeedbackVaryingsEXT(&self, program: GLuint, count: GLsizei, varyings: **GLchar, bufferMode: GLenum) -> c_void { (self.TransformFeedbackVaryingsEXT.f)(program, count, varyings, bufferMode) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TransformFeedbackVaryingsNV(&self, program: GLuint, count: GLsizei, locations: *GLint, bufferMode: GLenum) -> c_void { (self.TransformFeedbackVaryingsNV.f)(program, count, locations, bufferMode) }
    #[fixed_stack_segment] #[inline] pub unsafe fn TransformPathNV(&self, resultPath: GLuint, srcPath: GLuint, transformType: GLenum, transformValues: *GLfloat) -> c_void { (self.TransformPathNV.f)(resultPath, srcPath, transformType, transformValues) }
    #[fixed_stack_segment] #[inline] pub fn Translated(&self, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.Translated.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn Translatef(&self, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.Translatef.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn Translatex(&self, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (self.Translatex.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn TranslatexOES(&self, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (self.TranslatexOES.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform1d(&self, location: GLint, x: GLdouble) -> c_void { unsafe { (self.Uniform1d.f)(location, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1dv(&self, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.Uniform1dv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform1f(&self, location: GLint, v0: GLfloat) -> c_void { unsafe { (self.Uniform1f.f)(location, v0) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform1fARB(&self, location: GLint, v0: GLfloat) -> c_void { unsafe { (self.Uniform1fARB.f)(location, v0) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1fv(&self, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.Uniform1fv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1fvARB(&self, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.Uniform1fvARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform1i(&self, location: GLint, v0: GLint) -> c_void { unsafe { (self.Uniform1i.f)(location, v0) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform1i64NV(&self, location: GLint, x: GLint64EXT) -> c_void { unsafe { (self.Uniform1i64NV.f)(location, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1i64vNV(&self, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { (self.Uniform1i64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform1iARB(&self, location: GLint, v0: GLint) -> c_void { unsafe { (self.Uniform1iARB.f)(location, v0) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1iv(&self, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.Uniform1iv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1ivARB(&self, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.Uniform1ivARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform1ui(&self, location: GLint, v0: GLuint) -> c_void { unsafe { (self.Uniform1ui.f)(location, v0) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform1ui64NV(&self, location: GLint, x: GLuint64EXT) -> c_void { unsafe { (self.Uniform1ui64NV.f)(location, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1ui64vNV(&self, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.Uniform1ui64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform1uiEXT(&self, location: GLint, v0: GLuint) -> c_void { unsafe { (self.Uniform1uiEXT.f)(location, v0) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1uiv(&self, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.Uniform1uiv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform1uivEXT(&self, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.Uniform1uivEXT.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform2d(&self, location: GLint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.Uniform2d.f)(location, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2dv(&self, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.Uniform2dv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform2f(&self, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { (self.Uniform2f.f)(location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform2fARB(&self, location: GLint, v0: GLfloat, v1: GLfloat) -> c_void { unsafe { (self.Uniform2fARB.f)(location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2fv(&self, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.Uniform2fv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2fvARB(&self, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.Uniform2fvARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform2i(&self, location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { (self.Uniform2i.f)(location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform2i64NV(&self, location: GLint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { (self.Uniform2i64NV.f)(location, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2i64vNV(&self, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { (self.Uniform2i64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform2iARB(&self, location: GLint, v0: GLint, v1: GLint) -> c_void { unsafe { (self.Uniform2iARB.f)(location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2iv(&self, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.Uniform2iv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2ivARB(&self, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.Uniform2ivARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform2ui(&self, location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { (self.Uniform2ui.f)(location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform2ui64NV(&self, location: GLint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { (self.Uniform2ui64NV.f)(location, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2ui64vNV(&self, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.Uniform2ui64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform2uiEXT(&self, location: GLint, v0: GLuint, v1: GLuint) -> c_void { unsafe { (self.Uniform2uiEXT.f)(location, v0, v1) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2uiv(&self, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.Uniform2uiv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform2uivEXT(&self, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.Uniform2uivEXT.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform3d(&self, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.Uniform3d.f)(location, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3dv(&self, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.Uniform3dv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform3f(&self, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (self.Uniform3f.f)(location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform3fARB(&self, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> c_void { unsafe { (self.Uniform3fARB.f)(location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3fv(&self, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.Uniform3fv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3fvARB(&self, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.Uniform3fvARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform3i(&self, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { (self.Uniform3i.f)(location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform3i64NV(&self, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { (self.Uniform3i64NV.f)(location, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3i64vNV(&self, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { (self.Uniform3i64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform3iARB(&self, location: GLint, v0: GLint, v1: GLint, v2: GLint) -> c_void { unsafe { (self.Uniform3iARB.f)(location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3iv(&self, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.Uniform3iv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3ivARB(&self, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.Uniform3ivARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform3ui(&self, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { (self.Uniform3ui.f)(location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform3ui64NV(&self, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { (self.Uniform3ui64NV.f)(location, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3ui64vNV(&self, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.Uniform3ui64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform3uiEXT(&self, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> c_void { unsafe { (self.Uniform3uiEXT.f)(location, v0, v1, v2) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3uiv(&self, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.Uniform3uiv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform3uivEXT(&self, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.Uniform3uivEXT.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform4d(&self, location: GLint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.Uniform4d.f)(location, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4dv(&self, location: GLint, count: GLsizei, value: *GLdouble) -> c_void { (self.Uniform4dv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform4f(&self, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { (self.Uniform4f.f)(location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform4fARB(&self, location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> c_void { unsafe { (self.Uniform4fARB.f)(location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4fv(&self, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.Uniform4fv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4fvARB(&self, location: GLint, count: GLsizei, value: *GLfloat) -> c_void { (self.Uniform4fvARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform4i(&self, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { (self.Uniform4i.f)(location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform4i64NV(&self, location: GLint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { (self.Uniform4i64NV.f)(location, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4i64vNV(&self, location: GLint, count: GLsizei, value: *GLint64EXT) -> c_void { (self.Uniform4i64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform4iARB(&self, location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> c_void { unsafe { (self.Uniform4iARB.f)(location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4iv(&self, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.Uniform4iv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4ivARB(&self, location: GLint, count: GLsizei, value: *GLint) -> c_void { (self.Uniform4ivARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform4ui(&self, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { (self.Uniform4ui.f)(location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub fn Uniform4ui64NV(&self, location: GLint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { (self.Uniform4ui64NV.f)(location, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4ui64vNV(&self, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.Uniform4ui64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn Uniform4uiEXT(&self, location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> c_void { unsafe { (self.Uniform4uiEXT.f)(location, v0, v1, v2, v3) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4uiv(&self, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.Uniform4uiv.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniform4uivEXT(&self, location: GLint, count: GLsizei, value: *GLuint) -> c_void { (self.Uniform4uivEXT.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn UniformBlockBinding(&self, program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> c_void { unsafe { (self.UniformBlockBinding.f)(program, uniformBlockIndex, uniformBlockBinding) } }
    #[fixed_stack_segment] #[inline] pub fn UniformBufferEXT(&self, program: GLuint, location: GLint, buffer: GLuint) -> c_void { unsafe { (self.UniformBufferEXT.f)(program, location, buffer) } }
    #[fixed_stack_segment] #[inline] pub fn UniformHandleui64ARB(&self, location: GLint, value: GLuint64) -> c_void { unsafe { (self.UniformHandleui64ARB.f)(location, value) } }
    #[fixed_stack_segment] #[inline] pub fn UniformHandleui64NV(&self, location: GLint, value: GLuint64) -> c_void { unsafe { (self.UniformHandleui64NV.f)(location, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformHandleui64vARB(&self, location: GLint, count: GLsizei, value: *GLuint64) -> c_void { (self.UniformHandleui64vARB.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformHandleui64vNV(&self, location: GLint, count: GLsizei, value: *GLuint64) -> c_void { (self.UniformHandleui64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix2dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix2dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix2fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix2fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix2fvARB(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix2fvARB.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix2x3dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix2x3dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix2x3fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix2x3fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix2x4dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix2x4dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix2x4fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix2x4fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix3dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix3dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix3fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix3fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix3fvARB(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix3fvARB.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix3x2dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix3x2dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix3x2fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix3x2fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix3x4dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix3x4dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix3x4fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix3x4fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix4dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix4dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix4fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix4fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix4fvARB(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix4fvARB.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix4x2dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix4x2dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix4x2fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix4x2fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix4x3dv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLdouble) -> c_void { (self.UniformMatrix4x3dv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformMatrix4x3fv(&self, location: GLint, count: GLsizei, transpose: GLboolean, value: *GLfloat) -> c_void { (self.UniformMatrix4x3fv.f)(location, count, transpose, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn UniformSubroutinesuiv(&self, shadertype: GLenum, count: GLsizei, indices: *GLuint) -> c_void { (self.UniformSubroutinesuiv.f)(shadertype, count, indices) }
    #[fixed_stack_segment] #[inline] pub fn Uniformui64NV(&self, location: GLint, value: GLuint64EXT) -> c_void { unsafe { (self.Uniformui64NV.f)(location, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Uniformui64vNV(&self, location: GLint, count: GLsizei, value: *GLuint64EXT) -> c_void { (self.Uniformui64vNV.f)(location, count, value) }
    #[fixed_stack_segment] #[inline] pub fn UnlockArraysEXT(&self) -> c_void { unsafe { (self.UnlockArraysEXT.f)() } }
    #[fixed_stack_segment] #[inline] pub fn UnmapBuffer(&self, target: GLenum) -> GLboolean { unsafe { (self.UnmapBuffer.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn UnmapBufferARB(&self, target: GLenum) -> GLboolean { unsafe { (self.UnmapBufferARB.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn UnmapBufferOES(&self, target: GLenum) -> GLboolean { unsafe { (self.UnmapBufferOES.f)(target) } }
    #[fixed_stack_segment] #[inline] pub fn UnmapNamedBufferEXT(&self, buffer: GLuint) -> GLboolean { unsafe { (self.UnmapNamedBufferEXT.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub fn UnmapObjectBufferATI(&self, buffer: GLuint) -> c_void { unsafe { (self.UnmapObjectBufferATI.f)(buffer) } }
    #[fixed_stack_segment] #[inline] pub fn UnmapTexture2DINTEL(&self, texture: GLuint, level: GLint) -> c_void { unsafe { (self.UnmapTexture2DINTEL.f)(texture, level) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn UpdateObjectBufferATI(&self, buffer: GLuint, offset: GLuint, size: GLsizei, pointer: *GLvoid, preserve: GLenum) -> c_void { (self.UpdateObjectBufferATI.f)(buffer, offset, size, pointer, preserve) }
    #[fixed_stack_segment] #[inline] pub fn UseProgram(&self, program: GLuint) -> c_void { unsafe { (self.UseProgram.f)(program) } }
    #[fixed_stack_segment] #[inline] pub fn UseProgramObjectARB(&self, programObj: GLhandleARB) -> c_void { unsafe { (self.UseProgramObjectARB.f)(programObj) } }
    #[fixed_stack_segment] #[inline] pub fn UseProgramStages(&self, pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void { unsafe { (self.UseProgramStages.f)(pipeline, stages, program) } }
    #[fixed_stack_segment] #[inline] pub fn UseProgramStagesEXT(&self, pipeline: GLuint, stages: GLbitfield, program: GLuint) -> c_void { unsafe { (self.UseProgramStagesEXT.f)(pipeline, stages, program) } }
    #[fixed_stack_segment] #[inline] pub fn UseShaderProgramEXT(&self, type_: GLenum, program: GLuint) -> c_void { unsafe { (self.UseShaderProgramEXT.f)(type_, program) } }
    #[fixed_stack_segment] #[inline] pub fn VDPAUFiniNV(&self) -> c_void { unsafe { (self.VDPAUFiniNV.f)() } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VDPAUGetSurfaceivNV(&self, surface: GLvdpauSurfaceNV, pname: GLenum, bufSize: GLsizei, length: *GLsizei, values: *GLint) -> c_void { (self.VDPAUGetSurfaceivNV.f)(surface, pname, bufSize, length, values) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VDPAUInitNV(&self, vdpDevice: *GLvoid, getProcAddress: *GLvoid) -> c_void { (self.VDPAUInitNV.f)(vdpDevice, getProcAddress) }
    #[fixed_stack_segment] #[inline] pub fn VDPAUIsSurfaceNV(&self, surface: GLvdpauSurfaceNV) -> c_void { unsafe { (self.VDPAUIsSurfaceNV.f)(surface) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VDPAUMapSurfacesNV(&self, numSurfaces: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void { (self.VDPAUMapSurfacesNV.f)(numSurfaces, surfaces) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VDPAURegisterOutputSurfaceNV(&self, vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV { (self.VDPAURegisterOutputSurfaceNV.f)(vdpSurface, target, numTextureNames, textureNames) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VDPAURegisterVideoSurfaceNV(&self, vdpSurface: *GLvoid, target: GLenum, numTextureNames: GLsizei, textureNames: *GLuint) -> GLvdpauSurfaceNV { (self.VDPAURegisterVideoSurfaceNV.f)(vdpSurface, target, numTextureNames, textureNames) }
    #[fixed_stack_segment] #[inline] pub fn VDPAUSurfaceAccessNV(&self, surface: GLvdpauSurfaceNV, access: GLenum) -> c_void { unsafe { (self.VDPAUSurfaceAccessNV.f)(surface, access) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VDPAUUnmapSurfacesNV(&self, numSurface: GLsizei, surfaces: *GLvdpauSurfaceNV) -> c_void { (self.VDPAUUnmapSurfacesNV.f)(numSurface, surfaces) }
    #[fixed_stack_segment] #[inline] pub fn VDPAUUnregisterSurfaceNV(&self, surface: GLvdpauSurfaceNV) -> c_void { unsafe { (self.VDPAUUnregisterSurfaceNV.f)(surface) } }
    #[fixed_stack_segment] #[inline] pub fn ValidateProgram(&self, program: GLuint) -> c_void { unsafe { (self.ValidateProgram.f)(program) } }
    #[fixed_stack_segment] #[inline] pub fn ValidateProgramARB(&self, programObj: GLhandleARB) -> c_void { unsafe { (self.ValidateProgramARB.f)(programObj) } }
    #[fixed_stack_segment] #[inline] pub fn ValidateProgramPipeline(&self, pipeline: GLuint) -> c_void { unsafe { (self.ValidateProgramPipeline.f)(pipeline) } }
    #[fixed_stack_segment] #[inline] pub fn ValidateProgramPipelineEXT(&self, pipeline: GLuint) -> c_void { unsafe { (self.ValidateProgramPipelineEXT.f)(pipeline) } }
    #[fixed_stack_segment] #[inline] pub fn VariantArrayObjectATI(&self, id: GLuint, type_: GLenum, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { (self.VariantArrayObjectATI.f)(id, type_, stride, buffer, offset) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantPointerEXT(&self, id: GLuint, type_: GLenum, stride: GLuint, addr: *GLvoid) -> c_void { (self.VariantPointerEXT.f)(id, type_, stride, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantbvEXT(&self, id: GLuint, addr: *GLbyte) -> c_void { (self.VariantbvEXT.f)(id, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantdvEXT(&self, id: GLuint, addr: *GLdouble) -> c_void { (self.VariantdvEXT.f)(id, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantfvEXT(&self, id: GLuint, addr: *GLfloat) -> c_void { (self.VariantfvEXT.f)(id, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantivEXT(&self, id: GLuint, addr: *GLint) -> c_void { (self.VariantivEXT.f)(id, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantsvEXT(&self, id: GLuint, addr: *GLshort) -> c_void { (self.VariantsvEXT.f)(id, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantubvEXT(&self, id: GLuint, addr: *GLubyte) -> c_void { (self.VariantubvEXT.f)(id, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantuivEXT(&self, id: GLuint, addr: *GLuint) -> c_void { (self.VariantuivEXT.f)(id, addr) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VariantusvEXT(&self, id: GLuint, addr: *GLushort) -> c_void { (self.VariantusvEXT.f)(id, addr) }
    #[fixed_stack_segment] #[inline] pub fn Vertex2bOES(&self, x: GLbyte) -> c_void { unsafe { (self.Vertex2bOES.f)(x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex2bvOES(&self, coords: *GLbyte) -> c_void { (self.Vertex2bvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn Vertex2d(&self, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.Vertex2d.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex2dv(&self, v: *GLdouble) -> c_void { (self.Vertex2dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex2f(&self, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.Vertex2f.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex2fv(&self, v: *GLfloat) -> c_void { (self.Vertex2fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex2hNV(&self, x: GLhalfNV, y: GLhalfNV) -> c_void { unsafe { (self.Vertex2hNV.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex2hvNV(&self, v: *GLhalfNV) -> c_void { (self.Vertex2hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex2i(&self, x: GLint, y: GLint) -> c_void { unsafe { (self.Vertex2i.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex2iv(&self, v: *GLint) -> c_void { (self.Vertex2iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex2s(&self, x: GLshort, y: GLshort) -> c_void { unsafe { (self.Vertex2s.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex2sv(&self, v: *GLshort) -> c_void { (self.Vertex2sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex2xOES(&self, x: GLfixed) -> c_void { unsafe { (self.Vertex2xOES.f)(x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex2xvOES(&self, coords: *GLfixed) -> c_void { (self.Vertex2xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn Vertex3bOES(&self, x: GLbyte, y: GLbyte) -> c_void { unsafe { (self.Vertex3bOES.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex3bvOES(&self, coords: *GLbyte) -> c_void { (self.Vertex3bvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn Vertex3d(&self, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.Vertex3d.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex3dv(&self, v: *GLdouble) -> c_void { (self.Vertex3dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex3f(&self, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.Vertex3f.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex3fv(&self, v: *GLfloat) -> c_void { (self.Vertex3fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex3hNV(&self, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void { unsafe { (self.Vertex3hNV.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex3hvNV(&self, v: *GLhalfNV) -> c_void { (self.Vertex3hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex3i(&self, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (self.Vertex3i.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex3iv(&self, v: *GLint) -> c_void { (self.Vertex3iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex3s(&self, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.Vertex3s.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex3sv(&self, v: *GLshort) -> c_void { (self.Vertex3sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex3xOES(&self, x: GLfixed, y: GLfixed) -> c_void { unsafe { (self.Vertex3xOES.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex3xvOES(&self, coords: *GLfixed) -> c_void { (self.Vertex3xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn Vertex4bOES(&self, x: GLbyte, y: GLbyte, z: GLbyte) -> c_void { unsafe { (self.Vertex4bOES.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex4bvOES(&self, coords: *GLbyte) -> c_void { (self.Vertex4bvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn Vertex4d(&self, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.Vertex4d.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex4dv(&self, v: *GLdouble) -> c_void { (self.Vertex4dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex4f(&self, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.Vertex4f.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex4fv(&self, v: *GLfloat) -> c_void { (self.Vertex4fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex4hNV(&self, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void { unsafe { (self.Vertex4hNV.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex4hvNV(&self, v: *GLhalfNV) -> c_void { (self.Vertex4hvNV.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex4i(&self, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.Vertex4i.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex4iv(&self, v: *GLint) -> c_void { (self.Vertex4iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex4s(&self, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (self.Vertex4s.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex4sv(&self, v: *GLshort) -> c_void { (self.Vertex4sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn Vertex4xOES(&self, x: GLfixed, y: GLfixed, z: GLfixed) -> c_void { unsafe { (self.Vertex4xOES.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn Vertex4xvOES(&self, coords: *GLfixed) -> c_void { (self.Vertex4xvOES.f)(coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayBindVertexBufferEXT(&self, vaobj: GLuint, bindingindex: GLuint, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> c_void { unsafe { (self.VertexArrayBindVertexBufferEXT.f)(vaobj, bindingindex, buffer, offset, stride) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayColorOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayColorOffsetEXT.f)(vaobj, buffer, size, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayEdgeFlagOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayEdgeFlagOffsetEXT.f)(vaobj, buffer, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayFogCoordOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayFogCoordOffsetEXT.f)(vaobj, buffer, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayIndexOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayIndexOffsetEXT.f)(vaobj, buffer, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayMultiTexCoordOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, texunit: GLenum, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayMultiTexCoordOffsetEXT.f)(vaobj, buffer, texunit, size, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayNormalOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayNormalOffsetEXT.f)(vaobj, buffer, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayParameteriAPPLE(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.VertexArrayParameteriAPPLE.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexArrayRangeAPPLE(&self, length: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexArrayRangeAPPLE.f)(length, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexArrayRangeNV(&self, length: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexArrayRangeNV.f)(length, pointer) }
    #[fixed_stack_segment] #[inline] pub fn VertexArraySecondaryColorOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArraySecondaryColorOffsetEXT.f)(vaobj, buffer, size, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayTexCoordOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayTexCoordOffsetEXT.f)(vaobj, buffer, size, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexAttribBindingEXT(&self, vaobj: GLuint, attribindex: GLuint, bindingindex: GLuint) -> c_void { unsafe { (self.VertexArrayVertexAttribBindingEXT.f)(vaobj, attribindex, bindingindex) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexAttribFormatEXT(&self, vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void { unsafe { (self.VertexArrayVertexAttribFormatEXT.f)(vaobj, attribindex, size, type_, normalized, relativeoffset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexAttribIFormatEXT(&self, vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { (self.VertexArrayVertexAttribIFormatEXT.f)(vaobj, attribindex, size, type_, relativeoffset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexAttribIOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayVertexAttribIOffsetEXT.f)(vaobj, buffer, index, size, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexAttribLFormatEXT(&self, vaobj: GLuint, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { (self.VertexArrayVertexAttribLFormatEXT.f)(vaobj, attribindex, size, type_, relativeoffset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexAttribLOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayVertexAttribLOffsetEXT.f)(vaobj, buffer, index, size, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexAttribOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayVertexAttribOffsetEXT.f)(vaobj, buffer, index, size, type_, normalized, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexBindingDivisorEXT(&self, vaobj: GLuint, bindingindex: GLuint, divisor: GLuint) -> c_void { unsafe { (self.VertexArrayVertexBindingDivisorEXT.f)(vaobj, bindingindex, divisor) } }
    #[fixed_stack_segment] #[inline] pub fn VertexArrayVertexOffsetEXT(&self, vaobj: GLuint, buffer: GLuint, size: GLint, type_: GLenum, stride: GLsizei, offset: GLintptr) -> c_void { unsafe { (self.VertexArrayVertexOffsetEXT.f)(vaobj, buffer, size, type_, stride, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1d(&self, index: GLuint, x: GLdouble) -> c_void { unsafe { (self.VertexAttrib1d.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1dARB(&self, index: GLuint, x: GLdouble) -> c_void { unsafe { (self.VertexAttrib1dARB.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1dNV(&self, index: GLuint, x: GLdouble) -> c_void { unsafe { (self.VertexAttrib1dNV.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1dv(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib1dv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1dvARB(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib1dvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1dvNV(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib1dvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1f(&self, index: GLuint, x: GLfloat) -> c_void { unsafe { (self.VertexAttrib1f.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1fARB(&self, index: GLuint, x: GLfloat) -> c_void { unsafe { (self.VertexAttrib1fARB.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1fNV(&self, index: GLuint, x: GLfloat) -> c_void { unsafe { (self.VertexAttrib1fNV.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1fv(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib1fv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1fvARB(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib1fvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1fvNV(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib1fvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1hNV(&self, index: GLuint, x: GLhalfNV) -> c_void { unsafe { (self.VertexAttrib1hNV.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1hvNV(&self, index: GLuint, v: *GLhalfNV) -> c_void { (self.VertexAttrib1hvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1s(&self, index: GLuint, x: GLshort) -> c_void { unsafe { (self.VertexAttrib1s.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1sARB(&self, index: GLuint, x: GLshort) -> c_void { unsafe { (self.VertexAttrib1sARB.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib1sNV(&self, index: GLuint, x: GLshort) -> c_void { unsafe { (self.VertexAttrib1sNV.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1sv(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib1sv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1svARB(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib1svARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib1svNV(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib1svNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2d(&self, index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.VertexAttrib2d.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2dARB(&self, index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.VertexAttrib2dARB.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2dNV(&self, index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.VertexAttrib2dNV.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2dv(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib2dv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2dvARB(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib2dvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2dvNV(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib2dvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2f(&self, index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.VertexAttrib2f.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2fARB(&self, index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.VertexAttrib2fARB.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2fNV(&self, index: GLuint, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.VertexAttrib2fNV.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2fv(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib2fv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2fvARB(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib2fvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2fvNV(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib2fvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2hNV(&self, index: GLuint, x: GLhalfNV, y: GLhalfNV) -> c_void { unsafe { (self.VertexAttrib2hNV.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2hvNV(&self, index: GLuint, v: *GLhalfNV) -> c_void { (self.VertexAttrib2hvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2s(&self, index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { (self.VertexAttrib2s.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2sARB(&self, index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { (self.VertexAttrib2sARB.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib2sNV(&self, index: GLuint, x: GLshort, y: GLshort) -> c_void { unsafe { (self.VertexAttrib2sNV.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2sv(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib2sv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2svARB(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib2svARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib2svNV(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib2svNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3d(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.VertexAttrib3d.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3dARB(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.VertexAttrib3dARB.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3dNV(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.VertexAttrib3dNV.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3dv(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib3dv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3dvARB(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib3dvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3dvNV(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib3dvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3f(&self, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.VertexAttrib3f.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3fARB(&self, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.VertexAttrib3fARB.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3fNV(&self, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.VertexAttrib3fNV.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3fv(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib3fv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3fvARB(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib3fvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3fvNV(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib3fvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3hNV(&self, index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV) -> c_void { unsafe { (self.VertexAttrib3hNV.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3hvNV(&self, index: GLuint, v: *GLhalfNV) -> c_void { (self.VertexAttrib3hvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3s(&self, index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.VertexAttrib3s.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3sARB(&self, index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.VertexAttrib3sARB.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib3sNV(&self, index: GLuint, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.VertexAttrib3sNV.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3sv(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib3sv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3svARB(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib3svARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib3svNV(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib3svNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4Nbv(&self, index: GLuint, v: *GLbyte) -> c_void { (self.VertexAttrib4Nbv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4NbvARB(&self, index: GLuint, v: *GLbyte) -> c_void { (self.VertexAttrib4NbvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4Niv(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttrib4Niv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4NivARB(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttrib4NivARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4Nsv(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib4Nsv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4NsvARB(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib4NsvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4Nub(&self, index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { (self.VertexAttrib4Nub.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4NubARB(&self, index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { (self.VertexAttrib4NubARB.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4Nubv(&self, index: GLuint, v: *GLubyte) -> c_void { (self.VertexAttrib4Nubv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4NubvARB(&self, index: GLuint, v: *GLubyte) -> c_void { (self.VertexAttrib4NubvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4Nuiv(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttrib4Nuiv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4NuivARB(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttrib4NuivARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4Nusv(&self, index: GLuint, v: *GLushort) -> c_void { (self.VertexAttrib4Nusv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4NusvARB(&self, index: GLuint, v: *GLushort) -> c_void { (self.VertexAttrib4NusvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4bv(&self, index: GLuint, v: *GLbyte) -> c_void { (self.VertexAttrib4bv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4bvARB(&self, index: GLuint, v: *GLbyte) -> c_void { (self.VertexAttrib4bvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4d(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.VertexAttrib4d.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4dARB(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.VertexAttrib4dARB.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4dNV(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.VertexAttrib4dNV.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4dv(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib4dv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4dvARB(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib4dvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4dvNV(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttrib4dvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4f(&self, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.VertexAttrib4f.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4fARB(&self, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.VertexAttrib4fARB.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4fNV(&self, index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.VertexAttrib4fNV.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4fv(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib4fv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4fvARB(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib4fvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4fvNV(&self, index: GLuint, v: *GLfloat) -> c_void { (self.VertexAttrib4fvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4hNV(&self, index: GLuint, x: GLhalfNV, y: GLhalfNV, z: GLhalfNV, w: GLhalfNV) -> c_void { unsafe { (self.VertexAttrib4hNV.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4hvNV(&self, index: GLuint, v: *GLhalfNV) -> c_void { (self.VertexAttrib4hvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4iv(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttrib4iv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4ivARB(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttrib4ivARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4s(&self, index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (self.VertexAttrib4s.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4sARB(&self, index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (self.VertexAttrib4sARB.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4sNV(&self, index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (self.VertexAttrib4sNV.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4sv(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib4sv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4svARB(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib4svARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4svNV(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttrib4svNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttrib4ubNV(&self, index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) -> c_void { unsafe { (self.VertexAttrib4ubNV.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4ubv(&self, index: GLuint, v: *GLubyte) -> c_void { (self.VertexAttrib4ubv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4ubvARB(&self, index: GLuint, v: *GLubyte) -> c_void { (self.VertexAttrib4ubvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4ubvNV(&self, index: GLuint, v: *GLubyte) -> c_void { (self.VertexAttrib4ubvNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4uiv(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttrib4uiv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4uivARB(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttrib4uivARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4usv(&self, index: GLuint, v: *GLushort) -> c_void { (self.VertexAttrib4usv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttrib4usvARB(&self, index: GLuint, v: *GLushort) -> c_void { (self.VertexAttrib4usvARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribArrayObjectATI(&self, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, buffer: GLuint, offset: GLuint) -> c_void { unsafe { (self.VertexAttribArrayObjectATI.f)(index, size, type_, normalized, stride, buffer, offset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribBinding(&self, attribindex: GLuint, bindingindex: GLuint) -> c_void { unsafe { (self.VertexAttribBinding.f)(attribindex, bindingindex) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribDivisor(&self, index: GLuint, divisor: GLuint) -> c_void { unsafe { (self.VertexAttribDivisor.f)(index, divisor) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribDivisorANGLE(&self, index: GLuint, divisor: GLuint) -> c_void { unsafe { (self.VertexAttribDivisorANGLE.f)(index, divisor) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribDivisorARB(&self, index: GLuint, divisor: GLuint) -> c_void { unsafe { (self.VertexAttribDivisorARB.f)(index, divisor) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribDivisorNV(&self, index: GLuint, divisor: GLuint) -> c_void { unsafe { (self.VertexAttribDivisorNV.f)(index, divisor) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribFormat(&self, attribindex: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> c_void { unsafe { (self.VertexAttribFormat.f)(attribindex, size, type_, normalized, relativeoffset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribFormatNV(&self, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei) -> c_void { unsafe { (self.VertexAttribFormatNV.f)(index, size, type_, normalized, stride) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI1i(&self, index: GLuint, x: GLint) -> c_void { unsafe { (self.VertexAttribI1i.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI1iEXT(&self, index: GLuint, x: GLint) -> c_void { unsafe { (self.VertexAttribI1iEXT.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI1iv(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttribI1iv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI1ivEXT(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttribI1ivEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI1ui(&self, index: GLuint, x: GLuint) -> c_void { unsafe { (self.VertexAttribI1ui.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI1uiEXT(&self, index: GLuint, x: GLuint) -> c_void { unsafe { (self.VertexAttribI1uiEXT.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI1uiv(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttribI1uiv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI1uivEXT(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttribI1uivEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI2i(&self, index: GLuint, x: GLint, y: GLint) -> c_void { unsafe { (self.VertexAttribI2i.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI2iEXT(&self, index: GLuint, x: GLint, y: GLint) -> c_void { unsafe { (self.VertexAttribI2iEXT.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI2iv(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttribI2iv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI2ivEXT(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttribI2ivEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI2ui(&self, index: GLuint, x: GLuint, y: GLuint) -> c_void { unsafe { (self.VertexAttribI2ui.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI2uiEXT(&self, index: GLuint, x: GLuint, y: GLuint) -> c_void { unsafe { (self.VertexAttribI2uiEXT.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI2uiv(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttribI2uiv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI2uivEXT(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttribI2uivEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI3i(&self, index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (self.VertexAttribI3i.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI3iEXT(&self, index: GLuint, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (self.VertexAttribI3iEXT.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI3iv(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttribI3iv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI3ivEXT(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttribI3ivEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI3ui(&self, index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void { unsafe { (self.VertexAttribI3ui.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI3uiEXT(&self, index: GLuint, x: GLuint, y: GLuint, z: GLuint) -> c_void { unsafe { (self.VertexAttribI3uiEXT.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI3uiv(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttribI3uiv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI3uivEXT(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttribI3uivEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4bv(&self, index: GLuint, v: *GLbyte) -> c_void { (self.VertexAttribI4bv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4bvEXT(&self, index: GLuint, v: *GLbyte) -> c_void { (self.VertexAttribI4bvEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI4i(&self, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.VertexAttribI4i.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI4iEXT(&self, index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.VertexAttribI4iEXT.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4iv(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttribI4iv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4ivEXT(&self, index: GLuint, v: *GLint) -> c_void { (self.VertexAttribI4ivEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4sv(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttribI4sv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4svEXT(&self, index: GLuint, v: *GLshort) -> c_void { (self.VertexAttribI4svEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4ubv(&self, index: GLuint, v: *GLubyte) -> c_void { (self.VertexAttribI4ubv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4ubvEXT(&self, index: GLuint, v: *GLubyte) -> c_void { (self.VertexAttribI4ubvEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI4ui(&self, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (self.VertexAttribI4ui.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribI4uiEXT(&self, index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> c_void { unsafe { (self.VertexAttribI4uiEXT.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4uiv(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttribI4uiv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4uivEXT(&self, index: GLuint, v: *GLuint) -> c_void { (self.VertexAttribI4uivEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4usv(&self, index: GLuint, v: *GLushort) -> c_void { (self.VertexAttribI4usv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribI4usvEXT(&self, index: GLuint, v: *GLushort) -> c_void { (self.VertexAttribI4usvEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribIFormat(&self, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { (self.VertexAttribIFormat.f)(attribindex, size, type_, relativeoffset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribIFormatNV(&self, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.VertexAttribIFormatNV.f)(index, size, type_, stride) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribIPointer(&self, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexAttribIPointer.f)(index, size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribIPointerEXT(&self, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexAttribIPointerEXT.f)(index, size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL1d(&self, index: GLuint, x: GLdouble) -> c_void { unsafe { (self.VertexAttribL1d.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL1dEXT(&self, index: GLuint, x: GLdouble) -> c_void { unsafe { (self.VertexAttribL1dEXT.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL1dv(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttribL1dv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL1dvEXT(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttribL1dvEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL1i64NV(&self, index: GLuint, x: GLint64EXT) -> c_void { unsafe { (self.VertexAttribL1i64NV.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL1i64vNV(&self, index: GLuint, v: *GLint64EXT) -> c_void { (self.VertexAttribL1i64vNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL1ui64ARB(&self, index: GLuint, x: GLuint64EXT) -> c_void { unsafe { (self.VertexAttribL1ui64ARB.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL1ui64NV(&self, index: GLuint, x: GLuint64EXT) -> c_void { unsafe { (self.VertexAttribL1ui64NV.f)(index, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL1ui64vARB(&self, index: GLuint, v: *GLuint64EXT) -> c_void { (self.VertexAttribL1ui64vARB.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL1ui64vNV(&self, index: GLuint, v: *GLuint64EXT) -> c_void { (self.VertexAttribL1ui64vNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL2d(&self, index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.VertexAttribL2d.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL2dEXT(&self, index: GLuint, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.VertexAttribL2dEXT.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL2dv(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttribL2dv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL2dvEXT(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttribL2dvEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL2i64NV(&self, index: GLuint, x: GLint64EXT, y: GLint64EXT) -> c_void { unsafe { (self.VertexAttribL2i64NV.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL2i64vNV(&self, index: GLuint, v: *GLint64EXT) -> c_void { (self.VertexAttribL2i64vNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL2ui64NV(&self, index: GLuint, x: GLuint64EXT, y: GLuint64EXT) -> c_void { unsafe { (self.VertexAttribL2ui64NV.f)(index, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL2ui64vNV(&self, index: GLuint, v: *GLuint64EXT) -> c_void { (self.VertexAttribL2ui64vNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL3d(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.VertexAttribL3d.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL3dEXT(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.VertexAttribL3dEXT.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL3dv(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttribL3dv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL3dvEXT(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttribL3dvEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL3i64NV(&self, index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT) -> c_void { unsafe { (self.VertexAttribL3i64NV.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL3i64vNV(&self, index: GLuint, v: *GLint64EXT) -> c_void { (self.VertexAttribL3i64vNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL3ui64NV(&self, index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT) -> c_void { unsafe { (self.VertexAttribL3ui64NV.f)(index, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL3ui64vNV(&self, index: GLuint, v: *GLuint64EXT) -> c_void { (self.VertexAttribL3ui64vNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL4d(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.VertexAttribL4d.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL4dEXT(&self, index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.VertexAttribL4dEXT.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL4dv(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttribL4dv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL4dvEXT(&self, index: GLuint, v: *GLdouble) -> c_void { (self.VertexAttribL4dvEXT.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL4i64NV(&self, index: GLuint, x: GLint64EXT, y: GLint64EXT, z: GLint64EXT, w: GLint64EXT) -> c_void { unsafe { (self.VertexAttribL4i64NV.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL4i64vNV(&self, index: GLuint, v: *GLint64EXT) -> c_void { (self.VertexAttribL4i64vNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribL4ui64NV(&self, index: GLuint, x: GLuint64EXT, y: GLuint64EXT, z: GLuint64EXT, w: GLuint64EXT) -> c_void { unsafe { (self.VertexAttribL4ui64NV.f)(index, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribL4ui64vNV(&self, index: GLuint, v: *GLuint64EXT) -> c_void { (self.VertexAttribL4ui64vNV.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribLFormat(&self, attribindex: GLuint, size: GLint, type_: GLenum, relativeoffset: GLuint) -> c_void { unsafe { (self.VertexAttribLFormat.f)(attribindex, size, type_, relativeoffset) } }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribLFormatNV(&self, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.VertexAttribLFormatNV.f)(index, size, type_, stride) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribLPointer(&self, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexAttribLPointer.f)(index, size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribLPointerEXT(&self, index: GLuint, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexAttribLPointerEXT.f)(index, size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribP1ui(&self, index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { (self.VertexAttribP1ui.f)(index, type_, normalized, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribP1uiv(&self, index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { (self.VertexAttribP1uiv.f)(index, type_, normalized, value) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribP2ui(&self, index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { (self.VertexAttribP2ui.f)(index, type_, normalized, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribP2uiv(&self, index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { (self.VertexAttribP2uiv.f)(index, type_, normalized, value) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribP3ui(&self, index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { (self.VertexAttribP3ui.f)(index, type_, normalized, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribP3uiv(&self, index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { (self.VertexAttribP3uiv.f)(index, type_, normalized, value) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribP4ui(&self, index: GLuint, type_: GLenum, normalized: GLboolean, value: GLuint) -> c_void { unsafe { (self.VertexAttribP4ui.f)(index, type_, normalized, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribP4uiv(&self, index: GLuint, type_: GLenum, normalized: GLboolean, value: *GLuint) -> c_void { (self.VertexAttribP4uiv.f)(index, type_, normalized, value) }
    #[fixed_stack_segment] #[inline] pub fn VertexAttribParameteriAMD(&self, index: GLuint, pname: GLenum, param: GLint) -> c_void { unsafe { (self.VertexAttribParameteriAMD.f)(index, pname, param) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribPointer(&self, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexAttribPointer.f)(index, size, type_, normalized, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribPointerARB(&self, index: GLuint, size: GLint, type_: GLenum, normalized: GLboolean, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexAttribPointerARB.f)(index, size, type_, normalized, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribPointerNV(&self, index: GLuint, fsize: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexAttribPointerNV.f)(index, fsize, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs1dvNV(&self, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { (self.VertexAttribs1dvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs1fvNV(&self, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { (self.VertexAttribs1fvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs1hvNV(&self, index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { (self.VertexAttribs1hvNV.f)(index, n, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs1svNV(&self, index: GLuint, count: GLsizei, v: *GLshort) -> c_void { (self.VertexAttribs1svNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs2dvNV(&self, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { (self.VertexAttribs2dvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs2fvNV(&self, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { (self.VertexAttribs2fvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs2hvNV(&self, index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { (self.VertexAttribs2hvNV.f)(index, n, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs2svNV(&self, index: GLuint, count: GLsizei, v: *GLshort) -> c_void { (self.VertexAttribs2svNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs3dvNV(&self, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { (self.VertexAttribs3dvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs3fvNV(&self, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { (self.VertexAttribs3fvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs3hvNV(&self, index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { (self.VertexAttribs3hvNV.f)(index, n, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs3svNV(&self, index: GLuint, count: GLsizei, v: *GLshort) -> c_void { (self.VertexAttribs3svNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs4dvNV(&self, index: GLuint, count: GLsizei, v: *GLdouble) -> c_void { (self.VertexAttribs4dvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs4fvNV(&self, index: GLuint, count: GLsizei, v: *GLfloat) -> c_void { (self.VertexAttribs4fvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs4hvNV(&self, index: GLuint, n: GLsizei, v: *GLhalfNV) -> c_void { (self.VertexAttribs4hvNV.f)(index, n, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs4svNV(&self, index: GLuint, count: GLsizei, v: *GLshort) -> c_void { (self.VertexAttribs4svNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexAttribs4ubvNV(&self, index: GLuint, count: GLsizei, v: *GLubyte) -> c_void { (self.VertexAttribs4ubvNV.f)(index, count, v) }
    #[fixed_stack_segment] #[inline] pub fn VertexBindingDivisor(&self, bindingindex: GLuint, divisor: GLuint) -> c_void { unsafe { (self.VertexBindingDivisor.f)(bindingindex, divisor) } }
    #[fixed_stack_segment] #[inline] pub fn VertexBlendARB(&self, count: GLint) -> c_void { unsafe { (self.VertexBlendARB.f)(count) } }
    #[fixed_stack_segment] #[inline] pub fn VertexBlendEnvfATI(&self, pname: GLenum, param: GLfloat) -> c_void { unsafe { (self.VertexBlendEnvfATI.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn VertexBlendEnviATI(&self, pname: GLenum, param: GLint) -> c_void { unsafe { (self.VertexBlendEnviATI.f)(pname, param) } }
    #[fixed_stack_segment] #[inline] pub fn VertexFormatNV(&self, size: GLint, type_: GLenum, stride: GLsizei) -> c_void { unsafe { (self.VertexFormatNV.f)(size, type_, stride) } }
    #[fixed_stack_segment] #[inline] pub fn VertexP2ui(&self, type_: GLenum, value: GLuint) -> c_void { unsafe { (self.VertexP2ui.f)(type_, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexP2uiv(&self, type_: GLenum, value: *GLuint) -> c_void { (self.VertexP2uiv.f)(type_, value) }
    #[fixed_stack_segment] #[inline] pub fn VertexP3ui(&self, type_: GLenum, value: GLuint) -> c_void { unsafe { (self.VertexP3ui.f)(type_, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexP3uiv(&self, type_: GLenum, value: *GLuint) -> c_void { (self.VertexP3uiv.f)(type_, value) }
    #[fixed_stack_segment] #[inline] pub fn VertexP4ui(&self, type_: GLenum, value: GLuint) -> c_void { unsafe { (self.VertexP4ui.f)(type_, value) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexP4uiv(&self, type_: GLenum, value: *GLuint) -> c_void { (self.VertexP4uiv.f)(type_, value) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexPointer(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexPointer.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexPointerEXT(&self, size: GLint, type_: GLenum, stride: GLsizei, count: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexPointerEXT.f)(size, type_, stride, count, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexPointerListIBM(&self, size: GLint, type_: GLenum, stride: GLint, pointer: **GLvoid, ptrstride: GLint) -> c_void { (self.VertexPointerListIBM.f)(size, type_, stride, pointer, ptrstride) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexPointervINTEL(&self, size: GLint, type_: GLenum, pointer: **GLvoid) -> c_void { (self.VertexPointervINTEL.f)(size, type_, pointer) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream1dATI(&self, stream: GLenum, x: GLdouble) -> c_void { unsafe { (self.VertexStream1dATI.f)(stream, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream1dvATI(&self, stream: GLenum, coords: *GLdouble) -> c_void { (self.VertexStream1dvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream1fATI(&self, stream: GLenum, x: GLfloat) -> c_void { unsafe { (self.VertexStream1fATI.f)(stream, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream1fvATI(&self, stream: GLenum, coords: *GLfloat) -> c_void { (self.VertexStream1fvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream1iATI(&self, stream: GLenum, x: GLint) -> c_void { unsafe { (self.VertexStream1iATI.f)(stream, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream1ivATI(&self, stream: GLenum, coords: *GLint) -> c_void { (self.VertexStream1ivATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream1sATI(&self, stream: GLenum, x: GLshort) -> c_void { unsafe { (self.VertexStream1sATI.f)(stream, x) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream1svATI(&self, stream: GLenum, coords: *GLshort) -> c_void { (self.VertexStream1svATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream2dATI(&self, stream: GLenum, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.VertexStream2dATI.f)(stream, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream2dvATI(&self, stream: GLenum, coords: *GLdouble) -> c_void { (self.VertexStream2dvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream2fATI(&self, stream: GLenum, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.VertexStream2fATI.f)(stream, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream2fvATI(&self, stream: GLenum, coords: *GLfloat) -> c_void { (self.VertexStream2fvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream2iATI(&self, stream: GLenum, x: GLint, y: GLint) -> c_void { unsafe { (self.VertexStream2iATI.f)(stream, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream2ivATI(&self, stream: GLenum, coords: *GLint) -> c_void { (self.VertexStream2ivATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream2sATI(&self, stream: GLenum, x: GLshort, y: GLshort) -> c_void { unsafe { (self.VertexStream2sATI.f)(stream, x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream2svATI(&self, stream: GLenum, coords: *GLshort) -> c_void { (self.VertexStream2svATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream3dATI(&self, stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.VertexStream3dATI.f)(stream, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream3dvATI(&self, stream: GLenum, coords: *GLdouble) -> c_void { (self.VertexStream3dvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream3fATI(&self, stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.VertexStream3fATI.f)(stream, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream3fvATI(&self, stream: GLenum, coords: *GLfloat) -> c_void { (self.VertexStream3fvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream3iATI(&self, stream: GLenum, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (self.VertexStream3iATI.f)(stream, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream3ivATI(&self, stream: GLenum, coords: *GLint) -> c_void { (self.VertexStream3ivATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream3sATI(&self, stream: GLenum, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.VertexStream3sATI.f)(stream, x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream3svATI(&self, stream: GLenum, coords: *GLshort) -> c_void { (self.VertexStream3svATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream4dATI(&self, stream: GLenum, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.VertexStream4dATI.f)(stream, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream4dvATI(&self, stream: GLenum, coords: *GLdouble) -> c_void { (self.VertexStream4dvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream4fATI(&self, stream: GLenum, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.VertexStream4fATI.f)(stream, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream4fvATI(&self, stream: GLenum, coords: *GLfloat) -> c_void { (self.VertexStream4fvATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream4iATI(&self, stream: GLenum, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.VertexStream4iATI.f)(stream, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream4ivATI(&self, stream: GLenum, coords: *GLint) -> c_void { (self.VertexStream4ivATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub fn VertexStream4sATI(&self, stream: GLenum, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (self.VertexStream4sATI.f)(stream, x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexStream4svATI(&self, stream: GLenum, coords: *GLshort) -> c_void { (self.VertexStream4svATI.f)(stream, coords) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexWeightPointerEXT(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.VertexWeightPointerEXT.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub fn VertexWeightfEXT(&self, weight: GLfloat) -> c_void { unsafe { (self.VertexWeightfEXT.f)(weight) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexWeightfvEXT(&self, weight: *GLfloat) -> c_void { (self.VertexWeightfvEXT.f)(weight) }
    #[fixed_stack_segment] #[inline] pub fn VertexWeighthNV(&self, weight: GLhalfNV) -> c_void { unsafe { (self.VertexWeighthNV.f)(weight) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn VertexWeighthvNV(&self, weight: *GLhalfNV) -> c_void { (self.VertexWeighthvNV.f)(weight) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VideoCaptureNV(&self, video_capture_slot: GLuint, sequence_num: *GLuint, capture_time: *GLuint64EXT) -> GLenum { (self.VideoCaptureNV.f)(video_capture_slot, sequence_num, capture_time) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VideoCaptureStreamParameterdvNV(&self, video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLdouble) -> c_void { (self.VideoCaptureStreamParameterdvNV.f)(video_capture_slot, stream, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VideoCaptureStreamParameterfvNV(&self, video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLfloat) -> c_void { (self.VideoCaptureStreamParameterfvNV.f)(video_capture_slot, stream, pname, params) }
    #[fixed_stack_segment] #[inline] pub unsafe fn VideoCaptureStreamParameterivNV(&self, video_capture_slot: GLuint, stream: GLuint, pname: GLenum, params: *GLint) -> c_void { (self.VideoCaptureStreamParameterivNV.f)(video_capture_slot, stream, pname, params) }
    #[fixed_stack_segment] #[inline] pub fn Viewport(&self, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> c_void { unsafe { (self.Viewport.f)(x, y, width, height) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ViewportArrayv(&self, first: GLuint, count: GLsizei, v: *GLfloat) -> c_void { (self.ViewportArrayv.f)(first, count, v) }
    #[fixed_stack_segment] #[inline] pub fn ViewportIndexedf(&self, index: GLuint, x: GLfloat, y: GLfloat, w: GLfloat, h: GLfloat) -> c_void { unsafe { (self.ViewportIndexedf.f)(index, x, y, w, h) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn ViewportIndexedfv(&self, index: GLuint, v: *GLfloat) -> c_void { (self.ViewportIndexedfv.f)(index, v) }
    #[fixed_stack_segment] #[inline] pub fn WaitSync(&self, sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void { unsafe { (self.WaitSync.f)(sync, flags, timeout) } }
    #[fixed_stack_segment] #[inline] pub fn WaitSyncAPPLE(&self, sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> c_void { unsafe { (self.WaitSyncAPPLE.f)(sync, flags, timeout) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightPathsNV(&self, resultPath: GLuint, numPaths: GLsizei, paths: *GLuint, weights: *GLfloat) -> c_void { (self.WeightPathsNV.f)(resultPath, numPaths, paths, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightPointerARB(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.WeightPointerARB.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightPointerOES(&self, size: GLint, type_: GLenum, stride: GLsizei, pointer: *GLvoid) -> c_void { (self.WeightPointerOES.f)(size, type_, stride, pointer) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightbvARB(&self, size: GLint, weights: *GLbyte) -> c_void { (self.WeightbvARB.f)(size, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightdvARB(&self, size: GLint, weights: *GLdouble) -> c_void { (self.WeightdvARB.f)(size, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightfvARB(&self, size: GLint, weights: *GLfloat) -> c_void { (self.WeightfvARB.f)(size, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightivARB(&self, size: GLint, weights: *GLint) -> c_void { (self.WeightivARB.f)(size, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightsvARB(&self, size: GLint, weights: *GLshort) -> c_void { (self.WeightsvARB.f)(size, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightubvARB(&self, size: GLint, weights: *GLubyte) -> c_void { (self.WeightubvARB.f)(size, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightuivARB(&self, size: GLint, weights: *GLuint) -> c_void { (self.WeightuivARB.f)(size, weights) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WeightusvARB(&self, size: GLint, weights: *GLushort) -> c_void { (self.WeightusvARB.f)(size, weights) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2d(&self, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.WindowPos2d.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2dARB(&self, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.WindowPos2dARB.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2dMESA(&self, x: GLdouble, y: GLdouble) -> c_void { unsafe { (self.WindowPos2dMESA.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2dv(&self, v: *GLdouble) -> c_void { (self.WindowPos2dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2dvARB(&self, v: *GLdouble) -> c_void { (self.WindowPos2dvARB.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2dvMESA(&self, v: *GLdouble) -> c_void { (self.WindowPos2dvMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2f(&self, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.WindowPos2f.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2fARB(&self, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.WindowPos2fARB.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2fMESA(&self, x: GLfloat, y: GLfloat) -> c_void { unsafe { (self.WindowPos2fMESA.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2fv(&self, v: *GLfloat) -> c_void { (self.WindowPos2fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2fvARB(&self, v: *GLfloat) -> c_void { (self.WindowPos2fvARB.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2fvMESA(&self, v: *GLfloat) -> c_void { (self.WindowPos2fvMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2i(&self, x: GLint, y: GLint) -> c_void { unsafe { (self.WindowPos2i.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2iARB(&self, x: GLint, y: GLint) -> c_void { unsafe { (self.WindowPos2iARB.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2iMESA(&self, x: GLint, y: GLint) -> c_void { unsafe { (self.WindowPos2iMESA.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2iv(&self, v: *GLint) -> c_void { (self.WindowPos2iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2ivARB(&self, v: *GLint) -> c_void { (self.WindowPos2ivARB.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2ivMESA(&self, v: *GLint) -> c_void { (self.WindowPos2ivMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2s(&self, x: GLshort, y: GLshort) -> c_void { unsafe { (self.WindowPos2s.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2sARB(&self, x: GLshort, y: GLshort) -> c_void { unsafe { (self.WindowPos2sARB.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos2sMESA(&self, x: GLshort, y: GLshort) -> c_void { unsafe { (self.WindowPos2sMESA.f)(x, y) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2sv(&self, v: *GLshort) -> c_void { (self.WindowPos2sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2svARB(&self, v: *GLshort) -> c_void { (self.WindowPos2svARB.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos2svMESA(&self, v: *GLshort) -> c_void { (self.WindowPos2svMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3d(&self, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.WindowPos3d.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3dARB(&self, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.WindowPos3dARB.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3dMESA(&self, x: GLdouble, y: GLdouble, z: GLdouble) -> c_void { unsafe { (self.WindowPos3dMESA.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3dv(&self, v: *GLdouble) -> c_void { (self.WindowPos3dv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3dvARB(&self, v: *GLdouble) -> c_void { (self.WindowPos3dvARB.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3dvMESA(&self, v: *GLdouble) -> c_void { (self.WindowPos3dvMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3f(&self, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.WindowPos3f.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3fARB(&self, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.WindowPos3fARB.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3fMESA(&self, x: GLfloat, y: GLfloat, z: GLfloat) -> c_void { unsafe { (self.WindowPos3fMESA.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3fv(&self, v: *GLfloat) -> c_void { (self.WindowPos3fv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3fvARB(&self, v: *GLfloat) -> c_void { (self.WindowPos3fvARB.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3fvMESA(&self, v: *GLfloat) -> c_void { (self.WindowPos3fvMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3i(&self, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (self.WindowPos3i.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3iARB(&self, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (self.WindowPos3iARB.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3iMESA(&self, x: GLint, y: GLint, z: GLint) -> c_void { unsafe { (self.WindowPos3iMESA.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3iv(&self, v: *GLint) -> c_void { (self.WindowPos3iv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3ivARB(&self, v: *GLint) -> c_void { (self.WindowPos3ivARB.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3ivMESA(&self, v: *GLint) -> c_void { (self.WindowPos3ivMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3s(&self, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.WindowPos3s.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3sARB(&self, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.WindowPos3sARB.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub fn WindowPos3sMESA(&self, x: GLshort, y: GLshort, z: GLshort) -> c_void { unsafe { (self.WindowPos3sMESA.f)(x, y, z) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3sv(&self, v: *GLshort) -> c_void { (self.WindowPos3sv.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3svARB(&self, v: *GLshort) -> c_void { (self.WindowPos3svARB.f)(v) }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos3svMESA(&self, v: *GLshort) -> c_void { (self.WindowPos3svMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos4dMESA(&self, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) -> c_void { unsafe { (self.WindowPos4dMESA.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos4dvMESA(&self, v: *GLdouble) -> c_void { (self.WindowPos4dvMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos4fMESA(&self, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> c_void { unsafe { (self.WindowPos4fMESA.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos4fvMESA(&self, v: *GLfloat) -> c_void { (self.WindowPos4fvMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos4iMESA(&self, x: GLint, y: GLint, z: GLint, w: GLint) -> c_void { unsafe { (self.WindowPos4iMESA.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos4ivMESA(&self, v: *GLint) -> c_void { (self.WindowPos4ivMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WindowPos4sMESA(&self, x: GLshort, y: GLshort, z: GLshort, w: GLshort) -> c_void { unsafe { (self.WindowPos4sMESA.f)(x, y, z, w) } }
    #[fixed_stack_segment] #[inline] pub unsafe fn WindowPos4svMESA(&self, v: *GLshort) -> c_void { (self.WindowPos4svMESA.f)(v) }
    #[fixed_stack_segment] #[inline] pub fn WriteMaskEXT(&self, res: GLuint, in_: GLuint, outX: GLenum, outY: GLenum, outZ: GLenum, outW: GLenum) -> c_void { unsafe { (self.WriteMaskEXT.f)(res, in_, outX, outY, outZ, outW) } }
}

